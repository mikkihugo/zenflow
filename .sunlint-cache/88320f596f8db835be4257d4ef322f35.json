{
  "key": "88320f596f8db835be4257d4ef322f35",
  "value": [
    {
      "rule": "C003",
      "line": 244,
      "column": 0,
      "severity": "warning",
      "message": "Variable name 's' used in Array.from(this.standards.values()).find((s) => ...) is an arbitrary abbreviation.",
      "suggestion": "Rename 's' to 'standard' for clarity.",
      "codeSnippet": "readonly timeWindow:  {",
      "filePath": "/home/mhugo/code/zenflow/packages/services/coordination/src/safe/services/enterprise-architecture/technology-standards-service.ts",
      "category": "code_quality",
      "categoryName": "Code Quality",
      "analysisMode": "medium",
      "confidence": 0.9
    },
    {
      "rule": "C003",
      "line": 313,
      "column": 0,
      "severity": "warning",
      "message": "Variable name 's' used in Array.from(this.standards.values()).filter((s) => ...) is an arbitrary abbreviation.",
      "suggestion": "Rename 's' to 'standard' for clarity.",
      "codeSnippet": "if (existingStandard) {",
      "filePath": "/home/mhugo/code/zenflow/packages/services/coordination/src/safe/services/enterprise-architecture/technology-standards-service.ts",
      "category": "code_quality",
      "categoryName": "Code Quality",
      "analysisMode": "medium",
      "confidence": 0.9
    },
    {
      "rule": "C003",
      "line": 323,
      "column": 0,
      "severity": "warning",
      "message": "Variable name 's' used in Array.from(this.standards.values()).filter((s) => ...) is an arbitrary abbreviation.",
      "suggestion": "Rename 's' to 'standard' for clarity.",
      "codeSnippet": "'        entity: 'draft,',",
      "filePath": "/home/mhugo/code/zenflow/packages/services/coordination/src/safe/services/enterprise-architecture/technology-standards-service.ts",
      "category": "code_quality",
      "categoryName": "Code Quality",
      "analysisMode": "medium",
      "confidence": 0.9
    },
    {
      "rule": "C029",
      "line": 258,
      "column": 0,
      "severity": "warning",
      "message": "Catch block does not log error stack trace or context information.",
      "suggestion": "Log error.stack and relevant context (e.g., request parameters) in the catch block.",
      "codeSnippet": "export interface ComplianceRiskAssessment {",
      "filePath": "/home/mhugo/code/zenflow/packages/services/coordination/src/safe/services/enterprise-architecture/technology-standards-service.ts",
      "category": "code_quality",
      "categoryName": "Code Quality",
      "analysisMode": "medium",
      "confidence": 0.85
    },
    {
      "rule": "C029",
      "line": 296,
      "column": 0,
      "severity": "warning",
      "message": "Catch block does not log error stack trace or context information.",
      "suggestion": "Log error.stack and relevant context (e.g., standardId, input parameters) in the catch block.",
      "codeSnippet": "this.initialized = true;",
      "filePath": "/home/mhugo/code/zenflow/packages/services/coordination/src/safe/services/enterprise-architecture/technology-standards-service.ts",
      "category": "code_quality",
      "categoryName": "Code Quality",
      "analysisMode": "medium",
      "confidence": 0.85
    },
    {
      "rule": "S001",
      "line": 92,
      "column": 0,
      "severity": "warning",
      "message": "Access control error handling may leak error details and does not explicitly deny access on error.",
      "suggestion": "On access control errors, ensure the system denies access and returns a generic error message without sensitive details.",
      "codeSnippet": "}",
      "filePath": "/home/mhugo/code/zenflow/packages/services/coordination/src/safe/services/enterprise-architecture/technology-standards-service.ts",
      "category": "security",
      "categoryName": "Security",
      "analysisMode": "medium",
      "confidence": 0.85
    },
    {
      "rule": "S002",
      "line": 152,
      "column": 0,
      "severity": "warning",
      "message": "getStandard method retrieves standard by ID without verifying resource ownership or authorization.",
      "suggestion": "Add backend authorization logic to verify the current user's ownership or access rights before returning the resource.",
      "codeSnippet": "export interface VerificationReporting {",
      "filePath": "/home/mhugo/code/zenflow/packages/services/coordination/src/safe/services/enterprise-architecture/technology-standards-service.ts",
      "category": "security",
      "categoryName": "Security",
      "analysisMode": "medium",
      "confidence": 0.85
    },
    {
      "rule": "S003",
      "line": 0,
      "column": 0,
      "severity": "warning",
      "message": "No allow list or validation for URL redirects detected in the codebase.",
      "suggestion": "Implement an allow list for redirect URLs and validate user-provided URLs before executing any redirects.",
      "codeSnippet": "/**",
      "filePath": "/home/mhugo/code/zenflow/packages/services/coordination/src/safe/services/enterprise-architecture/technology-standards-service.ts",
      "category": "security",
      "categoryName": "Security",
      "analysisMode": "medium",
      "confidence": 0.85
    }
  ],
  "timestamp": 1756493140277,
  "version": "1.0.0",
  "fileHash": ""
}
