{
  "key": "d604a9e7bea3c29efa5a70125111e476",
  "value": [
    {
      "rule": "C019",
      "line": 38,
      "column": 0,
      "severity": "warning",
      "message": "logger.error used for recoverable failure in getTaskMaster; not a critical system failure.",
      "suggestion": "Use logger.warn or logger.info for non-critical errors that do not crash the system.",
      "codeSnippet": "database,",
      "filePath": "/home/mhugo/code/zenflow/packages/services/coordination/src/taskmaster/main.ts",
      "category": "code_quality",
      "categoryName": "Code Quality",
      "analysisMode": "medium",
      "confidence": 0.85
    },
    {
      "rule": "C029",
      "line": 38,
      "column": 0,
      "severity": "warning",
      "message": "Error log in catch block does not include error message or stack trace.",
      "suggestion": "Log error.message and error.stack for better debugging context.",
      "codeSnippet": "database,",
      "filePath": "/home/mhugo/code/zenflow/packages/services/coordination/src/taskmaster/main.ts",
      "category": "code_quality",
      "categoryName": "Code Quality",
      "analysisMode": "medium",
      "confidence": 0.85
    },
    {
      "rule": "C019",
      "line": 60,
      "column": 0,
      "severity": "warning",
      "message": "logger.error used for recoverable failure in createTaskMaster; not a critical system failure.",
      "suggestion": "Use logger.warn or logger.info for non-critical errors that do not crash the system.",
      "codeSnippet": "const kanban = new KanbanEngine(config);",
      "filePath": "/home/mhugo/code/zenflow/packages/services/coordination/src/taskmaster/main.ts",
      "category": "code_quality",
      "categoryName": "Code Quality",
      "analysisMode": "medium",
      "confidence": 0.85
    },
    {
      "rule": "C029",
      "line": 60,
      "column": 0,
      "severity": "warning",
      "message": "Error log in catch block does not include error message or stack trace.",
      "suggestion": "Log error.message and error.stack for better debugging context.",
      "codeSnippet": "const kanban = new KanbanEngine(config);",
      "filePath": "/home/mhugo/code/zenflow/packages/services/coordination/src/taskmaster/main.ts",
      "category": "code_quality",
      "categoryName": "Code Quality",
      "analysisMode": "medium",
      "confidence": 0.85
    },
    {
      "rule": "S001",
      "line": 43,
      "column": 0,
      "severity": "warning",
      "message": "Access control error handling does not explicitly deny access on failure; it throws the error, which may result in ambiguous behavior.",
      "suggestion": "Ensure that access control failures result in a denied state, not just error propagation. Explicitly deny access when errors occur in access control logic.",
      "codeSnippet": "}",
      "filePath": "/home/mhugo/code/zenflow/packages/services/coordination/src/taskmaster/main.ts",
      "category": "security",
      "categoryName": "Security",
      "analysisMode": "medium",
      "confidence": 0.85
    },
    {
      "rule": "S001",
      "line": 69,
      "column": 0,
      "severity": "warning",
      "message": "Access control error handling does not explicitly deny access on failure; it throws the error, which may result in ambiguous behavior.",
      "suggestion": "Ensure that access control failures result in a denied state, not just error propagation. Explicitly deny access when errors occur in access control logic.",
      "codeSnippet": "await kanban.initialize();",
      "filePath": "/home/mhugo/code/zenflow/packages/services/coordination/src/taskmaster/main.ts",
      "category": "security",
      "categoryName": "Security",
      "analysisMode": "medium",
      "confidence": 0.85
    }
  ],
  "timestamp": 1756491163528,
  "version": "1.0.0",
  "fileHash": ""
}