{
  "key": "764b41f3460d340d558c9ca3fa328c0f",
  "value": [
    {
      "rule": "C003",
      "line": 40,
      "column": 0,
      "severity": "warning",
      "message": "Variable 'g' in 'assessment-${g}enerateNanoId(12)' is an unclear abbreviation.",
      "suggestion": "Rename 'g' to a more descriptive name indicating its purpose, such as 'generator' or 'idPrefix'.",
      "codeSnippet": "const complianceStatus:  {",
      "filePath": "/home/mhugo/code/zenflow/packages/services/coordination/src/safe/services/devsecops/compliance-monitoring-service.ts",
      "category": "code_quality",
      "categoryName": "Code Quality",
      "analysisMode": "medium",
      "confidence": 0.85
    },
    {
      "rule": "C006",
      "line": 108,
      "column": 0,
      "severity": "warning",
      "message": "Function name 'summarizeRequirements' is a noun-verb combination; should be verb-noun or verb only.",
      "suggestion": "Rename function to 'getRequirementsSummary' or 'summarizeRequirementStatus'.",
      "codeSnippet": "):number {",
      "filePath": "/home/mhugo/code/zenflow/packages/services/coordination/src/safe/services/devsecops/compliance-monitoring-service.ts",
      "category": "code_quality",
      "categoryName": "Code Quality",
      "analysisMode": "medium",
      "confidence": 0.85
    },
    {
      "rule": "C019",
      "line": 80,
      "column": 0,
      "severity": "warning",
      "message": "Logger uses 'error' level for validation rule execution failure, which may not be a critical issue.",
      "suggestion": "Use 'warn' or 'info' log level for recoverable validation failures.",
      "codeSnippet": ");",
      "filePath": "/home/mhugo/code/zenflow/packages/services/coordination/src/safe/services/devsecops/compliance-monitoring-service.ts",
      "category": "code_quality",
      "categoryName": "Code Quality",
      "analysisMode": "medium",
      "confidence": 0.85
    },
    {
      "rule": "C029",
      "line": 80,
      "column": 0,
      "severity": "warning",
      "message": "Catch block logs only a message, missing stack trace and context information.",
      "suggestion": "Log both error.message and error.stack, and include relevant context such as ruleId or input parameters.",
      "codeSnippet": ");",
      "filePath": "/home/mhugo/code/zenflow/packages/services/coordination/src/safe/services/devsecops/compliance-monitoring-service.ts",
      "category": "code_quality",
      "categoryName": "Code Quality",
      "analysisMode": "medium",
      "confidence": 0.85
    },
    {
      "rule": "S001",
      "line": 18,
      "column": 0,
      "severity": "warning",
      "message": "Access control error handling may not securely deny access; missing explicit deny on error.",
      "suggestion": "Ensure that any error in access control logic results in access being denied, not allowed by default.",
      "codeSnippet": "* Configure compliance monitoring",
      "filePath": "/home/mhugo/code/zenflow/packages/services/coordination/src/safe/services/devsecops/compliance-monitoring-service.ts",
      "category": "security",
      "categoryName": "Security",
      "analysisMode": "medium",
      "confidence": 0.85
    },
    {
      "rule": "S002",
      "line": 40,
      "column": 0,
      "severity": "warning",
      "message": "Resource access controlled by frameworkId from client without ownership verification.",
      "suggestion": "Verify resource ownership on the backend before allowing access or modification based on IDs.",
      "codeSnippet": "const complianceStatus:  {",
      "filePath": "/home/mhugo/code/zenflow/packages/services/coordination/src/safe/services/devsecops/compliance-monitoring-service.ts",
      "category": "security",
      "categoryName": "Security",
      "analysisMode": "medium",
      "confidence": 0.85
    },
    {
      "rule": "S003",
      "line": 69,
      "column": 0,
      "severity": "warning",
      "message": "Potential dynamic redirect or report generation using user input without allow list validation.",
      "suggestion": "Validate all redirect URLs or dynamic report destinations against a strict allow list before execution.",
      "codeSnippet": "const evidence = this.collectEvidence(requirement.evidenceRequirements);",
      "filePath": "/home/mhugo/code/zenflow/packages/services/coordination/src/safe/services/devsecops/compliance-monitoring-service.ts",
      "category": "security",
      "categoryName": "Security",
      "analysisMode": "medium",
      "confidence": 0.85
    }
  ],
  "timestamp": 1756493064657,
  "version": "1.0.0",
  "fileHash": ""
}
