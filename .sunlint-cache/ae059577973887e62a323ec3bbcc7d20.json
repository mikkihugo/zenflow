{
  "key": "ae059577973887e62a323ec3bbcc7d20",
  "value": [
    {
      "rule": "C003",
      "line": 51,
      "column": 0,
      "severity": "warning",
      "message": "Variable '_stats' uses an uncommon abbreviation and is not descriptive.",
      "suggestion": "Rename '_stats' to 'stats' for clarity and consistency.",
      "codeSnippet": "this.logger = getLogger('InternalOTELCollector');",
      "filePath": "/home/mhugo/code/zenflow/packages/integrations/otel-collector/src/collector.ts",
      "category": "code_quality",
      "categoryName": "Code Quality",
      "analysisMode": "medium",
      "confidence": 0.85
    },
    {
      "rule": "C003",
      "line": 177,
      "column": 0,
      "severity": "warning",
      "message": "Variable '__stats' uses an uncommon abbreviation and is not descriptive.",
      "suggestion": "Rename '__stats' to 'stats' for clarity and consistency.",
      "codeSnippet": "const failed = results.filter((r) => r.status === 'rejected').length;",
      "filePath": "/home/mhugo/code/zenflow/packages/integrations/otel-collector/src/collector.ts",
      "category": "code_quality",
      "categoryName": "Code Quality",
      "analysisMode": "medium",
      "confidence": 0.85
    },
    {
      "rule": "C006",
      "line": 245,
      "column": 0,
      "severity": "warning",
      "message": "Function name 'getOTELCollector' is a noun phrase; should be verb or verb-noun combination.",
      "suggestion": "Rename to 'createOTELCollector' or 'fetchOTELCollector'.",
      "codeSnippet": "private async startHttpServer():Promise<void> {",
      "filePath": "/home/mhugo/code/zenflow/packages/integrations/otel-collector/src/collector.ts",
      "category": "code_quality",
      "categoryName": "Code Quality",
      "analysisMode": "medium",
      "confidence": 0.85
    },
    {
      "rule": "C019",
      "line": 73,
      "column": 0,
      "severity": "warning",
      "message": "Using 'error' log level for a startup failure that may be recoverable.",
      "suggestion": "Use 'warn' for recoverable startup issues; reserve 'error' for critical failures.",
      "codeSnippet": "if (this.isRunning) {",
      "filePath": "/home/mhugo/code/zenflow/packages/integrations/otel-collector/src/collector.ts",
      "category": "code_quality",
      "categoryName": "Code Quality",
      "analysisMode": "medium",
      "confidence": 0.85
    },
    {
      "rule": "C019",
      "line": 108,
      "column": 0,
      "severity": "warning",
      "message": "Using 'error' log level for shutdown error that may be recoverable.",
      "suggestion": "Use 'warn' for recoverable shutdown issues; reserve 'error' for critical failures.",
      "codeSnippet": "if (!this.isRunning) return;",
      "filePath": "/home/mhugo/code/zenflow/packages/integrations/otel-collector/src/collector.ts",
      "category": "code_quality",
      "categoryName": "Code Quality",
      "analysisMode": "medium",
      "confidence": 0.85
    },
    {
      "rule": "C019",
      "line": 136,
      "column": 0,
      "severity": "warning",
      "message": "Using 'error' log level for telemetry ingestion failure that may be recoverable.",
      "suggestion": "Use 'warn' for recoverable ingestion failures; reserve 'error' for critical failures.",
      "codeSnippet": "async ingest(data:TelemetryData): Promise<void> {",
      "filePath": "/home/mhugo/code/zenflow/packages/integrations/otel-collector/src/collector.ts",
      "category": "code_quality",
      "categoryName": "Code Quality",
      "analysisMode": "medium",
      "confidence": 0.85
    },
    {
      "rule": "C019",
      "line": 195,
      "column": 0,
      "severity": "warning",
      "message": "Using 'error' log level for batch ingestion failure that may be recoverable.",
      "suggestion": "Use 'warn' for recoverable batch ingestion failures; reserve 'error' for critical failures.",
      "codeSnippet": "heapTotal:memUsage.heapTotal,",
      "filePath": "/home/mhugo/code/zenflow/packages/integrations/otel-collector/src/collector.ts",
      "category": "code_quality",
      "categoryName": "Code Quality",
      "analysisMode": "medium",
      "confidence": 0.85
    },
    {
      "rule": "C019",
      "line": 221,
      "column": 0,
      "severity": "warning",
      "message": "Using 'error' log level for telemetry ingestion endpoint failure that may be recoverable.",
      "suggestion": "Use 'warn' for recoverable endpoint failures; reserve 'error' for critical failures.",
      "codeSnippet": "}",
      "filePath": "/home/mhugo/code/zenflow/packages/integrations/otel-collector/src/collector.ts",
      "category": "code_quality",
      "categoryName": "Code Quality",
      "analysisMode": "medium",
      "confidence": 0.85
    },
    {
      "rule": "C019",
      "line": 231,
      "column": 0,
      "severity": "warning",
      "message": "Using 'error' log level for batch telemetry ingestion endpoint failure that may be recoverable.",
      "suggestion": "Use 'warn' for recoverable endpoint failures; reserve 'error' for critical failures.",
      "codeSnippet": "resources:{",
      "filePath": "/home/mhugo/code/zenflow/packages/integrations/otel-collector/src/collector.ts",
      "category": "code_quality",
      "categoryName": "Code Quality",
      "analysisMode": "medium",
      "confidence": 0.85
    },
    {
      "rule": "C019",
      "line": 264,
      "column": 0,
      "severity": "warning",
      "message": "Using 'error' log level for signal type ingestion failure that may be recoverable.",
      "suggestion": "Use 'warn' for recoverable ingestion failures; reserve 'error' for critical failures.",
      "codeSnippet": "// Stats endpoint",
      "filePath": "/home/mhugo/code/zenflow/packages/integrations/otel-collector/src/collector.ts",
      "category": "code_quality",
      "categoryName": "Code Quality",
      "analysisMode": "medium",
      "confidence": 0.85
    },
    {
      "rule": "C019",
      "line": 284,
      "column": 0,
      "severity": "warning",
      "message": "Using 'error' log level for health check failure that may be recoverable.",
      "suggestion": "Use 'warn' for recoverable health check failures; reserve 'error' for critical failures.",
      "codeSnippet": "await this.handleTelemetryIngestion(req, res, 'logs');",
      "filePath": "/home/mhugo/code/zenflow/packages/integrations/otel-collector/src/collector.ts",
      "category": "code_quality",
      "categoryName": "Code Quality",
      "analysisMode": "medium",
      "confidence": 0.85
    },
    {
      "rule": "C029",
      "line": 73,
      "column": 0,
      "severity": "warning",
      "message": "Catch block logs error object but does not include stack trace or context information.",
      "suggestion": "Log both error.message and error.stack, and include relevant context such as config parameters.",
      "codeSnippet": "if (this.isRunning) {",
      "filePath": "/home/mhugo/code/zenflow/packages/integrations/otel-collector/src/collector.ts",
      "category": "code_quality",
      "categoryName": "Code Quality",
      "analysisMode": "medium",
      "confidence": 0.85
    },
    {
      "rule": "C029",
      "line": 108,
      "column": 0,
      "severity": "warning",
      "message": "Catch block logs error object but does not include stack trace or context information.",
      "suggestion": "Log both error.message and error.stack, and include relevant context such as collector state.",
      "codeSnippet": "if (!this.isRunning) return;",
      "filePath": "/home/mhugo/code/zenflow/packages/integrations/otel-collector/src/collector.ts",
      "category": "code_quality",
      "categoryName": "Code Quality",
      "analysisMode": "medium",
      "confidence": 0.85
    },
    {
      "rule": "C029",
      "line": 136,
      "column": 0,
      "severity": "warning",
      "message": "Catch block logs error object but does not include stack trace or context information.",
      "suggestion": "Log both error.message and error.stack, and include relevant context such as data type and input parameters.",
      "codeSnippet": "async ingest(data:TelemetryData): Promise<void> {",
      "filePath": "/home/mhugo/code/zenflow/packages/integrations/otel-collector/src/collector.ts",
      "category": "code_quality",
      "categoryName": "Code Quality",
      "analysisMode": "medium",
      "confidence": 0.85
    },
    {
      "rule": "C029",
      "line": 195,
      "column": 0,
      "severity": "warning",
      "message": "Catch block logs error object but does not include stack trace or context information.",
      "suggestion": "Log both error.message and error.stack, and include relevant context such as batch size and failed count.",
      "codeSnippet": "heapTotal:memUsage.heapTotal,",
      "filePath": "/home/mhugo/code/zenflow/packages/integrations/otel-collector/src/collector.ts",
      "category": "code_quality",
      "categoryName": "Code Quality",
      "analysisMode": "medium",
      "confidence": 0.85
    },
    {
      "rule": "C029",
      "line": 221,
      "column": 0,
      "severity": "warning",
      "message": "Catch block logs error object but does not include stack trace or context information.",
      "suggestion": "Log both error.message and error.stack, and include relevant context such as endpoint and input parameters.",
      "codeSnippet": "}",
      "filePath": "/home/mhugo/code/zenflow/packages/integrations/otel-collector/src/collector.ts",
      "category": "code_quality",
      "categoryName": "Code Quality",
      "analysisMode": "medium",
      "confidence": 0.85
    },
    {
      "rule": "C029",
      "line": 231,
      "column": 0,
      "severity": "warning",
      "message": "Catch block logs error object but does not include stack trace or context information.",
      "suggestion": "Log both error.message and error.stack, and include relevant context such as endpoint and batch size.",
      "codeSnippet": "resources:{",
      "filePath": "/home/mhugo/code/zenflow/packages/integrations/otel-collector/src/collector.ts",
      "category": "code_quality",
      "categoryName": "Code Quality",
      "analysisMode": "medium",
      "confidence": 0.85
    },
    {
      "rule": "C029",
      "line": 264,
      "column": 0,
      "severity": "warning",
      "message": "Catch block logs error object but does not include stack trace or context information.",
      "suggestion": "Log both error.message and error.stack, and include relevant context such as signal type and input parameters.",
      "codeSnippet": "// Stats endpoint",
      "filePath": "/home/mhugo/code/zenflow/packages/integrations/otel-collector/src/collector.ts",
      "category": "code_quality",
      "categoryName": "Code Quality",
      "analysisMode": "medium",
      "confidence": 0.85
    },
    {
      "rule": "C029",
      "line": 284,
      "column": 0,
      "severity": "warning",
      "message": "Catch block logs error object but does not include stack trace or context information.",
      "suggestion": "Log both error.message and error.stack, and include relevant context such as health check parameters.",
      "codeSnippet": "await this.handleTelemetryIngestion(req, res, 'logs');",
      "filePath": "/home/mhugo/code/zenflow/packages/integrations/otel-collector/src/collector.ts",
      "category": "code_quality",
      "categoryName": "Code Quality",
      "analysisMode": "medium",
      "confidence": 0.85
    },
    {
      "rule": "S002",
      "line": 180,
      "column": 0,
      "severity": "warning",
      "message": "Telemetry ingestion endpoints accept data from client without verifying resource ownership or authorization. No backend check to ensure the resource belongs to the current user.",
      "suggestion": "Implement backend authorization logic to verify resource ownership for each telemetry ingestion request. Do not rely solely on client-provided data.",
      "codeSnippet": "total:dataItems.length,",
      "filePath": "/home/mhugo/code/zenflow/packages/integrations/otel-collector/src/collector.ts",
      "category": "security",
      "categoryName": "Security",
      "analysisMode": "medium",
      "confidence": 0.85
    }
  ],
  "timestamp": 1756490475740,
  "version": "1.0.0",
  "fileHash": ""
}