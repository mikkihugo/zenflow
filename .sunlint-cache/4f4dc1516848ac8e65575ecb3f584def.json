{
  "key": "4f4dc1516848ac8e65575ecb3f584def",
  "value": [
    {
      "rule": "C003",
      "line": 109,
      "column": 0,
      "severity": "warning",
      "message": "Variable name 'f' in 'features.find(f => f.id === data.featureId)' is a single-character variable not used as a counter.",
      "suggestion": "Rename 'f' to 'feature' for clarity.",
      "codeSnippet": "",
      "filePath": "/home/mhugo/code/zenflow/packages/services/coordination/src/events/inspect-adapt-coordination.ts",
      "category": "code_quality",
      "categoryName": "Code Quality",
      "analysisMode": "medium",
      "confidence": 0.85
    },
    {
      "rule": "C006",
      "line": 245,
      "column": 0,
      "severity": "warning",
      "message": "Function name 'getAllWorkshops' is a noun phrase; function names should be verbs or verb-noun combinations.",
      "suggestion": "Rename to 'fetchAllWorkshops' or 'retrieveAllWorkshops'.",
      "codeSnippet": "const workshop = this.workshops.get(data.workshopId);",
      "filePath": "/home/mhugo/code/zenflow/packages/services/coordination/src/events/inspect-adapt-coordination.ts",
      "category": "code_quality",
      "categoryName": "Code Quality",
      "analysisMode": "medium",
      "confidence": 0.85
    },
    {
      "rule": "C006",
      "line": 252,
      "column": 0,
      "severity": "warning",
      "message": "Function name 'getProblemsByPriority' is a noun phrase; function names should be verbs or verb-noun combinations.",
      "suggestion": "Rename to 'fetchProblemsByPriority' or 'retrieveProblemsByPriority'.",
      "codeSnippet": "this.emit('ia:problem-added', { problemId, problem });",
      "filePath": "/home/mhugo/code/zenflow/packages/services/coordination/src/events/inspect-adapt-coordination.ts",
      "category": "code_quality",
      "categoryName": "Code Quality",
      "analysisMode": "medium",
      "confidence": 0.85
    },
    {
      "rule": "S002",
      "line": 183,
      "column": 0,
      "severity": "warning",
      "message": "Permissions for problem voting are controlled solely by problemId from the client, without verifying resource ownership or user authorization.",
      "suggestion": "Add backend authorization logic to verify that the current user is allowed to vote on the specified problem before updating votes.",
      "codeSnippet": "duration: 8, // Full day workshop",
      "filePath": "/home/mhugo/code/zenflow/packages/services/coordination/src/events/inspect-adapt-coordination.ts",
      "category": "security",
      "categoryName": "Security",
      "analysisMode": "medium",
      "confidence": 0.85
    },
    {
      "rule": "S002",
      "line": 202,
      "column": 0,
      "severity": "warning",
      "message": "Permissions for workshop facilitation are controlled solely by problemId from the client, without verifying resource ownership or user authorization.",
      "suggestion": "Add backend authorization logic to verify that the current user is allowed to facilitate the specified problem before creating a solving workshop.",
      "codeSnippet": "",
      "filePath": "/home/mhugo/code/zenflow/packages/services/coordination/src/events/inspect-adapt-coordination.ts",
      "category": "security",
      "categoryName": "Security",
      "analysisMode": "medium",
      "confidence": 0.85
    }
  ],
  "timestamp": 1756492067983,
  "version": "1.0.0",
  "fileHash": ""
}