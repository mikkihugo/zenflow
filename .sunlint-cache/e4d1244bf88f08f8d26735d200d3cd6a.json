{
  "key": "e4d1244bf88f08f8d26735d200d3cd6a",
  "value": [
    {
      "rule": "C003",
      "line": 23,
      "column": 0,
      "severity": "warning",
      "message": "Variable name 'piId' is used for multiple different types and purposes, and is not descriptive enough.",
      "suggestion": "Rename 'piId' to a more descriptive name such as 'planningIncrementId' or 'piStatus'.",
      "codeSnippet": "impact : 'low| medium| high' | ' critical')  category : 'technical| resource| external' | ' process')  mitigationPlan?:string;';",
      "filePath": "/home/mhugo/code/zenflow/packages/services/coordination/src/ml/pi-planning-success-prediction.ts",
      "category": "code_quality",
      "categoryName": "Code Quality",
      "analysisMode": "medium",
      "confidence": 0.85
    },
    {
      "rule": "C003",
      "line": 37,
      "column": 0,
      "severity": "warning",
      "message": "Variable name 'id' is generic and does not indicate its purpose.",
      "suggestion": "Rename 'id' to a more descriptive name such as 'dependencyId', 'riskId', or 'recommendationId' depending on context.",
      "codeSnippet": "actual:  {",
      "filePath": "/home/mhugo/code/zenflow/packages/services/coordination/src/ml/pi-planning-success-prediction.ts",
      "category": "code_quality",
      "categoryName": "Code Quality",
      "analysisMode": "medium",
      "confidence": 0.85
    },
    {
      "rule": "C006",
      "line": 142,
      "column": 0,
      "severity": "warning",
      "message": "Function name 'predictPISuccess' is a verb-noun combination, but 'predictTeamPerformance', 'predictObjectiveSuccess', and 'predictDependencyResolution' are inconsistent in verb-noun structure.",
      "suggestion": "Ensure all function names follow verb-noun or verb-noun combination format, e.g., 'predictTeamPerformance', 'predictObjectiveSuccess', 'resolveDependencyPrediction'.",
      "codeSnippet": "constructor() {",
      "filePath": "/home/mhugo/code/zenflow/packages/services/coordination/src/ml/pi-planning-success-prediction.ts",
      "category": "code_quality",
      "categoryName": "Code Quality",
      "analysisMode": "medium",
      "confidence": 0.85
    },
    {
      "rule": "C019",
      "line": 153,
      "column": 0,
      "severity": "warning",
      "message": "Logger uses 'error' level for initialization failure, which may not be a critical system failure.",
      "suggestion": "Use 'warn' or 'info' log level for recoverable initialization issues unless it is a critical failure.",
      "codeSnippet": "logger.info(",
      "filePath": "/home/mhugo/code/zenflow/packages/services/coordination/src/ml/pi-planning-success-prediction.ts",
      "category": "code_quality",
      "categoryName": "Code Quality",
      "analysisMode": "medium",
      "confidence": 0.85
    },
    {
      "rule": "C029",
      "line": 153,
      "column": 0,
      "severity": "warning",
      "message": "Catch block logs only a generic error message without stack trace or context.",
      "suggestion": "Log both error message and stack trace, and include relevant context such as input parameters or request ID.",
      "codeSnippet": "logger.info(",
      "filePath": "/home/mhugo/code/zenflow/packages/services/coordination/src/ml/pi-planning-success-prediction.ts",
      "category": "code_quality",
      "categoryName": "Code Quality",
      "analysisMode": "medium",
      "confidence": 0.85
    },
    {
      "rule": "C019",
      "line": 227,
      "column": 0,
      "severity": "warning",
      "message": "Logger uses 'error' level for monitoring PI risks, which may not be a critical system failure.",
      "suggestion": "Use 'warn' or 'info' log level for recoverable monitoring issues unless it is a critical failure.",
      "codeSnippet": "(sum, t) => sum + t.plannedCapacity,",
      "filePath": "/home/mhugo/code/zenflow/packages/services/coordination/src/ml/pi-planning-success-prediction.ts",
      "category": "code_quality",
      "categoryName": "Code Quality",
      "analysisMode": "medium",
      "confidence": 0.85
    },
    {
      "rule": "C029",
      "line": 227,
      "column": 0,
      "severity": "warning",
      "message": "Catch block logs only a generic error message without stack trace or context.",
      "suggestion": "Log both error message and stack trace, and include relevant context such as PI ID or input parameters.",
      "codeSnippet": "(sum, t) => sum + t.plannedCapacity,",
      "filePath": "/home/mhugo/code/zenflow/packages/services/coordination/src/ml/pi-planning-success-prediction.ts",
      "category": "code_quality",
      "categoryName": "Code Quality",
      "analysisMode": "medium",
      "confidence": 0.85
    },
    {
      "rule": "S001",
      "line": 53,
      "column": 0,
      "severity": "warning",
      "message": "Access control error handling may leak details and does not explicitly deny access on error.",
      "suggestion": "Ensure that access control errors result in a denied access state and do not grant permissions by default. Replace 'throw error;' with logic that denies access and logs securely.",
      "codeSnippet": "};",
      "filePath": "/home/mhugo/code/zenflow/packages/services/coordination/src/ml/pi-planning-success-prediction.ts",
      "category": "security",
      "categoryName": "Security",
      "analysisMode": "medium",
      "confidence": 0.85
    },
    {
      "rule": "S002",
      "line": 152,
      "column": 0,
      "severity": "warning",
      "message": "Resource access is controlled using 'teamId' and 'objectiveId' from client input without backend ownership verification.",
      "suggestion": "Add backend checks to verify resource ownership for each CRUD operation. Do not rely solely on IDs from client input.",
      "codeSnippet": "await this.validateModelAccuracy();",
      "filePath": "/home/mhugo/code/zenflow/packages/services/coordination/src/ml/pi-planning-success-prediction.ts",
      "category": "security",
      "categoryName": "Security",
      "analysisMode": "medium",
      "confidence": 0.85
    }
  ],
  "timestamp": 1756491633767,
  "version": "1.0.0",
  "fileHash": ""
}