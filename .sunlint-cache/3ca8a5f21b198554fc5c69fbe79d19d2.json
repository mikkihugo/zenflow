{
  "key": "3ca8a5f21b198554fc5c69fbe79d19d2",
  "value": [
    {
      "rule": "C019",
      "line": 73,
      "column": 0,
      "severity": "warning",
      "message": "logger.error used for initialization failure, which may not be a critical error.",
      "suggestion": "Use logger.warn or logger.info for recoverable initialization failures.",
      "codeSnippet": "* @example",
      "filePath": "/home/mhugo/code/zenflow/packages/services/ai-safety/src/main.ts",
      "category": "code_quality",
      "categoryName": "Code Quality",
      "analysisMode": "medium",
      "confidence": 0.85
    },
    {
      "rule": "C019",
      "line": 97,
      "column": 0,
      "severity": "warning",
      "message": "logger.error used for emergency shutdown failure, which may not be a critical error.",
      "suggestion": "Use logger.warn for shutdown failures unless system integrity is compromised.",
      "codeSnippet": "if (!startResult.success) {",
      "filePath": "/home/mhugo/code/zenflow/packages/services/ai-safety/src/main.ts",
      "category": "code_quality",
      "categoryName": "Code Quality",
      "analysisMode": "medium",
      "confidence": 0.85
    },
    {
      "rule": "C029",
      "line": 108,
      "column": 0,
      "severity": "warning",
      "message": "catch block does not log the error message or stack trace.",
      "suggestion": "Log error message and stack trace inside catch block for debugging.",
      "codeSnippet": "* @example",
      "filePath": "/home/mhugo/code/zenflow/packages/services/ai-safety/src/main.ts",
      "category": "code_quality",
      "categoryName": "Code Quality",
      "analysisMode": "medium",
      "confidence": 0.85
    },
    {
      "rule": "S001",
      "line": 152,
      "column": 0,
      "severity": "warning",
      "message": "Access control error (orchestrator initialization failure) throws an exception, which may not guarantee a secure 'deny by default' behavior if the exception is not handled upstream.",
      "suggestion": "Return a failure result or explicitly deny access instead of throwing an exception. Ensure upstream callers handle errors securely and do not grant access on error.",
      "codeSnippet": "export type {",
      "filePath": "/home/mhugo/code/zenflow/packages/services/ai-safety/src/main.ts",
      "category": "security",
      "categoryName": "Security",
      "analysisMode": "medium",
      "confidence": 0.85
    },
    {
      "rule": "S001",
      "line": 166,
      "column": 0,
      "severity": "warning",
      "message": "Access control error (orchestrator creation failure) throws an exception, which may not guarantee a secure 'deny by default' behavior if the exception is not handled upstream.",
      "suggestion": "Return a failure result or explicitly deny access instead of throwing an exception. Ensure upstream callers handle errors securely and do not grant access on error.",
      "codeSnippet": "enabled: boolean;",
      "filePath": "/home/mhugo/code/zenflow/packages/services/ai-safety/src/main.ts",
      "category": "security",
      "categoryName": "Security",
      "analysisMode": "medium",
      "confidence": 0.85
    }
  ],
  "timestamp": 1756490953365,
  "version": "1.0.0",
  "fileHash": ""
}
