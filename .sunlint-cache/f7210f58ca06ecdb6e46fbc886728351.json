{
  "key": "f7210f58ca06ecdb6e46fbc886728351",
  "value": [
    {
      "rule": "C003",
      "line": 81,
      "column": 0,
      "severity": "warning",
      "message": "Variable name 'ackTimeout' is an uncommon abbreviation and does not clearly indicate its purpose.",
      "suggestion": "Rename 'ackTimeout' to 'acknowledgmentTimeout' for clarity.",
      "codeSnippet": "export interface SPARCArchitectureApproval {",
      "filePath": "/home/mhugo/code/zenflow/packages/services/coordination/src/sparc/index.ts",
      "category": "code_quality",
      "categoryName": "Code Quality",
      "analysisMode": "medium",
      "confidence": 0.85
    },
    {
      "rule": "C003",
      "line": 82,
      "column": 0,
      "severity": "warning",
      "message": "Variable name 'requestId' is ambiguous and could be more descriptive.",
      "suggestion": "Rename 'requestId' to 'reviewRequestId' or similar for better context.",
      "codeSnippet": "projectId: string;",
      "filePath": "/home/mhugo/code/zenflow/packages/services/coordination/src/sparc/index.ts",
      "category": "code_quality",
      "categoryName": "Code Quality",
      "analysisMode": "medium",
      "confidence": 0.85
    },
    {
      "rule": "C006",
      "line": 214,
      "column": 0,
      "severity": "info",
      "message": "Function name 'handleLLMInferenceComplete' is a verb-noun combination but could be more specific about the action performed.",
      "suggestion": "Rename to 'processLLMInferenceCompletion' for improved clarity.",
      "codeSnippet": "await this.trackPhasePerformance(project, phase, phaseConfig, startTime, phaseComplete, validatedArtifacts);",
      "filePath": "/home/mhugo/code/zenflow/packages/services/coordination/src/sparc/index.ts",
      "category": "code_quality",
      "categoryName": "Code Quality",
      "analysisMode": "medium",
      "confidence": 0.85
    },
    {
      "rule": "C019",
      "line": 245,
      "column": 0,
      "severity": "warning",
      "message": "logger.error used for LLM inference failure, but the error may not be critical.",
      "suggestion": "Use logger.warn for recoverable or non-critical inference failures.",
      "codeSnippet": "contextSize += JSON.stringify(artifacts).length;",
      "filePath": "/home/mhugo/code/zenflow/packages/services/coordination/src/sparc/index.ts",
      "category": "code_quality",
      "categoryName": "Code Quality",
      "analysisMode": "medium",
      "confidence": 0.85
    },
    {
      "rule": "C029",
      "line": 313,
      "column": 0,
      "severity": "warning",
      "message": "Catch block does not log stack trace or sufficient context for error in neural optimization.",
      "suggestion": "Log error stack trace and relevant input parameters in the catch block.",
      "codeSnippet": "const resultObj = result as Record<string, unknown>;",
      "filePath": "/home/mhugo/code/zenflow/packages/services/coordination/src/sparc/index.ts",
      "category": "code_quality",
      "categoryName": "Code Quality",
      "analysisMode": "medium",
      "confidence": 0.85
    },
    {
      "rule": "S001",
      "line": 203,
      "column": 0,
      "severity": "warning",
      "message": "Access control errors (e.g., missing project or manager) throw exceptions, but there is no explicit deny-by-default fallback. If an error occurs, the system may not securely deny access.",
      "suggestion": "Ensure that all access control errors result in an explicit denial of access, not just error throwing. Add logic to always deny access if permission or project data is missing.",
      "codeSnippet": "// SPARC delegates to LLM system for actual work",
      "filePath": "/home/mhugo/code/zenflow/packages/services/coordination/src/sparc/index.ts",
      "category": "security",
      "categoryName": "Security",
      "analysisMode": "medium",
      "confidence": 0.85
    },
    {
      "rule": "S002",
      "line": 206,
      "column": 0,
      "severity": "warning",
      "message": "Project lookup uses projectId from client input without verifying ownership or authorization. This may allow IDOR if projectId is predictable.",
      "suggestion": "Add backend authorization checks to verify that the current user owns or is authorized to access the project before proceeding.",
      "codeSnippet": "const validatedArtifacts = this.validatePhaseArtifacts(phase, delegationResult);",
      "filePath": "/home/mhugo/code/zenflow/packages/services/coordination/src/sparc/index.ts",
      "category": "security",
      "categoryName": "Security",
      "analysisMode": "medium",
      "confidence": 0.85
    },
    {
      "rule": "S002",
      "line": 245,
      "column": 0,
      "severity": "warning",
      "message": "Project status lookup uses projectId from client input without verifying ownership or authorization. This may allow IDOR if projectId is predictable.",
      "suggestion": "Add backend authorization checks to verify that the current user owns or is authorized to access the project before returning status.",
      "codeSnippet": "contextSize += JSON.stringify(artifacts).length;",
      "filePath": "/home/mhugo/code/zenflow/packages/services/coordination/src/sparc/index.ts",
      "category": "security",
      "categoryName": "Security",
      "analysisMode": "medium",
      "confidence": 0.85
    },
    {
      "rule": "S002",
      "line": 263,
      "column": 0,
      "severity": "warning",
      "message": "All projects are returned without verifying user authorization. This may expose projects to unauthorized users.",
      "suggestion": "Filter projects by user ownership or authorization before returning the list.",
      "codeSnippet": "phase: SPARCPhase,",
      "filePath": "/home/mhugo/code/zenflow/packages/services/coordination/src/sparc/index.ts",
      "category": "security",
      "categoryName": "Security",
      "analysisMode": "medium",
      "confidence": 0.85
    }
  ],
  "timestamp": 1756492128715,
  "version": "1.0.0",
  "fileHash": ""
}