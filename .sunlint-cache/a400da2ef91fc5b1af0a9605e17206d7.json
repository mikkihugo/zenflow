{
  "key": "a400da2ef91fc5b1af0a9605e17206d7",
  "value": [
    {
      "rule": "C019",
      "line": 235,
      "column": 0,
      "severity": "warning",
      "message": "logger.error used for database query failure, but this may not be a critical failure (recoverable, fallback available).",
      "suggestion": "Use logger.warn instead of logger.error for recoverable database query failures.",
      "codeSnippet": "/**",
      "filePath": "/home/mhugo/code/zenflow/packages/services/knowledge/src/fact-system.ts",
      "category": "code_quality",
      "categoryName": "Code Quality",
      "analysisMode": "medium",
      "confidence": 0.85
    },
    {
      "rule": "C019",
      "line": 272,
      "column": 0,
      "severity": "warning",
      "message": "logger.error used for failed fact retrieval, but fallback and error event emission are present.",
      "suggestion": "Use logger.warn for non-critical database retrieval errors.",
      "codeSnippet": "async storeFact(",
      "filePath": "/home/mhugo/code/zenflow/packages/services/knowledge/src/fact-system.ts",
      "category": "code_quality",
      "categoryName": "Code Quality",
      "analysisMode": "medium",
      "confidence": 0.85
    },
    {
      "rule": "C019",
      "line": 369,
      "column": 0,
      "severity": "warning",
      "message": "logger.error used for failed external fact search, but fallback is provided.",
      "suggestion": "Use logger.warn for non-critical external search failures.",
      "codeSnippet": "/**",
      "filePath": "/home/mhugo/code/zenflow/packages/services/knowledge/src/fact-system.ts",
      "category": "code_quality",
      "categoryName": "Code Quality",
      "analysisMode": "medium",
      "confidence": 0.85
    },
    {
      "rule": "C019",
      "line": 419,
      "column": 0,
      "severity": "warning",
      "message": "logger.error used for failed NPM lookup fallback, but this is not a critical system failure.",
      "suggestion": "Use logger.warn for non-critical NPM lookup failures.",
      "codeSnippet": "}",
      "filePath": "/home/mhugo/code/zenflow/packages/services/knowledge/src/fact-system.ts",
      "category": "code_quality",
      "categoryName": "Code Quality",
      "analysisMode": "medium",
      "confidence": 0.85
    },
    {
      "rule": "C019",
      "line": 443,
      "column": 0,
      "severity": "warning",
      "message": "logger.error used for failed GitHub lookup fallback, but this is not a critical system failure.",
      "suggestion": "Use logger.warn for non-critical GitHub lookup failures.",
      "codeSnippet": "/**",
      "filePath": "/home/mhugo/code/zenflow/packages/services/knowledge/src/fact-system.ts",
      "category": "code_quality",
      "categoryName": "Code Quality",
      "analysisMode": "medium",
      "confidence": 0.85
    },
    {
      "rule": "S001",
      "line": 116,
      "column": 0,
      "severity": "warning",
      "message": "Access control/database initialization errors fall back to in-memory storage, but do not explicitly deny access or restrict permissions. This may allow unintended access if fallback logic is not secure.",
      "suggestion": "Explicitly deny access or restrict permissions when database or adapter initialization fails, rather than silently falling back to in-memory storage.",
      "codeSnippet": "data:unknown;",
      "filePath": "/home/mhugo/code/zenflow/packages/services/knowledge/src/fact-system.ts",
      "category": "security",
      "categoryName": "Security",
      "analysisMode": "medium",
      "confidence": 0.85
    }
  ],
  "timestamp": 1756493079456,
  "version": "1.0.0",
  "fileHash": ""
}
