{
  "key": "d1016c60087b4e97b7f28459f3a1a3cf",
  "value": [
    {
      "rule": "C003",
      "line": 55,
      "column": 0,
      "severity": "warning",
      "message": "Variable 'dir' in findSourceFiles is an uncommon abbreviation; should use a more descriptive name.",
      "suggestion": "Rename 'dir' to 'directoryPath' for clarity.",
      "codeSnippet": "}",
      "filePath": "/home/mhugo/code/zenflow/scripts/validate-imports.js",
      "category": "code_quality",
      "categoryName": "Code Quality",
      "analysisMode": "medium",
      "confidence": 0.85
    },
    {
      "rule": "C003",
      "line": 55,
      "column": 0,
      "severity": "warning",
      "message": "Variable 'files' in findSourceFiles is a generic name; should be more descriptive.",
      "suggestion": "Rename 'files' to 'sourceFilesList' or similar.",
      "codeSnippet": "}",
      "filePath": "/home/mhugo/code/zenflow/scripts/validate-imports.js",
      "category": "code_quality",
      "categoryName": "Code Quality",
      "analysisMode": "medium",
      "confidence": 0.85
    },
    {
      "rule": "C003",
      "line": 66,
      "column": 0,
      "severity": "warning",
      "message": "Variable 'entry' is an uncommon abbreviation; should use a more descriptive name.",
      "suggestion": "Rename 'entry' to 'fileEntry' or 'directoryEntry'.",
      "codeSnippet": "for (const entry of entries) {",
      "filePath": "/home/mhugo/code/zenflow/scripts/validate-imports.js",
      "category": "code_quality",
      "categoryName": "Code Quality",
      "analysisMode": "medium",
      "confidence": 0.85
    },
    {
      "rule": "C003",
      "line": 69,
      "column": 0,
      "severity": "warning",
      "message": "Variable 'stats' is an uncommon abbreviation; should use a more descriptive name.",
      "suggestion": "Rename 'stats' to 'fileStats'.",
      "codeSnippet": "if (shouldSkip(fullPath)) continue;",
      "filePath": "/home/mhugo/code/zenflow/scripts/validate-imports.js",
      "category": "code_quality",
      "categoryName": "Code Quality",
      "analysisMode": "medium",
      "confidence": 0.85
    },
    {
      "rule": "C003",
      "line": 93,
      "column": 0,
      "severity": "info",
      "message": "Variable 'i' used as loop counter is acceptable, but consider using a more descriptive name if possible.",
      "suggestion": "If context allows, use a more descriptive name than 'i'.",
      "codeSnippet": "const relativePath = relative(projectRoot, filePath);",
      "filePath": "/home/mhugo/code/zenflow/scripts/validate-imports.js",
      "category": "code_quality",
      "categoryName": "Code Quality",
      "analysisMode": "medium",
      "confidence": 0.7
    },
    {
      "rule": "C006",
      "line": 55,
      "column": 0,
      "severity": "info",
      "message": "Function name 'findSourceFiles' is a verb-noun combination and complies with naming rules.",
      "suggestion": "No change needed.",
      "codeSnippet": "}",
      "filePath": "/home/mhugo/code/zenflow/scripts/validate-imports.js",
      "category": "code_quality",
      "categoryName": "Code Quality",
      "analysisMode": "medium",
      "confidence": 0.9
    },
    {
      "rule": "C019",
      "line": 108,
      "column": 0,
      "severity": "warning",
      "message": "Use of logger.error for reporting forbidden imports may not be critical; consider using logger.warn instead.",
      "suggestion": "Change logger.error to logger.warn for forbidden import reporting.",
      "codeSnippet": "logger.error(\"\");",
      "filePath": "/home/mhugo/code/zenflow/scripts/validate-imports.js",
      "category": "code_quality",
      "categoryName": "Code Quality",
      "analysisMode": "medium",
      "confidence": 0.85
    },
    {
      "rule": "C019",
      "line": 116,
      "column": 0,
      "severity": "warning",
      "message": "Use of logger.error for reporting forbidden require may not be critical; consider using logger.warn instead.",
      "suggestion": "Change logger.error to logger.warn for forbidden require reporting.",
      "codeSnippet": "const requiredModule = requireMatch[1];",
      "filePath": "/home/mhugo/code/zenflow/scripts/validate-imports.js",
      "category": "code_quality",
      "categoryName": "Code Quality",
      "analysisMode": "medium",
      "confidence": 0.85
    },
    {
      "rule": "C019",
      "line": 123,
      "column": 0,
      "severity": "info",
      "message": "Use of logger.warn for file read errors is appropriate for recoverable issues.",
      "suggestion": "No change needed.",
      "codeSnippet": "violations++;",
      "filePath": "/home/mhugo/code/zenflow/scripts/validate-imports.js",
      "category": "code_quality",
      "categoryName": "Code Quality",
      "analysisMode": "medium",
      "confidence": 0.9
    },
    {
      "rule": "C029",
      "line": 123,
      "column": 0,
      "severity": "warning",
      "message": "Catch block logs only a warning message; does not log root cause or stack trace.",
      "suggestion": "Log the error message and stack trace for better debugging.",
      "codeSnippet": "violations++;",
      "filePath": "/home/mhugo/code/zenflow/scripts/validate-imports.js",
      "category": "code_quality",
      "categoryName": "Code Quality",
      "analysisMode": "medium",
      "confidence": 0.85
    },
    {
      "rule": "S001",
      "line": 86,
      "column": 0,
      "severity": "warning",
      "message": "Access control error (file read failure) does not securely deny access; only logs a warning and continues.",
      "suggestion": "On file read errors, ensure the file is not processed and access is denied by default. Consider aborting the check for that file and marking it as non-compliant.",
      "codeSnippet": "/**",
      "filePath": "/home/mhugo/code/zenflow/scripts/validate-imports.js",
      "category": "security",
      "categoryName": "Security",
      "analysisMode": "medium",
      "confidence": 0.85
    }
  ],
  "timestamp": 1756490390876,
  "version": "1.0.0",
  "fileHash": ""
}