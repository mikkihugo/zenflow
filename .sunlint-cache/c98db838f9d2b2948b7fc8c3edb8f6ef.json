{
  "key": "c98db838f9d2b2948b7fc8c3edb8f6ef",
  "value": [
    {
      "rule": "C003",
      "line": 97,
      "column": 0,
      "severity": "warning",
      "message": "Variable name 'id' is not descriptive; should clarify what the ID represents.",
      "suggestion": "Rename 'id' to 'orchestrationId', 'detectionId', or another context-specific name.",
      "codeSnippet": "*/",
      "filePath": "/home/mhugo/code/zenflow/packages/services/ai-safety/src/safety-orchestrator.ts",
      "category": "code_quality",
      "categoryName": "Code Quality",
      "analysisMode": "medium",
      "confidence": 0.85
    },
    {
      "rule": "C003",
      "line": 121,
      "column": 0,
      "severity": "warning",
      "message": "Variable name 'id' is not descriptive in AutomatedDetectionResult.",
      "suggestion": "Rename 'id' to 'detectionResultId' or similar.",
      "codeSnippet": "}",
      "filePath": "/home/mhugo/code/zenflow/packages/services/ai-safety/src/safety-orchestrator.ts",
      "category": "code_quality",
      "categoryName": "Code Quality",
      "analysisMode": "medium",
      "confidence": 0.85
    },
    {
      "rule": "C003",
      "line": 135,
      "column": 0,
      "severity": "warning",
      "message": "Variable name 'id' is not descriptive in BehavioralAnalysisResult.",
      "suggestion": "Rename 'id' to 'behavioralAnalysisId' or similar.",
      "codeSnippet": "logger.info('AI Safety Orchestrator initialized', {",
      "filePath": "/home/mhugo/code/zenflow/packages/services/ai-safety/src/safety-orchestrator.ts",
      "category": "code_quality",
      "categoryName": "Code Quality",
      "analysisMode": "medium",
      "confidence": 0.85
    },
    {
      "rule": "C003",
      "line": 149,
      "column": 0,
      "severity": "warning",
      "message": "Variable name 'id' is not descriptive in HumanEscalationResult.",
      "suggestion": "Rename 'id' to 'escalationResultId' or similar.",
      "codeSnippet": "* Start safety monitoring.",
      "filePath": "/home/mhugo/code/zenflow/packages/services/ai-safety/src/safety-orchestrator.ts",
      "category": "code_quality",
      "categoryName": "Code Quality",
      "analysisMode": "medium",
      "confidence": 0.85
    },
    {
      "rule": "C006",
      "line": 88,
      "column": 0,
      "severity": "warning",
      "message": "Function name 'generateId' is not a verb or verb-noun combination.",
      "suggestion": "Rename to 'createSessionId', 'generateOrchestrationId', or similar.",
      "codeSnippet": "systemUptime: number;",
      "filePath": "/home/mhugo/code/zenflow/packages/services/ai-safety/src/safety-orchestrator.ts",
      "category": "code_quality",
      "categoryName": "Code Quality",
      "analysisMode": "medium",
      "confidence": 0.85
    },
    {
      "rule": "C029",
      "line": 108,
      "column": 0,
      "severity": "warning",
      "message": "Catch block does not log the root cause of the error.",
      "suggestion": "Log error message and stack trace using logger.error in the catch block.",
      "codeSnippet": "this.deceptionDetector = new AIDeceptionDetector({",
      "filePath": "/home/mhugo/code/zenflow/packages/services/ai-safety/src/safety-orchestrator.ts",
      "category": "code_quality",
      "categoryName": "Code Quality",
      "analysisMode": "medium",
      "confidence": 0.85
    },
    {
      "rule": "C029",
      "line": 129,
      "column": 0,
      "severity": "warning",
      "message": "Catch block does not log the root cause of the error.",
      "suggestion": "Log error message and stack trace using logger.error in the catch block.",
      "codeSnippet": "humanEscalations:0,",
      "filePath": "/home/mhugo/code/zenflow/packages/services/ai-safety/src/safety-orchestrator.ts",
      "category": "code_quality",
      "categoryName": "Code Quality",
      "analysisMode": "medium",
      "confidence": 0.85
    },
    {
      "rule": "C029",
      "line": 180,
      "column": 0,
      "severity": "warning",
      "message": "Catch block does not log the root cause of the error.",
      "suggestion": "Log error message and stack trace using logger.error in the catch block.",
      "codeSnippet": "try {",
      "filePath": "/home/mhugo/code/zenflow/packages/services/ai-safety/src/safety-orchestrator.ts",
      "category": "code_quality",
      "categoryName": "Code Quality",
      "analysisMode": "medium",
      "confidence": 0.85
    },
    {
      "rule": "C029",
      "line": 206,
      "column": 0,
      "severity": "warning",
      "message": "Catch block does not log the root cause of the error.",
      "suggestion": "Log error message and stack trace using logger.error in the catch block.",
      "codeSnippet": "*/",
      "filePath": "/home/mhugo/code/zenflow/packages/services/ai-safety/src/safety-orchestrator.ts",
      "category": "code_quality",
      "categoryName": "Code Quality",
      "analysisMode": "medium",
      "confidence": 0.85
    },
    {
      "rule": "C029",
      "line": 236,
      "column": 0,
      "severity": "warning",
      "message": "Catch block does not log the root cause of the error.",
      "suggestion": "Log error message and stack trace using logger.error in the catch block.",
      "codeSnippet": "// Phase 3:Human Escalation (if needed)",
      "filePath": "/home/mhugo/code/zenflow/packages/services/ai-safety/src/safety-orchestrator.ts",
      "category": "code_quality",
      "categoryName": "Code Quality",
      "analysisMode": "medium",
      "confidence": 0.85
    },
    {
      "rule": "C029",
      "line": 266,
      "column": 0,
      "severity": "warning",
      "message": "Catch block does not log the root cause of the error.",
      "suggestion": "Log error message and stack trace using logger.error in the catch block.",
      "codeSnippet": "phase1: phase1Result.value!,",
      "filePath": "/home/mhugo/code/zenflow/packages/services/ai-safety/src/safety-orchestrator.ts",
      "category": "code_quality",
      "categoryName": "Code Quality",
      "analysisMode": "medium",
      "confidence": 0.85
    },
    {
      "rule": "C029",
      "line": 311,
      "column": 0,
      "severity": "warning",
      "message": "Catch block does not log the root cause of the error.",
      "suggestion": "Log error message and stack trace using logger.error in the catch block.",
      "codeSnippet": "success: false,",
      "filePath": "/home/mhugo/code/zenflow/packages/services/ai-safety/src/safety-orchestrator.ts",
      "category": "code_quality",
      "categoryName": "Code Quality",
      "analysisMode": "medium",
      "confidence": 0.85
    },
    {
      "rule": "S001",
      "line": 122,
      "column": 0,
      "severity": "warning",
      "message": "Access control errors (exceptions in evaluateAgentSafety) fall back to returning error, but do not explicitly deny access or prevent further actions.",
      "suggestion": "Ensure that any error in access control logic results in a denied access state and does not allow default permissions or further processing.",
      "codeSnippet": "});",
      "filePath": "/home/mhugo/code/zenflow/packages/services/ai-safety/src/safety-orchestrator.ts",
      "category": "security",
      "categoryName": "Security",
      "analysisMode": "medium",
      "confidence": 0.85
    },
    {
      "rule": "S002",
      "line": 123,
      "column": 0,
      "severity": "warning",
      "message": "Resource access is controlled using agentId from client input without explicit backend ownership verification.",
      "suggestion": "Verify resource ownership for agentId on the backend before performing any operations. Do not rely solely on client-provided IDs.",
      "codeSnippet": "",
      "filePath": "/home/mhugo/code/zenflow/packages/services/ai-safety/src/safety-orchestrator.ts",
      "category": "security",
      "categoryName": "Security",
      "analysisMode": "medium",
      "confidence": 0.85
    }
  ],
  "timestamp": 1756490913463,
  "version": "1.0.0",
  "fileHash": ""
}
