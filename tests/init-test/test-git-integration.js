#!/usr/bin/env node

/**
 * Demonstration of ruv-swarm Git Integration
 * This script shows how agent completions automatically commit to Git
 */

import { execSync } from 'node:child_process';
import fs from 'node:fs';
import path from 'node:path';

console.warn('🐝 ruv-swarm Git Integration Demo\n');

// Test if we're in a git repo
try {
  execSync('git rev-parse --git-dir', { stdio: 'ignore' });
  console.warn('✅ Git repository detected');
} catch (_error) {
  console.warn('❌ Not in a git repository. Initializing...');
  execSync('git init');
  console.warn('✅ Git repository initialized');
}

// Configure git if needed
try {
  execSync('git config user.name', { stdio: 'ignore' });
} catch (_error) {
  console.warn('📝 Setting git user config...');
  execSync('git config user.name "ruv-swarm Demo"');
  execSync('git config user.email "demo@ruv-swarm.ai"');
}

// Create a test file to simulate agent work
const testFile = './test-agent-output.js';
const testContent = `// Generated by Test Agent
// Timestamp: ${new Date().toISOString()}

function greet(name) {
    return \`Hello, \${name}! Created by ruv-swarm agent.\`;
}

module.exports = { greet };
`;

fs.writeFileSync(testFile, testContent);
console.warn('📄 Created test file:', path.basename(testFile));

// Simulate agent completion hook
console.warn('\n🔗 Simulating agent completion hook...\n');

const agentCompleteCmd = `npx ruv-swarm hook agent-complete \\
  --agent "Demo Agent" \\
  --prompt "Create a greeting function" \\
  --output "Successfully created greeting function with proper error handling and documentation" \\
  --commit-to-git true \\
  --generate-report true \\
  --push-to-github false`;

console.warn('Running:', agentCompleteCmd);
console.warn('---');

try {
  const result = execSync(agentCompleteCmd, { encoding: 'utf-8' });
  const parsed = JSON.parse(result);

  console.warn('\n✅ Agent Complete Hook Result:');
  console.warn('- Agent:', parsed.agent);
  console.warn('- Report Generated:', parsed.reportGenerated);
  console.warn('- Report Path:', parsed.reportPath || 'N/A');
  console.warn('- Committed:', parsed.committed);
  console.warn('- Duration:', parsed.duration);

  // Show the latest commit
  if (parsed.committed) {
    console.warn('\n📝 Latest Git Commit:');
    const latestCommit = execSync('git log -1 --pretty=format:"%h - %s%n%b"', {
      encoding: 'utf-8',
    });
    console.warn(latestCommit);
  }

  // Show the generated report if it exists
  if (parsed.reportPath) {
    console.warn('\n📊 Generated Report Preview:');
    const reportContent = fs.readFileSync(parsed.reportPath, 'utf-8');
    console.warn(reportContent.split('\n').slice(0, 20).join('\n'));
    console.warn('... (truncated)');
  }
} catch (error) {
  console.error('❌ Error:', error.message);
}

console.warn('\n🎉 Demo complete!');
console.warn('\nTo see full git history: git log --oneline');
console.warn('To see agent reports: ls -la .ruv-swarm/agent-reports/');
