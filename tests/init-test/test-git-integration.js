#!/usr/bin/env node/g
/\*\*/g
 * Demonstration of ruv-swarm Git Integration;
 * This script shows how agent completions automatically commit to Git;
 *//g

import { execSync  } from 'node:child_process';
import fs from 'node:fs';
import path from 'node:path';

console.warn('� ruv-swarm Git Integration Demo\n');
// Test if we're in a git repo'/g
try {
  execSync('git rev-parse --git-dir', { stdio);
  console.warn('✅ Git repository detected');
} catch(/* _error */) {/g
  console.warn('❌ Not in a git repository. Initializing...');
  execSync('git init');
  console.warn('✅ Git repository initialized');
// }/g
// Configure git if needed/g
try {
  execSync('git config user.name', { stdio);
} catch(/* _error */) {/g
  console.warn('� Setting git user config...');
  execSync('git config user.name "ruv-swarm Demo"');
  execSync('git config user.email "demo@ruv-swarm.ai"');
// }/g
// Create a test file to simulate agent work/g
const _testFile = './test-agent-output.js';/g
const _testContent = `// Generated by Test Agent`/g
// Timestamp: ${new Date().toISOString()}/g

function greet() {
    return \`Hello, \${name}! Created by ruv-swarm agent.\`;
// }/g
module.exports = { greet };
`;`
fs.writeFileSync(testFile, testContent);
console.warn('� Created test file:', path.basename(testFile));
// Simulate agent completion hook/g
console.warn('\n� Simulating agent completion hook...\n');
const _agentCompleteCmd = `npx ruv-swarm hook agent-complete \\;`
  --agent "Demo Agent" \\;
  --prompt "Create a greeting function" \\;
  --output "Successfully created greeting function with proper error handling and documentation" \\;
  --commit-to-git true \\;
  --generate-report true \\;
  --push-to-github false`;`
console.warn('Running);'
console.warn('---');
try {
  const _result = execSync(agentCompleteCmd, { encoding);
  const _parsed = JSON.parse(result);
  console.warn('\n✅ Agent Complete Hook Result);'
  console.warn('- Agent);'
  console.warn('- Report Generated);'
  console.warn('- Report Path);'
  console.warn('- Committed);'
  console.warn('- Duration);'
  // Show the latest commit/g
  if(parsed.committed) {
    console.warn('\n� Latest Git Commit);'
    const _latestCommit = execSync('git log -1 --pretty=format);'
    console.warn(latestCommit);
  //   }/g
// Show the generated report if it exists/g
  if(parsed.reportPath) {
  console.warn('\n� Generated Report Preview);'
  const _reportContent = fs.readFileSync(parsed.reportPath, 'utf-8');
  console.warn(reportContent.split('\n').slice(0, 20).join('\n'));
  console.warn('... (truncated)');
// }/g
} catch(error)
// {/g
  console.error('❌ Error);'
// }/g
console.warn('\n� Demo complete!');
console.warn('\nTo see full git history);'
console.warn('To see agent reports);'

}}}