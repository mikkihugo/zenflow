{"version":3,"file":"_page.svelte.js","sources":["../../../../../src/routes/+page.svelte"],"sourcesContent":["<script lang=\"ts\">\n  import { onMount } from 'svelte';\n  \n  // Simulated real-time data (would connect to existing WebSocket)\n  let systemStatus = {\n    health: 'healthy',\n    uptime: 0,\n    memoryUsage: 0,\n    version: '2.0.0-alpha.44'\n  };\n  \n  let swarms = [\n    { id: 1, name: 'Document Processing', agents: 4, status: 'active' },\n    { id: 2, name: 'Feature Development', agents: 6, status: 'active' },\n    { id: 3, name: 'Code Analysis', agents: 2, status: 'warning' }\n  ];\n  \n  let performance = {\n    cpu: 23.5,\n    memory: 67.2,\n    requestsPerMin: 127,\n    avgResponse: 45\n  };\n  \n  let recentTasks = [\n    { id: 1, title: 'Process PRD: User Auth', progress: 75, status: 'active' },\n    { id: 2, title: 'Generate ADR: Database', progress: 0, status: 'pending' },\n    { id: 3, title: 'Code Review: API', progress: 50, status: 'active' }\n  ];\n  \n  // Simulate real-time updates\n  onMount(() => {\n    const interval = setInterval(() => {\n      systemStatus.uptime += 1;\n      systemStatus.memoryUsage = Math.random() * 1000 + 500; // 500-1500 MB\n      performance.cpu = Math.random() * 40 + 10; // 10-50%\n      performance.memory = Math.random() * 30 + 50; // 50-80%\n      performance.requestsPerMin = Math.floor(Math.random() * 50 + 100); // 100-150\n      performance.avgResponse = Math.floor(Math.random() * 20 + 30); // 30-50ms\n      \n      // Trigger reactivity\n      systemStatus = systemStatus;\n      performance = performance;\n    }, 2000);\n    \n    return () => clearInterval(interval);\n  });\n  \n  function formatUptime(seconds: number): string {\n    const minutes = Math.floor(seconds / 60);\n    const hours = Math.floor(minutes / 60);\n    const days = Math.floor(hours / 24);\n    \n    if (days > 0) return `${days}d ${hours % 24}h`;\n    if (hours > 0) return `${hours}h ${minutes % 60}m`;\n    return `${minutes}m`;\n  }\n  \n  function formatBytes(bytes: number): string {\n    return `${Math.round(bytes)}MB`;\n  }\n  \n  function getStatusColor(status: string): string {\n    switch (status) {\n      case 'active': return 'success';\n      case 'warning': return 'warning';\n      case 'error': return 'error';\n      default: return 'inactive';\n    }\n  }\n</script>\n\n<svelte:head>\n  <title>Claude Code Zen - Dashboard</title>\n</svelte:head>\n\n<div class=\"dashboard\">\n  <div class=\"dashboard-header\">\n    <h1>Dashboard Overview</h1>\n    <p class=\"text-secondary\">Real-time system monitoring and swarm management</p>\n  </div>\n\n  <!-- System Status Grid -->\n  <div class=\"grid grid-auto mb-5\">\n    <!-- System Health Card -->\n    <div class=\"card\">\n      <h3>‚ö° System Status</h3>\n      <div class=\"metrics\">\n        <div class=\"metric\">\n          <span class=\"metric-label\">System Health</span>\n          <span class=\"metric-value flex items-center gap-2\">\n            <span class=\"status-dot {getStatusColor(systemStatus.health)}\"></span>\n            {systemStatus.health}\n          </span>\n        </div>\n        <div class=\"metric\">\n          <span class=\"metric-label\">Uptime</span>\n          <span class=\"metric-value\">{formatUptime(systemStatus.uptime)}</span>\n        </div>\n        <div class=\"metric\">\n          <span class=\"metric-label\">Memory Usage</span>\n          <span class=\"metric-value\">{formatBytes(systemStatus.memoryUsage)}</span>\n        </div>\n        <div class=\"metric\">\n          <span class=\"metric-label\">Version</span>\n          <span class=\"metric-value\">{systemStatus.version}</span>\n        </div>\n      </div>\n    </div>\n\n    <!-- Active Swarms Card -->\n    <div class=\"card\">\n      <h3>üêù Active Swarms</h3>\n      <div class=\"swarms-list\">\n        {#each swarms as swarm}\n          <div class=\"metric\">\n            <span class=\"metric-label flex items-center gap-2\">\n              <span class=\"status-dot {getStatusColor(swarm.status)}\"></span>\n              {swarm.name}\n            </span>\n            <span class=\"metric-value\">{swarm.agents} agents</span>\n          </div>\n        {/each}\n      </div>\n      <div class=\"mt-3\">\n        <button class=\"btn primary\">üöÄ Initialize New Swarm</button>\n      </div>\n    </div>\n\n    <!-- Performance Metrics Card -->\n    <div class=\"card\">\n      <h3>üìä Performance</h3>\n      <div class=\"performance-metrics\">\n        <div class=\"metric-item mb-3\">\n          <div class=\"flex justify-between items-center mb-1\">\n            <span class=\"metric-label\">CPU Usage</span>\n            <span class=\"metric-value\">{performance.cpu.toFixed(1)}%</span>\n          </div>\n          <div class=\"progress\">\n            <div class=\"progress-fill\" style=\"width: {performance.cpu}%\"></div>\n          </div>\n        </div>\n        \n        <div class=\"metric-item mb-3\">\n          <div class=\"flex justify-between items-center mb-1\">\n            <span class=\"metric-label\">Memory Usage</span>\n            <span class=\"metric-value\">{performance.memory.toFixed(1)}%</span>\n          </div>\n          <div class=\"progress\">\n            <div class=\"progress-fill {performance.memory > 80 ? 'warning' : performance.memory > 90 ? 'error' : 'success'}\" \n                 style=\"width: {performance.memory}%\"></div>\n          </div>\n        </div>\n        \n        <div class=\"metric\">\n          <span class=\"metric-label\">Requests/min</span>\n          <span class=\"metric-value\">{performance.requestsPerMin}</span>\n        </div>\n        <div class=\"metric\">\n          <span class=\"metric-label\">Avg Response</span>\n          <span class=\"metric-value\">{performance.avgResponse}ms</span>\n        </div>\n      </div>\n    </div>\n\n    <!-- Recent Tasks Card -->\n    <div class=\"card\">\n      <h3>‚úÖ Recent Tasks</h3>\n      <div class=\"tasks-list\">\n        {#each recentTasks as task}\n          <div class=\"task-item mb-3\">\n            <div class=\"flex justify-between items-center mb-1\">\n              <span class=\"metric-label\">{task.title}</span>\n              <span class=\"metric-value\">{task.progress}%</span>\n            </div>\n            <div class=\"progress\">\n              <div class=\"progress-fill {task.status === 'active' ? 'success' : 'inactive'}\" \n                   style=\"width: {task.progress}%\"></div>\n            </div>\n            <div class=\"flex items-center gap-2 mt-1\">\n              <span class=\"status-dot {getStatusColor(task.status)}\"></span>\n              <span class=\"text-muted\" style=\"font-size: 0.75rem; text-transform: capitalize;\">\n                {task.status}\n              </span>\n            </div>\n          </div>\n        {/each}\n      </div>\n      <div class=\"mt-3\">\n        <button class=\"btn\">üìã View All Tasks</button>\n      </div>\n    </div>\n  </div>\n\n  <!-- Quick Actions -->\n  <div class=\"card\">\n    <h3>‚ö° Quick Actions</h3>\n    <div class=\"actions-grid\">\n      <button class=\"btn primary\">ü§ñ Create New Swarm</button>\n      <button class=\"btn\">üìù Create New Task</button>\n      <button class=\"btn\">üîÑ Refresh System</button>\n      <button class=\"btn\">üìä View Analytics</button>\n      <button class=\"btn\">‚öôÔ∏è System Settings</button>\n      <button class=\"btn\">üìã View Logs</button>\n    </div>\n  </div>\n\n  <!-- Real-time Status -->\n  <div class=\"status-bar mt-4 text-center text-muted\">\n    <span class=\"flex items-center justify-center gap-2\">\n      <span class=\"status-dot active\"></span>\n      Real-time updates active ‚Ä¢ Last updated: {new Date().toLocaleTimeString()}\n    </span>\n  </div>\n</div>\n\n<style>\n  .dashboard {\n    animation: fadeIn 0.5s ease;\n  }\n\n  .dashboard-header {\n    text-align: center;\n    margin-bottom: 2rem;\n  }\n\n  .dashboard-header h1 {\n    color: var(--accent-primary);\n    margin-bottom: 0.5rem;\n  }\n\n  .metrics {\n    display: flex;\n    flex-direction: column;\n    gap: 0.5rem;\n  }\n\n  .metric-item {\n    margin-bottom: 1rem;\n  }\n\n  .metric-item:last-child {\n    margin-bottom: 0;\n  }\n\n  .swarms-list {\n    margin-bottom: 1rem;\n  }\n\n  .tasks-list {\n    margin-bottom: 1rem;\n  }\n\n  .task-item {\n    padding: 0.75rem;\n    background: var(--bg-tertiary);\n    border-radius: 6px;\n    border: 1px solid var(--border-primary);\n  }\n\n  .actions-grid {\n    display: grid;\n    grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));\n    gap: 1rem;\n    margin-top: 1rem;\n  }\n\n  .status-bar {\n    padding: 1rem;\n    background: var(--bg-secondary);\n    border-radius: 8px;\n    border: 1px solid var(--border-primary);\n    font-size: 0.875rem;\n  }\n\n  @media (max-width: 768px) {\n    .actions-grid {\n      grid-template-columns: 1fr;\n    }\n    \n    .dashboard-header {\n      margin-bottom: 1.5rem;\n    }\n  }\n</style>"],"names":["$.escape","$.attr_style","$.stringify","$.attr_class"],"mappings":";mCAAA;;MAIM,eAAY;AAAA,IACd,QAAQ;AAAA,IACR,QAAQ;AAAA,IACR,aAAa;AAAA,IACb,SAAS;AAAA;MAGP,SAAM;AAAA;MACN,IAAI;AAAA,MAAG,MAAM;AAAA,MAAuB,QAAQ;AAAA,MAAG,QAAQ;AAAA;;MACvD,IAAI;AAAA,MAAG,MAAM;AAAA,MAAuB,QAAQ;AAAA,MAAG,QAAQ;AAAA;IACvD,EAAA,IAAI,GAAG,MAAM,iBAAiB,QAAQ,GAAG,QAAQ,UAAS;AAAA;MAG1D,cAAW;AAAA,IACb,KAAK;AAAA,IACL,QAAQ;AAAA,IACR,gBAAgB;AAAA,IAChB,aAAa;AAAA;MAGX,cAAW;AAAA;MACX,IAAI;AAAA,MAAG,OAAO;AAAA,MAA0B,UAAU;AAAA,MAAI,QAAQ;AAAA;;MAC9D,IAAI;AAAA,MAAG,OAAO;AAAA,MAA0B,UAAU;AAAA,MAAG,QAAQ;AAAA;;MAC7D,IAAI;AAAA,MAAG,OAAO;AAAA,MAAoB,UAAU;AAAA,MAAI,QAAQ;AAAA;;WAqBnD,aAAa,SAAyB;AACvC,UAAA,UAAU,KAAK,MAAM,UAAU,EAAE;AACjC,UAAA,QAAQ,KAAK,MAAM,UAAU,EAAE;AAC/B,UAAA,OAAO,KAAK,MAAM,QAAQ,EAAE;AAE9B,QAAA,OAAO,EAAC,QAAA,GAAY,IAAI,KAAK,QAAQ,EAAE;AACvC,QAAA,QAAQ,EAAC,QAAA,GAAY,KAAK,KAAK,UAAU,EAAE;cACrC,OAAO;AAAA,EACnB;WAES,YAAY,OAAuB;cAChC,KAAK,MAAM,KAAK,CAAA;AAAA,EAC5B;WAES,eAAe,QAAwB;YACtC,QAAM;AAAA,WACP;eAAiB;AAAA,WACjB;eAAkB;AAAA,WAClB;eAAgB;AAAA;eACL;AAAA;EAEpB;uCA6Ca,MAAM;yCAuDN,WAAW;;;;8fA9EW,eAAe,aAAa,MAAM,8CAC1D,aAAa,MAAM,CAAA,yGAAAA,YAKM,aAAa,aAAa,MAAM,CAAA,CAAA,+GAAAA,YAIhC,YAAY,aAAa,WAAW,CAAA,CAAA,0GAAAA,YAIpC,aAAa,OAAO,CAAA,uHAAA;;QASjC,QAAK,WAAA,OAAA;yIAGS,eAAe,MAAM,MAAM,CAAA,CAAA,IAAA,eAAA,CAAA,YAAAA,YACnD,MAAM,IAAI,CAAA,sCAAAA,YAEe,MAAM,MAAM,CAAA,sBAAA;AAAA;gYAgBZ,YAAY,IAAI,QAAQ,CAAC,CAAA,CAAA,kEAAAC,WAAA,UAAAC,UAGX,YAAY,GAAG,CAAA,GAAA,CAAA,iMAAAF,YAO7B,YAAY,OAAO,QAAQ,CAAC,oFAG6C,SAAS,CAAA,EAAA,CAAA,GAAAC,WAAA,UAAAC,UAC1F,YAAY,MAAM,sIAMZ,YAAY,cAAc,CAAA,+GAAAF,YAI1B,YAAY,WAAW,CAAA,sHAAA;;QAS/B,OAAI,aAAA,SAAA;AAGQ,cAAA,IAAA,KAAA,4HAAAA,YAAA,KAAK,KAAK,CAAA,sCAAAA,YACV,KAAK,QAAQ,CAAA,4CAAAG,WAAA,iBAAAD,UAGd,KAAK,WAAW,WAAW,YAAY,UAAU,CAAA,EAAA,CAAA,GAAAD,WAAA,UAAAC,UACxD,KAAK,QAAQ,CAAA,GAAA,CAAA,gEAAAC,WAAA,cAAAD,UAGR,eAAe,KAAK,MAAM,CAAA,CAAA,IAAA,eAAA,CAAA,6FAAAF,YAEhD,KAAK,MAAM,CAAA,qBAAA;AAAA;AA6BwB,YAAA,IAAA,KAAA,6qBAAAA,aAAA,oBAAA,QAAO,oBAAkB,CAAA,qBAAA;;AA7I7E;"}