{"version":3,"file":"_page.svelte.js","sources":["../../../../../../src/routes/matron/+page.svelte"],"sourcesContent":["<!--\n  @component Matron Advisory Dashboard\n  Central hub for AI matron advisory services, expert guidance, and strategic recommendations\n-->\n\n<script lang=\"ts\">\n  import { onMount } from 'svelte';\n  import { writable } from 'svelte/store';\n\n  // Matron advisory state management\n  const activeConsultations = writable([]);\n  const expertDomains = writable([]);\n  const recommendationHistory = writable([]);\n  const matronMetrics = writable({\n    totalConsultations: 0,\n    activeExperts: 0,\n    resolutionRate: 0,\n    averageResponseTime: '0m'\n  });\n\n  // Mock data for development\n  let mockConsultations = [\n    {\n      id: 'cons-001',\n      title: 'Architecture Decision: Microservices vs Monolith',\n      domain: 'system-architecture',\n      expert: 'AI Architecture Advisor',\n      priority: 'high',\n      status: 'active',\n      requestedBy: 'Tech Lead',\n      created: new Date(Date.now() - 1000 * 60 * 20), // 20 minutes ago\n      context: {\n        projectType: 'E-commerce Platform',\n        scalabilityRequirements: 'High',\n        teamSize: '8 developers',\n        timeline: '6 months'\n      },\n      question: 'Given our scale requirements and team size, should we migrate from monolith to microservices architecture?',\n      complexity: 'high',\n      businessImpact: 'critical',\n      stakeholders: ['Engineering Team', 'Product Manager', 'CTO']\n    },\n    {\n      id: 'cons-002',\n      title: 'Performance Optimization Strategy',\n      domain: 'performance',\n      expert: 'AI Performance Specialist',\n      priority: 'medium',\n      status: 'analysis',\n      requestedBy: 'Senior Developer',\n      created: new Date(Date.now() - 1000 * 60 * 45), // 45 minutes ago\n      context: {\n        currentMetrics: '2.5s average load time',\n        targetMetrics: '<1s load time',\n        userBase: '50K active users',\n        infrastructure: 'AWS Cloud'\n      },\n      question: 'What are the most effective strategies to optimize our application performance from 2.5s to under 1s?',\n      complexity: 'medium',\n      businessImpact: 'high',\n      stakeholders: ['Performance Team', 'DevOps', 'Users']\n    },\n    {\n      id: 'cons-003',\n      title: 'Security Framework Implementation',\n      domain: 'security',\n      expert: 'AI Security Advisor',\n      priority: 'critical',\n      status: 'pending',\n      requestedBy: 'Security Team',\n      created: new Date(Date.now() - 1000 * 60 * 10), // 10 minutes ago\n      context: {\n        complianceRequirements: 'SOC2, GDPR',\n        dataTypes: 'PII, Financial',\n        currentFramework: 'Basic',\n        industryVertical: 'FinTech'\n      },\n      question: 'Design a comprehensive security framework for our FinTech application to meet SOC2 and GDPR requirements.',\n      complexity: 'critical',\n      businessImpact: 'critical',\n      stakeholders: ['Security Team', 'Compliance', 'Legal', 'C-Suite']\n    }\n  ];\n\n  let mockExperts = [\n    {\n      domain: 'system-architecture',\n      name: 'AI Architecture Advisor',\n      specialties: ['Microservices', 'Scalability', 'Design Patterns', 'Cloud Architecture'],\n      consultations: 15,\n      rating: 4.8,\n      status: 'available',\n      lastActive: new Date(Date.now() - 1000 * 60 * 5)\n    },\n    {\n      domain: 'performance',\n      name: 'AI Performance Specialist',\n      specialties: ['Database Optimization', 'Caching', 'Load Testing', 'Monitoring'],\n      consultations: 12,\n      rating: 4.9,\n      status: 'busy',\n      lastActive: new Date(Date.now() - 1000 * 60 * 2)\n    },\n    {\n      domain: 'security',\n      name: 'AI Security Advisor',\n      specialties: ['Compliance', 'Vulnerability Assessment', 'Secure Coding', 'Incident Response'],\n      consultations: 18,\n      rating: 4.7,\n      status: 'available',\n      lastActive: new Date(Date.now() - 1000 * 60 * 1)\n    },\n    {\n      domain: 'devops',\n      name: 'AI DevOps Consultant',\n      specialties: ['CI/CD', 'Infrastructure as Code', 'Monitoring', 'Automation'],\n      consultations: 9,\n      rating: 4.6,\n      status: 'available',\n      lastActive: new Date(Date.now() - 1000 * 60 * 3)\n    },\n    {\n      domain: 'frontend',\n      name: 'AI Frontend Expert',\n      specialties: ['React', 'Vue', 'Performance', 'Accessibility'],\n      consultations: 7,\n      rating: 4.5,\n      status: 'offline',\n      lastActive: new Date(Date.now() - 1000 * 60 * 30)\n    }\n  ];\n\n  let mockRecommendations = [\n    {\n      id: 'rec-001',\n      consultationId: 'cons-001',\n      title: 'Incremental Migration to Microservices',\n      expert: 'AI Architecture Advisor',\n      summary: 'Recommended phased approach starting with user service separation',\n      confidence: 0.89,\n      implementationComplexity: 'high',\n      estimatedTimeframe: '4-6 months',\n      riskLevel: 'medium',\n      created: new Date(Date.now() - 1000 * 60 * 60), // 1 hour ago\n      status: 'under-review'\n    },\n    {\n      id: 'rec-002',\n      consultationId: 'cons-002',\n      title: 'Database Query Optimization Plan',\n      expert: 'AI Performance Specialist',\n      summary: 'Implement connection pooling, query optimization, and Redis caching',\n      confidence: 0.92,\n      implementationComplexity: 'medium',\n      estimatedTimeframe: '2-3 weeks',\n      riskLevel: 'low',\n      created: new Date(Date.now() - 1000 * 60 * 30), // 30 minutes ago\n      status: 'approved'\n    }\n  ];\n\n  onMount(async () => {\n    // Load real data from APIs\n    await loadActiveConsultations();\n    await loadExpertDomains();\n    await loadRecommendationHistory();\n    await loadMatronMetrics();\n  });\n\n  async function loadActiveConsultations() {\n    try {\n      const response = await fetch('/api/matron/consultations');\n      if (response.ok) {\n        const data = await response.json();\n        activeConsultations.set(data.consultations || mockConsultations);\n      } else {\n        // Use mock data for development\n        activeConsultations.set(mockConsultations);\n      }\n    } catch (error) {\n      console.error('Failed to load consultations:', error);\n      activeConsultations.set(mockConsultations);\n    }\n  }\n\n  async function loadExpertDomains() {\n    try {\n      const response = await fetch('/api/matron/experts');\n      if (response.ok) {\n        const data = await response.json();\n        expertDomains.set(data.experts || mockExperts);\n      } else {\n        expertDomains.set(mockExperts);\n      }\n    } catch (error) {\n      console.error('Failed to load experts:', error);\n      expertDomains.set(mockExperts);\n    }\n  }\n\n  async function loadRecommendationHistory() {\n    try {\n      const response = await fetch('/api/matron/recommendations');\n      if (response.ok) {\n        const data = await response.json();\n        recommendationHistory.set(data.recommendations || mockRecommendations);\n      } else {\n        recommendationHistory.set(mockRecommendations);\n      }\n    } catch (error) {\n      console.error('Failed to load recommendations:', error);\n      recommendationHistory.set(mockRecommendations);\n    }\n  }\n\n  async function loadMatronMetrics() {\n    try {\n      const response = await fetch('/api/matron/metrics');\n      if (response.ok) {\n        const data = await response.json();\n        matronMetrics.set(data);\n      } else {\n        // Set mock metrics\n        matronMetrics.set({\n          totalConsultations: mockConsultations.length + 45,\n          activeExperts: mockExperts.filter(e => e.status !== 'offline').length,\n          resolutionRate: 94,\n          averageResponseTime: '18m'\n        });\n      }\n    } catch (error) {\n      console.error('Failed to load matron metrics:', error);\n    }\n  }\n\n  async function requestConsultation(domain) {\n    // Navigate to consultation request form\n    window.location.href = `/matron/request?domain=${domain}`;\n  }\n\n  function getStatusColor(status) {\n    switch (status) {\n      case 'active': return 'text-blue-400';\n      case 'analysis': return 'text-yellow-400';\n      case 'pending': return 'text-orange-400';\n      case 'completed': return 'text-green-400';\n      case 'escalated': return 'text-red-400';\n      default: return 'text-gray-400';\n    }\n  }\n\n  function getPriorityColor(priority) {\n    switch (priority) {\n      case 'critical': return 'text-red-400 bg-red-900/20';\n      case 'high': return 'text-orange-400 bg-orange-900/20';\n      case 'medium': return 'text-yellow-400 bg-yellow-900/20';\n      case 'low': return 'text-blue-400 bg-blue-900/20';\n      default: return 'text-gray-400 bg-gray-900/20';\n    }\n  }\n\n  function getComplexityColor(complexity) {\n    switch (complexity) {\n      case 'critical': return 'text-red-400';\n      case 'high': return 'text-orange-400';\n      case 'medium': return 'text-yellow-400';\n      case 'low': return 'text-blue-400';\n      default: return 'text-gray-400';\n    }\n  }\n\n  function getExpertStatusColor(status) {\n    switch (status) {\n      case 'available': return 'text-green-400';\n      case 'busy': return 'text-yellow-400';\n      case 'offline': return 'text-gray-400';\n      default: return 'text-gray-400';\n    }\n  }\n\n  function formatTimeAgo(date) {\n    const now = new Date();\n    const diffMs = now.getTime() - date.getTime();\n    const diffMinutes = Math.floor(diffMs / (1000 * 60));\n    \n    if (diffMinutes < 60) {\n      return `${diffMinutes}m ago`;\n    } else if (diffMinutes < 24 * 60) {\n      return `${Math.floor(diffMinutes / 60)}h ago`;\n    } else {\n      return `${Math.floor(diffMinutes / (24 * 60))}d ago`;\n    }\n  }\n</script>\n\n<svelte:head>\n  <title>Matron Advisory - AI Expert Guidance - Claude Code Zen</title>\n</svelte:head>\n\n<div class=\"min-h-screen bg-gray-900 text-white\">\n  <!-- Header -->\n  <div class=\"bg-gray-800 border-b border-gray-700 p-6\">\n    <div class=\"max-w-7xl mx-auto\">\n      <h1 class=\"text-3xl font-bold text-purple-400 mb-2\">🧙‍♀️ Matron Advisory</h1>\n      <p class=\"text-gray-300\">AI-powered expert guidance and strategic recommendations</p>\n      \n      <!-- Status Overview -->\n      <div class=\"mt-4 grid grid-cols-2 md:grid-cols-4 gap-4\">\n        <div class=\"bg-gray-700 rounded-lg p-3\">\n          <div class=\"text-sm text-gray-400\">Total Consultations</div>\n          <div class=\"text-blue-400 font-semibold\">{$matronMetrics.totalConsultations}</div>\n        </div>\n        <div class=\"bg-gray-700 rounded-lg p-3\">\n          <div class=\"text-sm text-gray-400\">Active Experts</div>\n          <div class=\"text-green-400 font-semibold\">{$matronMetrics.activeExperts}</div>\n        </div>\n        <div class=\"bg-gray-700 rounded-lg p-3\">\n          <div class=\"text-sm text-gray-400\">Resolution Rate</div>\n          <div class=\"text-purple-400 font-semibold\">{$matronMetrics.resolutionRate}%</div>\n        </div>\n        <div class=\"bg-gray-700 rounded-lg p-3\">\n          <div class=\"text-sm text-gray-400\">Avg Response Time</div>\n          <div class=\"text-yellow-400 font-semibold\">{$matronMetrics.averageResponseTime}</div>\n        </div>\n      </div>\n    </div>\n  </div>\n\n  <div class=\"max-w-7xl mx-auto p-6 grid grid-cols-1 xl:grid-cols-3 gap-6\">\n    <!-- Main Content Area -->\n    <div class=\"xl:col-span-2 space-y-6\">\n      <!-- Active Consultations -->\n      <div class=\"bg-gray-800 rounded-lg p-6 border border-gray-700\">\n        <h2 class=\"text-xl font-semibold mb-4\">💭 Active Consultations</h2>\n        \n        <div class=\"space-y-4\">\n          {#each $activeConsultations as consultation}\n            <div class=\"bg-gray-700 rounded-lg p-4 border-l-4 {consultation.priority === 'critical' ? 'border-red-400' : consultation.priority === 'high' ? 'border-orange-400' : 'border-blue-400'}\">\n              <!-- Consultation Header -->\n              <div class=\"flex justify-between items-start mb-3\">\n                <div>\n                  <h3 class=\"font-semibold text-lg\">{consultation.title}</h3>\n                  <div class=\"flex items-center gap-4 text-sm text-gray-300\">\n                    <span class=\"{getStatusColor(consultation.status)}\">● {consultation.status.toUpperCase()}</span>\n                    <span class=\"px-2 py-1 rounded text-xs {getPriorityColor(consultation.priority)}\">{consultation.priority.toUpperCase()}</span>\n                    <span class=\"text-purple-400\">{consultation.domain}</span>\n                    <span>{formatTimeAgo(consultation.created)}</span>\n                  </div>\n                </div>\n                <div class=\"text-right text-sm text-gray-400\">\n                  <div>ID: {consultation.id}</div>\n                  <div>Expert: {consultation.expert}</div>\n                </div>\n              </div>\n\n              <!-- Consultation Question -->\n              <div class=\"mb-3\">\n                <div class=\"text-sm text-gray-400 mb-1\">Question:</div>\n                <div class=\"text-gray-300 text-sm bg-gray-800 rounded p-2\">{consultation.question}</div>\n              </div>\n\n              <!-- Context & Details -->\n              <div class=\"mb-3 grid grid-cols-1 md:grid-cols-2 gap-4 text-sm\">\n                <div>\n                  <div class=\"text-gray-400\">Business Impact:</div>\n                  <div class=\"{consultation.businessImpact === 'critical' ? 'text-red-400' : consultation.businessImpact === 'high' ? 'text-orange-400' : 'text-yellow-400'}\">\n                    {consultation.businessImpact.toUpperCase()}\n                  </div>\n                </div>\n                <div>\n                  <div class=\"text-gray-400\">Complexity:</div>\n                  <div class=\"{getComplexityColor(consultation.complexity)}\">{consultation.complexity.toUpperCase()}</div>\n                </div>\n                <div>\n                  <div class=\"text-gray-400\">Requested by:</div>\n                  <div class=\"text-blue-400\">{consultation.requestedBy}</div>\n                </div>\n                <div>\n                  <div class=\"text-gray-400\">Stakeholders:</div>\n                  <div>{consultation.stakeholders.join(', ')}</div>\n                </div>\n              </div>\n\n              <!-- Context Details -->\n              {#if consultation.context}\n                <div class=\"mb-3\">\n                  <div class=\"text-sm text-gray-400 mb-1\">Context:</div>\n                  <div class=\"grid grid-cols-2 gap-2 text-xs\">\n                    {#each Object.entries(consultation.context) as [key, value]}\n                      <div class=\"text-gray-300\">\n                        <span class=\"text-gray-500\">{key.replace(/([A-Z])/g, ' $1').replace(/^./, str => str.toUpperCase())}:</span> {value}\n                      </div>\n                    {/each}\n                  </div>\n                </div>\n              {/if}\n\n              <!-- Action Buttons -->\n              <div class=\"flex gap-2\">\n                <a \n                  href=\"/matron/consultation/{consultation.id}\" \n                  class=\"bg-blue-600 hover:bg-blue-700 px-3 py-1 rounded text-sm transition-colors\"\n                >\n                  👁️ View Details\n                </a>\n                <button class=\"bg-green-600 hover:bg-green-700 px-3 py-1 rounded text-sm transition-colors\">\n                  💬 Add Input\n                </button>\n                <button class=\"bg-purple-600 hover:bg-purple-700 px-3 py-1 rounded text-sm transition-colors\">\n                  📋 View Recommendations\n                </button>\n              </div>\n            </div>\n          {/each}\n          \n          {#if $activeConsultations.length === 0}\n            <div class=\"text-center py-8 text-gray-500\">\n              <p>No active consultations</p>\n            </div>\n          {/if}\n        </div>\n      </div>\n\n      <!-- Recent Recommendations -->\n      <div class=\"bg-gray-800 rounded-lg p-6 border border-gray-700\">\n        <h2 class=\"text-xl font-semibold mb-4\">💡 Recent Recommendations</h2>\n        \n        <div class=\"space-y-4\">\n          {#each $recommendationHistory as recommendation}\n            <div class=\"bg-gray-700 rounded-lg p-4\">\n              <div class=\"flex justify-between items-start mb-3\">\n                <div>\n                  <h3 class=\"font-semibold\">{recommendation.title}</h3>\n                  <div class=\"text-sm text-gray-300\">by {recommendation.expert}</div>\n                </div>\n                <div class=\"text-right text-sm\">\n                  <div class=\"px-2 py-1 rounded text-xs {recommendation.status === 'approved' ? 'bg-green-600' : 'bg-yellow-600'}\">\n                    {recommendation.status.replace('-', ' ').toUpperCase()}\n                  </div>\n                  <div class=\"text-gray-400 mt-1\">{formatTimeAgo(recommendation.created)}</div>\n                </div>\n              </div>\n\n              <p class=\"text-gray-300 text-sm mb-3\">{recommendation.summary}</p>\n\n              <div class=\"grid grid-cols-2 md:grid-cols-4 gap-4 text-sm mb-3\">\n                <div>\n                  <div class=\"text-gray-400\">Confidence</div>\n                  <div class=\"text-blue-400\">{Math.round(recommendation.confidence * 100)}%</div>\n                </div>\n                <div>\n                  <div class=\"text-gray-400\">Complexity</div>\n                  <div class=\"{getComplexityColor(recommendation.implementationComplexity)}\">{recommendation.implementationComplexity.toUpperCase()}</div>\n                </div>\n                <div>\n                  <div class=\"text-gray-400\">Timeframe</div>\n                  <div class=\"text-purple-400\">{recommendation.estimatedTimeframe}</div>\n                </div>\n                <div>\n                  <div class=\"text-gray-400\">Risk Level</div>\n                  <div class=\"{recommendation.riskLevel === 'high' ? 'text-red-400' : recommendation.riskLevel === 'medium' ? 'text-yellow-400' : 'text-green-400'}\">\n                    {recommendation.riskLevel.toUpperCase()}\n                  </div>\n                </div>\n              </div>\n\n              <div class=\"flex gap-2\">\n                <a \n                  href=\"/matron/recommendation/{recommendation.id}\" \n                  class=\"bg-blue-600 hover:bg-blue-700 px-3 py-1 rounded text-sm transition-colors\"\n                >\n                  📄 Full Report\n                </a>\n                <button class=\"bg-green-600 hover:bg-green-700 px-3 py-1 rounded text-sm transition-colors\">\n                  ✅ Approve\n                </button>\n                <button class=\"bg-orange-600 hover:bg-orange-700 px-3 py-1 rounded text-sm transition-colors\">\n                  📝 Request Changes\n                </button>\n              </div>\n            </div>\n          {/each}\n          \n          {#if $recommendationHistory.length === 0}\n            <div class=\"text-center py-8 text-gray-500\">\n              <p>No recent recommendations</p>\n            </div>\n          {/if}\n        </div>\n      </div>\n    </div>\n\n    <!-- Sidebar -->\n    <div class=\"space-y-6\">\n      <!-- Expert Domains -->\n      <div class=\"bg-gray-800 rounded-lg p-6 border border-gray-700\">\n        <h3 class=\"text-lg font-semibold mb-4\">👨‍💼 Available Experts</h3>\n        <div class=\"space-y-3\">\n          {#each $expertDomains as expert}\n            <div class=\"bg-gray-700 rounded-lg p-3\">\n              <div class=\"flex justify-between items-start mb-2\">\n                <div>\n                  <div class=\"font-medium\">{expert.name}</div>\n                  <div class=\"text-sm text-gray-400\">{expert.domain.replace('-', ' ').toUpperCase()}</div>\n                </div>\n                <div class=\"text-right text-sm\">\n                  <div class=\"{getExpertStatusColor(expert.status)}\">● {expert.status.toUpperCase()}</div>\n                  <div class=\"text-gray-400\">⭐ {expert.rating}</div>\n                </div>\n              </div>\n              \n              <div class=\"text-xs text-gray-300 mb-2\">\n                <div class=\"text-gray-400\">Specialties:</div>\n                <div class=\"flex flex-wrap gap-1\">\n                  {#each expert.specialties.slice(0, 3) as specialty}\n                    <span class=\"bg-blue-600 text-blue-100 px-1 py-0.5 rounded\">{specialty}</span>\n                  {/each}\n                  {#if expert.specialties.length > 3}\n                    <span class=\"text-gray-400\">+{expert.specialties.length - 3}</span>\n                  {/if}\n                </div>\n              </div>\n\n              <div class=\"flex justify-between text-xs text-gray-400 mb-2\">\n                <span>{expert.consultations} consultations</span>\n                <span>Last: {formatTimeAgo(expert.lastActive)}</span>\n              </div>\n\n              <button \n                on:click={() => requestConsultation(expert.domain)}\n                class=\"w-full bg-purple-600 hover:bg-purple-700 px-2 py-1 rounded text-sm transition-colors\"\n                disabled={expert.status === 'offline'}\n              >\n                💬 Request Consultation\n              </button>\n            </div>\n          {/each}\n        </div>\n      </div>\n\n      <!-- Quick Actions -->\n      <div class=\"bg-gray-800 rounded-lg p-6 border border-gray-700\">\n        <h3 class=\"text-lg font-semibold mb-4\">⚡ Quick Actions</h3>\n        <div class=\"space-y-2\">\n          <a href=\"/matron/request\" class=\"w-full text-left bg-gray-700 hover:bg-gray-600 p-3 rounded-lg transition-colors block\">\n            💭 New Consultation\n          </a>\n          <a href=\"/matron/history\" class=\"w-full text-left bg-gray-700 hover:bg-gray-600 p-3 rounded-lg transition-colors block\">\n            📚 Consultation History\n          </a>\n          <a href=\"/matron/experts\" class=\"w-full text-left bg-gray-700 hover:bg-gray-600 p-3 rounded-lg transition-colors block\">\n            👨‍💼 Expert Directory\n          </a>\n          <a href=\"/matron/analytics\" class=\"w-full text-left bg-gray-700 hover:bg-gray-600 p-3 rounded-lg transition-colors block\">\n            📊 Advisory Analytics\n          </a>\n          <a href=\"/matron/knowledge-base\" class=\"w-full text-left bg-gray-700 hover:bg-gray-600 p-3 rounded-lg transition-colors block\">\n            📖 Knowledge Base\n          </a>\n        </div>\n      </div>\n\n      <!-- Advisory Statistics -->\n      <div class=\"bg-gray-800 rounded-lg p-6 border border-gray-700\">\n        <h3 class=\"text-lg font-semibold mb-4\">📈 Advisory Statistics</h3>\n        <div class=\"space-y-3\">\n          <div>\n            <div class=\"flex justify-between mb-1\">\n              <span class=\"text-gray-400\">Resolution Rate</span>\n              <span class=\"text-green-400\">{$matronMetrics.resolutionRate}%</span>\n            </div>\n            <div class=\"w-full bg-gray-700 rounded-full h-2\">\n              <div class=\"bg-green-400 h-2 rounded-full\" style=\"width: {$matronMetrics.resolutionRate}%\"></div>\n            </div>\n          </div>\n          \n          <div class=\"flex justify-between\">\n            <span class=\"text-gray-400\">Active Consultations</span>\n            <span class=\"text-blue-400\">{$activeConsultations.length}</span>\n          </div>\n          \n          <div class=\"flex justify-between\">\n            <span class=\"text-gray-400\">Experts Online</span>\n            <span class=\"text-green-400\">{$expertDomains.filter(e => e.status === 'available').length}</span>\n          </div>\n          \n          <div class=\"flex justify-between\">\n            <span class=\"text-gray-400\">Avg Response</span>\n            <span class=\"text-purple-400\">{$matronMetrics.averageResponseTime}</span>\n          </div>\n        </div>\n      </div>\n\n      <!-- Recent Activity -->\n      <div class=\"bg-gray-800 rounded-lg p-6 border border-gray-700\">\n        <h3 class=\"text-lg font-semibold mb-4\">🕐 Recent Activity</h3>\n        <div class=\"space-y-3 text-sm\">\n          <div class=\"border-l-2 border-green-400 pl-3\">\n            <div class=\"text-green-400\">Consultation completed</div>\n            <div class=\"text-gray-400\">Performance optimization - 2h ago</div>\n          </div>\n          <div class=\"border-l-2 border-blue-400 pl-3\">\n            <div class=\"text-blue-400\">New expert available</div>\n            <div class=\"text-gray-400\">AI DevOps Consultant online - 1h ago</div>\n          </div>\n          <div class=\"border-l-2 border-yellow-400 pl-3\">\n            <div class=\"text-yellow-400\">Recommendation pending</div>\n            <div class=\"text-gray-400\">Architecture decision review - 30m ago</div>\n          </div>\n          <div class=\"border-l-2 border-purple-400 pl-3\">\n            <div class=\"text-purple-400\">Knowledge updated</div>\n            <div class=\"text-gray-400\">Security best practices - 15m ago</div>\n          </div>\n        </div>\n      </div>\n    </div>\n  </div>\n</div>\n\n<style>\n  :global(body) {\n    background-color: #111827;\n  }\n</style>"],"names":["$.escape","$.store_get","$.attr_class","$.stringify","$.ensure_array_like","$.attr"],"mappings":"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"}