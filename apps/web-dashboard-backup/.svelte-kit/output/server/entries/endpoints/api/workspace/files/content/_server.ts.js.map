{"version":3,"file":"_server.ts.js","sources":["../../../../../../../../../src/routes/api/workspace/files/content/+server.ts"],"sourcesContent":["/**\n * @fileoverview Workspace File Content API - Provides file content access\n */\n\nimport { json } from '@sveltejs/kit';\nimport { readFile, stat } from 'fs/promises';\nimport { resolve, join } from 'path';\nimport type { RequestHandler } from './$types';\n\nexport const GET: RequestHandler = async ({ url }) => {\n  try {\n    const searchParams = url.searchParams;\n    const path = searchParams.get('path');\n    \n    if (!path) {\n      return json({ error: 'Path parameter is required' }, { status: 400 });\n    }\n    \n    // Base directory - use current working directory for now\n    const baseDir = process.cwd();\n    const targetPath = join(baseDir, path);\n    \n    // Resolve the path to prevent directory traversal attacks\n    const resolvedPath = resolve(targetPath);\n    \n    // Basic security check - ensure we're within the base directory\n    if (!resolvedPath.startsWith(resolve(baseDir))) {\n      return json({ error: 'Access denied' }, { status: 403 });\n    }\n    \n    try {\n      // Check if file exists and is readable\n      const stats = await stat(resolvedPath);\n      \n      if (stats.isDirectory()) {\n        return json({ error: 'Path is a directory, not a file' }, { status: 400 });\n      }\n      \n      // Check file size (limit to 1MB for safety)\n      const maxSize = 1024 * 1024; // 1MB\n      if (stats.size > maxSize) {\n        return json({ \n          error: 'File too large to display',\n          size: stats.size,\n          maxSize \n        }, { status: 413 });\n      }\n      \n      // Read file content\n      const content = await readFile(resolvedPath, 'utf8');\n      \n      return json({\n        content,\n        size: stats.size,\n        modified: stats.mtime.toISOString(),\n        path,\n        encoding: 'utf8'\n      });\n      \n    } catch (fsError: any) {\n      console.error('File read error:', fsError);\n      \n      if (fsError.code === 'ENOENT') {\n        return json({ error: 'File not found' }, { status: 404 });\n      } else if (fsError.code === 'EACCES') {\n        return json({ error: 'Permission denied' }, { status: 403 });\n      } else if (fsError.code === 'EISDIR') {\n        return json({ error: 'Path is a directory' }, { status: 400 });\n      } else {\n        return json({ error: 'Failed to read file' }, { status: 500 });\n      }\n    }\n    \n  } catch (error) {\n    console.error('Workspace file content API error:', error);\n    return json({ error: 'Internal server error' }, { status: 500 });\n  }\n};"],"names":[],"mappings":";;;AASO,MAAM,MAAsB,OAAO,EAAE,UAAU;AACpD,MAAI;AACF,UAAM,eAAe,IAAI;AACzB,UAAM,OAAO,aAAa,IAAI,MAAM;AAEpC,QAAI,CAAC,MAAM;AACT,aAAO,KAAK,EAAE,OAAO,6BAAA,GAAgC,EAAE,QAAQ,KAAK;AAAA,IACtE;AAGA,UAAM,UAAU,QAAQ,IAAA;AACxB,UAAM,aAAa,KAAK,SAAS,IAAI;AAGrC,UAAM,eAAe,QAAQ,UAAU;AAGvC,QAAI,CAAC,aAAa,WAAW,QAAQ,OAAO,CAAC,GAAG;AAC9C,aAAO,KAAK,EAAE,OAAO,gBAAA,GAAmB,EAAE,QAAQ,KAAK;AAAA,IACzD;AAEA,QAAI;AAEF,YAAM,QAAQ,MAAM,KAAK,YAAY;AAErC,UAAI,MAAM,eAAe;AACvB,eAAO,KAAK,EAAE,OAAO,kCAAA,GAAqC,EAAE,QAAQ,KAAK;AAAA,MAC3E;AAGA,YAAM,UAAU,OAAO;AACvB,UAAI,MAAM,OAAO,SAAS;AACxB,eAAO,KAAK;AAAA,UACV,OAAO;AAAA,UACP,MAAM,MAAM;AAAA,UACZ;AAAA,QAAA,GACC,EAAE,QAAQ,KAAK;AAAA,MACpB;AAGA,YAAM,UAAU,MAAM,SAAS,cAAc,MAAM;AAEnD,aAAO,KAAK;AAAA,QACV;AAAA,QACA,MAAM,MAAM;AAAA,QACZ,UAAU,MAAM,MAAM,YAAA;AAAA,QACtB;AAAA,QACA,UAAU;AAAA,MAAA,CACX;AAAA,IAEH,SAAS,SAAc;AACrB,cAAQ,MAAM,oBAAoB,OAAO;AAEzC,UAAI,QAAQ,SAAS,UAAU;AAC7B,eAAO,KAAK,EAAE,OAAO,iBAAA,GAAoB,EAAE,QAAQ,KAAK;AAAA,MAC1D,WAAW,QAAQ,SAAS,UAAU;AACpC,eAAO,KAAK,EAAE,OAAO,oBAAA,GAAuB,EAAE,QAAQ,KAAK;AAAA,MAC7D,WAAW,QAAQ,SAAS,UAAU;AACpC,eAAO,KAAK,EAAE,OAAO,sBAAA,GAAyB,EAAE,QAAQ,KAAK;AAAA,MAC/D,OAAO;AACL,eAAO,KAAK,EAAE,OAAO,sBAAA,GAAyB,EAAE,QAAQ,KAAK;AAAA,MAC/D;AAAA,IACF;AAAA,EAEF,SAAS,OAAO;AACd,YAAQ,MAAM,qCAAqC,KAAK;AACxD,WAAO,KAAK,EAAE,OAAO,wBAAA,GAA2B,EAAE,QAAQ,KAAK;AAAA,EACjE;AACF;"}