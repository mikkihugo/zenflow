{"version":3,"file":"2.Bp-V9BAK.js","sources":["../../../../../../src/routes/+page.svelte"],"sourcesContent":["<script lang=\"ts\">\n  import { onMount } from 'svelte';\n  \n  // Simulated real-time data (would connect to existing WebSocket)\n  let systemStatus = {\n    health: 'healthy',\n    uptime: 0,\n    memoryUsage: 0,\n    version: '2.0.0-alpha.44'\n  };\n  \n  let swarms = [\n    { id: 1, name: 'Document Processing', agents: 4, status: 'active' },\n    { id: 2, name: 'Feature Development', agents: 6, status: 'active' },\n    { id: 3, name: 'Code Analysis', agents: 2, status: 'warning' }\n  ];\n  \n  let performance = {\n    cpu: 23.5,\n    memory: 67.2,\n    requestsPerMin: 127,\n    avgResponse: 45\n  };\n  \n  let recentTasks = [\n    { id: 1, title: 'Process PRD: User Auth', progress: 75, status: 'active' },\n    { id: 2, title: 'Generate ADR: Database', progress: 0, status: 'pending' },\n    { id: 3, title: 'Code Review: API', progress: 50, status: 'active' }\n  ];\n  \n  // Simulate real-time updates\n  onMount(() => {\n    const interval = setInterval(() => {\n      systemStatus.uptime += 1;\n      systemStatus.memoryUsage = Math.random() * 1000 + 500; // 500-1500 MB\n      performance.cpu = Math.random() * 40 + 10; // 10-50%\n      performance.memory = Math.random() * 30 + 50; // 50-80%\n      performance.requestsPerMin = Math.floor(Math.random() * 50 + 100); // 100-150\n      performance.avgResponse = Math.floor(Math.random() * 20 + 30); // 30-50ms\n      \n      // Trigger reactivity\n      systemStatus = systemStatus;\n      performance = performance;\n    }, 2000);\n    \n    return () => clearInterval(interval);\n  });\n  \n  function formatUptime(seconds: number): string {\n    const minutes = Math.floor(seconds / 60);\n    const hours = Math.floor(minutes / 60);\n    const days = Math.floor(hours / 24);\n    \n    if (days > 0) return `${days}d ${hours % 24}h`;\n    if (hours > 0) return `${hours}h ${minutes % 60}m`;\n    return `${minutes}m`;\n  }\n  \n  function formatBytes(bytes: number): string {\n    return `${Math.round(bytes)}MB`;\n  }\n  \n  function getStatusColor(status: string): string {\n    switch (status) {\n      case 'active': return 'success';\n      case 'warning': return 'warning';\n      case 'error': return 'error';\n      default: return 'inactive';\n    }\n  }\n</script>\n\n<svelte:head>\n  <title>Claude Code Zen - Dashboard</title>\n</svelte:head>\n\n<div class=\"dashboard\">\n  <div class=\"dashboard-header\">\n    <h1>Dashboard Overview</h1>\n    <p class=\"text-secondary\">Real-time system monitoring and swarm management</p>\n  </div>\n\n  <!-- System Status Grid -->\n  <div class=\"grid grid-auto mb-5\">\n    <!-- System Health Card -->\n    <div class=\"card\">\n      <h3>‚ö° System Status</h3>\n      <div class=\"metrics\">\n        <div class=\"metric\">\n          <span class=\"metric-label\">System Health</span>\n          <span class=\"metric-value flex items-center gap-2\">\n            <span class=\"status-dot {getStatusColor(systemStatus.health)}\"></span>\n            {systemStatus.health}\n          </span>\n        </div>\n        <div class=\"metric\">\n          <span class=\"metric-label\">Uptime</span>\n          <span class=\"metric-value\">{formatUptime(systemStatus.uptime)}</span>\n        </div>\n        <div class=\"metric\">\n          <span class=\"metric-label\">Memory Usage</span>\n          <span class=\"metric-value\">{formatBytes(systemStatus.memoryUsage)}</span>\n        </div>\n        <div class=\"metric\">\n          <span class=\"metric-label\">Version</span>\n          <span class=\"metric-value\">{systemStatus.version}</span>\n        </div>\n      </div>\n    </div>\n\n    <!-- Active Swarms Card -->\n    <div class=\"card\">\n      <h3>üêù Active Swarms</h3>\n      <div class=\"swarms-list\">\n        {#each swarms as swarm}\n          <div class=\"metric\">\n            <span class=\"metric-label flex items-center gap-2\">\n              <span class=\"status-dot {getStatusColor(swarm.status)}\"></span>\n              {swarm.name}\n            </span>\n            <span class=\"metric-value\">{swarm.agents} agents</span>\n          </div>\n        {/each}\n      </div>\n      <div class=\"mt-3\">\n        <button class=\"btn primary\">üöÄ Initialize New Swarm</button>\n      </div>\n    </div>\n\n    <!-- Performance Metrics Card -->\n    <div class=\"card\">\n      <h3>üìä Performance</h3>\n      <div class=\"performance-metrics\">\n        <div class=\"metric-item mb-3\">\n          <div class=\"flex justify-between items-center mb-1\">\n            <span class=\"metric-label\">CPU Usage</span>\n            <span class=\"metric-value\">{performance.cpu.toFixed(1)}%</span>\n          </div>\n          <div class=\"progress\">\n            <div class=\"progress-fill\" style=\"width: {performance.cpu}%\"></div>\n          </div>\n        </div>\n        \n        <div class=\"metric-item mb-3\">\n          <div class=\"flex justify-between items-center mb-1\">\n            <span class=\"metric-label\">Memory Usage</span>\n            <span class=\"metric-value\">{performance.memory.toFixed(1)}%</span>\n          </div>\n          <div class=\"progress\">\n            <div class=\"progress-fill {performance.memory > 80 ? 'warning' : performance.memory > 90 ? 'error' : 'success'}\" \n                 style=\"width: {performance.memory}%\"></div>\n          </div>\n        </div>\n        \n        <div class=\"metric\">\n          <span class=\"metric-label\">Requests/min</span>\n          <span class=\"metric-value\">{performance.requestsPerMin}</span>\n        </div>\n        <div class=\"metric\">\n          <span class=\"metric-label\">Avg Response</span>\n          <span class=\"metric-value\">{performance.avgResponse}ms</span>\n        </div>\n      </div>\n    </div>\n\n    <!-- Recent Tasks Card -->\n    <div class=\"card\">\n      <h3>‚úÖ Recent Tasks</h3>\n      <div class=\"tasks-list\">\n        {#each recentTasks as task}\n          <div class=\"task-item mb-3\">\n            <div class=\"flex justify-between items-center mb-1\">\n              <span class=\"metric-label\">{task.title}</span>\n              <span class=\"metric-value\">{task.progress}%</span>\n            </div>\n            <div class=\"progress\">\n              <div class=\"progress-fill {task.status === 'active' ? 'success' : 'inactive'}\" \n                   style=\"width: {task.progress}%\"></div>\n            </div>\n            <div class=\"flex items-center gap-2 mt-1\">\n              <span class=\"status-dot {getStatusColor(task.status)}\"></span>\n              <span class=\"text-muted\" style=\"font-size: 0.75rem; text-transform: capitalize;\">\n                {task.status}\n              </span>\n            </div>\n          </div>\n        {/each}\n      </div>\n      <div class=\"mt-3\">\n        <button class=\"btn\">üìã View All Tasks</button>\n      </div>\n    </div>\n  </div>\n\n  <!-- Quick Actions -->\n  <div class=\"card\">\n    <h3>‚ö° Quick Actions</h3>\n    <div class=\"actions-grid\">\n      <button class=\"btn primary\">ü§ñ Create New Swarm</button>\n      <button class=\"btn\">üìù Create New Task</button>\n      <button class=\"btn\">üîÑ Refresh System</button>\n      <button class=\"btn\">üìä View Analytics</button>\n      <button class=\"btn\">‚öôÔ∏è System Settings</button>\n      <button class=\"btn\">üìã View Logs</button>\n    </div>\n  </div>\n\n  <!-- Real-time Status -->\n  <div class=\"status-bar mt-4 text-center text-muted\">\n    <span class=\"flex items-center justify-center gap-2\">\n      <span class=\"status-dot active\"></span>\n      Real-time updates active ‚Ä¢ Last updated: {new Date().toLocaleTimeString()}\n    </span>\n  </div>\n</div>\n\n<style>\n  .dashboard {\n    animation: fadeIn 0.5s ease;\n  }\n\n  .dashboard-header {\n    text-align: center;\n    margin-bottom: 2rem;\n  }\n\n  .dashboard-header h1 {\n    color: var(--accent-primary);\n    margin-bottom: 0.5rem;\n  }\n\n  .metrics {\n    display: flex;\n    flex-direction: column;\n    gap: 0.5rem;\n  }\n\n  .metric-item {\n    margin-bottom: 1rem;\n  }\n\n  .metric-item:last-child {\n    margin-bottom: 0;\n  }\n\n  .swarms-list {\n    margin-bottom: 1rem;\n  }\n\n  .tasks-list {\n    margin-bottom: 1rem;\n  }\n\n  .task-item {\n    padding: 0.75rem;\n    background: var(--bg-tertiary);\n    border-radius: 6px;\n    border: 1px solid var(--border-primary);\n  }\n\n  .actions-grid {\n    display: grid;\n    grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));\n    gap: 1rem;\n    margin-top: 1rem;\n  }\n\n  .status-bar {\n    padding: 1rem;\n    background: var(--bg-secondary);\n    border-radius: 8px;\n    border: 1px solid var(--border-primary);\n    font-size: 0.875rem;\n  }\n\n  @media (max-width: 768px) {\n    .actions-grid {\n      grid-template-columns: 1fr;\n    }\n    \n    .dashboard-header {\n      margin-bottom: 1.5rem;\n    }\n  }\n</style>"],"names":["systemStatus","$.mutable_source","swarms","performance","recentTasks","onMount","interval","$.mutate","$.get","$.set","formatUptime","seconds","minutes","hours","days","formatBytes","bytes","getStatusColor","status","$.each","div_9","swarm","$.set_text","text_4","text_5","div_24","task","text_10","text_11","$.set_class","div_28","$.set_style","text_12","text","text_3","div_16","div_20","text_8","text_9"],"mappings":"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"}