{"version":3,"file":"_server.ts.js","sources":["../../../../../../../../src/routes/api/workspace/files/+server.ts"],"sourcesContent":["/**\n * @fileoverview Workspace Files API - Provides file system access for the workspace\n */\n\nimport { json } from '@sveltejs/kit';\nimport { readdir, stat } from 'fs/promises';\nimport { resolve, join } from 'path';\nimport type { RequestHandler } from './$types';\n\nexport const GET: RequestHandler = async ({ url }) => {\n  try {\n    const searchParams = url.searchParams;\n    const path = searchParams.get('path') || '';\n    \n    // Base directory - use current working directory for now\n    const baseDir = process.cwd();\n    const targetPath = path ? join(baseDir, path) : baseDir;\n    \n    // Resolve the path to prevent directory traversal attacks\n    const resolvedPath = resolve(targetPath);\n    \n    // Basic security check - ensure we're within the base directory\n    if (!resolvedPath.startsWith(resolve(baseDir))) {\n      return json({ error: 'Access denied' }, { status: 403 });\n    }\n    \n    try {\n      const items = await readdir(resolvedPath);\n      const files = [];\n      \n      for (const item of items) {\n        // Skip hidden files and node_modules for better UX\n        if (item.startsWith('.') || item === 'node_modules') {\n          continue;\n        }\n        \n        try {\n          const itemPath = join(resolvedPath, item);\n          const stats = await stat(itemPath);\n          \n          files.push({\n            name: item,\n            path: path ? `${path}/${item}` : item,\n            type: stats.isDirectory() ? 'directory' : 'file',\n            size: stats.isFile() ? stats.size : undefined,\n            modified: stats.mtime.toISOString()\n          });\n        } catch (itemError) {\n          // Skip items we can't stat (permission issues, etc.)\n          console.warn(`Skipping item ${item}:`, itemError);\n        }\n      }\n      \n      // Sort directories first, then files\n      files.sort((a, b) => {\n        if (a.type !== b.type) {\n          return a.type === 'directory' ? -1 : 1;\n        }\n        return a.name.localeCompare(b.name);\n      });\n      \n      return json({\n        files,\n        currentPath: path,\n        parentPath: path ? path.split('/').slice(0, -1).join('/') : null\n      });\n      \n    } catch (fsError) {\n      console.error('File system error:', fsError);\n      return json({ error: 'Directory not found or access denied' }, { status: 404 });\n    }\n    \n  } catch (error) {\n    console.error('Workspace files API error:', error);\n    return json({ error: 'Internal server error' }, { status: 500 });\n  }\n};"],"names":[],"mappings":";;;AASO,MAAM,MAAsB,OAAO,EAAE,UAAU;AACpD,MAAI;AACF,UAAM,eAAe,IAAI;AACzB,UAAM,OAAO,aAAa,IAAI,MAAM,KAAK;AAGzC,UAAM,UAAU,QAAQ,IAAA;AACxB,UAAM,aAAa,OAAO,KAAK,SAAS,IAAI,IAAI;AAGhD,UAAM,eAAe,QAAQ,UAAU;AAGvC,QAAI,CAAC,aAAa,WAAW,QAAQ,OAAO,CAAC,GAAG;AAC9C,aAAO,KAAK,EAAE,OAAO,gBAAA,GAAmB,EAAE,QAAQ,KAAK;AAAA,IACzD;AAEA,QAAI;AACF,YAAM,QAAQ,MAAM,QAAQ,YAAY;AACxC,YAAM,QAAQ,CAAA;AAEd,iBAAW,QAAQ,OAAO;AAExB,YAAI,KAAK,WAAW,GAAG,KAAK,SAAS,gBAAgB;AACnD;AAAA,QACF;AAEA,YAAI;AACF,gBAAM,WAAW,KAAK,cAAc,IAAI;AACxC,gBAAM,QAAQ,MAAM,KAAK,QAAQ;AAEjC,gBAAM,KAAK;AAAA,YACT,MAAM;AAAA,YACN,MAAM,OAAO,GAAG,IAAI,IAAI,IAAI,KAAK;AAAA,YACjC,MAAM,MAAM,YAAA,IAAgB,cAAc;AAAA,YAC1C,MAAM,MAAM,OAAA,IAAW,MAAM,OAAO;AAAA,YACpC,UAAU,MAAM,MAAM,YAAA;AAAA,UAAY,CACnC;AAAA,QACH,SAAS,WAAW;AAElB,kBAAQ,KAAK,iBAAiB,IAAI,KAAK,SAAS;AAAA,QAClD;AAAA,MACF;AAGA,YAAM,KAAK,CAAC,GAAG,MAAM;AACnB,YAAI,EAAE,SAAS,EAAE,MAAM;AACrB,iBAAO,EAAE,SAAS,cAAc,KAAK;AAAA,QACvC;AACA,eAAO,EAAE,KAAK,cAAc,EAAE,IAAI;AAAA,MACpC,CAAC;AAED,aAAO,KAAK;AAAA,QACV;AAAA,QACA,aAAa;AAAA,QACb,YAAY,OAAO,KAAK,MAAM,GAAG,EAAE,MAAM,GAAG,EAAE,EAAE,KAAK,GAAG,IAAI;AAAA,MAAA,CAC7D;AAAA,IAEH,SAAS,SAAS;AAChB,cAAQ,MAAM,sBAAsB,OAAO;AAC3C,aAAO,KAAK,EAAE,OAAO,uCAAA,GAA0C,EAAE,QAAQ,KAAK;AAAA,IAChF;AAAA,EAEF,SAAS,OAAO;AACd,YAAQ,MAAM,8BAA8B,KAAK;AACjD,WAAO,KAAK,EAAE,OAAO,wBAAA,GAA2B,EAAE,QAAQ,KAAK;AAAA,EACjE;AACF;"}