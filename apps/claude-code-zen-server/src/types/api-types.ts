/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/health": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Health Check
         * @description Check if the API server is running and healthy
         */
        get: operations["getHealth"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/status": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * System Status
         * @description Get comprehensive system status including performance metrics
         */
        get: operations["getSystemStatus"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/swarms": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List Swarms
         * @description Get all active swarms and their current status
         */
        get: operations["getSwarms"];
        put?: never;
        /**
         * Create Swarm
         * @description Create a new swarm with specified configuration
         */
        post: operations["createSwarm"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/tasks": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List Tasks
         * @description Get all tasks in the system
         */
        get: operations["getTasks"];
        put?: never;
        /**
         * Create Task
         * @description Create a new task for execution
         */
        post: operations["createTask"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/documents": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List Documents
         * @description Get all documents in the system
         */
        get: operations["getDocuments"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/execute": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Execute Command
         * @description Execute a system command or script
         */
        post: operations["executeCommand"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/settings": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Settings
         * @description Get current system and user settings
         */
        get: operations["getSettings"];
        put?: never;
        /**
         * Update Settings
         * @description Update system or user settings
         */
        post: operations["updateSettings"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/llm-stats": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get LLM Statistics
         * @description Get comprehensive LLM usage analytics and system health
         */
        get: operations["getLLMStats"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/llm-stats/export": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Export LLM Statistics
         * @description Export LLM statistics in various formats
         */
        get: operations["exportLLMStats"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/llm-stats/health": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get LLM System Health
         * @description Get health status of LLM systems and providers
         */
        get: operations["getLLMHealth"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/llm-stats/providers": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get LLM Provider Statistics
         * @description Get statistics for specific LLM providers or all providers
         */
        get: operations["getLLMProviders"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/llm-stats/history": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /**
         * Clear LLM History
         * @description Clear LLM statistics history
         */
        delete: operations["clearLLMHistory"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/matron/consultations": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Consultations
         * @description Get all matron advisory consultations
         */
        get: operations["getConsultations"];
        put?: never;
        /**
         * Create Consultation
         * @description Create a new matron advisory consultation
         */
        post: operations["createConsultation"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/matron/experts": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Experts
         * @description Get available matron advisory experts and their specialties
         */
        get: operations["getExperts"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/matron/recommendations": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Recommendations
         * @description Get matron advisory recommendations
         */
        get: operations["getRecommendations"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/matron/metrics": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Matron Metrics
         * @description Get matron advisory system metrics and performance
         */
        get: operations["getMatronMetrics"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/roadmap/roadmaps": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Roadmaps
         * @description Get all roadmaps with their current status and progress
         */
        get: operations["getRoadmaps"];
        put?: never;
        /**
         * Create Roadmap
         * @description Create a new roadmap for strategic planning
         */
        post: operations["createRoadmap"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/roadmap/milestones": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Milestones
         * @description Get all milestones across roadmaps
         */
        get: operations["getMilestones"];
        put?: never;
        /**
         * Create Milestone
         * @description Create a new milestone for a roadmap
         */
        post: operations["createMilestone"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/roadmap/vision": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Vision Statements
         * @description Get organizational vision statements and strategic goals
         */
        get: operations["getVisionStatements"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/roadmap/metrics": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Roadmap Metrics
         * @description Get comprehensive roadmap performance metrics
         */
        get: operations["getRoadmapMetrics"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/workspace/files": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List Files
         * @description List files and directories in the workspace
         */
        get: operations["listWorkspaceFiles"];
        /**
         * Update File
         * @description Update content of an existing file
         */
        put: operations["updateWorkspaceFile"];
        /**
         * Create File
         * @description Create a new file in the workspace
         */
        post: operations["createWorkspaceFile"];
        /**
         * Delete File
         * @description Delete a file from the workspace
         */
        delete: operations["deleteWorkspaceFile"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/workspace/files/content": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get File Content
         * @description Get content of a specific file
         */
        get: operations["getWorkspaceFileContent"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/workspace/directories": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Create Directory
         * @description Create a new directory in the workspace
         */
        post: operations["createWorkspaceDirectory"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/workspace/project/info": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Project Info
         * @description Get information about the current workspace project
         */
        get: operations["getWorkspaceProjectInfo"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/workspace/project/commands": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Execute Project Command
         * @description Execute a command in the workspace context (npm scripts, etc.)
         */
        post: operations["executeWorkspaceCommand"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/workspace/search/files": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Search Files
         * @description Search for files by name in the workspace
         */
        get: operations["searchWorkspaceFiles"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/workspace/git/status": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Git Status
         * @description Get current Git status of the workspace
         */
        get: operations["getWorkspaceGitStatus"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/workspace/recent": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Recent Files
         * @description Get recently modified files in the workspace
         */
        get: operations["getWorkspaceRecentFiles"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/dashboard/health": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Dashboard Health Check
         * @description Check if the Svelte dashboard is running and accessible
         */
        get: operations["getDashboardHealth"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        HealthResponse: {
            /** @example healthy */
            status?: string;
            /**
             * Format: date-time
             * @example 2024-08-15T10:30:00.000Z
             */
            timestamp?: string;
            /** @example 2.0.0 */
            version?: string;
            /**
             * @description Server uptime in seconds
             * @example 3600
             */
            uptime?: number;
        };
        ErrorResponse: {
            /**
             * @description Error message
             * @example Resource not found
             */
            error?: string;
            /**
             * @description Error code (optional)
             * @example NOT_FOUND
             */
            code?: string;
            /** @description Additional error details (optional) */
            details?: Record<string, never>;
        };
        SystemStatus: {
            /**
             * @example healthy
             * @enum {string}
             */
            status?: "healthy" | "degraded" | "unhealthy";
            /** Format: date-time */
            timestamp?: string;
            uptime?: number;
            performance?: components["schemas"]["PerformanceMetrics"];
            services?: components["schemas"]["ServiceStatus"][];
        };
        PerformanceMetrics: {
            /**
             * Format: float
             * @description CPU usage percentage
             * @example 15.5
             */
            cpu?: number;
            /**
             * Format: float
             * @description Memory usage percentage
             * @example 45.2
             */
            memory?: number;
            /**
             * Format: float
             * @description Disk usage percentage
             * @example 60.1
             */
            disk?: number;
            /**
             * @description Average response time in milliseconds
             * @example 125
             */
            responseTime?: number;
        };
        ServiceStatus: {
            /** @example swarm-coordinator */
            name?: string;
            /**
             * @example running
             * @enum {string}
             */
            status?: "running" | "stopped" | "error";
            /** Format: date-time */
            lastCheck?: string;
            details?: Record<string, never>;
        };
        Swarm: {
            /** @example swarm-001 */
            id?: string;
            /** @example Development Swarm */
            name?: string;
            /**
             * @example hierarchical
             * @enum {string}
             */
            topology?: "mesh" | "hierarchical" | "ring" | "star";
            /**
             * @example active
             * @enum {string}
             */
            status?: "active" | "inactive" | "paused" | "error";
            /** @example 8 */
            maxAgents?: number;
            /** @example 6 */
            currentAgents?: number;
            /**
             * @example specialized
             * @enum {string}
             */
            strategy?: "balanced" | "specialized" | "adaptive" | "parallel";
            /** Format: date-time */
            created?: string;
            /** Format: date-time */
            lastActivity?: string;
            metrics?: components["schemas"]["SwarmMetrics"];
        };
        CreateSwarmRequest: {
            /** @example Development Swarm */
            name: string;
            /**
             * @example hierarchical
             * @enum {string}
             */
            topology: "mesh" | "hierarchical" | "ring" | "star";
            /**
             * @default 5
             * @example 8
             */
            maxAgents: number;
            /**
             * @default balanced
             * @example specialized
             * @enum {string}
             */
            strategy: "balanced" | "specialized" | "adaptive" | "parallel";
            /** @description Additional swarm configuration */
            configuration?: {
                [key: string]: unknown;
            };
        };
        SwarmMetrics: {
            /** @example 45 */
            tasksCompleted?: number;
            /** @example 3 */
            tasksActive?: number;
            /**
             * @description Average task completion time in minutes
             * @example 12.5
             */
            averageTaskTime?: number;
            /**
             * Format: float
             * @description Swarm efficiency percentage
             * @example 87.3
             */
            efficiency?: number;
        };
        Task: {
            /** @example task-001 */
            id?: string;
            /** @example Implement authentication system */
            title?: string;
            /** @example Build JWT-based authentication with refresh tokens */
            description?: string;
            /**
             * @example in-progress
             * @enum {string}
             */
            status?: "pending" | "in-progress" | "completed" | "failed" | "cancelled";
            /**
             * @example high
             * @enum {string}
             */
            priority?: "low" | "medium" | "high" | "critical";
            /** @example AI Agent 001 */
            assignedTo?: string;
            /** @example 2h */
            estimatedDuration?: string;
            /** @example 1h 45m */
            actualDuration?: string;
            /** Format: date-time */
            created?: string;
            /** Format: date-time */
            updated?: string;
            /** Format: date-time */
            completed?: string | null;
            /** @example [
             *       "authentication",
             *       "security",
             *       "backend"
             *     ] */
            tags?: string[];
            /** @example [
             *       "task-002",
             *       "task-003"
             *     ] */
            dependencies?: string[];
            /**
             * Format: float
             * @example 65.5
             */
            progress?: number;
        };
        CreateTaskRequest: {
            /** @example Implement user registration */
            title: string;
            /** @example Create user registration form and API endpoint */
            description: string;
            /**
             * @default medium
             * @example high
             * @enum {string}
             */
            priority: "low" | "medium" | "high" | "critical";
            /** @example AI Agent 002 */
            assignedTo?: string;
            /** @example 3h */
            estimatedDuration?: string;
            /** @example [
             *       "user-management",
             *       "frontend",
             *       "backend"
             *     ] */
            tags?: string[];
            /** @example [
             *       "task-005"
             *     ] */
            dependencies?: string[];
        };
        Document: {
            /** @example doc-001 */
            id?: string;
            /** @example API Documentation */
            title?: string;
            /**
             * @example documentation
             * @enum {string}
             */
            type?: "code" | "documentation" | "specification" | "report";
            /** @example # API Documentation
             *
             *     This document describes... */
            content?: string;
            /** @example /docs/api.md */
            path?: string;
            /**
             * @description Document size in bytes
             * @example 2048
             */
            size?: number;
            /** Format: date-time */
            created?: string;
            /** Format: date-time */
            updated?: string;
            /** @example AI Assistant */
            author?: string;
            /** @example [
             *       "api",
             *       "documentation",
             *       "reference"
             *     ] */
            tags?: string[];
            metadata?: {
                [key: string]: unknown;
            };
        };
        ExecuteCommandRequest: {
            /** @example npm */
            command: string;
            /** @example [
             *       "test",
             *       "--coverage"
             *     ] */
            args?: string[];
            /** @example /project/root */
            workingDirectory?: string;
            /** @example {
             *       "NODE_ENV": "test"
             *     } */
            environment?: {
                [key: string]: string;
            };
            /**
             * @description Command timeout in seconds
             * @default 30
             * @example 60
             */
            timeout: number;
        };
        CommandResult: {
            /** @example npm */
            command?: string;
            /** @example [
             *       "test",
             *       "--coverage"
             *     ] */
            args?: string[];
            /** @example 0 */
            exitCode?: number;
            /** @example Test output... */
            stdout?: string;
            /** @example  */
            stderr?: string;
            /** @example true */
            success?: boolean;
            /**
             * @description Command execution time in milliseconds
             * @example 5420
             */
            duration?: number;
        };
        Settings: {
            session?: {
                /**
                 * @example dark
                 * @enum {string}
                 */
                theme?: "light" | "dark" | "auto";
                /** @example en */
                language?: string;
                /** @example true */
                notifications?: boolean;
                /** @example true */
                autoSave?: boolean;
            };
            system?: {
                /** @example dark */
                theme?: string;
                /** @example true */
                realTime?: boolean;
                /** @example false */
                debug?: boolean;
            };
        };
        UpdateSettingsRequest: {
            /**
             * @example dark
             * @enum {string}
             */
            theme?: "light" | "dark" | "auto";
            /** @example en */
            language?: string;
            /** @example true */
            notifications?: boolean;
            /** @example true */
            autoSave?: boolean;
            /** @example true */
            realTime?: boolean;
        };
        LLMStatistics: {
            analytics?: components["schemas"]["LLMAnalytics"];
            systemHealth?: components["schemas"]["LLMHealth"];
            /** Format: date-time */
            timestamp?: string;
        };
        LLMAnalytics: {
            /** @example 1250 */
            totalRequests?: number;
            /** @example 875000 */
            totalTokens?: number;
            /**
             * @description Average response time in milliseconds
             * @example 1250.5
             */
            averageResponseTime?: number;
            /**
             * Format: float
             * @description Success rate percentage
             * @example 98.5
             */
            successRate?: number;
            providerStats?: components["schemas"]["ProviderStats"][];
            dailyUsage?: components["schemas"]["DailyUsage"][];
        };
        LLMHealth: {
            /**
             * @example healthy
             * @enum {string}
             */
            overall?: "healthy" | "degraded" | "unhealthy";
            providers?: components["schemas"]["ProviderHealth"][];
            /** Format: date-time */
            lastCheck?: string;
        };
        ProviderStats: {
            /** @example anthropic */
            providerId?: string;
            /** @example Anthropic Claude */
            name?: string;
            /** @example 450 */
            requests?: number;
            /** @example 320000 */
            tokens?: number;
            /** @example 1100.2 */
            averageResponseTime?: number;
            /**
             * Format: float
             * @example 99.1
             */
            successRate?: number;
            /**
             * Format: float
             * @description Estimated cost in USD
             * @example 15.75
             */
            costEstimate?: number;
        };
        ProviderHealth: {
            /** @example anthropic */
            providerId?: string;
            /**
             * @example healthy
             * @enum {string}
             */
            status?: "healthy" | "degraded" | "unhealthy" | "unknown";
            /**
             * @description Current latency in milliseconds
             * @example 850
             */
            latency?: number;
            /** Format: date-time */
            lastCheck?: string;
            /** @example 2 */
            errors?: number;
        };
        DailyUsage: {
            /**
             * Format: date
             * @example 2024-08-15
             */
            date?: string;
            /** @example 125 */
            requests?: number;
            /** @example 89000 */
            tokens?: number;
            /**
             * Format: float
             * @example 3.25
             */
            cost?: number;
        };
        Consultation: {
            /** @example cons-001 */
            id?: string;
            /** @example Architecture Decision: Microservices vs Monolith */
            title?: string;
            /** @example system-architecture */
            domain?: string;
            /** @example AI Architecture Advisor */
            expert?: string;
            /**
             * @example high
             * @enum {string}
             */
            priority?: "low" | "medium" | "high" | "critical";
            /**
             * @example active
             * @enum {string}
             */
            status?: "active" | "completed" | "pending" | "cancelled";
            /** @example Tech Lead */
            requestedBy?: string;
            /** Format: date-time */
            created?: string;
            /** @example {
             *       "projectType": "E-commerce Platform",
             *       "scalabilityRequirements": "High",
             *       "teamSize": "8 developers",
             *       "timeline": "6 months"
             *     } */
            context?: {
                [key: string]: unknown;
            };
            /** @example Should we migrate from monolith to microservices architecture? */
            question?: string;
            /**
             * @example high
             * @enum {string}
             */
            complexity?: "low" | "medium" | "high" | "critical";
            /**
             * @example critical
             * @enum {string}
             */
            businessImpact?: "low" | "medium" | "high" | "critical";
            /** @example [
             *       "Engineering Team",
             *       "Product Manager",
             *       "CTO"
             *     ] */
            stakeholders?: string[];
        };
        CreateConsultationRequest: {
            /** @example Performance Optimization Strategy */
            title: string;
            /** @example performance */
            domain: string;
            /** @example How can we optimize our database queries for better performance? */
            question: string;
            /** @example Senior Developer */
            requestedBy: string;
            /**
             * @default medium
             * @example high
             * @enum {string}
             */
            priority: "low" | "medium" | "high" | "critical";
            /** @example {
             *       "currentLoad": "10k requests/hour",
             *       "databaseType": "PostgreSQL",
             *       "queryComplexity": "High"
             *     } */
            context?: {
                [key: string]: unknown;
            };
            /**
             * @default medium
             * @example high
             * @enum {string}
             */
            complexity: "low" | "medium" | "high" | "critical";
            /**
             * @default medium
             * @example high
             * @enum {string}
             */
            businessImpact: "low" | "medium" | "high" | "critical";
            /** @example [
             *       "Development Team",
             *       "Database Admin"
             *     ] */
            stakeholders?: string[];
        };
        Expert: {
            /** @example system-architecture */
            domain?: string;
            /** @example AI Architecture Advisor */
            name?: string;
            /** @example [
             *       "Microservices",
             *       "Scalability",
             *       "Design Patterns"
             *     ] */
            specialties?: string[];
            /** @example 15 */
            consultations?: number;
            /**
             * Format: float
             * @example 4.8
             */
            rating?: number;
            /**
             * @example available
             * @enum {string}
             */
            status?: "available" | "busy" | "offline";
            /** Format: date-time */
            lastActive?: string;
        };
        Recommendation: {
            /** @example rec-001 */
            id?: string;
            /** @example cons-001 */
            consultationId?: string;
            /** @example Incremental Migration to Microservices */
            title?: string;
            /** @example AI Architecture Advisor */
            expert?: string;
            /** @example Recommended phased approach starting with user service separation */
            summary?: string;
            /**
             * Format: float
             * @example 0.89
             */
            confidence?: number;
            /**
             * @example high
             * @enum {string}
             */
            implementationComplexity?: "low" | "medium" | "high" | "critical";
            /** @example 4-6 months */
            estimatedTimeframe?: string;
            /**
             * @example medium
             * @enum {string}
             */
            riskLevel?: "low" | "medium" | "high" | "critical";
            /** Format: date-time */
            created?: string;
            /**
             * @example under-review
             * @enum {string}
             */
            status?: "draft" | "under-review" | "approved" | "rejected" | "implemented";
        };
        MatronMetrics: {
            /** @example 48 */
            totalConsultations?: number;
            /** @example 3 */
            activeExperts?: number;
            /**
             * Format: float
             * @description Resolution rate percentage
             * @example 94
             */
            resolutionRate?: number;
            /** @example 18m */
            averageResponseTime?: string;
        };
        Roadmap: {
            /** @example rm-zen-001 */
            id?: string;
            /** @example Claude Code Zen Platform Evolution 2024-2025 */
            title?: string;
            /** @example Comprehensive roadmap for advancing claude-code-zen capabilities */
            description?: string;
            /** @example Transform claude-code-zen into the most intelligent development platform */
            vision?: string;
            /**
             * @example active
             * @enum {string}
             */
            status?: "active" | "planning" | "completed" | "on-hold" | "cancelled";
            /**
             * @example critical
             * @enum {string}
             */
            priority?: "low" | "medium" | "high" | "critical";
            /** @example Claude Code Zen Team */
            owner?: string;
            /**
             * Format: date
             * @example 2024-08-01
             */
            startDate?: string;
            /**
             * Format: date
             * @example 2025-08-01
             */
            endDate?: string;
            /**
             * Format: float
             * @example 35
             */
            completion?: number;
            /** @example [
             *       "Swarm Intelligence",
             *       "Developer Experience",
             *       "Performance Optimization"
             *     ] */
            strategicThemes?: string[];
            /** @example [
             *       "Development Team",
             *       "Claude Code Users",
             *       "AI Research"
             *     ] */
            stakeholders?: string[];
            /**
             * @example medium
             * @enum {string}
             */
            riskLevel?: "low" | "medium" | "high" | "critical";
            /** @example $500K */
            budget?: string;
            /** @example [
             *       "Claude Code CLI Integration",
             *       "MCP Protocol Stability"
             *     ] */
            dependencies?: string[];
            /** @example [
             *       "User Adoption Rate",
             *       "Task Completion Speed",
             *       "Error Reduction"
             *     ] */
            kpis?: string[];
        };
        CreateRoadmapRequest: {
            /** @example Mobile App Development 2024 */
            title: string;
            /** @example Roadmap for mobile application development */
            description: string;
            /** @example Create industry-leading mobile experiences */
            vision: string;
            /** @example Mobile Team */
            owner: string;
            /**
             * Format: date
             * @example 2024-01-01
             */
            startDate: string;
            /**
             * Format: date
             * @example 2024-12-31
             */
            endDate: string;
            /**
             * @default medium
             * @example high
             * @enum {string}
             */
            priority: "low" | "medium" | "high" | "critical";
            /** @example [
             *       "Mobile Innovation",
             *       "User Experience"
             *     ] */
            strategicThemes?: string[];
            /** @example [
             *       "Mobile Team",
             *       "UX Design",
             *       "Product"
             *     ] */
            stakeholders?: string[];
            /**
             * @default medium
             * @example low
             * @enum {string}
             */
            riskLevel: "low" | "medium" | "high" | "critical";
            /** @example $250K */
            budget?: string;
            /** @example [
             *       "Platform API",
             *       "Design System"
             *     ] */
            dependencies?: string[];
            /** @example [
             *       "App Store Rating",
             *       "User Engagement",
             *       "Performance"
             *     ] */
            kpis?: string[];
        };
        Milestone: {
            /** @example ms-zen-001 */
            id?: string;
            /** @example rm-zen-001 */
            roadmapId?: string;
            /** @example Native Swarm System Implementation */
            title?: string;
            /** @example Complete implementation of native TypeScript swarm coordination system */
            description?: string;
            /**
             * @example major-release
             * @enum {string}
             */
            type?: "major-release" | "feature-release" | "improvement" | "compliance" | "research";
            /**
             * @example completed
             * @enum {string}
             */
            status?: "planning" | "in-progress" | "completed" | "cancelled";
            /**
             * @example critical
             * @enum {string}
             */
            priority?: "low" | "medium" | "high" | "critical";
            /**
             * Format: date
             * @example 2024-08-15
             */
            dueDate?: string;
            /**
             * Format: date
             * @example 2024-08-14
             */
            completedDate?: string | null;
            /** @example Core Development Team */
            owner?: string;
            /** @example [
             *       "SwarmCommander",
             *       "Agent Coordination",
             *       "Memory Management"
             *     ] */
            deliverables?: string[];
            /** @example [
             *       "TypeScript Infrastructure",
             *       "MCP Integration"
             *     ] */
            dependencies?: string[];
            /** @example [
             *       "Complexity Management",
             *       "Performance Requirements"
             *     ] */
            riskFactors?: string[];
            /** @example [
             *       "All swarm tools functional",
             *       "Performance benchmarks met"
             *     ] */
            successCriteria?: string[];
        };
        CreateMilestoneRequest: {
            /** @example rm-zen-001 */
            roadmapId: string;
            /** @example Beta Testing Phase */
            title: string;
            /** @example Comprehensive beta testing with selected users */
            description: string;
            /**
             * @example feature-release
             * @enum {string}
             */
            type: "major-release" | "feature-release" | "improvement" | "compliance" | "research";
            /**
             * @default medium
             * @example high
             * @enum {string}
             */
            priority: "low" | "medium" | "high" | "critical";
            /**
             * Format: date
             * @example 2024-11-30
             */
            dueDate: string;
            /** @example QA Team */
            owner: string;
            /** @example [
             *       "Beta Release",
             *       "User Feedback",
             *       "Bug Reports"
             *     ] */
            deliverables?: string[];
            /** @example [
             *       "Development Complete",
             *       "Testing Environment"
             *     ] */
            dependencies?: string[];
            /** @example [
             *       "User Feedback Quality",
             *       "Timeline Pressure"
             *     ] */
            riskFactors?: string[];
            /** @example [
             *       "100 beta users",
             *       "Positive feedback",
             *       "Major bugs resolved"
             *     ] */
            successCriteria?: string[];
        };
        VisionStatement: {
            /** @example vs-zen-001 */
            id?: string;
            /** @example AI-Native Development Platform */
            title?: string;
            /** @example Transform claude-code-zen into the world's most intelligent AI-native development platform */
            description?: string;
            /** @example 2-3 years */
            timeframe?: string;
            /** @example [
             *       "AI-First Architecture",
             *       "Seamless Integration",
             *       "Developer Empowerment"
             *     ] */
            strategicPillars?: string[];
            /** @example [
             *       "Developer Productivity +300%",
             *       "90% Task Automation",
             *       "99.9% System Reliability"
             *     ] */
            successMetrics?: string[];
            /**
             * @example active
             * @enum {string}
             */
            status?: "active" | "research" | "archived";
            /** @example Chief Product Officer */
            owner?: string;
            /** Format: date-time */
            lastUpdated?: string;
        };
        RoadmapMetrics: {
            /** @example 4 */
            totalRoadmaps?: number;
            /** @example 3 */
            activeMilestones?: number;
            /**
             * Format: float
             * @description Overall completion rate percentage
             * @example 32
             */
            completionRate?: number;
            /**
             * Format: float
             * @description Strategic alignment score percentage
             * @example 89
             */
            strategicAlignment?: number;
        };
        FileInfo: {
            /** @example component.tsx */
            name?: string;
            /** @example src/components/component.tsx */
            path?: string;
            /**
             * @example file
             * @enum {string}
             */
            type?: "file" | "directory";
            /**
             * @description File size in bytes
             * @example 2048
             */
            size?: number;
            /** Format: date-time */
            modified?: string;
            /** @example tsx */
            extension?: string;
            /** @example false */
            isHidden?: boolean;
        };
        FileListResponse: {
            files?: components["schemas"]["FileInfo"][];
            /** @example src/components */
            currentPath?: string;
        };
        FileContentResponse: {
            /** @example import React from 'react';
             *
             *     export const Component = () => {
             *       return <div>Hello</div>;
             *     }; */
            content?: string;
            /** @example src/components/component.tsx */
            path?: string;
            /** @example 95 */
            size?: number;
            /** Format: date-time */
            modified?: string;
            /** @example utf-8 */
            encoding?: string;
        };
        CreateFileRequest: {
            /** @example src/components/NewComponent.tsx */
            path: string;
            /**
             * @default
             * @example import React from 'react';
             *
             *     export const NewComponent = () => {
             *       return <div>New Component</div>;
             *     };
             */
            content: string;
            /**
             * @example react
             * @enum {string}
             */
            template?: "typescript" | "react" | "svelte" | "markdown";
        };
        UpdateFileRequest: {
            /** @example src/components/component.tsx */
            path: string;
            /** @example // Updated content
             *     import React from 'react';
             *
             *     export const Component = () => {
             *       return <div>Updated!</div>;
             *     }; */
            content: string;
        };
        CreateDirectoryRequest: {
            /** @example src/new-feature */
            path: string;
        };
        FileOperationResponse: {
            /** @example true */
            success?: boolean;
            /** @example src/components/component.tsx */
            path?: string;
            /** @example File created successfully */
            message?: string;
        };
        ProjectInfo: {
            /** @example claude-code-zen */
            name?: string;
            /**
             * @example nodejs
             * @enum {string}
             */
            type?: "generic" | "nodejs" | "python" | "rust" | "java" | "other";
            /** @example /workspace/claude-code-zen */
            path?: string;
            /** @example true */
            hasPackageJson?: boolean;
            /** @example true */
            hasGit?: boolean;
            /** @example [
             *       "build",
             *       "test",
             *       "lint",
             *       "dev"
             *     ] */
            scripts?: string[];
            /** @example {
             *       "react": "^18.0.0",
             *       "typescript": "^5.0.0"
             *     } */
            dependencies?: {
                [key: string]: string;
            };
            /** @example {
             *       "@types/react": "^18.0.0",
             *       "vite": "^4.0.0"
             *     } */
            devDependencies?: {
                [key: string]: string;
            };
        };
        WorkspaceCommandRequest: {
            /** @example npm */
            command: string;
            /**
             * @default []
             * @example [
             *       "run",
             *       "build"
             *     ]
             */
            args: string[];
        };
        FileSearchResponse: {
            results?: components["schemas"]["FileInfo"][];
            /** @example component */
            query?: string;
            /** @example 5 */
            count?: number;
        };
        GitStatusResponse: {
            files?: components["schemas"]["GitFileStatus"][];
            /** @example true */
            hasChanges?: boolean;
        };
        GitFileStatus: {
            /**
             * @description Git status code (e.g., "M ", " M", "A ", "D ", "??")
             * @example M
             */
            status?: string;
            /** @example src/components/component.tsx */
            path?: string;
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    getHealth: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Server is healthy */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "status": "healthy",
                     *       "timestamp": "2024-08-15T10:30:00.000Z",
                     *       "version": "2.0.0",
                     *       "uptime": 3600
                     *     } */
                    "application/json": components["schemas"]["HealthResponse"];
                };
            };
        };
    };
    getSystemStatus: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description System status retrieved successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SystemStatus"];
                };
            };
            /** @description Failed to get system status */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    getSwarms: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Swarms retrieved successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Swarm"][];
                };
            };
            /** @description Failed to get swarms */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    createSwarm: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                /** @example {
                 *       "name": "Development Swarm",
                 *       "topology": "hierarchical",
                 *       "maxAgents": 8,
                 *       "strategy": "specialized"
                 *     } */
                "application/json": components["schemas"]["CreateSwarmRequest"];
            };
        };
        responses: {
            /** @description Swarm created successfully */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Swarm"];
                };
            };
            /** @description Invalid swarm configuration */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Failed to create swarm */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    getTasks: {
        parameters: {
            query?: {
                /** @description Filter tasks by status */
                status?: "pending" | "in-progress" | "completed" | "failed";
                /** @description Filter tasks by priority */
                priority?: "low" | "medium" | "high" | "critical";
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Tasks retrieved successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Task"][];
                };
            };
            /** @description Failed to get tasks */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    createTask: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                /** @example {
                 *       "title": "Implement authentication system",
                 *       "description": "Build JWT-based authentication with refresh tokens",
                 *       "priority": "high",
                 *       "assignedTo": "AI Agent 001",
                 *       "estimatedDuration": "2h"
                 *     } */
                "application/json": components["schemas"]["CreateTaskRequest"];
            };
        };
        responses: {
            /** @description Task created successfully */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Task"];
                };
            };
            /** @description Invalid task data */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Failed to create task */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    getDocuments: {
        parameters: {
            query?: {
                /** @description Filter documents by type */
                type?: "code" | "documentation" | "specification" | "report";
                /** @description Search documents by content or title */
                search?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Documents retrieved successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Document"][];
                };
            };
            /** @description Failed to get documents */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    executeCommand: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                /** @example {
                 *       "command": "npm",
                 *       "args": [
                 *         "test",
                 *         "--coverage"
                 *       ],
                 *       "workingDirectory": "/project/root"
                 *     } */
                "application/json": components["schemas"]["ExecuteCommandRequest"];
            };
        };
        responses: {
            /** @description Command executed successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CommandResult"];
                };
            };
            /** @description Invalid command */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Command execution failed */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    getSettings: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Settings retrieved successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Settings"];
                };
            };
            /** @description Session not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    updateSettings: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                /** @example {
                 *       "theme": "dark",
                 *       "realTime": true,
                 *       "notifications": true
                 *     } */
                "application/json": components["schemas"]["UpdateSettingsRequest"];
            };
        };
        responses: {
            /** @description Settings updated successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @example true */
                        success?: boolean;
                    };
                };
            };
            /** @description Invalid settings data */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Session not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    getLLMStats: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description LLM statistics retrieved successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["LLMStatistics"];
                };
            };
            /** @description Failed to get LLM statistics */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    exportLLMStats: {
        parameters: {
            query?: {
                /** @description Export format */
                format?: "json" | "csv";
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Statistics exported successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": Record<string, never>;
                    "text/csv": string;
                };
            };
            /** @description Failed to export statistics */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    getLLMHealth: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description LLM health retrieved successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["LLMHealth"];
                };
            };
            /** @description Failed to get LLM health */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    getLLMProviders: {
        parameters: {
            query?: {
                /** @description Specific provider ID to get statistics for */
                provider?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Provider statistics retrieved successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ProviderStats"] | components["schemas"]["ProviderStats"][];
                };
            };
            /** @description Provider not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Failed to get provider statistics */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    clearLLMHistory: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description History cleared successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @example true */
                        success?: boolean;
                        /** @example LLM statistics history cleared */
                        message?: string;
                    };
                };
            };
            /** @description Failed to clear history */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    getConsultations: {
        parameters: {
            query?: {
                /** @description Filter consultations by status */
                status?: "active" | "completed" | "pending" | "cancelled";
                /** @description Filter by expertise domain */
                domain?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Consultations retrieved successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        consultations?: components["schemas"]["Consultation"][];
                    };
                };
            };
            /** @description Failed to get consultations */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    createConsultation: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                /** @example {
                 *       "title": "Architecture Decision: Microservices vs Monolith",
                 *       "domain": "system-architecture",
                 *       "question": "Should we migrate from monolith to microservices?",
                 *       "context": {
                 *         "projectType": "E-commerce Platform",
                 *         "teamSize": "8 developers",
                 *         "timeline": "6 months"
                 *       },
                 *       "priority": "high",
                 *       "requestedBy": "Tech Lead"
                 *     } */
                "application/json": components["schemas"]["CreateConsultationRequest"];
            };
        };
        responses: {
            /** @description Consultation created successfully */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Consultation"];
                };
            };
            /** @description Invalid consultation data */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Failed to create consultation */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    getExperts: {
        parameters: {
            query?: {
                /** @description Filter experts by domain */
                domain?: string;
                /** @description Filter by availability status */
                available?: boolean;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Experts retrieved successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        experts?: components["schemas"]["Expert"][];
                    };
                };
            };
            /** @description Failed to get experts */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    getRecommendations: {
        parameters: {
            query?: {
                /** @description Get recommendations for specific consultation */
                consultationId?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Recommendations retrieved successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        recommendations?: components["schemas"]["Recommendation"][];
                    };
                };
            };
            /** @description Failed to get recommendations */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    getMatronMetrics: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Metrics retrieved successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MatronMetrics"];
                };
            };
            /** @description Failed to get metrics */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    getRoadmaps: {
        parameters: {
            query?: {
                /** @description Filter roadmaps by status */
                status?: "active" | "planning" | "completed" | "on-hold" | "cancelled";
                /** @description Filter roadmaps by priority */
                priority?: "low" | "medium" | "high" | "critical";
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Roadmaps retrieved successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        roadmaps?: components["schemas"]["Roadmap"][];
                    };
                };
            };
            /** @description Failed to get roadmaps */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    createRoadmap: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                /** @example {
                 *       "title": "AI Platform Evolution 2025",
                 *       "description": "Roadmap for advancing AI capabilities",
                 *       "vision": "Become the leading AI development platform",
                 *       "owner": "Product Team",
                 *       "startDate": "2024-01-01",
                 *       "endDate": "2025-12-31",
                 *       "priority": "critical",
                 *       "strategicThemes": [
                 *         "AI Innovation",
                 *         "Platform Excellence"
                 *       ],
                 *       "stakeholders": [
                 *         "Engineering",
                 *         "Product",
                 *         "AI Research"
                 *       ],
                 *       "budget": "$2M"
                 *     } */
                "application/json": components["schemas"]["CreateRoadmapRequest"];
            };
        };
        responses: {
            /** @description Roadmap created successfully */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Roadmap"];
                };
            };
            /** @description Invalid roadmap data */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Failed to create roadmap */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    getMilestones: {
        parameters: {
            query?: {
                /** @description Filter milestones by roadmap ID */
                roadmapId?: string;
                /** @description Filter milestones by status */
                status?: "planning" | "in-progress" | "completed" | "cancelled";
                /** @description Filter milestones by type */
                type?: "major-release" | "feature-release" | "improvement" | "compliance" | "research";
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Milestones retrieved successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        milestones?: components["schemas"]["Milestone"][];
                    };
                };
            };
            /** @description Failed to get milestones */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    createMilestone: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                /** @example {
                 *       "roadmapId": "rm-zen-001",
                 *       "title": "AI Model v4.0 Release",
                 *       "description": "Next-generation AI model with enhanced capabilities",
                 *       "type": "major-release",
                 *       "priority": "critical",
                 *       "dueDate": "2024-12-01",
                 *       "owner": "AI Research Team",
                 *       "deliverables": [
                 *         "Model Training",
                 *         "Performance Testing",
                 *         "Integration"
                 *       ],
                 *       "dependencies": [
                 *         "Infrastructure Scaling",
                 *         "Model Architecture"
                 *       ],
                 *       "riskFactors": [
                 *         "Training Data Quality",
                 *         "Compute Resources"
                 *       ],
                 *       "successCriteria": [
                 *         "95% accuracy",
                 *         "50% performance improvement"
                 *       ]
                 *     } */
                "application/json": components["schemas"]["CreateMilestoneRequest"];
            };
        };
        responses: {
            /** @description Milestone created successfully */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Milestone"];
                };
            };
            /** @description Invalid milestone data */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Failed to create milestone */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    getVisionStatements: {
        parameters: {
            query?: {
                /** @description Filter vision statements by status */
                status?: "active" | "research" | "archived";
                /** @description Filter by timeframe */
                timeframe?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Vision statements retrieved successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        visions?: components["schemas"]["VisionStatement"][];
                    };
                };
            };
            /** @description Failed to get vision statements */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    getRoadmapMetrics: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Roadmap metrics retrieved successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RoadmapMetrics"];
                };
            };
            /** @description Failed to get roadmap metrics */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    listWorkspaceFiles: {
        parameters: {
            query?: {
                /** @description Directory path to list (relative to workspace root) */
                path?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Files listed successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["FileListResponse"];
                };
            };
            /** @description Access denied */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Failed to list files */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    updateWorkspaceFile: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                /** @example {
                 *       "path": "src/components/Component.tsx",
                 *       "content": "// Updated file content\nimport React from 'react';\n\nexport const Component = () => {\n  return <div>Updated!</div>;\n};"
                 *     } */
                "application/json": components["schemas"]["UpdateFileRequest"];
            };
        };
        responses: {
            /** @description File updated successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["FileOperationResponse"];
                };
            };
            /** @description Invalid file data */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Access denied */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Failed to update file */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    createWorkspaceFile: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                /** @example {
                 *       "path": "src/components/NewComponent.tsx",
                 *       "content": "import React from 'react';\n\nexport const NewComponent = () => {\n  return <div>Hello World</div>;\n};",
                 *       "template": "react"
                 *     } */
                "application/json": components["schemas"]["CreateFileRequest"];
            };
        };
        responses: {
            /** @description File created successfully */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["FileOperationResponse"];
                };
            };
            /** @description Invalid file data */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Access denied */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Failed to create file */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    deleteWorkspaceFile: {
        parameters: {
            query: {
                /** @description File path to delete (relative to workspace root) */
                path: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description File deleted successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["FileOperationResponse"];
                };
            };
            /** @description File path required */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Access denied */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Failed to delete file */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    getWorkspaceFileContent: {
        parameters: {
            query: {
                /** @description File path to read (relative to workspace root) */
                path: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description File content retrieved successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["FileContentResponse"];
                };
            };
            /** @description File path required */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Access denied */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Failed to read file */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    createWorkspaceDirectory: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                /** @example {
                 *       "path": "src/new-feature"
                 *     } */
                "application/json": components["schemas"]["CreateDirectoryRequest"];
            };
        };
        responses: {
            /** @description Directory created successfully */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["FileOperationResponse"];
                };
            };
            /** @description Directory path required */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Access denied */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Failed to create directory */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    getWorkspaceProjectInfo: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Project information retrieved successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ProjectInfo"];
                };
            };
            /** @description Failed to get project info */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    executeWorkspaceCommand: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                /** @example {
                 *       "command": "npm",
                 *       "args": [
                 *         "run",
                 *         "build"
                 *       ]
                 *     } */
                "application/json": components["schemas"]["WorkspaceCommandRequest"];
            };
        };
        responses: {
            /** @description Command executed successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CommandResult"];
                };
            };
            /** @description Command required */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Command timeout */
            408: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Failed to execute command */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    searchWorkspaceFiles: {
        parameters: {
            query: {
                /** @description Search query */
                q: string;
                /** @description Maximum number of results */
                limit?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description File search completed successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["FileSearchResponse"];
                };
            };
            /** @description Search query required */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Failed to search files */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    getWorkspaceGitStatus: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Git status retrieved successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GitStatusResponse"];
                };
            };
            /** @description Not a git repository or git error */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Failed to get git status */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    getWorkspaceRecentFiles: {
        parameters: {
            query?: {
                /** @description Maximum number of recent files to return */
                limit?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Recent files retrieved successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        files?: components["schemas"]["FileInfo"][];
                    };
                };
            };
            /** @description Failed to get recent files */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    getDashboardHealth: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Dashboard is healthy */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @example healthy */
                        status?: string;
                        /** @example 3002 */
                        sveltePort?: number;
                        /** @example true */
                        proxyEnabled?: boolean;
                    };
                };
            };
            /** @description Dashboard unavailable */
            503: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
}
