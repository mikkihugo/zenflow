/* tslint:disable */
/* eslint-disable */

/* auto-generated by NAPI-RS */

/** Minimal configuration for initial testing */
export interface OrchestratorMinimalConfig {
  host: string;
  port: number;
  storagePath: string;
  enabled: boolean;
}
/** A2A Protocol message structure for TypeScript (minimal version) */
export interface A2AMessageMinimal {
  id: string;
  messageType: string;
  payload: string;
  timestamp: number;
}
/** Service result for TypeScript interface (minimal version) */
export interface ServiceResultMinimal {
  success: boolean;
  result?: string;
  error?: string;
  executionTimeMs: number;
}
/** Module initialization - minimal version */
export declare function initZenOrchestratorMinimal(): string;
/** Get zen-orchestrator version information */
export declare function getZenOrchestratorVersion(): string;
/** Test function to verify FFI communication */
export declare function helloZenOrchestrator(name: string): string;
/**
 * Minimal zen-orchestrator Node.js binding for initial integration testing
 *
 * This minimal version provides basic structure without full zen-orchestrator dependencies
 * to verify the FFI compilation and integration works before adding full functionality.
 */
export declare class ZenOrchestratorMinimal {
  /** Create new minimal zen-orchestrator instance */
  constructor(config: OrchestratorMinimalConfig);
  /** Initialize the minimal orchestrator */
  initialize(): Promise<boolean>;
  /** Get current status */
  getStatus(): Promise<string>;
  /** Send minimal A2A message (stub implementation) */
  sendA2AMessage(message: A2AMessageMinimal): Promise<boolean>;
  /** Execute minimal service operation (stub implementation) */
  executeService(
    serviceName: string,
    parameters: string
  ): Promise<ServiceResultMinimal>;
  /** List available services (minimal version) */
  listServices(): Promise<Array<string>>;
  /** Get minimal metrics */
  getMetrics(): Promise<string>;
  /** Shutdown minimal orchestrator */
  shutdown(): Promise<boolean>;
}
