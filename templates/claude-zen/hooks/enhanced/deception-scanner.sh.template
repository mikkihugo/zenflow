#!/usr/bin/env bash
# Enhanced Claude Code Hook: Deception Scanner
# Scans for deceptive patterns, social engineering, and malicious content

# Parse JSON input from Claude Code
INPUT="$1"
TOOL_NAME=$(echo "$INPUT" | jq -r '.tool_name // "unknown"')
COMMAND=$(echo "$INPUT" | jq -r '.tool_input.command // ""')
CONTENT=$(echo "$INPUT" | jq -r '.tool_input.content // ""')
FILE_PATH=$(echo "$INPUT" | jq -r '.tool_input.file_path // ""')

# Create log directory
mkdir -p "$HOME/.claude/enhanced-hooks"

# Log scan attempt
echo "$(date -Iseconds): Deception scan for $TOOL_NAME" >> "$HOME/.claude/enhanced-hooks/deception-scanner.log"

# Initialize scan result
SCAN_RESULT="{\"threat_detected\":false,\"threats\":[],\"confidence\":0.0,\"recommendations\":[]}"

# Social engineering patterns
SOCIAL_ENGINEERING_PATTERNS=(
    "urgent.*action.*required"
    "click.*here.*immediately"
    "verify.*account.*suspended"
    "limited.*time.*offer"
    "congratulations.*you.*won"
    "act.*now.*or.*lose"
    "secret.*method.*revealed"
    "this.*is.*not.*spam"
    "forward.*to.*friends"
    "don't.*tell.*anyone"
)

# Code injection patterns
CODE_INJECTION_PATTERNS=(
    "eval\\s*\\("
    "exec\\s*\\("
    "system\\s*\\("
    "shell_exec\\s*\\("
    "\\$\\{.*\\}"
    "\\`.*\\`"
    "document\\.write\\s*\\("
    "innerHTML\\s*="
    "setTimeout\\s*\\("
    "setInterval\\s*\\("
)

# Obfuscation patterns
OBFUSCATION_PATTERNS=(
    "[a-zA-Z0-9]{50,}"
    "\\\\x[0-9a-fA-F]{2}"
    "\\\\u[0-9a-fA-F]{4}"
    "String\\.fromCharCode\\s*\\("
    "unescape\\s*\\("
    "decodeURIComponent\\s*\\("
    "[A-Za-z0-9+/]{100,}={0,2}"
    "atob\\s*\\("
    "btoa\\s*\\("
)

# Suspicious URL patterns
SUSPICIOUS_URL_PATTERNS=(
    "bit\\.ly"
    "tinyurl\\.com"
    "t\\.co"
    "goo\\.gl"
    "ow\\.ly"
    "tiny\\.cc"
    "is\\.gd"
    "buff\\.ly"
    "[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}"
    "localhost:[0-9]+"
)

# Function to scan text for patterns
scan_patterns() {
    local text="$1"
    local pattern_array=("${!2}")
    local pattern_type="$3"
    local threats_found=0
    
    for pattern in "${pattern_array[@]}"; do
        if echo "$text" | grep -qiE "$pattern"; then
            echo "$(date -Iseconds): THREAT: $pattern_type pattern detected: $pattern" >> "$HOME/.claude/enhanced-hooks/deception-scanner.log"
            SCAN_RESULT=$(echo "$SCAN_RESULT" | jq --arg type "$pattern_type" --arg pattern "$pattern" '.threats += [{"type": $type, "pattern": $pattern, "severity": "HIGH"}]')
            threats_found=$((threats_found + 1))
        fi
    done
    
    return $threats_found
}

# Scan command if present
if [[ -n "$COMMAND" ]]; then
    echo "$(date -Iseconds): Scanning command: $COMMAND" >> "$HOME/.claude/enhanced-hooks/deception-scanner.log"
    
    scan_patterns "$COMMAND" SOCIAL_ENGINEERING_PATTERNS[@] "SOCIAL_ENGINEERING"
    social_threats=$?
    
    scan_patterns "$COMMAND" CODE_INJECTION_PATTERNS[@] "CODE_INJECTION"
    injection_threats=$?
    
    scan_patterns "$COMMAND" OBFUSCATION_PATTERNS[@] "OBFUSCATION"
    obfuscation_threats=$?
    
    scan_patterns "$COMMAND" SUSPICIOUS_URL_PATTERNS[@] "SUSPICIOUS_URL"
    url_threats=$?
    
    total_threats=$((social_threats + injection_threats + obfuscation_threats + url_threats))
    
    if [[ $total_threats -gt 0 ]]; then
        SCAN_RESULT=$(echo "$SCAN_RESULT" | jq '.threat_detected = true')
        confidence=$(echo "scale=2; $total_threats * 0.25" | bc -l)
        if (( $(echo "$confidence > 1.0" | bc -l) )); then
            confidence="1.0"
        fi
        SCAN_RESULT=$(echo "$SCAN_RESULT" | jq --arg conf "$confidence" '.confidence = ($conf | tonumber)')
    fi
fi

# Scan content if present
if [[ -n "$CONTENT" ]]; then
    echo "$(date -Iseconds): Scanning content (${#CONTENT} chars)" >> "$HOME/.claude/enhanced-hooks/deception-scanner.log"
    
    scan_patterns "$CONTENT" SOCIAL_ENGINEERING_PATTERNS[@] "SOCIAL_ENGINEERING"
    scan_patterns "$CONTENT" CODE_INJECTION_PATTERNS[@] "CODE_INJECTION"
    scan_patterns "$CONTENT" OBFUSCATION_PATTERNS[@] "OBFUSCATION"
    scan_patterns "$CONTENT" SUSPICIOUS_URL_PATTERNS[@] "SUSPICIOUS_URL"
fi

# Generate recommendations
THREAT_COUNT=$(echo "$SCAN_RESULT" | jq '.threats | length')
if [[ "$THREAT_COUNT" -gt 0 ]]; then
    SCAN_RESULT=$(echo "$SCAN_RESULT" | jq '.recommendations += ["Review command/content for malicious patterns", "Verify source and intent", "Consider manual inspection"]')
    
    if [[ "$THREAT_COUNT" -gt 3 ]]; then
        SCAN_RESULT=$(echo "$SCAN_RESULT" | jq '.recommendations += ["High threat count - consider blocking"]')
    fi
fi

# Output scan result
echo "$SCAN_RESULT" | jq '.'

# Generate security report if threats detected
THREAT_DETECTED=$(echo "$SCAN_RESULT" | jq -r '.threat_detected')
if [[ "$THREAT_DETECTED" == "true" ]]; then
    echo "$(date -Iseconds): SECURITY ALERT - Threats detected: $THREAT_COUNT" >> "$HOME/.claude/enhanced-hooks/deception-scanner.log"
    
    # Create detailed security report
    SECURITY_REPORT="$HOME/.claude/enhanced-hooks/deception-report-$(date +%s).json"
    cat > "$SECURITY_REPORT" << EOF
{
    "timestamp": "$(date -Iseconds)",
    "tool": "$TOOL_NAME",
    "command": "$COMMAND",
    "file_path": "$FILE_PATH",
    "content_length": ${#CONTENT},
    "scan_result": $SCAN_RESULT,
    "recommendation": "Potential deception/malicious content detected - manual review required"
}
EOF
    
    echo "$(date -Iseconds): Deception report saved to: $SECURITY_REPORT" >> "$HOME/.claude/enhanced-hooks/deception-scanner.log"
fi

# Exit with appropriate code
CONFIDENCE=$(echo "$SCAN_RESULT" | jq -r '.confidence')
if (( $(echo "$CONFIDENCE >= 0.75" | bc -l) )); then
    echo "$(date -Iseconds): Operation blocked - high deception confidence: $CONFIDENCE" >> "$HOME/.claude/enhanced-hooks/deception-scanner.log"
    exit 1
elif (( $(echo "$CONFIDENCE >= 0.5" | bc -l) )); then
    echo "$(date -Iseconds): Operation flagged - medium deception confidence: $CONFIDENCE" >> "$HOME/.claude/enhanced-hooks/deception-scanner.log"
    exit 2
else
    echo "$(date -Iseconds): Operation allowed - low deception confidence: $CONFIDENCE" >> "$HOME/.claude/enhanced-hooks/deception-scanner.log"
    exit 0
fi