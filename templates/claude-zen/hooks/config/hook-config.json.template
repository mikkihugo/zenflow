{
  "version": "1.0.0",
  "description": "Claude Code Hooks Configuration Template - External shell commands for tool execution logging",
  "notice": "This template shows Claude Code hook configuration. Hooks are external shell commands configured in Claude Code settings, not internal claude-code-zen features.",
  "documentation": {
    "hooks_guide": "https://docs.anthropic.com/en/docs/claude-code/hooks-guide",
    "settings_location": ".claude/settings.json",
    "hook_types": [
      "pre-command-submit",
      "post-command-result", 
      "user-prompt-submit",
      "pre-edit",
      "post-edit"
    ]
  },
  "optimized_claude_settings": {
    "hooks": {
      "PreToolUse": [
        {
          "matcher": "Bash",
          "hooks": [
            {
              "type": "command",
              "command": "/home/mhugo/code/claude-code-zen/.claude/hooks/safety-validation.sh",
              "description": "Enhanced security validation - dangerous commands, deception, and privilege escalation"
            }
          ]
        }
      ],
      "PostToolUse": [
        {
          "matcher": "Edit|Write",
          "hooks": [
            {
              "type": "command",
              "command": "/home/mhugo/code/claude-code-zen/.claude/hooks/auto-formatting.sh",
              "description": "Auto-format + lint code files: prettier/black/rustfmt/gofmt + syntax checking with tsc/eslint/pylint/cargo"
            },
            {
              "type": "command",
              "command": "/home/mhugo/code/claude-code-zen/.claude/hooks/dependency-monitor.sh",
              "description": "Monitor dependency file changes and suggest install commands"
            }
          ]
        },
        {
          "matcher": "Bash",
          "hooks": [
            {
              "type": "command",
              "command": "/home/mhugo/code/claude-code-zen/.claude/hooks/post-command-logging.sh",
              "description": "Log command execution results for debugging and analysis"
            }
          ]
        }
      ]
    },
    "env": {
      "ZEN_SWARM_AUTO_COMMIT": "false",
      "ZEN_SWARM_AUTO_PUSH": "false",
      "ZEN_SWARM_HOOKS": "true",
      "ZEN_SWARM_LINTING": "true",
      "ZEN_SWARM_TELEMETRY": "true",
      "ZEN_SWARM_REMOTE_EXECUTION": "true"
    },
    "permissions": {
      "allow": [
        "Bash(npx claude-zen *)",
        "Bash(npm run lint)",
        "Bash(npm run test:*)",
        "Bash(npm test *)",
        "Bash(git status)",
        "Bash(git diff *)",
        "Bash(git log *)",
        "Bash(git add *)",
        "Bash(git commit *)",
        "Bash(git push)",
        "Bash(git config *)",
        "Bash(node *)",
        "Bash(which *)",
        "Bash(pwd)",
        "Bash(ls *)"
      ],
      "deny": [
        "Bash(rm -rf /)",
        "Bash(curl * | bash)",
        "Bash(wget * | sh)",
        "Bash(eval *)"
      ]
    },
    "mcpServers": {
      "claude-zen": {
        "command": "npx",
        "args": ["claude-zen", "mcp", "start"],
        "env": {
          "ZEN_SWARM_HOOKS": "true",
          "ZEN_SWARM_TELEMETRY": "true",
          "ZEN_SWARM_REMOTE_READY": "true"
        }
      }
    },
    "includeCoAuthoredBy": true
  },
  "claude_code_zen_coordination": {
    "description": "claude-code-zen provides MCP tools for coordination, not hooks",
    "available_tools": [
      "mcp__claude-zen__swarm_init",
      "mcp__claude-zen__agent_spawn", 
      "mcp__claude-zen__task_orchestrate",
      "mcp__claude-zen__swarm_status",
      "mcp__claude-zen__memory_usage"
    ],
    "usage": "Use MCP tools for swarm coordination, use Claude Code hooks for logging"
  },
  "optimized_hooks_documentation": {
    "PreToolUse_hooks": {
      "safety-validation.sh": {
        "purpose": "Enhanced comprehensive security validation",
        "triggers": "Before any Bash tool usage",
        "features": [
          "System destructive command detection (rm -rf /, fork bombs, etc.)",
          "Remote execution detection (curl | bash, reverse shells)",
          "Deception pattern detection (hidden malicious commands)",
          "Privilege escalation detection (sudo abuse, etc.)",
          "Categorized risk levels (CRITICAL, HIGH, MEDIUM, LOW)"
        ],
        "security_categories": ["system_destructive", "remote_execution", "deception", "moderate_risk", "safe"],
        "improvements": "Merged deception scanning, added more attack vectors, enhanced categorization"
      }
    },
    "PostToolUse_hooks": {
      "auto-formatting.sh": {
        "purpose": "Automatically formats AND lints code files after edits",
        "triggers": "After Edit or Write operations",
        "logs_to": "/tmp/claude-zen-formatting.log",
        "supported_languages": {
          "typescript": "prettier + tsc --noEmit (ts, tsx)",
          "javascript": "prettier + eslint/node -c (js, jsx)",
          "python": "black + py_compile/pylint (py)",
          "rust": "rustfmt + cargo check (rs)", 
          "go": "gofmt + go vet (go)",
          "json": "prettier + jq validation (json)"
        },
        "formatting_features": [
          "Auto-detects file type by extension",
          "Uses appropriate formatter for each language",
          "Creates backup before formatting (safety)",
          "Restores backup if formatting corrupts file",
          "Supports both local and npx installations"
        ],
        "linting_features": [
          "Fast syntax checking (always enabled)",
          "Project-aware linting (uses existing configs)",
          "Non-blocking warnings (never prevents edits)",
          "Intelligent tool selection (tsc > eslint > node -c)",
          "Controllable via ZEN_SWARM_LINTING environment variable"
        ],
        "linting_strategy": {
          "tier1_fast_syntax": "Always checks if code parses/compiles",
          "tier2_full_lint": "Only if project has lint config files",
          "performance": "Fast checks prioritized (tsc --noEmit, cargo check)",
          "safety": "Never blocks edits - provides warnings only"
        },
        "value": "Saves formatting + catches syntax errors immediately - prevents broken code"
      },
      "dependency-monitor.sh": {
        "purpose": "Monitors dependency file changes and suggests installation",
        "triggers": "After Edit or Write operations on dependency files",
        "logs_to": "/tmp/claude-zen-dependencies.log",
        "supported_files": {
          "npm": "package.json (detects npm/yarn/pnpm from lockfiles)",
          "rust": "Cargo.toml",
          "python": "requirements.txt, pyproject.toml, setup.py",
          "go": "go.mod, go.sum",
          "php": "composer.json",
          "ruby": "Gemfile",
          "dart": "pubspec.yaml"
        },
        "features": [
          "Auto-detects dependency file changes",
          "Suggests appropriate install commands",
          "Detects lock files for more specific commands",
          "Counts dependencies in package.json",
          "Provides helpful additional information"
        ],
        "value": "Prevents 'why isn't this working' moments when dependencies change"
      },
      "post-command-logging.sh": {
        "purpose": "Logs command execution results for debugging",
        "triggers": "After any Bash tool usage",
        "logs_to": "/tmp/claude-zen-commands.log",
        "features": [
          "Logs all command executions with timestamps",
          "Tracks success/failure status",
          "Records exit codes",
          "Provides debugging information"
        ],
        "value": "Essential for understanding what Claude Code executed and debugging issues"
      }
    }
  },
  "optimized_hook_files": {
    "base_directory": ".claude/hooks/",
    "required_files": [
      "safety-validation.sh",
      "post-command-logging.sh",
      "auto-formatting.sh", 
      "dependency-monitor.sh"
    ],
    "log_directory": "/tmp/ (claude-zen-*.log)",
    "log_files": [
      "claude-zen-commands.log",
      "claude-zen-formatting.log",
      "claude-zen-dependencies.log"
    ],
    "removed_files": [
      "deception-scanner.sh (merged into safety-validation.sh)",
      "auto-agent-assignment.sh (use MCP tools instead)",
      "performance-tracker.sh (use MCP analytics instead)"
    ]
  },
  "logging_setup": {
    "create_log_directory": "mkdir -p $HOME/.claude",
    "command_logging": "PostToolUse hook on Bash tools logs executed commands",
    "edit_logging": "PostToolUse hook on Edit/Write logs file modifications",
    "safety_logging": "PreToolUse hook on Bash tools validates dangerous commands",
    "environment_variables": {
      "CLAUDE_COMMAND": "The command being executed",
      "CLAUDE_FILE_PATH": "Path of file being edited",
      "CLAUDE_OLD_CONTENT": "Previous file content (for edits)",
      "CLAUDE_NEW_CONTENT": "New file content (for edits)"
    }
  },
  "security": {
    "validate_hooks": "Review all hook commands for security",
    "restrict_dangerous": "Avoid hooks that could cause system damage",
    "log_sensitive": "Don't log sensitive information in hooks"
  }
}
