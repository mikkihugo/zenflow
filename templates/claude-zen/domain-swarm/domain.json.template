{
  "domainId": "{{DOMAIN_NAME}}-domain",
  "domainName": "{{DOMAIN_NAME}}",
  "level": "domain",
  "version": "1.0.0",
  "description": "Domain-level swarm coordination for {{DOMAIN_NAME}} services",

  "hierarchy": {
    "hiveConnection": "../.swarm/hive-mind.json",
    "parentHive": "{{ORGANIZATION_ID}}-hive",
    "domainType": "{{DOMAIN_TYPE}}"
  },

  "coordination": {
    "maxServices": 20,
    "maxSwarmsPerService": 5,
    "domainSyncInterval": 10000,
    "serviceSyncInterval": 5000,
    "strategy": "{{COORDINATION_STRATEGY}}",
    "loadBalancing": true
  },

  "resources": {
    "domainQuota": {
      "maxConcurrentSwarms": "{{MAX_SWARMS}}",
      "maxAgentsPerSwarm": "{{MAX_AGENTS}}",
      "computeUnits": "{{COMPUTE_UNITS}}",
      "storageGB": "{{STORAGE_GB}}"
    },
    "serviceAllocation": {
      "primary": 0.6,
      "secondary": 0.3,
      "experimental": 0.1
    }
  },

  "services": {
    "{{SERVICE_1}}": {
      "type": "primary",
      "priority": 9,
      "resourceQuota": 0.4,
      "agentTypes": ["coder", "reviewer", "tester"],
      "templates": ["development", "debugging", "optimization"]
    },
    "{{SERVICE_2}}": {
      "type": "secondary",
      "priority": 7,
      "resourceQuota": 0.3,
      "agentTypes": ["analyst", "researcher", "documenter"],
      "templates": ["analysis", "research", "documentation"]
    }
  },

  "workflows": {
    "crossService": {
      "enabled": true,
      "patterns": [
        {
          "name": "api_frontend_sync",
          "description": "Synchronize API changes with frontend updates",
          "services": ["api", "web"],
          "triggers": ["api_change", "schema_update"],
          "coordination": "sequential"
        },
        {
          "name": "database_migration",
          "description": "Coordinate database changes across services",
          "services": ["database", "api", "worker"],
          "triggers": ["schema_change"],
          "coordination": "orchestrated"
        }
      ]
    }
  },

  "policies": {
    "domain": {
      "inheritGlobal": true,
      "codeStandards": "{{DOMAIN_NAME}}_standards",
      "testingStrategy": "{{TESTING_STRATEGY}}",
      "deploymentPipeline": "{{DEPLOYMENT_STRATEGY}}"
    },
    "serviceInteraction": {
      "crossServiceTesting": true,
      "apiVersioning": "semantic",
      "backwardCompatibility": true
    }
  },

  "learning": {
    "domainSpecialization": true,
    "crossServicePatterns": true,
    "domainMemory": true,
    "patternSharing": "domain_scoped",
    "expertise": {
      "primary": ["{{DOMAIN_NAME}}_development", "{{DOMAIN_NAME}}_architecture"],
      "secondary": ["integration", "testing", "deployment"]
    }
  },

  "monitoring": {
    "domainDashboard": true,
    "serviceHealth": true,
    "crossServiceMetrics": true,
    "performance": {
      "domainLatency": true,
      "resourceUtilization": true,
      "coordinationEfficiency": true,
      "serviceDependencies": true
    },
    "alerts": {
      "serviceFailures": true,
      "crossServiceIssues": true,
      "resourceContention": true,
      "performanceDegradation": true
    }
  },

  "integration": {
    "serviceDiscovery": {
      "enabled": true,
      "mechanism": "automatic",
      "healthChecks": true
    },
    "crossDomainAPIs": {
      "enabled": false,
      "authentication": "oauth2",
      "rateLimit": true
    },
    "tools": {
      "cicd": "{{CI_CD_TOOL}}",
      "monitoring": "{{MONITORING_TOOL}}",
      "logging": "{{LOGGING_TOOL}}"
    }
  },

  "templates": {
    "microservice": {
      "agents": ["coder", "reviewer", "tester", "deployer"],
      "workflow": "development -> review -> test -> deploy",
      "coordination": "pipeline"
    },
    "data_service": {
      "agents": ["database-architect", "coder", "performance-analyzer"],
      "workflow": "design -> implement -> optimize",
      "coordination": "hierarchical"
    },
    "api_service": {
      "agents": ["api-dev", "security-analyzer", "documenter"],
      "workflow": "design -> implement -> secure -> document",
      "coordination": "parallel"
    }
  }
}
