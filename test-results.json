{
  "numTotalTestSuites": 195,
  "numPassedTestSuites": 57,
  "numFailedTestSuites": 138,
  "numPendingTestSuites": 0,
  "numTotalTests": 199,
  "numPassedTests": 125,
  "numFailedTests": 63,
  "numPendingTests": 11,
  "numTodoTests": 0,
  "snapshot": {
    "added": 0,
    "failure": false,
    "filesAdded": 0,
    "filesRemoved": 0,
    "filesRemovedList": [],
    "filesUnmatched": 0,
    "filesUpdated": 0,
    "matched": 0,
    "total": 0,
    "unchecked": 0,
    "uncheckedKeysByFile": [],
    "unmatched": 0,
    "updated": 0,
    "didUpdate": false
  },
  "startTime": 1754826973072,
  "success": false,
  "testResults": [
    {
      "assertionResults": [
        {
          "ancestorTitles": ["Simple Test"],
          "fullName": "Simple Test should pass",
          "status": "passed",
          "title": "should pass",
          "duration": 1.9505599999974947,
          "failureMessages": [],
          "meta": {}
        }
      ],
      "startTime": 1754827004433,
      "endTime": 1754827004434.9504,
      "status": "passed",
      "message": "",
      "name": "/home/mhugo/code/claude-code-zen/src/__tests__/basic-functionality.test.ts"
    },
    {
      "assertionResults": [],
      "startTime": 1754826973072,
      "endTime": 1754826973072,
      "status": "failed",
      "message": "Do not import `@jest/globals` outside of the Jest test environment",
      "name": "/home/mhugo/code/claude-code-zen/src/__tests__/claude-zen-tdd-architecture.test.ts"
    },
    {
      "assertionResults": [],
      "startTime": 1754826973072,
      "endTime": 1754826973072,
      "status": "failed",
      "message": "Logger is not a constructor",
      "name": "/home/mhugo/code/claude-code-zen/src/__tests__/integration-service-adapter.test.ts"
    },
    {
      "assertionResults": [],
      "startTime": 1754826973072,
      "endTime": 1754826973072,
      "status": "failed",
      "message": "Do not import `@jest/globals` outside of the Jest test environment",
      "name": "/home/mhugo/code/claude-code-zen/src/__tests__/tdd-london-swarm.test.ts"
    },
    {
      "assertionResults": [],
      "startTime": 1754826973072,
      "endTime": 1754826973072,
      "status": "failed",
      "message": "Do not import `@jest/globals` outside of the Jest test environment",
      "name": "/home/mhugo/code/claude-code-zen/src/__tests__/coordination/hive-knowledge-bridge.test.ts"
    },
    {
      "assertionResults": [],
      "startTime": 1754826973072,
      "endTime": 1754826973072,
      "status": "failed",
      "message": "Do not import `@jest/globals` outside of the Jest test environment",
      "name": "/home/mhugo/code/claude-code-zen/src/__tests__/coordination/hive-knowledge-integration.test.ts"
    },
    {
      "assertionResults": [],
      "startTime": 1754826973072,
      "endTime": 1754826973072,
      "status": "failed",
      "message": "Do not import `@jest/globals` outside of the Jest test environment",
      "name": "/home/mhugo/code/claude-code-zen/src/__tests__/coordination/hive-knowledge-performance.test.ts"
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": ["Database Adapter Interface Consistency"],
          "fullName": "Database Adapter Interface Consistency interfaces are properly defined and can be imported",
          "status": "passed",
          "title": "interfaces are properly defined and can be imported",
          "duration": 1.8455689999973401,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Database Adapter Interface Consistency"],
          "fullName": "Database Adapter Interface Consistency validates interface consistency through TypeScript compilation",
          "status": "passed",
          "title": "validates interface consistency through TypeScript compilation",
          "duration": 1.8724109999966458,
          "failureMessages": [],
          "meta": {}
        }
      ],
      "startTime": 1754827002977,
      "endTime": 1754827002980.8723,
      "status": "passed",
      "message": "",
      "name": "/home/mhugo/code/claude-code-zen/src/__tests__/database/adapter-interface-consistency.test.ts"
    },
    {
      "assertionResults": [],
      "startTime": 1754826973072,
      "endTime": 1754826973072,
      "status": "failed",
      "message": "Failed to resolve import \"../config/logging-config\" from \"src/database/managers/document-manager.ts\". Does the file exist?",
      "name": "/home/mhugo/code/claude-code-zen/src/__tests__/database/document-manager-integration.test.ts"
    },
    {
      "assertionResults": [],
      "startTime": 1754826973072,
      "endTime": 1754826973072,
      "status": "failed",
      "message": "Failed to resolve import \"../../src/di/index\" from \"src/__tests__/di-integration/comprehensive-di.test.ts\". Does the file exist?",
      "name": "/home/mhugo/code/claude-code-zen/src/__tests__/di-integration/comprehensive-di.test.ts"
    },
    {
      "assertionResults": [],
      "startTime": 1754826973072,
      "endTime": 1754826973072,
      "status": "failed",
      "message": "Failed to resolve import \"../di/decorators/injectable\" from \"src/database/providers/database-providers.ts\". Does the file exist?",
      "name": "/home/mhugo/code/claude-code-zen/src/__tests__/di-integration/issue-63-comprehensive.test.ts"
    },
    {
      "assertionResults": [],
      "startTime": 1754826973072,
      "endTime": 1754826973072,
      "status": "failed",
      "message": "Failed to resolve import \"../../database/core/database-coordinator\" from \"src/__tests__/e2e/complete-product-flow-sparc.test.ts\". Does the file exist?",
      "name": "/home/mhugo/code/claude-code-zen/src/__tests__/e2e/complete-product-flow-sparc.test.ts"
    },
    {
      "assertionResults": [],
      "startTime": 1754826973072,
      "endTime": 1754826973072,
      "status": "failed",
      "message": "Failed to resolve import \"../../coordination/mcp/mcp-server\" from \"src/__tests__/e2e/complete-workflow-automation.test.ts\". Does the file exist?",
      "name": "/home/mhugo/code/claude-code-zen/src/__tests__/e2e/complete-workflow-automation.test.ts"
    },
    {
      "assertionResults": [],
      "startTime": 1754826973072,
      "endTime": 1754826973072,
      "status": "failed",
      "message": "Logger is not a constructor",
      "name": "/home/mhugo/code/claude-code-zen/src/__tests__/e2e/github-integration.test.ts"
    },
    {
      "assertionResults": [],
      "startTime": 1754826973072,
      "endTime": 1754826973072,
      "status": "failed",
      "message": "Logger is not a constructor",
      "name": "/home/mhugo/code/claude-code-zen/src/__tests__/e2e/performance-load-testing.test.ts"
    },
    {
      "assertionResults": [],
      "startTime": 1754826973072,
      "endTime": 1754826973072,
      "status": "failed",
      "message": "Logger is not a constructor",
      "name": "/home/mhugo/code/claude-code-zen/src/__tests__/e2e/real-time-collaboration.test.ts"
    },
    {
      "assertionResults": [],
      "startTime": 1754826973072,
      "endTime": 1754826973072,
      "status": "failed",
      "message": "Logger is not a constructor",
      "name": "/home/mhugo/code/claude-code-zen/src/__tests__/e2e/simplified-workflow.test.ts"
    },
    {
      "assertionResults": [],
      "startTime": 1754826973072,
      "endTime": 1754826973072,
      "status": "failed",
      "message": "Do not import `@jest/globals` outside of the Jest test environment",
      "name": "/home/mhugo/code/claude-code-zen/src/__tests__/examples/hybrid-tdd-neural-coordination.test.ts"
    },
    {
      "assertionResults": [],
      "startTime": 1754826973072,
      "endTime": 1754826973072,
      "status": "failed",
      "message": "Transform failed with 2 errors:\n/home/mhugo/code/claude-code-zen/src/__tests__/helpers/example-usage.test.ts:222:19: ERROR: Invalid assignment target\n/home/mhugo/code/claude-code-zen/src/__tests__/helpers/example-usage.test.ts:222:32: ERROR: Invalid assignment target",
      "name": "/home/mhugo/code/claude-code-zen/src/__tests__/helpers/example-usage.test.ts"
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": ["Auto-Swarm Integration"],
          "fullName": "Auto-Swarm Integration should be able to import all required swarm components",
          "status": "failed",
          "title": "should be able to import all required swarm components",
          "duration": 21.976268999998865,
          "failureMessages": [
            "TypeError: Logger is not a constructor\n    at LoggingConfigurationManager.createLoggerForComponent (/home/mhugo/code/claude-code-zen/src/config/logging-config.ts:113:26)\n    at LoggingConfigurationManager.getLogger (/home/mhugo/code/claude-code-zen/src/config/logging-config.ts:98:25)\n    at getLogger (/home/mhugo/code/claude-code-zen/src/config/logging-config.ts:211:32)\n    at /home/mhugo/code/claude-code-zen/src/config/logging-config.ts:229:11\n    at VitestExecutor.runModule (file:///home/mhugo/code/claude-code-zen/node_modules/vite-node/dist/client.mjs:397:4)\n    at VitestExecutor.directRequest (file:///home/mhugo/code/claude-code-zen/node_modules/vite-node/dist/client.mjs:375:3)\n    at VitestExecutor.cachedRequest (file:///home/mhugo/code/claude-code-zen/node_modules/vite-node/dist/client.mjs:189:11)\n    at VitestExecutor.dependencyRequest (file:///home/mhugo/code/claude-code-zen/node_modules/vite-node/dist/client.mjs:239:10)\n    at /home/mhugo/code/claude-code-zen/src/config/manager.ts:1:1\n    at VitestExecutor.runModule (file:///home/mhugo/code/claude-code-zen/node_modules/vite-node/dist/client.mjs:397:4)"
          ],
          "meta": {}
        },
        {
          "ancestorTitles": ["Auto-Swarm Integration"],
          "fullName": "Auto-Swarm Integration should be able to create auto-swarm factory with all dependencies",
          "status": "failed",
          "title": "should be able to create auto-swarm factory with all dependencies",
          "duration": 0.8612460000003921,
          "failureMessages": [
            "TypeError: Logger is not a constructor\n    at LoggingConfigurationManager.createLoggerForComponent (/home/mhugo/code/claude-code-zen/src/config/logging-config.ts:113:26)\n    at LoggingConfigurationManager.getLogger (/home/mhugo/code/claude-code-zen/src/config/logging-config.ts:98:25)\n    at getLogger (/home/mhugo/code/claude-code-zen/src/config/logging-config.ts:211:32)\n    at /home/mhugo/code/claude-code-zen/src/config/logging-config.ts:229:11\n    at VitestExecutor.runModule (file:///home/mhugo/code/claude-code-zen/node_modules/vite-node/dist/client.mjs:397:4)\n    at VitestExecutor.directRequest (file:///home/mhugo/code/claude-code-zen/node_modules/vite-node/dist/client.mjs:375:3)\n    at VitestExecutor.cachedRequest (file:///home/mhugo/code/claude-code-zen/node_modules/vite-node/dist/client.mjs:189:11)\n    at VitestExecutor.dependencyRequest (file:///home/mhugo/code/claude-code-zen/node_modules/vite-node/dist/client.mjs:239:10)\n    at /home/mhugo/code/claude-code-zen/src/config/manager.ts:1:1\n    at VitestExecutor.runModule (file:///home/mhugo/code/claude-code-zen/node_modules/vite-node/dist/client.mjs:397:4)"
          ],
          "meta": {}
        }
      ],
      "startTime": 1754827002860,
      "endTime": 1754827002882.8613,
      "status": "failed",
      "message": "",
      "name": "/home/mhugo/code/claude-code-zen/src/__tests__/integration/auto-swarm-integration.test.ts"
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": ["CLI Discover Auto-Swarm Integration"],
          "fullName": "CLI Discover Auto-Swarm Integration should be able to create auto-swarm infrastructure for CLI integration",
          "status": "failed",
          "title": "should be able to create auto-swarm infrastructure for CLI integration",
          "duration": 27.130646000001434,
          "failureMessages": [
            "TypeError: Logger is not a constructor\n    at LoggingConfigurationManager.createLoggerForComponent (/home/mhugo/code/claude-code-zen/src/config/logging-config.ts:113:26)\n    at LoggingConfigurationManager.getLogger (/home/mhugo/code/claude-code-zen/src/config/logging-config.ts:98:25)\n    at getLogger (/home/mhugo/code/claude-code-zen/src/config/logging-config.ts:211:32)\n    at /home/mhugo/code/claude-code-zen/src/config/logging-config.ts:229:11\n    at VitestExecutor.runModule (file:///home/mhugo/code/claude-code-zen/node_modules/vite-node/dist/client.mjs:397:4)\n    at VitestExecutor.directRequest (file:///home/mhugo/code/claude-code-zen/node_modules/vite-node/dist/client.mjs:375:3)\n    at VitestExecutor.cachedRequest (file:///home/mhugo/code/claude-code-zen/node_modules/vite-node/dist/client.mjs:189:11)\n    at VitestExecutor.dependencyRequest (file:///home/mhugo/code/claude-code-zen/node_modules/vite-node/dist/client.mjs:239:10)\n    at /home/mhugo/code/claude-code-zen/src/config/manager.ts:1:1\n    at VitestExecutor.runModule (file:///home/mhugo/code/claude-code-zen/node_modules/vite-node/dist/client.mjs:397:4)"
          ],
          "meta": {}
        },
        {
          "ancestorTitles": ["CLI Discover Auto-Swarm Integration"],
          "fullName": "CLI Discover Auto-Swarm Integration should handle deployment verification",
          "status": "passed",
          "title": "should handle deployment verification",
          "duration": 5.193602999999712,
          "failureMessages": [],
          "meta": {}
        }
      ],
      "startTime": 1754827001336,
      "endTime": 1754827001368.1936,
      "status": "failed",
      "message": "",
      "name": "/home/mhugo/code/claude-code-zen/src/__tests__/integration/cli-discover-auto-swarm.test.ts"
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": ["Complete Auto-Swarm Pipeline Integration"],
          "fullName": "Complete Auto-Swarm Pipeline Integration should complete the full auto-swarm creation pipeline",
          "status": "failed",
          "title": "should complete the full auto-swarm creation pipeline",
          "duration": 82.6972679999999,
          "failureMessages": [
            "TypeError: Logger is not a constructor\n    at LoggingConfigurationManager.createLoggerForComponent (/home/mhugo/code/claude-code-zen/src/config/logging-config.ts:113:26)\n    at LoggingConfigurationManager.getLogger (/home/mhugo/code/claude-code-zen/src/config/logging-config.ts:98:25)\n    at getLogger (/home/mhugo/code/claude-code-zen/src/config/logging-config.ts:211:32)\n    at /home/mhugo/code/claude-code-zen/src/config/logging-config.ts:229:11\n    at VitestExecutor.runModule (file:///home/mhugo/code/claude-code-zen/node_modules/vite-node/dist/client.mjs:397:4)\n    at VitestExecutor.directRequest (file:///home/mhugo/code/claude-code-zen/node_modules/vite-node/dist/client.mjs:375:3)\n    at VitestExecutor.cachedRequest (file:///home/mhugo/code/claude-code-zen/node_modules/vite-node/dist/client.mjs:189:11)\n    at VitestExecutor.dependencyRequest (file:///home/mhugo/code/claude-code-zen/node_modules/vite-node/dist/client.mjs:239:10)\n    at /home/mhugo/code/claude-code-zen/src/config/manager.ts:1:1\n    at VitestExecutor.runModule (file:///home/mhugo/code/claude-code-zen/node_modules/vite-node/dist/client.mjs:397:4)"
          ],
          "meta": {}
        },
        {
          "ancestorTitles": ["Complete Auto-Swarm Pipeline Integration"],
          "fullName": "Complete Auto-Swarm Pipeline Integration should handle error scenarios gracefully",
          "status": "failed",
          "title": "should handle error scenarios gracefully",
          "duration": 4.739316000002873,
          "failureMessages": [
            "TypeError: Logger is not a constructor\n    at LoggingConfigurationManager.createLoggerForComponent (/home/mhugo/code/claude-code-zen/src/config/logging-config.ts:113:26)\n    at LoggingConfigurationManager.getLogger (/home/mhugo/code/claude-code-zen/src/config/logging-config.ts:98:25)\n    at getLogger (/home/mhugo/code/claude-code-zen/src/config/logging-config.ts:211:32)\n    at /home/mhugo/code/claude-code-zen/src/config/logging-config.ts:229:11\n    at VitestExecutor.runModule (file:///home/mhugo/code/claude-code-zen/node_modules/vite-node/dist/client.mjs:397:4)\n    at VitestExecutor.directRequest (file:///home/mhugo/code/claude-code-zen/node_modules/vite-node/dist/client.mjs:375:3)\n    at VitestExecutor.cachedRequest (file:///home/mhugo/code/claude-code-zen/node_modules/vite-node/dist/client.mjs:189:11)\n    at VitestExecutor.dependencyRequest (file:///home/mhugo/code/claude-code-zen/node_modules/vite-node/dist/client.mjs:239:10)\n    at /home/mhugo/code/claude-code-zen/src/config/manager.ts:1:1\n    at VitestExecutor.runModule (file:///home/mhugo/code/claude-code-zen/node_modules/vite-node/dist/client.mjs:397:4)"
          ],
          "meta": {}
        },
        {
          "ancestorTitles": ["Complete Auto-Swarm Pipeline Integration"],
          "fullName": "Complete Auto-Swarm Pipeline Integration should validate resource constraints properly",
          "status": "failed",
          "title": "should validate resource constraints properly",
          "duration": 1.409418999999616,
          "failureMessages": [
            "TypeError: Logger is not a constructor\n    at LoggingConfigurationManager.createLoggerForComponent (/home/mhugo/code/claude-code-zen/src/config/logging-config.ts:113:26)\n    at LoggingConfigurationManager.getLogger (/home/mhugo/code/claude-code-zen/src/config/logging-config.ts:98:25)\n    at getLogger (/home/mhugo/code/claude-code-zen/src/config/logging-config.ts:211:32)\n    at /home/mhugo/code/claude-code-zen/src/config/logging-config.ts:229:11\n    at VitestExecutor.runModule (file:///home/mhugo/code/claude-code-zen/node_modules/vite-node/dist/client.mjs:397:4)\n    at VitestExecutor.directRequest (file:///home/mhugo/code/claude-code-zen/node_modules/vite-node/dist/client.mjs:375:3)\n    at VitestExecutor.cachedRequest (file:///home/mhugo/code/claude-code-zen/node_modules/vite-node/dist/client.mjs:189:11)\n    at VitestExecutor.dependencyRequest (file:///home/mhugo/code/claude-code-zen/node_modules/vite-node/dist/client.mjs:239:10)\n    at /home/mhugo/code/claude-code-zen/src/config/manager.ts:1:1\n    at VitestExecutor.runModule (file:///home/mhugo/code/claude-code-zen/node_modules/vite-node/dist/client.mjs:397:4)"
          ],
          "meta": {}
        }
      ],
      "startTime": 1754826998037,
      "endTime": 1754826998126.4094,
      "status": "failed",
      "message": "",
      "name": "/home/mhugo/code/claude-code-zen/src/__tests__/integration/complete-auto-swarm-pipeline.test.ts"
    },
    {
      "assertionResults": [],
      "startTime": 1754826973072,
      "endTime": 1754826973072,
      "status": "failed",
      "message": "Failed to resolve import \"../../utils/error-system-integration\" from \"src/__tests__/integration/error-handling-system.test.ts\". Does the file exist?",
      "name": "/home/mhugo/code/claude-code-zen/src/__tests__/integration/error-handling-system.test.ts"
    },
    {
      "assertionResults": [],
      "startTime": 1754826973072,
      "endTime": 1754826973072,
      "status": "failed",
      "message": "Failed to resolve import \"../../coordination/mcp/mcp-server\" from \"src/__tests__/integration/mcp-protocol-compliance.test.ts\". Does the file exist?",
      "name": "/home/mhugo/code/claude-code-zen/src/__tests__/integration/mcp-protocol-compliance.test.ts"
    },
    {
      "assertionResults": [],
      "startTime": 1754826973072,
      "endTime": 1754826973072,
      "status": "failed",
      "message": "Do not import `@jest/globals` outside of the Jest test environment",
      "name": "/home/mhugo/code/claude-code-zen/src/__tests__/integration/mcp-server-london-tdd.test.ts"
    },
    {
      "assertionResults": [],
      "startTime": 1754826973072,
      "endTime": 1754826973072,
      "status": "failed",
      "message": "Failed to resolve import \"coordination/orchestrator\" from \"src/__tests__/integration/orchestrator.test.ts\". Does the file exist?",
      "name": "/home/mhugo/code/claude-code-zen/src/__tests__/integration/orchestrator.test.ts"
    },
    {
      "assertionResults": [],
      "startTime": 1754826973072,
      "endTime": 1754826973072,
      "status": "failed",
      "message": "Failed to resolve import \"../../database/core/database-coordinator\" from \"src/__tests__/integration/product-flow-sparc-integration.test.ts\". Does the file exist?",
      "name": "/home/mhugo/code/claude-code-zen/src/__tests__/integration/product-flow-sparc-integration.test.ts"
    },
    {
      "assertionResults": [],
      "startTime": 1754826973072,
      "endTime": 1754826973072,
      "status": "failed",
      "message": "Do not import `@jest/globals` outside of the Jest test environment",
      "name": "/home/mhugo/code/claude-code-zen/src/__tests__/integration/web-mcp-integration-london-tdd.test.ts"
    },
    {
      "assertionResults": [],
      "startTime": 1754826973072,
      "endTime": 1754826973072,
      "status": "failed",
      "message": "Do not import `@jest/globals` outside of the Jest test environment",
      "name": "/home/mhugo/code/claude-code-zen/src/__tests__/integration/websocket-client-london-tdd.test.ts"
    },
    {
      "assertionResults": [],
      "startTime": 1754826973072,
      "endTime": 1754826973072,
      "status": "failed",
      "message": "Failed to resolve import \"../utils/logger\" from \"src/interfaces/web/web-socket-manager.ts\". Does the file exist?",
      "name": "/home/mhugo/code/claude-code-zen/src/__tests__/integration/websocket-realtime-coordination.test.ts"
    },
    {
      "assertionResults": [],
      "startTime": 1754826973072,
      "endTime": 1754826973072,
      "status": "failed",
      "message": "Do not import `@jest/globals` outside of the Jest test environment",
      "name": "/home/mhugo/code/claude-code-zen/src/__tests__/integration/websocket-swarm-coordination.test.ts"
    },
    {
      "assertionResults": [],
      "startTime": 1754826973072,
      "endTime": 1754826973072,
      "status": "failed",
      "message": "Logger is not a constructor",
      "name": "/home/mhugo/code/claude-code-zen/src/__tests__/patterns/adapter-pattern.test.ts"
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": [
            "Command Pattern Implementation",
            "Command Execution Algorithms (Classical TDD)",
            "SwarmInitCommand"
          ],
          "fullName": "Command Pattern Implementation Command Execution Algorithms (Classical TDD) SwarmInitCommand should execute swarm initialization successfully",
          "status": "failed",
          "title": "should execute swarm initialization successfully",
          "duration": 15.392961999999898,
          "failureMessages": [
            "TypeError: this.swarmManager.isHealthy is not a function\n    at SwarmInitCommand.validate (/home/mhugo/code/claude-code-zen/src/interfaces/mcp/command-system.ts:143:28)\n    at SwarmInitCommand.execute (/home/mhugo/code/claude-code-zen/src/interfaces/mcp/command-system.ts:171:35)\n    at /home/mhugo/code/claude-code-zen/src/__tests__/patterns/command-pattern.test.ts:92:38\n    at file:///home/mhugo/code/claude-code-zen/node_modules/@vitest/runner/dist/chunk-hooks.js:155:11\n    at file:///home/mhugo/code/claude-code-zen/node_modules/@vitest/runner/dist/chunk-hooks.js:752:26\n    at file:///home/mhugo/code/claude-code-zen/node_modules/@vitest/runner/dist/chunk-hooks.js:1897:20\n    at new Promise (<anonymous>)\n    at runWithTimeout (file:///home/mhugo/code/claude-code-zen/node_modules/@vitest/runner/dist/chunk-hooks.js:1863:10)\n    at runTest (file:///home/mhugo/code/claude-code-zen/node_modules/@vitest/runner/dist/chunk-hooks.js:1574:12)\n    at runSuite (file:///home/mhugo/code/claude-code-zen/node_modules/@vitest/runner/dist/chunk-hooks.js:1729:8)"
          ],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Command Pattern Implementation",
            "Command Execution Algorithms (Classical TDD)",
            "SwarmInitCommand"
          ],
          "fullName": "Command Pattern Implementation Command Execution Algorithms (Classical TDD) SwarmInitCommand should handle swarm initialization failures gracefully",
          "status": "failed",
          "title": "should handle swarm initialization failures gracefully",
          "duration": 1.5236439999998765,
          "failureMessages": [
            "TypeError: this.swarmManager.isHealthy is not a function\n    at SwarmInitCommand.validate (/home/mhugo/code/claude-code-zen/src/interfaces/mcp/command-system.ts:143:28)\n    at SwarmInitCommand.execute (/home/mhugo/code/claude-code-zen/src/interfaces/mcp/command-system.ts:171:35)\n    at /home/mhugo/code/claude-code-zen/src/__tests__/patterns/command-pattern.test.ts:116:38\n    at file:///home/mhugo/code/claude-code-zen/node_modules/@vitest/runner/dist/chunk-hooks.js:155:11\n    at file:///home/mhugo/code/claude-code-zen/node_modules/@vitest/runner/dist/chunk-hooks.js:752:26\n    at file:///home/mhugo/code/claude-code-zen/node_modules/@vitest/runner/dist/chunk-hooks.js:1897:20\n    at new Promise (<anonymous>)\n    at runWithTimeout (file:///home/mhugo/code/claude-code-zen/node_modules/@vitest/runner/dist/chunk-hooks.js:1863:10)\n    at runTest (file:///home/mhugo/code/claude-code-zen/node_modules/@vitest/runner/dist/chunk-hooks.js:1574:12)\n    at runSuite (file:///home/mhugo/code/claude-code-zen/node_modules/@vitest/runner/dist/chunk-hooks.js:1729:8)"
          ],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Command Pattern Implementation",
            "Command Execution Algorithms (Classical TDD)",
            "SwarmInitCommand"
          ],
          "fullName": "Command Pattern Implementation Command Execution Algorithms (Classical TDD) SwarmInitCommand should support undo operation for swarm initialization",
          "status": "failed",
          "title": "should support undo operation for swarm initialization",
          "duration": 1.271827999999914,
          "failureMessages": [
            "TypeError: this.swarmManager.isHealthy is not a function\n    at SwarmInitCommand.validate (/home/mhugo/code/claude-code-zen/src/interfaces/mcp/command-system.ts:143:28)\n    at SwarmInitCommand.execute (/home/mhugo/code/claude-code-zen/src/interfaces/mcp/command-system.ts:171:35)\n    at /home/mhugo/code/claude-code-zen/src/__tests__/patterns/command-pattern.test.ts:148:45\n    at file:///home/mhugo/code/claude-code-zen/node_modules/@vitest/runner/dist/chunk-hooks.js:155:11\n    at file:///home/mhugo/code/claude-code-zen/node_modules/@vitest/runner/dist/chunk-hooks.js:752:26\n    at file:///home/mhugo/code/claude-code-zen/node_modules/@vitest/runner/dist/chunk-hooks.js:1897:20\n    at new Promise (<anonymous>)\n    at runWithTimeout (file:///home/mhugo/code/claude-code-zen/node_modules/@vitest/runner/dist/chunk-hooks.js:1863:10)\n    at runTest (file:///home/mhugo/code/claude-code-zen/node_modules/@vitest/runner/dist/chunk-hooks.js:1574:12)\n    at runSuite (file:///home/mhugo/code/claude-code-zen/node_modules/@vitest/runner/dist/chunk-hooks.js:1729:8)"
          ],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Command Pattern Implementation",
            "Command Execution Algorithms (Classical TDD)",
            "SwarmInitCommand"
          ],
          "fullName": "Command Pattern Implementation Command Execution Algorithms (Classical TDD) SwarmInitCommand should calculate resource usage accurately",
          "status": "failed",
          "title": "should calculate resource usage accurately",
          "duration": 1.4196609999999055,
          "failureMessages": [
            "TypeError: this.swarmManager.isHealthy is not a function\n    at SwarmInitCommand.validate (/home/mhugo/code/claude-code-zen/src/interfaces/mcp/command-system.ts:143:28)\n    at SwarmInitCommand.execute (/home/mhugo/code/claude-code-zen/src/interfaces/mcp/command-system.ts:171:35)\n    at /home/mhugo/code/claude-code-zen/src/__tests__/patterns/command-pattern.test.ts:177:38\n    at file:///home/mhugo/code/claude-code-zen/node_modules/@vitest/runner/dist/chunk-hooks.js:155:11\n    at file:///home/mhugo/code/claude-code-zen/node_modules/@vitest/runner/dist/chunk-hooks.js:752:26\n    at file:///home/mhugo/code/claude-code-zen/node_modules/@vitest/runner/dist/chunk-hooks.js:1897:20\n    at new Promise (<anonymous>)\n    at runWithTimeout (file:///home/mhugo/code/claude-code-zen/node_modules/@vitest/runner/dist/chunk-hooks.js:1863:10)\n    at runTest (file:///home/mhugo/code/claude-code-zen/node_modules/@vitest/runner/dist/chunk-hooks.js:1574:12)\n    at runSuite (file:///home/mhugo/code/claude-code-zen/node_modules/@vitest/runner/dist/chunk-hooks.js:1729:8)"
          ],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Command Pattern Implementation",
            "Command Execution Algorithms (Classical TDD)",
            "AgentSpawnCommand"
          ],
          "fullName": "Command Pattern Implementation Command Execution Algorithms (Classical TDD) AgentSpawnCommand should spawn agents with correct configuration",
          "status": "failed",
          "title": "should spawn agents with correct configuration",
          "duration": 1.4168469999995068,
          "failureMessages": [
            "TypeError: Cannot read properties of undefined (reading 'healthy')\n    at AgentSpawnCommand.validate (/home/mhugo/code/claude-code-zen/src/interfaces/mcp/command-system.ts:303:22)\n    at AgentSpawnCommand.execute (/home/mhugo/code/claude-code-zen/src/interfaces/mcp/command-system.ts:312:24)\n    at /home/mhugo/code/claude-code-zen/src/__tests__/patterns/command-pattern.test.ts:216:24\n    at file:///home/mhugo/code/claude-code-zen/node_modules/@vitest/runner/dist/chunk-hooks.js:752:20"
          ],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Command Pattern Implementation",
            "Command Execution Algorithms (Classical TDD)",
            "AgentSpawnCommand"
          ],
          "fullName": "Command Pattern Implementation Command Execution Algorithms (Classical TDD) AgentSpawnCommand should handle agent spawn failures with proper error context",
          "status": "failed",
          "title": "should handle agent spawn failures with proper error context",
          "duration": 0.9345439999997325,
          "failureMessages": [
            "TypeError: Cannot read properties of undefined (reading 'healthy')\n    at AgentSpawnCommand.validate (/home/mhugo/code/claude-code-zen/src/interfaces/mcp/command-system.ts:303:22)\n    at AgentSpawnCommand.execute (/home/mhugo/code/claude-code-zen/src/interfaces/mcp/command-system.ts:312:24)\n    at /home/mhugo/code/claude-code-zen/src/__tests__/patterns/command-pattern.test.ts:240:24\n    at file:///home/mhugo/code/claude-code-zen/node_modules/@vitest/runner/dist/chunk-hooks.js:752:20"
          ],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Command Pattern Implementation",
            "Command Execution Algorithms (Classical TDD)",
            "AgentSpawnCommand"
          ],
          "fullName": "Command Pattern Implementation Command Execution Algorithms (Classical TDD) AgentSpawnCommand should support batch agent spawning",
          "status": "failed",
          "title": "should support batch agent spawning",
          "duration": 1.2935669999997117,
          "failureMessages": [
            "TypeError: Cannot read properties of undefined (reading 'healthy')\n    at AgentSpawnCommand.validate (/home/mhugo/code/claude-code-zen/src/interfaces/mcp/command-system.ts:303:22)\n    at AgentSpawnCommand.execute (/home/mhugo/code/claude-code-zen/src/interfaces/mcp/command-system.ts:312:24)\n    at async Promise.all (index 0)\n    at /home/mhugo/code/claude-code-zen/src/__tests__/patterns/command-pattern.test.ts:284:25\n    at file:///home/mhugo/code/claude-code-zen/node_modules/@vitest/runner/dist/chunk-hooks.js:752:20"
          ],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Command Pattern Implementation",
            "Command Execution Algorithms (Classical TDD)",
            "TaskOrchestrationCommand"
          ],
          "fullName": "Command Pattern Implementation Command Execution Algorithms (Classical TDD) TaskOrchestrationCommand should orchestrate complex tasks across multiple agents",
          "status": "failed",
          "title": "should orchestrate complex tasks across multiple agents",
          "duration": 8.669656000000032,
          "failureMessages": [
            "AssertionError: expected false to be true // Object.is equality\n    at /home/mhugo/code/claude-code-zen/src/__tests__/patterns/command-pattern.test.ts:330:33\n    at file:///home/mhugo/code/claude-code-zen/node_modules/@vitest/runner/dist/chunk-hooks.js:752:20"
          ],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Command Pattern Implementation",
            "Command Execution Algorithms (Classical TDD)",
            "TaskOrchestrationCommand"
          ],
          "fullName": "Command Pattern Implementation Command Execution Algorithms (Classical TDD) TaskOrchestrationCommand should handle task orchestration with dependency resolution",
          "status": "failed",
          "title": "should handle task orchestration with dependency resolution",
          "duration": 2.7882110000000466,
          "failureMessages": [
            "AssertionError: expected false to be true // Object.is equality\n    at /home/mhugo/code/claude-code-zen/src/__tests__/patterns/command-pattern.test.ts:372:33\n    at file:///home/mhugo/code/claude-code-zen/node_modules/@vitest/runner/dist/chunk-hooks.js:752:20"
          ],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Command Pattern Implementation",
            "Command Execution Algorithms (Classical TDD)",
            "TaskOrchestrationCommand"
          ],
          "fullName": "Command Pattern Implementation Command Execution Algorithms (Classical TDD) TaskOrchestrationCommand should calculate accurate performance metrics for orchestration",
          "status": "failed",
          "title": "should calculate accurate performance metrics for orchestration",
          "duration": 1.701907000000574,
          "failureMessages": [
            "AssertionError: expected false to be true // Object.is equality\n    at /home/mhugo/code/claude-code-zen/src/__tests__/patterns/command-pattern.test.ts:414:33\n    at file:///home/mhugo/code/claude-code-zen/node_modules/@vitest/runner/dist/chunk-hooks.js:752:20"
          ],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Command Pattern Implementation",
            "Command Execution Algorithms (Classical TDD)",
            "Command Validation and Security"
          ],
          "fullName": "Command Pattern Implementation Command Execution Algorithms (Classical TDD) Command Validation and Security should validate command permissions before execution",
          "status": "failed",
          "title": "should validate command permissions before execution",
          "duration": 1.374601999999868,
          "failureMessages": [
            "TypeError: this.swarmManager.isHealthy is not a function\n    at SwarmInitCommand.validate (/home/mhugo/code/claude-code-zen/src/interfaces/mcp/command-system.ts:143:28)\n    at SwarmInitCommand.execute (/home/mhugo/code/claude-code-zen/src/interfaces/mcp/command-system.ts:171:35)\n    at /home/mhugo/code/claude-code-zen/src/__tests__/patterns/command-pattern.test.ts:443:38\n    at file:///home/mhugo/code/claude-code-zen/node_modules/@vitest/runner/dist/chunk-hooks.js:155:11\n    at file:///home/mhugo/code/claude-code-zen/node_modules/@vitest/runner/dist/chunk-hooks.js:752:26\n    at file:///home/mhugo/code/claude-code-zen/node_modules/@vitest/runner/dist/chunk-hooks.js:1897:20\n    at new Promise (<anonymous>)\n    at runWithTimeout (file:///home/mhugo/code/claude-code-zen/node_modules/@vitest/runner/dist/chunk-hooks.js:1863:10)\n    at runTest (file:///home/mhugo/code/claude-code-zen/node_modules/@vitest/runner/dist/chunk-hooks.js:1574:12)\n    at runSuite (file:///home/mhugo/code/claude-code-zen/node_modules/@vitest/runner/dist/chunk-hooks.js:1729:8)"
          ],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Command Pattern Implementation",
            "Command Execution Algorithms (Classical TDD)",
            "Command Validation and Security"
          ],
          "fullName": "Command Pattern Implementation Command Execution Algorithms (Classical TDD) Command Validation and Security should validate resource constraints before command execution",
          "status": "failed",
          "title": "should validate resource constraints before command execution",
          "duration": 1.1550500000003012,
          "failureMessages": [
            "TypeError: this.swarmManager.isHealthy is not a function\n    at SwarmInitCommand.validate (/home/mhugo/code/claude-code-zen/src/interfaces/mcp/command-system.ts:143:28)\n    at SwarmInitCommand.execute (/home/mhugo/code/claude-code-zen/src/interfaces/mcp/command-system.ts:171:35)\n    at /home/mhugo/code/claude-code-zen/src/__tests__/patterns/command-pattern.test.ts:475:38\n    at file:///home/mhugo/code/claude-code-zen/node_modules/@vitest/runner/dist/chunk-hooks.js:155:11\n    at file:///home/mhugo/code/claude-code-zen/node_modules/@vitest/runner/dist/chunk-hooks.js:752:26\n    at file:///home/mhugo/code/claude-code-zen/node_modules/@vitest/runner/dist/chunk-hooks.js:1897:20\n    at new Promise (<anonymous>)\n    at runWithTimeout (file:///home/mhugo/code/claude-code-zen/node_modules/@vitest/runner/dist/chunk-hooks.js:1863:10)\n    at runTest (file:///home/mhugo/code/claude-code-zen/node_modules/@vitest/runner/dist/chunk-hooks.js:1574:12)\n    at runSuite (file:///home/mhugo/code/claude-code-zen/node_modules/@vitest/runner/dist/chunk-hooks.js:1729:8)"
          ],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Command Pattern Implementation",
            "Command Execution Algorithms (Classical TDD)",
            "Command Validation and Security"
          ],
          "fullName": "Command Pattern Implementation Command Execution Algorithms (Classical TDD) Command Validation and Security should sanitize command parameters for security",
          "status": "failed",
          "title": "should sanitize command parameters for security",
          "duration": 1.13165299999946,
          "failureMessages": [
            "TypeError: this.swarmManager.isHealthy is not a function\n    at SwarmInitCommand.validate (/home/mhugo/code/claude-code-zen/src/interfaces/mcp/command-system.ts:143:28)\n    at SwarmInitCommand.execute (/home/mhugo/code/claude-code-zen/src/interfaces/mcp/command-system.ts:171:35)\n    at /home/mhugo/code/claude-code-zen/src/__tests__/patterns/command-pattern.test.ts:516:38\n    at file:///home/mhugo/code/claude-code-zen/node_modules/@vitest/runner/dist/chunk-hooks.js:155:11\n    at file:///home/mhugo/code/claude-code-zen/node_modules/@vitest/runner/dist/chunk-hooks.js:752:26\n    at file:///home/mhugo/code/claude-code-zen/node_modules/@vitest/runner/dist/chunk-hooks.js:1897:20\n    at new Promise (<anonymous>)\n    at runWithTimeout (file:///home/mhugo/code/claude-code-zen/node_modules/@vitest/runner/dist/chunk-hooks.js:1863:10)\n    at runTest (file:///home/mhugo/code/claude-code-zen/node_modules/@vitest/runner/dist/chunk-hooks.js:1574:12)\n    at runSuite (file:///home/mhugo/code/claude-code-zen/node_modules/@vitest/runner/dist/chunk-hooks.js:1729:8)"
          ],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Command Pattern Implementation",
            "Command Execution Algorithms (Classical TDD)",
            "Command Performance and Optimization"
          ],
          "fullName": "Command Pattern Implementation Command Execution Algorithms (Classical TDD) Command Performance and Optimization should optimize command execution based on system resources",
          "status": "failed",
          "title": "should optimize command execution based on system resources",
          "duration": 1.3450170000005528,
          "failureMessages": [
            "AssertionError: expected false to be true // Object.is equality\n    at /home/mhugo/code/claude-code-zen/src/__tests__/patterns/command-pattern.test.ts:569:33\n    at file:///home/mhugo/code/claude-code-zen/node_modules/@vitest/runner/dist/chunk-hooks.js:752:20"
          ],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Command Pattern Implementation",
            "Command Execution Algorithms (Classical TDD)",
            "Command Performance and Optimization"
          ],
          "fullName": "Command Pattern Implementation Command Execution Algorithms (Classical TDD) Command Performance and Optimization should handle command timeout and cancellation gracefully",
          "status": "failed",
          "title": "should handle command timeout and cancellation gracefully",
          "duration": 1.1158040000000256,
          "failureMessages": [
            "TypeError: this.swarmManager.isHealthy is not a function\n    at SwarmInitCommand.validate (/home/mhugo/code/claude-code-zen/src/interfaces/mcp/command-system.ts:143:28)\n    at SwarmInitCommand.execute (/home/mhugo/code/claude-code-zen/src/interfaces/mcp/command-system.ts:171:35)\n    at /home/mhugo/code/claude-code-zen/src/__tests__/patterns/command-pattern.test.ts:594:38\n    at file:///home/mhugo/code/claude-code-zen/node_modules/@vitest/runner/dist/chunk-hooks.js:155:11\n    at file:///home/mhugo/code/claude-code-zen/node_modules/@vitest/runner/dist/chunk-hooks.js:752:26\n    at file:///home/mhugo/code/claude-code-zen/node_modules/@vitest/runner/dist/chunk-hooks.js:1897:20\n    at new Promise (<anonymous>)\n    at runWithTimeout (file:///home/mhugo/code/claude-code-zen/node_modules/@vitest/runner/dist/chunk-hooks.js:1863:10)\n    at runTest (file:///home/mhugo/code/claude-code-zen/node_modules/@vitest/runner/dist/chunk-hooks.js:1574:12)\n    at runSuite (file:///home/mhugo/code/claude-code-zen/node_modules/@vitest/runner/dist/chunk-hooks.js:1729:8)"
          ],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Command Pattern Implementation",
            "Command Queue Management (London TDD)"
          ],
          "fullName": "Command Pattern Implementation Command Queue Management (London TDD) should execute commands in queue order",
          "status": "failed",
          "title": "should execute commands in queue order",
          "duration": 2.083031999999548,
          "failureMessages": [
            "TypeError: command.getCommandType is not a function\n    at /home/mhugo/code/claude-code-zen/src/interfaces/mcp/command-system.ts:511:26\n    at new Promise (<anonymous>)\n    at MCPCommandQueue.execute (/home/mhugo/code/claude-code-zen/src/interfaces/mcp/command-system.ts:508:12)\n    at /home/mhugo/code/claude-code-zen/src/__tests__/patterns/command-pattern.test.ts:642:41\n    at file:///home/mhugo/code/claude-code-zen/node_modules/@vitest/runner/dist/chunk-hooks.js:155:11\n    at file:///home/mhugo/code/claude-code-zen/node_modules/@vitest/runner/dist/chunk-hooks.js:752:26\n    at file:///home/mhugo/code/claude-code-zen/node_modules/@vitest/runner/dist/chunk-hooks.js:1897:20\n    at new Promise (<anonymous>)\n    at runWithTimeout (file:///home/mhugo/code/claude-code-zen/node_modules/@vitest/runner/dist/chunk-hooks.js:1863:10)\n    at runTest (file:///home/mhugo/code/claude-code-zen/node_modules/@vitest/runner/dist/chunk-hooks.js:1574:12)"
          ],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Command Pattern Implementation",
            "Command Queue Management (London TDD)"
          ],
          "fullName": "Command Pattern Implementation Command Queue Management (London TDD) should maintain command history",
          "status": "failed",
          "title": "should maintain command history",
          "duration": 1.3956440000001749,
          "failureMessages": [
            "TypeError: command.getCommandType is not a function\n    at /home/mhugo/code/claude-code-zen/src/interfaces/mcp/command-system.ts:511:26\n    at new Promise (<anonymous>)\n    at MCPCommandQueue.execute (/home/mhugo/code/claude-code-zen/src/interfaces/mcp/command-system.ts:508:12)\n    at /home/mhugo/code/claude-code-zen/src/__tests__/patterns/command-pattern.test.ts:664:26\n    at file:///home/mhugo/code/claude-code-zen/node_modules/@vitest/runner/dist/chunk-hooks.js:155:11\n    at file:///home/mhugo/code/claude-code-zen/node_modules/@vitest/runner/dist/chunk-hooks.js:752:26\n    at file:///home/mhugo/code/claude-code-zen/node_modules/@vitest/runner/dist/chunk-hooks.js:1897:20\n    at new Promise (<anonymous>)\n    at runWithTimeout (file:///home/mhugo/code/claude-code-zen/node_modules/@vitest/runner/dist/chunk-hooks.js:1863:10)\n    at runTest (file:///home/mhugo/code/claude-code-zen/node_modules/@vitest/runner/dist/chunk-hooks.js:1574:12)"
          ],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Command Pattern Implementation",
            "Command Queue Management (London TDD)"
          ],
          "fullName": "Command Pattern Implementation Command Queue Management (London TDD) should handle command execution failures",
          "status": "failed",
          "title": "should handle command execution failures",
          "duration": 1.064675999999963,
          "failureMessages": [
            "TypeError: command.getCommandType is not a function\n    at /home/mhugo/code/claude-code-zen/src/interfaces/mcp/command-system.ts:511:26\n    at new Promise (<anonymous>)\n    at MCPCommandQueue.execute (/home/mhugo/code/claude-code-zen/src/interfaces/mcp/command-system.ts:508:12)\n    at /home/mhugo/code/claude-code-zen/src/__tests__/patterns/command-pattern.test.ts:682:41\n    at file:///home/mhugo/code/claude-code-zen/node_modules/@vitest/runner/dist/chunk-hooks.js:155:11\n    at file:///home/mhugo/code/claude-code-zen/node_modules/@vitest/runner/dist/chunk-hooks.js:752:26\n    at file:///home/mhugo/code/claude-code-zen/node_modules/@vitest/runner/dist/chunk-hooks.js:1897:20\n    at new Promise (<anonymous>)\n    at runWithTimeout (file:///home/mhugo/code/claude-code-zen/node_modules/@vitest/runner/dist/chunk-hooks.js:1863:10)\n    at runTest (file:///home/mhugo/code/claude-code-zen/node_modules/@vitest/runner/dist/chunk-hooks.js:1574:12)"
          ],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Command Pattern Implementation",
            "Command Queue Management (London TDD)"
          ],
          "fullName": "Command Pattern Implementation Command Queue Management (London TDD) should support undo operations",
          "status": "failed",
          "title": "should support undo operations",
          "duration": 1.240074000000277,
          "failureMessages": [
            "TypeError: command.getCommandType is not a function\n    at /home/mhugo/code/claude-code-zen/src/interfaces/mcp/command-system.ts:511:26\n    at new Promise (<anonymous>)\n    at MCPCommandQueue.execute (/home/mhugo/code/claude-code-zen/src/interfaces/mcp/command-system.ts:508:12)\n    at /home/mhugo/code/claude-code-zen/src/__tests__/patterns/command-pattern.test.ts:715:26\n    at file:///home/mhugo/code/claude-code-zen/node_modules/@vitest/runner/dist/chunk-hooks.js:155:11\n    at file:///home/mhugo/code/claude-code-zen/node_modules/@vitest/runner/dist/chunk-hooks.js:752:26\n    at file:///home/mhugo/code/claude-code-zen/node_modules/@vitest/runner/dist/chunk-hooks.js:1897:20\n    at new Promise (<anonymous>)\n    at runWithTimeout (file:///home/mhugo/code/claude-code-zen/node_modules/@vitest/runner/dist/chunk-hooks.js:1863:10)\n    at runTest (file:///home/mhugo/code/claude-code-zen/node_modules/@vitest/runner/dist/chunk-hooks.js:1574:12)"
          ],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Command Pattern Implementation",
            "Command Queue Management (London TDD)"
          ],
          "fullName": "Command Pattern Implementation Command Queue Management (London TDD) should validate commands before execution",
          "status": "failed",
          "title": "should validate commands before execution",
          "duration": 1.1873439999999391,
          "failureMessages": [
            "TypeError: command.getCommandType is not a function\n    at /home/mhugo/code/claude-code-zen/src/interfaces/mcp/command-system.ts:511:26\n    at new Promise (<anonymous>)\n    at MCPCommandQueue.execute (/home/mhugo/code/claude-code-zen/src/interfaces/mcp/command-system.ts:508:12)\n    at /home/mhugo/code/claude-code-zen/src/__tests__/patterns/command-pattern.test.ts:732:41\n    at file:///home/mhugo/code/claude-code-zen/node_modules/@vitest/runner/dist/chunk-hooks.js:155:11\n    at file:///home/mhugo/code/claude-code-zen/node_modules/@vitest/runner/dist/chunk-hooks.js:752:26\n    at file:///home/mhugo/code/claude-code-zen/node_modules/@vitest/runner/dist/chunk-hooks.js:1897:20\n    at new Promise (<anonymous>)\n    at runWithTimeout (file:///home/mhugo/code/claude-code-zen/node_modules/@vitest/runner/dist/chunk-hooks.js:1863:10)\n    at runTest (file:///home/mhugo/code/claude-code-zen/node_modules/@vitest/runner/dist/chunk-hooks.js:1574:12)"
          ],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Command Pattern Implementation",
            "Command Queue Management (London TDD)"
          ],
          "fullName": "Command Pattern Implementation Command Queue Management (London TDD) should handle concurrent command execution",
          "status": "failed",
          "title": "should handle concurrent command execution",
          "duration": 2.951932000000852,
          "failureMessages": [
            "TypeError: command.getCommandType is not a function\n    at /home/mhugo/code/claude-code-zen/src/interfaces/mcp/command-system.ts:511:26\n    at new Promise (<anonymous>)\n    at MCPCommandQueue.execute (/home/mhugo/code/claude-code-zen/src/interfaces/mcp/command-system.ts:508:12)\n    at /home/mhugo/code/claude-code-zen/src/__tests__/patterns/command-pattern.test.ts:755:76\n    at Array.map (<anonymous>)\n    at /home/mhugo/code/claude-code-zen/src/__tests__/patterns/command-pattern.test.ts:755:50\n    at file:///home/mhugo/code/claude-code-zen/node_modules/@vitest/runner/dist/chunk-hooks.js:155:11\n    at file:///home/mhugo/code/claude-code-zen/node_modules/@vitest/runner/dist/chunk-hooks.js:752:26\n    at file:///home/mhugo/code/claude-code-zen/node_modules/@vitest/runner/dist/chunk-hooks.js:1897:20\n    at new Promise (<anonymous>)"
          ],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Command Pattern Implementation",
            "Command Queue Management (London TDD)"
          ],
          "fullName": "Command Pattern Implementation Command Queue Management (London TDD) should provide command queue metrics",
          "status": "failed",
          "title": "should provide command queue metrics",
          "duration": 2.4184260000001814,
          "failureMessages": [
            "TypeError: command.getCommandType is not a function\n    at /home/mhugo/code/claude-code-zen/src/interfaces/mcp/command-system.ts:511:26\n    at new Promise (<anonymous>)\n    at MCPCommandQueue.execute (/home/mhugo/code/claude-code-zen/src/interfaces/mcp/command-system.ts:508:12)\n    at /home/mhugo/code/claude-code-zen/src/__tests__/patterns/command-pattern.test.ts:791:60\n    at Array.map (<anonymous>)\n    at /home/mhugo/code/claude-code-zen/src/__tests__/patterns/command-pattern.test.ts:791:34\n    at file:///home/mhugo/code/claude-code-zen/node_modules/@vitest/runner/dist/chunk-hooks.js:155:11\n    at file:///home/mhugo/code/claude-code-zen/node_modules/@vitest/runner/dist/chunk-hooks.js:752:26\n    at file:///home/mhugo/code/claude-code-zen/node_modules/@vitest/runner/dist/chunk-hooks.js:1897:20\n    at new Promise (<anonymous>)"
          ],
          "meta": {}
        },
        {
          "ancestorTitles": ["Command Pattern Implementation", "Transaction Support (Hybrid TDD)"],
          "fullName": "Command Pattern Implementation Transaction Support (Hybrid TDD) should execute transaction successfully when all commands succeed",
          "status": "failed",
          "title": "should execute transaction successfully when all commands succeed",
          "duration": 13.264354999999341,
          "failureMessages": [
            "AssertionError: expected false to be true // Object.is equality\n    at /home/mhugo/code/claude-code-zen/src/__tests__/patterns/command-pattern.test.ts:889:48\n    at file:///home/mhugo/code/claude-code-zen/node_modules/@vitest/runner/dist/chunk-hooks.js:752:20"
          ],
          "meta": {}
        },
        {
          "ancestorTitles": ["Command Pattern Implementation", "Transaction Support (Hybrid TDD)"],
          "fullName": "Command Pattern Implementation Transaction Support (Hybrid TDD) should rollback transaction when any command fails",
          "status": "failed",
          "title": "should rollback transaction when any command fails",
          "duration": 1.7330189999993308,
          "failureMessages": [
            "TypeError: mockSwarmCommand.getId is not a function\n    at /home/mhugo/code/claude-code-zen/src/__tests__/patterns/command-pattern.test.ts:932:37\n    at file:///home/mhugo/code/claude-code-zen/node_modules/@vitest/runner/dist/chunk-hooks.js:155:11\n    at file:///home/mhugo/code/claude-code-zen/node_modules/@vitest/runner/dist/chunk-hooks.js:752:26\n    at file:///home/mhugo/code/claude-code-zen/node_modules/@vitest/runner/dist/chunk-hooks.js:1897:20\n    at new Promise (<anonymous>)\n    at runWithTimeout (file:///home/mhugo/code/claude-code-zen/node_modules/@vitest/runner/dist/chunk-hooks.js:1863:10)\n    at runTest (file:///home/mhugo/code/claude-code-zen/node_modules/@vitest/runner/dist/chunk-hooks.js:1574:12)\n    at runSuite (file:///home/mhugo/code/claude-code-zen/node_modules/@vitest/runner/dist/chunk-hooks.js:1729:8)\n    at runSuite (file:///home/mhugo/code/claude-code-zen/node_modules/@vitest/runner/dist/chunk-hooks.js:1729:8)\n    at runSuite (file:///home/mhugo/code/claude-code-zen/node_modules/@vitest/runner/dist/chunk-hooks.js:1729:8)"
          ],
          "meta": {}
        },
        {
          "ancestorTitles": ["Command Pattern Implementation", "Transaction Support (Hybrid TDD)"],
          "fullName": "Command Pattern Implementation Transaction Support (Hybrid TDD) should handle nested transactions correctly",
          "status": "failed",
          "title": "should handle nested transactions correctly",
          "duration": 12.089710999999625,
          "failureMessages": [
            "AssertionError: expected false to be true // Object.is equality\n    at /home/mhugo/code/claude-code-zen/src/__tests__/patterns/command-pattern.test.ts:1006:54\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at runNextTicks (node:internal/process/task_queues:69:3)\n    at listOnTimeout (node:internal/timers:549:9)\n    at processTimers (node:internal/timers:523:7)\n    at file:///home/mhugo/code/claude-code-zen/node_modules/@vitest/runner/dist/chunk-hooks.js:752:20"
          ],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Command Pattern Implementation",
            "Command Factory and Utilities (Classical TDD)"
          ],
          "fullName": "Command Pattern Implementation Command Factory and Utilities (Classical TDD) should create commands with correct types and metadata",
          "status": "failed",
          "title": "should create commands with correct types and metadata",
          "duration": 0.9178310000006604,
          "failureMessages": [
            "TypeError: swarmCommand.getType is not a function\n    at /home/mhugo/code/claude-code-zen/src/__tests__/patterns/command-pattern.test.ts:1064:27\n    at file:///home/mhugo/code/claude-code-zen/node_modules/@vitest/runner/dist/chunk-hooks.js:155:11\n    at file:///home/mhugo/code/claude-code-zen/node_modules/@vitest/runner/dist/chunk-hooks.js:752:26\n    at file:///home/mhugo/code/claude-code-zen/node_modules/@vitest/runner/dist/chunk-hooks.js:1897:20\n    at new Promise (<anonymous>)\n    at runWithTimeout (file:///home/mhugo/code/claude-code-zen/node_modules/@vitest/runner/dist/chunk-hooks.js:1863:10)\n    at runTest (file:///home/mhugo/code/claude-code-zen/node_modules/@vitest/runner/dist/chunk-hooks.js:1574:12)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at runNextTicks (node:internal/process/task_queues:69:3)\n    at listOnTimeout (node:internal/timers:549:9)"
          ],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Command Pattern Implementation",
            "Command Factory and Utilities (Classical TDD)"
          ],
          "fullName": "Command Pattern Implementation Command Factory and Utilities (Classical TDD) should validate command factory inputs",
          "status": "failed",
          "title": "should validate command factory inputs",
          "duration": 3.9022180000001754,
          "failureMessages": [
            "AssertionError: expected [Function] to throw an error\n    at Proxy.<anonymous> (file:///home/mhugo/code/claude-code-zen/node_modules/@vitest/expect/dist/index.js:1420:16)\n    at Proxy.<anonymous> (file:///home/mhugo/code/claude-code-zen/node_modules/@vitest/expect/dist/index.js:1029:14)\n    at Proxy.methodWrapper (file:///home/mhugo/code/claude-code-zen/node_modules/chai/chai.js:1706:25)\n    at /home/mhugo/code/claude-code-zen/src/__tests__/patterns/command-pattern.test.ts:1085:10\n    at file:///home/mhugo/code/claude-code-zen/node_modules/@vitest/runner/dist/chunk-hooks.js:155:11\n    at file:///home/mhugo/code/claude-code-zen/node_modules/@vitest/runner/dist/chunk-hooks.js:752:26\n    at file:///home/mhugo/code/claude-code-zen/node_modules/@vitest/runner/dist/chunk-hooks.js:1897:20\n    at new Promise (<anonymous>)\n    at runWithTimeout (file:///home/mhugo/code/claude-code-zen/node_modules/@vitest/runner/dist/chunk-hooks.js:1863:10)\n    at runTest (file:///home/mhugo/code/claude-code-zen/node_modules/@vitest/runner/dist/chunk-hooks.js:1574:12)"
          ],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Command Pattern Implementation",
            "Command Factory and Utilities (Classical TDD)"
          ],
          "fullName": "Command Pattern Implementation Command Factory and Utilities (Classical TDD) should support command serialization and deserialization",
          "status": "failed",
          "title": "should support command serialization and deserialization",
          "duration": 0.9192039999998087,
          "failureMessages": [
            "TypeError: CommandFactory.serializeCommand is not a function\n    at /home/mhugo/code/claude-code-zen/src/__tests__/patterns/command-pattern.test.ts:1114:41\n    at file:///home/mhugo/code/claude-code-zen/node_modules/@vitest/runner/dist/chunk-hooks.js:155:11\n    at file:///home/mhugo/code/claude-code-zen/node_modules/@vitest/runner/dist/chunk-hooks.js:752:26\n    at file:///home/mhugo/code/claude-code-zen/node_modules/@vitest/runner/dist/chunk-hooks.js:1897:20\n    at new Promise (<anonymous>)\n    at runWithTimeout (file:///home/mhugo/code/claude-code-zen/node_modules/@vitest/runner/dist/chunk-hooks.js:1863:10)\n    at runTest (file:///home/mhugo/code/claude-code-zen/node_modules/@vitest/runner/dist/chunk-hooks.js:1574:12)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at runNextTicks (node:internal/process/task_queues:69:3)\n    at listOnTimeout (node:internal/timers:549:9)"
          ],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Command Pattern Implementation",
            "Command Factory and Utilities (Classical TDD)"
          ],
          "fullName": "Command Pattern Implementation Command Factory and Utilities (Classical TDD) should generate unique command IDs",
          "status": "failed",
          "title": "should generate unique command IDs",
          "duration": 0.7494990000004691,
          "failureMessages": [
            "TypeError: command.getId is not a function\n    at /home/mhugo/code/claude-code-zen/src/__tests__/patterns/command-pattern.test.ts:1139:32\n    at file:///home/mhugo/code/claude-code-zen/node_modules/@vitest/runner/dist/chunk-hooks.js:155:11\n    at file:///home/mhugo/code/claude-code-zen/node_modules/@vitest/runner/dist/chunk-hooks.js:752:26\n    at file:///home/mhugo/code/claude-code-zen/node_modules/@vitest/runner/dist/chunk-hooks.js:1897:20\n    at new Promise (<anonymous>)\n    at runWithTimeout (file:///home/mhugo/code/claude-code-zen/node_modules/@vitest/runner/dist/chunk-hooks.js:1863:10)\n    at runTest (file:///home/mhugo/code/claude-code-zen/node_modules/@vitest/runner/dist/chunk-hooks.js:1574:12)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at runNextTicks (node:internal/process/task_queues:69:3)\n    at listOnTimeout (node:internal/timers:549:9)"
          ],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Command Pattern Implementation",
            "Command Factory and Utilities (Classical TDD)"
          ],
          "fullName": "Command Pattern Implementation Command Factory and Utilities (Classical TDD) should calculate command complexity correctly",
          "status": "failed",
          "title": "should calculate command complexity correctly",
          "duration": 1.0021380000007412,
          "failureMessages": [
            "TypeError: simpleCommand.getMetadata is not a function\n    at /home/mhugo/code/claude-code-zen/src/__tests__/patterns/command-pattern.test.ts:1173:44\n    at file:///home/mhugo/code/claude-code-zen/node_modules/@vitest/runner/dist/chunk-hooks.js:155:11\n    at file:///home/mhugo/code/claude-code-zen/node_modules/@vitest/runner/dist/chunk-hooks.js:752:26\n    at file:///home/mhugo/code/claude-code-zen/node_modules/@vitest/runner/dist/chunk-hooks.js:1897:20\n    at new Promise (<anonymous>)\n    at runWithTimeout (file:///home/mhugo/code/claude-code-zen/node_modules/@vitest/runner/dist/chunk-hooks.js:1863:10)\n    at runTest (file:///home/mhugo/code/claude-code-zen/node_modules/@vitest/runner/dist/chunk-hooks.js:1574:12)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at runNextTicks (node:internal/process/task_queues:69:3)\n    at listOnTimeout (node:internal/timers:549:9)"
          ],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Command Pattern Implementation",
            "Command System Integration (Hybrid TDD)"
          ],
          "fullName": "Command Pattern Implementation Command System Integration (Hybrid TDD) should integrate with event system for command lifecycle notifications",
          "status": "passed",
          "title": "should integrate with event system for command lifecycle notifications",
          "duration": 0.34853299999940646,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Command Pattern Implementation",
            "Command System Integration (Hybrid TDD)"
          ],
          "fullName": "Command Pattern Implementation Command System Integration (Hybrid TDD) should integrate with facade pattern for simplified command execution",
          "status": "passed",
          "title": "should integrate with facade pattern for simplified command execution",
          "duration": 0.20641100000011647,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Command Pattern Implementation",
            "Command System Integration (Hybrid TDD)"
          ],
          "fullName": "Command Pattern Implementation Command System Integration (Hybrid TDD) should support protocol adaptation through adapter pattern",
          "status": "passed",
          "title": "should support protocol adaptation through adapter pattern",
          "duration": 0.19171400000050198,
          "failureMessages": [],
          "meta": {}
        }
      ],
      "startTime": 1754826976772,
      "endTime": 1754826976864.2063,
      "status": "failed",
      "message": "",
      "name": "/home/mhugo/code/claude-code-zen/src/__tests__/patterns/command-pattern.test.ts"
    },
    {
      "assertionResults": [],
      "startTime": 1754826973072,
      "endTime": 1754826973072,
      "status": "failed",
      "message": "(0 , createLogger) is not a function",
      "name": "/home/mhugo/code/claude-code-zen/src/__tests__/patterns/composite-pattern.test.ts"
    },
    {
      "assertionResults": [],
      "startTime": 1754826973072,
      "endTime": 1754826973072,
      "status": "failed",
      "message": "(0 , createLogger) is not a function",
      "name": "/home/mhugo/code/claude-code-zen/src/__tests__/patterns/facade-pattern.test.ts"
    },
    {
      "assertionResults": [],
      "startTime": 1754826973072,
      "endTime": 1754826973072,
      "status": "failed",
      "message": "(0 , createLogger) is not a function",
      "name": "/home/mhugo/code/claude-code-zen/src/__tests__/patterns/observer-pattern.test.ts"
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": [
            "Strategy Pattern Implementation",
            "Strategy Algorithms (Classical TDD)",
            "MeshStrategy"
          ],
          "fullName": "Strategy Pattern Implementation Strategy Algorithms (Classical TDD) MeshStrategy should create full mesh connections for all agents",
          "status": "passed",
          "title": "should create full mesh connections for all agents",
          "duration": 23.91417899999942,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Strategy Pattern Implementation",
            "Strategy Algorithms (Classical TDD)",
            "MeshStrategy"
          ],
          "fullName": "Strategy Pattern Implementation Strategy Algorithms (Classical TDD) MeshStrategy should calculate performance metrics accurately",
          "status": "passed",
          "title": "should calculate performance metrics accurately",
          "duration": 0.7487980000005336,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Strategy Pattern Implementation",
            "Strategy Algorithms (Classical TDD)",
            "MeshStrategy"
          ],
          "fullName": "Strategy Pattern Implementation Strategy Algorithms (Classical TDD) MeshStrategy should have appropriate latency for mesh topology",
          "status": "passed",
          "title": "should have appropriate latency for mesh topology",
          "duration": 0.5614629999981844,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Strategy Pattern Implementation",
            "Strategy Algorithms (Classical TDD)",
            "MeshStrategy"
          ],
          "fullName": "Strategy Pattern Implementation Strategy Algorithms (Classical TDD) MeshStrategy should generate recommendations for large swarms",
          "status": "passed",
          "title": "should generate recommendations for large swarms",
          "duration": 0.5663679999997839,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Strategy Pattern Implementation",
            "Strategy Algorithms (Classical TDD)",
            "HierarchicalStrategy"
          ],
          "fullName": "Strategy Pattern Implementation Strategy Algorithms (Classical TDD) HierarchicalStrategy should create hierarchical leadership structure",
          "status": "failed",
          "title": "should create hierarchical leadership structure",
          "duration": 17.32687700000315,
          "failureMessages": [
            "TypeError: Cannot read properties of undefined (reading 'length')\n    at HierarchicalStrategy.validateContext (/home/mhugo/code/claude-code-zen/src/coordination/swarm/core/strategy.ts:243:22)\n    at HierarchicalStrategy.coordinate (/home/mhugo/code/claude-code-zen/src/coordination/swarm/core/strategy.ts:214:15)\n    at /home/mhugo/code/claude-code-zen/src/__tests__/patterns/strategy-pattern.test.ts:105:39\n    at file:///home/mhugo/code/claude-code-zen/node_modules/@vitest/runner/dist/chunk-hooks.js:155:11\n    at file:///home/mhugo/code/claude-code-zen/node_modules/@vitest/runner/dist/chunk-hooks.js:752:26\n    at file:///home/mhugo/code/claude-code-zen/node_modules/@vitest/runner/dist/chunk-hooks.js:1897:20\n    at new Promise (<anonymous>)\n    at runWithTimeout (file:///home/mhugo/code/claude-code-zen/node_modules/@vitest/runner/dist/chunk-hooks.js:1863:10)\n    at runTest (file:///home/mhugo/code/claude-code-zen/node_modules/@vitest/runner/dist/chunk-hooks.js:1574:12)\n    at runSuite (file:///home/mhugo/code/claude-code-zen/node_modules/@vitest/runner/dist/chunk-hooks.js:1729:8)"
          ],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Strategy Pattern Implementation",
            "Strategy Algorithms (Classical TDD)",
            "HierarchicalStrategy"
          ],
          "fullName": "Strategy Pattern Implementation Strategy Algorithms (Classical TDD) HierarchicalStrategy should select leaders based on capabilities",
          "status": "failed",
          "title": "should select leaders based on capabilities",
          "duration": 1.1359810000030848,
          "failureMessages": [
            "TypeError: Cannot read properties of undefined (reading 'length')\n    at HierarchicalStrategy.validateContext (/home/mhugo/code/claude-code-zen/src/coordination/swarm/core/strategy.ts:243:22)\n    at HierarchicalStrategy.coordinate (/home/mhugo/code/claude-code-zen/src/coordination/swarm/core/strategy.ts:214:15)\n    at /home/mhugo/code/claude-code-zen/src/__tests__/patterns/strategy-pattern.test.ts:116:39\n    at file:///home/mhugo/code/claude-code-zen/node_modules/@vitest/runner/dist/chunk-hooks.js:155:11\n    at file:///home/mhugo/code/claude-code-zen/node_modules/@vitest/runner/dist/chunk-hooks.js:752:26\n    at file:///home/mhugo/code/claude-code-zen/node_modules/@vitest/runner/dist/chunk-hooks.js:1897:20\n    at new Promise (<anonymous>)\n    at runWithTimeout (file:///home/mhugo/code/claude-code-zen/node_modules/@vitest/runner/dist/chunk-hooks.js:1863:10)\n    at runTest (file:///home/mhugo/code/claude-code-zen/node_modules/@vitest/runner/dist/chunk-hooks.js:1574:12)\n    at runSuite (file:///home/mhugo/code/claude-code-zen/node_modules/@vitest/runner/dist/chunk-hooks.js:1729:8)"
          ],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Strategy Pattern Implementation",
            "Strategy Algorithms (Classical TDD)",
            "HierarchicalStrategy"
          ],
          "fullName": "Strategy Pattern Implementation Strategy Algorithms (Classical TDD) HierarchicalStrategy should have latency proportional to hierarchy depth",
          "status": "failed",
          "title": "should have latency proportional to hierarchy depth",
          "duration": 0.8721749999967869,
          "failureMessages": [
            "TypeError: Cannot read properties of undefined (reading 'length')\n    at HierarchicalStrategy.validateContext (/home/mhugo/code/claude-code-zen/src/coordination/swarm/core/strategy.ts:243:22)\n    at HierarchicalStrategy.coordinate (/home/mhugo/code/claude-code-zen/src/coordination/swarm/core/strategy.ts:214:15)\n    at /home/mhugo/code/claude-code-zen/src/__tests__/patterns/strategy-pattern.test.ts:127:39\n    at file:///home/mhugo/code/claude-code-zen/node_modules/@vitest/runner/dist/chunk-hooks.js:155:11\n    at file:///home/mhugo/code/claude-code-zen/node_modules/@vitest/runner/dist/chunk-hooks.js:752:26\n    at file:///home/mhugo/code/claude-code-zen/node_modules/@vitest/runner/dist/chunk-hooks.js:1897:20\n    at new Promise (<anonymous>)\n    at runWithTimeout (file:///home/mhugo/code/claude-code-zen/node_modules/@vitest/runner/dist/chunk-hooks.js:1863:10)\n    at runTest (file:///home/mhugo/code/claude-code-zen/node_modules/@vitest/runner/dist/chunk-hooks.js:1574:12)\n    at runSuite (file:///home/mhugo/code/claude-code-zen/node_modules/@vitest/runner/dist/chunk-hooks.js:1729:8)"
          ],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Strategy Pattern Implementation",
            "Strategy Algorithms (Classical TDD)",
            "RingStrategy"
          ],
          "fullName": "Strategy Pattern Implementation Strategy Algorithms (Classical TDD) RingStrategy should create circular connections",
          "status": "passed",
          "title": "should create circular connections",
          "duration": 1.1705199999996694,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Strategy Pattern Implementation",
            "Strategy Algorithms (Classical TDD)",
            "RingStrategy"
          ],
          "fullName": "Strategy Pattern Implementation Strategy Algorithms (Classical TDD) RingStrategy should have latency proportional to ring size",
          "status": "passed",
          "title": "should have latency proportional to ring size",
          "duration": 0.7801499999986845,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Strategy Pattern Implementation",
            "Strategy Algorithms (Classical TDD)",
            "StarStrategy"
          ],
          "fullName": "Strategy Pattern Implementation Strategy Algorithms (Classical TDD) StarStrategy should select hub based on capabilities",
          "status": "passed",
          "title": "should select hub based on capabilities",
          "duration": 1.8839950000001409,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Strategy Pattern Implementation",
            "Strategy Algorithms (Classical TDD)",
            "StarStrategy"
          ],
          "fullName": "Strategy Pattern Implementation Strategy Algorithms (Classical TDD) StarStrategy should create star topology connections",
          "status": "passed",
          "title": "should create star topology connections",
          "duration": 1.8938600000001315,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Strategy Pattern Implementation",
            "Strategy Algorithms (Classical TDD)",
            "StarStrategy"
          ],
          "fullName": "Strategy Pattern Implementation Strategy Algorithms (Classical TDD) StarStrategy should have low latency due to centralized communication",
          "status": "passed",
          "title": "should have low latency due to centralized communication",
          "duration": 0.3746800000008079,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Strategy Pattern Implementation",
            "Strategy Coordination (London TDD)"
          ],
          "fullName": "Strategy Pattern Implementation Strategy Coordination (London TDD) should delegate coordination to the active strategy",
          "status": "failed",
          "title": "should delegate coordination to the active strategy",
          "duration": 3.053059999998368,
          "failureMessages": [
            "TypeError: Cannot read properties of undefined (reading 'reliability')\n    at SwarmCoordinator.executeCoordination (/home/mhugo/code/claude-code-zen/src/coordination/swarm/core/strategy.ts:557:47)\n    at /home/mhugo/code/claude-code-zen/src/__tests__/patterns/strategy-pattern.test.ts:252:22\n    at file:///home/mhugo/code/claude-code-zen/node_modules/@vitest/runner/dist/chunk-hooks.js:752:20"
          ],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Strategy Pattern Implementation",
            "Strategy Coordination (London TDD)"
          ],
          "fullName": "Strategy Pattern Implementation Strategy Coordination (London TDD) should switch strategies correctly",
          "status": "passed",
          "title": "should switch strategies correctly",
          "duration": 1.332922999998118,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Strategy Pattern Implementation",
            "Strategy Coordination (London TDD)"
          ],
          "fullName": "Strategy Pattern Implementation Strategy Coordination (London TDD) should record coordination history",
          "status": "failed",
          "title": "should record coordination history",
          "duration": 1.1642319999991741,
          "failureMessages": [
            "TypeError: Cannot read properties of undefined (reading 'reliability')\n    at SwarmCoordinator.executeCoordination (/home/mhugo/code/claude-code-zen/src/coordination/swarm/core/strategy.ts:557:47)\n    at /home/mhugo/code/claude-code-zen/src/__tests__/patterns/strategy-pattern.test.ts:295:7\n    at file:///home/mhugo/code/claude-code-zen/node_modules/@vitest/runner/dist/chunk-hooks.js:752:20"
          ],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Strategy Pattern Implementation",
            "Strategy Coordination (London TDD)"
          ],
          "fullName": "Strategy Pattern Implementation Strategy Coordination (London TDD) should handle coordination failures gracefully",
          "status": "passed",
          "title": "should handle coordination failures gracefully",
          "duration": 3.9611240000012913,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Strategy Pattern Implementation",
            "Strategy Coordination (London TDD)"
          ],
          "fullName": "Strategy Pattern Implementation Strategy Coordination (London TDD) should optimize strategy periodically",
          "status": "failed",
          "title": "should optimize strategy periodically",
          "duration": 1.3044540000009874,
          "failureMessages": [
            "TypeError: Cannot read properties of undefined (reading 'reliability')\n    at SwarmCoordinator.executeCoordination (/home/mhugo/code/claude-code-zen/src/coordination/swarm/core/strategy.ts:557:47)\n    at /home/mhugo/code/claude-code-zen/src/__tests__/patterns/strategy-pattern.test.ts:333:9\n    at file:///home/mhugo/code/claude-code-zen/node_modules/@vitest/runner/dist/chunk-hooks.js:752:20"
          ],
          "meta": {}
        },
        {
          "ancestorTitles": ["Strategy Pattern Implementation", "StrategyFactory (Classical TDD)"],
          "fullName": "Strategy Pattern Implementation StrategyFactory (Classical TDD) should create correct strategy instances",
          "status": "passed",
          "title": "should create correct strategy instances",
          "duration": 0.9793220000028668,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Strategy Pattern Implementation", "StrategyFactory (Classical TDD)"],
          "fullName": "Strategy Pattern Implementation StrategyFactory (Classical TDD) should throw error for unknown topology",
          "status": "passed",
          "title": "should throw error for unknown topology",
          "duration": 0.5352760000023409,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Strategy Pattern Implementation", "StrategyFactory (Classical TDD)"],
          "fullName": "Strategy Pattern Implementation StrategyFactory (Classical TDD) should return all available strategies",
          "status": "passed",
          "title": "should return all available strategies",
          "duration": 0.9744829999981448,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Strategy Pattern Implementation",
            "Auto-Strategy Selection (Hybrid TDD)"
          ],
          "fullName": "Strategy Pattern Implementation Auto-Strategy Selection (Hybrid TDD) should select optimal strategy based on agent count and context",
          "status": "failed",
          "title": "should select optimal strategy based on agent count and context",
          "duration": 7.4041189999989,
          "failureMessages": [
            "AssertionError: expected 'hierarchical' to be 'star' // Object.is equality\n    at /home/mhugo/code/claude-code-zen/src/__tests__/patterns/strategy-pattern.test.ts:425:52\n    at file:///home/mhugo/code/claude-code-zen/node_modules/@vitest/runner/dist/chunk-hooks.js:752:20"
          ],
          "meta": {}
        },
        {
          "ancestorTitles": ["Strategy Pattern Implementation", "Strategy Validation (London TDD)"],
          "fullName": "Strategy Pattern Implementation Strategy Validation (London TDD) should validate context before coordination",
          "status": "passed",
          "title": "should validate context before coordination",
          "duration": 0.8782150000006368,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Strategy Pattern Implementation",
            "Performance Benchmarks (Classical TDD)"
          ],
          "fullName": "Strategy Pattern Implementation Performance Benchmarks (Classical TDD) should meet performance requirements for different topologies",
          "status": "failed",
          "title": "should meet performance requirements for different topologies",
          "duration": 1.046863999999914,
          "failureMessages": [
            "TypeError: Cannot read properties of undefined (reading 'length')\n    at HierarchicalStrategy.validateContext (/home/mhugo/code/claude-code-zen/src/coordination/swarm/core/strategy.ts:243:22)\n    at HierarchicalStrategy.coordinate (/home/mhugo/code/claude-code-zen/src/coordination/swarm/core/strategy.ts:214:15)\n    at /home/mhugo/code/claude-code-zen/src/__tests__/patterns/strategy-pattern.test.ts:481:39\n    at file:///home/mhugo/code/claude-code-zen/node_modules/@vitest/runner/dist/chunk-hooks.js:752:20"
          ],
          "meta": {}
        }
      ],
      "startTime": 1754826988951,
      "endTime": 1754826989027.0469,
      "status": "failed",
      "message": "",
      "name": "/home/mhugo/code/claude-code-zen/src/__tests__/patterns/strategy-pattern.test.ts"
    },
    {
      "assertionResults": [],
      "startTime": 1754826973072,
      "endTime": 1754826973072,
      "status": "failed",
      "message": "Failed to resolve import \"../config/logging-config\" from \"src/coordination/strategies/ruv-swarm.strategy.ts\". Does the file exist?",
      "name": "/home/mhugo/code/claude-code-zen/src/__tests__/performance/swarm-coordination-benchmarks.test.ts"
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": ["SPARC Pseudocode Engine Integration Tests", "Algorithm Generation"],
          "fullName": "SPARC Pseudocode Engine Integration Tests Algorithm Generation should generate algorithms from specifications",
          "status": "passed",
          "title": "should generate algorithms from specifications",
          "duration": 3.955101999999897,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["SPARC Pseudocode Engine Integration Tests", "Algorithm Generation"],
          "fullName": "SPARC Pseudocode Engine Integration Tests Algorithm Generation should generate domain-specific algorithms for swarm coordination",
          "status": "failed",
          "title": "should generate domain-specific algorithms for swarm coordination",
          "duration": 12.365389999999024,
          "failureMessages": [
            "AssertionError: expected [ 'Task Distribution' ] to include 'AgentRegistrationAlgorithm'\n    at Proxy.<anonymous> (file:///home/mhugo/code/claude-code-zen/node_modules/@vitest/expect/dist/index.js:1191:15)\n    at Proxy.<anonymous> (file:///home/mhugo/code/claude-code-zen/node_modules/@vitest/expect/dist/index.js:1029:14)\n    at Proxy.methodWrapper (file:///home/mhugo/code/claude-code-zen/node_modules/chai/chai.js:1706:25)\n    at /home/mhugo/code/claude-code-zen/src/__tests__/sparc/pseudocode-engine.test.ts:89:30\n    at file:///home/mhugo/code/claude-code-zen/node_modules/@vitest/runner/dist/chunk-hooks.js:752:20"
          ],
          "meta": {}
        },
        {
          "ancestorTitles": ["SPARC Pseudocode Engine Integration Tests", "Algorithm Generation"],
          "fullName": "SPARC Pseudocode Engine Integration Tests Algorithm Generation should generate domain-specific algorithms for neural networks",
          "status": "failed",
          "title": "should generate domain-specific algorithms for neural networks",
          "duration": 1.8077109999976528,
          "failureMessages": [
            "AssertionError: expected [ 'Neural Training' ] to include 'ForwardPropagationAlgorithm'\n    at Proxy.<anonymous> (file:///home/mhugo/code/claude-code-zen/node_modules/@vitest/expect/dist/index.js:1191:15)\n    at Proxy.<anonymous> (file:///home/mhugo/code/claude-code-zen/node_modules/@vitest/expect/dist/index.js:1029:14)\n    at Proxy.methodWrapper (file:///home/mhugo/code/claude-code-zen/node_modules/chai/chai.js:1706:25)\n    at /home/mhugo/code/claude-code-zen/src/__tests__/sparc/pseudocode-engine.test.ts:124:30\n    at file:///home/mhugo/code/claude-code-zen/node_modules/@vitest/runner/dist/chunk-hooks.js:752:20"
          ],
          "meta": {}
        },
        {
          "ancestorTitles": ["SPARC Pseudocode Engine Integration Tests", "Data Structure Design"],
          "fullName": "SPARC Pseudocode Engine Integration Tests Data Structure Design should design data structures from requirements",
          "status": "passed",
          "title": "should design data structures from requirements",
          "duration": 0.9899980000009236,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["SPARC Pseudocode Engine Integration Tests", "Control Flow Mapping"],
          "fullName": "SPARC Pseudocode Engine Integration Tests Control Flow Mapping should map control flows from algorithms",
          "status": "passed",
          "title": "should map control flows from algorithms",
          "duration": 1.2193480000023555,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["SPARC Pseudocode Engine Integration Tests", "Algorithm Validation"],
          "fullName": "SPARC Pseudocode Engine Integration Tests Algorithm Validation should validate pseudocode logic",
          "status": "passed",
          "title": "should validate pseudocode logic",
          "duration": 0.5304369999976188,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "SPARC Pseudocode Engine Integration Tests",
            "Complete Pseudocode Generation"
          ],
          "fullName": "SPARC Pseudocode Engine Integration Tests Complete Pseudocode Generation should generate complete pseudocode structure from specification",
          "status": "passed",
          "title": "should generate complete pseudocode structure from specification",
          "duration": 3.021897999999055,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "SPARC Pseudocode Engine Integration Tests",
            "Integration with SPARC Phases"
          ],
          "fullName": "SPARC Pseudocode Engine Integration Tests Integration with SPARC Phases should integrate properly with Phase 1 specifications",
          "status": "passed",
          "title": "should integrate properly with Phase 1 specifications",
          "duration": 0.6666760000007343,
          "failureMessages": [],
          "meta": {}
        }
      ],
      "startTime": 1754826996525,
      "endTime": 1754826996551.6667,
      "status": "failed",
      "message": "",
      "name": "/home/mhugo/code/claude-code-zen/src/__tests__/sparc/pseudocode-engine.test.ts"
    },
    {
      "assertionResults": [],
      "startTime": 1754826973072,
      "endTime": 1754826973072,
      "status": "failed",
      "message": "Failed to resolve import \"../config/logging-config\" from \"src/coordination/swarm/sparc/core/sparc-engine.ts\". Does the file exist?",
      "name": "/home/mhugo/code/claude-code-zen/src/__tests__/sparc/sparc-integration.test.ts"
    },
    {
      "assertionResults": [],
      "startTime": 1754826973072,
      "endTime": 1754826973072,
      "status": "failed",
      "message": "Do not import `@jest/globals` outside of the Jest test environment",
      "name": "/home/mhugo/code/claude-code-zen/src/__tests__/unit/basic-functionality.test.ts"
    },
    {
      "assertionResults": [],
      "startTime": 1754826973072,
      "endTime": 1754826973072,
      "status": "failed",
      "message": "Do not import `@jest/globals` outside of the Jest test environment",
      "name": "/home/mhugo/code/claude-code-zen/src/__tests__/unit/product-flow-sparc-unit.test.ts"
    },
    {
      "assertionResults": [],
      "startTime": 1754826973072,
      "endTime": 1754826973072,
      "status": "failed",
      "message": "Do not import `@jest/globals` outside of the Jest test environment",
      "name": "/home/mhugo/code/claude-code-zen/tests/intelligence/conversation-framework/memory.test.ts"
    },
    {
      "assertionResults": [],
      "startTime": 1754826973072,
      "endTime": 1754826973072,
      "status": "failed",
      "message": "Do not import `@jest/globals` outside of the Jest test environment",
      "name": "/home/mhugo/code/claude-code-zen/tests/intelligence/conversation-framework/orchestrator.test.ts"
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": ["Agent System Gap Analysis", "New Agent Types"],
          "fullName": "Agent System Gap Analysis New Agent Types should include new performance optimization agents",
          "status": "passed",
          "title": "should include new performance optimization agents",
          "duration": 3.4573440000021947,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Agent System Gap Analysis", "New Agent Types"],
          "fullName": "Agent System Gap Analysis New Agent Types should include new migration planning agents",
          "status": "passed",
          "title": "should include new migration planning agents",
          "duration": 0.6570600000013656,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Agent System Gap Analysis", "New Agent Types"],
          "fullName": "Agent System Gap Analysis New Agent Types should include enhanced SPARC quality agents",
          "status": "passed",
          "title": "should include enhanced SPARC quality agents",
          "duration": 0.6612229999991541,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Agent System Gap Analysis", "New Agent Types"],
          "fullName": "Agent System Gap Analysis New Agent Types should include UI/UX enhancement agents",
          "status": "passed",
          "title": "should include UI/UX enhancement agents",
          "duration": 0.5730189999994764,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Agent System Gap Analysis", "New Agent Types"],
          "fullName": "Agent System Gap Analysis New Agent Types should have valid agent type definitions",
          "status": "passed",
          "title": "should have valid agent type definitions",
          "duration": 1.8813149999987218,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Agent System Gap Analysis", "Gap Analysis Functionality"],
          "fullName": "Agent System Gap Analysis Gap Analysis Functionality should perform comprehensive gap analysis",
          "status": "passed",
          "title": "should perform comprehensive gap analysis",
          "duration": 1.1937530000031984,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Agent System Gap Analysis", "Gap Analysis Functionality"],
          "fullName": "Agent System Gap Analysis Gap Analysis Functionality should show our advantages in key categories",
          "status": "passed",
          "title": "should show our advantages in key categories",
          "duration": 0.44274399999994785,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Agent System Gap Analysis", "Gap Analysis Functionality"],
          "fullName": "Agent System Gap Analysis Gap Analysis Functionality should identify strategic missing capabilities",
          "status": "passed",
          "title": "should identify strategic missing capabilities",
          "duration": 0.4649170000011509,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Agent System Gap Analysis", "Gap Analysis Functionality"],
          "fullName": "Agent System Gap Analysis Gap Analysis Functionality should generate comprehensive comparison report",
          "status": "passed",
          "title": "should generate comprehensive comparison report",
          "duration": 1.0075790000009874,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Agent System Gap Analysis", "Auto-Assignment Capabilities Audit"],
          "fullName": "Agent System Gap Analysis Auto-Assignment Capabilities Audit should audit current auto-assignment features",
          "status": "passed",
          "title": "should audit current auto-assignment features",
          "duration": 0.6476180000026943,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Agent System Gap Analysis", "Auto-Assignment Capabilities Audit"],
          "fullName": "Agent System Gap Analysis Auto-Assignment Capabilities Audit should identify intelligent selection capabilities",
          "status": "passed",
          "title": "should identify intelligent selection capabilities",
          "duration": 0.21738399999958347,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Agent System Gap Analysis", "Agent Category Structure"],
          "fullName": "Agent System Gap Analysis Agent Category Structure should have well-organized agent categories",
          "status": "passed",
          "title": "should have well-organized agent categories",
          "duration": 1.2532430000028398,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Agent System Gap Analysis", "Agent Category Structure"],
          "fullName": "Agent System Gap Analysis Agent Category Structure should have no duplicate agents across categories",
          "status": "passed",
          "title": "should have no duplicate agents across categories",
          "duration": 0.19104599999991478,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Agent System Gap Analysis", "Agent Category Structure"],
          "fullName": "Agent System Gap Analysis Agent Category Structure should have reasonable agent distribution",
          "status": "passed",
          "title": "should have reasonable agent distribution",
          "duration": 1.4657359999982873,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Agent System Gap Analysis", "Performance Benchmarks"],
          "fullName": "Agent System Gap Analysis Performance Benchmarks should track agent count growth",
          "status": "passed",
          "title": "should track agent count growth",
          "duration": 0.31142499999987194,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Agent System Gap Analysis", "Performance Benchmarks"],
          "fullName": "Agent System Gap Analysis Performance Benchmarks should measure category coverage",
          "status": "passed",
          "title": "should measure category coverage",
          "duration": 0.40053400000033434,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Integration with Agent Registry"],
          "fullName": "Integration with Agent Registry should handle new agent types in selection criteria",
          "status": "passed",
          "title": "should handle new agent types in selection criteria",
          "duration": 0.43217100000038045,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Integration with Agent Registry"],
          "fullName": "Integration with Agent Registry should support intelligent agent matching",
          "status": "passed",
          "title": "should support intelligent agent matching",
          "duration": 0.6397169999981998,
          "failureMessages": [],
          "meta": {}
        }
      ],
      "startTime": 1754826999864,
      "endTime": 1754826999881.6396,
      "status": "passed",
      "message": "",
      "name": "/home/mhugo/code/claude-code-zen/src/__tests__/coordination/agents/gap-analysis.test.ts"
    },
    {
      "assertionResults": [],
      "startTime": 1754826973072,
      "endTime": 1754826973072,
      "status": "failed",
      "message": "Logger is not a constructor",
      "name": "/home/mhugo/code/claude-code-zen/src/__tests__/coordination/discovery/auto-swarm-factory.test.ts"
    },
    {
      "assertionResults": [],
      "startTime": 1754826973072,
      "endTime": 1754826973072,
      "status": "failed",
      "message": "Logger is not a constructor",
      "name": "/home/mhugo/code/claude-code-zen/src/__tests__/coordination/discovery/progressive-confidence-builder.test.ts"
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": ["Maestro Steering CLI End-to-End", "maestro init-steering command"],
          "fullName": "Maestro Steering CLI End-to-End maestro init-steering command should create steering document with default content",
          "status": "skipped",
          "title": "should create steering document with default content",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Maestro Steering CLI End-to-End", "maestro init-steering command"],
          "fullName": "Maestro Steering CLI End-to-End maestro init-steering command should create steering document with custom content",
          "status": "skipped",
          "title": "should create steering document with custom content",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Maestro Steering CLI End-to-End", "maestro init-steering command"],
          "fullName": "Maestro Steering CLI End-to-End maestro init-steering command should handle multiple steering document creation",
          "status": "skipped",
          "title": "should handle multiple steering document creation",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Maestro Steering CLI End-to-End",
            "maestro create-spec with steering integration"
          ],
          "fullName": "Maestro Steering CLI End-to-End maestro create-spec with steering integration should create spec with steering context integration",
          "status": "skipped",
          "title": "should create spec with steering context integration",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Maestro Steering CLI End-to-End",
            "maestro create-spec with steering integration"
          ],
          "fullName": "Maestro Steering CLI End-to-End maestro create-spec with steering integration should complete full workflow from steering to implementation",
          "status": "skipped",
          "title": "should complete full workflow from steering to implementation",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Maestro Steering CLI End-to-End",
            "CLI error handling and validation"
          ],
          "fullName": "Maestro Steering CLI End-to-End CLI error handling and validation should handle invalid domain names in steering creation",
          "status": "skipped",
          "title": "should handle invalid domain names in steering creation",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Maestro Steering CLI End-to-End",
            "CLI error handling and validation"
          ],
          "fullName": "Maestro Steering CLI End-to-End CLI error handling and validation should provide helpful error messages for missing dependencies",
          "status": "skipped",
          "title": "should provide helpful error messages for missing dependencies",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Maestro Steering CLI End-to-End",
            "CLI error handling and validation"
          ],
          "fullName": "Maestro Steering CLI End-to-End CLI error handling and validation should validate steering document content and structure",
          "status": "skipped",
          "title": "should validate steering document content and structure",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Maestro Steering CLI End-to-End", "CLI performance and usability"],
          "fullName": "Maestro Steering CLI End-to-End CLI performance and usability should complete steering operations within acceptable time",
          "status": "skipped",
          "title": "should complete steering operations within acceptable time",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Maestro Steering CLI End-to-End", "CLI performance and usability"],
          "fullName": "Maestro Steering CLI End-to-End CLI performance and usability should provide clear progress feedback during operations",
          "status": "skipped",
          "title": "should provide clear progress feedback during operations",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Maestro Steering CLI End-to-End", "CLI performance and usability"],
          "fullName": "Maestro Steering CLI End-to-End CLI performance and usability should handle concurrent CLI operations gracefully",
          "status": "skipped",
          "title": "should handle concurrent CLI operations gracefully",
          "failureMessages": [],
          "meta": {}
        }
      ],
      "startTime": 1754826973072,
      "endTime": 1754826973072,
      "status": "failed",
      "message": "",
      "name": "/home/mhugo/code/claude-code-zen/src/__tests__/e2e/maestro/steering-cli.test.ts"
    },
    {
      "assertionResults": [],
      "startTime": 1754826973072,
      "endTime": 1754826973072,
      "status": "failed",
      "message": "Failed to resolve import \"../di/decorators/injectable\" from \"src/database/providers/database-providers.ts\". Does the file exist?",
      "name": "/home/mhugo/code/claude-code-zen/src/__tests__/integration/database/kuzu-graph-integration.test.ts"
    },
    {
      "assertionResults": [],
      "startTime": 1754826973072,
      "endTime": 1754826973072,
      "status": "failed",
      "message": "Do not import `@jest/globals` outside of the Jest test environment",
      "name": "/home/mhugo/code/claude-code-zen/src/__tests__/integration/database/lancedb-adapter.test.ts"
    },
    {
      "assertionResults": [],
      "startTime": 1754826973072,
      "endTime": 1754826973072,
      "status": "failed",
      "message": "Failed to resolve import \"../../../database/lancedb-interface\" from \"src/__tests__/integration/database/lancedb-integration-validation.test.ts\". Does the file exist?",
      "name": "/home/mhugo/code/claude-code-zen/src/__tests__/integration/database/lancedb-integration-validation.test.ts"
    },
    {
      "assertionResults": [],
      "startTime": 1754826973072,
      "endTime": 1754826973072,
      "status": "failed",
      "message": "Failed to resolve import \"../../../maestro/maestro-orchestrator\" from \"src/__tests__/integration/maestro/steering-workflow.test.ts\". Does the file exist?",
      "name": "/home/mhugo/code/claude-code-zen/src/__tests__/integration/maestro/steering-workflow.test.ts"
    },
    {
      "assertionResults": [],
      "startTime": 1754826973072,
      "endTime": 1754826973072,
      "status": "failed",
      "message": "Do not import `@jest/globals` outside of the Jest test environment",
      "name": "/home/mhugo/code/claude-code-zen/src/__tests__/integration/memory-stores/cache-performance.test.ts"
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": [
            "Data Integrity Integration Tests",
            "Data Integrity Utils (Classical School)"
          ],
          "fullName": "Data Integrity Integration Tests Data Integrity Utils (Classical School) should calculate checksums correctly",
          "status": "passed",
          "title": "should calculate checksums correctly",
          "duration": 6.460368999999446,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Data Integrity Integration Tests",
            "Data Integrity Utils (Classical School)"
          ],
          "fullName": "Data Integrity Integration Tests Data Integrity Utils (Classical School) should validate checksums correctly",
          "status": "passed",
          "title": "should validate checksums correctly",
          "duration": 0.4920460000003004,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Data Integrity Integration Tests",
            "Data Integrity Utils (Classical School)"
          ],
          "fullName": "Data Integrity Integration Tests Data Integrity Utils (Classical School) should detect data corruption accurately",
          "status": "passed",
          "title": "should detect data corruption accurately",
          "duration": 1.6121549999998024,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Data Integrity Integration Tests",
            "Data Integrity Utils (Classical School)"
          ],
          "fullName": "Data Integrity Integration Tests Data Integrity Utils (Classical School) should attempt data repair using different strategies",
          "status": "passed",
          "title": "should attempt data repair using different strategies",
          "duration": 1.150100000000748,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Data Integrity Integration Tests",
            "Integrity Storage (Classical School)"
          ],
          "fullName": "Data Integrity Integration Tests Integrity Storage (Classical School) should store data with integrity metadata",
          "status": "passed",
          "title": "should store data with integrity metadata",
          "duration": 2.1290509999998903,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Data Integrity Integration Tests",
            "Integrity Storage (Classical School)"
          ],
          "fullName": "Data Integrity Integration Tests Integrity Storage (Classical School) should validate data integrity on retrieval",
          "status": "passed",
          "title": "should validate data integrity on retrieval",
          "duration": 1.4024100000006001,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Data Integrity Integration Tests",
            "Integrity Storage (Classical School)"
          ],
          "fullName": "Data Integrity Integration Tests Integrity Storage (Classical School) should detect and handle corruption",
          "status": "passed",
          "title": "should detect and handle corruption",
          "duration": 3.7602649999998903,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Data Integrity Integration Tests",
            "Integrity Storage (Classical School)"
          ],
          "fullName": "Data Integrity Integration Tests Integrity Storage (Classical School) should attempt automatic repair when enabled",
          "status": "passed",
          "title": "should attempt automatic repair when enabled",
          "duration": 1.0904959999998027,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Data Integrity Integration Tests",
            "Integrity Storage (Classical School)"
          ],
          "fullName": "Data Integrity Integration Tests Integrity Storage (Classical School) should handle version tracking",
          "status": "passed",
          "title": "should handle version tracking",
          "duration": 2.229548999999679,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Data Integrity Integration Tests",
            "Integrity Storage (Classical School)"
          ],
          "fullName": "Data Integrity Integration Tests Integrity Storage (Classical School) should validate all records in bulk",
          "status": "passed",
          "title": "should validate all records in bulk",
          "duration": 1.0831490000000485,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Data Integrity Integration Tests",
            "Integrity Storage (Classical School)"
          ],
          "fullName": "Data Integrity Integration Tests Integrity Storage (Classical School) should maintain backup copies for redundancy",
          "status": "passed",
          "title": "should maintain backup copies for redundancy",
          "duration": 1.3143759999993563,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Data Integrity Integration Tests",
            "Mock Corruption Scenarios (London School)"
          ],
          "fullName": "Data Integrity Integration Tests Mock Corruption Scenarios (London School) should simulate storage corruption",
          "status": "passed",
          "title": "should simulate storage corruption",
          "duration": 0.7713729999995849,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Data Integrity Integration Tests",
            "Mock Corruption Scenarios (London School)"
          ],
          "fullName": "Data Integrity Integration Tests Mock Corruption Scenarios (London School) should simulate retrieval corruption",
          "status": "passed",
          "title": "should simulate retrieval corruption",
          "duration": 0.6166979999998148,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Data Integrity Integration Tests",
            "Mock Corruption Scenarios (London School)"
          ],
          "fullName": "Data Integrity Integration Tests Mock Corruption Scenarios (London School) should handle normal operations when corruption is disabled",
          "status": "passed",
          "title": "should handle normal operations when corruption is disabled",
          "duration": 0.39191500000015367,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Data Integrity Integration Tests",
            "Mock Corruption Scenarios (London School)"
          ],
          "fullName": "Data Integrity Integration Tests Mock Corruption Scenarios (London School) should track operations for verification",
          "status": "passed",
          "title": "should track operations for verification",
          "duration": 1.297671000000264,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Data Integrity Integration Tests", "Event Handling and Monitoring"],
          "fullName": "Data Integrity Integration Tests Event Handling and Monitoring should emit events for normal operations",
          "status": "passed",
          "title": "should emit events for normal operations",
          "duration": 1.698338000000149,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Data Integrity Integration Tests", "Event Handling and Monitoring"],
          "fullName": "Data Integrity Integration Tests Event Handling and Monitoring should emit corruption detection events",
          "status": "passed",
          "title": "should emit corruption detection events",
          "duration": 0.44604100000015023,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Data Integrity Integration Tests", "Performance Under Corruption"],
          "fullName": "Data Integrity Integration Tests Performance Under Corruption should benchmark validation performance",
          "status": "passed",
          "title": "should benchmark validation performance",
          "duration": 24.25087799999983,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Data Integrity Integration Tests", "Performance Under Corruption"],
          "fullName": "Data Integrity Integration Tests Performance Under Corruption should handle mixed corruption scenarios",
          "status": "passed",
          "title": "should handle mixed corruption scenarios",
          "duration": 3.63717700000052,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Data Integrity Integration Tests", "Complex Data Structures"],
          "fullName": "Data Integrity Integration Tests Complex Data Structures should handle nested object integrity",
          "status": "passed",
          "title": "should handle nested object integrity",
          "duration": 1.1593730000004143,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Data Integrity Integration Tests", "Complex Data Structures"],
          "fullName": "Data Integrity Integration Tests Complex Data Structures should detect subtle nested corruption",
          "status": "passed",
          "title": "should detect subtle nested corruption",
          "duration": 0.3556459999999788,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Data Integrity Integration Tests", "Complex Data Structures"],
          "fullName": "Data Integrity Integration Tests Complex Data Structures should maintain integrity with large datasets",
          "status": "passed",
          "title": "should maintain integrity with large datasets",
          "duration": 13.413236999999754,
          "failureMessages": [],
          "meta": {}
        }
      ],
      "startTime": 1754826978690,
      "endTime": 1754826978766.4133,
      "status": "passed",
      "message": "",
      "name": "/home/mhugo/code/claude-code-zen/src/__tests__/integration/memory-stores/data-integrity.test.ts"
    },
    {
      "assertionResults": [],
      "startTime": 1754826973072,
      "endTime": 1754826973072,
      "status": "failed",
      "message": "Do not import `@jest/globals` outside of the Jest test environment",
      "name": "/home/mhugo/code/claude-code-zen/src/__tests__/integration/memory-stores/index.test.ts"
    },
    {
      "assertionResults": [],
      "startTime": 1754826973072,
      "endTime": 1754826973072,
      "status": "failed",
      "message": "Failed to resolve import \"../../../database/lancedb-interface\" from \"src/__tests__/integration/memory-stores/lancedb-vector-operations.test.ts\". Does the file exist?",
      "name": "/home/mhugo/code/claude-code-zen/src/__tests__/integration/memory-stores/lancedb-vector-operations.test.ts"
    },
    {
      "assertionResults": [],
      "startTime": 1754826973072,
      "endTime": 1754826973072,
      "status": "failed",
      "message": "Do not import `@jest/globals` outside of the Jest test environment",
      "name": "/home/mhugo/code/claude-code-zen/src/__tests__/integration/memory-stores/session-management.test.ts"
    },
    {
      "assertionResults": [],
      "startTime": 1754826973072,
      "endTime": 1754826973072,
      "status": "failed",
      "message": "Failed to resolve import \"sqlite3\" from \"src/__tests__/integration/memory-stores/sqlite-persistence.test.ts\". Does the file exist?",
      "name": "/home/mhugo/code/claude-code-zen/src/__tests__/integration/memory-stores/sqlite-persistence.test.ts"
    },
    {
      "assertionResults": [],
      "startTime": 1754826973072,
      "endTime": 1754826973072,
      "status": "failed",
      "message": "Failed to resolve import \"../../../maestro/maestro-orchestrator\" from \"src/__tests__/performance/maestro/steering-performance.test.ts\". Does the file exist?",
      "name": "/home/mhugo/code/claude-code-zen/src/__tests__/performance/maestro/steering-performance.test.ts"
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": ["DI System Basic Test"],
          "fullName": "DI System Basic Test should pass basic test",
          "status": "passed",
          "title": "should pass basic test",
          "duration": 1.8798940000015136,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["DI System Basic Test"],
          "fullName": "DI System Basic Test should be able to import reflect-metadata",
          "status": "passed",
          "title": "should be able to import reflect-metadata",
          "duration": 3.873991999997088,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["DI System Basic Test"],
          "fullName": "DI System Basic Test should be able to create symbols",
          "status": "passed",
          "title": "should be able to create symbols",
          "duration": 0.5041390000005777,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["DI System Basic Test"],
          "fullName": "DI System Basic Test should support decorators configuration",
          "status": "passed",
          "title": "should support decorators configuration",
          "duration": 0.4403579999998328,
          "failureMessages": [],
          "meta": {}
        }
      ],
      "startTime": 1754827003672,
      "endTime": 1754827003678.4404,
      "status": "passed",
      "message": "",
      "name": "/home/mhugo/code/claude-code-zen/src/__tests__/unit/di/basic.test.ts"
    },
    {
      "assertionResults": [],
      "startTime": 1754826973072,
      "endTime": 1754826973072,
      "status": "failed",
      "message": "Failed to resolve import \"../config/logging-config\" from \"src/di/container/di-container.ts\". Does the file exist?",
      "name": "/home/mhugo/code/claude-code-zen/src/__tests__/unit/di/decorators.test.ts"
    },
    {
      "assertionResults": [],
      "startTime": 1754826973072,
      "endTime": 1754826973072,
      "status": "failed",
      "message": "Failed to resolve import \"../config/logging-config\" from \"src/di/container/di-container.ts\". Does the file exist?",
      "name": "/home/mhugo/code/claude-code-zen/src/__tests__/unit/di/di-container.test.ts"
    },
    {
      "assertionResults": [],
      "startTime": 1754826973072,
      "endTime": 1754826973072,
      "status": "failed",
      "message": "Failed to resolve import \"../config/logging-config\" from \"src/di/container/di-container.ts\". Does the file exist?",
      "name": "/home/mhugo/code/claude-code-zen/src/__tests__/unit/di/integration.test.ts"
    },
    {
      "assertionResults": [],
      "startTime": 1754826973072,
      "endTime": 1754826973072,
      "status": "failed",
      "message": "(0 , createLogger) is not a function",
      "name": "/home/mhugo/code/claude-code-zen/src/__tests__/unit/events/communication-event-adapter.test.ts"
    },
    {
      "assertionResults": [],
      "startTime": 1754826973072,
      "endTime": 1754826973072,
      "status": "failed",
      "message": "Failed to resolve import \"../../../maestro/maestro-orchestrator\" from \"src/__tests__/unit/maestro/steering-documents.test.ts\". Does the file exist?",
      "name": "/home/mhugo/code/claude-code-zen/src/__tests__/unit/maestro/steering-documents.test.ts"
    },
    {
      "assertionResults": [],
      "startTime": 1754826973072,
      "endTime": 1754826973072,
      "status": "failed",
      "message": "Do not import `@jest/globals` outside of the Jest test environment",
      "name": "/home/mhugo/code/claude-code-zen/src/__tests__/unit/neural/property-based-tests.test.ts"
    },
    {
      "assertionResults": [],
      "startTime": 1754826973072,
      "endTime": 1754826973072,
      "status": "failed",
      "message": "WasmMemoryOptimizer is not a constructor",
      "name": "/home/mhugo/code/claude-code-zen/src/__tests__/unit/neural/wasm-gateway.test.ts"
    },
    {
      "assertionResults": [],
      "startTime": 1754826973072,
      "endTime": 1754826973072,
      "status": "failed",
      "message": "Logger is not a constructor",
      "name": "/home/mhugo/code/claude-code-zen/src/__tests__/unit/optimization/performance-optimizer.test.ts"
    },
    {
      "assertionResults": [],
      "startTime": 1754826973072,
      "endTime": 1754826973072,
      "status": "failed",
      "message": "Failed to resolve import \"../src/utils\" from \"src/__tests__/swarm-zen/unit/utils.test.ts\". Does the file exist?",
      "name": "/home/mhugo/code/claude-code-zen/src/__tests__/swarm-zen/unit/utils.test.ts"
    },
    {
      "assertionResults": [],
      "startTime": 1754826973072,
      "endTime": 1754826973072,
      "status": "failed",
      "message": "Failed to resolve import \"../../core/interfaces\" from \"src/__tests__/interfaces/events/adapters/monitoring-event-adapter.test.ts\". Does the file exist?",
      "name": "/home/mhugo/code/claude-code-zen/src/__tests__/interfaces/events/adapters/monitoring-event-adapter.test.ts"
    },
    {
      "assertionResults": [],
      "startTime": 1754826973072,
      "endTime": 1754826973072,
      "status": "failed",
      "message": "Failed to resolve import \"../../core/event-bus\" from \"src/__tests__/unit/coordination/maestro/native-hive-mind-integration.test.ts\". Does the file exist?",
      "name": "/home/mhugo/code/claude-code-zen/src/__tests__/unit/coordination/maestro/native-hive-mind-integration.test.ts"
    },
    {
      "assertionResults": [],
      "startTime": 1754826973072,
      "endTime": 1754826973072,
      "status": "failed",
      "message": "Transform failed with 1 error:\n/home/mhugo/code/claude-code-zen/src/coordination/batch/batch-engine.ts:479:6: ERROR: Invalid assignment target",
      "name": "/home/mhugo/code/claude-code-zen/src/__tests__/unit/coordination/batch/batch-engine.test.ts"
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": [
            "Batch MCP Tools Integration - Claude-zen End-to-End",
            "🚀 Batch Execute Tool - Core Claude-zen Pattern"
          ],
          "fullName": "Batch MCP Tools Integration - Claude-zen End-to-End 🚀 Batch Execute Tool - Core Claude-zen Pattern should execute the classic claude-zen pattern via MCP",
          "status": "failed",
          "title": "should execute the classic claude-zen pattern via MCP",
          "duration": 678.8264369999997,
          "failureMessages": [
            "AssertionError: expected '# 🚀 Batch Execution Complete\\n\\n**Op…' to contain 'Operations: 7'\n    at /home/mhugo/code/claude-code-zen/src/__tests__/unit/coordination/batch/batch-mcp-integration.test.ts:78:28\n    at file:///home/mhugo/code/claude-code-zen/node_modules/@vitest/runner/dist/chunk-hooks.js:752:20"
          ],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Batch MCP Tools Integration - Claude-zen End-to-End",
            "🚀 Batch Execute Tool - Core Claude-zen Pattern"
          ],
          "fullName": "Batch MCP Tools Integration - Claude-zen End-to-End 🚀 Batch Execute Tool - Core Claude-zen Pattern should handle dependencies correctly in batch execution",
          "status": "passed",
          "title": "should handle dependencies correctly in batch execution",
          "duration": 305.22232599999916,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Batch MCP Tools Integration - Claude-zen End-to-End",
            "🚀 Batch Execute Tool - Core Claude-zen Pattern"
          ],
          "fullName": "Batch MCP Tools Integration - Claude-zen End-to-End 🚀 Batch Execute Tool - Core Claude-zen Pattern should provide proper error handling for failed operations",
          "status": "passed",
          "title": "should provide proper error handling for failed operations",
          "duration": 101.32758699999977,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Batch MCP Tools Integration - Claude-zen End-to-End",
            "🎯 Project Init Batch Tool - Full Project Setup"
          ],
          "fullName": "Batch MCP Tools Integration - Claude-zen End-to-End 🎯 Project Init Batch Tool - Full Project Setup should initialize a complete project with claude-zen optimization",
          "status": "failed",
          "title": "should initialize a complete project with claude-zen optimization",
          "duration": 15.144842000001518,
          "failureMessages": [
            "AssertionError: expected '# 🎉 Project \"claude-zen-test\" Initia…' to contain 'Agents spawned: researcher, coder, an…'\n    at /home/mhugo/code/claude-code-zen/src/__tests__/unit/coordination/batch/batch-mcp-integration.test.ts:177:28\n    at file:///home/mhugo/code/claude-code-zen/node_modules/@vitest/runner/dist/chunk-hooks.js:752:20"
          ],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Batch MCP Tools Integration - Claude-zen End-to-End",
            "🎯 Project Init Batch Tool - Full Project Setup"
          ],
          "fullName": "Batch MCP Tools Integration - Claude-zen End-to-End 🎯 Project Init Batch Tool - Full Project Setup should use sensible defaults when minimal config provided",
          "status": "failed",
          "title": "should use sensible defaults when minimal config provided",
          "duration": 4.732007000002341,
          "failureMessages": [
            "AssertionError: expected '# 🎉 Project \"minimal-test\" Initializ…' to contain 'Agents spawned: researcher, coder, an…'\n    at /home/mhugo/code/claude-code-zen/src/__tests__/unit/coordination/batch/batch-mcp-integration.test.ts:196:28\n    at file:///home/mhugo/code/claude-code-zen/node_modules/@vitest/runner/dist/chunk-hooks.js:752:20"
          ],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Batch MCP Tools Integration - Claude-zen End-to-End",
            "📊 Batch Performance Tool - Monitoring and Analytics"
          ],
          "fullName": "Batch MCP Tools Integration - Claude-zen End-to-End 📊 Batch Performance Tool - Monitoring and Analytics should provide performance summary",
          "status": "failed",
          "title": "should provide performance summary",
          "duration": 267.7426090000008,
          "failureMessages": [
            "AssertionError: expected '# 📊 Batch Performance Summary (Last …' to contain 'Claude-zen Target Assessment:'\n    at /home/mhugo/code/claude-code-zen/src/__tests__/unit/coordination/batch/batch-mcp-integration.test.ts:232:28\n    at file:///home/mhugo/code/claude-code-zen/node_modules/@vitest/runner/dist/chunk-hooks.js:752:20"
          ],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Batch MCP Tools Integration - Claude-zen End-to-End",
            "📊 Batch Performance Tool - Monitoring and Analytics"
          ],
          "fullName": "Batch MCP Tools Integration - Claude-zen End-to-End 📊 Batch Performance Tool - Monitoring and Analytics should provide performance trends analysis",
          "status": "passed",
          "title": "should provide performance trends analysis",
          "duration": 0.4012909999983094,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Batch MCP Tools Integration - Claude-zen End-to-End",
            "📊 Batch Performance Tool - Monitoring and Analytics"
          ],
          "fullName": "Batch MCP Tools Integration - Claude-zen End-to-End 📊 Batch Performance Tool - Monitoring and Analytics should clear performance history",
          "status": "passed",
          "title": "should clear performance history",
          "duration": 0.34472699999969336,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Batch MCP Tools Integration - Claude-zen End-to-End",
            "📊 Batch Performance Tool - Monitoring and Analytics"
          ],
          "fullName": "Batch MCP Tools Integration - Claude-zen End-to-End 📊 Batch Performance Tool - Monitoring and Analytics should handle unknown actions gracefully",
          "status": "passed",
          "title": "should handle unknown actions gracefully",
          "duration": 0.5583279999991646,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Batch MCP Tools Integration - Claude-zen End-to-End",
            "🎯 Claude-zen Compliance Validation"
          ],
          "fullName": "Batch MCP Tools Integration - Claude-zen End-to-End 🎯 Claude-zen Compliance Validation should demonstrate superiority over sequential operations",
          "status": "failed",
          "title": "should demonstrate superiority over sequential operations",
          "duration": 975.1921980000006,
          "failureMessages": [
            "AssertionError: expected null to be truthy\n    at /home/mhugo/code/claude-code-zen/src/__tests__/unit/coordination/batch/batch-mcp-integration.test.ts:299:26\n    at file:///home/mhugo/code/claude-code-zen/node_modules/@vitest/runner/dist/chunk-hooks.js:752:20"
          ],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Batch MCP Tools Integration - Claude-zen End-to-End",
            "🎯 Claude-zen Compliance Validation"
          ],
          "fullName": "Batch MCP Tools Integration - Claude-zen End-to-End 🎯 Claude-zen Compliance Validation should report token reduction benefits",
          "status": "failed",
          "title": "should report token reduction benefits",
          "duration": 436.3215339999988,
          "failureMessages": [
            "AssertionError: expected '# 🚀 Batch Execution Complete\\n\\n**Op…' to match /Token Reduction:\\s*\\*\\*[\\d.]+%\\*\\*/\n    at /home/mhugo/code/claude-code-zen/src/__tests__/unit/coordination/batch/batch-mcp-integration.test.ts:356:28\n    at file:///home/mhugo/code/claude-code-zen/node_modules/@vitest/runner/dist/chunk-hooks.js:752:20"
          ],
          "meta": {}
        }
      ],
      "startTime": 1754826995896,
      "endTime": 1754826998684.3215,
      "status": "failed",
      "message": "",
      "name": "/home/mhugo/code/claude-code-zen/src/__tests__/unit/coordination/batch/batch-mcp-integration.test.ts"
    },
    {
      "assertionResults": [],
      "startTime": 1754826973072,
      "endTime": 1754826973072,
      "status": "failed",
      "message": "Logger is not a constructor",
      "name": "/home/mhugo/code/claude-code-zen/src/__tests__/unit/coordination/batch/performance-monitor.test.ts"
    },
    {
      "assertionResults": [],
      "startTime": 1754826973072,
      "endTime": 1754826973072,
      "status": "failed",
      "message": "Failed to resolve import \"../../../../database/lancedb-interface\" from \"src/__tests__/unit/classical/database-operations/vector-database-performance.test.ts\". Does the file exist?",
      "name": "/home/mhugo/code/claude-code-zen/src/__tests__/unit/classical/database-operations/vector-database-performance.test.ts"
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": ["Domain Splitting - Classical TDD", "Domain Analysis Engine"],
          "fullName": "Domain Splitting - Classical TDD Domain Analysis Engine should analyze domain complexity correctly",
          "status": "failed",
          "title": "should analyze domain complexity correctly",
          "duration": 16.054998999999953,
          "failureMessages": [
            "ReferenceError: _dirname is not defined\n    at /home/mhugo/code/claude-code-zen/src/__tests__/unit/classical/domain-splitting/domain-analysis.test.ts:17:25\n    at file:///home/mhugo/code/claude-code-zen/node_modules/@vitest/runner/dist/chunk-hooks.js:155:11\n    at file:///home/mhugo/code/claude-code-zen/node_modules/@vitest/runner/dist/chunk-hooks.js:1897:20\n    at new Promise (<anonymous>)\n    at runWithTimeout (file:///home/mhugo/code/claude-code-zen/node_modules/@vitest/runner/dist/chunk-hooks.js:1863:10)\n    at runHook (file:///home/mhugo/code/claude-code-zen/node_modules/@vitest/runner/dist/chunk-hooks.js:1436:51)\n    at callSuiteHook (file:///home/mhugo/code/claude-code-zen/node_modules/@vitest/runner/dist/chunk-hooks.js:1442:25)\n    at callSuiteHook (file:///home/mhugo/code/claude-code-zen/node_modules/@vitest/runner/dist/chunk-hooks.js:1429:21)\n    at runTest (file:///home/mhugo/code/claude-code-zen/node_modules/@vitest/runner/dist/chunk-hooks.js:1566:26)\n    at runSuite (file:///home/mhugo/code/claude-code-zen/node_modules/@vitest/runner/dist/chunk-hooks.js:1729:8)"
          ],
          "meta": {}
        },
        {
          "ancestorTitles": ["Domain Splitting - Classical TDD", "Domain Analysis Engine"],
          "fullName": "Domain Splitting - Classical TDD Domain Analysis Engine should categorize files correctly by purpose",
          "status": "failed",
          "title": "should categorize files correctly by purpose",
          "duration": 2.1572110000015527,
          "failureMessages": [
            "ReferenceError: _dirname is not defined\n    at /home/mhugo/code/claude-code-zen/src/__tests__/unit/classical/domain-splitting/domain-analysis.test.ts:17:25\n    at file:///home/mhugo/code/claude-code-zen/node_modules/@vitest/runner/dist/chunk-hooks.js:155:11\n    at file:///home/mhugo/code/claude-code-zen/node_modules/@vitest/runner/dist/chunk-hooks.js:1897:20\n    at new Promise (<anonymous>)\n    at runWithTimeout (file:///home/mhugo/code/claude-code-zen/node_modules/@vitest/runner/dist/chunk-hooks.js:1863:10)\n    at runHook (file:///home/mhugo/code/claude-code-zen/node_modules/@vitest/runner/dist/chunk-hooks.js:1436:51)\n    at callSuiteHook (file:///home/mhugo/code/claude-code-zen/node_modules/@vitest/runner/dist/chunk-hooks.js:1442:25)\n    at callSuiteHook (file:///home/mhugo/code/claude-code-zen/node_modules/@vitest/runner/dist/chunk-hooks.js:1429:21)\n    at runTest (file:///home/mhugo/code/claude-code-zen/node_modules/@vitest/runner/dist/chunk-hooks.js:1566:26)\n    at runSuite (file:///home/mhugo/code/claude-code-zen/node_modules/@vitest/runner/dist/chunk-hooks.js:1729:8)"
          ],
          "meta": {}
        },
        {
          "ancestorTitles": ["Domain Splitting - Classical TDD", "Domain Analysis Engine"],
          "fullName": "Domain Splitting - Classical TDD Domain Analysis Engine should build dependency graph correctly",
          "status": "failed",
          "title": "should build dependency graph correctly",
          "duration": 1.4301200000008976,
          "failureMessages": [
            "ReferenceError: _dirname is not defined\n    at /home/mhugo/code/claude-code-zen/src/__tests__/unit/classical/domain-splitting/domain-analysis.test.ts:17:25\n    at file:///home/mhugo/code/claude-code-zen/node_modules/@vitest/runner/dist/chunk-hooks.js:155:11\n    at file:///home/mhugo/code/claude-code-zen/node_modules/@vitest/runner/dist/chunk-hooks.js:1897:20\n    at new Promise (<anonymous>)\n    at runWithTimeout (file:///home/mhugo/code/claude-code-zen/node_modules/@vitest/runner/dist/chunk-hooks.js:1863:10)\n    at runHook (file:///home/mhugo/code/claude-code-zen/node_modules/@vitest/runner/dist/chunk-hooks.js:1436:51)\n    at callSuiteHook (file:///home/mhugo/code/claude-code-zen/node_modules/@vitest/runner/dist/chunk-hooks.js:1442:25)\n    at callSuiteHook (file:///home/mhugo/code/claude-code-zen/node_modules/@vitest/runner/dist/chunk-hooks.js:1429:21)\n    at runTest (file:///home/mhugo/code/claude-code-zen/node_modules/@vitest/runner/dist/chunk-hooks.js:1566:26)\n    at runSuite (file:///home/mhugo/code/claude-code-zen/node_modules/@vitest/runner/dist/chunk-hooks.js:1729:8)"
          ],
          "meta": {}
        },
        {
          "ancestorTitles": ["Domain Splitting - Classical TDD", "Domain Analysis Engine"],
          "fullName": "Domain Splitting - Classical TDD Domain Analysis Engine should identify sub-domains from analysis",
          "status": "failed",
          "title": "should identify sub-domains from analysis",
          "duration": 1.7835699999995995,
          "failureMessages": [
            "ReferenceError: _dirname is not defined\n    at /home/mhugo/code/claude-code-zen/src/__tests__/unit/classical/domain-splitting/domain-analysis.test.ts:17:25\n    at file:///home/mhugo/code/claude-code-zen/node_modules/@vitest/runner/dist/chunk-hooks.js:155:11\n    at file:///home/mhugo/code/claude-code-zen/node_modules/@vitest/runner/dist/chunk-hooks.js:1897:20\n    at new Promise (<anonymous>)\n    at runWithTimeout (file:///home/mhugo/code/claude-code-zen/node_modules/@vitest/runner/dist/chunk-hooks.js:1863:10)\n    at runHook (file:///home/mhugo/code/claude-code-zen/node_modules/@vitest/runner/dist/chunk-hooks.js:1436:51)\n    at callSuiteHook (file:///home/mhugo/code/claude-code-zen/node_modules/@vitest/runner/dist/chunk-hooks.js:1442:25)\n    at callSuiteHook (file:///home/mhugo/code/claude-code-zen/node_modules/@vitest/runner/dist/chunk-hooks.js:1429:21)\n    at runTest (file:///home/mhugo/code/claude-code-zen/node_modules/@vitest/runner/dist/chunk-hooks.js:1566:26)\n    at runSuite (file:///home/mhugo/code/claude-code-zen/node_modules/@vitest/runner/dist/chunk-hooks.js:1729:8)"
          ],
          "meta": {}
        },
        {
          "ancestorTitles": ["Domain Splitting - Classical TDD", "Domain Analysis Engine"],
          "fullName": "Domain Splitting - Classical TDD Domain Analysis Engine should calculate splitting benefits accurately",
          "status": "failed",
          "title": "should calculate splitting benefits accurately",
          "duration": 2.077015000002575,
          "failureMessages": [
            "ReferenceError: _dirname is not defined\n    at /home/mhugo/code/claude-code-zen/src/__tests__/unit/classical/domain-splitting/domain-analysis.test.ts:17:25\n    at file:///home/mhugo/code/claude-code-zen/node_modules/@vitest/runner/dist/chunk-hooks.js:155:11\n    at file:///home/mhugo/code/claude-code-zen/node_modules/@vitest/runner/dist/chunk-hooks.js:1897:20\n    at new Promise (<anonymous>)\n    at runWithTimeout (file:///home/mhugo/code/claude-code-zen/node_modules/@vitest/runner/dist/chunk-hooks.js:1863:10)\n    at runHook (file:///home/mhugo/code/claude-code-zen/node_modules/@vitest/runner/dist/chunk-hooks.js:1436:51)\n    at callSuiteHook (file:///home/mhugo/code/claude-code-zen/node_modules/@vitest/runner/dist/chunk-hooks.js:1442:25)\n    at callSuiteHook (file:///home/mhugo/code/claude-code-zen/node_modules/@vitest/runner/dist/chunk-hooks.js:1429:21)\n    at runTest (file:///home/mhugo/code/claude-code-zen/node_modules/@vitest/runner/dist/chunk-hooks.js:1566:26)\n    at runSuite (file:///home/mhugo/code/claude-code-zen/node_modules/@vitest/runner/dist/chunk-hooks.js:1729:8)"
          ],
          "meta": {}
        },
        {
          "ancestorTitles": ["Domain Splitting - Classical TDD", "Neural Domain Splitting Plan"],
          "fullName": "Domain Splitting - Classical TDD Neural Domain Splitting Plan should have valid structure",
          "status": "failed",
          "title": "should have valid structure",
          "duration": 1.6973900000011781,
          "failureMessages": [
            "ReferenceError: _dirname is not defined\n    at /home/mhugo/code/claude-code-zen/src/__tests__/unit/classical/domain-splitting/domain-analysis.test.ts:17:25\n    at file:///home/mhugo/code/claude-code-zen/node_modules/@vitest/runner/dist/chunk-hooks.js:155:11\n    at file:///home/mhugo/code/claude-code-zen/node_modules/@vitest/runner/dist/chunk-hooks.js:1897:20\n    at new Promise (<anonymous>)\n    at runWithTimeout (file:///home/mhugo/code/claude-code-zen/node_modules/@vitest/runner/dist/chunk-hooks.js:1863:10)\n    at runHook (file:///home/mhugo/code/claude-code-zen/node_modules/@vitest/runner/dist/chunk-hooks.js:1436:51)\n    at callSuiteHook (file:///home/mhugo/code/claude-code-zen/node_modules/@vitest/runner/dist/chunk-hooks.js:1442:25)\n    at callSuiteHook (file:///home/mhugo/code/claude-code-zen/node_modules/@vitest/runner/dist/chunk-hooks.js:1429:21)\n    at runTest (file:///home/mhugo/code/claude-code-zen/node_modules/@vitest/runner/dist/chunk-hooks.js:1566:26)\n    at runSuite (file:///home/mhugo/code/claude-code-zen/node_modules/@vitest/runner/dist/chunk-hooks.js:1729:8)"
          ],
          "meta": {}
        },
        {
          "ancestorTitles": ["Domain Splitting - Classical TDD", "Neural Domain Splitting Plan"],
          "fullName": "Domain Splitting - Classical TDD Neural Domain Splitting Plan should have proper dependency relationships",
          "status": "failed",
          "title": "should have proper dependency relationships",
          "duration": 1.6595290000004752,
          "failureMessages": [
            "ReferenceError: _dirname is not defined\n    at /home/mhugo/code/claude-code-zen/src/__tests__/unit/classical/domain-splitting/domain-analysis.test.ts:17:25\n    at file:///home/mhugo/code/claude-code-zen/node_modules/@vitest/runner/dist/chunk-hooks.js:155:11\n    at file:///home/mhugo/code/claude-code-zen/node_modules/@vitest/runner/dist/chunk-hooks.js:1897:20\n    at new Promise (<anonymous>)\n    at runWithTimeout (file:///home/mhugo/code/claude-code-zen/node_modules/@vitest/runner/dist/chunk-hooks.js:1863:10)\n    at runHook (file:///home/mhugo/code/claude-code-zen/node_modules/@vitest/runner/dist/chunk-hooks.js:1436:51)\n    at callSuiteHook (file:///home/mhugo/code/claude-code-zen/node_modules/@vitest/runner/dist/chunk-hooks.js:1442:25)\n    at callSuiteHook (file:///home/mhugo/code/claude-code-zen/node_modules/@vitest/runner/dist/chunk-hooks.js:1429:21)\n    at runTest (file:///home/mhugo/code/claude-code-zen/node_modules/@vitest/runner/dist/chunk-hooks.js:1566:26)\n    at runSuite (file:///home/mhugo/code/claude-code-zen/node_modules/@vitest/runner/dist/chunk-hooks.js:1729:8)"
          ],
          "meta": {}
        },
        {
          "ancestorTitles": ["Domain Splitting - Classical TDD", "Neural Domain Splitting Plan"],
          "fullName": "Domain Splitting - Classical TDD Neural Domain Splitting Plan should follow kebab-case naming convention",
          "status": "failed",
          "title": "should follow kebab-case naming convention",
          "duration": 1.7973430000020016,
          "failureMessages": [
            "ReferenceError: _dirname is not defined\n    at /home/mhugo/code/claude-code-zen/src/__tests__/unit/classical/domain-splitting/domain-analysis.test.ts:17:25\n    at file:///home/mhugo/code/claude-code-zen/node_modules/@vitest/runner/dist/chunk-hooks.js:155:11\n    at file:///home/mhugo/code/claude-code-zen/node_modules/@vitest/runner/dist/chunk-hooks.js:1897:20\n    at new Promise (<anonymous>)\n    at runWithTimeout (file:///home/mhugo/code/claude-code-zen/node_modules/@vitest/runner/dist/chunk-hooks.js:1863:10)\n    at runHook (file:///home/mhugo/code/claude-code-zen/node_modules/@vitest/runner/dist/chunk-hooks.js:1436:51)\n    at callSuiteHook (file:///home/mhugo/code/claude-code-zen/node_modules/@vitest/runner/dist/chunk-hooks.js:1442:25)\n    at callSuiteHook (file:///home/mhugo/code/claude-code-zen/node_modules/@vitest/runner/dist/chunk-hooks.js:1429:21)\n    at runTest (file:///home/mhugo/code/claude-code-zen/node_modules/@vitest/runner/dist/chunk-hooks.js:1566:26)\n    at runSuite (file:///home/mhugo/code/claude-code-zen/node_modules/@vitest/runner/dist/chunk-hooks.js:1729:8)"
          ],
          "meta": {}
        },
        {
          "ancestorTitles": ["Domain Splitting - Classical TDD", "File Analysis"],
          "fullName": "Domain Splitting - Classical TDD File Analysis should extract imports and exports correctly",
          "status": "failed",
          "title": "should extract imports and exports correctly",
          "duration": 2.336185000000114,
          "failureMessages": [
            "ReferenceError: _dirname is not defined\n    at /home/mhugo/code/claude-code-zen/src/__tests__/unit/classical/domain-splitting/domain-analysis.test.ts:17:25\n    at file:///home/mhugo/code/claude-code-zen/node_modules/@vitest/runner/dist/chunk-hooks.js:155:11\n    at file:///home/mhugo/code/claude-code-zen/node_modules/@vitest/runner/dist/chunk-hooks.js:1897:20\n    at new Promise (<anonymous>)\n    at runWithTimeout (file:///home/mhugo/code/claude-code-zen/node_modules/@vitest/runner/dist/chunk-hooks.js:1863:10)\n    at runHook (file:///home/mhugo/code/claude-code-zen/node_modules/@vitest/runner/dist/chunk-hooks.js:1436:51)\n    at callSuiteHook (file:///home/mhugo/code/claude-code-zen/node_modules/@vitest/runner/dist/chunk-hooks.js:1442:25)\n    at callSuiteHook (file:///home/mhugo/code/claude-code-zen/node_modules/@vitest/runner/dist/chunk-hooks.js:1429:21)\n    at runTest (file:///home/mhugo/code/claude-code-zen/node_modules/@vitest/runner/dist/chunk-hooks.js:1566:26)\n    at runSuite (file:///home/mhugo/code/claude-code-zen/node_modules/@vitest/runner/dist/chunk-hooks.js:1729:8)"
          ],
          "meta": {}
        },
        {
          "ancestorTitles": ["Domain Splitting - Classical TDD", "File Analysis"],
          "fullName": "Domain Splitting - Classical TDD File Analysis should calculate complexity correctly",
          "status": "failed",
          "title": "should calculate complexity correctly",
          "duration": 1.697954999999638,
          "failureMessages": [
            "ReferenceError: _dirname is not defined\n    at /home/mhugo/code/claude-code-zen/src/__tests__/unit/classical/domain-splitting/domain-analysis.test.ts:17:25\n    at file:///home/mhugo/code/claude-code-zen/node_modules/@vitest/runner/dist/chunk-hooks.js:155:11\n    at file:///home/mhugo/code/claude-code-zen/node_modules/@vitest/runner/dist/chunk-hooks.js:1897:20\n    at new Promise (<anonymous>)\n    at runWithTimeout (file:///home/mhugo/code/claude-code-zen/node_modules/@vitest/runner/dist/chunk-hooks.js:1863:10)\n    at runHook (file:///home/mhugo/code/claude-code-zen/node_modules/@vitest/runner/dist/chunk-hooks.js:1436:51)\n    at callSuiteHook (file:///home/mhugo/code/claude-code-zen/node_modules/@vitest/runner/dist/chunk-hooks.js:1442:25)\n    at callSuiteHook (file:///home/mhugo/code/claude-code-zen/node_modules/@vitest/runner/dist/chunk-hooks.js:1429:21)\n    at runTest (file:///home/mhugo/code/claude-code-zen/node_modules/@vitest/runner/dist/chunk-hooks.js:1566:26)\n    at runSuite (file:///home/mhugo/code/claude-code-zen/node_modules/@vitest/runner/dist/chunk-hooks.js:1729:8)"
          ],
          "meta": {}
        }
      ],
      "startTime": 1754826992446,
      "endTime": 1754826992480.698,
      "status": "failed",
      "message": "",
      "name": "/home/mhugo/code/claude-code-zen/src/__tests__/unit/classical/domain-splitting/domain-analysis.test.ts"
    },
    {
      "assertionResults": [],
      "startTime": 1754826973072,
      "endTime": 1754826973072,
      "status": "failed",
      "message": "Transform failed with 1 error:\n/home/mhugo/code/claude-code-zen/src/__tests__/unit/classical/neural/comprehensive-neural-benchmarks.test.ts:1388:8: ERROR: Invalid assignment target",
      "name": "/home/mhugo/code/claude-code-zen/src/__tests__/unit/classical/neural/comprehensive-neural-benchmarks.test.ts"
    },
    {
      "assertionResults": [],
      "startTime": 1754826973072,
      "endTime": 1754826973072,
      "status": "failed",
      "message": "Transform failed with 5 errors:\n/home/mhugo/code/claude-code-zen/src/__tests__/unit/classical/neural/gpu-integration.test.ts:148:8: ERROR: Invalid assignment target\n/home/mhugo/code/claude-code-zen/src/__tests__/unit/classical/neural/gpu-integration.test.ts:150:10: ERROR: Invalid assignment target\n/home/mhugo/code/claude-code-zen/src/__tests__/unit/classical/neural/gpu-integration.test.ts:821:6: ERROR: Invalid assignment target\n/home/mhugo/code/claude-code-zen/src/__tests__/unit/classical/neural/gpu-integration.test.ts:823:8: ERROR: Invalid assignment target\n/home/mhugo/code/claude-code-zen/src/__tests__/unit/classical/neural/gpu-integration.test.ts:961:6: ERROR: Invalid assignment target",
      "name": "/home/mhugo/code/claude-code-zen/src/__tests__/unit/classical/neural/gpu-integration.test.ts"
    },
    {
      "assertionResults": [],
      "startTime": 1754826973072,
      "endTime": 1754826973072,
      "status": "failed",
      "message": "Transform failed with 17 errors:\n/home/mhugo/code/claude-code-zen/src/__tests__/unit/classical/neural/neural-algorithms.test.ts:560:6: ERROR: Invalid assignment target\n/home/mhugo/code/claude-code-zen/src/__tests__/unit/classical/neural/neural-algorithms.test.ts:561:6: ERROR: Invalid assignment target\n/home/mhugo/code/claude-code-zen/src/__tests__/unit/classical/neural/neural-algorithms.test.ts:562:6: ERROR: Invalid assignment target\n/home/mhugo/code/claude-code-zen/src/__tests__/unit/classical/neural/neural-algorithms.test.ts:734:8: ERROR: Invalid assignment target\n/home/mhugo/code/claude-code-zen/src/__tests__/unit/classical/neural/neural-algorithms.test.ts:792:8: ERROR: Invalid assignment target\n...",
      "name": "/home/mhugo/code/claude-code-zen/src/__tests__/unit/classical/neural/neural-algorithms.test.ts"
    },
    {
      "assertionResults": [],
      "startTime": 1754826973072,
      "endTime": 1754826973072,
      "status": "failed",
      "message": "Transform failed with 1 error:\n/home/mhugo/code/claude-code-zen/src/__tests__/unit/classical/neural/neural-network-training.test.ts:505:8: ERROR: Invalid assignment target",
      "name": "/home/mhugo/code/claude-code-zen/src/__tests__/unit/classical/neural/neural-network-training.test.ts"
    },
    {
      "assertionResults": [],
      "startTime": 1754826973072,
      "endTime": 1754826973072,
      "status": "failed",
      "message": "Transform failed with 1 error:\n/home/mhugo/code/claude-code-zen/src/__tests__/unit/classical/neural/training-techniques.test.ts:1052:8: ERROR: Invalid assignment target",
      "name": "/home/mhugo/code/claude-code-zen/src/__tests__/unit/classical/neural/training-techniques.test.ts"
    },
    {
      "assertionResults": [],
      "startTime": 1754826973072,
      "endTime": 1754826973072,
      "status": "failed",
      "message": "Transform failed with 4 errors:\n/home/mhugo/code/claude-code-zen/src/__tests__/unit/classical/neural/wasm-performance-validation.test.ts:582:6: ERROR: Invalid assignment target\n/home/mhugo/code/claude-code-zen/src/__tests__/unit/classical/neural/wasm-performance-validation.test.ts:584:8: ERROR: Invalid assignment target\n/home/mhugo/code/claude-code-zen/src/__tests__/unit/classical/neural/wasm-performance-validation.test.ts:713:8: ERROR: Invalid assignment target\n/home/mhugo/code/claude-code-zen/src/__tests__/unit/classical/neural/wasm-performance-validation.test.ts:744:8: ERROR: Invalid assignment target",
      "name": "/home/mhugo/code/claude-code-zen/src/__tests__/unit/classical/neural/wasm-performance-validation.test.ts"
    },
    {
      "assertionResults": [],
      "startTime": 1754826973072,
      "endTime": 1754826973072,
      "status": "failed",
      "message": "Do not import `@jest/globals` outside of the Jest test environment",
      "name": "/home/mhugo/code/claude-code-zen/src/__tests__/unit/classical/neural-algorithms/index.test.ts"
    },
    {
      "assertionResults": [],
      "startTime": 1754826973072,
      "endTime": 1754826973072,
      "status": "failed",
      "message": "Do not import `@jest/globals` outside of the Jest test environment",
      "name": "/home/mhugo/code/claude-code-zen/src/__tests__/unit/classical/neural-algorithms/memory-efficiency.test.ts"
    },
    {
      "assertionResults": [],
      "startTime": 1754826973072,
      "endTime": 1754826973072,
      "status": "failed",
      "message": "Transform failed with 1 error:\n/home/mhugo/code/claude-code-zen/src/__tests__/unit/classical/neural-algorithms/neural-network-training.test.ts:131:14: ERROR: Invalid assignment target",
      "name": "/home/mhugo/code/claude-code-zen/src/__tests__/unit/classical/neural-algorithms/neural-network-training.test.ts"
    },
    {
      "assertionResults": [],
      "startTime": 1754826973072,
      "endTime": 1754826973072,
      "status": "failed",
      "message": "Do not import `@jest/globals` outside of the Jest test environment",
      "name": "/home/mhugo/code/claude-code-zen/src/__tests__/unit/classical/neural-algorithms/prediction-accuracy.test.ts"
    },
    {
      "assertionResults": [],
      "startTime": 1754826973072,
      "endTime": 1754826973072,
      "status": "failed",
      "message": "Failed to resolve import \"../../../../../ruv-FANN-zen/ruv-swarm-zen/npm/src/neural-network\" from \"src/__tests__/unit/classical/neural-algorithms/ruv-fann-integration.test.ts\". Does the file exist?",
      "name": "/home/mhugo/code/claude-code-zen/src/__tests__/unit/classical/neural-algorithms/ruv-fann-integration.test.ts"
    },
    {
      "assertionResults": [],
      "startTime": 1754826973072,
      "endTime": 1754826973072,
      "status": "failed",
      "message": "Do not import `@jest/globals` outside of the Jest test environment",
      "name": "/home/mhugo/code/claude-code-zen/src/__tests__/unit/classical/neural-algorithms/simd-optimization.test.ts"
    },
    {
      "assertionResults": [],
      "startTime": 1754826973072,
      "endTime": 1754826973072,
      "status": "failed",
      "message": "Failed to resolve import \"../config/logging-config\" from \"src/neural/core/neural-network.ts\". Does the file exist?",
      "name": "/home/mhugo/code/claude-code-zen/src/__tests__/unit/classical/neural-algorithms/training-algorithms.test.ts"
    },
    {
      "assertionResults": [],
      "startTime": 1754826973072,
      "endTime": 1754826973072,
      "status": "failed",
      "message": "Do not import `@jest/globals` outside of the Jest test environment",
      "name": "/home/mhugo/code/claude-code-zen/src/__tests__/unit/classical/neural-algorithms/training-convergence.test.ts"
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": ["Type Guards - Classical TDD", "Database Result Type Guards"],
          "fullName": "Type Guards - Classical TDD Database Result Type Guards should correctly identify successful query results",
          "status": "passed",
          "title": "should correctly identify successful query results",
          "duration": 3.573645000000397,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Type Guards - Classical TDD", "Database Result Type Guards"],
          "fullName": "Type Guards - Classical TDD Database Result Type Guards should correctly identify query error results",
          "status": "passed",
          "title": "should correctly identify query error results",
          "duration": 0.8064149999991059,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Type Guards - Classical TDD", "Database Result Type Guards"],
          "fullName": "Type Guards - Classical TDD Database Result Type Guards should handle union type discrimination correctly",
          "status": "passed",
          "title": "should handle union type discrimination correctly",
          "duration": 5.292714999999589,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Type Guards - Classical TDD", "Memory Result Type Guards"],
          "fullName": "Type Guards - Classical TDD Memory Result Type Guards should correctly identify successful memory operations",
          "status": "passed",
          "title": "should correctly identify successful memory operations",
          "duration": 0.6846010000008391,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Type Guards - Classical TDD", "Memory Result Type Guards"],
          "fullName": "Type Guards - Classical TDD Memory Result Type Guards should correctly identify memory not found results",
          "status": "passed",
          "title": "should correctly identify memory not found results",
          "duration": 0.3408229999986361,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Type Guards - Classical TDD", "Memory Result Type Guards"],
          "fullName": "Type Guards - Classical TDD Memory Result Type Guards should correctly identify memory error results",
          "status": "passed",
          "title": "should correctly identify memory error results",
          "duration": 0.632528000001912,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Type Guards - Classical TDD", "Neural Result Type Guards"],
          "fullName": "Type Guards - Classical TDD Neural Result Type Guards should correctly identify training results",
          "status": "passed",
          "title": "should correctly identify training results",
          "duration": 0.6784039999984088,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Type Guards - Classical TDD", "Neural Result Type Guards"],
          "fullName": "Type Guards - Classical TDD Neural Result Type Guards should correctly identify inference results",
          "status": "passed",
          "title": "should correctly identify inference results",
          "duration": 0.4152219999996305,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Type Guards - Classical TDD", "Neural Result Type Guards"],
          "fullName": "Type Guards - Classical TDD Neural Result Type Guards should correctly identify neural errors",
          "status": "passed",
          "title": "should correctly identify neural errors",
          "duration": 0.5577779999985069,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Type Guards - Classical TDD", "Utility Functions"],
          "fullName": "Type Guards - Classical TDD Utility Functions should safely extract data from database results",
          "status": "passed",
          "title": "should safely extract data from database results",
          "duration": 0.5509749999982887,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Type Guards - Classical TDD", "Utility Functions"],
          "fullName": "Type Guards - Classical TDD Utility Functions should safely extract error messages from various result types",
          "status": "passed",
          "title": "should safely extract error messages from various result types",
          "duration": 0.31708400000206893,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Type Guards - Classical TDD", "Utility Functions"],
          "fullName": "Type Guards - Classical TDD Utility Functions should check property existence safely",
          "status": "passed",
          "title": "should check property existence safely",
          "duration": 0.2745589999976801,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Type Guards - Classical TDD", "Utility Functions"],
          "fullName": "Type Guards - Classical TDD Utility Functions should access properties safely",
          "status": "passed",
          "title": "should access properties safely",
          "duration": 0.3960750000005646,
          "failureMessages": [],
          "meta": {}
        }
      ],
      "startTime": 1754826999824,
      "endTime": 1754826999840.396,
      "status": "passed",
      "message": "",
      "name": "/home/mhugo/code/claude-code-zen/src/__tests__/unit/classical/utils/type-guards.test.ts"
    },
    {
      "assertionResults": [],
      "startTime": 1754826973072,
      "endTime": 1754826973072,
      "status": "failed",
      "message": "Transform failed with 3 errors:\n/home/mhugo/code/claude-code-zen/src/__tests__/unit/classical/wasm-computations/matrix-operations.test.ts:40:8: ERROR: Invalid assignment target\n/home/mhugo/code/claude-code-zen/src/__tests__/unit/classical/wasm-computations/matrix-operations.test.ts:53:8: ERROR: Invalid assignment target\n/home/mhugo/code/claude-code-zen/src/__tests__/unit/classical/wasm-computations/matrix-operations.test.ts:132:10: ERROR: Invalid assignment target",
      "name": "/home/mhugo/code/claude-code-zen/src/__tests__/unit/classical/wasm-computations/matrix-operations.test.ts"
    },
    {
      "assertionResults": [],
      "startTime": 1754826973072,
      "endTime": 1754826973072,
      "status": "failed",
      "message": "(0 , createLogger) is not a function",
      "name": "/home/mhugo/code/claude-code-zen/src/__tests__/unit/classical/wasm-computations/neural-acceleration.test.ts"
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": ["ArgumentParser - TDD London", "parsing behavior"],
          "fullName": "ArgumentParser - TDD London parsing behavior should parse simple command with arguments",
          "status": "passed",
          "title": "should parse simple command with arguments",
          "duration": 4.637330999998085,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["ArgumentParser - TDD London", "parsing behavior"],
          "fullName": "ArgumentParser - TDD London parsing behavior should parse command with flags",
          "status": "passed",
          "title": "should parse command with flags",
          "duration": 1.1698289999985718,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["ArgumentParser - TDD London", "parsing behavior"],
          "fullName": "ArgumentParser - TDD London parsing behavior should handle unknown flags based on options",
          "status": "passed",
          "title": "should handle unknown flags based on options",
          "duration": 1.4442139999991923,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["ArgumentParser - TDD London", "parsing behavior"],
          "fullName": "ArgumentParser - TDD London parsing behavior should handle boolean flags correctly",
          "status": "passed",
          "title": "should handle boolean flags correctly",
          "duration": 0.6024340000003576,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["ArgumentParser - TDD London", "parsing behavior"],
          "fullName": "ArgumentParser - TDD London parsing behavior should parse array flags",
          "status": "passed",
          "title": "should parse array flags",
          "duration": 0.6879079999998794,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["ArgumentParser - TDD London", "command definition behavior"],
          "fullName": "ArgumentParser - TDD London command definition behavior should register command with configuration",
          "status": "passed",
          "title": "should register command with configuration",
          "duration": 1.0251490000009653,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["ArgumentParser - TDD London", "command definition behavior"],
          "fullName": "ArgumentParser - TDD London command definition behavior should register multiple commands without conflicts",
          "status": "passed",
          "title": "should register multiple commands without conflicts",
          "duration": 0.783395999998902,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["ArgumentParser - TDD London", "command definition behavior"],
          "fullName": "ArgumentParser - TDD London command definition behavior should handle command aliases correctly",
          "status": "passed",
          "title": "should handle command aliases correctly",
          "duration": 0.6245989999988524,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["ArgumentParser - TDD London", "validation behavior"],
          "fullName": "ArgumentParser - TDD London validation behavior should validate parsed result and return validation errors",
          "status": "passed",
          "title": "should validate parsed result and return validation errors",
          "duration": 4.654843000000255,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["ArgumentParser - TDD London", "validation behavior"],
          "fullName": "ArgumentParser - TDD London validation behavior should validate required flags",
          "status": "passed",
          "title": "should validate required flags",
          "duration": 0.9439349999993283,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["ArgumentParser - TDD London", "validation behavior"],
          "fullName": "ArgumentParser - TDD London validation behavior should validate flag types",
          "status": "passed",
          "title": "should validate flag types",
          "duration": 0.5677059999979974,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["ArgumentParser - TDD London", "validation behavior"],
          "fullName": "ArgumentParser - TDD London validation behavior should return warnings for deprecated flags",
          "status": "passed",
          "title": "should return warnings for deprecated flags",
          "duration": 0.7519519999987097,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["ArgumentParser - TDD London", "options configuration behavior"],
          "fullName": "ArgumentParser - TDD London options configuration behavior should apply parser options correctly",
          "status": "passed",
          "title": "should apply parser options correctly",
          "duration": 0.6567009999998845,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["ArgumentParser - TDD London", "options configuration behavior"],
          "fullName": "ArgumentParser - TDD London options configuration behavior should merge options with existing configuration",
          "status": "passed",
          "title": "should merge options with existing configuration",
          "duration": 0.45597600000110106,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["ArgumentParser - TDD London", "help generation behavior"],
          "fullName": "ArgumentParser - TDD London help generation behavior should generate help text",
          "status": "passed",
          "title": "should generate help text",
          "duration": 0.3021859999971639,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["ArgumentParser - TDD London", "edge case behavior"],
          "fullName": "ArgumentParser - TDD London edge case behavior should handle empty argument array",
          "status": "passed",
          "title": "should handle empty argument array",
          "duration": 2.5303019999992102,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["ArgumentParser - TDD London", "edge case behavior"],
          "fullName": "ArgumentParser - TDD London edge case behavior should handle flags without values",
          "status": "passed",
          "title": "should handle flags without values",
          "duration": 0.3625140000003739,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["ArgumentParser - TDD London", "edge case behavior"],
          "fullName": "ArgumentParser - TDD London edge case behavior should handle special characters in arguments",
          "status": "passed",
          "title": "should handle special characters in arguments",
          "duration": 0.32892899999933434,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["ArgumentParser - TDD London", "edge case behavior"],
          "fullName": "ArgumentParser - TDD London edge case behavior should handle variadic arguments",
          "status": "passed",
          "title": "should handle variadic arguments",
          "duration": 0.3930450000007113,
          "failureMessages": [],
          "meta": {}
        }
      ],
      "startTime": 1754826991844,
      "endTime": 1754826991868.393,
      "status": "passed",
      "message": "",
      "name": "/home/mhugo/code/claude-code-zen/src/__tests__/unit/london/cli-commands/argument-parser.test.ts"
    },
    {
      "assertionResults": [],
      "startTime": 1754826973072,
      "endTime": 1754826973072,
      "status": "failed",
      "message": "Do not import `@jest/globals` outside of the Jest test environment",
      "name": "/home/mhugo/code/claude-code-zen/src/__tests__/unit/london/cli-commands/cli-command-processing.test.ts"
    },
    {
      "assertionResults": [],
      "startTime": 1754826973072,
      "endTime": 1754826973072,
      "status": "failed",
      "message": "Transform failed with 1 error:\n/home/mhugo/code/claude-code-zen/src/__tests__/unit/london/cli-commands/command-base.test.ts:435:6: ERROR: Invalid assignment target",
      "name": "/home/mhugo/code/claude-code-zen/src/__tests__/unit/london/cli-commands/command-base.test.ts"
    },
    {
      "assertionResults": [],
      "startTime": 1754826973072,
      "endTime": 1754826973072,
      "status": "failed",
      "message": "Failed to resolve import \"../../../../cli/core/base-command\" from \"src/__tests__/unit/london/cli-commands/command-registry.test.ts\". Does the file exist?",
      "name": "/home/mhugo/code/claude-code-zen/src/__tests__/unit/london/cli-commands/command-registry.test.ts"
    },
    {
      "assertionResults": [],
      "startTime": 1754826973072,
      "endTime": 1754826973072,
      "status": "failed",
      "message": "Do not import `@jest/globals` outside of the Jest test environment",
      "name": "/home/mhugo/code/claude-code-zen/src/__tests__/unit/london/cli-commands/error-handler.test.ts"
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": [
            "CLI Commands Integration - TDD London",
            "system initialization behavior"
          ],
          "fullName": "CLI Commands Integration - TDD London system initialization behavior should initialize all components in correct order",
          "status": "passed",
          "title": "should initialize all components in correct order",
          "duration": 4.589318999998795,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "CLI Commands Integration - TDD London",
            "system initialization behavior"
          ],
          "fullName": "CLI Commands Integration - TDD London system initialization behavior should not reinitialize if already initialized",
          "status": "passed",
          "title": "should not reinitialize if already initialized",
          "duration": 1.198350999999093,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "CLI Commands Integration - TDD London",
            "system initialization behavior"
          ],
          "fullName": "CLI Commands Integration - TDD London system initialization behavior should emit initialization events",
          "status": "passed",
          "title": "should emit initialization events",
          "duration": 1.916228999998566,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "CLI Commands Integration - TDD London",
            "command execution flow behavior"
          ],
          "fullName": "CLI Commands Integration - TDD London command execution flow behavior should execute complete command flow with successful result",
          "status": "passed",
          "title": "should execute complete command flow with successful result",
          "duration": 6.9044209999992745,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "CLI Commands Integration - TDD London",
            "command execution flow behavior"
          ],
          "fullName": "CLI Commands Integration - TDD London command execution flow behavior should handle command execution errors through error handler",
          "status": "passed",
          "title": "should handle command execution errors through error handler",
          "duration": 3.248301999999967,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "CLI Commands Integration - TDD London",
            "command execution flow behavior"
          ],
          "fullName": "CLI Commands Integration - TDD London command execution flow behavior should emit execution events",
          "status": "passed",
          "title": "should emit execution events",
          "duration": 1.995652000001428,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "CLI Commands Integration - TDD London",
            "command execution flow behavior"
          ],
          "fullName": "CLI Commands Integration - TDD London command execution flow behavior should throw error if system not initialized",
          "status": "passed",
          "title": "should throw error if system not initialized",
          "duration": 1.1134879999990517,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "CLI Commands Integration - TDD London",
            "component interaction behavior"
          ],
          "fullName": "CLI Commands Integration - TDD London component interaction behavior should coordinate between parser and registry",
          "status": "passed",
          "title": "should coordinate between parser and registry",
          "duration": 1.6990719999994326,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "CLI Commands Integration - TDD London",
            "component interaction behavior"
          ],
          "fullName": "CLI Commands Integration - TDD London component interaction behavior should format output using formatter when command succeeds",
          "status": "passed",
          "title": "should format output using formatter when command succeeds",
          "duration": 1.6869040000019595,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "CLI Commands Integration - TDD London",
            "component interaction behavior"
          ],
          "fullName": "CLI Commands Integration - TDD London component interaction behavior should use error handler when command fails",
          "status": "passed",
          "title": "should use error handler when command fails",
          "duration": 1.321697999999742,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "CLI Commands Integration - TDD London",
            "command registration integration behavior"
          ],
          "fullName": "CLI Commands Integration - TDD London command registration integration behavior should register command and make it available for execution",
          "status": "passed",
          "title": "should register command and make it available for execution",
          "duration": 4.82737300000008,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "CLI Commands Integration - TDD London",
            "command registration integration behavior"
          ],
          "fullName": "CLI Commands Integration - TDD London command registration integration behavior should find and execute registered commands by category",
          "status": "passed",
          "title": "should find and execute registered commands by category",
          "duration": 1.1593819999980042,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "CLI Commands Integration - TDD London",
            "help and documentation behavior"
          ],
          "fullName": "CLI Commands Integration - TDD London help and documentation behavior should provide help for registered commands",
          "status": "passed",
          "title": "should provide help for registered commands",
          "duration": 1.0860600000014529,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "CLI Commands Integration - TDD London",
            "lifecycle and cleanup behavior"
          ],
          "fullName": "CLI Commands Integration - TDD London lifecycle and cleanup behavior should dispose all components in correct order",
          "status": "failed",
          "title": "should dispose all components in correct order",
          "duration": 9.24258700000064,
          "failureMessages": [
            "AssertionError: expected \"spy\" to be called 2 times, but got 1 times\n    at /home/mhugo/code/claude-code-zen/src/__tests__/unit/london/cli-commands/index.test.ts:544:30\n    at file:///home/mhugo/code/claude-code-zen/node_modules/@vitest/runner/dist/chunk-hooks.js:752:20"
          ],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "CLI Commands Integration - TDD London",
            "lifecycle and cleanup behavior"
          ],
          "fullName": "CLI Commands Integration - TDD London lifecycle and cleanup behavior should remove all event listeners on disposal",
          "status": "passed",
          "title": "should remove all event listeners on disposal",
          "duration": 1.3476909999990312,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["CLI Commands Integration - TDD London", "error propagation behavior"],
          "fullName": "CLI Commands Integration - TDD London error propagation behavior should emit error events during execution failures",
          "status": "passed",
          "title": "should emit error events during execution failures",
          "duration": 2.89987900000051,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["CLI Commands Integration - TDD London", "error propagation behavior"],
          "fullName": "CLI Commands Integration - TDD London error propagation behavior should handle initialization errors gracefully",
          "status": "passed",
          "title": "should handle initialization errors gracefully",
          "duration": 1.446137999999337,
          "failureMessages": [],
          "meta": {}
        }
      ],
      "startTime": 1754826989848,
      "endTime": 1754826989897.446,
      "status": "failed",
      "message": "",
      "name": "/home/mhugo/code/claude-code-zen/src/__tests__/unit/london/cli-commands/index.test.ts"
    },
    {
      "assertionResults": [],
      "startTime": 1754826973072,
      "endTime": 1754826973072,
      "status": "failed",
      "message": "Transform failed with 1 error:\n/home/mhugo/code/claude-code-zen/src/__tests__/unit/london/cli-commands/output-formatter.test.ts:317:6: ERROR: Invalid assignment target",
      "name": "/home/mhugo/code/claude-code-zen/src/__tests__/unit/london/cli-commands/output-formatter.test.ts"
    },
    {
      "assertionResults": [],
      "startTime": 1754826973072,
      "endTime": 1754826973072,
      "status": "failed",
      "message": "Do not import `@jest/globals` outside of the Jest test environment",
      "name": "/home/mhugo/code/claude-code-zen/src/__tests__/unit/london/coordination/agent-communication-protocols.test.ts"
    },
    {
      "assertionResults": [],
      "startTime": 1754826973072,
      "endTime": 1754826973072,
      "status": "failed",
      "message": "Do not import `@jest/globals` outside of the Jest test environment",
      "name": "/home/mhugo/code/claude-code-zen/src/__tests__/unit/london/coordination/agent-manager.test.ts"
    },
    {
      "assertionResults": [],
      "startTime": 1754826973072,
      "endTime": 1754826973072,
      "status": "failed",
      "message": "Failed to resolve import \"../config/logging-config\" from \"src/coordination/strategies/ruv-swarm.strategy.ts\". Does the file exist?",
      "name": "/home/mhugo/code/claude-code-zen/src/__tests__/unit/london/coordination/swarm-orchestration.test.ts"
    },
    {
      "assertionResults": [],
      "startTime": 1754826973072,
      "endTime": 1754826973072,
      "status": "failed",
      "message": "Failed to resolve import \"../protocols/topology/topology-manager\" from \"src/coordination/swarm/core/topology-manager.ts\". Does the file exist?",
      "name": "/home/mhugo/code/claude-code-zen/src/__tests__/unit/london/coordination/swarm-topology-management.test.ts"
    },
    {
      "assertionResults": [],
      "startTime": 1754826973072,
      "endTime": 1754826973072,
      "status": "failed",
      "message": "Failed to resolve import \"../config/logging-config\" from \"src/tools/domain-splitting/orchestrator.ts\". Does the file exist?",
      "name": "/home/mhugo/code/claude-code-zen/src/__tests__/unit/london/domain-splitting/orchestration.test.ts"
    },
    {
      "assertionResults": [],
      "startTime": 1754826973072,
      "endTime": 1754826973072,
      "status": "failed",
      "message": "Do not import `@jest/globals` outside of the Jest test environment",
      "name": "/home/mhugo/code/claude-code-zen/src/__tests__/unit/london/mcp-protocol/error-scenarios.test.ts"
    },
    {
      "assertionResults": [],
      "startTime": 1754826973072,
      "endTime": 1754826973072,
      "status": "failed",
      "message": "Do not import `@jest/globals` outside of the Jest test environment",
      "name": "/home/mhugo/code/claude-code-zen/src/__tests__/unit/london/mcp-protocol/index.test.ts"
    },
    {
      "assertionResults": [],
      "startTime": 1754826973072,
      "endTime": 1754826973072,
      "status": "failed",
      "message": "Do not import `@jest/globals` outside of the Jest test environment",
      "name": "/home/mhugo/code/claude-code-zen/src/__tests__/unit/london/mcp-protocol/protocol-message-validation.test.ts"
    },
    {
      "assertionResults": [],
      "startTime": 1754826973072,
      "endTime": 1754826973072,
      "status": "failed",
      "message": "Do not import `@jest/globals` outside of the Jest test environment",
      "name": "/home/mhugo/code/claude-code-zen/src/__tests__/unit/london/mcp-protocol/request-response-handling.test.ts"
    },
    {
      "assertionResults": [],
      "startTime": 1754826973072,
      "endTime": 1754826973072,
      "status": "failed",
      "message": "Do not import `@jest/globals` outside of the Jest test environment",
      "name": "/home/mhugo/code/claude-code-zen/src/__tests__/unit/london/mcp-protocol/streaming-support.test.ts"
    },
    {
      "assertionResults": [],
      "startTime": 1754826973072,
      "endTime": 1754826973072,
      "status": "failed",
      "message": "Do not import `@jest/globals` outside of the Jest test environment",
      "name": "/home/mhugo/code/claude-code-zen/src/__tests__/unit/london/mcp-protocol/tool-registration-discovery.test.ts"
    },
    {
      "assertionResults": [],
      "startTime": 1754826973072,
      "endTime": 1754826973072,
      "status": "failed",
      "message": "Logger is not a constructor",
      "name": "/home/mhugo/code/claude-code-zen/src/__tests__/unit/london/coordination/hooks/hook-system.test.ts"
    }
  ]
}
