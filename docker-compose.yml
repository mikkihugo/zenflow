version: '3.9'

services:
  # Main Claude Flow API Server
  api-server:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: claude-flow-api
    restart: unless-stopped
    ports:
      - "${API_PORT:-4000}:4000"
      - "${WEBSOCKET_PORT:-4001}:4001"
    environment:
      - NODE_ENV=production
      - API_SERVER_PORT=4000
      - WEBSOCKET_PORT=4001
      - SQLITE_DB_PATH=/app/databases/hive-mind.db
      - LANCEDB_PATH=/app/databases/lancedb
      - KUZU_PATH=/app/databases/kuzu
      - POSTGRES_URL=${POSTGRES_URL:-}
      - LOG_LEVEL=${LOG_LEVEL:-info}
      - CLAUDE_API_KEY=${CLAUDE_API_KEY}
      - OPENAI_API_KEY=${OPENAI_API_KEY:-}
      - GOOGLE_API_KEY=${GOOGLE_API_KEY:-}
      - MAX_AGENTS=${MAX_AGENTS:-100}
      - MAX_HIVES=${MAX_HIVES:-10}
      - ENABLE_GPU=${ENABLE_GPU:-false}
      - JWT_SECRET=${JWT_SECRET:-change-me-in-production}
    volumes:
      - claude-flow-data:/app/data
      - claude-flow-logs:/app/logs
      - claude-flow-memory:/app/memory
      - claude-flow-databases:/app/databases
    networks:
      - claude-flow-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:4000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    depends_on:
      postgres:
        condition: service_healthy
        required: false
    deploy:
      resources:
        limits:
          cpus: '2'
          memory: 4G
        reservations:
          cpus: '1'
          memory: 2G

  # MCP Server for Claude Integration
  mcp-server:
    build:
      context: .
      dockerfile: Dockerfile
      target: mcp-server
    container_name: claude-flow-mcp
    restart: unless-stopped
    ports:
      - "${MCP_PORT:-3000}:3000"
    environment:
      - NODE_ENV=production
      - MCP_SERVER_PORT=3000
      - SQLITE_DB_PATH=/app/databases/hive-mind.db
      - LANCEDB_PATH=/app/databases/lancedb
      - KUZU_PATH=/app/databases/kuzu
      - LOG_LEVEL=${LOG_LEVEL:-info}
      - ENABLE_ALL_TOOLS=true
      - ENABLE_GIT_TOOLS=true
    volumes:
      - claude-flow-data:/app/data:ro
      - claude-flow-memory:/app/memory
      - claude-flow-databases:/app/databases
    networks:
      - claude-flow-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    depends_on:
      - api-server

  # PostgreSQL Database (Optional - for enterprise deployments)
  postgres:
    image: pgvector/pgvector:pg16
    container_name: claude-flow-postgres
    restart: unless-stopped
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    environment:
      - POSTGRES_USER=${POSTGRES_USER:-claudeflow}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-claudeflow}
      - POSTGRES_DB=${POSTGRES_DB:-claudeflow}
      - PGDATA=/var/lib/postgresql/data/pgdata
    volumes:
      - postgres-data:/var/lib/postgresql/data
    networks:
      - claude-flow-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-claudeflow}"]
      interval: 10s
      timeout: 5s
      retries: 5
    profiles:
      - postgres
      - enterprise

  # Redis for caching and pub/sub (Optional)
  redis:
    image: redis:7-alpine
    container_name: claude-flow-redis
    restart: unless-stopped
    ports:
      - "${REDIS_PORT:-6379}:6379"
    volumes:
      - redis-data:/data
    command: >
      redis-server
      --appendonly yes
      --maxmemory 512mb
      --maxmemory-policy allkeys-lru
    networks:
      - claude-flow-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    profiles:
      - cache
      - enterprise

  # Nginx Reverse Proxy and Load Balancer
  nginx:
    image: nginx:alpine
    container_name: claude-flow-nginx
    restart: unless-stopped
    ports:
      - "${HTTP_PORT:-80}:80"
      - "${HTTPS_PORT:-443}:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
      - nginx-cache:/var/cache/nginx
    networks:
      - claude-flow-network
    depends_on:
      - api-server
      - mcp-server
    profiles:
      - production
      - enterprise

  # Prometheus for metrics
  prometheus:
    image: prom/prometheus:latest
    container_name: claude-flow-prometheus
    restart: unless-stopped
    ports:
      - "${PROMETHEUS_PORT:-9090}:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
      - '--storage.tsdb.retention.time=30d'
    networks:
      - claude-flow-network
    profiles:
      - monitoring
      - enterprise

  # Grafana for visualization
  grafana:
    image: grafana/grafana:latest
    container_name: claude-flow-grafana
    restart: unless-stopped
    ports:
      - "${GRAFANA_PORT:-3001}:3000"
    environment:
      - GF_SECURITY_ADMIN_USER=${GRAFANA_USER:-admin}
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_INSTALL_PLUGINS=redis-datasource
    volumes:
      - grafana-data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    networks:
      - claude-flow-network
    depends_on:
      - prometheus
    profiles:
      - monitoring
      - enterprise

  # Backup service
  backup:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: claude-flow-backup
    restart: unless-stopped
    environment:
      - BACKUP_SCHEDULE=${BACKUP_SCHEDULE:-0 2 * * *}
      - BACKUP_RETENTION_DAYS=${BACKUP_RETENTION_DAYS:-7}
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID:-}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY:-}
      - BACKUP_S3_BUCKET=${BACKUP_S3_BUCKET:-}
    volumes:
      - claude-flow-data:/app/data:ro
      - claude-flow-databases:/app/databases:ro
      - backup-data:/backups
    command: ["node", "scripts/backup-service.js"]
    networks:
      - claude-flow-network
    profiles:
      - backup
      - enterprise

  # Development environment
  dev:
    build:
      context: .
      dockerfile: Dockerfile
      target: development
    container_name: claude-flow-dev
    ports:
      - "4000:4000"
      - "4001:4001"
      - "3000:3000"
      - "9229:9229"  # Node.js debugger
    environment:
      - NODE_ENV=development
      - DEBUG=claude-flow:*
    volumes:
      - .:/app
      - /app/node_modules  # Prevent overwriting node_modules
      - dev-databases:/app/databases
    networks:
      - claude-flow-network
    stdin_open: true
    tty: true
    profiles:
      - development

  # Test runner
  test:
    build:
      context: .
      dockerfile: Dockerfile
      target: testing
    container_name: claude-flow-test
    environment:
      - NODE_ENV=test
      - CI=true
    volumes:
      - .:/app:ro
      - test-results:/app/coverage
    networks:
      - claude-flow-network
    profiles:
      - test

networks:
  claude-flow-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.30.0.0/16

volumes:
  # Production volumes
  claude-flow-data:
    driver: local
  claude-flow-logs:
    driver: local
  claude-flow-memory:
    driver: local
  claude-flow-databases:
    driver: local
  
  # Service volumes
  postgres-data:
    driver: local
  redis-data:
    driver: local
  prometheus-data:
    driver: local
  grafana-data:
    driver: local
  nginx-cache:
    driver: local
  backup-data:
    driver: local
  
  # Development volumes
  dev-databases:
    driver: local
  test-results:
    driver: local