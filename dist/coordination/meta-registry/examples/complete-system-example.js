/**\n * Complete Ultra-Modular Meta Registry System Example\n * Demonstrates the full hierarchy: Vision to Epic to Feature to PRD to ADR to User Story to Task to Queen Assignment\n */\n\nimport MetaRegistry, { MetaRegistryManager } from '../meta-manager.js';\nimport MemoryBackend from '../backends/memory-backend.js';\nimport JSONBackend from '../backends/json-backend.js';\nimport MemoryRAGPlugin from '../plugins/memory-rag.js';\nimport ArchitectAdvisorPlugin from '../plugins/architect-advisor.js';\nimport HierarchicalTaskManagerPlugin from '../plugins/hierarchical-task-manager.js';\nimport PortDiscoveryPlugin from '../plugins/port-discovery.js';\nimport PubSubPlugin from '../plugins/pubsub.js';\nimport NATTraversalPlugin from '../plugins/nat-traversal.js';\n\n/**\n * Complete system demonstration\n */\nexport class CompleteSystemExample {\n  constructor() {\n    this.manager = null;\n    this.mainRegistry = null;\n    this.hierarchyManager = null;\n  }\n\n  async initialize() {\n    console.log('🚀 Initializing Complete Ultra-Modular Meta Registry System...');\n    \n    // 1. Create Meta Registry Manager\n    this.manager = new MetaRegistryManager({\n      maxRegistries: 10,\n      healthCheckInterval: 30000,\n      failoverEnabled: true,\n      loadBalancing: 'performance'\n    });\n    \n    await this.manager.initialize();\n    console.log('✅ Meta Registry Manager initialized');\n    \n    // 2. Create main registry with intelligent backends\n    const mainBackend = new JSONBackend('./data/main-registry.json', {\n      autoSave: true,\n      backup: true\n    });\n    \n    this.mainRegistry = await this.manager.createRegistry('main', mainBackend, {\n      setAsActive: true\n    });\n    \n    // 3. Install all plugins for complete functionality\n    await this.installAllPlugins();\n    \n    console.log('✅ Complete system initialized with all plugins');\n    \n    return this;\n  }\n  \n  async installAllPlugins() {\n    console.log('📦 Installing all plugins...');\n    \n    // Core intelligence plugins\n    this.mainRegistry\n      .use('memory-rag', new MemoryRAGPlugin(), {\n        memoryPath: './data/memory',\n        enableLearning: true,\n        maxMemorySize: 5000\n      })\n      .use('architect-advisor', new ArchitectAdvisorPlugin(), {\n        adrPath: './data/adrs',\n        enableAutoAnalysis: true,\n        approvalRequired: true\n      })\n      .use('hierarchical-task-manager', new HierarchicalTaskManagerPlugin(), {\n        hierarchyPath: './data/hierarchy',\n        autoBreakdown: true,\n        enableQueenCoordination: true\n      })\n      // Infrastructure plugins\n      .use('port-discovery', new PortDiscoveryPlugin(), {\n        monitorInterval: 30000,\n        autoCleanup: true\n      })\n      .use('pubsub', new PubSubPlugin(), {\n        messageRetention: 3600\n      })\n      .use('nat-traversal', new NATTraversalPlugin(), {\n        enableSTUN: true,\n        enableUPnP: true,\n        enableRelay: true\n      });\n    \n    // Initialize all plugins\n    await this.mainRegistry.initialize();\n    \n    // Get reference to hierarchical task manager\n    this.hierarchyManager = this.mainRegistry.pluginSystem.getPlugin('hierarchical-task-manager');\n    \n    console.log('✅ All plugins installed and initialized');\n  }\n  \n  async demonstrateCompleteWorkflow() {\n    console.log('\\n🎯 DEMONSTRATING COMPLETE WORKFLOW: Vision → Implementation');\n    console.log('=' .repeat(70));\n    \n    // Step 1: Create Vision\n    const visionId = await this.createSampleVision();\n    \n    // Step 2: AI automatically breaks down into Epics\n    await this.demonstrateAutoBreakdown(visionId);\n    \n    // Step 3: Show intelligent suggestions\n    await this.demonstrateIntelligentSuggestions();\n    \n    // Step 4: Demonstrate ADR generation\n    await this.demonstrateADRGeneration();\n    \n    // Step 5: Show Queen task assignment\n    await this.demonstrateQueenAssignment();\n    \n    // Step 6: Show coordination capabilities\n    await this.demonstrateSwarmCoordination();\n    \n    // Step 7: Show system intelligence\n    await this.demonstrateSystemIntelligence();\n    \n    console.log('\\n✅ Complete workflow demonstration finished!');\n  }\n  \n  async createSampleVision() {\n    console.log('\\n1️⃣ Creating Sample Vision...');\n    \n    const visionData = {\n      title: 'Next-Generation AI-Powered Task Management Platform',\n      description: 'Build an intelligent task management system that uses AI to automatically break down work, suggest optimizations, and coordinate distributed teams through adaptive workflow orchestration.',\n      objectives: [\n        'Create intelligent task decomposition system',\n        'Implement adaptive workflow coordination',\n        'Build distributed team collaboration features',\n        'Develop real-time performance optimization',\n        'Integrate advanced AI decision support'\n      ],\n      stakeholders: ['Product Team', 'Engineering', 'AI Research', 'Users'],\n      timeline: '12 months',\n      priority: 'high',\n      source: 'product-vision'\n    };\n    \n    const visionId = await this.hierarchyManager.createVision(visionData);\n    \n    console.log(`✅ Vision created: ${visionId}`);\n    console.log(`   Title: ${visionData.title}`);\n    console.log(`   Objectives: ${visionData.objectives.length}`);\n    \n    return visionId;\n  }\n  \n  async demonstrateAutoBreakdown(visionId) {\n    console.log('\\n2️⃣ Demonstrating AI Auto-Breakdown...');\n    \n    // The system automatically breaks down vision into epics\n    console.log('   🤖 AI is analyzing vision and creating epics...');\n    \n    // Simulate some time for AI processing\n    await new Promise(resolve => setTimeout(resolve, 1000));\n    \n    // Get the auto-generated epics\n    const vision = this.hierarchyManager.visions.get(visionId);\n    const epics = vision.children.epics;\n    \n    console.log(`✅ Auto-generated ${epics.length} epics:`);\n    \n    for (const epicId of epics) {\n      const epic = this.hierarchyManager.epics.get(epicId);\n      if (epic) {\n        console.log(`   📋 Epic: ${epic.title}`);\n        \n        // Each epic will auto-generate features\n        console.log(`      → Auto-generating features...`);\n        await new Promise(resolve => setTimeout(resolve, 500));\n        \n        const features = epic.children.features;\n        console.log(`      → Generated ${features.length} features`);\n        \n        // Show first feature breakdown\n        if (features.length > 0) {\n          const feature = this.hierarchyManager.features.get(features[0]);\n          if (feature) {\n            console.log(`      📝 Sample Feature: ${feature.title}`);\n            \n            // Auto-generate PRD\n            if (feature.children.prds.length > 0) {\n              const prd = this.hierarchyManager.prds.get(feature.children.prds[0]);\n              console.log(`      📄 Auto-generated PRD: ${prd.title}`);\n            }\n            \n            // Auto-generate user stories\n            const userStories = feature.children.userStories;\n            console.log(`      👤 Generated ${userStories.length} user stories`);\n            \n            // Show task breakdown\n            if (userStories.length > 0) {\n              const story = this.hierarchyManager.userStories.get(userStories[0]);\n              const tasks = story.children.tasks;\n              console.log(`      ⚙️  Generated ${tasks.length} tasks for implementation`);\n            }\n          }\n        }\n      }\n    }\n  }\n  \n  async demonstrateIntelligentSuggestions() {\n    console.log('\\n3️⃣ Demonstrating Intelligent Suggestions...');\n    \n    // Get suggestions from the system\n    const suggestions = await this.hierarchyManager.suggestMissingComponents();\n    \n    console.log(`🧠 AI identified ${suggestions.length} improvement suggestions:`);\n    \n    for (const suggestion of suggestions.slice(0, 3)) {\n      console.log(`   💡 ${suggestion.type}: ${suggestion.suggestion}`);\n      console.log(`      Confidence: ${(suggestion.confidence * 100).toFixed(1)}%`);\n    }\n    \n    // Show completeness analysis\n    const visionId = Array.from(this.hierarchyManager.visions.keys())[0];\n    const completeness = await this.hierarchyManager.analyzeCompleteness(visionId, 'vision');\n    \n    console.log(`\\n📊 Vision Completeness Analysis:`);\n    console.log(`   Overall: ${(completeness.analysis.completeness * 100).toFixed(1)}%`);\n    console.log(`   Missing Epics: ${completeness.analysis.missingEpics || 0}`);\n    \n    if (completeness.suggestions.length > 0) {\n      console.log(`   🎯 AI Suggestions:`);\n      for (const suggestion of completeness.suggestions) {\n        console.log(`      - ${suggestion.suggestion}`);\n      }\n    }\n  }\n  \n  async demonstrateADRGeneration() {\n    console.log('\\n4️⃣ Demonstrating ADR Generation...');\n    \n    const advisor = this.mainRegistry.pluginSystem.getPlugin('architect-advisor');\n    \n    console.log('   🏗️  AI Architect is analyzing system patterns...');\n    \n    // Simulate architectural analysis\n    await advisor.performArchitecturalAnalysis();\n    \n    const suggestions = await advisor.getSuggestions({ status: 'pending' });\n    \n    console.log(`✅ Generated ${suggestions.length} architectural suggestions:`);\n    \n    for (const suggestion of suggestions.slice(0, 2)) {\n      console.log(`   📋 ADR: ${suggestion.title}`);\n      console.log(`      Type: ${suggestion.type}`);\n      console.log(`      Impact: ${suggestion.impact}`);\n      console.log(`      Confidence: ${(suggestion.confidence * 100).toFixed(1)}%`);\n      \n      if (suggestion.adrDraft) {\n        console.log(`      📄 ADR Document: Generated and saved`);\n        console.log(`      ⏳ Status: Awaiting human approval`);\n      }\n    }\n  }\n  \n  async demonstrateQueenAssignment() {\n    console.log('\\n5️⃣ Demonstrating Queen Task Assignment...');\n    \n    // Get some tasks to assign\n    const allTasks = Array.from(this.hierarchyManager.tasks.values());\n    const unassignedTasks = allTasks.filter(task => task.status === 'todo');\n    \n    console.log(`👑 Found ${unassignedTasks.length} tasks ready for Queen assignment`);\n    \n    if (unassignedTasks.length > 0) {\n      const task = unassignedTasks[0];\n      const queenId = 'queen-specialist-ai';\n      \n      console.log(`   Assigning task to Queen: ${queenId}`);\n      console.log(`   Task: ${task.title}`);\n      console.log(`   Type: ${task.type}`);\n      console.log(`   Skills Required: ${task.skills.join(', ')}`);\n      \n      const assignmentId = await this.hierarchyManager.assignTaskToQueen(\n        task.id,\n        queenId,\n        {\n          priority: task.priority,\n          deadline: '1 week',\n          resources: ['development environment', 'code repository']\n        }\n      );\n      \n      console.log(`✅ Task assigned to Queen with ID: ${assignmentId}`);\n      \n      // Show how the task is registered for Queen discovery\n      const queenTasks = await this.mainRegistry.discover({\n        tags: ['queen-task', `queen:${queenId}`]\n      });\n      \n      console.log(`   📡 Queen can discover ${queenTasks.length} assigned tasks`);\n    }\n  }\n  \n  async demonstrateSwarmCoordination() {\n    console.log('\\n6️⃣ Demonstrating Swarm Coordination...');\n    \n    // Create a swarm for distributed task coordination\n    const swarmId = 'development-swarm-001';\n    const coordinator = await this.mainRegistry.createSwarmCoordinator(swarmId, {\n      topology: 'hierarchical',\n      maxAgents: 5,\n      purpose: 'distributed-development'\n    });\n    \n    console.log(`🐝 Created swarm: ${swarmId}`);\n    \n    // Register agents in the swarm\n    const agents = [\n      { id: 'frontend-specialist', type: 'frontend-dev', skills: ['react', 'typescript'] },\n      { id: 'backend-specialist', type: 'backend-dev', skills: ['node.js', 'python'] },\n      { id: 'ai-specialist', type: 'ai-dev', skills: ['machine-learning', 'nlp'] },\n      { id: 'devops-specialist', type: 'devops', skills: ['docker', 'kubernetes'] }\n    ];\n    \n    for (const agent of agents) {\n      await coordinator.registerAgent(agent.id, agent);\n      console.log(`   👤 Registered agent: ${agent.id} (${agent.type})`);\n    }\n    \n    // Demonstrate swarm discovery\n    const discoveredAgents = await coordinator.discoverAgents();\n    console.log(`   🔍 Swarm can discover ${discoveredAgents.length} agents`);\n    \n    // Demonstrate messaging\n    await coordinator.broadcast({\n      type: 'task-notification',\n      message: 'New development tasks are available for assignment',\n      priority: 'high'\n    });\n    \n    console.log(`   📨 Broadcast message sent to all agents`);\n    \n    // Show swarm statistics\n    const stats = coordinator.getStats();\n    console.log(`   📊 Swarm Stats: ${stats.agentCount} agents, topology: ${stats.topology}`);\n  }\n  \n  async demonstrateSystemIntelligence() {\n    console.log('\\n7️⃣ Demonstrating System Intelligence...');\n    \n    // Show Memory & RAG capabilities\n    const memoryRag = this.mainRegistry.pluginSystem.getPlugin('memory-rag');\n    \n    console.log('🧠 Memory & RAG System:');\n    const memoryStats = memoryRag.getStats();\n    console.log(`   📚 Memory Entries: ${memoryStats.memory.entries}`);\n    console.log(`   🕸️  Knowledge Nodes: ${memoryStats.knowledge.nodes}`);\n    console.log(`   🔄 Learned Patterns: ${memoryStats.patterns.total}`);\n    \n    // Demonstrate intelligent query\n    const queryResult = await memoryRag.query(\n      'What are the best practices for task breakdown?',\n      { domain: 'project-management' }\n    );\n    \n    console.log(`   💭 AI Query Response: ${queryResult.suggestions.length} suggestions generated`);\n    \n    // Show plugin coordination\n    console.log('\\n🔧 Plugin Coordination:');\n    const pluginList = this.mainRegistry.pluginSystem.listPlugins();\n    console.log(`   🧩 Active Plugins: ${pluginList.length}`);\n    \n    for (const plugin of pluginList) {\n      console.log(`      - ${plugin.name}: ${plugin.initialized ? '✅' : '⏳'}`);\n    }\n    \n    // Show intelligent infrastructure\n    const portPlugin = this.mainRegistry.pluginSystem.getPlugin('port-discovery');\n    const portStats = await portPlugin.getPortStats();\n    console.log(`\\n🌐 Infrastructure Intelligence:`);\n    console.log(`   🔌 Managed Ports: ${portStats.allocated}`);\n    console.log(`   📡 Active Monitoring: ${portStats.monitored}`);\n    \n    // Show pub/sub coordination\n    const pubsub = this.mainRegistry.pluginSystem.getPlugin('pubsub');\n    const pubsubStats = await pubsub.getStats();\n    console.log(`   📢 PubSub Topics: ${pubsubStats.topics}`);\n    console.log(`   👥 Active Subscriptions: ${pubsubStats.subscriptions}`);\n  }\n  \n  async showSystemStatus() {\n    console.log('\\n📊 COMPLETE SYSTEM STATUS');\n    console.log('=' .repeat(50));\n    \n    // Manager status\n    const managerStats = await this.manager.getStats();\n    console.log('🎛️  Meta Registry Manager:');\n    console.log(`   Registries: ${managerStats.registries.total}`);\n    console.log(`   Active Registry: ${managerStats.registries.active}`);\n    console.log(`   Federations: ${managerStats.federations.total}`);\n    \n    // Hierarchy status\n    const hierarchyStats = this.hierarchyManager.getStats();\n    console.log('\\n📋 Hierarchical Task System:');\n    console.log(`   Visions: ${hierarchyStats.hierarchy.visions}`);\n    console.log(`   Epics: ${hierarchyStats.hierarchy.epics}`);\n    console.log(`   Features: ${hierarchyStats.hierarchy.features}`);\n    console.log(`   PRDs: ${hierarchyStats.hierarchy.prds}`);\n    console.log(`   User Stories: ${hierarchyStats.hierarchy.userStories}`);\n    console.log(`   Tasks: ${hierarchyStats.hierarchy.tasks}`);\n    console.log(`   Active Assignments: ${hierarchyStats.hierarchy.assignments}`);\n    \n    // Task completion status\n    console.log('\\n⚙️  Task Execution:');\n    console.log(`   Total Tasks: ${hierarchyStats.status.totalItems}`);\n    console.log(`   Completed: ${hierarchyStats.status.completedTasks}`);\n    console.log(`   In Progress: ${hierarchyStats.status.activeTasks}`);\n    \n    // Intelligence status\n    const advisor = this.mainRegistry.pluginSystem.getPlugin('architect-advisor');\n    const advisorStats = advisor.getStats();\n    console.log('\\n🤖 AI Intelligence:');\n    console.log(`   Pending Suggestions: ${advisorStats.suggestions.pending}`);\n    console.log(`   Approved ADRs: ${advisorStats.suggestions.approved}`);\n    console.log(`   Analysis History: ${advisorStats.analysis.historySize}`);\n    \n    console.log('\\n✅ System is fully operational and intelligent!');\n  }\n  \n  async cleanup() {\n    console.log('\\n🧹 Cleaning up system...');\n    \n    await this.manager.close();\n    console.log('✅ System shutdown complete');\n  }\n}\n\n// Main execution function\nexport async function runCompleteExample() {\n  const example = new CompleteSystemExample();\n  \n  try {\n    await example.initialize();\n    await example.demonstrateCompleteWorkflow();\n    await example.showSystemStatus();\n  } catch (error) {\n    console.error('❌ Error in example:', error.message);\n  } finally {\n    await example.cleanup();\n  }\n}\n\n// Run if executed directly\nif (import.meta.url === `file://${process.argv[1]}`) {\n  runCompleteExample().catch(console.error);\n}\n\nexport default CompleteSystemExample;"