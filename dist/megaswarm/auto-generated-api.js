/**
 * AUTO-GENERATED API SYSTEM
 * Automatically creates REST endpoints from unified command schema
 * Real-time WebSocket coordination for megaswarm operations
 */

import express from 'express';
import { WebSocketServer } from 'ws';
import { createServer } from 'http';
import cors from 'cors';
import helmet from 'helmet';
import { UNIFIED_COMMAND_SCHEMA, generateAPIRoutes } from './unified-command-schema.js';
import { executeUnifiedCommand, generateUnifiedHelp } from './unified-command-executor.js';
import { megaswarmOrchestrator } from './megaswarm-orchestrator.js';
import { printSuccess, printError, printInfo } from '../cli/utils.js';

/**
 * Auto-generated API server with WebSocket coordination
 */
export class AutoGeneratedAPIServer {
  constructor(options = {}) {
    this.options = {
      port: options.port || 3001,
      enableCors: options.enableCors !== false,
      enableSecurity: options.enableSecurity !== false,
      enableWebSocket: options.enableWebSocket !== false,
      enableSwagger: options.enableSwagger !== false,
      ...options
    };

    this.app = express();
    this.server = null;
    this.wss = null;
    this.connections = new Set();
    this.isRunning = false;
  }

  /**
   * Initialize and start the API server
   */
  async start() {
    if (this.isRunning) {
      printInfo('API server already running');
      return;
    }

    try {
      await this.setupMiddleware();
      await this.setupRoutes();
      await this.setupWebSocket();
      
      this.server = createServer(this.app);
      
      if (this.options.enableWebSocket) {
        this.wss = new WebSocketServer({ server: this.server });
        this.setupWebSocketHandlers();
      }

      await new Promise((resolve) => {
        this.server.listen(this.options.port, () => {
          this.isRunning = true;
          printSuccess(`🌊 Auto-generated API server running on http://localhost:${this.options.port}`);
          printInfo(`📚 API documentation: http://localhost:${this.options.port}/docs`);
          printInfo(`🔗 WebSocket endpoint: ws://localhost:${this.options.port}/ws`);
          resolve();
        });
      });

      // Setup megaswarm event listeners
      await this.setupMegaswarmIntegration();

    } catch (error) {
      printError(`Failed to start API server: ${error.message}`);
      throw error;
    }
  }

  /**
   * Setup Express middleware
   */
  async setupMiddleware() {
    // Security
    if (this.options.enableSecurity) {
      this.app.use(helmet());
    }

    // CORS
    if (this.options.enableCors) {
      this.app.use(cors({
        origin: true, // Allow all origins in development
        methods: ['GET', 'POST', 'PUT', 'DELETE', 'OPTIONS'],
        allowedHeaders: ['Content-Type', 'Authorization', 'X-Request-ID', 'X-User-ID']
      }));
    }

    // Body parsing
    this.app.use(express.json({ limit: '10mb' }));
    this.app.use(express.urlencoded({ extended: true, limit: '10mb' }));

    // Request logging
    this.app.use((req, res, next) => {
      const requestId = req.headers['x-request-id'] || `req-${Date.now()}`;
      req.requestId = requestId;
      printInfo(`📥 ${req.method} ${req.path} (${requestId})`);
      next();
    });
  }

  /**
   * Setup auto-generated routes from schema
   */
  async setupRoutes() {
    // Health check
    this.app.get('/health', (req, res) => {
      res.json({
        status: 'healthy',
        uptime: process.uptime(),
        timestamp: new Date().toISOString(),
        megaswarms: megaswarmOrchestrator.getStatus().totalMegaswarms,
        version: '2.0.0-megaswarm'
      });
    });

    // Auto-generated command routes
    const apiRoutes = generateAPIRoutes(UNIFIED_COMMAND_SCHEMA, express);
    this.app.use('/api/v2', apiRoutes);

    // Enhanced command execution endpoint
    this.app.post('/api/v2/execute', async (req, res) => {
      try {
        const { command, args = [], options = {} } = req.body;
        
        if (!command) {
          return res.status(400).json({
            success: false,
            error: 'Command is required',
            timestamp: new Date().toISOString()
          });
        }

        const result = await executeUnifiedCommand(command, args, options, {
          interface: 'web',
          requestId: req.requestId,
          userId: req.headers['x-user-id']
        });

        // Broadcast to WebSocket clients if it's a megaswarm command
        if (command.includes('swarm') && this.wss) {
          this.broadcastToWebSocket({
            type: 'command_executed',
            command,
            result: result.success !== false ? 'success' : 'error',
            timestamp: new Date().toISOString()
          });
        }

        res.json({
          success: true,
          command,
          result,
          requestId: req.requestId,
          timestamp: new Date().toISOString()
        });

      } catch (error) {
        printError(`API execution error: ${error.message}`);
        res.status(500).json({
          success: false,
          error: error.message,
          requestId: req.requestId,
          timestamp: new Date().toISOString()
        });
      }
    });

    // Command schema endpoint
    this.app.get('/api/v2/schema', (req, res) => {
      res.json({
        schema: UNIFIED_COMMAND_SCHEMA,
        version: '2.0.0-megaswarm',
        timestamp: new Date().toISOString()
      });
    });

    // Help endpoint
    this.app.get('/api/v2/help/:command?', (req, res) => {
      const { command } = req.params;
      const help = generateUnifiedHelp(command);
      
      res.json({
        command: command || 'all',
        help,
        timestamp: new Date().toISOString()
      });
    });

    // Megaswarm status endpoint
    this.app.get('/api/v2/megaswarm/status/:id?', async (req, res) => {
      try {
        const { id } = req.params;
        const status = megaswarmOrchestrator.getStatus(id);
        
        res.json({
          success: true,
          status,
          timestamp: new Date().toISOString()
        });
        
      } catch (error) {
        res.status(500).json({
          success: false,
          error: error.message,
          timestamp: new Date().toISOString()
        });
      }
    });

    // Interactive documentation
    if (this.options.enableSwagger) {
      this.setupSwaggerDocs();
    }
  }

  /**
   * Setup WebSocket for real-time coordination
   */
  setupWebSocketHandlers() {
    this.wss.on('connection', (ws, req) => {
      const clientId = `client-${Date.now()}`;
      ws.clientId = clientId;
      this.connections.add(ws);

      printInfo(`🔌 WebSocket client connected: ${clientId}`);

      // Send welcome message with available commands
      ws.send(JSON.stringify({
        type: 'welcome',
        clientId,
        availableCommands: Object.keys(UNIFIED_COMMAND_SCHEMA).filter(k => !k.startsWith('__')),
        timestamp: new Date().toISOString()
      }));

      // Handle incoming messages
      ws.on('message', async (data) => {
        try {
          const message = JSON.parse(data.toString());
          await this.handleWebSocketMessage(ws, message);
        } catch (error) {
          ws.send(JSON.stringify({
            type: 'error',
            error: error.message,
            timestamp: new Date().toISOString()
          }));
        }
      });

      // Handle disconnection
      ws.on('close', () => {
        this.connections.delete(ws);
        printInfo(`🔌 WebSocket client disconnected: ${clientId}`);
      });
    });
  }

  /**
   * Handle WebSocket messages for real-time command execution
   */
  async handleWebSocketMessage(ws, message) {
    const { type, command, args = [], options = {} } = message;

    switch (type) {
      case 'execute_command':
        try {
          const result = await executeUnifiedCommand(command, args, options, {
            interface: 'websocket',
            clientId: ws.clientId
          });

          ws.send(JSON.stringify({
            type: 'command_result',
            command,
            success: true,
            result,
            timestamp: new Date().toISOString()
          }));

          // Broadcast to other clients if it's a megaswarm command
          if (command.includes('swarm')) {
            this.broadcastToWebSocket({
              type: 'swarm_update',
              command,
              clientId: ws.clientId,
              timestamp: new Date().toISOString()
            }, ws);
          }

        } catch (error) {
          ws.send(JSON.stringify({
            type: 'command_error',
            command,
            error: error.message,
            timestamp: new Date().toISOString()
          }));
        }
        break;

      case 'subscribe_megaswarm':
        ws.isSubscribedToMegaswarm = true;
        ws.send(JSON.stringify({
          type: 'subscription_confirmed',
          subscription: 'megaswarm',
          timestamp: new Date().toISOString()
        }));
        break;

      case 'get_status':
        const status = megaswarmOrchestrator.getStatus();
        ws.send(JSON.stringify({
          type: 'status_response',
          status,
          timestamp: new Date().toISOString()
        }));
        break;

      default:
        ws.send(JSON.stringify({
          type: 'unknown_message_type',
          receivedType: type,
          timestamp: new Date().toISOString()
        }));
    }
  }

  /**
   * Broadcast message to WebSocket clients
   */
  broadcastToWebSocket(message, excludeWs = null) {
    const messageStr = JSON.stringify(message);
    
    this.connections.forEach(ws => {
      if (ws !== excludeWs && ws.readyState === ws.OPEN) {
        ws.send(messageStr);
      }
    });
  }

  /**
   * Setup megaswarm integration for real-time updates
   */
  async setupMegaswarmIntegration() {
    await megaswarmOrchestrator.initialize();

    // Listen for megaswarm events
    megaswarmOrchestrator.on('metrics', (metrics) => {
      this.broadcastToWebSocket({
        type: 'megaswarm_metrics',
        metrics,
        timestamp: new Date().toISOString()
      });
    });

    megaswarmOrchestrator.coordinationChannel.on('message', (data) => {
      this.broadcastToWebSocket({
        type: 'coordination_message',
        data,
        timestamp: new Date().toISOString()
      });
    });

    printInfo('🐝 Megaswarm integration established');
  }

  /**
   * Setup interactive API documentation
   */
  setupSwaggerDocs() {
    // Create interactive documentation page
    this.app.get('/docs', (req, res) => {
      const html = this.generateSwaggerHTML();
      res.send(html);
    });

    // OpenAPI specification
    this.app.get('/openapi.json', (req, res) => {
      const spec = this.generateOpenAPISpec();
      res.json(spec);
    });
  }

  /**
   * Generate OpenAPI specification
   */
  generateOpenAPISpec() {
    return {
      openapi: '3.0.0',
      info: {
        title: 'Claude-Zen Megaswarm API',
        version: '2.0.0-megaswarm',
        description: 'Auto-generated API for context-preserving Claude orchestration'
      },
      servers: [
        { url: `http://localhost:${this.options.port}/api/v2` }
      ],
      paths: this.generateOpenAPIPaths(),
      components: {
        schemas: this.generateOpenAPISchemas()
      }
    };
  }

  /**
   * Generate OpenAPI paths from schema
   */
  generateOpenAPIPaths() {
    const paths = {
      '/execute': {
        post: {
          summary: 'Execute any unified command',
          requestBody: {
            required: true,
            content: {
              'application/json': {
                schema: {
                  type: 'object',
                  properties: {
                    command: { type: 'string', description: 'Command name' },
                    args: { type: 'array', items: { type: 'string' } },
                    options: { type: 'object' }
                  },
                  required: ['command']
                }
              }
            }
          },
          responses: {
            200: {
              description: 'Command executed successfully',
              content: {
                'application/json': {
                  schema: { $ref: '#/components/schemas/CommandResponse' }
                }
              }
            }
          }
        }
      }
    };

    // Add specific command paths
    Object.entries(UNIFIED_COMMAND_SCHEMA).forEach(([cmdName, cmdConfig]) => {
      if (cmdName.startsWith('__') || !cmdConfig.interfaces?.web?.enabled) return;
      
      const { endpoint, method } = cmdConfig.interfaces.web;
      
      if (!paths[endpoint]) paths[endpoint] = {};
      
      paths[endpoint][method.toLowerCase()] = {
        summary: cmdConfig.description,
        tags: [cmdConfig.category || 'general'],
        parameters: this.generatePathParameters(endpoint),
        requestBody: method !== 'GET' ? {
          required: true,
          content: {
            'application/json': {
              schema: this.generateRequestSchema(cmdConfig)
            }
          }
        } : undefined,
        responses: {
          200: {
            description: 'Success',
            content: {
              'application/json': {
                schema: { $ref: '#/components/schemas/CommandResponse' }
              }
            }
          }
        }
      };
    });

    return paths;
  }

  /**
   * Generate OpenAPI schemas
   */
  generateOpenAPISchemas() {
    return {
      CommandResponse: {
        type: 'object',
        properties: {
          success: { type: 'boolean' },
          command: { type: 'string' },
          result: { type: 'object' },
          timestamp: { type: 'string', format: 'date-time' }
        }
      },
      MegaswarmStatus: {
        type: 'object',
        properties: {
          totalMegaswarms: { type: 'number' },
          totalInstances: { type: 'number' },
          metrics: { type: 'object' },
          activeMegaswarms: { type: 'array', items: { type: 'string' } }
        }
      }
    };
  }

  /**
   * Generate Swagger HTML documentation
   */
  generateSwaggerHTML() {
    return `<!DOCTYPE html>
<html>
<head>
    <title>Claude-Zen Megaswarm API</title>
    <link rel="stylesheet" type="text/css" href="https://unpkg.com/swagger-ui-dist@3.25.0/swagger-ui.css" />
    <style>
      html { box-sizing: border-box; overflow: -moz-scrollbars-vertical; overflow-y: scroll; }
      *, *:before, *:after { box-sizing: inherit; }
      body { margin:0; background: #fafafa; }
    </style>
</head>
<body>
    <div id="swagger-ui"></div>
    <script src="https://unpkg.com/swagger-ui-dist@3.25.0/swagger-ui-bundle.js"></script>
    <script>
    SwaggerUIBundle({
      url: '/openapi.json',
      dom_id: '#swagger-ui',
      presets: [
        SwaggerUIBundle.presets.apis,
        SwaggerUIBundle.presets.standalone
      ],
      layout: "StandaloneLayout"
    })
    </script>
</body>
</html>`;
  }

  /**
   * Stop the API server
   */
  async stop() {
    if (!this.isRunning) return;

    return new Promise((resolve) => {
      // Close WebSocket connections
      this.connections.forEach(ws => {
        ws.close();
      });

      // Close server
      this.server.close(() => {
        this.isRunning = false;
        printInfo('🌊 API server stopped');
        resolve();
      });
    });
  }

  /**
   * Get server status
   */
  getStatus() {
    return {
      running: this.isRunning,
      port: this.options.port,
      connections: this.connections.size,
      megaswarms: megaswarmOrchestrator.getStatus()
    };
  }

  // Helper methods for path parameter and request schema generation
  generatePathParameters(endpoint) {
    const params = [];
    const paramMatches = endpoint.match(/:(\w+)/g);
    
    if (paramMatches) {
      paramMatches.forEach(match => {
        const paramName = match.substring(1);
        params.push({
          name: paramName,
          in: 'path',
          required: true,
          schema: { type: 'string' }
        });
      });
    }
    
    return params;
  }

  generateRequestSchema(cmdConfig) {
    return {
      type: 'object',
      properties: {
        args: { type: 'array', items: { type: 'string' } },
        options: this.generateOptionsSchema(cmdConfig.options)
      }
    };
  }

  generateOptionsSchema(options) {
    if (!options) return { type: 'object' };
    
    const properties = {};
    Object.entries(options).forEach(([name, config]) => {
      properties[name] = {
        type: config.type,
        default: config.default,
        description: config.description
      };
      
      if (config.choices) {
        properties[name].enum = config.choices;
      }
    });
    
    return { type: 'object', properties };
  }
}

// Export singleton instance
export const autoGeneratedAPI = new AutoGeneratedAPIServer();
export default AutoGeneratedAPIServer;