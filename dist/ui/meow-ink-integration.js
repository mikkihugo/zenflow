#!/usr/bin/env node
/**
 * Meow + Ink Integration - Modern CLI with TUI
 * Connects meow command parsing with ink TUI components
 */
import React, { useState, useEffect } from 'react';
import { render, Box, Text, useInput } from 'ink';
import { createMeowCLI, executeCommand, listCommands, generateAPIEndpoints } from '../cli/command-registry.js';
import { AutoGeneratedAPI } from '../api/auto-generated-api.js';

const CLIInterface = ({ initialCommand = null, initialArgs = [], initialFlags = {} }) => {
  const [command, setCommand] = useState(initialCommand || '');
  const [output, setOutput] = useState([]);
  const [isExecuting, setIsExecuting] = useState(false);
  const [apiServer, setApiServer] = useState(null);
  const [mode, setMode] = useState('cli'); // 'cli', 'api', 'help'

  useEffect(() => {
    // Auto-execute if command provided
    if (initialCommand) {
      executeCommandWithOutput(initialCommand, initialArgs, initialFlags);
    }
  }, [initialCommand]);

  const executeCommandWithOutput = async (cmd, args = [], flags = {}) => {
    setIsExecuting(true);
    const timestamp = new Date().toISOString();
    
    try {
      // Capture output
      const originalLog = console.log;
      const originalError = console.error;
      const capturedOutput = [];
      
      console.log = (...args) => {
        capturedOutput.push({ type: 'info', message: args.join(' '), timestamp });
        originalLog(...args);
      };
      
      console.error = (...args) => {
        capturedOutput.push({ type: 'error', message: args.join(' '), timestamp });
        originalError(...args);
      };

      // Execute command
      await executeCommand(cmd, args, flags);
      
      // Restore console
      console.log = originalLog;
      console.error = originalError;
      
      // Update output
      setOutput(prev => [...prev, 
        { type: 'command', message: `$ claude-zen ${cmd} ${args.join(' ')}`, timestamp },
        ...capturedOutput,
        { type: 'success', message: `‚úÖ Command '${cmd}' completed successfully`, timestamp: new Date().toISOString() }
      ]);
      
    } catch (error) {
      setOutput(prev => [...prev, 
        { type: 'command', message: `$ claude-zen ${cmd} ${args.join(' ')}`, timestamp },
        { type: 'error', message: `‚ùå Error: ${error.message}`, timestamp: new Date().toISOString() }
      ]);
    } finally {
      setIsExecuting(false);
    }
  };

  const startAPIServer = async () => {
    if (apiServer) {
      setOutput(prev => [...prev, {
        type: 'info',
        message: '‚ö†Ô∏è API server already running',
        timestamp: new Date().toISOString()
      }]);
      return;
    }

    try {
      const api = new AutoGeneratedAPI({ port: 3001 });
      const result = await api.start();
      setApiServer(api);
      
      setOutput(prev => [...prev, {
        type: 'success',
        message: `üöÄ API Server started on port ${result.port}`,
        timestamp: new Date().toISOString()
      }, {
        type: 'info',
        message: `üìñ Documentation: ${result.documentation}`,
        timestamp: new Date().toISOString()
      }, {
        type: 'info',
        message: `üîó WebSocket: ${result.websocket}`,
        timestamp: new Date().toISOString()
      }]);
    } catch (error) {
      setOutput(prev => [...prev, {
        type: 'error',
        message: `‚ùå Failed to start API server: ${error.message}`,
        timestamp: new Date().toISOString()
      }]);
    }
  };

  const stopAPIServer = async () => {
    if (!apiServer) {
      setOutput(prev => [...prev, {
        type: 'info',
        message: '‚ö†Ô∏è No API server running',
        timestamp: new Date().toISOString()
      }]);
      return;
    }

    try {
      await apiServer.stop();
      setApiServer(null);
      
      setOutput(prev => [...prev, {
        type: 'success',
        message: 'üõë API Server stopped',
        timestamp: new Date().toISOString()
      }]);
    } catch (error) {
      setOutput(prev => [...prev, {
        type: 'error',
        message: `‚ùå Failed to stop API server: ${error.message}`,
        timestamp: new Date().toISOString()
      }]);
    }
  };

  useInput((input, key) => {
    if (key.ctrl && input === 'c') {
      process.exit(0);
    }
    
    if (input === 'q') {
      process.exit(0);
    }
    
    // Mode switching
    if (input === '1') setMode('cli');
    if (input === '2') setMode('api');
    if (input === '3') setMode('help');
    
    // Quick commands
    if (mode === 'cli') {
      if (input === 'h') {
        executeCommandWithOutput('help', [], {});
      }
      if (input === 's') {
        executeCommandWithOutput('status', [], { verbose: true });
      }
      if (input === 'i') {
        executeCommandWithOutput('init', [], { sparc: true });
      }
    }
    
    // API controls
    if (mode === 'api') {
      if (input === 's') {
        startAPIServer();
      }
      if (input === 'x') {
        stopAPIServer();
      }
      if (input === 'e') {
        const endpoints = generateAPIEndpoints();
        setOutput(prev => [...prev, {
          type: 'info',
          message: `üìã Generated ${Object.keys(endpoints).length} API endpoints`,
          timestamp: new Date().toISOString()
        }]);
      }
    }
  });

  const getStatusColor = (type) => {
    switch (type) {
      case 'success': return 'green';
      case 'error': return 'red';
      case 'command': return 'cyan';
      case 'info': return 'yellow';
      default: return 'white';
    }
  };

  const getModeColor = (targetMode) => {
    return mode === targetMode ? 'cyan' : 'gray';
  };

  return React.createElement(Box, { flexDirection: 'column', height: '100%' },
    // Header
    React.createElement(Box, { 
      borderStyle: 'double', 
      borderColor: 'cyan', 
      paddingX: 1, 
      marginBottom: 1
    },
      React.createElement(Box, { justifyContent: 'space-between', width: '100%' },
        React.createElement(Box, null,
          React.createElement(Text, { color: 'cyan', bold: true }, 'üöÄ Claude-Zen CLI/TUI Interface'),
          React.createElement(Text, { color: 'gray' }, ' (Meow + Ink Integration)')
        ),
        React.createElement(Box, null,
          React.createElement(Text, { color: isExecuting ? 'yellow' : 'green' }, 
            isExecuting ? '‚è≥ Executing...' : '‚úÖ Ready'
          )
        )
      )
    ),

    // Mode Navigation
    React.createElement(Box, { marginBottom: 1 },
      React.createElement(Text, { color: getModeColor('cli'), bold: mode === 'cli' }, '[1] CLI Commands '),
      React.createElement(Text, { color: getModeColor('api'), bold: mode === 'api' }, '[2] API Server '),
      React.createElement(Text, { color: getModeColor('help'), bold: mode === 'help' }, '[3] Help & Docs')
    ),

    // Content Area
    React.createElement(Box, { flexGrow: 1, flexDirection: 'column', paddingX: 1 },
      // Mode-specific content
      mode === 'cli' && React.createElement(Box, { flexDirection: 'column' },
        React.createElement(Text, { color: 'yellow', bold: true }, '‚å®Ô∏è CLI Mode - Quick Commands:'),
        React.createElement(Text, { color: 'white' }, '[H] Help ‚Ä¢ [S] Status ‚Ä¢ [I] Init'),
        React.createElement(Text, { color: 'gray', marginBottom: 1 }, 'Execute: claude-zen <command> [args]')
      ),
      
      mode === 'api' && React.createElement(Box, { flexDirection: 'column' },
        React.createElement(Text, { color: 'yellow', bold: true }, 'üåê API Server Mode:'),
        React.createElement(Text, { color: 'white' }, '[S] Start Server ‚Ä¢ [X] Stop Server ‚Ä¢ [E] Show Endpoints'),
        React.createElement(Text, { color: 'gray', marginBottom: 1 }, 
          apiServer ? `üü¢ Server running on port 3001` : `üî¥ Server stopped`
        )
      ),
      
      mode === 'help' && React.createElement(Box, { flexDirection: 'column' },
        React.createElement(Text, { color: 'yellow', bold: true }, 'üìñ Available Commands:'),
        ...listCommands().slice(0, 10).map((cmd, index) => 
          React.createElement(Text, { key: cmd.name, color: 'white' },
            `  ${cmd.name.padEnd(15)} ${cmd.description.substring(0, 50)}...`
          )
        ),
        React.createElement(Text, { color: 'gray', marginTop: 1 }, 
          `Showing 10 of ${listCommands().length} commands. Use 'claude-zen help' for full list.`
        )
      ),

      // Output Log
      React.createElement(Box, { 
        flexDirection: 'column', 
        marginTop: 1,
        borderStyle: 'single',
        borderColor: 'gray',
        paddingX: 1,
        height: 15
      },
        React.createElement(Text, { color: 'yellow', bold: true }, 'üìã Command Output:'),
        ...output.slice(-12).map((line, index) => 
          React.createElement(Text, { 
            key: index, 
            color: getStatusColor(line.type),
            wrap: 'wrap'
          }, `${new Date(line.timestamp).toLocaleTimeString()} ${line.message}`)
        )
      )
    ),

    // Footer
    React.createElement(Box, { 
      borderStyle: 'single', 
      borderColor: 'gray', 
      paddingX: 1, 
      marginTop: 1
    },
      React.createElement(Box, { justifyContent: 'space-between', width: '100%' },
        React.createElement(Box, null,
          React.createElement(Text, { color: 'gray' }, 'Navigation: [1-3] Switch modes ‚Ä¢ Mode-specific keys for actions')
        ),
        React.createElement(Box, null,
          React.createElement(Text, { color: 'gray' }, '[Q] or [Ctrl+C] Exit')
        )
      )
    )
  );
};

// Export for programmatic use
export const launchMeowInkInterface = (command = null, args = [], flags = {}) => {
  render(React.createElement(CLIInterface, { 
    initialCommand: command, 
    initialArgs: args, 
    initialFlags: flags 
  }));
};

// CLI launcher
export const launchCLI = () => {
  const cli = createMeowCLI();
  const { input, flags } = cli;
  
  if (flags.ui || flags.terminal) {
    // Launch TUI interface
    launchMeowInkInterface(input[0], input.slice(1), flags);
  } else {
    // Return parsed command for normal CLI execution
    return {
      command: input[0],
      args: input.slice(1),
      flags
    };
  }
};

// Main execution when run directly
if (import.meta.url === `file://${process.argv[1]}`) {
  console.log('üöÄ Starting Claude-Zen Meow+Ink Interface...');
  launchMeowInkInterface();
  
  // Handle graceful shutdown
  process.on('SIGINT', () => {
    console.log('\nüëã Claude-Zen interface shutting down...');
    process.exit(0);
  });
}

export default CLIInterface;