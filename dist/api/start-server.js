#!/usr/bin/env node

import { autoGeneratedAPI } from './auto-generated-api.js';
import path from 'path';
import express from 'express';
// import { DocumentStack, setupDefaultRules } from '../mcp/document-stack.cjs';

// Mock memory store
class MockMemoryStore {
  constructor() {
    this.data = new Map();
  }
  
  async store(key, value, options = {}) {
    const fullKey = options.namespace ? `${options.namespace}:${key}` : key;
    this.data.set(fullKey, value);
    return { id: fullKey, size: value.length };
  }
  
  async retrieve(key, options = {}) {
    const fullKey = options.namespace ? `${options.namespace}:${key}` : key;
    return this.data.get(fullKey) || null;
  }
  
  async search(options = {}) {
    const results = {};
    for (const [key, value] of this.data) {
      if (options.pattern === '*' || key.includes(options.pattern || '')) {
        results[key] = value;
      }
    }
    return results;
  }
}

// Initialize document stack
// const memoryStore = new MockMemoryStore();
// const docStack = new DocumentStack(memoryStore);
// setupDefaultRules(docStack);

async function startServer() {
  console.log('Starting Claude Zen API server with MCP, HTTP, and TUI support...');
  
  try {
    // Add static file serving for TUI
    const __dirname = path.dirname(new URL(import.meta.url).pathname);
    const uiPath = path.join(__dirname, '..', 'ui', 'web');
    
    // Serve TUI web interface
    autoGeneratedAPI.app.use('/ui', express.static(uiPath));
    
    // Add TUI endpoint
    autoGeneratedAPI.app.get('/tui', (req, res) => {
      res.redirect('/ui/index.html');
    });

    // HTML template for Document Stack
    const htmlTemplate = `<!DOCTYPE html>
<html>
<head>
  <title>Document Stack - Interactive Model</title>
  <style>
    :root {
      --primary: #0366d6;
      --success: #28a745;
      --warning: #ffc107;
      --danger: #dc3545;
      --dark: #24292e;
      --light: #f6f8fa;
      --border: #e1e4e8;
    }
    
    * {
      box-sizing: border-box;
    }
    
    body {
      font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif;
      margin: 0;
      padding: 0;
      background: var(--light);
      color: var(--dark);
      line-height: 1.5;
    }
    
    .header {
      background: var(--dark);
      color: white;
      padding: 1rem 0;
      box-shadow: 0 1px 3px rgba(0,0,0,0.1);
    }
    
    .container {
      max-width: 1200px;
      margin: 0 auto;
      padding: 0 2rem;
    }
    
    .header h1 {
      margin: 0;
      font-size: 1.5rem;
      display: flex;
      align-items: center;
      gap: 0.5rem;
    }
    
    .main {
      display: grid;
      grid-template-columns: 1fr 1fr;
      gap: 2rem;
      padding: 2rem 0;
    }
    
    .panel {
      background: white;
      border: 1px solid var(--border);
      border-radius: 6px;
      padding: 1.5rem;
    }
    
    .panel h2 {
      margin-top: 0;
      font-size: 1.25rem;
      border-bottom: 1px solid var(--border);
      padding-bottom: 0.5rem;
    }
    
    .form-group {
      margin-bottom: 1rem;
    }
    
    label {
      display: block;
      font-weight: 600;
      margin-bottom: 0.25rem;
      font-size: 0.875rem;
    }
    
    input, select, textarea {
      width: 100%;
      padding: 0.5rem;
      border: 1px solid var(--border);
      border-radius: 4px;
      font-size: 0.875rem;
    }
    
    textarea {
      min-height: 150px;
      font-family: monospace;
    }
    
    button {
      background: var(--primary);
      color: white;
      border: none;
      padding: 0.5rem 1rem;
      border-radius: 4px;
      font-size: 0.875rem;
      cursor: pointer;
      font-weight: 600;
    }
    
    button:hover {
      background: #0256c7;
    }
    
    .output {
      background: #f8f8f8;
      border: 1px solid var(--border);
      border-radius: 4px;
      padding: 1rem;
      font-family: monospace;
      font-size: 0.875rem;
      white-space: pre-wrap;
      max-height: 400px;
      overflow-y: auto;
    }
    
    .metadata {
      background: var(--light);
      border: 1px solid var(--border);
      border-radius: 4px;
      padding: 1rem;
      margin-top: 1rem;
    }
    
    .metadata h3 {
      margin-top: 0;
      font-size: 1rem;
    }
    
    .metadata dl {
      margin: 0;
      display: grid;
      grid-template-columns: auto 1fr;
      gap: 0.5rem;
    }
    
    .metadata dt {
      font-weight: 600;
      font-size: 0.875rem;
    }
    
    .metadata dd {
      margin: 0;
      font-size: 0.875rem;
    }
    
    .badge {
      display: inline-block;
      padding: 0.25rem 0.5rem;
      border-radius: 3px;
      font-size: 0.75rem;
      font-weight: 600;
      margin-right: 0.25rem;
    }
    
    .badge-layer {
      background: #e3f2fd;
      color: #1976d2;
    }
    
    .badge-service {
      background: #f3e5f5;
      color: #7b1fa2;
    }
    
    .approvers {
      display: flex;
      gap: 0.5rem;
      flex-wrap: wrap;
      margin-top: 0.5rem;
    }
    
    .approver {
      background: #fff3cd;
      color: #856404;
      padding: 0.25rem 0.5rem;
      border-radius: 3px;
      font-size: 0.75rem;
    }
    
    .feedback {
      background: #d4edda;
      border: 1px solid #c3e6cb;
      color: #155724;
      padding: 1rem;
      border-radius: 4px;
      margin-top: 1rem;
    }
    
    .status {
      text-align: center;
      padding: 2rem;
      background: var(--light);
      border-radius: 4px;
      margin-top: 1rem;
    }
  </style>
</head>
<body>
  <div class="header">
    <div class="container">
      <h1>📚 Document Stack Interactive Model</h1>
    </div>
  </div>
  
  <div class="container">
    <div class="main">
      <div class="panel">
        <h2>Create Document</h2>
        <form id="createForm">
          <div class="form-group">
            <label for="docType">Document Type</label>
            <select id="docType" name="docType" required>
              <option value="">Select type...</option>
              <option value="service-adr">Architecture Decision Record</option>
              <option value="api-documentation">API Documentation</option>
              <option value="security-spec">Security Specification</option>
              <option value="deployment-guide">Deployment Guide</option>
              <option value="user-guide">User Guide</option>
            </select>
          </div>
          
          <div class="form-group">
            <label for="service">Service Name</label>
            <input type="text" id="service" name="service" placeholder="e.g., user-service" required>
          </div>
          
          <div class="form-group">
            <label for="docId">Document ID</label>
            <input type="text" id="docId" name="docId" placeholder="e.g., use-postgres-for-storage" required>
          </div>
          
          <div class="form-group">
            <label for="content">Content</label>
            <textarea id="content" name="content" placeholder="Document content..." required></textarea>
          </div>
          
          <div class="form-group">
            <label for="dependencies">Dependencies (comma-separated)</label>
            <input type="text" id="dependencies" name="dependencies" placeholder="e.g., database-service, auth-service">
          </div>
          
          <div class="form-group">
            <label for="tags">Tags (comma-separated)</label>
            <input type="text" id="tags" name="tags" placeholder="e.g., architecture, database, postgresql">
          </div>
          
          <button type="submit">🚀 Process Document</button>
        </form>
      </div>
      
      <div class="panel">
        <h2>Results & Human Feedback</h2>
        <div id="results">
          <div class="status">
            <p>👈 Create a document to see how it's processed through the stack</p>
            <p>Similar to GitHub models, you'll see:</p>
            <ul style="text-align: left; display: inline-block;">
              <li>Automatic metadata generation</li>
              <li>Layer assignment</li>
              <li>Routing rules</li>
              <li>Approval requirements</li>
              <li>Human feedback options</li>
            </ul>
          </div>
        </div>
      </div>
    </div>
  </div>
  
  <script>
    // Load template when type is selected
    const templates = {
      'service-adr': \`# ADR: [Title]\\n\\n## Status\\nProposed - \${new Date().toISOString().split('T')[0]}\\n\\n## Context\\n[What is the issue that we're seeing that is motivating this decision or change?]\\n\\n## Decision\\n[What is the change that we're proposing and/or doing?]\\n\\n## Consequences\\n[What becomes easier or more difficult to do because of this change?]\`,
      
      'api-documentation': \`# API Documentation\\n\\n## Overview\\n[Brief description of the API]\\n\\n## Authentication\\n[How to authenticate]\\n\\n## Endpoints\\n\\n### GET /api/v1/[resource]\\n[Description]\\n\\n**Response:**\\n\\\`\\\`\\\`json\\n{\\n  "data": []\\n}\\n\\\`\\\`\\\`\\n\`,
      
      'security-spec': \`# Security Specification\\n\\n## Overview\\n[Security requirements overview]\\n\\n## Requirements\\n1. [Requirement 1]\\n2. [Requirement 2]\\n\\n## Implementation\\n[How to implement]\`
    };
    
    document.getElementById('docType').addEventListener('change', (e) => {
      const template = templates[e.target.value];
      if (template) {
        document.getElementById('content').value = template;
      }
    });
    
    // Handle form submission
    document.getElementById('createForm').addEventListener('submit', async (e) => {
      e.preventDefault();
      
      const formData = new FormData(e.target);
      const data = Object.fromEntries(formData);
      
      // Process dependencies and tags
      if (data.dependencies) {
        data.dependencies = data.dependencies.split(',').map(d => d.trim()).filter(d => d);
      }
      if (data.tags) {
        data.tags = data.tags.split(',').map(t => t.trim()).filter(t => t);
      }
      
      try {
        const response = await fetch('/api/create', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify(data)
        });
        
        const result = await response.json();
        displayResults(result, data);
      } catch (error) {
        alert('Error: ' + error.message);
      }
    });
    
    function displayResults(result, input) {
      const resultsDiv = document.getElementById('results');
      
      resultsDiv.innerHTML = \`
        <div class="output">
<strong>📄 Document Created Successfully!</strong>

Path: \${input.service}/\${input.docType}/\${input.docId}
        </div>
        
        <div class="metadata">
          <h3>📋 Generated Metadata</h3>
          <dl>
            <dt>Type:</dt>
            <dd>\${result.metadata.type}</dd>
            
            <dt>Service:</dt>
            <dd><span class="badge badge-service">\${result.metadata.service}</span></dd>
            
            <dt>Layer:</dt>
            <dd><span class="badge badge-layer">\${result.metadata.stack_layer}</span></dd>
            
            <dt>Created:</dt>
            <dd>\${result.metadata.created_at}</dd>
            
            <dt>Version:</dt>
            <dd>\${result.metadata.version}</dd>
            
            <dt>Approvers:</dt>
            <dd>
              <div class="approvers">
                \${result.routing.approvers.map(a => \`<span class="approver">\${a}</span>\`).join('')}
              </div>
            </dd>
            
            \${result.routing.validation?.length ? \`
            <dt>Validations:</dt>
            <dd>\${result.routing.validation.join(', ')}</dd>
            \` : ''}
            
            \${result.metadata.dependencies?.length ? \`
            <dt>Dependencies:</dt>
            <dd>\${result.metadata.dependencies.join(', ')}</dd>
            \` : ''}
            
            \${result.metadata.tags?.length ? \`
            <dt>Tags:</dt>
            <dd>\${result.metadata.tags.join(', ')}</dd>
            \` : ''}
          </dl>
        </div>
        
        <div class="feedback">
          <h3>🤔 Human Feedback</h3>
          <form id="feedbackForm">
            <div class="form-group">
              <label>Does this routing look correct?</label>
              <select name="routing_correct">
                <option value="yes">Yes, appropriate approvers</option>
                <option value="no">No, needs adjustment</option>
                <option value="unsure">Not sure</option>
              </select>
            </div>
            
            <div class="form-group">
              <label>Additional approvers needed?</label>
              <input type="text" name="additional_approvers" placeholder="e.g., security-team, compliance">
            </div>
            
            <div class="form-group">
              <label>Comments</label>
              <textarea name="comments" rows="3" placeholder="Any additional feedback..."></textarea>
            </div>
            
            <button type="submit">📝 Submit Feedback</button>
          </form>
        </div>
      \`;
      
      // Handle feedback submission
      document.getElementById('feedbackForm').addEventListener('submit', (e) => {
        e.preventDefault();
        alert('Feedback submitted! In a real system, this would be processed and stored.');
      });
    }
  </script>
</body>
</html>`;

    // Temporarily disable docstack routes
    // autoGeneratedAPI.app.get('/docstack', (req, res) => {
    //   res.writeHead(200, { 'Content-Type': 'text/html' });
    //   res.end(htmlTemplate);
    // });

    // autoGeneratedAPI.app.post('/api/create', async (req, res) => {
    //   ...
    // });
    
    await autoGeneratedAPI.start();
    console.log('✅ Server running on port 3000');
    console.log('📊 HTTP API: http://localhost:3000/docs'); 
    console.log('🖥️  Web TUI: http://localhost:3000/tui');
    console.log('🔗 MCP Endpoint: http://localhost:3000/mcp');
    console.log('🛠️ Tools: swarm_init, hive_create, and all CLI commands');
  } catch (error) {
    console.error('❌ Failed to start server:', error);
    process.exit(1);
  }
}

// Handle graceful shutdown
process.on('SIGINT', async () => {
  console.log('\n🛑 Shutting down server...');
  await autoGeneratedAPI.stop();
  process.exit(0);
});

startServer();