# ==============================================================================
# CLAUDE-ZEN KUBERNETES CONFIGURATION
# ==============================================================================
#
# Kubernetes production deployment configuration including:
# - ConfigMap for environment variables
# - Secrets for sensitive data
# - Deployment with high availability
# - Services for load balancing
# - Ingress for external access
# - HorizontalPodAutoscaler for scaling
#
# Apply with:
#   kubectl apply -f kubernetes/
#
# Prerequisites:
#   - Kubernetes cluster with NGINX ingress controller
#   - cert-manager for SSL certificates
#   - Persistent volume provisioner
#   - External PostgreSQL and Redis (or deploy in-cluster)

apiVersion: v1
kind: Namespace
metadata:
  name: claude-zen
  labels:
    name: claude-zen
    app: claude-zen

---
# ==============================================================================
# CONFIGMAP - ENVIRONMENT CONFIGURATION
# ==============================================================================

apiVersion: v1
kind: ConfigMap
metadata:
  name: claude-zen-config
  namespace: claude-zen
  labels:
    app: claude-zen
    component: configuration
data:
  # Core system configuration
  NODE_ENV: "production"
  APP_NAME: "claude-zen"
  APP_VERSION: "2.0.0"
  
  # Logging configuration
  CLAUDE_LOG_LEVEL: "info"
  CLAUDE_LOG_CONSOLE: "true"
  CLAUDE_LOG_FILE: "false"
  CLAUDE_LOG_JSON: "true"
  LOG_FORMAT: "json"
  
  # Network configuration
  CLAUDE_MCP_HOST: "0.0.0.0"
  CLAUDE_MCP_PORT: "3000"
  CLAUDE_WEB_HOST: "0.0.0.0"
  CLAUDE_WEB_PORT: "3456"
  API_PORT: "4000"
  WEBSOCKET_PORT: "4001"
  
  # Security configuration
  FORCE_HTTPS: "true"
  HSTS_MAX_AGE: "31536000"
  CSP_DEFAULT_SRC: "'self'"
  CSP_SCRIPT_SRC: "'self'"
  CSP_STYLE_SRC: "'self'"
  
  # Rate limiting
  RATE_LIMIT_WINDOW: "60000"
  RATE_LIMIT_MAX_REQUESTS: "100"
  RATE_LIMIT_MAX_TOKENS: "1000000"
  
  # AI service configuration
  ANTHROPIC_MAX_TOKENS: "4096"
  ANTHROPIC_TEMPERATURE: "0.7"
  ANTHROPIC_TIMEOUT: "45000"
  OPENAI_MAX_TOKENS: "4096"
  OPENAI_TEMPERATURE: "0.7"
  AI_FAILOVER_ENABLED: "true"
  AI_HEALTH_CHECK_INTERVAL: "30000"
  AI_RETRY_ATTEMPTS: "3"
  
  # Database configuration
  DATABASE_URL: "postgresql://claude_user:$(POSTGRES_PASSWORD)@postgres-service:5432/claude_zen"
  DATABASE_POOL_MIN: "10"
  DATABASE_POOL_MAX: "50"
  DATABASE_POOL_IDLE_TIMEOUT: "30000"
  DATABASE_SSL: "require"
  DATABASE_AUTO_MIGRATE: "false"
  DATABASE_MIGRATE_ON_START: "true"
  DATABASE_BACKUP_ENABLED: "true"
  
  # Vector database
  VECTOR_DATABASE_URL: "postgresql://claude_user:$(POSTGRES_PASSWORD)@postgres-service:5432/claude_zen"
  VECTOR_DIMENSION: "1536"
  VECTOR_INDEX_SIZE_MB: "2048"
  LANCEDB_PATH: "/app/data/lancedb"
  KUZU_PATH: "/app/data/kuzu"
  
  # Redis configuration
  REDIS_URL: "redis://:$(REDIS_PASSWORD)@redis-service:6379/0"
  REDIS_POOL_SIZE: "20"
  REDIS_CONNECT_TIMEOUT: "5000"
  REDIS_KEY_PREFIX: "claude-zen:"
  
  # Memory and caching
  MEMORY_CACHE_SIZE: "2000"
  MEMORY_CACHE_SIZE_MB: "1024"
  MEMORY_CACHE_TTL: "7200000"
  SESSION_STORE: "redis"
  SESSION_MAX_AGE: "3600000"
  SESSION_SECURE: "true"
  SESSION_SAME_SITE: "strict"
  
  # Swarm configuration
  SWARM_MAX_AGENTS: "100"
  MAX_AGENTS: "200"
  DEFAULT_SWARM_SIZE: "10"
  SWARM_COORDINATION_TIMEOUT: "30000"
  MAX_CONCURRENT_TASKS: "100"
  AGENT_MAX_MEMORY: "512"
  AGENT_TIMEOUT: "60000"
  AGENT_RETRY_ATTEMPTS: "3"
  DEFAULT_SWARM_TOPOLOGY: "hierarchical"
  DEFAULT_COORDINATION_STRATEGY: "adaptive"
  COORDINATION_METRICS_ENABLED: "true"
  
  # File system
  CLAUDE_WORK_DIR: "/app/workspace"
  CLAUDE_TEMP_DIR: "/tmp/claude-zen"
  CLAUDE_CACHE_DIR: "/app/cache"
  CLAUDE_CONFIG_DIR: "/app/config"
  MAX_FILE_SIZE: "50mb"
  MAX_FILES_PER_REQUEST: "10"
  DOCUMENT_MAX_SIZE: "25mb"
  DOCUMENT_PROCESSING_TIMEOUT: "300000"
  
  # Monitoring
  HEALTH_CHECK_ENABLED: "true"
  HEALTH_CHECK_PATH: "/health"
  HEALTH_CHECK_TIMEOUT: "5000"
  METRICS_ENABLED: "true"
  METRICS_ENDPOINT: "/metrics"
  METRICS_INTERVAL: "60000"
  PERFORMANCE_MONITORING: "true"
  PERFORMANCE_THRESHOLD_CPU: "70"
  PERFORMANCE_THRESHOLD_MEMORY: "80"
  
  # Backup
  BACKUP_ENABLED: "true"
  BACKUP_INTERVAL: "21600000"
  BACKUP_RETENTION: "2592000000"
  BACKUP_LOCATION: "/app/backups"
  BACKUP_COMPRESSION: "true"
  
  # Feature flags
  MCP_HTTP_ENABLED: "true"
  MCP_STDIO_ENABLED: "true"
  WEB_DASHBOARD_ENABLED: "true"
  TUI_ENABLED: "false"
  CLI_ENABLED: "true"
  NEURAL_PROCESSING_ENABLED: "true"
  SWARM_COORDINATION_ENABLED: "true"
  DOCUMENT_PROCESSING_ENABLED: "true"
  GITHUB_INTEGRATION_ENABLED: "true"
  REAL_TIME_UPDATES_ENABLED: "true"
  ENABLE_WEBSOCKET: "true"
  
  # Performance
  WORKER_THREADS: "8"
  ENABLE_GPU: "false"
  ENABLE_SIMD: "true"
  ENABLE_NEURAL_NETWORKS: "true"
  ENABLE_VECTOR_SEARCH: "true"
  ENABLE_GRAPH_ANALYSIS: "true"
  
  # Development/Debug (disabled in production)
  DEBUG: "false"
  DEBUG_ENABLED: "false"
  VERBOSE_LOGGING: "false"
  DEV_TOOLS_ENABLED: "false"
  SOURCE_MAPS_ENABLED: "false"
  
  # System
  TZ: "UTC"
  NODE_OPTIONS: "--max-old-space-size=8192"

---
# ==============================================================================
# SECRETS - SENSITIVE CONFIGURATION
# ==============================================================================

apiVersion: v1
kind: Secret
metadata:
  name: claude-zen-secrets
  namespace: claude-zen
  labels:
    app: claude-zen
    component: secrets
type: Opaque
stringData:
  # AI service API keys (replace with actual values)
  ANTHROPIC_API_KEY: "your-production-anthropic-key"
  OPENAI_API_KEY: "your-production-openai-key"
  GITHUB_TOKEN: "your-production-github-token"
  
  # Database credentials
  POSTGRES_PASSWORD: "your-secure-postgres-password"
  DATABASE_URL: "postgresql://claude_user:your-secure-postgres-password@postgres-service:5432/claude_zen"
  
  # Redis credentials
  REDIS_PASSWORD: "your-secure-redis-password"
  
  # Security secrets
  JWT_SECRET: "your-super-strong-jwt-secret-minimum-64-characters-long-for-production"
  JWT_EXPIRY: "1h"
  JWT_REFRESH_EXPIRY: "24h"
  ENCRYPTION_KEY: "your-32-character-encryption-key-for-production-use"
  SESSION_SECRET: "your-strong-session-secret-for-production"
  CLAUDE_WEB_SESSION_SECRET: "your-strong-web-session-secret"
  
  # CORS configuration
  CORS_ORIGIN: "https://your-production-domain.com"
  CLAUDE_MCP_CORS_ORIGIN: "https://your-production-domain.com"
  
  # External monitoring
  DATADOG_API_KEY: "your-datadog-api-key"
  NEW_RELIC_LICENSE_KEY: "your-newrelic-license-key"
  SENTRY_DSN: "https://your-sentry-dsn-here"
  
  # Cloud backup credentials
  AWS_ACCESS_KEY_ID: "your-aws-access-key"
  AWS_SECRET_ACCESS_KEY: "your-aws-secret-key"
  AWS_REGION: "us-east-1"
  BACKUP_S3_BUCKET: "claude-zen-prod-backup"
  
  # Webhook URLs
  WEBHOOK_URL: "https://your-webhook-endpoint"
  SLACK_WEBHOOK_URL: "https://hooks.slack.com/your-webhook"
  DISCORD_WEBHOOK_URL: "https://discord.com/api/webhooks/your-webhook"
  
  # Performance alert webhook
  PERFORMANCE_ALERT_WEBHOOK: "https://your-alerts-webhook-url"

---
# ==============================================================================
# DEPLOYMENT - APPLICATION PODS
# ==============================================================================

apiVersion: apps/v1
kind: Deployment
metadata:
  name: claude-zen
  namespace: claude-zen
  labels:
    app: claude-zen
    component: application
spec:
  replicas: 3
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 1
      maxSurge: 2
  selector:
    matchLabels:
      app: claude-zen
      component: application
  template:
    metadata:
      labels:
        app: claude-zen
        component: application
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "9090"
        prometheus.io/path: "/metrics"
    spec:
      serviceAccountName: claude-zen
      securityContext:
        runAsNonRoot: true
        runAsUser: 1000
        fsGroup: 1000
      
      containers:
      - name: claude-zen
        image: claude-zen:2.0.0
        imagePullPolicy: Always
        
        ports:
        - name: mcp
          containerPort: 3000
          protocol: TCP
        - name: web
          containerPort: 3456
          protocol: TCP
        - name: api
          containerPort: 4000
          protocol: TCP
        - name: websocket
          containerPort: 4001
          protocol: TCP
        - name: metrics
          containerPort: 9090
          protocol: TCP
        
        envFrom:
        - configMapRef:
            name: claude-zen-config
        - secretRef:
            name: claude-zen-secrets
        
        volumeMounts:
        - name: data-volume
          mountPath: /app/data
        - name: cache-volume
          mountPath: /app/cache
        - name: workspace-volume
          mountPath: /app/workspace
        - name: config-volume
          mountPath: /app/config
          readOnly: true
        - name: temp-volume
          mountPath: /tmp/claude-zen
        
        resources:
          requests:
            memory: "2Gi"
            cpu: "1000m"
            ephemeral-storage: "1Gi"
          limits:
            memory: "4Gi"
            cpu: "2000m"
            ephemeral-storage: "2Gi"
        
        livenessProbe:
          httpGet:
            path: /health
            port: 3000
            scheme: HTTP
          initialDelaySeconds: 60
          periodSeconds: 30
          timeoutSeconds: 10
          failureThreshold: 3
          successThreshold: 1
        
        readinessProbe:
          httpGet:
            path: /health
            port: 3000
            scheme: HTTP
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
          successThreshold: 1
        
        startupProbe:
          httpGet:
            path: /health
            port: 3000
            scheme: HTTP
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 10
          successThreshold: 1
      
      volumes:
      - name: data-volume
        persistentVolumeClaim:
          claimName: claude-zen-data-pvc
      - name: cache-volume
        emptyDir:
          sizeLimit: 1Gi
      - name: workspace-volume
        persistentVolumeClaim:
          claimName: claude-zen-workspace-pvc
      - name: config-volume
        configMap:
          name: claude-zen-config
      - name: temp-volume
        emptyDir:
          sizeLimit: 500Mi
      
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: app
                  operator: In
                  values: ["claude-zen"]
              topologyKey: kubernetes.io/hostname
      
      tolerations:
      - key: "application"
        operator: "Equal"
        value: "claude-zen"
        effect: "NoSchedule"

---
# ==============================================================================
# SERVICES - LOAD BALANCING
# ==============================================================================

apiVersion: v1
kind: Service
metadata:
  name: claude-zen-service
  namespace: claude-zen
  labels:
    app: claude-zen
    component: service
  annotations:
    prometheus.io/scrape: "true"
    prometheus.io/port: "9090"
    service.beta.kubernetes.io/aws-load-balancer-type: "nlb"
spec:
  type: LoadBalancer
  selector:
    app: claude-zen
    component: application
  ports:
  - name: mcp
    port: 3000
    targetPort: 3000
    protocol: TCP
  - name: web
    port: 3456
    targetPort: 3456
    protocol: TCP
  - name: api
    port: 4000
    targetPort: 4000
    protocol: TCP
  - name: websocket
    port: 4001
    targetPort: 4001
    protocol: TCP
  sessionAffinity: ClientIP

---
# ClusterIP service for internal communication
apiVersion: v1
kind: Service
metadata:
  name: claude-zen-internal
  namespace: claude-zen
  labels:
    app: claude-zen
    component: internal-service
spec:
  type: ClusterIP
  selector:
    app: claude-zen
    component: application
  ports:
  - name: mcp
    port: 3000
    targetPort: 3000
  - name: web
    port: 3456
    targetPort: 3456
  - name: metrics
    port: 9090
    targetPort: 9090

---
# ==============================================================================
# INGRESS - EXTERNAL ACCESS
# ==============================================================================

apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: claude-zen-ingress
  namespace: claude-zen
  labels:
    app: claude-zen
    component: ingress
  annotations:
    nginx.ingress.kubernetes.io/rewrite-target: /
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
    nginx.ingress.kubernetes.io/proxy-body-size: "50m"
    nginx.ingress.kubernetes.io/proxy-read-timeout: "300"
    nginx.ingress.kubernetes.io/proxy-send-timeout: "300"
    nginx.ingress.kubernetes.io/websocket-services: "claude-zen-service"
    cert-manager.io/cluster-issuer: "letsencrypt-prod"
    kubernetes.io/ingress.class: "nginx"
spec:
  tls:
  - hosts:
    - claude-zen.your-domain.com
    - api.claude-zen.your-domain.com
    secretName: claude-zen-tls
  rules:
  - host: claude-zen.your-domain.com
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: claude-zen-service
            port:
              number: 3456
      - path: /mcp
        pathType: Prefix
        backend:
          service:
            name: claude-zen-service
            port:
              number: 3000
  - host: api.claude-zen.your-domain.com
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: claude-zen-service
            port:
              number: 4000

---
# ==============================================================================
# PERSISTENT VOLUMES
# ==============================================================================

apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: claude-zen-data-pvc
  namespace: claude-zen
  labels:
    app: claude-zen
    component: storage
spec:
  accessModes:
    - ReadWriteOnce
  storageClassName: fast-ssd
  resources:
    requests:
      storage: 20Gi

---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: claude-zen-workspace-pvc
  namespace: claude-zen
  labels:
    app: claude-zen
    component: workspace
spec:
  accessModes:
    - ReadWriteOnce
  storageClassName: standard
  resources:
    requests:
      storage: 50Gi

---
# ==============================================================================
# HORIZONTAL POD AUTOSCALER
# ==============================================================================

apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: claude-zen-hpa
  namespace: claude-zen
  labels:
    app: claude-zen
    component: autoscaler
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: claude-zen
  minReplicas: 3
  maxReplicas: 10
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 70
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 80
  behavior:
    scaleDown:
      stabilizationWindowSeconds: 300
      policies:
      - type: Percent
        value: 10
        periodSeconds: 60
    scaleUp:
      stabilizationWindowSeconds: 60
      policies:
      - type: Percent
        value: 50
        periodSeconds: 60
      - type: Pods
        value: 2
        periodSeconds: 60

---
# ==============================================================================
# SERVICE ACCOUNT & RBAC
# ==============================================================================

apiVersion: v1
kind: ServiceAccount
metadata:
  name: claude-zen
  namespace: claude-zen
  labels:
    app: claude-zen
    component: rbac

---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: claude-zen-role
  namespace: claude-zen
  labels:
    app: claude-zen
    component: rbac
rules:
- apiGroups: [""]
  resources: ["configmaps", "secrets"]
  verbs: ["get", "list", "watch"]
- apiGroups: [""]
  resources: ["pods"]
  verbs: ["get", "list", "watch"]
- apiGroups: ["apps"]
  resources: ["deployments"]
  verbs: ["get", "list", "watch"]

---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: claude-zen-rolebinding
  namespace: claude-zen
  labels:
    app: claude-zen
    component: rbac
subjects:
- kind: ServiceAccount
  name: claude-zen
  namespace: claude-zen
roleRef:
  kind: Role
  name: claude-zen-role
  apiGroup: rbac.authorization.k8s.io

---
# ==============================================================================
# NETWORK POLICY
# ==============================================================================

apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: claude-zen-network-policy
  namespace: claude-zen
  labels:
    app: claude-zen
    component: security
spec:
  podSelector:
    matchLabels:
      app: claude-zen
  policyTypes:
  - Ingress
  - Egress
  ingress:
  - from:
    - namespaceSelector:
        matchLabels:
          name: nginx-ingress
    - namespaceSelector:
        matchLabels:
          name: monitoring
    ports:
    - protocol: TCP
      port: 3000
    - protocol: TCP
      port: 3456
    - protocol: TCP
      port: 4000
    - protocol: TCP
      port: 9090
  egress:
  - to:
    - namespaceSelector:
        matchLabels:
          name: database
    - namespaceSelector:
        matchLabels:
          name: cache
    ports:
    - protocol: TCP
      port: 5432
    - protocol: TCP
      port: 6379
  - to: []
    ports:
    - protocol: TCP
      port: 443
    - protocol: TCP
      port: 80