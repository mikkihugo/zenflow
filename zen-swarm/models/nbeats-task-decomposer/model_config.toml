[model]
name = "N-BEATS Task Decomposer"
version = "1.0.0"
description = "Interpretable neural network for coding task decomposition and subtask generation"
model_type = "nbeats"
framework = "pytorch"

[inference]
batch_size = 32
max_sequence_length = 32
beam_search_width = 5
temperature = 0.7
top_k = 50
top_p = 0.9
max_subtasks = 16
min_subtasks = 3

[task_decomposition]
complexity_threshold = 0.6
dependency_analysis = true
time_estimation = true
resource_estimation = true  
skill_level_adaptation = true
parallel_task_identification = true

[decomposition_strategies]

[decomposition_strategies.waterfall]
description = "Sequential task decomposition for traditional development"
pattern = "sequential"
phases = [
    "requirements_gathering",
    "system_design", 
    "implementation",
    "testing",
    "deployment",
    "maintenance"
]
complexity_multiplier = 1.0
confidence_threshold = 0.8

[decomposition_strategies.agile]
description = "Iterative task breakdown for agile development"
pattern = "iterative"
sprint_length = 14
story_points_range = [1, 2, 3, 5, 8, 13]
backlog_prioritization = true
velocity_tracking = true
complexity_multiplier = 0.8
confidence_threshold = 0.75

[decomposition_strategies.feature_driven]
description = "Feature-based task decomposition"
pattern = "feature_based"
feature_granularity = "medium"
cross_cutting_concerns = true
dependency_mapping = true
complexity_multiplier = 0.9
confidence_threshold = 0.82

[decomposition_strategies.component_based]
description = "Component-oriented task breakdown"
pattern = "component_oriented"
component_types = [
    "frontend",
    "backend", 
    "database",
    "api",
    "middleware",
    "testing"
]
interface_analysis = true
complexity_multiplier = 0.85
confidence_threshold = 0.78

[task_types]

[task_types.web_development]
frameworks = ["react", "vue", "angular", "express", "django", "flask"]
common_patterns = [
    "routing_setup",
    "component_creation",
    "state_management",
    "api_integration",
    "authentication",
    "responsive_design"
]
complexity_factors = ["ui_complexity", "business_logic", "data_flow"]
estimated_effort_multiplier = 1.0

[task_types.api_development]
frameworks = ["rest", "graphql", "grpc", "websocket"]
common_patterns = [
    "endpoint_definition",
    "request_validation",
    "business_logic",
    "data_persistence",
    "error_handling",
    "documentation"
]
complexity_factors = ["endpoint_count", "data_relationships", "security_requirements"]
estimated_effort_multiplier = 0.8

[task_types.data_processing]
frameworks = ["pandas", "numpy", "spark", "kafka", "airflow"]
common_patterns = [
    "data_ingestion",
    "data_cleaning",
    "transformation",
    "validation", 
    "storage",
    "monitoring"
]
complexity_factors = ["data_volume", "transformation_complexity", "real_time_requirements"]
estimated_effort_multiplier = 1.2

[task_types.machine_learning]
frameworks = ["tensorflow", "pytorch", "scikit-learn", "huggingface"]
common_patterns = [
    "data_preparation",
    "model_architecture",
    "training_pipeline",
    "evaluation",
    "hyperparameter_tuning",
    "deployment"
]
complexity_factors = ["model_complexity", "data_quality", "performance_requirements"]
estimated_effort_multiplier = 1.5

[task_types.testing]
frameworks = ["jest", "pytest", "selenium", "cypress", "junit"]
common_patterns = [
    "unit_tests",
    "integration_tests",
    "e2e_tests",
    "performance_tests",
    "security_tests",
    "test_automation"
]
complexity_factors = ["test_coverage", "test_complexity", "automation_level"]
estimated_effort_multiplier = 0.6

[complexity_analysis]
factors = [
    "algorithmic_complexity",
    "data_complexity",
    "integration_complexity",
    "business_logic_complexity",
    "ui_ux_complexity",
    "performance_requirements",
    "security_requirements",
    "scalability_requirements"
]

[complexity_analysis.scoring]
simple = { range = [0.0, 0.3], multiplier = 0.8 }
moderate = { range = [0.3, 0.6], multiplier = 1.0 }
complex = { range = [0.6, 0.8], multiplier = 1.3 }
very_complex = { range = [0.8, 1.0], multiplier = 1.8 }

[dependency_analysis]
enabled = true
dependency_types = [
    "sequential",
    "parallel", 
    "conditional",
    "resource_shared",
    "data_dependency",
    "skill_dependency"
]
critical_path_analysis = true
bottleneck_identification = true

[time_estimation]
enabled = true
estimation_method = "three_point"
confidence_intervals = true
historical_data_weight = 0.7
expert_judgment_weight = 0.3
buffer_percentage = 20

[resource_estimation]
enabled = true
skill_categories = [
    "junior_developer",
    "senior_developer", 
    "architect",
    "devops_engineer",
    "qa_engineer",
    "ui_ux_designer",
    "data_scientist",
    "project_manager"
]
workload_balancing = true
availability_tracking = true

[optimization]
parallel_task_optimization = true
resource_allocation_optimization = true
dependency_minimization = true
risk_mitigation = true
continuous_improvement = true

[monitoring]
progress_tracking = true
velocity_monitoring = true
quality_metrics = true
risk_indicators = true
team_performance = true

[integration]
project_management_tools = ["jira", "asana", "trello", "linear"]
version_control = ["git", "svn"]
ci_cd_tools = ["jenkins", "github_actions", "gitlab_ci"]
monitoring_tools = ["prometheus", "grafana", "datadog"]

[output_formats]
json = true
yaml = true
markdown = true
csv = true
gantt_chart = true
dependency_graph = true