{
  "model_name": "N-BEATS Task Decomposer",
  "version": "1.0.0",
  "architecture": "nbeats",
  "description": "Interpretable N-BEATS model for coding task decomposition with trend and seasonality analysis",
  "input_config": {
    "sequence_length": 32,
    "feature_dimensions": 512,
    "task_encoding_dim": 128,
    "complexity_features": 64
  },
  "output_config": {
    "decomposition_horizon": 16,
    "subtask_dimensions": 256,
    "interpretability_layers": 4
  },
  "stack_configurations": {
    "trend_stack": {
      "name": "Coding Task Trend Analysis",
      "purpose": "Identifies long-term complexity patterns and dependency chains",
      "blocks": [
        {
          "block_id": "trend_1",
          "type": "polynomial_trend",
          "polynomial_degree": 3,
          "hidden_units": 256,
          "layers": 4,
          "activation": "relu",
          "dropout": 0.1,
          "theta_dim": 4,
          "basis_function": "polynomial",
          "interpretable_output": true,
          "task_features": [
            "complexity_growth",
            "dependency_depth",
            "implementation_difficulty"
          ]
        },
        {
          "block_id": "trend_2",
          "type": "exponential_trend",
          "hidden_units": 192,
          "layers": 3,
          "activation": "gelu",
          "dropout": 0.15,
          "theta_dim": 3,
          "basis_function": "exponential",
          "interpretable_output": true,
          "task_features": [
            "learning_curve",
            "debugging_complexity",
            "integration_effort"
          ]
        }
      ],
      "residual_connections": true,
      "normalization": "layer_norm"
    },
    "seasonality_stack": {
      "name": "Task Pattern Seasonality",
      "purpose": "Captures recurring patterns in coding task structures",
      "blocks": [
        {
          "block_id": "seasonal_1",
          "type": "fourier_seasonality",
          "hidden_units": 320,
          "layers": 4,
          "activation": "relu",
          "dropout": 0.1,
          "theta_dim": 16,
          "harmonics": 8,
          "basis_function": "fourier",
          "interpretable_output": true,
          "task_patterns": [
            "api_integration",
            "data_processing",
            "ui_components",
            "testing_cycles"
          ]
        },
        {
          "block_id": "seasonal_2",
          "type": "cyclical_patterns",
          "hidden_units": 256,
          "layers": 3,
          "activation": "swish",
          "dropout": 0.12,
          "theta_dim": 12,
          "cycle_lengths": [4, 8, 16],
          "basis_function": "cyclical",
          "interpretable_output": true,
          "task_patterns": [
            "refactoring_cycles",
            "feature_iterations",
            "code_review_patterns"
          ]
        }
      ],
      "residual_connections": true,
      "normalization": "batch_norm"
    },
    "generic_stack": {
      "name": "Generic Task Decomposition",
      "purpose": "Handles irregular and novel coding task patterns",
      "blocks": [
        {
          "block_id": "generic_1",
          "type": "adaptive_decomposition",
          "hidden_units": 384,
          "layers": 5,
          "activation": "relu",
          "dropout": 0.08,
          "theta_dim": 32,
          "basis_function": "generic_linear",
          "adaptivity_factor": 0.3,
          "task_adaptations": [
            "novel_frameworks",
            "custom_algorithms",
            "domain_specific_logic"
          ]
        },
        {
          "block_id": "generic_2",
          "type": "residual_decomposition",
          "hidden_units": 256,
          "layers": 4,
          "activation": "elu",
          "dropout": 0.1,
          "theta_dim": 24,
          "basis_function": "residual_linear",
          "residual_weight": 0.4,
          "task_residuals": [
            "edge_cases",
            "error_handling",
            "performance_optimizations"
          ]
        }
      ],
      "residual_connections": true,
      "normalization": "group_norm"
    }
  },
  "interpretation_layers": {
    "attention_mechanism": {
      "type": "multi_head_attention",
      "heads": 8,
      "head_dim": 64,
      "attention_dropout": 0.1,
      "causal_masking": false
    },
    "decomposition_interpreter": {
      "type": "task_semantic_decoder",
      "embedding_dim": 256,
      "vocabulary_size": 10000,
      "max_subtasks": 16,
      "semantic_clustering": true
    },
    "complexity_estimator": {
      "type": "regression_head",
      "hidden_dims": [128, 64, 32],
      "output_dim": 1,
      "activation": "sigmoid",
      "complexity_range": [0.0, 1.0]
    }
  },
  "optimization_config": {
    "loss_functions": {
      "reconstruction_loss": {
        "type": "mse",
        "weight": 0.4
      },
      "interpretability_loss": {
        "type": "kl_divergence",
        "weight": 0.3
      },
      "decomposition_coherence": {
        "type": "cosine_similarity",
        "weight": 0.2
      },
      "complexity_estimation": {
        "type": "smooth_l1",
        "weight": 0.1
      }
    },
    "optimizer": {
      "type": "adamw",
      "learning_rate": 0.001,
      "weight_decay": 0.01,
      "betas": [0.9, 0.999],
      "eps": 1e-8
    },
    "scheduler": {
      "type": "cosine_annealing",
      "T_max": 100,
      "eta_min": 1e-6
    },
    "regularization": {
      "gradient_clipping": 1.0,
      "label_smoothing": 0.1,
      "mixup_alpha": 0.2
    }
  },
  "task_decomposition_mapping": {
    "input_features": [
      "task_description_embedding",
      "requirements_complexity",
      "technology_stack_features",
      "deadline_pressure",
      "team_size_factor",
      "domain_expertise_level",
      "existing_codebase_complexity",
      "integration_requirements"
    ],
    "output_subtasks": [
      "requirement_analysis",
      "system_design",
      "database_modeling",
      "api_development",
      "frontend_implementation",
      "testing_strategy",
      "deployment_planning",
      "documentation_creation",
      "code_review_process",
      "performance_optimization",
      "security_implementation",
      "error_handling",
      "logging_monitoring",
      "user_experience_design",
      "integration_testing",
      "maintenance_planning"
    ]
  },
  "metadata": {
    "created": "2025-06-30",
    "framework": "PyTorch",
    "training_data_size": "50000_coding_tasks",
    "validation_accuracy": 0.87,
    "interpretability_score": 0.92,
    "inference_time_ms": 15.4,
    "model_size_mb": 12.8,
    "hardware_requirements": {
      "min_ram_gb": 4,
      "recommended_gpu": "CUDA_compatible",
      "cpu_cores": 4
    }
  }
}
