{
  "env": {
    "CLAUDE_ZEN_HOOKS_ENABLED": "true",
    "CLAUDE_ZEN_TELEMETRY_ENABLED": "true",
    "CLAUDE_ZEN_REMOTE_EXECUTION": "true",
    "CLAUDE_ZEN_GITHUB_INTEGRATION": "true"
  },
  "permissions": {
    "allow": [
      "Bash(npx claude-zen *)",
      "Bash(npm run *)",
      "Bash(node *)",
      "Bash(git *)",
      "Bash(mkdir *)",
      "Bash(cp *)",
      "Bash(mv *)",
      "Bash(rm *)",
      "Bash(ls *)",
      "Bash(find *)",
      "Bash(grep *)",
      "Bash(curl *)",
      "Bash(which *)",
      "Bash(pwd)"
    ],
    "deny": ["Bash(rm -rf /)", "Bash(curl * | bash)", "Bash(wget * | sh)", "Bash(eval *)"]
  },
  "hooks": {
    "tool_call": [
      {
        "matcher": "Bash",
        "hooks": [
          {
            "type": "command",
            "comment": "Pre-command validation and preparation",
            "command": "cat | jq -r '.tool_input.command // empty' | tr '\\n' '\\0' | xargs -0 -I {} npx claude-zen@alpha hooks pre-command --command '{}' --validate-safety true"
          }
        ]
      },
      {
        "matcher": "Edit|Write|MultiEdit",
        "hooks": [
          {
            "type": "command",
            "comment": "Pre-edit file preparation and context loading",
            "command": "cat | jq -r '.tool_input.file_path // .tool_input.path // empty' | tr '\\n' '\\0' | xargs -0 -I {} npx claude-zen@alpha hooks pre-edit --file '{}' --load-context"
          }
        ]
      }
    ],
    "tool_result": [
      {
        "matcher": "Edit|Write|MultiEdit",
        "hooks": [
          {
            "type": "command",
            "comment": "Post-edit processing with auto-formatting",
            "command": "cat | jq -r '.tool_input.file_path // .tool_input.path // empty' | tr '\\n' '\\0' | xargs -0 -I {} npx claude-zen@alpha hooks post-edit --file '{}' --format --update-memory"
          }
        ]
      }
    ],
    "Stop": [
      {
        "hooks": [
          {
            "type": "command",
            "command": "npx claude-zen@alpha hooks session-end --generate-summary true --persist-state true --export-metrics true"
          }
        ]
      }
    ],
    "PreCompact": [
      {
        "matcher": "manual",
        "hooks": [
          {
            "type": "command",
            "command": "/bin/bash -c 'INPUT=$(cat); CUSTOM=$(echo \"$INPUT\" | jq -r \".custom_instructions // \\\"\\\"\"); echo \"ðŸ”„ PreCompact Guidance:\"; echo \"ðŸ“‹ IMPORTANT: Review CLAUDE.md in project root for:\"; echo \"   â€¢ 54 available agents and concurrent usage patterns\"; echo \"   â€¢ Swarm coordination strategies (hierarchical, mesh, adaptive)\"; echo \"   â€¢ SPARC methodology workflows with batchtools optimization\"; echo \"   â€¢ Critical concurrent execution rules (GOLDEN RULE: 1 MESSAGE = ALL OPERATIONS)\"; if [ -n \"$CUSTOM\" ]; then echo \"ðŸŽ¯ Custom compact instructions: $CUSTOM\"; fi; echo \"âœ… Ready for compact operation\"'"
          }
        ]
      },
      {
        "matcher": "auto",
        "hooks": [
          {
            "type": "command",
            "command": "/bin/bash -c 'echo \"ðŸ”„ Auto-Compact Guidance (Context Window Full):\"; echo \"ðŸ“‹ CRITICAL: Before compacting, ensure you understand:\"; echo \"   â€¢ All 54 agents available in .claude/agents/ directory\"; echo \"   â€¢ Concurrent execution patterns from CLAUDE.md\"; echo \"   â€¢ Batchtools optimization for 300% performance gains\"; echo \"   â€¢ Swarm coordination strategies for complex tasks\"; echo \"âš¡ Apply GOLDEN RULE: Always batch operations in single messages\"; echo \"âœ… Auto-compact proceeding with full agent context\"'"
          }
        ]
      }
    ]
  },
  "mcpServers": {
    "ruv-swarm": {
      "command": "npx",
      "args": ["ruv-swarm", "mcp", "start"],
      "env": {
        "RUV_SWARM_HOOKS_ENABLED": "true",
        "RUV_SWARM_TELEMETRY_ENABLED": "true"
      }
    }
  },
  "includeCoAuthoredBy": true
}
