#!/usr/bin/env node

/**
 * Complete Test for Maestro Steering
 * Tests comprehensive steering document workflow
 */

import { mkdir, writeFile } from 'fs/promises';
import { join } from 'path';

// Complete steering test
async function testMaestroSteeringComplete(): Promise<void> {
  console.log('🧪 Testing Complete Maestro Steering Workflow');
  console.log('='.repeat(55));

  interface SteeringTemplate {
    name: string;
    focus: string;
    sections: string[];
  }

  class TestSteeringComplete {
    private templates: SteeringTemplate[] = [
      {
        name: 'technical',
        focus: 'technical implementation',
        sections: ['Architecture', 'Implementation', 'Testing'],
      },
      {
        name: 'product',
        focus: 'product requirements',
        sections: ['Requirements', 'User Stories', 'Acceptance Criteria'],
      },
    ];

    async createComprehensiveSteeringDocuments(feature: string): Promise<void> {
      console.log(`\n🎯 Creating comprehensive steering for: ${feature}`);

      for (const template of this.templates) {
        await this.createSteeringFromTemplate(feature, template);
      }
    }

    private async createSteeringFromTemplate(
      feature: string,
      template: SteeringTemplate
    ): Promise<void> {
      console.log(`📝 Creating ${template.name} steering for: ${feature}`);

      const steeringDir = join(process.cwd(), 'docs', 'maestro', 'steering', template.name);
      await mkdir(steeringDir, { recursive: true });

      const steeringContent = `# ${feature} Steering Document (${template.name})

## Overview
This steering document focuses on ${template.focus} for **${feature}**.

## Sections
${template.sections.map((section) => `### ${section}\n- Guidelines for ${section.toLowerCase()}`).join('\n\n')}

## Decision Framework
- Review existing patterns
- Consider system impact
- Document rationale

*Generated by Complete Steering Test*
`;

      const fileName = `${feature.toLowerCase().replace(/[^a-z0-9]/g, '-')}-${template.name}-steering.md`;
      const filePath = join(steeringDir, fileName);
      await writeFile(filePath, steeringContent);

      console.log(`✅ ${template.name} steering created: ${filePath}`);
    }

    async runCompleteSteeringTest(): Promise<void> {
      const testFeatures = ['user-authentication', 'data-processing', 'api-gateway'];

      for (const feature of testFeatures) {
        await this.createComprehensiveSteeringDocuments(feature);

        // Brief pause between features
        await new Promise((resolve) => setTimeout(resolve, 150));
      }

      const totalDocs = testFeatures.length * this.templates.length;
      console.log(
        `\n📊 Created ${totalDocs} steering documents across ${testFeatures.length} features`
      );
    }
  }

  try {
    const steering = new TestSteeringComplete();
    await steering.runCompleteSteeringTest();

    console.log(`\n🎉 Complete steering test passed!`);
  } catch (error) {
    console.error(`\n❌ Complete steering test failed:`, error);
    process.exit(1);
  }
}

// Run the test
if (import.meta.url === `file://${process.argv[1]}`) {
  testMaestroSteeringComplete().catch((error) => {
    console.error('Test execution failed:', error);
    process.exit(1);
  });
}
