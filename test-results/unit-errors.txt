[0m[32mCheck[0m file:///workspaces/claude-code-flow/tests/unit/cli/cli-commands.test.ts
[0m[32mCheck[0m file:///workspaces/claude-code-flow/tests/unit/coordination/coordination-system.test.ts
[0m[32mCheck[0m file:///workspaces/claude-code-flow/tests/unit/coordination/coordination.test.ts
[0m[32mCheck[0m file:///workspaces/claude-code-flow/tests/unit/core/config.test.ts
[0m[32mCheck[0m file:///workspaces/claude-code-flow/tests/unit/core/enhanced-event-bus.test.ts
[0m[32mCheck[0m file:///workspaces/claude-code-flow/tests/unit/core/enhanced-orchestrator.test.ts
[0m[32mCheck[0m file:///workspaces/claude-code-flow/tests/unit/core/event-bus.test.ts
[0m[32mCheck[0m file:///workspaces/claude-code-flow/tests/unit/core/logger.test.ts
[0m[32mCheck[0m file:///workspaces/claude-code-flow/tests/unit/core/orchestrator.test.ts
[0m[32mCheck[0m file:///workspaces/claude-code-flow/tests/unit/mcp/mcp-interface.test.ts
[0m[32mCheck[0m file:///workspaces/claude-code-flow/tests/unit/mcp/server.test.ts
[0m[32mCheck[0m file:///workspaces/claude-code-flow/tests/unit/mcp/tools.test.ts
[0m[32mCheck[0m file:///workspaces/claude-code-flow/tests/unit/memory/memory-backends.test.ts
[0m[32mCheck[0m file:///workspaces/claude-code-flow/tests/unit/terminal/terminal-manager.test.ts
[0m[32mCheck[0m file:///workspaces/claude-code-flow/tests/unit/utils/helpers.test.ts
[0m[1mTS2307 [0m[ERROR]: Cannot find module 'file:///workspaces/claude-code-flow/src/mcp/client.ts'.
    at [0m[36mfile:///workspaces/claude-code-flow/tests/unit/mcp/mcp-interface.test.ts[0m:[0m[33m12[0m:[0m[33m27[0m

[0m[1mTS7053 [0m[ERROR]: Element implicitly has an 'any' type because expression of type '"spyMethod"' can't be used to index type '{}'.
  Property 'spyMethod' does not exist on type '{}'.
  mockObj[methodName] = implementation || (() => {});
[0m[31m  ~~~~~~~~~~~~~~~~~~~[0m
    at [0m[36mfile:///workspaces/claude-code-flow/tests/mocks/index.ts[0m:[0m[33m60[0m:[0m[33m3[0m

[0m[1mTS2345 [0m[ERROR]: Argument of type '"spyMethod"' is not assignable to parameter of type 'never'.
  return stub(mockObj, methodName) as any;
[0m[31m                       ~~~~~~~~~~[0m
    at [0m[36mfile:///workspaces/claude-code-flow/tests/mocks/index.ts[0m:[0m[33m61[0m:[0m[33m24[0m

[0m[1mTS2304 [0m[ERROR]: Cannot find name 'AgentProfile'.
  private terminals = new Map<string, { profile: AgentProfile; output: string[] }>();
[0m[31m                                                 ~~~~~~~~~~~~[0m
    at [0m[36mfile:///workspaces/claude-code-flow/tests/mocks/index.ts[0m:[0m[33m156[0m:[0m[33m50[0m

[0m[1mTS2304 [0m[ERROR]: Cannot find name 'Task'.
  private tasks = new Map<string, { task: Task; agentId: string }>();
[0m[31m                                          ~~~~[0m
    at [0m[36mfile:///workspaces/claude-code-flow/tests/mocks/index.ts[0m:[0m[33m342[0m:[0m[33m43[0m

[0m[1mTS2304 [0m[ERROR]: Cannot find name 'Task'.
  private agentTasks = new Map<string, Task[]>();
[0m[31m                                       ~~~~[0m
    at [0m[36mfile:///workspaces/claude-code-flow/tests/mocks/index.ts[0m:[0m[33m343[0m:[0m[33m40[0m

[0m[1mTS2304 [0m[ERROR]: Cannot find name 'spy'.
  initialize = spy(async (): Promise<void> => {
[0m[31m               ~~~[0m
    at [0m[36mfile:///workspaces/claude-code-flow/tests/mocks/index.ts[0m:[0m[33m346[0m:[0m[33m16[0m

[0m[1mTS2304 [0m[ERROR]: Cannot find name 'spy'.
  shutdown = spy(async (): Promise<void> => {
[0m[31m             ~~~[0m
    at [0m[36mfile:///workspaces/claude-code-flow/tests/mocks/index.ts[0m:[0m[33m350[0m:[0m[33m14[0m

[0m[1mTS2304 [0m[ERROR]: Cannot find name 'spy'.
  assignTask = spy(async (task: Task, agentId: string): Promise<void> => {
[0m[31m               ~~~[0m
    at [0m[36mfile:///workspaces/claude-code-flow/tests/mocks/index.ts[0m:[0m[33m356[0m:[0m[33m16[0m

[0m[1mTS2304 [0m[ERROR]: Cannot find name 'Task'.
  assignTask = spy(async (task: Task, agentId: string): Promise<void> => {
[0m[31m                                ~~~~[0m
    at [0m[36mfile:///workspaces/claude-code-flow/tests/mocks/index.ts[0m:[0m[33m356[0m:[0m[33m33[0m

[0m[1mTS2304 [0m[ERROR]: Cannot find name 'spy'.
  getAgentTaskCount = spy(async (agentId: string): Promise<number> => {
[0m[31m                      ~~~[0m
    at [0m[36mfile:///workspaces/claude-code-flow/tests/mocks/index.ts[0m:[0m[33m363[0m:[0m[33m23[0m

[0m[1mTS2304 [0m[ERROR]: Cannot find name 'spy'.
  getAgentTasks = spy(async (agentId: string): Promise<Task[]> => {
[0m[31m                  ~~~[0m
    at [0m[36mfile:///workspaces/claude-code-flow/tests/mocks/index.ts[0m:[0m[33m368[0m:[0m[33m19[0m

[0m[1mTS2304 [0m[ERROR]: Cannot find name 'Task'.
  getAgentTasks = spy(async (agentId: string): Promise<Task[]> => {
[0m[31m                                                       ~~~~[0m
    at [0m[36mfile:///workspaces/claude-code-flow/tests/mocks/index.ts[0m:[0m[33m368[0m:[0m[33m56[0m

[0m[1mTS2304 [0m[ERROR]: Cannot find name 'spy'.
  cancelTask = spy(async (taskId: string): Promise<void> => {
[0m[31m               ~~~[0m
    at [0m[36mfile:///workspaces/claude-code-flow/tests/mocks/index.ts[0m:[0m[33m372[0m:[0m[33m16[0m

[0m[1mTS2304 [0m[ERROR]: Cannot find name 'spy'.
  getHealthStatus = spy(async (): Promise<{ healthy: boolean; error?: string; metrics?: Record<string, number> }> => {
[0m[31m                    ~~~[0m
    at [0m[36mfile:///workspaces/claude-code-flow/tests/mocks/index.ts[0m:[0m[33m379[0m:[0m[33m21[0m

[0m[1mTS2304 [0m[ERROR]: Cannot find name 'spy'.
  performMaintenance = spy(async (): Promise<void> => {
[0m[31m                       ~~~[0m
    at [0m[36mfile:///workspaces/claude-code-flow/tests/mocks/index.ts[0m:[0m[33m388[0m:[0m[33m24[0m

[0m[1mTS2304 [0m[ERROR]: Cannot find name 'spy'.
  start = spy(async (): Promise<void> => {
[0m[31m          ~~~[0m
    at [0m[36mfile:///workspaces/claude-code-flow/tests/mocks/index.ts[0m:[0m[33m408[0m:[0m[33m11[0m

[0m[1mTS2304 [0m[ERROR]: Cannot find name 'spy'.
  stop = spy(async (): Promise<void> => {
[0m[31m         ~~~[0m
    at [0m[36mfile:///workspaces/claude-code-flow/tests/mocks/index.ts[0m:[0m[33m412[0m:[0m[33m10[0m

[0m[1mTS2304 [0m[ERROR]: Cannot find name 'spy'.
  registerTool = spy((name: string, tool: any): void => {
[0m[31m                 ~~~[0m
    at [0m[36mfile:///workspaces/claude-code-flow/tests/mocks/index.ts[0m:[0m[33m417[0m:[0m[33m18[0m

[0m[1mTS2304 [0m[ERROR]: Cannot find name 'spy'.
  getHealthStatus = spy(async (): Promise<{ healthy: boolean; error?: string; metrics?: Record<string, number> }> => {
[0m[31m                    ~~~[0m
    at [0m[36mfile:///workspaces/claude-code-flow/tests/mocks/index.ts[0m:[0m[33m421[0m:[0m[33m21[0m

[0m[1mTS18046 [0m[ERROR]: 'error' is of type 'unknown'.
      this.stderr(`Error: ${error.message}`);
[0m[31m                            ~~~~~[0m
    at [0m[36mfile:///workspaces/claude-code-flow/tests/unit/cli/cli-commands.test.ts[0m:[0m[33m76[0m:[0m[33m29[0m

[0m[1mTS2339 [0m[ERROR]: Property 'delay' does not exist on type 'typeof AsyncTestUtils'.
              await AsyncTestUtils.delay(100);
[0m[31m                                   ~~~~~[0m
    at [0m[36mfile:///workspaces/claude-code-flow/tests/unit/cli/cli-commands.test.ts[0m:[0m[33m399[0m:[0m[33m36[0m

[0m[1mTS7006 [0m[ERROR]: Parameter 'args' implicitly has an 'any' type.
          handler: async (args) => {
[0m[31m                          ~~~~[0m
    at [0m[36mfile:///workspaces/claude-code-flow/tests/unit/cli/cli-commands.test.ts[0m:[0m[33m752[0m:[0m[33m27[0m

[0m[1mTS7006 [0m[ERROR]: Parameter 'args' implicitly has an 'any' type.
          handler: async (args) => {
[0m[31m                          ~~~~[0m
    at [0m[36mfile:///workspaces/claude-code-flow/tests/unit/cli/cli-commands.test.ts[0m:[0m[33m764[0m:[0m[33m27[0m

[0m[1mTS2741 [0m[ERROR]: Property 'description' is missing in type '{ name: string; type: "string"; required: true; }' but required in type '{ name: string; description: string; type: "string" | "number" | "boolean"; required?: boolean; default?: any; }'.
            { name: 'action', type: 'string', required: true },
[0m[31m            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~[0m
    at [0m[36mfile:///workspaces/claude-code-flow/tests/unit/cli/cli-commands.test.ts[0m:[0m[33m847[0m:[0m[33m13[0m

    'description' is declared here.
        description: string;
    [0m[36m    ~~~~~~~~~~~[0m
        at [0m[36mfile:///workspaces/claude-code-flow/tests/unit/cli/cli-commands.test.ts[0m:[0m[33m27[0m:[0m[33m5[0m

[0m[1mTS2741 [0m[ERROR]: Property 'description' is missing in type '{ name: string; type: "string"; }' but required in type '{ name: string; description: string; type: "string" | "number" | "boolean"; required?: boolean; default?: any; }'.
            { name: 'name', type: 'string' },
[0m[31m            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~[0m
    at [0m[36mfile:///workspaces/claude-code-flow/tests/unit/cli/cli-commands.test.ts[0m:[0m[33m848[0m:[0m[33m13[0m

    'description' is declared here.
        description: string;
    [0m[36m    ~~~~~~~~~~~[0m
        at [0m[36mfile:///workspaces/claude-code-flow/tests/unit/cli/cli-commands.test.ts[0m:[0m[33m27[0m:[0m[33m5[0m

[0m[1mTS2339 [0m[ERROR]: Property 'delay' does not exist on type 'typeof AsyncTestUtils'.
            await AsyncTestUtils.delay(Math.random() * 100); // Simulate processing time
[0m[31m                                 ~~~~~[0m
    at [0m[36mfile:///workspaces/claude-code-flow/tests/unit/cli/cli-commands.test.ts[0m:[0m[33m851[0m:[0m[33m34[0m

[0m[1mTS2741 [0m[ERROR]: Property 'description' is missing in type '{ name: string; type: "string"; required: true; }' but required in type '{ name: string; description: string; type: "string" | "number" | "boolean"; required?: boolean; default?: any; }'.
            { name: 'action', type: 'string', required: true },
[0m[31m            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~[0m
    at [0m[36mfile:///workspaces/claude-code-flow/tests/unit/cli/cli-commands.test.ts[0m:[0m[33m861[0m:[0m[33m13[0m

    'description' is declared here.
        description: string;
    [0m[36m    ~~~~~~~~~~~[0m
        at [0m[36mfile:///workspaces/claude-code-flow/tests/unit/cli/cli-commands.test.ts[0m:[0m[33m27[0m:[0m[33m5[0m

[0m[1mTS2741 [0m[ERROR]: Property 'description' is missing in type '{ name: string; type: "string"; }' but required in type '{ name: string; description: string; type: "string" | "number" | "boolean"; required?: boolean; default?: any; }'.
            { name: 'command', type: 'string' },
[0m[31m            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~[0m
    at [0m[36mfile:///workspaces/claude-code-flow/tests/unit/cli/cli-commands.test.ts[0m:[0m[33m862[0m:[0m[33m13[0m

    'description' is declared here.
        description: string;
    [0m[36m    ~~~~~~~~~~~[0m
        at [0m[36mfile:///workspaces/claude-code-flow/tests/unit/cli/cli-commands.test.ts[0m:[0m[33m27[0m:[0m[33m5[0m

[0m[1mTS2339 [0m[ERROR]: Property 'delay' does not exist on type 'typeof AsyncTestUtils'.
            await AsyncTestUtils.delay(Math.random() * 100); // Simulate processing time
[0m[31m                                 ~~~~~[0m
    at [0m[36mfile:///workspaces/claude-code-flow/tests/unit/cli/cli-commands.test.ts[0m:[0m[33m865[0m:[0m[33m34[0m

[0m[1mTS2741 [0m[ERROR]: Property 'description' is missing in type '{ name: string; type: "number"; default: number; }' but required in type '{ name: string; description: string; type: "string" | "number" | "boolean"; required?: boolean; default?: any; }'.
          { name: 'iterations', type: 'number', default: 100 },
[0m[31m          ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~[0m
    at [0m[36mfile:///workspaces/claude-code-flow/tests/unit/cli/cli-commands.test.ts[0m:[0m[33m921[0m:[0m[33m11[0m

    'description' is declared here.
        description: string;
    [0m[36m    ~~~~~~~~~~~[0m
        at [0m[36mfile:///workspaces/claude-code-flow/tests/unit/cli/cli-commands.test.ts[0m:[0m[33m27[0m:[0m[33m5[0m

[0m[1mTS2741 [0m[ERROR]: Property 'description' is missing in type '{ name: string; type: "number"; default: number; }' but required in type '{ name: string; description: string; type: "string" | "number" | "boolean"; required?: boolean; default?: any; }'.
          { name: 'delay', type: 'number', default: 0 },
[0m[31m          ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~[0m
    at [0m[36mfile:///workspaces/claude-code-flow/tests/unit/cli/cli-commands.test.ts[0m:[0m[33m922[0m:[0m[33m11[0m

    'description' is declared here.
        description: string;
    [0m[36m    ~~~~~~~~~~~[0m
        at [0m[36mfile:///workspaces/claude-code-flow/tests/unit/cli/cli-commands.test.ts[0m:[0m[33m27[0m:[0m[33m5[0m

[0m[1mTS2339 [0m[ERROR]: Property 'delay' does not exist on type 'typeof AsyncTestUtils'.
              await AsyncTestUtils.delay(args.delay);
[0m[31m                                   ~~~~~[0m
    at [0m[36mfile:///workspaces/claude-code-flow/tests/unit/cli/cli-commands.test.ts[0m:[0m[33m927[0m:[0m[33m36[0m

[0m[1mTS2304 [0m[ERROR]: Cannot find name 'PerformanceTestUtils'.
      const { result, duration } = await PerformanceTestUtils.measureTime(async () => {
[0m[31m                                         ~~~~~~~~~~~~~~~~~~~~[0m
    at [0m[36mfile:///workspaces/claude-code-flow/tests/unit/cli/cli-commands.test.ts[0m:[0m[33m942[0m:[0m[33m42[0m

[0m[1mTS2304 [0m[ERROR]: Cannot find name 'PerformanceTestUtils'.
      const { stats } = await PerformanceTestUtils.benchmark(
[0m[31m                              ~~~~~~~~~~~~~~~~~~~~[0m
    at [0m[36mfile:///workspaces/claude-code-flow/tests/unit/cli/cli-commands.test.ts[0m:[0m[33m970[0m:[0m[33m31[0m

[0m[1mTS2305 [0m[ERROR]: Module '"file:///workspaces/claude-code-flow/src/coordination/work-stealing.ts"' has no exported member 'WorkStealingScheduler'.
import { WorkStealingScheduler } from '../../../src/coordination/work-stealing.ts';
[0m[31m         ~~~~~~~~~~~~~~~~~~~~~[0m
    at [0m[36mfile:///workspaces/claude-code-flow/tests/unit/coordination/coordination-system.test.ts[0m:[0m[33m16[0m:[0m[33m10[0m

[0m[1mTS2724 [0m[ERROR]: '"file:///workspaces/claude-code-flow/src/coordination/advanced-scheduler.ts"' has no exported member named 'AdvancedScheduler'. Did you mean 'AdvancedTaskScheduler'?
import { AdvancedScheduler } from '../../../src/coordination/advanced-scheduler.ts';
[0m[31m         ~~~~~~~~~~~~~~~~~[0m
    at [0m[36mfile:///workspaces/claude-code-flow/tests/unit/coordination/coordination-system.test.ts[0m:[0m[33m18[0m:[0m[33m10[0m

    'AdvancedTaskScheduler' is declared here.
    export class AdvancedTaskScheduler extends TaskScheduler {
    [0m[36m             ~~~~~~~~~~~~~~~~~~~~~[0m
        at [0m[36mfile:///workspaces/claude-code-flow/src/coordination/advanced-scheduler.ts[0m:[0m[33m143[0m:[0m[33m14[0m

[0m[1mTS2554 [0m[ERROR]: Expected 3 arguments, but got 1.
    resourceManager = new ResourceManager({
[0m[31m                      ^[0m
    at [0m[36mfile:///workspaces/claude-code-flow/tests/unit/coordination/coordination-system.test.ts[0m:[0m[33m39[0m:[0m[33m23[0m

    An argument for 'eventBus' was not provided.
        private eventBus: IEventBus,
    [0m[36m    ~~~~~~~~~~~~~~~~~~~~~~~~~~~[0m
        at [0m[36mfile:///workspaces/claude-code-flow/src/coordination/resources.ts[0m:[0m[33m29[0m:[0m[33m5[0m

[0m[1mTS2554 [0m[ERROR]: Expected 3 arguments, but got 1.
    scheduler = new TaskScheduler({
[0m[31m                ^[0m
    at [0m[36mfile:///workspaces/claude-code-flow/tests/unit/coordination/coordination-system.test.ts[0m:[0m[33m45[0m:[0m[33m17[0m

    An argument for 'eventBus' was not provided.
        protected eventBus: IEventBus,
    [0m[36m    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~[0m
        at [0m[36mfile:///workspaces/claude-code-flow/src/coordination/scheduler.ts[0m:[0m[33m30[0m:[0m[33m5[0m

[0m[1mTS2554 [0m[ERROR]: Expected 2 arguments, but got 1.
    conflictResolver = new ConflictResolver({
[0m[31m                       ^[0m
    at [0m[36mfile:///workspaces/claude-code-flow/tests/unit/coordination/coordination-system.test.ts[0m:[0m[33m51[0m:[0m[33m24[0m

    An argument for 'eventBus' was not provided.
        private eventBus: IEventBus,
    [0m[36m    ~~~~~~~~~~~~~~~~~~~~~~~~~~~[0m
        at [0m[36mfile:///workspaces/claude-code-flow/src/coordination/conflict-resolution.ts[0m:[0m[33m157[0m:[0m[33m5[0m

[0m[1mTS2554 [0m[ERROR]: Expected 3 arguments, but got 1.
    coordinationManager = new CoordinationManager({
[0m[31m                          ^[0m
    at [0m[36mfile:///workspaces/claude-code-flow/tests/unit/coordination/coordination-system.test.ts[0m:[0m[33m56[0m:[0m[33m27[0m

    An argument for 'eventBus' was not provided.
        private eventBus: IEventBus,
    [0m[36m    ~~~~~~~~~~~~~~~~~~~~~~~~~~~[0m
        at [0m[36mfile:///workspaces/claude-code-flow/src/coordination/manager.ts[0m:[0m[33m48[0m:[0m[33m5[0m

[0m[1mTS2339 [0m[ERROR]: Property 'submitTask' does not exist on type 'CoordinationManager'.
        coordinationManager.submitTask(task.id, task)
[0m[31m                            ~~~~~~~~~~[0m
    at [0m[36mfile:///workspaces/claude-code-flow/tests/unit/coordination/coordination-system.test.ts[0m:[0m[33m85[0m:[0m[33m29[0m

[0m[1mTS2339 [0m[ERROR]: Property 'delay' does not exist on type 'typeof AsyncTestUtils'.
            await AsyncTestUtils.delay(10);
[0m[31m                                 ~~~~~[0m
    at [0m[36mfile:///workspaces/claude-code-flow/tests/unit/coordination/coordination-system.test.ts[0m:[0m[33m105[0m:[0m[33m34[0m

[0m[1mTS2339 [0m[ERROR]: Property 'delay' does not exist on type 'typeof AsyncTestUtils'.
            await AsyncTestUtils.delay(10);
[0m[31m                                 ~~~~~[0m
    at [0m[36mfile:///workspaces/claude-code-flow/tests/unit/coordination/coordination-system.test.ts[0m:[0m[33m114[0m:[0m[33m34[0m

[0m[1mTS2339 [0m[ERROR]: Property 'delay' does not exist on type 'typeof AsyncTestUtils'.
            await AsyncTestUtils.delay(10);
[0m[31m                                 ~~~~~[0m
    at [0m[36mfile:///workspaces/claude-code-flow/tests/unit/coordination/coordination-system.test.ts[0m:[0m[33m123[0m:[0m[33m34[0m

[0m[1mTS2339 [0m[ERROR]: Property 'submitTask' does not exist on type 'CoordinationManager'.
        coordinationManager.submitTask('task-c', tasks[2]),
[0m[31m                            ~~~~~~~~~~[0m
    at [0m[36mfile:///workspaces/claude-code-flow/tests/unit/coordination/coordination-system.test.ts[0m:[0m[33m132[0m:[0m[33m29[0m

[0m[1mTS2339 [0m[ERROR]: Property 'submitTask' does not exist on type 'CoordinationManager'.
        coordinationManager.submitTask('task-a', tasks[0]),
[0m[31m                            ~~~~~~~~~~[0m
    at [0m[36mfile:///workspaces/claude-code-flow/tests/unit/coordination/coordination-system.test.ts[0m:[0m[33m133[0m:[0m[33m29[0m

[0m[1mTS2339 [0m[ERROR]: Property 'submitTask' does not exist on type 'CoordinationManager'.
        coordinationManager.submitTask('task-b', tasks[1]),
[0m[31m                            ~~~~~~~~~~[0m
    at [0m[36mfile:///workspaces/claude-code-flow/tests/unit/coordination/coordination-system.test.ts[0m:[0m[33m134[0m:[0m[33m29[0m

[0m[1mTS2339 [0m[ERROR]: Property 'submitTask' does not exist on type 'CoordinationManager'.
        coordinationManager.submitTask(task.id, task)
[0m[31m                            ~~~~~~~~~~[0m
    at [0m[36mfile:///workspaces/claude-code-flow/tests/unit/coordination/coordination-system.test.ts[0m:[0m[33m154[0m:[0m[33m29[0m

[0m[1mTS2339 [0m[ERROR]: Property 'delay' does not exist on type 'typeof AsyncTestUtils'.
          await AsyncTestUtils.delay(200); // Take 200ms
[0m[31m                               ~~~~~[0m
    at [0m[36mfile:///workspaces/claude-code-flow/tests/unit/coordination/coordination-system.test.ts[0m:[0m[33m173[0m:[0m[33m32[0m

[0m[1mTS2339 [0m[ERROR]: Property 'submitTask' does not exist on type 'CoordinationManager'.
        () => coordinationManager.submitTask('long-task', longRunningTask),
[0m[31m                                  ~~~~~~~~~~[0m
    at [0m[36mfile:///workspaces/claude-code-flow/tests/unit/coordination/coordination-system.test.ts[0m:[0m[33m179[0m:[0m[33m35[0m

[0m[1mTS2339 [0m[ERROR]: Property 'submitTask' does not exist on type 'CoordinationManager'.
        coordinationManager.submitTask(task.id, {
[0m[31m                            ~~~~~~~~~~[0m
    at [0m[36mfile:///workspaces/claude-code-flow/tests/unit/coordination/coordination-system.test.ts[0m:[0m[33m189[0m:[0m[33m29[0m

[0m[1mTS7006 [0m[ERROR]: Parameter 'result' implicitly has an 'any' type.
      results.forEach((result, i) => {
[0m[31m                       ~~~~~~[0m
    at [0m[36mfile:///workspaces/claude-code-flow/tests/unit/coordination/coordination-system.test.ts[0m:[0m[33m198[0m:[0m[33m24[0m

[0m[1mTS7006 [0m[ERROR]: Parameter 'i' implicitly has an 'any' type.
      results.forEach((result, i) => {
[0m[31m                               ^[0m
    at [0m[36mfile:///workspaces/claude-code-flow/tests/unit/coordination/coordination-system.test.ts[0m:[0m[33m198[0m:[0m[33m32[0m

[0m[1mTS2554 [0m[ERROR]: Expected 3 arguments, but got 1.
      const limitedScheduler = new TaskScheduler({
[0m[31m                               ^[0m
    at [0m[36mfile:///workspaces/claude-code-flow/tests/unit/coordination/coordination-system.test.ts[0m:[0m[33m204[0m:[0m[33m32[0m

    An argument for 'eventBus' was not provided.
        protected eventBus: IEventBus,
    [0m[36m    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~[0m
        at [0m[36mfile:///workspaces/claude-code-flow/src/coordination/scheduler.ts[0m:[0m[33m30[0m:[0m[33m5[0m

[0m[1mTS2554 [0m[ERROR]: Expected 3 arguments, but got 1.
      const limitedManager = new CoordinationManager({
[0m[31m                             ^[0m
    at [0m[36mfile:///workspaces/claude-code-flow/tests/unit/coordination/coordination-system.test.ts[0m:[0m[33m209[0m:[0m[33m30[0m

    An argument for 'eventBus' was not provided.
        private eventBus: IEventBus,
    [0m[36m    ~~~~~~~~~~~~~~~~~~~~~~~~~~~[0m
        at [0m[36mfile:///workspaces/claude-code-flow/src/coordination/manager.ts[0m:[0m[33m48[0m:[0m[33m5[0m

[0m[1mTS2339 [0m[ERROR]: Property 'delay' does not exist on type 'typeof AsyncTestUtils'.
          await AsyncTestUtils.delay(50);
[0m[31m                               ~~~~~[0m
    at [0m[36mfile:///workspaces/claude-code-flow/tests/unit/coordination/coordination-system.test.ts[0m:[0m[33m225[0m:[0m[33m32[0m

[0m[1mTS2339 [0m[ERROR]: Property 'submitTask' does not exist on type 'CoordinationManager'.
        limitedManager.submitTask(task.id, task)
[0m[31m                       ~~~~~~~~~~[0m
    at [0m[36mfile:///workspaces/claude-code-flow/tests/unit/coordination/coordination-system.test.ts[0m:[0m[33m232[0m:[0m[33m24[0m

[0m[1mTS2339 [0m[ERROR]: Property 'delay' does not exist on type 'typeof AsyncTestUtils'.
          await AsyncTestUtils.delay(50);
[0m[31m                               ~~~~~[0m
    at [0m[36mfile:///workspaces/claude-code-flow/tests/unit/coordination/coordination-system.test.ts[0m:[0m[33m255[0m:[0m[33m32[0m

[0m[1mTS2339 [0m[ERROR]: Property 'delay' does not exist on type 'typeof AsyncTestUtils'.
          await AsyncTestUtils.delay(50);
[0m[31m                               ~~~~~[0m
    at [0m[36mfile:///workspaces/claude-code-flow/tests/unit/coordination/coordination-system.test.ts[0m:[0m[33m266[0m:[0m[33m32[0m

[0m[1mTS2339 [0m[ERROR]: Property 'submitTask' does not exist on type 'CoordinationManager'.
        coordinationManager.submitTask('deadlock-1', task1),
[0m[31m                            ~~~~~~~~~~[0m
    at [0m[36mfile:///workspaces/claude-code-flow/tests/unit/coordination/coordination-system.test.ts[0m:[0m[33m274[0m:[0m[33m29[0m

[0m[1mTS2339 [0m[ERROR]: Property 'submitTask' does not exist on type 'CoordinationManager'.
        coordinationManager.submitTask('deadlock-2', task2),
[0m[31m                            ~~~~~~~~~~[0m
    at [0m[36mfile:///workspaces/claude-code-flow/tests/unit/coordination/coordination-system.test.ts[0m:[0m[33m275[0m:[0m[33m29[0m

[0m[1mTS2339 [0m[ERROR]: Property 'delay' does not exist on type 'typeof AsyncTestUtils'.
          await AsyncTestUtils.delay(100);
[0m[31m                               ~~~~~[0m
    at [0m[36mfile:///workspaces/claude-code-flow/tests/unit/coordination/coordination-system.test.ts[0m:[0m[33m294[0m:[0m[33m32[0m

[0m[1mTS2339 [0m[ERROR]: Property 'delay' does not exist on type 'typeof AsyncTestUtils'.
          await AsyncTestUtils.delay(10);
[0m[31m                               ~~~~~[0m
    at [0m[36mfile:///workspaces/claude-code-flow/tests/unit/coordination/coordination-system.test.ts[0m:[0m[33m304[0m:[0m[33m32[0m

[0m[1mTS2339 [0m[ERROR]: Property 'submitTask' does not exist on type 'CoordinationManager'.
      const lowPromise = coordinationManager.submitTask('low-priority', lowPriorityTask);
[0m[31m                                             ~~~~~~~~~~[0m
    at [0m[36mfile:///workspaces/claude-code-flow/tests/unit/coordination/coordination-system.test.ts[0m:[0m[33m310[0m:[0m[33m46[0m

[0m[1mTS2339 [0m[ERROR]: Property 'submitTask' does not exist on type 'CoordinationManager'.
        coordinationManager.submitTask(task.id, task)
[0m[31m                            ~~~~~~~~~~[0m
    at [0m[36mfile:///workspaces/claude-code-flow/tests/unit/coordination/coordination-system.test.ts[0m:[0m[33m314[0m:[0m[33m29[0m

[0m[1mTS2339 [0m[ERROR]: Property 'delay' does not exist on type 'typeof AsyncTestUtils'.
      await AsyncTestUtils.delay(20); // Let low priority task get a chance
[0m[31m                           ~~~~~[0m
    at [0m[36mfile:///workspaces/claude-code-flow/tests/unit/coordination/coordination-system.test.ts[0m:[0m[33m317[0m:[0m[33m28[0m

[0m[1mTS2339 [0m[ERROR]: Property 'submitTask' does not exist on type 'CoordinationManager'.
        coordinationManager.submitTask(task.id, task)
[0m[31m                            ~~~~~~~~~~[0m
    at [0m[36mfile:///workspaces/claude-code-flow/tests/unit/coordination/coordination-system.test.ts[0m:[0m[33m340[0m:[0m[33m29[0m

[0m[1mTS2339 [0m[ERROR]: Property 'delay' does not exist on type 'typeof AsyncTestUtils'.
          await AsyncTestUtils.delay(2000); // Longer than timeout
[0m[31m                               ~~~~~[0m
    at [0m[36mfile:///workspaces/claude-code-flow/tests/unit/coordination/coordination-system.test.ts[0m:[0m[33m359[0m:[0m[33m32[0m

[0m[1mTS2339 [0m[ERROR]: Property 'delay' does not exist on type 'typeof AsyncTestUtils'.
          await AsyncTestUtils.delay(100);
[0m[31m                               ~~~~~[0m
    at [0m[36mfile:///workspaces/claude-code-flow/tests/unit/coordination/coordination-system.test.ts[0m:[0m[33m368[0m:[0m[33m32[0m

[0m[1mTS2339 [0m[ERROR]: Property 'submitTask' does not exist on type 'CoordinationManager'.
        coordinationManager.submitTask('timeout-deadlock-1', task1),
[0m[31m                            ~~~~~~~~~~[0m
    at [0m[36mfile:///workspaces/claude-code-flow/tests/unit/coordination/coordination-system.test.ts[0m:[0m[33m374[0m:[0m[33m29[0m

[0m[1mTS2339 [0m[ERROR]: Property 'submitTask' does not exist on type 'CoordinationManager'.
        coordinationManager.submitTask('timeout-deadlock-2', task2),
[0m[31m                            ~~~~~~~~~~[0m
    at [0m[36mfile:///workspaces/claude-code-flow/tests/unit/coordination/coordination-system.test.ts[0m:[0m[33m375[0m:[0m[33m29[0m

[0m[1mTS2339 [0m[ERROR]: Property 'delay' does not exist on type 'typeof AsyncTestUtils'.
          await AsyncTestUtils.delay(100);
[0m[31m                               ~~~~~[0m
    at [0m[36mfile:///workspaces/claude-code-flow/tests/unit/coordination/coordination-system.test.ts[0m:[0m[33m400[0m:[0m[33m32[0m

[0m[1mTS2339 [0m[ERROR]: Property 'submitTask' does not exist on type 'CoordinationManager'.
        coordinationManager.submitTask(task.id, task)
[0m[31m                            ~~~~~~~~~~[0m
    at [0m[36mfile:///workspaces/claude-code-flow/tests/unit/coordination/coordination-system.test.ts[0m:[0m[33m406[0m:[0m[33m29[0m

[0m[1mTS2339 [0m[ERROR]: Property 'delay' does not exist on type 'typeof AsyncTestUtils'.
      await AsyncTestUtils.delay(50);
[0m[31m                           ~~~~~[0m
    at [0m[36mfile:///workspaces/claude-code-flow/tests/unit/coordination/coordination-system.test.ts[0m:[0m[33m410[0m:[0m[33m28[0m

[0m[1mTS2339 [0m[ERROR]: Property 'getResourceStatus' does not exist on type 'ResourceManager'.
      const resourceStatus = await resourceManager.getResourceStatus();
[0m[31m                                                   ~~~~~~~~~~~~~~~~~[0m
    at [0m[36mfile:///workspaces/claude-code-flow/tests/unit/coordination/coordination-system.test.ts[0m:[0m[33m412[0m:[0m[33m52[0m

[0m[1mTS2554 [0m[ERROR]: Expected 3 arguments, but got 1.
      const limitedResourceManager = new ResourceManager({
[0m[31m                                     ^[0m
    at [0m[36mfile:///workspaces/claude-code-flow/tests/unit/coordination/coordination-system.test.ts[0m:[0m[33m423[0m:[0m[33m38[0m

    An argument for 'eventBus' was not provided.
        private eventBus: IEventBus,
    [0m[36m    ~~~~~~~~~~~~~~~~~~~~~~~~~~~[0m
        at [0m[36mfile:///workspaces/claude-code-flow/src/coordination/resources.ts[0m:[0m[33m29[0m:[0m[33m5[0m

[0m[1mTS2554 [0m[ERROR]: Expected 3 arguments, but got 1.
      const limitedManager = new CoordinationManager({
[0m[31m                             ^[0m
    at [0m[36mfile:///workspaces/claude-code-flow/tests/unit/coordination/coordination-system.test.ts[0m:[0m[33m428[0m:[0m[33m30[0m

    An argument for 'eventBus' was not provided.
        private eventBus: IEventBus,
    [0m[36m    ~~~~~~~~~~~~~~~~~~~~~~~~~~~[0m
        at [0m[36mfile:///workspaces/claude-code-flow/src/coordination/manager.ts[0m:[0m[33m48[0m:[0m[33m5[0m

[0m[1mTS2339 [0m[ERROR]: Property 'submitTask' does not exist on type 'CoordinationManager'.
        () => limitedManager.submitTask('memory-heavy', memoryHeavyTask),
[0m[31m                             ~~~~~~~~~~[0m
    at [0m[36mfile:///workspaces/claude-code-flow/tests/unit/coordination/coordination-system.test.ts[0m:[0m[33m443[0m:[0m[33m30[0m

[0m[1mTS2339 [0m[ERROR]: Property 'delay' does not exist on type 'typeof AsyncTestUtils'.
          await AsyncTestUtils.delay(100);
[0m[31m                               ~~~~~[0m
    at [0m[36mfile:///workspaces/claude-code-flow/tests/unit/coordination/coordination-system.test.ts[0m:[0m[33m457[0m:[0m[33m32[0m

[0m[1mTS2339 [0m[ERROR]: Property 'submitTask' does not exist on type 'CoordinationManager'.
        coordinationManager.submitTask(task.id, task)
[0m[31m                            ~~~~~~~~~~[0m
    at [0m[36mfile:///workspaces/claude-code-flow/tests/unit/coordination/coordination-system.test.ts[0m:[0m[33m463[0m:[0m[33m29[0m

[0m[1mTS2339 [0m[ERROR]: Property 'delay' does not exist on type 'typeof AsyncTestUtils'.
          await AsyncTestUtils.delay(50);
[0m[31m                               ~~~~~[0m
    at [0m[36mfile:///workspaces/claude-code-flow/tests/unit/coordination/coordination-system.test.ts[0m:[0m[33m483[0m:[0m[33m32[0m

[0m[1mTS2339 [0m[ERROR]: Property 'submitTask' does not exist on type 'CoordinationManager'.
        coordinationManager.submitTask(task.id, task)
[0m[31m                            ~~~~~~~~~~[0m
    at [0m[36mfile:///workspaces/claude-code-flow/tests/unit/coordination/coordination-system.test.ts[0m:[0m[33m491[0m:[0m[33m29[0m

[0m[1mTS2339 [0m[ERROR]: Property 'delay' does not exist on type 'typeof AsyncTestUtils'.
          await AsyncTestUtils.delay(50);
[0m[31m                               ~~~~~[0m
    at [0m[36mfile:///workspaces/claude-code-flow/tests/unit/coordination/coordination-system.test.ts[0m:[0m[33m507[0m:[0m[33m32[0m

[0m[1mTS2339 [0m[ERROR]: Property 'delay' does not exist on type 'typeof AsyncTestUtils'.
          await AsyncTestUtils.delay(10);
[0m[31m                               ~~~~~[0m
    at [0m[36mfile:///workspaces/claude-code-flow/tests/unit/coordination/coordination-system.test.ts[0m:[0m[33m516[0m:[0m[33m32[0m

[0m[1mTS2339 [0m[ERROR]: Property 'submitTask' does not exist on type 'CoordinationManager'.
        () => coordinationManager.submitTask('failing-task', failingTask),
[0m[31m                                  ~~~~~~~~~~[0m
    at [0m[36mfile:///workspaces/claude-code-flow/tests/unit/coordination/coordination-system.test.ts[0m:[0m[33m523[0m:[0m[33m35[0m

[0m[1mTS2339 [0m[ERROR]: Property 'submitTask' does not exist on type 'CoordinationManager'.
      const result = await coordinationManager.submitTask('followup-task', followupTask);
[0m[31m                                               ~~~~~~~~~~[0m
    at [0m[36mfile:///workspaces/claude-code-flow/tests/unit/coordination/coordination-system.test.ts[0m:[0m[33m529[0m:[0m[33m48[0m

[0m[1mTS2339 [0m[ERROR]: Property 'delay' does not exist on type 'typeof AsyncTestUtils'.
            await AsyncTestUtils.delay(100);
[0m[31m                                 ~~~~~[0m
    at [0m[36mfile:///workspaces/claude-code-flow/tests/unit/coordination/coordination-system.test.ts[0m:[0m[33m546[0m:[0m[33m34[0m

[0m[1mTS2339 [0m[ERROR]: Property 'delay' does not exist on type 'typeof AsyncTestUtils'.
            await AsyncTestUtils.delay(50);
[0m[31m                                 ~~~~~[0m
    at [0m[36mfile:///workspaces/claude-code-flow/tests/unit/coordination/coordination-system.test.ts[0m:[0m[33m555[0m:[0m[33m34[0m

[0m[1mTS2339 [0m[ERROR]: Property 'submitTask' does not exist on type 'CoordinationManager'.
        coordinationManager.submitTask(task.id, task)
[0m[31m                            ~~~~~~~~~~[0m
    at [0m[36mfile:///workspaces/claude-code-flow/tests/unit/coordination/coordination-system.test.ts[0m:[0m[33m562[0m:[0m[33m29[0m

[0m[1mTS2554 [0m[ERROR]: Expected 2 arguments, but got 1.
      const timestampResolver = new ConflictResolver({
[0m[31m                                ^[0m
    at [0m[36mfile:///workspaces/claude-code-flow/tests/unit/coordination/coordination-system.test.ts[0m:[0m[33m574[0m:[0m[33m33[0m

    An argument for 'eventBus' was not provided.
        private eventBus: IEventBus,
    [0m[36m    ~~~~~~~~~~~~~~~~~~~~~~~~~~~[0m
        at [0m[36mfile:///workspaces/claude-code-flow/src/coordination/conflict-resolution.ts[0m:[0m[33m157[0m:[0m[33m5[0m

[0m[1mTS2554 [0m[ERROR]: Expected 3 arguments, but got 1.
      const timestampManager = new CoordinationManager({
[0m[31m                               ^[0m
    at [0m[36mfile:///workspaces/claude-code-flow/tests/unit/coordination/coordination-system.test.ts[0m:[0m[33m579[0m:[0m[33m32[0m

    An argument for 'eventBus' was not provided.
        private eventBus: IEventBus,
    [0m[36m    ~~~~~~~~~~~~~~~~~~~~~~~~~~~[0m
        at [0m[36mfile:///workspaces/claude-code-flow/src/coordination/manager.ts[0m:[0m[33m48[0m:[0m[33m5[0m

[0m[1mTS2339 [0m[ERROR]: Property 'submitTask' does not exist on type 'CoordinationManager'.
      const firstPromise = timestampManager.submitTask('first-timestamp', firstTask);
[0m[31m                                            ~~~~~~~~~~[0m
    at [0m[36mfile:///workspaces/claude-code-flow/tests/unit/coordination/coordination-system.test.ts[0m:[0m[33m600[0m:[0m[33m45[0m

[0m[1mTS2339 [0m[ERROR]: Property 'delay' does not exist on type 'typeof AsyncTestUtils'.
      await AsyncTestUtils.delay(5);
[0m[31m                           ~~~~~[0m
    at [0m[36mfile:///workspaces/claude-code-flow/tests/unit/coordination/coordination-system.test.ts[0m:[0m[33m601[0m:[0m[33m28[0m

[0m[1mTS2339 [0m[ERROR]: Property 'submitTask' does not exist on type 'CoordinationManager'.
      const secondPromise = timestampManager.submitTask('second-timestamp', secondTask);
[0m[31m                                             ~~~~~~~~~~[0m
    at [0m[36mfile:///workspaces/claude-code-flow/tests/unit/coordination/coordination-system.test.ts[0m:[0m[33m602[0m:[0m[33m46[0m

[0m[1mTS2339 [0m[ERROR]: Property 'delay' does not exist on type 'typeof AsyncTestUtils'.
          await AsyncTestUtils.delay(100);
[0m[31m                               ~~~~~[0m
    at [0m[36mfile:///workspaces/claude-code-flow/tests/unit/coordination/coordination-system.test.ts[0m:[0m[33m618[0m:[0m[33m32[0m

[0m[1mTS2339 [0m[ERROR]: Property 'delay' does not exist on type 'typeof AsyncTestUtils'.
        return AsyncTestUtils.delay(i * 10).then(() =>
[0m[31m                              ~~~~~[0m
    at [0m[36mfile:///workspaces/claude-code-flow/tests/unit/coordination/coordination-system.test.ts[0m:[0m[33m625[0m:[0m[33m31[0m

[0m[1mTS2339 [0m[ERROR]: Property 'submitTask' does not exist on type 'CoordinationManager'.
          coordinationManager.submitTask(task.id, task)
[0m[31m                              ~~~~~~~~~~[0m
    at [0m[36mfile:///workspaces/claude-code-flow/tests/unit/coordination/coordination-system.test.ts[0m:[0m[33m626[0m:[0m[33m31[0m

[0m[1mTS2339 [0m[ERROR]: Property 'delay' does not exist on type 'typeof AsyncTestUtils'.
            await AsyncTestUtils.delay(50);
[0m[31m                                 ~~~~~[0m
    at [0m[36mfile:///workspaces/claude-code-flow/tests/unit/coordination/coordination-system.test.ts[0m:[0m[33m645[0m:[0m[33m34[0m

[0m[1mTS2339 [0m[ERROR]: Property 'delay' does not exist on type 'typeof AsyncTestUtils'.
            await AsyncTestUtils.delay(50);
[0m[31m                                 ~~~~~[0m
    at [0m[36mfile:///workspaces/claude-code-flow/tests/unit/coordination/coordination-system.test.ts[0m:[0m[33m653[0m:[0m[33m34[0m

[0m[1mTS2339 [0m[ERROR]: Property 'delay' does not exist on type 'typeof AsyncTestUtils'.
            await AsyncTestUtils.delay(50);
[0m[31m                                 ~~~~~[0m
    at [0m[36mfile:///workspaces/claude-code-flow/tests/unit/coordination/coordination-system.test.ts[0m:[0m[33m661[0m:[0m[33m34[0m

[0m[1mTS2339 [0m[ERROR]: Property 'submitTask' does not exist on type 'CoordinationManager'.
        coordinationManager.submitTask(task.id, task)
[0m[31m                            ~~~~~~~~~~[0m
    at [0m[36mfile:///workspaces/claude-code-flow/tests/unit/coordination/coordination-system.test.ts[0m:[0m[33m668[0m:[0m[33m29[0m

[0m[1mTS2339 [0m[ERROR]: Property 'delay' does not exist on type 'typeof AsyncTestUtils'.
            await AsyncTestUtils.delay(20);
[0m[31m                                 ~~~~~[0m
    at [0m[36mfile:///workspaces/claude-code-flow/tests/unit/coordination/coordination-system.test.ts[0m:[0m[33m707[0m:[0m[33m34[0m

[0m[1mTS2339 [0m[ERROR]: Property 'delay' does not exist on type 'typeof AsyncTestUtils'.
            await AsyncTestUtils.delay(20);
[0m[31m                                 ~~~~~[0m
    at [0m[36mfile:///workspaces/claude-code-flow/tests/unit/coordination/coordination-system.test.ts[0m:[0m[33m714[0m:[0m[33m34[0m

[0m[1mTS2339 [0m[ERROR]: Property 'delay' does not exist on type 'typeof AsyncTestUtils'.
          await AsyncTestUtils.delay(100);
[0m[31m                               ~~~~~[0m
    at [0m[36mfile:///workspaces/claude-code-flow/tests/unit/coordination/coordination-system.test.ts[0m:[0m[33m780[0m:[0m[33m32[0m

[0m[1mTS2339 [0m[ERROR]: Property 'delay' does not exist on type 'typeof AsyncTestUtils'.
      await AsyncTestUtils.delay(10);
[0m[31m                           ~~~~~[0m
    at [0m[36mfile:///workspaces/claude-code-flow/tests/unit/coordination/coordination-system.test.ts[0m:[0m[33m789[0m:[0m[33m28[0m

[0m[1mTS2339 [0m[ERROR]: Property 'delay' does not exist on type 'typeof AsyncTestUtils'.
          await AsyncTestUtils.delay(50);
[0m[31m                               ~~~~~[0m
    at [0m[36mfile:///workspaces/claude-code-flow/tests/unit/coordination/coordination-system.test.ts[0m:[0m[33m807[0m:[0m[33m32[0m

[0m[1mTS2339 [0m[ERROR]: Property 'submitTask' does not exist on type 'CoordinationManager'.
          return coordinationManager.submitTask(taskId, {
[0m[31m                                     ~~~~~~~~~~[0m
    at [0m[36mfile:///workspaces/claude-code-flow/tests/unit/coordination/coordination-system.test.ts[0m:[0m[33m836[0m:[0m[33m38[0m

[0m[1mTS2339 [0m[ERROR]: Property 'submitTask' does not exist on type 'CoordinationManager'.
        coordinationManager.submitTask(task.id, task)
[0m[31m                            ~~~~~~~~~~[0m
    at [0m[36mfile:///workspaces/claude-code-flow/tests/unit/coordination/coordination-system.test.ts[0m:[0m[33m856[0m:[0m[33m29[0m

[0m[1mTS2339 [0m[ERROR]: Property 'delay' does not exist on type 'typeof AsyncTestUtils'.
            await AsyncTestUtils.delay(5);
[0m[31m                                 ~~~~~[0m
    at [0m[36mfile:///workspaces/claude-code-flow/tests/unit/coordination/coordination-system.test.ts[0m:[0m[33m878[0m:[0m[33m34[0m

[0m[1mTS2339 [0m[ERROR]: Property 'submitTask' does not exist on type 'CoordinationManager'.
          coordinationManager.submitTask(task.id, task)
[0m[31m                              ~~~~~~~~~~[0m
    at [0m[36mfile:///workspaces/claude-code-flow/tests/unit/coordination/coordination-system.test.ts[0m:[0m[33m884[0m:[0m[33m31[0m

[0m[1mTS2339 [0m[ERROR]: Property 'submitTask' does not exist on type 'CoordinationManager'.
          return coordinationManager.submitTask(taskId, {
[0m[31m                                     ~~~~~~~~~~[0m
    at [0m[36mfile:///workspaces/claude-code-flow/tests/unit/coordination/coordination-system.test.ts[0m:[0m[33m897[0m:[0m[33m38[0m

[0m[1mTS2339 [0m[ERROR]: Property 'submitTask' does not exist on type 'CoordinationManager'.
            await coordinationManager.submitTask(`error-task-${scenario.name}`, failingTask);
[0m[31m                                      ~~~~~~~~~~[0m
    at [0m[36mfile:///workspaces/claude-code-flow/tests/unit/coordination/coordination-system.test.ts[0m:[0m[33m934[0m:[0m[33m39[0m

[0m[1mTS2339 [0m[ERROR]: Property 'submitTask' does not exist on type 'CoordinationManager'.
            () => coordinationManager.submitTask(`error-task-${scenario.name}`, failingTask),
[0m[31m                                      ~~~~~~~~~~[0m
    at [0m[36mfile:///workspaces/claude-code-flow/tests/unit/coordination/coordination-system.test.ts[0m:[0m[33m942[0m:[0m[33m39[0m

[0m[1mTS2339 [0m[ERROR]: Property 'submit' does not exist on type 'TaskScheduler'.
      const originalSubmit = scheduler.submit.bind(scheduler);
[0m[31m                                       ~~~~~~[0m
    at [0m[36mfile:///workspaces/claude-code-flow/tests/unit/coordination/coordination-system.test.ts[0m:[0m[33m952[0m:[0m[33m40[0m

[0m[1mTS2339 [0m[ERROR]: Property 'submit' does not exist on type 'TaskScheduler'.
      scheduler.submit = spy(async (...args) => {
[0m[31m                ~~~~~~[0m
    at [0m[36mfile:///workspaces/claude-code-flow/tests/unit/coordination/coordination-system.test.ts[0m:[0m[33m955[0m:[0m[33m17[0m

[0m[1mTS2339 [0m[ERROR]: Property 'submitTask' does not exist on type 'CoordinationManager'.
      const result = await coordinationManager.submitTask('resilient-task', resilientTask);
[0m[31m                                               ~~~~~~~~~~[0m
    at [0m[36mfile:///workspaces/claude-code-flow/tests/unit/coordination/coordination-system.test.ts[0m:[0m[33m969[0m:[0m[33m48[0m

[0m[1mTS2339 [0m[ERROR]: Property 'acquireResources' does not exist on type 'ResourceManager'.
      const originalAcquire = resourceManager.acquireResources.bind(resourceManager);
[0m[31m                                              ~~~~~~~~~~~~~~~~[0m
    at [0m[36mfile:///workspaces/claude-code-flow/tests/unit/coordination/coordination-system.test.ts[0m:[0m[33m976[0m:[0m[33m47[0m

[0m[1mTS2339 [0m[ERROR]: Property 'acquireResources' does not exist on type 'ResourceManager'.
      resourceManager.acquireResources = spy(async (...args) => {
[0m[31m                      ~~~~~~~~~~~~~~~~[0m
    at [0m[36mfile:///workspaces/claude-code-flow/tests/unit/coordination/coordination-system.test.ts[0m:[0m[33m979[0m:[0m[33m23[0m

[0m[1mTS2339 [0m[ERROR]: Property 'submitTask' does not exist on type 'CoordinationManager'.
      const result = await coordinationManager.submitTask('resource-task', resourceTask);
[0m[31m                                               ~~~~~~~~~~[0m
    at [0m[36mfile:///workspaces/claude-code-flow/tests/unit/coordination/coordination-system.test.ts[0m:[0m[33m994[0m:[0m[33m48[0m

[0m[1mTS2339 [0m[ERROR]: Property 'submitTask' does not exist on type 'CoordinationManager'.
          coordinationManager.submitTask(task.id, task)
[0m[31m                              ~~~~~~~~~~[0m
    at [0m[36mfile:///workspaces/claude-code-flow/tests/unit/coordination/coordination-system.test.ts[0m:[0m[33m1012[0m:[0m[33m31[0m

[0m[1mTS2554 [0m[ERROR]: Expected 3-4 arguments, but got 2.
      const circuitBreaker = new CircuitBreaker('test-circuit', {
[0m[31m                             ^[0m
    at [0m[36mfile:///workspaces/claude-code-flow/tests/unit/coordination/coordination-system.test.ts[0m:[0m[33m1029[0m:[0m[33m30[0m

    An argument for 'logger' was not provided.
        private logger: ILogger,
    [0m[36m    ~~~~~~~~~~~~~~~~~~~~~~~[0m
        at [0m[36mfile:///workspaces/claude-code-flow/src/coordination/circuit-breaker.ts[0m:[0m[33m49[0m:[0m[33m5[0m

[0m[1mTS2339 [0m[ERROR]: Property 'state' does not exist on type 'CircuitState'.
      assertEquals(circuitBreaker.getState().state, 'open');
[0m[31m                                             ~~~~~[0m
    at [0m[36mfile:///workspaces/claude-code-flow/tests/unit/coordination/coordination-system.test.ts[0m:[0m[33m1054[0m:[0m[33m46[0m

[0m[1mTS2339 [0m[ERROR]: Property 'delay' does not exist on type 'typeof AsyncTestUtils'.
      await AsyncTestUtils.delay(2100);
[0m[31m                           ~~~~~[0m
    at [0m[36mfile:///workspaces/claude-code-flow/tests/unit/coordination/coordination-system.test.ts[0m:[0m[33m1064[0m:[0m[33m28[0m

[0m[1mTS2339 [0m[ERROR]: Property 'delay' does not exist on type 'typeof AsyncTestUtils'.
          await AsyncTestUtils.delay(10 + i * 5); // Variable execution time
[0m[31m                               ~~~~~[0m
    at [0m[36mfile:///workspaces/claude-code-flow/tests/unit/coordination/coordination-system.test.ts[0m:[0m[33m1081[0m:[0m[33m32[0m

[0m[1mTS2339 [0m[ERROR]: Property 'submitTask' does not exist on type 'CoordinationManager'.
        tasks.map(task => coordinationManager.submitTask(task.id, task))
[0m[31m                                              ~~~~~~~~~~[0m
    at [0m[36mfile:///workspaces/claude-code-flow/tests/unit/coordination/coordination-system.test.ts[0m:[0m[33m1087[0m:[0m[33m47[0m

[0m[1mTS2339 [0m[ERROR]: Property 'getMetrics' does not exist on type 'CoordinationManager'.
      const metrics = await coordinationManager.getMetrics();
[0m[31m                                                ~~~~~~~~~~[0m
    at [0m[36mfile:///workspaces/claude-code-flow/tests/unit/coordination/coordination-system.test.ts[0m:[0m[33m1090[0m:[0m[33m49[0m

[0m[1mTS2339 [0m[ERROR]: Property 'delay' does not exist on type 'typeof AsyncTestUtils'.
          await AsyncTestUtils.delay(50);
[0m[31m                               ~~~~~[0m
    at [0m[36mfile:///workspaces/claude-code-flow/tests/unit/coordination/coordination-system.test.ts[0m:[0m[33m1108[0m:[0m[33m32[0m

[0m[1mTS2339 [0m[ERROR]: Property 'submitTask' does not exist on type 'CoordinationManager'.
          coordinationManager.submitTask(task.id, task)
[0m[31m                              ~~~~~~~~~~[0m
    at [0m[36mfile:///workspaces/claude-code-flow/tests/unit/coordination/coordination-system.test.ts[0m:[0m[33m1115[0m:[0m[33m31[0m

[0m[1mTS2339 [0m[ERROR]: Property 'getMetrics' does not exist on type 'ResourceManager'.
      const resourceMetrics = await resourceManager.getMetrics();
[0m[31m                                                    ~~~~~~~~~~[0m
    at [0m[36mfile:///workspaces/claude-code-flow/tests/unit/coordination/coordination-system.test.ts[0m:[0m[33m1119[0m:[0m[33m53[0m

[0m[1mTS2339 [0m[ERROR]: Property 'components' does not exist on type '{ healthy: boolean; error?: string; metrics?: Record<string, number>; }'.
      assertEquals(typeof healthStatus.components, 'object');
[0m[31m                                       ~~~~~~~~~~[0m
    at [0m[36mfile:///workspaces/claude-code-flow/tests/unit/coordination/coordination-system.test.ts[0m:[0m[33m1132[0m:[0m[33m40[0m

[0m[1mTS2339 [0m[ERROR]: Property 'components' does not exist on type '{ healthy: boolean; error?: string; metrics?: Record<string, number>; }'.
      assertEquals(typeof healthStatus.components.scheduler, 'object');
[0m[31m                                       ~~~~~~~~~~[0m
    at [0m[36mfile:///workspaces/claude-code-flow/tests/unit/coordination/coordination-system.test.ts[0m:[0m[33m1135[0m:[0m[33m40[0m

[0m[1mTS2339 [0m[ERROR]: Property 'components' does not exist on type '{ healthy: boolean; error?: string; metrics?: Record<string, number>; }'.
      assertEquals(typeof healthStatus.components.resourceManager, 'object');
[0m[31m                                       ~~~~~~~~~~[0m
    at [0m[36mfile:///workspaces/claude-code-flow/tests/unit/coordination/coordination-system.test.ts[0m:[0m[33m1136[0m:[0m[33m40[0m

[0m[1mTS2339 [0m[ERROR]: Property 'components' does not exist on type '{ healthy: boolean; error?: string; metrics?: Record<string, number>; }'.
      assertEquals(typeof healthStatus.components.conflictResolver, 'object');
[0m[31m                                       ~~~~~~~~~~[0m
    at [0m[36mfile:///workspaces/claude-code-flow/tests/unit/coordination/coordination-system.test.ts[0m:[0m[33m1137[0m:[0m[33m40[0m

[0m[1mTS2339 [0m[ERROR]: Property 'delay' does not exist on type 'typeof AsyncTestUtils'.
          await AsyncTestUtils.delay(200 + i * 10); // Progressively slower
[0m[31m                               ~~~~~[0m
    at [0m[36mfile:///workspaces/claude-code-flow/tests/unit/coordination/coordination-system.test.ts[0m:[0m[33m1145[0m:[0m[33m32[0m

[0m[1mTS2339 [0m[ERROR]: Property 'submitTask' does not exist on type 'CoordinationManager'.
        slowTasks.map(task => coordinationManager.submitTask(task.id, task))
[0m[31m                                                  ~~~~~~~~~~[0m
    at [0m[36mfile:///workspaces/claude-code-flow/tests/unit/coordination/coordination-system.test.ts[0m:[0m[33m1153[0m:[0m[33m51[0m

[0m[1mTS2339 [0m[ERROR]: Property 'getPerformanceMetrics' does not exist on type 'CoordinationManager'.
      const performanceMetrics = await coordinationManager.getPerformanceMetrics();
[0m[31m                                                           ~~~~~~~~~~~~~~~~~~~~~[0m
    at [0m[36mfile:///workspaces/claude-code-flow/tests/unit/coordination/coordination-system.test.ts[0m:[0m[33m1159[0m:[0m[33m60[0m

[0m[1mTS18046 [0m[ERROR]: 'stats.conflictsByType' is of type 'unknown'.
    assertEquals(stats.conflictsByType.resource, 1);
[0m[31m                 ~~~~~~~~~~~~~~~~~~~~~[0m
    at [0m[36mfile:///workspaces/claude-code-flow/tests/unit/coordination/coordination.test.ts[0m:[0m[33m643[0m:[0m[33m18[0m

[0m[1mTS18046 [0m[ERROR]: 'stats.conflictsByType' is of type 'unknown'.
    assertEquals(stats.conflictsByType.task, 1);
[0m[31m                 ~~~~~~~~~~~~~~~~~~~~~[0m
    at [0m[36mfile:///workspaces/claude-code-flow/tests/unit/coordination/coordination.test.ts[0m:[0m[33m644[0m:[0m[33m18[0m

[0m[1mTS2673 [0m[ERROR]: Constructor of class 'EventBus' is private and only accessible within the class declaration.
    eventBus = new EventBus();
[0m[31m               ~~~~~~~~~~~~~~[0m
    at [0m[36mfile:///workspaces/claude-code-flow/tests/unit/core/enhanced-event-bus.test.ts[0m:[0m[33m27[0m:[0m[33m16[0m

[0m[1mTS2554 [0m[ERROR]: Expected 2 arguments, but got 3.
      eventBus.on('priority.event', lowPriorityHandler, { priority: 1 });
[0m[31m                                                        ~~~~~~~~~~~~~~~[0m
    at [0m[36mfile:///workspaces/claude-code-flow/tests/unit/core/enhanced-event-bus.test.ts[0m:[0m[33m198[0m:[0m[33m57[0m

[0m[1mTS2554 [0m[ERROR]: Expected 2 arguments, but got 3.
      eventBus.on('priority.event', highPriorityHandler, { priority: 10 });
[0m[31m                                                         ~~~~~~~~~~~~~~~~[0m
    at [0m[36mfile:///workspaces/claude-code-flow/tests/unit/core/enhanced-event-bus.test.ts[0m:[0m[33m199[0m:[0m[33m58[0m

[0m[1mTS2554 [0m[ERROR]: Expected 2 arguments, but got 3.
      eventBus.on('priority.event', normalPriorityHandler, { priority: 5 });
[0m[31m                                                           ~~~~~~~~~~~~~~~[0m
    at [0m[36mfile:///workspaces/claude-code-flow/tests/unit/core/enhanced-event-bus.test.ts[0m:[0m[33m200[0m:[0m[33m60[0m

[0m[1mTS2339 [0m[ERROR]: Property 'delay' does not exist on type 'typeof AsyncTestUtils'.
        await AsyncTestUtils.delay(10);
[0m[31m                             ~~~~~[0m
    at [0m[36mfile:///workspaces/claude-code-flow/tests/unit/core/enhanced-event-bus.test.ts[0m:[0m[33m212[0m:[0m[33m30[0m

[0m[1mTS2339 [0m[ERROR]: Property 'delay' does not exist on type 'typeof AsyncTestUtils'.
        await AsyncTestUtils.delay(5);
[0m[31m                             ~~~~~[0m
    at [0m[36mfile:///workspaces/claude-code-flow/tests/unit/core/enhanced-event-bus.test.ts[0m:[0m[33m217[0m:[0m[33m30[0m

[0m[1mTS2339 [0m[ERROR]: Property 'emitAsync' does not exist on type 'EventBus'.
      await eventBus.emitAsync('async.event', {});
[0m[31m                     ~~~~~~~~~[0m
    at [0m[36mfile:///workspaces/claude-code-flow/tests/unit/core/enhanced-event-bus.test.ts[0m:[0m[33m229[0m:[0m[33m22[0m

[0m[1mTS2345 [0m[ERROR]: Argument of type '() => void' is not assignable to parameter of type '() => Promise<unknown>'.
  Type 'void' is not assignable to type 'Promise<unknown>'.
        () => {
[0m[31m        ~~~~~~~[0m
    at [0m[36mfile:///workspaces/claude-code-flow/tests/unit/core/enhanced-event-bus.test.ts[0m:[0m[33m262[0m:[0m[33m9[0m

[0m[1mTS2345 [0m[ERROR]: Argument of type '() => void' is not assignable to parameter of type '() => Promise<unknown>'.
  Type 'void' is not assignable to type 'Promise<unknown>'.
        () => {
[0m[31m        ~~~~~~~[0m
    at [0m[36mfile:///workspaces/claude-code-flow/tests/unit/core/enhanced-event-bus.test.ts[0m:[0m[33m283[0m:[0m[33m9[0m

[0m[1mTS2345 [0m[ERROR]: Argument of type '() => void' is not assignable to parameter of type '() => Promise<unknown>'.
  Type 'void' is not assignable to type 'Promise<unknown>'.
        () => {
[0m[31m        ~~~~~~~[0m
    at [0m[36mfile:///workspaces/claude-code-flow/tests/unit/core/enhanced-event-bus.test.ts[0m:[0m[33m324[0m:[0m[33m9[0m

[0m[1mTS2339 [0m[ERROR]: Property 'delay' does not exist on type 'typeof AsyncTestUtils'.
        await AsyncTestUtils.delay(10);
[0m[31m                             ~~~~~[0m
    at [0m[36mfile:///workspaces/claude-code-flow/tests/unit/core/enhanced-event-bus.test.ts[0m:[0m[33m510[0m:[0m[33m30[0m

[0m[1mTS2339 [0m[ERROR]: Property 'delay' does not exist on type 'typeof AsyncTestUtils'.
        await AsyncTestUtils.delay(5);
[0m[31m                             ~~~~~[0m
    at [0m[36mfile:///workspaces/claude-code-flow/tests/unit/core/enhanced-event-bus.test.ts[0m:[0m[33m515[0m:[0m[33m30[0m

[0m[1mTS2339 [0m[ERROR]: Property 'emitAsync' does not exist on type 'EventBus'.
      await eventBus.emitAsync('async.error', {});
[0m[31m                     ~~~~~~~~~[0m
    at [0m[36mfile:///workspaces/claude-code-flow/tests/unit/core/enhanced-event-bus.test.ts[0m:[0m[33m523[0m:[0m[33m22[0m

[0m[1mTS2339 [0m[ERROR]: Property 'delay' does not exist on type 'typeof AsyncTestUtils'.
        await AsyncTestUtils.delay(5000); // 5 seconds
[0m[31m                             ~~~~~[0m
    at [0m[36mfile:///workspaces/claude-code-flow/tests/unit/core/enhanced-event-bus.test.ts[0m:[0m[33m531[0m:[0m[33m30[0m

[0m[1mTS2339 [0m[ERROR]: Property 'delay' does not exist on type 'typeof AsyncTestUtils'.
        await AsyncTestUtils.delay(10);
[0m[31m                             ~~~~~[0m
    at [0m[36mfile:///workspaces/claude-code-flow/tests/unit/core/enhanced-event-bus.test.ts[0m:[0m[33m536[0m:[0m[33m30[0m

[0m[1mTS2339 [0m[ERROR]: Property 'emitAsync' does not exist on type 'EventBus'.
        () => eventBus.emitAsync('timeout.test', {}, { timeout: 1000 }),
[0m[31m                       ~~~~~~~~~[0m
    at [0m[36mfile:///workspaces/claude-code-flow/tests/unit/core/enhanced-event-bus.test.ts[0m:[0m[33m545[0m:[0m[33m24[0m

[0m[1mTS2339 [0m[ERROR]: Property 'enableHistory' does not exist on type 'EventBus'.
      eventBus.enableHistory(100); // Keep last 100 events
[0m[31m               ~~~~~~~~~~~~~[0m
    at [0m[36mfile:///workspaces/claude-code-flow/tests/unit/core/enhanced-event-bus.test.ts[0m:[0m[33m556[0m:[0m[33m16[0m

[0m[1mTS2339 [0m[ERROR]: Property 'getEventHistory' does not exist on type 'EventBus'.
      const history = eventBus.getEventHistory();
[0m[31m                               ~~~~~~~~~~~~~~~[0m
    at [0m[36mfile:///workspaces/claude-code-flow/tests/unit/core/enhanced-event-bus.test.ts[0m:[0m[33m567[0m:[0m[33m32[0m

[0m[1mTS2339 [0m[ERROR]: Property 'enableHistory' does not exist on type 'EventBus'.
      eventBus.enableHistory(10); // Keep only last 10 events
[0m[31m               ~~~~~~~~~~~~~[0m
    at [0m[36mfile:///workspaces/claude-code-flow/tests/unit/core/enhanced-event-bus.test.ts[0m:[0m[33m576[0m:[0m[33m16[0m

[0m[1mTS2339 [0m[ERROR]: Property 'getEventHistory' does not exist on type 'EventBus'.
      const history = eventBus.getEventHistory();
[0m[31m                               ~~~~~~~~~~~~~~~[0m
    at [0m[36mfile:///workspaces/claude-code-flow/tests/unit/core/enhanced-event-bus.test.ts[0m:[0m[33m583[0m:[0m[33m32[0m

[0m[1mTS2339 [0m[ERROR]: Property 'totalEvents' does not exist on type '{ event: string; count: number; lastEmitted: Date | null; }[]'.
      assertEquals(typeof stats.totalEvents, 'number');
[0m[31m                                ~~~~~~~~~~~[0m
    at [0m[36mfile:///workspaces/claude-code-flow/tests/unit/core/enhanced-event-bus.test.ts[0m:[0m[33m603[0m:[0m[33m33[0m

[0m[1mTS2339 [0m[ERROR]: Property 'uniqueEventTypes' does not exist on type '{ event: string; count: number; lastEmitted: Date | null; }[]'.
      assertEquals(typeof stats.uniqueEventTypes, 'number');
[0m[31m                                ~~~~~~~~~~~~~~~~[0m
    at [0m[36mfile:///workspaces/claude-code-flow/tests/unit/core/enhanced-event-bus.test.ts[0m:[0m[33m604[0m:[0m[33m33[0m

[0m[1mTS2339 [0m[ERROR]: Property 'totalHandlers' does not exist on type '{ event: string; count: number; lastEmitted: Date | null; }[]'.
      assertEquals(typeof stats.totalHandlers, 'number');
[0m[31m                                ~~~~~~~~~~~~~[0m
    at [0m[36mfile:///workspaces/claude-code-flow/tests/unit/core/enhanced-event-bus.test.ts[0m:[0m[33m605[0m:[0m[33m33[0m

[0m[1mTS2339 [0m[ERROR]: Property 'totalEvents' does not exist on type '{ event: string; count: number; lastEmitted: Date | null; }[]'.
      assertEquals(stats.totalEvents >= 4, true);
[0m[31m                         ~~~~~~~~~~~[0m
    at [0m[36mfile:///workspaces/claude-code-flow/tests/unit/core/enhanced-event-bus.test.ts[0m:[0m[33m607[0m:[0m[33m26[0m

[0m[1mTS2339 [0m[ERROR]: Property 'uniqueEventTypes' does not exist on type '{ event: string; count: number; lastEmitted: Date | null; }[]'.
      assertEquals(stats.uniqueEventTypes >= 3, true);
[0m[31m                         ~~~~~~~~~~~~~~~~[0m
    at [0m[36mfile:///workspaces/claude-code-flow/tests/unit/core/enhanced-event-bus.test.ts[0m:[0m[33m608[0m:[0m[33m26[0m

[0m[1mTS2554 [0m[ERROR]: Expected 7 arguments, but got 1.
    orchestrator = new Orchestrator({
[0m[31m                   ^[0m
    at [0m[36mfile:///workspaces/claude-code-flow/tests/unit/core/enhanced-orchestrator.test.ts[0m:[0m[33m38[0m:[0m[33m20[0m

    An argument for 'terminalManager' was not provided.
        private terminalManager: ITerminalManager,
    [0m[36m    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~[0m
        at [0m[36mfile:///workspaces/claude-code-flow/src/core/orchestrator.ts[0m:[0m[33m311[0m:[0m[33m5[0m

[0m[1mTS2339 [0m[ERROR]: Property 'length' does not exist on type 'void'.
      assertEquals(mocks.eventBus.clearEvents().length, 0);
[0m[31m                                                ~~~~~~[0m
    at [0m[36mfile:///workspaces/claude-code-flow/tests/unit/core/enhanced-orchestrator.test.ts[0m:[0m[33m71[0m:[0m[33m49[0m

[0m[1mTS2339 [0m[ERROR]: Property 'createAndExecuteTask' does not exist on type 'Orchestrator'.
      const result = await orchestrator.createAndExecuteTask(agentProfile, task);
[0m[31m                                        ~~~~~~~~~~~~~~~~~~~~[0m
    at [0m[36mfile:///workspaces/claude-code-flow/tests/unit/core/enhanced-orchestrator.test.ts[0m:[0m[33m140[0m:[0m[33m41[0m

[0m[1mTS2339 [0m[ERROR]: Property 'createAndExecuteTask' does not exist on type 'Orchestrator'.
        await orchestrator.createAndExecuteTask(agentProfile, task);
[0m[31m                           ~~~~~~~~~~~~~~~~~~~~[0m
    at [0m[36mfile:///workspaces/claude-code-flow/tests/unit/core/enhanced-orchestrator.test.ts[0m:[0m[33m154[0m:[0m[33m28[0m

[0m[1mTS2339 [0m[ERROR]: Property 'createAndExecuteTask' does not exist on type 'Orchestrator'.
        orchestrator.createAndExecuteTask(agentProfile, task)
[0m[31m                     ~~~~~~~~~~~~~~~~~~~~[0m
    at [0m[36mfile:///workspaces/claude-code-flow/tests/unit/core/enhanced-orchestrator.test.ts[0m:[0m[33m171[0m:[0m[33m22[0m

[0m[1mTS2339 [0m[ERROR]: Property 'createAndExecuteTask' does not exist on type 'Orchestrator'.
        () => orchestrator.createAndExecuteTask(agentProfile, task),
[0m[31m                           ~~~~~~~~~~~~~~~~~~~~[0m
    at [0m[36mfile:///workspaces/claude-code-flow/tests/unit/core/enhanced-orchestrator.test.ts[0m:[0m[33m198[0m:[0m[33m28[0m

[0m[1mTS2339 [0m[ERROR]: Property 'createAndExecuteTask' does not exist on type 'Orchestrator'.
      const result = await orchestrator.createAndExecuteTask(agentProfile, task);
[0m[31m                                        ~~~~~~~~~~~~~~~~~~~~[0m
    at [0m[36mfile:///workspaces/claude-code-flow/tests/unit/core/enhanced-orchestrator.test.ts[0m:[0m[33m223[0m:[0m[33m41[0m

[0m[1mTS2339 [0m[ERROR]: Property 'healthy' does not exist on type 'HealthStatus'.
      assertEquals(health.healthy, true);
[0m[31m                          ~~~~~~~[0m
    at [0m[36mfile:///workspaces/claude-code-flow/tests/unit/core/enhanced-orchestrator.test.ts[0m:[0m[33m237[0m:[0m[33m27[0m

[0m[1mTS2339 [0m[ERROR]: Property 'healthy' does not exist on type 'ComponentHealth'.
        assertEquals(componentHealth.healthy, true);
[0m[31m                                     ~~~~~~~[0m
    at [0m[36mfile:///workspaces/claude-code-flow/tests/unit/core/enhanced-orchestrator.test.ts[0m:[0m[33m243[0m:[0m[33m38[0m

[0m[1mTS2339 [0m[ERROR]: Property 'healthy' does not exist on type 'HealthStatus'.
      assertEquals(health.healthy, false);
[0m[31m                          ~~~~~~~[0m
    at [0m[36mfile:///workspaces/claude-code-flow/tests/unit/core/enhanced-orchestrator.test.ts[0m:[0m[33m257[0m:[0m[33m27[0m

[0m[1mTS2339 [0m[ERROR]: Property 'healthy' does not exist on type 'ComponentHealth'.
      assertEquals(health.components.terminal.healthy, false);
[0m[31m                                              ~~~~~~~[0m
    at [0m[36mfile:///workspaces/claude-code-flow/tests/unit/core/enhanced-orchestrator.test.ts[0m:[0m[33m258[0m:[0m[33m47[0m

[0m[1mTS2339 [0m[ERROR]: Property 'createAndExecuteTask' does not exist on type 'Orchestrator'.
        await orchestrator.createAndExecuteTask(agentProfile, task);
[0m[31m                           ~~~~~~~~~~~~~~~~~~~~[0m
    at [0m[36mfile:///workspaces/claude-code-flow/tests/unit/core/enhanced-orchestrator.test.ts[0m:[0m[33m273[0m:[0m[33m28[0m

[0m[1mTS2339 [0m[ERROR]: Property 'metrics' does not exist on type 'HealthStatus'.
      assertExists(health.metrics);
[0m[31m                          ~~~~~~~[0m
    at [0m[36mfile:///workspaces/claude-code-flow/tests/unit/core/enhanced-orchestrator.test.ts[0m:[0m[33m277[0m:[0m[33m27[0m

[0m[1mTS2339 [0m[ERROR]: Property 'metrics' does not exist on type 'HealthStatus'.
      if (health.metrics) {
[0m[31m                 ~~~~~~~[0m
    at [0m[36mfile:///workspaces/claude-code-flow/tests/unit/core/enhanced-orchestrator.test.ts[0m:[0m[33m279[0m:[0m[33m18[0m

[0m[1mTS2339 [0m[ERROR]: Property 'metrics' does not exist on type 'HealthStatus'.
        assertEquals(typeof health.metrics.tasksExecuted, 'number');
[0m[31m                                   ~~~~~~~[0m
    at [0m[36mfile:///workspaces/claude-code-flow/tests/unit/core/enhanced-orchestrator.test.ts[0m:[0m[33m280[0m:[0m[33m36[0m

[0m[1mTS2339 [0m[ERROR]: Property 'metrics' does not exist on type 'HealthStatus'.
        assertEquals(typeof health.metrics.averageExecutionTime, 'number');
[0m[31m                                   ~~~~~~~[0m
    at [0m[36mfile:///workspaces/claude-code-flow/tests/unit/core/enhanced-orchestrator.test.ts[0m:[0m[33m281[0m:[0m[33m36[0m

[0m[1mTS2339 [0m[ERROR]: Property 'createMemoryBank' does not exist on type 'Orchestrator'.
      const bankId = await orchestrator.createMemoryBank(agentId);
[0m[31m                                        ~~~~~~~~~~~~~~~~[0m
    at [0m[36mfile:///workspaces/claude-code-flow/tests/unit/core/enhanced-orchestrator.test.ts[0m:[0m[33m293[0m:[0m[33m41[0m

[0m[1mTS2339 [0m[ERROR]: Property 'storeMemory' does not exist on type 'Orchestrator'.
      await orchestrator.storeMemory(bankId, 'test-key', { data: 'test-value' });
[0m[31m                         ~~~~~~~~~~~[0m
    at [0m[36mfile:///workspaces/claude-code-flow/tests/unit/core/enhanced-orchestrator.test.ts[0m:[0m[33m299[0m:[0m[33m26[0m

[0m[1mTS2339 [0m[ERROR]: Property 'retrieveMemory' does not exist on type 'Orchestrator'.
      const retrieved = await orchestrator.retrieveMemory(bankId, 'test-key');
[0m[31m                                           ~~~~~~~~~~~~~~[0m
    at [0m[36mfile:///workspaces/claude-code-flow/tests/unit/core/enhanced-orchestrator.test.ts[0m:[0m[33m302[0m:[0m[33m44[0m

[0m[1mTS2339 [0m[ERROR]: Property 'createMemoryBank' does not exist on type 'Orchestrator'.
      const bankId = await orchestrator.createMemoryBank(agentId);
[0m[31m                                        ~~~~~~~~~~~~~~~~[0m
    at [0m[36mfile:///workspaces/claude-code-flow/tests/unit/core/enhanced-orchestrator.test.ts[0m:[0m[33m308[0m:[0m[33m41[0m

[0m[1mTS2339 [0m[ERROR]: Property 'storeMemory' does not exist on type 'Orchestrator'.
        await orchestrator.storeMemory(bankId, `key-${i}`, { value: i });
[0m[31m                           ~~~~~~~~~~~[0m
    at [0m[36mfile:///workspaces/claude-code-flow/tests/unit/core/enhanced-orchestrator.test.ts[0m:[0m[33m312[0m:[0m[33m28[0m

[0m[1mTS2339 [0m[ERROR]: Property 'retrieveMemory' does not exist on type 'Orchestrator'.
        return orchestrator.retrieveMemory(bankId, `key-${i}`);
[0m[31m                            ~~~~~~~~~~~~~~[0m
    at [0m[36mfile:///workspaces/claude-code-flow/tests/unit/core/enhanced-orchestrator.test.ts[0m:[0m[33m313[0m:[0m[33m29[0m

[0m[1mTS7006 [0m[ERROR]: Parameter 'result' implicitly has an 'any' type.
      results.forEach((result, i) => {
[0m[31m                       ~~~~~~[0m
    at [0m[36mfile:///workspaces/claude-code-flow/tests/unit/core/enhanced-orchestrator.test.ts[0m:[0m[33m320[0m:[0m[33m24[0m

[0m[1mTS7006 [0m[ERROR]: Parameter 'i' implicitly has an 'any' type.
      results.forEach((result, i) => {
[0m[31m                               ^[0m
    at [0m[36mfile:///workspaces/claude-code-flow/tests/unit/core/enhanced-orchestrator.test.ts[0m:[0m[33m320[0m:[0m[33m32[0m

[0m[1mTS2339 [0m[ERROR]: Property 'createMemoryBank' does not exist on type 'Orchestrator'.
      const bankId = await orchestrator.createMemoryBank(agentId);
[0m[31m                                        ~~~~~~~~~~~~~~~~[0m
    at [0m[36mfile:///workspaces/claude-code-flow/tests/unit/core/enhanced-orchestrator.test.ts[0m:[0m[33m327[0m:[0m[33m41[0m

[0m[1mTS2339 [0m[ERROR]: Property 'storeMemory' does not exist on type 'Orchestrator'.
          await orchestrator.storeMemory(bankId, `key-${i}`, {
[0m[31m                             ~~~~~~~~~~~[0m
    at [0m[36mfile:///workspaces/claude-code-flow/tests/unit/core/enhanced-orchestrator.test.ts[0m:[0m[33m332[0m:[0m[33m30[0m

[0m[1mTS2339 [0m[ERROR]: Property 'retrieveMemory' does not exist on type 'Orchestrator'.
          await orchestrator.retrieveMemory(bankId, `key-${i}`);
[0m[31m                             ~~~~~~~~~~~~~~[0m
    at [0m[36mfile:///workspaces/claude-code-flow/tests/unit/core/enhanced-orchestrator.test.ts[0m:[0m[33m340[0m:[0m[33m30[0m

[0m[1mTS2339 [0m[ERROR]: Property 'createAndExecuteTask' does not exist on type 'Orchestrator'.
        () => orchestrator.createAndExecuteTask(agentProfile, {
[0m[31m                           ~~~~~~~~~~~~~~~~~~~~[0m
    at [0m[36mfile:///workspaces/claude-code-flow/tests/unit/core/enhanced-orchestrator.test.ts[0m:[0m[33m358[0m:[0m[33m28[0m

[0m[1mTS2339 [0m[ERROR]: Property 'createMemoryBank' does not exist on type 'Orchestrator'.
      const bankId = await orchestrator.createMemoryBank(agentId);
[0m[31m                                        ~~~~~~~~~~~~~~~~[0m
    at [0m[36mfile:///workspaces/claude-code-flow/tests/unit/core/enhanced-orchestrator.test.ts[0m:[0m[33m376[0m:[0m[33m41[0m

[0m[1mTS2339 [0m[ERROR]: Property 'storeMemory' does not exist on type 'Orchestrator'.
        await orchestrator.storeMemory(bankId, `pressure-key-${i}`, {
[0m[31m                           ~~~~~~~~~~~[0m
    at [0m[36mfile:///workspaces/claude-code-flow/tests/unit/core/enhanced-orchestrator.test.ts[0m:[0m[33m380[0m:[0m[33m28[0m

[0m[1mTS2339 [0m[ERROR]: Property 'createAndExecuteTask' does not exist on type 'Orchestrator'.
        () => orchestrator.createAndExecuteTask(agentProfile, {
[0m[31m                           ~~~~~~~~~~~~~~~~~~~~[0m
    at [0m[36mfile:///workspaces/claude-code-flow/tests/unit/core/enhanced-orchestrator.test.ts[0m:[0m[33m390[0m:[0m[33m28[0m

[0m[1mTS2339 [0m[ERROR]: Property 'createAndExecuteTask' does not exist on type 'Orchestrator'.
        () => orchestrator.createAndExecuteTask(agentProfile, {
[0m[31m                           ~~~~~~~~~~~~~~~~~~~~[0m
    at [0m[36mfile:///workspaces/claude-code-flow/tests/unit/core/enhanced-orchestrator.test.ts[0m:[0m[33m407[0m:[0m[33m28[0m

[0m[1mTS2339 [0m[ERROR]: Property 'createAndExecuteTask' does not exist on type 'Orchestrator'.
            () => orchestrator.createAndExecuteTask(agentProfile, task),
[0m[31m                               ~~~~~~~~~~~~~~~~~~~~[0m
    at [0m[36mfile:///workspaces/claude-code-flow/tests/unit/core/enhanced-orchestrator.test.ts[0m:[0m[33m454[0m:[0m[33m32[0m

[0m[1mTS2339 [0m[ERROR]: Property 'createAndExecuteTask' does not exist on type 'Orchestrator'.
            () => orchestrator.createAndExecuteTask(agentProfile, task),
[0m[31m                               ~~~~~~~~~~~~~~~~~~~~[0m
    at [0m[36mfile:///workspaces/claude-code-flow/tests/unit/core/enhanced-orchestrator.test.ts[0m:[0m[33m461[0m:[0m[33m32[0m

[0m[1mTS2339 [0m[ERROR]: Property 'createAndExecuteTask' does not exist on type 'Orchestrator'.
          () => orchestrator.createAndExecuteTask(agentProfile, task as any),
[0m[31m                             ~~~~~~~~~~~~~~~~~~~~[0m
    at [0m[36mfile:///workspaces/claude-code-flow/tests/unit/core/enhanced-orchestrator.test.ts[0m:[0m[33m482[0m:[0m[33m30[0m

[0m[1mTS2339 [0m[ERROR]: Property 'createAndExecuteTask' does not exist on type 'Orchestrator'.
        tasks.map(task => orchestrator.createAndExecuteTask(agentProfile, task))
[0m[31m                                       ~~~~~~~~~~~~~~~~~~~~[0m
    at [0m[36mfile:///workspaces/claude-code-flow/tests/unit/core/enhanced-orchestrator.test.ts[0m:[0m[33m501[0m:[0m[33m40[0m

[0m[1mTS2339 [0m[ERROR]: Property 'healthy' does not exist on type 'HealthStatus'.
      assertEquals(health.healthy, true);
[0m[31m                          ~~~~~~~[0m
    at [0m[36mfile:///workspaces/claude-code-flow/tests/unit/core/enhanced-orchestrator.test.ts[0m:[0m[33m512[0m:[0m[33m27[0m

[0m[1mTS2339 [0m[ERROR]: Property 'createAndExecuteTask' does not exist on type 'Orchestrator'.
      const result = await orchestrator.createAndExecuteTask(agentProfile, task);
[0m[31m                                        ~~~~~~~~~~~~~~~~~~~~[0m
    at [0m[36mfile:///workspaces/claude-code-flow/tests/unit/core/enhanced-orchestrator.test.ts[0m:[0m[33m536[0m:[0m[33m41[0m

[0m[1mTS2339 [0m[ERROR]: Property 'createMemoryBank' does not exist on type 'Orchestrator'.
      await orchestrator.createMemoryBank('shutdown-agent');
[0m[31m                         ~~~~~~~~~~~~~~~~[0m
    at [0m[36mfile:///workspaces/claude-code-flow/tests/unit/core/enhanced-orchestrator.test.ts[0m:[0m[33m548[0m:[0m[33m26[0m

[0m[1mTS2339 [0m[ERROR]: Property 'createAndExecuteTask' does not exist on type 'Orchestrator'.
      const taskPromise = orchestrator.createAndExecuteTask(agentProfile, {
[0m[31m                                       ~~~~~~~~~~~~~~~~~~~~[0m
    at [0m[36mfile:///workspaces/claude-code-flow/tests/unit/core/enhanced-orchestrator.test.ts[0m:[0m[33m570[0m:[0m[33m40[0m

[0m[1mTS2345 [0m[ERROR]: Argument of type 'MockTerminalManager' is not assignable to parameter of type 'ITerminalManager'.
  Property 'executeCommand' is missing in type 'MockTerminalManager' but required in type 'ITerminalManager'.
      mocks.terminalManager,
[0m[31m      ~~~~~~~~~~~~~~~~~~~~~[0m
    at [0m[36mfile:///workspaces/claude-code-flow/tests/unit/core/orchestrator.test.ts[0m:[0m[33m40[0m:[0m[33m7[0m

    'executeCommand' is declared here.
      executeCommand(terminalId: string, command: string): Promise<string>;
    [0m[36m  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~[0m
        at [0m[36mfile:///workspaces/claude-code-flow/src/terminal/manager.ts[0m:[0m[33m20[0m:[0m[33m3[0m

[0m[1mTS2724 [0m[ERROR]: '"file:///workspaces/claude-code-flow/src/mcp/transports/http.ts"' has no exported member named 'HTTPTransport'. Did you mean 'HttpTransport'?
import { HTTPTransport } from '../../../src/mcp/transports/http.ts';
[0m[31m         ~~~~~~~~~~~~~[0m
    at [0m[36mfile:///workspaces/claude-code-flow/tests/unit/mcp/mcp-interface.test.ts[0m:[0m[33m14[0m:[0m[33m10[0m

    'HttpTransport' is declared here.
    export class HttpTransport implements ITransport {
    [0m[36m             ~~~~~~~~~~~~~[0m
        at [0m[36mfile:///workspaces/claude-code-flow/src/mcp/transports/http.ts[0m:[0m[33m13[0m:[0m[33m14[0m

[0m[1mTS2724 [0m[ERROR]: '"file:///workspaces/claude-code-flow/src/mcp/session-manager.ts"' has no exported member named 'MCPSessionManager'. Did you mean 'SessionManager'?
import { MCPSessionManager } from '../../../src/mcp/session-manager.ts';
[0m[31m         ~~~~~~~~~~~~~~~~~[0m
    at [0m[36mfile:///workspaces/claude-code-flow/tests/unit/mcp/mcp-interface.test.ts[0m:[0m[33m15[0m:[0m[33m10[0m

    'SessionManager' is declared here.
    export class SessionManager implements ISessionManager {
    [0m[36m             ~~~~~~~~~~~~~~[0m
        at [0m[36mfile:///workspaces/claude-code-flow/src/mcp/session-manager.ts[0m:[0m[33m37[0m:[0m[33m14[0m

[0m[1mTS2724 [0m[ERROR]: '"file:///workspaces/claude-code-flow/src/mcp/load-balancer.ts"' has no exported member named 'MCPLoadBalancer'. Did you mean 'LoadBalancer'?
import { MCPLoadBalancer } from '../../../src/mcp/load-balancer.ts';
[0m[31m         ~~~~~~~~~~~~~~~[0m
    at [0m[36mfile:///workspaces/claude-code-flow/tests/unit/mcp/mcp-interface.test.ts[0m:[0m[33m16[0m:[0m[33m10[0m

    'LoadBalancer' is declared here.
    export class LoadBalancer implements ILoadBalancer {
    [0m[36m             ~~~~~~~~~~~~[0m
        at [0m[36mfile:///workspaces/claude-code-flow/src/mcp/load-balancer.ts[0m:[0m[33m168[0m:[0m[33m14[0m

[0m[1mTS2724 [0m[ERROR]: '"file:///workspaces/claude-code-flow/src/mcp/auth.ts"' has no exported member named 'MCPAuthManager'. Did you mean 'AuthManager'?
import { MCPAuthManager } from '../../../src/mcp/auth.ts';
[0m[31m         ~~~~~~~~~~~~~~[0m
    at [0m[36mfile:///workspaces/claude-code-flow/tests/unit/mcp/mcp-interface.test.ts[0m:[0m[33m17[0m:[0m[33m10[0m

    'AuthManager' is declared here.
    export class AuthManager implements IAuthManager {
    [0m[36m             ~~~~~~~~~~~[0m
        at [0m[36mfile:///workspaces/claude-code-flow/src/mcp/auth.ts[0m:[0m[33m37[0m:[0m[33m14[0m

[0m[1mTS2353 [0m[ERROR]: Object literal may only specify known properties, and 'command' does not exist in type 'ILogger'.
        command: 'node',
[0m[31m        ~~~~~~~[0m
    at [0m[36mfile:///workspaces/claude-code-flow/tests/unit/mcp/mcp-interface.test.ts[0m:[0m[33m176[0m:[0m[33m9[0m

[0m[1mTS2339 [0m[ERROR]: Property 'close' does not exist on type 'StdioTransport'.
        await stdioTransport.close();
[0m[31m                             ~~~~~[0m
    at [0m[36mfile:///workspaces/claude-code-flow/tests/unit/mcp/mcp-interface.test.ts[0m:[0m[33m185[0m:[0m[33m30[0m

[0m[1mTS2339 [0m[ERROR]: Property 'connect' does not exist on type 'StdioTransport'.
      await stdioTransport.connect();
[0m[31m                           ~~~~~~~[0m
    at [0m[36mfile:///workspaces/claude-code-flow/tests/unit/mcp/mcp-interface.test.ts[0m:[0m[33m190[0m:[0m[33m28[0m

[0m[1mTS2339 [0m[ERROR]: Property 'isConnected' does not exist on type 'StdioTransport'.
      assertEquals(stdioTransport.isConnected(), true);
[0m[31m                                  ~~~~~~~~~~~[0m
    at [0m[36mfile:///workspaces/claude-code-flow/tests/unit/mcp/mcp-interface.test.ts[0m:[0m[33m191[0m:[0m[33m35[0m

[0m[1mTS2339 [0m[ERROR]: Property 'connect' does not exist on type 'StdioTransport'.
      await stdioTransport.connect();
[0m[31m                           ~~~~~~~[0m
    at [0m[36mfile:///workspaces/claude-code-flow/tests/unit/mcp/mcp-interface.test.ts[0m:[0m[33m195[0m:[0m[33m28[0m

[0m[1mTS2339 [0m[ERROR]: Property 'send' does not exist on type 'StdioTransport'.
      const responsePromise = stdioTransport.send(testMessage);
[0m[31m                                             ~~~~[0m
    at [0m[36mfile:///workspaces/claude-code-flow/tests/unit/mcp/mcp-interface.test.ts[0m:[0m[33m204[0m:[0m[33m46[0m

[0m[1mTS2339 [0m[ERROR]: Property 'id' does not exist on type '{}'.
      assertEquals(response.id, testMessage.id);
[0m[31m                            ~~[0m
    at [0m[36mfile:///workspaces/claude-code-flow/tests/unit/mcp/mcp-interface.test.ts[0m:[0m[33m209[0m:[0m[33m29[0m

[0m[1mTS2353 [0m[ERROR]: Object literal may only specify known properties, and 'command' does not exist in type 'ILogger'.
        command: 'nonexistent-command',
[0m[31m        ~~~~~~~[0m
    at [0m[36mfile:///workspaces/claude-code-flow/tests/unit/mcp/mcp-interface.test.ts[0m:[0m[33m214[0m:[0m[33m9[0m

[0m[1mTS2339 [0m[ERROR]: Property 'connect' does not exist on type 'StdioTransport'.
        () => faultyTransport.connect(),
[0m[31m                              ~~~~~~~[0m
    at [0m[36mfile:///workspaces/claude-code-flow/tests/unit/mcp/mcp-interface.test.ts[0m:[0m[33m220[0m:[0m[33m31[0m

[0m[1mTS2339 [0m[ERROR]: Property 'connect' does not exist on type 'StdioTransport'.
      await stdioTransport.connect();
[0m[31m                           ~~~~~~~[0m
    at [0m[36mfile:///workspaces/claude-code-flow/tests/unit/mcp/mcp-interface.test.ts[0m:[0m[33m226[0m:[0m[33m28[0m

[0m[1mTS2353 [0m[ERROR]: Object literal may only specify known properties, and 'command' does not exist in type 'ILogger'.
        command: 'node',
[0m[31m        ~~~~~~~[0m
    at [0m[36mfile:///workspaces/claude-code-flow/tests/unit/mcp/mcp-interface.test.ts[0m:[0m[33m237[0m:[0m[33m9[0m

[0m[1mTS2339 [0m[ERROR]: Property 'connect' does not exist on type 'StdioTransport'.
      await slowTransport.connect();
[0m[31m                          ~~~~~~~[0m
    at [0m[36mfile:///workspaces/claude-code-flow/tests/unit/mcp/mcp-interface.test.ts[0m:[0m[33m242[0m:[0m[33m27[0m

[0m[1mTS2339 [0m[ERROR]: Property 'send' does not exist on type 'StdioTransport'.
        () => slowTransport.send(timeoutMessage),
[0m[31m                            ~~~~[0m
    at [0m[36mfile:///workspaces/claude-code-flow/tests/unit/mcp/mcp-interface.test.ts[0m:[0m[33m245[0m:[0m[33m29[0m

[0m[1mTS2339 [0m[ERROR]: Property 'close' does not exist on type 'StdioTransport'.
      await slowTransport.close();
[0m[31m                          ~~~~~[0m
    at [0m[36mfile:///workspaces/claude-code-flow/tests/unit/mcp/mcp-interface.test.ts[0m:[0m[33m250[0m:[0m[33m27[0m

[0m[1mTS2339 [0m[ERROR]: Property 'connect' does not exist on type 'StdioTransport'.
      await stdioTransport.connect();
[0m[31m                           ~~~~~~~[0m
    at [0m[36mfile:///workspaces/claude-code-flow/tests/unit/mcp/mcp-interface.test.ts[0m:[0m[33m254[0m:[0m[33m28[0m

[0m[1mTS2339 [0m[ERROR]: Property 'send' does not exist on type 'StdioTransport'.
      const promises = messages.map(msg => stdioTransport.send(msg));
[0m[31m                                                          ~~~~[0m
    at [0m[36mfile:///workspaces/claude-code-flow/tests/unit/mcp/mcp-interface.test.ts[0m:[0m[33m263[0m:[0m[33m59[0m

[0m[1mTS7006 [0m[ERROR]: Parameter 'response' implicitly has an 'any' type.
      responses.forEach((response, i) => {
[0m[31m                         ~~~~~~~~[0m
    at [0m[36mfile:///workspaces/claude-code-flow/tests/unit/mcp/mcp-interface.test.ts[0m:[0m[33m267[0m:[0m[33m26[0m

[0m[1mTS7006 [0m[ERROR]: Parameter 'i' implicitly has an 'any' type.
      responses.forEach((response, i) => {
[0m[31m                                   ^[0m
    at [0m[36mfile:///workspaces/claude-code-flow/tests/unit/mcp/mcp-interface.test.ts[0m:[0m[33m267[0m:[0m[33m36[0m

[0m[1mTS2339 [0m[ERROR]: Property 'connect' does not exist on type 'StdioTransport'.
      await stdioTransport.connect();
[0m[31m                           ~~~~~~~[0m
    at [0m[36mfile:///workspaces/claude-code-flow/tests/unit/mcp/mcp-interface.test.ts[0m:[0m[33m273[0m:[0m[33m28[0m

[0m[1mTS2339 [0m[ERROR]: Property 'send' does not exist on type 'StdioTransport'.
      await stdioTransport.send(msg1);
[0m[31m                           ~~~~[0m
    at [0m[36mfile:///workspaces/claude-code-flow/tests/unit/mcp/mcp-interface.test.ts[0m:[0m[33m277[0m:[0m[33m28[0m

[0m[1mTS2339 [0m[ERROR]: Property 'close' does not exist on type 'StdioTransport'.
      await stdioTransport.close();
[0m[31m                           ~~~~~[0m
    at [0m[36mfile:///workspaces/claude-code-flow/tests/unit/mcp/mcp-interface.test.ts[0m:[0m[33m280[0m:[0m[33m28[0m

[0m[1mTS2339 [0m[ERROR]: Property 'isConnected' does not exist on type 'StdioTransport'.
      assertEquals(stdioTransport.isConnected(), false);
[0m[31m                                  ~~~~~~~~~~~[0m
    at [0m[36mfile:///workspaces/claude-code-flow/tests/unit/mcp/mcp-interface.test.ts[0m:[0m[33m281[0m:[0m[33m35[0m

[0m[1mTS2339 [0m[ERROR]: Property 'connect' does not exist on type 'StdioTransport'.
      await stdioTransport.connect();
[0m[31m                           ~~~~~~~[0m
    at [0m[36mfile:///workspaces/claude-code-flow/tests/unit/mcp/mcp-interface.test.ts[0m:[0m[33m284[0m:[0m[33m28[0m

[0m[1mTS2339 [0m[ERROR]: Property 'isConnected' does not exist on type 'StdioTransport'.
      assertEquals(stdioTransport.isConnected(), true);
[0m[31m                                  ~~~~~~~~~~~[0m
    at [0m[36mfile:///workspaces/claude-code-flow/tests/unit/mcp/mcp-interface.test.ts[0m:[0m[33m285[0m:[0m[33m35[0m

[0m[1mTS2339 [0m[ERROR]: Property 'send' does not exist on type 'StdioTransport'.
      const response = await stdioTransport.send(msg2);
[0m[31m                                            ~~~~[0m
    at [0m[36mfile:///workspaces/claude-code-flow/tests/unit/mcp/mcp-interface.test.ts[0m:[0m[33m289[0m:[0m[33m45[0m

[0m[1mTS2554 [0m[ERROR]: Expected 3-4 arguments, but got 1.
      mcpServer = new MCPServer({
[0m[31m                  ^[0m
    at [0m[36mfile:///workspaces/claude-code-flow/tests/unit/mcp/mcp-interface.test.ts[0m:[0m[33m473[0m:[0m[33m19[0m

    An argument for 'eventBus' was not provided.
        private eventBus: IEventBus,
    [0m[36m    ~~~~~~~~~~~~~~~~~~~~~~~~~~~[0m
        at [0m[36mfile:///workspaces/claude-code-flow/src/mcp/server.ts[0m:[0m[33m90[0m:[0m[33m5[0m

[0m[1mTS2554 [0m[ERROR]: Expected 1 arguments, but got 2.
      mcpServer.registerTool('test-tool-1', {
[0m[31m                                            ^[0m
    at [0m[36mfile:///workspaces/claude-code-flow/tests/unit/mcp/mcp-interface.test.ts[0m:[0m[33m494[0m:[0m[33m45[0m

[0m[1mTS2554 [0m[ERROR]: Expected 1 arguments, but got 2.
      mcpServer.registerTool('test-tool-2', {
[0m[31m                                            ^[0m
    at [0m[36mfile:///workspaces/claude-code-flow/tests/unit/mcp/mcp-interface.test.ts[0m:[0m[33m508[0m:[0m[33m45[0m

[0m[1mTS2339 [0m[ERROR]: Property 'listTools' does not exist on type 'MCPServer'.
      const tools = await mcpServer.listTools();
[0m[31m                                    ~~~~~~~~~[0m
    at [0m[36mfile:///workspaces/claude-code-flow/tests/unit/mcp/mcp-interface.test.ts[0m:[0m[33m522[0m:[0m[33m37[0m

[0m[1mTS7006 [0m[ERROR]: Parameter 't' implicitly has an 'any' type.
      assertEquals(tools.find(t => t.name === 'test-tool-1')?.description, 'A test tool');
[0m[31m                              ^[0m
    at [0m[36mfile:///workspaces/claude-code-flow/tests/unit/mcp/mcp-interface.test.ts[0m:[0m[33m525[0m:[0m[33m31[0m

[0m[1mTS7006 [0m[ERROR]: Parameter 't' implicitly has an 'any' type.
      assertEquals(tools.find(t => t.name === 'test-tool-2')?.description, 'Another test tool');
[0m[31m                              ^[0m
    at [0m[36mfile:///workspaces/claude-code-flow/tests/unit/mcp/mcp-interface.test.ts[0m:[0m[33m526[0m:[0m[33m31[0m

[0m[1mTS2554 [0m[ERROR]: Expected 1 arguments, but got 2.
      mcpServer.registerTool('calculator', {
[0m[31m                                           ^[0m
    at [0m[36mfile:///workspaces/claude-code-flow/tests/unit/mcp/mcp-interface.test.ts[0m:[0m[33m532[0m:[0m[33m44[0m

[0m[1mTS2339 [0m[ERROR]: Property 'callTool' does not exist on type 'MCPServer'.
        const result = await mcpServer.callTool('calculator', testCase);
[0m[31m                                       ~~~~~~~~[0m
    at [0m[36mfile:///workspaces/claude-code-flow/tests/unit/mcp/mcp-interface.test.ts[0m:[0m[33m580[0m:[0m[33m40[0m

[0m[1mTS2554 [0m[ERROR]: Expected 1 arguments, but got 2.
      mcpServer.registerTool('error-tool', {
[0m[31m                                           ^[0m
    at [0m[36mfile:///workspaces/claude-code-flow/tests/unit/mcp/mcp-interface.test.ts[0m:[0m[33m589[0m:[0m[33m44[0m

[0m[1mTS2339 [0m[ERROR]: Property 'callTool' does not exist on type 'MCPServer'.
      const successResult = await mcpServer.callTool('error-tool', { shouldError: false });
[0m[31m                                            ~~~~~~~~[0m
    at [0m[36mfile:///workspaces/claude-code-flow/tests/unit/mcp/mcp-interface.test.ts[0m:[0m[33m609[0m:[0m[33m45[0m

[0m[1mTS2339 [0m[ERROR]: Property 'callTool' does not exist on type 'MCPServer'.
        () => mcpServer.callTool('error-tool', { shouldError: true }),
[0m[31m                        ~~~~~~~~[0m
    at [0m[36mfile:///workspaces/claude-code-flow/tests/unit/mcp/mcp-interface.test.ts[0m:[0m[33m614[0m:[0m[33m25[0m

[0m[1mTS2554 [0m[ERROR]: Expected 1 arguments, but got 2.
      mcpServer.registerTool('strict-tool', {
[0m[31m                                            ^[0m
    at [0m[36mfile:///workspaces/claude-code-flow/tests/unit/mcp/mcp-interface.test.ts[0m:[0m[33m623[0m:[0m[33m45[0m

[0m[1mTS2339 [0m[ERROR]: Property 'callTool' does not exist on type 'MCPServer'.
      const validResult = await mcpServer.callTool('strict-tool', {
[0m[31m                                          ~~~~~~~~[0m
    at [0m[36mfile:///workspaces/claude-code-flow/tests/unit/mcp/mcp-interface.test.ts[0m:[0m[33m641[0m:[0m[33m43[0m

[0m[1mTS2339 [0m[ERROR]: Property 'callTool' does not exist on type 'MCPServer'.
          () => mcpServer.callTool('strict-tool', invalidInput),
[0m[31m                          ~~~~~~~~[0m
    at [0m[36mfile:///workspaces/claude-code-flow/tests/unit/mcp/mcp-interface.test.ts[0m:[0m[33m657[0m:[0m[33m27[0m

[0m[1mTS2339 [0m[ERROR]: Property 'registerPrompt' does not exist on type 'MCPServer'.
      mcpServer.registerPrompt('greeting', {
[0m[31m                ~~~~~~~~~~~~~~[0m
    at [0m[36mfile:///workspaces/claude-code-flow/tests/unit/mcp/mcp-interface.test.ts[0m:[0m[33m666[0m:[0m[33m17[0m

[0m[1mTS7053 [0m[ERROR]: Element implicitly has an 'any' type because expression of type 'any' can't be used to index type '{ en: string; es: string; fr: string; }'.
                  text: greetings[language] || greetings.en,
[0m[31m                        ~~~~~~~~~~~~~~~~~~~[0m
    at [0m[36mfile:///workspaces/claude-code-flow/tests/unit/mcp/mcp-interface.test.ts[0m:[0m[33m697[0m:[0m[33m25[0m

[0m[1mTS2339 [0m[ERROR]: Property 'listPrompts' does not exist on type 'MCPServer'.
      const prompts = await mcpServer.listPrompts();
[0m[31m                                      ~~~~~~~~~~~[0m
    at [0m[36mfile:///workspaces/claude-code-flow/tests/unit/mcp/mcp-interface.test.ts[0m:[0m[33m705[0m:[0m[33m39[0m

[0m[1mTS2339 [0m[ERROR]: Property 'getPrompt' does not exist on type 'MCPServer'.
      const englishGreeting = await mcpServer.getPrompt('greeting', { name: 'Alice' });
[0m[31m                                              ~~~~~~~~~[0m
    at [0m[36mfile:///workspaces/claude-code-flow/tests/unit/mcp/mcp-interface.test.ts[0m:[0m[33m710[0m:[0m[33m47[0m

[0m[1mTS2339 [0m[ERROR]: Property 'getPrompt' does not exist on type 'MCPServer'.
      const spanishGreeting = await mcpServer.getPrompt('greeting', { name: 'Bob', language: 'es' });
[0m[31m                                              ~~~~~~~~~[0m
    at [0m[36mfile:///workspaces/claude-code-flow/tests/unit/mcp/mcp-interface.test.ts[0m:[0m[33m713[0m:[0m[33m47[0m

[0m[1mTS2554 [0m[ERROR]: Expected 3-4 arguments, but got 1.
      mockServer = new MCPServer({
[0m[31m                   ^[0m
    at [0m[36mfile:///workspaces/claude-code-flow/tests/unit/mcp/mcp-interface.test.ts[0m:[0m[33m724[0m:[0m[33m20[0m

    An argument for 'eventBus' was not provided.
        private eventBus: IEventBus,
    [0m[36m    ~~~~~~~~~~~~~~~~~~~~~~~~~~~[0m
        at [0m[36mfile:///workspaces/claude-code-flow/src/mcp/server.ts[0m:[0m[33m90[0m:[0m[33m5[0m

[0m[1mTS2554 [0m[ERROR]: Expected 1 arguments, but got 2.
      mockServer.registerTool('echo', {
[0m[31m                                      ^[0m
    at [0m[36mfile:///workspaces/claude-code-flow/tests/unit/mcp/mcp-interface.test.ts[0m:[0m[33m731[0m:[0m[33m39[0m

[0m[1mTS2353 [0m[ERROR]: Object literal may only specify known properties, and 'command' does not exist in type 'ILogger'.
          command: 'node',
[0m[31m          ~~~~~~~[0m
    at [0m[36mfile:///workspaces/claude-code-flow/tests/unit/mcp/mcp-interface.test.ts[0m:[0m[33m749[0m:[0m[33m11[0m

[0m[1mTS7006 [0m[ERROR]: Parameter 'tool' implicitly has an 'any' type.
      assertEquals(tools.some(tool => tool.name === 'echo'), true);
[0m[31m                              ~~~~[0m
    at [0m[36mfile:///workspaces/claude-code-flow/tests/unit/mcp/mcp-interface.test.ts[0m:[0m[33m791[0m:[0m[33m31[0m

[0m[1mTS2353 [0m[ERROR]: Object literal may only specify known properties, and 'command' does not exist in type 'ILogger'.
          command: 'node',
[0m[31m          ~~~~~~~[0m
    at [0m[36mfile:///workspaces/claude-code-flow/tests/unit/mcp/mcp-interface.test.ts[0m:[0m[33m801[0m:[0m[33m11[0m

[0m[1mTS2353 [0m[ERROR]: Object literal may only specify known properties, and 'command' does not exist in type 'ILogger'.
          command: 'node',
[0m[31m          ~~~~~~~[0m
    at [0m[36mfile:///workspaces/claude-code-flow/tests/unit/mcp/mcp-interface.test.ts[0m:[0m[33m835[0m:[0m[33m11[0m

[0m[1mTS7006 [0m[ERROR]: Parameter 'response' implicitly has an 'any' type.
      responses.forEach(response => {
[0m[31m                        ~~~~~~~~[0m
    at [0m[36mfile:///workspaces/claude-code-flow/tests/unit/mcp/mcp-interface.test.ts[0m:[0m[33m1001[0m:[0m[33m25[0m

[0m[1mTS2339 [0m[ERROR]: Property 'delay' does not exist on type 'typeof AsyncTestUtils'.
      await AsyncTestUtils.delay(1100);
[0m[31m                           ~~~~~[0m
    at [0m[36mfile:///workspaces/claude-code-flow/tests/unit/mcp/mcp-interface.test.ts[0m:[0m[33m1147[0m:[0m[33m28[0m

[0m[1mTS2353 [0m[ERROR]: Object literal may only specify known properties, and 'command' does not exist in type 'ILogger'.
        command: 'nonexistent-command',
[0m[31m        ~~~~~~~[0m
    at [0m[36mfile:///workspaces/claude-code-flow/tests/unit/mcp/mcp-interface.test.ts[0m:[0m[33m1209[0m:[0m[33m9[0m

[0m[1mTS2353 [0m[ERROR]: Object literal may only specify known properties, and 'command' does not exist in type 'ILogger'.
          command: 'unreliable-server',
[0m[31m          ~~~~~~~[0m
    at [0m[36mfile:///workspaces/claude-code-flow/tests/unit/mcp/mcp-interface.test.ts[0m:[0m[33m1244[0m:[0m[33m11[0m

[0m[1mTS18046 [0m[ERROR]: 'error' is of type 'unknown'.
          if (error.message.includes('circuit breaker')) {
[0m[31m              ~~~~~[0m
    at [0m[36mfile:///workspaces/claude-code-flow/tests/unit/mcp/mcp-interface.test.ts[0m:[0m[33m1268[0m:[0m[33m15[0m

[0m[1mTS2305 [0m[ERROR]: Module '"https://deno.land/std@0.208.0/testing/bdd.ts"' has no exported member 'expect'.
import { describe, it, beforeEach, afterEach, expect } from 'https://deno.land/std@0.208.0/testing/bdd.ts';
[0m[31m                                              ~~~~~~[0m
    at [0m[36mfile:///workspaces/claude-code-flow/tests/unit/mcp/server.test.ts[0m:[0m[33m5[0m:[0m[33m47[0m

[0m[1mTS2673 [0m[ERROR]: Constructor of class 'EventBus' is private and only accessible within the class declaration.
    eventBus = new EventBus(logger);
[0m[31m               ~~~~~~~~~~~~~~~~~~~~[0m
    at [0m[36mfile:///workspaces/claude-code-flow/tests/unit/mcp/server.test.ts[0m:[0m[33m26[0m:[0m[33m16[0m

[0m[1mTS18046 [0m[ERROR]: 'error' is of type 'unknown'.
        expect(error.message).toContain('already running');
[0m[31m               ~~~~~[0m
    at [0m[36mfile:///workspaces/claude-code-flow/tests/unit/mcp/server.test.ts[0m:[0m[33m75[0m:[0m[33m16[0m

[0m[1mTS18046 [0m[ERROR]: 'error' is of type 'unknown'.
        expect(error.message).toContain('already registered');
[0m[31m               ~~~~~[0m
    at [0m[36mfile:///workspaces/claude-code-flow/tests/unit/mcp/server.test.ts[0m:[0m[33m121[0m:[0m[33m16[0m

[0m[1mTS2305 [0m[ERROR]: Module '"https://deno.land/std@0.208.0/testing/bdd.ts"' has no exported member 'expect'.
import { describe, it, beforeEach, expect } from 'https://deno.land/std@0.208.0/testing/bdd.ts';
[0m[31m                                   ~~~~~~[0m
    at [0m[36mfile:///workspaces/claude-code-flow/tests/unit/mcp/tools.test.ts[0m:[0m[33m5[0m:[0m[33m36[0m

[0m[1mTS18046 [0m[ERROR]: 'error' is of type 'unknown'.
        expect(error.message).toContain('already registered');
[0m[31m               ~~~~~[0m
    at [0m[36mfile:///workspaces/claude-code-flow/tests/unit/mcp/tools.test.ts[0m:[0m[33m65[0m:[0m[33m16[0m

[0m[1mTS18046 [0m[ERROR]: 'error' is of type 'unknown'.
        expect(error.message).toContain('format: namespace/name');
[0m[31m               ~~~~~[0m
    at [0m[36mfile:///workspaces/claude-code-flow/tests/unit/mcp/tools.test.ts[0m:[0m[33m81[0m:[0m[33m16[0m

[0m[1mTS18046 [0m[ERROR]: 'error' is of type 'unknown'.
        expect(error.message).toBe('Test error');
[0m[31m               ~~~~~[0m
    at [0m[36mfile:///workspaces/claude-code-flow/tests/unit/mcp/tools.test.ts[0m:[0m[33m215[0m:[0m[33m16[0m

[0m[1mTS18046 [0m[ERROR]: 'error' is of type 'unknown'.
        expect(error.message).toContain('Tool not found');
[0m[31m               ~~~~~[0m
    at [0m[36mfile:///workspaces/claude-code-flow/tests/unit/mcp/tools.test.ts[0m:[0m[33m224[0m:[0m[33m16[0m

[0m[1mTS18046 [0m[ERROR]: 'error' is of type 'unknown'.
        expect(error.message).toContain('Missing required property');
[0m[31m               ~~~~~[0m
    at [0m[36mfile:///workspaces/claude-code-flow/tests/unit/mcp/tools.test.ts[0m:[0m[33m233[0m:[0m[33m16[0m

[0m[1mTS18046 [0m[ERROR]: 'error' is of type 'unknown'.
        expect(error.message).toContain('Invalid type');
[0m[31m               ~~~~~[0m
    at [0m[36mfile:///workspaces/claude-code-flow/tests/unit/mcp/tools.test.ts[0m:[0m[33m242[0m:[0m[33m16[0m

[0m[1mTS18046 [0m[ERROR]: 'error' is of type 'unknown'.
        expect(error.message).toContain('Tool not found');
[0m[31m               ~~~~~[0m
    at [0m[36mfile:///workspaces/claude-code-flow/tests/unit/mcp/tools.test.ts[0m:[0m[33m272[0m:[0m[33m16[0m

[0m[1mTS18046 [0m[ERROR]: 'result' is of type 'unknown'.
      expect(result.name).toBe('John');
[0m[31m             ~~~~~~[0m
    at [0m[36mfile:///workspaces/claude-code-flow/tests/unit/mcp/tools.test.ts[0m:[0m[33m304[0m:[0m[33m14[0m

[0m[1mTS18046 [0m[ERROR]: 'error' is of type 'unknown'.
        expect(error.message).toContain('Invalid type');
[0m[31m               ~~~~~[0m
    at [0m[36mfile:///workspaces/claude-code-flow/tests/unit/mcp/tools.test.ts[0m:[0m[33m315[0m:[0m[33m16[0m

[0m[1mTS18046 [0m[ERROR]: 'result' is of type 'unknown'.
      expect(result.active).toBe(true);
[0m[31m             ~~~~~~[0m
    at [0m[36mfile:///workspaces/claude-code-flow/tests/unit/mcp/tools.test.ts[0m:[0m[33m325[0m:[0m[33m14[0m

[0m[1mTS18046 [0m[ERROR]: 'result' is of type 'unknown'.
      expect(result.tags).toEqual(['developer', 'typescript']);
[0m[31m             ~~~~~~[0m
    at [0m[36mfile:///workspaces/claude-code-flow/tests/unit/mcp/tools.test.ts[0m:[0m[33m334[0m:[0m[33m14[0m

[0m[1mTS18046 [0m[ERROR]: 'result' is of type 'unknown'.
      expect(result.metadata).toEqual({ department: 'engineering' });
[0m[31m             ~~~~~~[0m
    at [0m[36mfile:///workspaces/claude-code-flow/tests/unit/mcp/tools.test.ts[0m:[0m[33m343[0m:[0m[33m14[0m

[0m[1mTS2724 [0m[ERROR]: '"file:///workspaces/claude-code-flow/src/memory/backends/sqlite.ts"' has no exported member named 'SQLiteMemoryBackend'. Did you mean 'SQLiteBackend'?
import { SQLiteMemoryBackend } from '../../../src/memory/backends/sqlite.ts';
[0m[31m         ~~~~~~~~~~~~~~~~~~~[0m
    at [0m[36mfile:///workspaces/claude-code-flow/tests/unit/memory/memory-backends.test.ts[0m:[0m[33m9[0m:[0m[33m10[0m

    'SQLiteBackend' is declared here.
    export class SQLiteBackend implements IMemoryBackend {
    [0m[36m             ~~~~~~~~~~~~~[0m
        at [0m[36mfile:///workspaces/claude-code-flow/src/memory/backends/sqlite.ts[0m:[0m[33m19[0m:[0m[33m14[0m

[0m[1mTS2724 [0m[ERROR]: '"file:///workspaces/claude-code-flow/src/memory/backends/markdown.ts"' has no exported member named 'MarkdownMemoryBackend'. Did you mean 'MarkdownBackend'?
import { MarkdownMemoryBackend } from '../../../src/memory/backends/markdown.ts';
[0m[31m         ~~~~~~~~~~~~~~~~~~~~~[0m
    at [0m[36mfile:///workspaces/claude-code-flow/tests/unit/memory/memory-backends.test.ts[0m:[0m[33m10[0m:[0m[33m10[0m

    'MarkdownBackend' is declared here.
    export class MarkdownBackend implements IMemoryBackend {
    [0m[36m             ~~~~~~~~~~~~~~~[0m
        at [0m[36mfile:///workspaces/claude-code-flow/src/memory/backends/markdown.ts[0m:[0m[33m14[0m:[0m[33m14[0m

[0m[1mTS7006 [0m[ERROR]: Parameter 'entry' implicitly has an 'any' type.
        entries.forEach(entry => {
[0m[31m                        ~~~~~[0m
    at [0m[36mfile:///workspaces/claude-code-flow/tests/unit/memory/memory-backends.test.ts[0m:[0m[33m166[0m:[0m[33m25[0m

[0m[1mTS7006 [0m[ERROR]: Parameter 'e' implicitly has an 'any' type.
        const page1Keys = new Set(page1.map(e => e.key));
[0m[31m                                            ^[0m
    at [0m[36mfile:///workspaces/claude-code-flow/tests/unit/memory/memory-backends.test.ts[0m:[0m[33m217[0m:[0m[33m45[0m

[0m[1mTS7006 [0m[ERROR]: Parameter 'e' implicitly has an 'any' type.
        const page2Keys = new Set(page2.map(e => e.key));
[0m[31m                                            ^[0m
    at [0m[36mfile:///workspaces/claude-code-flow/tests/unit/memory/memory-backends.test.ts[0m:[0m[33m218[0m:[0m[33m45[0m

[0m[1mTS18046 [0m[ERROR]: 'error' is of type 'unknown'.
              console.log(`Edge case ${category}-${name} failed: ${error.message}`);
[0m[31m                                                                   ~~~~~[0m
    at [0m[36mfile:///workspaces/claude-code-flow/tests/unit/memory/memory-backends.test.ts[0m:[0m[33m393[0m:[0m[33m68[0m

[0m[1mTS18046 [0m[ERROR]: 'error' is of type 'unknown'.
          console.log(`Large value test failed: ${error.message}`);
[0m[31m                                                  ~~~~~[0m
    at [0m[36mfile:///workspaces/claude-code-flow/tests/unit/memory/memory-backends.test.ts[0m:[0m[33m434[0m:[0m[33m51[0m

[0m[1mTS7006 [0m[ERROR]: Parameter 'r' implicitly has an 'any' type.
        const titles = results.map(r => r.value.title);
[0m[31m                                   ^[0m
    at [0m[36mfile:///workspaces/claude-code-flow/tests/unit/memory/memory-backends.test.ts[0m:[0m[33m702[0m:[0m[33m36[0m

[0m[1mTS2339 [0m[ERROR]: Property 'mean' does not exist on type '{ results: void[]; stats: { mean: number; median: number; min: number; max: number; stdDev: number; p95: number; p99: number; }; }'.
      console.log(`SQLite backend: ${sqliteStats.mean.toFixed(2)}ms average`);
[0m[31m                                                 ~~~~[0m
    at [0m[36mfile:///workspaces/claude-code-flow/tests/unit/memory/memory-backends.test.ts[0m:[0m[33m929[0m:[0m[33m50[0m

[0m[1mTS2339 [0m[ERROR]: Property 'mean' does not exist on type '{ results: void[]; stats: { mean: number; median: number; min: number; max: number; stdDev: number; p95: number; p99: number; }; }'.
      console.log(`Markdown backend: ${markdownStats.mean.toFixed(2)}ms average`);
[0m[31m                                                     ~~~~[0m
    at [0m[36mfile:///workspaces/claude-code-flow/tests/unit/memory/memory-backends.test.ts[0m:[0m[33m930[0m:[0m[33m54[0m

[0m[1mTS2339 [0m[ERROR]: Property 'mean' does not exist on type '{ results: void[]; stats: { mean: number; median: number; min: number; max: number; stdDev: number; p95: number; p99: number; }; }'.
      TestAssertions.assertInRange(sqliteStats.mean, 0, 500);
[0m[31m                                               ~~~~[0m
    at [0m[36mfile:///workspaces/claude-code-flow/tests/unit/memory/memory-backends.test.ts[0m:[0m[33m933[0m:[0m[33m48[0m

[0m[1mTS2339 [0m[ERROR]: Property 'mean' does not exist on type '{ results: void[]; stats: { mean: number; median: number; min: number; max: number; stdDev: number; p95: number; p99: number; }; }'.
      TestAssertions.assertInRange(markdownStats.mean, 0, 500);
[0m[31m                                                 ~~~~[0m
    at [0m[36mfile:///workspaces/claude-code-flow/tests/unit/memory/memory-backends.test.ts[0m:[0m[33m934[0m:[0m[33m50[0m

[0m[1mTS2305 [0m[ERROR]: Module '"file:///workspaces/claude-code-flow/src/terminal/adapters/native.ts"' has no exported member 'NativeTerminalAdapter'.
import { NativeTerminalAdapter } from '../../../src/terminal/adapters/native.ts';
[0m[31m         ~~~~~~~~~~~~~~~~~~~~~[0m
    at [0m[36mfile:///workspaces/claude-code-flow/tests/unit/terminal/terminal-manager.test.ts[0m:[0m[33m12[0m:[0m[33m10[0m

[0m[1mTS2554 [0m[ERROR]: Expected 3 arguments, but got 1.
    terminalManager = new TerminalManager({
[0m[31m                      ^[0m
    at [0m[36mfile:///workspaces/claude-code-flow/tests/unit/terminal/terminal-manager.test.ts[0m:[0m[33m45[0m:[0m[33m23[0m

    An argument for 'eventBus' was not provided.
        private eventBus: IEventBus,
    [0m[36m    ~~~~~~~~~~~~~~~~~~~~~~~~~~~[0m
        at [0m[36mfile:///workspaces/claude-code-flow/src/terminal/manager.ts[0m:[0m[33m36[0m:[0m[33m5[0m

[0m[1mTS2551 [0m[ERROR]: Property 'isInitialized' does not exist on type 'TerminalManager'. Did you mean 'initialize'?
      assertEquals(terminalManager.isInitialized(), true);
[0m[31m                                   ~~~~~~~~~~~~~[0m
    at [0m[36mfile:///workspaces/claude-code-flow/tests/unit/terminal/terminal-manager.test.ts[0m:[0m[33m65[0m:[0m[33m36[0m

    'initialize' is declared here.
      async initialize(): Promise<void> {
    [0m[36m        ~~~~~~~~~~[0m
        at [0m[36mfile:///workspaces/claude-code-flow/src/terminal/manager.ts[0m:[0m[33m51[0m:[0m[33m9[0m

[0m[1mTS2554 [0m[ERROR]: Expected 3 arguments, but got 1.
        () => new TerminalManager({
[0m[31m              ^[0m
    at [0m[36mfile:///workspaces/claude-code-flow/tests/unit/terminal/terminal-manager.test.ts[0m:[0m[33m70[0m:[0m[33m15[0m

    An argument for 'eventBus' was not provided.
        private eventBus: IEventBus,
    [0m[36m    ~~~~~~~~~~~~~~~~~~~~~~~~~~~[0m
        at [0m[36mfile:///workspaces/claude-code-flow/src/terminal/manager.ts[0m:[0m[33m36[0m:[0m[33m5[0m

[0m[1mTS2554 [0m[ERROR]: Expected 3 arguments, but got 1.
        () => new TerminalManager({
[0m[31m              ^[0m
    at [0m[36mfile:///workspaces/claude-code-flow/tests/unit/terminal/terminal-manager.test.ts[0m:[0m[33m81[0m:[0m[33m15[0m

    An argument for 'eventBus' was not provided.
        private eventBus: IEventBus,
    [0m[36m    ~~~~~~~~~~~~~~~~~~~~~~~~~~~[0m
        at [0m[36mfile:///workspaces/claude-code-flow/src/terminal/manager.ts[0m:[0m[33m36[0m:[0m[33m5[0m

[0m[1mTS2551 [0m[ERROR]: Property 'isInitialized' does not exist on type 'TerminalManager'. Did you mean 'initialize'?
      assertEquals(terminalManager.isInitialized(), false);
[0m[31m                                   ~~~~~~~~~~~~~[0m
    at [0m[36mfile:///workspaces/claude-code-flow/tests/unit/terminal/terminal-manager.test.ts[0m:[0m[33m103[0m:[0m[33m36[0m

    'initialize' is declared here.
      async initialize(): Promise<void> {
    [0m[36m        ~~~~~~~~~~[0m
        at [0m[36mfile:///workspaces/claude-code-flow/src/terminal/manager.ts[0m:[0m[33m51[0m:[0m[33m9[0m

[0m[1mTS2554 [0m[ERROR]: Expected 3 arguments, but got 1.
      const nativeManager = new TerminalManager({
[0m[31m                            ^[0m
    at [0m[36mfile:///workspaces/claude-code-flow/tests/unit/terminal/terminal-manager.test.ts[0m:[0m[33m117[0m:[0m[33m29[0m

    An argument for 'eventBus' was not provided.
        private eventBus: IEventBus,
    [0m[36m    ~~~~~~~~~~~~~~~~~~~~~~~~~~~[0m
        at [0m[36mfile:///workspaces/claude-code-flow/src/terminal/manager.ts[0m:[0m[33m36[0m:[0m[33m5[0m

[0m[1mTS2551 [0m[ERROR]: Property 'isInitialized' does not exist on type 'TerminalManager'. Did you mean 'initialize'?
      assertEquals(nativeManager.isInitialized(), true);
[0m[31m                                 ~~~~~~~~~~~~~[0m
    at [0m[36mfile:///workspaces/claude-code-flow/tests/unit/terminal/terminal-manager.test.ts[0m:[0m[33m125[0m:[0m[33m34[0m

    'initialize' is declared here.
      async initialize(): Promise<void> {
    [0m[36m        ~~~~~~~~~~[0m
        at [0m[36mfile:///workspaces/claude-code-flow/src/terminal/manager.ts[0m:[0m[33m51[0m:[0m[33m9[0m

[0m[1mTS2345 [0m[ERROR]: Argument of type '{ id: string; name: string; workingDirectory: string; environment: { TEST_VAR: string; }; }' is not assignable to parameter of type 'AgentProfile'.
  Type '{ id: string; name: string; workingDirectory: string; environment: { TEST_VAR: string; }; }' is missing the following properties from type 'AgentProfile': type, capabilities, systemPrompt, maxConcurrentTasks, priority
      const sessionId = await terminalManager.spawnTerminal(profile);
[0m[31m                                                            ~~~~~~~[0m
    at [0m[36mfile:///workspaces/claude-code-flow/tests/unit/terminal/terminal-manager.test.ts[0m:[0m[33m143[0m:[0m[33m61[0m

[0m[1mTS2554 [0m[ERROR]: Expected 1 arguments, but got 0.
      const sessionId = await terminalManager.spawnTerminal();
[0m[31m                                              ~~~~~~~~~~~~~[0m
    at [0m[36mfile:///workspaces/claude-code-flow/tests/unit/terminal/terminal-manager.test.ts[0m:[0m[33m151[0m:[0m[33m47[0m

    An argument for 'profile' was not provided.
      async spawnTerminal(profile: AgentProfile): Promise<string> {
    [0m[36m                      ~~~~~~~~~~~~~~~~~~~~~[0m
        at [0m[36mfile:///workspaces/claude-code-flow/src/terminal/manager.ts[0m:[0m[33m101[0m:[0m[33m23[0m

[0m[1mTS2554 [0m[ERROR]: Expected 1 arguments, but got 0.
      const sessionId = await terminalManager.spawnTerminal();
[0m[31m                                              ~~~~~~~~~~~~~[0m
    at [0m[36mfile:///workspaces/claude-code-flow/tests/unit/terminal/terminal-manager.test.ts[0m:[0m[33m163[0m:[0m[33m47[0m

    An argument for 'profile' was not provided.
      async spawnTerminal(profile: AgentProfile): Promise<string> {
    [0m[36m                      ~~~~~~~~~~~~~~~~~~~~~[0m
        at [0m[36mfile:///workspaces/claude-code-flow/src/terminal/manager.ts[0m:[0m[33m101[0m:[0m[33m23[0m

[0m[1mTS2554 [0m[ERROR]: Expected 3 arguments, but got 1.
      const limitedManager = new TerminalManager({
[0m[31m                             ^[0m
    at [0m[36mfile:///workspaces/claude-code-flow/tests/unit/terminal/terminal-manager.test.ts[0m:[0m[33m183[0m:[0m[33m30[0m

    An argument for 'eventBus' was not provided.
        private eventBus: IEventBus,
    [0m[36m    ~~~~~~~~~~~~~~~~~~~~~~~~~~~[0m
        at [0m[36mfile:///workspaces/claude-code-flow/src/terminal/manager.ts[0m:[0m[33m36[0m:[0m[33m5[0m

[0m[1mTS2554 [0m[ERROR]: Expected 1 arguments, but got 0.
        () => limitedManager.spawnTerminal(),
[0m[31m                             ~~~~~~~~~~~~~[0m
    at [0m[36mfile:///workspaces/claude-code-flow/tests/unit/terminal/terminal-manager.test.ts[0m:[0m[33m196[0m:[0m[33m30[0m

    An argument for 'profile' was not provided.
      async spawnTerminal(profile: AgentProfile): Promise<string> {
    [0m[36m                      ~~~~~~~~~~~~~~~~~~~~~[0m
        at [0m[36mfile:///workspaces/claude-code-flow/src/terminal/manager.ts[0m:[0m[33m101[0m:[0m[33m23[0m

[0m[1mTS2345 [0m[ERROR]: Argument of type '{ id: string; name: string; }' is not assignable to parameter of type 'AgentProfile'.
  Type '{ id: string; name: string; }' is missing the following properties from type 'AgentProfile': type, capabilities, systemPrompt, maxConcurrentTasks, priority
        terminalManager.spawnTerminal(profile)
[0m[31m                                      ~~~~~~~[0m
    at [0m[36mfile:///workspaces/claude-code-flow/tests/unit/terminal/terminal-manager.test.ts[0m:[0m[33m209[0m:[0m[33m39[0m

[0m[1mTS2554 [0m[ERROR]: Expected 1 arguments, but got 0.
      sessionId = await terminalManager.spawnTerminal();
[0m[31m                                        ~~~~~~~~~~~~~[0m
    at [0m[36mfile:///workspaces/claude-code-flow/tests/unit/terminal/terminal-manager.test.ts[0m:[0m[33m243[0m:[0m[33m41[0m

    An argument for 'profile' was not provided.
      async spawnTerminal(profile: AgentProfile): Promise<string> {
    [0m[36m                      ~~~~~~~~~~~~~~~~~~~~~[0m
        at [0m[36mfile:///workspaces/claude-code-flow/src/terminal/manager.ts[0m:[0m[33m101[0m:[0m[33m23[0m

[0m[1mTS2339 [0m[ERROR]: Property 'sendCommand' does not exist on type 'TerminalManager'.
      const result = await terminalManager.sendCommand(sessionId, command);
[0m[31m                                           ~~~~~~~~~~~[0m
    at [0m[36mfile:///workspaces/claude-code-flow/tests/unit/terminal/terminal-manager.test.ts[0m:[0m[33m253[0m:[0m[33m44[0m

[0m[1mTS2339 [0m[ERROR]: Property 'sendCommand' does not exist on type 'TerminalManager'.
      const result = await terminalManager.sendCommand(sessionId, command);
[0m[31m                                           ~~~~~~~~~~~[0m
    at [0m[36mfile:///workspaces/claude-code-flow/tests/unit/terminal/terminal-manager.test.ts[0m:[0m[33m264[0m:[0m[33m44[0m

[0m[1mTS2339 [0m[ERROR]: Property 'sendCommand' does not exist on type 'TerminalManager'.
        () => terminalManager.sendCommand(sessionId, 'slow-command'),
[0m[31m                              ~~~~~~~~~~~[0m
    at [0m[36mfile:///workspaces/claude-code-flow/tests/unit/terminal/terminal-manager.test.ts[0m:[0m[33m277[0m:[0m[33m31[0m

[0m[1mTS2339 [0m[ERROR]: Property 'sendCommand' does not exist on type 'TerminalManager'.
        terminalManager.sendCommand(sessionId, command)
[0m[31m                        ~~~~~~~~~~~[0m
    at [0m[36mfile:///workspaces/claude-code-flow/tests/unit/terminal/terminal-manager.test.ts[0m:[0m[33m287[0m:[0m[33m25[0m

[0m[1mTS2345 [0m[ERROR]: Argument of type '{ id: string; }' is not assignable to parameter of type 'AgentProfile'.
  Type '{ id: string; }' is missing the following properties from type 'AgentProfile': name, type, capabilities, systemPrompt, and 2 more.
        terminalManager.spawnTerminal({ id: 'agent-1' }),
[0m[31m                                      ~~~~~~~~~~~~~~~~~[0m
    at [0m[36mfile:///workspaces/claude-code-flow/tests/unit/terminal/terminal-manager.test.ts[0m:[0m[33m298[0m:[0m[33m39[0m

[0m[1mTS2345 [0m[ERROR]: Argument of type '{ id: string; }' is not assignable to parameter of type 'AgentProfile'.
  Type '{ id: string; }' is missing the following properties from type 'AgentProfile': name, type, capabilities, systemPrompt, and 2 more.
        terminalManager.spawnTerminal({ id: 'agent-2' }),
[0m[31m                                      ~~~~~~~~~~~~~~~~~[0m
    at [0m[36mfile:///workspaces/claude-code-flow/tests/unit/terminal/terminal-manager.test.ts[0m:[0m[33m299[0m:[0m[33m39[0m

[0m[1mTS2345 [0m[ERROR]: Argument of type '{ id: string; }' is not assignable to parameter of type 'AgentProfile'.
  Type '{ id: string; }' is missing the following properties from type 'AgentProfile': name, type, capabilities, systemPrompt, and 2 more.
        terminalManager.spawnTerminal({ id: 'agent-3' }),
[0m[31m                                      ~~~~~~~~~~~~~~~~~[0m
    at [0m[36mfile:///workspaces/claude-code-flow/tests/unit/terminal/terminal-manager.test.ts[0m:[0m[33m300[0m:[0m[33m39[0m

[0m[1mTS2339 [0m[ERROR]: Property 'sendCommand' does not exist on type 'TerminalManager'.
        terminalManager.sendCommand(sessionId, `echo "Session ${i}"`)
[0m[31m                        ~~~~~~~~~~~[0m
    at [0m[36mfile:///workspaces/claude-code-flow/tests/unit/terminal/terminal-manager.test.ts[0m:[0m[33m304[0m:[0m[33m25[0m

[0m[1mTS2339 [0m[ERROR]: Property 'sendCommand' does not exist on type 'TerminalManager'.
        () => terminalManager.sendCommand(sessionId, 'failing-command'),
[0m[31m                              ~~~~~~~~~~~[0m
    at [0m[36mfile:///workspaces/claude-code-flow/tests/unit/terminal/terminal-manager.test.ts[0m:[0m[33m319[0m:[0m[33m31[0m

[0m[1mTS2339 [0m[ERROR]: Property 'sendCommand' does not exist on type 'TerminalManager'.
          () => terminalManager.sendCommand(sessionId, command as any),
[0m[31m                                ~~~~~~~~~~~[0m
    at [0m[36mfile:///workspaces/claude-code-flow/tests/unit/terminal/terminal-manager.test.ts[0m:[0m[33m337[0m:[0m[33m33[0m

[0m[1mTS2345 [0m[ERROR]: Argument of type '{ id: string; name: string; }' is not assignable to parameter of type 'AgentProfile'.
  Type '{ id: string; name: string; }' is missing the following properties from type 'AgentProfile': type, capabilities, systemPrompt, maxConcurrentTasks, priority
        () => terminalManager.spawnTerminal({
[0m[31m                                            ^[0m
    at [0m[36mfile:///workspaces/claude-code-flow/tests/unit/terminal/terminal-manager.test.ts[0m:[0m[33m351[0m:[0m[33m45[0m

[0m[1mTS2554 [0m[ERROR]: Expected 1 arguments, but got 0.
      const sessionId = await terminalManager.spawnTerminal();
[0m[31m                                              ~~~~~~~~~~~~~[0m
    at [0m[36mfile:///workspaces/claude-code-flow/tests/unit/terminal/terminal-manager.test.ts[0m:[0m[33m365[0m:[0m[33m47[0m

    An argument for 'profile' was not provided.
      async spawnTerminal(profile: AgentProfile): Promise<string> {
    [0m[36m                      ~~~~~~~~~~~~~~~~~~~~~[0m
        at [0m[36mfile:///workspaces/claude-code-flow/src/terminal/manager.ts[0m:[0m[33m101[0m:[0m[33m23[0m

[0m[1mTS2339 [0m[ERROR]: Property 'sendCommand' does not exist on type 'TerminalManager'.
        () => terminalManager.sendCommand(sessionId, `echo "Test ${Date.now()}"`),
[0m[31m                              ~~~~~~~~~~~[0m
    at [0m[36mfile:///workspaces/claude-code-flow/tests/unit/terminal/terminal-manager.test.ts[0m:[0m[33m368[0m:[0m[33m31[0m

[0m[1mTS2554 [0m[ERROR]: Expected 1 arguments, but got 0.
          Array.from({ length: 100 }, () => terminalManager.spawnTerminal())
[0m[31m                                                            ~~~~~~~~~~~~~[0m
    at [0m[36mfile:///workspaces/claude-code-flow/tests/unit/terminal/terminal-manager.test.ts[0m:[0m[33m382[0m:[0m[33m61[0m

    An argument for 'profile' was not provided.
      async spawnTerminal(profile: AgentProfile): Promise<string> {
    [0m[36m                      ~~~~~~~~~~~~~~~~~~~~~[0m
        at [0m[36mfile:///workspaces/claude-code-flow/src/terminal/manager.ts[0m:[0m[33m101[0m:[0m[33m23[0m

[0m[1mTS2339 [0m[ERROR]: Property 'sendCommand' does not exist on type 'TerminalManager'.
            terminalManager.sendCommand(sessionId, 'echo "Memory test"')
[0m[31m                            ~~~~~~~~~~~[0m
    at [0m[36mfile:///workspaces/claude-code-flow/tests/unit/terminal/terminal-manager.test.ts[0m:[0m[33m388[0m:[0m[33m29[0m

[0m[1mTS2554 [0m[ERROR]: Expected 1 arguments, but got 0.
        Array.from({ length: 50 }, () => terminalManager.spawnTerminal())
[0m[31m                                                         ~~~~~~~~~~~~~[0m
    at [0m[36mfile:///workspaces/claude-code-flow/tests/unit/terminal/terminal-manager.test.ts[0m:[0m[33m404[0m:[0m[33m58[0m

    An argument for 'profile' was not provided.
      async spawnTerminal(profile: AgentProfile): Promise<string> {
    [0m[36m                      ~~~~~~~~~~~~~~~~~~~~~[0m
        at [0m[36mfile:///workspaces/claude-code-flow/src/terminal/manager.ts[0m:[0m[33m101[0m:[0m[33m23[0m

[0m[1mTS2339 [0m[ERROR]: Property 'sendCommand' does not exist on type 'TerminalManager'.
          return terminalManager.sendCommand(randomSessionId, 'echo "Under pressure"');
[0m[31m                                 ~~~~~~~~~~~[0m
    at [0m[36mfile:///workspaces/claude-code-flow/tests/unit/terminal/terminal-manager.test.ts[0m:[0m[33m410[0m:[0m[33m34[0m

[0m[1mTS2554 [0m[ERROR]: Expected 1 arguments, but got 0.
      const sessionId = await terminalManager.spawnTerminal();
[0m[31m                                              ~~~~~~~~~~~~~[0m
    at [0m[36mfile:///workspaces/claude-code-flow/tests/unit/terminal/terminal-manager.test.ts[0m:[0m[33m422[0m:[0m[33m47[0m

    An argument for 'profile' was not provided.
      async spawnTerminal(profile: AgentProfile): Promise<string> {
    [0m[36m                      ~~~~~~~~~~~~~~~~~~~~~[0m
        at [0m[36mfile:///workspaces/claude-code-flow/src/terminal/manager.ts[0m:[0m[33m101[0m:[0m[33m23[0m

[0m[1mTS2339 [0m[ERROR]: Property 'sendCommand' does not exist on type 'TerminalManager'.
        () => terminalManager.sendCommand(sessionId, `echo "Load test ${Date.now()}"`),
[0m[31m                              ~~~~~~~~~~~[0m
    at [0m[36mfile:///workspaces/claude-code-flow/tests/unit/terminal/terminal-manager.test.ts[0m:[0m[33m425[0m:[0m[33m31[0m

[0m[1mTS2554 [0m[ERROR]: Expected 1 arguments, but got 0.
        terminalManager.spawnTerminal(),
[0m[31m                        ~~~~~~~~~~~~~[0m
    at [0m[36mfile:///workspaces/claude-code-flow/tests/unit/terminal/terminal-manager.test.ts[0m:[0m[33m485[0m:[0m[33m25[0m

    An argument for 'profile' was not provided.
      async spawnTerminal(profile: AgentProfile): Promise<string> {
    [0m[36m                      ~~~~~~~~~~~~~~~~~~~~~[0m
        at [0m[36mfile:///workspaces/claude-code-flow/src/terminal/manager.ts[0m:[0m[33m101[0m:[0m[33m23[0m

[0m[1mTS2554 [0m[ERROR]: Expected 1 arguments, but got 0.
        terminalManager.spawnTerminal(),
[0m[31m                        ~~~~~~~~~~~~~[0m
    at [0m[36mfile:///workspaces/claude-code-flow/tests/unit/terminal/terminal-manager.test.ts[0m:[0m[33m486[0m:[0m[33m25[0m

    An argument for 'profile' was not provided.
      async spawnTerminal(profile: AgentProfile): Promise<string> {
    [0m[36m                      ~~~~~~~~~~~~~~~~~~~~~[0m
        at [0m[36mfile:///workspaces/claude-code-flow/src/terminal/manager.ts[0m:[0m[33m101[0m:[0m[33m23[0m

[0m[1mTS2554 [0m[ERROR]: Expected 1 arguments, but got 0.
        terminalManager.spawnTerminal(),
[0m[31m                        ~~~~~~~~~~~~~[0m
    at [0m[36mfile:///workspaces/claude-code-flow/tests/unit/terminal/terminal-manager.test.ts[0m:[0m[33m487[0m:[0m[33m25[0m

    An argument for 'profile' was not provided.
      async spawnTerminal(profile: AgentProfile): Promise<string> {
    [0m[36m                      ~~~~~~~~~~~~~~~~~~~~~[0m
        at [0m[36mfile:///workspaces/claude-code-flow/src/terminal/manager.ts[0m:[0m[33m101[0m:[0m[33m23[0m

[0m[1mTS2339 [0m[ERROR]: Property 'sendCommand' does not exist on type 'TerminalManager'.
          terminalManager.sendCommand(sessionId, 'echo "Metrics test"')
[0m[31m                          ~~~~~~~~~~~[0m
    at [0m[36mfile:///workspaces/claude-code-flow/tests/unit/terminal/terminal-manager.test.ts[0m:[0m[33m493[0m:[0m[33m27[0m

[0m[1mTS2554 [0m[ERROR]: Expected 1 arguments, but got 0.
        () => terminalManager.spawnTerminal(),
[0m[31m                              ~~~~~~~~~~~~~[0m
    at [0m[36mfile:///workspaces/claude-code-flow/tests/unit/terminal/terminal-manager.test.ts[0m:[0m[33m516[0m:[0m[33m31[0m

    An argument for 'profile' was not provided.
      async spawnTerminal(profile: AgentProfile): Promise<string> {
    [0m[36m                      ~~~~~~~~~~~~~~~~~~~~~[0m
        at [0m[36mfile:///workspaces/claude-code-flow/src/terminal/manager.ts[0m:[0m[33m101[0m:[0m[33m23[0m

[0m[1mTS2339 [0m[ERROR]: Property 'sendCommand' does not exist on type 'TerminalManager'.
          () => terminalManager.sendCommand(sessionId as any, 'echo test'),
[0m[31m                                ~~~~~~~~~~~[0m
    at [0m[36mfile:///workspaces/claude-code-flow/tests/unit/terminal/terminal-manager.test.ts[0m:[0m[33m527[0m:[0m[33m33[0m

[0m[1mTS2379 [0m[ERROR]: Argument of type '{ id: string; name: string; workingDirectory?: never; } | { id: string; name: string; workingDirectory: string; }' is not assignable to parameter of type 'AgentProfile' with 'exactOptionalPropertyTypes: true'. Consider adding 'undefined' to the types of the target's properties.
  Type '{ id: string; name: string; workingDirectory?: never; }' is missing the following properties from type 'AgentProfile': type, capabilities, systemPrompt, maxConcurrentTasks, priority
          const sessionId = await terminalManager.spawnTerminal(profile);
[0m[31m                                                                ~~~~~~~[0m
    at [0m[36mfile:///workspaces/claude-code-flow/tests/unit/terminal/terminal-manager.test.ts[0m:[0m[33m545[0m:[0m[33m65[0m

[0m[1mTS2554 [0m[ERROR]: Expected 1 arguments, but got 0.
        terminalManager.spawnTerminal().catch(error => error)
[0m[31m                        ~~~~~~~~~~~~~[0m
    at [0m[36mfile:///workspaces/claude-code-flow/tests/unit/terminal/terminal-manager.test.ts[0m:[0m[33m565[0m:[0m[33m25[0m

    An argument for 'profile' was not provided.
      async spawnTerminal(profile: AgentProfile): Promise<string> {
    [0m[36m                      ~~~~~~~~~~~~~~~~~~~~~[0m
        at [0m[36mfile:///workspaces/claude-code-flow/src/terminal/manager.ts[0m:[0m[33m101[0m:[0m[33m23[0m

[0m[1mTS2554 [0m[ERROR]: Expected 1 arguments, but got 0.
        () => terminalManager.spawnTerminal(),
[0m[31m                              ~~~~~~~~~~~~~[0m
    at [0m[36mfile:///workspaces/claude-code-flow/tests/unit/terminal/terminal-manager.test.ts[0m:[0m[33m586[0m:[0m[33m31[0m

    An argument for 'profile' was not provided.
      async spawnTerminal(profile: AgentProfile): Promise<string> {
    [0m[36m                      ~~~~~~~~~~~~~~~~~~~~~[0m
        at [0m[36mfile:///workspaces/claude-code-flow/src/terminal/manager.ts[0m:[0m[33m101[0m:[0m[33m23[0m

[0m[1mTS2554 [0m[ERROR]: Expected 1 arguments, but got 0.
      const sessionId = await terminalManager.spawnTerminal();
[0m[31m                                              ~~~~~~~~~~~~~[0m
    at [0m[36mfile:///workspaces/claude-code-flow/tests/unit/terminal/terminal-manager.test.ts[0m:[0m[33m603[0m:[0m[33m47[0m

    An argument for 'profile' was not provided.
      async spawnTerminal(profile: AgentProfile): Promise<string> {
    [0m[36m                      ~~~~~~~~~~~~~~~~~~~~~[0m
        at [0m[36mfile:///workspaces/claude-code-flow/src/terminal/manager.ts[0m:[0m[33m101[0m:[0m[33m23[0m

[0m[1mTS2339 [0m[ERROR]: Property 'sendCommand' does not exist on type 'TerminalManager'.
        const result = await terminalManager.sendCommand(sessionId, 'test-command');
[0m[31m                                             ~~~~~~~~~~~[0m
    at [0m[36mfile:///workspaces/claude-code-flow/tests/unit/terminal/terminal-manager.test.ts[0m:[0m[33m607[0m:[0m[33m46[0m

[0m[1mTS18046 [0m[ERROR]: 'error' is of type 'unknown'.
        assertEquals(error.message, 'Adapter temporarily unavailable');
[0m[31m                     ~~~~~[0m
    at [0m[36mfile:///workspaces/claude-code-flow/tests/unit/terminal/terminal-manager.test.ts[0m:[0m[33m612[0m:[0m[33m22[0m

[0m[1mTS2554 [0m[ERROR]: Expected 1 arguments, but got 0.
        terminalManager.spawnTerminal(),
[0m[31m                        ~~~~~~~~~~~~~[0m
    at [0m[36mfile:///workspaces/claude-code-flow/tests/unit/terminal/terminal-manager.test.ts[0m:[0m[33m623[0m:[0m[33m25[0m

    An argument for 'profile' was not provided.
      async spawnTerminal(profile: AgentProfile): Promise<string> {
    [0m[36m                      ~~~~~~~~~~~~~~~~~~~~~[0m
        at [0m[36mfile:///workspaces/claude-code-flow/src/terminal/manager.ts[0m:[0m[33m101[0m:[0m[33m23[0m

[0m[1mTS2554 [0m[ERROR]: Expected 1 arguments, but got 0.
        terminalManager.spawnTerminal(),
[0m[31m                        ~~~~~~~~~~~~~[0m
    at [0m[36mfile:///workspaces/claude-code-flow/tests/unit/terminal/terminal-manager.test.ts[0m:[0m[33m624[0m:[0m[33m25[0m

    An argument for 'profile' was not provided.
      async spawnTerminal(profile: AgentProfile): Promise<string> {
    [0m[36m                      ~~~~~~~~~~~~~~~~~~~~~[0m
        at [0m[36mfile:///workspaces/claude-code-flow/src/terminal/manager.ts[0m:[0m[33m101[0m:[0m[33m23[0m

[0m[1mTS2551 [0m[ERROR]: Property 'isInitialized' does not exist on type 'TerminalManager'. Did you mean 'initialize'?
      assertEquals(terminalManager.isInitialized(), false);
[0m[31m                                   ~~~~~~~~~~~~~[0m
    at [0m[36mfile:///workspaces/claude-code-flow/tests/unit/terminal/terminal-manager.test.ts[0m:[0m[33m630[0m:[0m[33m36[0m

    'initialize' is declared here.
      async initialize(): Promise<void> {
    [0m[36m        ~~~~~~~~~~[0m
        at [0m[36mfile:///workspaces/claude-code-flow/src/terminal/manager.ts[0m:[0m[33m51[0m:[0m[33m9[0m

[0m[1mTS2554 [0m[ERROR]: Expected 1 arguments, but got 0.
      const sessionId = await terminalManager.spawnTerminal();
[0m[31m                                              ~~~~~~~~~~~~~[0m
    at [0m[36mfile:///workspaces/claude-code-flow/tests/unit/terminal/terminal-manager.test.ts[0m:[0m[33m636[0m:[0m[33m47[0m

    An argument for 'profile' was not provided.
      async spawnTerminal(profile: AgentProfile): Promise<string> {
    [0m[36m                      ~~~~~~~~~~~~~~~~~~~~~[0m
        at [0m[36mfile:///workspaces/claude-code-flow/src/terminal/manager.ts[0m:[0m[33m101[0m:[0m[33m23[0m

[0m[1mTS2339 [0m[ERROR]: Property 'sendCommand' does not exist on type 'TerminalManager'.
      const commandPromise = terminalManager.sendCommand(sessionId, 'long-running-command');
[0m[31m                                             ~~~~~~~~~~~[0m
    at [0m[36mfile:///workspaces/claude-code-flow/tests/unit/terminal/terminal-manager.test.ts[0m:[0m[33m639[0m:[0m[33m46[0m

[0m[1mTS2551 [0m[ERROR]: Property 'isInitialized' does not exist on type 'TerminalManager'. Did you mean 'initialize'?
      assertEquals(terminalManager.isInitialized(), false);
[0m[31m                                   ~~~~~~~~~~~~~[0m
    at [0m[36mfile:///workspaces/claude-code-flow/tests/unit/terminal/terminal-manager.test.ts[0m:[0m[33m647[0m:[0m[33m36[0m

    'initialize' is declared here.
      async initialize(): Promise<void> {
    [0m[36m        ~~~~~~~~~~[0m
        at [0m[36mfile:///workspaces/claude-code-flow/src/terminal/manager.ts[0m:[0m[33m51[0m:[0m[33m9[0m

[0m[1mTS2551 [0m[ERROR]: Property 'isInitialized' does not exist on type 'TerminalManager'. Did you mean 'initialize'?
      assertEquals(terminalManager.isInitialized(), false);
[0m[31m                                   ~~~~~~~~~~~~~[0m
    at [0m[36mfile:///workspaces/claude-code-flow/tests/unit/terminal/terminal-manager.test.ts[0m:[0m[33m673[0m:[0m[33m36[0m

    'initialize' is declared here.
      async initialize(): Promise<void> {
    [0m[36m        ~~~~~~~~~~[0m
        at [0m[36mfile:///workspaces/claude-code-flow/src/terminal/manager.ts[0m:[0m[33m51[0m:[0m[33m9[0m

[0m[1mTS2554 [0m[ERROR]: Expected 1 arguments, but got 0.
        () => terminalManager.spawnTerminal(),
[0m[31m                              ~~~~~~~~~~~~~[0m
    at [0m[36mfile:///workspaces/claude-code-flow/tests/unit/terminal/terminal-manager.test.ts[0m:[0m[33m681[0m:[0m[33m31[0m

    An argument for 'profile' was not provided.
      async spawnTerminal(profile: AgentProfile): Promise<string> {
    [0m[36m                      ~~~~~~~~~~~~~~~~~~~~~[0m
        at [0m[36mfile:///workspaces/claude-code-flow/src/terminal/manager.ts[0m:[0m[33m101[0m:[0m[33m23[0m

[0m[1mTS2339 [0m[ERROR]: Property 'sendCommand' does not exist on type 'TerminalManager'.
        () => terminalManager.sendCommand('session-id', 'echo test'),
[0m[31m                              ~~~~~~~~~~~[0m
    at [0m[36mfile:///workspaces/claude-code-flow/tests/unit/terminal/terminal-manager.test.ts[0m:[0m[33m687[0m:[0m[33m31[0m

[0m[1mTS2769 [0m[ERROR]: No overload matches this call.
  Overload 1 of 4, '(iterable?: Iterable<readonly [string, number]> | null | undefined): Map<string, number>', gave the following error.
    Argument of type '([string, number] | [string, { c: number; }])[]' is not assignable to parameter of type 'Iterable<readonly [string, number]>'.
      The types returned by '[Symbol.iterator]().next(...)' are incompatible between these types.
        Type 'IteratorResult<[string, number] | [string, { c: number; }], undefined>' is not assignable to type 'IteratorResult<readonly [string, number], any>' with 'exactOptionalPropertyTypes: true'. Consider adding 'undefined' to the types of the target's properties.
          Type 'IteratorYieldResult<[string, number] | [string, { c: number; }]>' is not assignable to type 'IteratorResult<readonly [string, number], any>' with 'exactOptionalPropertyTypes: true'. Consider adding 'undefined' to the types of the target's properties.
            Type 'IteratorYieldResult<[string, number] | [string, { c: number; }]>' is not assignable to type 'IteratorYieldResult<readonly [string, number]>' with 'exactOptionalPropertyTypes: true'. Consider adding 'undefined' to the types of the target's properties.
              Type '[string, number] | [string, { c: number; }]' is not assignable to type 'readonly [string, number]'.
                Type '[string, { c: number; }]' is not assignable to type 'readonly [string, number]'.
                  Type at position 1 in source is not compatible with type at position 1 in target.
                    Type '{ c: number; }' is not assignable to type 'number'.
  Overload 2 of 4, '(entries?: readonly (readonly [string, number])[] | null | undefined): Map<string, number>', gave the following error.
    Type '{ c: number; }' is not assignable to type 'number'.
      const original = new Map([['a', 1], ['b', { c: 2 }]]);
[0m[31m                           ~~~[0m
    at [0m[36mfile:///workspaces/claude-code-flow/tests/unit/utils/helpers.test.ts[0m:[0m[33m292[0m:[0m[33m28[0m

[0m[1mTS2379 [0m[ERROR]: Argument of type '{ suffix: string; dir: string | undefined; }' is not assignable to parameter of type 'MakeTempOptions' with 'exactOptionalPropertyTypes: true'. Consider adding 'undefined' to the types of the target's properties.
  Types of property 'dir' are incompatible.
    Type 'string | undefined' is not assignable to type 'string'.
      Type 'undefined' is not assignable to type 'string'.
    const tempFile = await Deno.makeTempFile({ suffix, dir });
[0m[31m                                             ~~~~~~~~~~~~~~~[0m
    at [0m[36mfile:///workspaces/claude-code-flow/tests/utils/test-utils.ts[0m:[0m[33m423[0m:[0m[33m46[0m

[0m[1mTS2344 [0m[ERROR]: Type 'K' does not satisfy the constraint 'unknown[]'.
  Type 'keyof T' is not assignable to type 'unknown[]'.
    Type 'string | number | symbol' is not assignable to type 'unknown[]'.
      Type 'string' is not assignable to type 'unknown[]'.
  ): T & { [K in keyof T]: T[K] extends (...args: any[]) => any ? Spy<T, K> : T[K] } {
[0m[31m                                                                         ^[0m
    at [0m[36mfile:///workspaces/claude-code-flow/tests/utils/test-utils.ts[0m:[0m[33m479[0m:[0m[33m74[0m

[0m[1mTS2862 [0m[ERROR]: Type 'T & Partial<T>' is generic and can only be indexed for reading.
        mock[key] = stub(mock, key as keyof T, value);
[0m[31m        ~~~~~~~~~[0m
    at [0m[36mfile:///workspaces/claude-code-flow/tests/utils/test-utils.ts[0m:[0m[33m484[0m:[0m[33m9[0m

[0m[1mTS7053 [0m[ERROR]: Element implicitly has an 'any' type because expression of type '"method"' can't be used to index type '{}'.
  Property 'method' does not exist on type '{}'.
      obj[methodName] = implementation;
[0m[31m      ~~~~~~~~~~~~~~~[0m
    at [0m[36mfile:///workspaces/claude-code-flow/tests/utils/test-utils.ts[0m:[0m[33m501[0m:[0m[33m7[0m

[0m[1mTS7053 [0m[ERROR]: Element implicitly has an 'any' type because expression of type '"method"' can't be used to index type '{}'.
  Property 'method' does not exist on type '{}'.
      obj[methodName] = () => {};
[0m[31m      ~~~~~~~~~~~~~~~[0m
    at [0m[36mfile:///workspaces/claude-code-flow/tests/utils/test-utils.ts[0m:[0m[33m503[0m:[0m[33m7[0m

[0m[1mTS2345 [0m[ERROR]: Argument of type '"method"' is not assignable to parameter of type 'never'.
    return stub(obj, methodName) as any;
[0m[31m                     ~~~~~~~~~~[0m
    at [0m[36mfile:///workspaces/claude-code-flow/tests/utils/test-utils.ts[0m:[0m[33m506[0m:[0m[33m22[0m

[0m[1mTS2322 [0m[ERROR]: Type 'Stub<T, GetParametersFromProp<T, keyof T>, GetReturnFromProp<T, keyof T>>' is not assignable to type 'T[keyof T]'.
  'Stub<T, GetParametersFromProp<T, keyof T>, GetReturnFromProp<T, keyof T>>' is assignable to the constraint of type 'T[keyof T]', but 'T[keyof T]' could be instantiated with a different subtype of constraint 'any'.
        mock[method] = stub(mock, method, () => {
[0m[31m        ~~~~~~~~~~~~[0m
    at [0m[36mfile:///workspaces/claude-code-flow/tests/utils/test-utils.ts[0m:[0m[33m521[0m:[0m[33m9[0m

[0m[1mTS18046 [0m[ERROR]: 'error' is of type 'unknown'.
          `Expected error of type ${ErrorClass.name}, but got ${error.constructor.name}`
[0m[31m                                                                ~~~~~[0m
    at [0m[36mfile:///workspaces/claude-code-flow/tests/utils/test-utils.ts[0m:[0m[33m626[0m:[0m[33m65[0m

[0m[1mTS18046 [0m[ERROR]: 'error' is of type 'unknown'.
      if (msgIncludes && !error.message.includes(msgIncludes)) {
[0m[31m                          ~~~~~[0m
    at [0m[36mfile:///workspaces/claude-code-flow/tests/utils/test-utils.ts[0m:[0m[33m630[0m:[0m[33m27[0m

[0m[1mTS18046 [0m[ERROR]: 'error' is of type 'unknown'.
          `Expected error message to include "${msgIncludes}", but got: ${error.message}`
[0m[31m                                                                          ~~~~~[0m
    at [0m[36mfile:///workspaces/claude-code-flow/tests/utils/test-utils.ts[0m:[0m[33m632[0m:[0m[33m75[0m

Found 359 errors.

[0m[1m[31merror[0m: Type checking failed.

  [33minfo:[39m The program failed type-checking, but it still might work correctly.
  [36mhint:[39m Re-run with [4m--no-check[24m to skip type-checking.
