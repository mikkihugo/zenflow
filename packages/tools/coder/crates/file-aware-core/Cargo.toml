[package]
name = "file-aware-core"
version = "0.1.0"
authors = ["claude-code-zen Team"]
edition = "2021"
license = "MIT OR Apache-2.0"
description = "Pure Rust file-aware code analysis core - Rustler ready for Elixir NIFs"

# Rustler-ready configuration
[lib]
name = "file_aware_core"
crate-type = ["cdylib", "rlib"]

[dependencies]
# Core Rust dependencies - minimal and portable
serde = { version = "1.0", features = ["derive"] }
serde_json = "1.0"
thiserror = "2.0"
anyhow = "1.0"

# File system and path handling
walkdir = { workspace = true }
ignore = "0.4"
glob = "0.3"

# Text processing
regex = "1.10"
aho-corasick = "1.1"
memchr = "2.7"

# AST parsing - tree-sitter for multiple languages
tree-sitter = "0.22"
tree-sitter-rust = "0.21"
tree-sitter-typescript = "0.21"
tree-sitter-javascript = "0.21"
tree-sitter-python = "0.21"
tree-sitter-go = "0.21"

# Parallel processing
rayon = "1.8"

# Hash maps and collections
indexmap = { version = "2.2", features = ["serde"] }
dashmap = { workspace = true }

# Optional features for different environments
tokio = { version = "1.0", features = ["fs", "io-util", "process"], optional = true }

# Database integration
tempfile = "3.0"
chrono = { version = "0.4", features = ["serde"] }

# Core code analysis
levenshtein = "1.0"                                            # String distance
md5 = "0.7"                                                    # MD5 hashing for unique IDs

# Optional database dependencies
rusqlite = { version = "0.32", optional = true }
# lancedb = { version = "0.8", optional = true }
# kuzu = { version = "0.11.3-pre.3", optional = true }
# tokio-postgres = { version = "0.7", optional = true }
# mysql_async = { version = "0.34", optional = true }

# Optional ML dependencies (commented out for now)
# burn = { version = "0.13", optional = true }
# burn-tch = { version = "0.13", optional = true }
# burn-autodiff = { version = "0.13", optional = true }
# burn-core = { version = "0.13", optional = true }
# burn-optim = { version = "0.13", optional = true }
# burn-dataset = { version = "0.13", optional = true }
# burn-train = { version = "0.13", optional = true }
# rust-bert = { version = "0.22", optional = true }
# tch = { version = "0.14", optional = true }
# tokenizers = { version = "0.15", optional = true }
# linfa = { version = "0.7", optional = true }
# linfa-clustering = { version = "0.7", optional = true }
# linfa-preprocessing = { version = "0.7", optional = true }

[features]
default = ["sqlite"]
sqlite = ["dep:rusqlite"]
# lancedb = ["dep:lancedb"]
# kuzu = ["dep:kuzu"]
# postgres = ["dep:tokio-postgres"]
# mysql = ["dep:mysql_async"]
# ml = ["burn", "burn-tch", "burn-autodiff", "burn-core", "burn-optim", "burn-dataset", "burn-train"]
# bert = ["rust-bert", "tch", "tokenizers"]
# clustering = ["linfa", "linfa-clustering", "linfa-preprocessing"]
# full = ["ml", "bert", "clustering", "postgres", "mysql"]
# database-full = ["sqlite", "postgres", "mysql"]
database-minimal = ["sqlite"]

# For Rustler/Elixir integration
rustler = []

[dev-dependencies]
tempfile = { workspace = true }
criterion = "0.5"
tokio-test = "0.4"

# Benchmarks can be added when needed
# [[bench]]
# name = "ml_performance"
# harness = false