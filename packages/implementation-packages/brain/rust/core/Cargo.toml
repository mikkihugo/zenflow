[package]
name = "claude-zen-neural-core"
version = "0.1.0"
edition = "2021"
authors = ["claude-code-zen Team"]
description = "Pure Rust neural network implementation based on FANN library"
license = "MIT OR Apache-2.0"

[lib]
name = "claude_zen_neural_core"
path = "lib.rs"
crate-type = ["cdylib", "lib"]

[dependencies]
# Core numeric traits and operations
num-traits = "0.2"
thiserror = "2.0"
rand = "0.8"
lazy_static = "1.4"

# Parallel processing for SIMD optimization
rayon = { version = "1.8", optional = true }

# WASM bindings
wasm-bindgen = { version = "0.2.93", optional = true }
js-sys = { version = "0.3.70", optional = true }
console_error_panic_hook = { version = "0.1.7", optional = true }
wasm-logger = { version = "0.2.0", optional = true }
log = { version = "0.4.21", optional = true }
serde_json = { version = "1.0", optional = true }
serde-wasm-bindgen = { version = "0.6.5", optional = true }

# For typed arrays support in WASM
getrandom = { version = "0.2", features = ["js"], optional = true }

# Modern neural network framework (optional) - using latest stable version
burn = { version = "0.18", default-features = false, features = ["std"], optional = true }
burn-ndarray = { version = "0.18", optional = true }
burn-wgpu = { version = "0.18", optional = true }

# Traditional neural networks (battle-tested, optional)  
smartcore = { version = "0.3", default-features = false, features = ["ndarray-bindings"], optional = true }

# Serialization support (optional)
serde = { version = "1.0", features = ["derive"], optional = true }
bincode = { version = "1.3", optional = true }

# DSPy optimization dependencies (lightweight subset)
statrs = { version = "0.17", optional = true }
argmin = { version = "0.10", optional = true }
optimization = { version = "0.2", optional = true }

[dependencies.web-sys]
version = "0.3.70"
optional = true
features = [
  "console",
  "Performance", 
  "Window",
]

[features]
default = ["std", "parallel", "gpu-backend", "wasm", "io", "full-training", "dspy-integration"]
std = []
serde = ["dep:serde"]
parallel = ["dep:rayon"]
io = ["dep:bincode", "dep:serde", "dep:serde_json"]
logging = []
binary = []

# WASM features
wasm = [
  "dep:wasm-bindgen", 
  "dep:js-sys", 
  "dep:console_error_panic_hook",
  "dep:wasm-logger",
  "dep:log",
  "dep:serde_json",
  "dep:serde-wasm-bindgen",
  "dep:getrandom",
  "dep:web-sys"
]
console_error_panic_hook = ["dep:console_error_panic_hook"]

# Neural network backends (optional)
burn-backend = ["dep:burn", "dep:burn-ndarray"]
gpu-backend = ["burn-backend", "dep:burn-wgpu"]
smartcore-backend = ["dep:smartcore"]
full-training = ["burn-backend", "smartcore-backend"]

# DSPy integration for neural coordination optimization
dspy-integration = ["dep:statrs", "dep:argmin", "dep:optimization"]

[dev-dependencies]
approx = "0.5"