{
  "version": 3,
  "sources": ["../src/config/logging-config.ts", "../src/config/defaults.ts", "../src/config/validator.ts", "../src/config/loader.ts", "../src/config/manager.ts", "../src/config/system-info.ts", "../src/config/default-repo-config.ts", "../src/config/health-checker.ts", "../src/config/startup-validator.ts", "../src/interfaces/mcp/start-server.ts", "../src/interfaces/mcp/http-mcp-server.ts", "../src/config/index.ts", "../src/interfaces/mcp/mcp-tools.ts", "../src/memory/core/memory-coordinator.ts"],
  "sourcesContent": ["/**\n * @file Centralized Logging Configuration\n * Provides unified logging configuration and factory methods for the entire application.\n */\n\nimport { getLogger as getLogTapeLogger } from '@logtape/logtape';\nimport type { ILogger } from '../core/bootstrap-logger.ts';\n\nexport enum LoggingLevel {\n  DEBUG = 'debug',\n  INFO = 'info',\n  WARN = 'warn',\n  ERROR = 'error',\n}\n\nexport interface LoggingConfig {\n  level: LoggingLevel;\n  enableConsole: boolean;\n  enableFile: boolean;\n  timestamp: boolean;\n  format: 'json' | 'text';\n  components: Record<string, LoggingLevel>;\n}\n\nexport interface Logger extends ILogger {\n  success?(message: string, meta?: unknown): void;\n  progress?(message: string, meta?: unknown): void;\n}\n\nclass LoggingConfigurationManager {\n  private static instance: LoggingConfigurationManager;\n  private config: LoggingConfig;\n  private loggers: Map<string, Logger> = new Map();\n\n  private constructor() {\n    this.config = this.loadConfiguration();\n  }\n\n  static getInstance(): LoggingConfigurationManager {\n    if (!LoggingConfigurationManager.instance) {\n      LoggingConfigurationManager.instance = new LoggingConfigurationManager();\n    }\n    return LoggingConfigurationManager.instance;\n  }\n\n  private loadConfiguration(): LoggingConfig {\n    // Load from environment variables with sensible defaults\n    const nodeEnv = process.env['NODE_ENV'] || 'development';\n    const defaultLevel =\n      nodeEnv === 'development' ? LoggingLevel.DEBUG : LoggingLevel.INFO;\n\n    return {\n      level: (process.env['LOG_LEVEL'] as LoggingLevel) || defaultLevel,\n      enableConsole: process.env['LOG_DISABLE_CONSOLE'] !== 'true',\n      enableFile: process.env['LOG_ENABLE_FILE'] === 'true',\n      timestamp: process.env['LOG_DISABLE_TIMESTAMP'] !== 'true',\n      format: (process.env['LOG_FORMAT'] as 'json' | 'text') || 'text',\n      components: {\n        // Override levels for specific components\n        'swarm-coordinator':\n          (process.env['LOG_LEVEL_SWARM'] as LoggingLevel) || defaultLevel,\n        'neural-network':\n          (process.env['LOG_LEVEL_NEURAL'] as LoggingLevel) || defaultLevel,\n        'mcp-server':\n          (process.env['LOG_LEVEL_MCP'] as LoggingLevel) || defaultLevel,\n        database: (process.env['LOG_LEVEL_DB'] as LoggingLevel) || defaultLevel,\n      },\n    };\n  }\n\n  /**\n   * Get logging configuration.\n   */\n  getConfig(): LoggingConfig {\n    return { ...this.config };\n  }\n\n  /**\n   * Update logging configuration.\n   *\n   * @param updates\n   */\n  updateConfig(updates: Partial<LoggingConfig>): void {\n    this.config = { ...this.config, ...updates };\n    // Clear cached loggers to force recreation with new config\n    this.loggers.clear();\n  }\n\n  /**\n   * Create or get cached logger for a component.\n   *\n   * @param component\n   */\n  getLogger(component: string): Logger {\n    if (this.loggers.has(component)) {\n      return this.loggers.get(component)!;\n    }\n\n    const logger = this.createLoggerForComponent(component);\n    this.loggers.set(component, logger);\n    return logger;\n  }\n\n  private createLoggerForComponent(component: string): Logger {\n    // Use component-specific log level if configured\n    const componentLevel =\n      this.config.components[component] || this.config.level;\n\n    // Set environment variable for the component so existing loggers pick it up\n    const originalLevel = process.env['LOG_LEVEL'];\n    process.env['LOG_LEVEL'] = componentLevel;\n\n    try {\n      // Create logger using logtape (no circular deps since we import directly)\n      const coreLogger = getLogTapeLogger(component);\n\n      // Enhance with additional methods compatible with existing interfaces\n      const enhancedLogger: Logger = {\n        debug: (message: string, meta?: unknown) =>\n          coreLogger.debug(message, meta as any),\n        info: (message: string, meta?: unknown) =>\n          coreLogger.info(message, meta as any),\n        warn: (message: string, meta?: unknown) =>\n          coreLogger.warn(message, meta as any),\n        error: (message: string, meta?: unknown) =>\n          coreLogger.error(message, meta as any),\n      };\n\n      // Add success and progress methods\n      enhancedLogger.success = (message: string, meta?: unknown) => {\n        coreLogger.info(`\u2705 ${message}`, meta as any);\n      };\n\n      enhancedLogger.progress = (message: string, meta?: unknown) => {\n        coreLogger.info(`\uD83D\uDD04 ${message}`, meta as any);\n      };\n\n      return enhancedLogger;\n    } finally {\n      // Restore original log level\n      if (originalLevel !== undefined) {\n        process.env['LOG_LEVEL'] = originalLevel;\n      } else {\n        process.env['LOG_LEVEL'] = undefined;\n      }\n    }\n  }\n\n  /**\n   * Create logger specifically for console.log replacement\n   * This creates a logger optimized for CLI output and user-facing messages.\n   *\n   * @param component\n   */\n  createConsoleReplacementLogger(component: string): Logger {\n    const logger = this.getLogger(component);\n\n    return {\n      debug: (message: string, meta?: unknown) => logger.debug(message, meta),\n      // For console.log replacement, use info level\n      info: (message: string, meta?: unknown) => logger.info(message, meta),\n      warn: (message: string, meta?: unknown) => logger.warn(message, meta),\n      error: (message: string, meta?: unknown) => logger.error(message, meta),\n      success:\n        logger.success ||\n        ((message: string, meta?: unknown) => logger.info(message, meta)),\n      progress:\n        logger.progress ||\n        ((message: string, meta?: unknown) => logger.info(message, meta)),\n    };\n  }\n\n  /**\n   * Enable debug logging for development.\n   */\n  enableDebugMode(): void {\n    this.updateConfig({\n      level: LoggingLevel.DEBUG,\n      components: Object.fromEntries(\n        Object.keys(this.config.components).map((key) => [\n          key,\n          LoggingLevel.DEBUG,\n        ])\n      ),\n    });\n  }\n\n  /**\n   * Set production logging (INFO and above).\n   */\n  setProductionMode(): void {\n    this.updateConfig({\n      level: LoggingLevel.INFO,\n      components: Object.fromEntries(\n        Object.keys(this.config.components).map((key) => [\n          key,\n          LoggingLevel.INFO,\n        ])\n      ),\n    });\n  }\n\n  /**\n   * Silence all logging except errors.\n   */\n  setSilentMode(): void {\n    this.updateConfig({\n      level: LoggingLevel.ERROR,\n      components: Object.fromEntries(\n        Object.keys(this.config.components).map((key) => [\n          key,\n          LoggingLevel.ERROR,\n        ])\n      ),\n    });\n  }\n}\n\n// Export singleton instance\nexport const loggingConfigManager = LoggingConfigurationManager.getInstance();\n\n/**\n * Convenience function to get a logger for a component.\n *\n * @param component\n * @example\n */\nexport function getLogger(component: string): Logger {\n  return loggingConfigManager?.getLogger(component);\n}\n\n/**\n * Convenience function for console.log replacement.\n *\n * @param component\n * @example\n */\nexport function getConsoleReplacementLogger(component: string): Logger {\n  return loggingConfigManager?.createConsoleReplacementLogger(component);\n}\n\n/**\n * Convenience functions for common logging needs.\n */\nexport const logger = {\n  // Default system logger\n  system: getLogger('system'),\n  // CLI output logger\n  cli: getConsoleReplacementLogger('cli'),\n  // Swarm coordination logger\n  swarm: getLogger('swarm-coordinator'),\n  // Neural network logger\n  neural: getLogger('neural-network'),\n  // MCP server logger\n  mcp: getLogger('mcp-server'),\n  // Database logger\n  database: getLogger('database'),\n};\n\n// Simple in-memory log storage for TUI display\nconst logEntries: unknown[] = [];\n\n/**\n * Add log entry for TUI display\n */\nexport function addLogEntry(entry: {\n  level: 'debug' | 'info' | 'warn' | 'error' | 'trace';\n  component: string;\n  message: string;\n  metadata?: Record<string, unknown>;\n}) {\n  logEntries.push({\n    id: `log-${Date.now()}-${Math.random()}`,\n    timestamp: new Date(),\n    ...entry,\n  });\n\n  // Keep only last 1000 entries\n  if (logEntries.length > 1000) {\n    logEntries.splice(0, logEntries.length - 1000);\n  }\n}\n\n/**\n * Get log entries for TUI display\n */\nexport function getLogEntries() {\n  return [...logEntries];\n}\n\n// Add some system startup logs\naddLogEntry({\n  level: 'info',\n  component: 'system',\n  message: 'Claude Code Zen TUI initialized',\n});\n\naddLogEntry({\n  level: 'info',\n  component: 'terminal',\n  message: 'Terminal interface ready',\n});\n\nexport default loggingConfigManager;\n", "/**\n * @file Defaults implementation.\n */\n\nimport type { SystemConfiguration } from './types.ts';\n\n/**\n * Default system configuration.\n */\nexport const DEFAULT_CONFIG: SystemConfiguration = {\n  core: {\n    logger: {\n      level: 'info',\n      console: true,\n      structured: false,\n    },\n    performance: {\n      enableMetrics: true,\n      metricsInterval: 10000,\n      enableProfiling: false,\n    },\n    security: {\n      enableSandbox: true,\n      allowShellAccess: false,\n      trustedHosts: ['localhost', '127.0.0.1'],\n    },\n  },\n\n  interfaces: {\n    shared: {\n      theme: 'dark',\n      verbosity: 'normal',\n      autoCompletion: true,\n      realTimeUpdates: true,\n      refreshInterval: 5000,\n      maxCommandHistory: 100,\n      pageSize: 25,\n    },\n    terminal: {\n      timeout: 30000,\n      maxConcurrentProcesses: 10,\n      enableColors: true,\n      enableProgressBars: true,\n    },\n    web: {\n      port: 3456,\n      host: 'localhost',\n      enableHttps: false,\n      corsOrigins: ['http://localhost:3000', 'http://localhost:3456'],\n      staticPath: './public',\n      enableCompression: true,\n    },\n    mcp: {\n      http: {\n        port: 3000,\n        host: 'localhost',\n        timeout: 30000,\n        maxRequestSize: '10mb',\n        enableCors: true,\n      },\n      stdio: {\n        timeout: 30000,\n        maxBufferSize: 1024 * 1024, // 1MB\n      },\n      tools: {\n        enableAll: true,\n        enabledTools: [],\n        disabledTools: [],\n      },\n    },\n  },\n\n  storage: {\n    memory: {\n      backend: 'sqlite',\n      directory: './data/memory',\n      namespace: 'claude-zen',\n      enableCompression: false,\n      maxMemorySize: 100 * 1024 * 1024, // 100MB\n      cacheSize: 10 * 1024 * 1024, // 10MB\n      enableBackup: true,\n      backupInterval: 3600000, // 1 hour\n    },\n    database: {\n      sqlite: {\n        path: './data/claude-zen.db',\n        enableWAL: true,\n        maxConnections: 10,\n        timeout: 30000,\n      },\n      lancedb: {\n        path: './data/lancedb',\n        enableVectorIndex: true,\n        indexType: 'ivf',\n      },\n      persistence: {\n        maxReaders: 6,\n        maxWorkers: 3,\n        mmapSize: 268435456, // 256MB\n        cacheSize: -64000, // 64MB\n        enableBackup: false,\n        healthCheckInterval: 60000, // 1 minute\n      },\n    },\n  },\n\n  coordination: {\n    maxAgents: 50,\n    heartbeatInterval: 10000,\n    timeout: 30000,\n    topology: 'mesh',\n    enableLoadBalancing: true,\n    enableFailover: true,\n    enableMetrics: true,\n  },\n\n  // External services and API keys\n  services: {\n    anthropic: {\n      apiKey:\n        process.env['ANTHROPIC_API_KEY'] ||\n        (() => {\n          if (process.env['NODE_ENV'] === 'production') {\n            throw new Error(\n              'ANTHROPIC_API_KEY environment variable is required in production'\n            );\n          }\n          return null; // Allow null in development\n        })(),\n      baseUrl: process.env['ANTHROPIC_BASE_URL'] || 'https://api.anthropic.com',\n      timeout: 30000,\n      maxRetries: 3,\n    },\n    openai: {\n      apiKey: process.env['OPENAI_API_KEY'] || null,\n      baseUrl: process.env['OPENAI_BASE_URL'] || 'https://api.openai.com',\n      timeout: 30000,\n    },\n    github: {\n      token: process.env['GITHUB_TOKEN'] || null,\n      baseUrl: process.env['GITHUB_API_URL'] || 'https://api.github.com',\n    },\n    search: {\n      apiKey: process.env['SEARCH_API_KEY'] || null,\n      baseUrl: process.env['SEARCH_BASE_URL'] || null,\n    },\n  },\n\n  // Monitoring and logging\n  monitoring: {\n    dashboard: {\n      port: Number.parseInt(process.env['DASHBOARD_PORT'] || '3456', 10),\n      host: process.env['DASHBOARD_HOST'] || 'localhost',\n      enableMetrics: process.env['ENABLE_METRICS'] !== 'false',\n      metricsInterval: Number.parseInt(\n        process.env['METRICS_INTERVAL'] || '10000',\n        10\n      ),\n    },\n    logging: {\n      level: process.env['LOG_LEVEL'] || 'info',\n      format: process.env['LOG_FORMAT'] || 'json',\n      file: process.env['LOG_FILE'] || './logs/claude-zen.log',\n      enableConsole: process.env['LOG_CONSOLE'] !== 'false',\n      enableFile: process.env['LOG_FILE_ENABLE'] === 'true',\n    },\n    performance: {\n      enableProfiling: process.env['ENABLE_PROFILING'] === 'true',\n      sampleRate: Number.parseFloat(\n        process.env['PROFILE_SAMPLE_RATE'] || '0.1'\n      ),\n      enableTracing: process.env['ENABLE_TRACING'] === 'true',\n    },\n  },\n\n  // Network and connectivity\n  network: {\n    defaultTimeout: Number.parseInt(\n      process.env['DEFAULT_TIMEOUT'] || '30000',\n      10\n    ),\n    maxRetries: Number.parseInt(process.env['MAX_RETRIES'] || '3', 10),\n    retryDelay: Number.parseInt(process.env['RETRY_DELAY'] || '1000', 10),\n    enableKeepAlive: process.env['KEEP_ALIVE'] !== 'false',\n  },\n\n  // Development vs Production settings\n  environment: {\n    isDevelopment: process.env['NODE_ENV'] === 'development',\n    isProduction: process.env['NODE_ENV'] === 'production',\n    isTest: process.env['NODE_ENV'] === 'test',\n    allowUnsafeOperations: process.env['NODE_ENV'] === 'development',\n    enableDebugEndpoints: process.env['NODE_ENV'] !== 'production',\n    strictValidation: process.env['NODE_ENV'] === 'production',\n  },\n\n  neural: {\n    enableWASM: true,\n    enableSIMD: true,\n    enableCUDA: false,\n    modelPath: './data/neural',\n    maxModelSize: 100 * 1024 * 1024, // 100MB\n    enableTraining: false,\n    enableInference: true,\n    backend: 'wasm',\n  },\n\n  optimization: {\n    enablePerformanceMonitoring: true,\n    enableResourceOptimization: true,\n    enableMemoryOptimization: true,\n    enableNetworkOptimization: false,\n    benchmarkInterval: 60000, // 1 minute\n  },\n};\n\n/**\n * Environment variable mappings.\n */\nexport const ENV_MAPPINGS = {\n  // Core\n  CLAUDE_LOG_LEVEL: { path: 'core.logger.level', type: 'string' as const },\n  CLAUDE_LOG_CONSOLE: { path: 'core.logger.console', type: 'boolean' as const },\n  CLAUDE_LOG_FILE: { path: 'core.logger.file', type: 'string' as const },\n  CLAUDE_ENABLE_METRICS: {\n    path: 'core.performance.enableMetrics',\n    type: 'boolean' as const,\n  },\n  CLAUDE_METRICS_INTERVAL: {\n    path: 'core.performance.metricsInterval',\n    type: 'number' as const,\n  },\n\n  // Interfaces\n  CLAUDE_WEB_PORT: { path: 'interfaces.web.port', type: 'number' as const },\n  CLAUDE_WEB_HOST: { path: 'interfaces.web.host', type: 'string' as const },\n  CLAUDE_MCP_PORT: {\n    path: 'interfaces.mcp.http.port',\n    type: 'number' as const,\n  },\n  CLAUDE_MCP_HOST: {\n    path: 'interfaces.mcp.http.host',\n    type: 'string' as const,\n  },\n  CLAUDE_MCP_TIMEOUT: {\n    path: 'interfaces.mcp.http.timeout',\n    type: 'number' as const,\n  },\n\n  // Storage\n  CLAUDE_MEMORY_BACKEND: {\n    path: 'storage.memory.backend',\n    type: 'string' as const,\n  },\n  CLAUDE_MEMORY_DIR: {\n    path: 'storage.memory.directory',\n    type: 'string' as const,\n  },\n  CLAUDE_DB_PATH: {\n    path: 'storage.database.sqlite.path',\n    type: 'string' as const,\n  },\n  CLAUDE_LANCEDB_PATH: {\n    path: 'storage.database.lancedb.path',\n    type: 'string' as const,\n  },\n\n  // Persistence Pool\n  POOL_MAX_READERS: {\n    path: 'storage.database.persistence.maxReaders',\n    type: 'number' as const,\n  },\n  POOL_MAX_WORKERS: {\n    path: 'storage.database.persistence.maxWorkers',\n    type: 'number' as const,\n  },\n  POOL_MMAP_SIZE: {\n    path: 'storage.database.persistence.mmapSize',\n    type: 'number' as const,\n  },\n  POOL_CACHE_SIZE: {\n    path: 'storage.database.persistence.cacheSize',\n    type: 'number' as const,\n  },\n  POOL_ENABLE_BACKUP: {\n    path: 'storage.database.persistence.enableBackup',\n    type: 'boolean' as const,\n  },\n\n  // Coordination\n  CLAUDE_MAX_AGENTS: {\n    path: 'coordination.maxAgents',\n    type: 'number' as const,\n  },\n  CLAUDE_HEARTBEAT_INTERVAL: {\n    path: 'coordination.heartbeatInterval',\n    type: 'number' as const,\n  },\n  CLAUDE_COORDINATION_TIMEOUT: {\n    path: 'coordination.timeout',\n    type: 'number' as const,\n  },\n  CLAUDE_SWARM_TOPOLOGY: {\n    path: 'coordination.topology',\n    type: 'string' as const,\n  },\n\n  // Neural\n  CLAUDE_ENABLE_WASM: { path: 'neural.enableWASM', type: 'boolean' as const },\n  CLAUDE_ENABLE_SIMD: { path: 'neural.enableSIMD', type: 'boolean' as const },\n  CLAUDE_ENABLE_CUDA: { path: 'neural.enableCUDA', type: 'boolean' as const },\n  CLAUDE_NEURAL_BACKEND: { path: 'neural.backend', type: 'string' as const },\n  CLAUDE_MODEL_PATH: { path: 'neural.modelPath', type: 'string' as const },\n\n  // Security\n  CLAUDE_ENABLE_SANDBOX: {\n    path: 'core.security.enableSandbox',\n    type: 'boolean' as const,\n  },\n  CLAUDE_ALLOW_SHELL: {\n    path: 'core.security.allowShellAccess',\n    type: 'boolean' as const,\n  },\n  CLAUDE_TRUSTED_HOSTS: {\n    path: 'core.security.trustedHosts',\n    type: 'array' as const,\n    parser: (value: string) => value.split(',').map((h) => h.trim()),\n  },\n} as const;\n\n/**\n * Configuration validation schema with production safety.\n *\n * @example\n */\nexport interface ConfigValidationSchema {\n  required: string[]; // Required environment variables\n  optional: string[]; // Optional with defaults\n  validation: {\n    [key: string]: (value: unknown) => boolean;\n  };\n  production: {\n    enforced: string[]; // Must be set in production\n    forbidden: string[]; // Cannot be set in production\n    fallbacks: { [key: string]: unknown }; // Safe fallbacks\n  };\n  portRanges: {\n    development: { min: number; max: number };\n    production: { min: number; max: number };\n  };\n}\n\n/**\n * Production-Ready Configuration Validation Rules.\n *\n * Comprehensive validation rule set that defines acceptable values, ranges,\n * and constraints for all system configuration parameters. Includes both\n * development and production-specific validation with automatic fallbacks,\n * conflict detection, and security enforcement.\n *\n * Key Features:\n * - Type validation with enum constraints\n * - Production-specific min/max ranges\n * - Port conflict detection and safe fallbacks\n * - Security-aware defaults for production environments\n * - Adaptive validation based on deployment environment\n *\n * Rule Structure:\n * - `type`: Data type validation (string, number, boolean)\n * - `enum`: Allowed enumeration values\n * - `min`/`max`: Acceptable value ranges\n * - `productionMin`/`productionMax`: Production-specific constraints\n * - `conflictCheck`: Enable port conflict detection\n * - `fallback`: Safe default value when validation fails\n * - `required`: Whether the field is mandatory\n *\n * @example\n * ```typescript\n * import { VALIDATION_RULES } from 'claude-code-zen/config';\n *\n * // Validate a configuration value\n * const portRule = VALIDATION_RULES['interfaces.web.port'];\n * const port = 3456;\n *\n * if (port < portRule.min || port > portRule.max) {\n *   console.error(`Port ${port} is outside valid range ${portRule.min}-${portRule.max}`);\n *   port = portRule.fallback; // Use safe fallback\n * }\n *\n * // Check production constraints\n * if (process.env.NODE_ENV === 'production' && port < portRule.productionMin) {\n *   console.warn(`Port ${port} below production minimum ${portRule.productionMin}`);\n * }\n * ```\n *\n * @const VALIDATION_RULES\n * @see {@link ConfigValidator} - Uses these rules for validation\n * @see {@link PRODUCTION_VALIDATION_SCHEMA} - Production-specific schema\n * @since 1.0.0-alpha.43\n */\nexport const VALIDATION_RULES = {\n  'core.logger.level': {\n    type: 'string',\n    enum: ['debug', 'info', 'warn', 'error'],\n    productionDefault: 'info',\n    required: false,\n  },\n  'interfaces.web.port': {\n    type: 'number',\n    min: 1,\n    max: 65535,\n    productionMin: 3000,\n    productionMax: 65535,\n    conflictCheck: true,\n    fallback: 3456, // Safe fallback different from MCP\n  },\n  'interfaces.mcp.http.port': {\n    type: 'number',\n    min: 1,\n    max: 65535,\n    productionMin: 3000,\n    productionMax: 65535,\n    conflictCheck: true,\n    fallback: 3000, // Primary MCP port\n  },\n  'coordination.maxAgents': {\n    type: 'number',\n    min: 1,\n    max: 1000,\n    productionMax: 100, // More conservative in production\n    required: false,\n    fallback: 10,\n  },\n  'coordination.topology': {\n    type: 'string',\n    enum: ['mesh', 'hierarchical', 'ring', 'star'],\n    productionRecommended: ['hierarchical', 'ring'],\n    fallback: 'hierarchical',\n  },\n  'neural.backend': {\n    type: 'string',\n    enum: ['wasm', 'native', 'fallback'],\n    productionRecommended: ['wasm', 'fallback'],\n    fallback: 'wasm',\n  },\n  'storage.memory.backend': {\n    type: 'string',\n    enum: ['sqlite', 'lancedb', 'json'],\n    productionRecommended: ['sqlite', 'lancedb'],\n    fallback: 'sqlite',\n  },\n  'core.security.enableSandbox': {\n    type: 'boolean',\n    productionRequired: true,\n    fallback: true,\n  },\n  'core.security.allowShellAccess': {\n    type: 'boolean',\n    productionForbidden: true,\n    fallback: false,\n  },\n  // Database constraints\n  'storage.database.sqlite.maxConnections': {\n    type: 'number',\n    min: 1,\n    max: 100,\n    productionMax: 50,\n    fallback: 10,\n  },\n  'storage.memory.maxMemorySize': {\n    type: 'number',\n    min: 1024 * 1024, // 1MB minimum\n    productionMin: 50 * 1024 * 1024, // 50MB minimum in production\n    fallback: 100 * 1024 * 1024, // 100MB default\n  },\n} as const;\n\n/**\n * Production Environment Validation Schema.\n *\n * Comprehensive validation schema specifically designed for production\n * deployments with enhanced security, strict validation rules, and\n * mandatory environment variable requirements. Enforces production\n * best practices and prevents unsafe configurations.\n *\n * Security Features:\n * - Mandatory environment variables for production\n * - Forbidden unsafe configuration options\n * - Automatic fallback to secure defaults\n * - API key validation and presence checking\n * - Port range restrictions for production environments\n *\n * Schema Components:\n * - `required`: Environment variables that must be present\n * - `optional`: Environment variables that are recommended but not mandatory\n * - `validation`: Custom validation functions for each variable\n * - `production.enforced`: Settings that are mandatory in production\n * - `production.forbidden`: Settings that are prohibited in production\n * - `production.fallbacks`: Safe default values for production\n * - `portRanges`: Environment-specific port allocation ranges\n *\n * @example\n * ```typescript\n * import { PRODUCTION_VALIDATION_SCHEMA } from 'claude-code-zen/config';\n *\n * // Validate production environment\n * const isValid = PRODUCTION_VALIDATION_SCHEMA.validation.NODE_ENV('production');\n * console.log('Valid NODE_ENV:', isValid); // true\n *\n * // Check API key requirement\n * if (process.env.NODE_ENV === 'production') {\n *   const hasValidKey = PRODUCTION_VALIDATION_SCHEMA.validation.ANTHROPIC_API_KEY(\n *     process.env.ANTHROPIC_API_KEY\n *   );\n *   if (!hasValidKey) {\n *     throw new Error('ANTHROPIC_API_KEY is required in production');\n *   }\n * }\n *\n * // Get production fallbacks\n * const fallbacks = PRODUCTION_VALIDATION_SCHEMA.production.fallbacks;\n * console.log('Safe port fallback:', fallbacks['interfaces.web.port']); // 3456\n * ```\n *\n * @const PRODUCTION_VALIDATION_SCHEMA\n * @see {@link ConfigValidationSchema} - Schema type definition\n * @see {@link VALIDATION_RULES} - General validation rules\n * @since 1.0.0-alpha.43\n */\nexport const PRODUCTION_VALIDATION_SCHEMA: ConfigValidationSchema = {\n  required: ['NODE_ENV'],\n  optional: [\n    'CLAUDE_WEB_PORT',\n    'CLAUDE_MCP_PORT',\n    'CLAUDE_LOG_LEVEL',\n    'CLAUDE_MAX_AGENTS',\n  ],\n  validation: {\n    NODE_ENV: (value: unknown) =>\n      typeof value === 'string' && ['production', 'development', 'test'].includes(value),\n    ANTHROPIC_API_KEY: (value: unknown) =>\n      process.env['NODE_ENV'] === 'production'\n        ? typeof value === 'string' && !!value && value.length > 10\n        : true,\n    CLAUDE_WEB_PORT: (value: unknown) => {\n      if (typeof value !== 'string') return false;\n      const port = Number.parseInt(value, 10);\n      return !isNaN(port) && port >= 3000 && port <= 65535;\n    },\n    CLAUDE_MCP_PORT: (value: unknown) => {\n      if (typeof value !== 'string') return false;\n      const port = Number.parseInt(value, 10);\n      return !isNaN(port) && port >= 3000 && port <= 65535;\n    },\n  },\n  production: {\n    enforced: [\n      'core.security.enableSandbox',\n      'core.logger.level',\n      'environment.strictValidation',\n    ],\n    forbidden: [\n      'core.security.allowShellAccess',\n      'environment.allowUnsafeOperations',\n      'environment.enableDebugEndpoints',\n    ],\n    fallbacks: {\n      'core.logger.level': 'info',\n      'core.security.enableSandbox': true,\n      'core.security.allowShellAccess': false,\n      'interfaces.web.port': 3456,\n      'interfaces.mcp.http.port': 3000,\n      'coordination.maxAgents': 10,\n      'coordination.topology': 'hierarchical',\n      'storage.memory.backend': 'sqlite',\n      'neural.backend': 'wasm',\n    },\n  },\n  portRanges: {\n    development: { min: 3000, max: 9999 },\n    production: { min: 3000, max: 65535 },\n  },\n};\n\n/**\n * Default Port Allocation Strategy.\n *\n * Carefully planned port allocation strategy designed to prevent conflicts\n * between different system components. Provides a stable, predictable port\n * assignment scheme that works across development, testing, and production\n * environments while avoiding common port conflicts.\n *\n * Port Assignment Philosophy:\n * - Primary services get well-known, memorable ports\n * - Sequential allocation for related services\n * - Gaps between service groups to allow expansion\n * - Avoids system ports (< 1024) and common application ports\n * - Compatible with firewall rules and load balancer configurations\n *\n * Service Port Mapping:\n * - `3000`: MCP HTTP Server (primary Claude integration)\n * - `3456`: Web Dashboard (administrative interface)\n * - `3457`: Monitoring Dashboard (metrics and health)\n * - `3001`: Development Server (when needed)\n * - `3002`: Backup/Failover Port (high availability)\n *\n * @example\n * ```typescript\n * import { DEFAULT_PORT_ALLOCATION } from 'claude-code-zen/config';\n *\n * // Get assigned port for a service\n * const mcpPort = DEFAULT_PORT_ALLOCATION['interfaces.mcp.http.port'];\n * console.log('MCP server will run on port:', mcpPort); // 3000\n *\n * // Check for conflicts before starting services\n * const webPort = DEFAULT_PORT_ALLOCATION['interfaces.web.port'];\n * const monitorPort = DEFAULT_PORT_ALLOCATION['monitoring.dashboard.port'];\n *\n * if (webPort === monitorPort) {\n *   throw new Error('Port conflict detected!');\n * }\n *\n * // Use in server configuration\n * const serverConfig = {\n *   mcp: { port: DEFAULT_PORT_ALLOCATION['interfaces.mcp.http.port'] },\n *   web: { port: DEFAULT_PORT_ALLOCATION['interfaces.web.port'] },\n *   monitoring: { port: DEFAULT_PORT_ALLOCATION['monitoring.dashboard.port'] }\n * };\n * ```\n *\n * @const DEFAULT_PORT_ALLOCATION\n * @see {@link PORT_ALLOCATION_BY_ENV} - Environment-specific overrides\n * @see {@link VALIDATION_RULES} - Port validation rules\n * @since 1.0.0-alpha.43\n */\nexport const DEFAULT_PORT_ALLOCATION = {\n  'interfaces.mcp.http.port': 3000, // Primary MCP server\n  'interfaces.web.port': 3456, // Web dashboard\n  'monitoring.dashboard.port': 3457, // Monitoring dashboard\n  'development.port': 3001, // Development server if needed\n  'backup.port': 3002, // Backup/failover port\n} as const;\n\n/**\n * Environment-Specific Port Allocation Overrides.\n *\n * Environment-aware port allocation that provides different port assignments\n * for development, production, and testing environments. Allows for isolation\n * between environments while maintaining service functionality and preventing\n * conflicts when multiple environments run on the same system.\n *\n * Environment Strategy:\n * - **Development**: Standard ports for easy access and debugging\n * - **Production**: Environment variable override support with fallbacks\n * - **Testing**: Offset ports to avoid conflicts with development services\n *\n * Port Environment Mapping:\n * - Development: 3000, 3456, 3457 (standard allocation)\n * - Production: Environment variable driven with same fallbacks\n * - Testing: 3100, 3556, 3557 (offset by +100/+100/+100)\n *\n * Environment Variables:\n * - `CLAUDE_MCP_PORT`: Override MCP server port in production\n * - `CLAUDE_WEB_PORT`: Override web dashboard port in production\n * - `CLAUDE_MONITOR_PORT`: Override monitoring dashboard port in production\n *\n * @example\n * ```typescript\n * import { PORT_ALLOCATION_BY_ENV } from 'claude-code-zen/config';\n *\n * const env = process.env.NODE_ENV || 'development';\n * const ports = PORT_ALLOCATION_BY_ENV[env];\n *\n * // Get environment-specific port\n * const mcpPort = ports['interfaces.mcp.http.port'];\n * console.log(`MCP server port for ${env}:`, mcpPort);\n *\n * // Start services with environment-appropriate ports\n * const config = {\n *   environment: env,\n *   services: {\n *     mcp: { port: ports['interfaces.mcp.http.port'] },\n *     web: { port: ports['interfaces.web.port'] },\n *     monitoring: { port: ports['monitoring.dashboard.port'] }\n *   }\n * };\n *\n * // Production example with environment variables\n * // CLAUDE_MCP_PORT=8080 CLAUDE_WEB_PORT=8081 npm start\n * if (env === 'production') {\n *   console.log('Production ports can be overridden via environment variables');\n * }\n * ```\n *\n * @const PORT_ALLOCATION_BY_ENV\n * @see {@link DEFAULT_PORT_ALLOCATION} - Base port allocation strategy\n * @see {@link VALIDATION_RULES} - Port validation and conflict checking\n * @since 1.0.0-alpha.43\n */\nexport const PORT_ALLOCATION_BY_ENV = {\n  development: {\n    'interfaces.mcp.http.port': 3000,\n    'interfaces.web.port': 3456,\n    'monitoring.dashboard.port': 3457,\n  },\n  production: {\n    'interfaces.mcp.http.port': Number.parseInt(\n      process.env['CLAUDE_MCP_PORT'] || '3000',\n      10\n    ),\n    'interfaces.web.port': Number.parseInt(\n      process.env['CLAUDE_WEB_PORT'] || '3456',\n      10\n    ),\n    'monitoring.dashboard.port': Number.parseInt(\n      process.env['CLAUDE_MONITOR_PORT'] || '3457',\n      10\n    ),\n  },\n  test: {\n    'interfaces.mcp.http.port': 3100,\n    'interfaces.web.port': 3556,\n    'monitoring.dashboard.port': 3557,\n  },\n} as const;\n\n/**\n * URL Builder Configuration and Utilities.\n *\n * Comprehensive URL construction system consolidated from url-builder.ts.\n * Provides type-safe, environment-aware URL building capabilities for\n * all system services including MCP servers, web dashboards, monitoring\n * endpoints, and API routes.\n *\n * Features:\n * - Protocol-aware URL construction (HTTP/HTTPS)\n * - Environment-specific host and port resolution\n * - Path normalization and query parameter handling\n * - Service-specific URL builders with validation\n * - Development vs production URL differences\n *\n * @since 1.0.0-alpha.43\n */\n\n/**\n * URL Builder Configuration Interface.\n *\n * Defines the configuration options for URL construction including protocol\n * selection, host specification, port assignment, and path configuration.\n * Used by URLBuilder class and service-specific URL generation functions.\n *\n * @example\n * ```typescript\n * import type { URLBuilderConfig } from 'claude-code-zen/config';\n *\n * const config: URLBuilderConfig = {\n *   protocol: 'https',\n *   host: 'api.example.com',\n *   port: 443,\n *   path: '/v1/mcp'\n * };\n *\n * // Used with URLBuilder\n * const builder = new URLBuilder(systemConfig);\n * const url = builder.buildURL('mcp', config);\n * ```\n *\n * @interface URLBuilderConfig\n * @see {@link URLBuilder} - URL builder class implementation\n * @since 1.0.0-alpha.43\n */\nexport interface URLBuilderConfig {\n  protocol?: 'http' | 'https';\n  host?: string;\n  port?: number;\n  path?: string;\n}\n\nexport class URLBuilder {\n  private config: SystemConfiguration;\n\n  constructor(config: SystemConfiguration = DEFAULT_CONFIG) {\n    this.config = config;\n  }\n\n  /**\n   * Build HTTP MCP server URL.\n   *\n   * @param overrides\n   */\n  getMCPServerURL(overrides: Partial<URLBuilderConfig> = {}): string {\n    const protocol = overrides.protocol || this.getProtocol();\n    const host = overrides.host || this.config.interfaces.mcp.http.host;\n    const port = overrides.port || this.config.interfaces.mcp.http.port;\n    const path = overrides.path || '';\n\n    return this.buildURL(protocol, host, port, path);\n  }\n\n  /**\n   * Build web dashboard URL.\n   *\n   * @param overrides\n   */\n  getWebDashboardURL(overrides: Partial<URLBuilderConfig> = {}): string {\n    const protocol = overrides.protocol || this.getProtocol();\n    const host = overrides.host || this.config.interfaces.web.host;\n    const port = overrides.port || this.config.interfaces.web.port;\n    const path = overrides.path || '';\n\n    return this.buildURL(protocol, host, port, path);\n  }\n\n  /**\n   * Build monitoring dashboard URL.\n   *\n   * @param overrides\n   */\n  getMonitoringDashboardURL(overrides: Partial<URLBuilderConfig> = {}): string {\n    const protocol = overrides.protocol || this.getProtocol();\n    const host = overrides.host || this.config.monitoring.dashboard.host;\n    const port = overrides.port || this.config.monitoring.dashboard.port;\n    const path = overrides.path || '';\n\n    return this.buildURL(protocol, host, port, path);\n  }\n\n  /**\n   * Build CORS origins array.\n   */\n  getCORSOrigins(): string[] {\n    const protocol = this.getProtocol();\n    const mcpURL = this.getMCPServerURL({ protocol });\n    const webURL = this.getWebDashboardURL({ protocol });\n    const monitoringURL = this.getMonitoringDashboardURL({ protocol });\n    const configuredOrigins = this.config.interfaces.web.corsOrigins || [];\n\n    const updatedOrigins = configuredOrigins.map((origin) => {\n      if (origin.includes('localhost') && !origin.startsWith('http')) {\n        return `${protocol}://${origin}`;\n      }\n      if (origin.startsWith('http://localhost') && protocol === 'https') {\n        return origin.replace('http://', 'https://');\n      }\n      return origin;\n    });\n\n    const allOrigins = [...updatedOrigins, mcpURL, webURL, monitoringURL];\n    return Array.from(new Set(allOrigins));\n  }\n\n  /**\n   * Get service base URL.\n   *\n   * @param service\n   * @param overrides\n   */\n  getServiceBaseURL(\n    service: 'mcp' | 'web' | 'monitoring',\n    overrides: Partial<URLBuilderConfig> = {}\n  ): string {\n    switch (service) {\n      case 'mcp':\n        return this.getMCPServerURL(overrides);\n      case 'web':\n        return this.getWebDashboardURL(overrides);\n      case 'monitoring':\n        return this.getMonitoringDashboardURL(overrides);\n      default:\n        throw new Error(`Unknown service: ${service}`);\n    }\n  }\n\n  /**\n   * Build a URL from components.\n   *\n   * @param protocol\n   * @param host\n   * @param port\n   * @param path\n   */\n  private buildURL(\n    protocol: string,\n    host: string,\n    port: number,\n    path: string\n  ): string {\n    const shouldOmitPort =\n      (protocol === 'http' && port === 80) ||\n      (protocol === 'https' && port === 443);\n\n    const portPart = shouldOmitPort ? '' : `:${port}`;\n    const pathPart = path.startsWith('/') ? path : `/${path}`;\n    const cleanPath = path === '' ? '' : pathPart;\n\n    return `${protocol}://${host}${portPart}${cleanPath}`;\n  }\n\n  /**\n   * Get protocol based on environment and configuration.\n   */\n  private getProtocol(): 'http' | 'https' {\n    if (process.env['FORCE_HTTPS'] === 'true') {\n      return 'https';\n    }\n    if (process.env['FORCE_HTTP'] === 'true') {\n      return 'http';\n    }\n    if (this.config.interfaces.web.enableHttps) {\n      return 'https';\n    }\n    return this.config.environment.isProduction ? 'https' : 'http';\n  }\n\n  /**\n   * Update configuration.\n   *\n   * @param config\n   */\n  updateConfig(config: SystemConfiguration): void {\n    this.config = config;\n  }\n}\n\n/**\n * Default URL builder instance using default configuration.\n */\nexport const defaultURLBuilder = new URLBuilder();\n\n/**\n * Create URL builder with custom configuration.\n *\n * @param config\n */\nexport const createURLBuilder = (config: SystemConfiguration): URLBuilder => {\n  return new URLBuilder(config);\n};\n\n/**\n * Convenience functions using default builder.\n *\n * @param overrides\n */\nexport const getMCPServerURL = (overrides?: Partial<URLBuilderConfig>) =>\n  defaultURLBuilder.getMCPServerURL(overrides);\n\nexport const getWebDashboardURL = (overrides?: Partial<URLBuilderConfig>) =>\n  defaultURLBuilder.getWebDashboardURL(overrides);\n\nexport const getMonitoringDashboardURL = (\n  overrides?: Partial<URLBuilderConfig>\n) => defaultURLBuilder.getMonitoringDashboardURL(overrides);\n\nexport const getCORSOrigins = () => defaultURLBuilder.getCORSOrigins();\n", "/**\n * @file Configuration Validator.\n *\n * Validates configuration against schema and provides detailed error reporting.\n */\n\nimport { VALIDATION_RULES } from './defaults.ts';\nimport type {\n  ConfigValidationResult,\n  SystemConfiguration,\n  ValidationResult,\n} from './types.ts';\n\n/**\n * Configuration validator.\n *\n * @example\n */\nexport class ConfigValidator {\n  /**\n   * Validate configuration object.\n   *\n   * @param config\n   */\n  validate(config: SystemConfiguration): ConfigValidationResult {\n    const errors: string[] = [];\n    const warnings: string[] = [];\n\n    try {\n      // Validate structure\n      this.validateStructure(config, errors);\n\n      // Validate specific rules\n      this.validateRules(config, errors, warnings);\n\n      // Validate dependencies\n      this.validateDependencies(config, errors, warnings);\n\n      // Validate ranges and constraints\n      this.validateConstraints(config, errors, warnings);\n    } catch (error) {\n      errors.push(`Validation error: ${error}`);\n    }\n\n    return {\n      valid: errors.length === 0,\n      errors,\n      warnings,\n    };\n  }\n\n  /**\n   * Validate basic structure.\n   *\n   * @param config\n   * @param errors\n   */\n  private validateStructure(\n    config: SystemConfiguration,\n    errors: string[]\n  ): void {\n    const requiredSections = [\n      'core',\n      'interfaces',\n      'storage',\n      'coordination',\n      'neural',\n      'optimization',\n    ];\n\n    for (const section of requiredSections) {\n      if (!config?.[section as keyof SystemConfiguration]) {\n        errors.push(`Missing required configuration section: ${section}`);\n      }\n    }\n\n    // Validate core subsections\n    if (config?.core) {\n      if (!config?.core?.logger) {\n        errors.push('Missing core.logger configuration');\n      }\n      if (!config?.core?.performance) {\n        errors.push('Missing core.performance configuration');\n      }\n      if (!config?.core?.security) {\n        errors.push('Missing core.security configuration');\n      }\n    }\n\n    // Validate interfaces subsections\n    if (config?.interfaces) {\n      const requiredInterfaces = ['shared', 'terminal', 'web', 'mcp'];\n      for (const iface of requiredInterfaces) {\n        if (!config?.interfaces?.[iface as keyof typeof config.interfaces]) {\n          errors.push(`Missing interfaces.${iface} configuration`);\n        }\n      }\n    }\n\n    // Validate storage subsections\n    if (config?.storage) {\n      if (!config?.storage?.memory) {\n        errors.push('Missing storage.memory configuration');\n      }\n      if (!config?.storage?.database) {\n        errors.push('Missing storage.database configuration');\n      }\n    }\n  }\n\n  /**\n   * Validate against specific rules.\n   *\n   * @param config\n   * @param errors\n   * @param warnings\n   */\n  private validateRules(\n    config: SystemConfiguration,\n    errors: string[],\n    warnings: string[]\n  ): void {\n    for (const [path, rule] of Object.entries(VALIDATION_RULES)) {\n      const value = this.getNestedValue(config as any, path);\n\n      if (value === undefined) {\n        warnings.push(`Optional configuration missing: ${path}`);\n        continue;\n      }\n\n      // Type validation\n      if (rule.type === 'string' && typeof value !== 'string') {\n        errors.push(`${path} must be a string, got ${typeof value}`);\n        continue;\n      }\n\n      if (rule.type === 'number' && typeof value !== 'number') {\n        errors.push(`${path} must be a number, got ${typeof value}`);\n        continue;\n      }\n\n      // Boolean validation (if rule supports boolean type)\n      if (\n        'type' in rule &&\n        rule.type &&\n        (rule.type as string) === 'boolean' &&\n        typeof value !== 'boolean'\n      ) {\n        errors.push(`${path} must be a boolean, got ${typeof value}`);\n        continue;\n      }\n\n      // Enum validation\n      if ('enum' in rule && rule.enum && Array.isArray(rule.enum)) {\n        if (!rule.enum.includes(value as never)) {\n          errors.push(\n            `${path} must be one of: ${rule.enum.join(', ')}, got ${value}`\n          );\n        }\n      }\n\n      // Range validation\n      if (rule.type === 'number' && typeof value === 'number') {\n        if ('min' in rule && rule.min !== undefined && value < rule.min) {\n          errors.push(`${path} must be >= ${rule.min}, got ${value}`);\n        }\n        if ('max' in rule && rule.max !== undefined && value > rule.max) {\n          errors.push(`${path} must be <= ${rule.max}, got ${value}`);\n        }\n      }\n    }\n  }\n\n  /**\n   * Validate configuration dependencies.\n   *\n   * @param config\n   * @param errors\n   * @param warnings\n   */\n  private validateDependencies(\n    config: SystemConfiguration,\n    errors: string[],\n    warnings: string[]\n  ): void {\n    // Web interface dependencies\n    if (\n      config?.interfaces?.web?.enableHttps &&\n      !config?.interfaces?.web?.corsOrigins\n    ) {\n      warnings.push('HTTPS enabled but no CORS origins configured');\n    }\n\n    // Neural network dependencies\n    if (config?.neural?.enableCUDA && !config?.neural?.enableWASM) {\n      warnings.push('CUDA enabled without WASM - may not be supported');\n    }\n\n    // Database dependencies\n    if (\n      config?.storage?.memory?.backend === 'lancedb' &&\n      !config?.storage?.database?.lancedb\n    ) {\n      errors.push('LanceDB backend selected but lancedb configuration missing');\n    }\n\n    // MCP tool dependencies\n    if (\n      config?.interfaces?.mcp?.tools?.enableAll &&\n      config?.interfaces?.mcp?.tools?.disabledTools?.length > 0\n    ) {\n      warnings.push('enableAll is true but some tools are disabled');\n    }\n\n    // Security dependencies\n    if (\n      !config?.core?.security?.enableSandbox &&\n      config?.core?.security?.allowShellAccess\n    ) {\n      warnings.push('Shell access enabled without sandbox - security risk');\n    }\n\n    // Performance dependencies\n    if (\n      config?.core?.performance?.enableProfiling &&\n      !config?.core?.performance?.enableMetrics\n    ) {\n      warnings.push(\n        'Profiling enabled without metrics - limited functionality'\n      );\n    }\n  }\n\n  /**\n   * Validate constraints and logical consistency.\n   *\n   * @param config\n   * @param errors\n   * @param warnings\n   */\n  private validateConstraints(\n    config: SystemConfiguration,\n    errors: string[],\n    warnings: string[]\n  ): void {\n    // Port conflicts\n    const ports = [\n      config?.interfaces?.web?.port,\n      config?.interfaces?.mcp?.http?.port,\n    ].filter(Boolean);\n\n    const uniquePorts = new Set(ports);\n    if (ports.length !== uniquePorts.size) {\n      errors.push(\n        'Port conflicts detected - multiple services cannot use the same port'\n      );\n    }\n\n    // Memory constraints\n    if (\n      config?.storage?.memory?.maxMemorySize &&\n      config?.storage?.memory?.cacheSize\n    ) {\n      if (\n        config?.storage?.memory?.cacheSize >\n        config?.storage?.memory?.maxMemorySize\n      ) {\n        errors.push('Cache size cannot be larger than max memory size');\n      }\n    }\n\n    // Agent constraints\n    if (\n      config?.coordination?.maxAgents &&\n      config?.coordination?.maxAgents > 1000\n    ) {\n      warnings.push('Very high agent count may impact performance');\n    }\n\n    // Timeout constraints\n    const timeouts = [\n      config?.interfaces?.terminal?.timeout,\n      config?.interfaces?.mcp?.http?.timeout,\n      config?.coordination?.timeout,\n    ].filter(Boolean);\n\n    for (const timeout of timeouts) {\n      if (timeout < 1000) {\n        warnings.push(`Very low timeout value (${timeout}ms) may cause issues`);\n      }\n      if (timeout > 300000) {\n        // 5 minutes\n        warnings.push(`Very high timeout value (${timeout}ms) may cause hangs`);\n      }\n    }\n\n    // Directory constraints\n    const directories = [\n      config?.storage?.memory?.directory,\n      config?.storage?.database?.sqlite?.path,\n      config?.storage?.database?.lancedb?.path,\n      config?.neural?.modelPath,\n    ].filter(Boolean);\n\n    for (const dir of directories) {\n      if (dir.includes('..')) {\n        warnings.push(\n          `Directory path contains '..' - potential security risk: ${dir}`\n        );\n      }\n    }\n  }\n\n  /**\n   * Get nested value using dot notation.\n   *\n   * @param obj\n   * @param path\n   */\n  private getNestedValue(obj: Record<string, unknown>, path: string): unknown {\n    return path\n      .split('.')\n      .reduce((current: unknown, key) => current?.[key], obj);\n  }\n\n  /**\n   * Validate specific configuration section.\n   *\n   * @param _config\n   * @param section\n   */\n  validateSection(\n    _config: SystemConfiguration,\n    section: string\n  ): ConfigValidationResult {\n    const errors: string[] = [];\n    const warnings: string[] = [];\n\n    // Get rules for this section\n    const sectionRules = Object.entries(VALIDATION_RULES).filter(([path]) =>\n      path.startsWith(`${section}.`)\n    );\n\n    for (const [_path, _rule] of sectionRules) {\n      // Apply validation rules...\n      // (Implementation similar to validateRules but scoped to section)\n    }\n\n    return {\n      valid: errors.length === 0,\n      errors,\n      warnings,\n    };\n  }\n\n  /**\n   * Enhanced validation with production readiness check.\n   *\n   * @param config - System configuration to validate.\n   * @returns Enhanced validation result with production readiness details.\n   */\n  validateEnhanced(config: SystemConfiguration): ValidationResult {\n    const basicResult = this.validate(config);\n\n    const securityIssues: string[] = [];\n    const portConflicts: string[] = [];\n    const performanceWarnings: string[] = [];\n    const failsafeApplied: string[] = [];\n\n    // Check security issues\n    if (\n      !config?.core?.security?.enableSandbox &&\n      config?.core?.security?.allowShellAccess\n    ) {\n      securityIssues.push('Shell access enabled without sandbox protection');\n    }\n\n    if (config?.core?.security?.trustedHosts?.length === 0) {\n      securityIssues.push('No trusted hosts configured for security');\n    }\n\n    // Check port conflicts\n    const ports = [\n      config?.interfaces?.web?.port,\n      config?.interfaces?.mcp?.http?.port,\n      config?.monitoring?.dashboard?.port,\n    ].filter((port): port is number => typeof port === 'number');\n\n    const uniquePorts = new Set(ports);\n    if (ports.length !== uniquePorts.size) {\n      portConflicts.push('Multiple services configured to use the same port');\n    }\n\n    // Check performance warnings\n    if (\n      config?.coordination?.maxAgents &&\n      config?.coordination?.maxAgents > 1000\n    ) {\n      performanceWarnings.push('High agent count may impact performance');\n    }\n\n    if (config?.core?.logger?.level === 'debug') {\n      performanceWarnings.push(\n        'Debug logging enabled - may impact performance'\n      );\n    }\n\n    // Check production readiness\n    const productionReady =\n      basicResult?.valid &&\n      securityIssues.length === 0 &&\n      portConflicts.length === 0 &&\n      config?.core?.security?.enableSandbox === true;\n\n    const result: ValidationResult = {\n      valid: basicResult?.valid,\n      errors: basicResult?.errors,\n      warnings: basicResult?.warnings,\n      productionReady,\n      securityIssues,\n      portConflicts,\n      performanceWarnings,\n      failsafeApplied,\n    };\n\n    return result;\n  }\n\n  /**\n   * Get configuration health report.\n   *\n   * @param config\n   */\n  getHealthReport(config: SystemConfiguration): {\n    status: 'healthy' | 'warning' | 'critical';\n    score: number;\n    details: {\n      structure: boolean;\n      security: boolean;\n      performance: boolean;\n      production: boolean;\n    };\n    recommendations: string[];\n  } {\n    const result = this.validateEnhanced(config);\n    const recommendations: string[] = [];\n\n    // Calculate health scores\n    const structureScore =\n      result?.errors.length === 0\n        ? 100\n        : Math.max(0, 100 - result?.errors.length * 10);\n    const securityScore =\n      result?.securityIssues.length === 0\n        ? 100\n        : Math.max(0, 100 - result?.securityIssues.length * 20);\n    const performanceScore =\n      result?.performanceWarnings.length === 0\n        ? 100\n        : Math.max(0, 100 - result?.performanceWarnings.length * 5);\n    const productionScore = result?.productionReady ? 100 : 50;\n\n    const overallScore =\n      (structureScore + securityScore + performanceScore + productionScore) / 4;\n\n    // Generate recommendations\n    if (result?.errors.length > 0) {\n      recommendations.push('Fix configuration errors before deployment');\n    }\n    if (result?.securityIssues.length > 0) {\n      recommendations.push('Address security issues for production deployment');\n    }\n    if (result?.portConflicts.length > 0) {\n      recommendations.push('Resolve port conflicts between services');\n    }\n    if (result?.performanceWarnings.length > 0) {\n      recommendations.push('Review performance configuration for optimization');\n    }\n\n    const status =\n      overallScore >= 90\n        ? 'healthy'\n        : overallScore >= 70\n          ? 'warning'\n          : 'critical';\n\n    return {\n      status,\n      score: Math.round(overallScore),\n      details: {\n        structure: result?.errors.length === 0,\n        security: result?.securityIssues.length === 0,\n        performance: result?.performanceWarnings.length < 3,\n        production: result?.productionReady,\n      },\n      recommendations,\n    };\n  }\n}\n", "/**\n * @file Configuration Loader.\n *\n * Handles loading configuration from multiple sources with proper priority.\n */\n\nimport { getLogger } from './logging-config.ts';\n\nconst logger = getLogger('ConfigLoader');\n\nimport * as fs from 'node:fs';\nimport * as path from 'node:path';\nimport { DEFAULT_CONFIG, ENV_MAPPINGS } from './defaults.ts';\nimport type {\n  ConfigurationSource,\n  ConfigValidationResult,\n  SystemConfiguration,\n} from './types.ts';\nimport { ConfigValidator } from './validator.ts';\n\n/**\n * Configuration loader with multi-source support.\n *\n * @example\n */\nexport class ConfigurationLoader {\n  private sources: ConfigurationSource[] = [];\n  private validator = new ConfigValidator();\n\n  /**\n   * Load configuration from all sources.\n   *\n   * @param configPaths\n   */\n  async loadConfiguration(configPaths?: string[]): Promise<{\n    config: SystemConfiguration;\n    validation: ConfigValidationResult;\n  }> {\n    // Clear existing sources\n    this.sources = [];\n\n    // 1. Load defaults (lowest priority)\n    this.addSource({\n      type: 'defaults',\n      priority: 0,\n      data: DEFAULT_CONFIG,\n    });\n\n    // 2. Load from config files\n    const defaultPaths = [\n      './config/claude-zen.json',\n      './claude-zen.config.json',\n      '~/.claude-zen/config.json',\n      '/etc/claude-zen/config.json',\n    ];\n\n    const pathsToTry = configPaths || defaultPaths;\n    for (const configPath of pathsToTry) {\n      await this.loadFromFile(configPath);\n    }\n\n    // 3. Load from environment variables (higher priority)\n    this.loadFromEnvironment();\n\n    // 4. Load from CLI arguments (highest priority)\n    this.loadFromCliArgs();\n\n    // Merge all sources by priority\n    const mergedConfig = this.mergeSources();\n\n    // Validate the final configuration\n    const validation = this.validator.validate(mergedConfig);\n\n    return {\n      config: mergedConfig,\n      validation,\n    };\n  }\n\n  /**\n   * Add a configuration source.\n   *\n   * @param source\n   */\n  private addSource(source: ConfigurationSource): void {\n    this.sources.push(source);\n    // Sort by priority (higher numbers override lower)\n    this.sources.sort((a, b) => a.priority - b.priority);\n  }\n\n  /**\n   * Load configuration from file.\n   *\n   * @param filePath\n   */\n  private async loadFromFile(filePath: string): Promise<void> {\n    try {\n      const resolvedPath = path.resolve(\n        filePath.replace('~', process.env['HOME'] || '~')\n      );\n\n      if (!fs.existsSync(resolvedPath)) {\n        return;\n      }\n\n      const content = fs.readFileSync(resolvedPath, 'utf8');\n      let data: Partial<SystemConfiguration>;\n\n      if (filePath.endsWith('.json')) {\n        data = JSON.parse(content);\n      } else if (filePath.endsWith('.js') || filePath.endsWith('.ts')) {\n        // Dynamic import for JS/TS config files\n        const module = await import(resolvedPath);\n        data = module.default || module;\n      } else {\n        logger.warn(`Unsupported config file format: ${filePath}`);\n        return;\n      }\n\n      this.addSource({\n        type: 'file',\n        priority: 10,\n        data,\n      });\n    } catch (error) {\n      logger.warn(`Failed to load config from ${filePath}:`, error);\n    }\n  }\n\n  /**\n   * Load configuration from environment variables.\n   */\n  private loadFromEnvironment(): void {\n    const envConfig: Partial<SystemConfiguration> = {};\n\n    for (const [envVar, mapping] of Object.entries(ENV_MAPPINGS)) {\n      const value = process.env[envVar];\n      if (value !== undefined) {\n        let parsedValue: unknown = value;\n\n        // Parse value based on type\n        switch (mapping.type) {\n          case 'number':\n            parsedValue = Number(value);\n            if (Number.isNaN(parsedValue)) {\n              logger.warn(`Invalid number value for ${envVar}: ${value}`);\n              continue;\n            }\n            break;\n          case 'boolean':\n            parsedValue = value.toLowerCase() === 'true' || value === '1';\n            break;\n          case 'array':\n            if (mapping.parser) {\n              parsedValue = mapping.parser(value);\n            } else {\n              parsedValue = value.split(',').map((v) => v.trim());\n            }\n            break;\n          default:\n            parsedValue = value;\n            break;\n        }\n\n        // Set nested property\n        this.setNestedProperty(envConfig, mapping.path, parsedValue);\n      }\n    }\n\n    if (Object.keys(envConfig).length > 0) {\n      this.addSource({\n        type: 'env',\n        priority: 20,\n        data: envConfig,\n      });\n    }\n  }\n\n  /**\n   * Load configuration from CLI arguments.\n   */\n  private loadFromCliArgs(): void {\n    const args = process.argv.slice(2);\n    const cliConfig: Partial<SystemConfiguration> = {};\n\n    for (let i = 0; i < args.length; i++) {\n      const arg = args[i];\n\n      if (arg?.startsWith('--config.')) {\n        const configPath = arg.substring(9); // Remove '--config.'\n        const value = args[i + 1];\n\n        if (value && !value.startsWith('--')) {\n          let parsedValue: unknown = value;\n\n          // Try to parse as JSON for complex values\n          if (value.startsWith('{') || value.startsWith('[')) {\n            try {\n              parsedValue = JSON.parse(value);\n            } catch {\n              // Keep as string if JSON parsing fails\n            }\n          } else if (value === 'true' || value === 'false') {\n            parsedValue = value === 'true';\n          } else if (!Number.isNaN(Number(value))) {\n            parsedValue = Number(value);\n          }\n\n          this.setNestedProperty(cliConfig, configPath, parsedValue);\n          i++; // Skip the next argument as it's the value\n        }\n      }\n    }\n\n    if (Object.keys(cliConfig).length > 0) {\n      this.addSource({\n        type: 'cli',\n        priority: 30,\n        data: cliConfig,\n      });\n    }\n  }\n\n  /**\n   * Merge all configuration sources by priority.\n   */\n  private mergeSources(): SystemConfiguration {\n    let mergedConfig = JSON.parse(JSON.stringify(DEFAULT_CONFIG));\n\n    for (const source of this.sources) {\n      mergedConfig = this.deepMerge(mergedConfig, source.data);\n    }\n\n    return mergedConfig;\n  }\n\n  /**\n   * Deep merge two objects.\n   *\n   * @param target\n   * @param source\n   */\n  private deepMerge(target: unknown, source: unknown): unknown {\n    const result = { ...(target as any) };\n\n    for (const key in (source as any)) {\n      if (\n        (source as any)[key] &&\n        typeof (source as any)[key] === 'object' &&\n        !Array.isArray((source as any)[key])\n      ) {\n        result[key] = this.deepMerge((result as any)?.[key] || {}, (source as any)[key]);\n      } else {\n        result[key] = (source as any)[key];\n      }\n    }\n\n    return result;\n  }\n\n  /**\n   * Set nested property using dot notation.\n   *\n   * @param obj\n   * @param path\n   * @param value\n   */\n  private setNestedProperty(obj: unknown, path: string, value: unknown): void {\n    const parts = path.split('.');\n    let current = obj;\n\n    for (let i = 0; i < parts.length - 1; i++) {\n      const part = parts[i];\n      if (part && (!(part in (current as any)) || typeof (current as any)?.[part] !== 'object')) {\n        (current as any)[part] = {};\n      }\n      if (part) {\n        current = (current as any)?.[part];\n      }\n    }\n\n    const lastPart = parts[parts.length - 1];\n    if (lastPart) {\n      (current as any)[lastPart] = value;\n    }\n  }\n\n  /**\n   * Get configuration sources for debugging.\n   */\n  getSources(): ConfigurationSource[] {\n    return [...this.sources];\n  }\n}\n", "/**\n * @file Unified Configuration Manager.\n *\n * Central configuration management with hot-reloading, validation, and event system.\n */\n\nimport { getLogger } from './logging-config.ts';\n\nconst logger = getLogger('src-config-manager');\n\nimport { EventEmitter } from 'node:events';\nimport * as fs from 'node:fs';\nimport * as path from 'node:path';\nimport { DEFAULT_CONFIG } from './defaults.ts';\nimport { ConfigurationLoader } from './loader.ts';\nimport type {\n  ConfigChangeEvent,\n  ConfigValidationResult,\n  SystemConfiguration,\n} from './types.ts';\nimport { ConfigValidator } from './validator.ts';\n\n/**\n * Unified Configuration Manager.\n *\n * Features:\n * - Multi-source configuration loading (files, env, CLI)\n * - Hot-reloading with file watchers\n * - Configuration validation with detailed errors\n * - Event-driven configuration changes\n * - Thread-safe configuration access\n * - Configuration history and rollback.\n *\n * @example.\n * @example\n */\nexport class ConfigurationManager extends EventEmitter {\n  private static instance: ConfigurationManager | null = null;\n  private config: SystemConfiguration;\n  private loader = new ConfigurationLoader();\n  private validator = new ConfigValidator();\n  private configPaths: string[] = [];\n  private watchers: fs.FSWatcher[] = [];\n  private configHistory: SystemConfiguration[] = [];\n  private maxHistorySize = 10;\n  private isLoading = false;\n\n  private constructor() {\n    super();\n    this.config = JSON.parse(JSON.stringify(DEFAULT_CONFIG));\n    this.setupErrorHandling();\n  }\n\n  /**\n   * Get singleton instance.\n   */\n  static getInstance(): ConfigurationManager {\n    if (!ConfigurationManager.instance) {\n      ConfigurationManager.instance = new ConfigurationManager();\n    }\n    return ConfigurationManager.instance;\n  }\n\n  /**\n   * Initialize configuration system.\n   *\n   * @param configPaths\n   */\n  async initialize(configPaths?: string[]): Promise<ConfigValidationResult> {\n    if (this.isLoading) {\n      throw new Error('Configuration is already being loaded');\n    }\n\n    this.isLoading = true;\n    try {\n      const result = await this.loader.loadConfiguration(configPaths);\n\n      if (result?.validation?.valid) {\n        this.config = result?.config;\n\n        if (result?.validation?.warnings.length > 0) {\n          logger.warn('\u26A0\uFE0F Configuration warnings:');\n          result?.validation?.warnings?.forEach((warning) =>\n            logger.warn(`  - ${warning}`)\n          );\n        }\n      } else {\n        logger.error('\u274C Configuration validation failed:');\n        result?.validation?.errors?.forEach((error) =>\n          logger.error(`  - ${error}`)\n        );\n\n        if (result?.validation?.warnings.length > 0) {\n          logger.warn('\u26A0\uFE0F Configuration warnings:');\n          result?.validation?.warnings?.forEach((warning) =>\n            logger.warn(`  - ${warning}`)\n          );\n        }\n        this.config = JSON.parse(JSON.stringify(DEFAULT_CONFIG));\n      }\n\n      // Store config paths for watching\n      this.configPaths = configPaths || [];\n\n      // Setup file watchers for hot-reloading\n      this.setupFileWatchers();\n\n      // Add to history\n      this.addToHistory(this.config);\n\n      this.emit('config:loaded', {\n        config: this.config,\n        validation: result?.validation,\n      });\n\n      return result?.validation;\n    } finally {\n      this.isLoading = false;\n    }\n  }\n\n  /**\n   * Get current configuration.\n   */\n  getConfig(): SystemConfiguration {\n    return JSON.parse(JSON.stringify(this.config));\n  }\n\n  /**\n   * Get configuration section.\n   *\n   * @param section\n   */\n  getSection<K extends keyof SystemConfiguration>(\n    section: K\n  ): SystemConfiguration[K] {\n    return JSON.parse(JSON.stringify(this.config[section]));\n  }\n\n  /**\n   * Get nested configuration value.\n   *\n   * @param path\n   */\n  get<T = any>(path: string): T | undefined {\n    return path\n      .split('.')\n      .reduce((current: unknown, key) => (current as any)?.[key], this.config) as T | undefined;\n  }\n\n  /**\n   * Update configuration (runtime only).\n   *\n   * @param path\n   * @param value.\n   * @param value\n   */\n  update(path: string, value: unknown): ConfigValidationResult {\n    const oldValue = this.get(path);\n\n    // Create a copy for testing\n    const testConfig = JSON.parse(JSON.stringify(this.config));\n    this.setNestedValue(testConfig, path, value);\n\n    // Validate the change\n    const validation = this.validator.validate(testConfig);\n\n    if (!validation.valid) {\n      return validation;\n    }\n\n    // Apply the change\n    this.setNestedValue(this.config, path, value);\n\n    // Add to history\n    this.addToHistory(this.config);\n\n    // Emit change event\n    const changeEvent: ConfigChangeEvent = {\n      path,\n      oldValue,\n      newValue: value,\n      source: 'runtime',\n      timestamp: Date.now(),\n    };\n\n    this.emit('config:changed', changeEvent);\n\n    return validation;\n  }\n\n  /**\n   * Reload configuration from sources.\n   */\n  async reload(): Promise<ConfigValidationResult> {\n    return this.initialize(this.configPaths);\n  }\n\n  /**\n   * Validate current configuration.\n   */\n  validate(): ConfigValidationResult {\n    return this.validator.validate(this.config);\n  }\n\n  /**\n   * Get configuration history.\n   */\n  getHistory(): SystemConfiguration[] {\n    return [...this.configHistory];\n  }\n\n  /**\n   * Rollback to previous configuration.\n   *\n   * @param steps\n   */\n  rollback(steps = 1): boolean {\n    if (this.configHistory.length <= steps) {\n      return false;\n    }\n\n    const targetConfig =\n      this.configHistory[this.configHistory.length - steps - 1];\n    const validation = targetConfig\n      ? this.validator.validate(targetConfig)\n      : { valid: false, errors: ['Invalid target config'] };\n\n    if (!validation.valid) {\n      logger.error('Cannot rollback to invalid configuration');\n      return false;\n    }\n\n    this.config = JSON.parse(JSON.stringify(targetConfig));\n    this.emit('config:rollback', { config: this.config, steps });\n\n    return true;\n  }\n\n  /**\n   * Export current configuration.\n   *\n   * @param format\n   */\n  export(format: 'json' | 'yaml' = 'json'): string {\n    if (format === 'json') {\n      return JSON.stringify(this.config, null, 2);\n    }\n    // Basic YAML export (would need yaml library for full support)\n    return this.toSimpleYaml(this.config);\n  }\n\n  /**\n   * Get configuration sources info.\n   */\n  getSourcesInfo() {\n    return this.loader.getSources();\n  }\n\n  /**\n   * Cleanup resources.\n   */\n  destroy(): void {\n    // Clear file watchers\n    this.watchers.forEach((watcher) => watcher.close());\n    this.watchers = [];\n\n    // Clear history\n    this.configHistory = [];\n\n    // Remove event listeners\n    this.removeAllListeners();\n\n    // Clear singleton\n    ConfigurationManager.instance = null;\n  }\n\n  /**\n   * Setup file watchers for hot-reloading.\n   */\n  private setupFileWatchers(): void {\n    // Clear existing watchers\n    this.watchers.forEach((watcher) => watcher.close());\n    this.watchers = [];\n\n    const configFiles = [\n      './config/claude-zen.json',\n      './claude-zen.config.json',\n      ...this.configPaths,\n    ];\n\n    for (const configFile of configFiles) {\n      try {\n        const resolvedPath = path.resolve(configFile);\n\n        if (fs.existsSync(resolvedPath)) {\n          const watcher = fs.watch(resolvedPath, (eventType) => {\n            if (eventType === 'change') {\n              // Debounce reloads\n              setTimeout(() => {\n                this.reload().catch((error) => {\n                  logger.error('Failed to reload configuration:', error);\n                });\n              }, 1000);\n            }\n          });\n\n          this.watchers.push(watcher);\n        }\n      } catch (error) {\n        logger.warn(`Failed to watch config file ${configFile}:`, error);\n      }\n    }\n  }\n\n  /**\n   * Setup error handling.\n   */\n  private setupErrorHandling(): void {\n    this.on('error', (error) => {\n      logger.error('Configuration manager error:', error);\n    });\n\n    // Handle process signals for cleanup\n    process.on('SIGINT', () => this.destroy());\n    process.on('SIGTERM', () => this.destroy());\n  }\n\n  /**\n   * Add configuration to history.\n   *\n   * @param config\n   */\n  private addToHistory(config: SystemConfiguration): void {\n    this.configHistory.push(JSON.parse(JSON.stringify(config)));\n\n    // Trim history to max size\n    if (this.configHistory.length > this.maxHistorySize) {\n      this.configHistory = this.configHistory.slice(-this.maxHistorySize);\n    }\n  }\n\n  /**\n   * Set nested value using dot notation.\n   *\n   * @param obj\n   * @param path\n   * @param value\n   */\n  private setNestedValue(obj: unknown, path: string, value: unknown): void {\n    const parts = path.split('.');\n    let current = obj;\n\n    for (let i = 0; i < parts.length - 1; i++) {\n      const part = parts[i];\n      if (part && (!(part in (current as any)) || typeof (current as any)?.[part] !== 'object')) {\n        (current as any)[part] = {};\n      }\n      if (part) {\n        current = (current as any)?.[part];\n      }\n    }\n\n    const lastPart = parts[parts.length - 1];\n    if (lastPart) {\n      (current as any)[lastPart] = value;\n    }\n  }\n\n  /**\n   * Simple YAML export (basic implementation).\n   *\n   * @param obj\n   * @param indent.\n   * @param indent\n   */\n  private toSimpleYaml(obj: unknown, indent = 0): string {\n    const spaces = '  '.repeat(indent);\n    let yaml = '';\n\n    for (const [key, value] of Object.entries(obj as any)) {\n      if (\n        typeof value === 'object' &&\n        value !== null &&\n        !Array.isArray(value)\n      ) {\n        yaml += `${spaces}${key}:\\n${this.toSimpleYaml(value, indent + 1)}`;\n      } else if (Array.isArray(value)) {\n        yaml += `${spaces}${key}:\\n`;\n        for (const item of value) {\n          yaml += `${spaces}  - ${item}\\n`;\n        }\n      } else {\n        yaml += `${spaces}${key}: ${JSON.stringify(value)}\\n`;\n      }\n    }\n\n    return yaml;\n  }\n}\n\n// Export singleton instance\nexport const configManager = ConfigurationManager.getInstance();\n", "/**\n * System Information and Memory Detection Utilities\n *\n * Provides reliable system memory detection and capacity reporting\n * for optimal adaptive configuration.\n */\n\nexport interface SystemInfo {\n  totalMemoryGB: number;\n  totalMemoryMB: number;\n  availableMemoryGB: number;\n  platform: string;\n  cpuCores: number;\n  recommendedConfig: {\n    conservative: boolean;\n    maxPortfolioStreams: number;\n    maxProgramStreams: number;\n    maxSwarmStreams: number;\n  };\n}\n\n/**\n * Safely detect system memory with fallbacks\n */\nexport function detectSystemMemory(): number {\n  try {\n    const os = require('os');\n    const totalBytes = os.totalmem();\n    const totalGB = Math.round(totalBytes / (1024 * 1024 * 1024));\n\n    // Validate reasonable range (1GB to 2TB)\n    if (totalGB < 1 || totalGB > 2048) {\n      console.warn(\n        `\u26A0\uFE0F Unusual system memory detected: ${totalGB}GB, using 8GB default`\n      );\n      return 8;\n    }\n\n    return totalGB;\n  } catch (error) {\n    console.warn('\u26A0\uFE0F Could not detect system memory, using 8GB default:', error);\n    return 8;\n  }\n}\n\n/**\n * Get comprehensive system information\n */\nexport function getSystemInfo(): SystemInfo {\n  const totalMemoryGB = detectSystemMemory();\n  const totalMemoryMB = totalMemoryGB * 1024;\n\n  let platform = 'unknown';\n  let cpuCores = 1;\n\n  try {\n    const os = require('os');\n    platform = os.platform();\n    cpuCores = os.cpus().length;\n  } catch (error) {\n    console.warn('\u26A0\uFE0F Could not detect system platform/CPU info');\n  }\n\n  // Calculate safe available memory (reserve 50% for system)\n  const availableMemoryGB = Math.floor(totalMemoryGB * 0.5);\n\n  // Ultra-conservative stream recommendations\n  const recommendedConfig = {\n    conservative: totalMemoryGB <= 16, // Be extra conservative on <=16GB systems\n    maxPortfolioStreams: Math.max(\n      1,\n      Math.min(16, Math.floor(totalMemoryGB * 0.25))\n    ),\n    maxProgramStreams: Math.max(\n      2,\n      Math.min(64, Math.floor(totalMemoryGB * 0.5))\n    ),\n    maxSwarmStreams: Math.max(\n      4,\n      Math.min(256, Math.floor(totalMemoryGB * 1.0))\n    ),\n  };\n\n  return {\n    totalMemoryGB,\n    totalMemoryMB,\n    availableMemoryGB,\n    platform,\n    cpuCores,\n    recommendedConfig,\n  };\n}\n\n/**\n * Log system information for debugging\n */\nexport function logSystemInfo(): void {\n  const info = getSystemInfo();\n\n  console.log('\uD83D\uDDA5\uFE0F  System Information:');\n  console.log(\n    `   Total Memory: ${info.totalMemoryGB}GB (${info.totalMemoryMB}MB)`\n  );\n  console.log(\n    `   Available Memory: ${info.availableMemoryGB}GB (conservative estimate)`\n  );\n  console.log(`   Platform: ${info.platform}`);\n  console.log(`   CPU Cores: ${info.cpuCores}`);\n  console.log('');\n  console.log('\uD83C\uDFAF Recommended Stream Limits (Ultra-Conservative):');\n  console.log(\n    `   Portfolio: ${info.recommendedConfig.maxPortfolioStreams} streams max`\n  );\n  console.log(\n    `   Program: ${info.recommendedConfig.maxProgramStreams} streams max`\n  );\n  console.log(\n    `   Swarm: ${info.recommendedConfig.maxSwarmStreams} streams max`\n  );\n  console.log(\n    `   Conservative Mode: ${info.recommendedConfig.conservative ? 'YES' : 'NO'}`\n  );\n}\n\n/**\n * Validate if a configuration is safe for the detected system\n */\nexport function validateConfigForSystem(config: {\n  portfolio: number;\n  program: number;\n  swarm: number;\n}): {\n  safe: boolean;\n  warnings: string[];\n  systemInfo: SystemInfo;\n} {\n  const systemInfo = getSystemInfo();\n  const warnings: string[] = [];\n\n  // Check against ultra-conservative limits\n  if (config.portfolio > systemInfo.recommendedConfig.maxPortfolioStreams) {\n    warnings.push(\n      `Portfolio streams (${config.portfolio}) exceeds safe limit (${systemInfo.recommendedConfig.maxPortfolioStreams}) for ${systemInfo.totalMemoryGB}GB system`\n    );\n  }\n\n  if (config.program > systemInfo.recommendedConfig.maxProgramStreams) {\n    warnings.push(\n      `Program streams (${config.program}) exceeds safe limit (${systemInfo.recommendedConfig.maxProgramStreams}) for ${systemInfo.totalMemoryGB}GB system`\n    );\n  }\n\n  if (config.swarm > systemInfo.recommendedConfig.maxSwarmStreams) {\n    warnings.push(\n      `Swarm streams (${config.swarm}) exceeds safe limit (${systemInfo.recommendedConfig.maxSwarmStreams}) for ${systemInfo.totalMemoryGB}GB system`\n    );\n  }\n\n  // Estimate total memory usage\n  const estimatedMemoryMB =\n    config.portfolio * 128 + config.program * 32 + config.swarm * 8;\n  const maxSafeMemoryMB = systemInfo.totalMemoryMB * 0.4; // Never use more than 40% of system memory\n\n  if (estimatedMemoryMB > maxSafeMemoryMB) {\n    warnings.push(\n      `Configuration would use ${estimatedMemoryMB}MB but safe limit is ${maxSafeMemoryMB}MB`\n    );\n  }\n\n  return {\n    safe: warnings.length === 0,\n    warnings,\n    systemInfo,\n  };\n}\n\n/**\n * Get memory-appropriate starting configuration\n */\nexport function getStartupConfig(): {\n  portfolio: number;\n  program: number;\n  swarm: number;\n  rationale: string;\n} {\n  const systemInfo = getSystemInfo();\n\n  // Always start ultra-conservatively regardless of detected memory\n  const startupConfig = {\n    portfolio: Math.max(\n      1,\n      Math.min(4, Math.floor(systemInfo.totalMemoryGB * 0.125))\n    ),\n    program: Math.max(\n      2,\n      Math.min(8, Math.floor(systemInfo.totalMemoryGB * 0.25))\n    ),\n    swarm: Math.max(\n      4,\n      Math.min(16, Math.floor(systemInfo.totalMemoryGB * 0.5))\n    ),\n  };\n\n  const estimatedUsageMB =\n    startupConfig.portfolio * 128 +\n    startupConfig.program * 32 +\n    startupConfig.swarm * 8;\n  const usagePercentage = (\n    (estimatedUsageMB / systemInfo.totalMemoryMB) *\n    100\n  ).toFixed(1);\n\n  const rationale = `Ultra-conservative startup for ${systemInfo.totalMemoryGB}GB system: ${estimatedUsageMB}MB usage (${usagePercentage}% of total). Will auto-scale based on performance.`;\n\n  return {\n    ...startupConfig,\n    rationale,\n  };\n}\n\nexport default {\n  detectSystemMemory,\n  getSystemInfo,\n  logSystemInfo,\n  validateConfigForSystem,\n  getStartupConfig,\n};\n", "/**\n * Default Repository Configuration with Advanced Kanban Flow\n *\n * This configuration is automatically applied when adding a new repository\n * to ensure all ML and intelligent features are enabled by default.\n */\n\nimport type { ClaudeZenCoreConfig } from '../core/init.ts';\nimport {\n  calculateOptimalStreams,\n  memory8GBConfig,\n} from './memory-optimization.ts';\nimport {\n  getStartupConfig,\n  logSystemInfo,\n  validateConfigForSystem,\n} from './system-info.ts';\n\nexport interface RepoConfig extends ClaudeZenCoreConfig {\n  // Repository-specific settings\n  repoPath: string;\n  repoName: string;\n  autoDiscoveryEnabled: boolean;\n\n  // DSPy Neural Enhancement (enabled by default)\n  dsyIntegration: {\n    enabled: boolean;\n    swarmCoordination: boolean;\n    neuralEnhancement: boolean;\n    automaticOptimization: boolean;\n    crossSessionLearning: boolean;\n  };\n\n  // AGUI Configuration (enabled by default)\n  aguiConfig: {\n    enabled: boolean;\n    workflowGates: boolean;\n    decisionLogging: boolean;\n    escalationChains: boolean;\n    timeoutHandling: boolean;\n  };\n\n  // Advanced Flow Integration\n  flowIntegration: {\n    enableRealTimeOptimization: boolean;\n    monitoringInterval: number;\n    performanceThresholds: {\n      minThroughput: number;\n      maxLeadTime: number;\n      minEfficiency: number;\n      maxBottleneckDuration: number;\n      resourceUtilizationTarget: number;\n      qualityGateThreshold: number;\n    };\n    concurrencyLimits: {\n      maxConcurrentOperations: number;\n      maxParallelAnalysis: number;\n      maxSimultaneousBuilds: number;\n      memoryPoolSizeMB: number;\n    };\n  };\n\n  // Neural Auto-Discovery\n  autoDiscovery: {\n    enabled: boolean;\n    confidenceThreshold: number;\n    autoCreateSwarms: boolean;\n    importDocuments: boolean;\n    learningEnabled: boolean;\n  };\n\n  // FACT + RAG Systems\n  knowledgeSystems: {\n    factEnabled: boolean;\n    ragEnabled: boolean;\n    wasmAcceleration: boolean;\n    externalMCPs: string[];\n    cacheEnabled: boolean;\n  };\n}\n\n/**\n * Default configuration for new repositories - All advanced features enabled\n */\nexport const defaultRepoConfig: Omit<RepoConfig, 'repoPath' | 'repoName'> = {\n  // Core system configuration (from ClaudeZenCoreConfig)\n  logLevel: 'info',\n  port: 3000,\n  host: 'localhost',\n\n  // Advanced Kanban Flow - ALL ENABLED BY DEFAULT\n  enableAdvancedKanbanFlow: true,\n  enableMLOptimization: true,\n  enableBottleneckDetection: true,\n  enablePredictiveAnalytics: true,\n  enableRealTimeMonitoring: true,\n  enableIntelligentResourceManagement: true,\n  enableAGUIGates: true,\n  enableCrossLevelOptimization: true,\n\n  flowTopology: 'hierarchical',\n  // Conservative 8GB base - auto-scales up based on detected system memory\n  maxParallelStreams: {\n    portfolio: 4, // Strategic streams (conservative start, auto-scales)\n    program: 16, // Collaborative streams (conservative start, auto-scales)\n    swarm: 64, // Autonomous streams (conservative start, auto-scales)\n  },\n\n  // Memory allocation strategy starting from 8GB base (auto-detects and scales)\n  // memoryAllocation: memory8GBConfig,\n  mlOptimizationLevel: 'enterprise',\n\n  // Repository features\n  autoDiscoveryEnabled: true,\n\n  // DSPy Neural Enhancement - FULLY ENABLED\n  dsyIntegration: {\n    enabled: true,\n    swarmCoordination: true,\n    neuralEnhancement: true,\n    automaticOptimization: true,\n    crossSessionLearning: true,\n  },\n\n  // AGUI Human Gates - FULLY ENABLED\n  aguiConfig: {\n    enabled: true,\n    workflowGates: true,\n    decisionLogging: true,\n    escalationChains: true,\n    timeoutHandling: true,\n  },\n\n  // Flow Integration - ADAPTIVE OPTIMIZATION (starts 8GB, scales automatically)\n  flowIntegration: {\n    enableRealTimeOptimization: true,\n    monitoringInterval: 5000, // 5 second monitoring (conservative start)\n    performanceThresholds: {\n      minThroughput: 10, // 10 items per hour (conservative start, auto-adjusts)\n      maxLeadTime: 72, // 3 days maximum (conservative start, improves with scaling)\n      minEfficiency: 0.8, // 80% minimum efficiency (achievable on any system)\n      maxBottleneckDuration: 30, // 30 minutes maximum (conservative start)\n      resourceUtilizationTarget: 0.7, // 70% target (conservative to allow scaling)\n      qualityGateThreshold: 0.95, // 95% quality threshold\n    },\n    // Adaptive concurrency limits (auto-scales based on detected resources)\n    concurrencyLimits: {\n      maxConcurrentOperations: 8, // Conservative start (auto-scales)\n      maxParallelAnalysis: 4, // Conservative analysis threads (auto-scales)\n      maxSimultaneousBuilds: 2, // Conservative builds (auto-scales)\n      memoryPoolSizeMB: 512, // 512MB pool (auto-scales)\n    },\n  },\n\n  // Neural Auto-Discovery - INTELLIGENT DEFAULTS\n  autoDiscovery: {\n    enabled: true,\n    confidenceThreshold: 0.8, // 80% confidence for auto-actions\n    autoCreateSwarms: true,\n    importDocuments: true,\n    learningEnabled: true,\n  },\n\n  // Knowledge Systems - ALL ENABLED\n  knowledgeSystems: {\n    factEnabled: true,\n    ragEnabled: true,\n    wasmAcceleration: true,\n    externalMCPs: [\n      'context7', // Documentation research\n      'deepwiki', // Knowledge aggregation\n      'gitmcp', // Repository analysis\n      'semgrep', // Security scanning\n      'github', // Repository management\n    ],\n    cacheEnabled: true,\n  },\n};\n\n/**\n * Create Repository Configuration with Auto-Detected Optimal Defaults.\n *\n * Factory function that creates a complete repository configuration by combining\n * intelligent defaults with system-detected capabilities and user overrides.\n * Automatically optimizes settings based on available system memory, CPU cores,\n * and other hardware characteristics.\n *\n * Key Features:\n * - Auto-detection of system resources for optimal parallel stream limits\n * - Ultra-conservative startup configuration that scales based on performance\n * - Comprehensive validation with detailed warning reporting\n * - Integration with all advanced Claude Code Zen features by default\n * - Adaptive memory allocation starting from 8GB base configuration\n *\n * @param repoPath - Absolute path to the repository directory\n * @param overrides - Optional configuration overrides to customize behavior\n * @returns Complete repository configuration with all features enabled\n *\n * @example\n * ```typescript\n * import { createRepoConfig } from 'claude-code-zen/config';\n *\n * // Basic usage with defaults\n * const config = createRepoConfig('/path/to/my-project');\n *\n * // With custom overrides\n * const customConfig = createRepoConfig('/path/to/my-project', {\n *   enableMLOptimization: false,\n *   maxParallelStreams: {\n *     portfolio: 2,\n *     program: 8,\n *     swarm: 32\n *   },\n *   dsyIntegration: {\n *     ...defaultRepoConfig.dsyIntegration,\n *     crossSessionLearning: false\n *   }\n * });\n * ```\n *\n * @see {@link RepoConfig} - Configuration interface\n * @see {@link validateRepoConfig} - Configuration validation\n * @see {@link defaultRepoConfig} - Base default settings\n * @since 1.0.0-alpha.43\n */\nexport function createRepoConfig(\n  repoPath: string,\n  overrides: Partial<RepoConfig> = {}\n): RepoConfig {\n  const repoName = repoPath.split('/').pop() || 'unknown-repo';\n\n  // Get ultra-conservative startup configuration\n  const startupConfig = getStartupConfig();\n\n  const optimizedConfig = {\n    ...defaultRepoConfig,\n    // Apply ultra-conservative startup configuration\n    maxParallelStreams: {\n      portfolio: startupConfig.portfolio,\n      program: startupConfig.program,\n      swarm: startupConfig.swarm,\n    },\n    repoPath,\n    repoName,\n    ...overrides,\n  };\n\n  console.log(`\uD83D\uDD12 Ultra-safe startup: ${startupConfig.rationale}`);\n  console.log(\n    `\uD83C\uDFAF Initial streams: Portfolio=${optimizedConfig.maxParallelStreams.portfolio}, Program=${optimizedConfig.maxParallelStreams.program}, Swarm=${optimizedConfig.maxParallelStreams.swarm}`\n  );\n  console.log('\uD83D\uDE80 System will auto-scale based on performance metrics');\n\n  // Validate configuration before returning (wired up!)\n  const repoValidation = validateRepoConfig(optimizedConfig);\n  if (repoValidation.valid) {\n    console.log('\u2705 Repository configuration validated successfully');\n  } else {\n    console.warn(\n      '\u26A0\uFE0F Repository configuration validation warnings:',\n      repoValidation.errors\n    );\n    // Continue with warnings but don't fail - configs might have acceptable issues\n  }\n\n  return optimizedConfig;\n}\n\n/**\n * Validate Repository Configuration.\n *\n * Comprehensive validation function that checks repository configuration for\n * correctness, safety, and system compatibility. Performs adaptive validation\n * based on detected system resources to ensure configuration values are\n * appropriate for the target deployment environment.\n *\n * Validation Checks:\n * - Required fields presence (repoPath, repoName)\n * - Numeric ranges and thresholds (monitoring intervals, confidence values)\n * - System resource limits based on detected memory and CPU cores\n * - Adaptive stream limits scaled to system capabilities\n * - Configuration coherence and internal consistency\n *\n * @param config - Repository configuration to validate\n * @returns Validation result with success status and detailed error list\n *\n * @example\n * ```typescript\n * import { validateRepoConfig, createRepoConfig } from 'claude-code-zen/config';\n *\n * const config = createRepoConfig('/my/repo', {\n *   maxParallelStreams: { portfolio: 100, program: 200, swarm: 500 }\n * });\n *\n * const validation = validateRepoConfig(config);\n * if (!validation.valid) {\n *   console.error('Configuration errors:', validation.errors);\n *   // Handle configuration issues...\n * } else {\n *   console.log('Configuration is valid and ready for use');\n * }\n * ```\n *\n * @see {@link RepoConfig} - Configuration interface\n * @see {@link createRepoConfig} - Configuration factory\n * @since 1.0.0-alpha.43\n */\nexport function validateRepoConfig(config: RepoConfig): {\n  valid: boolean;\n  errors: string[];\n} {\n  const errors: string[] = [];\n\n  if (!config.repoPath) {\n    errors.push('Repository path is required');\n  }\n\n  if (!config.repoName) {\n    errors.push('Repository name is required');\n  }\n\n  if (config.flowIntegration.monitoringInterval < 1000) {\n    errors.push('Monitoring interval must be at least 1000ms');\n  }\n\n  if (\n    config.autoDiscovery.confidenceThreshold < 0.5 ||\n    config.autoDiscovery.confidenceThreshold > 1.0\n  ) {\n    errors.push(\n      'Auto-discovery confidence threshold must be between 0.5 and 1.0'\n    );\n  }\n\n  // Adaptive validation based on detected system memory\n  const detectedMemoryGB = (() => {\n    try {\n      const os = require('os');\n      return Math.round(os.totalmem() / (1024 * 1024 * 1024));\n    } catch {\n      return 8;\n    }\n  })();\n\n  const maxSafePortfolio = Math.max(1, Math.floor(detectedMemoryGB * 0.5));\n  const maxSafeProgram = Math.max(2, Math.floor(detectedMemoryGB * 2));\n  const maxSafeSwarm = Math.max(4, Math.floor(detectedMemoryGB * 4));\n\n  if (\n    config.maxParallelStreams.portfolio < 1 ||\n    config.maxParallelStreams.portfolio > maxSafePortfolio\n  ) {\n    errors.push(\n      `Portfolio parallel streams must be between 1 and ${maxSafePortfolio} for ${detectedMemoryGB}GB system`\n    );\n  }\n\n  if (\n    config.maxParallelStreams.program < 1 ||\n    config.maxParallelStreams.program > maxSafeProgram\n  ) {\n    errors.push(\n      `Program parallel streams must be between 1 and ${maxSafeProgram} for ${detectedMemoryGB}GB system`\n    );\n  }\n\n  if (\n    config.maxParallelStreams.swarm < 2 ||\n    config.maxParallelStreams.swarm > maxSafeSwarm\n  ) {\n    errors.push(\n      `Swarm parallel streams must be between 2 and ${maxSafeSwarm} for ${detectedMemoryGB}GB system`\n    );\n  }\n\n  return {\n    valid: errors.length === 0,\n    errors,\n  };\n}\n\n/**\n * Log Repository Configuration Status.\n *\n * Comprehensive logging function that outputs detailed repository configuration\n * status with visual indicators and structured information. Used for diagnostics,\n * debugging, and system health monitoring to provide clear visibility into\n * active configuration settings.\n *\n * Output Information:\n * - Repository identification (name, path)\n * - Feature enablement status with visual indicators (\u2705/\u274C)\n * - Advanced Kanban Flow settings and optimization levels\n * - Neural enhancement and learning capabilities\n * - Knowledge system integration status\n * - Performance and resource allocation settings\n * - Topology and parallel stream configuration\n *\n * @param config - Repository configuration to log\n *\n * @example\n * ```typescript\n * import { logRepoConfigStatus, createRepoConfig } from 'claude-code-zen/config';\n *\n * const config = createRepoConfig('/my/awesome-project');\n *\n * // Log detailed configuration status\n * logRepoConfigStatus(config);\n *\n * // Output example:\n * // \uD83D\uDE80 Repository Configuration:\n * //    Repository: awesome-project (/my/awesome-project)\n * //    Advanced Kanban Flow: \u2705 ENABLED\n * //    ML Optimization: \u2705 ENABLED (Level: enterprise)\n * //    Neural Enhancement: \u2705 ENABLED\n * //    Auto-Discovery: \u2705 ENABLED (Confidence: 0.8)\n * //    ...\n * ```\n *\n * @see {@link RepoConfig} - Configuration interface\n * @see {@link createRepoConfig} - Configuration factory\n * @since 1.0.0-alpha.43\n */\nexport function logRepoConfigStatus(config: RepoConfig): void {\n  const logger = console;\n\n  logger.log('\uD83D\uDE80 Repository Configuration:');\n  logger.log(`   Repository: ${config.repoName} (${config.repoPath})`);\n  logger.log(\n    `   Advanced Kanban Flow: ${config.enableAdvancedKanbanFlow ? '\u2705 ENABLED' : '\u274C DISABLED'}`\n  );\n  logger.log(\n    `   ML Optimization: ${config.enableMLOptimization ? '\u2705 ENABLED' : '\u274C DISABLED'} (Level: ${config.mlOptimizationLevel})`\n  );\n  logger.log(\n    `   Bottleneck Detection: ${config.enableBottleneckDetection ? '\u2705 ENABLED' : '\u274C DISABLED'}`\n  );\n  logger.log(\n    `   Predictive Analytics: ${config.enablePredictiveAnalytics ? '\u2705 ENABLED' : '\u274C DISABLED'}`\n  );\n  logger.log(\n    `   Real-Time Monitoring: ${config.enableRealTimeMonitoring ? '\u2705 ENABLED' : '\u274C DISABLED'}`\n  );\n  logger.log(\n    `   Resource Management: ${config.enableIntelligentResourceManagement ? '\u2705 ENABLED' : '\u274C DISABLED'}`\n  );\n  logger.log(\n    `   AGUI Gates: ${config.enableAGUIGates ? '\u2705 ENABLED' : '\u274C DISABLED'}`\n  );\n  logger.log(\n    `   Cross-Level Optimization: ${config.enableCrossLevelOptimization ? '\u2705 ENABLED' : '\u274C DISABLED'}`\n  );\n  logger.log(\n    `   DSPy Neural Enhancement: ${config.dsyIntegration.enabled ? '\u2705 ENABLED' : '\u274C DISABLED'}`\n  );\n  logger.log(\n    `   Auto-Discovery: ${config.autoDiscovery.enabled ? '\u2705 ENABLED' : '\u274C DISABLED'} (Confidence: ${config.autoDiscovery.confidenceThreshold})`\n  );\n  logger.log(\n    `   Knowledge Systems: FACT=${config.knowledgeSystems.factEnabled ? '\u2705' : '\u274C'}, RAG=${config.knowledgeSystems.ragEnabled ? '\u2705' : '\u274C'}, WASM=${config.knowledgeSystems.wasmAcceleration ? '\u2705' : '\u274C'}`\n  );\n  logger.log(`   Flow Topology: ${config.flowTopology}`);\n  logger.log(\n    `   Parallel Streams: Portfolio=${config.maxParallelStreams.portfolio}, Program=${config.maxParallelStreams.program}, Swarm=${config.maxParallelStreams.swarm}`\n  );\n  logger.log(\n    '\u2705 All advanced features enabled with adaptive 8GB base configuration!'\n  );\n  logger.log(\n    '\uD83D\uDD04 System will auto-scale based on detected memory and performance!'\n  );\n}\n\nexport default defaultRepoConfig;\n", "/**\n * @file Configuration Health Checker.\n *\n * Provides health check endpoints and monitoring for configuration validation.\n * Designed for production deployment validation and monitoring.\n */\n\nimport { EventEmitter } from 'node:events';\nimport { logRepoConfigStatus } from './default-repo-config.ts';\nimport { configManager } from './manager.ts';\nimport type {\n  ConfigHealthReport,\n  SystemConfiguration,\n  ValidationResult,\n} from './types.ts';\nimport { ConfigValidator } from './validator.ts';\n\n/**\n * Configuration health checker with monitoring capabilities.\n *\n * @example\n * ```typescript\n * const healthChecker = new ConfigHealthChecker();\n * await healthChecker.initialize();\n *\n * // Get current health\n * const health = await healthChecker.getHealthReport();\n * console.log(`Config health: ${health.status} (${health.score}/100)`);\n *\n * // Monitor for changes\n * healthChecker.on('health:changed', (report) => {\n *   if (report.status === 'critical') {\n *     console.error('Critical configuration issues detected!');\n *   }\n * });\n * ```\n */\nexport class ConfigHealthChecker extends EventEmitter {\n  private validator = new ConfigValidator();\n  private lastHealthReport: ConfigHealthReport | null = null;\n  private monitoringInterval: NodeJS.Timeout | null = null;\n  private healthCheckFrequency = 30000; // 30 seconds\n  private readonly environment = process.env['NODE_ENV'] || 'development';\n\n  /**\n   * Initialize health checker with monitoring.\n   *\n   * @param options - Configuration options.\n   * @param options.enableMonitoring\n   * @param options.healthCheckFrequency\n   */\n  async initialize(\n    options: { enableMonitoring?: boolean; healthCheckFrequency?: number } = {}\n  ): Promise<void> {\n    const { enableMonitoring = true, healthCheckFrequency = 30000 } = options;\n\n    this.healthCheckFrequency = healthCheckFrequency;\n\n    // Perform initial health check\n    await this.performHealthCheck();\n\n    // Set up configuration change listeners\n    configManager?.on('config:changed', () => {\n      this.performHealthCheck().catch((error) => {\n        this.emit('error', error);\n      });\n    });\n\n    configManager?.on('config:loaded', () => {\n      this.performHealthCheck().catch((error) => {\n        this.emit('error', error);\n      });\n    });\n\n    // Start monitoring if enabled\n    if (enableMonitoring) {\n      this.startMonitoring();\n    }\n  }\n\n  /**\n   * Get current configuration health report.\n   *\n   * @param includeDetails - Include detailed validation information.\n   */\n  async getHealthReport(): Promise<ConfigHealthReport>;\n  async getHealthReport(\n    includeDetails: true\n  ): Promise<ConfigHealthReport & { validationDetails: ValidationResult }>;\n  async getHealthReport(includeDetails: false): Promise<ConfigHealthReport>;\n  async getHealthReport(\n    includeDetails = false\n  ): Promise<\n    | ConfigHealthReport\n    | (ConfigHealthReport & { validationDetails: ValidationResult })\n  > {\n    const config = configManager?.getConfig();\n    const healthReport = this.validator.getHealthReport(config);\n\n    const report: ConfigHealthReport = {\n      ...healthReport,\n      timestamp: Date.now(),\n      environment: this.environment,\n    };\n\n    this.lastHealthReport = report;\n\n    if (includeDetails) {\n      const validationResult = this.validator.validateEnhanced(config);\n      return {\n        ...report,\n        validationDetails: validationResult,\n      } as ConfigHealthReport & { validationDetails: ValidationResult };\n    }\n\n    return report;\n  }\n\n  /**\n   * Validate configuration for production deployment.\n   *\n   * @param config - Configuration to validate (optional, uses current if not provided).\n   */\n  async validateForProduction(config?: SystemConfiguration): Promise<{\n    deploymentReady: boolean;\n    blockers: string[];\n    warnings: string[];\n    recommendations: string[];\n  }> {\n    const configToValidate = config || configManager?.getConfig();\n    const result = this.validator.validateEnhanced(configToValidate);\n\n    const blockers: string[] = [];\n    const warnings: string[] = [];\n    const recommendations: string[] = [];\n\n    // Critical blockers for deployment\n    if (!result?.valid) {\n      blockers.push(...result?.errors);\n    }\n\n    if (result?.securityIssues.length > 0) {\n      blockers.push(...result?.securityIssues);\n    }\n\n    if (result?.portConflicts.length > 0) {\n      blockers.push(...result?.portConflicts);\n    }\n\n    // Non-critical warnings\n    warnings.push(...result?.warnings);\n    warnings.push(...result?.performanceWarnings);\n\n    // Generate deployment recommendations\n    if (!result?.productionReady) {\n      recommendations.push('Configuration is not production-ready');\n    }\n\n    if (result?.failsafeApplied.length > 0) {\n      recommendations.push(\n        'Failsafe defaults were applied - review configuration'\n      );\n    }\n\n    // Environment-specific recommendations\n    if (this.environment === 'production') {\n      if (!process.env['ANTHROPIC_API_KEY']) {\n        blockers.push(\n          'ANTHROPIC_API_KEY environment variable required in production'\n        );\n      }\n\n      if (configToValidate?.core?.logger?.level === 'debug') {\n        recommendations.push(\n          'Consider using \"info\" log level in production instead of \"debug\"'\n        );\n      }\n    }\n\n    return {\n      deploymentReady: blockers.length === 0,\n      blockers,\n      warnings,\n      recommendations,\n    };\n  }\n\n  /**\n   * Check for port conflicts across all services.\n   */\n  async checkPortConflicts(): Promise<{\n    conflicts: Array<{\n      port: number;\n      services: string[];\n      severity: 'error' | 'warning';\n    }>;\n    recommendations: string[];\n  }> {\n    const config = configManager?.getConfig();\n    const conflicts: Array<{\n      port: number;\n      services: string[];\n      severity: 'error' | 'warning';\n    }> = [];\n    const recommendations: string[] = [];\n\n    // Collect all port configurations\n    const portMappings = [\n      {\n        name: 'MCP HTTP',\n        port: config?.interfaces?.mcp?.http?.port,\n        critical: true,\n      },\n      {\n        name: 'Web Dashboard',\n        port: config?.interfaces?.web?.port,\n        critical: true,\n      },\n      {\n        name: 'Monitoring',\n        port: config?.monitoring?.dashboard?.port,\n        critical: false,\n      },\n    ].filter((mapping) => typeof mapping.port === 'number');\n\n    // Group by port\n    const portGroups = new Map<\n      number,\n      Array<{ name: string; critical: boolean }>\n    >();\n\n    for (const mapping of portMappings) {\n      if (typeof mapping.port === 'number') {\n        if (!portGroups.has(mapping.port)) {\n          portGroups.set(mapping.port, []);\n        }\n        portGroups\n          .get(mapping.port)!\n          .push({ name: mapping.name, critical: mapping.critical });\n      }\n    }\n\n    // Identify conflicts\n    for (const [port, services] of portGroups.entries()) {\n      if (services.length > 1) {\n        const isCritical = services.some((s) => s.critical);\n        conflicts.push({\n          port,\n          services: services.map((s) => s.name),\n          severity: isCritical ? 'error' : 'warning',\n        });\n      }\n    }\n\n    // Generate recommendations\n    if (conflicts.length > 0) {\n      recommendations.push('Configure unique ports for each service');\n      recommendations.push(\n        'Use environment variables to override default ports'\n      );\n      recommendations.push(\n        'Consider using a reverse proxy for port management'\n      );\n    }\n\n    return { conflicts, recommendations };\n  }\n\n  /**\n   * Get configuration health as simple status.\n   */\n  async getHealthStatus(): Promise<{\n    status: 'healthy' | 'warning' | 'critical';\n    message: string;\n    timestamp: number;\n  }> {\n    const report = await this.getHealthReport();\n\n    let message = '';\n    switch (report.status) {\n      case 'healthy':\n        message = 'Configuration is healthy and production-ready';\n        break;\n      case 'warning':\n        message = `Configuration has ${report.recommendations.length} recommendations`;\n        break;\n      case 'critical':\n        message = 'Configuration has critical issues requiring attention';\n        break;\n    }\n\n    return {\n      status: report.status,\n      message,\n      timestamp: report.timestamp,\n    };\n  }\n\n  /**\n   * Start health monitoring.\n   */\n  startMonitoring(): void {\n    if (this.monitoringInterval) {\n      clearInterval(this.monitoringInterval);\n    }\n\n    this.monitoringInterval = setInterval(() => {\n      this.performHealthCheck().catch((error) => {\n        this.emit('error', error);\n      });\n    }, this.healthCheckFrequency);\n  }\n\n  /**\n   * Stop health monitoring.\n   */\n  stopMonitoring(): void {\n    if (this.monitoringInterval) {\n      clearInterval(this.monitoringInterval);\n      this.monitoringInterval = null;\n    }\n  }\n\n  /**\n   * Export health report for external monitoring.\n   *\n   * @param format - Export format.\n   */\n  async exportHealthReport(\n    format: 'json' | 'prometheus' = 'json'\n  ): Promise<string> {\n    const report = await this.getHealthReport(true);\n\n    if (format === 'json') {\n      return JSON.stringify(report, null, 2);\n    }\n    if (format === 'prometheus') {\n      return this.toPrometheusFormat(report);\n    }\n\n    throw new Error(`Unsupported export format: ${format}`);\n  }\n\n  /**\n   * Cleanup resources.\n   */\n  destroy(): void {\n    this.stopMonitoring();\n    this.removeAllListeners();\n  }\n\n  /**\n   * Perform health check and emit events.\n   */\n  private async performHealthCheck(): Promise<void> {\n    try {\n      const currentReport = await this.getHealthReport();\n\n      // Compare with previous report\n      if (this.lastHealthReport) {\n        if (this.lastHealthReport.status !== currentReport?.status) {\n          this.emit('health:changed', currentReport);\n\n          if (currentReport?.status === 'critical') {\n            this.emit('health:critical', currentReport);\n          } else if (\n            currentReport?.status === 'healthy' &&\n            this.lastHealthReport.status !== 'healthy'\n          ) {\n            this.emit('health:recovered', currentReport);\n          }\n        }\n      }\n\n      this.emit('health:checked', currentReport);\n      this.lastHealthReport = currentReport;\n\n      // Log detailed repo config status for diagnostics (wired up!)\n      if ((currentReport as any)?.configuration) {\n        try {\n          logRepoConfigStatus((currentReport as any).configuration as any);\n        } catch (error) {\n          // Silently continue if logging fails - don't break health checks\n          console.debug('Config status logging failed:', error);\n        }\n      }\n    } catch (error) {\n      this.emit('error', error);\n    }\n  }\n\n  /**\n   * Convert health report to Prometheus format.\n   *\n   * @param report - Health report to convert.\n   */\n  private toPrometheusFormat(report: ConfigHealthReport): string {\n    const lines: string[] = [];\n\n    // Overall health score\n    lines.push(\n      '# HELP claude_zen_config_health_score Configuration health score (0-100)'\n    );\n    lines.push('# TYPE claude_zen_config_health_score gauge');\n    lines.push(\n      `claude_zen_config_health_score{environment=\"${this.environment}\"} ${report.score}`\n    );\n\n    // Health status as numeric (0=critical, 1=warning, 2=healthy)\n    const statusValue =\n      report.status === 'healthy' ? 2 : report.status === 'warning' ? 1 : 0;\n    lines.push(\n      '# HELP claude_zen_config_health_status Configuration health status'\n    );\n    lines.push('# TYPE claude_zen_config_health_status gauge');\n    lines.push(\n      `claude_zen_config_health_status{environment=\"${this.environment}\",status=\"${report.status}\"} ${statusValue}`\n    );\n\n    // Component health details\n    for (const [component, healthy] of Object.entries(report.details)) {\n      lines.push(\n        `# HELP claude_zen_config_${component}_health ${component} configuration health`\n      );\n      lines.push(`# TYPE claude_zen_config_${component}_health gauge`);\n      lines.push(\n        `claude_zen_config_${component}_health{environment=\"${this.environment}\"} ${healthy ? 1 : 0}`\n      );\n    }\n\n    // Recommendation count\n    lines.push(\n      '# HELP claude_zen_config_recommendations_total Number of configuration recommendations'\n    );\n    lines.push('# TYPE claude_zen_config_recommendations_total gauge');\n    lines.push(\n      `claude_zen_config_recommendations_total{environment=\"${this.environment}\"} ${report.recommendations.length}`\n    );\n\n    return `${lines.join('\\n')}\\n`;\n  }\n}\n\n// Export singleton instance\nexport const configHealthChecker = new ConfigHealthChecker();\n\n/**\n * Initialize configuration health checking.\n *\n * @param options - Initialization options.\n * @param options.enableMonitoring\n * @param options.healthCheckFrequency\n * @example\n */\nexport async function initializeConfigHealthChecker(options?: {\n  enableMonitoring?: boolean;\n  healthCheckFrequency?: number;\n}): Promise<void> {\n  await configHealthChecker?.initialize(options);\n}\n\n/**\n * Create health check endpoint handler for Express.js.\n *\n * @example\n * ```typescript\n * app.get('/health/config', createConfigHealthEndpoint());\n * ```\n */\nexport function createConfigHealthEndpoint() {\n  return async (_req: unknown, res: unknown) => {\n    try {\n      const healthReport = await configHealthChecker?.getHealthReport(true);\n\n      // Set appropriate HTTP status\n      const statusCode =\n        healthReport.status === 'healthy'\n          ? 200\n          : healthReport.status === 'warning'\n            ? 200\n            : 503;\n\n      (res as any).status(statusCode).json({\n        success: healthReport.status !== 'critical',\n        health: healthReport,\n        timestamp: new Date().toISOString(),\n      });\n    } catch (error) {\n      (res as any).status(500).json({\n        success: false,\n        error: 'Health check failed',\n        message: error instanceof Error ? error.message : 'Unknown error',\n        timestamp: new Date().toISOString(),\n      });\n    }\n  };\n}\n\n/**\n * Create deployment readiness check endpoint.\n *\n * @example\n * ```typescript\n * app.get('/health/deployment', createDeploymentReadinessEndpoint());\n * ```\n */\nexport function createDeploymentReadinessEndpoint() {\n  return async (_req: unknown, res: unknown) => {\n    try {\n      const deploymentCheck =\n        await configHealthChecker?.validateForProduction();\n      const portCheck = await configHealthChecker?.checkPortConflicts();\n\n      const statusCode =\n        deploymentCheck.deploymentReady && portCheck.conflicts.length === 0\n          ? 200\n          : 503;\n\n      (res as any).status(statusCode).json({\n        success:\n          deploymentCheck.deploymentReady && portCheck.conflicts.length === 0,\n        deployment: {\n          ready: deploymentCheck.deploymentReady,\n          blockers: deploymentCheck.blockers,\n          warnings: deploymentCheck.warnings,\n          recommendations: deploymentCheck.recommendations,\n        },\n        ports: {\n          conflicts: portCheck.conflicts,\n          recommendations: portCheck.recommendations,\n        },\n        timestamp: new Date().toISOString(),\n        environment: process.env['NODE_ENV'] || 'development',\n      });\n    } catch (error) {\n      (res as any).status(500).json({\n        success: false,\n        error: 'Deployment readiness check failed',\n        message: error instanceof Error ? error.message : 'Unknown error',\n        timestamp: new Date().toISOString(),\n      });\n    }\n  };\n}\n", "/**\n * @file Startup Configuration Validator.\n *\n * Production-ready configuration validation that runs at startup.\n * Fails fast if configuration is invalid for deployment.\n */\n\nimport { getLogger } from './logging-config.ts';\n\nconst logger = getLogger('src-config-startup-validator');\n\nimport * as process from 'node:process';\nimport { configHealthChecker } from './health-checker.ts';\nimport { configManager } from './manager.ts';\nimport type { ValidationResult } from './types.ts';\n\n/**\n * Startup validation options.\n *\n * @example\n */\nexport interface StartupValidationOptions {\n  /** Fail fast on any configuration errors */\n  strict?: boolean;\n  /** Check production readiness even in development */\n  enforceProductionStandards?: boolean;\n  /** Skip certain validation categories */\n  skipValidation?: Array<\n    'structure' | 'security' | 'performance' | 'ports' | 'environment'\n  >;\n  /** Output format for validation results */\n  outputFormat?: 'console' | 'json' | 'silent';\n}\n\n/**\n * Startup validation result.\n *\n * @example\n */\nexport interface StartupValidationResult {\n  success: boolean;\n  errors: string[];\n  warnings: string[];\n  blockers: string[];\n  environment: string;\n  timestamp: number;\n  validationDetails: ValidationResult;\n  portConflicts: Array<{\n    port: number;\n    services: string[];\n    severity: 'error' | 'warning';\n  }>;\n  exitCode: number;\n}\n\n/**\n * Run comprehensive startup validation.\n *\n * @param options - Validation options.\n * @returns Validation result.\n * @example\n */\nexport async function runStartupValidation(\n  options: StartupValidationOptions = {}\n): Promise<StartupValidationResult> {\n  const {\n    strict = process.env['NODE_ENV'] === 'production',\n    enforceProductionStandards = process.env['NODE_ENV'] === 'production',\n    skipValidation = [],\n    outputFormat = 'console',\n  } = options;\n\n  const startTime = Date.now();\n  const environment = process.env['NODE_ENV'] || 'development';\n\n  if (outputFormat === 'console') {\n    logger.info('\\n\uD83D\uDD0D Running Claude-Zen configuration validation...');\n    logger.info(`Environment: ${environment}`);\n    logger.info(`Strict mode: ${strict ? '\u2705 Enabled' : '\u274C Disabled'}`);\n  }\n\n  try {\n    // Initialize configuration manager\n    const configValidation = await configManager?.initialize();\n\n    // Initialize health checker\n    await configHealthChecker?.initialize({ enableMonitoring: false });\n\n    const errors: string[] = [];\n    const warnings: string[] = [];\n    const blockers: string[] = [];\n\n    // 1. Structure validation (unless skipped)\n    if (!skipValidation.includes('structure')) {\n      if (outputFormat === 'console') {\n        process.stdout.write('\uD83D\uDCCB Validating configuration structure... ');\n      }\n\n      if (!configValidation?.valid) {\n        errors.push(...configValidation?.errors);\n        if (strict) {\n          blockers.push(...configValidation?.errors);\n        }\n      }\n      warnings.push(...configValidation?.warnings);\n\n      if (outputFormat === 'console') {\n        logger.info(configValidation?.valid ? '\u2705' : '\u274C');\n      }\n    }\n\n    // 2. Enhanced validation with production checks\n    const detailedValidation = await configHealthChecker?.getHealthReport(true);\n    const validationDetails = detailedValidation.validationDetails!;\n\n    // 3. Security validation (unless skipped)\n    if (!skipValidation.includes('security')) {\n      if (outputFormat === 'console') {\n        process.stdout.write('\uD83D\uDD12 Validating security configuration... ');\n      }\n\n      if (validationDetails.securityIssues.length > 0) {\n        errors.push(...validationDetails.securityIssues);\n        if (enforceProductionStandards || environment === 'production') {\n          blockers.push(...validationDetails.securityIssues);\n        }\n      }\n\n      if (outputFormat === 'console') {\n        logger.info(\n          validationDetails.securityIssues.length === 0 ? '\u2705' : '\u274C'\n        );\n      }\n    }\n\n    // 4. Port conflict validation (unless skipped)\n    let portConflicts: Array<{\n      port: number;\n      services: string[];\n      severity: 'error' | 'warning';\n    }> = [];\n    if (!skipValidation.includes('ports')) {\n      if (outputFormat === 'console') {\n        process.stdout.write('\uD83C\uDF10 Validating port configuration... ');\n      }\n\n      const portCheck = await configHealthChecker?.checkPortConflicts();\n      portConflicts = portCheck.conflicts;\n\n      if (portConflicts.length > 0) {\n        const criticalConflicts = portConflicts.filter(\n          (c) => c.severity === 'error'\n        );\n        if (criticalConflicts.length > 0) {\n          errors.push(\n            ...criticalConflicts.map(\n              (c) => `Port conflict: ${c.port} used by ${c.services.join(', ')}`\n            )\n          );\n          blockers.push(\n            ...criticalConflicts.map(\n              (c) => `Critical port conflict on ${c.port}`\n            )\n          );\n        }\n\n        const warningConflicts = portConflicts.filter(\n          (c) => c.severity === 'warning'\n        );\n        warnings.push(\n          ...warningConflicts.map(\n            (c) => `Port ${c.port} shared by ${c.services.join(', ')}`\n          )\n        );\n      }\n\n      if (outputFormat === 'console') {\n        logger.info(\n          portConflicts.length === 0\n            ? '\u2705'\n            : portConflicts.some((c) => c.severity === 'error')\n              ? '\u274C'\n              : '\u26A0\uFE0F'\n        );\n      }\n    }\n\n    // 5. Environment variable validation (unless skipped)\n    if (!skipValidation.includes('environment')) {\n      if (outputFormat === 'console') {\n        process.stdout.write('\uD83C\uDF0D Validating environment variables... ');\n      }\n\n      const envIssues = await validateEnvironmentVariables(\n        environment === 'production'\n      );\n      if (envIssues.errors.length > 0) {\n        errors.push(...envIssues.errors);\n        if (environment === 'production') {\n          blockers.push(...envIssues.errors);\n        }\n      }\n      warnings.push(...envIssues.warnings);\n\n      if (outputFormat === 'console') {\n        logger.info(envIssues.errors.length === 0 ? '\u2705' : '\u274C');\n      }\n    }\n\n    // 6. Performance validation (unless skipped)\n    if (!skipValidation.includes('performance')) {\n      if (outputFormat === 'console') {\n        process.stdout.write('\u26A1 Validating performance configuration... ');\n      }\n\n      warnings.push(...validationDetails.performanceWarnings);\n\n      if (outputFormat === 'console') {\n        logger.info(\n          validationDetails.performanceWarnings.length <= 2 ? '\u2705' : '\u26A0\uFE0F'\n        );\n      }\n    }\n\n    // 7. Production readiness check\n    if (enforceProductionStandards) {\n      if (outputFormat === 'console') {\n        process.stdout.write('\uD83D\uDE80 Validating production readiness... ');\n      }\n\n      if (!validationDetails.productionReady) {\n        const message = 'Configuration is not production-ready';\n        errors.push(message);\n        if (environment === 'production') {\n          blockers.push(message);\n        }\n      }\n\n      if (outputFormat === 'console') {\n        logger.info(validationDetails.productionReady ? '\u2705' : '\u274C');\n      }\n    }\n\n    // Determine success and exit code\n    const success = blockers.length === 0;\n    const exitCode = success ? 0 : 1;\n\n    const result: StartupValidationResult = {\n      success,\n      errors,\n      warnings,\n      blockers,\n      environment,\n      timestamp: startTime,\n      validationDetails,\n      portConflicts,\n      exitCode,\n    };\n\n    // Output results\n    await outputValidationResults(result, outputFormat);\n\n    return result;\n  } catch (error) {\n    const errorMessage =\n      error instanceof Error ? error.message : 'Unknown validation error';\n    const result: StartupValidationResult = {\n      success: false,\n      errors: [errorMessage],\n      warnings: [],\n      blockers: [errorMessage],\n      environment,\n      timestamp: startTime,\n      validationDetails: {\n        valid: false,\n        errors: [errorMessage],\n        warnings: [],\n        productionReady: false,\n        securityIssues: [],\n        portConflicts: [],\n        performanceWarnings: [],\n        failsafeApplied: [],\n      },\n      portConflicts: [],\n      exitCode: 1,\n    };\n\n    await outputValidationResults(result, outputFormat);\n    return result;\n  }\n}\n\n/**\n * Validate environment variables.\n *\n * @param isProduction\n * @example\n */\nasync function validateEnvironmentVariables(isProduction: boolean): Promise<{\n  errors: string[];\n  warnings: string[];\n}> {\n  const errors: string[] = [];\n  const warnings: string[] = [];\n\n  // Required environment variables\n  const requiredVars = ['NODE_ENV'];\n  if (isProduction) {\n    requiredVars.push('ANTHROPIC_API_KEY');\n  }\n\n  for (const envVar of requiredVars) {\n    if (!process.env[envVar]) {\n      errors.push(`Required environment variable missing: ${envVar}`);\n    }\n  }\n\n  // Validate NODE_ENV value\n  const validNodeEnvs = ['development', 'production', 'test'];\n  if (\n    process.env['NODE_ENV'] &&\n    !validNodeEnvs?.includes(process.env['NODE_ENV'])\n  ) {\n    errors.push(\n      `Invalid NODE_ENV value: ${process.env['NODE_ENV']}. Must be one of: ${validNodeEnvs?.join(', ')}`\n    );\n  }\n\n  // Validate API key format (basic check)\n  if (\n    process.env['ANTHROPIC_API_KEY'] &&\n    process.env['ANTHROPIC_API_KEY'].length < 10\n  ) {\n    errors.push('ANTHROPIC_API_KEY appears to be too short or invalid');\n  }\n\n  // Check for common production misconfigurations\n  if (isProduction) {\n    if (process.env['DEBUG']) {\n      warnings.push('DEBUG environment variable is set in production');\n    }\n    if (process.env['CLAUDE_LOG_LEVEL'] === 'debug') {\n      warnings.push(\n        'Debug logging enabled in production - consider using \"info\" level'\n      );\n    }\n  }\n\n  return { errors, warnings };\n}\n\n/**\n * Output validation results in the specified format.\n *\n * @param result\n * @param format\n * @example\n */\nasync function outputValidationResults(\n  result: StartupValidationResult,\n  format: 'console' | 'json' | 'silent'\n): Promise<void> {\n  if (format === 'silent') {\n    return;\n  }\n\n  if (format === 'json') {\n    logger.info(JSON.stringify(result, null, 2));\n    return;\n  }\n\n  // Console output\n  logger.info('\\n\uD83D\uDCCA Validation Results:');\n  logger.info(`Overall: ${result?.success ? '\u2705 PASSED' : '\u274C FAILED'}`);\n\n  if (result?.blockers.length > 0) {\n    logger.info('\\n\uD83D\uDEAB Critical Issues (deployment blockers):');\n    result?.blockers.forEach((blocker) => logger.info(`  \u274C ${blocker}`));\n  }\n\n  if (result?.errors.length > 0) {\n    logger.info('\\n\u274C Errors:');\n    result?.errors.forEach((error) => logger.info(`  \u274C ${error}`));\n  }\n\n  if (result?.warnings.length > 0) {\n    logger.info('\\n\u26A0\uFE0F  Warnings:');\n    result?.warnings.forEach((warning) => logger.info(`  \u26A0\uFE0F  ${warning}`));\n  }\n\n  if (result?.portConflicts.length > 0) {\n    logger.info('\\n\uD83C\uDF10 Port Conflicts:');\n    result?.portConflicts?.forEach((conflict) => {\n      const icon = conflict.severity === 'error' ? '\u274C' : '\u26A0\uFE0F';\n      logger.info(\n        `  ${icon} Port ${conflict.port}: ${conflict.services.join(', ')}`\n      );\n    });\n  }\n\n  // Recommendations\n  if (result?.validationDetails?.failsafeApplied.length > 0) {\n    logger.info('\\n\uD83D\uDEE1\uFE0F  Failsafe Defaults Applied:');\n    result?.validationDetails?.failsafeApplied?.forEach((applied) =>\n      logger.info(`  \uD83D\uDEE1\uFE0F  ${applied}`)\n    );\n  }\n\n  // Health score\n  const healthReport = await configHealthChecker?.getHealthReport();\n  logger.info(\n    `\\n\uD83D\uDCAF Configuration Health Score: ${healthReport.score}/100 (${healthReport.status.toUpperCase()})`\n  );\n\n  if (!result?.success) {\n    logger.info('\\n\uD83D\uDEA8 Fix the issues above before deploying to production!');\n  } else if (result?.warnings.length > 0) {\n    logger.info(\n      '\\n\u2705 Configuration is valid but consider addressing the warnings above.'\n    );\n  } else {\n    logger.info('\\n\uD83C\uDF89 Configuration is healthy and production-ready!');\n  }\n\n  logger.info(`\\nValidation completed in ${Date.now() - result?.timestamp}ms`);\n}\n\n/**\n * Run startup validation and exit process if validation fails.\n *\n * @param options - Validation options.\n * @example\n */\nexport async function validateAndExit(\n  options: StartupValidationOptions = {}\n): Promise<never> {\n  const result = await runStartupValidation(options);\n  process.exit(result?.exitCode);\n}\n\n/**\n * CLI entry point for startup validation.\n *\n * @example\n */\nexport async function cli(): Promise<void> {\n  const args = process.argv.slice(2);\n\n  const options: StartupValidationOptions = {\n    strict: args.includes('--strict'),\n    enforceProductionStandards: args.includes('--production-standards'),\n    outputFormat: args.includes('--json')\n      ? 'json'\n      : args.includes('--silent')\n        ? 'silent'\n        : 'console',\n    skipValidation: [],\n  };\n\n  // Parse skip validation flags\n  if (args.includes('--skip-structure'))\n    options?.['skipValidation']!.push('structure');\n  if (args.includes('--skip-security'))\n    options?.['skipValidation']!.push('security');\n  if (args.includes('--skip-performance'))\n    options?.['skipValidation']!.push('performance');\n  if (args.includes('--skip-ports')) options?.['skipValidation']!.push('ports');\n  if (args.includes('--skip-environment'))\n    options?.['skipValidation']!.push('environment');\n\n  // Show help\n  if (args.includes('--help') || args.includes('-h')) {\n    logger.info(`\nClaude-Zen Configuration Startup Validator\n\nUsage: node startup-validator.js [options]\n\nOptions:\n  --strict                    Fail on any configuration errors\n  --production-standards      Enforce production standards even in development\n  --json                     Output results in JSON format\n  --silent                   Suppress all output\n  --skip-structure           Skip structure validation\n  --skip-security            Skip security validation\n  --skip-performance         Skip performance validation\n  --skip-ports               Skip port conflict validation\n  --skip-environment         Skip environment variable validation\n  --help, -h                 Show this help message\n\nExamples:\n  # Basic validation\n  node startup-validator.js\n\n  # Strict validation for production deployment\n  node startup-validator.js --strict --production-standards\n\n  # JSON output for CI/CD integration\n  node startup-validator.js --json --strict\n`);\n    process.exit(0);\n  }\n\n  await validateAndExit(options);\n}\n", "#!/usr/bin/env node\n\n/**\n * @file Interface implementation: start-server.\n */\n\n/**\n * Start HTTP MCP Server - Official SDK Implementation.\n *\n * Startup script for the Claude-Zen HTTP MCP server using the official MCP SDK.\n * This replaces the custom Express.js implementation while maintaining all functionality.\n */\n\nimport { config } from '../../config/index.js';\nimport { getLogger } from '../../config/logging-config.ts';\nimport { DEFAULT_CONFIG } from '../config/defaults';\nimport { HTTPMCPServer } from './http-mcp-server.ts';\n\nconst logger = getLogger('MCP-Starter');\n\ninterface StartupConfig {\n  port?: number;\n  host?: string;\n  logLevel?: 'debug' | 'info' | 'warn' | 'error';\n  timeout?: number;\n}\n\n/**\n * Parse command line arguments.\n *\n * @example\n */\nfunction parseArgs(): StartupConfig {\n  const config: StartupConfig = {};\n\n  const args = process.argv.slice(2);\n\n  for (let i = 0; i < args.length; i++) {\n    const arg = args[i];\n\n    switch (arg) {\n      case '--port':\n      case '-p': {\n        const port = Number.parseInt(args[++i], 10);\n        if (Number.isNaN(port) || port < 1 || port > 65535) {\n          throw new Error(`Invalid port: ${args[i]}`);\n        }\n        config.port = port;\n        break;\n      }\n\n      case '--host':\n      case '-h':\n        config.host = args[++i];\n        break;\n\n      case '--log-level':\n      case '-l': {\n        const level = args[++i] as StartupConfig['logLevel'];\n        if (!['debug', 'info', 'warn', 'error'].includes(level!)) {\n          throw new Error(`Invalid log level: ${level}`);\n        }\n        config.logLevel = level;\n        break;\n      }\n\n      case '--timeout':\n      case '-t': {\n        const timeout = Number.parseInt(args[++i], 10);\n        if (Number.isNaN(timeout) || timeout < 1000) {\n          throw new Error(`Invalid timeout: ${args[i]} (minimum 1000ms)`);\n        }\n        config.timeout = timeout;\n        break;\n      }\n\n      case '--help':\n        printUsage();\n        process.exit(0);\n        break;\n\n      default:\n        if (arg.startsWith('-')) {\n          throw new Error(`Unknown option: ${arg}`);\n        }\n    }\n  }\n\n  return config;\n}\n\n/**\n * Print usage information.\n *\n * @example\n */\nfunction printUsage(): void {}\n\n/**\n * Setup graceful shutdown.\n *\n * @param server\n * @example\n */\nfunction setupGracefulShutdown(server: HTTPMCPServer): void {\n  let shutdownInProgress = false;\n\n  const shutdown = async (signal: string) => {\n    if (shutdownInProgress) {\n      logger.warn('Shutdown already in progress...');\n      return;\n    }\n\n    shutdownInProgress = true;\n    logger.info(`Received ${signal}, shutting down gracefully...`);\n\n    try {\n      await server.stop();\n      logger.info('SDK server shutdown complete');\n      process.exit(0);\n    } catch (error) {\n      logger.error('Error during shutdown:', error);\n      process.exit(1);\n    }\n  };\n\n  // Handle various shutdown signals\n  process.on('SIGTERM', () => shutdown('SIGTERM'));\n  process.on('SIGINT', () => shutdown('SIGINT'));\n  process.on('SIGQUIT', () => shutdown('SIGQUIT'));\n\n  // Handle uncaught exceptions\n  process.on('uncaughtException', (error) => {\n    logger.error('Uncaught exception:', error);\n    shutdown('uncaughtException');\n  });\n\n  process.on('unhandledRejection', (reason, promise) => {\n    logger.error('Unhandled rejection at:', promise, 'reason:', reason);\n    shutdown('unhandledRejection');\n  });\n}\n\n/**\n * Validate startup configuration.\n *\n * @param config\n * @example\n */\nfunction validateConfig(config: StartupConfig): void {\n  // Validate port\n  if (config?.port && (config?.port < 1 || config?.port > 65535)) {\n    throw new Error(`Invalid port: ${config?.port} (must be 1-65535)`);\n  }\n\n  // Validate host\n  if (config?.host && config?.host.length === 0) {\n    throw new Error('Host cannot be empty');\n  }\n\n  // Validate timeout\n  if (config?.timeout && config?.timeout < 1000) {\n    throw new Error(`Invalid timeout: ${config?.timeout}ms (minimum 1000ms)`);\n  }\n}\n\n/**\n * Main startup function.\n *\n * @example\n */\nasync function main(): Promise<void> {\n  try {\n    // Parse command line arguments\n    const config = parseArgs();\n\n    // Validate configuration\n    validateConfig(config);\n\n    logger.info('Starting Claude-Zen SDK HTTP MCP Server...', { config });\n\n    // Get centralized configuration\n    const centralConfig = config.get();\n\n    // Create and configure server using centralized config with environment overrides\n    const server = new HTTPMCPServer({\n      port:\n        config?.port ||\n        Number.parseInt(\n          process.env['CLAUDE_MCP_PORT'] ||\n            process.env['MCP_PORT'] ||\n            String(centralConfig?.interfaces?.mcp?.http?.port),\n          10\n        ),\n      host:\n        config?.host ||\n        process.env['CLAUDE_MCP_HOST'] ||\n        process.env['MCP_HOST'] ||\n        centralConfig?.interfaces?.mcp?.http?.host,\n      logLevel:\n        config?.logLevel ||\n        process.env['CLAUDE_LOG_LEVEL'] ||\n        (process.env['MCP_LOG_LEVEL'] as any) ||\n        centralConfig?.core?.logger?.level,\n      timeout:\n        config?.timeout ||\n        Number.parseInt(\n          process.env['CLAUDE_MCP_TIMEOUT'] ||\n            process.env['MCP_TIMEOUT'] ||\n            String(centralConfig?.interfaces?.mcp?.http?.timeout),\n          10\n        ),\n    });\n\n    // Setup graceful shutdown\n    setupGracefulShutdown(server);\n\n    // Start the server\n    await server.start();\n\n    // Log success information\n    const status = server.getStatus();\n    logger.info('SDK server started successfully', {\n      port: status.config.port,\n      host: status.config.host,\n      pid: process.pid,\n      sdk: status.sdk,\n    });\n\n    // Keep process alive\n    process.stdin.resume();\n  } catch (error) {\n    logger.error('Raw startup error:', error);\n    logger.error('Failed to start SDK server:', {\n      message: error instanceof Error ? error.message : String(error),\n      stack: error instanceof Error ? error.stack : undefined,\n      code: (error as any)?.code,\n    });\n\n    if (error instanceof Error) {\n      if (error.message.includes('EADDRINUSE')) {\n        logger.error(\n          'Port is already in use. Try a different port with --port option.'\n        );\n      } else if (error.message.includes('EACCES')) {\n        logger.error(\n          'Permission denied. Try running with sudo or use a port > 1024.'\n        );\n      }\n    }\n\n    process.exit(1);\n  }\n}\n\n// Run if this file is executed directly\nif (import.meta.url === `file://${process.argv[1]}`) {\n  main().catch((error) => {\n    logger.error('SDK startup failed:', error);\n    process.exit(1);\n  });\n}\n\nexport { main as startHTTPMCPServer };\n", "#!/usr/bin/env node\n/**\n * @file Interface implementation: http-mcp-server.\n */\n\n/**\n * Claude-Zen HTTP MCP Server - Official SDK Implementation.\n *\n * HTTP-based MCP server for Claude Desktop integration using the official MCP SDK.\n * Provides core Claude-Zen functionality via MCP protocol over HTTP on port 3000.\n *\n * This replaces the custom Express.js implementation with the official SDK.\n * Stdio MCP server for swarm coordination remains custom as requested.\n *\n * @version 2.0.0\n */\n\nimport { randomUUID } from 'node:crypto';\n\nimport { Server as McpServer } from '@modelcontextprotocol/sdk/server/index.js';\nimport { SSEServerTransport } from '@modelcontextprotocol/sdk/server/sse.js';\n\nimport express from 'express';\nimport { z } from 'zod';\nimport { config, getCORSOrigins } from '../../config/index.js';\nimport { getLogger } from '../../config/logging-config.ts';\nimport type { AdvancedMCPTool } from './mcp-tools.ts';\nimport { advancedToolRegistry } from './mcp-tools.ts';\n\nconst logger = getLogger('SDK-HTTP-MCP-Server');\n\n// Advanced MCP Tools Manager adapter\nconst advancedMCPToolsManager = {\n  searchTools(query: string) {\n    const allTools = advancedToolRegistry.getAllTools();\n    const filtered = allTools.filter(\n      (tool) =>\n        tool.name.toLowerCase().includes(query.toLowerCase()) ||\n        tool.description.toLowerCase().includes(query.toLowerCase()) ||\n        tool.metadata.tags.some((tag) =>\n          tag.toLowerCase().includes(query.toLowerCase())\n        )\n    );\n    return { tools: filtered };\n  },\n\n  getToolsByCategory(category: string) {\n    const tools = advancedToolRegistry.getToolsByCategory(category as any);\n    return { tools };\n  },\n\n  listAllTools() {\n    const tools = advancedToolRegistry.getAllTools();\n    return { tools };\n  },\n\n  getRegistryOverview() {\n    const categorySummary = advancedToolRegistry.getCategorySummary();\n    const totalTools = advancedToolRegistry.getToolCount();\n    return {\n      totalTools,\n      categories: categorySummary,\n      status: 'active',\n    };\n  },\n\n  hasTool(name: string) {\n    return advancedToolRegistry.getTool(name) !== undefined;\n  },\n\n  async executeTool(name: string, params: unknown) {\n    const tool = advancedToolRegistry.getTool(name);\n    if (!tool) {\n      throw new Error(`Tool '${name}' not found`);\n    }\n    return await tool.handler.execute(params);\n  },\n\n  getToolCount() {\n    return advancedToolRegistry.getToolCount();\n  },\n\n  getToolStats() {\n    const categorySummary = advancedToolRegistry.getCategorySummary();\n    const totalTools = advancedToolRegistry.getToolCount();\n    return {\n      total: totalTools,\n      byCategory: categorySummary,\n      lastUpdated: new Date().toISOString(),\n    };\n  },\n};\n\nexport interface MCPServerConfig {\n  port: number;\n  host: string;\n  timeout: number;\n  logLevel: 'debug' | 'info' | 'warn' | 'error';\n}\n\n/**\n * HTTP MCP Server using Official SDK for Claude Desktop integration.\n *\n * @example\n */\nexport class HTTPMCPServer {\n  private server: McpServer;\n  private expressApp: express.Application;\n  private httpServer: unknown;\n  private config: MCPServerConfig;\n  private isRunning: boolean = false;\n\n  constructor(userConfig: Partial<MCPServerConfig> = {}) {\n    // Use pure centralized configuration with user overrides\n    const centralConfig = config?.getAll();\n    this.config = {\n      port: userConfig?.port || centralConfig?.interfaces?.mcp?.http?.port,\n      host: userConfig?.host || centralConfig?.interfaces?.mcp?.http?.host,\n      timeout:\n        userConfig?.timeout || centralConfig?.interfaces?.mcp?.http?.timeout,\n      logLevel: userConfig?.logLevel || centralConfig?.core?.logger?.level,\n    };\n\n    // Create MCP server with official SDK\n    this.server = new McpServer(\n      {\n        name: 'claude-zen-http-mcp',\n        version: '1.0.0-alpha.43',\n      },\n      {\n        capabilities: {\n          tools: {},\n          prompts: {},\n          resources: {},\n        },\n      }\n    );\n\n    // Register tools list handler\n    this.server.setRequestHandler('tools/list', async () => {\n      return {\n        tools: [\n          {\n            name: 'system_info',\n            description: 'Get Claude-Zen system information and status',\n            inputSchema: {\n              type: 'object',\n              properties: {\n                detailed: {\n                  type: 'boolean',\n                  description: 'Include detailed system metrics',\n                  default: false,\n                },\n              },\n            },\n          },\n          // Add more tools here as needed\n        ],\n      };\n    });\n\n    // Setup Express app for SDK transport\n    this.expressApp = express();\n    this.setupExpressMiddleware();\n    // registerTools() will be called in start() method due to async nature\n    this.setupSDKRoutes();\n  }\n\n  /**\n   * Setup Express middleware for SDK transport.\n   */\n  private setupExpressMiddleware(): void {\n    // Body parsing - MUST come before routes\n    this.expressApp.use(express.json({ limit: '10mb' }));\n    this.expressApp.use(\n      express.raw({ type: 'application/octet-stream', limit: '10mb' })\n    );\n\n    // CORS support using centralized configuration\n    this.expressApp.use((req, res, next) => {\n      const corsOrigins = getCORSOrigins();\n      const origin = req.headers.origin;\n\n      // Allow configured origins or all origins in development\n      if (\n        corsOrigins.includes('*') ||\n        (origin && corsOrigins.includes(origin)) ||\n        !origin\n      ) {\n        res.header('Access-Control-Allow-Origin', origin || '*');\n      }\n\n      res.header(\n        'Access-Control-Allow-Methods',\n        'GET, POST, PUT, DELETE, OPTIONS'\n      );\n      res.header(\n        'Access-Control-Allow-Headers',\n        'Content-Type, Authorization, X-MCP-Client-Info, Last-Event-ID, MCP-Session-ID'\n      );\n      res.header('Access-Control-Allow-Credentials', 'true');\n\n      if (req.method === 'OPTIONS') {\n        res.sendStatus(200);\n      } else {\n        next();\n      }\n    });\n\n    // Request logging\n    this.expressApp.use((req, _res, next) => {\n      logger.debug(`${req.method} ${req.path}`, {\n        headers: req.headers,\n        hasBody: !!req.body,\n        bodyMethod: req.body?.method,\n      });\n      next();\n    });\n\n    // Health check endpoint\n    this.expressApp.get('/health', (_req, res) => {\n      res.json({\n        status: 'healthy',\n        server: 'claude-zen-sdk-http-mcp',\n        version: '2.0.0',\n        timestamp: new Date().toISOString(),\n        uptime: process.uptime(),\n        sdk: 'official-mcp-sdk',\n      });\n    });\n  }\n\n  /**\n   * Register Claude-Zen tools with the SDK.\n   */\n  private async registerTools(): Promise<void> {\n    // System information tool - using official MCP SDK\n    this.server.setRequestHandler('tools/call', async (request) => {\n      const { name, arguments: args } = request.params;\n\n      if (name === 'system_info') {\n        const detailed = args?.detailed;\n        const info = {\n          name: 'claude-zen',\n          version: '2.0.0',\n          status: 'running',\n          uptime: Math.floor(process.uptime()),\n          platform: process.platform,\n          arch: process.arch,\n          nodeVersion: process.version,\n          pid: process.pid,\n          sdk: 'official-mcp-sdk',\n          server: 'claude-zen-sdk-http-mcp',\n        };\n\n        if (detailed) {\n          const memUsage = process.memoryUsage();\n          Object.assign(info, {\n            memory: {\n              used: `${Math.round(memUsage.heapUsed / 1024 / 1024)}MB`,\n              total: `${Math.round(memUsage.heapTotal / 1024 / 1024)}MB`,\n              external: `${Math.round(memUsage.external / 1024 / 1024)}MB`,\n            },\n            cpuUsage: process.cpuUsage(),\n            resourceUsage: process.resourceUsage?.() || {},\n          });\n        }\n\n        return {\n          content: [\n            {\n              type: 'text',\n              text: JSON.stringify(info, null, 2),\n            },\n          ],\n        };\n      }\n\n      // Handle other tool calls\n      throw new Error(`Unknown tool: ${name}`);\n    });\n\n    // Project initialization tool\n    this.server.tool(\n      'project_init',\n      'Initialize a new Claude-Zen project with templates and configuration',\n      {\n        name: z.string().min(1).describe('Project name'),\n        template: z\n          .enum(['basic', 'advanced', 'swarm', 'neural'])\n          .default('basic')\n          .describe('Project template to use'),\n        directory: z\n          .string()\n          .default('.')\n          .describe('Target directory for project'),\n      },\n      {\n        title: 'Project Initialization',\n        description:\n          'Creates a new Claude-Zen project with the specified template and configuration',\n      },\n      async ({ name, template, directory }) => {\n        logger.info(`Initializing project: ${name} with template: ${template}`);\n\n        const result = {\n          success: true,\n          project: name,\n          template,\n          directory,\n          message: `Project ${name} initialized successfully with ${template} template`,\n          nextSteps: [\n            'Run claude-zen status to check project health',\n            'Use claude-zen swarm init to set up agent coordination',\n            'Explore claude-zen --help for available commands',\n          ],\n          sdk: 'official-mcp-sdk',\n        };\n\n        return {\n          content: [\n            {\n              type: 'text',\n              text: JSON.stringify(result, null, 2),\n            },\n          ],\n        };\n      }\n    );\n\n    // Project status tool\n    this.server.tool(\n      'project_status',\n      'Get comprehensive project status including swarms, tasks, and resources',\n      {\n        format: z\n          .enum(['json', 'summary'])\n          .default('json')\n          .describe('Output format'),\n        includeMetrics: z\n          .boolean()\n          .default(false)\n          .describe('Include performance metrics'),\n      },\n      {\n        title: 'Project Status',\n        description:\n          'Provides comprehensive project health, swarm status, and resource utilization',\n      },\n      async ({ format, includeMetrics }) => {\n        const status = {\n          project: {\n            name: 'current-project',\n            status: 'active',\n            initialized: true,\n            sdk: 'official-mcp-sdk',\n          },\n          swarms: {\n            active: 0,\n            total: 0,\n            agents: 0,\n          },\n          tasks: {\n            pending: 0,\n            active: 0,\n            completed: 0,\n          },\n          resources: {\n            memory: `${Math.round(process.memoryUsage().heapUsed / 1024 / 1024)}MB`,\n            uptime: `${Math.floor(process.uptime())}s`,\n          },\n        };\n\n        if (includeMetrics) {\n          Object.assign(status, {\n            metrics: {\n              requestsProcessed: 0,\n              averageResponseTime: 0,\n              errorRate: 0,\n              sdkVersion: '1.17.1',\n            },\n          });\n        }\n\n        let result: unknown;\n        if (format === 'summary') {\n          result = {\n            summary: `Project: ${status.project.name} (${status.project.status})`,\n            swarms: `${status.swarms.active}/${status.swarms.total} active`,\n            tasks: `${status.tasks.active} active, ${status.tasks.completed} completed`,\n            uptime: status.resources.uptime,\n            sdk: 'official-mcp-sdk',\n          };\n        } else {\n          result = status;\n        }\n\n        return {\n          content: [\n            {\n              type: 'text',\n              text: JSON.stringify(result, null, 2),\n            },\n          ],\n        };\n      }\n    );\n\n    // Register advanced tools from claude-zen\n    await this.registerAdvancedTools();\n\n    // Integrate all advanced tools as native MCP tools\n    await this.integrateAdvancedToolsNatively();\n\n    logger.info('Registered Claude-Zen tools with official MCP SDK');\n  }\n\n  /**\n   * Register advanced tools from claude-zen (87 tools).\n   */\n  private async registerAdvancedTools(): Promise<void> {\n    logger.info('Registering 87 advanced tools from claude-zen...');\n\n    // Advanced tool discovery endpoint\n    this.server.tool(\n      'advanced_tools_list',\n      'List all 87 advanced MCP tools with categories and metadata',\n      {\n        category: z.string().optional().describe('Filter by tool category'),\n        search: z.string().optional().describe('Search tools by name or tags'),\n      },\n      {\n        title: 'Advanced Tools Discovery',\n        description:\n          'Comprehensive listing of all advanced MCP tools available in the system',\n      },\n      async ({ category, search }) => {\n        try {\n          let tools;\n\n          if (search) {\n            tools = advancedMCPToolsManager.searchTools(search);\n          } else if (category) {\n            tools = advancedMCPToolsManager.getToolsByCategory(category);\n          } else {\n            tools = advancedMCPToolsManager.listAllTools();\n          }\n\n          const overview = advancedMCPToolsManager.getRegistryOverview();\n\n          return {\n            content: [\n              {\n                type: 'text',\n                text: JSON.stringify(\n                  {\n                    overview,\n                    tools:\n                      typeof tools === 'object' && 'tools' in tools\n                        ? tools.tools\n                        : tools,\n                    filter: { category, search },\n                    timestamp: new Date().toISOString(),\n                  },\n                  null,\n                  2\n                ),\n              },\n            ],\n          };\n        } catch (error) {\n          logger.error('Error listing advanced tools:', error);\n          return {\n            content: [\n              {\n                type: 'text',\n                text: JSON.stringify({ error: error.message }, null, 2),\n              },\n            ],\n          };\n        }\n      }\n    );\n\n    // Advanced tool execution proxy\n    this.server.tool(\n      'advanced_tool_execute',\n      'Execute any of the 87 advanced MCP tools',\n      {\n        toolName: z.string().describe('Name of the advanced tool to execute'),\n        params: z\n          .record(z.any())\n          .optional()\n          .describe('Parameters for the tool'),\n      },\n      {\n        title: 'Advanced Tool Execution',\n        description:\n          'Execute advanced coordination, monitoring, neural, GitHub, system, and orchestration tools',\n      },\n      async ({ toolName, params = {} }) => {\n        try {\n          if (!advancedMCPToolsManager.hasTool(toolName)) {\n            throw new Error(`Advanced tool not found: ${toolName}`);\n          }\n\n          const result = await advancedMCPToolsManager.executeTool(\n            toolName,\n            params\n          );\n\n          return {\n            content: [\n              {\n                type: 'text',\n                text: JSON.stringify(\n                  {\n                    tool: toolName,\n                    params,\n                    result,\n                    executedAt: new Date().toISOString(),\n                  },\n                  null,\n                  2\n                ),\n              },\n            ],\n          };\n        } catch (error) {\n          logger.error(`Error executing advanced tool ${toolName}:`, error);\n          return {\n            content: [\n              {\n                type: 'text',\n                text: JSON.stringify(\n                  {\n                    tool: toolName,\n                    error: error.message,\n                    params,\n                    executedAt: new Date().toISOString(),\n                  },\n                  null,\n                  2\n                ),\n              },\n            ],\n          };\n        }\n      }\n    );\n\n    // Tool statistics endpoint\n    this.server.tool(\n      'advanced_tools_stats',\n      'Get execution statistics for advanced MCP tools',\n      {\n        detailed: z\n          .boolean()\n          .default(false)\n          .describe('Include detailed per-tool statistics'),\n      },\n      {\n        title: 'Advanced Tools Statistics',\n        description:\n          'Performance metrics and usage statistics for advanced MCP tools',\n      },\n      async ({ detailed }) => {\n        const overview = advancedMCPToolsManager.getRegistryOverview();\n        const stats = detailed ? advancedMCPToolsManager.getToolStats() : {};\n\n        return {\n          content: [\n            {\n              type: 'text',\n              text: JSON.stringify(\n                {\n                  overview,\n                  ...(detailed && { detailedStats: stats }),\n                  generatedAt: new Date().toISOString(),\n                },\n                null,\n                2\n              ),\n            },\n          ],\n        };\n      }\n    );\n\n    logger.info(\n      `\u2705 Registered 3 proxy tools for ${advancedMCPToolsManager.getToolCount()} advanced tools`\n    );\n  }\n\n  /**\n   * Integrate all advanced tools as native MCP tools (not proxy).\n   */\n  private async integrateAdvancedToolsNatively(): Promise<void> {\n    logger.info('Integrating advanced tools as native MCP tools...');\n\n    const allTools = advancedMCPToolsManager.listAllTools();\n    const tools = allTools.tools || [];\n\n    let registeredCount = 0;\n\n    for (const tool of tools) {\n      try {\n        // Register each advanced tool as a native MCP tool using the SDK\n        this.server.tool(\n          tool.name,\n          tool.description,\n          tool.inputSchema,\n          {\n            title: tool.metadata?.title || tool.name,\n            description: tool.description,\n          },\n          async (params: unknown) => {\n            const result = await advancedMCPToolsManager.executeTool(\n              tool.name,\n              params\n            );\n\n            // Ensure result is in proper MCP format\n            if (\n              result &&\n              typeof result === 'object' &&\n              !Array.isArray(result)\n            ) {\n              if ('content' in result) {\n                return result; // Already in MCP format\n              }\n              // Convert to MCP format\n              return {\n                content: [\n                  {\n                    type: 'text',\n                    text: JSON.stringify(result, null, 2),\n                  },\n                ],\n              };\n            }\n            // Handle primitive results\n            return {\n              content: [\n                {\n                  type: 'text',\n                  text:\n                    typeof result === 'string'\n                      ? result\n                      : JSON.stringify(result, null, 2),\n                },\n              ],\n            };\n          }\n        );\n\n        registeredCount++;\n      } catch (error) {\n        logger.warn(`Failed to register tool ${tool.name}:`, error);\n      }\n    }\n\n    logger.info(\n      `\u2705 Integrated ${registeredCount}/${tools.length} advanced tools as native MCP tools`\n    );\n  }\n\n  /**\n   * Setup SDK transport routes.\n   */\n  private setupSDKRoutes(): void {\n    // Map to store active transports by session ID\n    const transports: Record<string, StreamableHTTPServerTransport> = {};\n\n    // POST handler for MCP requests\n    const mcpPostHandler = async (req: unknown, res: unknown) => {\n      try {\n        let sessionId = req.headers['mcp-session-id'] as string;\n        let transport = sessionId ? transports[sessionId] : undefined;\n\n        // Check if this is an initialization request\n        const isInitRequest = req.body && req.body.method === 'initialize';\n\n        if (!transport && isInitRequest) {\n          // Create new session and transport for initialization\n          sessionId = randomUUID();\n          // Placeholder for transport initialization when SDK is available\n          transport = {\n            handleRequest: async (\n              req: unknown,\n              res: unknown,\n              body?: unknown\n            ) => {\n              res.json({ error: 'MCP SDK not available' });\n            },\n            close: async () => {},\n          } as any;\n\n          // Store the transport\n          transports[sessionId] = transport;\n\n          // Connect transport to server\n          await this.server.connect(transport);\n          await transport.handleRequest(req, res, req.body);\n          return;\n        }\n        if (!(transport || isInitRequest)) {\n          // No session ID and not initialization\n          res.status(400).json({\n            jsonrpc: '2.0',\n            error: {\n              code: -32000,\n              message:\n                'Bad Request: No valid session ID provided. Initialize first.',\n            },\n            id: req.body?.id || null,\n          });\n          return;\n        }\n        if (transport) {\n          // Handle request with existing transport\n          await transport.handleRequest(req, res, req.body);\n          return;\n        }\n\n        // Fallback error\n        res.status(400).json({\n          jsonrpc: '2.0',\n          error: {\n            code: -32000,\n            message: 'Bad Request: Invalid request state',\n          },\n          id: req.body?.id || null,\n        });\n      } catch (error) {\n        logger.error('Error handling MCP POST request:', error);\n        if (!res.headersSent) {\n          res.status(500).json({\n            jsonrpc: '2.0',\n            error: {\n              code: -32603,\n              message: 'Internal server error',\n            },\n            id: req.body?.id || null,\n          });\n        }\n      }\n    };\n\n    // GET handler for SSE streaming\n    const mcpGetHandler = async (req: unknown, res: unknown) => {\n      try {\n        const sessionId = req.headers['mcp-session-id'] as string;\n        const transport = sessionId ? transports[sessionId] : undefined;\n\n        if (!transport) {\n          res.status(400).send('Invalid or missing session ID for SSE stream');\n          return;\n        }\n\n        await transport.handleRequest(req, res);\n      } catch (error) {\n        logger.error('Error handling MCP GET request:', error);\n        if (!res.headersSent) {\n          res.status(500).send('Error establishing SSE stream');\n        }\n      }\n    };\n\n    // DELETE handler for session termination\n    const mcpDeleteHandler = async (req: unknown, res: unknown) => {\n      try {\n        const sessionId = req.headers['mcp-session-id'] as string;\n        const transport = sessionId ? transports[sessionId] : undefined;\n\n        if (!transport) {\n          res.status(400).send('Invalid or missing session ID');\n          return;\n        }\n\n        await transport.handleRequest(req, res);\n\n        // Clean up transport\n        if (sessionId && transports[sessionId]) {\n          await transports[sessionId]?.close();\n          delete transports[sessionId];\n        }\n      } catch (error) {\n        logger.error('Error handling session termination:', error);\n        if (!res.headersSent) {\n          res.status(500).send('Error processing session termination');\n        }\n      }\n    };\n\n    // Setup routes\n    this.expressApp.post('/mcp', mcpPostHandler);\n    this.expressApp.get('/mcp', mcpGetHandler);\n    this.expressApp.delete('/mcp', mcpDeleteHandler);\n\n    // Capabilities endpoint for compatibility\n    this.expressApp.get('/capabilities', (_req, res) => {\n      res.json({\n        protocolVersion: '2024-11-05',\n        serverInfo: {\n          name: 'claude-zen-sdk-http-mcp',\n          version: '2.0.0',\n          description: 'Claude-Zen HTTP MCP Server using official SDK',\n        },\n        capabilities: {\n          tools: {},\n          resources: {\n            list: true,\n            read: true,\n          },\n          logging: {},\n        },\n        sdk: 'official-mcp-sdk',\n      });\n    });\n\n    // 404 handler\n    this.expressApp.use((req, res) => {\n      res.status(404).json({\n        error: 'Not Found',\n        message: `Endpoint ${req.originalUrl} not found`,\n        availableEndpoints: [\n          'GET /health',\n          'GET /capabilities',\n          'POST /mcp',\n          'PUT /mcp',\n          'DELETE /mcp',\n        ],\n        sdk: 'official-mcp-sdk',\n      });\n    });\n  }\n\n  /**\n   * Start the HTTP MCP server.\n   */\n  async start(): Promise<void> {\n    if (this.isRunning) {\n      logger.warn('Server already running');\n      return;\n    }\n\n    // Register tools before starting the server\n    await this.registerTools();\n\n    return new Promise((resolve, reject) => {\n      this.httpServer = this.expressApp.listen(\n        this.config.port,\n        this.config.host,\n        () => {\n          this.isRunning = true;\n          const url = `http://${this.config.host}:${this.config.port}`;\n\n          logger.info(`\uD83D\uDE80 Claude-Zen SDK HTTP MCP Server started`);\n          logger.info(`   URL: ${url}`);\n          logger.info(`   Protocol: Official MCP SDK over HTTP`);\n          logger.info(`   Health: ${url}/health`);\n          logger.info(`   Capabilities: ${url}/capabilities`);\n          logger.info(`   MCP Endpoint: ${url}/mcp`);\n\n          resolve();\n        }\n      );\n\n      this.httpServer.on('error', (error: unknown) => {\n        if (error.code === 'EADDRINUSE') {\n          reject(new Error(`Port ${this.config.port} is already in use`));\n        } else {\n          reject(error);\n        }\n      });\n    });\n  }\n\n  /**\n   * Stop the HTTP MCP server.\n   */\n  async stop(): Promise<void> {\n    if (!(this.isRunning && this.httpServer)) {\n      return;\n    }\n\n    return new Promise((resolve) => {\n      this.httpServer.close(() => {\n        this.isRunning = false;\n        logger.info('SDK HTTP MCP Server stopped');\n        resolve();\n      });\n    });\n  }\n\n  /**\n   * Get server status.\n   */\n  getStatus(): unknown {\n    return {\n      running: this.isRunning,\n      config: this.config,\n      uptime: process.uptime(),\n      sdk: 'official-mcp-sdk',\n      version: '2.0.0',\n    };\n  }\n}\n\n/**\n * Start the server if run directly.\n */\nif (import.meta.url === `file://${process.argv[1]}`) {\n  const server = new HTTPMCPServer();\n\n  // Graceful shutdown\n  process.on('SIGTERM', () => server.stop());\n  process.on('SIGINT', () => server.stop());\n\n  server.start().catch((error) => {\n    logger.error('Failed to start SDK HTTP MCP Server:', error);\n    process.exit(1);\n  });\n}\n\nexport default HTTPMCPServer;\n", "/**\n * @file Unified Configuration System.\n *\n * Central export point for the complete configuration system.\n */\n\n// Import the configManager instance for use in convenience functions\nimport { configManager } from './manager.ts';\nimport type { SystemConfiguration } from './types.ts';\n\n// Repository configuration\nexport {\n  createRepoConfig,\n  defaultRepoConfig,\n  logRepoConfigStatus,\n  type RepoConfig,\n  validateRepoConfig,\n} from './default-repo-config.ts';\n// Constants and defaults\nexport {\n  createURLBuilder,\n  DEFAULT_CONFIG,\n  DEFAULT_PORT_ALLOCATION,\n  defaultURLBuilder,\n  ENV_MAPPINGS,\n  getCORSOrigins,\n  getMCPServerURL,\n  getMonitoringDashboardURL,\n  getWebDashboardURL,\n  PORT_ALLOCATION_BY_ENV,\n  PRODUCTION_VALIDATION_SCHEMA,\n  // URL Builder functionality (consolidated from url-builder.ts)\n  URLBuilder,\n  type URLBuilderConfig,\n  VALIDATION_RULES,\n} from './defaults.ts';\n// Health checking and monitoring\nexport {\n  ConfigHealthChecker,\n  configHealthChecker,\n  createConfigHealthEndpoint,\n  createDeploymentReadinessEndpoint,\n  initializeConfigHealthChecker,\n} from './health-checker.ts';\nexport { ConfigurationLoader } from './loader.ts';\n// Core exports\nexport { ConfigurationManager, configManager } from './manager.ts';\nexport type {\n  StartupValidationOptions,\n  StartupValidationResult,\n} from './startup-validator.ts';\n// Startup validation\nexport {\n  cli as runStartupValidationCLI,\n  runStartupValidation,\n  validateAndExit,\n} from './startup-validator.ts';\n// Types\nexport type {\n  ConfigChangeEvent,\n  ConfigHealthReport,\n  ConfigurationSource,\n  ConfigValidationResult,\n  CoordinationConfig,\n  CoreConfig,\n  DatabaseConfig,\n  EnvironmentMappings,\n  InterfaceConfig,\n  MCPConfig,\n  MemoryConfig,\n  NeuralConfig,\n  OptimizationConfig,\n  SystemConfiguration,\n  TerminalConfig,\n  ValidationResult,\n  WebConfig,\n} from './types.ts';\n// Validation system\nexport { ConfigValidator } from './validator.ts';\n\n// Convenience functions\nexport const config = {\n  /**\n   * Initialize configuration system.\n   *\n   * @param configPaths\n   */\n  async init(configPaths?: string[]) {\n    return configManager?.initialize(configPaths);\n  },\n\n  /**\n   * Get configuration value.\n   *\n   * @param path\n   */\n  get<T = any>(path: string): T | undefined {\n    return configManager?.get<T>(path);\n  },\n\n  /**\n   * Get configuration section.\n   *\n   * @param section\n   */\n  getSection<K extends keyof SystemConfiguration>(\n    section: K\n  ): SystemConfiguration[K] {\n    return configManager?.getSection(section);\n  },\n\n  /**\n   * Update configuration value.\n   *\n   * @param path\n   * @param value\n   */\n  set(path: string, value: unknown) {\n    return configManager?.update(path, value);\n  },\n\n  /**\n   * Get full configuration.\n   */\n  getAll(): SystemConfiguration {\n    return configManager?.getConfig();\n  },\n\n  /**\n   * Validate configuration.\n   */\n  validate() {\n    return configManager?.validate();\n  },\n\n  /**\n   * Reload from sources.\n   */\n  reload() {\n    return configManager?.reload();\n  },\n\n  /**\n   * Export configuration.\n   *\n   * @param format\n   */\n  export(format: 'json' | 'yaml' = 'json'): string {\n    return configManager?.export(format);\n  },\n\n  /**\n   * Listen for configuration changes.\n   *\n   * @param callback\n   */\n  onChange(callback: (event: unknown) => void) {\n    configManager?.on('config:changed', callback);\n  },\n\n  /**\n   * Remove change listener.\n   *\n   * @param callback\n   */\n  removeListener(callback: (event: unknown) => void) {\n    configManager?.off('config:changed', callback);\n  },\n\n  /**\n   * Get configuration health report.\n   */\n  async getHealthReport() {\n    const { configHealthChecker } = await import('./health-checker.js');\n    return configHealthChecker?.getHealthReport();\n  },\n\n  /**\n   * Check if configuration is production ready.\n   */\n  async isProductionReady() {\n    const { configHealthChecker } = await import('./health-checker.js');\n    const deployment = await configHealthChecker?.validateForProduction();\n    return deployment.deploymentReady;\n  },\n\n  /**\n   * Check for port conflicts.\n   */\n  async checkPorts() {\n    const { configHealthChecker } = await import('./health-checker.js');\n    return configHealthChecker?.checkPortConflicts();\n  },\n\n  /**\n   * Run startup validation.\n   *\n   * @param options\n   */\n  async validateStartup(options?: unknown) {\n    const { runStartupValidation } = await import('./startup-validator.js');\n    return runStartupValidation(options as any);\n  },\n};\n\n// Legacy compatibility with old config manager\nimport type { ConfigurationManager } from './manager.ts';\nexport type ConfigManager = ConfigurationManager;\n\n// Default export for convenience\nexport default config;\n", "/**\n * @file Advanced MCP Tools Infrastructure.\n *\n * Provides the foundation for the 87 advanced MCP tools from claude-zen.\n * Extends the existing MCP infrastructure with enhanced capabilities.\n */\n\nimport * as fs from 'fs';\nimport type {\n  MCPTool,\n  MCPToolResult,\n} from '../../coordination/swarm/mcp/types.ts';\nimport { MemoryCoordinator } from '../../memory/core/memory-coordinator.ts';\n\n// This is a placeholder for the actual memoryCoordinator instance.\n// In a real application, this would be initialized and managed by the DI container.\nlet memoryCoordinator: MemoryCoordinator | null = null;\n\n// Enhanced interfaces for advanced tools\nexport interface AdvancedMCPTool {\n  readonly name: string;\n  readonly description: string;\n  readonly inputSchema: unknown;\n  readonly handler: unknown;\n  readonly category: MCPToolCategory;\n  readonly version: string;\n  readonly permissions: Permission[];\n  readonly rateLimit?: RateLimit;\n  readonly caching?: CachingPolicy;\n  readonly priority: 'low' | 'medium' | 'high' | 'critical';\n  readonly metadata: ToolMetadata;\n}\n\nexport type MCPToolCategory =\n  | 'coordination'\n  | 'monitoring'\n  | 'memory-neural'\n  | 'github-integration'\n  | 'system'\n  | 'orchestration';\n\nexport interface Permission {\n  type: 'read' | 'write' | 'execute' | 'admin';\n  resource: string;\n  conditions?: Record<string, unknown>;\n}\n\nexport interface RateLimit {\n  maxCalls: number;\n  windowMs: number;\n  burst?: number;\n}\n\nexport interface CachingPolicy {\n  enabled: boolean;\n  ttlMs: number;\n  strategy: 'memory' | 'redis' | 'file';\n}\n\nexport interface ToolMetadata {\n  author: string;\n  tags: string[];\n  examples: ToolExample[];\n  related: string[];\n  documentation?: string;\n  since: string;\n}\n\nexport interface ToolExample {\n  description: string;\n  params: Record<string, unknown>;\n  expectedResult?: unknown;\n}\n\nexport interface AdvancedMCPToolResult extends MCPToolResult {\n  success: boolean;\n  metadata?: {\n    executionTime: number;\n    cacheHit?: boolean;\n    version: string;\n    warnings?: string[];\n  };\n  metrics?: Record<string, number>;\n}\n\n// Base class for advanced tool handlers\nexport abstract class AdvancedToolHandler {\n  abstract execute(params: unknown): Promise<AdvancedMCPToolResult>;\n\n  protected validateParams(params: unknown, schema: unknown): void {\n    // Basic parameter validation\n    if (schema.required) {\n      for (const required of schema.required) {\n        if (!(required in (params || {}))) {\n          throw new Error(`Missing required parameter: ${required}`);\n        }\n      }\n    }\n  }\n\n  protected createResult(\n    success: boolean,\n    content: unknown,\n    error?: string,\n    metadata?: unknown\n  ): AdvancedMCPToolResult {\n    return {\n      success,\n      content: Array.isArray(content)\n        ? content\n        : [{ type: 'text', text: JSON.stringify(content, null, 2) }],\n      error,\n      metadata: {\n        executionTime: Date.now(),\n        version: '2.0.0',\n        ...metadata,\n      },\n    };\n  }\n}\n\n// Registry for advanced tools\nexport class AdvancedToolRegistry {\n  private tools = new Map<string, AdvancedMCPTool>();\n  private categoryIndex = new Map<MCPToolCategory, string[]>();\n  private tagIndex = new Map<string, string[]>();\n\n  registerTool(tool: AdvancedMCPTool): void {\n    // Add to main registry\n    this.tools.set(tool.name, tool);\n\n    // Update category index\n    if (!this.categoryIndex.has(tool.category)) {\n      this.categoryIndex.set(tool.category, []);\n    }\n    this.categoryIndex.get(tool.category)?.push(tool.name);\n\n    // Update tag index\n    for (const tag of tool.metadata.tags) {\n      if (!this.tagIndex.has(tag)) {\n        this.tagIndex.set(tag, []);\n      }\n      this.tagIndex.get(tag)?.push(tool.name);\n    }\n  }\n\n  getTool(name: string): AdvancedMCPTool | undefined {\n    return this.tools.get(name);\n  }\n\n  getToolsByCategory(category: MCPToolCategory): AdvancedMCPTool[] {\n    const toolNames = this.categoryIndex.get(category) || [];\n    return toolNames.map((name) => this.tools.get(name)!).filter(Boolean);\n  }\n\n  getToolsByTag(tag: string): AdvancedMCPTool[] {\n    const toolNames = this.tagIndex.get(tag) || [];\n    return toolNames.map((name) => this.tools.get(name)!).filter(Boolean);\n  }\n\n  getAllTools(): AdvancedMCPTool[] {\n    return Array.from(this.tools.values());\n  }\n\n  getToolCount(): number {\n    return this.tools.size;\n  }\n\n  getCategorySummary(): Record<MCPToolCategory, number> {\n    const summary: Record<string, number> = {};\n    for (const [category, tools] of this.categoryIndex.entries()) {\n      summary[category] = tools.length;\n    }\n    return summary as Record<MCPToolCategory, number>;\n  }\n}\n\n// Global registry instance\nexport const advancedToolRegistry = new AdvancedToolRegistry();\n\nclass StoreDiscoveryPatternHandler extends AdvancedToolHandler {\n  async execute(params: unknown): Promise<AdvancedMCPToolResult> {\n    this.validateParams(params, memoryStoreDiscoveryPatternTool.inputSchema);\n    try {\n      // A real implementation would get this from the DI container\n      if (!memoryCoordinator) {\n        memoryCoordinator = new MemoryCoordinator({\n          enabled: true,\n          consensus: { quorum: 0.5, timeout: 5000, strategy: 'majority' },\n          distributed: {\n            replication: 1,\n            consistency: 'strong',\n            partitioning: 'hash',\n          },\n          optimization: {\n            autoCompaction: true,\n            cacheEviction: 'lru',\n            memoryThreshold: 0.8,\n          },\n        });\n      }\n\n      const { pattern } = params;\n      const { domainName } = pattern;\n\n      const coordinationParams = {\n        type: 'write' as const,\n        sessionId: 'discovery_patterns', // Using a fixed session ID for now\n        target: domainName,\n        metadata: { data: pattern },\n      };\n\n      const decision = await memoryCoordinator.coordinate(coordinationParams);\n\n      return this.createResult(true, {\n        message: `Discovery pattern for domain '${domainName}' stored successfully.`,\n        decision,\n      });\n    } catch (error) {\n      return this.createResult(false, null, error.message);\n    }\n  }\n}\n\nexport const memoryStoreDiscoveryPatternTool: AdvancedMCPTool = {\n  name: 'memory_store_discovery_pattern',\n  description: 'Store a discovery pattern in memory for future use.',\n  category: 'memory-neural',\n  version: '1.0.0',\n  permissions: [{ type: 'write', resource: 'memory:discovery_patterns' }],\n  priority: 'medium',\n  inputSchema: {\n    type: 'object',\n    properties: {\n      pattern: {\n        type: 'object',\n        properties: {\n          domainName: { type: 'string' },\n          files: { type: 'array', items: { type: 'string' } },\n          dependencies: { type: 'array', items: { type: 'string' } },\n          confidenceScore: { type: 'number' },\n        },\n        required: ['domainName', 'files', 'dependencies', 'confidenceScore'],\n      },\n    },\n    required: ['pattern'],\n  },\n  handler: new StoreDiscoveryPatternHandler(),\n  metadata: {\n    author: 'Gemini',\n    tags: ['memory', 'discovery', 'learning'],\n    examples: [\n      {\n        description: 'Store a discovery pattern for a new domain.',\n        params: {\n          pattern: {\n            domainName: 'my-new-domain',\n            files: ['file1.ts', 'file2.ts'],\n            dependencies: ['dependency1', 'dependency2'],\n            confidenceScore: 0.8,\n          },\n        },\n      },\n    ],\n    related: ['memory_retrieve_discovery_pattern'],\n    since: '2025-08-10',\n  },\n};\n\nadvancedToolRegistry.registerTool(memoryStoreDiscoveryPatternTool);\n\nclass RetrieveDiscoveryPatternHandler extends AdvancedToolHandler {\n  async execute(params: unknown): Promise<AdvancedMCPToolResult> {\n    this.validateParams(params, memoryRetrieveDiscoveryPatternTool.inputSchema);\n    try {\n      if (!memoryCoordinator) {\n        throw new Error(\n          'Memory coordinator not initialized. Run memory_init first.'\n        );\n      }\n\n      const { domainName } = params;\n\n      const coordinationParams = {\n        type: 'read' as const,\n        sessionId: 'discovery_patterns', // Using a fixed session ID for now\n        target: domainName,\n      };\n\n      const result = await memoryCoordinator.coordinate(coordinationParams);\n\n      return this.createResult(true, {\n        message: `Discovery pattern for domain '${domainName}' retrieved successfully.`,\n        pattern: result,\n      });\n    } catch (error) {\n      return this.createResult(false, null, error.message);\n    }\n  }\n}\n\nexport const memoryRetrieveDiscoveryPatternTool: AdvancedMCPTool = {\n  name: 'memory_retrieve_discovery_pattern',\n  description: 'Retrieve a discovery pattern from memory.',\n  category: 'memory-neural',\n  version: '1.0.0',\n  permissions: [{ type: 'read', resource: 'memory:discovery_patterns' }],\n  priority: 'medium',\n  inputSchema: {\n    type: 'object',\n    properties: {\n      domainName: { type: 'string' },\n    },\n    required: ['domainName'],\n  },\n  handler: new RetrieveDiscoveryPatternHandler(),\n  metadata: {\n    author: 'Gemini',\n    tags: ['memory', 'discovery', 'learning'],\n    examples: [\n      {\n        description: 'Retrieve a discovery pattern for a domain.',\n        params: {\n          domainName: 'my-new-domain',\n        },\n      },\n    ],\n    related: ['memory_store_discovery_pattern'],\n    since: '2025-08-10',\n  },\n};\n\nadvancedToolRegistry.registerTool(memoryRetrieveDiscoveryPatternTool);\n\nclass FindSimilarDiscoveryPatternsHandler extends AdvancedToolHandler {\n  async execute(params: unknown): Promise<AdvancedMCPToolResult> {\n    this.validateParams(\n      params,\n      memoryFindSimilarDiscoveryPatternsTool.inputSchema\n    );\n    try {\n      if (!memoryCoordinator) {\n        throw new Error(\n          'Memory coordinator not initialized. Run memory_init first.'\n        );\n      }\n\n      const { pattern, similarityThreshold } = params;\n\n      // This is a placeholder for getting all patterns.\n      // A real implementation would need a way to list all stored patterns.\n      const allPatternsRaw = await memoryCoordinator.coordinate({\n        type: 'read',\n        sessionId: 'discovery_patterns',\n        target: '*', // Assuming a wildcard to get all patterns\n      });\n\n      // Assuming allPatternsRaw.metadata contains the data\n      const allPatterns = allPatternsRaw.metadata?.data || [];\n\n      const similarPatterns = allPatterns.filter((p: unknown) => {\n        const jaccardIndex = this.calculateJaccardIndex(pattern.files, p.files);\n        return jaccardIndex >= similarityThreshold;\n      });\n\n      return this.createResult(true, {\n        message: `Found ${similarPatterns.length} similar discovery patterns.`,\n        patterns: similarPatterns,\n      });\n    } catch (error) {\n      return this.createResult(false, null, error.message);\n    }\n  }\n\n  private calculateJaccardIndex(set1: string[], set2: string[]): number {\n    const intersection = new Set(set1.filter((x) => new Set(set2).has(x)));\n    const union = new Set([...set1, ...set2]);\n    return intersection.size / union.size;\n  }\n}\n\nexport const memoryFindSimilarDiscoveryPatternsTool: AdvancedMCPTool = {\n  name: 'memory_find_similar_discovery_patterns',\n  description: 'Find similar discovery patterns in memory.',\n  category: 'memory-neural',\n  version: '1.0.0',\n  permissions: [{ type: 'read', resource: 'memory:discovery_patterns' }],\n  priority: 'medium',\n  inputSchema: {\n    type: 'object',\n    properties: {\n      pattern: {\n        type: 'object',\n        properties: {\n          domainName: { type: 'string' },\n          files: { type: 'array', items: { type: 'string' } },\n          dependencies: { type: 'array', items: { type: 'string' } },\n          confidenceScore: { type: 'number' },\n        },\n        required: ['domainName', 'files', 'dependencies', 'confidenceScore'],\n      },\n      similarityThreshold: {\n        type: 'number',\n        minimum: 0,\n        maximum: 1,\n        default: 0.5,\n      },\n    },\n    required: ['pattern'],\n  },\n  handler: new FindSimilarDiscoveryPatternsHandler(),\n  metadata: {\n    author: 'Gemini',\n    tags: ['memory', 'discovery', 'learning', 'pattern-matching'],\n    examples: [\n      {\n        description: 'Find similar discovery patterns for a new domain.',\n        params: {\n          pattern: {\n            domainName: 'my-new-domain',\n            files: ['file1.ts', 'file2.ts'],\n            dependencies: ['dependency1', 'dependency2'],\n            confidenceScore: 0.8,\n          },\n          similarityThreshold: 0.7,\n        },\n      },\n    ],\n    related: [\n      'memory_store_discovery_pattern',\n      'memory_retrieve_discovery_pattern',\n    ],\n    since: '2025-08-10',\n  },\n};\n\nadvancedToolRegistry.registerTool(memoryFindSimilarDiscoveryPatternsTool);\n\nclass LogSwarmOperationHandler extends AdvancedToolHandler {\n  async execute(params: unknown): Promise<AdvancedMCPToolResult> {\n    this.validateParams(params, memoryLogSwarmOperationTool.inputSchema);\n    try {\n      if (!memoryCoordinator) {\n        throw new Error(\n          'Memory coordinator not initialized. Run memory_init first.'\n        );\n      }\n\n      const { operation } = params;\n\n      const coordinationParams = {\n        type: 'write' as const,\n        sessionId: 'swarm_operations', // Using a fixed session ID for now\n        target: `${operation.domainName}-${Date.now()}`,\n        metadata: { data: operation },\n      };\n\n      const decision = await memoryCoordinator.coordinate(coordinationParams);\n\n      return this.createResult(true, {\n        message: 'Swarm operation logged successfully.',\n        decision,\n      });\n    } catch (error) {\n      return this.createResult(false, null, error.message);\n    }\n  }\n}\n\nexport const memoryLogSwarmOperationTool: AdvancedMCPTool = {\n  name: 'memory_log_swarm_operation',\n  description: 'Log a swarm operation for continuous learning.',\n  category: 'memory-neural',\n  version: '1.0.0',\n  permissions: [{ type: 'write', resource: 'memory:swarm_operations' }],\n  priority: 'medium',\n  inputSchema: {\n    type: 'object',\n    properties: {\n      operation: {\n        type: 'object',\n        properties: {\n          type: { type: 'string', enum: ['bugfix', 'feature', 'refactor'] },\n          domainName: { type: 'string' },\n          filesModified: { type: 'array', items: { type: 'string' } },\n          outcome: { type: 'string', enum: ['success', 'failure'] },\n        },\n        required: ['type', 'domainName', 'filesModified', 'outcome'],\n      },\n    },\n    required: ['operation'],\n  },\n  handler: new LogSwarmOperationHandler(),\n  metadata: {\n    author: 'Gemini',\n    tags: ['memory', 'swarm', 'learning', 'logging'],\n    examples: [\n      {\n        description: 'Log a successful bugfix operation.',\n        params: {\n          operation: {\n            type: 'bugfix',\n            domainName: 'my-new-domain',\n            filesModified: ['file1.ts'],\n            outcome: 'success',\n          },\n        },\n      },\n    ],\n    related: ['memory_update_discovery_pattern_from_swarm_operation'],\n    since: '2025-08-10',\n  },\n};\n\nadvancedToolRegistry.registerTool(memoryLogSwarmOperationTool);\n\nclass UpdateDiscoveryPatternFromSwarmOperationHandler extends AdvancedToolHandler {\n  async execute(params: unknown): Promise<AdvancedMCPToolResult> {\n    this.validateParams(\n      params,\n      memoryUpdateDiscoveryPatternFromSwarmOperationTool.inputSchema\n    );\n    try {\n      if (!memoryCoordinator) {\n        throw new Error(\n          'Memory coordinator not initialized. Run memory_init first.'\n        );\n      }\n\n      const { operation } = params;\n      const { domainName, filesModified, outcome } = operation;\n\n      // Retrieve the existing discovery pattern\n      const existingPatternRaw = await memoryCoordinator.coordinate({\n        type: 'read',\n        sessionId: 'discovery_patterns',\n        target: domainName,\n      });\n\n      const existingPattern = existingPatternRaw.metadata?.data;\n\n      if (!existingPattern) {\n        throw new Error(\n          `Discovery pattern for domain '${domainName}' not found.`\n        );\n      }\n\n      // Update the discovery pattern based on the swarm operation\n      if (outcome === 'success') {\n        existingPattern.confidenceScore = Math.min(\n          1,\n          existingPattern.confidenceScore + 0.1\n        );\n        existingPattern.files = [\n          ...new Set([...existingPattern.files, ...filesModified]),\n        ];\n      } else {\n        existingPattern.confidenceScore = Math.max(\n          0,\n          existingPattern.confidenceScore - 0.1\n        );\n      }\n\n      // Store the updated discovery pattern\n      const coordinationParams = {\n        type: 'write' as const,\n        sessionId: 'discovery_patterns',\n        target: domainName,\n        metadata: { data: existingPattern },\n      };\n\n      const decision = await memoryCoordinator.coordinate(coordinationParams);\n\n      return this.createResult(true, {\n        message: `Discovery pattern for domain '${domainName}' updated successfully.`,\n        decision,\n      });\n    } catch (error) {\n      return this.createResult(false, null, error.message);\n    }\n  }\n}\n\nexport const memoryUpdateDiscoveryPatternFromSwarmOperationTool: AdvancedMCPTool =\n  {\n    name: 'memory_update_discovery_pattern_from_swarm_operation',\n    description: 'Update a discovery pattern based on a swarm operation.',\n    category: 'memory-neural',\n    version: '1.0.0',\n    permissions: [{ type: 'write', resource: 'memory:discovery_patterns' }],\n    priority: 'medium',\n    inputSchema: {\n      type: 'object',\n      properties: {\n        operation: {\n          type: 'object',\n          properties: {\n            type: { type: 'string', enum: ['bugfix', 'feature', 'refactor'] },\n            domainName: { type: 'string' },\n            filesModified: { type: 'array', items: { type: 'string' } },\n            outcome: { type: 'string', enum: ['success', 'failure'] },\n          },\n          required: ['type', 'domainName', 'filesModified', 'outcome'],\n        },\n      },\n      required: ['operation'],\n    },\n    handler: new UpdateDiscoveryPatternFromSwarmOperationHandler(),\n    metadata: {\n      author: 'Gemini',\n      tags: ['memory', 'swarm', 'learning', 'update'],\n      examples: [\n        {\n          description: 'Update a discovery pattern after a successful bugfix.',\n          params: {\n            operation: {\n              type: 'bugfix',\n              domainName: 'my-new-domain',\n              filesModified: ['file1.ts'],\n              outcome: 'success',\n            },\n          },\n        },\n      ],\n      related: ['memory_log_swarm_operation'],\n      since: '2025-08-10',\n    },\n  };\n\nadvancedToolRegistry.registerTool(\n  memoryUpdateDiscoveryPatternFromSwarmOperationTool\n);\n\nclass ExportDiscoveryPatternsHandler extends AdvancedToolHandler {\n  async execute(params: unknown): Promise<AdvancedMCPToolResult> {\n    this.validateParams(params, memoryExportDiscoveryPatternsTool.inputSchema);\n    try {\n      if (!memoryCoordinator) {\n        throw new Error(\n          'Memory coordinator not initialized. Run memory_init first.'\n        );\n      }\n\n      const { filePath } = params;\n\n      // This is a placeholder for getting all patterns.\n      // A real implementation would need a way to list all stored patterns.\n      const allPatternsRaw = await memoryCoordinator.coordinate({\n        type: 'read',\n        sessionId: 'discovery_patterns',\n        target: '*', // Assuming a wildcard to get all patterns\n      });\n\n      const allPatterns = allPatternsRaw.metadata?.data || [];\n\n      fs.writeFileSync(filePath, JSON.stringify(allPatterns, null, 2));\n\n      return this.createResult(true, {\n        message: `Successfully exported ${allPatterns.length} discovery patterns to ${filePath}.`,\n      });\n    } catch (error) {\n      return this.createResult(false, null, error.message);\n    }\n  }\n}\n\nexport const memoryExportDiscoveryPatternsTool: AdvancedMCPTool = {\n  name: 'memory_export_discovery_patterns',\n  description: 'Export all discovery patterns to a file.',\n  category: 'memory-neural',\n  version: '1.0.0',\n  permissions: [\n    { type: 'read', resource: 'memory:discovery_patterns' },\n    { type: 'write', resource: 'filesystem' },\n  ],\n  priority: 'medium',\n  inputSchema: {\n    type: 'object',\n    properties: {\n      filePath: { type: 'string' },\n    },\n    required: ['filePath'],\n  },\n  handler: new ExportDiscoveryPatternsHandler(),\n  metadata: {\n    author: 'Gemini',\n    tags: ['memory', 'discovery', 'learning', 'export'],\n    examples: [\n      {\n        description: 'Export all discovery patterns to a JSON file.',\n        params: {\n          filePath: 'discovery-patterns.json',\n        },\n      },\n    ],\n    related: ['memory_store_discovery_pattern'],\n    since: '2025-08-10',\n  },\n};\n\nadvancedToolRegistry.registerTool(memoryExportDiscoveryPatternsTool);\n\nexport default advancedToolRegistry;\n", "/**\n * @file Advanced Memory Coordination System\n * Provides advanced coordination capabilities for distributed memory management.\n */\n\nimport { EventEmitter } from 'node:events';\n\n// BackendInterface type for compatibility - matches core memory-system.ts\nexport interface BackendInterface {\n  initialize(): Promise<void>;\n  store(key: string, value: unknown, namespace?: string): Promise<unknown>;\n  retrieve(key: string, namespace?: string): Promise<any | null>;\n  search(pattern: string, namespace?: string): Promise<Record<string, unknown>>;\n  delete(key: string, namespace?: string): Promise<boolean>;\n  listNamespaces(): Promise<string[]>;\n  getStats(): Promise<unknown>;\n  close?(): Promise<void>;\n}\n\nexport interface MemoryCoordinationConfig {\n  enabled: boolean;\n  consensus: {\n    quorum: number;\n    timeout: number;\n    strategy: 'majority' | 'unanimous' | 'leader';\n  };\n  distributed: {\n    replication: number;\n    consistency: 'eventual' | 'strong' | 'weak';\n    partitioning: 'hash' | 'range' | 'consistent';\n  };\n  optimization: {\n    autoCompaction: boolean;\n    cacheEviction: 'lru' | 'lfu' | 'adaptive';\n    memoryThreshold: number;\n  };\n}\n\nexport interface MemoryNode {\n  id: string;\n  backend: BackendInterface;\n  status: 'active' | 'inactive' | 'degraded';\n  lastHeartbeat: number;\n  load: number;\n  capacity: number;\n}\n\nexport interface CoordinationDecision {\n  id: string;\n  type: 'read' | 'write' | 'delete' | 'sync' | 'repair';\n  sessionId: string;\n  target: string;\n  participants: string[];\n  status: 'pending' | 'executing' | 'completed' | 'failed';\n  timestamp: number;\n  metadata?: Record<string, unknown>;\n}\n\n/**\n * Advanced Memory Coordinator.\n * Manages distributed memory operations with consensus and optimization.\n *\n * @example\n */\nexport class MemoryCoordinator extends EventEmitter {\n  private nodes = new Map<string, MemoryNode>();\n  private decisions = new Map<string, CoordinationDecision>();\n  private config: MemoryCoordinationConfig;\n\n  constructor(config: MemoryCoordinationConfig) {\n    super();\n    this.config = config;\n  }\n\n  /**\n   * Register a memory node for coordination.\n   *\n   * @param id\n   * @param backend\n   */\n  async registerNode(id: string, backend: BackendInterface): Promise<void> {\n    const node: MemoryNode = {\n      id,\n      backend,\n      status: 'active',\n      lastHeartbeat: Date.now(),\n      load: 0,\n      capacity: 1000, // Default capacity\n    };\n\n    this.nodes.set(id, node);\n    this.emit('nodeRegistered', { nodeId: id, node });\n  }\n\n  /**\n   * Unregister a memory node.\n   *\n   * @param id\n   */\n  async unregisterNode(id: string): Promise<void> {\n    this.nodes.delete(id);\n    this.emit('nodeUnregistered', { nodeId: id });\n  }\n\n  /**\n   * Coordinate a distributed memory operation.\n   *\n   * @param operation\n   */\n  async coordinate(\n    operation: Partial<CoordinationDecision>\n  ): Promise<CoordinationDecision> {\n    const decision: CoordinationDecision = {\n      id: `coord_${Date.now()}_${Math.random().toString(36).slice(2)}`,\n      type: operation.type || 'read',\n      sessionId: operation.sessionId || '',\n      target: operation.target || '',\n      participants: this.selectParticipants(operation.type || 'read'),\n      status: 'pending',\n      timestamp: Date.now(),\n      metadata: operation.metadata,\n    };\n\n    this.decisions.set(decision.id, decision);\n    this.emit('coordinationStarted', decision);\n\n    try {\n      await this.executeCoordination(decision);\n      decision.status = 'completed';\n      this.emit('coordinationCompleted', decision);\n    } catch (error) {\n      decision.status = 'failed';\n      this.emit('coordinationFailed', { decision, error });\n      throw error;\n    }\n\n    return decision;\n  }\n\n  /**\n   * Select optimal nodes for an operation.\n   *\n   * @param operationType\n   */\n  private selectParticipants(operationType: string): string[] {\n    const activeNodes = Array.from(this.nodes.entries())\n      .filter(([, node]) => node?.status === 'active')\n      .sort(([, a], [, b]) => a.load - b.load);\n\n    if (operationType === 'read') {\n      // For reads, prefer nodes with lower load\n      return activeNodes?.slice(0, 1).map(([id]) => id);\n    }\n\n    if (operationType === 'write') {\n      // For writes, use replication factor\n      const replicationCount = Math.min(\n        this.config.distributed.replication,\n        activeNodes.length\n      );\n      return activeNodes?.slice(0, replicationCount).map(([id]) => id);\n    }\n\n    // Default to single node for other operations\n    return activeNodes?.slice(0, 1).map(([id]) => id);\n  }\n\n  /**\n   * Execute coordination decision.\n   *\n   * @param decision\n   */\n  private async executeCoordination(\n    decision: CoordinationDecision\n  ): Promise<void> {\n    decision.status = 'executing';\n\n    switch (decision.type) {\n      case 'read':\n        await this.executeRead(decision);\n        break;\n      case 'write':\n        await this.executeWrite(decision);\n        break;\n      case 'delete':\n        await this.executeDelete(decision);\n        break;\n      case 'sync':\n        await this.executeSync(decision);\n        break;\n      case 'repair':\n        await this.executeRepair(decision);\n        break;\n      default:\n        throw new Error(`Unknown coordination type: ${decision.type}`);\n    }\n  }\n\n  /**\n   * Execute distributed read operation.\n   *\n   * @param decision\n   */\n  private async executeRead(decision: CoordinationDecision): Promise<unknown> {\n    const node = this.nodes.get(decision.participants[0]);\n    if (!node) {\n      throw new Error(`Node not found: ${decision.participants[0]}`);\n    }\n\n    return await node?.backend?.retrieve(decision.target);\n  }\n\n  /**\n   * Execute distributed write operation.\n   *\n   * @param decision\n   */\n  private async executeWrite(decision: CoordinationDecision): Promise<void> {\n    const writePromises = decision.participants.map(async (nodeId) => {\n      const node = this.nodes.get(nodeId);\n      if (!node) {\n        throw new Error(`Node not found: ${nodeId}`);\n      }\n\n      return await node?.backend?.store(\n        decision.target,\n        decision.metadata?.data\n      );\n    });\n\n    if (this.config.distributed.consistency === 'strong') {\n      // Wait for all writes to complete\n      await Promise.all(writePromises);\n    } else {\n      // Wait for quorum\n      const quorum = Math.ceil(\n        decision.participants.length * this.config.consensus.quorum\n      );\n      await Promise.race([\n        Promise.all(writePromises.slice(0, quorum)),\n        new Promise((_, reject) =>\n          setTimeout(\n            () => reject(new Error('Quorum timeout')),\n            this.config.consensus.timeout\n          )\n        ),\n      ]);\n    }\n  }\n\n  /**\n   * Execute distributed delete operation.\n   *\n   * @param decision\n   */\n  private async executeDelete(decision: CoordinationDecision): Promise<void> {\n    const deletePromises = decision.participants.map(async (nodeId) => {\n      const node = this.nodes.get(nodeId);\n      if (!node) {\n        throw new Error(`Node not found: ${nodeId}`);\n      }\n\n      return await node?.backend?.delete(decision.target);\n    });\n\n    await Promise.all(deletePromises);\n  }\n\n  /**\n   * Execute sync operation between nodes.\n   *\n   * @param decision\n   */\n  private async executeSync(decision: CoordinationDecision): Promise<void> {\n    // Synchronize data between nodes\n    const sourceNode = this.nodes.get(decision.participants[0]);\n    if (!sourceNode) {\n      throw new Error(`Source node not found: ${decision.participants[0]}`);\n    }\n\n    for (let i = 1; i < decision.participants.length; i++) {\n      const targetNode = this.nodes.get(decision.participants[i]);\n      if (!targetNode) {\n        continue;\n      }\n\n      const data = await sourceNode?.backend?.retrieve(decision.target);\n      if (data) {\n        await targetNode?.backend?.store(decision.target, data);\n      }\n    }\n  }\n\n  /**\n   * Execute repair operation for inconsistent data.\n   *\n   * @param decision\n   */\n  private async executeRepair(decision: CoordinationDecision): Promise<void> {\n    // Implement repair logic for data inconsistencies\n    const values = await Promise.all(\n      decision.participants.map(async (nodeId) => {\n        const node = this.nodes.get(nodeId);\n        if (!node) return null;\n\n        try {\n          return await node?.backend?.retrieve(decision.target);\n        } catch {\n          return null;\n        }\n      })\n    );\n\n    // Find the most common value (simple consensus)\n    const validValues = values.filter((v) => v !== null);\n    if (validValues.length === 0) return;\n\n    const valueCount = new Map();\n    validValues.forEach((value) => {\n      const key = JSON.stringify(value);\n      valueCount.set(key, (valueCount.get(key) || 0) + 1);\n    });\n\n    const [winningValue] = Array.from(valueCount.entries()).sort(\n      ([, a], [, b]) => b - a\n    )[0];\n\n    const correctValue = JSON.parse(winningValue);\n\n    // Repair all nodes with the correct value\n    const repairPromises = decision.participants.map(async (nodeId) => {\n      const node = this.nodes.get(nodeId);\n      if (!node) return;\n\n      await node?.backend?.store(decision.target, correctValue);\n    });\n\n    await Promise.all(repairPromises);\n  }\n\n  /**\n   * Get coordination statistics.\n   */\n  getStats() {\n    return {\n      nodes: {\n        total: this.nodes.size,\n        active: Array.from(this.nodes.values()).filter(\n          (n) => n.status === 'active'\n        ).length,\n        degraded: Array.from(this.nodes.values()).filter(\n          (n) => n.status === 'degraded'\n        ).length,\n      },\n      decisions: {\n        total: this.decisions.size,\n        pending: Array.from(this.decisions.values()).filter(\n          (d) => d.status === 'pending'\n        ).length,\n        executing: Array.from(this.decisions.values()).filter(\n          (d) => d.status === 'executing'\n        ).length,\n        completed: Array.from(this.decisions.values()).filter(\n          (d) => d.status === 'completed'\n        ).length,\n        failed: Array.from(this.decisions.values()).filter(\n          (d) => d.status === 'failed'\n        ).length,\n      },\n      config: this.config,\n    };\n  }\n\n  /**\n   * Store data across distributed memory nodes.\n   *\n   * @param key\n   * @param data\n   * @param options\n   * @param options.ttl\n   * @param options.replicas\n   */\n  async store(\n    key: string,\n    data: unknown,\n    options?: { ttl?: number; replicas?: number }\n  ): Promise<void> {\n    const decision = await this.coordinate({\n      type: 'write',\n      target: key,\n      metadata: { data, options },\n    });\n\n    if (decision.status === 'failed') {\n      throw new Error(`Failed to store data for key: ${key}`);\n    }\n  }\n\n  /**\n   * Retrieve data from distributed memory nodes.\n   *\n   * @param key\n   */\n  async get(key: string): Promise<unknown> {\n    const decision = await this.coordinate({\n      type: 'read',\n      target: key,\n    });\n\n    if (decision.status === 'failed') {\n      throw new Error(`Failed to retrieve data for key: ${key}`);\n    }\n\n    return await this.executeRead(decision);\n  }\n\n  /**\n   * Delete data from distributed memory nodes.\n   *\n   * @param key\n   */\n  async deleteEntry(key: string): Promise<void> {\n    const decision = await this.coordinate({\n      type: 'delete',\n      target: key,\n    });\n\n    if (decision.status === 'failed') {\n      throw new Error(`Failed to delete data for key: ${key}`);\n    }\n  }\n\n  /**\n   * List all keys matching a pattern across distributed nodes.\n   *\n   * @param pattern\n   */\n  async list(pattern: string): Promise<Array<{ key: string; value: unknown }>> {\n    const results: Array<{ key: string; value: unknown }> = [];\n\n    // Get all active nodes\n    const activeNodes = Array.from(this.nodes.values()).filter(\n      (n) => n.status === 'active'\n    );\n\n    for (const node of activeNodes) {\n      try {\n        // Assuming backend implements a keys() method\n        if (\n          'keys' in node?.backend &&\n          typeof node?.backend?.keys === 'function'\n        ) {\n          const keys = await node?.backend?.keys();\n          const matchingKeys = keys.filter((key) =>\n            this.matchesPattern(key, pattern)\n          );\n\n          for (const key of matchingKeys) {\n            try {\n              const value = await node?.backend?.retrieve(key);\n              results?.push({ key, value });\n            } catch (_error) {}\n          }\n        }\n      } catch (_error) {}\n    }\n\n    // Remove duplicates (in case of replication)\n    const uniqueResults = new Map();\n    for (const result of results) {\n      if (!uniqueResults?.has(result?.key)) {\n        uniqueResults?.set(result?.key, result);\n      }\n    }\n\n    return Array.from(uniqueResults?.values());\n  }\n\n  /**\n   * Simple pattern matching for key listing.\n   *\n   * @param key\n   * @param pattern\n   */\n  private matchesPattern(key: string, pattern: string): boolean {\n    // Convert simple glob pattern to regex\n    const regexPattern = pattern\n      .replace(/\\\\/g, '\\\\\\\\')\n      .replace(/\\*/g, '.*')\n      .replace(/\\?/g, '.')\n      .replace(/\\[/g, '\\\\[')\n      .replace(/\\]/g, '\\\\]');\n\n    const regex = new RegExp(`^${regexPattern}$`);\n    return regex.test(key);\n  }\n\n  /**\n   * Health check for coordinator.\n   */\n  async healthCheck(): Promise<{ status: string; details: unknown }> {\n    const stats = this.getStats();\n    const unhealthyNodes = Array.from(this.nodes.values()).filter(\n      (n) => n.status !== 'active'\n    );\n\n    return {\n      status: unhealthyNodes.length === 0 ? 'healthy' : 'degraded',\n      details: {\n        ...stats,\n        unhealthyNodes: unhealthyNodes?.map((n) => ({\n          id: n.id,\n          status: n.status,\n        })),\n      },\n    };\n  }\n}\n"],
  "mappings": "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",
  "names": ["logger", "config", "path", "config", "path", "logger", "path", "fs", "path", "logger", "config", "config", "logger", "EventEmitter", "config", "process", "logger", "path", "configHealthChecker", "runStartupValidation", "fs", "EventEmitter", "EventEmitter", "config", "logger", "req", "res", "resolve", "logger", "config"]
}
