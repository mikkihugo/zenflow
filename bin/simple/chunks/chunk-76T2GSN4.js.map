{
  "version": 3,
  "sources": ["../../src/config/startup-validator.ts"],
  "sourcesContent": ["/**\n * @file Startup Configuration Validator.\n *\n * Production-ready configuration validation that runs at startup.\n * Fails fast if configuration is invalid for deployment.\n */\n\nimport { getLogger } from './logging-config.ts';\n\nconst logger = getLogger('src-config-startup-validator');\n\nimport * as process from 'node:process';\nimport { configHealthChecker } from './health-checker.ts';\nimport { configManager } from './manager.ts';\nimport type { ValidationResult } from './types.ts';\n\n/**\n * Startup validation options.\n *\n * @example\n */\nexport interface StartupValidationOptions {\n  /** Fail fast on any configuration errors */\n  strict?: boolean;\n  /** Check production readiness even in development */\n  enforceProductionStandards?: boolean;\n  /** Skip certain validation categories */\n  skipValidation?: Array<'structure' | 'security' | 'performance' | 'ports' | 'environment'>;\n  /** Output format for validation results */\n  outputFormat?: 'console' | 'json' | 'silent';\n}\n\n/**\n * Startup validation result.\n *\n * @example\n */\nexport interface StartupValidationResult {\n  success: boolean;\n  errors: string[];\n  warnings: string[];\n  blockers: string[];\n  environment: string;\n  timestamp: number;\n  validationDetails: ValidationResult;\n  portConflicts: Array<{\n    port: number;\n    services: string[];\n    severity: 'error' | 'warning';\n  }>;\n  exitCode: number;\n}\n\n/**\n * Run comprehensive startup validation.\n *\n * @param options - Validation options.\n * @returns Validation result.\n * @example\n */\nexport async function runStartupValidation(\n  options: StartupValidationOptions = {}\n): Promise<StartupValidationResult> {\n  const {\n    strict = process.env['NODE_ENV'] === 'production',\n    enforceProductionStandards = process.env['NODE_ENV'] === 'production',\n    skipValidation = [],\n    outputFormat = 'console',\n  } = options;\n\n  const startTime = Date.now();\n  const environment = process.env['NODE_ENV'] || 'development';\n\n  if (outputFormat === 'console') {\n    logger.info('\\n\uD83D\uDD0D Running Claude-Zen configuration validation...');\n    logger.info(`Environment: ${environment}`);\n    logger.info(`Strict mode: ${strict ? '\u2705 Enabled' : '\u274C Disabled'}`);\n  }\n\n  try {\n    // Initialize configuration manager\n    const configValidation = await configManager?.initialize();\n\n    // Initialize health checker\n    await configHealthChecker?.initialize({ enableMonitoring: false });\n\n    const errors: string[] = [];\n    const warnings: string[] = [];\n    const blockers: string[] = [];\n\n    // 1. Structure validation (unless skipped)\n    if (!skipValidation.includes('structure')) {\n      if (outputFormat === 'console') {\n        process.stdout.write('\uD83D\uDCCB Validating configuration structure... ');\n      }\n\n      if (!configValidation?.valid) {\n        errors.push(...configValidation?.errors);\n        if (strict) {\n          blockers.push(...configValidation?.errors);\n        }\n      }\n      warnings.push(...configValidation?.warnings);\n\n      if (outputFormat === 'console') {\n        logger.info(configValidation?.valid ? '\u2705' : '\u274C');\n      }\n    }\n\n    // 2. Enhanced validation with production checks\n    const detailedValidation = await configHealthChecker?.getHealthReport(true);\n    const validationDetails = detailedValidation.validationDetails!;\n\n    // 3. Security validation (unless skipped)\n    if (!skipValidation.includes('security')) {\n      if (outputFormat === 'console') {\n        process.stdout.write('\uD83D\uDD12 Validating security configuration... ');\n      }\n\n      if (validationDetails.securityIssues.length > 0) {\n        errors.push(...validationDetails.securityIssues);\n        if (enforceProductionStandards || environment === 'production') {\n          blockers.push(...validationDetails.securityIssues);\n        }\n      }\n\n      if (outputFormat === 'console') {\n        logger.info(validationDetails.securityIssues.length === 0 ? '\u2705' : '\u274C');\n      }\n    }\n\n    // 4. Port conflict validation (unless skipped)\n    let portConflicts: Array<{\n      port: number;\n      services: string[];\n      severity: 'error' | 'warning';\n    }> = [];\n    if (!skipValidation.includes('ports')) {\n      if (outputFormat === 'console') {\n        process.stdout.write('\uD83C\uDF10 Validating port configuration... ');\n      }\n\n      const portCheck = await configHealthChecker?.checkPortConflicts();\n      portConflicts = portCheck.conflicts;\n\n      if (portConflicts.length > 0) {\n        const criticalConflicts = portConflicts.filter((c) => c.severity === 'error');\n        if (criticalConflicts.length > 0) {\n          errors.push(\n            ...criticalConflicts.map(\n              (c) => `Port conflict: ${c.port} used by ${c.services.join(', ')}`\n            )\n          );\n          blockers.push(...criticalConflicts.map((c) => `Critical port conflict on ${c.port}`));\n        }\n\n        const warningConflicts = portConflicts.filter((c) => c.severity === 'warning');\n        warnings.push(\n          ...warningConflicts.map((c) => `Port ${c.port} shared by ${c.services.join(', ')}`)\n        );\n      }\n\n      if (outputFormat === 'console') {\n        logger.info(\n          portConflicts.length === 0\n            ? '\u2705'\n            : portConflicts.some((c) => c.severity === 'error')\n              ? '\u274C'\n              : '\u26A0\uFE0F'\n        );\n      }\n    }\n\n    // 5. Environment variable validation (unless skipped)\n    if (!skipValidation.includes('environment')) {\n      if (outputFormat === 'console') {\n        process.stdout.write('\uD83C\uDF0D Validating environment variables... ');\n      }\n\n      const envIssues = await validateEnvironmentVariables(environment === 'production');\n      if (envIssues.errors.length > 0) {\n        errors.push(...envIssues.errors);\n        if (environment === 'production') {\n          blockers.push(...envIssues.errors);\n        }\n      }\n      warnings.push(...envIssues.warnings);\n\n      if (outputFormat === 'console') {\n        logger.info(envIssues.errors.length === 0 ? '\u2705' : '\u274C');\n      }\n    }\n\n    // 6. Performance validation (unless skipped)\n    if (!skipValidation.includes('performance')) {\n      if (outputFormat === 'console') {\n        process.stdout.write('\u26A1 Validating performance configuration... ');\n      }\n\n      warnings.push(...validationDetails.performanceWarnings);\n\n      if (outputFormat === 'console') {\n        logger.info(validationDetails.performanceWarnings.length <= 2 ? '\u2705' : '\u26A0\uFE0F');\n      }\n    }\n\n    // 7. Production readiness check\n    if (enforceProductionStandards) {\n      if (outputFormat === 'console') {\n        process.stdout.write('\uD83D\uDE80 Validating production readiness... ');\n      }\n\n      if (!validationDetails.productionReady) {\n        const message = 'Configuration is not production-ready';\n        errors.push(message);\n        if (environment === 'production') {\n          blockers.push(message);\n        }\n      }\n\n      if (outputFormat === 'console') {\n        logger.info(validationDetails.productionReady ? '\u2705' : '\u274C');\n      }\n    }\n\n    // Determine success and exit code\n    const success = blockers.length === 0;\n    const exitCode = success ? 0 : 1;\n\n    const result: StartupValidationResult = {\n      success,\n      errors,\n      warnings,\n      blockers,\n      environment,\n      timestamp: startTime,\n      validationDetails,\n      portConflicts,\n      exitCode,\n    };\n\n    // Output results\n    await outputValidationResults(result, outputFormat);\n\n    return result;\n  } catch (error) {\n    const errorMessage = error instanceof Error ? error.message : 'Unknown validation error';\n    const result: StartupValidationResult = {\n      success: false,\n      errors: [errorMessage],\n      warnings: [],\n      blockers: [errorMessage],\n      environment,\n      timestamp: startTime,\n      validationDetails: {\n        valid: false,\n        errors: [errorMessage],\n        warnings: [],\n        productionReady: false,\n        securityIssues: [],\n        portConflicts: [],\n        performanceWarnings: [],\n        failsafeApplied: [],\n      },\n      portConflicts: [],\n      exitCode: 1,\n    };\n\n    await outputValidationResults(result, outputFormat);\n    return result;\n  }\n}\n\n/**\n * Validate environment variables.\n *\n * @param isProduction\n * @example\n */\nasync function validateEnvironmentVariables(isProduction: boolean): Promise<{\n  errors: string[];\n  warnings: string[];\n}> {\n  const errors: string[] = [];\n  const warnings: string[] = [];\n\n  // Required environment variables\n  const requiredVars = ['NODE_ENV'];\n  if (isProduction) {\n    requiredVars.push('ANTHROPIC_API_KEY');\n  }\n\n  for (const envVar of requiredVars) {\n    if (!process.env[envVar]) {\n      errors.push(`Required environment variable missing: ${envVar}`);\n    }\n  }\n\n  // Validate NODE_ENV value\n  const validNodeEnvs = ['development', 'production', 'test'];\n  if (process.env['NODE_ENV'] && !validNodeEnvs?.includes(process.env['NODE_ENV'])) {\n    errors.push(\n      `Invalid NODE_ENV value: ${process.env['NODE_ENV']}. Must be one of: ${validNodeEnvs?.join(', ')}`\n    );\n  }\n\n  // Validate API key format (basic check)\n  if (process.env['ANTHROPIC_API_KEY'] && process.env['ANTHROPIC_API_KEY'].length < 10) {\n    errors.push('ANTHROPIC_API_KEY appears to be too short or invalid');\n  }\n\n  // Check for common production misconfigurations\n  if (isProduction) {\n    if (process.env['DEBUG']) {\n      warnings.push('DEBUG environment variable is set in production');\n    }\n    if (process.env['CLAUDE_LOG_LEVEL'] === 'debug') {\n      warnings.push('Debug logging enabled in production - consider using \"info\" level');\n    }\n  }\n\n  return { errors, warnings };\n}\n\n/**\n * Output validation results in the specified format.\n *\n * @param result\n * @param format\n * @example\n */\nasync function outputValidationResults(\n  result: StartupValidationResult,\n  format: 'console' | 'json' | 'silent'\n): Promise<void> {\n  if (format === 'silent') {\n    return;\n  }\n\n  if (format === 'json') {\n    logger.info(JSON.stringify(result, null, 2));\n    return;\n  }\n\n  // Console output\n  logger.info('\\n\uD83D\uDCCA Validation Results:');\n  logger.info(`Overall: ${result?.success ? '\u2705 PASSED' : '\u274C FAILED'}`);\n\n  if (result?.blockers.length > 0) {\n    logger.info('\\n\uD83D\uDEAB Critical Issues (deployment blockers):');\n    result?.blockers.forEach((blocker) => logger.info(`  \u274C ${blocker}`));\n  }\n\n  if (result?.errors.length > 0) {\n    logger.info('\\n\u274C Errors:');\n    result?.errors.forEach((error) => logger.info(`  \u274C ${error}`));\n  }\n\n  if (result?.warnings.length > 0) {\n    logger.info('\\n\u26A0\uFE0F  Warnings:');\n    result?.warnings.forEach((warning) => logger.info(`  \u26A0\uFE0F  ${warning}`));\n  }\n\n  if (result?.portConflicts.length > 0) {\n    logger.info('\\n\uD83C\uDF10 Port Conflicts:');\n    result?.portConflicts?.forEach((conflict) => {\n      const icon = conflict.severity === 'error' ? '\u274C' : '\u26A0\uFE0F';\n      logger.info(`  ${icon} Port ${conflict.port}: ${conflict.services.join(', ')}`);\n    });\n  }\n\n  // Recommendations\n  if (result?.validationDetails?.failsafeApplied.length > 0) {\n    logger.info('\\n\uD83D\uDEE1\uFE0F  Failsafe Defaults Applied:');\n    result?.validationDetails?.failsafeApplied?.forEach((applied) =>\n      logger.info(`  \uD83D\uDEE1\uFE0F  ${applied}`)\n    );\n  }\n\n  // Health score\n  const healthReport = await configHealthChecker?.getHealthReport();\n  logger.info(\n    `\\n\uD83D\uDCAF Configuration Health Score: ${healthReport.score}/100 (${healthReport.status.toUpperCase()})`\n  );\n\n  if (!result?.success) {\n    logger.info('\\n\uD83D\uDEA8 Fix the issues above before deploying to production!');\n  } else if (result?.warnings.length > 0) {\n    logger.info('\\n\u2705 Configuration is valid but consider addressing the warnings above.');\n  } else {\n    logger.info('\\n\uD83C\uDF89 Configuration is healthy and production-ready!');\n  }\n\n  logger.info(`\\nValidation completed in ${Date.now() - result?.timestamp}ms`);\n}\n\n/**\n * Run startup validation and exit process if validation fails.\n *\n * @param options - Validation options.\n * @example\n */\nexport async function validateAndExit(options: StartupValidationOptions = {}): Promise<never> {\n  const result = await runStartupValidation(options);\n  process.exit(result?.exitCode);\n}\n\n/**\n * CLI entry point for startup validation.\n *\n * @example\n */\nexport async function cli(): Promise<void> {\n  const args = process.argv.slice(2);\n\n  const options: StartupValidationOptions = {\n    strict: args.includes('--strict'),\n    enforceProductionStandards: args.includes('--production-standards'),\n    outputFormat: args.includes('--json')\n      ? 'json'\n      : args.includes('--silent')\n        ? 'silent'\n        : 'console',\n    skipValidation: [],\n  };\n\n  // Parse skip validation flags\n  if (args.includes('--skip-structure')) options?.['skipValidation']!.push('structure');\n  if (args.includes('--skip-security')) options?.['skipValidation']!.push('security');\n  if (args.includes('--skip-performance')) options?.['skipValidation']!.push('performance');\n  if (args.includes('--skip-ports')) options?.['skipValidation']!.push('ports');\n  if (args.includes('--skip-environment')) options?.['skipValidation']!.push('environment');\n\n  // Show help\n  if (args.includes('--help') || args.includes('-h')) {\n    logger.info(`\nClaude-Zen Configuration Startup Validator\n\nUsage: node startup-validator.js [options]\n\nOptions:\n  --strict                    Fail on any configuration errors\n  --production-standards      Enforce production standards even in development\n  --json                     Output results in JSON format\n  --silent                   Suppress all output\n  --skip-structure           Skip structure validation\n  --skip-security            Skip security validation\n  --skip-performance         Skip performance validation\n  --skip-ports               Skip port conflict validation\n  --skip-environment         Skip environment variable validation\n  --help, -h                 Show this help message\n\nExamples:\n  # Basic validation\n  node startup-validator.js\n\n  # Strict validation for production deployment\n  node startup-validator.js --strict --production-standards\n\n  # JSON output for CI/CD integration\n  node startup-validator.js --json --strict\n`);\n    process.exit(0);\n  }\n\n  await validateAndExit(options);\n}\n"],
  "mappings": "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",
  "names": []
}
