{
  "version": 3,
  "sources": ["../../src/di/tokens/token-factory.ts", "../../src/di/tokens/core-tokens.ts"],
  "sourcesContent": ["/**\n * DI token creation utilities.\n * Provides type-safe token creation for dependency injection.\n */\n/**\n * @file Token-factory implementation.\n */\n\nimport type { Constructor, DIToken } from '../types/di-types.ts';\n\n/**\n * Creates a typed DI token for service registration.\n *\n * @param name\n * @param type\n * @example\n */\nexport function createToken<T>(name: string, type?: Constructor<T>): DIToken<T> {\n  return {\n    symbol: Symbol(name),\n    name,\n    ...(type !== undefined && { type }),\n  };\n}\n\n/**\n * Creates a DI token from a class constructor.\n *\n * @param constructor\n * @example\n */\nexport function createTokenFromClass<T>(constructor: Constructor<T>): DIToken<T> {\n  return createToken(constructor.name, constructor);\n}\n\n/**\n * Type guard to check if a value is a DI token.\n *\n * @param value\n * @example\n */\nexport function isDIToken<T>(value: any): value is DIToken<T> {\n  return (\n    typeof value === 'object' &&\n    value !== null &&\n    typeof value.symbol === 'symbol' &&\n    typeof value.name === 'string'\n  );\n}\n\n/**\n * Utility to get token display name for debugging.\n *\n * @param token\n * @example\n */\nexport function getTokenName<T>(token: DIToken<T>): string {\n  return token.name;\n}\n\n/**\n * Utility to compare tokens for equality.\n *\n * @param token1\n * @param token2\n * @example\n */\nexport function tokensEqual<T>(token1: DIToken<T>, token2: DIToken<T>): boolean {\n  return token1.symbol === token2.symbol;\n}\n", "/**\n * Core system tokens for dependency injection.\n * Defines tokens for fundamental system services.\n */\n/**\n * @file Core-tokens implementation.\n */\n\nimport { createToken } from './token-factory.ts';\n\n// Core infrastructure interfaces (to be implemented)\nexport interface ILogger {\n  debug(message: string, meta?: any): void;\n  info(message: string, meta?: any): void;\n  warn(message: string, meta?: any): void;\n  error(message: string, meta?: any): void;\n}\n\nexport interface IConfig {\n  get<T>(key: string, defaultValue?: T): T;\n  set(key: string, value: any): void;\n  has(key: string): boolean;\n}\n\nexport interface IEventBus {\n  emit(event: string, data: any): void;\n  on(event: string, handler: (data: any) => void): void;\n  off(event: string, handler: (data: any) => void): void;\n}\n\nexport interface IDatabase {\n  initialize?(): Promise<void>;\n  query<T>(sql: string, params?: any[]): Promise<T[]>;\n  execute(sql: string, params?: any[]): Promise<void>;\n  transaction<T>(fn: (db: IDatabase) => Promise<T>): Promise<T>;\n  shutdown?(): Promise<void>;\n\n  // Task management methods\n  createTask(task: any): Promise<void>;\n  updateTask(taskId: string, updates: any): Promise<void>;\n  getSwarmTasks(swarmId: string, status?: string): Promise<any[]>;\n\n  // Agent management methods\n  updateAgent(agentId: string, updates: any): Promise<void>;\n\n  // Metrics methods\n  getMetrics(entityId: string, metricType: string): Promise<any[]>;\n}\n\nexport interface IHttpClient {\n  get<T>(url: string, config?: any): Promise<T>;\n  post<T>(url: string, data?: any, config?: any): Promise<T>;\n  put<T>(url: string, data?: any, config?: any): Promise<T>;\n  delete<T>(url: string, config?: any): Promise<T>;\n}\n\n// Core system tokens\nexport const CORE_TOKENS = {\n  Logger: createToken<ILogger>('Logger'),\n  Config: createToken<IConfig>('Config'),\n  EventBus: createToken<IEventBus>('EventBus'),\n  Database: createToken<IDatabase>('Database'),\n  HttpClient: createToken<IHttpClient>('HttpClient'),\n} as const;\n\n// Memory domain tokens\nexport const MEMORY_TOKENS = {\n  Backend: createToken('MemoryBackend'),\n  Provider: createToken('MemoryProvider'),\n  ProviderFactory: createToken('MemoryProviderFactory'),\n  Config: createToken('MemoryConfig'),\n  Controller: createToken('MemoryController'),\n} as const;\n\n// Database domain tokens\nexport const DATABASE_TOKENS = {\n  Adapter: createToken('DatabaseAdapter'),\n  Provider: createToken('DatabaseProvider'),\n  ProviderFactory: createToken('DatabaseProviderFactory'),\n  Config: createToken('DatabaseConfig'),\n  Controller: createToken('DatabaseController'),\n  DALFactory: createToken('DALFactory'),\n} as const;\n\n// Swarm coordination tokens\nexport const SWARM_TOKENS = {\n  DatabaseManager: createToken('SwarmDatabaseManager'),\n  MaintenanceManager: createToken('SwarmMaintenanceManager'),\n  BackupManager: createToken('SwarmBackupManager'),\n  Config: createToken('SwarmConfig'),\n  StoragePath: createToken('SwarmStoragePath'),\n} as const;\n"],
  "mappings": ";;;;;;;;;;;;;AAiBO,SAAS,YAAe,MAAc,MAAmC;AAC9E,SAAO;AAAA,IACL,QAAQ,OAAO,IAAI;AAAA,IACnB;AAAA,IACA,GAAI,SAAS,UAAa,EAAE,KAAK;AAAA,EACnC;AACF;AANgB;;;ACwCT,IAAM,cAAc;AAAA,EACzB,QAAQ,YAAqB,QAAQ;AAAA,EACrC,QAAQ,YAAqB,QAAQ;AAAA,EACrC,UAAU,YAAuB,UAAU;AAAA,EAC3C,UAAU,YAAuB,UAAU;AAAA,EAC3C,YAAY,YAAyB,YAAY;AACnD;AAGO,IAAM,gBAAgB;AAAA,EAC3B,SAAS,YAAY,eAAe;AAAA,EACpC,UAAU,YAAY,gBAAgB;AAAA,EACtC,iBAAiB,YAAY,uBAAuB;AAAA,EACpD,QAAQ,YAAY,cAAc;AAAA,EAClC,YAAY,YAAY,kBAAkB;AAC5C;AAGO,IAAM,kBAAkB;AAAA,EAC7B,SAAS,YAAY,iBAAiB;AAAA,EACtC,UAAU,YAAY,kBAAkB;AAAA,EACxC,iBAAiB,YAAY,yBAAyB;AAAA,EACtD,QAAQ,YAAY,gBAAgB;AAAA,EACpC,YAAY,YAAY,oBAAoB;AAAA,EAC5C,YAAY,YAAY,YAAY;AACtC;AAGO,IAAM,eAAe;AAAA,EAC1B,iBAAiB,YAAY,sBAAsB;AAAA,EACnD,oBAAoB,YAAY,yBAAyB;AAAA,EACzD,eAAe,YAAY,oBAAoB;AAAA,EAC/C,QAAQ,YAAY,aAAa;AAAA,EACjC,aAAa,YAAY,kBAAkB;AAC7C;",
  "names": []
}
