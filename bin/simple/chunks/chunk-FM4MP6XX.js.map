{
  "version": 3,
  "sources": ["../../src/config/health-checker.ts", "../../src/config/manager.ts", "../../src/config/defaults.ts", "../../src/config/loader.ts", "../../src/config/validator.ts", "../../src/config/default-repo-config.ts"],
  "sourcesContent": ["/**\n * @file Configuration Health Checker.\n *\n * Provides health check endpoints and monitoring for configuration validation.\n * Designed for production deployment validation and monitoring.\n */\n\nimport { EventEmitter } from 'node:events';\nimport { configManager } from './manager.ts';\nimport type { ConfigHealthReport, SystemConfiguration, ValidationResult } from './types.ts';\nimport { ConfigValidator } from './validator.ts';\nimport { logRepoConfigStatus } from './default-repo-config.ts';\n\n/**\n * Configuration health checker with monitoring capabilities.\n *\n * @example\n * ```typescript\n * const healthChecker = new ConfigHealthChecker();\n * await healthChecker.initialize();\n *\n * // Get current health\n * const health = await healthChecker.getHealthReport();\n * console.log(`Config health: ${health.status} (${health.score}/100)`);\n *\n * // Monitor for changes\n * healthChecker.on('health:changed', (report) => {\n *   if (report.status === 'critical') {\n *     console.error('Critical configuration issues detected!');\n *   }\n * });\n * ```\n */\nexport class ConfigHealthChecker extends EventEmitter {\n  private validator = new ConfigValidator();\n  private lastHealthReport: ConfigHealthReport | null = null;\n  private monitoringInterval: NodeJS.Timeout | null = null;\n  private healthCheckFrequency = 30000; // 30 seconds\n  private readonly environment = process.env['NODE_ENV'] || 'development';\n\n  /**\n   * Initialize health checker with monitoring.\n   *\n   * @param options - Configuration options.\n   * @param options.enableMonitoring\n   * @param options.healthCheckFrequency\n   */\n  async initialize(\n    options: { enableMonitoring?: boolean; healthCheckFrequency?: number } = {}\n  ): Promise<void> {\n    const { enableMonitoring = true, healthCheckFrequency = 30000 } = options;\n\n    this.healthCheckFrequency = healthCheckFrequency;\n\n    // Perform initial health check\n    await this.performHealthCheck();\n\n    // Set up configuration change listeners\n    configManager?.on('config:changed', () => {\n      this.performHealthCheck().catch((error) => {\n        this.emit('error', error);\n      });\n    });\n\n    configManager?.on('config:loaded', () => {\n      this.performHealthCheck().catch((error) => {\n        this.emit('error', error);\n      });\n    });\n\n    // Start monitoring if enabled\n    if (enableMonitoring) {\n      this.startMonitoring();\n    }\n  }\n\n  /**\n   * Get current configuration health report.\n   *\n   * @param includeDetails - Include detailed validation information.\n   */\n  async getHealthReport(): Promise<ConfigHealthReport>;\n  async getHealthReport(\n    includeDetails: true\n  ): Promise<ConfigHealthReport & { validationDetails: ValidationResult }>;\n  async getHealthReport(includeDetails: false): Promise<ConfigHealthReport>;\n  async getHealthReport(\n    includeDetails = false\n  ): Promise<ConfigHealthReport | (ConfigHealthReport & { validationDetails: ValidationResult })> {\n    const config = configManager?.getConfig();\n    const healthReport = this.validator.getHealthReport(config);\n\n    const report: ConfigHealthReport = {\n      ...healthReport,\n      timestamp: Date.now(),\n      environment: this.environment,\n    };\n\n    this.lastHealthReport = report;\n\n    if (includeDetails) {\n      const validationResult = this.validator.validateEnhanced(config);\n      return {\n        ...report,\n        validationDetails: validationResult,\n      } as ConfigHealthReport & { validationDetails: ValidationResult };\n    }\n\n    return report;\n  }\n\n  /**\n   * Validate configuration for production deployment.\n   *\n   * @param config - Configuration to validate (optional, uses current if not provided).\n   */\n  async validateForProduction(config?: SystemConfiguration): Promise<{\n    deploymentReady: boolean;\n    blockers: string[];\n    warnings: string[];\n    recommendations: string[];\n  }> {\n    const configToValidate = config || configManager?.getConfig();\n    const result = this.validator.validateEnhanced(configToValidate);\n\n    const blockers: string[] = [];\n    const warnings: string[] = [];\n    const recommendations: string[] = [];\n\n    // Critical blockers for deployment\n    if (!result?.valid) {\n      blockers.push(...result?.errors);\n    }\n\n    if (result?.securityIssues.length > 0) {\n      blockers.push(...result?.securityIssues);\n    }\n\n    if (result?.portConflicts.length > 0) {\n      blockers.push(...result?.portConflicts);\n    }\n\n    // Non-critical warnings\n    warnings.push(...result?.warnings);\n    warnings.push(...result?.performanceWarnings);\n\n    // Generate deployment recommendations\n    if (!result?.productionReady) {\n      recommendations.push('Configuration is not production-ready');\n    }\n\n    if (result?.failsafeApplied.length > 0) {\n      recommendations.push('Failsafe defaults were applied - review configuration');\n    }\n\n    // Environment-specific recommendations\n    if (this.environment === 'production') {\n      if (!process.env['ANTHROPIC_API_KEY']) {\n        blockers.push('ANTHROPIC_API_KEY environment variable required in production');\n      }\n\n      if (configToValidate?.core?.logger?.level === 'debug') {\n        recommendations.push('Consider using \"info\" log level in production instead of \"debug\"');\n      }\n    }\n\n    return {\n      deploymentReady: blockers.length === 0,\n      blockers,\n      warnings,\n      recommendations,\n    };\n  }\n\n  /**\n   * Check for port conflicts across all services.\n   */\n  async checkPortConflicts(): Promise<{\n    conflicts: Array<{\n      port: number;\n      services: string[];\n      severity: 'error' | 'warning';\n    }>;\n    recommendations: string[];\n  }> {\n    const config = configManager?.getConfig();\n    const conflicts: Array<{\n      port: number;\n      services: string[];\n      severity: 'error' | 'warning';\n    }> = [];\n    const recommendations: string[] = [];\n\n    // Collect all port configurations\n    const portMappings = [\n      {\n        name: 'MCP HTTP',\n        port: config?.interfaces?.mcp?.http?.port,\n        critical: true,\n      },\n      {\n        name: 'Web Dashboard',\n        port: config?.interfaces?.web?.port,\n        critical: true,\n      },\n      {\n        name: 'Monitoring',\n        port: config?.monitoring?.dashboard?.port,\n        critical: false,\n      },\n    ].filter((mapping) => typeof mapping.port === 'number');\n\n    // Group by port\n    const portGroups = new Map<number, Array<{ name: string; critical: boolean }>>();\n\n    for (const mapping of portMappings) {\n      if (typeof mapping.port === 'number') {\n        if (!portGroups.has(mapping.port)) {\n          portGroups.set(mapping.port, []);\n        }\n        portGroups.get(mapping.port)!.push({ name: mapping.name, critical: mapping.critical });\n      }\n    }\n\n    // Identify conflicts\n    for (const [port, services] of portGroups.entries()) {\n      if (services.length > 1) {\n        const isCritical = services.some((s) => s.critical);\n        conflicts.push({\n          port,\n          services: services.map((s) => s.name),\n          severity: isCritical ? 'error' : 'warning',\n        });\n      }\n    }\n\n    // Generate recommendations\n    if (conflicts.length > 0) {\n      recommendations.push('Configure unique ports for each service');\n      recommendations.push('Use environment variables to override default ports');\n      recommendations.push('Consider using a reverse proxy for port management');\n    }\n\n    return { conflicts, recommendations };\n  }\n\n  /**\n   * Get configuration health as simple status.\n   */\n  async getHealthStatus(): Promise<{\n    status: 'healthy' | 'warning' | 'critical';\n    message: string;\n    timestamp: number;\n  }> {\n    const report = await this.getHealthReport();\n\n    let message = '';\n    switch (report.status) {\n      case 'healthy':\n        message = 'Configuration is healthy and production-ready';\n        break;\n      case 'warning':\n        message = `Configuration has ${report.recommendations.length} recommendations`;\n        break;\n      case 'critical':\n        message = 'Configuration has critical issues requiring attention';\n        break;\n    }\n\n    return {\n      status: report.status,\n      message,\n      timestamp: report.timestamp,\n    };\n  }\n\n  /**\n   * Start health monitoring.\n   */\n  startMonitoring(): void {\n    if (this.monitoringInterval) {\n      clearInterval(this.monitoringInterval);\n    }\n\n    this.monitoringInterval = setInterval(() => {\n      this.performHealthCheck().catch((error) => {\n        this.emit('error', error);\n      });\n    }, this.healthCheckFrequency);\n  }\n\n  /**\n   * Stop health monitoring.\n   */\n  stopMonitoring(): void {\n    if (this.monitoringInterval) {\n      clearInterval(this.monitoringInterval);\n      this.monitoringInterval = null;\n    }\n  }\n\n  /**\n   * Export health report for external monitoring.\n   *\n   * @param format - Export format.\n   */\n  async exportHealthReport(format: 'json' | 'prometheus' = 'json'): Promise<string> {\n    const report = await this.getHealthReport(true);\n\n    if (format === 'json') {\n      return JSON.stringify(report, null, 2);\n    } else if (format === 'prometheus') {\n      return this.toPrometheusFormat(report);\n    }\n\n    throw new Error(`Unsupported export format: ${format}`);\n  }\n\n  /**\n   * Cleanup resources.\n   */\n  destroy(): void {\n    this.stopMonitoring();\n    this.removeAllListeners();\n  }\n\n  /**\n   * Perform health check and emit events.\n   */\n  private async performHealthCheck(): Promise<void> {\n    try {\n      const currentReport = await this.getHealthReport();\n\n      // Compare with previous report\n      if (this.lastHealthReport) {\n        if (this.lastHealthReport.status !== currentReport?.status) {\n          this.emit('health:changed', currentReport);\n\n          if (currentReport?.status === 'critical') {\n            this.emit('health:critical', currentReport);\n          } else if (\n            currentReport?.status === 'healthy' &&\n            this.lastHealthReport.status !== 'healthy'\n          ) {\n            this.emit('health:recovered', currentReport);\n          }\n        }\n      }\n\n      this.emit('health:checked', currentReport);\n      this.lastHealthReport = currentReport;\n      \n      // Log detailed repo config status for diagnostics (wired up!)\n      if (currentReport?.configuration) {\n        try {\n          logRepoConfigStatus(currentReport.configuration as any);\n        } catch (error) {\n          // Silently continue if logging fails - don't break health checks\n          console.debug('Config status logging failed:', error);\n        }\n      }\n    } catch (error) {\n      this.emit('error', error);\n    }\n  }\n\n  /**\n   * Convert health report to Prometheus format.\n   *\n   * @param report - Health report to convert.\n   */\n  private toPrometheusFormat(report: ConfigHealthReport): string {\n    const lines: string[] = [];\n\n    // Overall health score\n    lines.push('# HELP claude_zen_config_health_score Configuration health score (0-100)');\n    lines.push('# TYPE claude_zen_config_health_score gauge');\n    lines.push(`claude_zen_config_health_score{environment=\"${this.environment}\"} ${report.score}`);\n\n    // Health status as numeric (0=critical, 1=warning, 2=healthy)\n    const statusValue = report.status === 'healthy' ? 2 : report.status === 'warning' ? 1 : 0;\n    lines.push('# HELP claude_zen_config_health_status Configuration health status');\n    lines.push('# TYPE claude_zen_config_health_status gauge');\n    lines.push(\n      `claude_zen_config_health_status{environment=\"${this.environment}\",status=\"${report.status}\"} ${statusValue}`\n    );\n\n    // Component health details\n    for (const [component, healthy] of Object.entries(report.details)) {\n      lines.push(`# HELP claude_zen_config_${component}_health ${component} configuration health`);\n      lines.push(`# TYPE claude_zen_config_${component}_health gauge`);\n      lines.push(\n        `claude_zen_config_${component}_health{environment=\"${this.environment}\"} ${healthy ? 1 : 0}`\n      );\n    }\n\n    // Recommendation count\n    lines.push(\n      '# HELP claude_zen_config_recommendations_total Number of configuration recommendations'\n    );\n    lines.push('# TYPE claude_zen_config_recommendations_total gauge');\n    lines.push(\n      `claude_zen_config_recommendations_total{environment=\"${this.environment}\"} ${report.recommendations.length}`\n    );\n\n    return `${lines.join('\\n')}\\n`;\n  }\n}\n\n// Export singleton instance\nexport const configHealthChecker = new ConfigHealthChecker();\n\n/**\n * Initialize configuration health checking.\n *\n * @param options - Initialization options.\n * @param options.enableMonitoring\n * @param options.healthCheckFrequency\n * @example\n */\nexport async function initializeConfigHealthChecker(options?: {\n  enableMonitoring?: boolean;\n  healthCheckFrequency?: number;\n}): Promise<void> {\n  await configHealthChecker?.initialize(options);\n}\n\n/**\n * Create health check endpoint handler for Express.js.\n *\n * @example\n * ```typescript\n * app.get('/health/config', createConfigHealthEndpoint());\n * ```\n */\nexport function createConfigHealthEndpoint() {\n  return async (_req: any, res: any) => {\n    try {\n      const healthReport = await configHealthChecker?.getHealthReport(true);\n\n      // Set appropriate HTTP status\n      const statusCode =\n        healthReport.status === 'healthy' ? 200 : healthReport.status === 'warning' ? 200 : 503;\n\n      res.status(statusCode).json({\n        success: healthReport.status !== 'critical',\n        health: healthReport,\n        timestamp: new Date().toISOString(),\n      });\n    } catch (error) {\n      res.status(500).json({\n        success: false,\n        error: 'Health check failed',\n        message: error instanceof Error ? error.message : 'Unknown error',\n        timestamp: new Date().toISOString(),\n      });\n    }\n  };\n}\n\n/**\n * Create deployment readiness check endpoint.\n *\n * @example\n * ```typescript\n * app.get('/health/deployment', createDeploymentReadinessEndpoint());\n * ```\n */\nexport function createDeploymentReadinessEndpoint() {\n  return async (_req: any, res: any) => {\n    try {\n      const deploymentCheck = await configHealthChecker?.validateForProduction();\n      const portCheck = await configHealthChecker?.checkPortConflicts();\n\n      const statusCode =\n        deploymentCheck.deploymentReady && portCheck.conflicts.length === 0 ? 200 : 503;\n\n      res.status(statusCode).json({\n        success: deploymentCheck.deploymentReady && portCheck.conflicts.length === 0,\n        deployment: {\n          ready: deploymentCheck.deploymentReady,\n          blockers: deploymentCheck.blockers,\n          warnings: deploymentCheck.warnings,\n          recommendations: deploymentCheck.recommendations,\n        },\n        ports: {\n          conflicts: portCheck.conflicts,\n          recommendations: portCheck.recommendations,\n        },\n        timestamp: new Date().toISOString(),\n        environment: process.env['NODE_ENV'] || 'development',\n      });\n    } catch (error) {\n      res.status(500).json({\n        success: false,\n        error: 'Deployment readiness check failed',\n        message: error instanceof Error ? error.message : 'Unknown error',\n        timestamp: new Date().toISOString(),\n      });\n    }\n  };\n}\n", "/**\n * @file Unified Configuration Manager.\n *\n * Central configuration management with hot-reloading, validation, and event system.\n */\n\nimport { getLogger } from './logging-config.ts';\n\nconst logger = getLogger('src-config-manager');\n\nimport { EventEmitter } from 'node:events';\nimport * as fs from 'node:fs';\nimport * as path from 'node:path';\nimport { DEFAULT_CONFIG } from './defaults.ts';\nimport { ConfigurationLoader } from './loader.ts';\nimport type { ConfigChangeEvent, ConfigValidationResult, SystemConfiguration } from './types.ts';\nimport { ConfigValidator } from './validator.ts';\n\n/**\n * Unified Configuration Manager.\n *\n * Features:\n * - Multi-source configuration loading (files, env, CLI)\n * - Hot-reloading with file watchers\n * - Configuration validation with detailed errors\n * - Event-driven configuration changes\n * - Thread-safe configuration access\n * - Configuration history and rollback.\n *\n * @example.\n * @example\n */\nexport class ConfigurationManager extends EventEmitter {\n  private static instance: ConfigurationManager | null = null;\n  private config: SystemConfiguration;\n  private loader = new ConfigurationLoader();\n  private validator = new ConfigValidator();\n  private configPaths: string[] = [];\n  private watchers: fs.FSWatcher[] = [];\n  private configHistory: SystemConfiguration[] = [];\n  private maxHistorySize = 10;\n  private isLoading = false;\n\n  private constructor() {\n    super();\n    this.config = JSON.parse(JSON.stringify(DEFAULT_CONFIG));\n    this.setupErrorHandling();\n  }\n\n  /**\n   * Get singleton instance.\n   */\n  static getInstance(): ConfigurationManager {\n    if (!ConfigurationManager.instance) {\n      ConfigurationManager.instance = new ConfigurationManager();\n    }\n    return ConfigurationManager.instance;\n  }\n\n  /**\n   * Initialize configuration system.\n   *\n   * @param configPaths\n   */\n  async initialize(configPaths?: string[]): Promise<ConfigValidationResult> {\n    if (this.isLoading) {\n      throw new Error('Configuration is already being loaded');\n    }\n\n    this.isLoading = true;\n    try {\n      const result = await this.loader.loadConfiguration(configPaths);\n\n      if (!result?.validation?.valid) {\n        logger.error('\u274C Configuration validation failed:');\n        result?.validation?.errors?.forEach((error) => logger.error(`  - ${error}`));\n\n        if (result?.validation?.warnings.length > 0) {\n          logger.warn('\u26A0\uFE0F Configuration warnings:');\n          result?.validation?.warnings?.forEach((warning) => logger.warn(`  - ${warning}`));\n        }\n        this.config = JSON.parse(JSON.stringify(DEFAULT_CONFIG));\n      } else {\n        this.config = result?.config;\n\n        if (result?.validation?.warnings.length > 0) {\n          logger.warn('\u26A0\uFE0F Configuration warnings:');\n          result?.validation?.warnings?.forEach((warning) => logger.warn(`  - ${warning}`));\n        }\n      }\n\n      // Store config paths for watching\n      this.configPaths = configPaths || [];\n\n      // Setup file watchers for hot-reloading\n      this.setupFileWatchers();\n\n      // Add to history\n      this.addToHistory(this.config);\n\n      this.emit('config:loaded', {\n        config: this.config,\n        validation: result?.validation,\n      });\n\n      return result?.validation;\n    } finally {\n      this.isLoading = false;\n    }\n  }\n\n  /**\n   * Get current configuration.\n   */\n  getConfig(): SystemConfiguration {\n    return JSON.parse(JSON.stringify(this.config));\n  }\n\n  /**\n   * Get configuration section.\n   *\n   * @param section\n   */\n  getSection<K extends keyof SystemConfiguration>(section: K): SystemConfiguration[K] {\n    return JSON.parse(JSON.stringify(this.config[section]));\n  }\n\n  /**\n   * Get nested configuration value.\n   *\n   * @param path\n   */\n  get<T = any>(path: string): T | undefined {\n    return path.split('.').reduce((current: any, key) => current?.[key], this.config);\n  }\n\n  /**\n   * Update configuration (runtime only).\n   *\n   * @param path\n   * @param value.\n   * @param value\n   */\n  update(path: string, value: any): ConfigValidationResult {\n    const oldValue = this.get(path);\n\n    // Create a copy for testing\n    const testConfig = JSON.parse(JSON.stringify(this.config));\n    this.setNestedValue(testConfig, path, value);\n\n    // Validate the change\n    const validation = this.validator.validate(testConfig);\n\n    if (!validation.valid) {\n      return validation;\n    }\n\n    // Apply the change\n    this.setNestedValue(this.config, path, value);\n\n    // Add to history\n    this.addToHistory(this.config);\n\n    // Emit change event\n    const changeEvent: ConfigChangeEvent = {\n      path,\n      oldValue,\n      newValue: value,\n      source: 'runtime',\n      timestamp: Date.now(),\n    };\n\n    this.emit('config:changed', changeEvent);\n\n    return validation;\n  }\n\n  /**\n   * Reload configuration from sources.\n   */\n  async reload(): Promise<ConfigValidationResult> {\n    return this.initialize(this.configPaths);\n  }\n\n  /**\n   * Validate current configuration.\n   */\n  validate(): ConfigValidationResult {\n    return this.validator.validate(this.config);\n  }\n\n  /**\n   * Get configuration history.\n   */\n  getHistory(): SystemConfiguration[] {\n    return [...this.configHistory];\n  }\n\n  /**\n   * Rollback to previous configuration.\n   *\n   * @param steps\n   */\n  rollback(steps = 1): boolean {\n    if (this.configHistory.length <= steps) {\n      return false;\n    }\n\n    const targetConfig = this.configHistory[this.configHistory.length - steps - 1];\n    const validation = targetConfig\n      ? this.validator.validate(targetConfig)\n      : { valid: false, errors: ['Invalid target config'] };\n\n    if (!validation.valid) {\n      logger.error('Cannot rollback to invalid configuration');\n      return false;\n    }\n\n    this.config = JSON.parse(JSON.stringify(targetConfig));\n    this.emit('config:rollback', { config: this.config, steps });\n\n    return true;\n  }\n\n  /**\n   * Export current configuration.\n   *\n   * @param format\n   */\n  export(format: 'json' | 'yaml' = 'json'): string {\n    if (format === 'json') {\n      return JSON.stringify(this.config, null, 2);\n    } else {\n      // Basic YAML export (would need yaml library for full support)\n      return this.toSimpleYaml(this.config);\n    }\n  }\n\n  /**\n   * Get configuration sources info.\n   */\n  getSourcesInfo() {\n    return this.loader.getSources();\n  }\n\n  /**\n   * Cleanup resources.\n   */\n  destroy(): void {\n    // Clear file watchers\n    this.watchers.forEach((watcher) => watcher.close());\n    this.watchers = [];\n\n    // Clear history\n    this.configHistory = [];\n\n    // Remove event listeners\n    this.removeAllListeners();\n\n    // Clear singleton\n    ConfigurationManager.instance = null;\n  }\n\n  /**\n   * Setup file watchers for hot-reloading.\n   */\n  private setupFileWatchers(): void {\n    // Clear existing watchers\n    this.watchers.forEach((watcher) => watcher.close());\n    this.watchers = [];\n\n    const configFiles = [\n      './config/claude-zen.json',\n      './claude-zen.config.json',\n      ...this.configPaths,\n    ];\n\n    for (const configFile of configFiles) {\n      try {\n        const resolvedPath = path.resolve(configFile);\n\n        if (fs.existsSync(resolvedPath)) {\n          const watcher = fs.watch(resolvedPath, (eventType) => {\n            if (eventType === 'change') {\n              // Debounce reloads\n              setTimeout(() => {\n                this.reload().catch((error) => {\n                  logger.error('Failed to reload configuration:', error);\n                });\n              }, 1000);\n            }\n          });\n\n          this.watchers.push(watcher);\n        }\n      } catch (error) {\n        logger.warn(`Failed to watch config file ${configFile}:`, error);\n      }\n    }\n  }\n\n  /**\n   * Setup error handling.\n   */\n  private setupErrorHandling(): void {\n    this.on('error', (error) => {\n      logger.error('Configuration manager error:', error);\n    });\n\n    // Handle process signals for cleanup\n    process.on('SIGINT', () => this.destroy());\n    process.on('SIGTERM', () => this.destroy());\n  }\n\n  /**\n   * Add configuration to history.\n   *\n   * @param config\n   */\n  private addToHistory(config: SystemConfiguration): void {\n    this.configHistory.push(JSON.parse(JSON.stringify(config)));\n\n    // Trim history to max size\n    if (this.configHistory.length > this.maxHistorySize) {\n      this.configHistory = this.configHistory.slice(-this.maxHistorySize);\n    }\n  }\n\n  /**\n   * Set nested value using dot notation.\n   *\n   * @param obj\n   * @param path\n   * @param value\n   */\n  private setNestedValue(obj: any, path: string, value: any): void {\n    const parts = path.split('.');\n    let current = obj;\n\n    for (let i = 0; i < parts.length - 1; i++) {\n      const part = parts[i];\n      if (part && (!(part in current) || typeof current?.[part] !== 'object')) {\n        current[part] = {};\n      }\n      if (part) {\n        current = current?.[part];\n      }\n    }\n\n    const lastPart = parts[parts.length - 1];\n    if (lastPart) {\n      current[lastPart] = value;\n    }\n  }\n\n  /**\n   * Simple YAML export (basic implementation).\n   *\n   * @param obj\n   * @param indent.\n   * @param indent\n   */\n  private toSimpleYaml(obj: any, indent = 0): string {\n    const spaces = '  '.repeat(indent);\n    let yaml = '';\n\n    for (const [key, value] of Object.entries(obj)) {\n      if (typeof value === 'object' && value !== null && !Array.isArray(value)) {\n        yaml += `${spaces}${key}:\\n${this.toSimpleYaml(value, indent + 1)}`;\n      } else if (Array.isArray(value)) {\n        yaml += `${spaces}${key}:\\n`;\n        for (const item of value) {\n          yaml += `${spaces}  - ${item}\\n`;\n        }\n      } else {\n        yaml += `${spaces}${key}: ${JSON.stringify(value)}\\n`;\n      }\n    }\n\n    return yaml;\n  }\n}\n\n// Export singleton instance\nexport const configManager = ConfigurationManager.getInstance();\n", "/**\n * @file Defaults implementation.\n */\n\nimport type { SystemConfiguration } from './types.ts';\n\n/**\n * Default system configuration.\n */\nexport const DEFAULT_CONFIG: SystemConfiguration = {\n  core: {\n    logger: {\n      level: 'info',\n      console: true,\n      structured: false,\n    },\n    performance: {\n      enableMetrics: true,\n      metricsInterval: 10000,\n      enableProfiling: false,\n    },\n    security: {\n      enableSandbox: true,\n      allowShellAccess: false,\n      trustedHosts: ['localhost', '127.0.0.1'],\n    },\n  },\n\n  interfaces: {\n    shared: {\n      theme: 'dark',\n      verbosity: 'normal',\n      autoCompletion: true,\n      realTimeUpdates: true,\n      refreshInterval: 5000,\n      maxCommandHistory: 100,\n      pageSize: 25,\n    },\n    terminal: {\n      timeout: 30000,\n      maxConcurrentProcesses: 10,\n      enableColors: true,\n      enableProgressBars: true,\n    },\n    web: {\n      port: 3456,\n      host: 'localhost',\n      enableHttps: false,\n      corsOrigins: ['http://localhost:3000', 'http://localhost:3456'],\n      staticPath: './public',\n      enableCompression: true,\n    },\n    mcp: {\n      http: {\n        port: 3000,\n        host: 'localhost',\n        timeout: 30000,\n        maxRequestSize: '10mb',\n        enableCors: true,\n      },\n      stdio: {\n        timeout: 30000,\n        maxBufferSize: 1024 * 1024, // 1MB\n      },\n      tools: {\n        enableAll: true,\n        enabledTools: [],\n        disabledTools: [],\n      },\n    },\n  },\n\n  storage: {\n    memory: {\n      backend: 'sqlite',\n      directory: './data/memory',\n      namespace: 'claude-zen',\n      enableCompression: false,\n      maxMemorySize: 100 * 1024 * 1024, // 100MB\n      cacheSize: 10 * 1024 * 1024, // 10MB\n      enableBackup: true,\n      backupInterval: 3600000, // 1 hour\n    },\n    database: {\n      sqlite: {\n        path: './data/claude-zen.db',\n        enableWAL: true,\n        maxConnections: 10,\n        timeout: 30000,\n      },\n      lancedb: {\n        path: './data/lancedb',\n        enableVectorIndex: true,\n        indexType: 'ivf',\n      },\n      persistence: {\n        maxReaders: 6,\n        maxWorkers: 3,\n        mmapSize: 268435456, // 256MB\n        cacheSize: -64000, // 64MB\n        enableBackup: false,\n        healthCheckInterval: 60000, // 1 minute\n      },\n    },\n  },\n\n  coordination: {\n    maxAgents: 50,\n    heartbeatInterval: 10000,\n    timeout: 30000,\n    topology: 'mesh',\n    enableLoadBalancing: true,\n    enableFailover: true,\n    enableMetrics: true,\n  },\n\n  // External services and API keys\n  services: {\n    anthropic: {\n      apiKey:\n        process.env['ANTHROPIC_API_KEY'] ||\n        (() => {\n          if (process.env['NODE_ENV'] === 'production') {\n            throw new Error('ANTHROPIC_API_KEY environment variable is required in production');\n          }\n          return null; // Allow null in development\n        })(),\n      baseUrl: process.env['ANTHROPIC_BASE_URL'] || 'https://api.anthropic.com',\n      timeout: 30000,\n      maxRetries: 3,\n    },\n    openai: {\n      apiKey: process.env['OPENAI_API_KEY'] || null,\n      baseUrl: process.env['OPENAI_BASE_URL'] || 'https://api.openai.com',\n      timeout: 30000,\n    },\n    github: {\n      token: process.env['GITHUB_TOKEN'] || null,\n      baseUrl: process.env['GITHUB_API_URL'] || 'https://api.github.com',\n    },\n    search: {\n      apiKey: process.env['SEARCH_API_KEY'] || null,\n      baseUrl: process.env['SEARCH_BASE_URL'] || null,\n    },\n  },\n\n  // Monitoring and logging\n  monitoring: {\n    dashboard: {\n      port: parseInt(process.env['DASHBOARD_PORT'] || '3456', 10),\n      host: process.env['DASHBOARD_HOST'] || 'localhost',\n      enableMetrics: process.env['ENABLE_METRICS'] !== 'false',\n      metricsInterval: parseInt(process.env['METRICS_INTERVAL'] || '10000', 10),\n    },\n    logging: {\n      level: process.env['LOG_LEVEL'] || 'info',\n      format: process.env['LOG_FORMAT'] || 'json',\n      file: process.env['LOG_FILE'] || './logs/claude-zen.log',\n      enableConsole: process.env['LOG_CONSOLE'] !== 'false',\n      enableFile: process.env['LOG_FILE_ENABLE'] === 'true',\n    },\n    performance: {\n      enableProfiling: process.env['ENABLE_PROFILING'] === 'true',\n      sampleRate: parseFloat(process.env['PROFILE_SAMPLE_RATE'] || '0.1'),\n      enableTracing: process.env['ENABLE_TRACING'] === 'true',\n    },\n  },\n\n  // Network and connectivity\n  network: {\n    defaultTimeout: parseInt(process.env['DEFAULT_TIMEOUT'] || '30000', 10),\n    maxRetries: parseInt(process.env['MAX_RETRIES'] || '3', 10),\n    retryDelay: parseInt(process.env['RETRY_DELAY'] || '1000', 10),\n    enableKeepAlive: process.env['KEEP_ALIVE'] !== 'false',\n  },\n\n  // Development vs Production settings\n  environment: {\n    isDevelopment: process.env['NODE_ENV'] === 'development',\n    isProduction: process.env['NODE_ENV'] === 'production',\n    isTest: process.env['NODE_ENV'] === 'test',\n    allowUnsafeOperations: process.env['NODE_ENV'] === 'development',\n    enableDebugEndpoints: process.env['NODE_ENV'] !== 'production',\n    strictValidation: process.env['NODE_ENV'] === 'production',\n  },\n\n  neural: {\n    enableWASM: true,\n    enableSIMD: true,\n    enableCUDA: false,\n    modelPath: './data/neural',\n    maxModelSize: 100 * 1024 * 1024, // 100MB\n    enableTraining: false,\n    enableInference: true,\n    backend: 'wasm',\n  },\n\n  optimization: {\n    enablePerformanceMonitoring: true,\n    enableResourceOptimization: true,\n    enableMemoryOptimization: true,\n    enableNetworkOptimization: false,\n    benchmarkInterval: 60000, // 1 minute\n  },\n};\n\n/**\n * Environment variable mappings.\n */\nexport const ENV_MAPPINGS = {\n  // Core\n  CLAUDE_LOG_LEVEL: { path: 'core.logger.level', type: 'string' as const },\n  CLAUDE_LOG_CONSOLE: { path: 'core.logger.console', type: 'boolean' as const },\n  CLAUDE_LOG_FILE: { path: 'core.logger.file', type: 'string' as const },\n  CLAUDE_ENABLE_METRICS: {\n    path: 'core.performance.enableMetrics',\n    type: 'boolean' as const,\n  },\n  CLAUDE_METRICS_INTERVAL: {\n    path: 'core.performance.metricsInterval',\n    type: 'number' as const,\n  },\n\n  // Interfaces\n  CLAUDE_WEB_PORT: { path: 'interfaces.web.port', type: 'number' as const },\n  CLAUDE_WEB_HOST: { path: 'interfaces.web.host', type: 'string' as const },\n  CLAUDE_MCP_PORT: {\n    path: 'interfaces.mcp.http.port',\n    type: 'number' as const,\n  },\n  CLAUDE_MCP_HOST: {\n    path: 'interfaces.mcp.http.host',\n    type: 'string' as const,\n  },\n  CLAUDE_MCP_TIMEOUT: {\n    path: 'interfaces.mcp.http.timeout',\n    type: 'number' as const,\n  },\n\n  // Storage\n  CLAUDE_MEMORY_BACKEND: {\n    path: 'storage.memory.backend',\n    type: 'string' as const,\n  },\n  CLAUDE_MEMORY_DIR: {\n    path: 'storage.memory.directory',\n    type: 'string' as const,\n  },\n  CLAUDE_DB_PATH: {\n    path: 'storage.database.sqlite.path',\n    type: 'string' as const,\n  },\n  CLAUDE_LANCEDB_PATH: {\n    path: 'storage.database.lancedb.path',\n    type: 'string' as const,\n  },\n\n  // Persistence Pool\n  POOL_MAX_READERS: {\n    path: 'storage.database.persistence.maxReaders',\n    type: 'number' as const,\n  },\n  POOL_MAX_WORKERS: {\n    path: 'storage.database.persistence.maxWorkers',\n    type: 'number' as const,\n  },\n  POOL_MMAP_SIZE: {\n    path: 'storage.database.persistence.mmapSize',\n    type: 'number' as const,\n  },\n  POOL_CACHE_SIZE: {\n    path: 'storage.database.persistence.cacheSize',\n    type: 'number' as const,\n  },\n  POOL_ENABLE_BACKUP: {\n    path: 'storage.database.persistence.enableBackup',\n    type: 'boolean' as const,\n  },\n\n  // Coordination\n  CLAUDE_MAX_AGENTS: {\n    path: 'coordination.maxAgents',\n    type: 'number' as const,\n  },\n  CLAUDE_HEARTBEAT_INTERVAL: {\n    path: 'coordination.heartbeatInterval',\n    type: 'number' as const,\n  },\n  CLAUDE_COORDINATION_TIMEOUT: {\n    path: 'coordination.timeout',\n    type: 'number' as const,\n  },\n  CLAUDE_SWARM_TOPOLOGY: {\n    path: 'coordination.topology',\n    type: 'string' as const,\n  },\n\n  // Neural\n  CLAUDE_ENABLE_WASM: { path: 'neural.enableWASM', type: 'boolean' as const },\n  CLAUDE_ENABLE_SIMD: { path: 'neural.enableSIMD', type: 'boolean' as const },\n  CLAUDE_ENABLE_CUDA: { path: 'neural.enableCUDA', type: 'boolean' as const },\n  CLAUDE_NEURAL_BACKEND: { path: 'neural.backend', type: 'string' as const },\n  CLAUDE_MODEL_PATH: { path: 'neural.modelPath', type: 'string' as const },\n\n  // Security\n  CLAUDE_ENABLE_SANDBOX: {\n    path: 'core.security.enableSandbox',\n    type: 'boolean' as const,\n  },\n  CLAUDE_ALLOW_SHELL: {\n    path: 'core.security.allowShellAccess',\n    type: 'boolean' as const,\n  },\n  CLAUDE_TRUSTED_HOSTS: {\n    path: 'core.security.trustedHosts',\n    type: 'array' as const,\n    parser: (value: string) => value.split(',').map((h) => h.trim()),\n  },\n} as const;\n\n/**\n * Configuration validation schema with production safety.\n *\n * @example\n */\nexport interface ConfigValidationSchema {\n  required: string[]; // Required environment variables\n  optional: string[]; // Optional with defaults\n  validation: {\n    [key: string]: (value: any) => boolean;\n  };\n  production: {\n    enforced: string[]; // Must be set in production\n    forbidden: string[]; // Cannot be set in production\n    fallbacks: { [key: string]: any }; // Safe fallbacks\n  };\n  portRanges: {\n    development: { min: number; max: number };\n    production: { min: number; max: number };\n  };\n}\n\n/**\n * Production-Ready Configuration Validation Rules.\n * \n * Comprehensive validation rule set that defines acceptable values, ranges,\n * and constraints for all system configuration parameters. Includes both\n * development and production-specific validation with automatic fallbacks,\n * conflict detection, and security enforcement.\n * \n * Key Features:\n * - Type validation with enum constraints\n * - Production-specific min/max ranges\n * - Port conflict detection and safe fallbacks\n * - Security-aware defaults for production environments\n * - Adaptive validation based on deployment environment\n * \n * Rule Structure:\n * - `type`: Data type validation (string, number, boolean)\n * - `enum`: Allowed enumeration values\n * - `min`/`max`: Acceptable value ranges\n * - `productionMin`/`productionMax`: Production-specific constraints\n * - `conflictCheck`: Enable port conflict detection\n * - `fallback`: Safe default value when validation fails\n * - `required`: Whether the field is mandatory\n * \n * @example\n * ```typescript\n * import { VALIDATION_RULES } from 'claude-code-zen/config';\n * \n * // Validate a configuration value\n * const portRule = VALIDATION_RULES['interfaces.web.port'];\n * const port = 3456;\n * \n * if (port < portRule.min || port > portRule.max) {\n *   console.error(`Port ${port} is outside valid range ${portRule.min}-${portRule.max}`);\n *   port = portRule.fallback; // Use safe fallback\n * }\n * \n * // Check production constraints\n * if (process.env.NODE_ENV === 'production' && port < portRule.productionMin) {\n *   console.warn(`Port ${port} below production minimum ${portRule.productionMin}`);\n * }\n * ```\n * \n * @const VALIDATION_RULES\n * @see {@link ConfigValidator} - Uses these rules for validation\n * @see {@link PRODUCTION_VALIDATION_SCHEMA} - Production-specific schema\n * @since 1.0.0-alpha.43\n */\nexport const VALIDATION_RULES = {\n  'core.logger.level': {\n    type: 'string',\n    enum: ['debug', 'info', 'warn', 'error'],\n    productionDefault: 'info',\n    required: false,\n  },\n  'interfaces.web.port': {\n    type: 'number',\n    min: 1,\n    max: 65535,\n    productionMin: 3000,\n    productionMax: 65535,\n    conflictCheck: true,\n    fallback: 3456, // Safe fallback different from MCP\n  },\n  'interfaces.mcp.http.port': {\n    type: 'number',\n    min: 1,\n    max: 65535,\n    productionMin: 3000,\n    productionMax: 65535,\n    conflictCheck: true,\n    fallback: 3000, // Primary MCP port\n  },\n  'coordination.maxAgents': {\n    type: 'number',\n    min: 1,\n    max: 1000,\n    productionMax: 100, // More conservative in production\n    required: false,\n    fallback: 10,\n  },\n  'coordination.topology': {\n    type: 'string',\n    enum: ['mesh', 'hierarchical', 'ring', 'star'],\n    productionRecommended: ['hierarchical', 'ring'],\n    fallback: 'hierarchical',\n  },\n  'neural.backend': {\n    type: 'string',\n    enum: ['wasm', 'native', 'fallback'],\n    productionRecommended: ['wasm', 'fallback'],\n    fallback: 'wasm',\n  },\n  'storage.memory.backend': {\n    type: 'string',\n    enum: ['sqlite', 'lancedb', 'json'],\n    productionRecommended: ['sqlite', 'lancedb'],\n    fallback: 'sqlite',\n  },\n  'core.security.enableSandbox': {\n    type: 'boolean',\n    productionRequired: true,\n    fallback: true,\n  },\n  'core.security.allowShellAccess': {\n    type: 'boolean',\n    productionForbidden: true,\n    fallback: false,\n  },\n  // Database constraints\n  'storage.database.sqlite.maxConnections': {\n    type: 'number',\n    min: 1,\n    max: 100,\n    productionMax: 50,\n    fallback: 10,\n  },\n  'storage.memory.maxMemorySize': {\n    type: 'number',\n    min: 1024 * 1024, // 1MB minimum\n    productionMin: 50 * 1024 * 1024, // 50MB minimum in production\n    fallback: 100 * 1024 * 1024, // 100MB default\n  },\n} as const;\n\n/**\n * Production Environment Validation Schema.\n * \n * Comprehensive validation schema specifically designed for production\n * deployments with enhanced security, strict validation rules, and\n * mandatory environment variable requirements. Enforces production\n * best practices and prevents unsafe configurations.\n * \n * Security Features:\n * - Mandatory environment variables for production\n * - Forbidden unsafe configuration options\n * - Automatic fallback to secure defaults\n * - API key validation and presence checking\n * - Port range restrictions for production environments\n * \n * Schema Components:\n * - `required`: Environment variables that must be present\n * - `optional`: Environment variables that are recommended but not mandatory\n * - `validation`: Custom validation functions for each variable\n * - `production.enforced`: Settings that are mandatory in production\n * - `production.forbidden`: Settings that are prohibited in production\n * - `production.fallbacks`: Safe default values for production\n * - `portRanges`: Environment-specific port allocation ranges\n * \n * @example\n * ```typescript\n * import { PRODUCTION_VALIDATION_SCHEMA } from 'claude-code-zen/config';\n * \n * // Validate production environment\n * const isValid = PRODUCTION_VALIDATION_SCHEMA.validation.NODE_ENV('production');\n * console.log('Valid NODE_ENV:', isValid); // true\n * \n * // Check API key requirement\n * if (process.env.NODE_ENV === 'production') {\n *   const hasValidKey = PRODUCTION_VALIDATION_SCHEMA.validation.ANTHROPIC_API_KEY(\n *     process.env.ANTHROPIC_API_KEY\n *   );\n *   if (!hasValidKey) {\n *     throw new Error('ANTHROPIC_API_KEY is required in production');\n *   }\n * }\n * \n * // Get production fallbacks\n * const fallbacks = PRODUCTION_VALIDATION_SCHEMA.production.fallbacks;\n * console.log('Safe port fallback:', fallbacks['interfaces.web.port']); // 3456\n * ```\n * \n * @const PRODUCTION_VALIDATION_SCHEMA\n * @see {@link ConfigValidationSchema} - Schema type definition\n * @see {@link VALIDATION_RULES} - General validation rules\n * @since 1.0.0-alpha.43\n */\nexport const PRODUCTION_VALIDATION_SCHEMA: ConfigValidationSchema = {\n  required: ['NODE_ENV'],\n  optional: ['CLAUDE_WEB_PORT', 'CLAUDE_MCP_PORT', 'CLAUDE_LOG_LEVEL', 'CLAUDE_MAX_AGENTS'],\n  validation: {\n    NODE_ENV: (value: string) => ['production', 'development', 'test'].includes(value),\n    ANTHROPIC_API_KEY: (value: string) =>\n      process.env['NODE_ENV'] === 'production' ? !!value && value.length > 10 : true,\n    CLAUDE_WEB_PORT: (value: string) => {\n      const port = parseInt(value, 10);\n      return !isNaN(port) && port >= 3000 && port <= 65535;\n    },\n    CLAUDE_MCP_PORT: (value: string) => {\n      const port = parseInt(value, 10);\n      return !isNaN(port) && port >= 3000 && port <= 65535;\n    },\n  },\n  production: {\n    enforced: ['core.security.enableSandbox', 'core.logger.level', 'environment.strictValidation'],\n    forbidden: [\n      'core.security.allowShellAccess',\n      'environment.allowUnsafeOperations',\n      'environment.enableDebugEndpoints',\n    ],\n    fallbacks: {\n      'core.logger.level': 'info',\n      'core.security.enableSandbox': true,\n      'core.security.allowShellAccess': false,\n      'interfaces.web.port': 3456,\n      'interfaces.mcp.http.port': 3000,\n      'coordination.maxAgents': 10,\n      'coordination.topology': 'hierarchical',\n      'storage.memory.backend': 'sqlite',\n      'neural.backend': 'wasm',\n    },\n  },\n  portRanges: {\n    development: { min: 3000, max: 9999 },\n    production: { min: 3000, max: 65535 },\n  },\n};\n\n/**\n * Default Port Allocation Strategy.\n * \n * Carefully planned port allocation strategy designed to prevent conflicts\n * between different system components. Provides a stable, predictable port\n * assignment scheme that works across development, testing, and production\n * environments while avoiding common port conflicts.\n * \n * Port Assignment Philosophy:\n * - Primary services get well-known, memorable ports\n * - Sequential allocation for related services\n * - Gaps between service groups to allow expansion\n * - Avoids system ports (< 1024) and common application ports\n * - Compatible with firewall rules and load balancer configurations\n * \n * Service Port Mapping:\n * - `3000`: MCP HTTP Server (primary Claude integration)\n * - `3456`: Web Dashboard (administrative interface)\n * - `3457`: Monitoring Dashboard (metrics and health)\n * - `3001`: Development Server (when needed)\n * - `3002`: Backup/Failover Port (high availability)\n * \n * @example\n * ```typescript\n * import { DEFAULT_PORT_ALLOCATION } from 'claude-code-zen/config';\n * \n * // Get assigned port for a service\n * const mcpPort = DEFAULT_PORT_ALLOCATION['interfaces.mcp.http.port'];\n * console.log('MCP server will run on port:', mcpPort); // 3000\n * \n * // Check for conflicts before starting services\n * const webPort = DEFAULT_PORT_ALLOCATION['interfaces.web.port'];\n * const monitorPort = DEFAULT_PORT_ALLOCATION['monitoring.dashboard.port'];\n * \n * if (webPort === monitorPort) {\n *   throw new Error('Port conflict detected!');\n * }\n * \n * // Use in server configuration\n * const serverConfig = {\n *   mcp: { port: DEFAULT_PORT_ALLOCATION['interfaces.mcp.http.port'] },\n *   web: { port: DEFAULT_PORT_ALLOCATION['interfaces.web.port'] },\n *   monitoring: { port: DEFAULT_PORT_ALLOCATION['monitoring.dashboard.port'] }\n * };\n * ```\n * \n * @const DEFAULT_PORT_ALLOCATION\n * @see {@link PORT_ALLOCATION_BY_ENV} - Environment-specific overrides\n * @see {@link VALIDATION_RULES} - Port validation rules\n * @since 1.0.0-alpha.43\n */\nexport const DEFAULT_PORT_ALLOCATION = {\n  'interfaces.mcp.http.port': 3000, // Primary MCP server\n  'interfaces.web.port': 3456, // Web dashboard\n  'monitoring.dashboard.port': 3457, // Monitoring dashboard\n  'development.port': 3001, // Development server if needed\n  'backup.port': 3002, // Backup/failover port\n} as const;\n\n/**\n * Environment-Specific Port Allocation Overrides.\n * \n * Environment-aware port allocation that provides different port assignments\n * for development, production, and testing environments. Allows for isolation\n * between environments while maintaining service functionality and preventing\n * conflicts when multiple environments run on the same system.\n * \n * Environment Strategy:\n * - **Development**: Standard ports for easy access and debugging\n * - **Production**: Environment variable override support with fallbacks\n * - **Testing**: Offset ports to avoid conflicts with development services\n * \n * Port Environment Mapping:\n * - Development: 3000, 3456, 3457 (standard allocation)\n * - Production: Environment variable driven with same fallbacks\n * - Testing: 3100, 3556, 3557 (offset by +100/+100/+100)\n * \n * Environment Variables:\n * - `CLAUDE_MCP_PORT`: Override MCP server port in production\n * - `CLAUDE_WEB_PORT`: Override web dashboard port in production  \n * - `CLAUDE_MONITOR_PORT`: Override monitoring dashboard port in production\n * \n * @example\n * ```typescript\n * import { PORT_ALLOCATION_BY_ENV } from 'claude-code-zen/config';\n * \n * const env = process.env.NODE_ENV || 'development';\n * const ports = PORT_ALLOCATION_BY_ENV[env];\n * \n * // Get environment-specific port\n * const mcpPort = ports['interfaces.mcp.http.port'];\n * console.log(`MCP server port for ${env}:`, mcpPort);\n * \n * // Start services with environment-appropriate ports\n * const config = {\n *   environment: env,\n *   services: {\n *     mcp: { port: ports['interfaces.mcp.http.port'] },\n *     web: { port: ports['interfaces.web.port'] },\n *     monitoring: { port: ports['monitoring.dashboard.port'] }\n *   }\n * };\n * \n * // Production example with environment variables\n * // CLAUDE_MCP_PORT=8080 CLAUDE_WEB_PORT=8081 npm start\n * if (env === 'production') {\n *   console.log('Production ports can be overridden via environment variables');\n * }\n * ```\n * \n * @const PORT_ALLOCATION_BY_ENV\n * @see {@link DEFAULT_PORT_ALLOCATION} - Base port allocation strategy\n * @see {@link VALIDATION_RULES} - Port validation and conflict checking\n * @since 1.0.0-alpha.43\n */\nexport const PORT_ALLOCATION_BY_ENV = {\n  development: {\n    'interfaces.mcp.http.port': 3000,\n    'interfaces.web.port': 3456,\n    'monitoring.dashboard.port': 3457,\n  },\n  production: {\n    'interfaces.mcp.http.port': parseInt(process.env['CLAUDE_MCP_PORT'] || '3000', 10),\n    'interfaces.web.port': parseInt(process.env['CLAUDE_WEB_PORT'] || '3456', 10),\n    'monitoring.dashboard.port': parseInt(process.env['CLAUDE_MONITOR_PORT'] || '3457', 10),\n  },\n  test: {\n    'interfaces.mcp.http.port': 3100,\n    'interfaces.web.port': 3556,\n    'monitoring.dashboard.port': 3557,\n  },\n} as const;\n\n/**\n * URL Builder Configuration and Utilities.\n * \n * Comprehensive URL construction system consolidated from url-builder.ts.\n * Provides type-safe, environment-aware URL building capabilities for\n * all system services including MCP servers, web dashboards, monitoring\n * endpoints, and API routes.\n * \n * Features:\n * - Protocol-aware URL construction (HTTP/HTTPS)\n * - Environment-specific host and port resolution\n * - Path normalization and query parameter handling\n * - Service-specific URL builders with validation\n * - Development vs production URL differences\n * \n * @since 1.0.0-alpha.43\n */\n\n/**\n * URL Builder Configuration Interface.\n * \n * Defines the configuration options for URL construction including protocol\n * selection, host specification, port assignment, and path configuration.\n * Used by URLBuilder class and service-specific URL generation functions.\n * \n * @example\n * ```typescript\n * import type { URLBuilderConfig } from 'claude-code-zen/config';\n * \n * const config: URLBuilderConfig = {\n *   protocol: 'https',\n *   host: 'api.example.com',\n *   port: 443,\n *   path: '/v1/mcp'\n * };\n * \n * // Used with URLBuilder\n * const builder = new URLBuilder(systemConfig);\n * const url = builder.buildURL('mcp', config);\n * ```\n * \n * @interface URLBuilderConfig\n * @see {@link URLBuilder} - URL builder class implementation\n * @since 1.0.0-alpha.43\n */\nexport interface URLBuilderConfig {\n  protocol?: 'http' | 'https';\n  host?: string;\n  port?: number;\n  path?: string;\n}\n\nexport class URLBuilder {\n  private config: SystemConfiguration;\n\n  constructor(config: SystemConfiguration = DEFAULT_CONFIG) {\n    this.config = config;\n  }\n\n  /**\n   * Build HTTP MCP server URL.\n   *\n   * @param overrides\n   */\n  getMCPServerURL(overrides: Partial<URLBuilderConfig> = {}): string {\n    const protocol = overrides.protocol || this.getProtocol();\n    const host = overrides.host || this.config.interfaces.mcp.http.host;\n    const port = overrides.port || this.config.interfaces.mcp.http.port;\n    const path = overrides.path || '';\n\n    return this.buildURL(protocol, host, port, path);\n  }\n\n  /**\n   * Build web dashboard URL.\n   *\n   * @param overrides\n   */\n  getWebDashboardURL(overrides: Partial<URLBuilderConfig> = {}): string {\n    const protocol = overrides.protocol || this.getProtocol();\n    const host = overrides.host || this.config.interfaces.web.host;\n    const port = overrides.port || this.config.interfaces.web.port;\n    const path = overrides.path || '';\n\n    return this.buildURL(protocol, host, port, path);\n  }\n\n  /**\n   * Build monitoring dashboard URL.\n   *\n   * @param overrides\n   */\n  getMonitoringDashboardURL(overrides: Partial<URLBuilderConfig> = {}): string {\n    const protocol = overrides.protocol || this.getProtocol();\n    const host = overrides.host || this.config.monitoring.dashboard.host;\n    const port = overrides.port || this.config.monitoring.dashboard.port;\n    const path = overrides.path || '';\n\n    return this.buildURL(protocol, host, port, path);\n  }\n\n  /**\n   * Build CORS origins array.\n   */\n  getCORSOrigins(): string[] {\n    const protocol = this.getProtocol();\n    const mcpURL = this.getMCPServerURL({ protocol });\n    const webURL = this.getWebDashboardURL({ protocol });\n    const monitoringURL = this.getMonitoringDashboardURL({ protocol });\n    const configuredOrigins = this.config.interfaces.web.corsOrigins || [];\n\n    const updatedOrigins = configuredOrigins.map((origin) => {\n      if (origin.includes('localhost') && !origin.startsWith('http')) {\n        return `${protocol}://${origin}`;\n      }\n      if (origin.startsWith('http://localhost') && protocol === 'https') {\n        return origin.replace('http://', 'https://');\n      }\n      return origin;\n    });\n\n    const allOrigins = [...updatedOrigins, mcpURL, webURL, monitoringURL];\n    return Array.from(new Set(allOrigins));\n  }\n\n  /**\n   * Get service base URL.\n   *\n   * @param service\n   * @param overrides\n   */\n  getServiceBaseURL(\n    service: 'mcp' | 'web' | 'monitoring',\n    overrides: Partial<URLBuilderConfig> = {}\n  ): string {\n    switch (service) {\n      case 'mcp':\n        return this.getMCPServerURL(overrides);\n      case 'web':\n        return this.getWebDashboardURL(overrides);\n      case 'monitoring':\n        return this.getMonitoringDashboardURL(overrides);\n      default:\n        throw new Error(`Unknown service: ${service}`);\n    }\n  }\n\n  /**\n   * Build a URL from components.\n   *\n   * @param protocol\n   * @param host\n   * @param port\n   * @param path\n   */\n  private buildURL(protocol: string, host: string, port: number, path: string): string {\n    const shouldOmitPort =\n      (protocol === 'http' && port === 80) || (protocol === 'https' && port === 443);\n\n    const portPart = shouldOmitPort ? '' : `:${port}`;\n    const pathPart = path.startsWith('/') ? path : `/${path}`;\n    const cleanPath = path === '' ? '' : pathPart;\n\n    return `${protocol}://${host}${portPart}${cleanPath}`;\n  }\n\n  /**\n   * Get protocol based on environment and configuration.\n   */\n  private getProtocol(): 'http' | 'https' {\n    if (process.env['FORCE_HTTPS'] === 'true') {\n      return 'https';\n    }\n    if (process.env['FORCE_HTTP'] === 'true') {\n      return 'http';\n    }\n    if (this.config.interfaces.web.enableHttps) {\n      return 'https';\n    }\n    return this.config.environment.isProduction ? 'https' : 'http';\n  }\n\n  /**\n   * Update configuration.\n   *\n   * @param config\n   */\n  updateConfig(config: SystemConfiguration): void {\n    this.config = config;\n  }\n}\n\n/**\n * Default URL builder instance using default configuration.\n */\nexport const defaultURLBuilder = new URLBuilder();\n\n/**\n * Create URL builder with custom configuration.\n *\n * @param config\n */\nexport const createURLBuilder = (config: SystemConfiguration): URLBuilder => {\n  return new URLBuilder(config);\n};\n\n/**\n * Convenience functions using default builder.\n *\n * @param overrides\n */\nexport const getMCPServerURL = (overrides?: Partial<URLBuilderConfig>) =>\n  defaultURLBuilder.getMCPServerURL(overrides);\n\nexport const getWebDashboardURL = (overrides?: Partial<URLBuilderConfig>) =>\n  defaultURLBuilder.getWebDashboardURL(overrides);\n\nexport const getMonitoringDashboardURL = (overrides?: Partial<URLBuilderConfig>) =>\n  defaultURLBuilder.getMonitoringDashboardURL(overrides);\n\nexport const getCORSOrigins = () => defaultURLBuilder.getCORSOrigins();\n", "/**\n * @file Configuration Loader.\n *\n * Handles loading configuration from multiple sources with proper priority.\n */\n\nimport { getLogger } from './logging-config.ts';\n\nconst logger = getLogger('ConfigLoader');\n\nimport * as fs from 'node:fs';\nimport * as path from 'node:path';\nimport { DEFAULT_CONFIG, ENV_MAPPINGS } from './defaults.ts';\nimport type { ConfigurationSource, ConfigValidationResult, SystemConfiguration } from './types.ts';\nimport { ConfigValidator } from './validator.ts';\n\n/**\n * Configuration loader with multi-source support.\n *\n * @example\n */\nexport class ConfigurationLoader {\n  private sources: ConfigurationSource[] = [];\n  private validator = new ConfigValidator();\n\n  /**\n   * Load configuration from all sources.\n   *\n   * @param configPaths\n   */\n  async loadConfiguration(configPaths?: string[]): Promise<{\n    config: SystemConfiguration;\n    validation: ConfigValidationResult;\n  }> {\n    // Clear existing sources\n    this.sources = [];\n\n    // 1. Load defaults (lowest priority)\n    this.addSource({\n      type: 'defaults',\n      priority: 0,\n      data: DEFAULT_CONFIG,\n    });\n\n    // 2. Load from config files\n    const defaultPaths = [\n      './config/claude-zen.json',\n      './claude-zen.config.json',\n      '~/.claude-zen/config.json',\n      '/etc/claude-zen/config.json',\n    ];\n\n    const pathsToTry = configPaths || defaultPaths;\n    for (const configPath of pathsToTry) {\n      await this.loadFromFile(configPath);\n    }\n\n    // 3. Load from environment variables (higher priority)\n    this.loadFromEnvironment();\n\n    // 4. Load from CLI arguments (highest priority)\n    this.loadFromCliArgs();\n\n    // Merge all sources by priority\n    const mergedConfig = this.mergeSources();\n\n    // Validate the final configuration\n    const validation = this.validator.validate(mergedConfig);\n\n    return {\n      config: mergedConfig,\n      validation,\n    };\n  }\n\n  /**\n   * Add a configuration source.\n   *\n   * @param source\n   */\n  private addSource(source: ConfigurationSource): void {\n    this.sources.push(source);\n    // Sort by priority (higher numbers override lower)\n    this.sources.sort((a, b) => a.priority - b.priority);\n  }\n\n  /**\n   * Load configuration from file.\n   *\n   * @param filePath\n   */\n  private async loadFromFile(filePath: string): Promise<void> {\n    try {\n      const resolvedPath = path.resolve(filePath.replace('~', process.env['HOME'] || '~'));\n\n      if (!fs.existsSync(resolvedPath)) {\n        return;\n      }\n\n      const content = fs.readFileSync(resolvedPath, 'utf8');\n      let data: Partial<SystemConfiguration>;\n\n      if (filePath.endsWith('.json')) {\n        data = JSON.parse(content);\n      } else if (filePath.endsWith('.js') || filePath.endsWith('.ts')) {\n        // Dynamic import for JS/TS config files\n        const module = await import(resolvedPath);\n        data = module.default || module;\n      } else {\n        logger.warn(`Unsupported config file format: ${filePath}`);\n        return;\n      }\n\n      this.addSource({\n        type: 'file',\n        priority: 10,\n        data,\n      });\n    } catch (error) {\n      logger.warn(`Failed to load config from ${filePath}:`, error);\n    }\n  }\n\n  /**\n   * Load configuration from environment variables.\n   */\n  private loadFromEnvironment(): void {\n    const envConfig: Partial<SystemConfiguration> = {};\n\n    for (const [envVar, mapping] of Object.entries(ENV_MAPPINGS)) {\n      const value = process.env[envVar];\n      if (value !== undefined) {\n        let parsedValue: any = value;\n\n        // Parse value based on type\n        switch (mapping.type) {\n          case 'number':\n            parsedValue = Number(value);\n            if (Number.isNaN(parsedValue)) {\n              logger.warn(`Invalid number value for ${envVar}: ${value}`);\n              continue;\n            }\n            break;\n          case 'boolean':\n            parsedValue = value.toLowerCase() === 'true' || value === '1';\n            break;\n          case 'array':\n            if (mapping.parser) {\n              parsedValue = mapping.parser(value);\n            } else {\n              parsedValue = value.split(',').map((v) => v.trim());\n            }\n            break;\n          default:\n            parsedValue = value;\n            break;\n        }\n\n        // Set nested property\n        this.setNestedProperty(envConfig, mapping.path, parsedValue);\n      }\n    }\n\n    if (Object.keys(envConfig).length > 0) {\n      this.addSource({\n        type: 'env',\n        priority: 20,\n        data: envConfig,\n      });\n    }\n  }\n\n  /**\n   * Load configuration from CLI arguments.\n   */\n  private loadFromCliArgs(): void {\n    const args = process.argv.slice(2);\n    const cliConfig: Partial<SystemConfiguration> = {};\n\n    for (let i = 0; i < args.length; i++) {\n      const arg = args[i];\n\n      if (arg?.startsWith('--config.')) {\n        const configPath = arg.substring(9); // Remove '--config.'\n        const value = args[i + 1];\n\n        if (value && !value.startsWith('--')) {\n          let parsedValue: any = value;\n\n          // Try to parse as JSON for complex values\n          if (value.startsWith('{') || value.startsWith('[')) {\n            try {\n              parsedValue = JSON.parse(value);\n            } catch {\n              // Keep as string if JSON parsing fails\n            }\n          } else if (value === 'true' || value === 'false') {\n            parsedValue = value === 'true';\n          } else if (!Number.isNaN(Number(value))) {\n            parsedValue = Number(value);\n          }\n\n          this.setNestedProperty(cliConfig, configPath, parsedValue);\n          i++; // Skip the next argument as it's the value\n        }\n      }\n    }\n\n    if (Object.keys(cliConfig).length > 0) {\n      this.addSource({\n        type: 'cli',\n        priority: 30,\n        data: cliConfig,\n      });\n    }\n  }\n\n  /**\n   * Merge all configuration sources by priority.\n   */\n  private mergeSources(): SystemConfiguration {\n    let mergedConfig = JSON.parse(JSON.stringify(DEFAULT_CONFIG));\n\n    for (const source of this.sources) {\n      mergedConfig = this.deepMerge(mergedConfig, source.data);\n    }\n\n    return mergedConfig;\n  }\n\n  /**\n   * Deep merge two objects.\n   *\n   * @param target\n   * @param source\n   */\n  private deepMerge(target: any, source: any): any {\n    const result = { ...target };\n\n    for (const key in source) {\n      if (source[key] && typeof source[key] === 'object' && !Array.isArray(source[key])) {\n        result[key] = this.deepMerge(result?.[key] || {}, source[key]);\n      } else {\n        result[key] = source[key];\n      }\n    }\n\n    return result;\n  }\n\n  /**\n   * Set nested property using dot notation.\n   *\n   * @param obj\n   * @param path\n   * @param value\n   */\n  private setNestedProperty(obj: any, path: string, value: any): void {\n    const parts = path.split('.');\n    let current = obj;\n\n    for (let i = 0; i < parts.length - 1; i++) {\n      const part = parts[i];\n      if (part && (!(part in current) || typeof current?.[part] !== 'object')) {\n        current[part] = {};\n      }\n      if (part) {\n        current = current?.[part];\n      }\n    }\n\n    const lastPart = parts[parts.length - 1];\n    if (lastPart) {\n      current[lastPart] = value;\n    }\n  }\n\n  /**\n   * Get configuration sources for debugging.\n   */\n  getSources(): ConfigurationSource[] {\n    return [...this.sources];\n  }\n}\n", "/**\n * @file Configuration Validator.\n *\n * Validates configuration against schema and provides detailed error reporting.\n */\n\nimport { VALIDATION_RULES } from './defaults.ts';\nimport type { ConfigValidationResult, SystemConfiguration, ValidationResult } from './types.ts';\n\n/**\n * Configuration validator.\n *\n * @example\n */\nexport class ConfigValidator {\n  /**\n   * Validate configuration object.\n   *\n   * @param config\n   */\n  validate(config: SystemConfiguration): ConfigValidationResult {\n    const errors: string[] = [];\n    const warnings: string[] = [];\n\n    try {\n      // Validate structure\n      this.validateStructure(config, errors);\n\n      // Validate specific rules\n      this.validateRules(config, errors, warnings);\n\n      // Validate dependencies\n      this.validateDependencies(config, errors, warnings);\n\n      // Validate ranges and constraints\n      this.validateConstraints(config, errors, warnings);\n    } catch (error) {\n      errors.push(`Validation error: ${error}`);\n    }\n\n    return {\n      valid: errors.length === 0,\n      errors,\n      warnings,\n    };\n  }\n\n  /**\n   * Validate basic structure.\n   *\n   * @param config\n   * @param errors\n   */\n  private validateStructure(config: SystemConfiguration, errors: string[]): void {\n    const requiredSections = [\n      'core',\n      'interfaces',\n      'storage',\n      'coordination',\n      'neural',\n      'optimization',\n    ];\n\n    for (const section of requiredSections) {\n      if (!config?.[section as keyof SystemConfiguration]) {\n        errors.push(`Missing required configuration section: ${section}`);\n      }\n    }\n\n    // Validate core subsections\n    if (config?.core) {\n      if (!config?.core?.logger) {\n        errors.push('Missing core.logger configuration');\n      }\n      if (!config?.core?.performance) {\n        errors.push('Missing core.performance configuration');\n      }\n      if (!config?.core?.security) {\n        errors.push('Missing core.security configuration');\n      }\n    }\n\n    // Validate interfaces subsections\n    if (config?.interfaces) {\n      const requiredInterfaces = ['shared', 'terminal', 'web', 'mcp'];\n      for (const iface of requiredInterfaces) {\n        if (!config?.interfaces?.[iface as keyof typeof config.interfaces]) {\n          errors.push(`Missing interfaces.${iface} configuration`);\n        }\n      }\n    }\n\n    // Validate storage subsections\n    if (config?.storage) {\n      if (!config?.storage?.memory) {\n        errors.push('Missing storage.memory configuration');\n      }\n      if (!config?.storage?.database) {\n        errors.push('Missing storage.database configuration');\n      }\n    }\n  }\n\n  /**\n   * Validate against specific rules.\n   *\n   * @param config\n   * @param errors\n   * @param warnings\n   */\n  private validateRules(config: SystemConfiguration, errors: string[], warnings: string[]): void {\n    for (const [path, rule] of Object.entries(VALIDATION_RULES)) {\n      const value = this.getNestedValue(config as any, path);\n\n      if (value === undefined) {\n        warnings.push(`Optional configuration missing: ${path}`);\n        continue;\n      }\n\n      // Type validation\n      if (rule.type === 'string' && typeof value !== 'string') {\n        errors.push(`${path} must be a string, got ${typeof value}`);\n        continue;\n      }\n\n      if (rule.type === 'number' && typeof value !== 'number') {\n        errors.push(`${path} must be a number, got ${typeof value}`);\n        continue;\n      }\n\n      // Boolean validation (if rule supports boolean type)\n      if (\n        'type' in rule &&\n        rule.type &&\n        (rule.type as string) === 'boolean' &&\n        typeof value !== 'boolean'\n      ) {\n        errors.push(`${path} must be a boolean, got ${typeof value}`);\n        continue;\n      }\n\n      // Enum validation\n      if ('enum' in rule && rule.enum && Array.isArray(rule.enum)) {\n        if (!rule.enum.includes(value as never)) {\n          errors.push(`${path} must be one of: ${rule.enum.join(', ')}, got ${value}`);\n        }\n      }\n\n      // Range validation\n      if (rule.type === 'number' && typeof value === 'number') {\n        if ('min' in rule && rule.min !== undefined && value < rule.min) {\n          errors.push(`${path} must be >= ${rule.min}, got ${value}`);\n        }\n        if ('max' in rule && rule.max !== undefined && value > rule.max) {\n          errors.push(`${path} must be <= ${rule.max}, got ${value}`);\n        }\n      }\n    }\n  }\n\n  /**\n   * Validate configuration dependencies.\n   *\n   * @param config\n   * @param errors\n   * @param warnings\n   */\n  private validateDependencies(\n    config: SystemConfiguration,\n    errors: string[],\n    warnings: string[]\n  ): void {\n    // Web interface dependencies\n    if (config?.interfaces?.web?.enableHttps && !config?.interfaces?.web?.corsOrigins) {\n      warnings.push('HTTPS enabled but no CORS origins configured');\n    }\n\n    // Neural network dependencies\n    if (config?.neural?.enableCUDA && !config?.neural?.enableWASM) {\n      warnings.push('CUDA enabled without WASM - may not be supported');\n    }\n\n    // Database dependencies\n    if (config?.storage?.memory?.backend === 'lancedb' && !config?.storage?.database?.lancedb) {\n      errors.push('LanceDB backend selected but lancedb configuration missing');\n    }\n\n    // MCP tool dependencies\n    if (\n      config?.interfaces?.mcp?.tools?.enableAll &&\n      config?.interfaces?.mcp?.tools?.disabledTools?.length > 0\n    ) {\n      warnings.push('enableAll is true but some tools are disabled');\n    }\n\n    // Security dependencies\n    if (!config?.core?.security?.enableSandbox && config?.core?.security?.allowShellAccess) {\n      warnings.push('Shell access enabled without sandbox - security risk');\n    }\n\n    // Performance dependencies\n    if (config?.core?.performance?.enableProfiling && !config?.core?.performance?.enableMetrics) {\n      warnings.push('Profiling enabled without metrics - limited functionality');\n    }\n  }\n\n  /**\n   * Validate constraints and logical consistency.\n   *\n   * @param config\n   * @param errors\n   * @param warnings\n   */\n  private validateConstraints(\n    config: SystemConfiguration,\n    errors: string[],\n    warnings: string[]\n  ): void {\n    // Port conflicts\n    const ports = [config?.interfaces?.web?.port, config?.interfaces?.mcp?.http?.port].filter(\n      Boolean\n    );\n\n    const uniquePorts = new Set(ports);\n    if (ports.length !== uniquePorts.size) {\n      errors.push('Port conflicts detected - multiple services cannot use the same port');\n    }\n\n    // Memory constraints\n    if (config?.storage?.memory?.maxMemorySize && config?.storage?.memory?.cacheSize) {\n      if (config?.storage?.memory?.cacheSize > config?.storage?.memory?.maxMemorySize) {\n        errors.push('Cache size cannot be larger than max memory size');\n      }\n    }\n\n    // Agent constraints\n    if (config?.coordination?.maxAgents && config?.coordination?.maxAgents > 1000) {\n      warnings.push('Very high agent count may impact performance');\n    }\n\n    // Timeout constraints\n    const timeouts = [\n      config?.interfaces?.terminal?.timeout,\n      config?.interfaces?.mcp?.http?.timeout,\n      config?.coordination?.timeout,\n    ].filter(Boolean);\n\n    for (const timeout of timeouts) {\n      if (timeout < 1000) {\n        warnings.push(`Very low timeout value (${timeout}ms) may cause issues`);\n      }\n      if (timeout > 300000) {\n        // 5 minutes\n        warnings.push(`Very high timeout value (${timeout}ms) may cause hangs`);\n      }\n    }\n\n    // Directory constraints\n    const directories = [\n      config?.storage?.memory?.directory,\n      config?.storage?.database?.sqlite?.path,\n      config?.storage?.database?.lancedb?.path,\n      config?.neural?.modelPath,\n    ].filter(Boolean);\n\n    for (const dir of directories) {\n      if (dir.includes('..')) {\n        warnings.push(`Directory path contains '..' - potential security risk: ${dir}`);\n      }\n    }\n  }\n\n  /**\n   * Get nested value using dot notation.\n   *\n   * @param obj\n   * @param path\n   */\n  private getNestedValue(obj: Record<string, unknown>, path: string): unknown {\n    return path.split('.').reduce((current: any, key) => current?.[key], obj);\n  }\n\n  /**\n   * Validate specific configuration section.\n   *\n   * @param _config\n   * @param section\n   */\n  validateSection(_config: SystemConfiguration, section: string): ConfigValidationResult {\n    const errors: string[] = [];\n    const warnings: string[] = [];\n\n    // Get rules for this section\n    const sectionRules = Object.entries(VALIDATION_RULES).filter(([path]) =>\n      path.startsWith(`${section}.`)\n    );\n\n    for (const [_path, _rule] of sectionRules) {\n      // Apply validation rules...\n      // (Implementation similar to validateRules but scoped to section)\n    }\n\n    return {\n      valid: errors.length === 0,\n      errors,\n      warnings,\n    };\n  }\n\n  /**\n   * Enhanced validation with production readiness check.\n   *\n   * @param config - System configuration to validate.\n   * @returns Enhanced validation result with production readiness details.\n   */\n  validateEnhanced(config: SystemConfiguration): ValidationResult {\n    const basicResult = this.validate(config);\n\n    const securityIssues: string[] = [];\n    const portConflicts: string[] = [];\n    const performanceWarnings: string[] = [];\n    const failsafeApplied: string[] = [];\n\n    // Check security issues\n    if (!config?.core?.security?.enableSandbox && config?.core?.security?.allowShellAccess) {\n      securityIssues.push('Shell access enabled without sandbox protection');\n    }\n\n    if (config?.core?.security?.trustedHosts?.length === 0) {\n      securityIssues.push('No trusted hosts configured for security');\n    }\n\n    // Check port conflicts\n    const ports = [\n      config?.interfaces?.web?.port,\n      config?.interfaces?.mcp?.http?.port,\n      config?.monitoring?.dashboard?.port,\n    ].filter((port): port is number => typeof port === 'number');\n\n    const uniquePorts = new Set(ports);\n    if (ports.length !== uniquePorts.size) {\n      portConflicts.push('Multiple services configured to use the same port');\n    }\n\n    // Check performance warnings\n    if (config?.coordination?.maxAgents && config?.coordination?.maxAgents > 1000) {\n      performanceWarnings.push('High agent count may impact performance');\n    }\n\n    if (config?.core?.logger?.level === 'debug') {\n      performanceWarnings.push('Debug logging enabled - may impact performance');\n    }\n\n    // Check production readiness\n    const productionReady =\n      basicResult?.valid &&\n      securityIssues.length === 0 &&\n      portConflicts.length === 0 &&\n      config?.core?.security?.enableSandbox === true;\n\n    const result: ValidationResult = {\n      valid: basicResult?.valid,\n      errors: basicResult?.errors,\n      warnings: basicResult?.warnings,\n      productionReady,\n      securityIssues,\n      portConflicts,\n      performanceWarnings,\n      failsafeApplied,\n    };\n\n    return result;\n  }\n\n  /**\n   * Get configuration health report.\n   *\n   * @param config\n   */\n  getHealthReport(config: SystemConfiguration): {\n    status: 'healthy' | 'warning' | 'critical';\n    score: number;\n    details: {\n      structure: boolean;\n      security: boolean;\n      performance: boolean;\n      production: boolean;\n    };\n    recommendations: string[];\n  } {\n    const result = this.validateEnhanced(config);\n    const recommendations: string[] = [];\n\n    // Calculate health scores\n    const structureScore =\n      result?.errors.length === 0 ? 100 : Math.max(0, 100 - result?.errors.length * 10);\n    const securityScore =\n      result?.securityIssues.length === 0\n        ? 100\n        : Math.max(0, 100 - result?.securityIssues.length * 20);\n    const performanceScore =\n      result?.performanceWarnings.length === 0\n        ? 100\n        : Math.max(0, 100 - result?.performanceWarnings.length * 5);\n    const productionScore = result?.productionReady ? 100 : 50;\n\n    const overallScore = (structureScore + securityScore + performanceScore + productionScore) / 4;\n\n    // Generate recommendations\n    if (result?.errors.length > 0) {\n      recommendations.push('Fix configuration errors before deployment');\n    }\n    if (result?.securityIssues.length > 0) {\n      recommendations.push('Address security issues for production deployment');\n    }\n    if (result?.portConflicts.length > 0) {\n      recommendations.push('Resolve port conflicts between services');\n    }\n    if (result?.performanceWarnings.length > 0) {\n      recommendations.push('Review performance configuration for optimization');\n    }\n\n    const status = overallScore >= 90 ? 'healthy' : overallScore >= 70 ? 'warning' : 'critical';\n\n    return {\n      status,\n      score: Math.round(overallScore),\n      details: {\n        structure: result?.errors.length === 0,\n        security: result?.securityIssues.length === 0,\n        performance: result?.performanceWarnings.length < 3,\n        production: result?.productionReady,\n      },\n      recommendations,\n    };\n  }\n}\n", "/**\n * Default Repository Configuration with Advanced Kanban Flow\n * \n * This configuration is automatically applied when adding a new repository\n * to ensure all ML and intelligent features are enabled by default.\n */\n\nimport type { ClaudeZenCoreConfig } from '../core/init.ts';\nimport { memory8GBConfig, calculateOptimalStreams } from './memory-optimization.ts';\nimport { getStartupConfig, logSystemInfo, validateConfigForSystem } from './system-info.ts';\n\nexport interface RepoConfig extends ClaudeZenCoreConfig {\n  // Repository-specific settings\n  repoPath: string;\n  repoName: string;\n  autoDiscoveryEnabled: boolean;\n  \n  // DSPy Neural Enhancement (enabled by default)\n  dsyIntegration: {\n    enabled: boolean;\n    swarmCoordination: boolean;\n    neuralEnhancement: boolean;\n    automaticOptimization: boolean;\n    crossSessionLearning: boolean;\n  };\n\n  // AGUI Configuration (enabled by default)  \n  aguiConfig: {\n    enabled: boolean;\n    workflowGates: boolean;\n    decisionLogging: boolean;\n    escalationChains: boolean;\n    timeoutHandling: boolean;\n  };\n\n  // Advanced Flow Integration\n  flowIntegration: {\n    enableRealTimeOptimization: boolean;\n    monitoringInterval: number;\n    performanceThresholds: {\n      minThroughput: number;\n      maxLeadTime: number;\n      minEfficiency: number;\n      maxBottleneckDuration: number;\n      resourceUtilizationTarget: number;\n      qualityGateThreshold: number;\n    };\n    concurrencyLimits: {\n      maxConcurrentOperations: number;\n      maxParallelAnalysis: number;\n      maxSimultaneousBuilds: number;\n      memoryPoolSizeMB: number;\n    };\n  };\n\n  // Neural Auto-Discovery\n  autoDiscovery: {\n    enabled: boolean;\n    confidenceThreshold: number;\n    autoCreateSwarms: boolean;\n    importDocuments: boolean;\n    learningEnabled: boolean;\n  };\n\n  // FACT + RAG Systems  \n  knowledgeSystems: {\n    factEnabled: boolean;\n    ragEnabled: boolean;\n    wasmAcceleration: boolean;\n    externalMCPs: string[];\n    cacheEnabled: boolean;\n  };\n}\n\n/**\n * Default configuration for new repositories - All advanced features enabled\n */\nexport const defaultRepoConfig: Omit<RepoConfig, 'repoPath' | 'repoName'> = {\n  // Core system configuration (from ClaudeZenCoreConfig)\n  logLevel: 'info',\n  port: 3000,\n  host: 'localhost',\n  \n  // Advanced Kanban Flow - ALL ENABLED BY DEFAULT\n  enableAdvancedKanbanFlow: true,\n  enableMLOptimization: true,\n  enableBottleneckDetection: true,\n  enablePredictiveAnalytics: true,\n  enableRealTimeMonitoring: true,\n  enableIntelligentResourceManagement: true,\n  enableAGUIGates: true,\n  enableCrossLevelOptimization: true,\n  \n  flowTopology: 'hierarchical',\n  // Conservative 8GB base - auto-scales up based on detected system memory\n  maxParallelStreams: {\n    portfolio: 4,    // Strategic streams (conservative start, auto-scales)\n    program: 16,     // Collaborative streams (conservative start, auto-scales)\n    swarm: 64        // Autonomous streams (conservative start, auto-scales)\n  },\n  \n  // Memory allocation strategy starting from 8GB base (auto-detects and scales)\n  memoryAllocation: memory8GBConfig,\n  mlOptimizationLevel: 'enterprise',\n\n  // Repository features\n  autoDiscoveryEnabled: true,\n\n  // DSPy Neural Enhancement - FULLY ENABLED\n  dsyIntegration: {\n    enabled: true,\n    swarmCoordination: true,\n    neuralEnhancement: true,\n    automaticOptimization: true,\n    crossSessionLearning: true,\n  },\n\n  // AGUI Human Gates - FULLY ENABLED\n  aguiConfig: {\n    enabled: true,\n    workflowGates: true,\n    decisionLogging: true,\n    escalationChains: true,\n    timeoutHandling: true,\n  },\n\n  // Flow Integration - ADAPTIVE OPTIMIZATION (starts 8GB, scales automatically)\n  flowIntegration: {\n    enableRealTimeOptimization: true,\n    monitoringInterval: 5000, // 5 second monitoring (conservative start)\n    performanceThresholds: {\n      minThroughput: 10,        // 10 items per hour (conservative start, auto-adjusts)\n      maxLeadTime: 72,          // 3 days maximum (conservative start, improves with scaling)\n      minEfficiency: 0.80,      // 80% minimum efficiency (achievable on any system)\n      maxBottleneckDuration: 30, // 30 minutes maximum (conservative start)\n      resourceUtilizationTarget: 0.70, // 70% target (conservative to allow scaling)\n      qualityGateThreshold: 0.95, // 95% quality threshold\n    },\n    // Adaptive concurrency limits (auto-scales based on detected resources)\n    concurrencyLimits: {\n      maxConcurrentOperations: 8,     // Conservative start (auto-scales)\n      maxParallelAnalysis: 4,         // Conservative analysis threads (auto-scales)\n      maxSimultaneousBuilds: 2,       // Conservative builds (auto-scales)\n      memoryPoolSizeMB: 512,          // 512MB pool (auto-scales)\n    },\n  },\n\n  // Neural Auto-Discovery - INTELLIGENT DEFAULTS\n  autoDiscovery: {\n    enabled: true,\n    confidenceThreshold: 0.8, // 80% confidence for auto-actions\n    autoCreateSwarms: true,\n    importDocuments: true,\n    learningEnabled: true,\n  },\n\n  // Knowledge Systems - ALL ENABLED\n  knowledgeSystems: {\n    factEnabled: true,\n    ragEnabled: true,\n    wasmAcceleration: true,\n    externalMCPs: [\n      'context7',    // Documentation research\n      'deepwiki',    // Knowledge aggregation\n      'gitmcp',      // Repository analysis\n      'semgrep',     // Security scanning\n      'github',      // Repository management\n    ],\n    cacheEnabled: true,\n  },\n};\n\n/**\n * Create Repository Configuration with Auto-Detected Optimal Defaults.\n * \n * Factory function that creates a complete repository configuration by combining\n * intelligent defaults with system-detected capabilities and user overrides.\n * Automatically optimizes settings based on available system memory, CPU cores,\n * and other hardware characteristics.\n * \n * Key Features:\n * - Auto-detection of system resources for optimal parallel stream limits\n * - Ultra-conservative startup configuration that scales based on performance\n * - Comprehensive validation with detailed warning reporting\n * - Integration with all advanced Claude Code Zen features by default\n * - Adaptive memory allocation starting from 8GB base configuration\n * \n * @param repoPath - Absolute path to the repository directory\n * @param overrides - Optional configuration overrides to customize behavior\n * @returns Complete repository configuration with all features enabled\n * \n * @example\n * ```typescript\n * import { createRepoConfig } from 'claude-code-zen/config';\n * \n * // Basic usage with defaults\n * const config = createRepoConfig('/path/to/my-project');\n * \n * // With custom overrides\n * const customConfig = createRepoConfig('/path/to/my-project', {\n *   enableMLOptimization: false,\n *   maxParallelStreams: {\n *     portfolio: 2,\n *     program: 8,\n *     swarm: 32\n *   },\n *   dsyIntegration: {\n *     ...defaultRepoConfig.dsyIntegration,\n *     crossSessionLearning: false\n *   }\n * });\n * ```\n * \n * @see {@link RepoConfig} - Configuration interface\n * @see {@link validateRepoConfig} - Configuration validation\n * @see {@link defaultRepoConfig} - Base default settings\n * @since 1.0.0-alpha.43\n */\nexport function createRepoConfig(repoPath: string, overrides: Partial<RepoConfig> = {}): RepoConfig {\n  const repoName = repoPath.split('/').pop() || 'unknown-repo';\n  \n  // Get ultra-conservative startup configuration\n  const startupConfig = getStartupConfig();\n  \n  const optimizedConfig = {\n    ...defaultRepoConfig,\n    // Apply ultra-conservative startup configuration\n    maxParallelStreams: {\n      portfolio: startupConfig.portfolio,\n      program: startupConfig.program,\n      swarm: startupConfig.swarm,\n    },\n    repoPath,\n    repoName,\n    ...overrides,\n  };\n  \n  console.log(`\uD83D\uDD12 Ultra-safe startup: ${startupConfig.rationale}`);\n  console.log(`\uD83C\uDFAF Initial streams: Portfolio=${optimizedConfig.maxParallelStreams.portfolio}, Program=${optimizedConfig.maxParallelStreams.program}, Swarm=${optimizedConfig.maxParallelStreams.swarm}`);\n  console.log('\uD83D\uDE80 System will auto-scale based on performance metrics');\n  \n  // Validate configuration before returning (wired up!)\n  const repoValidation = validateRepoConfig(optimizedConfig);\n  if (!repoValidation.valid) {\n    console.warn('\u26A0\uFE0F Repository configuration validation warnings:', repoValidation.errors);\n    // Continue with warnings but don't fail - configs might have acceptable issues\n  } else {\n    console.log('\u2705 Repository configuration validated successfully');\n  }\n  \n  return optimizedConfig;\n}\n\n/**\n * Validate Repository Configuration.\n * \n * Comprehensive validation function that checks repository configuration for\n * correctness, safety, and system compatibility. Performs adaptive validation\n * based on detected system resources to ensure configuration values are\n * appropriate for the target deployment environment.\n * \n * Validation Checks:\n * - Required fields presence (repoPath, repoName)\n * - Numeric ranges and thresholds (monitoring intervals, confidence values)\n * - System resource limits based on detected memory and CPU cores\n * - Adaptive stream limits scaled to system capabilities\n * - Configuration coherence and internal consistency\n * \n * @param config - Repository configuration to validate\n * @returns Validation result with success status and detailed error list\n * \n * @example\n * ```typescript\n * import { validateRepoConfig, createRepoConfig } from 'claude-code-zen/config';\n * \n * const config = createRepoConfig('/my/repo', {\n *   maxParallelStreams: { portfolio: 100, program: 200, swarm: 500 }\n * });\n * \n * const validation = validateRepoConfig(config);\n * if (!validation.valid) {\n *   console.error('Configuration errors:', validation.errors);\n *   // Handle configuration issues...\n * } else {\n *   console.log('Configuration is valid and ready for use');\n * }\n * ```\n * \n * @see {@link RepoConfig} - Configuration interface\n * @see {@link createRepoConfig} - Configuration factory\n * @since 1.0.0-alpha.43\n */\nexport function validateRepoConfig(config: RepoConfig): { valid: boolean; errors: string[] } {\n  const errors: string[] = [];\n\n  if (!config.repoPath) {\n    errors.push('Repository path is required');\n  }\n\n  if (!config.repoName) {\n    errors.push('Repository name is required');  \n  }\n\n  if (config.flowIntegration.monitoringInterval < 1000) {\n    errors.push('Monitoring interval must be at least 1000ms');\n  }\n\n  if (config.autoDiscovery.confidenceThreshold < 0.5 || config.autoDiscovery.confidenceThreshold > 1.0) {\n    errors.push('Auto-discovery confidence threshold must be between 0.5 and 1.0');\n  }\n\n  // Adaptive validation based on detected system memory\n  const detectedMemoryGB = (() => {\n    try {\n      const os = require('os');\n      return Math.round(os.totalmem() / (1024 * 1024 * 1024));\n    } catch {\n      return 8;\n    }\n  })();\n  \n  const maxSafePortfolio = Math.max(1, Math.floor(detectedMemoryGB * 0.5));\n  const maxSafeProgram = Math.max(2, Math.floor(detectedMemoryGB * 2));\n  const maxSafeSwarm = Math.max(4, Math.floor(detectedMemoryGB * 4));\n\n  if (config.maxParallelStreams.portfolio < 1 || config.maxParallelStreams.portfolio > maxSafePortfolio) {\n    errors.push(`Portfolio parallel streams must be between 1 and ${maxSafePortfolio} for ${detectedMemoryGB}GB system`);\n  }\n\n  if (config.maxParallelStreams.program < 1 || config.maxParallelStreams.program > maxSafeProgram) {\n    errors.push(`Program parallel streams must be between 1 and ${maxSafeProgram} for ${detectedMemoryGB}GB system`);\n  }\n\n  if (config.maxParallelStreams.swarm < 2 || config.maxParallelStreams.swarm > maxSafeSwarm) {\n    errors.push(`Swarm parallel streams must be between 2 and ${maxSafeSwarm} for ${detectedMemoryGB}GB system`);\n  }\n\n  return {\n    valid: errors.length === 0,\n    errors,\n  };\n}\n\n/**\n * Log Repository Configuration Status.\n * \n * Comprehensive logging function that outputs detailed repository configuration\n * status with visual indicators and structured information. Used for diagnostics,\n * debugging, and system health monitoring to provide clear visibility into\n * active configuration settings.\n * \n * Output Information:\n * - Repository identification (name, path)\n * - Feature enablement status with visual indicators (\u2705/\u274C)\n * - Advanced Kanban Flow settings and optimization levels\n * - Neural enhancement and learning capabilities\n * - Knowledge system integration status\n * - Performance and resource allocation settings\n * - Topology and parallel stream configuration\n * \n * @param config - Repository configuration to log\n * \n * @example\n * ```typescript\n * import { logRepoConfigStatus, createRepoConfig } from 'claude-code-zen/config';\n * \n * const config = createRepoConfig('/my/awesome-project');\n * \n * // Log detailed configuration status\n * logRepoConfigStatus(config);\n * \n * // Output example:\n * // \uD83D\uDE80 Repository Configuration:\n * //    Repository: awesome-project (/my/awesome-project)\n * //    Advanced Kanban Flow: \u2705 ENABLED\n * //    ML Optimization: \u2705 ENABLED (Level: enterprise)\n * //    Neural Enhancement: \u2705 ENABLED\n * //    Auto-Discovery: \u2705 ENABLED (Confidence: 0.8)\n * //    ...\n * ```\n * \n * @see {@link RepoConfig} - Configuration interface\n * @see {@link createRepoConfig} - Configuration factory\n * @since 1.0.0-alpha.43\n */\nexport function logRepoConfigStatus(config: RepoConfig): void {\n  const logger = console;\n  \n  logger.log('\uD83D\uDE80 Repository Configuration:');\n  logger.log(`   Repository: ${config.repoName} (${config.repoPath})`);\n  logger.log(`   Advanced Kanban Flow: ${config.enableAdvancedKanbanFlow ? '\u2705 ENABLED' : '\u274C DISABLED'}`);\n  logger.log(`   ML Optimization: ${config.enableMLOptimization ? '\u2705 ENABLED' : '\u274C DISABLED'} (Level: ${config.mlOptimizationLevel})`);\n  logger.log(`   Bottleneck Detection: ${config.enableBottleneckDetection ? '\u2705 ENABLED' : '\u274C DISABLED'}`);\n  logger.log(`   Predictive Analytics: ${config.enablePredictiveAnalytics ? '\u2705 ENABLED' : '\u274C DISABLED'}`);\n  logger.log(`   Real-Time Monitoring: ${config.enableRealTimeMonitoring ? '\u2705 ENABLED' : '\u274C DISABLED'}`);\n  logger.log(`   Resource Management: ${config.enableIntelligentResourceManagement ? '\u2705 ENABLED' : '\u274C DISABLED'}`);\n  logger.log(`   AGUI Gates: ${config.enableAGUIGates ? '\u2705 ENABLED' : '\u274C DISABLED'}`);\n  logger.log(`   Cross-Level Optimization: ${config.enableCrossLevelOptimization ? '\u2705 ENABLED' : '\u274C DISABLED'}`);\n  logger.log(`   DSPy Neural Enhancement: ${config.dsyIntegration.enabled ? '\u2705 ENABLED' : '\u274C DISABLED'}`);\n  logger.log(`   Auto-Discovery: ${config.autoDiscovery.enabled ? '\u2705 ENABLED' : '\u274C DISABLED'} (Confidence: ${config.autoDiscovery.confidenceThreshold})`);\n  logger.log(`   Knowledge Systems: FACT=${config.knowledgeSystems.factEnabled ? '\u2705' : '\u274C'}, RAG=${config.knowledgeSystems.ragEnabled ? '\u2705' : '\u274C'}, WASM=${config.knowledgeSystems.wasmAcceleration ? '\u2705' : '\u274C'}`);\n  logger.log(`   Flow Topology: ${config.flowTopology}`);\n  logger.log(`   Parallel Streams: Portfolio=${config.maxParallelStreams.portfolio}, Program=${config.maxParallelStreams.program}, Swarm=${config.maxParallelStreams.swarm}`);\n  logger.log('\u2705 All advanced features enabled with adaptive 8GB base configuration!');\n  logger.log('\uD83D\uDD04 System will auto-scale based on detected memory and performance!');\n}\n\nexport default defaultRepoConfig;"],
  "mappings": "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",
  "names": ["EventEmitter", "fs", "path", "path", "path", "path", "logger", "path", "logger", "EventEmitter"]
}
