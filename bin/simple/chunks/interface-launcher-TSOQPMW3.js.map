{
  "version": 3,
  "sources": ["../../src/core/interface-launcher.ts", "../../src/core/interface-mode-detector.ts"],
  "sourcesContent": ["/**\n * Interface Launcher.\n *\n * Handles launching the appropriate interface (CLI/TUI/Web) based on environment.\n * And configuration. Integrates with all core systems directly without plugins.\n */\n/**\n * @file Interface-launcher implementation.\n */\n\nimport { EventEmitter } from 'node:events';\nimport { getWebDashboardURL } from '../config/defaults.ts';\nimport { getLogger } from '../config/logging-config.ts';\nimport type { WebConfig } from '../interfaces/web/web-config.ts';\nimport {\n  type InterfaceMode,\n  InterfaceModeDetector,\n  type ModeDetectionOptions,\n} from './interface-mode-detector.ts';\n\nconst logger = getLogger('InterfaceLauncher');\n\nexport interface LaunchOptions extends ModeDetectionOptions {\n  verbose?: boolean;\n  silent?: boolean;\n  config?: {\n    theme?: 'dark' | 'light';\n    realTime?: boolean;\n    coreSystem?: Record<string, unknown>; // Reference to ApplicationCoordinator\n  };\n}\n\n// Remove local WebConfig interface since we import it from web-config.ts\n\nexport interface LaunchResult {\n  mode: InterfaceMode;\n  success: boolean;\n  url?: string;\n  error?: string;\n  pid?: number;\n}\n\nexport class InterfaceLauncher extends EventEmitter {\n  private static instance: InterfaceLauncher;\n  private activeInterface?:\n    | {\n        mode: InterfaceMode;\n        process?: NodeJS.Process;\n        server?: Record<string, unknown>;\n        url?: string;\n        pid?: number;\n      }\n    | undefined;\n\n  private constructor() {\n    super();\n    this.setupShutdownHandlers();\n  }\n\n  /**\n   * Get singleton instance.\n   */\n  static getInstance(): InterfaceLauncher {\n    if (!InterfaceLauncher.instance) {\n      InterfaceLauncher.instance = new InterfaceLauncher();\n    }\n    return InterfaceLauncher.instance;\n  }\n\n  /**\n   * Launch the appropriate interface based on options and environment.\n   *\n   * @param options\n   */\n  async launch(options: LaunchOptions = {}): Promise<LaunchResult> {\n    const detection = InterfaceModeDetector.detect(options);\n\n    if (!options?.['silent']) {\n      logger.info(`\uD83D\uDE80 Launching ${detection.mode.toUpperCase()} interface`);\n      logger.info(`Reason: ${detection.reason}`);\n    }\n\n    // Validate the selected mode\n    const validation = InterfaceModeDetector.validateMode(detection.mode);\n    if (!validation.valid) {\n      const error = `Cannot launch ${detection.mode} interface: ${validation.reason}`;\n      logger.error(error);\n      return {\n        mode: detection.mode,\n        success: false,\n        error,\n      };\n    }\n\n    try {\n      let result: LaunchResult;\n\n      switch (detection.mode) {\n        case 'cli':\n          result = await this.launchCLI(options);\n          break;\n        case 'tui':\n          result = await this.launchTUI(options);\n          break;\n        case 'web':\n          result = await this.launchWeb(options, detection.config.port);\n          break;\n        default:\n          throw new Error(`Unknown interface mode: ${detection.mode}`);\n      }\n\n      if (result?.success) {\n        this.activeInterface = {\n          mode: detection.mode,\n          ...(result?.url !== undefined && { url: result?.url }),\n          ...(result?.pid !== undefined && { pid: result?.pid }),\n        };\n\n        this.emit('interface:launched', {\n          mode: detection.mode,\n          url: result?.url,\n          pid: result?.pid,\n        });\n\n        if (!options?.['silent']) {\n          logger.info(`\u2705 ${detection.mode.toUpperCase()} interface launched successfully`);\n          if (result?.url) {\n            logger.info(`\uD83C\uDF10 Available at: ${result?.url}`);\n          }\n        }\n      }\n\n      return result;\n    } catch (error) {\n      const errorMessage = error instanceof Error ? error.message : 'Unknown error';\n      logger.error(`\u274C Failed to launch ${detection.mode} interface:`, errorMessage);\n\n      return {\n        mode: detection.mode,\n        success: false,\n        error: errorMessage,\n      };\n    }\n  }\n\n  /**\n   * Launch CLI interface (Unified Terminal Interface).\n   *\n   * @param options\n   */\n  private async launchCLI(options: LaunchOptions): Promise<LaunchResult> {\n    logger.debug('Launching Unified Terminal Interface in CLI mode');\n\n    try {\n      // Use the unified terminal interface\n      const { spawn } = await import('node:child_process');\n      const cliArgs: string[] = [];\n\n      if (options?.['verbose']) cliArgs.push('--verbose');\n      if (options?.['config']?.theme) cliArgs.push('--theme', options?.['config']?.theme);\n\n      // CLI mode will be detected automatically based on presence of commands\n      // Don't add interactive flag to keep CLI mode behavior\n\n      const cliProcess = spawn('npx', ['tsx', 'src/interfaces/terminal/main.tsx', ...cliArgs], {\n        stdio: 'inherit',\n        cwd: process.cwd(),\n      });\n\n      return new Promise<LaunchResult>((resolve, reject) => {\n        cliProcess.on('close', (code) => {\n          resolve({\n            mode: 'cli',\n            success: code === 0,\n            ...(cliProcess.pid !== undefined && { pid: cliProcess.pid }),\n          });\n        });\n\n        cliProcess.on('error', (error) => {\n          logger.error('Unified Terminal Interface launch error:', error);\n          reject(error);\n        });\n      });\n    } catch (_error) {\n      // Fallback to basic CLI if unified terminal fails\n      logger.warn('Unified Terminal Interface launch failed, using basic CLI');\n      return this.launchBasicCLI(options);\n    }\n  }\n\n  /**\n   * Launch TUI interface using Unified Terminal Interface.\n   *\n   * @param options\n   */\n  private async launchTUI(options: LaunchOptions): Promise<LaunchResult> {\n    logger.debug('Launching Unified Terminal Interface in TUI mode');\n\n    try {\n      // Use the unified terminal interface with TUI mode flag\n      const { spawn } = await import('node:child_process');\n      const tuiArgs = ['--ui']; // Force TUI mode\n\n      if (options?.['verbose']) tuiArgs.push('--verbose');\n      if (options?.['config']?.theme) tuiArgs.push('--theme', options?.['config']?.theme);\n\n      const tuiProcess = spawn('npx', ['tsx', 'src/interfaces/terminal/main.tsx', ...tuiArgs], {\n        stdio: 'inherit',\n        cwd: process.cwd(),\n      });\n\n      return new Promise<LaunchResult>((resolve, reject) => {\n        tuiProcess.on('close', (code) => {\n          resolve({\n            mode: 'tui',\n            success: code === 0,\n            ...(tuiProcess.pid !== undefined && { pid: tuiProcess.pid }),\n          });\n        });\n\n        tuiProcess.on('error', (error) => {\n          logger.error('Unified Terminal Interface TUI launch error:', error);\n          reject(error);\n        });\n      });\n    } catch (error) {\n      logger.error('Failed to launch TUI interface:', error);\n\n      // Fallback to CLI\n      logger.info('Falling back to CLI interface');\n      return this.launchCLI(options);\n    }\n  }\n\n  /**\n   * Launch Web interface.\n   *\n   * @param options\n   * @param port\n   */\n  private async launchWeb(options: LaunchOptions, port?: number): Promise<LaunchResult> {\n    const webPort = port || options?.['webPort'] || 3456;\n\n    logger.debug(`Launching Web interface on port ${webPort}`);\n\n    try {\n      // Dynamic import of Web interface\n      const { WebInterface } = await import('../interfaces/web/web-interface.ts');\n\n      const webConfig: WebConfig = {\n        port: webPort,\n        theme: options?.['config']?.theme || 'dark',\n        realTime: options?.['config']?.realTime !== false,\n        coreSystem: options?.['config']?.coreSystem,\n      };\n\n      const web = new WebInterface(webConfig);\n\n      // Web interface auto-initializes on construction\n      await web.run();\n      const server = web as any; // Use the web interface instance as server\n\n      // Use centralized URL builder for consistent URL generation\n      const url = getWebDashboardURL({ port: webPort });\n\n      this.activeInterface = {\n        mode: 'web',\n        server,\n        url,\n        pid: process.pid,\n      };\n\n      return {\n        mode: 'web',\n        success: true,\n        url,\n        pid: process.pid,\n      };\n    } catch (error) {\n      logger.error('Failed to launch Web interface:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Basic CLI fallback when TUI/Web interfaces aren't available.\n   *\n   * @param options\n   */\n  private async launchBasicCLI(options: LaunchOptions): Promise<LaunchResult> {\n    logger.info('\uD83D\uDD27 Claude Code Zen - Basic CLI Mode');\n\n    if (options?.['config']?.coreSystem) {\n      const system = options?.['config']?.coreSystem;\n\n      try {\n        // Show system status\n        if (system && typeof system === 'object' && 'getSystemStatus' in system) {\n          const getSystemStatusFn = system['getSystemStatus'];\n          if (typeof getSystemStatusFn === 'function') {\n            const status = await getSystemStatusFn();\n            if (status && typeof status === 'object' && 'components' in status) {\n              for (const [_name, _info] of Object.entries(\n                status.components as Record<string, unknown>\n              )) {\n              }\n            }\n          }\n        }\n      } catch (error) {\n        logger.error('Failed to show system status:', error);\n      }\n    } else {\n    }\n\n    return {\n      mode: 'cli',\n      success: true,\n      pid: process.pid,\n    };\n  }\n\n  /**\n   * Get current interface status.\n   */\n  getStatus(): {\n    active: boolean;\n    mode?: InterfaceMode;\n    url?: string;\n    pid?: number;\n  } {\n    return {\n      active: !!this.activeInterface,\n      ...(this.activeInterface?.mode !== undefined && {\n        mode: this.activeInterface.mode,\n      }),\n      ...(this.activeInterface?.url !== undefined && {\n        url: this.activeInterface.url,\n      }),\n      ...(this.activeInterface?.pid !== undefined && {\n        pid: this.activeInterface.pid,\n      }),\n    };\n  }\n\n  /**\n   * Shutdown active interface.\n   */\n  async shutdown(): Promise<void> {\n    if (!this.activeInterface) return;\n\n    logger.info(`Shutting down ${this.activeInterface.mode} interface...`);\n\n    try {\n      if (this.activeInterface.server) {\n        // Web server shutdown\n        await new Promise<void>((resolve) => {\n          const server = this.activeInterface?.server;\n          if (server && typeof server === 'object' && 'close' in server) {\n            const closeFn = server['close'];\n            if (typeof closeFn === 'function') {\n              closeFn(() => {\n                resolve();\n              });\n            } else {\n              resolve();\n            }\n          } else {\n            resolve();\n          }\n        });\n      }\n\n      if (this.activeInterface.process) {\n        // Process-based interface shutdown\n        this.activeInterface.process.kill('SIGTERM');\n      }\n\n      this.emit('interface:shutdown', {\n        mode: this.activeInterface.mode,\n      });\n\n      this.activeInterface = undefined;\n      logger.info('Interface shutdown complete');\n    } catch (error) {\n      logger.error('Error during interface shutdown:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Restart interface with new options.\n   *\n   * @param options\n   */\n  async restart(options: LaunchOptions = {}): Promise<LaunchResult> {\n    logger.info('Restarting interface...');\n\n    await this.shutdown();\n    return this.launch(options);\n  }\n\n  /**\n   * Get interface recommendations for current environment.\n   */\n  getRecommendations() {\n    return InterfaceModeDetector.getRecommendation();\n  }\n\n  /**\n   * Get environment information for debugging.\n   */\n  getEnvironmentInfo() {\n    return InterfaceModeDetector.getEnvironmentInfo();\n  }\n\n  /**\n   * Setup graceful shutdown handlers.\n   */\n  private setupShutdownHandlers(): void {\n    const shutdown = async (signal: string) => {\n      logger.info(`Received ${signal}, shutting down gracefully...`);\n      try {\n        await this.shutdown();\n        process.exit(0);\n      } catch (error) {\n        logger.error('Error during shutdown:', error);\n        process.exit(1);\n      }\n    };\n\n    process.on('SIGINT', () => shutdown('SIGINT'));\n    process.on('SIGTERM', () => shutdown('SIGTERM'));\n\n    // Handle uncaught exceptions\n    process.on('uncaughtException', async (error) => {\n      logger.error('Uncaught exception:', error);\n      try {\n        await this.shutdown();\n      } catch (shutdownError) {\n        logger.error('Error during emergency shutdown:', shutdownError);\n      }\n      process.exit(1);\n    });\n\n    process.on('unhandledRejection', async (reason: unknown) => {\n      logger.error('Unhandled rejection:', reason);\n      try {\n        await this.shutdown();\n      } catch (shutdownError) {\n        logger.error('Error during emergency shutdown:', shutdownError);\n      }\n      process.exit(1);\n    });\n  }\n}\n\n// Export convenience functions\nexport const launchInterface = async (options?: LaunchOptions): Promise<LaunchResult> => {\n  const launcher = InterfaceLauncher.getInstance();\n  return launcher.launch(options);\n};\n\nexport const getInterfaceStatus = () => {\n  const launcher = InterfaceLauncher.getInstance();\n  return launcher.getStatus();\n};\n\nexport const shutdownInterface = async (): Promise<void> => {\n  const launcher = InterfaceLauncher.getInstance();\n  return launcher.shutdown();\n};\n", "// Interface mode detection utilities\n/**\n * @file Interface-mode-detector implementation.\n */\n\nexport type InterfaceMode = 'cli' | 'tui' | 'web';\n\nexport interface ModeDetectionOptions {\n  /** Force a specific mode regardless of environment */\n  forceMode?: InterfaceMode;\n  /** Enable web mode on specified port */\n  webPort?: number;\n  /** Enable daemon mode for web interface */\n  daemon?: boolean;\n  /** Prefer TUI over CLI in interactive environments */\n  preferTui?: boolean;\n}\n\nexport interface ModeDetectionResult {\n  mode: InterfaceMode;\n  reason: string;\n  config: {\n    port?: number;\n    daemon?: boolean;\n    interactive: boolean;\n    hasTerminal: boolean;\n    isCI: boolean;\n  };\n}\n\nexport class InterfaceModeDetector {\n  /**\n   * Detect the appropriate interface mode based on environment.\n   *\n   * @param options\n   */\n  static detect(options: ModeDetectionOptions = {}): ModeDetectionResult {\n    const { forceMode, webPort, daemon, preferTui = true } = options;\n\n    // Environment analysis\n    const isCI = !!(\n      process.env['CI'] ||\n      process.env['GITHUB_ACTIONS'] ||\n      process.env['TRAVIS'] ||\n      process.env['JENKINS'] ||\n      process.env['GITLAB_CI']\n    );\n\n    const hasTerminal = !!process.stdin?.isTTY;\n    const interactive = hasTerminal && !isCI;\n\n    // Command line argument analysis\n    const args = process.argv.slice(2);\n    const hasCliFlag = args.includes('--cli');\n    const hasWebFlag = args.includes('--web') || args.includes('--daemon');\n    const hasTuiFlag = args.includes('--tui') || args.includes('--interactive');\n\n    let mode: InterfaceMode;\n    let reason: string;\n\n    // Force mode if specified\n    if (forceMode) {\n      mode = forceMode;\n      reason = `Forced mode: ${forceMode}`;\n    }\n    // Explicit CLI flag or non-interactive environment\n    else if (hasCliFlag || isCI || !hasTerminal) {\n      mode = 'cli';\n      reason = hasCliFlag\n        ? 'Explicit --cli flag provided'\n        : isCI\n          ? 'CI/CD environment detected'\n          : 'Non-interactive terminal detected';\n    }\n    // Explicit web flag or daemon mode\n    else if (hasWebFlag || daemon || webPort) {\n      mode = 'web';\n      reason = hasWebFlag\n        ? 'Explicit --web or --daemon flag provided'\n        : webPort\n          ? `Web port ${webPort} specified`\n          : 'Daemon mode enabled';\n    }\n    // Explicit TUI flag\n    else if (hasTuiFlag) {\n      mode = 'tui';\n      reason = 'Explicit --tui or --interactive flag provided';\n    }\n    // Interactive terminal - prefer TUI or CLI based on preference\n    else if (interactive) {\n      mode = preferTui ? 'tui' : 'cli';\n      reason = preferTui\n        ? 'Interactive terminal detected, preferring TUI mode'\n        : 'Interactive terminal detected, preferring CLI mode';\n    }\n    // Fallback to CLI\n    else {\n      mode = 'cli';\n      reason = 'Default fallback to CLI mode';\n    }\n\n    // Build config object with proper optional property handling\n    const port = webPort || (mode === 'web' ? 3456 : undefined);\n    const daemonMode = daemon || mode === 'web';\n\n    const config: ModeDetectionResult['config'] = {\n      interactive,\n      hasTerminal,\n      isCI,\n    };\n\n    // Only add optional properties when they have defined values\n    if (port !== undefined) {\n      config.port = port;\n    }\n    if (daemonMode !== undefined) {\n      config.daemon = daemonMode;\n    }\n\n    return {\n      mode,\n      reason,\n      config,\n    };\n  }\n\n  /**\n   * Get environment information for debugging.\n   */\n  static getEnvironmentInfo(): Record<string, any> {\n    return {\n      platform: process.platform,\n      nodeVersion: process.version,\n      tty: {\n        stdin: !!process.stdin?.isTTY,\n        stdout: !!process.stdout?.isTTY,\n        stderr: !!process.stderr?.isTTY,\n      },\n      environment: {\n        ci: !!process.env['CI'],\n        github: !!process.env['GITHUB_ACTIONS'],\n        term: process.env['TERM'],\n        termProgram: process.env['TERM_PROGRAM'],\n        colorTerm: process.env['COLORTERM'],\n      },\n      argv: process.argv,\n      cwd: process.cwd(),\n    };\n  }\n\n  /**\n   * Validate if a mode is supported in the current environment.\n   *\n   * @param mode\n   */\n  static validateMode(mode: InterfaceMode): {\n    valid: boolean;\n    reason?: string;\n  } {\n    switch (mode) {\n      case 'cli':\n        return { valid: true };\n\n      case 'tui':\n        if (!process.stdin || !process.stdin.isTTY) {\n          return {\n            valid: false,\n            reason: 'TUI mode requires an interactive terminal',\n          };\n        }\n        return { valid: true };\n\n      case 'web':\n        // Web mode should work in any environment\n        return { valid: true };\n\n      default:\n        return {\n          valid: false,\n          reason: `Unknown interface mode: ${mode}`,\n        };\n    }\n  }\n\n  /**\n   * Get recommended mode based on current environment.\n   */\n  static getRecommendation(): {\n    primary: InterfaceMode;\n    alternatives: InterfaceMode[];\n    explanation: string;\n  } {\n    const detection = InterfaceModeDetector.detect();\n    const alternatives: InterfaceMode[] = [];\n\n    // Always include CLI as it works everywhere\n    if (detection.mode !== 'cli') {\n      alternatives.push('cli');\n    }\n\n    // Add TUI if terminal is interactive\n    if (detection.config.interactive && detection.mode !== 'tui') {\n      alternatives.push('tui');\n    }\n\n    // Add web as it works everywhere\n    if (detection.mode !== 'web') {\n      alternatives.push('web');\n    }\n\n    let explanation = `Primary mode: ${detection.mode} (${detection.reason}).`;\n    if (alternatives.length > 0) {\n      explanation += ` Alternatives: ${alternatives.join(', ')}.`;\n    }\n\n    return {\n      primary: detection.mode,\n      alternatives,\n      explanation,\n    };\n  }\n}\n"],
  "mappings": "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",
  "names": []
}
