{
  "version": 3,
  "sources": ["../../src/coordination/public-api.ts"],
  "sourcesContent": ["/**\n * Public API for Coordination Layer.\n *\n * This file provides the public interface for external modules to interact\n * with the coordination layer without directly accessing internal implementations.\n */\n/**\n * @file Coordination system: public-api.\n */\n\nimport type { SwarmConfig, SwarmLifecycleState } from './swarm/core/types.ts';\n\n/**\n * Public interface for swarm coordination.\n *\n * @example\n */\nexport interface PublicSwarmCoordinator {\n  // Swarm lifecycle\n  initialize(config?: SwarmConfig): Promise<void>;\n  shutdown(): Promise<void>;\n\n  // State management\n  getState(): SwarmLifecycleState;\n  getSwarmId(): string;\n\n  // Agent management\n  getAgentCount(): number;\n  getActiveAgents(): string[];\n\n  // Status and monitoring\n  getStatus(): {\n    id: string;\n    state: SwarmLifecycleState;\n    agentCount: number;\n    taskCount: number;\n    uptime: number;\n  };\n}\n\n/**\n * Factory function to create a public swarm coordinator.\n * This wraps the internal SwarmCoordinator with a limited public interface.\n *\n * @param config\n * @example\n */\nexport async function createPublicSwarmCoordinator(\n  config?: SwarmConfig\n): Promise<PublicSwarmCoordinator> {\n  // Dynamically import to avoid circular dependencies\n  const { SwarmCoordinator } = await import('./swarm/core/swarm-coordinator.ts');\n\n  const coordinator = new SwarmCoordinator();\n  await coordinator.initialize(config);\n\n  // Return limited public interface\n  return {\n    async initialize(config?: SwarmConfig) {\n      return coordinator.initialize(config);\n    },\n\n    async shutdown() {\n      return coordinator.shutdown();\n    },\n\n    getState() {\n      return coordinator.getState();\n    },\n\n    getSwarmId() {\n      return coordinator.getSwarmId();\n    },\n\n    getAgentCount() {\n      return coordinator.getAgentCount();\n    },\n\n    getActiveAgents() {\n      return coordinator.getActiveAgents();\n    },\n\n    getStatus() {\n      return {\n        id: coordinator.getSwarmId(),\n        state: coordinator.getState(),\n        agentCount: coordinator.getAgentCount(),\n        taskCount: coordinator.getTaskCount(),\n        uptime: coordinator.getUptime(),\n      };\n    },\n  };\n}\n\n// Export types that external modules can use\nexport type { SwarmConfig, SwarmLifecycleState } from './swarm/core/types.ts';\n// Re-export SwarmLifecycleState as SwarmState for backward compatibility\nexport type SwarmState = SwarmLifecycleState;\n"],
  "mappings": ";;;;;;;;;;;;;AA+CA,eAAsB,6BACpB,QACiC;AAEjC,QAAM,EAAE,iBAAiB,IAAI,MAAM,OAAO,iCAAmC;AAE7E,QAAM,cAAc,IAAI,iBAAiB;AACzC,QAAM,YAAY,WAAW,MAAM;AAGnC,SAAO;AAAA,IACL,MAAM,WAAWA,SAAsB;AACrC,aAAO,YAAY,WAAWA,OAAM;AAAA,IACtC;AAAA,IAEA,MAAM,WAAW;AACf,aAAO,YAAY,SAAS;AAAA,IAC9B;AAAA,IAEA,WAAW;AACT,aAAO,YAAY,SAAS;AAAA,IAC9B;AAAA,IAEA,aAAa;AACX,aAAO,YAAY,WAAW;AAAA,IAChC;AAAA,IAEA,gBAAgB;AACd,aAAO,YAAY,cAAc;AAAA,IACnC;AAAA,IAEA,kBAAkB;AAChB,aAAO,YAAY,gBAAgB;AAAA,IACrC;AAAA,IAEA,YAAY;AACV,aAAO;AAAA,QACL,IAAI,YAAY,WAAW;AAAA,QAC3B,OAAO,YAAY,SAAS;AAAA,QAC5B,YAAY,YAAY,cAAc;AAAA,QACtC,WAAW,YAAY,aAAa;AAAA,QACpC,QAAQ,YAAY,UAAU;AAAA,MAChC;AAAA,IACF;AAAA,EACF;AACF;AA7CsB;",
  "names": ["config"]
}
