{
  "version": 3,
  "sources": ["../../src/database/factory.ts"],
  "sourcesContent": ["/**\n * Unified Data Access Layer (DAL) - Factory Implementation.\n *\n * @file Central factory for creating repository and DAO instances based on database type,\n * entity requirements, and configuration. Supports dependency injection, caching,\n * multi-database coordination, and provides a single point of access for all data layer implementations.\n *\n * This factory handles the complexity of database adapter creation, entity schema management,\n * connection pooling, and provides both repository and DAO pattern implementations.\n * @author Claude-Zen DAL Team\n * @version 2.0.0\n * @since 1.0.0\n * @example Basic Factory Usage\n * ```typescript\n * import { DALFactory } from './database/factory';\n * import { DIContainer } from '../di/container/di-container.ts';\n *\n * const container = new DIContainer();\n * const factory = container.resolve(DALFactory);\n *\n * // Create repository\n * const userRepo = await factory.createRepository<User>({\n *   databaseType: 'postgresql',\n *   entityType: 'User',\n *   databaseConfig: pgConfig\n * });\n *\n * // Create DAO with business logic\n * const userDAO = await factory.createDAO<User>({\n *   databaseType: 'postgresql',\n *   entityType: 'User',\n *   databaseConfig: pgConfig\n * });\n * ```\n * @example Multi-Database Factory Setup\n * ```typescript\n * const multiDAO = await factory.createMultiDatabaseDAO<Document>(\n *   'Document',\n *   { databaseType: 'postgresql', entityType: 'Document' }, // Primary\n *   [{ databaseType: 'lancedb', entityType: 'Document' }]   // Vector search secondary\n * );\n *\n * // Writes go to PostgreSQL, vector searches to LanceDB\n * const doc = await multiDAO.create({ title: 'Test', content: 'Content' });\n * const similar = await multiDAO.vectorSearch(embedding, 10);\n * ```\n */\n\n// Simple interfaces to avoid import issues\ninterface ILogger {\n  debug(message: string, meta?: any): void;\n  info(message: string, meta?: any): void;\n  warn(message: string, meta?: any): void;\n  error(message: string, meta?: any): void;\n}\n\ninterface IConfig {\n  get(key: string): any;\n  set(key: string, value: any): void;\n}\n\ninterface DatabaseAdapter {\n  query(sql: string, params?: any[]): Promise<{ rows: any[]; rowCount: number }>;\n  transaction<T>(fn: (tx: any) => Promise<T>): Promise<T>;\n  close(): Promise<void>;\n  getSchema?(): Promise<any>;\n}\n\n// Simple dependency injection decorators\nfunction injectable<T extends new (...args: any[]) => any>(constructor: T) {\n  return constructor;\n}\n\nfunction inject(token: string) {\n  return (target: any, propertyKey: string | symbol | undefined, parameterIndex: number) => {\n    // Simple injection implementation\n  };\n}\n\n// Core tokens\nconst CORE_TOKENS = {\n  Logger: 'Logger',\n  Config: 'Config',\n} as const;\n\n// Database config types\ninterface DatabaseConfig {\n  type: string;\n  host?: string;\n  port?: number;\n  database?: string;\n  username?: string;\n  password?: string;\n  pool?: {\n    min: number;\n    max: number;\n  };\n  options?: Record<string, any>;\n}\n\ninterface DatabaseProviderFactory {\n  createAdapter(config: DatabaseConfig): Promise<DatabaseAdapter>;\n}\n\nimport type { ICoordinationRepository, IMemoryRepository } from '../database/interfaces.ts';\nimport type {\n  IDataAccessObject,\n  IGraphRepository,\n  IRepository,\n  IVectorRepository,\n} from './interfaces.ts';\n\n/**\n * Configuration interface for repository and DAO creation.\n *\n * This interface defines all the configuration options needed to create.\n * Repository or DAO instances. It supports database connection configuration,\n * entity schema definition, and repository-specific customization options..\n *\n * @interface RepositoryConfig\n * @since 1.0.0\n * @example PostgreSQL Repository Config\n * ```typescript\n * const config: RepositoryConfig = {\n *   databaseType: 'postgresql',\n *   entityType: 'User',\n *   tableName: 'app_users',\n *   schema: {\n *     id: { type: 'uuid', primaryKey: true },\n *     name: { type: 'string', required: true },\n *     email: { type: 'string', unique: true },\n *     createdAt: { type: 'datetime', default: 'now' }\n *   },\n *   databaseConfig: {\n *     type: 'postgresql',\n *     host: 'localhost',\n *     database: 'myapp',\n *     pool: { min: 2, max: 20 }\n *   }\n * };\n * ```\n * @example Vector Database Config\n * ```typescript\n * const vectorConfig: RepositoryConfig = {\n *   databaseType: 'lancedb',\n *   entityType: 'Embedding',\n *   options: {\n *     vectorSize: 1536,\n *     metricType: 'cosine',\n *     indexType: 'HNSW'\n *   },\n *   databaseConfig: {\n *     type: 'lancedb',\n *     database: './vectors.lance'\n *   }\n * };\n * ```\n */\nexport interface RepositoryConfig {\n  /** Database type to use */\n  databaseType: 'postgresql' | 'sqlite' | 'kuzu' | 'lancedb' | 'mysql' | 'memory' | 'coordination';\n\n  /** Entity type name */\n  entityType: string;\n\n  /** Table/collection name (defaults to entityType) */\n  tableName?: string;\n\n  /** Entity schema definition */\n  schema?: Record<string, any>;\n\n  /** Repository-specific options */\n  options?: Record<string, any>;\n\n  /** Database configuration (if creating new adapter) */\n  databaseConfig?: DatabaseConfig;\n\n  /** Use existing adapter instance */\n  existingAdapter?: DatabaseAdapter;\n}\n\n/**\n * Union type for all possible repository implementations.\n *\n * This type represents the different repository interfaces that can be returned.\n * By the factory based on the database type. Each database type has specialized\n * methods beyond the base repository interface..\n *\n * @template T The entity type the repository manages.\n * @since 1.0.0\n * @example Type Usage in Factory Methods\n * ```typescript\n * async function createSpecializedRepo<T>(\n *   config: RepositoryConfig\n * ): Promise<RepositoryType<T>> {\n *   const repo = await factory.createRepository<T>(config);\n *\n *   // Type narrowing based on database type\n *   if (config.databaseType === 'lancedb') {\n *     const vectorRepo = repo as IVectorRepository<T>;\n *     await vectorRepo.createIndex({ name: 'idx', dimension: 384 });\n *   }\n *\n *   return repo;\n * }\n * ```\n */\nexport type RepositoryType<T> =\n  | IRepository<T>\n  | IGraphRepository<T>\n  | IVectorRepository<T>\n  | IMemoryRepository<T>\n  | ICoordinationRepository<T>;\n\n/**\n * Entity Type Registry Interface.\n *\n * The registry provides centralized entity schema management, enabling type safety,\n * automatic table creation, index management, and database migration support.\n * Each entity type is registered with its complete schema definition.\n *\n * @interface EntityTypeRegistry\n * @since 1.0.0\n * @example Entity Registration\n * ```typescript\n * const registry: EntityTypeRegistry = {\n *   User: {\n *     schema: {\n *       id: { type: 'uuid', primaryKey: true },\n *       name: { type: 'string', required: true, maxLength: 100 },\n *       email: { type: 'string', unique: true },\n *       profile: { type: 'json' },\n *       createdAt: { type: 'datetime', default: 'now' },\n *       updatedAt: { type: 'datetime', default: 'now', onUpdate: 'now' }\n *     },\n *     primaryKey: 'id',\n *     tableName: 'users',\n *     databaseType: 'postgresql',\n *     indexes: [\n *       { name: 'users_email_idx', fields: ['email'], unique: true },\n *       { name: 'users_created_idx', fields: ['createdAt'], unique: false }\n *     ]\n *   }\n * };\n * ```\n * @example Vector Entity Registration\n * ```typescript\n * registry.VectorDocument = {\n *   schema: {\n *     id: { type: 'string', primaryKey: true },\n *     vector: { type: 'vector', dimension: 1536, required: true },\n *     metadata: { type: 'json' },\n *     timestamp: { type: 'datetime', default: 'now' }\n *   },\n *   primaryKey: 'id',\n *   databaseType: 'lancedb',\n *   indexes: [\n *     { name: 'vector_similarity_idx', fields: ['vector'], unique: false }\n *   ]\n * };\n * ```\n */\nexport interface EntityTypeRegistry {\n  [entityType: string]: {\n    schema: Record<string, any>;\n    primaryKey: string;\n    tableName?: string;\n    databaseType?: string;\n    indexes?: Array<{\n      name: string;\n      fields: string[];\n      unique?: boolean;\n    }>;\n  };\n}\n\n/**\n * Main Factory Class for Data Access Layer Instance Creation.\n *\n * The DALFactory is the central component responsible for creating, caching, and managing.\n * All database access layer instances. It handles dependency injection, connection pooling,\n * schema validation, and provides both repository and DAO pattern implementations.\n *\n * Features:\n * - Automatic dependency injection integration\n * - Connection and instance caching for performance\n * - Multi-database coordination support\n * - Entity schema registry management\n * - Database adapter lifecycle management\n * - Transaction and error handling support.\n *\n * @class DALFactory\n * @injectable.\n * @since 1.0.0\n * @example Basic Factory Setup\n * ```typescript\n * import { DALFactory } from './factory.ts';\n * import { DIContainer } from '../di/container/di-container.ts';\n * import { CORE_TOKENS } from '../di/tokens/core-tokens.ts';\n *\n * const container = new DIContainer();\n * container.register(CORE_TOKENS.Logger, () => logger);\n * container.register(CORE_TOKENS.Config, () => config);\n *\n * const factory = container.resolve(DALFactory);\n *\n * // Register custom entity types\n * factory.registerEntityType('Product', {\n *   schema: { id: { type: 'uuid' }, name: { type: 'string' } },\n *   primaryKey: 'id',\n *   tableName: 'products'\n * });\n *\n * const productDAO = await factory.createDAO<Product>({\n *   databaseType: 'postgresql',\n *   entityType: 'Product'\n * });\n * ```\n * @example Specialized Database Factories\n * ```typescript\n * // Create vector database repository\n * const vectorRepo = await factory.createLanceDBVectorRepository<Embedding>(\n *   'Embedding',\n *   1536 // OpenAI embedding dimension\n * );\n *\n * // Create graph database repository\n * const graphRepo = await factory.createKuzuGraphRepository<Node>('Node');\n *\n * // Create coordination repository\n * const coordRepo = await factory.createCoordinationRepository<Lock>('Lock');\n * ```\n */\n@injectable\nexport class DALFactory {\n  private repositoryCache = new Map<string, any>();\n  private daoCache = new Map<string, any>();\n  private adapterCache = new Map<string, DatabaseAdapter>();\n  private entityRegistry: EntityTypeRegistry = {};\n\n  constructor(\n    @inject(CORE_TOKENS.Logger) private _logger: ILogger,\n    @inject(CORE_TOKENS.Config) private _config: IConfig,\n    private databaseProviderFactory: DatabaseProviderFactory,\n  ) {\n    this.initializeEntityRegistry();\n  }\n\n  /**\n   * Create a Repository Instance for Entity Management.\n   *\n   * Creates a repository instance providing low-level database access with entity mapping,\n   * query building, and database-specific optimizations. Repositories handle the persistence\n   * layer with minimal business logic.\n   *\n   * @template T The entity type this repository will manage.\n   * @param {RepositoryConfig} config - Repository configuration including database type and entity schema.\n   * @returns {Promise<RepositoryType<T>>} A promise that resolves to a typed repository instance.\n   * @throws {Error} When repository creation fails due to invalid configuration.\n   * @throws {Error} When database connection cannot be established.\n   * @throws {Error} When entity schema validation fails.\n   * @example PostgreSQL Repository Creation\n   * ```typescript\n   * const userRepository = await factory.createRepository<User>({\n   *   databaseType: 'postgresql',\n   *   entityType: 'User',\n   *   tableName: 'app_users',\n   *   schema: {\n   *     id: { type: 'uuid', primaryKey: true },\n   *     name: { type: 'string', required: true },\n   *     email: { type: 'string', unique: true }\n   *   },\n   *   databaseConfig: {\n   *     type: 'postgresql',\n   *     host: 'localhost',\n   *     database: 'production'\n   *   }\n   * });\n   *\n   * // Repository provides basic CRUD operations\n   * const users = await userRepository.findAll({ limit: 10 });\n   * const user = await userRepository.create({ name: 'John', email: 'john@example.com' });\n   * await userRepository.update(user.id, { name: 'John Doe' });\n   * ```\n   * @example Vector Repository with Custom Schema\n   * ```typescript\n   * const vectorRepo = await factory.createRepository<VectorDoc>({\n   *   databaseType: 'lancedb',\n   *   entityType: 'VectorDocument',\n   *   options: {\n   *     vectorSize: 1536,\n   *     metricType: 'cosine'\n   *   },\n   *   schema: {\n   *     id: { type: 'string', primaryKey: true },\n   *     vector: { type: 'vector', dimension: 1536 },\n   *     metadata: { type: 'json' }\n   *   }\n   * });\n   *\n   * // Vector-specific operations\n   * const similar = await vectorRepo.vectorSearch(queryVector, 10);\n   * ```\n   */\n  async createRepository<T>(config: RepositoryConfig): Promise<RepositoryType<T>> {\n    const cacheKey = this.generateCacheKey(config);\n\n    if (this.repositoryCache.has(cacheKey)) {\n      this['_logger']?.debug(`Returning cached repository: ${cacheKey}`);\n      return this.repositoryCache.get(cacheKey);\n    }\n\n    this['_logger']?.info(\n      `Creating new repository: ${config?.['entityType']} (${config?.['databaseType']})`\n    );\n\n    try {\n      // Get or create database adapter\n      const adapter = await this.getOrCreateAdapter(config);\n\n      // Create repository based on database type\n      const repository = await this.createRepositoryInstance<T>(config, adapter);\n\n      // Cache the repository\n      this.repositoryCache.set(cacheKey, repository);\n\n      return repository;\n    } catch (error) {\n      this['_logger']?.error(`Failed to create repository: ${error}`);\n      throw new Error(\n        `Repository creation failed: ${error instanceof Error ? error.message : 'Unknown error'}`\n      );\n    }\n  }\n\n  /**\n   * Create a Data Access Object (DAO) Instance with Business Logic.\n   *\n   * Creates a DAO instance that wraps a repository with additional business logic,\n   * validation, caching, and transaction management. DAOs provide a higher-level\n   * interface suitable for application service layers.\n   *\n   * @template T The entity type this DAO will manage.\n   * @param {RepositoryConfig} config - DAO configuration including database type and business rules.\n   * @returns {Promise<IDataAccessObject<T>>} A promise that resolves to a configured DAO instance.\n   * @throws {Error} When DAO creation fails due to repository issues.\n   * @throws {Error} When business logic validation fails.\n   * @throws {Error} When transaction setup fails.\n   * @example User DAO with Validation\n   * ```typescript\n   * const userDAO = await factory.createDAO<User>({\n   *   databaseType: 'postgresql',\n   *   entityType: 'User',\n   *   options: {\n   *     enableCaching: true,\n   *     validateOnCreate: true,\n   *     auditChanges: true\n   *   }\n   * });\n   *\n   * // DAO provides enhanced operations with validation\n   * try {\n   *   const user = await userDAO.create({\n   *     name: 'John',\n   *     email: 'john@example.com'\n   *   }); // Validates email format, checks uniqueness\n   *\n   *   // Transaction support\n   *   await userDAO.executeTransaction([\n   *     { operation: 'create', data: user1 },\n   *     { operation: 'update', id: 'user-2', data: updates }\n   *   ]);\n   * } catch (error) {\n   *   console.error('DAO operation failed:', error.message);\n   * }\n   * ```\n   * @example Vector DAO with Similarity Search\n   * ```typescript\n   * const vectorDAO = await factory.createDAO<VectorDocument>({\n   *   databaseType: 'lancedb',\n   *   entityType: 'VectorDocument'\n   * });\n   *\n   * // DAO provides specialized vector operations\n   * const results = await vectorDAO.bulkVectorOperations([\n   *   { operation: 'upsert', id: 'doc-1', vector: embedding1 },\n   *   { operation: 'upsert', id: 'doc-2', vector: embedding2 }\n   * ], 'batch');\n   *\n   * const similar = await vectorDAO.similaritySearch(queryVector, {\n   *   limit: 10,\n   *   threshold: 0.8\n   * });\n   * ```\n   */\n  async createDAO<T>(config: RepositoryConfig): Promise<IDataAccessObject<T>> {\n    const cacheKey = this.generateCacheKey(config, 'dao');\n\n    if (this.daoCache.has(cacheKey)) {\n      this['_logger']?.debug(`Returning cached DAO: ${cacheKey}`);\n      return this.daoCache.get(cacheKey);\n    }\n\n    this['_logger']?.info(\n      `Creating new DAO: ${config?.['entityType']} (${config?.['databaseType']})`\n    );\n\n    try {\n      // Get repository first\n      const repository = await this.createRepository<T>(config);\n\n      // Get or create database adapter\n      const adapter = await this.getOrCreateAdapter(config);\n\n      // Create DAO instance\n      const dao = await this.createDAOInstance<T>(config, repository, adapter);\n\n      // Cache the DAO\n      this.daoCache.set(cacheKey, dao);\n\n      return dao;\n    } catch (error) {\n      this['_logger']?.error(`Failed to create DAO: ${error}`);\n      throw new Error(\n        `DAO creation failed: ${error instanceof Error ? error.message : 'Unknown error'}`\n      );\n    }\n  }\n\n  /**\n   * Register Entity Type with Schema and Database Configuration.\n   *\n   * Registers an entity type in the factory's entity registry, providing schema definitions,\n   * table mapping, indexing strategies, and database type preferences. This enables\n   * automatic table creation, validation, and optimized query generation.\n   *\n   * @param {string} entityType - The unique name for this entity type.\n   * @param {Object} config - Entity configuration object.\n   * @param {Record<string, any>} config.schema - Entity field definitions with types and constraints.\n   * @param {string} config.primaryKey - Name of the primary key field.\n   * @param {string} [config.tableName] - Custom table name (defaults to entityType).\n   * @param {string} [config.databaseType] - Preferred database type for this entity.\n   * @param {Array} [config.indexes] - Index definitions for performance optimization.\n   * @throws {Error} When entity type is already registered.\n   * @throws {Error} When schema validation fails.\n   * @throws {Error} When primary key is not defined in schema.\n   * @example User Entity Registration\n   * ```typescript\n   * factory.registerEntityType('User', {\n   *   schema: {\n   *     id: {\n   *       type: 'uuid',\n   *       primaryKey: true,\n   *       default: 'uuid_generate_v4()'\n   *     },\n   *     name: {\n   *       type: 'string',\n   *       required: true,\n   *       maxLength: 100,\n   *       validate: /^[a-zA-Z\\s]+$/ // Only letters and spaces\n   *     },\n   *     email: {\n   *       type: 'string',\n   *       unique: true,\n   *       validate: /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/ // Email format\n   *     },\n   *     profile: { type: 'json' },\n   *     createdAt: { type: 'datetime', default: 'now' },\n   *     updatedAt: { type: 'datetime', default: 'now', onUpdate: 'now' }\n   *   },\n   *   primaryKey: 'id',\n   *   tableName: 'app_users',\n   *   databaseType: 'postgresql',\n   *   indexes: [\n   *     { name: 'users_email_idx', fields: ['email'], unique: true },\n   *     { name: 'users_created_idx', fields: ['createdAt'], unique: false },\n   *     { name: 'users_name_search_idx', fields: ['name'], unique: false }\n   *   ]\n   * });\n   * ```\n   * @example Vector Document Registration\n   * ```typescript\n   * factory.registerEntityType('EmbeddingDocument', {\n   *   schema: {\n   *     id: { type: 'string', primaryKey: true },\n   *     vector: {\n   *       type: 'vector',\n   *       dimension: 1536, // OpenAI ada-002 dimension\n   *       required: true\n   *     },\n   *     content: { type: 'text', required: true },\n   *     metadata: {\n   *       type: 'json',\n   *       validate: (value) => typeof value === 'object'\n   *     },\n   *     timestamp: { type: 'datetime', default: 'now' }\n   *   },\n   *   primaryKey: 'id',\n   *   tableName: 'document_embeddings',\n   *   databaseType: 'lancedb',\n   *   indexes: [\n   *     { name: 'embedding_vector_idx', fields: ['vector'], unique: false }\n   *   ]\n   * });\n   * ```\n   */\n  registerEntityType(\n    entityType: string,\n    config: {\n      schema: Record<string, any>;\n      primaryKey: string;\n      tableName?: string;\n      databaseType?: string;\n      indexes?: Array<{\n        name: string;\n        fields: string[];\n        unique?: boolean;\n      }>;\n    }\n  ): void {\n    this['_logger']?.debug(`Registering entity type: ${entityType}`);\n    this.entityRegistry[entityType] = config;\n  }\n\n  /**\n   * Retrieve Registered Entity Configuration.\n   *\n   * Gets the complete configuration for a registered entity type, including schema,\n   * table mapping, indexes, and database preferences. Returns undefined if the\n   * entity type is not registered.\n   *\n   * @param {string} entityType - The entity type name to look up.\n   * @returns {EntityTypeRegistry[string] | undefined} Entity configuration or undefined.\n   * @example Getting Entity Configuration\n   * ```typescript\n   * const userConfig = factory.getEntityConfig('User');\n   * if (userConfig) {\n   *   console.log('Primary key:', userConfig.primaryKey);\n   *   console.log('Table name:', userConfig.tableName);\n   *   console.log('Schema fields:', Object.keys(userConfig.schema));\n   *   console.log('Indexes:', userConfig.indexes);\n   * }\n   * ```\n   * @example Validating Entity Before Creation\n   * ```typescript\n   * const entityType = 'Product';\n   * const config = factory.getEntityConfig(entityType);\n   *\n   * if (!config) {\n   *   throw new Error(`Entity type ${entityType} is not registered`);\n   * }\n   *\n   * // Use configuration for DAO creation\n   * const productDAO = await factory.createDAO({\n   *   databaseType: config.databaseType || 'postgresql',\n   *   entityType,\n   *   tableName: config.tableName,\n   *   schema: config.schema\n   * });\n   * ```\n   */\n  getEntityConfig(entityType: string): EntityTypeRegistry[string] | undefined {\n    return this.entityRegistry[entityType];\n  }\n\n  /**\n   * Create Kuzu Graph Database Repository with Optimized Configuration.\n   *\n   * Creates a specialized graph repository for Kuzu database with pre-configured.\n   * Settings optimized for graph traversal queries, relationship management,\n   * and network analysis operations..\n   *\n   * @template T The entity type representing graph nodes.\n   * @param {string} entityType - The entity type name for graph nodes.\n   * @param {string} [tableName] - Optional custom table name (defaults to entityType).\n   * @returns {Promise<IGraphRepository<T>>} A promise that resolves to a graph repository instance.\n   * @throws {Error} When Kuzu database configuration is invalid.\n   * @throws {Error} When graph repository creation fails.\n   * @throws {Error} When database connection cannot be established.\n   * @example Social Network Graph Repository\n   * ```typescript\n   * interface Person {\n   *   id: string;\n   *   name: string;\n   *   properties: { age: number; location: string };\n   * }\n   *\n   * const personRepo = await factory.createKuzuGraphRepository<Person>(\n   *   'Person',\n   *   'social_network_nodes'\n   * );\n   *\n   * // Create nodes\n   * await personRepo.createNode({\n   *   id: 'person-1',\n   *   labels: ['Person', 'Employee'],\n   *   properties: { name: 'Alice', age: 30, department: 'Engineering' }\n   * });\n   *\n   * // Create relationships\n   * await personRepo.createRelationship({\n   *   type: 'KNOWS',\n   *   startNodeId: 'person-1',\n   *   endNodeId: 'person-2',\n   *   properties: { since: '2020-01-01', strength: 0.8 }\n   * });\n   *\n   * // Graph traversal queries\n   * const friends = await personRepo.findNeighbors('person-1', {\n   *   relationshipType: 'KNOWS',\n   *   maxDepth: 2\n   * });\n   *\n   * // Shortest path algorithm\n   * const path = await personRepo.findShortestPath('person-1', 'person-5');\n   * ```\n   * @example Knowledge Graph Repository\n   * ```typescript\n   * interface Concept {\n   *   id: string;\n   *   type: 'concept' | 'entity' | 'relationship';\n   *   properties: Record<string, any>;\n   * }\n   *\n   * const knowledgeRepo = await factory.createKuzuGraphRepository<Concept>(\n   *   'Concept',\n   *   'knowledge_graph'\n   * );\n   *\n   * // Complex graph queries\n   * const relatedConcepts = await knowledgeRepo.query(\n   *   'MATCH (c:Concept)-[r:RELATED_TO*1..3]->(related:Concept) WHERE c.id = $id RETURN related',\n   *   { id: 'ai-machine-learning' }\n   * );\n   * ```\n   */\n  async createKuzuGraphRepository<T>(\n    entityType: string,\n    tableName?: string\n  ): Promise<IGraphRepository<T>> {\n    const config: RepositoryConfig = {\n      databaseType: 'kuzu',\n      entityType,\n      tableName: tableName || entityType,\n      databaseConfig: this.getDefaultKuzuConfig(),\n    };\n\n    return (await this.createRepository<T>(config)) as IGraphRepository<T>;\n  }\n\n  /**\n   * Create LanceDB Vector Database Repository for Similarity Search.\n   *\n   * Creates a specialized vector repository for LanceDB with optimized configuration.\n   * For vector similarity search, embedding storage, and high-dimensional data operations.\n   * Supports various distance metrics and indexing strategies for performance..\n   *\n   * @template T The entity type representing vector documents.\n   * @param {string} entityType - The entity type name for vector documents.\n   * @param {number} [vectorDimension=384] - Vector dimension (default: 384 for sentence transformers).\n   * @returns {Promise<IVectorRepository<T>>} A promise that resolves to a vector repository instance.\n   * @throws {Error} When LanceDB configuration is invalid.\n   * @throws {Error} When vector dimension is invalid (must be > 0).\n   * @throws {Error} When database connection fails.\n   * @example Document Embedding Repository\n   * ```typescript\n   * interface DocumentEmbedding {\n   *   id: string;\n   *   vector: number[];\n   *   metadata: {\n   *     title: string;\n   *     content: string;\n   *     source: string;\n   *     timestamp: Date;\n   *   };\n   * }\n   *\n   * // OpenAI ada-002 embeddings (1536 dimensions)\n   * const embeddingRepo = await factory.createLanceDBVectorRepository<DocumentEmbedding>(\n   *   'DocumentEmbedding',\n   *   1536\n   * );\n   *\n   * // Store document embeddings\n   * await embeddingRepo.create({\n   *   id: 'doc-123',\n   *   vector: openaiEmbedding, // 1536-dimensional vector\n   *   metadata: {\n   *     title: 'AI Research Paper',\n   *     content: 'Abstract: This paper discusses...',\n   *     source: 'arxiv',\n   *     timestamp: new Date()\n   *   }\n   * });\n   *\n   * // Similarity search\n   * const similar = await embeddingRepo.vectorSearch(queryEmbedding, {\n   *   limit: 10,\n   *   threshold: 0.8,\n   *   includeMetadata: true\n   * });\n   * ```\n   * @example Image Feature Repository\n   * ```typescript\n   * interface ImageFeature {\n   *   id: string;\n   *   vector: number[];\n   *   metadata: {\n   *     filename: string;\n   *     width: number;\n   *     height: number;\n   *     tags: string[];\n   *   };\n   * }\n   *\n   * // ResNet features (2048 dimensions)\n   * const imageRepo = await factory.createLanceDBVectorRepository<ImageFeature>(\n   *   'ImageFeature',\n   *   2048\n   * );\n   *\n   * // Batch insert images\n   * await imageRepo.bulkInsert(imageFeatures);\n   *\n   * // Find similar images\n   * const similarImages = await imageRepo.vectorSearch(\n   *   queryImageFeature,\n   *   {\n   *     limit: 5,\n   *     metricType: 'euclidean', // Override default cosine similarity\n   *     filters: { tags: { $in: ['nature', 'landscape'] } }\n   *   }\n   * );\n   * ```\n   */\n  async createLanceDBVectorRepository<T>(\n    entityType: string,\n    vectorDimension: number = 384\n  ): Promise<IVectorRepository<T>> {\n    const config: RepositoryConfig = {\n      databaseType: 'lancedb',\n      entityType,\n      tableName: entityType,\n      databaseConfig: this.getDefaultLanceDBConfig(vectorDimension),\n    };\n\n    return (await this.createRepository<T>(config)) as IVectorRepository<T>;\n  }\n\n  /**\n   * Create Coordination Repository for Distributed System Operations.\n   *\n   * Creates a specialized repository for coordination operations in distributed systems,\n   * including distributed locking, leader election, task scheduling, and inter-service.\n   * Communication. Uses SQLite by default for reliable local coordination..\n   *\n   * @template T The entity type representing coordination objects.\n   * @param {string} entityType - The entity type name for coordination objects.\n   * @returns {Promise<ICoordinationRepository<T>>} A promise that resolves to a coordination repository.\n   * @throws {Error} When coordination database setup fails.\n   * @throws {Error} When distributed locking initialization fails.\n   * @throws {Error} When coordination schema creation fails.\n   * @example Distributed Lock Repository\n   * ```typescript\n   * interface DistributedLock {\n   *   id: string;\n   *   resourceId: string;\n   *   ownerId: string;\n   *   expiresAt: Date;\n   *   metadata: {\n   *     operation: string;\n   *     priority: number;\n   *     retryCount: number;\n   *   };\n   * }\n   *\n   * const lockRepo = await factory.createCoordinationRepository<DistributedLock>(\n   *   'DistributedLock'\n   * );\n   *\n   * // Acquire distributed lock\n   * const lock = await lockRepo.acquireLock({\n   *   resourceId: 'database-migration-001',\n   *   ownerId: 'worker-node-1',\n   *   ttl: 300000, // 5 minutes\n   *   metadata: {\n   *     operation: 'schema_migration',\n   *     priority: 10,\n   *     retryCount: 0\n   *   }\n   * });\n   *\n   * try {\n   *   // Perform critical operation\n   *   await performDatabaseMigration();\n   * } finally {\n   *   // Release lock\n   *   await lockRepo.releaseLock(lock.id);\n   * }\n   * ```\n   * @example Task Queue Coordination\n   * ```typescript\n   * interface CoordinationTask {\n   *   id: string;\n   *   type: 'processing' | 'cleanup' | 'migration';\n   *   status: 'pending' | 'processing' | 'completed' | 'failed';\n   *   assignedTo?: string;\n   *   priority: number;\n   *   payload: Record<string, any>;\n   *   createdAt: Date;\n   *   scheduledFor?: Date;\n   * }\n   *\n   * const taskRepo = await factory.createCoordinationRepository<CoordinationTask>(\n   *   'CoordinationTask'\n   * );\n   *\n   * // Worker claims next task\n   * const task = await taskRepo.claimNextTask({\n   *   workerId: 'worker-3',\n   *   taskTypes: ['processing', 'cleanup'],\n   *   timeout: 600000 // 10 minutes\n   * });\n   *\n   * // Update task progress\n   * await taskRepo.updateTaskStatus(task.id, 'processing', {\n   *   progress: 0.5,\n   *   message: 'Processing 50% complete'\n   * });\n   * ```\n   */\n  async createCoordinationRepository<T>(entityType: string): Promise<ICoordinationRepository<T>> {\n    const config: RepositoryConfig = {\n      databaseType: 'coordination',\n      entityType,\n      tableName: entityType,\n      databaseConfig: {\n        type: 'sqlite', // Use SQLite for coordination by default\n        database: './data/coordination.db',\n      },\n    };\n\n    return (await this.createRepository<T>(config)) as ICoordinationRepository<T>;\n  }\n\n  /**\n   * Create Memory Repository for Caching and Session Management.\n   *\n   * Creates a specialized in-memory repository optimized for caching, session storage,\n   * and temporary data management. Uses SQLite's in-memory mode with configurable\n   * TTL (Time To Live) and size limits for memory management.\n   *\n   * @template T The entity type for memory-stored objects.\n   * @param {string} entityType - The entity type name for memory objects.\n   * @returns {Promise<IMemoryRepository<T>>} A promise that resolves to a memory repository.\n   * @throws {Error} When in-memory database initialization fails.\n   * @throws {Error} When memory limits configuration is invalid.\n   * @throws {Error} When TTL configuration is invalid.\n   * @example Session Cache Repository\n   * ```typescript\n   * interface UserSession {\n   *   id: string;\n   *   userId: string;\n   *   token: string;\n   *   expiresAt: Date;\n   *   metadata: {\n   *     ipAddress: string;\n   *     userAgent: string;\n   *     permissions: string[];\n   *     lastActivity: Date;\n   *   };\n   * }\n   *\n   * const sessionRepo = await factory.createMemoryRepository<UserSession>(\n   *   'UserSession'\n   * );\n   *\n   * // Store session with automatic TTL\n   * await sessionRepo.create({\n   *   id: 'sess-123',\n   *   userId: 'user-456',\n   *   token: 'jwt-token-here',\n   *   expiresAt: new Date(Date.now() + 3600000), // 1 hour\n   *   metadata: {\n   *     ipAddress: '192.168.1.100',\n   *     userAgent: 'Mozilla/5.0...',\n   *     permissions: ['read', 'write'],\n   *     lastActivity: new Date()\n   *   }\n   * }, { ttl: 3600 }); // TTL in seconds\n   *\n   * // Retrieve active sessions\n   * const activeSessions = await sessionRepo.findByUserId('user-456');\n   *\n   * // Clean up expired sessions automatically\n   * await sessionRepo.cleanupExpired();\n   * ```\n   * @example Application Cache Repository\n   * ```typescript\n   * interface CacheEntry {\n   *   id: string;\n   *   key: string;\n   *   value: any;\n   *   tags: string[];\n   *   createdAt: Date;\n   *   accessCount: number;\n   * }\n   *\n   * const cacheRepo = await factory.createMemoryRepository<CacheEntry>(\n   *   'CacheEntry'\n   * );\n   *\n   * // Cache API responses\n   * await cacheRepo.set('api:users:list:page1', {\n   *   users: userListData,\n   *   totalCount: 1500,\n   *   page: 1\n   * }, {\n   *   ttl: 300, // 5 minutes\n   *   tags: ['api-cache', 'users']\n   * });\n   *\n   * // Retrieve with hit tracking\n   * const cached = await cacheRepo.get('api:users:list:page1');\n   * if (cached) {\n   *   console.log('Cache hit, access count:', cached.accessCount);\n   * }\n   *\n   * // Invalidate by tags\n   * await cacheRepo.invalidateByTags(['users']);\n   * ```\n   */\n  async createMemoryRepository<T>(entityType: string): Promise<IMemoryRepository<T>> {\n    const config: RepositoryConfig = {\n      databaseType: 'memory',\n      entityType,\n      tableName: entityType,\n      options: {\n        maxSize: 1000,\n        ttlDefault: 3600, // 1 hour default TTL\n      },\n    };\n\n    return (await this.createRepository<T>(config)) as IMemoryRepository<T>;\n  }\n\n  /**\n   * Create Multi-Database DAO for Distributed Data Operations.\n   *\n   * Creates a sophisticated multi-database DAO that can coordinate operations across.\n   * Different database types and instances. The primary database handles writes and\n   * authoritative reads, while secondary databases provide read scaling, caching,\n   * specialized queries, and data redundancy..\n   *\n   * @template T The entity type for multi-database operations.\n   * @param {string} entityType - The entity type name.\n   * @param {RepositoryConfig} primaryConfig - Primary database configuration (handles writes).\n   * @param {RepositoryConfig[]} [secondaryConfigs] - Optional secondary database configurations.\n   * @returns {Promise<MultiDatabaseDAO<T>>} A promise that resolves to a multi-database DAO.\n   * @throws {Error} When primary database configuration is invalid.\n   * @throws {Error} When any secondary database setup fails.\n   * @throws {Error} When multi-database coordination setup fails.\n   * @example Primary PostgreSQL with Vector Search Secondary\n   * ```typescript\n   * interface Product {\n   *   id: string;\n   *   name: string;\n   *   description: string;\n   *   price: number;\n   *   category: string;\n   *   embedding?: number[];\n   * }\n   *\n   * const productDAO = await factory.createMultiDatabaseDAO<Product>(\n   *   'Product',\n   *   {\n   *     databaseType: 'postgresql',\n   *     entityType: 'Product',\n   *     databaseConfig: {\n   *       host: 'prod-db.example.com',\n   *       database: 'products',\n   *       pool: { min: 5, max: 50 }\n   *     }\n   *   },\n   *   [\n   *     {\n   *       databaseType: 'lancedb',\n   *       entityType: 'Product',\n   *       databaseConfig: {\n   *         database: './product-embeddings.lance',\n   *         options: { vectorSize: 1536 }\n   *       }\n   *     }\n   *   ]\n   * );\n   *\n   * // Write operations go to primary PostgreSQL\n   * const product = await productDAO.create({\n   *   name: 'Smart Phone',\n   *   description: 'Latest smartphone with AI features',\n   *   price: 799.99,\n   *   category: 'electronics'\n   * });\n   *\n   * // Vector similarity search uses secondary LanceDB\n   * const similar = await productDAO.vectorSearch(\n   *   descriptionEmbedding,\n   *   { limit: 10, threshold: 0.8 }\n   * );\n   *\n   * // Health check across all databases\n   * const health = await productDAO.healthCheck();\n   * console.log('Primary healthy:', health.primary.healthy);\n   * console.log('Secondaries healthy:', health.secondaries.map(s => s.healthy));\n   * ```\n   * @example Multi-Region Setup with Replication\n   * ```typescript\n   * const userDAO = await factory.createMultiDatabaseDAO<User>(\n   *   'User',\n   *   {\n   *     databaseType: 'postgresql',\n   *     entityType: 'User',\n   *     databaseConfig: { host: 'primary-db.us-east.com' }\n   *   },\n   *   [\n   *     {\n   *       databaseType: 'postgresql',\n   *       entityType: 'User',\n   *       databaseConfig: { host: 'replica-db.us-west.com' }\n   *     },\n   *     {\n   *       databaseType: 'memory',\n   *       entityType: 'User',\n   *       options: { maxSize: 10000, ttl: 300 } // 5-minute cache\n   *     }\n   *   ]\n   * );\n   *\n   * // Writes replicated to secondaries asynchronously\n   * await userDAO.executeTransaction([\n   *   { operation: 'create', data: newUser },\n   *   { operation: 'update', id: 'user-123', data: { status: 'active' } }\n   * ]);\n   *\n   * // Read performance metrics across all databases\n   * const metrics = await userDAO.getMetrics();\n   * console.log('Primary metrics:', metrics.primary);\n   * console.log('Secondary metrics:', metrics.secondaries);\n   * ```\n   */\n  async createMultiDatabaseDAO<T>(\n    entityType: string,\n    primaryConfig: RepositoryConfig,\n    secondaryConfigs?: RepositoryConfig[]\n  ): Promise<MultiDatabaseDAO<T>> {\n    this['_logger']?.info(`Creating multi-database DAO for: ${entityType}`);\n\n    const primaryDAO = await this.createDAO<T>(primaryConfig);\n    const secondaryDAOs: IDataAccessObject<T>[] = [];\n\n    if (secondaryConfigs) {\n      for (const config of secondaryConfigs) {\n        const dao = await this.createDAO<T>(config);\n        secondaryDAOs.push(dao);\n      }\n    }\n\n    return new MultiDatabaseDAO<T>(primaryDAO, secondaryDAOs, this['_logger']);\n  }\n\n  /**\n   * Clear all caches.\n   */\n  clearCaches(): void {\n    this['_logger']?.info('Clearing DAL factory caches');\n    this.repositoryCache.clear();\n    this.daoCache.clear();\n    this.adapterCache.clear();\n  }\n\n  /**\n   * Get cache statistics.\n   */\n  getCacheStats(): {\n    repositories: number;\n    daos: number;\n    adapters: number;\n  } {\n    return {\n      repositories: this.repositoryCache.size,\n      daos: this.daoCache.size,\n      adapters: this.adapterCache.size,\n    };\n  }\n\n  /**\n   * Private methods for internal operations.\n   */\n\n  private async getOrCreateAdapter(config: RepositoryConfig): Promise<DatabaseAdapter> {\n    if (config?.['existingAdapter']) {\n      return config?.['existingAdapter'];\n    }\n\n    const adapterCacheKey = this.generateAdapterCacheKey(config);\n\n    if (this.adapterCache.has(adapterCacheKey)) {\n      return this.adapterCache.get(adapterCacheKey)!;\n    }\n\n    if (!config?.['databaseConfig']) {\n      throw new Error('Database configuration required when creating new adapter');\n    }\n\n    // Fixed: Await the adapter creation and connect properly\n    const adapter = await this.databaseProviderFactory.createAdapter(config?.['databaseConfig']);\n    // TODO: TypeScript error TS2339 - Property 'connect' does not exist on type 'DatabaseAdapter' (AI unsure of safe fix - human review needed)\n    // Note: DatabaseAdapter interface may need to include connect method or adapter creation should handle connection\n\n    this.adapterCache.set(adapterCacheKey, adapter);\n    return adapter;\n  }\n\n  private async createRepositoryInstance<T>(\n    config: RepositoryConfig,\n    adapter: DatabaseAdapter\n  ): Promise<RepositoryType<T>> {\n    // Use DAOs as repository implementations since they extend BaseDao which implements IRepository\n    // Canonical DAO implementations (lowercase 'Dao')\n    const { RelationalDao } = await import('./dao/relational.dao.ts');\n    const { GraphDao } = await import('./dao/graph.dao.ts');\n    const { VectorDao } = await import('./dao/vector.dao.ts');\n    const { MemoryDao } = await import('./dao/memory.dao.ts');\n    const { CoordinationDao } = await import('./dao/coordination.dao.ts');\n\n    const tableName = config?.['tableName'] || config?.['entityType'];\n    const entitySchema = config?.['schema'] || this.entityRegistry[config?.['entityType']]?.schema;\n\n    // TODO: TypeScript error TS2674 - Constructor of class 'BaseDao<T>' is protected and only accessible within the class declaration (AI unsure of safe fix - human review needed)\n    // Note: Need to use factory methods or public constructors instead of protected BaseDao constructors\n    switch (config?.['databaseType']) {\n      case 'kuzu':\n        // TODO: TypeScript error TS2674 - Constructor of class 'BaseDao<T>' is protected (AI unsure of safe fix - human review needed)\n        return new GraphDao<T>(\n          adapter,\n          this['_logger'],\n          tableName,\n          entitySchema\n        ) as any as RepositoryType<T>;\n\n      case 'lancedb':\n        // TODO: TypeScript error TS2674 - Constructor of class 'BaseDao<T>' is protected (AI unsure of safe fix - human review needed)\n        return new VectorDao<T>(\n          adapter,\n          this['_logger'],\n          tableName,\n          entitySchema\n        ) as any as RepositoryType<T>;\n\n      case 'memory':\n        // TODO: TypeScript error TS2674 - Constructor of class 'BaseDao<T>' is protected (AI unsure of safe fix - human review needed)\n        return new MemoryDao<T>(\n          // TODO: TypeScript error TS2345 - Argument of type 'DatabaseAdapter' is not assignable to parameter of type 'IMemoryRepository<T>' (AI unsure of safe fix - human review needed)\n          adapter,\n          this['_logger'],\n          tableName,\n          entitySchema\n        ) as any as RepositoryType<T>;\n\n      case 'coordination':\n        // TODO: TypeScript error TS2674 - Constructor of class 'BaseDao<T>' is protected (AI unsure of safe fix - human review needed)\n        return new CoordinationDao<T>(\n          // TODO: TypeScript error TS2345 - Argument of type 'DatabaseAdapter' is not assignable to parameter of type 'ICoordinationRepository<T>' (AI unsure of safe fix - human review needed)\n          adapter,\n          this['_logger'],\n          tableName,\n          entitySchema\n        ) as any as RepositoryType<T>;\n\n      default:\n        // TODO: TypeScript error TS2674 - Constructor of class 'BaseDao<T>' is protected (AI unsure of safe fix - human review needed)\n        return new RelationalDao<T>(\n          adapter,\n          this['_logger'],\n          tableName,\n          entitySchema\n        ) as any as RepositoryType<T>;\n    }\n  }\n\n  private async createDAOInstance<T>(\n    config: RepositoryConfig,\n    repository: RepositoryType<T>,\n    adapter: DatabaseAdapter\n  ): Promise<IDataAccessObject<T>> {\n    const { RelationalDao } = await import('./dao/relational.dao.ts');\n    const { GraphDao } = await import('./dao/graph.dao.ts');\n    const { VectorDao } = await import('./dao/vector.dao.ts');\n    const { MemoryDao } = await import('./dao/memory.dao.ts');\n    const { CoordinationDao } = await import('./dao/coordination.dao.ts');\n\n    // TODO: TypeScript errors with DAO instantiation - these constructors expect different parameter types than what's being passed\n    // These need proper interface implementation and constructor signature fixes\n    switch (config?.['databaseType']) {\n      case 'kuzu':\n        // TODO: TypeScript error TS2674 - Constructor of class 'BaseDao<T>' is protected (AI unsure of safe fix - human review needed)\n        return new GraphDao<T>(repository as IGraphRepository<T>, adapter, this['_logger']);\n\n      case 'lancedb':\n        // TODO: TypeScript error TS2674 - Constructor of class 'BaseDao<T>' is protected (AI unsure of safe fix - human review needed)\n        return new VectorDao<T>(repository as IVectorRepository<T>, adapter, this['_logger']);\n\n      case 'memory':\n        // TODO: TypeScript error TS2739 - Type 'MemoryDao<T>' is missing properties from type 'IDataAccessObject<T>' (AI unsure of safe fix - human review needed)\n        // TODO: TypeScript error TS2345 - Argument of type 'IMemoryRepository<T>' is not assignable to parameter of type 'DatabaseAdapter' (AI unsure of safe fix - human review needed)\n        return new MemoryDao<T>(repository as IMemoryRepository<T>, adapter, this['_logger']);\n\n      case 'coordination':\n        // TODO: TypeScript error TS2739 - Type 'CoordinationDao<T>' is missing properties from type 'IDataAccessObject<T>' (AI unsure of safe fix - human review needed)\n        // TODO: TypeScript error TS2345 - Argument of type 'ICoordinationRepository<T>' is not assignable to parameter of type 'DatabaseAdapter' (AI unsure of safe fix - human review needed)\n        return new CoordinationDao<T>(\n          repository as ICoordinationRepository<T>,\n          adapter,\n          this['_logger']\n        );\n      default:\n        // TODO: TypeScript error TS2674 - Constructor of class 'BaseDao<T>' is protected (AI unsure of safe fix - human review needed)\n        return new RelationalDao<T>(repository, adapter, this['_logger']);\n    }\n  }\n\n  private generateCacheKey(config: RepositoryConfig, type: 'repo' | 'dao' = 'repo'): string {\n    const parts = [\n      type,\n      config?.['databaseType'],\n      config?.['entityType'],\n      config?.['tableName'] || config?.['entityType'],\n      JSON.stringify(config?.['options'] || {}),\n    ];\n    return parts.join(':');\n  }\n\n  private generateAdapterCacheKey(config: RepositoryConfig): string {\n    if (config?.['existingAdapter']) {\n      return `existing:${Date.now()}`;\n    }\n\n    return [\n      config?.['databaseType'],\n      config?.['databaseConfig']?.host || 'localhost',\n      config?.['databaseConfig']?.database || 'default',\n      config?.['databaseConfig']?.port || 'default',\n    ].join(':');\n  }\n\n  private getDefaultKuzuConfig(): DatabaseConfig {\n    return {\n      type: 'kuzu',\n      database: './data/kuzu-graph.db',\n      options: {\n        bufferPoolSize: '1GB',\n        maxNumThreads: 4,\n      },\n    };\n  }\n\n  private getDefaultLanceDBConfig(vectorDimension: number): DatabaseConfig {\n    return {\n      type: 'lancedb',\n      database: './data/lancedb-vectors.db',\n      options: {\n        vectorSize: vectorDimension,\n        metricType: 'cosine',\n        indexType: 'IVF_PQ',\n      },\n    };\n  }\n\n  private initializeEntityRegistry(): void {\n    // Initialize with common entity types\n    this.registerEntityType('SwarmAgent', {\n      schema: {\n        id: { type: 'string', primaryKey: true },\n        name: { type: 'string', required: true },\n        type: { type: 'string', required: true },\n        status: { type: 'string', default: 'inactive' },\n        metadata: { type: 'json' },\n        createdAt: { type: 'datetime', default: 'now' },\n        updatedAt: { type: 'datetime', default: 'now' },\n      },\n      primaryKey: 'id',\n      tableName: 'swarm_agents',\n      databaseType: 'coordination',\n    });\n\n    this.registerEntityType('MemoryEntry', {\n      schema: {\n        id: { type: 'string', primaryKey: true },\n        key: { type: 'string', required: true, unique: true },\n        value: { type: 'json', required: true },\n        ttl: { type: 'number' },\n        createdAt: { type: 'datetime', default: 'now' },\n        accessedAt: { type: 'datetime' },\n      },\n      primaryKey: 'id',\n      tableName: 'memory_entries',\n      databaseType: 'memory',\n    });\n\n    this.registerEntityType('VectorDocument', {\n      schema: {\n        id: { type: 'string', primaryKey: true },\n        vector: { type: 'vector', required: true },\n        metadata: { type: 'json' },\n        timestamp: { type: 'datetime', default: 'now' },\n      },\n      primaryKey: 'id',\n      tableName: 'vector_documents',\n      databaseType: 'lancedb',\n    });\n\n    this.registerEntityType('GraphNode', {\n      schema: {\n        id: { type: 'string', primaryKey: true },\n        labels: { type: 'array' },\n        properties: { type: 'json' },\n        createdAt: { type: 'datetime', default: 'now' },\n      },\n      primaryKey: 'id',\n      tableName: 'nodes',\n      databaseType: 'kuzu',\n    });\n  }\n}\n\n/**\n * Multi-database DAO that can coordinate operations across multiple data sources.\n *\n * @example\n */\nexport class MultiDatabaseDAO<T> implements IDataAccessObject<T> {\n  constructor(\n    private primaryDAO: IDataAccessObject<T>,\n    private secondaryDAOs: IDataAccessObject<T>[],\n    private logger: ILogger\n  ) {}\n\n  getRepository(): IRepository<T> {\n    return this.primaryDAO.getRepository();\n  }\n\n  async executeTransaction<R>(operations: any[]): Promise<R> {\n    // Execute on primary first\n    const primaryResult = await this.primaryDAO.executeTransaction<R>(operations);\n\n    // Replicate to secondaries (fire and forget for performance)\n    this.replicateToSecondaries(operations).catch((error) => {\n      this.logger.warn(`Secondary replication failed: ${error}`);\n    });\n\n    return primaryResult;\n  }\n\n  async getMetadata(): Promise<any> {\n    const primary = await this.primaryDAO.getMetadata();\n    const secondaries = await Promise.allSettled(\n      this.secondaryDAOs.map((dao) => dao.getMetadata())\n    );\n\n    return {\n      primary,\n      secondaries: secondaries.map((result) =>\n        result?.status === 'fulfilled' ? result?.value : { error: result?.reason }\n      ),\n    };\n  }\n\n  async healthCheck(): Promise<any> {\n    const primary = await this.primaryDAO.healthCheck();\n    const secondaries = await Promise.allSettled(\n      this.secondaryDAOs.map((dao) => dao.healthCheck())\n    );\n\n    return {\n      primary,\n      secondaries: secondaries.map((result) =>\n        result?.status === 'fulfilled' ? result?.value : { healthy: false, error: result?.reason }\n      ),\n      overall: primary.healthy && secondaries.some((s) => s.status === 'fulfilled'),\n    };\n  }\n\n  async getMetrics(): Promise<any> {\n    const primary = await this.primaryDAO.getMetrics();\n    const secondaries = await Promise.allSettled(this.secondaryDAOs.map((dao) => dao.getMetrics()));\n\n    return {\n      primary,\n      secondaries: secondaries.map((result) =>\n        result?.status === 'fulfilled' ? result?.value : { error: result?.reason }\n      ),\n    };\n  }\n\n  private async replicateToSecondaries(operations: any[]): Promise<void> {\n    if (this.secondaryDAOs.length === 0) return;\n\n    await Promise.allSettled(this.secondaryDAOs.map((dao) => dao.executeTransaction(operations)));\n  }\n}\n\nexport default DALFactory;\n"],
  "mappings": "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",
  "names": []
}
