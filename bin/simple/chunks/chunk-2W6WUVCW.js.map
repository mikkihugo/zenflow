{
  "version": 3,
  "sources": ["../../src/config/index.ts"],
  "sourcesContent": ["/**\n * @file Unified Configuration System.\n *\n * Central export point for the complete configuration system.\n */\n\n// Import the configManager instance for use in convenience functions\nimport { configManager } from './manager.ts';\nimport type { SystemConfiguration } from './types.ts';\n\n// Constants and defaults\nexport {\n  createURLBuilder,\n  DEFAULT_CONFIG,\n  DEFAULT_PORT_ALLOCATION,\n  defaultURLBuilder,\n  ENV_MAPPINGS,\n  getCORSOrigins,\n  getMCPServerURL,\n  getMonitoringDashboardURL,\n  getWebDashboardURL,\n  PORT_ALLOCATION_BY_ENV,\n  PRODUCTION_VALIDATION_SCHEMA,\n  // URL Builder functionality (consolidated from url-builder.ts)\n  URLBuilder,\n  type URLBuilderConfig,\n  VALIDATION_RULES,\n} from './defaults.ts';\n// Repository configuration\nexport {\n  createRepoConfig,\n  defaultRepoConfig,\n  logRepoConfigStatus,\n  type RepoConfig,\n  validateRepoConfig,\n} from './default-repo-config.ts';\n// Health checking and monitoring\nexport {\n  ConfigHealthChecker,\n  configHealthChecker,\n  createConfigHealthEndpoint,\n  createDeploymentReadinessEndpoint,\n  initializeConfigHealthChecker,\n} from './health-checker.ts';\nexport { ConfigurationLoader } from './loader.ts';\n// Core exports\nexport { ConfigurationManager, configManager } from './manager.ts';\nexport type {\n  StartupValidationOptions,\n  StartupValidationResult,\n} from './startup-validator.ts';\n// Startup validation\nexport {\n  cli as runStartupValidationCLI,\n  runStartupValidation,\n  validateAndExit,\n} from './startup-validator.ts';\n// Types\nexport type {\n  ConfigChangeEvent,\n  ConfigHealthReport,\n  ConfigurationSource,\n  ConfigValidationResult,\n  CoordinationConfig,\n  CoreConfig,\n  DatabaseConfig,\n  EnvironmentMappings,\n  InterfaceConfig,\n  MCPConfig,\n  MemoryConfig,\n  NeuralConfig,\n  OptimizationConfig,\n  SystemConfiguration,\n  TerminalConfig,\n  ValidationResult,\n  WebConfig,\n} from './types.ts';\n// Validation system\nexport { ConfigValidator } from './validator.ts';\n\n// Convenience functions\nexport const config = {\n  /**\n   * Initialize configuration system.\n   *\n   * @param configPaths\n   */\n  async init(configPaths?: string[]) {\n    return configManager?.initialize(configPaths);\n  },\n\n  /**\n   * Get configuration value.\n   *\n   * @param path\n   */\n  get<T = any>(path: string): T | undefined {\n    return configManager?.get<T>(path);\n  },\n\n  /**\n   * Get configuration section.\n   *\n   * @param section\n   */\n  getSection<K extends keyof SystemConfiguration>(section: K): SystemConfiguration[K] {\n    return configManager?.getSection(section);\n  },\n\n  /**\n   * Update configuration value.\n   *\n   * @param path\n   * @param value\n   */\n  set(path: string, value: any) {\n    return configManager?.update(path, value);\n  },\n\n  /**\n   * Get full configuration.\n   */\n  getAll(): SystemConfiguration {\n    return configManager?.getConfig();\n  },\n\n  /**\n   * Validate configuration.\n   */\n  validate() {\n    return configManager?.validate();\n  },\n\n  /**\n   * Reload from sources.\n   */\n  reload() {\n    return configManager?.reload();\n  },\n\n  /**\n   * Export configuration.\n   *\n   * @param format\n   */\n  export(format: 'json' | 'yaml' = 'json'): string {\n    return configManager?.export(format);\n  },\n\n  /**\n   * Listen for configuration changes.\n   *\n   * @param callback\n   */\n  onChange(callback: (event: any) => void) {\n    configManager?.on('config:changed', callback);\n  },\n\n  /**\n   * Remove change listener.\n   *\n   * @param callback\n   */\n  removeListener(callback: (event: any) => void) {\n    configManager?.off('config:changed', callback);\n  },\n\n  /**\n   * Get configuration health report.\n   */\n  async getHealthReport() {\n    const { configHealthChecker } = await import('./health-checker.ts');\n    return configHealthChecker?.getHealthReport();\n  },\n\n  /**\n   * Check if configuration is production ready.\n   */\n  async isProductionReady() {\n    const { configHealthChecker } = await import('./health-checker.ts');\n    const deployment = await configHealthChecker?.validateForProduction();\n    return deployment.deploymentReady;\n  },\n\n  /**\n   * Check for port conflicts.\n   */\n  async checkPorts() {\n    const { configHealthChecker } = await import('./health-checker.ts');\n    return configHealthChecker?.checkPortConflicts();\n  },\n\n  /**\n   * Run startup validation.\n   *\n   * @param options\n   */\n  async validateStartup(options?: any) {\n    const { runStartupValidation } = await import('./startup-validator.ts');\n    return runStartupValidation(options);\n  },\n};\n\n// Legacy compatibility with old config manager\nimport type { ConfigurationManager } from './manager.ts';\nexport type ConfigManager = ConfigurationManager;\n\n// Default export for convenience\nexport default config;\n"],
  "mappings": ";;;;;;;;;;;;;AAiFO,IAAM,SAAS;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAMpB,MAAM,KAAK,aAAwB;AACjC,WAAO,eAAe,WAAW,WAAW;AAAA,EAC9C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,IAAa,MAA6B;AACxC,WAAO,eAAe,IAAO,IAAI;AAAA,EACnC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,WAAgD,SAAoC;AAClF,WAAO,eAAe,WAAW,OAAO;AAAA,EAC1C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQA,IAAI,MAAc,OAAY;AAC5B,WAAO,eAAe,OAAO,MAAM,KAAK;AAAA,EAC1C;AAAA;AAAA;AAAA;AAAA,EAKA,SAA8B;AAC5B,WAAO,eAAe,UAAU;AAAA,EAClC;AAAA;AAAA;AAAA;AAAA,EAKA,WAAW;AACT,WAAO,eAAe,SAAS;AAAA,EACjC;AAAA;AAAA;AAAA;AAAA,EAKA,SAAS;AACP,WAAO,eAAe,OAAO;AAAA,EAC/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,OAAO,SAA0B,QAAgB;AAC/C,WAAO,eAAe,OAAO,MAAM;AAAA,EACrC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,SAAS,UAAgC;AACvC,mBAAe,GAAG,kBAAkB,QAAQ;AAAA,EAC9C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,eAAe,UAAgC;AAC7C,mBAAe,IAAI,kBAAkB,QAAQ;AAAA,EAC/C;AAAA;AAAA;AAAA;AAAA,EAKA,MAAM,kBAAkB;AACtB,UAAM,EAAE,qBAAAA,qBAAoB,IAAI,MAAM,OAAO,8BAAqB;AAClE,WAAOA,sBAAqB,gBAAgB;AAAA,EAC9C;AAAA;AAAA;AAAA;AAAA,EAKA,MAAM,oBAAoB;AACxB,UAAM,EAAE,qBAAAA,qBAAoB,IAAI,MAAM,OAAO,8BAAqB;AAClE,UAAM,aAAa,MAAMA,sBAAqB,sBAAsB;AACpE,WAAO,WAAW;AAAA,EACpB;AAAA;AAAA;AAAA;AAAA,EAKA,MAAM,aAAa;AACjB,UAAM,EAAE,qBAAAA,qBAAoB,IAAI,MAAM,OAAO,8BAAqB;AAClE,WAAOA,sBAAqB,mBAAmB;AAAA,EACjD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,MAAM,gBAAgB,SAAe;AACnC,UAAM,EAAE,sBAAAC,sBAAqB,IAAI,MAAM,OAAO,iCAAwB;AACtE,WAAOA,sBAAqB,OAAO;AAAA,EACrC;AACF;",
  "names": ["configHealthChecker", "runStartupValidation"]
}
