{
  "version": 3,
  "sources": ["../../node_modules/dspy.ts/src/lm/base.ts", "../../node_modules/dspy.ts/src/lm/dummy.ts", "../../node_modules/dspy.ts/src/index.ts"],
  "sourcesContent": ["/**\n * Configuration options for LM generation\n */\nexport interface GenerationOptions {\n  maxTokens?: number;\n  temperature?: number;\n  topP?: number;\n  stopSequences?: string[];\n}\n\n/**\n * Abstract interface for language model drivers.\n * All LM implementations must implement this interface.\n */\nexport interface LMDriver {\n  /**\n   * Generate output based on the input prompt.\n   * @param prompt - The input prompt text\n   * @param options - Optional generation parameters\n   * @returns A promise that resolves to the generated text\n   */\n  generate(prompt: string, options?: GenerationOptions): Promise<string>;\n\n  /**\n   * Optional method to initialize any resources needed by the LM\n   */\n  init?(): Promise<void>;\n\n  /**\n   * Optional method to clean up resources\n   */\n  cleanup?(): Promise<void>;\n}\n\n/**\n * Error class for LM-related errors\n */\nexport class LMError extends Error {\n  constructor(message: string, public readonly cause?: Error) {\n    super(message);\n    this.name = 'LMError';\n  }\n}\n", "import { LMDriver, GenerationOptions, LMError } from './base';\n\n/**\n * DummyLM provides a mock implementation of the LM interface.\n * Useful for testing and as a fallback during development.\n */\nexport class DummyLM implements LMDriver {\n  private initialized: boolean = false;\n  private responses: Map<string, string>;\n\n  constructor(customResponses?: Map<string, string>) {\n    this.responses = customResponses || new Map();\n  }\n\n  /**\n   * Initialize the dummy LM\n   */\n  public async init(): Promise<void> {\n    this.initialized = true;\n  }\n\n  /**\n   * Generate a response based on the prompt.\n   * Returns either a custom response if defined, or a default response.\n   */\n  public async generate(prompt: string, options?: GenerationOptions): Promise<string> {\n    if (!this.initialized) {\n      throw new LMError('DummyLM not initialized. Call init() first.');\n    }\n\n    // If a custom response is defined for this prompt, return it\n    if (this.responses.has(prompt)) {\n      return this.responses.get(prompt)!;\n    }\n\n    // Generate a deterministic but unique response based on the prompt\n    return this.generateDefaultResponse(prompt, options);\n  }\n\n  /**\n   * Clean up any resources (no-op for DummyLM)\n   */\n  public async cleanup(): Promise<void> {\n    this.initialized = false;\n  }\n\n  /**\n   * Add or update a custom response for a specific prompt\n   */\n  public setResponse(prompt: string, response: string): void {\n    this.responses.set(prompt, response);\n  }\n\n  /**\n   * Clear all custom responses\n   */\n  public clearResponses(): void {\n    this.responses.clear();\n  }\n\n  /**\n   * Generate a default response for prompts without custom responses\n   */\n  private generateDefaultResponse(prompt: string, options?: GenerationOptions): string {\n    const maxTokens = options?.maxTokens || 100;\n    return `DummyLM response for prompt: \"${prompt}\" (limited to ${maxTokens} tokens)`;\n  }\n}\n", "import { LMDriver, LMError } from './lm/base';\nimport { DummyLM } from './lm/dummy';\n\n// Global variable to hold the LM driver\nlet globalLM: LMDriver | null = null;\n\n/**\n * Configure the global language model driver\n */\nexport function configureLM(lm: LMDriver): void {\n  globalLM = lm;\n}\n\n/**\n * Get the currently configured LM driver\n * @throws {LMError} if no LM is configured\n */\nexport function getLM(): LMDriver {\n  if (!globalLM) {\n    throw new LMError('No language model configured. Call configureLM() first.');\n  }\n  return globalLM;\n}\n\n// Export LM-related types and implementations\nexport { LMDriver, GenerationOptions, LMError } from './lm/base';\nexport { DummyLM } from './lm/dummy';\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;AAqCA,QAAa,UAAb,cAA6B,MAAK;aAAA;;;MAChC,YAAY,SAAiC,OAAa;AACxD,cAAM,OAAO;AAD8B,aAAA,QAAA;AAE3C,aAAK,OAAO;MACd;;AAJF,YAAA,UAAA;;;;;;;;;;ACrCA,QAAA,SAAA;AAMA,QAAa,UAAb,MAAoB;aAAA;;;MAIlB,YAAY,iBAAqC;AAHzC,aAAA,cAAuB;AAI7B,aAAK,YAAY,mBAAmB,oBAAI,IAAG;MAC7C;;;;MAKO,MAAM,OAAI;AACf,aAAK,cAAc;MACrB;;;;;MAMO,MAAM,SAAS,QAAgB,SAA2B;AAC/D,YAAI,CAAC,KAAK,aAAa;AACrB,gBAAM,IAAI,OAAA,QAAQ,6CAA6C;QACjE;AAGA,YAAI,KAAK,UAAU,IAAI,MAAM,GAAG;AAC9B,iBAAO,KAAK,UAAU,IAAI,MAAM;QAClC;AAGA,eAAO,KAAK,wBAAwB,QAAQ,OAAO;MACrD;;;;MAKO,MAAM,UAAO;AAClB,aAAK,cAAc;MACrB;;;;MAKO,YAAY,QAAgB,UAAgB;AACjD,aAAK,UAAU,IAAI,QAAQ,QAAQ;MACrC;;;;MAKO,iBAAc;AACnB,aAAK,UAAU,MAAK;MACtB;;;;MAKQ,wBAAwB,QAAgB,SAA2B;AACzE,cAAM,aAAY,YAAO,QAAP,YAAO,SAAA,SAAP,QAAS,cAAa;AACxC,eAAO,iCAAiC,MAAM,iBAAiB,SAAS;MAC1E;;AA5DF,YAAA,UAAA;;;;;;;;;ACGA,YAAA,cAAA;AAQA,YAAA,QAAA;AAjBA,QAAA,SAAA;AAIA,QAAI,WAA4B;AAKhC,aAAgB,YAAY,IAAY;AACtC,iBAAW;IACb;AAFgB;AAQhB,aAAgB,QAAK;AACnB,UAAI,CAAC,UAAU;AACb,cAAM,IAAI,OAAA,QAAQ,yDAAyD;MAC7E;AACA,aAAO;IACT;AALgB;AAQhB,QAAA,SAAA;AAAsC,WAAA,eAAA,SAAA,WAAA,EAAA,YAAA,MAAA,KAAA,kCAAA;AAAA,aAAA,OAAA;IAAO,GAAP,OAAO,CAAA;AAC7C,QAAA,UAAA;AAAS,WAAA,eAAA,SAAA,WAAA,EAAA,YAAA,MAAA,KAAA,kCAAA;AAAA,aAAA,QAAA;IAAO,GAAP,OAAO,CAAA;;;",
  "names": []
}
