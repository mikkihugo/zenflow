{
  "version": 3,
  "sources": ["../../src/config/defaults.ts"],
  "sourcesContent": ["/**\n * @file Defaults implementation.\n */\n\nimport type { SystemConfiguration } from './types.ts';\n\n/**\n * Default system configuration.\n */\nexport const DEFAULT_CONFIG: SystemConfiguration = {\n  core: {\n    logger: {\n      level: 'info',\n      console: true,\n      structured: false,\n    },\n    performance: {\n      enableMetrics: true,\n      metricsInterval: 10000,\n      enableProfiling: false,\n    },\n    security: {\n      enableSandbox: true,\n      allowShellAccess: false,\n      trustedHosts: ['localhost', '127.0.0.1'],\n    },\n  },\n\n  interfaces: {\n    shared: {\n      theme: 'dark',\n      verbosity: 'normal',\n      autoCompletion: true,\n      realTimeUpdates: true,\n      refreshInterval: 5000,\n      maxCommandHistory: 100,\n      pageSize: 25,\n    },\n    terminal: {\n      timeout: 30000,\n      maxConcurrentProcesses: 10,\n      enableColors: true,\n      enableProgressBars: true,\n    },\n    web: {\n      port: 3456,\n      host: 'localhost',\n      enableHttps: false,\n      corsOrigins: ['http://localhost:3000', 'http://localhost:3456'],\n      staticPath: './public',\n      enableCompression: true,\n    },\n    mcp: {\n      http: {\n        port: 3000,\n        host: 'localhost',\n        timeout: 30000,\n        maxRequestSize: '10mb',\n        enableCors: true,\n      },\n      stdio: {\n        timeout: 30000,\n        maxBufferSize: 1024 * 1024, // 1MB\n      },\n      tools: {\n        enableAll: true,\n        enabledTools: [],\n        disabledTools: [],\n      },\n    },\n  },\n\n  storage: {\n    memory: {\n      backend: 'sqlite',\n      directory: './data/memory',\n      namespace: 'claude-zen',\n      enableCompression: false,\n      maxMemorySize: 100 * 1024 * 1024, // 100MB\n      cacheSize: 10 * 1024 * 1024, // 10MB\n      enableBackup: true,\n      backupInterval: 3600000, // 1 hour\n    },\n    database: {\n      sqlite: {\n        path: './data/claude-zen.db',\n        enableWAL: true,\n        maxConnections: 10,\n        timeout: 30000,\n      },\n      lancedb: {\n        path: './data/lancedb',\n        enableVectorIndex: true,\n        indexType: 'ivf',\n      },\n      persistence: {\n        maxReaders: 6,\n        maxWorkers: 3,\n        mmapSize: 268435456, // 256MB\n        cacheSize: -64000, // 64MB\n        enableBackup: false,\n        healthCheckInterval: 60000, // 1 minute\n      },\n    },\n  },\n\n  coordination: {\n    maxAgents: 50,\n    heartbeatInterval: 10000,\n    timeout: 30000,\n    topology: 'mesh',\n    enableLoadBalancing: true,\n    enableFailover: true,\n    enableMetrics: true,\n  },\n\n  // External services and API keys\n  services: {\n    anthropic: {\n      apiKey:\n        process.env['ANTHROPIC_API_KEY'] ||\n        (() => {\n          if (process.env['NODE_ENV'] === 'production') {\n            throw new Error('ANTHROPIC_API_KEY environment variable is required in production');\n          }\n          return null; // Allow null in development\n        })(),\n      baseUrl: process.env['ANTHROPIC_BASE_URL'] || 'https://api.anthropic.com',\n      timeout: 30000,\n      maxRetries: 3,\n    },\n    openai: {\n      apiKey: process.env['OPENAI_API_KEY'] || null,\n      baseUrl: process.env['OPENAI_BASE_URL'] || 'https://api.openai.com',\n      timeout: 30000,\n    },\n    github: {\n      token: process.env['GITHUB_TOKEN'] || null,\n      baseUrl: process.env['GITHUB_API_URL'] || 'https://api.github.com',\n    },\n    search: {\n      apiKey: process.env['SEARCH_API_KEY'] || null,\n      baseUrl: process.env['SEARCH_BASE_URL'] || null,\n    },\n  },\n\n  // Monitoring and logging\n  monitoring: {\n    dashboard: {\n      port: parseInt(process.env['DASHBOARD_PORT'] || '3456', 10),\n      host: process.env['DASHBOARD_HOST'] || 'localhost',\n      enableMetrics: process.env['ENABLE_METRICS'] !== 'false',\n      metricsInterval: parseInt(process.env['METRICS_INTERVAL'] || '10000', 10),\n    },\n    logging: {\n      level: process.env['LOG_LEVEL'] || 'info',\n      format: process.env['LOG_FORMAT'] || 'json',\n      file: process.env['LOG_FILE'] || './logs/claude-zen.log',\n      enableConsole: process.env['LOG_CONSOLE'] !== 'false',\n      enableFile: process.env['LOG_FILE_ENABLE'] === 'true',\n    },\n    performance: {\n      enableProfiling: process.env['ENABLE_PROFILING'] === 'true',\n      sampleRate: parseFloat(process.env['PROFILE_SAMPLE_RATE'] || '0.1'),\n      enableTracing: process.env['ENABLE_TRACING'] === 'true',\n    },\n  },\n\n  // Network and connectivity\n  network: {\n    defaultTimeout: parseInt(process.env['DEFAULT_TIMEOUT'] || '30000', 10),\n    maxRetries: parseInt(process.env['MAX_RETRIES'] || '3', 10),\n    retryDelay: parseInt(process.env['RETRY_DELAY'] || '1000', 10),\n    enableKeepAlive: process.env['KEEP_ALIVE'] !== 'false',\n  },\n\n  // Development vs Production settings\n  environment: {\n    isDevelopment: process.env['NODE_ENV'] === 'development',\n    isProduction: process.env['NODE_ENV'] === 'production',\n    isTest: process.env['NODE_ENV'] === 'test',\n    allowUnsafeOperations: process.env['NODE_ENV'] === 'development',\n    enableDebugEndpoints: process.env['NODE_ENV'] !== 'production',\n    strictValidation: process.env['NODE_ENV'] === 'production',\n  },\n\n  neural: {\n    enableWASM: true,\n    enableSIMD: true,\n    enableCUDA: false,\n    modelPath: './data/neural',\n    maxModelSize: 100 * 1024 * 1024, // 100MB\n    enableTraining: false,\n    enableInference: true,\n    backend: 'wasm',\n  },\n\n  optimization: {\n    enablePerformanceMonitoring: true,\n    enableResourceOptimization: true,\n    enableMemoryOptimization: true,\n    enableNetworkOptimization: false,\n    benchmarkInterval: 60000, // 1 minute\n  },\n};\n\n/**\n * Environment variable mappings.\n */\nexport const ENV_MAPPINGS = {\n  // Core\n  CLAUDE_LOG_LEVEL: { path: 'core.logger.level', type: 'string' as const },\n  CLAUDE_LOG_CONSOLE: { path: 'core.logger.console', type: 'boolean' as const },\n  CLAUDE_LOG_FILE: { path: 'core.logger.file', type: 'string' as const },\n  CLAUDE_ENABLE_METRICS: {\n    path: 'core.performance.enableMetrics',\n    type: 'boolean' as const,\n  },\n  CLAUDE_METRICS_INTERVAL: {\n    path: 'core.performance.metricsInterval',\n    type: 'number' as const,\n  },\n\n  // Interfaces\n  CLAUDE_WEB_PORT: { path: 'interfaces.web.port', type: 'number' as const },\n  CLAUDE_WEB_HOST: { path: 'interfaces.web.host', type: 'string' as const },\n  CLAUDE_MCP_PORT: {\n    path: 'interfaces.mcp.http.port',\n    type: 'number' as const,\n  },\n  CLAUDE_MCP_HOST: {\n    path: 'interfaces.mcp.http.host',\n    type: 'string' as const,\n  },\n  CLAUDE_MCP_TIMEOUT: {\n    path: 'interfaces.mcp.http.timeout',\n    type: 'number' as const,\n  },\n\n  // Storage\n  CLAUDE_MEMORY_BACKEND: {\n    path: 'storage.memory.backend',\n    type: 'string' as const,\n  },\n  CLAUDE_MEMORY_DIR: {\n    path: 'storage.memory.directory',\n    type: 'string' as const,\n  },\n  CLAUDE_DB_PATH: {\n    path: 'storage.database.sqlite.path',\n    type: 'string' as const,\n  },\n  CLAUDE_LANCEDB_PATH: {\n    path: 'storage.database.lancedb.path',\n    type: 'string' as const,\n  },\n\n  // Persistence Pool\n  POOL_MAX_READERS: {\n    path: 'storage.database.persistence.maxReaders',\n    type: 'number' as const,\n  },\n  POOL_MAX_WORKERS: {\n    path: 'storage.database.persistence.maxWorkers',\n    type: 'number' as const,\n  },\n  POOL_MMAP_SIZE: {\n    path: 'storage.database.persistence.mmapSize',\n    type: 'number' as const,\n  },\n  POOL_CACHE_SIZE: {\n    path: 'storage.database.persistence.cacheSize',\n    type: 'number' as const,\n  },\n  POOL_ENABLE_BACKUP: {\n    path: 'storage.database.persistence.enableBackup',\n    type: 'boolean' as const,\n  },\n\n  // Coordination\n  CLAUDE_MAX_AGENTS: {\n    path: 'coordination.maxAgents',\n    type: 'number' as const,\n  },\n  CLAUDE_HEARTBEAT_INTERVAL: {\n    path: 'coordination.heartbeatInterval',\n    type: 'number' as const,\n  },\n  CLAUDE_COORDINATION_TIMEOUT: {\n    path: 'coordination.timeout',\n    type: 'number' as const,\n  },\n  CLAUDE_SWARM_TOPOLOGY: {\n    path: 'coordination.topology',\n    type: 'string' as const,\n  },\n\n  // Neural\n  CLAUDE_ENABLE_WASM: { path: 'neural.enableWASM', type: 'boolean' as const },\n  CLAUDE_ENABLE_SIMD: { path: 'neural.enableSIMD', type: 'boolean' as const },\n  CLAUDE_ENABLE_CUDA: { path: 'neural.enableCUDA', type: 'boolean' as const },\n  CLAUDE_NEURAL_BACKEND: { path: 'neural.backend', type: 'string' as const },\n  CLAUDE_MODEL_PATH: { path: 'neural.modelPath', type: 'string' as const },\n\n  // Security\n  CLAUDE_ENABLE_SANDBOX: {\n    path: 'core.security.enableSandbox',\n    type: 'boolean' as const,\n  },\n  CLAUDE_ALLOW_SHELL: {\n    path: 'core.security.allowShellAccess',\n    type: 'boolean' as const,\n  },\n  CLAUDE_TRUSTED_HOSTS: {\n    path: 'core.security.trustedHosts',\n    type: 'array' as const,\n    parser: (value: string) => value.split(',').map((h) => h.trim()),\n  },\n} as const;\n\n/**\n * Configuration validation schema with production safety.\n *\n * @example\n */\nexport interface ConfigValidationSchema {\n  required: string[]; // Required environment variables\n  optional: string[]; // Optional with defaults\n  validation: {\n    [key: string]: (value: any) => boolean;\n  };\n  production: {\n    enforced: string[]; // Must be set in production\n    forbidden: string[]; // Cannot be set in production\n    fallbacks: { [key: string]: any }; // Safe fallbacks\n  };\n  portRanges: {\n    development: { min: number; max: number };\n    production: { min: number; max: number };\n  };\n}\n\n/**\n * Production-Ready Configuration Validation Rules.\n * \n * Comprehensive validation rule set that defines acceptable values, ranges,\n * and constraints for all system configuration parameters. Includes both\n * development and production-specific validation with automatic fallbacks,\n * conflict detection, and security enforcement.\n * \n * Key Features:\n * - Type validation with enum constraints\n * - Production-specific min/max ranges\n * - Port conflict detection and safe fallbacks\n * - Security-aware defaults for production environments\n * - Adaptive validation based on deployment environment\n * \n * Rule Structure:\n * - `type`: Data type validation (string, number, boolean)\n * - `enum`: Allowed enumeration values\n * - `min`/`max`: Acceptable value ranges\n * - `productionMin`/`productionMax`: Production-specific constraints\n * - `conflictCheck`: Enable port conflict detection\n * - `fallback`: Safe default value when validation fails\n * - `required`: Whether the field is mandatory\n * \n * @example\n * ```typescript\n * import { VALIDATION_RULES } from 'claude-code-zen/config';\n * \n * // Validate a configuration value\n * const portRule = VALIDATION_RULES['interfaces.web.port'];\n * const port = 3456;\n * \n * if (port < portRule.min || port > portRule.max) {\n *   console.error(`Port ${port} is outside valid range ${portRule.min}-${portRule.max}`);\n *   port = portRule.fallback; // Use safe fallback\n * }\n * \n * // Check production constraints\n * if (process.env.NODE_ENV === 'production' && port < portRule.productionMin) {\n *   console.warn(`Port ${port} below production minimum ${portRule.productionMin}`);\n * }\n * ```\n * \n * @const VALIDATION_RULES\n * @see {@link ConfigValidator} - Uses these rules for validation\n * @see {@link PRODUCTION_VALIDATION_SCHEMA} - Production-specific schema\n * @since 1.0.0-alpha.43\n */\nexport const VALIDATION_RULES = {\n  'core.logger.level': {\n    type: 'string',\n    enum: ['debug', 'info', 'warn', 'error'],\n    productionDefault: 'info',\n    required: false,\n  },\n  'interfaces.web.port': {\n    type: 'number',\n    min: 1,\n    max: 65535,\n    productionMin: 3000,\n    productionMax: 65535,\n    conflictCheck: true,\n    fallback: 3456, // Safe fallback different from MCP\n  },\n  'interfaces.mcp.http.port': {\n    type: 'number',\n    min: 1,\n    max: 65535,\n    productionMin: 3000,\n    productionMax: 65535,\n    conflictCheck: true,\n    fallback: 3000, // Primary MCP port\n  },\n  'coordination.maxAgents': {\n    type: 'number',\n    min: 1,\n    max: 1000,\n    productionMax: 100, // More conservative in production\n    required: false,\n    fallback: 10,\n  },\n  'coordination.topology': {\n    type: 'string',\n    enum: ['mesh', 'hierarchical', 'ring', 'star'],\n    productionRecommended: ['hierarchical', 'ring'],\n    fallback: 'hierarchical',\n  },\n  'neural.backend': {\n    type: 'string',\n    enum: ['wasm', 'native', 'fallback'],\n    productionRecommended: ['wasm', 'fallback'],\n    fallback: 'wasm',\n  },\n  'storage.memory.backend': {\n    type: 'string',\n    enum: ['sqlite', 'lancedb', 'json'],\n    productionRecommended: ['sqlite', 'lancedb'],\n    fallback: 'sqlite',\n  },\n  'core.security.enableSandbox': {\n    type: 'boolean',\n    productionRequired: true,\n    fallback: true,\n  },\n  'core.security.allowShellAccess': {\n    type: 'boolean',\n    productionForbidden: true,\n    fallback: false,\n  },\n  // Database constraints\n  'storage.database.sqlite.maxConnections': {\n    type: 'number',\n    min: 1,\n    max: 100,\n    productionMax: 50,\n    fallback: 10,\n  },\n  'storage.memory.maxMemorySize': {\n    type: 'number',\n    min: 1024 * 1024, // 1MB minimum\n    productionMin: 50 * 1024 * 1024, // 50MB minimum in production\n    fallback: 100 * 1024 * 1024, // 100MB default\n  },\n} as const;\n\n/**\n * Production Environment Validation Schema.\n * \n * Comprehensive validation schema specifically designed for production\n * deployments with enhanced security, strict validation rules, and\n * mandatory environment variable requirements. Enforces production\n * best practices and prevents unsafe configurations.\n * \n * Security Features:\n * - Mandatory environment variables for production\n * - Forbidden unsafe configuration options\n * - Automatic fallback to secure defaults\n * - API key validation and presence checking\n * - Port range restrictions for production environments\n * \n * Schema Components:\n * - `required`: Environment variables that must be present\n * - `optional`: Environment variables that are recommended but not mandatory\n * - `validation`: Custom validation functions for each variable\n * - `production.enforced`: Settings that are mandatory in production\n * - `production.forbidden`: Settings that are prohibited in production\n * - `production.fallbacks`: Safe default values for production\n * - `portRanges`: Environment-specific port allocation ranges\n * \n * @example\n * ```typescript\n * import { PRODUCTION_VALIDATION_SCHEMA } from 'claude-code-zen/config';\n * \n * // Validate production environment\n * const isValid = PRODUCTION_VALIDATION_SCHEMA.validation.NODE_ENV('production');\n * console.log('Valid NODE_ENV:', isValid); // true\n * \n * // Check API key requirement\n * if (process.env.NODE_ENV === 'production') {\n *   const hasValidKey = PRODUCTION_VALIDATION_SCHEMA.validation.ANTHROPIC_API_KEY(\n *     process.env.ANTHROPIC_API_KEY\n *   );\n *   if (!hasValidKey) {\n *     throw new Error('ANTHROPIC_API_KEY is required in production');\n *   }\n * }\n * \n * // Get production fallbacks\n * const fallbacks = PRODUCTION_VALIDATION_SCHEMA.production.fallbacks;\n * console.log('Safe port fallback:', fallbacks['interfaces.web.port']); // 3456\n * ```\n * \n * @const PRODUCTION_VALIDATION_SCHEMA\n * @see {@link ConfigValidationSchema} - Schema type definition\n * @see {@link VALIDATION_RULES} - General validation rules\n * @since 1.0.0-alpha.43\n */\nexport const PRODUCTION_VALIDATION_SCHEMA: ConfigValidationSchema = {\n  required: ['NODE_ENV'],\n  optional: ['CLAUDE_WEB_PORT', 'CLAUDE_MCP_PORT', 'CLAUDE_LOG_LEVEL', 'CLAUDE_MAX_AGENTS'],\n  validation: {\n    NODE_ENV: (value: string) => ['production', 'development', 'test'].includes(value),\n    ANTHROPIC_API_KEY: (value: string) =>\n      process.env['NODE_ENV'] === 'production' ? !!value && value.length > 10 : true,\n    CLAUDE_WEB_PORT: (value: string) => {\n      const port = parseInt(value, 10);\n      return !isNaN(port) && port >= 3000 && port <= 65535;\n    },\n    CLAUDE_MCP_PORT: (value: string) => {\n      const port = parseInt(value, 10);\n      return !isNaN(port) && port >= 3000 && port <= 65535;\n    },\n  },\n  production: {\n    enforced: ['core.security.enableSandbox', 'core.logger.level', 'environment.strictValidation'],\n    forbidden: [\n      'core.security.allowShellAccess',\n      'environment.allowUnsafeOperations',\n      'environment.enableDebugEndpoints',\n    ],\n    fallbacks: {\n      'core.logger.level': 'info',\n      'core.security.enableSandbox': true,\n      'core.security.allowShellAccess': false,\n      'interfaces.web.port': 3456,\n      'interfaces.mcp.http.port': 3000,\n      'coordination.maxAgents': 10,\n      'coordination.topology': 'hierarchical',\n      'storage.memory.backend': 'sqlite',\n      'neural.backend': 'wasm',\n    },\n  },\n  portRanges: {\n    development: { min: 3000, max: 9999 },\n    production: { min: 3000, max: 65535 },\n  },\n};\n\n/**\n * Default Port Allocation Strategy.\n * \n * Carefully planned port allocation strategy designed to prevent conflicts\n * between different system components. Provides a stable, predictable port\n * assignment scheme that works across development, testing, and production\n * environments while avoiding common port conflicts.\n * \n * Port Assignment Philosophy:\n * - Primary services get well-known, memorable ports\n * - Sequential allocation for related services\n * - Gaps between service groups to allow expansion\n * - Avoids system ports (< 1024) and common application ports\n * - Compatible with firewall rules and load balancer configurations\n * \n * Service Port Mapping:\n * - `3000`: MCP HTTP Server (primary Claude integration)\n * - `3456`: Web Dashboard (administrative interface)\n * - `3457`: Monitoring Dashboard (metrics and health)\n * - `3001`: Development Server (when needed)\n * - `3002`: Backup/Failover Port (high availability)\n * \n * @example\n * ```typescript\n * import { DEFAULT_PORT_ALLOCATION } from 'claude-code-zen/config';\n * \n * // Get assigned port for a service\n * const mcpPort = DEFAULT_PORT_ALLOCATION['interfaces.mcp.http.port'];\n * console.log('MCP server will run on port:', mcpPort); // 3000\n * \n * // Check for conflicts before starting services\n * const webPort = DEFAULT_PORT_ALLOCATION['interfaces.web.port'];\n * const monitorPort = DEFAULT_PORT_ALLOCATION['monitoring.dashboard.port'];\n * \n * if (webPort === monitorPort) {\n *   throw new Error('Port conflict detected!');\n * }\n * \n * // Use in server configuration\n * const serverConfig = {\n *   mcp: { port: DEFAULT_PORT_ALLOCATION['interfaces.mcp.http.port'] },\n *   web: { port: DEFAULT_PORT_ALLOCATION['interfaces.web.port'] },\n *   monitoring: { port: DEFAULT_PORT_ALLOCATION['monitoring.dashboard.port'] }\n * };\n * ```\n * \n * @const DEFAULT_PORT_ALLOCATION\n * @see {@link PORT_ALLOCATION_BY_ENV} - Environment-specific overrides\n * @see {@link VALIDATION_RULES} - Port validation rules\n * @since 1.0.0-alpha.43\n */\nexport const DEFAULT_PORT_ALLOCATION = {\n  'interfaces.mcp.http.port': 3000, // Primary MCP server\n  'interfaces.web.port': 3456, // Web dashboard\n  'monitoring.dashboard.port': 3457, // Monitoring dashboard\n  'development.port': 3001, // Development server if needed\n  'backup.port': 3002, // Backup/failover port\n} as const;\n\n/**\n * Environment-Specific Port Allocation Overrides.\n * \n * Environment-aware port allocation that provides different port assignments\n * for development, production, and testing environments. Allows for isolation\n * between environments while maintaining service functionality and preventing\n * conflicts when multiple environments run on the same system.\n * \n * Environment Strategy:\n * - **Development**: Standard ports for easy access and debugging\n * - **Production**: Environment variable override support with fallbacks\n * - **Testing**: Offset ports to avoid conflicts with development services\n * \n * Port Environment Mapping:\n * - Development: 3000, 3456, 3457 (standard allocation)\n * - Production: Environment variable driven with same fallbacks\n * - Testing: 3100, 3556, 3557 (offset by +100/+100/+100)\n * \n * Environment Variables:\n * - `CLAUDE_MCP_PORT`: Override MCP server port in production\n * - `CLAUDE_WEB_PORT`: Override web dashboard port in production  \n * - `CLAUDE_MONITOR_PORT`: Override monitoring dashboard port in production\n * \n * @example\n * ```typescript\n * import { PORT_ALLOCATION_BY_ENV } from 'claude-code-zen/config';\n * \n * const env = process.env.NODE_ENV || 'development';\n * const ports = PORT_ALLOCATION_BY_ENV[env];\n * \n * // Get environment-specific port\n * const mcpPort = ports['interfaces.mcp.http.port'];\n * console.log(`MCP server port for ${env}:`, mcpPort);\n * \n * // Start services with environment-appropriate ports\n * const config = {\n *   environment: env,\n *   services: {\n *     mcp: { port: ports['interfaces.mcp.http.port'] },\n *     web: { port: ports['interfaces.web.port'] },\n *     monitoring: { port: ports['monitoring.dashboard.port'] }\n *   }\n * };\n * \n * // Production example with environment variables\n * // CLAUDE_MCP_PORT=8080 CLAUDE_WEB_PORT=8081 npm start\n * if (env === 'production') {\n *   console.log('Production ports can be overridden via environment variables');\n * }\n * ```\n * \n * @const PORT_ALLOCATION_BY_ENV\n * @see {@link DEFAULT_PORT_ALLOCATION} - Base port allocation strategy\n * @see {@link VALIDATION_RULES} - Port validation and conflict checking\n * @since 1.0.0-alpha.43\n */\nexport const PORT_ALLOCATION_BY_ENV = {\n  development: {\n    'interfaces.mcp.http.port': 3000,\n    'interfaces.web.port': 3456,\n    'monitoring.dashboard.port': 3457,\n  },\n  production: {\n    'interfaces.mcp.http.port': parseInt(process.env['CLAUDE_MCP_PORT'] || '3000', 10),\n    'interfaces.web.port': parseInt(process.env['CLAUDE_WEB_PORT'] || '3456', 10),\n    'monitoring.dashboard.port': parseInt(process.env['CLAUDE_MONITOR_PORT'] || '3457', 10),\n  },\n  test: {\n    'interfaces.mcp.http.port': 3100,\n    'interfaces.web.port': 3556,\n    'monitoring.dashboard.port': 3557,\n  },\n} as const;\n\n/**\n * URL Builder Configuration and Utilities.\n * \n * Comprehensive URL construction system consolidated from url-builder.ts.\n * Provides type-safe, environment-aware URL building capabilities for\n * all system services including MCP servers, web dashboards, monitoring\n * endpoints, and API routes.\n * \n * Features:\n * - Protocol-aware URL construction (HTTP/HTTPS)\n * - Environment-specific host and port resolution\n * - Path normalization and query parameter handling\n * - Service-specific URL builders with validation\n * - Development vs production URL differences\n * \n * @since 1.0.0-alpha.43\n */\n\n/**\n * URL Builder Configuration Interface.\n * \n * Defines the configuration options for URL construction including protocol\n * selection, host specification, port assignment, and path configuration.\n * Used by URLBuilder class and service-specific URL generation functions.\n * \n * @example\n * ```typescript\n * import type { URLBuilderConfig } from 'claude-code-zen/config';\n * \n * const config: URLBuilderConfig = {\n *   protocol: 'https',\n *   host: 'api.example.com',\n *   port: 443,\n *   path: '/v1/mcp'\n * };\n * \n * // Used with URLBuilder\n * const builder = new URLBuilder(systemConfig);\n * const url = builder.buildURL('mcp', config);\n * ```\n * \n * @interface URLBuilderConfig\n * @see {@link URLBuilder} - URL builder class implementation\n * @since 1.0.0-alpha.43\n */\nexport interface URLBuilderConfig {\n  protocol?: 'http' | 'https';\n  host?: string;\n  port?: number;\n  path?: string;\n}\n\nexport class URLBuilder {\n  private config: SystemConfiguration;\n\n  constructor(config: SystemConfiguration = DEFAULT_CONFIG) {\n    this.config = config;\n  }\n\n  /**\n   * Build HTTP MCP server URL.\n   *\n   * @param overrides\n   */\n  getMCPServerURL(overrides: Partial<URLBuilderConfig> = {}): string {\n    const protocol = overrides.protocol || this.getProtocol();\n    const host = overrides.host || this.config.interfaces.mcp.http.host;\n    const port = overrides.port || this.config.interfaces.mcp.http.port;\n    const path = overrides.path || '';\n\n    return this.buildURL(protocol, host, port, path);\n  }\n\n  /**\n   * Build web dashboard URL.\n   *\n   * @param overrides\n   */\n  getWebDashboardURL(overrides: Partial<URLBuilderConfig> = {}): string {\n    const protocol = overrides.protocol || this.getProtocol();\n    const host = overrides.host || this.config.interfaces.web.host;\n    const port = overrides.port || this.config.interfaces.web.port;\n    const path = overrides.path || '';\n\n    return this.buildURL(protocol, host, port, path);\n  }\n\n  /**\n   * Build monitoring dashboard URL.\n   *\n   * @param overrides\n   */\n  getMonitoringDashboardURL(overrides: Partial<URLBuilderConfig> = {}): string {\n    const protocol = overrides.protocol || this.getProtocol();\n    const host = overrides.host || this.config.monitoring.dashboard.host;\n    const port = overrides.port || this.config.monitoring.dashboard.port;\n    const path = overrides.path || '';\n\n    return this.buildURL(protocol, host, port, path);\n  }\n\n  /**\n   * Build CORS origins array.\n   */\n  getCORSOrigins(): string[] {\n    const protocol = this.getProtocol();\n    const mcpURL = this.getMCPServerURL({ protocol });\n    const webURL = this.getWebDashboardURL({ protocol });\n    const monitoringURL = this.getMonitoringDashboardURL({ protocol });\n    const configuredOrigins = this.config.interfaces.web.corsOrigins || [];\n\n    const updatedOrigins = configuredOrigins.map((origin) => {\n      if (origin.includes('localhost') && !origin.startsWith('http')) {\n        return `${protocol}://${origin}`;\n      }\n      if (origin.startsWith('http://localhost') && protocol === 'https') {\n        return origin.replace('http://', 'https://');\n      }\n      return origin;\n    });\n\n    const allOrigins = [...updatedOrigins, mcpURL, webURL, monitoringURL];\n    return Array.from(new Set(allOrigins));\n  }\n\n  /**\n   * Get service base URL.\n   *\n   * @param service\n   * @param overrides\n   */\n  getServiceBaseURL(\n    service: 'mcp' | 'web' | 'monitoring',\n    overrides: Partial<URLBuilderConfig> = {}\n  ): string {\n    switch (service) {\n      case 'mcp':\n        return this.getMCPServerURL(overrides);\n      case 'web':\n        return this.getWebDashboardURL(overrides);\n      case 'monitoring':\n        return this.getMonitoringDashboardURL(overrides);\n      default:\n        throw new Error(`Unknown service: ${service}`);\n    }\n  }\n\n  /**\n   * Build a URL from components.\n   *\n   * @param protocol\n   * @param host\n   * @param port\n   * @param path\n   */\n  private buildURL(protocol: string, host: string, port: number, path: string): string {\n    const shouldOmitPort =\n      (protocol === 'http' && port === 80) || (protocol === 'https' && port === 443);\n\n    const portPart = shouldOmitPort ? '' : `:${port}`;\n    const pathPart = path.startsWith('/') ? path : `/${path}`;\n    const cleanPath = path === '' ? '' : pathPart;\n\n    return `${protocol}://${host}${portPart}${cleanPath}`;\n  }\n\n  /**\n   * Get protocol based on environment and configuration.\n   */\n  private getProtocol(): 'http' | 'https' {\n    if (process.env['FORCE_HTTPS'] === 'true') {\n      return 'https';\n    }\n    if (process.env['FORCE_HTTP'] === 'true') {\n      return 'http';\n    }\n    if (this.config.interfaces.web.enableHttps) {\n      return 'https';\n    }\n    return this.config.environment.isProduction ? 'https' : 'http';\n  }\n\n  /**\n   * Update configuration.\n   *\n   * @param config\n   */\n  updateConfig(config: SystemConfiguration): void {\n    this.config = config;\n  }\n}\n\n/**\n * Default URL builder instance using default configuration.\n */\nexport const defaultURLBuilder = new URLBuilder();\n\n/**\n * Create URL builder with custom configuration.\n *\n * @param config\n */\nexport const createURLBuilder = (config: SystemConfiguration): URLBuilder => {\n  return new URLBuilder(config);\n};\n\n/**\n * Convenience functions using default builder.\n *\n * @param overrides\n */\nexport const getMCPServerURL = (overrides?: Partial<URLBuilderConfig>) =>\n  defaultURLBuilder.getMCPServerURL(overrides);\n\nexport const getWebDashboardURL = (overrides?: Partial<URLBuilderConfig>) =>\n  defaultURLBuilder.getWebDashboardURL(overrides);\n\nexport const getMonitoringDashboardURL = (overrides?: Partial<URLBuilderConfig>) =>\n  defaultURLBuilder.getMonitoringDashboardURL(overrides);\n\nexport const getCORSOrigins = () => defaultURLBuilder.getCORSOrigins();\n"],
  "mappings": "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",
  "names": []
}
