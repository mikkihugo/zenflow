{
  "version": 3,
  "sources": ["../../src/interfaces/terminal/process-orchestrator.ts", "../../src/interfaces/terminal/state-hooks/use-config.ts", "../../src/interfaces/terminal/state-hooks/use-swarm-status.ts", "../../src/interfaces/terminal/utils/mock-command-handler.ts", "../../src/interfaces/terminal/index.ts"],
  "sourcesContent": ["/**\n * Terminal Manager - Terminal operations and process management.\n * Handles terminal sessions, command execution, and process lifecycle.\n */\n/**\n * @file Interface implementation: process-orchestrator.\n */\n\nimport { type ChildProcess, spawn } from 'node:child_process';\nimport { EventEmitter } from 'node:events';\nimport type { ILogger } from '../../core/logger.ts';\nimport type { IEventBus } from '../core/event-bus';\n\nexport interface TerminalConfig {\n  shell?: string;\n  cwd?: string;\n  env?: Record<string, string>;\n  timeout?: number;\n  maxConcurrentProcesses?: number;\n}\n\nexport interface ProcessResult {\n  success: boolean;\n  stdout: string;\n  stderr: string;\n  exitCode: number;\n  duration: number;\n  error?: Error;\n}\n\nexport interface TerminalSession {\n  id: string;\n  shell: string;\n  cwd: string;\n  env: Record<string, string>;\n  process?: ChildProcess;\n  active: boolean;\n  created: Date;\n  lastActivity: Date;\n}\n\n/**\n * Terminal Manager for process and session management.\n *\n * @example\n */\nexport class TerminalManager extends EventEmitter {\n  private config: Required<TerminalConfig>;\n  private sessions = new Map<string, TerminalSession>();\n  private activeProcesses = new Map<string, ChildProcess>();\n\n  constructor(\n    config: TerminalConfig = {},\n    private logger?: ILogger,\n    private eventBus?: IEventBus\n  ) {\n    super();\n\n    this.config = {\n      shell: config?.shell || (process.platform === 'win32' ? 'cmd.exe' : '/bin/bash'),\n      cwd: config?.cwd || process.cwd(),\n      env: {\n        ...(Object.fromEntries(\n          Object.entries(process.env).filter(([_, value]) => value !== undefined)\n        ) as Record<string, string>),\n        ...config?.env,\n      },\n      timeout: config?.timeout || 30000,\n      maxConcurrentProcesses: config?.maxConcurrentProcesses || 10,\n    };\n\n    this.setupEventHandlers();\n    this.logger?.info('TerminalManager initialized');\n  }\n\n  /**\n   * Execute a command in a new process.\n   *\n   * @param command\n   * @param options\n   * @param options.cwd\n   * @param options.env\n   * @param options.timeout\n   * @param options.shell\n   */\n  async executeCommand(\n    command: string,\n    options: {\n      cwd?: string;\n      env?: Record<string, string>;\n      timeout?: number;\n      shell?: boolean;\n    } = {}\n  ): Promise<ProcessResult> {\n    const startTime = Date.now();\n    const processId = `proc_${Date.now()}_${Math.random().toString(36).substring(2, 11)}`;\n\n    if (this.activeProcesses.size >= this.config.maxConcurrentProcesses) {\n      throw new Error('Maximum concurrent processes limit reached');\n    }\n\n    const execOptions = {\n      cwd: options?.cwd || this.config.cwd,\n      env: { ...this.config.env, ...options?.env },\n      shell: options?.shell !== false,\n      timeout: options?.timeout || this.config.timeout,\n    };\n\n    this.logger?.info(`Executing command: ${command}`, { processId, options: execOptions });\n\n    return new Promise((resolve) => {\n      let stdout = '';\n      let stderr = '';\n      let completed = false;\n\n      const childProcess = spawn(command, [], {\n        ...execOptions,\n        stdio: ['pipe', 'pipe', 'pipe'],\n      });\n\n      this.activeProcesses.set(processId, childProcess);\n      this.emit('processStarted', { processId, command });\n\n      // Set up timeout\n      const timeoutHandle = setTimeout(() => {\n        if (!completed) {\n          completed = true;\n          childProcess?.kill('SIGTERM');\n          this.cleanupProcess(processId);\n\n          resolve({\n            success: false,\n            stdout,\n            stderr: `${stderr}\\nProcess killed due to timeout`,\n            exitCode: -1,\n            duration: Date.now() - startTime,\n            error: new Error(`Command timeout after ${execOptions?.timeout}ms`),\n          });\n        }\n      }, execOptions?.timeout);\n\n      // Handle stdout\n      childProcess?.stdout?.on('data', (data) => {\n        stdout += data.toString();\n        this.emit('processOutput', { processId, type: 'stdout', data: data.toString() });\n      });\n\n      // Handle stderr\n      childProcess?.stderr?.on('data', (data) => {\n        stderr += data.toString();\n        this.emit('processOutput', { processId, type: 'stderr', data: data.toString() });\n      });\n\n      // Handle process completion\n      childProcess?.on('close', (code) => {\n        if (!completed) {\n          completed = true;\n          clearTimeout(timeoutHandle);\n          this.cleanupProcess(processId);\n\n          const duration = Date.now() - startTime;\n          const result: ProcessResult = {\n            success: code === 0,\n            stdout,\n            stderr,\n            exitCode: code || 0,\n            duration,\n          };\n\n          this.logger?.info(`Command completed: ${command}`, {\n            processId,\n            exitCode: code,\n            duration,\n          });\n\n          this.emit('processCompleted', { processId, command, result });\n          resolve(result);\n        }\n      });\n\n      // Handle process errors\n      childProcess?.on('error', (error) => {\n        if (!completed) {\n          completed = true;\n          clearTimeout(timeoutHandle);\n          this.cleanupProcess(processId);\n\n          const duration = Date.now() - startTime;\n          this.logger?.error(`Command failed: ${command}`, { processId, error });\n\n          this.emit('processError', { processId, command, error });\n          resolve({\n            success: false,\n            stdout,\n            stderr: `${stderr}\n      Process error: ${error.message}`,\n            exitCode: -1,\n            duration,\n            error,\n          });\n        }\n      });\n    });\n  }\n\n  /**\n   * Create a persistent terminal session.\n   *\n   * @param sessionId\n   */\n  async createSession(sessionId?: string): Promise<string> {\n    const id = sessionId || `session_${Date.now()}_${Math.random().toString(36).substring(2, 11)}`;\n\n    if (this.sessions.has(id)) {\n      throw new Error(`Session ${id} already exists`);\n    }\n\n    const session: TerminalSession = {\n      id,\n      shell: this.config.shell,\n      cwd: this.config.cwd,\n      env: this.config.env,\n      active: true,\n      created: new Date(),\n      lastActivity: new Date(),\n    };\n\n    this.sessions.set(id, session);\n    this.logger?.info(`Terminal session created: ${id}`);\n    this.emit('sessionCreated', { sessionId: id });\n\n    return id;\n  }\n\n  /**\n   * Execute command in a session.\n   *\n   * @param sessionId\n   * @param command\n   */\n  async executeInSession(sessionId: string, command: string): Promise<ProcessResult> {\n    const session = this.sessions.get(sessionId);\n    if (!session) {\n      throw new Error(`Session ${sessionId} not found`);\n    }\n\n    session.lastActivity = new Date();\n\n    return this.executeCommand(command, {\n      cwd: session.cwd,\n      env: session.env,\n    });\n  }\n\n  /**\n   * Close a terminal session.\n   *\n   * @param sessionId\n   */\n  async closeSession(sessionId: string): Promise<void> {\n    const session = this.sessions.get(sessionId);\n    if (!session) {\n      return;\n    }\n\n    session.active = false;\n    if (session.process && !session.process.killed) {\n      session.process.kill('SIGTERM');\n    }\n\n    this.sessions.delete(sessionId);\n    this.logger?.info(`Terminal session closed: ${sessionId}`);\n    this.emit('sessionClosed', { sessionId });\n  }\n\n  /**\n   * Get active sessions.\n   */\n  getSessions(): TerminalSession[] {\n    return Array.from(this.sessions.values());\n  }\n\n  /**\n   * Get active processes count.\n   */\n  getActiveProcessCount(): number {\n    return this.activeProcesses.size;\n  }\n\n  /**\n   * Kill a specific process.\n   *\n   * @param processId\n   */\n  async killProcess(processId: string): Promise<boolean> {\n    const process = this.activeProcesses.get(processId);\n    if (!process) {\n      return false;\n    }\n\n    process.kill('SIGTERM');\n    this.cleanupProcess(processId);\n    this.logger?.info(`Process killed: ${processId}`);\n    return true;\n  }\n\n  /**\n   * Clean up all resources.\n   */\n  async cleanup(): Promise<void> {\n    this.logger?.info('Cleaning up TerminalManager...');\n\n    // Close all sessions\n    for (const sessionId of Array.from(this.sessions.keys())) {\n      await this.closeSession(sessionId);\n    }\n\n    // Kill all active processes\n    for (const [processId, process] of Array.from(this.activeProcesses.entries())) {\n      if (!process.killed) {\n        process.kill('SIGTERM');\n      }\n      this.activeProcesses.delete(processId);\n    }\n\n    this.logger?.info('TerminalManager cleanup completed');\n  }\n\n  private setupEventHandlers(): void {\n    if (this.eventBus) {\n      this.eventBus.on('system:shutdown', () => {\n        this.cleanup().catch((error) =>\n          this.logger?.error('Error during TerminalManager cleanup', { error })\n        );\n      });\n    }\n  }\n\n  private cleanupProcess(processId: string): void {\n    this.activeProcesses.delete(processId);\n  }\n}\n\nexport default TerminalManager;\n", "/**\n * Configuration State Hook.\n *\n * React hook for managing terminal interface configuration state.\n * Note: This is a React hook, NOT a Claude Code hook (which belongs in templates/).\n */\n/**\n * @file Interface implementation: use-config.\n */\n\nimport { useEffect, useState } from 'react';\nimport { getLogger } from '../../../config/logging-config.ts';\n\nconst logger = getLogger('ConfigHook');\n\nexport interface TerminalConfig {\n  theme: 'dark' | 'light';\n  refreshInterval: number;\n  verbose: boolean;\n  showAnimations: boolean;\n  swarmConfig: {\n    defaultTopology: 'mesh' | 'hierarchical' | 'ring' | 'star';\n    maxAgents: number;\n    autoRefresh: boolean;\n    showAdvancedMetrics: boolean;\n  };\n  ui: {\n    showBorders: boolean;\n    centerAlign: boolean;\n    compactMode: boolean;\n  };\n}\n\nconst defaultConfig: TerminalConfig = {\n  theme: 'dark',\n  refreshInterval: 3000,\n  verbose: false,\n  showAnimations: true,\n  swarmConfig: {\n    defaultTopology: 'mesh',\n    maxAgents: 10,\n    autoRefresh: true,\n    showAdvancedMetrics: false,\n  },\n  ui: {\n    showBorders: true,\n    centerAlign: false,\n    compactMode: false,\n  },\n};\n\nexport interface UseConfigReturn {\n  data: TerminalConfig;\n  isLoading: boolean;\n  error?: Error;\n  updateConfig: (updates: Partial<TerminalConfig>) => Promise<void>;\n  updateUIConfig: (updates: Partial<TerminalConfig['ui']>) => Promise<void>;\n  updateSwarmConfig: (updates: Partial<TerminalConfig['swarmConfig']>) => Promise<void>;\n  resetConfig: () => Promise<void>;\n}\n\n/**\n * Configuration React Hook.\n *\n * Provides reactive configuration management for terminal interface components.\n */\nexport const useConfig = (): UseConfigReturn => {\n  const [config, setConfig] = useState<TerminalConfig>(defaultConfig);\n  const [isLoading, setIsLoading] = useState(true);\n  const [error, setError] = useState<Error | undefined>(undefined);\n\n  // Load configuration on mount\n  useEffect(() => {\n    loadConfig();\n  }, [loadConfig]); // eslint-disable-line react-hooks/exhaustive-deps\n\n  const loadConfig = async () => {\n    try {\n      setIsLoading(true);\n      setError(undefined);\n\n      // Try to load config from file system\n      const loadedConfig = await loadConfigFromFile();\n      if (loadedConfig) {\n        setConfig({ ...defaultConfig, ...loadedConfig });\n      } else {\n        setConfig(defaultConfig);\n      }\n\n      logger.debug('Terminal configuration loaded successfully');\n    } catch (err) {\n      const error = err instanceof Error ? err : new Error('Failed to load configuration');\n      logger.error('Failed to load terminal configuration:', error);\n      setError(error);\n      setConfig(defaultConfig); // Fallback to default\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const loadConfigFromFile = async (): Promise<Partial<TerminalConfig> | null> => {\n    try {\n      // Try different config locations\n      const configPaths = [\n        './.claude/terminal-config.json',\n        './config/terminal.json',\n        `${process.env['HOME']}/.claude-zen/terminal-config.json`,\n      ];\n\n      for (const configPath of configPaths) {\n        try {\n          const fs = await import('node:fs/promises');\n          const configData = await fs.readFile(configPath, 'utf-8');\n          const parsedConfig = JSON.parse(configData);\n\n          if (parsedConfig?.terminal) {\n            return parsedConfig?.terminal;\n          } else if (parsedConfig?.theme || parsedConfig?.swarmConfig) {\n            return parsedConfig;\n          }\n        } catch (_err) {}\n      }\n\n      return null;\n    } catch (err) {\n      logger.warn('Could not load terminal config from file:', err);\n      return null;\n    }\n  };\n\n  const saveConfigToFile = async (newConfig: TerminalConfig) => {\n    try {\n      const fs = await import('node:fs/promises');\n      const path = await import('node:path');\n\n      // Ensure .claude directory exists\n      const configDir = './.claude';\n      try {\n        await fs.mkdir(configDir, { recursive: true });\n      } catch (_err) {\n        // Directory might already exist\n      }\n\n      const configPath = path.join(configDir, 'terminal-config.json');\n      const configData = JSON.stringify({ terminal: newConfig }, null, 2);\n\n      await fs.writeFile(configPath, configData, 'utf-8');\n      logger.debug('Terminal configuration saved to file');\n    } catch (err) {\n      logger.warn('Could not save terminal config to file:', err);\n      // Don't throw error - config updates should still work in memory\n    }\n  };\n\n  const updateConfig = async (updates: Partial<TerminalConfig>) => {\n    try {\n      const newConfig = { ...config, ...updates };\n      setConfig(newConfig);\n      await saveConfigToFile(newConfig);\n      logger.debug('Terminal configuration updated:', updates);\n    } catch (err) {\n      const error = err instanceof Error ? err : new Error('Failed to update configuration');\n      logger.error('Failed to update terminal configuration:', error);\n      setError(error);\n      throw error;\n    }\n  };\n\n  const updateUIConfig = async (updates: Partial<TerminalConfig['ui']>) => {\n    await updateConfig({\n      ui: { ...config?.ui, ...updates },\n    });\n  };\n\n  const updateSwarmConfig = async (updates: Partial<TerminalConfig['swarmConfig']>) => {\n    await updateConfig({\n      swarmConfig: { ...config?.swarmConfig, ...updates },\n    });\n  };\n\n  const resetConfig = async () => {\n    try {\n      setConfig(defaultConfig);\n      await saveConfigToFile(defaultConfig);\n      logger.debug('Terminal configuration reset to defaults');\n    } catch (err) {\n      const error = err instanceof Error ? err : new Error('Failed to reset configuration');\n      logger.error('Failed to reset terminal configuration:', error);\n      setError(error);\n      throw error;\n    }\n  };\n\n  return {\n    data: config,\n    isLoading,\n    error,\n    updateConfig,\n    updateUIConfig,\n    updateSwarmConfig,\n    resetConfig,\n  };\n};\n\nexport default useConfig;\n", "/**\n * Swarm Status State Hook.\n *\n * React hook for managing swarm state and providing real-time updates.\n * Note: This is a React hook, NOT a Claude Code hook (which belongs in templates/).\n */\n/**\n * @file Interface implementation: use-swarm-status.\n */\n\nimport { useEffect, useState } from 'react';\nimport { getLogger } from '../../../config/logging-config.ts';\n\nconst logger = getLogger('SwarmStatusHook');\n\n// Missing interface definitions\nexport interface SwarmMetrics {\n  totalAgents: number;\n  activeAgents: number;\n  tasksInProgress: number;\n  tasksCompleted: number;\n  totalTasks: number;\n  uptime: number;\n  performance: {\n    throughput: number;\n    errorRate: number;\n    avgLatency: number;\n  };\n}\n\nexport interface SwarmAgent {\n  id: string;\n  role: 'coordinator' | 'worker' | string;\n  status: 'active' | 'idle' | 'busy';\n  capabilities: string[];\n  lastActivity: Date;\n  metrics: {\n    tasksCompleted: number;\n    averageResponseTime: number;\n    errors: number;\n    successRate: number;\n    totalTasks: number;\n  };\n  cognitivePattern: string;\n  performanceScore: number;\n}\n\nexport interface SwarmTask {\n  id: string;\n  description: string;\n  status: 'pending' | 'in_progress' | 'completed' | 'failed';\n  progress: number;\n  assignedAgents: string[];\n  priority: 'low' | 'medium' | 'high';\n  startTime?: Date;\n  estimatedDuration?: number;\n}\n\nexport interface SwarmStatus {\n  status: 'idle' | 'active' | 'paused' | 'error' | 'unknown';\n  topology: 'mesh' | 'hierarchical' | 'ring' | 'star';\n  totalAgents: number;\n  activeAgents: number;\n  uptime: number;\n}\n\nexport interface SwarmState {\n  status: SwarmStatus;\n  metrics: SwarmMetrics;\n  agents: SwarmAgent[];\n  tasks: SwarmTask[];\n  lastUpdated: Date;\n}\n\nexport interface UseSwarmStatusOptions {\n  autoRefresh?: boolean;\n  refreshInterval?: number;\n  enableMockData?: boolean;\n}\n\nexport interface UseSwarmStatusReturn {\n  swarmState: SwarmState;\n  isLoading: boolean;\n  error?: Error;\n  refreshStatus: () => Promise<void>;\n  startAgent: (agentConfig: Partial<SwarmAgent>) => Promise<void>;\n  stopAgent: (agentId: string) => Promise<void>;\n  createTask: (taskConfig: Partial<SwarmTask>) => Promise<void>;\n  updateTask: (taskId: string, updates: Partial<SwarmTask>) => Promise<void>;\n}\n\nconst initialSwarmState: SwarmState = {\n  status: {\n    status: 'idle',\n    topology: 'mesh',\n    totalAgents: 0,\n    activeAgents: 0,\n    uptime: 0,\n  },\n  metrics: {\n    totalAgents: 0,\n    activeAgents: 0,\n    tasksInProgress: 0,\n    tasksCompleted: 0,\n    totalTasks: 0,\n    uptime: 0,\n    performance: {\n      throughput: 0,\n      errorRate: 0,\n      avgLatency: 0,\n    },\n  },\n  agents: [],\n  tasks: [],\n  lastUpdated: new Date(),\n};\n\n/**\n * Swarm Status React Hook.\n *\n * Provides reactive swarm state management with real-time updates for React components.\n *\n * @param options\n */\nexport const useSwarmStatus = (options: UseSwarmStatusOptions = {}): UseSwarmStatusReturn => {\n  const {\n    autoRefresh = true,\n    refreshInterval = 3000,\n    enableMockData = process.env['NODE_ENV'] === 'development',\n  } = options;\n\n  const [swarmState, setSwarmState] = useState<SwarmState>(initialSwarmState);\n  const [isLoading, setIsLoading] = useState(true);\n  const [error, setError] = useState<Error | undefined>(undefined);\n\n  const refreshStatus = async () => {\n    try {\n      setError(undefined);\n\n      if (enableMockData) {\n        // Use mock data for development\n        await loadMockSwarmData();\n      } else {\n        // Load real swarm data\n        await loadRealSwarmData();\n      }\n\n      logger.debug('Swarm status refreshed successfully');\n    } catch (err) {\n      const error = err instanceof Error ? err : new Error('Failed to refresh swarm status');\n      logger.error('Failed to refresh swarm status:', error);\n      setError(error);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  // Auto-refresh effect\n  useEffect(() => {\n    // Initial load\n    refreshStatus();\n\n    if (autoRefresh) {\n      const interval = setInterval(refreshStatus, refreshInterval);\n      return () => clearInterval(interval);\n    }\n  }, [autoRefresh, refreshInterval]); // eslint-disable-line react-hooks/exhaustive-deps\n\n  const loadMockSwarmData = async () => {\n    // Simulate network delay\n    await new Promise((resolve) => setTimeout(resolve, 100));\n\n    const mockAgents: SwarmAgent[] = [\n      {\n        id: 'coordinator-main',\n        role: 'coordinator',\n        status: 'active',\n        capabilities: ['coordination', 'planning', 'monitoring', 'optimization'],\n        lastActivity: new Date(Date.now() - 1000),\n        metrics: {\n          tasksCompleted: Math.floor(Math.random() * 20) + 10,\n          averageResponseTime: 120 + Math.random() * 100,\n          errors: Math.floor(Math.random() * 2),\n          successRate: 0.95 + Math.random() * 0.05,\n          totalTasks: Math.floor(Math.random() * 25) + 10,\n        },\n        cognitivePattern: 'systems-thinking',\n        performanceScore: 0.9 + Math.random() * 0.1,\n      },\n      // Add more mock agents as needed\n    ];\n\n    const mockTasks: SwarmTask[] = [\n      {\n        id: 'task-doc-proc',\n        description: 'Process document-driven development workflow',\n        status: 'in_progress',\n        progress: 40 + Math.random() * 40,\n        assignedAgents: ['coordinator-main'],\n        priority: 'high',\n        startTime: new Date(Date.now() - 600000),\n        estimatedDuration: 1200000,\n      },\n      // Add more mock tasks as needed\n    ];\n\n    const activeAgents = mockAgents.filter((a) => a.status === 'active' || a.status === 'busy');\n    const uptime = Date.now() - (swarmState.status.uptime || Date.now() - 3600000);\n\n    const newState: SwarmState = {\n      status: {\n        status: activeAgents.length > 0 ? 'active' : 'idle',\n        topology: swarmState.status.topology,\n        totalAgents: mockAgents.length,\n        activeAgents: activeAgents.length,\n        uptime,\n      },\n      metrics: {\n        totalAgents: mockAgents.length,\n        activeAgents: activeAgents.length,\n        tasksInProgress: mockTasks.filter((t) => t.status === 'in_progress').length,\n        tasksCompleted: mockTasks.filter((t) => t.status === 'completed').length,\n        totalTasks: mockTasks.length,\n        uptime,\n        performance: {\n          throughput: 1.5 + Math.random() * 2.0,\n          errorRate: Math.random() * 0.1,\n          avgLatency: 150 + Math.random() * 100,\n        },\n      },\n      agents: mockAgents,\n      tasks: mockTasks,\n      lastUpdated: new Date(),\n    };\n\n    setSwarmState(newState);\n  };\n\n  const loadRealSwarmData = async () => {\n    // Attempt to load real swarm data with fallback to mock data\n    try {\n      // Try to import and use real swarm coordination through public API\n      const { createPublicSwarmCoordinator } = await import('../../../coordination/public-api.ts');\n      const coordinator = await createPublicSwarmCoordinator();\n\n      if (coordinator) {\n        const status = coordinator.getStatus();\n        const activeAgents = coordinator.getActiveAgents();\n\n        setSwarmState({\n          status: {\n            status: status.state === 'active' ? 'active' : 'idle',\n            topology: 'mesh', // Default topology\n            totalAgents: status.agentCount,\n            activeAgents: activeAgents.length,\n            uptime: status.uptime,\n          },\n          metrics: {\n            totalAgents: status.agentCount,\n            activeAgents: activeAgents.length,\n            tasksInProgress: status.taskCount,\n            tasksCompleted: Math.floor(Math.random() * 50), // Mock data for now\n            totalTasks: status.taskCount + Math.floor(Math.random() * 50),\n            uptime: status.uptime,\n            performance: {\n              throughput: Math.random() * 100,\n              errorRate: Math.random() * 0.05,\n              avgLatency: 120 + Math.random() * 80,\n            },\n          },\n          agents: activeAgents.map((agentId, index) => ({\n            id: agentId,\n            role: 'worker' as const,\n            status: 'active' as const,\n            capabilities: ['general'],\n            lastActivity: new Date(),\n            metrics: {\n              tasksCompleted: Math.floor(Math.random() * 20),\n              averageResponseTime: 120 + Math.random() * 80,\n              errors: Math.floor(Math.random() * 3),\n              successRate: 0.9 + Math.random() * 0.1,\n              totalTasks: Math.floor(Math.random() * 25),\n            },\n            cognitivePattern: 'adaptive',\n            performanceScore: 0.8 + Math.random() * 0.2,\n          })),\n          tasks: [], // Mock empty tasks for now\n          lastUpdated: new Date(),\n        });\n\n        logger.info('Real swarm data loaded successfully');\n        return;\n      }\n    } catch (err) {\n      logger.warn('Real swarm service not available, using mock data:', err);\n      await loadMockSwarmData();\n    }\n  };\n\n  const startAgent = async (agentConfig: Partial<SwarmAgent>) => {\n    try {\n      logger.debug('Starting agent:', agentConfig);\n\n      // Attempt to start real agent with fallback to simulation\n      try {\n        // Try to use real swarm coordinator to start agent\n        const { createPublicSwarmCoordinator } = await import(\n          '../../../coordination/public-api.ts'\n        );\n        const coordinator = await createPublicSwarmCoordinator();\n\n        if (coordinator) {\n          // For now, we'll simulate starting an agent since the public API doesn't expose agent spawning\n          logger.info('Simulating agent start through coordinator');\n          await loadRealSwarmData(); // Refresh data\n          return;\n        }\n      } catch (err) {\n        logger.warn('Real agent starting not available, simulating:', err);\n      }\n\n      // Fallback: simulate by adding to mock data\n      const newAgent: SwarmAgent = {\n        id: agentConfig?.id || `agent-${Date.now()}`,\n        role: agentConfig?.role || 'worker',\n        status: 'active',\n        capabilities: agentConfig?.capabilities || ['general'],\n        lastActivity: new Date(),\n        metrics: {\n          tasksCompleted: 0,\n          averageResponseTime: 0,\n          errors: 0,\n          successRate: 1.0,\n          totalTasks: 0,\n        },\n        cognitivePattern: agentConfig?.cognitivePattern || 'adaptive',\n        performanceScore: 1.0,\n        ...agentConfig,\n      };\n\n      setSwarmState((prev) => ({\n        ...prev,\n        agents: [...prev.agents, newAgent],\n        status: {\n          ...prev.status,\n          totalAgents: prev.status.totalAgents + 1,\n          activeAgents: prev.status.activeAgents + 1,\n        },\n        metrics: {\n          ...prev.metrics,\n          totalAgents: prev.metrics.totalAgents + 1,\n          activeAgents: prev.metrics.activeAgents + 1,\n        },\n        lastUpdated: new Date(),\n      }));\n\n      logger.debug('Agent started successfully:', newAgent.id);\n    } catch (err) {\n      const error = err instanceof Error ? err : new Error('Failed to start agent');\n      logger.error('Failed to start agent:', error);\n      throw error;\n    }\n  };\n\n  const stopAgent = async (agentId: string) => {\n    try {\n      logger.debug('Stopping agent:', agentId);\n\n      setSwarmState((prev) => ({\n        ...prev,\n        agents: prev.agents.map((agent) =>\n          agent.id === agentId ? { ...agent, status: 'idle' as const } : agent\n        ),\n        status: {\n          ...prev.status,\n          activeAgents: Math.max(0, prev.status.activeAgents - 1),\n        },\n        metrics: {\n          ...prev.metrics,\n          activeAgents: Math.max(0, prev.metrics.activeAgents - 1),\n        },\n        lastUpdated: new Date(),\n      }));\n\n      logger.debug('Agent stopped successfully:', agentId);\n    } catch (err) {\n      const error = err instanceof Error ? err : new Error('Failed to stop agent');\n      logger.error('Failed to stop agent:', error);\n      throw error;\n    }\n  };\n\n  const createTask = async (taskConfig: Partial<SwarmTask>) => {\n    try {\n      logger.debug('Creating task:', taskConfig);\n\n      const newTask: SwarmTask = {\n        id: taskConfig?.id || `task-${Date.now()}`,\n        description: taskConfig?.description || 'New task',\n        status: taskConfig?.status || 'pending',\n        progress: taskConfig?.progress || 0,\n        assignedAgents: taskConfig?.assignedAgents || [],\n        priority: taskConfig?.priority || 'medium',\n        startTime: taskConfig?.status === 'in_progress' ? new Date() : undefined,\n        ...taskConfig,\n      };\n\n      setSwarmState((prev) => ({\n        ...prev,\n        tasks: [...prev.tasks, newTask],\n        metrics: {\n          ...prev.metrics,\n          totalTasks: prev.metrics.totalTasks + 1,\n          tasksInProgress:\n            newTask.status === 'in_progress'\n              ? prev.metrics.tasksInProgress + 1\n              : prev.metrics.tasksInProgress,\n        },\n        lastUpdated: new Date(),\n      }));\n\n      logger.debug('Task created successfully:', newTask.id);\n    } catch (err) {\n      const error = err instanceof Error ? err : new Error('Failed to create task');\n      logger.error('Failed to create task:', error);\n      throw error;\n    }\n  };\n\n  const updateTask = async (taskId: string, updates: Partial<SwarmTask>) => {\n    try {\n      logger.debug('Updating task:', { taskId, updates });\n\n      setSwarmState((prev) => {\n        const oldTask = prev.tasks.find((t) => t.id === taskId);\n        const newTasks = prev.tasks.map((task) =>\n          task.id === taskId ? { ...task, ...updates } : task\n        );\n\n        // Recalculate metrics if status changed\n        let metricsUpdate = {};\n        if (oldTask && updates.status && oldTask.status !== updates.status) {\n          const inProgressChange =\n            (updates.status === 'in_progress' ? 1 : 0) - (oldTask.status === 'in_progress' ? 1 : 0);\n          const completedChange =\n            (updates.status === 'completed' ? 1 : 0) - (oldTask.status === 'completed' ? 1 : 0);\n\n          metricsUpdate = {\n            tasksInProgress: prev.metrics.tasksInProgress + inProgressChange,\n            tasksCompleted: prev.metrics.tasksCompleted + completedChange,\n          };\n        }\n\n        return {\n          ...prev,\n          tasks: newTasks,\n          metrics: {\n            ...prev.metrics,\n            ...metricsUpdate,\n          },\n          lastUpdated: new Date(),\n        };\n      });\n\n      logger.debug('Task updated successfully:', taskId);\n    } catch (err) {\n      const error = err instanceof Error ? err : new Error('Failed to update task');\n      logger.error('Failed to update task:', error);\n      throw error;\n    }\n  };\n\n  return {\n    swarmState,\n    isLoading,\n    error: error || undefined,\n    refreshStatus,\n    startAgent,\n    stopAgent,\n    createTask,\n    updateTask,\n  };\n};\n\nexport default useSwarmStatus;\n", "/**\n * Mock Command Handler - Delegates to Command Execution Engine.\n *\n * Thin wrapper around CommandExecutionEngine for backward compatibility.\n * Renamed to reflect its mock/testing nature per Google standards.\n */\n/**\n * @file Interface implementation: mock-command-handler.\n */\n\nimport { getLogger } from '../../../config/logging-config.ts';\nimport { CommandExecutionEngine } from '../command-execution-engine.ts';\nimport { getVersion } from './version-utils';\n\nconst logger = getLogger('mock-command-handler');\n\nexport interface CommandResult {\n  success: boolean;\n  message?: string;\n  data?: any;\n  error?: string;\n  timestamp?: Date;\n}\n\nexport interface CommandContext {\n  args: string[];\n  flags: Record<string, any>;\n  cwd: string;\n  config?: any;\n}\n\n/**\n * Execute terminal commands with unified result handling.\n *\n * @example\n */\nexport class MockCommandHandler {\n  /**\n   * Execute init command.\n   *\n   * @param args\n   * @param flags\n   */\n  static async executeInit(args: string[], flags: Record<string, any>): Promise<CommandResult> {\n    try {\n      const projectName = args[0] || 'claude-zen-project';\n      const template = flags.template || 'basic';\n\n      logger.debug(`Initializing project: ${projectName} with template: ${template}`);\n\n      // For now, provide a mock implementation since CLI structure has changed\n      // TODO: Integrate with actual CLI commands when available\n      logger.info(`Mock: Initializing project ${projectName} with template ${template}`);\n\n      const result = {\n        projectName,\n        template,\n        location: './project-output',\n        files: ['package.json', 'README.md', 'src/index.ts'],\n      };\n\n      return {\n        success: true,\n        message: `Project \"${projectName}\" initialized successfully`,\n        data: result,\n      };\n    } catch (error) {\n      logger.error('Init command failed:', error);\n      return {\n        success: false,\n        error: error instanceof Error ? error.message : 'Init command failed',\n      };\n    }\n  }\n\n  /**\n   * Execute status command.\n   *\n   * @param _args\n   * @param flags\n   */\n  static async executeStatus(_args: string[], flags: Record<string, any>): Promise<CommandResult> {\n    try {\n      logger.debug('Getting system status');\n\n      // Get basic system status without complex dependencies\n      const interfaceStatus = {\n        active: false,\n        mode: 'none',\n      };\n\n      const status = {\n        version: getVersion(),\n        status: 'healthy',\n        uptime: process.uptime() * 1000,\n        components: {\n          mcp: { status: 'ready', port: 3000 },\n          swarm: { status: 'ready', agents: 0 },\n          memory: { status: 'ready', usage: process.memoryUsage() },\n          terminal: {\n            status: 'ready',\n            mode: interfaceStatus.mode || 'none',\n            active: interfaceStatus.active,\n          },\n        },\n        environment: {\n          node: process.version,\n          platform: process.platform,\n          arch: process.arch,\n          pid: process.pid,\n        },\n      };\n\n      if (flags.json) {\n        return {\n          success: true,\n          data: status,\n        };\n      }\n\n      return {\n        success: true,\n        message: 'System status retrieved successfully',\n        data: status,\n      };\n    } catch (error) {\n      logger.error('Status command failed:', error);\n      return {\n        success: false,\n        error: error instanceof Error ? error.message : 'Status command failed',\n      };\n    }\n  }\n\n  /**\n   * Execute swarm command.\n   *\n   * @param args\n   * @param flags\n   */\n  static async executeSwarm(args: string[], flags: Record<string, any>): Promise<CommandResult> {\n    try {\n      const action = args[0];\n\n      if (!action) {\n        return {\n          success: false,\n          error: 'Swarm action required. Use: start, stop, list, status',\n        };\n      }\n\n      logger.debug(`Executing swarm action: ${action}`);\n\n      switch (action) {\n        case 'start':\n          return {\n            success: true,\n            message: `Swarm started successfully with ${flags.agents || 4} agents`,\n            data: {\n              swarmId: `swarm-${Date.now()}`,\n              agents: flags.agents || 4,\n              topology: flags.topology || 'mesh',\n            },\n          };\n\n        case 'stop':\n          return {\n            success: true,\n            message: 'Swarm stopped successfully',\n          };\n\n        case 'list':\n          return {\n            success: true,\n            data: {\n              swarms: [\n                {\n                  id: 'swarm-1',\n                  name: 'Document Processing',\n                  status: 'active',\n                  agents: 4,\n                  topology: 'mesh',\n                  uptime: 3600000,\n                },\n                {\n                  id: 'swarm-2',\n                  name: 'Feature Development',\n                  status: 'inactive',\n                  agents: 0,\n                  topology: 'hierarchical',\n                  uptime: 0,\n                },\n              ],\n            },\n          };\n\n        case 'status':\n          return {\n            success: true,\n            data: {\n              totalSwarms: 2,\n              activeSwarms: 1,\n              totalAgents: 4,\n              activeAgents: 4,\n              averageUptime: 1800000,\n              systemLoad: 0.65,\n            },\n          };\n\n        default:\n          return {\n            success: false,\n            error: `Unknown swarm action: ${action}. Use: start, stop, list, status`,\n          };\n      }\n    } catch (error) {\n      logger.error('Swarm command failed:', error);\n      return {\n        success: false,\n        error: error instanceof Error ? error.message : 'Swarm command failed',\n      };\n    }\n  }\n\n  /**\n   * Execute MCP command.\n   *\n   * @param args\n   * @param flags\n   */\n  static async executeMCP(args: string[], flags: Record<string, any>): Promise<CommandResult> {\n    try {\n      const action = args[0];\n\n      if (!action) {\n        return {\n          success: false,\n          error: 'MCP action required. Use: start, stop, status',\n        };\n      }\n\n      logger.debug(`Executing MCP action: ${action}`);\n\n      switch (action) {\n        case 'start': {\n          const port = flags.port || 3000;\n          return {\n            success: true,\n            message: `MCP server started on port ${port}`,\n            data: {\n              port,\n              url: `http://localhost:${port}`,\n              protocol: flags.stdio ? 'stdio' : 'http',\n            },\n          };\n        }\n\n        case 'stop':\n          return {\n            success: true,\n            message: 'MCP server stopped successfully',\n          };\n\n        case 'status':\n          return {\n            success: true,\n            data: {\n              httpServer: {\n                status: 'running',\n                port: 3000,\n                uptime: process.uptime() * 1000,\n              },\n              swarmServer: {\n                status: 'running',\n                protocol: 'stdio',\n                connections: 0,\n              },\n            },\n          };\n\n        default:\n          return {\n            success: false,\n            error: `Unknown MCP action: ${action}. Use: start, stop, status`,\n          };\n      }\n    } catch (error) {\n      logger.error('MCP command failed:', error);\n      return {\n        success: false,\n        error: error instanceof Error ? error.message : 'MCP command failed',\n      };\n    }\n  }\n\n  /**\n   * Execute workspace command.\n   *\n   * @param args\n   * @param _flags\n   */\n  static async executeWorkspace(\n    args: string[],\n    _flags: Record<string, any>\n  ): Promise<CommandResult> {\n    try {\n      const action = args[0];\n\n      if (!action) {\n        return {\n          success: false,\n          error: 'Workspace action required. Use: init, process, status',\n        };\n      }\n\n      logger.debug(`Executing workspace action: ${action}`);\n\n      switch (action) {\n        case 'init': {\n          const projectName = args[1] || 'claude-zen-workspace';\n          return {\n            success: true,\n            message: `Document-driven workspace \"${projectName}\" initialized`,\n            data: {\n              projectName,\n              structure: [\n                'docs/01-vision/',\n                'docs/02-adrs/',\n                'docs/03-prds/',\n                'docs/04-epics/',\n                'docs/05-features/',\n                'docs/06-tasks/',\n                'src/',\n                'tests/',\n              ],\n            },\n          };\n        }\n\n        case 'process': {\n          const docPath = args[1];\n          if (!docPath) {\n            return {\n              success: false,\n              error: 'Document path required for processing',\n            };\n          }\n\n          return {\n            success: true,\n            message: `Document processed: ${docPath}`,\n            data: {\n              docPath,\n              generatedFiles: [\n                'docs/02-adrs/auth-architecture.md',\n                'docs/03-prds/user-management.md',\n                'docs/04-epics/authentication-system.md',\n              ],\n            },\n          };\n        }\n\n        case 'status':\n          return {\n            success: true,\n            data: {\n              documentsProcessed: 5,\n              tasksGenerated: 23,\n              implementationProgress: 0.65,\n              lastUpdate: new Date().toISOString(),\n            },\n          };\n\n        default:\n          return {\n            success: false,\n            error: `Unknown workspace action: ${action}. Use: init, process, status`,\n          };\n      }\n    } catch (error) {\n      logger.error('Workspace command failed:', error);\n      return {\n        success: false,\n        error: error instanceof Error ? error.message : 'Workspace command failed',\n      };\n    }\n  }\n\n  /**\n   * Execute any command - delegates to CommandExecutionEngine.\n   *\n   * @param command\n   * @param args\n   * @param flags\n   */\n  static async executeCommand(\n    command: string,\n    args: string[],\n    flags: Record<string, any>\n  ): Promise<CommandResult> {\n    logger.debug(`Delegating command execution to engine: ${command}`);\n\n    try {\n      // Delegate to the pure TypeScript engine\n      const result = await CommandExecutionEngine.executeCommand(command, args, flags, {\n        cwd: process.cwd(),\n      });\n\n      // Convert engine result to expected format\n      return {\n        success: result?.success,\n        message: result?.message,\n        data: result?.data,\n        error: result?.error,\n      };\n    } catch (error) {\n      logger.error(`Mock command handler failed for ${command}:`, error);\n      return {\n        success: false,\n        error: error instanceof Error ? error.message : 'Command execution failed',\n      };\n    }\n  }\n}\n", "/**\n * Unified Terminal Interface - Main Export.\n *\n * Consolidates command execution and interactive terminal functionality into a single interface.\n * This replaces the separate command execution and interactive terminal interface directories.\n */\n\n// Business logic (separated from UI)\n/**\n * @file Terminal module exports.\n */\n\nexport * from './command-execution-engine.ts';\nexport { CommandExecutionEngine } from './command-execution-engine.ts';\nexport * from './command-execution-renderer';\nexport { type CommandExecutionProps, CommandExecutionRenderer } from './command-execution-renderer';\n// Additional specific component exports to resolve conflicts\nexport type { SwarmStatus } from './components/header';\n// Components - specific exports to avoid conflicts\nexport {\n  type BaseComponentProps,\n  ComponentUtils,\n  defaultUnifiedTheme,\n  ErrorMessage,\n  type ErrorMessageProps,\n  Footer,\n  type FooterProps,\n  Header,\n  type HeaderProps,\n  ProgressBar,\n  type ProgressBarProps,\n  Spinner,\n  type SpinnerProps,\n  StatusBadge,\n  type StatusBadgeProps,\n  type Theme,\n} from './components/index.ts';\n\nexport * from './interactive-terminal-application';\nexport {\n  InteractiveTerminalApplication,\n  type TUIModeProps,\n} from './interactive-terminal-application';\n\n// Process orchestrator - specific export to avoid conflicts\nexport {\n  type ProcessResult,\n  type TerminalConfig,\n  TerminalManager,\n  type TerminalSession,\n} from './process-orchestrator.ts';\n\n// Screens - specific exports to avoid conflicts\nexport {\n  defaultScreenConfigs,\n  MainMenu,\n  type MainMenuProps,\n  type ScreenConfig,\n  type ScreenType,\n  ScreenUtils,\n  SwarmDashboard,\n  type SwarmDashboardProps,\n} from './screens/index.ts';\n\n// Additional screen type exports to resolve conflicts\nexport type { SwarmAgent, SwarmMetrics, SwarmTask } from './screens/swarm-dashboard';\n// State Hooks (React hooks for component state management) - avoid conflicts\n// Note: Re-exporting from state-hooks causes conflicts, import directly when needed\n// Specific exports to avoid conflicts:\nexport { type UseConfigReturn, useConfig } from './state-hooks/use-config.ts';\nexport {\n  type SwarmState,\n  type UseSwarmStatusReturn,\n  useSwarmStatus,\n} from './state-hooks/use-swarm-status.ts';\n\n// Main components (updated for Google standards)\nexport * from './terminal-interface-router';\n// Re-export key items for convenience (updated names)\nexport { TerminalApp, type TerminalAppProps } from './terminal-interface-router';\nexport * from './utils/mock-command-handler.ts';\n\nexport {\n  type CommandContext,\n  type CommandResult,\n  MockCommandHandler,\n} from './utils/mock-command-handler.ts';\n// Utilities (updated for Google standards)\nexport * from './utils/mode-detector.ts';\nexport {\n  detectMode,\n  detectModeWithReason,\n  getEnvironmentInfo,\n  isCommandExecutionSupported,\n  isInteractiveSupported,\n  type ModeDetectionResult,\n  type TerminalMode,\n} from './utils/mode-detector.ts';\n\n// Terminal interface configuration\nexport interface TerminalInterfaceConfig {\n  mode?: 'auto' | 'command' | 'interactive';\n  theme?: 'dark' | 'light';\n  verbose?: boolean;\n  debug?: boolean;\n  autoRefresh?: boolean;\n  refreshInterval?: number;\n}\n\n// Terminal interface class for external integration\nexport class TerminalInterface {\n  private config: TerminalInterfaceConfig;\n\n  constructor(config: TerminalInterfaceConfig = {}) {\n    this.config = {\n      mode: 'auto',\n      theme: 'dark',\n      verbose: false,\n      autoRefresh: true,\n      refreshInterval: 3000,\n      ...config,\n    };\n  }\n\n  /**\n   * Initialize the terminal interface.\n   */\n  async initialize(): Promise<void> {\n    // Initialization logic if needed\n  }\n\n  /**\n   * Render the terminal interface.\n   */\n  async render(): Promise<void> {\n    const { render } = await import('ink');\n    const React = await import('react');\n    const { TerminalApp } = await import('./terminal-interface-router');\n\n    // Determine mode\n    const _mode =\n      this.config.mode === 'auto'\n        ? detectMode(process.argv.slice(2), {})\n        : (this.config.mode as TerminalMode);\n\n    const commands = process.argv.slice(2).filter((arg) => !arg.startsWith('-'));\n    const flags = this.parseFlags(process.argv.slice(2));\n    if (this.config.debug) {\n      console.log('Debug mode enabled', { mode: _mode, commands, flags });\n    }\n\n    // Render the appropriate interface\n    const { unmount } = render(\n      React.createElement(TerminalApp, {\n        commands,\n        flags: { ...flags, ...this.config },\n        onExit: (code: number) => process.exit(code),\n      })\n    );\n\n    // Setup graceful shutdown\n    const shutdown = () => {\n      unmount();\n      process.exit(0);\n    };\n\n    process.on('SIGINT', shutdown);\n    process.on('SIGTERM', shutdown);\n  }\n\n  /**\n   * Parse command line flags.\n   *\n   * @param args\n   */\n  private parseFlags(args: string[]): Record<string, any> {\n    const flags: Record<string, any> = {};\n\n    for (let i = 0; i < args.length; i++) {\n      const arg = args[i];\n\n      if (arg && arg.startsWith('--')) {\n        const key = arg.slice(2);\n        const nextArg = args[i + 1];\n\n        if (nextArg && !nextArg.startsWith('-')) {\n          flags[key] = nextArg;\n          i++; // Skip next arg\n        } else {\n          flags[key] = true;\n        }\n      } else if (arg && arg.startsWith('-')) {\n        const key = arg.slice(1);\n        flags[key] = true;\n      }\n    }\n\n    return flags;\n  }\n\n  /**\n   * Get current configuration.\n   */\n  getConfig(): TerminalInterfaceConfig {\n    return { ...this.config };\n  }\n\n  /**\n   * Update configuration.\n   *\n   * @param updates\n   */\n  updateConfig(updates: Partial<TerminalInterfaceConfig>): void {\n    this.config = { ...this.config, ...updates };\n  }\n}\n\n// Convenience functions for direct usage\nexport const createTerminalInterface = (config?: TerminalInterfaceConfig) => {\n  return new TerminalInterface(config);\n};\n\nexport const launchTerminalInterface = async (config?: TerminalInterfaceConfig) => {\n  const terminal = new TerminalInterface(config);\n  await terminal.initialize();\n  await terminal.render();\n};\n\n// Version info\nexport const TERMINAL_INTERFACE_VERSION = '1.0.0';\n\n// Export default for convenience\nexport default TerminalInterface;\n"],
  "mappings": "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",
  "names": ["logger", "process", "error", "import_react", "logger", "error", "logger", "TerminalApp"]
}
