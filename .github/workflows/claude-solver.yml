---
name: "Claude Solver"

on:
  issues:
    types: [opened, labeled]
  issue_comment:
    types: [created]
  workflow_dispatch:
    inputs:
      issue_number:
        description: 'Issue number to solve'
        required: false
        type: string

jobs:
  auto-solve-issue:
    # Auto-trigger on issues with 'claude-solve' label or '@claude solve' comment
    if: |
      (github.event_name == 'issues' && contains(github.event.issue.labels.*.name, 'claude-solve')) ||
      (github.event_name == 'issue_comment' && contains(github.event.comment.body, '@claude solve')) ||
      (github.event_name == 'workflow_dispatch')
    runs-on: ubuntu-latest
    timeout-minutes: 45

    permissions:
      contents: write
      issues: write
      pull-requests: write
      id-token: write

    steps:
      - name: Auto-assign Issue to Claude
        uses: actions/github-script@v7
        with:
          script: |
            const issueNumber = context.issue?.number || 
                               (context.payload.comment?.issue?.number) ||
                               '${{ github.event.inputs.issue_number }}';
            
            if (!issueNumber) {
              core.setFailed('No issue number found');
              return;
            }
            
            // Auto-assign to claude[bot] if not already assigned
            const { data: issue } = await github.rest.issues.get({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: parseInt(issueNumber)
            });
            
            if (issue.assignees.length === 0) {
              await github.rest.issues.addAssignees({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: parseInt(issueNumber),
                assignees: ['claude[bot]']
              });
            }
            
            // Comment that Claude is starting work
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: parseInt(issueNumber),
              body: `🤖 **Claude Auto-Solver Activated**\n\nI've been assigned to automatically solve this issue. Starting analysis and resolution...`
            });
            
            core.setOutput('issue_number', issueNumber);
            core.setOutput('issue_title', issue.title);
            core.setOutput('issue_body', issue.body);

      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.CLAUDE_CODE_OAUTH_TOKEN || secrets.GITHUB_TOKEN }}
          fetch-depth: 0

      - name: Analyze Issue Context
        id: analyze
        run: |
          ISSUE_NUMBER="${{ steps.auto-assign.outputs.issue_number }}"
          ISSUE_TITLE="${{ steps.auto-assign.outputs.issue_title }}"
          ISSUE_BODY="${{ steps.auto-assign.outputs.issue_body }}"
          
          echo "🔍 CLAUDE AUTO-SOLVER ACTIVATED"
          echo "Issue #$ISSUE_NUMBER: $ISSUE_TITLE"
          echo "Repository: ${{ github.repository }}"
          echo ""
          
          # Determine solution strategy based on issue content
          if echo "$ISSUE_TITLE $ISSUE_BODY" | grep -qi "typescript\|import\|build"; then
            echo "STRATEGY=typescript-integration" >> $GITHUB_ENV
          elif echo "$ISSUE_TITLE $ISSUE_BODY" | grep -qi "database\|sql\|adapter"; then
            echo "STRATEGY=database-integration" >> $GITHUB_ENV
          elif echo "$ISSUE_TITLE $ISSUE_BODY" | grep -qi "neural\|ai\|wasm"; then
            echo "STRATEGY=neural-integration" >> $GITHUB_ENV
          elif echo "$ISSUE_TITLE $ISSUE_BODY" | grep -qi "api\|rest\|endpoint"; then
            echo "STRATEGY=api-development" >> $GITHUB_ENV
          else
            echo "STRATEGY=general-fix" >> $GITHUB_ENV
          fi
          
          echo "Selected strategy: $STRATEGY"

      - name: Claude Code Issue Resolution
        uses: anthropics/claude-code-action@beta
        with:
          claude_code_oauth_token: ${{ secrets.CLAUDE_CODE_OAUTH_TOKEN }}
          mode: "agent"
          direct_prompt: |
            🤖 CLAUDE AUTO-SOLVER - DYNAMIC ISSUE RESOLUTION
            
            ## ISSUE CONTEXT
            **Issue #${{ steps.auto-assign.outputs.issue_number }}**: ${{ steps.auto-assign.outputs.issue_title }}
            **Strategy**: ${{ env.STRATEGY }}
            **Repository**: ${{ github.repository }}
            
            ## ISSUE DESCRIPTION
            ${{ steps.auto-assign.outputs.issue_body }}
            
            ## MISSION
            You are Claude Auto-Solver. Your mission is to automatically analyze and resolve this issue with minimal human intervention.
            
            ## RESOLUTION STRATEGY: ${{ env.STRATEGY }}
            
            ### If TypeScript Integration:
            - Fix import path issues and TypeScript compilation errors
            - Update path mappings in tsconfig.json
            - Resolve union type property access issues
            - Fix interface contract mismatches
            
            ### If Database Integration:
            - Standardize database adapter interfaces
            - Fix connection and query issues
            - Implement proper error handling
            - Update database provider configurations
            
            ### If Neural Integration:
            - Fix WASM binding issues
            - Resolve neural network model problems
            - Update training and inference pipelines
            - Fix memory management issues
            
            ### If API Development:
            - Implement missing REST endpoints
            - Fix API controller issues
            - Add proper request/response validation
            - Update API documentation
            
            ### If General Fix:
            - Analyze the issue description for specific problems
            - Apply appropriate code fixes
            - Run tests to verify resolution
            - Update documentation if needed
            
            ## EXECUTION REQUIREMENTS
            1. **Analyze the codebase** to understand the specific problem
            2. **Implement targeted fixes** based on the issue description
            3. **Test your changes** to ensure they work
            4. **Create a focused commit** that resolves the issue
            5. **Comment on the issue** with what was fixed
            
            ## SUCCESS CRITERIA
            - Issue is completely resolved with working code
            - All related tests pass
            - Code follows project conventions
            - Changes are minimal and focused
            - Issue can be automatically closed
            
            ## PROJECT CONTEXT
            - Claude-zen: AI development coordination system  
            - TypeScript codebase with domain-driven architecture
            - Located in src/ with domains: core, database, memory, neural, etc.
            - Uses modern tooling: ESLint, Prettier, Jest
            - MCP integration and Claude Code coordination
            
            ANALYZE THE ISSUE. IMPLEMENT THE FIX. VERIFY IT WORKS. COMMIT AND RESOLVE.
            
            🎯 BEGIN AUTONOMOUS ISSUE RESOLUTION NOW.