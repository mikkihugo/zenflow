name: "Claude Autonomous Agent"

on:
  issues:
    types: [opened, labeled]
  issue_comment:
    types: [created, edited]
  workflow_dispatch:
    inputs:
      issue_number:
        description: 'Issue number to process'
        required: true
        default: '147'

jobs:
  claude-solver:
    runs-on: ubuntu-latest
    timeout-minutes: 45
    if: |
      github.event_name == 'workflow_dispatch' ||
      (github.event_name == 'issue_comment' && contains(github.event.comment.body, '@claude')) ||
      (github.event_name == 'issues' && github.event.action == 'opened') ||
      (github.event_name == 'issues' && github.event.action == 'labeled' && github.event.label.name == 'claude-code')
    
    permissions:
      contents: write
      issues: write
      pull-requests: write
      actions: read
      metadata: read
      statuses: write
      checks: write

    steps:
      - name: Debug Event
        run: |
          echo "ðŸš€ CLAUDE CODE CLI AGENT ACTIVATED"
          echo "Event: ${{ github.event_name }}"
          echo "Comment: ${{ github.event.comment.body || 'N/A' }}"
          echo "Contains @claude: ${{ contains(github.event.comment.body, '@claude') }}"
          echo "Issue: ${{ github.event.issue.number || github.event.inputs.issue_number }}"

      - name: Get Issue Context
        id: issue-context
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            let issueNumber, issueTitle, issueBody, commentBody = '';
            
            if (context.eventName === 'workflow_dispatch') {
              issueNumber = context.payload.inputs.issue_number;
            } else if (context.eventName === 'issue_comment') {
              issueNumber = context.payload.issue.number;
              commentBody = context.payload.comment.body;
            } else if (context.eventName === 'issues') {
              issueNumber = context.payload.issue.number;
            }
            
            try {
              const { data: issue } = await github.rest.issues.get({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: issueNumber
              });
              
              issueTitle = issue.title;
              issueBody = issue.body || '';
              
            } catch (error) {
              console.log(`Error fetching issue: ${error.message}`);
              issueTitle = 'Unknown Issue';
              issueBody = 'Could not fetch issue details';
            }

            core.setOutput('issue_number', issueNumber);
            core.setOutput('issue_title', issueTitle);
            core.setOutput('issue_body', issueBody);
            core.setOutput('comment_body', commentBody);

      - name: Claude Code Agent
        uses: anthropics/claude-code-action@beta
        with:
          claude_code_oauth_token: ${{ secrets.CLAUDE_CODE_OAUTH_TOKEN }}
          github_token: ${{ secrets.GITHUB_TOKEN }}
          direct_prompt: |
            ðŸš€ CLAUDE CODE CLI AGENT - Autonomous Issue Resolution
            
            **Issue #${{ steps.issue-context.outputs.issue_number }}**
            
            **Title:** ${{ steps.issue-context.outputs.issue_title }}
            
            **Description:**
            ${{ steps.issue-context.outputs.issue_body }}
            
            ${{ steps.issue-context.outputs.comment_body && format('**Comment:** {0}', steps.issue-context.outputs.comment_body) || '' }}
            
            ## Mission
            You are Claude Code CLI Agent - an autonomous development system.
            
            1. **ANALYZE** - Understand the requirements 
            2. **PLAN** - Create implementation strategy  
            3. **IMPLEMENT** - Write working, tested code
            4. **VALIDATE** - Ensure solution works with tests
            5. **DELIVER** - Commit changes and create pull request
            
            ## Guidelines
            - Follow claude-zen project structure and conventions
            - Write comprehensive tests (hybrid TDD approach)
            - Focus on working, production-ready code
            - Create meaningful commit messages and PR descriptions
            
            Execute autonomously. Deliver excellence.