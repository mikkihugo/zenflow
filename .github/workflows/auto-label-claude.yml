name: Auto-Label Issues & PRs
# Automatically labels new issues and PRs for Claude Code processing

on:
  issues:
    types: [opened]
  pull_request:
    types: [opened, reopened, synchronize]

permissions:
  contents: read
  issues: write
  pull-requests: write

jobs:
  auto-label-claude:
    name: Auto-Label All Issues and PRs for Claude Code
    runs-on: ubuntu-latest
    
    steps:
      - name: Add claude-code label to all issues and PRs
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            let itemNumber;
            let itemType;
            
            // Determine if this is an issue or PR
            if (context.payload.issue) {
              itemNumber = context.payload.issue.number;
              itemType = 'issue';
            } else if (context.payload.pull_request) {
              itemNumber = context.payload.pull_request.number;
              itemType = 'pull request';
            } else {
              console.log('‚ùå Could not determine item type');
              return;
            }
            
            console.log(`üè∑Ô∏è Auto-labeling ${itemType} #${itemNumber} for Claude Code processing`);
            
            try {
              // Add the claude-code label
              await github.rest.issues.addLabels({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: itemNumber,
                labels: ['claude-code']
              });
              
              console.log(`‚úÖ Successfully added 'claude-code' label to ${itemType} #${itemNumber}`);
              
              // Add additional helpful labels based on type
              const additionalLabels = [];
              
              if (context.payload.pull_request) {
                // PR-specific labels
                if (context.actor === 'dependabot[bot]') {
                  additionalLabels.push('dependabot', 'security-update', 'auto-merge');
                  console.log('ü§ñ Dependabot PR detected - adding security labels');
                } else {
                  additionalLabels.push('enhancement');
                  console.log('üë§ Regular PR detected - adding enhancement label');
                }
              } else {
                // Issue-specific labels
                additionalLabels.push('bug', 'enhancement');
                console.log('üêõ Issue detected - adding bug/enhancement labels');
              }
              
              if (additionalLabels.length > 0) {
                await github.rest.issues.addLabels({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: itemNumber,
                  labels: additionalLabels
                });
                
                console.log(`‚úÖ Added additional labels: ${additionalLabels.join(', ')}`);
              }
              
              // Comment on the item to explain auto-labeling
              const isAuthorized = context.payload.issue?.user?.login === 'mikkihugo' || 
                                  context.payload.pull_request?.user?.login === 'mikkihugo' ||
                                  context.actor === 'dependabot[bot]';
              
              if (isAuthorized) {
                const commentBody = `ü§ñ **AUTO-LABELED FOR CLAUDE CODE PROCESSING**
                
                ‚úÖ **AUTHORIZED ${itemType.toUpperCase()} - CLAUDE CODE WILL PROCESS AUTOMATICALLY**
                
                **Auto-Labels Applied:**
                - \`claude-code\` - Triggers automatic Claude Code processing
                ${additionalLabels.map(label => `- \`${label}\` - Additional context for processing`).join('\n')}
                
                **What Happens Next:**
                1. üîÑ Claude Code analyzes the ${itemType} automatically
                2. üß† Implements comprehensive solution with testing
                3. üöÄ ${itemType === 'issue' ? 'Creates PR with fixes' : 'Reviews and processes changes'}
                4. ‚úÖ ${itemType === 'issue' ? 'Auto-merges when CI passes' : 'Auto-merges after review'}
                5. üéØ ${itemType === 'issue' ? 'Closes issue automatically' : 'Completes PR processing'}
                
                **Expected Resolution Time**: 2-5 minutes
                
                ${context.actor === 'dependabot[bot]' ? 
                  'üîí **SECURITY UPDATE**: This Dependabot PR will be force-merged for immediate security patching' :
                  'üë§ **STANDARD PROCESSING**: Full Claude Code analysis and implementation'
                }
                
                üéâ **No manual intervention required - Claude Code handles everything!**`;
                
                await github.rest.issues.createComment({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: itemNumber,
                  body: commentBody
                });
                
                console.log(`‚úÖ Added explanatory comment to ${itemType} #${itemNumber}`);
              } else {
                console.log(`‚ö†Ô∏è Unauthorized ${itemType} - Claude Code will not process automatically`);
              }
              
            } catch (error) {
              console.log(`‚ùå Failed to label ${itemType} #${itemNumber}: ${error.message}`);
            }

      - name: Trigger immediate processing for Dependabot PRs
        if: github.actor == 'dependabot[bot]' && github.event.pull_request
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const pr = context.payload.pull_request;
            
            console.log(`üöÄ Triggering immediate processing for Dependabot PR #${pr.number}`);
            
            // Wait a moment for labels to be applied
            await new Promise(resolve => setTimeout(resolve, 3000));
            
            // Trigger repository dispatch to wake up other workflows
            try {
              await github.rest.repos.createDispatchEvent({
                owner: context.repo.owner,
                repo: context.repo.repo,
                event_type: 'dependabot-pr-ready',
                client_payload: {
                  pr_number: pr.number,
                  pr_title: pr.title,
                  action: 'force-merge'
                }
              });
              
              console.log(`‚úÖ Triggered immediate processing for Dependabot PR #${pr.number}`);
            } catch (error) {
              console.log(`‚ö†Ô∏è Could not trigger dispatch: ${error.message}`);
            }