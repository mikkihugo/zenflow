# .github/workflows/copilot-setup-steps.yml
# This workflow configures the isolated development environment used by the GitHub Copilot coding agent.
# The agent is hardcoded to look for this specific file path and the job ID 'copilot-setup-steps'.
# Adherence to this naming convention is mandatory for the custom setup to be recognized. [1, 2]

name: "Copilot Setup Steps"

on:
  # This workflow is triggered on-demand by the Copilot coding agent.
  # The 'workflow_dispatch' trigger also allows for manual runs from the GitHub Actions tab for testing and validation. [2]
  workflow_dispatch:

jobs:
  # The job ID must be 'copilot-setup-steps' for the agent to execute it.
  copilot-setup-steps:
    # Use the latest stable Ubuntu runner, which provides a consistent and well-supported environment. [3]
    runs-on: ubuntu-latest

    # It is critical to set 'continue-on-error' to true. If a setup step fails (e.g., a package registry is temporarily unavailable),
    # this ensures the workflow completes. The agent can then log the setup failure and attempt to proceed,
    # rather than crashing the entire session. This provides valuable debugging information. [1, 4]
    continue-on-error: true

    # Define the permissions for the GITHUB_TOKEN. Adhering to the principle of least privilege,
    # this configuration grants only the 'read' access necessary for checking out the repository code. [5, 6]
    permissions:
      contents: read

    steps:
      # Step 1: Checkout Repository Code
      # This step checks out the repository's code so that subsequent steps can access project files
      # like package.json, Cargo.toml, and requirements.txt.
      # Using v4 is crucial as it runs on a supported Node.js 20 runtime, avoiding deprecation warnings. [7]
      - name: Checkout Repository
        uses: actions/checkout@v4

      # Step 2: Setup Node.js v22 Environment
      # Configures the Node.js environment using the official GitHub Action.
      - name: Setup Node.js v22
        uses: actions/setup-node@v4
        with:
          # Specify '22.x' to automatically use the latest available patch release for Node.js v22.
          # This ensures access to the latest security fixes and improvements without manual updates. [8, 9]
          node-version: '22.x'
          # Enable built-in caching for npm. This significantly speeds up subsequent runs by caching dependencies.
          # The cache key is generated from the hash of the 'package-lock.json' file. [6, 10]
          cache: 'npm'

      # Step 3: Install Node.js Dependencies
      # Use 'npm ci' instead of 'npm install'. 'npm ci' provides faster, more reliable, and deterministic builds
      # by installing dependencies directly from the 'package-lock.json' file, which is ideal for CI environments. [10]
      - name: Install Node.js Dependencies
        run: npm ci

      # Step 4: Setup Rust Stable Toolchain
      # Configures the Rust environment using a modern, well-maintained action.
      - name: Setup Rust Stable Toolchain
        uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          # Explicitly set the toolchain to 'stable' to use the latest stable release of Rust.
          # While this is the default, being explicit improves clarity. [11]
          toolchain: stable
          # Install standard development components alongside the compiler. 'rustfmt' for formatting and 'clippy' for linting
          # are essential tools for maintaining code quality. [11, 12]
          components: rustfmt, clippy
          # The 'cache' input is enabled by default and is a key feature. It intelligently caches the Cargo registry,
          # git dependencies, and compiled dependency artifacts to dramatically reduce build times. [11]
          cache: true

      # Step 5: Setup Python Latest Stable Environment
      # Configures the Python environment using the official GitHub Action.
      - name: Setup Python 3.13
        uses: actions/setup-python@v5
        with:
          # Specify '3.13' to use the latest stable patch release of Python 3.13. The action resolves this
          # to the most recent version available (e.g., 3.13.5). [13, 14]
          python-version: '3.13'
          # Enable built-in caching for pip.
          cache: 'pip'
          # Specify the file(s) that determine the cache's validity. Hashing 'requirements.txt' ensures the cache
          # is invalidated only when dependencies change. [15, 16]
          cache-dependency-path: 'requirements.txt'

      # Step 6: Install Python Dependencies
      # Install Python packages from the specified requirements file. For caching to be effective,
      # it is a best practice for 'requirements.txt' to contain pinned package versions. [5]
      - name: Install Python Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt