# .github/workflows/copilot-setup-steps.yml
# This workflow configures the isolated development environment used by the GitHub Copilot coding agent.
# The agent is hardcoded to look for this specific file path and the job ID 'copilot-setup-steps'.
# Adherence to this naming convention is mandatory for the custom setup to be recognized. [1, 2]

name: "Copilot Setup Steps"

on:
  # This workflow is triggered on-demand by the Copilot coding agent.
  # The 'workflow_dispatch' trigger also allows for manual runs from the GitHub Actions tab for testing and validation. [2]
  workflow_dispatch:

jobs:
  # The job ID must be 'copilot-setup-steps' for the agent to execute it.
  copilot-setup-steps:
    # Use the latest stable Ubuntu runner, which provides a consistent and well-supported environment. [3]
    runs-on: ubuntu-latest

    # It is critical to set 'continue-on-error' to true. If a setup step fails (e.g., a package registry is temporarily unavailable),
    # this ensures the workflow completes. The agent can then log the setup failure and attempt to proceed,
    # rather than crashing the entire session. This provides valuable debugging information. [1, 4]
    continue-on-error: true

    # Define the permissions for the GITHUB_TOKEN. Adhering to the principle of least privilege,
    # this configuration grants only the 'read' access necessary for checking out the repository code. [5, 6]
    permissions:
      contents: read


    steps:
      # Step 1: Checkout Repository Code
      - name: Checkout Repository
        uses: actions/checkout@v4

      # Step 2: Setup PNPM (must come before Node.js cache setup)
      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 10.15.0
          run_install: false

      # Step 3: Setup Node.js v22 Environment (after pnpm is available)
      - name: Setup Node.js v22
        uses: actions/setup-node@v4
        with:
          node-version: '22.x'
          cache: 'pnpm'
          cache-dependency-path: pnpm-lock.yaml

      # Step 4: Fallback: ensure pnpm via Corepack in case PATH is reset by subsequent steps
      - name: Ensure pnpm via Corepack (fallback)
        run: |
          node -v
          corepack enable
          corepack prepare pnpm@10.15.0 --activate

      # Step 5: Verify pnpm version
      - name: Verify pnpm version
        run: pnpm -v

      # Step 6: Show pnpm store path
      - name: Show pnpm store path
        run: pnpm store path

      # Step 7: Install Node.js Dependencies
      - name: Install Node.js Dependencies
        run: |
          # Explicitly disable frozen lockfile to handle any lockfile inconsistencies
          pnpm install --no-frozen-lockfile

      # Step 8: Setup Rust Stable Toolchain
      - name: Setup Rust Stable Toolchain
        uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          toolchain: stable
          components: rustfmt, clippy
          cache: true

      # Step 9: Install Node.js Dependencies again (after Rust setup, if needed)
      - name: Install Node.js Dependencies (post Rust setup)
        run: |
          # Second install after Rust setup, also with no frozen lockfile
          pnpm install --no-frozen-lockfile



