name: üîß Claude Surgical Lint

on:
  push:
    branches: [main, develop]
    paths:
      - '**/*.ts'
      - '**/*.tsx'
      - '**/*.js'
      - '**/*.jsx'
  pull_request:
    branches: [main]
    paths:
      - '**/*.ts'
      - '**/*.tsx'
      - '**/*.js'
      - '**/*.jsx'

concurrency:
  group: claude-lint-${{ github.ref }}
  cancel-in-progress: true

jobs:
  claude-surgical-lint:
    runs-on: ubuntu-latest
    if: github.actor != 'claude-lint-bot[bot]'
    
    permissions:
      contents: write
      pull-requests: write
      checks: write

    steps:
      - name: üì• Checkout Repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0

      - name: üîß Setup Node.js & pnpm
        uses: actions/setup-node@v4
        with:
          node-version: '22'
          cache: 'npm'

      - name: üì¶ Install pnpm
        run: npm install -g pnpm@10.15.1

      - name: üìö Install Dependencies
        run: pnpm install --frozen-lockfile

      - name: üîç Run Initial Lint Check
        id: lint-check
        run: |
          echo "üîç Checking for linting issues..."
          ERROR_COUNT=$(pnpm lint 2>&1 | grep -E "error" | wc -l || echo "0")
          echo "error-count=$ERROR_COUNT" >> $GITHUB_OUTPUT
          echo "Found $ERROR_COUNT linting errors"

      - name: ü§ñ Setup Claude CLI
        if: steps.lint-check.outputs.error-count != '0'
        env:
          ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY }}
        run: |
          echo "ü§ñ Setting up Claude CLI..."
          # Install Claude CLI
          curl -fsSL https://claude.ai/install.sh | bash
          
          # If no API key in secrets, try OAuth login
          if [ -z "$ANTHROPIC_API_KEY" ]; then
            echo "üîê No API key found in secrets, attempting OAuth..."
            # Force OAuth by unsetting any existing API key
            export ANTHROPIC_API_KEY=""
            claude login --non-interactive || echo "OAuth login failed, will try with limited access"
          else
            echo "üîê Using API key from GitHub secrets"
          fi

      - name: üîß Claude Surgical Linting
        if: steps.lint-check.outputs.error-count != '0'
        run: |
          echo "üîß Running Claude surgical linting..."
          
          # Create surgical linting prompt
          cat > /tmp/claude-surgical-prompt.txt << 'EOF'
          You are a surgical code linter. Your task is to fix ONLY linting errors while preserving ALL functionality.

          SURGICAL REQUIREMENTS:
          1. Fix ONLY syntax errors, missing semicolons, unused variables, type issues
          2. NEVER change business logic or functionality
          3. NEVER remove error handling
          4. NEVER change return types without updating callers
          5. Use Edit tool for line-by-line changes only
          6. Preserve all existing behavior

          FORBIDDEN:
          - Bulk file replacements
          - Removing error handling
          - Changing API contracts
          - Modifying functionality

          Process: Run `pnpm lint` first, then fix errors surgically using Edit tool.
          EOF

          # Run Claude with surgical linting
          timeout 600 claude --system-prompt-file /tmp/claude-surgical-prompt.txt \
            --prompt "Fix linting errors surgically. Run pnpm lint first to see errors, then fix them one by one preserving all functionality." \
            --max-turns 5 \
            || echo "Claude linting completed (may have timed out)"

      - name: üîç Verify Fixes
        if: steps.lint-check.outputs.error-count != '0'
        run: |
          echo "üîç Verifying surgical fixes..."
          NEW_ERROR_COUNT=$(pnpm lint 2>&1 | grep -E "error" | wc -l || echo "0")
          echo "Errors before: ${{ steps.lint-check.outputs.error-count }}"
          echo "Errors after: $NEW_ERROR_COUNT"
          
          if [ "$NEW_ERROR_COUNT" -lt "${{ steps.lint-check.outputs.error-count }}" ]; then
            echo "‚úÖ Surgical fixes successful! Errors reduced."
          else
            echo "‚ö†Ô∏è No errors reduced, but functionality preserved"
          fi

      - name: üß™ Run Tests (Smoke Test)
        if: steps.lint-check.outputs.error-count != '0'
        run: |
          echo "üß™ Running smoke tests to verify functionality..."
          # Run type checking to ensure no breaking changes
          pnpm type-check || echo "Type check failed - functionality may be impacted"
          
          # Test web dashboard can start (quick test)
          timeout 30 pnpm --filter @claude-zen/web-dashboard build || echo "Dashboard build test failed"

      - name: üìù Commit Surgical Fixes
        if: steps.lint-check.outputs.error-count != '0'
        run: |
          echo "üìù Committing surgical fixes..."
          
          # Configure git
          git config --local user.email "claude-lint-bot@anthropic.com"
          git config --local user.name "Claude Lint Bot"
          
          # Check if there are changes to commit
          if git diff --quiet && git diff --staged --quiet; then
            echo "No changes to commit"
            exit 0
          fi
          
          # Add all changes
          git add .
          
          # Create commit message with details
          FINAL_ERROR_COUNT=$(pnpm lint 2>&1 | grep -E "error" | wc -l || echo "0")
          
          git commit -m "üîß Surgical lint fixes via Claude

          - Initial errors: ${{ steps.lint-check.outputs.error-count }}
          - Final errors: ${FINAL_ERROR_COUNT}
          - Changes: Surgical syntax/style fixes only
          - Functionality: Preserved (no business logic changes)

          ü§ñ Generated with Claude Code surgical linting
          
          Co-Authored-By: Claude <noreply@anthropic.com>" || exit 0

      - name: üöÄ Push Changes
        if: steps.lint-check.outputs.error-count != '0'
        run: |
          echo "üöÄ Pushing surgical fixes..."
          git push || echo "Push failed - may be merge conflicts"

      - name: üìä Update PR Status
        if: github.event_name == 'pull_request' && steps.lint-check.outputs.error-count != '0'
        uses: actions/github-script@v7
        with:
          script: |
            const initialErrors = ${{ steps.lint-check.outputs.error-count }};
            const finalErrors = await exec.getExecOutput('sh', ['-c', 'pnpm lint 2>&1 | grep -E "error" | wc -l || echo "0"']);
            const finalCount = parseInt(finalErrors.stdout.trim());
            
            const message = `## üîß Claude Surgical Lint Results
            
            - **Initial errors:** ${initialErrors}
            - **Final errors:** ${finalCount}
            - **Errors fixed:** ${initialErrors - finalCount}
            - **Changes:** Surgical syntax/style fixes only
            - **Functionality:** ‚úÖ Preserved (no business logic modified)
            
            ${finalCount === 0 ? 'üéâ All linting errors resolved!' : '‚ö†Ô∏è Some errors remain - may need manual review'}
            
            ü§ñ *Automated surgical linting via Claude Code*`;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: message
            });

      - name: ‚úÖ Lint Status Summary
        run: |
          FINAL_ERROR_COUNT=$(pnpm lint 2>&1 | grep -E "error" | wc -l || echo "0")
          echo "## üîß Claude Surgical Lint Summary"
          echo "- Initial errors: ${{ steps.lint-check.outputs.error-count }}"
          echo "- Final errors: $FINAL_ERROR_COUNT"
          
          if [ "$FINAL_ERROR_COUNT" = "0" ]; then
            echo "‚úÖ All linting errors resolved surgically!"
            exit 0
          elif [ "$FINAL_ERROR_COUNT" -lt "${{ steps.lint-check.outputs.error-count }}" ]; then
            echo "‚úÖ Partial success: $((${{ steps.lint-check.outputs.error-count }} - $FINAL_ERROR_COUNT)) errors fixed surgically"
            exit 0
          else
            echo "‚ö†Ô∏è No errors reduced - functionality preserved but manual review may be needed"
            exit 1
          fi