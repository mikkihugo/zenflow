name: üîß Claude Surgical Lint

on:
  pull_request:
    branches: [main, develop]
    paths:
      - '**/*.ts'
      - '**/*.tsx'
      - '**/*.js'
      - '**/*.jsx'
  push:
    branches: [main, develop]
    paths:
      - '**/*.ts'
      - '**/*.tsx'
      - '**/*.js'
      - '**/*.jsx'

concurrency:
  group: claude-lint-${{ github.ref }}
  cancel-in-progress: true

jobs:
  lint-then-ci:
    name: Lint First, Then CI
    runs-on: ubuntu-latest
    if: github.actor != 'claude-lint-bot[bot]'
    
    permissions:
      contents: write
      pull-requests: write
      checks: write
      actions: write
      issues: write

    steps:
      - name: üì• Checkout Repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0

      - name: üì¶ Install pnpm
        uses: pnpm/action-setup@v3
        with:
          version: 10.15.1

      - name: üîß Setup Node.js & pnpm
        uses: actions/setup-node@v4
        with:
          node-version: '22'
          cache: 'pnpm'

      - name: üìö Install Dependencies
        run: pnpm install --frozen-lockfile

      - name: üîç Run Initial Lint Check
        id: lint-check
        run: |
          echo "üîç Checking for linting issues..."
          ERROR_COUNT=$(pnpm lint 2>&1 | grep -E "error" | wc -l || echo "0")
          echo "error-count=$ERROR_COUNT" >> $GITHUB_OUTPUT
          echo "Found $ERROR_COUNT linting errors"

      - name: üîß Temporarily relax Node.js constraint for Claude Action
        if: steps.lint-check.outputs.error-count != '0'
        run: |
          # Backup original package.json
          cp package.json package.json.backup
          # Temporarily allow Node 18+ for the action
          sed 's/"node": ">=22.0.0 <24.0.0"/"node": ">=18.0.0 <24.0.0"/' package.json > package.json.tmp
          mv package.json.tmp package.json

      - name: üîß Claude Surgical Linting (Direct Fix)
        if: steps.lint-check.outputs.error-count != '0'
        uses: anthropics/claude-code-base-action@beta
        with:
          prompt: |
            You are a surgical code linter. Fix ONLY simple, confident linting errors while preserving ALL functionality.

            SURGICAL REQUIREMENTS:
            1. Fix ONLY simple, obvious issues: missing semicolons, unused imports, basic formatting
            2. SKIP complex syntax errors, incomplete code, or anything you're not 100% confident about
            3. NEVER change business logic or functionality
            4. Use Edit tool for line-by-line changes only

            CONFIDENCE RULES:
            - Fix: Missing semicolons, unused variables/imports, basic formatting  
            - SKIP: Syntax errors in complex expressions, incomplete functions, type conflicts
            - SKIP: Any error in files with multiple complex syntax issues

            PROCESS: Run `pnpm lint` first to see errors, then fix ONLY simple, obvious errors surgically using Edit tool. Work systematically through the issues.
          allowed_tools: "Bash,Edit,Read,Glob,Grep"
          claude_code_oauth_token: ${{ secrets.CLAUDE_CODE_OAUTH_TOKEN }}

      - name: üîß Restore original Node.js constraint
        if: steps.lint-check.outputs.error-count != '0'
        run: |
          # Restore original package.json
          if [ -f package.json.backup ]; then
            mv package.json.backup package.json
            echo "Restored original package.json with Node.js >=22.0.0 constraint"
          fi

      - name: üîç Verify Fixes
        if: steps.lint-check.outputs.error-count != '0'
        run: |
          echo "üîç Verifying surgical fixes..."
          NEW_ERROR_COUNT=$(pnpm lint 2>&1 | grep -E "error" | wc -l || echo "0")
          echo "Errors before: ${{ steps.lint-check.outputs.error-count }}"
          echo "Errors after: $NEW_ERROR_COUNT"
          
          if [ "$NEW_ERROR_COUNT" -lt "${{ steps.lint-check.outputs.error-count }}" ]; then
            echo "‚úÖ Surgical fixes successful! Errors reduced."
          else
            echo "‚ö†Ô∏è No errors reduced, but functionality preserved"
          fi

      - name: üß™ Run Tests (Smoke Test)
        if: steps.lint-check.outputs.error-count != '0'
        run: |
          echo "üß™ Running smoke tests to verify functionality..."
          # Run type checking to ensure no breaking changes
          pnpm type-check || echo "Type check failed - functionality may be impacted"
          
          # Test web dashboard can start (quick test)
          timeout 30 pnpm --filter @claude-zen/web-dashboard build || echo "Dashboard build test failed"

      - name: üìù Commit Surgical Fixes
        if: steps.lint-check.outputs.error-count != '0'
        run: |
          echo "üìù Committing surgical fixes..."
          
          # Configure git
          git config --local user.email "claude-lint-bot@anthropic.com"
          git config --local user.name "Claude Lint Bot"
          
          # Check if there are changes to commit
          if git diff --quiet && git diff --staged --quiet; then
            echo "No changes to commit"
            exit 0
          fi
          
          # Add all changes
          git add .
          
          # Create commit message with details
          FINAL_ERROR_COUNT=$(pnpm lint 2>&1 | grep -E "error" | wc -l || echo "0")
          
          git commit -m "üîß Surgical lint fixes via Claude

          - Initial errors: ${{ steps.lint-check.outputs.error-count }}
          - Final errors: ${FINAL_ERROR_COUNT}
          - Changes: Surgical syntax/style fixes only
          - Functionality: Preserved (no business logic changes)

          ü§ñ Generated with Claude Code surgical linting
          
          Co-Authored-By: Claude <noreply@anthropic.com>" || exit 0

      - name: üöÄ Push Changes (Direct to Main)
        if: steps.lint-check.outputs.error-count != '0'
        run: |
          echo "üöÄ Pushing surgical fixes directly to main..."
          git push origin main || echo "Push failed - may be merge conflicts"

      - name: üìä Update PR Status
        if: github.event_name == 'pull_request' && steps.lint-check.outputs.error-count != '0'
        uses: actions/github-script@v7
        with:
          script: |
            const initialErrors = ${{ steps.lint-check.outputs.error-count }};
            const finalErrors = await exec.getExecOutput('sh', ['-c', 'pnpm lint 2>&1 | grep -E "error" | wc -l || echo "0"']);
            const finalCount = parseInt(finalErrors.stdout.trim());
            
            const message = `## üîß Claude Surgical Lint Results
            
            - **Initial errors:** ${initialErrors}
            - **Final errors:** ${finalCount}
            - **Errors fixed:** ${initialErrors - finalCount}
            - **Changes:** Surgical syntax/style fixes only
            - **Functionality:** ‚úÖ Preserved (no business logic modified)
            
            ${finalCount === 0 ? 'üéâ All linting errors resolved!' : '‚ö†Ô∏è Some errors remain - may need manual review'}
            
            ü§ñ *Automated surgical linting via Claude Code*`;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: message
            });

      - name: ‚úÖ Lint Status Summary & Continuous Linting
        run: |
          FINAL_ERROR_COUNT=$(pnpm lint 2>&1 | grep -E "error" | wc -l || echo "0")
          INITIAL_ERRORS="${{ steps.lint-check.outputs.error-count }}"
          
          echo "## üîß Claude Surgical Lint Summary"
          echo "- Initial errors: $INITIAL_ERRORS"
          echo "- Final errors: $FINAL_ERROR_COUNT"
          echo "- Errors fixed this iteration: $((INITIAL_ERRORS - FINAL_ERROR_COUNT))"
          
          if [ "$FINAL_ERROR_COUNT" = "0" ]; then
            echo "üéâ SUCCESS: All linting errors resolved surgically!"
            echo "‚úÖ Repository is now fully lint-compliant"
            exit 0
          elif [ "$FINAL_ERROR_COUNT" -lt "$INITIAL_ERRORS" ]; then
            echo "‚úÖ Progress made: $((INITIAL_ERRORS - FINAL_ERROR_COUNT)) errors fixed"
            
            # Check iteration count to prevent infinite loops
            ITERATION_COUNT=$(git log --oneline --grep="üîÑ Continue surgical linting iteration" | wc -l)
            if [ "$ITERATION_COUNT" -ge 10 ]; then
              echo "üõë Maximum iterations (10) reached - stopping to prevent infinite loop"
              echo "üí° Manual review needed for remaining $FINAL_ERROR_COUNT errors"
              exit 0
            fi
            
            # Check if we're making minimal progress with many errors
            if [ "$FINAL_ERROR_COUNT" -gt 50 ] && [ $((INITIAL_ERRORS - FINAL_ERROR_COUNT)) -lt 5 ]; then
              echo "‚ö†Ô∏è Minimal progress with many errors remaining - stopping to avoid infinite loop"
              echo "üí° Manual review needed for remaining $FINAL_ERROR_COUNT errors"
              exit 0
            fi
            
            # Create trigger commit for next iteration if there are still fixable errors
            if [ "$FINAL_ERROR_COUNT" -gt 0 ]; then
              echo "üîÑ Triggering next surgical linting iteration..."
              
              # Configure git
              git config --local user.email "claude-lint-bot@anthropic.com"
              git config --local user.name "Claude Lint Bot"
              
              # Create empty trigger commit
              git commit --allow-empty -m "üîÑ Continue surgical linting iteration

              - Remaining errors: ${FINAL_ERROR_COUNT}
              - Fixed this round: $((INITIAL_ERRORS - FINAL_ERROR_COUNT))
              - Auto-triggering next iteration

              ü§ñ Generated with Claude Code surgical linting
              
              Co-Authored-By: Claude <noreply@anthropic.com>"
              
              # Push to trigger next iteration
              git push || echo "Push failed - may be merge conflicts"
              
              echo "‚úÖ Next iteration triggered - see new workflow run"
            fi
            exit 0
          else
            echo "‚ö†Ô∏è No errors reduced this iteration - stopping continuous linting"
            echo "üîç $FINAL_ERROR_COUNT errors may require manual review"
            echo "üí° These might be complex syntax errors beyond surgical fixing"
            echo "‚úÖ Continuous linting completed - remaining errors need manual attention"
            exit 0
          fi

      # ==============================================================================
      # CI STEPS - Run after linting is complete
      # ==============================================================================
      
      - name: üèóÔ∏è Set up Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: '1.80'

      - name: üîç Type check
        run: pnpm run type-check

      - name: üßπ Final Lint Check
        run: pnpm run lint

      - name: üì¶ Build packages
        run: pnpm run build:packages

      - name: ü¶Ä Build Rust components
        run: pnpm run build:rust

      - name: üèóÔ∏è Build main project
        run: pnpm run build

      - name: üß™ Run tests
        run: pnpm run test