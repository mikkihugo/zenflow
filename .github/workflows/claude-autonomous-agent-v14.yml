---
name: "Claude Autonomous Agent v14"

on:
  workflow_dispatch:
    inputs:
      issue_number:
        description: 'Issue number to process'
        required: true
        default: '63'

jobs:
  claude-solver:
    runs-on: ubuntu-latest
    timeout-minutes: 45

    permissions:
      contents: write
      issues: write
      pull-requests: write
      id-token: write

    steps:
      - name: Setup Autonomous Agent
        run: |
          echo "ðŸš€ Claude Autonomous Agent v14 ACTIVATED"
          echo "Processing MAJOR Issue: ${{ github.event.inputs.issue_number }}"
          echo "GitHub Actor: ${{ github.actor }}"
          echo "Repository: ${{ github.repository }}"

      - name: Claude Code Autonomous Agent - Major Task
        uses: anthropics/claude-code-action@beta
        with:
          claude_code_oauth_token: ${{ secrets.CLAUDE_CODE_OAUTH_TOKEN }}
          mode: "agent"
          direct_prompt: |
            ðŸš€ CLAUDE CODE CLI AGENT v14 - Major Architectural Task
            
            **Processing Complex Issue #${{ github.event.inputs.issue_number }}**
            
            ## Major Mission: Dependency Injection Implementation
            You are tasked with implementing comprehensive dependency injection patterns across the claude-zen project domains.
            
            ## Task Overview (Issue #63)
            This is a substantial architectural improvement task requiring:
            1. **Domain Analysis**: Analyze memory and database domains for improvement opportunities
            2. **TypeScript Enhancement**: Replace any types with strict interfaces
            3. **REST API Creation**: Generate REST endpoints for domain functionality
            4. **Google Standards**: Apply Google TypeScript style guide compliance
            5. **Documentation**: Create comprehensive domain documentation
            6. **Dependency Injection**: Implement DI patterns consistently
            
            ## Implementation Strategy
            
            ### Phase 1: Analysis & Planning
            1. Scan src/memory/ and src/database/ domains
            2. Identify current patterns and improvement areas
            3. Create improvement plan with specific tasks
            
            ### Phase 2: Memory Domain Improvements
            1. Implement strict TypeScript typing
            2. Create REST API controllers for memory management
            3. Add comprehensive documentation
            4. Apply dependency injection patterns
            
            ### Phase 3: Database Domain Improvements
            1. Enhance database connectivity and ORM patterns
            2. Create REST API for database operations
            3. Implement migration management
            4. Add comprehensive testing
            
            ## Project Context
            - This is claude-zen: A sophisticated AI development coordination system
            - Follow existing domain-driven architecture in src/
            - Use hybrid TDD approach (70% London + 30% Classical)
            - Maintain compatibility with existing MCP and neural systems
            
            ## Expected Deliverables
            1. Enhanced memory domain with DI patterns
            2. Improved database domain with REST APIs
            3. Comprehensive documentation updates
            4. Working tests for all new functionality
            5. Architectural consistency across domains
            
            This is a MAJOR architectural improvement. Take time to analyze, plan thoroughly, and implement systematically.
            
            Execute autonomously. Deliver enterprise-grade improvements.