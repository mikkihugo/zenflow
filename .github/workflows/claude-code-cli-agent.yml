name: Claude Code CLI Agent

on:
  issue_comment:
    types: [created]
  issues:
    types: [opened, labeled]
  workflow_dispatch:
    inputs:
      issue_number:
        description: 'Issue number to process'
        required: true
        default: '139'

concurrency:
  group: claude-autonomous-${{ github.event.issue.number || inputs.issue_number }}
  cancel-in-progress: false

jobs:
  claude-solver:
    runs-on: ubuntu-latest
    timeout-minutes: 45
    if: |
      github.event_name == 'workflow_dispatch' ||
      (github.event_name == 'issue_comment' && contains(github.event.comment.body, '@claude')) ||
      (github.event_name == 'issues' && (github.event.action == 'opened' || (github.event.action == 'labeled' && github.event.label.name == 'claude-code')))

    permissions:
      contents: write
      issues: write
      pull-requests: write
      actions: read

    steps:
      - name: Debug Workflow Trigger
        run: |
          echo "=== Workflow Debug Information ==="
          echo "Event name: ${{ github.event_name }}"
          echo "Repository: ${{ github.repository }}"
          echo "Actor: ${{ github.actor }}"
          echo "Issue number: ${{ github.event.issue.number || 'N/A' }}"
          echo "Issue title: ${{ github.event.issue.title || 'N/A' }}"
          echo "Comment body: ${{ github.event.comment.body || 'N/A' }}"
          echo "Issue action: ${{ github.event.action || 'N/A' }}"
          echo "Label name: ${{ github.event.label.name || 'N/A' }}"
          echo "=================================="

      - name: Checkout
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22.x'
          cache: 'npm'

      - name: Install Dependencies
        run: npm ci

      - name: Install Claude Code CLI
        run: |
          npm install -g @anthropic/claude-code

      - name: Configure Git
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git config --global init.defaultBranch main

      - name: Execute Claude Task
        env:
          ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          ISSUE_NUMBER: ${{ github.event.issue.number || inputs.issue_number }}
          ISSUE_TITLE: ${{ github.event.issue.title }}
          ISSUE_BODY: ${{ github.event.issue.body }}
          COMMENT_BODY: ${{ github.event.comment.body }}
        run: |
          echo "Processing issue #$ISSUE_NUMBER"
          
          # Create task description
          if [ "${{ github.event_name }}" = "issue_comment" ]; then
            TASK="$COMMENT_BODY"
          else
            TASK="Resolve issue #$ISSUE_NUMBER: $ISSUE_TITLE
            
            $ISSUE_BODY"
          fi
          
          echo "Task: $TASK"
          
          # Execute Claude Code task
          claude task "$TASK

          Follow these phases:
          1. Analyze the issue requirements thoroughly
          2. Create a comprehensive implementation plan  
          3. Implement the solution with proper tests
          4. Commit changes with clear messages
          5. Create a pull request

          Use the CLAUDE_AGENT.md guidelines and follow the domain-driven architecture.
          Focus on working, tested code that solves the actual problem."

      - name: Check for Changes and Create PR
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Check if there are any changes
          if [ -n "$(git status --porcelain)" ]; then
            echo "Changes detected, checking for commits"
            
            # Check if commits were made
            COMMITS=$(git rev-list --count HEAD ^origin/main)
            if [ "$COMMITS" -gt 0 ]; then
              echo "Commits found, pushing changes"
              git push origin HEAD
              
              # Create PR if not on main
              CURRENT_BRANCH=$(git branch --show-current)
              if [ "$CURRENT_BRANCH" != "main" ]; then
                gh pr create --title "ðŸ¤– Autonomous fix for issue #${{ github.event.issue.number || inputs.issue_number }}" \
                  --body "Automated implementation by Claude Code CLI Agent

                Resolves: #${{ github.event.issue.number || inputs.issue_number }}
                
                This PR was automatically created by the Claude Code CLI Agent workflow." \
                  --head "$CURRENT_BRANCH" \
                  --base main

                # Auto-merge if possible
                gh pr merge --auto --squash --delete-branch
              fi
            fi
          else
            echo "No changes detected"
          fi