name: Claude Code CLI Agent

on:
  issue_comment:
    types: [created]
  issues:
    types: [opened, labeled]
  workflow_dispatch:
    inputs:
      issue_number:
        description: 'Issue number to process'
        required: true
        default: '139'

concurrency:
  group: claude-autonomous-${{ github.event.issue.number || inputs.issue_number }}
  cancel-in-progress: false

jobs:
  claude-solver:
    runs-on: ubuntu-latest
    timeout-minutes: 45
    if: |
      (github.event_name == 'issue_comment' && contains(github.event.comment.body, '@claude')) ||
      (github.event_name == 'issues' && (github.event.action == 'opened' || (github.event.action == 'labeled' && github.event.label.name == 'claude-code'))) ||
      github.event_name == 'workflow_dispatch'

    permissions:
      contents: write
      issues: write
      pull-requests: write
      actions: read
      metadata: read
      statuses: write
      checks: write

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22.x'
          cache: 'npm'

      - name: Install Dependencies
        run: npm ci

      - name: Configure Git
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git config --global init.defaultBranch main

      - name: Claude Agent
        uses: anthropics/claude-code-action@beta
        with:
          anthropic_api_key: ${{ secrets.ANTHROPIC_API_KEY }}
          github_token: ${{ secrets.GITHUB_TOKEN }}
          trigger_phrase: "@claude"
          custom_instructions: |
            You are an autonomous development agent. Resolve GitHub issue #${{ github.event.issue.number || inputs.issue_number }}.
            
            Follow these phases:
            1. Analyze the issue requirements thoroughly
            2. Create a comprehensive implementation plan
            3. Implement the solution with proper tests
            4. Commit changes with clear messages
            5. Create a pull request if needed
            
            Use the CLAUDE_AGENT.md guidelines and follow the domain-driven architecture in the codebase.
            Focus on working, tested code that solves the actual problem.
        id: claude

      - name: Auto-merge PR
        if: steps.claude.outputs.pull_request_number != ''
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          PR_NUMBER: ${{ steps.claude.outputs.pull_request_number }}
        run: |
          echo "Auto-merging PR #$PR_NUMBER"
          gh pr merge $PR_NUMBER --auto --squash --delete-branch