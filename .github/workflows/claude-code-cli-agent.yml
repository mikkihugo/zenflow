---
# Claude Code CLI Agent - Autonomous issue resolution and development
name: "Claude Code CLI Agent"

"on":
  issues:
    types: [opened, labeled]
  issue_comment:
    types: [created, edited]
  workflow_dispatch:
    inputs:
      issue_number:
        description: 'Issue number to process'
        required: true
        default: '139'

concurrency:
  group: claude-code-cli-agent
  cancel-in-progress: false

jobs:
  claude-solver:
    runs-on: ubuntu-latest
    timeout-minutes: 45

    if: |
      (github.event_name == 'issue_comment' && 
       contains(github.event.comment.body, '@claude')) ||
      (github.event_name == 'issues' && github.event.action == 'opened') ||
      (github.event_name == 'issues' && github.event.action == 'labeled' && 
       github.event.label.name == 'claude-code') ||
      (github.event_name == 'workflow_dispatch')

    permissions:
      contents: write
      issues: write
      pull-requests: write
      actions: read
      metadata: read
      statuses: write
      checks: write

    steps:
      - name: Debug Event Information
        run: |
          echo "üîç DEBUG: Event Information"
          echo "Event Name: ${{ github.event_name }}"
          echo "Action: ${{ github.event.action }}"
          echo "Issue Number: ${{ github.event.issue.number }}"
          echo "Comment Body: ${{ github.event.comment.body }}"
          echo "Contains @claude: ${{ contains(github.event.comment.body, '@claude') }}"
          echo "Actor: ${{ github.actor }}"
          echo "Repository: ${{ github.repository }}"

      - name: Checkout
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22.x'
          cache: 'npm'

      - name: Get Issue Context
        id: issue-context
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            let issueNumber, issueTitle, issueBody, commentBody;

            if (context.eventName === 'issue_comment') {
              // Comment on issue - get the issue details
              issueNumber = context.payload.issue.number;
              issueTitle = context.payload.issue.title;
              issueBody = context.payload.issue.body;
              commentBody = context.payload.comment.body;
              console.log(`üìù Processing comment on issue #${issueNumber}`);
            } else if (context.eventName === 'issues') {
              // Direct issue event
              issueNumber = context.payload.issue.number;
              issueTitle = context.payload.issue.title;
              issueBody = context.payload.issue.body;
              commentBody = '';
              console.log(`üéØ Processing issue #${issueNumber}`);
            } else if (context.eventName === 'workflow_dispatch') {
              // Manual dispatch
              issueNumber = context.payload.inputs.issue_number;
              try {
                const { data: issue } = await github.rest.issues.get({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: issueNumber
                });
                issueTitle = issue.title;
                issueBody = issue.body;
                commentBody = '';
                console.log(`üîß Manual processing of issue #${issueNumber}`);
              } catch (error) {
                console.log(`‚ùå Could not fetch issue: ${error.message}`);
                issueTitle = 'Unknown Issue';
                issueBody = 'Could not fetch issue details';
                commentBody = '';
              }
            }

            // Set outputs for the next step
            core.setOutput('issue_number', issueNumber);
            core.setOutput('issue_title', issueTitle);
            core.setOutput('issue_body', issueBody);
            core.setOutput('comment_body', commentBody);
            core.setOutput('trigger_type', context.eventName);

      - name: Claude Code Agent
        uses: anthropics/claude-code-action@beta
        with:
          claude_code_oauth_token: ${{ secrets.CLAUDE_CODE_OAUTH_TOKEN }}
          github_token: ${{ secrets.GITHUB_TOKEN }}
          direct_prompt: |
            Resolve GitHub issue #${{ steps.issue-context.outputs.issue_number }}.

            Event Type: ${{ steps.issue-context.outputs.trigger_type }}

            Issue Details:
            Title: ${{ steps.issue-context.outputs.issue_title }}
            Body: ${{ steps.issue-context.outputs.issue_body }}
            ${{ steps.issue-context.outputs.comment_body && 
                format('Comment: {0}', steps.issue-context.outputs.comment_body) || '' }}

            Follow these phases:
            1. Analyze requirements and create implementation plan
            2. Implement solution with comprehensive tests
            3. Commit changes and create pull request

            Use CLAUDE_AGENT.md guidelines and domain-driven architecture.
            Focus on working, tested code that solves the actual problem.

  auto-merge:
    needs: claude-solver
    runs-on: ubuntu-latest
    if: needs.claude-solver.outputs.pull_request_number != ''

    permissions:
      pull-requests: write
      contents: write

    steps:
      - name: Auto-merge PR
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          PR_NUMBER: ${{ needs.claude-solver.outputs.pull_request_number }}
        run: |
          echo "Auto-merging PR #$PR_NUMBER"
          gh pr merge $PR_NUMBER --auto --squash