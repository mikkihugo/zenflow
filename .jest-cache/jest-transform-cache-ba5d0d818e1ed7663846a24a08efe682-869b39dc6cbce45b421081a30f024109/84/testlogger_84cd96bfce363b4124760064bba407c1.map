{"file":"/home/mhugo/code/claude-code-flow/src/__tests__/helpers/test-logger.ts","mappings":"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","names":[],"sources":["/home/mhugo/code/claude-code-flow/src/__tests__/helpers/test-logger.ts"],"sourcesContent":["/**\n * Test Logger - Specialized logging for test environments\n * \n * Provides structured logging for both London and Classical TDD approaches\n */\n\nexport interface LogEntry {\n  level: 'debug' | 'info' | 'warn' | 'error';\n  message: string;\n  timestamp: number;\n  context?: Record<string, any>;\n  testName?: string;\n  category?: string;\n}\n\nexport class TestLogger {\n  private logs: LogEntry[] = [];\n  private testName?: string;\n  private silent: boolean = false;\n\n  constructor(testName?: string, silent: boolean = false) {\n    this.testName = testName;\n    this.silent = silent;\n  }\n\n  /**\n   * Log a debug message\n   */\n  debug(message: string, context?: Record<string, any>): void {\n    this.log('debug', message, context);\n  }\n\n  /**\n   * Log an info message\n   */\n  info(message: string, context?: Record<string, any>): void {\n    this.log('info', message, context);\n  }\n\n  /**\n   * Log a warning message\n   */\n  warn(message: string, context?: Record<string, any>): void {\n    this.log('warn', message, context);\n  }\n\n  /**\n   * Log an error message\n   */\n  error(message: string, context?: Record<string, any>): void {\n    this.log('error', message, context);\n  }\n\n  /**\n   * Log test interactions (London School)\n   */\n  logInteraction(component: string, method: string, args?: any[], result?: any): void {\n    this.log('debug', `Interaction: ${component}.${method}`, {\n      component,\n      method,\n      args,\n      result,\n      category: 'interaction'\n    });\n  }\n\n  /**\n   * Log state changes (Classical School)\n   */\n  logStateChange(component: string, before: any, after: any, operation?: string): void {\n    this.log('debug', `State change in ${component}`, {\n      component,\n      before,\n      after,\n      operation,\n      category: 'state-change'\n    });\n  }\n\n  /**\n   * Log performance metrics\n   */\n  logPerformance(operation: string, duration: number, context?: Record<string, any>): void {\n    this.log('info', `Performance: ${operation} took ${duration}ms`, {\n      operation,\n      duration,\n      category: 'performance',\n      ...context\n    });\n  }\n\n  /**\n   * Log assertion results\n   */\n  logAssertion(description: string, passed: boolean, expected?: any, actual?: any): void {\n    const level = passed ? 'info' : 'error';\n    this.log(level, `Assertion: ${description} - ${passed ? 'PASSED' : 'FAILED'}`, {\n      description,\n      passed,\n      expected,\n      actual,\n      category: 'assertion'\n    });\n  }\n\n  /**\n   * Get all logs\n   */\n  getLogs(): LogEntry[] {\n    return [...this.logs];\n  }\n\n  /**\n   * Get logs by level\n   */\n  getLogsByLevel(level: LogEntry['level']): LogEntry[] {\n    return this.logs.filter(log => log.level === level);\n  }\n\n  /**\n   * Get logs by category\n   */\n  getLogsByCategory(category: string): LogEntry[] {\n    return this.logs.filter(log => log.context?.category === category);\n  }\n\n  /**\n   * Clear all logs\n   */\n  clearLogs(): void {\n    this.logs = [];\n  }\n\n  /**\n   * Export logs as string\n   */\n  exportLogs(format: 'text' | 'json' = 'text'): string {\n    if (format === 'json') {\n      return JSON.stringify(this.logs, null, 2);\n    }\n\n    return this.logs.map(log => {\n      const timestamp = new Date(log.timestamp).toISOString();\n      const context = log.context ? ` | ${JSON.stringify(log.context)}` : '';\n      return `[${timestamp}] ${log.level.toUpperCase()}: ${log.message}${context}`;\n    }).join('\\n');\n  }\n\n  /**\n   * Create a child logger for a specific component/test\n   */\n  createChild(name: string): TestLogger {\n    const child = new TestLogger(`${this.testName ? `${this.testName}.` : ''}${name}`, this.silent);\n    // Share the log storage\n    child.logs = this.logs;\n    return child;\n  }\n\n  private log(level: LogEntry['level'], message: string, context?: Record<string, any>): void {\n    const entry: LogEntry = {\n      level,\n      message,\n      timestamp: Date.now(),\n      context,\n      testName: this.testName\n    };\n\n    this.logs.push(entry);\n\n    if (!this.silent && process.env.NODE_ENV === 'test') {\n      const prefix = this.testName ? `[${this.testName}] ` : '';\n      console.log(`${prefix}${level.toUpperCase()}: ${message}`, context || '');\n    }\n  }\n}\n\n// Global test logger instance\nexport const testLogger = new TestLogger();\n\n// Factory function for creating test-specific loggers\nexport function createTestLogger(testName: string, silent?: boolean): TestLogger {\n  return new TestLogger(testName, silent);\n}"],"version":3}