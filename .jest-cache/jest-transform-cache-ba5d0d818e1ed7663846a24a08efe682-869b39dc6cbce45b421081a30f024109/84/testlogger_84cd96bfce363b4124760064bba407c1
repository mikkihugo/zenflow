01cabee730c7988e54129fd71548a6ff
/**
 * Test Logger - Specialized logging for test environments
 *
 * Provides structured logging for both London and Classical TDD approaches
 */
export class TestLogger {
    logs = [];
    testName;
    silent = false;
    constructor(testName, silent = false) {
        this.testName = testName;
        this.silent = silent;
    }
    /**
     * Log a debug message
     */
    debug(message, context) {
        this.log('debug', message, context);
    }
    /**
     * Log an info message
     */
    info(message, context) {
        this.log('info', message, context);
    }
    /**
     * Log a warning message
     */
    warn(message, context) {
        this.log('warn', message, context);
    }
    /**
     * Log an error message
     */
    error(message, context) {
        this.log('error', message, context);
    }
    /**
     * Log test interactions (London School)
     */
    logInteraction(component, method, args, result) {
        this.log('debug', `Interaction: ${component}.${method}`, {
            component,
            method,
            args,
            result,
            category: 'interaction'
        });
    }
    /**
     * Log state changes (Classical School)
     */
    logStateChange(component, before, after, operation) {
        this.log('debug', `State change in ${component}`, {
            component,
            before,
            after,
            operation,
            category: 'state-change'
        });
    }
    /**
     * Log performance metrics
     */
    logPerformance(operation, duration, context) {
        this.log('info', `Performance: ${operation} took ${duration}ms`, {
            operation,
            duration,
            category: 'performance',
            ...context
        });
    }
    /**
     * Log assertion results
     */
    logAssertion(description, passed, expected, actual) {
        const level = passed ? 'info' : 'error';
        this.log(level, `Assertion: ${description} - ${passed ? 'PASSED' : 'FAILED'}`, {
            description,
            passed,
            expected,
            actual,
            category: 'assertion'
        });
    }
    /**
     * Get all logs
     */
    getLogs() {
        return [...this.logs];
    }
    /**
     * Get logs by level
     */
    getLogsByLevel(level) {
        return this.logs.filter(log => log.level === level);
    }
    /**
     * Get logs by category
     */
    getLogsByCategory(category) {
        return this.logs.filter(log => log.context?.category === category);
    }
    /**
     * Clear all logs
     */
    clearLogs() {
        this.logs = [];
    }
    /**
     * Export logs as string
     */
    exportLogs(format = 'text') {
        if (format === 'json') {
            return JSON.stringify(this.logs, null, 2);
        }
        return this.logs.map(log => {
            const timestamp = new Date(log.timestamp).toISOString();
            const context = log.context ? ` | ${JSON.stringify(log.context)}` : '';
            return `[${timestamp}] ${log.level.toUpperCase()}: ${log.message}${context}`;
        }).join('\n');
    }
    /**
     * Create a child logger for a specific component/test
     */
    createChild(name) {
        const child = new TestLogger(`${this.testName ? `${this.testName}.` : ''}${name}`, this.silent);
        // Share the log storage
        child.logs = this.logs;
        return child;
    }
    log(level, message, context) {
        const entry = {
            level,
            message,
            timestamp: Date.now(),
            context,
            testName: this.testName
        };
        this.logs.push(entry);
        if (!this.silent && process.env.NODE_ENV === 'test') {
            const prefix = this.testName ? `[${this.testName}] ` : '';
            console.log(`${prefix}${level.toUpperCase()}: ${message}`, context || '');
        }
    }
}
// Global test logger instance
export const testLogger = new TestLogger();
// Factory function for creating test-specific loggers
export function createTestLogger(testName, silent) {
    return new TestLogger(testName, silent);
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,