b128d2f6559d9a216daa9c4cc8eae559
/* istanbul ignore next */
function cov_1atpez0n3u() {
  var path = "/home/mhugo/code/claude-code-flow/src/maestro/agent-reuse/WorkloadMonitor.ts";
  var hash = "12c10d3aab9dad2f06ce8cd4e2f3eba79ac31461";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/home/mhugo/code/claude-code-flow/src/maestro/agent-reuse/WorkloadMonitor.ts",
    statementMap: {
      "0": {
        start: {
          line: 6,
          column: 14
        },
        end: {
          line: 6,
          column: 23
        }
      },
      "1": {
        start: {
          line: 9,
          column: 8
        },
        end: {
          line: 14,
          column: 10
        }
      },
      "2": {
        start: {
          line: 20,
          column: 8
        },
        end: {
          line: 22,
          column: 9
        }
      },
      "3": {
        start: {
          line: 21,
          column: 12
        },
        end: {
          line: 21,
          column: 42
        }
      },
      "4": {
        start: {
          line: 23,
          column: 29
        },
        end: {
          line: 23,
          column: 54
        }
      },
      "5": {
        start: {
          line: 24,
          column: 8
        },
        end: {
          line: 24,
          column: 35
        }
      },
      "6": {
        start: {
          line: 26,
          column: 8
        },
        end: {
          line: 28,
          column: 9
        }
      },
      "7": {
        start: {
          line: 27,
          column: 12
        },
        end: {
          line: 27,
          column: 33
        }
      },
      "8": {
        start: {
          line: 34,
          column: 29
        },
        end: {
          line: 34,
          column: 54
        }
      },
      "9": {
        start: {
          line: 35,
          column: 8
        },
        end: {
          line: 37,
          column: 9
        }
      },
      "10": {
        start: {
          line: 36,
          column: 12
        },
        end: {
          line: 36,
          column: 24
        }
      },
      "11": {
        start: {
          line: 38,
          column: 8
        },
        end: {
          line: 38,
          column: 53
        }
      },
      "12": {
        start: {
          line: 44,
          column: 24
        },
        end: {
          line: 44,
          column: 56
        }
      },
      "13": {
        start: {
          line: 45,
          column: 8
        },
        end: {
          line: 46,
          column: 25
        }
      },
      "14": {
        start: {
          line: 46,
          column: 12
        },
        end: {
          line: 46,
          column: 25
        }
      },
      "15": {
        start: {
          line: 47,
          column: 8
        },
        end: {
          line: 50,
          column: 62
        }
      },
      "16": {
        start: {
          line: 56,
          column: 29
        },
        end: {
          line: 56,
          column: 54
        }
      },
      "17": {
        start: {
          line: 57,
          column: 8
        },
        end: {
          line: 59,
          column: 9
        }
      },
      "18": {
        start: {
          line: 58,
          column: 12
        },
        end: {
          line: 58,
          column: 24
        }
      },
      "19": {
        start: {
          line: 60,
          column: 23
        },
        end: {
          line: 60,
          column: 65
        }
      },
      "20": {
        start: {
          line: 61,
          column: 30
        },
        end: {
          line: 61,
          column: 77
        }
      },
      "21": {
        start: {
          line: 61,
          column: 55
        },
        end: {
          line: 61,
          column: 76
        }
      },
      "22": {
        start: {
          line: 62,
          column: 8
        },
        end: {
          line: 63,
          column: 24
        }
      },
      "23": {
        start: {
          line: 63,
          column: 12
        },
        end: {
          line: 63,
          column: 24
        }
      },
      "24": {
        start: {
          line: 64,
          column: 20
        },
        end: {
          line: 78,
          column: 10
        }
      },
      "25": {
        start: {
          line: 64,
          column: 54
        },
        end: {
          line: 71,
          column: 9
        }
      },
      "26": {
        start: {
          line: 79,
          column: 22
        },
        end: {
          line: 79,
          column: 42
        }
      },
      "27": {
        start: {
          line: 80,
          column: 8
        },
        end: {
          line: 88,
          column: 10
        }
      },
      "28": {
        start: {
          line: 94,
          column: 8
        },
        end: {
          line: 94,
          column: 37
        }
      },
      "29": {
        start: {
          line: 100,
          column: 8
        },
        end: {
          line: 100,
          column: 47
        }
      },
      "30": {
        start: {
          line: 106,
          column: 8
        },
        end: {
          line: 109,
          column: 11
        }
      },
      "31": {
        start: {
          line: 107,
          column: 29
        },
        end: {
          line: 107,
          column: 87
        }
      },
      "32": {
        start: {
          line: 108,
          column: 12
        },
        end: {
          line: 108,
          column: 73
        }
      },
      "33": {
        start: {
          line: 116,
          column: 24
        },
        end: {
          line: 116,
          column: 56
        }
      },
      "34": {
        start: {
          line: 117,
          column: 8
        },
        end: {
          line: 123,
          column: 9
        }
      },
      "35": {
        start: {
          line: 118,
          column: 12
        },
        end: {
          line: 122,
          column: 15
        }
      },
      "36": {
        start: {
          line: 129,
          column: 24
        },
        end: {
          line: 129,
          column: 56
        }
      },
      "37": {
        start: {
          line: 130,
          column: 8
        },
        end: {
          line: 138,
          column: 9
        }
      },
      "38": {
        start: {
          line: 131,
          column: 12
        },
        end: {
          line: 137,
          column: 15
        }
      },
      "39": {
        start: {
          line: 144,
          column: 23
        },
        end: {
          line: 144,
          column: 54
        }
      },
      "40": {
        start: {
          line: 145,
          column: 28
        },
        end: {
          line: 145,
          column: 41
        }
      },
      "41": {
        start: {
          line: 146,
          column: 8
        },
        end: {
          line: 148,
          column: 9
        }
      },
      "42": {
        start: {
          line: 147,
          column: 12
        },
        end: {
          line: 147,
          column: 90
        }
      },
      "43": {
        start: {
          line: 149,
          column: 24
        },
        end: {
          line: 149,
          column: 25
        }
      },
      "44": {
        start: {
          line: 150,
          column: 30
        },
        end: {
          line: 150,
          column: 31
        }
      },
      "45": {
        start: {
          line: 151,
          column: 24
        },
        end: {
          line: 151,
          column: 25
        }
      },
      "46": {
        start: {
          line: 152,
          column: 8
        },
        end: {
          line: 163,
          column: 11
        }
      },
      "47": {
        start: {
          line: 153,
          column: 28
        },
        end: {
          line: 153,
          column: 60
        }
      },
      "48": {
        start: {
          line: 154,
          column: 12
        },
        end: {
          line: 162,
          column: 13
        }
      },
      "49": {
        start: {
          line: 155,
          column: 16
        },
        end: {
          line: 155,
          column: 49
        }
      },
      "50": {
        start: {
          line: 156,
          column: 16
        },
        end: {
          line: 161,
          column: 17
        }
      },
      "51": {
        start: {
          line: 157,
          column: 20
        },
        end: {
          line: 157,
          column: 38
        }
      },
      "52": {
        start: {
          line: 159,
          column: 21
        },
        end: {
          line: 161,
          column: 17
        }
      },
      "53": {
        start: {
          line: 160,
          column: 20
        },
        end: {
          line: 160,
          column: 32
        }
      },
      "54": {
        start: {
          line: 164,
          column: 8
        },
        end: {
          line: 169,
          column: 10
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 8,
            column: 4
          },
          end: {
            line: 8,
            column: 5
          }
        },
        loc: {
          start: {
            line: 8,
            column: 33
          },
          end: {
            line: 15,
            column: 5
          }
        },
        line: 8
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 19,
            column: 4
          },
          end: {
            line: 19,
            column: 5
          }
        },
        loc: {
          start: {
            line: 19,
            column: 36
          },
          end: {
            line: 29,
            column: 5
          }
        },
        line: 19
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 33,
            column: 4
          },
          end: {
            line: 33,
            column: 5
          }
        },
        loc: {
          start: {
            line: 33,
            column: 32
          },
          end: {
            line: 39,
            column: 5
          }
        },
        line: 33
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 43,
            column: 4
          },
          end: {
            line: 43,
            column: 5
          }
        },
        loc: {
          start: {
            line: 43,
            column: 26
          },
          end: {
            line: 51,
            column: 5
          }
        },
        line: 43
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 55,
            column: 4
          },
          end: {
            line: 55,
            column: 5
          }
        },
        loc: {
          start: {
            line: 55,
            column: 45
          },
          end: {
            line: 89,
            column: 5
          }
        },
        line: 55
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 61,
            column: 50
          },
          end: {
            line: 61,
            column: 51
          }
        },
        loc: {
          start: {
            line: 61,
            column: 55
          },
          end: {
            line: 61,
            column: 76
          }
        },
        line: 61
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 64,
            column: 41
          },
          end: {
            line: 64,
            column: 42
          }
        },
        loc: {
          start: {
            line: 64,
            column: 54
          },
          end: {
            line: 71,
            column: 9
          }
        },
        line: 64
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 93,
            column: 4
          },
          end: {
            line: 93,
            column: 5
          }
        },
        loc: {
          start: {
            line: 93,
            column: 26
          },
          end: {
            line: 95,
            column: 5
          }
        },
        line: 93
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 99,
            column: 4
          },
          end: {
            line: 99,
            column: 5
          }
        },
        loc: {
          start: {
            line: 99,
            column: 25
          },
          end: {
            line: 101,
            column: 5
          }
        },
        line: 99
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 105,
            column: 4
          },
          end: {
            line: 105,
            column: 5
          }
        },
        loc: {
          start: {
            line: 105,
            column: 52
          },
          end: {
            line: 110,
            column: 5
          }
        },
        line: 105
      },
      "10": {
        name: "(anonymous_10)",
        decl: {
          start: {
            line: 106,
            column: 33
          },
          end: {
            line: 106,
            column: 34
          }
        },
        loc: {
          start: {
            line: 106,
            column: 46
          },
          end: {
            line: 109,
            column: 9
          }
        },
        line: 106
      },
      "11": {
        name: "(anonymous_11)",
        decl: {
          start: {
            line: 114,
            column: 4
          },
          end: {
            line: 114,
            column: 5
          }
        },
        loc: {
          start: {
            line: 114,
            column: 41
          },
          end: {
            line: 124,
            column: 5
          }
        },
        line: 114
      },
      "12": {
        name: "(anonymous_12)",
        decl: {
          start: {
            line: 128,
            column: 4
          },
          end: {
            line: 128,
            column: 5
          }
        },
        loc: {
          start: {
            line: 128,
            column: 50
          },
          end: {
            line: 139,
            column: 5
          }
        },
        line: 128
      },
      "13": {
        name: "(anonymous_13)",
        decl: {
          start: {
            line: 143,
            column: 4
          },
          end: {
            line: 143,
            column: 5
          }
        },
        loc: {
          start: {
            line: 143,
            column: 28
          },
          end: {
            line: 170,
            column: 5
          }
        },
        line: 143
      },
      "14": {
        name: "(anonymous_14)",
        decl: {
          start: {
            line: 152,
            column: 23
          },
          end: {
            line: 152,
            column: 24
          }
        },
        loc: {
          start: {
            line: 152,
            column: 34
          },
          end: {
            line: 163,
            column: 9
          }
        },
        line: 152
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 8,
            column: 16
          },
          end: {
            line: 8,
            column: 31
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 8,
            column: 29
          },
          end: {
            line: 8,
            column: 31
          }
        }],
        line: 8
      },
      "1": {
        loc: {
          start: {
            line: 10,
            column: 25
          },
          end: {
            line: 10,
            column: 54
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 10,
            column: 25
          },
          end: {
            line: 10,
            column: 47
          }
        }, {
          start: {
            line: 10,
            column: 51
          },
          end: {
            line: 10,
            column: 54
          }
        }],
        line: 10
      },
      "2": {
        loc: {
          start: {
            line: 11,
            column: 28
          },
          end: {
            line: 11,
            column: 60
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 11,
            column: 28
          },
          end: {
            line: 11,
            column: 53
          }
        }, {
          start: {
            line: 11,
            column: 57
          },
          end: {
            line: 11,
            column: 60
          }
        }],
        line: 11
      },
      "3": {
        loc: {
          start: {
            line: 12,
            column: 32
          },
          end: {
            line: 12,
            column: 67
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 12,
            column: 32
          },
          end: {
            line: 12,
            column: 61
          }
        }, {
          start: {
            line: 12,
            column: 65
          },
          end: {
            line: 12,
            column: 67
          }
        }],
        line: 12
      },
      "4": {
        loc: {
          start: {
            line: 13,
            column: 26
          },
          end: {
            line: 13,
            column: 56
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 13,
            column: 26
          },
          end: {
            line: 13,
            column: 49
          }
        }, {
          start: {
            line: 13,
            column: 53
          },
          end: {
            line: 13,
            column: 56
          }
        }],
        line: 13
      },
      "5": {
        loc: {
          start: {
            line: 20,
            column: 8
          },
          end: {
            line: 22,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 20,
            column: 8
          },
          end: {
            line: 22,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 20
      },
      "6": {
        loc: {
          start: {
            line: 26,
            column: 8
          },
          end: {
            line: 28,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 26,
            column: 8
          },
          end: {
            line: 28,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 26
      },
      "7": {
        loc: {
          start: {
            line: 35,
            column: 8
          },
          end: {
            line: 37,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 35,
            column: 8
          },
          end: {
            line: 37,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 35
      },
      "8": {
        loc: {
          start: {
            line: 35,
            column: 12
          },
          end: {
            line: 35,
            column: 54
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 35,
            column: 12
          },
          end: {
            line: 35,
            column: 25
          }
        }, {
          start: {
            line: 35,
            column: 29
          },
          end: {
            line: 35,
            column: 54
          }
        }],
        line: 35
      },
      "9": {
        loc: {
          start: {
            line: 45,
            column: 8
          },
          end: {
            line: 46,
            column: 25
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 45,
            column: 8
          },
          end: {
            line: 46,
            column: 25
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 45
      },
      "10": {
        loc: {
          start: {
            line: 47,
            column: 16
          },
          end: {
            line: 50,
            column: 60
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 47,
            column: 16
          },
          end: {
            line: 47,
            column: 62
          }
        }, {
          start: {
            line: 48,
            column: 12
          },
          end: {
            line: 48,
            column: 64
          }
        }, {
          start: {
            line: 49,
            column: 12
          },
          end: {
            line: 49,
            column: 68
          }
        }, {
          start: {
            line: 50,
            column: 12
          },
          end: {
            line: 50,
            column: 60
          }
        }],
        line: 47
      },
      "11": {
        loc: {
          start: {
            line: 55,
            column: 31
          },
          end: {
            line: 55,
            column: 43
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 55,
            column: 41
          },
          end: {
            line: 55,
            column: 43
          }
        }],
        line: 55
      },
      "12": {
        loc: {
          start: {
            line: 57,
            column: 8
          },
          end: {
            line: 59,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 57,
            column: 8
          },
          end: {
            line: 59,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 57
      },
      "13": {
        loc: {
          start: {
            line: 57,
            column: 12
          },
          end: {
            line: 57,
            column: 54
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 57,
            column: 12
          },
          end: {
            line: 57,
            column: 25
          }
        }, {
          start: {
            line: 57,
            column: 29
          },
          end: {
            line: 57,
            column: 54
          }
        }],
        line: 57
      },
      "14": {
        loc: {
          start: {
            line: 62,
            column: 8
          },
          end: {
            line: 63,
            column: 24
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 62,
            column: 8
          },
          end: {
            line: 63,
            column: 24
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 62
      },
      "15": {
        loc: {
          start: {
            line: 107,
            column: 53
          },
          end: {
            line: 107,
            column: 86
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 107,
            column: 53
          },
          end: {
            line: 107,
            column: 65
          }
        }, {
          start: {
            line: 107,
            column: 69
          },
          end: {
            line: 107,
            column: 86
          }
        }],
        line: 107
      },
      "16": {
        loc: {
          start: {
            line: 108,
            column: 38
          },
          end: {
            line: 108,
            column: 71
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 108,
            column: 38
          },
          end: {
            line: 108,
            column: 50
          }
        }, {
          start: {
            line: 108,
            column: 54
          },
          end: {
            line: 108,
            column: 71
          }
        }],
        line: 108
      },
      "17": {
        loc: {
          start: {
            line: 117,
            column: 8
          },
          end: {
            line: 123,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 117,
            column: 8
          },
          end: {
            line: 123,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 117
      },
      "18": {
        loc: {
          start: {
            line: 130,
            column: 8
          },
          end: {
            line: 138,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 130,
            column: 8
          },
          end: {
            line: 138,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 130
      },
      "19": {
        loc: {
          start: {
            line: 135,
            column: 27
          },
          end: {
            line: 135,
            column: 80
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 135,
            column: 37
          },
          end: {
            line: 135,
            column: 54
          }
        }, {
          start: {
            line: 135,
            column: 57
          },
          end: {
            line: 135,
            column: 80
          }
        }],
        line: 135
      },
      "20": {
        loc: {
          start: {
            line: 146,
            column: 8
          },
          end: {
            line: 148,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 146,
            column: 8
          },
          end: {
            line: 148,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 146
      },
      "21": {
        loc: {
          start: {
            line: 154,
            column: 12
          },
          end: {
            line: 162,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 154,
            column: 12
          },
          end: {
            line: 162,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 154
      },
      "22": {
        loc: {
          start: {
            line: 156,
            column: 16
          },
          end: {
            line: 161,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 156,
            column: 16
          },
          end: {
            line: 161,
            column: 17
          }
        }, {
          start: {
            line: 159,
            column: 21
          },
          end: {
            line: 161,
            column: 17
          }
        }],
        line: 156
      },
      "23": {
        loc: {
          start: {
            line: 159,
            column: 21
          },
          end: {
            line: 161,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 159,
            column: 21
          },
          end: {
            line: 161,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 159
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0
    },
    b: {
      "0": [0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0, 0],
      "10": [0, 0, 0, 0],
      "11": [0],
      "12": [0, 0],
      "13": [0, 0],
      "14": [0, 0],
      "15": [0, 0],
      "16": [0, 0],
      "17": [0, 0],
      "18": [0, 0],
      "19": [0, 0],
      "20": [0, 0],
      "21": [0, 0],
      "22": [0, 0],
      "23": [0, 0]
    },
    inputSourceMap: {
      file: "/home/mhugo/code/claude-code-flow/src/maestro/agent-reuse/WorkloadMonitor.ts",
      mappings: "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",
      names: [],
      sources: ["/home/mhugo/code/claude-code-flow/src/maestro/agent-reuse/WorkloadMonitor.ts"],
      sourcesContent: ["/**\n * Workload Monitor for Agent Pool Management\n * Monitors agent workloads and performance metrics\n */\n\nexport interface WorkloadMetrics {\n  cpuUsage: number;\n  memoryUsage: number;\n  activeTasks: number;\n  completedTasks: number;\n  averageTaskDuration: number;\n  errorRate: number;\n  timestamp: Date;\n}\n\nexport interface WorkloadThresholds {\n  maxCpuUsage: number;\n  maxMemoryUsage: number;\n  maxConcurrentTasks: number;\n  maxErrorRate: number;\n}\n\nexport class WorkloadMonitor {\n  private metrics: Map<string, WorkloadMetrics[]> = new Map();\n  private thresholds: WorkloadThresholds;\n\n  constructor(thresholds: Partial<WorkloadThresholds> = {}) {\n    this.thresholds = {\n      maxCpuUsage: thresholds.maxCpuUsage || 0.8,\n      maxMemoryUsage: thresholds.maxMemoryUsage || 0.9,\n      maxConcurrentTasks: thresholds.maxConcurrentTasks || 10,\n      maxErrorRate: thresholds.maxErrorRate || 0.1\n    };\n  }\n\n  /**\n   * Record metrics for an agent\n   */\n  recordMetrics(agentId: string, metrics: WorkloadMetrics): void {\n    if (!this.metrics.has(agentId)) {\n      this.metrics.set(agentId, []);\n    }\n    \n    const agentMetrics = this.metrics.get(agentId)!;\n    agentMetrics.push(metrics);\n    \n    // Keep only last 100 metrics entries\n    if (agentMetrics.length > 100) {\n      agentMetrics.shift();\n    }\n  }\n\n  /**\n   * Get current workload for an agent\n   */\n  getCurrentWorkload(agentId: string): WorkloadMetrics | null {\n    const agentMetrics = this.metrics.get(agentId);\n    if (!agentMetrics || agentMetrics.length === 0) {\n      return null;\n    }\n    return agentMetrics[agentMetrics.length - 1];\n  }\n\n  /**\n   * Check if agent is overloaded\n   */\n  isOverloaded(agentId: string): boolean {\n    const current = this.getCurrentWorkload(agentId);\n    if (!current) return false;\n\n    return (\n      current.cpuUsage > this.thresholds.maxCpuUsage ||\n      current.memoryUsage > this.thresholds.maxMemoryUsage ||\n      current.activeTasks > this.thresholds.maxConcurrentTasks ||\n      current.errorRate > this.thresholds.maxErrorRate\n    );\n  }\n\n  /**\n   * Get average metrics over a time period\n   */\n  getAverageMetrics(agentId: string, minutes: number = 10): WorkloadMetrics | null {\n    const agentMetrics = this.metrics.get(agentId);\n    if (!agentMetrics || agentMetrics.length === 0) {\n      return null;\n    }\n\n    const cutoff = new Date(Date.now() - minutes * 60 * 1000);\n    const recentMetrics = agentMetrics.filter(m => m.timestamp >= cutoff);\n    \n    if (recentMetrics.length === 0) return null;\n\n    const sum = recentMetrics.reduce((acc, m) => ({\n      cpuUsage: acc.cpuUsage + m.cpuUsage,\n      memoryUsage: acc.memoryUsage + m.memoryUsage,\n      activeTasks: acc.activeTasks + m.activeTasks,\n      completedTasks: acc.completedTasks + m.completedTasks,\n      averageTaskDuration: acc.averageTaskDuration + m.averageTaskDuration,\n      errorRate: acc.errorRate + m.errorRate\n    }), {\n      cpuUsage: 0,\n      memoryUsage: 0,\n      activeTasks: 0,\n      completedTasks: 0,\n      averageTaskDuration: 0,\n      errorRate: 0\n    });\n\n    const count = recentMetrics.length;\n    return {\n      cpuUsage: sum.cpuUsage / count,\n      memoryUsage: sum.memoryUsage / count,\n      activeTasks: Math.round(sum.activeTasks / count),\n      completedTasks: Math.round(sum.completedTasks / count),\n      averageTaskDuration: sum.averageTaskDuration / count,\n      errorRate: sum.errorRate / count,\n      timestamp: new Date()\n    };\n  }\n\n  /**\n   * Clear metrics for an agent\n   */\n  clearMetrics(agentId: string): void {\n    this.metrics.delete(agentId);\n  }\n\n  /**\n   * Get all monitored agents\n   */\n  getMonitoredAgents(): string[] {\n    return Array.from(this.metrics.keys());\n  }\n\n  /**\n   * Filter agents by availability based on workload\n   */\n  async filterByAvailability(\n    candidates: any[],\n    options: { capabilities: string[] }\n  ): Promise<any[]> {\n    return candidates.filter(candidate => {\n      const workload = this.getCurrentWorkload(candidate.id || candidate.agentId);\n      return !this.isOverloaded(candidate.id || candidate.agentId);\n    });\n  }\n\n  /**\n   * Track task assignment to an agent\n   */\n  trackTaskAssignment(agentId: string, taskId: string): void {\n    // Record task assignment for workload tracking\n    const current = this.getCurrentWorkload(agentId);\n    if (current) {\n      this.recordMetrics(agentId, {\n        ...current,\n        activeTasks: current.activeTasks + 1,\n        timestamp: new Date()\n      });\n    }\n  }\n\n  /**\n   * Track task completion for an agent\n   */\n  trackTaskCompletion(agentId: string, taskId: string, success: boolean): void {\n    const current = this.getCurrentWorkload(agentId);\n    if (current) {\n      this.recordMetrics(agentId, {\n        ...current,\n        activeTasks: Math.max(0, current.activeTasks - 1),\n        completedTasks: current.completedTasks + 1,\n        errorRate: success ? current.errorRate : current.errorRate + 0.1,\n        timestamp: new Date()\n      });\n    }\n  }\n\n  /**\n   * Get workload statistics for all agents\n   */\n  getWorkloadStatistics(): {\n    totalAgents: number;\n    averageLoad: number;\n    overloadedAgents: number;\n    idleAgents: number;\n  } {\n    const agents = Array.from(this.metrics.keys());\n    const totalAgents = agents.length;\n    \n    if (totalAgents === 0) {\n      return { totalAgents: 0, averageLoad: 0, overloadedAgents: 0, idleAgents: 0 };\n    }\n\n    let totalLoad = 0;\n    let overloadedCount = 0;\n    let idleCount = 0;\n\n    agents.forEach(agentId => {\n      const current = this.getCurrentWorkload(agentId);\n      if (current) {\n        totalLoad += current.activeTasks;\n        if (this.isOverloaded(agentId)) {\n          overloadedCount++;\n        } else if (current.activeTasks === 0) {\n          idleCount++;\n        }\n      }\n    });\n\n    return {\n      totalAgents,\n      averageLoad: totalLoad / totalAgents,\n      overloadedAgents: overloadedCount,\n      idleAgents: idleCount\n    };\n  }\n}"],
      version: 3
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "12c10d3aab9dad2f06ce8cd4e2f3eba79ac31461"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_1atpez0n3u = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_1atpez0n3u();
/**
 * Workload Monitor for Agent Pool Management
 * Monitors agent workloads and performance metrics
 */
export class WorkloadMonitor {
  metrics =
  /* istanbul ignore next */
  (cov_1atpez0n3u().s[0]++, new Map());
  thresholds;
  constructor(thresholds =
  /* istanbul ignore next */
  (cov_1atpez0n3u().b[0][0]++, {})) {
    /* istanbul ignore next */
    cov_1atpez0n3u().f[0]++;
    cov_1atpez0n3u().s[1]++;
    this.thresholds = {
      maxCpuUsage:
      /* istanbul ignore next */
      (cov_1atpez0n3u().b[1][0]++, thresholds.maxCpuUsage) ||
      /* istanbul ignore next */
      (cov_1atpez0n3u().b[1][1]++, 0.8),
      maxMemoryUsage:
      /* istanbul ignore next */
      (cov_1atpez0n3u().b[2][0]++, thresholds.maxMemoryUsage) ||
      /* istanbul ignore next */
      (cov_1atpez0n3u().b[2][1]++, 0.9),
      maxConcurrentTasks:
      /* istanbul ignore next */
      (cov_1atpez0n3u().b[3][0]++, thresholds.maxConcurrentTasks) ||
      /* istanbul ignore next */
      (cov_1atpez0n3u().b[3][1]++, 10),
      maxErrorRate:
      /* istanbul ignore next */
      (cov_1atpez0n3u().b[4][0]++, thresholds.maxErrorRate) ||
      /* istanbul ignore next */
      (cov_1atpez0n3u().b[4][1]++, 0.1)
    };
  }
  /**
   * Record metrics for an agent
   */
  recordMetrics(agentId, metrics) {
    /* istanbul ignore next */
    cov_1atpez0n3u().f[1]++;
    cov_1atpez0n3u().s[2]++;
    if (!this.metrics.has(agentId)) {
      /* istanbul ignore next */
      cov_1atpez0n3u().b[5][0]++;
      cov_1atpez0n3u().s[3]++;
      this.metrics.set(agentId, []);
    } else
    /* istanbul ignore next */
    {
      cov_1atpez0n3u().b[5][1]++;
    }
    const agentMetrics =
    /* istanbul ignore next */
    (cov_1atpez0n3u().s[4]++, this.metrics.get(agentId));
    /* istanbul ignore next */
    cov_1atpez0n3u().s[5]++;
    agentMetrics.push(metrics);
    // Keep only last 100 metrics entries
    /* istanbul ignore next */
    cov_1atpez0n3u().s[6]++;
    if (agentMetrics.length > 100) {
      /* istanbul ignore next */
      cov_1atpez0n3u().b[6][0]++;
      cov_1atpez0n3u().s[7]++;
      agentMetrics.shift();
    } else
    /* istanbul ignore next */
    {
      cov_1atpez0n3u().b[6][1]++;
    }
  }
  /**
   * Get current workload for an agent
   */
  getCurrentWorkload(agentId) {
    /* istanbul ignore next */
    cov_1atpez0n3u().f[2]++;
    const agentMetrics =
    /* istanbul ignore next */
    (cov_1atpez0n3u().s[8]++, this.metrics.get(agentId));
    /* istanbul ignore next */
    cov_1atpez0n3u().s[9]++;
    if (
    /* istanbul ignore next */
    (cov_1atpez0n3u().b[8][0]++, !agentMetrics) ||
    /* istanbul ignore next */
    (cov_1atpez0n3u().b[8][1]++, agentMetrics.length === 0)) {
      /* istanbul ignore next */
      cov_1atpez0n3u().b[7][0]++;
      cov_1atpez0n3u().s[10]++;
      return null;
    } else
    /* istanbul ignore next */
    {
      cov_1atpez0n3u().b[7][1]++;
    }
    cov_1atpez0n3u().s[11]++;
    return agentMetrics[agentMetrics.length - 1];
  }
  /**
   * Check if agent is overloaded
   */
  isOverloaded(agentId) {
    /* istanbul ignore next */
    cov_1atpez0n3u().f[3]++;
    const current =
    /* istanbul ignore next */
    (cov_1atpez0n3u().s[12]++, this.getCurrentWorkload(agentId));
    /* istanbul ignore next */
    cov_1atpez0n3u().s[13]++;
    if (!current) {
      /* istanbul ignore next */
      cov_1atpez0n3u().b[9][0]++;
      cov_1atpez0n3u().s[14]++;
      return false;
    } else
    /* istanbul ignore next */
    {
      cov_1atpez0n3u().b[9][1]++;
    }
    cov_1atpez0n3u().s[15]++;
    return /* istanbul ignore next */(cov_1atpez0n3u().b[10][0]++, current.cpuUsage > this.thresholds.maxCpuUsage) ||
    /* istanbul ignore next */
    (cov_1atpez0n3u().b[10][1]++, current.memoryUsage > this.thresholds.maxMemoryUsage) ||
    /* istanbul ignore next */
    (cov_1atpez0n3u().b[10][2]++, current.activeTasks > this.thresholds.maxConcurrentTasks) ||
    /* istanbul ignore next */
    (cov_1atpez0n3u().b[10][3]++, current.errorRate > this.thresholds.maxErrorRate);
  }
  /**
   * Get average metrics over a time period
   */
  getAverageMetrics(agentId, minutes =
  /* istanbul ignore next */
  (cov_1atpez0n3u().b[11][0]++, 10)) {
    /* istanbul ignore next */
    cov_1atpez0n3u().f[4]++;
    const agentMetrics =
    /* istanbul ignore next */
    (cov_1atpez0n3u().s[16]++, this.metrics.get(agentId));
    /* istanbul ignore next */
    cov_1atpez0n3u().s[17]++;
    if (
    /* istanbul ignore next */
    (cov_1atpez0n3u().b[13][0]++, !agentMetrics) ||
    /* istanbul ignore next */
    (cov_1atpez0n3u().b[13][1]++, agentMetrics.length === 0)) {
      /* istanbul ignore next */
      cov_1atpez0n3u().b[12][0]++;
      cov_1atpez0n3u().s[18]++;
      return null;
    } else
    /* istanbul ignore next */
    {
      cov_1atpez0n3u().b[12][1]++;
    }
    const cutoff =
    /* istanbul ignore next */
    (cov_1atpez0n3u().s[19]++, new Date(Date.now() - minutes * 60 * 1000));
    const recentMetrics =
    /* istanbul ignore next */
    (cov_1atpez0n3u().s[20]++, agentMetrics.filter(m => {
      /* istanbul ignore next */
      cov_1atpez0n3u().f[5]++;
      cov_1atpez0n3u().s[21]++;
      return m.timestamp >= cutoff;
    }));
    /* istanbul ignore next */
    cov_1atpez0n3u().s[22]++;
    if (recentMetrics.length === 0) {
      /* istanbul ignore next */
      cov_1atpez0n3u().b[14][0]++;
      cov_1atpez0n3u().s[23]++;
      return null;
    } else
    /* istanbul ignore next */
    {
      cov_1atpez0n3u().b[14][1]++;
    }
    const sum =
    /* istanbul ignore next */
    (cov_1atpez0n3u().s[24]++, recentMetrics.reduce((acc, m) => {
      /* istanbul ignore next */
      cov_1atpez0n3u().f[6]++;
      cov_1atpez0n3u().s[25]++;
      return {
        cpuUsage: acc.cpuUsage + m.cpuUsage,
        memoryUsage: acc.memoryUsage + m.memoryUsage,
        activeTasks: acc.activeTasks + m.activeTasks,
        completedTasks: acc.completedTasks + m.completedTasks,
        averageTaskDuration: acc.averageTaskDuration + m.averageTaskDuration,
        errorRate: acc.errorRate + m.errorRate
      };
    }, {
      cpuUsage: 0,
      memoryUsage: 0,
      activeTasks: 0,
      completedTasks: 0,
      averageTaskDuration: 0,
      errorRate: 0
    }));
    const count =
    /* istanbul ignore next */
    (cov_1atpez0n3u().s[26]++, recentMetrics.length);
    /* istanbul ignore next */
    cov_1atpez0n3u().s[27]++;
    return {
      cpuUsage: sum.cpuUsage / count,
      memoryUsage: sum.memoryUsage / count,
      activeTasks: Math.round(sum.activeTasks / count),
      completedTasks: Math.round(sum.completedTasks / count),
      averageTaskDuration: sum.averageTaskDuration / count,
      errorRate: sum.errorRate / count,
      timestamp: new Date()
    };
  }
  /**
   * Clear metrics for an agent
   */
  clearMetrics(agentId) {
    /* istanbul ignore next */
    cov_1atpez0n3u().f[7]++;
    cov_1atpez0n3u().s[28]++;
    this.metrics.delete(agentId);
  }
  /**
   * Get all monitored agents
   */
  getMonitoredAgents() {
    /* istanbul ignore next */
    cov_1atpez0n3u().f[8]++;
    cov_1atpez0n3u().s[29]++;
    return Array.from(this.metrics.keys());
  }
  /**
   * Filter agents by availability based on workload
   */
  async filterByAvailability(candidates, options) {
    /* istanbul ignore next */
    cov_1atpez0n3u().f[9]++;
    cov_1atpez0n3u().s[30]++;
    return candidates.filter(candidate => {
      /* istanbul ignore next */
      cov_1atpez0n3u().f[10]++;
      const workload =
      /* istanbul ignore next */
      (cov_1atpez0n3u().s[31]++, this.getCurrentWorkload(
      /* istanbul ignore next */
      (cov_1atpez0n3u().b[15][0]++, candidate.id) ||
      /* istanbul ignore next */
      (cov_1atpez0n3u().b[15][1]++, candidate.agentId)));
      /* istanbul ignore next */
      cov_1atpez0n3u().s[32]++;
      return !this.isOverloaded(
      /* istanbul ignore next */
      (cov_1atpez0n3u().b[16][0]++, candidate.id) ||
      /* istanbul ignore next */
      (cov_1atpez0n3u().b[16][1]++, candidate.agentId));
    });
  }
  /**
   * Track task assignment to an agent
   */
  trackTaskAssignment(agentId, taskId) {
    /* istanbul ignore next */
    cov_1atpez0n3u().f[11]++;
    // Record task assignment for workload tracking
    const current =
    /* istanbul ignore next */
    (cov_1atpez0n3u().s[33]++, this.getCurrentWorkload(agentId));
    /* istanbul ignore next */
    cov_1atpez0n3u().s[34]++;
    if (current) {
      /* istanbul ignore next */
      cov_1atpez0n3u().b[17][0]++;
      cov_1atpez0n3u().s[35]++;
      this.recordMetrics(agentId, {
        ...current,
        activeTasks: current.activeTasks + 1,
        timestamp: new Date()
      });
    } else
    /* istanbul ignore next */
    {
      cov_1atpez0n3u().b[17][1]++;
    }
  }
  /**
   * Track task completion for an agent
   */
  trackTaskCompletion(agentId, taskId, success) {
    /* istanbul ignore next */
    cov_1atpez0n3u().f[12]++;
    const current =
    /* istanbul ignore next */
    (cov_1atpez0n3u().s[36]++, this.getCurrentWorkload(agentId));
    /* istanbul ignore next */
    cov_1atpez0n3u().s[37]++;
    if (current) {
      /* istanbul ignore next */
      cov_1atpez0n3u().b[18][0]++;
      cov_1atpez0n3u().s[38]++;
      this.recordMetrics(agentId, {
        ...current,
        activeTasks: Math.max(0, current.activeTasks - 1),
        completedTasks: current.completedTasks + 1,
        errorRate: success ?
        /* istanbul ignore next */
        (cov_1atpez0n3u().b[19][0]++, current.errorRate) :
        /* istanbul ignore next */
        (cov_1atpez0n3u().b[19][1]++, current.errorRate + 0.1),
        timestamp: new Date()
      });
    } else
    /* istanbul ignore next */
    {
      cov_1atpez0n3u().b[18][1]++;
    }
  }
  /**
   * Get workload statistics for all agents
   */
  getWorkloadStatistics() {
    /* istanbul ignore next */
    cov_1atpez0n3u().f[13]++;
    const agents =
    /* istanbul ignore next */
    (cov_1atpez0n3u().s[39]++, Array.from(this.metrics.keys()));
    const totalAgents =
    /* istanbul ignore next */
    (cov_1atpez0n3u().s[40]++, agents.length);
    /* istanbul ignore next */
    cov_1atpez0n3u().s[41]++;
    if (totalAgents === 0) {
      /* istanbul ignore next */
      cov_1atpez0n3u().b[20][0]++;
      cov_1atpez0n3u().s[42]++;
      return {
        totalAgents: 0,
        averageLoad: 0,
        overloadedAgents: 0,
        idleAgents: 0
      };
    } else
    /* istanbul ignore next */
    {
      cov_1atpez0n3u().b[20][1]++;
    }
    let totalLoad =
    /* istanbul ignore next */
    (cov_1atpez0n3u().s[43]++, 0);
    let overloadedCount =
    /* istanbul ignore next */
    (cov_1atpez0n3u().s[44]++, 0);
    let idleCount =
    /* istanbul ignore next */
    (cov_1atpez0n3u().s[45]++, 0);
    /* istanbul ignore next */
    cov_1atpez0n3u().s[46]++;
    agents.forEach(agentId => {
      /* istanbul ignore next */
      cov_1atpez0n3u().f[14]++;
      const current =
      /* istanbul ignore next */
      (cov_1atpez0n3u().s[47]++, this.getCurrentWorkload(agentId));
      /* istanbul ignore next */
      cov_1atpez0n3u().s[48]++;
      if (current) {
        /* istanbul ignore next */
        cov_1atpez0n3u().b[21][0]++;
        cov_1atpez0n3u().s[49]++;
        totalLoad += current.activeTasks;
        /* istanbul ignore next */
        cov_1atpez0n3u().s[50]++;
        if (this.isOverloaded(agentId)) {
          /* istanbul ignore next */
          cov_1atpez0n3u().b[22][0]++;
          cov_1atpez0n3u().s[51]++;
          overloadedCount++;
        } else {
          /* istanbul ignore next */
          cov_1atpez0n3u().b[22][1]++;
          cov_1atpez0n3u().s[52]++;
          if (current.activeTasks === 0) {
            /* istanbul ignore next */
            cov_1atpez0n3u().b[23][0]++;
            cov_1atpez0n3u().s[53]++;
            idleCount++;
          } else
          /* istanbul ignore next */
          {
            cov_1atpez0n3u().b[23][1]++;
          }
        }
      } else
      /* istanbul ignore next */
      {
        cov_1atpez0n3u().b[21][1]++;
      }
    });
    /* istanbul ignore next */
    cov_1atpez0n3u().s[54]++;
    return {
      totalAgents,
      averageLoad: totalLoad / totalAgents,
      overloadedAgents: overloadedCount,
      idleAgents: idleCount
    };
  }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,