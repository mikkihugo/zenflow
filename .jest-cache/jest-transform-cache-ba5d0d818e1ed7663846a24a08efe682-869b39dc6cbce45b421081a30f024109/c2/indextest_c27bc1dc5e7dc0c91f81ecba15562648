befe26c9a036d2bca85db4e89157d2f7
/**
 * CLI Commands Integration Tests - TDD London School
 *
 * Tests the integration and interaction between different CLI command
 * components using mocks and focusing on behavior verification rather
 * than implementation details.
 */
import { jest } from '@jest/globals';
import { EventEmitter } from 'events';
// Mock implementation for integration testing
class MockCLICommandSystem extends EventEmitter {
    registry;
    parser;
    formatter;
    errorHandler;
    mockExecute;
    initialized = false;
    constructor(registry, parser, formatter, errorHandler, mockExecute) {
        super();
        this.registry = registry;
        this.parser = parser;
        this.formatter = formatter;
        this.errorHandler = errorHandler;
        this.mockExecute = mockExecute || jest.fn();
    }
    async initialize() {
        if (this.initialized)
            return;
        this.emit('initializing');
        // Initialize all components
        if ('initialize' in this.registry) {
            await this.registry.initialize();
        }
        this.initialized = true;
        this.emit('initialized');
    }
    async execute(input) {
        if (!this.initialized) {
            throw new Error('CLI system not initialized');
        }
        this.emit('execute-start', input);
        try {
            const result = await this.mockExecute(input);
            this.emit('execute-complete', result);
            return result;
        }
        catch (error) {
            this.emit('execute-error', error);
            throw error;
        }
    }
    async dispose() {
        this.emit('disposing');
        if ('dispose' in this.registry) {
            await this.registry.dispose();
        }
        this.removeAllListeners();
        this.initialized = false;
        this.emit('disposed');
    }
    // Test helpers
    isInitialized() {
        return this.initialized;
    }
    setExecuteFunction(fn) {
        this.mockExecute = fn;
    }
}
describe('CLI Commands Integration - TDD London', () => {
    let mockRegistry;
    let mockParser;
    let mockFormatter;
    let mockErrorHandler;
    let cliSystem;
    let mockExecute;
    beforeEach(() => {
        // Create mock components
        mockRegistry = {
            register: jest.fn(),
            unregister: jest.fn(),
            get: jest.fn(),
            has: jest.fn(),
            list: jest.fn(),
            findByCategory: jest.fn(),
            execute: jest.fn(),
            initialize: jest.fn(),
            dispose: jest.fn()
        };
        mockParser = {
            parse: jest.fn()
        };
        mockFormatter = {
            format: jest.fn()
        };
        mockErrorHandler = {
            handle: jest.fn()
        };
        mockExecute = jest.fn();
        // Create integrated system
        cliSystem = new MockCLICommandSystem(mockRegistry, mockParser, mockFormatter, mockErrorHandler, mockExecute);
    });
    afterEach(async () => {
        await cliSystem.dispose();
    });
    describe('system initialization behavior', () => {
        it('should initialize all components in correct order', async () => {
            // Arrange
            const initializeHandler = jest.fn();
            cliSystem.on('initializing', initializeHandler);
            cliSystem.on('initialized', initializeHandler);
            // Act
            await cliSystem.initialize();
            // Assert - verify initialization sequence
            expect(mockRegistry.initialize).toHaveBeenCalled();
            expect(initializeHandler).toHaveBeenCalledTimes(2);
            expect(cliSystem.isInitialized()).toBe(true);
        });
        it('should not reinitialize if already initialized', async () => {
            // Arrange
            await cliSystem.initialize();
            mockRegistry.initialize.mockClear();
            // Act
            await cliSystem.initialize();
            // Assert - verify no double initialization
            expect(mockRegistry.initialize).not.toHaveBeenCalled();
        });
        it('should emit initialization events', async () => {
            // Arrange
            const eventHandler = jest.fn();
            cliSystem.on('initializing', eventHandler);
            cliSystem.on('initialized', eventHandler);
            // Act
            await cliSystem.initialize();
            // Assert - verify event emissions
            expect(eventHandler).toHaveBeenCalledWith();
            expect(eventHandler).toHaveBeenCalledTimes(2);
        });
    });
    describe('command execution flow behavior', () => {
        beforeEach(async () => {
            await cliSystem.initialize();
        });
        it('should execute complete command flow with successful result', async () => {
            // Arrange
            const input = ['status', '--format', 'json'];
            const parseResult = {
                command: 'status',
                args: [],
                flags: { format: 'json' }
            };
            const commandResult = {
                success: true,
                exitCode: 0,
                message: 'Status retrieved',
                data: { active: true }
            };
            const formattedOutput = '{"active": true}';
            mockParser.parse.mockReturnValue(parseResult);
            mockRegistry.execute.mockResolvedValue(commandResult);
            mockFormatter.format.mockReturnValue(formattedOutput);
            const expectedResult = {
                success: true,
                exitCode: 0,
                output: formattedOutput
            };
            mockExecute.mockResolvedValue(expectedResult);
            // Act
            const result = await cliSystem.execute(input);
            // Assert - verify complete execution flow
            expect(mockExecute).toHaveBeenCalledWith(input);
            expect(result).toEqual(expectedResult);
        });
        it('should handle command execution errors through error handler', async () => {
            // Arrange
            const input = ['invalid-command'];
            const error = new Error('Command not found');
            const errorResult = {
                handled: true,
                exitCode: 127,
                message: 'Command not found'
            };
            mockExecute.mockRejectedValue(error);
            mockErrorHandler.handle.mockResolvedValue(errorResult);
            // Act & Assert
            await expect(cliSystem.execute(input)).rejects.toThrow('Command not found');
        });
        it('should emit execution events', async () => {
            // Arrange
            const eventHandler = jest.fn();
            cliSystem.on('execute-start', eventHandler);
            cliSystem.on('execute-complete', eventHandler);
            const input = ['test'];
            const expectedResult = {
                success: true,
                exitCode: 0
            };
            mockExecute.mockResolvedValue(expectedResult);
            // Act
            await cliSystem.execute(input);
            // Assert - verify event emissions
            expect(eventHandler).toHaveBeenCalledWith(input);
            expect(eventHandler).toHaveBeenCalledWith(expectedResult);
        });
        it('should throw error if system not initialized', async () => {
            // Arrange
            const uninitializedSystem = new MockCLICommandSystem(mockRegistry, mockParser, mockFormatter, mockErrorHandler);
            // Act & Assert
            await expect(uninitializedSystem.execute(['test']))
                .rejects.toThrow('CLI system not initialized');
        });
    });
    describe('component interaction behavior', () => {
        beforeEach(async () => {
            await cliSystem.initialize();
        });
        it('should coordinate between parser and registry', async () => {
            // Arrange
            const input = ['deploy', 'app', '--env', 'prod'];
            const parseResult = {
                command: 'deploy',
                args: ['app'],
                flags: { env: 'prod' }
            };
            const context = {
                args: ['app'],
                flags: { env: 'prod' },
                input,
                pkg: { name: 'cli', version: '1.0.0' },
                cwd: '/test',
                env: {},
                debug: false,
                verbose: false
            };
            const commandResult = {
                success: true,
                exitCode: 0,
                message: 'Deployed successfully'
            };
            mockParser.parse.mockReturnValue(parseResult);
            mockRegistry.execute.mockResolvedValue(commandResult);
            const executionResult = {
                success: true,
                exitCode: 0,
                output: 'Deployed successfully'
            };
            mockExecute.mockImplementation(async (inputArgs) => {
                // Simulate the real execution flow
                const parsed = mockParser.parse(inputArgs);
                if (parsed.command) {
                    const result = await mockRegistry.execute(parsed.command, context);
                    return {
                        success: result.success,
                        exitCode: result.exitCode,
                        output: result.message
                    };
                }
                return { success: false, exitCode: 1 };
            });
            // Act
            const result = await cliSystem.execute(input);
            // Assert - verify component coordination
            expect(mockParser.parse).toHaveBeenCalledWith(input);
            expect(mockRegistry.execute).toHaveBeenCalledWith('deploy', context);
            expect(result.success).toBe(true);
        });
        it('should format output using formatter when command succeeds', async () => {
            // Arrange
            const input = ['status'];
            const commandData = { agents: 3, active: true };
            const formattedOutput = 'Agents: 3, Active: true';
            mockExecute.mockImplementation(async () => {
                const formatted = mockFormatter.format(commandData, { format: 'table' });
                return {
                    success: true,
                    exitCode: 0,
                    output: formatted
                };
            });
            mockFormatter.format.mockReturnValue(formattedOutput);
            // Act
            const result = await cliSystem.execute(input);
            // Assert - verify formatter usage
            expect(mockFormatter.format).toHaveBeenCalledWith(commandData, { format: 'table' });
            expect(result.output).toBe(formattedOutput);
        });
        it('should use error handler when command fails', async () => {
            // Arrange
            const input = ['failing-command'];
            const error = new Error('Command execution failed');
            const errorResult = {
                handled: true,
                exitCode: 1,
                message: 'Execution failed gracefully'
            };
            mockExecute.mockImplementation(async () => {
                throw error;
            });
            mockErrorHandler.handle.mockResolvedValue(errorResult);
            // Act
            try {
                await cliSystem.execute(input);
            }
            catch (thrownError) {
                // Expected to throw, but error handler should have been called
            }
            // Assert - verify error handler usage
            // Note: The actual integration would handle the error and not re-throw
            // This test verifies the component interaction pattern
            expect(mockExecute).toHaveBeenCalledWith(input);
        });
    });
    describe('command registration integration behavior', () => {
        it('should register command and make it available for execution', async () => {
            // Arrange
            const commandConfig = {
                name: 'test-command',
                description: 'Test command',
                category: 'core'
            };
            const commandMetadata = {
                config: commandConfig,
                handler: jest.fn().mockResolvedValue({
                    success: true,
                    exitCode: 0,
                    message: 'Test executed'
                }),
                registeredAt: new Date(),
                available: true
            };
            await cliSystem.initialize();
            // Act
            cliSystem.registry.register(commandMetadata);
            // Assert - verify registration
            expect(mockRegistry.register).toHaveBeenCalledWith(commandMetadata);
        });
        it('should find and execute registered commands by category', async () => {
            // Arrange
            const coreCommands = [
                { config: { name: 'status', category: 'core' } },
                { config: { name: 'init', category: 'core' } }
            ];
            mockRegistry.findByCategory.mockReturnValue(coreCommands);
            await cliSystem.initialize();
            // Act
            const commands = cliSystem.registry.findByCategory('core');
            // Assert - verify category-based discovery
            expect(mockRegistry.findByCategory).toHaveBeenCalledWith('core');
            expect(commands).toEqual(coreCommands);
        });
    });
    describe('help and documentation behavior', () => {
        beforeEach(async () => {
            await cliSystem.initialize();
        });
        it('should provide help for registered commands', async () => {
            // Arrange
            const commands = [
                {
                    config: {
                        name: 'status',
                        description: 'Show system status',
                        usage: 'cli status [options]',
                        examples: ['cli status', 'cli status --format json']
                    }
                },
                {
                    config: {
                        name: 'deploy',
                        description: 'Deploy application',
                        usage: 'cli deploy <target>',
                        examples: ['cli deploy app']
                    }
                }
            ];
            mockRegistry.list.mockReturnValue(commands);
            const helpOutput = commands.map(cmd => `${cmd.config.name}: ${cmd.config.description}`).join('\n');
            mockFormatter.format.mockReturnValue(helpOutput);
            // Act
            const result = mockFormatter.format(commands, { format: 'help' });
            // Assert - verify help generation
            expect(result).toContain('status: Show system status');
            expect(result).toContain('deploy: Deploy application');
        });
    });
    describe('lifecycle and cleanup behavior', () => {
        it('should dispose all components in correct order', async () => {
            // Arrange
            const disposeHandler = jest.fn();
            cliSystem.on('disposing', disposeHandler);
            cliSystem.on('disposed', disposeHandler);
            await cliSystem.initialize();
            // Act
            await cliSystem.dispose();
            // Assert - verify disposal sequence
            expect(mockRegistry.dispose).toHaveBeenCalled();
            expect(disposeHandler).toHaveBeenCalledTimes(2);
            expect(cliSystem.isInitialized()).toBe(false);
        });
        it('should remove all event listeners on disposal', async () => {
            // Arrange
            const eventHandler = jest.fn();
            cliSystem.on('test-event', eventHandler);
            await cliSystem.initialize();
            expect(cliSystem.listenerCount('test-event')).toBe(1);
            // Act
            await cliSystem.dispose();
            // Assert - verify cleanup
            expect(cliSystem.listenerCount('test-event')).toBe(0);
        });
    });
    describe('error propagation behavior', () => {
        beforeEach(async () => {
            await cliSystem.initialize();
        });
        it('should emit error events during execution failures', async () => {
            // Arrange
            const errorHandler = jest.fn();
            cliSystem.on('execute-error', errorHandler);
            const input = ['error-command'];
            const error = new Error('Execution error');
            mockExecute.mockRejectedValue(error);
            // Act
            try {
                await cliSystem.execute(input);
            }
            catch (e) {
                // Expected to throw
            }
            // Assert - verify error event emission
            expect(errorHandler).toHaveBeenCalledWith(error);
        });
        it('should handle initialization errors gracefully', async () => {
            // Arrange
            const initError = new Error('Initialization failed');
            mockRegistry.initialize.mockRejectedValue(initError);
            const errorSystem = new MockCLICommandSystem(mockRegistry, mockParser, mockFormatter, mockErrorHandler);
            // Act & Assert
            await expect(errorSystem.initialize()).rejects.toThrow('Initialization failed');
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,