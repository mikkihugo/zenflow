{"file":"/home/mhugo/code/claude-code-flow/src/__tests__/unit/london/cli-commands/index.test.ts","mappings":"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","names":[],"sources":["/home/mhugo/code/claude-code-flow/src/__tests__/unit/london/cli-commands/index.test.ts"],"sourcesContent":["/**\n * CLI Commands Integration Tests - TDD London School\n * \n * Tests the integration and interaction between different CLI command\n * components using mocks and focusing on behavior verification rather\n * than implementation details.\n */\n\nimport { jest } from '@jest/globals';\nimport { EventEmitter } from 'events';\n\n// Import the components we're testing\nimport type { \n  CommandRegistry,\n  CommandMetadata,\n  CommandContext,\n  CommandResult,\n  CommandConfig\n} from '../../../../cli/types/index.js';\n\n// Mock the full CLI command system integration\ninterface CLICommandSystem {\n  registry: CommandRegistry;\n  parser: ArgumentParser;\n  formatter: OutputFormatter;\n  errorHandler: ErrorHandler;\n  initialize(): Promise<void>;\n  execute(input: string[]): Promise<ExecutionResult>;\n  dispose(): Promise<void>;\n}\n\ninterface ArgumentParser {\n  parse(args: string[]): ParseResult;\n}\n\ninterface OutputFormatter {\n  format(data: unknown, options?: any): string;\n}\n\ninterface ErrorHandler {\n  handle(error: Error, context?: any): Promise<ErrorResult>;\n}\n\ninterface ParseResult {\n  command: string | null;\n  args: string[];\n  flags: Record<string, unknown>;\n}\n\ninterface ErrorResult {\n  handled: boolean;\n  exitCode: number;\n  message: string;\n}\n\ninterface ExecutionResult {\n  success: boolean;\n  exitCode: number;\n  output?: string;\n  error?: string;\n}\n\n// Mock implementation for integration testing\nclass MockCLICommandSystem extends EventEmitter implements CLICommandSystem {\n  public registry: CommandRegistry;\n  public parser: ArgumentParser;\n  public formatter: OutputFormatter;\n  public errorHandler: ErrorHandler;\n  \n  private mockExecute: jest.Mock;\n  private initialized = false;\n\n  constructor(\n    registry: CommandRegistry,\n    parser: ArgumentParser,\n    formatter: OutputFormatter,\n    errorHandler: ErrorHandler,\n    mockExecute?: jest.Mock\n  ) {\n    super();\n    this.registry = registry;\n    this.parser = parser;\n    this.formatter = formatter;\n    this.errorHandler = errorHandler;\n    this.mockExecute = mockExecute || jest.fn();\n  }\n\n  async initialize(): Promise<void> {\n    if (this.initialized) return;\n    \n    this.emit('initializing');\n    \n    // Initialize all components\n    if ('initialize' in this.registry) {\n      await (this.registry as any).initialize();\n    }\n    \n    this.initialized = true;\n    this.emit('initialized');\n  }\n\n  async execute(input: string[]): Promise<ExecutionResult> {\n    if (!this.initialized) {\n      throw new Error('CLI system not initialized');\n    }\n\n    this.emit('execute-start', input);\n    \n    try {\n      const result = await this.mockExecute(input);\n      this.emit('execute-complete', result);\n      return result;\n    } catch (error) {\n      this.emit('execute-error', error);\n      throw error;\n    }\n  }\n\n  async dispose(): Promise<void> {\n    this.emit('disposing');\n    \n    if ('dispose' in this.registry) {\n      await (this.registry as any).dispose();\n    }\n    \n    this.removeAllListeners();\n    this.initialized = false;\n    this.emit('disposed');\n  }\n\n  // Test helpers\n  isInitialized(): boolean {\n    return this.initialized;\n  }\n\n  setExecuteFunction(fn: jest.Mock): void {\n    this.mockExecute = fn;\n  }\n}\n\ndescribe('CLI Commands Integration - TDD London', () => {\n  let mockRegistry: jest.Mocked<CommandRegistry>;\n  let mockParser: jest.Mocked<ArgumentParser>;\n  let mockFormatter: jest.Mocked<OutputFormatter>;\n  let mockErrorHandler: jest.Mocked<ErrorHandler>;\n  let cliSystem: MockCLICommandSystem;\n  let mockExecute: jest.Mock;\n\n  beforeEach(() => {\n    // Create mock components\n    mockRegistry = {\n      register: jest.fn(),\n      unregister: jest.fn(),\n      get: jest.fn(),\n      has: jest.fn(),\n      list: jest.fn(),\n      findByCategory: jest.fn(),\n      execute: jest.fn(),\n      initialize: jest.fn(),\n      dispose: jest.fn()\n    } as any;\n\n    mockParser = {\n      parse: jest.fn()\n    };\n\n    mockFormatter = {\n      format: jest.fn()\n    };\n\n    mockErrorHandler = {\n      handle: jest.fn()\n    };\n\n    mockExecute = jest.fn();\n\n    // Create integrated system\n    cliSystem = new MockCLICommandSystem(\n      mockRegistry,\n      mockParser,\n      mockFormatter,\n      mockErrorHandler,\n      mockExecute\n    );\n  });\n\n  afterEach(async () => {\n    await cliSystem.dispose();\n  });\n\n  describe('system initialization behavior', () => {\n    it('should initialize all components in correct order', async () => {\n      // Arrange\n      const initializeHandler = jest.fn();\n      cliSystem.on('initializing', initializeHandler);\n      cliSystem.on('initialized', initializeHandler);\n\n      // Act\n      await cliSystem.initialize();\n\n      // Assert - verify initialization sequence\n      expect(mockRegistry.initialize).toHaveBeenCalled();\n      expect(initializeHandler).toHaveBeenCalledTimes(2);\n      expect(cliSystem.isInitialized()).toBe(true);\n    });\n\n    it('should not reinitialize if already initialized', async () => {\n      // Arrange\n      await cliSystem.initialize();\n      mockRegistry.initialize.mockClear();\n\n      // Act\n      await cliSystem.initialize();\n\n      // Assert - verify no double initialization\n      expect(mockRegistry.initialize).not.toHaveBeenCalled();\n    });\n\n    it('should emit initialization events', async () => {\n      // Arrange\n      const eventHandler = jest.fn();\n      cliSystem.on('initializing', eventHandler);\n      cliSystem.on('initialized', eventHandler);\n\n      // Act\n      await cliSystem.initialize();\n\n      // Assert - verify event emissions\n      expect(eventHandler).toHaveBeenCalledWith();\n      expect(eventHandler).toHaveBeenCalledTimes(2);\n    });\n  });\n\n  describe('command execution flow behavior', () => {\n    beforeEach(async () => {\n      await cliSystem.initialize();\n    });\n\n    it('should execute complete command flow with successful result', async () => {\n      // Arrange\n      const input = ['status', '--format', 'json'];\n      const parseResult: ParseResult = {\n        command: 'status',\n        args: [],\n        flags: { format: 'json' }\n      };\n      const commandResult: CommandResult = {\n        success: true,\n        exitCode: 0,\n        message: 'Status retrieved',\n        data: { active: true }\n      };\n      const formattedOutput = '{\"active\": true}';\n\n      mockParser.parse.mockReturnValue(parseResult);\n      mockRegistry.execute.mockResolvedValue(commandResult);\n      mockFormatter.format.mockReturnValue(formattedOutput);\n\n      const expectedResult: ExecutionResult = {\n        success: true,\n        exitCode: 0,\n        output: formattedOutput\n      };\n\n      mockExecute.mockResolvedValue(expectedResult);\n\n      // Act\n      const result = await cliSystem.execute(input);\n\n      // Assert - verify complete execution flow\n      expect(mockExecute).toHaveBeenCalledWith(input);\n      expect(result).toEqual(expectedResult);\n    });\n\n    it('should handle command execution errors through error handler', async () => {\n      // Arrange\n      const input = ['invalid-command'];\n      const error = new Error('Command not found');\n      const errorResult: ErrorResult = {\n        handled: true,\n        exitCode: 127,\n        message: 'Command not found'\n      };\n\n      mockExecute.mockRejectedValue(error);\n      mockErrorHandler.handle.mockResolvedValue(errorResult);\n\n      // Act & Assert\n      await expect(cliSystem.execute(input)).rejects.toThrow('Command not found');\n    });\n\n    it('should emit execution events', async () => {\n      // Arrange\n      const eventHandler = jest.fn();\n      cliSystem.on('execute-start', eventHandler);\n      cliSystem.on('execute-complete', eventHandler);\n\n      const input = ['test'];\n      const expectedResult: ExecutionResult = {\n        success: true,\n        exitCode: 0\n      };\n\n      mockExecute.mockResolvedValue(expectedResult);\n\n      // Act\n      await cliSystem.execute(input);\n\n      // Assert - verify event emissions\n      expect(eventHandler).toHaveBeenCalledWith(input);\n      expect(eventHandler).toHaveBeenCalledWith(expectedResult);\n    });\n\n    it('should throw error if system not initialized', async () => {\n      // Arrange\n      const uninitializedSystem = new MockCLICommandSystem(\n        mockRegistry,\n        mockParser,\n        mockFormatter,\n        mockErrorHandler\n      );\n\n      // Act & Assert\n      await expect(uninitializedSystem.execute(['test']))\n        .rejects.toThrow('CLI system not initialized');\n    });\n  });\n\n  describe('component interaction behavior', () => {\n    beforeEach(async () => {\n      await cliSystem.initialize();\n    });\n\n    it('should coordinate between parser and registry', async () => {\n      // Arrange\n      const input = ['deploy', 'app', '--env', 'prod'];\n      const parseResult: ParseResult = {\n        command: 'deploy',\n        args: ['app'],\n        flags: { env: 'prod' }\n      };\n\n      const context: CommandContext = {\n        args: ['app'],\n        flags: { env: 'prod' },\n        input,\n        pkg: { name: 'cli', version: '1.0.0' },\n        cwd: '/test',\n        env: {},\n        debug: false,\n        verbose: false\n      };\n\n      const commandResult: CommandResult = {\n        success: true,\n        exitCode: 0,\n        message: 'Deployed successfully'\n      };\n\n      mockParser.parse.mockReturnValue(parseResult);\n      mockRegistry.execute.mockResolvedValue(commandResult);\n\n      const executionResult: ExecutionResult = {\n        success: true,\n        exitCode: 0,\n        output: 'Deployed successfully'\n      };\n\n      mockExecute.mockImplementation(async (inputArgs) => {\n        // Simulate the real execution flow\n        const parsed = mockParser.parse(inputArgs);\n        if (parsed.command) {\n          const result = await mockRegistry.execute(parsed.command, context);\n          return {\n            success: result.success,\n            exitCode: result.exitCode,\n            output: result.message\n          };\n        }\n        return { success: false, exitCode: 1 };\n      });\n\n      // Act\n      const result = await cliSystem.execute(input);\n\n      // Assert - verify component coordination\n      expect(mockParser.parse).toHaveBeenCalledWith(input);\n      expect(mockRegistry.execute).toHaveBeenCalledWith('deploy', context);\n      expect(result.success).toBe(true);\n    });\n\n    it('should format output using formatter when command succeeds', async () => {\n      // Arrange\n      const input = ['status'];\n      const commandData = { agents: 3, active: true };\n      const formattedOutput = 'Agents: 3, Active: true';\n\n      mockExecute.mockImplementation(async () => {\n        const formatted = mockFormatter.format(commandData, { format: 'table' });\n        return {\n          success: true,\n          exitCode: 0,\n          output: formatted\n        };\n      });\n\n      mockFormatter.format.mockReturnValue(formattedOutput);\n\n      // Act\n      const result = await cliSystem.execute(input);\n\n      // Assert - verify formatter usage\n      expect(mockFormatter.format).toHaveBeenCalledWith(commandData, { format: 'table' });\n      expect(result.output).toBe(formattedOutput);\n    });\n\n    it('should use error handler when command fails', async () => {\n      // Arrange\n      const input = ['failing-command'];\n      const error = new Error('Command execution failed');\n      const errorResult: ErrorResult = {\n        handled: true,\n        exitCode: 1,\n        message: 'Execution failed gracefully'\n      };\n\n      mockExecute.mockImplementation(async () => {\n        throw error;\n      });\n\n      mockErrorHandler.handle.mockResolvedValue(errorResult);\n\n      // Act\n      try {\n        await cliSystem.execute(input);\n      } catch (thrownError) {\n        // Expected to throw, but error handler should have been called\n      }\n\n      // Assert - verify error handler usage\n      // Note: The actual integration would handle the error and not re-throw\n      // This test verifies the component interaction pattern\n      expect(mockExecute).toHaveBeenCalledWith(input);\n    });\n  });\n\n  describe('command registration integration behavior', () => {\n    it('should register command and make it available for execution', async () => {\n      // Arrange\n      const commandConfig: CommandConfig = {\n        name: 'test-command',\n        description: 'Test command',\n        category: 'core'\n      };\n\n      const commandMetadata: CommandMetadata = {\n        config: commandConfig,\n        handler: jest.fn().mockResolvedValue({\n          success: true,\n          exitCode: 0,\n          message: 'Test executed'\n        }),\n        registeredAt: new Date(),\n        available: true\n      };\n\n      await cliSystem.initialize();\n\n      // Act\n      cliSystem.registry.register(commandMetadata);\n\n      // Assert - verify registration\n      expect(mockRegistry.register).toHaveBeenCalledWith(commandMetadata);\n    });\n\n    it('should find and execute registered commands by category', async () => {\n      // Arrange\n      const coreCommands = [\n        { config: { name: 'status', category: 'core' } },\n        { config: { name: 'init', category: 'core' } }\n      ];\n\n      mockRegistry.findByCategory.mockReturnValue(coreCommands as CommandMetadata[]);\n\n      await cliSystem.initialize();\n\n      // Act\n      const commands = cliSystem.registry.findByCategory('core');\n\n      // Assert - verify category-based discovery\n      expect(mockRegistry.findByCategory).toHaveBeenCalledWith('core');\n      expect(commands).toEqual(coreCommands);\n    });\n  });\n\n  describe('help and documentation behavior', () => {\n    beforeEach(async () => {\n      await cliSystem.initialize();\n    });\n\n    it('should provide help for registered commands', async () => {\n      // Arrange\n      const commands = [\n        {\n          config: {\n            name: 'status',\n            description: 'Show system status',\n            usage: 'cli status [options]',\n            examples: ['cli status', 'cli status --format json']\n          }\n        },\n        {\n          config: {\n            name: 'deploy',\n            description: 'Deploy application',\n            usage: 'cli deploy <target>',\n            examples: ['cli deploy app']\n          }\n        }\n      ];\n\n      mockRegistry.list.mockReturnValue(commands as CommandMetadata[]);\n\n      const helpOutput = commands.map(cmd => \n        `${cmd.config.name}: ${cmd.config.description}`\n      ).join('\\n');\n\n      mockFormatter.format.mockReturnValue(helpOutput);\n\n      // Act\n      const result = mockFormatter.format(commands, { format: 'help' });\n\n      // Assert - verify help generation\n      expect(result).toContain('status: Show system status');\n      expect(result).toContain('deploy: Deploy application');\n    });\n  });\n\n  describe('lifecycle and cleanup behavior', () => {\n    it('should dispose all components in correct order', async () => {\n      // Arrange\n      const disposeHandler = jest.fn();\n      cliSystem.on('disposing', disposeHandler);\n      cliSystem.on('disposed', disposeHandler);\n\n      await cliSystem.initialize();\n\n      // Act\n      await cliSystem.dispose();\n\n      // Assert - verify disposal sequence\n      expect(mockRegistry.dispose).toHaveBeenCalled();\n      expect(disposeHandler).toHaveBeenCalledTimes(2);\n      expect(cliSystem.isInitialized()).toBe(false);\n    });\n\n    it('should remove all event listeners on disposal', async () => {\n      // Arrange\n      const eventHandler = jest.fn();\n      cliSystem.on('test-event', eventHandler);\n\n      await cliSystem.initialize();\n      expect(cliSystem.listenerCount('test-event')).toBe(1);\n\n      // Act\n      await cliSystem.dispose();\n\n      // Assert - verify cleanup\n      expect(cliSystem.listenerCount('test-event')).toBe(0);\n    });\n  });\n\n  describe('error propagation behavior', () => {\n    beforeEach(async () => {\n      await cliSystem.initialize();\n    });\n\n    it('should emit error events during execution failures', async () => {\n      // Arrange\n      const errorHandler = jest.fn();\n      cliSystem.on('execute-error', errorHandler);\n\n      const input = ['error-command'];\n      const error = new Error('Execution error');\n      mockExecute.mockRejectedValue(error);\n\n      // Act\n      try {\n        await cliSystem.execute(input);\n      } catch (e) {\n        // Expected to throw\n      }\n\n      // Assert - verify error event emission\n      expect(errorHandler).toHaveBeenCalledWith(error);\n    });\n\n    it('should handle initialization errors gracefully', async () => {\n      // Arrange\n      const initError = new Error('Initialization failed');\n      mockRegistry.initialize.mockRejectedValue(initError);\n\n      const errorSystem = new MockCLICommandSystem(\n        mockRegistry,\n        mockParser,\n        mockFormatter,\n        mockErrorHandler\n      );\n\n      // Act & Assert\n      await expect(errorSystem.initialize()).rejects.toThrow('Initialization failed');\n    });\n  });\n});"],"version":3}