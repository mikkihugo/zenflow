{"version":3,"names":["cov_1vlq3jokzh","actualCoverage","HiveMindPlannerService","AgentManager","AgentRegistry","HiveMind","DistributedMemorySystem","MockLogger","logs","s","info","message","f","push","console","log","warn","error","getLogs","clearLogs","MaestroIntegrationTest","logger","memorySystem","agentManager","agentRegistry","hiveMind","plannerService","constructor","runTests","results","errors","testSystemInitialization","testTaskPlannerTemplate","testAgentCreationAndRegistration","testIntegratedTaskPlanning","testHiveMindFallback","testStatusReporting","success","errorMsg","Error","b","String","cleanup","initialize","name","topology","queenMode","maxAgents","consensusThreshold","memoryTTL","autoSpawn","enableConsensus","enableMemory","enableCommunication","agentId","createAgent","type","capabilities","maxConcurrentTasks","priority","stopAgent","agents","queryAgents","namePattern","length","id","createWithAgentManager","testRequest","featureName","designContent","requirements","timeoutMs","response","generateTaskPlan","taskMarkdown","plannerType","fallbackPlannerService","spawnAgent","status","getStatus","availableTaskPlanners","availableArchitects","availableSpecialists","totalAgents","agentManagerAvailable","agentRegistryAvailable","shutdown","getTestLogs","runMaestroIntegrationTests","testRunner","forEach","result","process","exit","require","main","module","catch"],"sources":["/home/mhugo/code/claude-code-flow/src/maestro/tests/integration-test.ts"],"sourcesContent":["/**\n * Integration Test for Maestro + AgentManager Integration\n * \n * Tests the complete integration between HiveMindPlannerService,\n * AgentManager task-planner template, and AgentRegistry systems.\n */\n\nimport { HiveMindPlannerService } from '../services/HiveMindPlannerService.js';\nimport { AgentManager } from '../../agents/agent-manager.js';\nimport { AgentRegistry } from '../../agents/agent-registry.js';\nimport { HiveMind } from '../../hive-mind/core/HiveMind.js';\nimport { DistributedMemorySystem } from '../../memory/distributed-memory.js';\n\ninterface TestLogger {\n  info(message: string): void;\n  warn(message: string): void;\n  error(message: string): void;\n}\n\n/**\n * Mock logger for testing\n */\nclass MockLogger implements TestLogger {\n  private logs: string[] = [];\n\n  info(message: string): void {\n    this.logs.push(`INFO: ${message}`);\n    console.log(`[TEST INFO] ${message}`);\n  }\n\n  warn(message: string): void {\n    this.logs.push(`WARN: ${message}`);\n    console.log(`[TEST WARN] ${message}`);\n  }\n\n  error(message: string): void {\n    this.logs.push(`ERROR: ${message}`);\n    console.log(`[TEST ERROR] ${message}`);\n  }\n\n  getLogs(): string[] {\n    return [...this.logs];\n  }\n\n  clearLogs(): void {\n    this.logs = [];\n  }\n}\n\n/**\n * Integration test runner\n */\nexport class MaestroIntegrationTest {\n  private logger: MockLogger;\n  private memorySystem?: DistributedMemorySystem;\n  private agentManager?: AgentManager;\n  private agentRegistry?: AgentRegistry;\n  private hiveMind?: HiveMind;\n  private plannerService?: HiveMindPlannerService;\n\n  constructor() {\n    this.logger = new MockLogger();\n  }\n\n  /**\n   * Run complete integration test suite\n   */\n  async runTests(): Promise<{\n    success: boolean;\n    results: string[];\n    errors: string[];\n  }> {\n    const results: string[] = [];\n    const errors: string[] = [];\n\n    try {\n      results.push('🚀 Starting Maestro AgentManager Integration Tests...');\n\n      // Test 1: Initialize all systems\n      await this.testSystemInitialization();\n      results.push('✅ Test 1: System initialization successful');\n\n      // Test 2: Verify AgentManager task-planner template\n      await this.testTaskPlannerTemplate();\n      results.push('✅ Test 2: Task-planner template verification successful');\n\n      // Test 3: Test agent creation and registration\n      await this.testAgentCreationAndRegistration();\n      results.push('✅ Test 3: Agent creation and registration successful');\n\n      // Test 4: Test integrated task planning\n      await this.testIntegratedTaskPlanning();\n      results.push('✅ Test 4: Integrated task planning successful');\n\n      // Test 5: Test fallback to hive mind agents\n      await this.testHiveMindFallback();\n      results.push('✅ Test 5: Hive mind fallback successful');\n\n      // Test 6: Test status reporting\n      await this.testStatusReporting();\n      results.push('✅ Test 6: Status reporting successful');\n\n      results.push('🎉 All integration tests passed successfully!');\n\n      return {\n        success: true,\n        results,\n        errors\n      };\n\n    } catch (error) {\n      const errorMsg = `Integration test failed: ${error instanceof Error ? error.message : String(error)}`;\n      errors.push(errorMsg);\n      this.logger.error(errorMsg);\n\n      return {\n        success: false,\n        results,\n        errors\n      };\n    } finally {\n      await this.cleanup();\n    }\n  }\n\n  /**\n   * Test 1: Initialize all required systems\n   */\n  private async testSystemInitialization(): Promise<void> {\n    this.logger.info('Initializing distributed memory system...');\n    this.memorySystem = new DistributedMemorySystem();\n    await this.memorySystem.initialize();\n\n    this.logger.info('Initializing AgentManager...');\n    this.agentManager = new AgentManager(\n      {} as any, // config\n      {} as any, // eventBus\n      this.logger as any,\n      this.memorySystem as any\n    );\n    await this.agentManager.initialize();\n\n    this.logger.info('Initializing AgentRegistry...');\n    this.agentRegistry = new AgentRegistry(this.memorySystem, 'test-agents');\n    await this.agentRegistry.initialize();\n\n    this.logger.info('Initializing HiveMind...');\n    this.hiveMind = new HiveMind({\n      name: 'test-hive',\n      topology: 'hierarchical',\n      queenMode: 'strategic',\n      maxAgents: 5,\n      consensusThreshold: 0.66,\n      memoryTTL: 3600000,\n      autoSpawn: false,\n      enableConsensus: false,\n      enableMemory: true,\n      enableCommunication: false\n    });\n    await this.hiveMind.initialize();\n\n    this.logger.info('All systems initialized successfully');\n  }\n\n  /**\n   * Test 2: Verify AgentManager has task-planner template\n   */\n  private async testTaskPlannerTemplate(): Promise<void> {\n    if (!this.agentManager) {\n      throw new Error('AgentManager not initialized');\n    }\n\n    this.logger.info('Checking for task-planner template in AgentManager...');\n    \n    // Create a task-planner agent to verify template exists\n    const agentId = await this.agentManager.createAgent('task-planner', {\n      name: 'Test Task Planner',\n      type: 'task-planner',\n      capabilities: ['project-management', 'task-breakdown', 'agile-planning'],\n      maxConcurrentTasks: 1,\n      priority: 90\n    });\n\n    if (!agentId) {\n      throw new Error('Failed to create task-planner agent - template may not exist');\n    }\n\n    this.logger.info(`Task-planner agent created successfully: ${agentId}`);\n    \n    // Clean up the test agent\n    await this.agentManager.stopAgent(agentId);\n  }\n\n  /**\n   * Test 3: Test agent creation and registration flow\n   */\n  private async testAgentCreationAndRegistration(): Promise<void> {\n    if (!this.agentManager || !this.agentRegistry) {\n      throw new Error('Required systems not initialized');\n    }\n\n    this.logger.info('Testing agent creation and registration flow...');\n\n    // Create agent through AgentManager\n    const agentId = await this.agentManager.createAgent('task-planner', {\n      name: 'Integration Test Planner',\n      type: 'task-planner',\n      capabilities: ['project-management', 'task-breakdown'],\n      maxConcurrentTasks: 1,\n      priority: 85\n    });\n\n    // Verify agent can be queried through registry\n    const agents = await this.agentRegistry.queryAgents({\n      type: 'task-planner' as any,\n      namePattern: 'Integration Test Planner'\n    });\n\n    if (agents.length === 0) {\n      throw new Error('Agent not found in registry after creation');\n    }\n\n    this.logger.info(`Agent registered successfully in registry: ${agents[0].id.id}`);\n\n    // Clean up\n    await this.agentManager.stopAgent(agentId);\n  }\n\n  /**\n   * Test 4: Test integrated task planning end-to-end\n   */\n  private async testIntegratedTaskPlanning(): Promise<void> {\n    if (!this.hiveMind || !this.agentManager || !this.agentRegistry) {\n      throw new Error('Required systems not initialized');\n    }\n\n    this.logger.info('Testing integrated task planning...');\n\n    // Create integrated planner service\n    this.plannerService = HiveMindPlannerService.createWithAgentManager(\n      this.hiveMind,\n      this.logger as any,\n      this.agentManager,\n      this.agentRegistry\n    );\n\n    // Test task planning request\n    const testRequest = {\n      featureName: 'User Authentication System',\n      designContent: `\n# User Authentication System Design\n\n## Overview\nA secure authentication system with JWT tokens and role-based access control.\n\n## Components\n- User registration and login endpoints\n- JWT token generation and validation\n- Password hashing with bcrypt\n- Role-based permissions system\n- Session management\n\n## API Endpoints\n- POST /auth/register\n- POST /auth/login\n- POST /auth/logout\n- GET /auth/profile\n- PUT /auth/profile\n\n## Security Requirements\n- Password complexity validation\n- Rate limiting on auth endpoints\n- Secure cookie handling\n- HTTPS enforcement\n      `,\n      requirements: 'System must be production-ready with comprehensive testing',\n      timeoutMs: 30000\n    };\n\n    const response = await this.plannerService.generateTaskPlan(testRequest);\n\n    if (!response.success) {\n      throw new Error(`Task planning failed: ${response.error}`);\n    }\n\n    if (!response.taskMarkdown || response.taskMarkdown.length < 100) {\n      throw new Error('Task planning returned insufficient content');\n    }\n\n    this.logger.info(`Task planning successful: ${response.plannerType} agent used`);\n    this.logger.info(`Generated ${response.taskMarkdown.length} characters of task content`);\n  }\n\n  /**\n   * Test 5: Test fallback to hive mind agents when AgentManager unavailable\n   */\n  private async testHiveMindFallback(): Promise<void> {\n    if (!this.hiveMind) {\n      throw new Error('HiveMind not initialized');\n    }\n\n    this.logger.info('Testing hive mind fallback...');\n\n    // Create planner service without AgentManager integration\n    const fallbackPlannerService = new HiveMindPlannerService(\n      this.hiveMind,\n      this.logger as any\n    );\n\n    // Spawn some hive mind agents for fallback testing\n    await this.hiveMind.spawnAgent({\n      type: 'architect',\n      name: 'Fallback Architect'\n    });\n\n    const testRequest = {\n      featureName: 'Simple API Service',\n      designContent: 'Basic REST API with CRUD operations',\n      timeoutMs: 30000\n    };\n\n    const response = await fallbackPlannerService.generateTaskPlan(testRequest);\n\n    if (!response.success) {\n      throw new Error(`Fallback planning failed: ${response.error}`);\n    }\n\n    this.logger.info(`Fallback planning successful: ${response.plannerType} agent used`);\n  }\n\n  /**\n   * Test 6: Test status reporting across both systems\n   */\n  private async testStatusReporting(): Promise<void> {\n    if (!this.plannerService) {\n      throw new Error('Planner service not initialized');\n    }\n\n    this.logger.info('Testing status reporting...');\n\n    const status = await this.plannerService.getStatus();\n\n    this.logger.info(`Status report: TaskPlanners=${status.availableTaskPlanners}, Architects=${status.availableArchitects}, Specialists=${status.availableSpecialists}, Total=${status.totalAgents}`);\n    this.logger.info(`System availability: AgentManager=${status.agentManagerAvailable}, Registry=${status.agentRegistryAvailable}`);\n\n    if (status.totalAgents < 1) {\n      throw new Error('No agents available in either system');\n    }\n  }\n\n  /**\n   * Clean up all test resources\n   */\n  private async cleanup(): Promise<void> {\n    this.logger.info('Cleaning up test resources...');\n\n    try {\n      if (this.agentManager) {\n        await this.agentManager.shutdown();\n      }\n\n      if (this.hiveMind) {\n        await this.hiveMind.shutdown();\n      }\n\n      if (this.memorySystem) {\n        await this.memorySystem.shutdown();\n      }\n\n      this.logger.info('Cleanup completed successfully');\n    } catch (error) {\n      this.logger.error(`Cleanup failed: ${error instanceof Error ? error.message : String(error)}`);\n    }\n  }\n\n  /**\n   * Get test logs\n   */\n  getTestLogs(): string[] {\n    return this.logger.getLogs();\n  }\n}\n\n/**\n * Main test runner function\n */\nexport async function runMaestroIntegrationTests(): Promise<void> {\n  const testRunner = new MaestroIntegrationTest();\n  \n  console.log('🧪 Starting Maestro AgentManager Integration Tests...\\n');\n  \n  const results = await testRunner.runTests();\n  \n  console.log('\\n📊 Test Results:');\n  console.log('================');\n  \n  results.results.forEach(result => {\n    console.log(result);\n  });\n  \n  if (results.errors.length > 0) {\n    console.log('\\n❌ Errors:');\n    results.errors.forEach(error => {\n      console.log(`   ${error}`);\n    });\n  }\n  \n  console.log('\\n📋 Detailed Logs:');\n  console.log('==================');\n  testRunner.getTestLogs().forEach(log => {\n    console.log(`   ${log}`);\n  });\n  \n  console.log(`\\n🏁 Integration test ${results.success ? 'PASSED' : 'FAILED'}`);\n  \n  if (!results.success) {\n    process.exit(1);\n  }\n}\n\n// Run tests if this file is executed directly\nif (require.main === module) {\n  runMaestroIntegrationTests().catch(console.error);\n}"],"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","ignoreList":[]}