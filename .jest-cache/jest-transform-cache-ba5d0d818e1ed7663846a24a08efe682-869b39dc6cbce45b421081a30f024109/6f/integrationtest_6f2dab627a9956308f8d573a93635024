066d66ab60534f95f9e83dca042ab8bb
/* istanbul ignore next */
function cov_1vlq3jokzh() {
  var path = "/home/mhugo/code/claude-code-flow/src/maestro/tests/integration-test.ts";
  var hash = "84b6992e89f9b4be7e4e08b3f6b4e17a49cd6b82";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/home/mhugo/code/claude-code-flow/src/maestro/tests/integration-test.ts",
    statementMap: {
      "0": {
        start: {
          line: 16,
          column: 11
        },
        end: {
          line: 16,
          column: 13
        }
      },
      "1": {
        start: {
          line: 18,
          column: 8
        },
        end: {
          line: 18,
          column: 43
        }
      },
      "2": {
        start: {
          line: 19,
          column: 8
        },
        end: {
          line: 19,
          column: 46
        }
      },
      "3": {
        start: {
          line: 22,
          column: 8
        },
        end: {
          line: 22,
          column: 43
        }
      },
      "4": {
        start: {
          line: 23,
          column: 8
        },
        end: {
          line: 23,
          column: 46
        }
      },
      "5": {
        start: {
          line: 26,
          column: 8
        },
        end: {
          line: 26,
          column: 44
        }
      },
      "6": {
        start: {
          line: 27,
          column: 8
        },
        end: {
          line: 27,
          column: 47
        }
      },
      "7": {
        start: {
          line: 30,
          column: 8
        },
        end: {
          line: 30,
          column: 30
        }
      },
      "8": {
        start: {
          line: 33,
          column: 8
        },
        end: {
          line: 33,
          column: 23
        }
      },
      "9": {
        start: {
          line: 47,
          column: 8
        },
        end: {
          line: 47,
          column: 39
        }
      },
      "10": {
        start: {
          line: 53,
          column: 24
        },
        end: {
          line: 53,
          column: 26
        }
      },
      "11": {
        start: {
          line: 54,
          column: 23
        },
        end: {
          line: 54,
          column: 25
        }
      },
      "12": {
        start: {
          line: 55,
          column: 8
        },
        end: {
          line: 94,
          column: 9
        }
      },
      "13": {
        start: {
          line: 56,
          column: 12
        },
        end: {
          line: 56,
          column: 82
        }
      },
      "14": {
        start: {
          line: 58,
          column: 12
        },
        end: {
          line: 58,
          column: 50
        }
      },
      "15": {
        start: {
          line: 59,
          column: 12
        },
        end: {
          line: 59,
          column: 71
        }
      },
      "16": {
        start: {
          line: 61,
          column: 12
        },
        end: {
          line: 61,
          column: 49
        }
      },
      "17": {
        start: {
          line: 62,
          column: 12
        },
        end: {
          line: 62,
          column: 84
        }
      },
      "18": {
        start: {
          line: 64,
          column: 12
        },
        end: {
          line: 64,
          column: 58
        }
      },
      "19": {
        start: {
          line: 65,
          column: 12
        },
        end: {
          line: 65,
          column: 81
        }
      },
      "20": {
        start: {
          line: 67,
          column: 12
        },
        end: {
          line: 67,
          column: 52
        }
      },
      "21": {
        start: {
          line: 68,
          column: 12
        },
        end: {
          line: 68,
          column: 74
        }
      },
      "22": {
        start: {
          line: 70,
          column: 12
        },
        end: {
          line: 70,
          column: 46
        }
      },
      "23": {
        start: {
          line: 71,
          column: 12
        },
        end: {
          line: 71,
          column: 68
        }
      },
      "24": {
        start: {
          line: 73,
          column: 12
        },
        end: {
          line: 73,
          column: 45
        }
      },
      "25": {
        start: {
          line: 74,
          column: 12
        },
        end: {
          line: 74,
          column: 66
        }
      },
      "26": {
        start: {
          line: 75,
          column: 12
        },
        end: {
          line: 75,
          column: 74
        }
      },
      "27": {
        start: {
          line: 76,
          column: 12
        },
        end: {
          line: 80,
          column: 14
        }
      },
      "28": {
        start: {
          line: 83,
          column: 29
        },
        end: {
          line: 83,
          column: 113
        }
      },
      "29": {
        start: {
          line: 84,
          column: 12
        },
        end: {
          line: 84,
          column: 34
        }
      },
      "30": {
        start: {
          line: 85,
          column: 12
        },
        end: {
          line: 85,
          column: 40
        }
      },
      "31": {
        start: {
          line: 86,
          column: 12
        },
        end: {
          line: 90,
          column: 14
        }
      },
      "32": {
        start: {
          line: 93,
          column: 12
        },
        end: {
          line: 93,
          column: 33
        }
      },
      "33": {
        start: {
          line: 100,
          column: 8
        },
        end: {
          line: 100,
          column: 70
        }
      },
      "34": {
        start: {
          line: 101,
          column: 8
        },
        end: {
          line: 101,
          column: 58
        }
      },
      "35": {
        start: {
          line: 102,
          column: 8
        },
        end: {
          line: 102,
          column: 45
        }
      },
      "36": {
        start: {
          line: 103,
          column: 8
        },
        end: {
          line: 103,
          column: 57
        }
      },
      "37": {
        start: {
          line: 104,
          column: 8
        },
        end: {
          line: 106,
          column: 40
        }
      },
      "38": {
        start: {
          line: 107,
          column: 8
        },
        end: {
          line: 107,
          column: 45
        }
      },
      "39": {
        start: {
          line: 108,
          column: 8
        },
        end: {
          line: 108,
          column: 58
        }
      },
      "40": {
        start: {
          line: 109,
          column: 8
        },
        end: {
          line: 109,
          column: 81
        }
      },
      "41": {
        start: {
          line: 110,
          column: 8
        },
        end: {
          line: 110,
          column: 46
        }
      },
      "42": {
        start: {
          line: 111,
          column: 8
        },
        end: {
          line: 111,
          column: 53
        }
      },
      "43": {
        start: {
          line: 112,
          column: 8
        },
        end: {
          line: 123,
          column: 11
        }
      },
      "44": {
        start: {
          line: 124,
          column: 8
        },
        end: {
          line: 124,
          column: 41
        }
      },
      "45": {
        start: {
          line: 125,
          column: 8
        },
        end: {
          line: 125,
          column: 65
        }
      },
      "46": {
        start: {
          line: 131,
          column: 8
        },
        end: {
          line: 133,
          column: 9
        }
      },
      "47": {
        start: {
          line: 132,
          column: 12
        },
        end: {
          line: 132,
          column: 60
        }
      },
      "48": {
        start: {
          line: 134,
          column: 8
        },
        end: {
          line: 134,
          column: 82
        }
      },
      "49": {
        start: {
          line: 136,
          column: 24
        },
        end: {
          line: 142,
          column: 10
        }
      },
      "50": {
        start: {
          line: 143,
          column: 8
        },
        end: {
          line: 145,
          column: 9
        }
      },
      "51": {
        start: {
          line: 144,
          column: 12
        },
        end: {
          line: 144,
          column: 92
        }
      },
      "52": {
        start: {
          line: 146,
          column: 8
        },
        end: {
          line: 146,
          column: 80
        }
      },
      "53": {
        start: {
          line: 148,
          column: 8
        },
        end: {
          line: 148,
          column: 51
        }
      },
      "54": {
        start: {
          line: 154,
          column: 8
        },
        end: {
          line: 156,
          column: 9
        }
      },
      "55": {
        start: {
          line: 155,
          column: 12
        },
        end: {
          line: 155,
          column: 64
        }
      },
      "56": {
        start: {
          line: 157,
          column: 8
        },
        end: {
          line: 157,
          column: 76
        }
      },
      "57": {
        start: {
          line: 159,
          column: 24
        },
        end: {
          line: 165,
          column: 10
        }
      },
      "58": {
        start: {
          line: 167,
          column: 23
        },
        end: {
          line: 170,
          column: 10
        }
      },
      "59": {
        start: {
          line: 171,
          column: 8
        },
        end: {
          line: 173,
          column: 9
        }
      },
      "60": {
        start: {
          line: 172,
          column: 12
        },
        end: {
          line: 172,
          column: 74
        }
      },
      "61": {
        start: {
          line: 174,
          column: 8
        },
        end: {
          line: 174,
          column: 90
        }
      },
      "62": {
        start: {
          line: 176,
          column: 8
        },
        end: {
          line: 176,
          column: 51
        }
      },
      "63": {
        start: {
          line: 182,
          column: 8
        },
        end: {
          line: 184,
          column: 9
        }
      },
      "64": {
        start: {
          line: 183,
          column: 12
        },
        end: {
          line: 183,
          column: 64
        }
      },
      "65": {
        start: {
          line: 185,
          column: 8
        },
        end: {
          line: 185,
          column: 64
        }
      },
      "66": {
        start: {
          line: 187,
          column: 8
        },
        end: {
          line: 187,
          column: 143
        }
      },
      "67": {
        start: {
          line: 189,
          column: 28
        },
        end: {
          line: 219,
          column: 9
        }
      },
      "68": {
        start: {
          line: 220,
          column: 25
        },
        end: {
          line: 220,
          column: 80
        }
      },
      "69": {
        start: {
          line: 221,
          column: 8
        },
        end: {
          line: 223,
          column: 9
        }
      },
      "70": {
        start: {
          line: 222,
          column: 12
        },
        end: {
          line: 222,
          column: 71
        }
      },
      "71": {
        start: {
          line: 224,
          column: 8
        },
        end: {
          line: 226,
          column: 9
        }
      },
      "72": {
        start: {
          line: 225,
          column: 12
        },
        end: {
          line: 225,
          column: 75
        }
      },
      "73": {
        start: {
          line: 227,
          column: 8
        },
        end: {
          line: 227,
          column: 89
        }
      },
      "74": {
        start: {
          line: 228,
          column: 8
        },
        end: {
          line: 228,
          column: 97
        }
      },
      "75": {
        start: {
          line: 234,
          column: 8
        },
        end: {
          line: 236,
          column: 9
        }
      },
      "76": {
        start: {
          line: 235,
          column: 12
        },
        end: {
          line: 235,
          column: 56
        }
      },
      "77": {
        start: {
          line: 237,
          column: 8
        },
        end: {
          line: 237,
          column: 58
        }
      },
      "78": {
        start: {
          line: 239,
          column: 39
        },
        end: {
          line: 239,
          column: 93
        }
      },
      "79": {
        start: {
          line: 241,
          column: 8
        },
        end: {
          line: 244,
          column: 11
        }
      },
      "80": {
        start: {
          line: 245,
          column: 28
        },
        end: {
          line: 249,
          column: 9
        }
      },
      "81": {
        start: {
          line: 250,
          column: 25
        },
        end: {
          line: 250,
          column: 83
        }
      },
      "82": {
        start: {
          line: 251,
          column: 8
        },
        end: {
          line: 253,
          column: 9
        }
      },
      "83": {
        start: {
          line: 252,
          column: 12
        },
        end: {
          line: 252,
          column: 75
        }
      },
      "84": {
        start: {
          line: 254,
          column: 8
        },
        end: {
          line: 254,
          column: 93
        }
      },
      "85": {
        start: {
          line: 260,
          column: 8
        },
        end: {
          line: 262,
          column: 9
        }
      },
      "86": {
        start: {
          line: 261,
          column: 12
        },
        end: {
          line: 261,
          column: 63
        }
      },
      "87": {
        start: {
          line: 263,
          column: 8
        },
        end: {
          line: 263,
          column: 56
        }
      },
      "88": {
        start: {
          line: 264,
          column: 23
        },
        end: {
          line: 264,
          column: 60
        }
      },
      "89": {
        start: {
          line: 265,
          column: 8
        },
        end: {
          line: 265,
          column: 203
        }
      },
      "90": {
        start: {
          line: 266,
          column: 8
        },
        end: {
          line: 266,
          column: 137
        }
      },
      "91": {
        start: {
          line: 267,
          column: 8
        },
        end: {
          line: 269,
          column: 9
        }
      },
      "92": {
        start: {
          line: 268,
          column: 12
        },
        end: {
          line: 268,
          column: 68
        }
      },
      "93": {
        start: {
          line: 275,
          column: 8
        },
        end: {
          line: 275,
          column: 58
        }
      },
      "94": {
        start: {
          line: 276,
          column: 8
        },
        end: {
          line: 290,
          column: 9
        }
      },
      "95": {
        start: {
          line: 277,
          column: 12
        },
        end: {
          line: 279,
          column: 13
        }
      },
      "96": {
        start: {
          line: 278,
          column: 16
        },
        end: {
          line: 278,
          column: 51
        }
      },
      "97": {
        start: {
          line: 280,
          column: 12
        },
        end: {
          line: 282,
          column: 13
        }
      },
      "98": {
        start: {
          line: 281,
          column: 16
        },
        end: {
          line: 281,
          column: 47
        }
      },
      "99": {
        start: {
          line: 283,
          column: 12
        },
        end: {
          line: 285,
          column: 13
        }
      },
      "100": {
        start: {
          line: 284,
          column: 16
        },
        end: {
          line: 284,
          column: 51
        }
      },
      "101": {
        start: {
          line: 286,
          column: 12
        },
        end: {
          line: 286,
          column: 63
        }
      },
      "102": {
        start: {
          line: 289,
          column: 12
        },
        end: {
          line: 289,
          column: 107
        }
      },
      "103": {
        start: {
          line: 296,
          column: 8
        },
        end: {
          line: 296,
          column: 37
        }
      },
      "104": {
        start: {
          line: 303,
          column: 23
        },
        end: {
          line: 303,
          column: 51
        }
      },
      "105": {
        start: {
          line: 304,
          column: 4
        },
        end: {
          line: 304,
          column: 75
        }
      },
      "106": {
        start: {
          line: 305,
          column: 20
        },
        end: {
          line: 305,
          column: 47
        }
      },
      "107": {
        start: {
          line: 306,
          column: 4
        },
        end: {
          line: 306,
          column: 38
        }
      },
      "108": {
        start: {
          line: 307,
          column: 4
        },
        end: {
          line: 307,
          column: 36
        }
      },
      "109": {
        start: {
          line: 308,
          column: 4
        },
        end: {
          line: 310,
          column: 7
        }
      },
      "110": {
        start: {
          line: 309,
          column: 8
        },
        end: {
          line: 309,
          column: 28
        }
      },
      "111": {
        start: {
          line: 311,
          column: 4
        },
        end: {
          line: 316,
          column: 5
        }
      },
      "112": {
        start: {
          line: 312,
          column: 8
        },
        end: {
          line: 312,
          column: 35
        }
      },
      "113": {
        start: {
          line: 313,
          column: 8
        },
        end: {
          line: 315,
          column: 11
        }
      },
      "114": {
        start: {
          line: 314,
          column: 12
        },
        end: {
          line: 314,
          column: 39
        }
      },
      "115": {
        start: {
          line: 317,
          column: 4
        },
        end: {
          line: 317,
          column: 39
        }
      },
      "116": {
        start: {
          line: 318,
          column: 4
        },
        end: {
          line: 318,
          column: 38
        }
      },
      "117": {
        start: {
          line: 319,
          column: 4
        },
        end: {
          line: 321,
          column: 7
        }
      },
      "118": {
        start: {
          line: 320,
          column: 8
        },
        end: {
          line: 320,
          column: 33
        }
      },
      "119": {
        start: {
          line: 322,
          column: 4
        },
        end: {
          line: 322,
          column: 82
        }
      },
      "120": {
        start: {
          line: 323,
          column: 4
        },
        end: {
          line: 325,
          column: 5
        }
      },
      "121": {
        start: {
          line: 324,
          column: 8
        },
        end: {
          line: 324,
          column: 24
        }
      },
      "122": {
        start: {
          line: 328,
          column: 0
        },
        end: {
          line: 330,
          column: 1
        }
      },
      "123": {
        start: {
          line: 329,
          column: 4
        },
        end: {
          line: 329,
          column: 54
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 17,
            column: 4
          },
          end: {
            line: 17,
            column: 5
          }
        },
        loc: {
          start: {
            line: 17,
            column: 18
          },
          end: {
            line: 20,
            column: 5
          }
        },
        line: 17
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 21,
            column: 4
          },
          end: {
            line: 21,
            column: 5
          }
        },
        loc: {
          start: {
            line: 21,
            column: 18
          },
          end: {
            line: 24,
            column: 5
          }
        },
        line: 21
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 25,
            column: 4
          },
          end: {
            line: 25,
            column: 5
          }
        },
        loc: {
          start: {
            line: 25,
            column: 19
          },
          end: {
            line: 28,
            column: 5
          }
        },
        line: 25
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 29,
            column: 4
          },
          end: {
            line: 29,
            column: 5
          }
        },
        loc: {
          start: {
            line: 29,
            column: 14
          },
          end: {
            line: 31,
            column: 5
          }
        },
        line: 29
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 32,
            column: 4
          },
          end: {
            line: 32,
            column: 5
          }
        },
        loc: {
          start: {
            line: 32,
            column: 16
          },
          end: {
            line: 34,
            column: 5
          }
        },
        line: 32
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 46,
            column: 4
          },
          end: {
            line: 46,
            column: 5
          }
        },
        loc: {
          start: {
            line: 46,
            column: 18
          },
          end: {
            line: 48,
            column: 5
          }
        },
        line: 46
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 52,
            column: 4
          },
          end: {
            line: 52,
            column: 5
          }
        },
        loc: {
          start: {
            line: 52,
            column: 21
          },
          end: {
            line: 95,
            column: 5
          }
        },
        line: 52
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 99,
            column: 4
          },
          end: {
            line: 99,
            column: 5
          }
        },
        loc: {
          start: {
            line: 99,
            column: 37
          },
          end: {
            line: 126,
            column: 5
          }
        },
        line: 99
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 130,
            column: 4
          },
          end: {
            line: 130,
            column: 5
          }
        },
        loc: {
          start: {
            line: 130,
            column: 36
          },
          end: {
            line: 149,
            column: 5
          }
        },
        line: 130
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 153,
            column: 4
          },
          end: {
            line: 153,
            column: 5
          }
        },
        loc: {
          start: {
            line: 153,
            column: 45
          },
          end: {
            line: 177,
            column: 5
          }
        },
        line: 153
      },
      "10": {
        name: "(anonymous_10)",
        decl: {
          start: {
            line: 181,
            column: 4
          },
          end: {
            line: 181,
            column: 5
          }
        },
        loc: {
          start: {
            line: 181,
            column: 39
          },
          end: {
            line: 229,
            column: 5
          }
        },
        line: 181
      },
      "11": {
        name: "(anonymous_11)",
        decl: {
          start: {
            line: 233,
            column: 4
          },
          end: {
            line: 233,
            column: 5
          }
        },
        loc: {
          start: {
            line: 233,
            column: 33
          },
          end: {
            line: 255,
            column: 5
          }
        },
        line: 233
      },
      "12": {
        name: "(anonymous_12)",
        decl: {
          start: {
            line: 259,
            column: 4
          },
          end: {
            line: 259,
            column: 5
          }
        },
        loc: {
          start: {
            line: 259,
            column: 32
          },
          end: {
            line: 270,
            column: 5
          }
        },
        line: 259
      },
      "13": {
        name: "(anonymous_13)",
        decl: {
          start: {
            line: 274,
            column: 4
          },
          end: {
            line: 274,
            column: 5
          }
        },
        loc: {
          start: {
            line: 274,
            column: 20
          },
          end: {
            line: 291,
            column: 5
          }
        },
        line: 274
      },
      "14": {
        name: "(anonymous_14)",
        decl: {
          start: {
            line: 295,
            column: 4
          },
          end: {
            line: 295,
            column: 5
          }
        },
        loc: {
          start: {
            line: 295,
            column: 18
          },
          end: {
            line: 297,
            column: 5
          }
        },
        line: 295
      },
      "15": {
        name: "runMaestroIntegrationTests",
        decl: {
          start: {
            line: 302,
            column: 22
          },
          end: {
            line: 302,
            column: 48
          }
        },
        loc: {
          start: {
            line: 302,
            column: 51
          },
          end: {
            line: 326,
            column: 1
          }
        },
        line: 302
      },
      "16": {
        name: "(anonymous_16)",
        decl: {
          start: {
            line: 308,
            column: 28
          },
          end: {
            line: 308,
            column: 29
          }
        },
        loc: {
          start: {
            line: 308,
            column: 38
          },
          end: {
            line: 310,
            column: 5
          }
        },
        line: 308
      },
      "17": {
        name: "(anonymous_17)",
        decl: {
          start: {
            line: 313,
            column: 31
          },
          end: {
            line: 313,
            column: 32
          }
        },
        loc: {
          start: {
            line: 313,
            column: 40
          },
          end: {
            line: 315,
            column: 9
          }
        },
        line: 313
      },
      "18": {
        name: "(anonymous_18)",
        decl: {
          start: {
            line: 319,
            column: 37
          },
          end: {
            line: 319,
            column: 38
          }
        },
        loc: {
          start: {
            line: 319,
            column: 44
          },
          end: {
            line: 321,
            column: 5
          }
        },
        line: 319
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 83,
            column: 57
          },
          end: {
            line: 83,
            column: 111
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 83,
            column: 82
          },
          end: {
            line: 83,
            column: 95
          }
        }, {
          start: {
            line: 83,
            column: 98
          },
          end: {
            line: 83,
            column: 111
          }
        }],
        line: 83
      },
      "1": {
        loc: {
          start: {
            line: 131,
            column: 8
          },
          end: {
            line: 133,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 131,
            column: 8
          },
          end: {
            line: 133,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 131
      },
      "2": {
        loc: {
          start: {
            line: 143,
            column: 8
          },
          end: {
            line: 145,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 143,
            column: 8
          },
          end: {
            line: 145,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 143
      },
      "3": {
        loc: {
          start: {
            line: 154,
            column: 8
          },
          end: {
            line: 156,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 154,
            column: 8
          },
          end: {
            line: 156,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 154
      },
      "4": {
        loc: {
          start: {
            line: 154,
            column: 12
          },
          end: {
            line: 154,
            column: 53
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 154,
            column: 12
          },
          end: {
            line: 154,
            column: 30
          }
        }, {
          start: {
            line: 154,
            column: 34
          },
          end: {
            line: 154,
            column: 53
          }
        }],
        line: 154
      },
      "5": {
        loc: {
          start: {
            line: 171,
            column: 8
          },
          end: {
            line: 173,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 171,
            column: 8
          },
          end: {
            line: 173,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 171
      },
      "6": {
        loc: {
          start: {
            line: 182,
            column: 8
          },
          end: {
            line: 184,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 182,
            column: 8
          },
          end: {
            line: 184,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 182
      },
      "7": {
        loc: {
          start: {
            line: 182,
            column: 12
          },
          end: {
            line: 182,
            column: 71
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 182,
            column: 12
          },
          end: {
            line: 182,
            column: 26
          }
        }, {
          start: {
            line: 182,
            column: 30
          },
          end: {
            line: 182,
            column: 48
          }
        }, {
          start: {
            line: 182,
            column: 52
          },
          end: {
            line: 182,
            column: 71
          }
        }],
        line: 182
      },
      "8": {
        loc: {
          start: {
            line: 221,
            column: 8
          },
          end: {
            line: 223,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 221,
            column: 8
          },
          end: {
            line: 223,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 221
      },
      "9": {
        loc: {
          start: {
            line: 224,
            column: 8
          },
          end: {
            line: 226,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 224,
            column: 8
          },
          end: {
            line: 226,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 224
      },
      "10": {
        loc: {
          start: {
            line: 224,
            column: 12
          },
          end: {
            line: 224,
            column: 72
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 224,
            column: 12
          },
          end: {
            line: 224,
            column: 34
          }
        }, {
          start: {
            line: 224,
            column: 38
          },
          end: {
            line: 224,
            column: 72
          }
        }],
        line: 224
      },
      "11": {
        loc: {
          start: {
            line: 234,
            column: 8
          },
          end: {
            line: 236,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 234,
            column: 8
          },
          end: {
            line: 236,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 234
      },
      "12": {
        loc: {
          start: {
            line: 251,
            column: 8
          },
          end: {
            line: 253,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 251,
            column: 8
          },
          end: {
            line: 253,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 251
      },
      "13": {
        loc: {
          start: {
            line: 260,
            column: 8
          },
          end: {
            line: 262,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 260,
            column: 8
          },
          end: {
            line: 262,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 260
      },
      "14": {
        loc: {
          start: {
            line: 267,
            column: 8
          },
          end: {
            line: 269,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 267,
            column: 8
          },
          end: {
            line: 269,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 267
      },
      "15": {
        loc: {
          start: {
            line: 277,
            column: 12
          },
          end: {
            line: 279,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 277,
            column: 12
          },
          end: {
            line: 279,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 277
      },
      "16": {
        loc: {
          start: {
            line: 280,
            column: 12
          },
          end: {
            line: 282,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 280,
            column: 12
          },
          end: {
            line: 282,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 280
      },
      "17": {
        loc: {
          start: {
            line: 283,
            column: 12
          },
          end: {
            line: 285,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 283,
            column: 12
          },
          end: {
            line: 285,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 283
      },
      "18": {
        loc: {
          start: {
            line: 289,
            column: 49
          },
          end: {
            line: 289,
            column: 103
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 289,
            column: 74
          },
          end: {
            line: 289,
            column: 87
          }
        }, {
          start: {
            line: 289,
            column: 90
          },
          end: {
            line: 289,
            column: 103
          }
        }],
        line: 289
      },
      "19": {
        loc: {
          start: {
            line: 311,
            column: 4
          },
          end: {
            line: 316,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 311,
            column: 4
          },
          end: {
            line: 316,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 311
      },
      "20": {
        loc: {
          start: {
            line: 322,
            column: 41
          },
          end: {
            line: 322,
            column: 78
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 322,
            column: 59
          },
          end: {
            line: 322,
            column: 67
          }
        }, {
          start: {
            line: 322,
            column: 70
          },
          end: {
            line: 322,
            column: 78
          }
        }],
        line: 322
      },
      "21": {
        loc: {
          start: {
            line: 323,
            column: 4
          },
          end: {
            line: 325,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 323,
            column: 4
          },
          end: {
            line: 325,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 323
      },
      "22": {
        loc: {
          start: {
            line: 328,
            column: 0
          },
          end: {
            line: 330,
            column: 1
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 328,
            column: 0
          },
          end: {
            line: 330,
            column: 1
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 328
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0,
      "74": 0,
      "75": 0,
      "76": 0,
      "77": 0,
      "78": 0,
      "79": 0,
      "80": 0,
      "81": 0,
      "82": 0,
      "83": 0,
      "84": 0,
      "85": 0,
      "86": 0,
      "87": 0,
      "88": 0,
      "89": 0,
      "90": 0,
      "91": 0,
      "92": 0,
      "93": 0,
      "94": 0,
      "95": 0,
      "96": 0,
      "97": 0,
      "98": 0,
      "99": 0,
      "100": 0,
      "101": 0,
      "102": 0,
      "103": 0,
      "104": 0,
      "105": 0,
      "106": 0,
      "107": 0,
      "108": 0,
      "109": 0,
      "110": 0,
      "111": 0,
      "112": 0,
      "113": 0,
      "114": 0,
      "115": 0,
      "116": 0,
      "117": 0,
      "118": 0,
      "119": 0,
      "120": 0,
      "121": 0,
      "122": 0,
      "123": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0, 0],
      "8": [0, 0],
      "9": [0, 0],
      "10": [0, 0],
      "11": [0, 0],
      "12": [0, 0],
      "13": [0, 0],
      "14": [0, 0],
      "15": [0, 0],
      "16": [0, 0],
      "17": [0, 0],
      "18": [0, 0],
      "19": [0, 0],
      "20": [0, 0],
      "21": [0, 0],
      "22": [0, 0]
    },
    inputSourceMap: {
      file: "/home/mhugo/code/claude-code-flow/src/maestro/tests/integration-test.ts",
      mappings: "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",
      names: [],
      sources: ["/home/mhugo/code/claude-code-flow/src/maestro/tests/integration-test.ts"],
      sourcesContent: ["/**\n * Integration Test for Maestro + AgentManager Integration\n * \n * Tests the complete integration between HiveMindPlannerService,\n * AgentManager task-planner template, and AgentRegistry systems.\n */\n\nimport { HiveMindPlannerService } from '../services/HiveMindPlannerService.js';\nimport { AgentManager } from '../../agents/agent-manager.js';\nimport { AgentRegistry } from '../../agents/agent-registry.js';\nimport { HiveMind } from '../../hive-mind/core/HiveMind.js';\nimport { DistributedMemorySystem } from '../../memory/distributed-memory.js';\n\ninterface TestLogger {\n  info(message: string): void;\n  warn(message: string): void;\n  error(message: string): void;\n}\n\n/**\n * Mock logger for testing\n */\nclass MockLogger implements TestLogger {\n  private logs: string[] = [];\n\n  info(message: string): void {\n    this.logs.push(`INFO: ${message}`);\n    console.log(`[TEST INFO] ${message}`);\n  }\n\n  warn(message: string): void {\n    this.logs.push(`WARN: ${message}`);\n    console.log(`[TEST WARN] ${message}`);\n  }\n\n  error(message: string): void {\n    this.logs.push(`ERROR: ${message}`);\n    console.log(`[TEST ERROR] ${message}`);\n  }\n\n  getLogs(): string[] {\n    return [...this.logs];\n  }\n\n  clearLogs(): void {\n    this.logs = [];\n  }\n}\n\n/**\n * Integration test runner\n */\nexport class MaestroIntegrationTest {\n  private logger: MockLogger;\n  private memorySystem?: DistributedMemorySystem;\n  private agentManager?: AgentManager;\n  private agentRegistry?: AgentRegistry;\n  private hiveMind?: HiveMind;\n  private plannerService?: HiveMindPlannerService;\n\n  constructor() {\n    this.logger = new MockLogger();\n  }\n\n  /**\n   * Run complete integration test suite\n   */\n  async runTests(): Promise<{\n    success: boolean;\n    results: string[];\n    errors: string[];\n  }> {\n    const results: string[] = [];\n    const errors: string[] = [];\n\n    try {\n      results.push('\uD83D\uDE80 Starting Maestro AgentManager Integration Tests...');\n\n      // Test 1: Initialize all systems\n      await this.testSystemInitialization();\n      results.push('\u2705 Test 1: System initialization successful');\n\n      // Test 2: Verify AgentManager task-planner template\n      await this.testTaskPlannerTemplate();\n      results.push('\u2705 Test 2: Task-planner template verification successful');\n\n      // Test 3: Test agent creation and registration\n      await this.testAgentCreationAndRegistration();\n      results.push('\u2705 Test 3: Agent creation and registration successful');\n\n      // Test 4: Test integrated task planning\n      await this.testIntegratedTaskPlanning();\n      results.push('\u2705 Test 4: Integrated task planning successful');\n\n      // Test 5: Test fallback to hive mind agents\n      await this.testHiveMindFallback();\n      results.push('\u2705 Test 5: Hive mind fallback successful');\n\n      // Test 6: Test status reporting\n      await this.testStatusReporting();\n      results.push('\u2705 Test 6: Status reporting successful');\n\n      results.push('\uD83C\uDF89 All integration tests passed successfully!');\n\n      return {\n        success: true,\n        results,\n        errors\n      };\n\n    } catch (error) {\n      const errorMsg = `Integration test failed: ${error instanceof Error ? error.message : String(error)}`;\n      errors.push(errorMsg);\n      this.logger.error(errorMsg);\n\n      return {\n        success: false,\n        results,\n        errors\n      };\n    } finally {\n      await this.cleanup();\n    }\n  }\n\n  /**\n   * Test 1: Initialize all required systems\n   */\n  private async testSystemInitialization(): Promise<void> {\n    this.logger.info('Initializing distributed memory system...');\n    this.memorySystem = new DistributedMemorySystem();\n    await this.memorySystem.initialize();\n\n    this.logger.info('Initializing AgentManager...');\n    this.agentManager = new AgentManager(\n      {} as any, // config\n      {} as any, // eventBus\n      this.logger as any,\n      this.memorySystem as any\n    );\n    await this.agentManager.initialize();\n\n    this.logger.info('Initializing AgentRegistry...');\n    this.agentRegistry = new AgentRegistry(this.memorySystem, 'test-agents');\n    await this.agentRegistry.initialize();\n\n    this.logger.info('Initializing HiveMind...');\n    this.hiveMind = new HiveMind({\n      name: 'test-hive',\n      topology: 'hierarchical',\n      queenMode: 'strategic',\n      maxAgents: 5,\n      consensusThreshold: 0.66,\n      memoryTTL: 3600000,\n      autoSpawn: false,\n      enableConsensus: false,\n      enableMemory: true,\n      enableCommunication: false\n    });\n    await this.hiveMind.initialize();\n\n    this.logger.info('All systems initialized successfully');\n  }\n\n  /**\n   * Test 2: Verify AgentManager has task-planner template\n   */\n  private async testTaskPlannerTemplate(): Promise<void> {\n    if (!this.agentManager) {\n      throw new Error('AgentManager not initialized');\n    }\n\n    this.logger.info('Checking for task-planner template in AgentManager...');\n    \n    // Create a task-planner agent to verify template exists\n    const agentId = await this.agentManager.createAgent('task-planner', {\n      name: 'Test Task Planner',\n      type: 'task-planner',\n      capabilities: ['project-management', 'task-breakdown', 'agile-planning'],\n      maxConcurrentTasks: 1,\n      priority: 90\n    });\n\n    if (!agentId) {\n      throw new Error('Failed to create task-planner agent - template may not exist');\n    }\n\n    this.logger.info(`Task-planner agent created successfully: ${agentId}`);\n    \n    // Clean up the test agent\n    await this.agentManager.stopAgent(agentId);\n  }\n\n  /**\n   * Test 3: Test agent creation and registration flow\n   */\n  private async testAgentCreationAndRegistration(): Promise<void> {\n    if (!this.agentManager || !this.agentRegistry) {\n      throw new Error('Required systems not initialized');\n    }\n\n    this.logger.info('Testing agent creation and registration flow...');\n\n    // Create agent through AgentManager\n    const agentId = await this.agentManager.createAgent('task-planner', {\n      name: 'Integration Test Planner',\n      type: 'task-planner',\n      capabilities: ['project-management', 'task-breakdown'],\n      maxConcurrentTasks: 1,\n      priority: 85\n    });\n\n    // Verify agent can be queried through registry\n    const agents = await this.agentRegistry.queryAgents({\n      type: 'task-planner' as any,\n      namePattern: 'Integration Test Planner'\n    });\n\n    if (agents.length === 0) {\n      throw new Error('Agent not found in registry after creation');\n    }\n\n    this.logger.info(`Agent registered successfully in registry: ${agents[0].id.id}`);\n\n    // Clean up\n    await this.agentManager.stopAgent(agentId);\n  }\n\n  /**\n   * Test 4: Test integrated task planning end-to-end\n   */\n  private async testIntegratedTaskPlanning(): Promise<void> {\n    if (!this.hiveMind || !this.agentManager || !this.agentRegistry) {\n      throw new Error('Required systems not initialized');\n    }\n\n    this.logger.info('Testing integrated task planning...');\n\n    // Create integrated planner service\n    this.plannerService = HiveMindPlannerService.createWithAgentManager(\n      this.hiveMind,\n      this.logger as any,\n      this.agentManager,\n      this.agentRegistry\n    );\n\n    // Test task planning request\n    const testRequest = {\n      featureName: 'User Authentication System',\n      designContent: `\n# User Authentication System Design\n\n## Overview\nA secure authentication system with JWT tokens and role-based access control.\n\n## Components\n- User registration and login endpoints\n- JWT token generation and validation\n- Password hashing with bcrypt\n- Role-based permissions system\n- Session management\n\n## API Endpoints\n- POST /auth/register\n- POST /auth/login\n- POST /auth/logout\n- GET /auth/profile\n- PUT /auth/profile\n\n## Security Requirements\n- Password complexity validation\n- Rate limiting on auth endpoints\n- Secure cookie handling\n- HTTPS enforcement\n      `,\n      requirements: 'System must be production-ready with comprehensive testing',\n      timeoutMs: 30000\n    };\n\n    const response = await this.plannerService.generateTaskPlan(testRequest);\n\n    if (!response.success) {\n      throw new Error(`Task planning failed: ${response.error}`);\n    }\n\n    if (!response.taskMarkdown || response.taskMarkdown.length < 100) {\n      throw new Error('Task planning returned insufficient content');\n    }\n\n    this.logger.info(`Task planning successful: ${response.plannerType} agent used`);\n    this.logger.info(`Generated ${response.taskMarkdown.length} characters of task content`);\n  }\n\n  /**\n   * Test 5: Test fallback to hive mind agents when AgentManager unavailable\n   */\n  private async testHiveMindFallback(): Promise<void> {\n    if (!this.hiveMind) {\n      throw new Error('HiveMind not initialized');\n    }\n\n    this.logger.info('Testing hive mind fallback...');\n\n    // Create planner service without AgentManager integration\n    const fallbackPlannerService = new HiveMindPlannerService(\n      this.hiveMind,\n      this.logger as any\n    );\n\n    // Spawn some hive mind agents for fallback testing\n    await this.hiveMind.spawnAgent({\n      type: 'architect',\n      name: 'Fallback Architect'\n    });\n\n    const testRequest = {\n      featureName: 'Simple API Service',\n      designContent: 'Basic REST API with CRUD operations',\n      timeoutMs: 30000\n    };\n\n    const response = await fallbackPlannerService.generateTaskPlan(testRequest);\n\n    if (!response.success) {\n      throw new Error(`Fallback planning failed: ${response.error}`);\n    }\n\n    this.logger.info(`Fallback planning successful: ${response.plannerType} agent used`);\n  }\n\n  /**\n   * Test 6: Test status reporting across both systems\n   */\n  private async testStatusReporting(): Promise<void> {\n    if (!this.plannerService) {\n      throw new Error('Planner service not initialized');\n    }\n\n    this.logger.info('Testing status reporting...');\n\n    const status = await this.plannerService.getStatus();\n\n    this.logger.info(`Status report: TaskPlanners=${status.availableTaskPlanners}, Architects=${status.availableArchitects}, Specialists=${status.availableSpecialists}, Total=${status.totalAgents}`);\n    this.logger.info(`System availability: AgentManager=${status.agentManagerAvailable}, Registry=${status.agentRegistryAvailable}`);\n\n    if (status.totalAgents < 1) {\n      throw new Error('No agents available in either system');\n    }\n  }\n\n  /**\n   * Clean up all test resources\n   */\n  private async cleanup(): Promise<void> {\n    this.logger.info('Cleaning up test resources...');\n\n    try {\n      if (this.agentManager) {\n        await this.agentManager.shutdown();\n      }\n\n      if (this.hiveMind) {\n        await this.hiveMind.shutdown();\n      }\n\n      if (this.memorySystem) {\n        await this.memorySystem.shutdown();\n      }\n\n      this.logger.info('Cleanup completed successfully');\n    } catch (error) {\n      this.logger.error(`Cleanup failed: ${error instanceof Error ? error.message : String(error)}`);\n    }\n  }\n\n  /**\n   * Get test logs\n   */\n  getTestLogs(): string[] {\n    return this.logger.getLogs();\n  }\n}\n\n/**\n * Main test runner function\n */\nexport async function runMaestroIntegrationTests(): Promise<void> {\n  const testRunner = new MaestroIntegrationTest();\n  \n  console.log('\uD83E\uDDEA Starting Maestro AgentManager Integration Tests...\\n');\n  \n  const results = await testRunner.runTests();\n  \n  console.log('\\n\uD83D\uDCCA Test Results:');\n  console.log('================');\n  \n  results.results.forEach(result => {\n    console.log(result);\n  });\n  \n  if (results.errors.length > 0) {\n    console.log('\\n\u274C Errors:');\n    results.errors.forEach(error => {\n      console.log(`   ${error}`);\n    });\n  }\n  \n  console.log('\\n\uD83D\uDCCB Detailed Logs:');\n  console.log('==================');\n  testRunner.getTestLogs().forEach(log => {\n    console.log(`   ${log}`);\n  });\n  \n  console.log(`\\n\uD83C\uDFC1 Integration test ${results.success ? 'PASSED' : 'FAILED'}`);\n  \n  if (!results.success) {\n    process.exit(1);\n  }\n}\n\n// Run tests if this file is executed directly\nif (require.main === module) {\n  runMaestroIntegrationTests().catch(console.error);\n}"],
      version: 3
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "84b6992e89f9b4be7e4e08b3f6b4e17a49cd6b82"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_1vlq3jokzh = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_1vlq3jokzh();
/**
 * Integration Test for Maestro + AgentManager Integration
 *
 * Tests the complete integration between HiveMindPlannerService,
 * AgentManager task-planner template, and AgentRegistry systems.
 */
import { HiveMindPlannerService } from '../services/HiveMindPlannerService.js';
import { AgentManager } from '../../agents/agent-manager.js';
import { AgentRegistry } from '../../agents/agent-registry.js';
import { HiveMind } from '../../hive-mind/core/HiveMind.js';
import { DistributedMemorySystem } from '../../memory/distributed-memory.js';
/**
 * Mock logger for testing
 */
class MockLogger {
  logs =
  /* istanbul ignore next */
  (cov_1vlq3jokzh().s[0]++, []);
  info(message) {
    /* istanbul ignore next */
    cov_1vlq3jokzh().f[0]++;
    cov_1vlq3jokzh().s[1]++;
    this.logs.push(`INFO: ${message}`);
    /* istanbul ignore next */
    cov_1vlq3jokzh().s[2]++;
    console.log(`[TEST INFO] ${message}`);
  }
  warn(message) {
    /* istanbul ignore next */
    cov_1vlq3jokzh().f[1]++;
    cov_1vlq3jokzh().s[3]++;
    this.logs.push(`WARN: ${message}`);
    /* istanbul ignore next */
    cov_1vlq3jokzh().s[4]++;
    console.log(`[TEST WARN] ${message}`);
  }
  error(message) {
    /* istanbul ignore next */
    cov_1vlq3jokzh().f[2]++;
    cov_1vlq3jokzh().s[5]++;
    this.logs.push(`ERROR: ${message}`);
    /* istanbul ignore next */
    cov_1vlq3jokzh().s[6]++;
    console.log(`[TEST ERROR] ${message}`);
  }
  getLogs() {
    /* istanbul ignore next */
    cov_1vlq3jokzh().f[3]++;
    cov_1vlq3jokzh().s[7]++;
    return [...this.logs];
  }
  clearLogs() {
    /* istanbul ignore next */
    cov_1vlq3jokzh().f[4]++;
    cov_1vlq3jokzh().s[8]++;
    this.logs = [];
  }
}
/**
 * Integration test runner
 */
export class MaestroIntegrationTest {
  logger;
  memorySystem;
  agentManager;
  agentRegistry;
  hiveMind;
  plannerService;
  constructor() {
    /* istanbul ignore next */
    cov_1vlq3jokzh().f[5]++;
    cov_1vlq3jokzh().s[9]++;
    this.logger = new MockLogger();
  }
  /**
   * Run complete integration test suite
   */
  async runTests() {
    /* istanbul ignore next */
    cov_1vlq3jokzh().f[6]++;
    const results =
    /* istanbul ignore next */
    (cov_1vlq3jokzh().s[10]++, []);
    const errors =
    /* istanbul ignore next */
    (cov_1vlq3jokzh().s[11]++, []);
    /* istanbul ignore next */
    cov_1vlq3jokzh().s[12]++;
    try {
      /* istanbul ignore next */
      cov_1vlq3jokzh().s[13]++;
      results.push('🚀 Starting Maestro AgentManager Integration Tests...');
      // Test 1: Initialize all systems
      /* istanbul ignore next */
      cov_1vlq3jokzh().s[14]++;
      await this.testSystemInitialization();
      /* istanbul ignore next */
      cov_1vlq3jokzh().s[15]++;
      results.push('✅ Test 1: System initialization successful');
      // Test 2: Verify AgentManager task-planner template
      /* istanbul ignore next */
      cov_1vlq3jokzh().s[16]++;
      await this.testTaskPlannerTemplate();
      /* istanbul ignore next */
      cov_1vlq3jokzh().s[17]++;
      results.push('✅ Test 2: Task-planner template verification successful');
      // Test 3: Test agent creation and registration
      /* istanbul ignore next */
      cov_1vlq3jokzh().s[18]++;
      await this.testAgentCreationAndRegistration();
      /* istanbul ignore next */
      cov_1vlq3jokzh().s[19]++;
      results.push('✅ Test 3: Agent creation and registration successful');
      // Test 4: Test integrated task planning
      /* istanbul ignore next */
      cov_1vlq3jokzh().s[20]++;
      await this.testIntegratedTaskPlanning();
      /* istanbul ignore next */
      cov_1vlq3jokzh().s[21]++;
      results.push('✅ Test 4: Integrated task planning successful');
      // Test 5: Test fallback to hive mind agents
      /* istanbul ignore next */
      cov_1vlq3jokzh().s[22]++;
      await this.testHiveMindFallback();
      /* istanbul ignore next */
      cov_1vlq3jokzh().s[23]++;
      results.push('✅ Test 5: Hive mind fallback successful');
      // Test 6: Test status reporting
      /* istanbul ignore next */
      cov_1vlq3jokzh().s[24]++;
      await this.testStatusReporting();
      /* istanbul ignore next */
      cov_1vlq3jokzh().s[25]++;
      results.push('✅ Test 6: Status reporting successful');
      /* istanbul ignore next */
      cov_1vlq3jokzh().s[26]++;
      results.push('🎉 All integration tests passed successfully!');
      /* istanbul ignore next */
      cov_1vlq3jokzh().s[27]++;
      return {
        success: true,
        results,
        errors
      };
    } catch (error) {
      const errorMsg =
      /* istanbul ignore next */
      (cov_1vlq3jokzh().s[28]++, `Integration test failed: ${error instanceof Error ?
      /* istanbul ignore next */
      (cov_1vlq3jokzh().b[0][0]++, error.message) :
      /* istanbul ignore next */
      (cov_1vlq3jokzh().b[0][1]++, String(error))}`);
      /* istanbul ignore next */
      cov_1vlq3jokzh().s[29]++;
      errors.push(errorMsg);
      /* istanbul ignore next */
      cov_1vlq3jokzh().s[30]++;
      this.logger.error(errorMsg);
      /* istanbul ignore next */
      cov_1vlq3jokzh().s[31]++;
      return {
        success: false,
        results,
        errors
      };
    } finally {
      /* istanbul ignore next */
      cov_1vlq3jokzh().s[32]++;
      await this.cleanup();
    }
  }
  /**
   * Test 1: Initialize all required systems
   */
  async testSystemInitialization() {
    /* istanbul ignore next */
    cov_1vlq3jokzh().f[7]++;
    cov_1vlq3jokzh().s[33]++;
    this.logger.info('Initializing distributed memory system...');
    /* istanbul ignore next */
    cov_1vlq3jokzh().s[34]++;
    this.memorySystem = new DistributedMemorySystem();
    /* istanbul ignore next */
    cov_1vlq3jokzh().s[35]++;
    await this.memorySystem.initialize();
    /* istanbul ignore next */
    cov_1vlq3jokzh().s[36]++;
    this.logger.info('Initializing AgentManager...');
    /* istanbul ignore next */
    cov_1vlq3jokzh().s[37]++;
    this.agentManager = new AgentManager({},
    // config
    {},
    // eventBus
    this.logger, this.memorySystem);
    /* istanbul ignore next */
    cov_1vlq3jokzh().s[38]++;
    await this.agentManager.initialize();
    /* istanbul ignore next */
    cov_1vlq3jokzh().s[39]++;
    this.logger.info('Initializing AgentRegistry...');
    /* istanbul ignore next */
    cov_1vlq3jokzh().s[40]++;
    this.agentRegistry = new AgentRegistry(this.memorySystem, 'test-agents');
    /* istanbul ignore next */
    cov_1vlq3jokzh().s[41]++;
    await this.agentRegistry.initialize();
    /* istanbul ignore next */
    cov_1vlq3jokzh().s[42]++;
    this.logger.info('Initializing HiveMind...');
    /* istanbul ignore next */
    cov_1vlq3jokzh().s[43]++;
    this.hiveMind = new HiveMind({
      name: 'test-hive',
      topology: 'hierarchical',
      queenMode: 'strategic',
      maxAgents: 5,
      consensusThreshold: 0.66,
      memoryTTL: 3600000,
      autoSpawn: false,
      enableConsensus: false,
      enableMemory: true,
      enableCommunication: false
    });
    /* istanbul ignore next */
    cov_1vlq3jokzh().s[44]++;
    await this.hiveMind.initialize();
    /* istanbul ignore next */
    cov_1vlq3jokzh().s[45]++;
    this.logger.info('All systems initialized successfully');
  }
  /**
   * Test 2: Verify AgentManager has task-planner template
   */
  async testTaskPlannerTemplate() {
    /* istanbul ignore next */
    cov_1vlq3jokzh().f[8]++;
    cov_1vlq3jokzh().s[46]++;
    if (!this.agentManager) {
      /* istanbul ignore next */
      cov_1vlq3jokzh().b[1][0]++;
      cov_1vlq3jokzh().s[47]++;
      throw new Error('AgentManager not initialized');
    } else
    /* istanbul ignore next */
    {
      cov_1vlq3jokzh().b[1][1]++;
    }
    cov_1vlq3jokzh().s[48]++;
    this.logger.info('Checking for task-planner template in AgentManager...');
    // Create a task-planner agent to verify template exists
    const agentId =
    /* istanbul ignore next */
    (cov_1vlq3jokzh().s[49]++, await this.agentManager.createAgent('task-planner', {
      name: 'Test Task Planner',
      type: 'task-planner',
      capabilities: ['project-management', 'task-breakdown', 'agile-planning'],
      maxConcurrentTasks: 1,
      priority: 90
    }));
    /* istanbul ignore next */
    cov_1vlq3jokzh().s[50]++;
    if (!agentId) {
      /* istanbul ignore next */
      cov_1vlq3jokzh().b[2][0]++;
      cov_1vlq3jokzh().s[51]++;
      throw new Error('Failed to create task-planner agent - template may not exist');
    } else
    /* istanbul ignore next */
    {
      cov_1vlq3jokzh().b[2][1]++;
    }
    cov_1vlq3jokzh().s[52]++;
    this.logger.info(`Task-planner agent created successfully: ${agentId}`);
    // Clean up the test agent
    /* istanbul ignore next */
    cov_1vlq3jokzh().s[53]++;
    await this.agentManager.stopAgent(agentId);
  }
  /**
   * Test 3: Test agent creation and registration flow
   */
  async testAgentCreationAndRegistration() {
    /* istanbul ignore next */
    cov_1vlq3jokzh().f[9]++;
    cov_1vlq3jokzh().s[54]++;
    if (
    /* istanbul ignore next */
    (cov_1vlq3jokzh().b[4][0]++, !this.agentManager) ||
    /* istanbul ignore next */
    (cov_1vlq3jokzh().b[4][1]++, !this.agentRegistry)) {
      /* istanbul ignore next */
      cov_1vlq3jokzh().b[3][0]++;
      cov_1vlq3jokzh().s[55]++;
      throw new Error('Required systems not initialized');
    } else
    /* istanbul ignore next */
    {
      cov_1vlq3jokzh().b[3][1]++;
    }
    cov_1vlq3jokzh().s[56]++;
    this.logger.info('Testing agent creation and registration flow...');
    // Create agent through AgentManager
    const agentId =
    /* istanbul ignore next */
    (cov_1vlq3jokzh().s[57]++, await this.agentManager.createAgent('task-planner', {
      name: 'Integration Test Planner',
      type: 'task-planner',
      capabilities: ['project-management', 'task-breakdown'],
      maxConcurrentTasks: 1,
      priority: 85
    }));
    // Verify agent can be queried through registry
    const agents =
    /* istanbul ignore next */
    (cov_1vlq3jokzh().s[58]++, await this.agentRegistry.queryAgents({
      type: 'task-planner',
      namePattern: 'Integration Test Planner'
    }));
    /* istanbul ignore next */
    cov_1vlq3jokzh().s[59]++;
    if (agents.length === 0) {
      /* istanbul ignore next */
      cov_1vlq3jokzh().b[5][0]++;
      cov_1vlq3jokzh().s[60]++;
      throw new Error('Agent not found in registry after creation');
    } else
    /* istanbul ignore next */
    {
      cov_1vlq3jokzh().b[5][1]++;
    }
    cov_1vlq3jokzh().s[61]++;
    this.logger.info(`Agent registered successfully in registry: ${agents[0].id.id}`);
    // Clean up
    /* istanbul ignore next */
    cov_1vlq3jokzh().s[62]++;
    await this.agentManager.stopAgent(agentId);
  }
  /**
   * Test 4: Test integrated task planning end-to-end
   */
  async testIntegratedTaskPlanning() {
    /* istanbul ignore next */
    cov_1vlq3jokzh().f[10]++;
    cov_1vlq3jokzh().s[63]++;
    if (
    /* istanbul ignore next */
    (cov_1vlq3jokzh().b[7][0]++, !this.hiveMind) ||
    /* istanbul ignore next */
    (cov_1vlq3jokzh().b[7][1]++, !this.agentManager) ||
    /* istanbul ignore next */
    (cov_1vlq3jokzh().b[7][2]++, !this.agentRegistry)) {
      /* istanbul ignore next */
      cov_1vlq3jokzh().b[6][0]++;
      cov_1vlq3jokzh().s[64]++;
      throw new Error('Required systems not initialized');
    } else
    /* istanbul ignore next */
    {
      cov_1vlq3jokzh().b[6][1]++;
    }
    cov_1vlq3jokzh().s[65]++;
    this.logger.info('Testing integrated task planning...');
    // Create integrated planner service
    /* istanbul ignore next */
    cov_1vlq3jokzh().s[66]++;
    this.plannerService = HiveMindPlannerService.createWithAgentManager(this.hiveMind, this.logger, this.agentManager, this.agentRegistry);
    // Test task planning request
    const testRequest =
    /* istanbul ignore next */
    (cov_1vlq3jokzh().s[67]++, {
      featureName: 'User Authentication System',
      designContent: `
# User Authentication System Design

## Overview
A secure authentication system with JWT tokens and role-based access control.

## Components
- User registration and login endpoints
- JWT token generation and validation
- Password hashing with bcrypt
- Role-based permissions system
- Session management

## API Endpoints
- POST /auth/register
- POST /auth/login
- POST /auth/logout
- GET /auth/profile
- PUT /auth/profile

## Security Requirements
- Password complexity validation
- Rate limiting on auth endpoints
- Secure cookie handling
- HTTPS enforcement
      `,
      requirements: 'System must be production-ready with comprehensive testing',
      timeoutMs: 30000
    });
    const response =
    /* istanbul ignore next */
    (cov_1vlq3jokzh().s[68]++, await this.plannerService.generateTaskPlan(testRequest));
    /* istanbul ignore next */
    cov_1vlq3jokzh().s[69]++;
    if (!response.success) {
      /* istanbul ignore next */
      cov_1vlq3jokzh().b[8][0]++;
      cov_1vlq3jokzh().s[70]++;
      throw new Error(`Task planning failed: ${response.error}`);
    } else
    /* istanbul ignore next */
    {
      cov_1vlq3jokzh().b[8][1]++;
    }
    cov_1vlq3jokzh().s[71]++;
    if (
    /* istanbul ignore next */
    (cov_1vlq3jokzh().b[10][0]++, !response.taskMarkdown) ||
    /* istanbul ignore next */
    (cov_1vlq3jokzh().b[10][1]++, response.taskMarkdown.length < 100)) {
      /* istanbul ignore next */
      cov_1vlq3jokzh().b[9][0]++;
      cov_1vlq3jokzh().s[72]++;
      throw new Error('Task planning returned insufficient content');
    } else
    /* istanbul ignore next */
    {
      cov_1vlq3jokzh().b[9][1]++;
    }
    cov_1vlq3jokzh().s[73]++;
    this.logger.info(`Task planning successful: ${response.plannerType} agent used`);
    /* istanbul ignore next */
    cov_1vlq3jokzh().s[74]++;
    this.logger.info(`Generated ${response.taskMarkdown.length} characters of task content`);
  }
  /**
   * Test 5: Test fallback to hive mind agents when AgentManager unavailable
   */
  async testHiveMindFallback() {
    /* istanbul ignore next */
    cov_1vlq3jokzh().f[11]++;
    cov_1vlq3jokzh().s[75]++;
    if (!this.hiveMind) {
      /* istanbul ignore next */
      cov_1vlq3jokzh().b[11][0]++;
      cov_1vlq3jokzh().s[76]++;
      throw new Error('HiveMind not initialized');
    } else
    /* istanbul ignore next */
    {
      cov_1vlq3jokzh().b[11][1]++;
    }
    cov_1vlq3jokzh().s[77]++;
    this.logger.info('Testing hive mind fallback...');
    // Create planner service without AgentManager integration
    const fallbackPlannerService =
    /* istanbul ignore next */
    (cov_1vlq3jokzh().s[78]++, new HiveMindPlannerService(this.hiveMind, this.logger));
    // Spawn some hive mind agents for fallback testing
    /* istanbul ignore next */
    cov_1vlq3jokzh().s[79]++;
    await this.hiveMind.spawnAgent({
      type: 'architect',
      name: 'Fallback Architect'
    });
    const testRequest =
    /* istanbul ignore next */
    (cov_1vlq3jokzh().s[80]++, {
      featureName: 'Simple API Service',
      designContent: 'Basic REST API with CRUD operations',
      timeoutMs: 30000
    });
    const response =
    /* istanbul ignore next */
    (cov_1vlq3jokzh().s[81]++, await fallbackPlannerService.generateTaskPlan(testRequest));
    /* istanbul ignore next */
    cov_1vlq3jokzh().s[82]++;
    if (!response.success) {
      /* istanbul ignore next */
      cov_1vlq3jokzh().b[12][0]++;
      cov_1vlq3jokzh().s[83]++;
      throw new Error(`Fallback planning failed: ${response.error}`);
    } else
    /* istanbul ignore next */
    {
      cov_1vlq3jokzh().b[12][1]++;
    }
    cov_1vlq3jokzh().s[84]++;
    this.logger.info(`Fallback planning successful: ${response.plannerType} agent used`);
  }
  /**
   * Test 6: Test status reporting across both systems
   */
  async testStatusReporting() {
    /* istanbul ignore next */
    cov_1vlq3jokzh().f[12]++;
    cov_1vlq3jokzh().s[85]++;
    if (!this.plannerService) {
      /* istanbul ignore next */
      cov_1vlq3jokzh().b[13][0]++;
      cov_1vlq3jokzh().s[86]++;
      throw new Error('Planner service not initialized');
    } else
    /* istanbul ignore next */
    {
      cov_1vlq3jokzh().b[13][1]++;
    }
    cov_1vlq3jokzh().s[87]++;
    this.logger.info('Testing status reporting...');
    const status =
    /* istanbul ignore next */
    (cov_1vlq3jokzh().s[88]++, await this.plannerService.getStatus());
    /* istanbul ignore next */
    cov_1vlq3jokzh().s[89]++;
    this.logger.info(`Status report: TaskPlanners=${status.availableTaskPlanners}, Architects=${status.availableArchitects}, Specialists=${status.availableSpecialists}, Total=${status.totalAgents}`);
    /* istanbul ignore next */
    cov_1vlq3jokzh().s[90]++;
    this.logger.info(`System availability: AgentManager=${status.agentManagerAvailable}, Registry=${status.agentRegistryAvailable}`);
    /* istanbul ignore next */
    cov_1vlq3jokzh().s[91]++;
    if (status.totalAgents < 1) {
      /* istanbul ignore next */
      cov_1vlq3jokzh().b[14][0]++;
      cov_1vlq3jokzh().s[92]++;
      throw new Error('No agents available in either system');
    } else
    /* istanbul ignore next */
    {
      cov_1vlq3jokzh().b[14][1]++;
    }
  }
  /**
   * Clean up all test resources
   */
  async cleanup() {
    /* istanbul ignore next */
    cov_1vlq3jokzh().f[13]++;
    cov_1vlq3jokzh().s[93]++;
    this.logger.info('Cleaning up test resources...');
    /* istanbul ignore next */
    cov_1vlq3jokzh().s[94]++;
    try {
      /* istanbul ignore next */
      cov_1vlq3jokzh().s[95]++;
      if (this.agentManager) {
        /* istanbul ignore next */
        cov_1vlq3jokzh().b[15][0]++;
        cov_1vlq3jokzh().s[96]++;
        await this.agentManager.shutdown();
      } else
      /* istanbul ignore next */
      {
        cov_1vlq3jokzh().b[15][1]++;
      }
      cov_1vlq3jokzh().s[97]++;
      if (this.hiveMind) {
        /* istanbul ignore next */
        cov_1vlq3jokzh().b[16][0]++;
        cov_1vlq3jokzh().s[98]++;
        await this.hiveMind.shutdown();
      } else
      /* istanbul ignore next */
      {
        cov_1vlq3jokzh().b[16][1]++;
      }
      cov_1vlq3jokzh().s[99]++;
      if (this.memorySystem) {
        /* istanbul ignore next */
        cov_1vlq3jokzh().b[17][0]++;
        cov_1vlq3jokzh().s[100]++;
        await this.memorySystem.shutdown();
      } else
      /* istanbul ignore next */
      {
        cov_1vlq3jokzh().b[17][1]++;
      }
      cov_1vlq3jokzh().s[101]++;
      this.logger.info('Cleanup completed successfully');
    } catch (error) {
      /* istanbul ignore next */
      cov_1vlq3jokzh().s[102]++;
      this.logger.error(`Cleanup failed: ${error instanceof Error ?
      /* istanbul ignore next */
      (cov_1vlq3jokzh().b[18][0]++, error.message) :
      /* istanbul ignore next */
      (cov_1vlq3jokzh().b[18][1]++, String(error))}`);
    }
  }
  /**
   * Get test logs
   */
  getTestLogs() {
    /* istanbul ignore next */
    cov_1vlq3jokzh().f[14]++;
    cov_1vlq3jokzh().s[103]++;
    return this.logger.getLogs();
  }
}
/**
 * Main test runner function
 */
export async function runMaestroIntegrationTests() {
  /* istanbul ignore next */
  cov_1vlq3jokzh().f[15]++;
  const testRunner =
  /* istanbul ignore next */
  (cov_1vlq3jokzh().s[104]++, new MaestroIntegrationTest());
  /* istanbul ignore next */
  cov_1vlq3jokzh().s[105]++;
  console.log('🧪 Starting Maestro AgentManager Integration Tests...\n');
  const results =
  /* istanbul ignore next */
  (cov_1vlq3jokzh().s[106]++, await testRunner.runTests());
  /* istanbul ignore next */
  cov_1vlq3jokzh().s[107]++;
  console.log('\n📊 Test Results:');
  /* istanbul ignore next */
  cov_1vlq3jokzh().s[108]++;
  console.log('================');
  /* istanbul ignore next */
  cov_1vlq3jokzh().s[109]++;
  results.results.forEach(result => {
    /* istanbul ignore next */
    cov_1vlq3jokzh().f[16]++;
    cov_1vlq3jokzh().s[110]++;
    console.log(result);
  });
  /* istanbul ignore next */
  cov_1vlq3jokzh().s[111]++;
  if (results.errors.length > 0) {
    /* istanbul ignore next */
    cov_1vlq3jokzh().b[19][0]++;
    cov_1vlq3jokzh().s[112]++;
    console.log('\n❌ Errors:');
    /* istanbul ignore next */
    cov_1vlq3jokzh().s[113]++;
    results.errors.forEach(error => {
      /* istanbul ignore next */
      cov_1vlq3jokzh().f[17]++;
      cov_1vlq3jokzh().s[114]++;
      console.log(`   ${error}`);
    });
  } else
  /* istanbul ignore next */
  {
    cov_1vlq3jokzh().b[19][1]++;
  }
  cov_1vlq3jokzh().s[115]++;
  console.log('\n📋 Detailed Logs:');
  /* istanbul ignore next */
  cov_1vlq3jokzh().s[116]++;
  console.log('==================');
  /* istanbul ignore next */
  cov_1vlq3jokzh().s[117]++;
  testRunner.getTestLogs().forEach(log => {
    /* istanbul ignore next */
    cov_1vlq3jokzh().f[18]++;
    cov_1vlq3jokzh().s[118]++;
    console.log(`   ${log}`);
  });
  /* istanbul ignore next */
  cov_1vlq3jokzh().s[119]++;
  console.log(`\n🏁 Integration test ${results.success ?
  /* istanbul ignore next */
  (cov_1vlq3jokzh().b[20][0]++, 'PASSED') :
  /* istanbul ignore next */
  (cov_1vlq3jokzh().b[20][1]++, 'FAILED')}`);
  /* istanbul ignore next */
  cov_1vlq3jokzh().s[120]++;
  if (!results.success) {
    /* istanbul ignore next */
    cov_1vlq3jokzh().b[21][0]++;
    cov_1vlq3jokzh().s[121]++;
    process.exit(1);
  } else
  /* istanbul ignore next */
  {
    cov_1vlq3jokzh().b[21][1]++;
  }
}
// Run tests if this file is executed directly
/* istanbul ignore next */
cov_1vlq3jokzh().s[122]++;
if (require.main === module) {
  /* istanbul ignore next */
  cov_1vlq3jokzh().b[22][0]++;
  cov_1vlq3jokzh().s[123]++;
  runMaestroIntegrationTests().catch(console.error);
} else
/* istanbul ignore next */
{
  cov_1vlq3jokzh().b[22][1]++;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,