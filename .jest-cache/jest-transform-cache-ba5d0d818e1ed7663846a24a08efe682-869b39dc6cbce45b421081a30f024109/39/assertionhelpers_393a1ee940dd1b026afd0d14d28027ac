8d60da72c5a8eef50636e1b0dacc5ccd
/* istanbul ignore next */
function cov_1qnv932f9y() {
  var path = "/home/mhugo/code/claude-code-flow/src/__tests__/helpers/assertion-helpers.ts";
  var hash = "0e39eec6513637b20e47b2a6a04ea65b956633cf";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/home/mhugo/code/claude-code-flow/src/__tests__/helpers/assertion-helpers.ts",
    statementMap: {
      "0": {
        start: {
          line: 10,
          column: 8
        },
        end: {
          line: 20,
          column: 10
        }
      },
      "1": {
        start: {
          line: 26,
          column: 32
        },
        end: {
          line: 26,
          column: 67
        }
      },
      "2": {
        start: {
          line: 27,
          column: 24
        },
        end: {
          line: 28,
          column: 105
        }
      },
      "3": {
        start: {
          line: 29,
          column: 8
        },
        end: {
          line: 29,
          column: 62
        }
      },
      "4": {
        start: {
          line: 35,
          column: 8
        },
        end: {
          line: 38,
          column: 9
        }
      },
      "5": {
        start: {
          line: 36,
          column: 28
        },
        end: {
          line: 36,
          column: 120
        }
      },
      "6": {
        start: {
          line: 37,
          column: 12
        },
        end: {
          line: 37,
          column: 88
        }
      },
      "7": {
        start: {
          line: 39,
          column: 8
        },
        end: {
          line: 42,
          column: 9
        }
      },
      "8": {
        start: {
          line: 40,
          column: 28
        },
        end: {
          line: 40,
          column: 118
        }
      },
      "9": {
        start: {
          line: 41,
          column: 12
        },
        end: {
          line: 41,
          column: 94
        }
      },
      "10": {
        start: {
          line: 43,
          column: 8
        },
        end: {
          line: 46,
          column: 9
        }
      },
      "11": {
        start: {
          line: 44,
          column: 28
        },
        end: {
          line: 44,
          column: 122
        }
      },
      "12": {
        start: {
          line: 45,
          column: 12
        },
        end: {
          line: 45,
          column: 96
        }
      },
      "13": {
        start: {
          line: 47,
          column: 8
        },
        end: {
          line: 50,
          column: 9
        }
      },
      "14": {
        start: {
          line: 48,
          column: 28
        },
        end: {
          line: 48,
          column: 103
        }
      },
      "15": {
        start: {
          line: 49,
          column: 12
        },
        end: {
          line: 49,
          column: 85
        }
      },
      "16": {
        start: {
          line: 56,
          column: 24
        },
        end: {
          line: 58,
          column: 10
        }
      },
      "17": {
        start: {
          line: 57,
          column: 12
        },
        end: {
          line: 57,
          column: 108
        }
      },
      "18": {
        start: {
          line: 57,
          column: 29
        },
        end: {
          line: 57,
          column: 95
        }
      },
      "19": {
        start: {
          line: 59,
          column: 8
        },
        end: {
          line: 59,
          column: 48
        }
      },
      "20": {
        start: {
          line: 65,
          column: 24
        },
        end: {
          line: 65,
          column: 47
        }
      },
      "21": {
        start: {
          line: 66,
          column: 25
        },
        end: {
          line: 66,
          column: 48
        }
      },
      "22": {
        start: {
          line: 67,
          column: 26
        },
        end: {
          line: 67,
          column: 36
        }
      },
      "23": {
        start: {
          line: 68,
          column: 8
        },
        end: {
          line: 79,
          column: 9
        }
      },
      "24": {
        start: {
          line: 69,
          column: 12
        },
        end: {
          line: 77,
          column: 13
        }
      },
      "25": {
        start: {
          line: 70,
          column: 31
        },
        end: {
          line: 70,
          column: 48
        }
      },
      "26": {
        start: {
          line: 71,
          column: 16
        },
        end: {
          line: 73,
          column: 17
        }
      },
      "27": {
        start: {
          line: 72,
          column: 20
        },
        end: {
          line: 72,
          column: 27
        }
      },
      "28": {
        start: {
          line: 78,
          column: 12
        },
        end: {
          line: 78,
          column: 39
        }
      },
      "29": {
        start: {
          line: 80,
          column: 8
        },
        end: {
          line: 80,
          column: 77
        }
      },
      "30": {
        start: {
          line: 86,
          column: 8
        },
        end: {
          line: 86,
          column: 53
        }
      },
      "31": {
        start: {
          line: 87,
          column: 8
        },
        end: {
          line: 89,
          column: 9
        }
      },
      "32": {
        start: {
          line: 88,
          column: 12
        },
        end: {
          line: 88,
          column: 46
        }
      },
      "33": {
        start: {
          line: 95,
          column: 8
        },
        end: {
          line: 101,
          column: 9
        }
      },
      "34": {
        start: {
          line: 96,
          column: 28
        },
        end: {
          line: 96,
          column: 88
        }
      },
      "35": {
        start: {
          line: 97,
          column: 12
        },
        end: {
          line: 97,
          column: 39
        }
      },
      "36": {
        start: {
          line: 100,
          column: 12
        },
        end: {
          line: 100,
          column: 45
        }
      },
      "37": {
        start: {
          line: 107,
          column: 8
        },
        end: {
          line: 107,
          column: 47
        }
      },
      "38": {
        start: {
          line: 113,
          column: 24
        },
        end: {
          line: 113,
          column: 91
        }
      },
      "39": {
        start: {
          line: 114,
          column: 8
        },
        end: {
          line: 114,
          column: 40
        }
      },
      "40": {
        start: {
          line: 120,
          column: 8
        },
        end: {
          line: 120,
          column: 45
        }
      },
      "41": {
        start: {
          line: 121,
          column: 8
        },
        end: {
          line: 123,
          column: 9
        }
      },
      "42": {
        start: {
          line: 122,
          column: 12
        },
        end: {
          line: 122,
          column: 68
        }
      },
      "43": {
        start: {
          line: 124,
          column: 8
        },
        end: {
          line: 126,
          column: 9
        }
      },
      "44": {
        start: {
          line: 125,
          column: 12
        },
        end: {
          line: 125,
          column: 62
        }
      },
      "45": {
        start: {
          line: 127,
          column: 8
        },
        end: {
          line: 129,
          column: 9
        }
      },
      "46": {
        start: {
          line: 128,
          column: 12
        },
        end: {
          line: 128,
          column: 74
        }
      },
      "47": {
        start: {
          line: 135,
          column: 8
        },
        end: {
          line: 151,
          column: 9
        }
      },
      "48": {
        start: {
          line: 136,
          column: 12
        },
        end: {
          line: 136,
          column: 30
        }
      },
      "49": {
        start: {
          line: 137,
          column: 12
        },
        end: {
          line: 137,
          column: 77
        }
      },
      "50": {
        start: {
          line: 140,
          column: 12
        },
        end: {
          line: 150,
          column: 13
        }
      },
      "51": {
        start: {
          line: 141,
          column: 16
        },
        end: {
          line: 149,
          column: 17
        }
      },
      "52": {
        start: {
          line: 142,
          column: 20
        },
        end: {
          line: 142,
          column: 62
        }
      },
      "53": {
        start: {
          line: 144,
          column: 21
        },
        end: {
          line: 149,
          column: 17
        }
      },
      "54": {
        start: {
          line: 145,
          column: 20
        },
        end: {
          line: 145,
          column: 65
        }
      },
      "55": {
        start: {
          line: 147,
          column: 21
        },
        end: {
          line: 149,
          column: 17
        }
      },
      "56": {
        start: {
          line: 148,
          column: 20
        },
        end: {
          line: 148,
          column: 57
        }
      },
      "57": {
        start: {
          line: 157,
          column: 8
        },
        end: {
          line: 157,
          column: 53
        }
      },
      "58": {
        start: {
          line: 158,
          column: 8
        },
        end: {
          line: 162,
          column: 9
        }
      },
      "59": {
        start: {
          line: 159,
          column: 12
        },
        end: {
          line: 161,
          column: 15
        }
      },
      "60": {
        start: {
          line: 160,
          column: 16
        },
        end: {
          line: 160,
          column: 75
        }
      },
      "61": {
        start: {
          line: 168,
          column: 28
        },
        end: {
          line: 168,
          column: 71
        }
      },
      "62": {
        start: {
          line: 169,
          column: 8
        },
        end: {
          line: 171,
          column: 9
        }
      },
      "63": {
        start: {
          line: 170,
          column: 12
        },
        end: {
          line: 170,
          column: 69
        }
      },
      "64": {
        start: {
          line: 172,
          column: 8
        },
        end: {
          line: 172,
          column: 60
        }
      },
      "65": {
        start: {
          line: 174,
          column: 32
        },
        end: {
          line: 174,
          column: 127
        }
      },
      "66": {
        start: {
          line: 174,
          column: 83
        },
        end: {
          line: 174,
          column: 126
        }
      },
      "67": {
        start: {
          line: 175,
          column: 31
        },
        end: {
          line: 175,
          column: 84
        }
      },
      "68": {
        start: {
          line: 176,
          column: 8
        },
        end: {
          line: 176,
          column: 52
        }
      },
      "69": {
        start: {
          line: 182,
          column: 8
        },
        end: {
          line: 184,
          column: 9
        }
      },
      "70": {
        start: {
          line: 183,
          column: 12
        },
        end: {
          line: 183,
          column: 80
        }
      },
      "71": {
        start: {
          line: 185,
          column: 8
        },
        end: {
          line: 187,
          column: 9
        }
      },
      "72": {
        start: {
          line: 186,
          column: 12
        },
        end: {
          line: 186,
          column: 74
        }
      },
      "73": {
        start: {
          line: 188,
          column: 8
        },
        end: {
          line: 190,
          column: 9
        }
      },
      "74": {
        start: {
          line: 189,
          column: 12
        },
        end: {
          line: 189,
          column: 96
        }
      },
      "75": {
        start: {
          line: 191,
          column: 8
        },
        end: {
          line: 193,
          column: 9
        }
      },
      "76": {
        start: {
          line: 192,
          column: 12
        },
        end: {
          line: 192,
          column: 100
        }
      },
      "77": {
        start: {
          line: 199,
          column: 29
        },
        end: {
          line: 199,
          column: 54
        }
      },
      "78": {
        start: {
          line: 200,
          column: 8
        },
        end: {
          line: 200,
          column: 67
        }
      },
      "79": {
        start: {
          line: 201,
          column: 8
        },
        end: {
          line: 207,
          column: 11
        }
      },
      "80": {
        start: {
          line: 202,
          column: 32
        },
        end: {
          line: 202,
          column: 51
        }
      },
      "81": {
        start: {
          line: 203,
          column: 12
        },
        end: {
          line: 203,
          column: 61
        }
      },
      "82": {
        start: {
          line: 204,
          column: 12
        },
        end: {
          line: 206,
          column: 13
        }
      },
      "83": {
        start: {
          line: 205,
          column: 16
        },
        end: {
          line: 205,
          column: 64
        }
      },
      "84": {
        start: {
          line: 213,
          column: 8
        },
        end: {
          line: 238,
          column: 9
        }
      },
      "85": {
        start: {
          line: 215,
          column: 16
        },
        end: {
          line: 217,
          column: 17
        }
      },
      "86": {
        start: {
          line: 215,
          column: 29
        },
        end: {
          line: 215,
          column: 30
        }
      },
      "87": {
        start: {
          line: 216,
          column: 20
        },
        end: {
          line: 216,
          column: 76
        }
      },
      "88": {
        start: {
          line: 218,
          column: 16
        },
        end: {
          line: 218,
          column: 22
        }
      },
      "89": {
        start: {
          line: 220,
          column: 16
        },
        end: {
          line: 222,
          column: 17
        }
      },
      "90": {
        start: {
          line: 220,
          column: 29
        },
        end: {
          line: 220,
          column: 30
        }
      },
      "91": {
        start: {
          line: 221,
          column: 20
        },
        end: {
          line: 221,
          column: 73
        }
      },
      "92": {
        start: {
          line: 223,
          column: 16
        },
        end: {
          line: 223,
          column: 22
        }
      },
      "93": {
        start: {
          line: 226,
          column: 16
        },
        end: {
          line: 229,
          column: 17
        }
      },
      "94": {
        start: {
          line: 226,
          column: 29
        },
        end: {
          line: 226,
          column: 30
        }
      },
      "95": {
        start: {
          line: 227,
          column: 45
        },
        end: {
          line: 227,
          column: 90
        }
      },
      "96": {
        start: {
          line: 228,
          column: 20
        },
        end: {
          line: 228,
          column: 71
        }
      },
      "97": {
        start: {
          line: 230,
          column: 16
        },
        end: {
          line: 230,
          column: 22
        }
      },
      "98": {
        start: {
          line: 233,
          column: 16
        },
        end: {
          line: 236,
          column: 17
        }
      },
      "99": {
        start: {
          line: 233,
          column: 29
        },
        end: {
          line: 233,
          column: 30
        }
      },
      "100": {
        start: {
          line: 234,
          column: 45
        },
        end: {
          line: 234,
          column: 90
        }
      },
      "101": {
        start: {
          line: 235,
          column: 20
        },
        end: {
          line: 235,
          column: 68
        }
      },
      "102": {
        start: {
          line: 237,
          column: 16
        },
        end: {
          line: 237,
          column: 22
        }
      },
      "103": {
        start: {
          line: 241,
          column: 8
        },
        end: {
          line: 243,
          column: 9
        }
      },
      "104": {
        start: {
          line: 242,
          column: 12
        },
        end: {
          line: 242,
          column: 24
        }
      },
      "105": {
        start: {
          line: 244,
          column: 8
        },
        end: {
          line: 245,
          column: 24
        }
      },
      "106": {
        start: {
          line: 245,
          column: 12
        },
        end: {
          line: 245,
          column: 24
        }
      },
      "107": {
        start: {
          line: 246,
          column: 8
        },
        end: {
          line: 247,
          column: 25
        }
      },
      "108": {
        start: {
          line: 247,
          column: 12
        },
        end: {
          line: 247,
          column: 25
        }
      },
      "109": {
        start: {
          line: 248,
          column: 8
        },
        end: {
          line: 249,
          column: 25
        }
      },
      "110": {
        start: {
          line: 249,
          column: 12
        },
        end: {
          line: 249,
          column: 25
        }
      },
      "111": {
        start: {
          line: 250,
          column: 8
        },
        end: {
          line: 263,
          column: 9
        }
      },
      "112": {
        start: {
          line: 251,
          column: 26
        },
        end: {
          line: 251,
          column: 40
        }
      },
      "113": {
        start: {
          line: 252,
          column: 26
        },
        end: {
          line: 252,
          column: 40
        }
      },
      "114": {
        start: {
          line: 253,
          column: 12
        },
        end: {
          line: 254,
          column: 29
        }
      },
      "115": {
        start: {
          line: 254,
          column: 16
        },
        end: {
          line: 254,
          column: 29
        }
      },
      "116": {
        start: {
          line: 255,
          column: 12
        },
        end: {
          line: 261,
          column: 13
        }
      },
      "117": {
        start: {
          line: 256,
          column: 16
        },
        end: {
          line: 257,
          column: 33
        }
      },
      "118": {
        start: {
          line: 257,
          column: 20
        },
        end: {
          line: 257,
          column: 33
        }
      },
      "119": {
        start: {
          line: 258,
          column: 16
        },
        end: {
          line: 260,
          column: 17
        }
      },
      "120": {
        start: {
          line: 259,
          column: 20
        },
        end: {
          line: 259,
          column: 33
        }
      },
      "121": {
        start: {
          line: 262,
          column: 12
        },
        end: {
          line: 262,
          column: 24
        }
      },
      "122": {
        start: {
          line: 264,
          column: 8
        },
        end: {
          line: 264,
          column: 21
        }
      },
      "123": {
        start: {
          line: 267,
          column: 8
        },
        end: {
          line: 267,
          column: 63
        }
      },
      "124": {
        start: {
          line: 267,
          column: 38
        },
        end: {
          line: 267,
          column: 61
        }
      },
      "125": {
        start: {
          line: 271,
          column: 32
        },
        end: {
          line: 271,
          column: 54
        }
      },
      "126": {
        start: {
          line: 274,
          column: 4
        },
        end: {
          line: 274,
          column: 68
        }
      },
      "127": {
        start: {
          line: 277,
          column: 4
        },
        end: {
          line: 277,
          column: 69
        }
      },
      "128": {
        start: {
          line: 280,
          column: 4
        },
        end: {
          line: 280,
          column: 67
        }
      },
      "129": {
        start: {
          line: 283,
          column: 4
        },
        end: {
          line: 283,
          column: 63
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 9,
            column: 4
          },
          end: {
            line: 9,
            column: 5
          }
        },
        loc: {
          start: {
            line: 9,
            column: 30
          },
          end: {
            line: 21,
            column: 5
          }
        },
        line: 9
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 25,
            column: 4
          },
          end: {
            line: 25,
            column: 5
          }
        },
        loc: {
          start: {
            line: 25,
            column: 51
          },
          end: {
            line: 30,
            column: 5
          }
        },
        line: 25
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 34,
            column: 4
          },
          end: {
            line: 34,
            column: 5
          }
        },
        loc: {
          start: {
            line: 34,
            column: 52
          },
          end: {
            line: 51,
            column: 5
          }
        },
        line: 34
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 55,
            column: 4
          },
          end: {
            line: 55,
            column: 5
          }
        },
        loc: {
          start: {
            line: 55,
            column: 46
          },
          end: {
            line: 60,
            column: 5
          }
        },
        line: 55
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 56,
            column: 36
          },
          end: {
            line: 56,
            column: 37
          }
        },
        loc: {
          start: {
            line: 56,
            column: 51
          },
          end: {
            line: 58,
            column: 9
          }
        },
        line: 56
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 57,
            column: 23
          },
          end: {
            line: 57,
            column: 24
          }
        },
        loc: {
          start: {
            line: 57,
            column: 29
          },
          end: {
            line: 57,
            column: 95
          }
        },
        line: 57
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 64,
            column: 4
          },
          end: {
            line: 64,
            column: 5
          }
        },
        loc: {
          start: {
            line: 64,
            column: 54
          },
          end: {
            line: 81,
            column: 5
          }
        },
        line: 64
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 85,
            column: 4
          },
          end: {
            line: 85,
            column: 5
          }
        },
        loc: {
          start: {
            line: 85,
            column: 50
          },
          end: {
            line: 90,
            column: 5
          }
        },
        line: 85
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 94,
            column: 4
          },
          end: {
            line: 94,
            column: 5
          }
        },
        loc: {
          start: {
            line: 94,
            column: 56
          },
          end: {
            line: 102,
            column: 5
          }
        },
        line: 94
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 106,
            column: 4
          },
          end: {
            line: 106,
            column: 5
          }
        },
        loc: {
          start: {
            line: 106,
            column: 46
          },
          end: {
            line: 108,
            column: 5
          }
        },
        line: 106
      },
      "10": {
        name: "(anonymous_10)",
        decl: {
          start: {
            line: 112,
            column: 4
          },
          end: {
            line: 112,
            column: 5
          }
        },
        loc: {
          start: {
            line: 112,
            column: 51
          },
          end: {
            line: 115,
            column: 5
          }
        },
        line: 112
      },
      "11": {
        name: "(anonymous_11)",
        decl: {
          start: {
            line: 119,
            column: 4
          },
          end: {
            line: 119,
            column: 5
          }
        },
        loc: {
          start: {
            line: 119,
            column: 56
          },
          end: {
            line: 130,
            column: 5
          }
        },
        line: 119
      },
      "12": {
        name: "(anonymous_12)",
        decl: {
          start: {
            line: 134,
            column: 4
          },
          end: {
            line: 134,
            column: 5
          }
        },
        loc: {
          start: {
            line: 134,
            column: 54
          },
          end: {
            line: 152,
            column: 5
          }
        },
        line: 134
      },
      "13": {
        name: "(anonymous_13)",
        decl: {
          start: {
            line: 156,
            column: 4
          },
          end: {
            line: 156,
            column: 5
          }
        },
        loc: {
          start: {
            line: 156,
            column: 64
          },
          end: {
            line: 163,
            column: 5
          }
        },
        line: 156
      },
      "14": {
        name: "(anonymous_14)",
        decl: {
          start: {
            line: 159,
            column: 52
          },
          end: {
            line: 159,
            column: 53
          }
        },
        loc: {
          start: {
            line: 159,
            column: 73
          },
          end: {
            line: 161,
            column: 13
          }
        },
        line: 159
      },
      "15": {
        name: "(anonymous_15)",
        decl: {
          start: {
            line: 167,
            column: 4
          },
          end: {
            line: 167,
            column: 5
          }
        },
        loc: {
          start: {
            line: 167,
            column: 64
          },
          end: {
            line: 177,
            column: 5
          }
        },
        line: 167
      },
      "16": {
        name: "(anonymous_16)",
        decl: {
          start: {
            line: 174,
            column: 64
          },
          end: {
            line: 174,
            column: 65
          }
        },
        loc: {
          start: {
            line: 174,
            column: 83
          },
          end: {
            line: 174,
            column: 126
          }
        },
        line: 174
      },
      "17": {
        name: "(anonymous_17)",
        decl: {
          start: {
            line: 181,
            column: 4
          },
          end: {
            line: 181,
            column: 5
          }
        },
        loc: {
          start: {
            line: 181,
            column: 60
          },
          end: {
            line: 194,
            column: 5
          }
        },
        line: 181
      },
      "18": {
        name: "(anonymous_18)",
        decl: {
          start: {
            line: 198,
            column: 4
          },
          end: {
            line: 198,
            column: 5
          }
        },
        loc: {
          start: {
            line: 198,
            column: 54
          },
          end: {
            line: 208,
            column: 5
          }
        },
        line: 198
      },
      "19": {
        name: "(anonymous_19)",
        decl: {
          start: {
            line: 201,
            column: 33
          },
          end: {
            line: 201,
            column: 34
          }
        },
        loc: {
          start: {
            line: 201,
            column: 54
          },
          end: {
            line: 207,
            column: 9
          }
        },
        line: 201
      },
      "20": {
        name: "(anonymous_20)",
        decl: {
          start: {
            line: 212,
            column: 4
          },
          end: {
            line: 212,
            column: 5
          }
        },
        loc: {
          start: {
            line: 212,
            column: 52
          },
          end: {
            line: 239,
            column: 5
          }
        },
        line: 212
      },
      "21": {
        name: "(anonymous_21)",
        decl: {
          start: {
            line: 240,
            column: 4
          },
          end: {
            line: 240,
            column: 5
          }
        },
        loc: {
          start: {
            line: 240,
            column: 59
          },
          end: {
            line: 265,
            column: 5
          }
        },
        line: 240
      },
      "22": {
        name: "(anonymous_22)",
        decl: {
          start: {
            line: 266,
            column: 4
          },
          end: {
            line: 266,
            column: 5
          }
        },
        loc: {
          start: {
            line: 266,
            column: 14
          },
          end: {
            line: 268,
            column: 5
          }
        },
        line: 266
      },
      "23": {
        name: "(anonymous_23)",
        decl: {
          start: {
            line: 267,
            column: 27
          },
          end: {
            line: 267,
            column: 28
          }
        },
        loc: {
          start: {
            line: 267,
            column: 38
          },
          end: {
            line: 267,
            column: 61
          }
        },
        line: 267
      },
      "24": {
        name: "expectApproximately",
        decl: {
          start: {
            line: 273,
            column: 16
          },
          end: {
            line: 273,
            column: 35
          }
        },
        loc: {
          start: {
            line: 273,
            column: 65
          },
          end: {
            line: 275,
            column: 1
          }
        },
        line: 273
      },
      "25": {
        name: "expectPerformance",
        decl: {
          start: {
            line: 276,
            column: 16
          },
          end: {
            line: 276,
            column: 33
          }
        },
        loc: {
          start: {
            line: 276,
            column: 55
          },
          end: {
            line: 278,
            column: 1
          }
        },
        line: 276
      },
      "26": {
        name: "expectEventually",
        decl: {
          start: {
            line: 279,
            column: 22
          },
          end: {
            line: 279,
            column: 38
          }
        },
        loc: {
          start: {
            line: 279,
            column: 59
          },
          end: {
            line: 281,
            column: 1
          }
        },
        line: 279
      },
      "27": {
        name: "expectInteractionSequence",
        decl: {
          start: {
            line: 282,
            column: 16
          },
          end: {
            line: 282,
            column: 41
          }
        },
        loc: {
          start: {
            line: 282,
            column: 58
          },
          end: {
            line: 284,
            column: 1
          }
        },
        line: 282
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 9,
            column: 16
          },
          end: {
            line: 9,
            column: 28
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 9,
            column: 26
          },
          end: {
            line: 9,
            column: 28
          }
        }],
        line: 9
      },
      "1": {
        loc: {
          start: {
            line: 26,
            column: 32
          },
          end: {
            line: 26,
            column: 67
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 26,
            column: 32
          },
          end: {
            line: 26,
            column: 41
          }
        }, {
          start: {
            line: 26,
            column: 45
          },
          end: {
            line: 26,
            column: 67
          }
        }],
        line: 26
      },
      "2": {
        loc: {
          start: {
            line: 27,
            column: 24
          },
          end: {
            line: 28,
            column: 105
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 27,
            column: 24
          },
          end: {
            line: 27,
            column: 60
          }
        }, {
          start: {
            line: 28,
            column: 12
          },
          end: {
            line: 28,
            column: 105
          }
        }],
        line: 27
      },
      "3": {
        loc: {
          start: {
            line: 35,
            column: 8
          },
          end: {
            line: 38,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 35,
            column: 8
          },
          end: {
            line: 38,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 35
      },
      "4": {
        loc: {
          start: {
            line: 39,
            column: 8
          },
          end: {
            line: 42,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 39,
            column: 8
          },
          end: {
            line: 42,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 39
      },
      "5": {
        loc: {
          start: {
            line: 43,
            column: 8
          },
          end: {
            line: 46,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 43,
            column: 8
          },
          end: {
            line: 46,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 43
      },
      "6": {
        loc: {
          start: {
            line: 47,
            column: 8
          },
          end: {
            line: 50,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 47,
            column: 8
          },
          end: {
            line: 50,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 47
      },
      "7": {
        loc: {
          start: {
            line: 64,
            column: 40
          },
          end: {
            line: 64,
            column: 52
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 64,
            column: 50
          },
          end: {
            line: 64,
            column: 52
          }
        }],
        line: 64
      },
      "8": {
        loc: {
          start: {
            line: 65,
            column: 24
          },
          end: {
            line: 65,
            column: 47
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 65,
            column: 24
          },
          end: {
            line: 65,
            column: 39
          }
        }, {
          start: {
            line: 65,
            column: 43
          },
          end: {
            line: 65,
            column: 47
          }
        }],
        line: 65
      },
      "9": {
        loc: {
          start: {
            line: 66,
            column: 25
          },
          end: {
            line: 66,
            column: 48
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 66,
            column: 25
          },
          end: {
            line: 66,
            column: 41
          }
        }, {
          start: {
            line: 66,
            column: 45
          },
          end: {
            line: 66,
            column: 48
          }
        }],
        line: 66
      },
      "10": {
        loc: {
          start: {
            line: 71,
            column: 16
          },
          end: {
            line: 73,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 71,
            column: 16
          },
          end: {
            line: 73,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 71
      },
      "11": {
        loc: {
          start: {
            line: 95,
            column: 8
          },
          end: {
            line: 101,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 95,
            column: 8
          },
          end: {
            line: 101,
            column: 9
          }
        }, {
          start: {
            line: 99,
            column: 13
          },
          end: {
            line: 101,
            column: 9
          }
        }],
        line: 95
      },
      "12": {
        loc: {
          start: {
            line: 113,
            column: 24
          },
          end: {
            line: 113,
            column: 91
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 113,
            column: 24
          },
          end: {
            line: 113,
            column: 37
          }
        }, {
          start: {
            line: 113,
            column: 41
          },
          end: {
            line: 113,
            column: 91
          }
        }],
        line: 113
      },
      "13": {
        loc: {
          start: {
            line: 121,
            column: 8
          },
          end: {
            line: 123,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 121,
            column: 8
          },
          end: {
            line: 123,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 121
      },
      "14": {
        loc: {
          start: {
            line: 124,
            column: 8
          },
          end: {
            line: 126,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 124,
            column: 8
          },
          end: {
            line: 126,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 124
      },
      "15": {
        loc: {
          start: {
            line: 127,
            column: 8
          },
          end: {
            line: 129,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 127,
            column: 8
          },
          end: {
            line: 129,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 127
      },
      "16": {
        loc: {
          start: {
            line: 140,
            column: 12
          },
          end: {
            line: 150,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 140,
            column: 12
          },
          end: {
            line: 150,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 140
      },
      "17": {
        loc: {
          start: {
            line: 141,
            column: 16
          },
          end: {
            line: 149,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 141,
            column: 16
          },
          end: {
            line: 149,
            column: 17
          }
        }, {
          start: {
            line: 144,
            column: 21
          },
          end: {
            line: 149,
            column: 17
          }
        }],
        line: 141
      },
      "18": {
        loc: {
          start: {
            line: 144,
            column: 21
          },
          end: {
            line: 149,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 144,
            column: 21
          },
          end: {
            line: 149,
            column: 17
          }
        }, {
          start: {
            line: 147,
            column: 21
          },
          end: {
            line: 149,
            column: 17
          }
        }],
        line: 144
      },
      "19": {
        loc: {
          start: {
            line: 147,
            column: 21
          },
          end: {
            line: 149,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 147,
            column: 21
          },
          end: {
            line: 149,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 147
      },
      "20": {
        loc: {
          start: {
            line: 158,
            column: 8
          },
          end: {
            line: 162,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 158,
            column: 8
          },
          end: {
            line: 162,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 158
      },
      "21": {
        loc: {
          start: {
            line: 169,
            column: 8
          },
          end: {
            line: 171,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 169,
            column: 8
          },
          end: {
            line: 171,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 169
      },
      "22": {
        loc: {
          start: {
            line: 182,
            column: 8
          },
          end: {
            line: 184,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 182,
            column: 8
          },
          end: {
            line: 184,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 182
      },
      "23": {
        loc: {
          start: {
            line: 185,
            column: 8
          },
          end: {
            line: 187,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 185,
            column: 8
          },
          end: {
            line: 187,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 185
      },
      "24": {
        loc: {
          start: {
            line: 188,
            column: 8
          },
          end: {
            line: 190,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 188,
            column: 8
          },
          end: {
            line: 190,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 188
      },
      "25": {
        loc: {
          start: {
            line: 191,
            column: 8
          },
          end: {
            line: 193,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 191,
            column: 8
          },
          end: {
            line: 193,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 191
      },
      "26": {
        loc: {
          start: {
            line: 199,
            column: 29
          },
          end: {
            line: 199,
            column: 54
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 199,
            column: 29
          },
          end: {
            line: 199,
            column: 48
          }
        }, {
          start: {
            line: 199,
            column: 52
          },
          end: {
            line: 199,
            column: 54
          }
        }],
        line: 199
      },
      "27": {
        loc: {
          start: {
            line: 204,
            column: 12
          },
          end: {
            line: 206,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 204,
            column: 12
          },
          end: {
            line: 206,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 204
      },
      "28": {
        loc: {
          start: {
            line: 213,
            column: 8
          },
          end: {
            line: 238,
            column: 9
          }
        },
        type: "switch",
        locations: [{
          start: {
            line: 214,
            column: 12
          },
          end: {
            line: 218,
            column: 22
          }
        }, {
          start: {
            line: 219,
            column: 12
          },
          end: {
            line: 223,
            column: 22
          }
        }, {
          start: {
            line: 224,
            column: 12
          },
          end: {
            line: 230,
            column: 22
          }
        }, {
          start: {
            line: 231,
            column: 12
          },
          end: {
            line: 237,
            column: 22
          }
        }],
        line: 213
      },
      "29": {
        loc: {
          start: {
            line: 240,
            column: 48
          },
          end: {
            line: 240,
            column: 57
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 240,
            column: 55
          },
          end: {
            line: 240,
            column: 57
          }
        }],
        line: 240
      },
      "30": {
        loc: {
          start: {
            line: 241,
            column: 8
          },
          end: {
            line: 243,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 241,
            column: 8
          },
          end: {
            line: 243,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 241
      },
      "31": {
        loc: {
          start: {
            line: 244,
            column: 8
          },
          end: {
            line: 245,
            column: 24
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 244,
            column: 8
          },
          end: {
            line: 245,
            column: 24
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 244
      },
      "32": {
        loc: {
          start: {
            line: 246,
            column: 8
          },
          end: {
            line: 247,
            column: 25
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 246,
            column: 8
          },
          end: {
            line: 247,
            column: 25
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 246
      },
      "33": {
        loc: {
          start: {
            line: 246,
            column: 12
          },
          end: {
            line: 246,
            column: 34
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 246,
            column: 12
          },
          end: {
            line: 246,
            column: 21
          }
        }, {
          start: {
            line: 246,
            column: 25
          },
          end: {
            line: 246,
            column: 34
          }
        }],
        line: 246
      },
      "34": {
        loc: {
          start: {
            line: 248,
            column: 8
          },
          end: {
            line: 249,
            column: 25
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 248,
            column: 8
          },
          end: {
            line: 249,
            column: 25
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 248
      },
      "35": {
        loc: {
          start: {
            line: 250,
            column: 8
          },
          end: {
            line: 263,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 250,
            column: 8
          },
          end: {
            line: 263,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 250
      },
      "36": {
        loc: {
          start: {
            line: 253,
            column: 12
          },
          end: {
            line: 254,
            column: 29
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 253,
            column: 12
          },
          end: {
            line: 254,
            column: 29
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 253
      },
      "37": {
        loc: {
          start: {
            line: 256,
            column: 16
          },
          end: {
            line: 257,
            column: 33
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 256,
            column: 16
          },
          end: {
            line: 257,
            column: 33
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 256
      },
      "38": {
        loc: {
          start: {
            line: 258,
            column: 16
          },
          end: {
            line: 260,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 258,
            column: 16
          },
          end: {
            line: 260,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 258
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0,
      "74": 0,
      "75": 0,
      "76": 0,
      "77": 0,
      "78": 0,
      "79": 0,
      "80": 0,
      "81": 0,
      "82": 0,
      "83": 0,
      "84": 0,
      "85": 0,
      "86": 0,
      "87": 0,
      "88": 0,
      "89": 0,
      "90": 0,
      "91": 0,
      "92": 0,
      "93": 0,
      "94": 0,
      "95": 0,
      "96": 0,
      "97": 0,
      "98": 0,
      "99": 0,
      "100": 0,
      "101": 0,
      "102": 0,
      "103": 0,
      "104": 0,
      "105": 0,
      "106": 0,
      "107": 0,
      "108": 0,
      "109": 0,
      "110": 0,
      "111": 0,
      "112": 0,
      "113": 0,
      "114": 0,
      "115": 0,
      "116": 0,
      "117": 0,
      "118": 0,
      "119": 0,
      "120": 0,
      "121": 0,
      "122": 0,
      "123": 0,
      "124": 0,
      "125": 0,
      "126": 0,
      "127": 0,
      "128": 0,
      "129": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0
    },
    b: {
      "0": [0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0],
      "8": [0, 0],
      "9": [0, 0],
      "10": [0, 0],
      "11": [0, 0],
      "12": [0, 0],
      "13": [0, 0],
      "14": [0, 0],
      "15": [0, 0],
      "16": [0, 0],
      "17": [0, 0],
      "18": [0, 0],
      "19": [0, 0],
      "20": [0, 0],
      "21": [0, 0],
      "22": [0, 0],
      "23": [0, 0],
      "24": [0, 0],
      "25": [0, 0],
      "26": [0, 0],
      "27": [0, 0],
      "28": [0, 0, 0, 0],
      "29": [0],
      "30": [0, 0],
      "31": [0, 0],
      "32": [0, 0],
      "33": [0, 0],
      "34": [0, 0],
      "35": [0, 0],
      "36": [0, 0],
      "37": [0, 0],
      "38": [0, 0]
    },
    inputSourceMap: {
      file: "/home/mhugo/code/claude-code-flow/src/__tests__/helpers/assertion-helpers.ts",
      mappings: "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",
      names: [],
      sources: ["/home/mhugo/code/claude-code-flow/src/__tests__/helpers/assertion-helpers.ts"],
      sourcesContent: ["/**\n * Assertion Helpers - Enhanced Testing Assertions\n * \n * Custom assertions for both London and Classical TDD approaches\n */\n\nimport { expect } from '@jest/globals';\nimport type { AssertionOptions, PerformanceMetrics } from './types.js';\n\nexport class AssertionHelpers {\n  private options: AssertionOptions;\n\n  constructor(options: AssertionOptions = {}) {\n    this.options = {\n      precision: 2,\n      tolerance: 0.05,\n      messages: {},\n      retry: {\n        attempts: 3,\n        delay: 100,\n        backoff: 'linear'\n      },\n      ...options\n    };\n  }\n\n  /**\n   * Assert that a value is approximately equal (for floating point comparisons)\n   */\n  toBeApproximately(actual: number, expected: number, precision?: number): void {\n    const actualPrecision = precision ?? this.options.precision!;\n    const message = this.options.messages?.approximately || \n      `Expected ${actual} to be approximately ${expected} within ${actualPrecision} decimal places`;\n    \n    expect(actual).toBeCloseTo(expected, actualPrecision);\n  }\n\n  /**\n   * Assert performance characteristics\n   */\n  toMeetPerformanceThreshold(\n    metrics: PerformanceMetrics, \n    thresholds: Partial<PerformanceMetrics>\n  ): void {\n    if (thresholds.executionTime !== undefined) {\n      const message = `Execution time ${metrics.executionTime}ms exceeded threshold ${thresholds.executionTime}ms`;\n      expect(metrics.executionTime).toBeLessThanOrEqual(thresholds.executionTime);\n    }\n\n    if (thresholds.memoryUsage?.heap !== undefined) {\n      const message = `Heap usage ${metrics.memoryUsage.heap} exceeded threshold ${thresholds.memoryUsage.heap}`;\n      expect(metrics.memoryUsage.heap).toBeLessThanOrEqual(thresholds.memoryUsage.heap);\n    }\n\n    if (thresholds.memoryUsage?.total !== undefined) {\n      const message = `Total memory ${metrics.memoryUsage.total} exceeded threshold ${thresholds.memoryUsage.total}`;\n      expect(metrics.memoryUsage.total).toBeLessThanOrEqual(thresholds.memoryUsage.total);\n    }\n\n    if (thresholds.throughput !== undefined) {\n      const message = `Throughput ${metrics.throughput} below threshold ${thresholds.throughput}`;\n      expect(metrics.throughput).toBeGreaterThanOrEqual(thresholds.throughput);\n    }\n  }\n\n  /**\n   * Assert that a promise resolves within a time limit\n   */\n  async toResolveWithin<T>(promise: Promise<T>, timeoutMs: number): Promise<T> {\n    const timeout = new Promise<never>((_, reject) => {\n      setTimeout(() => reject(new Error(`Promise did not resolve within ${timeoutMs}ms`)), timeoutMs);\n    });\n\n    return Promise.race([promise, timeout]);\n  }\n\n  /**\n   * Assert that a function eventually becomes true (with retries)\n   */\n  async toEventuallyBeTrue(\n    predicate: () => boolean | Promise<boolean>,\n    options: { timeout?: number; interval?: number } = {}\n  ): Promise<void> {\n    const timeout = options.timeout || 5000;\n    const interval = options.interval || 100;\n    const startTime = Date.now();\n\n    while (Date.now() - startTime < timeout) {\n      try {\n        const result = await predicate();\n        if (result) {\n          return;\n        }\n      } catch (error) {\n        // Continue trying\n      }\n      \n      await this.sleep(interval);\n    }\n\n    throw new Error(`Predicate did not become true within ${timeout}ms`);\n  }\n\n  /**\n   * Assert array contains elements in any order\n   */\n  toContainElementsInAnyOrder<T>(actual: T[], expected: T[]): void {\n    expect(actual).toHaveLength(expected.length);\n    \n    for (const element of expected) {\n      expect(actual).toContain(element);\n    }\n  }\n\n  /**\n   * Assert deep equality with custom comparison\n   */\n  toDeepEqualWith<T>(\n    actual: T, \n    expected: T, \n    customComparator?: (a: any, b: any, path: string) => boolean\n  ): void {\n    if (customComparator) {\n      const isEqual = this.deepEqualWithCustom(actual, expected, customComparator);\n      expect(isEqual).toBe(true);\n    } else {\n      expect(actual).toEqual(expected);\n    }\n  }\n\n  /**\n   * Assert that an object matches a partial structure\n   */\n  toMatchPartialStructure<T>(actual: T, expected: Partial<T>): void {\n    expect(actual).toMatchObject(expected);\n  }\n\n  /**\n   * Assert that a string matches a pattern (with custom error message)\n   */\n  toMatchPattern(actual: string, pattern: RegExp, customMessage?: string): void {\n    const message = customMessage || `Expected \"${actual}\" to match pattern ${pattern}`;\n    expect(actual).toMatch(pattern);\n  }\n\n  /**\n   * Assert that an error has specific properties\n   */\n  toBeErrorWithProperties(\n    actual: Error, \n    expectedProperties: { message?: string; code?: string | number; type?: string }\n  ): void {\n    expect(actual).toBeInstanceOf(Error);\n    \n    if (expectedProperties.message) {\n      expect(actual.message).toBe(expectedProperties.message);\n    }\n    \n    if (expectedProperties.code) {\n      expect((actual as any).code).toBe(expectedProperties.code);\n    }\n    \n    if (expectedProperties.type) {\n      expect(actual.constructor.name).toBe(expectedProperties.type);\n    }\n  }\n\n  /**\n   * Assert that an async operation throws with specific error\n   */\n  async toThrowAsyncError<T>(\n    operation: () => Promise<T>,\n    expectedError?: string | RegExp | Error\n  ): Promise<void> {\n    try {\n      await operation();\n      throw new Error('Expected operation to throw, but it succeeded');\n    } catch (error) {\n      if (expectedError) {\n        if (typeof expectedError === 'string') {\n          expect((error as Error).message).toBe(expectedError);\n        } else if (expectedError instanceof RegExp) {\n          expect((error as Error).message).toMatch(expectedError);\n        } else if (expectedError instanceof Error) {\n          expect(error).toEqual(expectedError);\n        }\n      }\n    }\n  }\n\n  /**\n   * Assert HTTP response characteristics\n   */\n  toBeHttpResponse(\n    response: any,\n    expectedStatus: number,\n    expectedHeaders?: Record<string, string>\n  ): void {\n    expect(response.status).toBe(expectedStatus);\n    \n    if (expectedHeaders) {\n      Object.entries(expectedHeaders).forEach(([header, value]) => {\n        expect(response.headers[header.toLowerCase()]).toBe(value);\n      });\n    }\n  }\n\n  /**\n   * Assert neural network training convergence\n   */\n  toConvergeToTarget(\n    trainingResults: { epoch: number; error: number }[],\n    targetError: number,\n    maxEpochs?: number\n  ): void {\n    const finalResult = trainingResults[trainingResults.length - 1];\n    \n    if (maxEpochs) {\n      expect(finalResult.epoch).toBeLessThanOrEqual(maxEpochs);\n    }\n    \n    expect(finalResult.error).toBeLessThan(targetError);\n    \n    // Check that error generally decreases over time\n    const errorReductions = trainingResults.slice(1).filter((result, index) => \n      result.error < trainingResults[index].error\n    );\n    \n    const reductionRatio = errorReductions.length / (trainingResults.length - 1);\n    expect(reductionRatio).toBeGreaterThan(0.7); // 70% of epochs should show improvement\n  }\n\n  /**\n   * Assert swarm coordination patterns\n   */\n  toHaveSwarmCoordination(\n    swarmMetrics: any,\n    expectedPatterns: {\n      agentCount?: number;\n      topology?: string;\n      efficiency?: number;\n      completion?: number;\n    }\n  ): void {\n    if (expectedPatterns.agentCount !== undefined) {\n      expect(swarmMetrics.activeAgents).toBe(expectedPatterns.agentCount);\n    }\n    \n    if (expectedPatterns.topology) {\n      expect(swarmMetrics.topology).toBe(expectedPatterns.topology);\n    }\n    \n    if (expectedPatterns.efficiency !== undefined) {\n      expect(swarmMetrics.efficiency).toBeGreaterThanOrEqual(expectedPatterns.efficiency);\n    }\n    \n    if (expectedPatterns.completion !== undefined) {\n      expect(swarmMetrics.completionRate).toBeGreaterThanOrEqual(expectedPatterns.completion);\n    }\n  }\n\n  /**\n   * London School: Assert interaction sequence\n   */\n  toHaveInteractionSequence(\n    mock: any,\n    expectedSequence: { method: string; args?: any[] }[]\n  ): void {\n    const interactions = mock.__interactions || [];\n    \n    expect(interactions).toHaveLength(expectedSequence.length);\n    \n    expectedSequence.forEach((expected, index) => {\n      const interaction = interactions[index];\n      expect(interaction.method).toBe(expected.method);\n      \n      if (expected.args) {\n        expect(interaction.args).toEqual(expected.args);\n      }\n    });\n  }\n\n  /**\n   * Classical School: Assert mathematical properties\n   */\n  toSatisfyMathematicalProperty(\n    values: number[],\n    property: 'monotonic-increasing' | 'monotonic-decreasing' | 'convex' | 'concave'\n  ): void {\n    switch (property) {\n      case 'monotonic-increasing':\n        for (let i = 1; i < values.length; i++) {\n          expect(values[i]).toBeGreaterThanOrEqual(values[i - 1]);\n        }\n        break;\n      \n      case 'monotonic-decreasing':\n        for (let i = 1; i < values.length; i++) {\n          expect(values[i]).toBeLessThanOrEqual(values[i - 1]);\n        }\n        break;\n      \n      case 'convex':\n        // Check second derivative > 0 (simplified)\n        for (let i = 2; i < values.length; i++) {\n          const secondDerivative = values[i] - 2 * values[i - 1] + values[i - 2];\n          expect(secondDerivative).toBeGreaterThanOrEqual(0);\n        }\n        break;\n      \n      case 'concave':\n        // Check second derivative < 0 (simplified)\n        for (let i = 2; i < values.length; i++) {\n          const secondDerivative = values[i] - 2 * values[i - 1] + values[i - 2];\n          expect(secondDerivative).toBeLessThanOrEqual(0);\n        }\n        break;\n    }\n  }\n\n  private deepEqualWithCustom(\n    a: any, \n    b: any, \n    customComparator: (a: any, b: any, path: string) => boolean,\n    path: string = ''\n  ): boolean {\n    if (customComparator(a, b, path)) {\n      return true;\n    }\n\n    if (a === b) return true;\n    if (a == null || b == null) return false;\n    if (typeof a !== typeof b) return false;\n\n    if (typeof a === 'object') {\n      const keysA = Object.keys(a);\n      const keysB = Object.keys(b);\n      \n      if (keysA.length !== keysB.length) return false;\n      \n      for (const key of keysA) {\n        if (!keysB.includes(key)) return false;\n        if (!this.deepEqualWithCustom(a[key], b[key], customComparator, `${path}.${key}`)) {\n          return false;\n        }\n      }\n      \n      return true;\n    }\n\n    return false;\n  }\n\n  private sleep(ms: number): Promise<void> {\n    return new Promise(resolve => setTimeout(resolve, ms));\n  }\n}\n\n// Global assertion helpers instance\nexport const assertionHelpers = new AssertionHelpers();\n\n// Convenience functions for common assertions\nexport function expectApproximately(actual: number, expected: number, precision?: number): void {\n  assertionHelpers.toBeApproximately(actual, expected, precision);\n}\n\nexport function expectPerformance(\n  metrics: PerformanceMetrics, \n  thresholds: Partial<PerformanceMetrics>\n): void {\n  assertionHelpers.toMeetPerformanceThreshold(metrics, thresholds);\n}\n\nexport async function expectEventually(\n  predicate: () => boolean | Promise<boolean>,\n  options?: { timeout?: number; interval?: number }\n): Promise<void> {\n  return assertionHelpers.toEventuallyBeTrue(predicate, options);\n}\n\nexport function expectInteractionSequence(\n  mock: any,\n  sequence: { method: string; args?: any[] }[]\n): void {\n  assertionHelpers.toHaveInteractionSequence(mock, sequence);\n}"],
      version: 3
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "0e39eec6513637b20e47b2a6a04ea65b956633cf"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_1qnv932f9y = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_1qnv932f9y();
/**
 * Assertion Helpers - Enhanced Testing Assertions
 *
 * Custom assertions for both London and Classical TDD approaches
 */
import { expect } from '@jest/globals';
export class AssertionHelpers {
  options;
  constructor(options =
  /* istanbul ignore next */
  (cov_1qnv932f9y().b[0][0]++, {})) {
    /* istanbul ignore next */
    cov_1qnv932f9y().f[0]++;
    cov_1qnv932f9y().s[0]++;
    this.options = {
      precision: 2,
      tolerance: 0.05,
      messages: {},
      retry: {
        attempts: 3,
        delay: 100,
        backoff: 'linear'
      },
      ...options
    };
  }
  /**
   * Assert that a value is approximately equal (for floating point comparisons)
   */
  toBeApproximately(actual, expected, precision) {
    /* istanbul ignore next */
    cov_1qnv932f9y().f[1]++;
    const actualPrecision =
    /* istanbul ignore next */
    (cov_1qnv932f9y().s[1]++,
    /* istanbul ignore next */
    (cov_1qnv932f9y().b[1][0]++, precision) ??
    /* istanbul ignore next */
    (cov_1qnv932f9y().b[1][1]++, this.options.precision));
    const message =
    /* istanbul ignore next */
    (cov_1qnv932f9y().s[2]++,
    /* istanbul ignore next */
    (cov_1qnv932f9y().b[2][0]++, this.options.messages?.approximately) ||
    /* istanbul ignore next */
    (cov_1qnv932f9y().b[2][1]++, `Expected ${actual} to be approximately ${expected} within ${actualPrecision} decimal places`));
    /* istanbul ignore next */
    cov_1qnv932f9y().s[3]++;
    expect(actual).toBeCloseTo(expected, actualPrecision);
  }
  /**
   * Assert performance characteristics
   */
  toMeetPerformanceThreshold(metrics, thresholds) {
    /* istanbul ignore next */
    cov_1qnv932f9y().f[2]++;
    cov_1qnv932f9y().s[4]++;
    if (thresholds.executionTime !== undefined) {
      /* istanbul ignore next */
      cov_1qnv932f9y().b[3][0]++;
      const message =
      /* istanbul ignore next */
      (cov_1qnv932f9y().s[5]++, `Execution time ${metrics.executionTime}ms exceeded threshold ${thresholds.executionTime}ms`);
      /* istanbul ignore next */
      cov_1qnv932f9y().s[6]++;
      expect(metrics.executionTime).toBeLessThanOrEqual(thresholds.executionTime);
    } else
    /* istanbul ignore next */
    {
      cov_1qnv932f9y().b[3][1]++;
    }
    cov_1qnv932f9y().s[7]++;
    if (thresholds.memoryUsage?.heap !== undefined) {
      /* istanbul ignore next */
      cov_1qnv932f9y().b[4][0]++;
      const message =
      /* istanbul ignore next */
      (cov_1qnv932f9y().s[8]++, `Heap usage ${metrics.memoryUsage.heap} exceeded threshold ${thresholds.memoryUsage.heap}`);
      /* istanbul ignore next */
      cov_1qnv932f9y().s[9]++;
      expect(metrics.memoryUsage.heap).toBeLessThanOrEqual(thresholds.memoryUsage.heap);
    } else
    /* istanbul ignore next */
    {
      cov_1qnv932f9y().b[4][1]++;
    }
    cov_1qnv932f9y().s[10]++;
    if (thresholds.memoryUsage?.total !== undefined) {
      /* istanbul ignore next */
      cov_1qnv932f9y().b[5][0]++;
      const message =
      /* istanbul ignore next */
      (cov_1qnv932f9y().s[11]++, `Total memory ${metrics.memoryUsage.total} exceeded threshold ${thresholds.memoryUsage.total}`);
      /* istanbul ignore next */
      cov_1qnv932f9y().s[12]++;
      expect(metrics.memoryUsage.total).toBeLessThanOrEqual(thresholds.memoryUsage.total);
    } else
    /* istanbul ignore next */
    {
      cov_1qnv932f9y().b[5][1]++;
    }
    cov_1qnv932f9y().s[13]++;
    if (thresholds.throughput !== undefined) {
      /* istanbul ignore next */
      cov_1qnv932f9y().b[6][0]++;
      const message =
      /* istanbul ignore next */
      (cov_1qnv932f9y().s[14]++, `Throughput ${metrics.throughput} below threshold ${thresholds.throughput}`);
      /* istanbul ignore next */
      cov_1qnv932f9y().s[15]++;
      expect(metrics.throughput).toBeGreaterThanOrEqual(thresholds.throughput);
    } else
    /* istanbul ignore next */
    {
      cov_1qnv932f9y().b[6][1]++;
    }
  }
  /**
   * Assert that a promise resolves within a time limit
   */
  async toResolveWithin(promise, timeoutMs) {
    /* istanbul ignore next */
    cov_1qnv932f9y().f[3]++;
    const timeout =
    /* istanbul ignore next */
    (cov_1qnv932f9y().s[16]++, new Promise((_, reject) => {
      /* istanbul ignore next */
      cov_1qnv932f9y().f[4]++;
      cov_1qnv932f9y().s[17]++;
      setTimeout(() => {
        /* istanbul ignore next */
        cov_1qnv932f9y().f[5]++;
        cov_1qnv932f9y().s[18]++;
        return reject(new Error(`Promise did not resolve within ${timeoutMs}ms`));
      }, timeoutMs);
    }));
    /* istanbul ignore next */
    cov_1qnv932f9y().s[19]++;
    return Promise.race([promise, timeout]);
  }
  /**
   * Assert that a function eventually becomes true (with retries)
   */
  async toEventuallyBeTrue(predicate, options =
  /* istanbul ignore next */
  (cov_1qnv932f9y().b[7][0]++, {})) {
    /* istanbul ignore next */
    cov_1qnv932f9y().f[6]++;
    const timeout =
    /* istanbul ignore next */
    (cov_1qnv932f9y().s[20]++,
    /* istanbul ignore next */
    (cov_1qnv932f9y().b[8][0]++, options.timeout) ||
    /* istanbul ignore next */
    (cov_1qnv932f9y().b[8][1]++, 5000));
    const interval =
    /* istanbul ignore next */
    (cov_1qnv932f9y().s[21]++,
    /* istanbul ignore next */
    (cov_1qnv932f9y().b[9][0]++, options.interval) ||
    /* istanbul ignore next */
    (cov_1qnv932f9y().b[9][1]++, 100));
    const startTime =
    /* istanbul ignore next */
    (cov_1qnv932f9y().s[22]++, Date.now());
    /* istanbul ignore next */
    cov_1qnv932f9y().s[23]++;
    while (Date.now() - startTime < timeout) {
      /* istanbul ignore next */
      cov_1qnv932f9y().s[24]++;
      try {
        const result =
        /* istanbul ignore next */
        (cov_1qnv932f9y().s[25]++, await predicate());
        /* istanbul ignore next */
        cov_1qnv932f9y().s[26]++;
        if (result) {
          /* istanbul ignore next */
          cov_1qnv932f9y().b[10][0]++;
          cov_1qnv932f9y().s[27]++;
          return;
        } else
        /* istanbul ignore next */
        {
          cov_1qnv932f9y().b[10][1]++;
        }
      } catch (error) {
        // Continue trying
      }
      /* istanbul ignore next */
      cov_1qnv932f9y().s[28]++;
      await this.sleep(interval);
    }
    /* istanbul ignore next */
    cov_1qnv932f9y().s[29]++;
    throw new Error(`Predicate did not become true within ${timeout}ms`);
  }
  /**
   * Assert array contains elements in any order
   */
  toContainElementsInAnyOrder(actual, expected) {
    /* istanbul ignore next */
    cov_1qnv932f9y().f[7]++;
    cov_1qnv932f9y().s[30]++;
    expect(actual).toHaveLength(expected.length);
    /* istanbul ignore next */
    cov_1qnv932f9y().s[31]++;
    for (const element of expected) {
      /* istanbul ignore next */
      cov_1qnv932f9y().s[32]++;
      expect(actual).toContain(element);
    }
  }
  /**
   * Assert deep equality with custom comparison
   */
  toDeepEqualWith(actual, expected, customComparator) {
    /* istanbul ignore next */
    cov_1qnv932f9y().f[8]++;
    cov_1qnv932f9y().s[33]++;
    if (customComparator) {
      /* istanbul ignore next */
      cov_1qnv932f9y().b[11][0]++;
      const isEqual =
      /* istanbul ignore next */
      (cov_1qnv932f9y().s[34]++, this.deepEqualWithCustom(actual, expected, customComparator));
      /* istanbul ignore next */
      cov_1qnv932f9y().s[35]++;
      expect(isEqual).toBe(true);
    } else {
      /* istanbul ignore next */
      cov_1qnv932f9y().b[11][1]++;
      cov_1qnv932f9y().s[36]++;
      expect(actual).toEqual(expected);
    }
  }
  /**
   * Assert that an object matches a partial structure
   */
  toMatchPartialStructure(actual, expected) {
    /* istanbul ignore next */
    cov_1qnv932f9y().f[9]++;
    cov_1qnv932f9y().s[37]++;
    expect(actual).toMatchObject(expected);
  }
  /**
   * Assert that a string matches a pattern (with custom error message)
   */
  toMatchPattern(actual, pattern, customMessage) {
    /* istanbul ignore next */
    cov_1qnv932f9y().f[10]++;
    const message =
    /* istanbul ignore next */
    (cov_1qnv932f9y().s[38]++,
    /* istanbul ignore next */
    (cov_1qnv932f9y().b[12][0]++, customMessage) ||
    /* istanbul ignore next */
    (cov_1qnv932f9y().b[12][1]++, `Expected "${actual}" to match pattern ${pattern}`));
    /* istanbul ignore next */
    cov_1qnv932f9y().s[39]++;
    expect(actual).toMatch(pattern);
  }
  /**
   * Assert that an error has specific properties
   */
  toBeErrorWithProperties(actual, expectedProperties) {
    /* istanbul ignore next */
    cov_1qnv932f9y().f[11]++;
    cov_1qnv932f9y().s[40]++;
    expect(actual).toBeInstanceOf(Error);
    /* istanbul ignore next */
    cov_1qnv932f9y().s[41]++;
    if (expectedProperties.message) {
      /* istanbul ignore next */
      cov_1qnv932f9y().b[13][0]++;
      cov_1qnv932f9y().s[42]++;
      expect(actual.message).toBe(expectedProperties.message);
    } else
    /* istanbul ignore next */
    {
      cov_1qnv932f9y().b[13][1]++;
    }
    cov_1qnv932f9y().s[43]++;
    if (expectedProperties.code) {
      /* istanbul ignore next */
      cov_1qnv932f9y().b[14][0]++;
      cov_1qnv932f9y().s[44]++;
      expect(actual.code).toBe(expectedProperties.code);
    } else
    /* istanbul ignore next */
    {
      cov_1qnv932f9y().b[14][1]++;
    }
    cov_1qnv932f9y().s[45]++;
    if (expectedProperties.type) {
      /* istanbul ignore next */
      cov_1qnv932f9y().b[15][0]++;
      cov_1qnv932f9y().s[46]++;
      expect(actual.constructor.name).toBe(expectedProperties.type);
    } else
    /* istanbul ignore next */
    {
      cov_1qnv932f9y().b[15][1]++;
    }
  }
  /**
   * Assert that an async operation throws with specific error
   */
  async toThrowAsyncError(operation, expectedError) {
    /* istanbul ignore next */
    cov_1qnv932f9y().f[12]++;
    cov_1qnv932f9y().s[47]++;
    try {
      /* istanbul ignore next */
      cov_1qnv932f9y().s[48]++;
      await operation();
      /* istanbul ignore next */
      cov_1qnv932f9y().s[49]++;
      throw new Error('Expected operation to throw, but it succeeded');
    } catch (error) {
      /* istanbul ignore next */
      cov_1qnv932f9y().s[50]++;
      if (expectedError) {
        /* istanbul ignore next */
        cov_1qnv932f9y().b[16][0]++;
        cov_1qnv932f9y().s[51]++;
        if (typeof expectedError === 'string') {
          /* istanbul ignore next */
          cov_1qnv932f9y().b[17][0]++;
          cov_1qnv932f9y().s[52]++;
          expect(error.message).toBe(expectedError);
        } else {
          /* istanbul ignore next */
          cov_1qnv932f9y().b[17][1]++;
          cov_1qnv932f9y().s[53]++;
          if (expectedError instanceof RegExp) {
            /* istanbul ignore next */
            cov_1qnv932f9y().b[18][0]++;
            cov_1qnv932f9y().s[54]++;
            expect(error.message).toMatch(expectedError);
          } else {
            /* istanbul ignore next */
            cov_1qnv932f9y().b[18][1]++;
            cov_1qnv932f9y().s[55]++;
            if (expectedError instanceof Error) {
              /* istanbul ignore next */
              cov_1qnv932f9y().b[19][0]++;
              cov_1qnv932f9y().s[56]++;
              expect(error).toEqual(expectedError);
            } else
            /* istanbul ignore next */
            {
              cov_1qnv932f9y().b[19][1]++;
            }
          }
        }
      } else
      /* istanbul ignore next */
      {
        cov_1qnv932f9y().b[16][1]++;
      }
    }
  }
  /**
   * Assert HTTP response characteristics
   */
  toBeHttpResponse(response, expectedStatus, expectedHeaders) {
    /* istanbul ignore next */
    cov_1qnv932f9y().f[13]++;
    cov_1qnv932f9y().s[57]++;
    expect(response.status).toBe(expectedStatus);
    /* istanbul ignore next */
    cov_1qnv932f9y().s[58]++;
    if (expectedHeaders) {
      /* istanbul ignore next */
      cov_1qnv932f9y().b[20][0]++;
      cov_1qnv932f9y().s[59]++;
      Object.entries(expectedHeaders).forEach(([header, value]) => {
        /* istanbul ignore next */
        cov_1qnv932f9y().f[14]++;
        cov_1qnv932f9y().s[60]++;
        expect(response.headers[header.toLowerCase()]).toBe(value);
      });
    } else
    /* istanbul ignore next */
    {
      cov_1qnv932f9y().b[20][1]++;
    }
  }
  /**
   * Assert neural network training convergence
   */
  toConvergeToTarget(trainingResults, targetError, maxEpochs) {
    /* istanbul ignore next */
    cov_1qnv932f9y().f[15]++;
    const finalResult =
    /* istanbul ignore next */
    (cov_1qnv932f9y().s[61]++, trainingResults[trainingResults.length - 1]);
    /* istanbul ignore next */
    cov_1qnv932f9y().s[62]++;
    if (maxEpochs) {
      /* istanbul ignore next */
      cov_1qnv932f9y().b[21][0]++;
      cov_1qnv932f9y().s[63]++;
      expect(finalResult.epoch).toBeLessThanOrEqual(maxEpochs);
    } else
    /* istanbul ignore next */
    {
      cov_1qnv932f9y().b[21][1]++;
    }
    cov_1qnv932f9y().s[64]++;
    expect(finalResult.error).toBeLessThan(targetError);
    // Check that error generally decreases over time
    const errorReductions =
    /* istanbul ignore next */
    (cov_1qnv932f9y().s[65]++, trainingResults.slice(1).filter((result, index) => {
      /* istanbul ignore next */
      cov_1qnv932f9y().f[16]++;
      cov_1qnv932f9y().s[66]++;
      return result.error < trainingResults[index].error;
    }));
    const reductionRatio =
    /* istanbul ignore next */
    (cov_1qnv932f9y().s[67]++, errorReductions.length / (trainingResults.length - 1));
    /* istanbul ignore next */
    cov_1qnv932f9y().s[68]++;
    expect(reductionRatio).toBeGreaterThan(0.7); // 70% of epochs should show improvement
  }
  /**
   * Assert swarm coordination patterns
   */
  toHaveSwarmCoordination(swarmMetrics, expectedPatterns) {
    /* istanbul ignore next */
    cov_1qnv932f9y().f[17]++;
    cov_1qnv932f9y().s[69]++;
    if (expectedPatterns.agentCount !== undefined) {
      /* istanbul ignore next */
      cov_1qnv932f9y().b[22][0]++;
      cov_1qnv932f9y().s[70]++;
      expect(swarmMetrics.activeAgents).toBe(expectedPatterns.agentCount);
    } else
    /* istanbul ignore next */
    {
      cov_1qnv932f9y().b[22][1]++;
    }
    cov_1qnv932f9y().s[71]++;
    if (expectedPatterns.topology) {
      /* istanbul ignore next */
      cov_1qnv932f9y().b[23][0]++;
      cov_1qnv932f9y().s[72]++;
      expect(swarmMetrics.topology).toBe(expectedPatterns.topology);
    } else
    /* istanbul ignore next */
    {
      cov_1qnv932f9y().b[23][1]++;
    }
    cov_1qnv932f9y().s[73]++;
    if (expectedPatterns.efficiency !== undefined) {
      /* istanbul ignore next */
      cov_1qnv932f9y().b[24][0]++;
      cov_1qnv932f9y().s[74]++;
      expect(swarmMetrics.efficiency).toBeGreaterThanOrEqual(expectedPatterns.efficiency);
    } else
    /* istanbul ignore next */
    {
      cov_1qnv932f9y().b[24][1]++;
    }
    cov_1qnv932f9y().s[75]++;
    if (expectedPatterns.completion !== undefined) {
      /* istanbul ignore next */
      cov_1qnv932f9y().b[25][0]++;
      cov_1qnv932f9y().s[76]++;
      expect(swarmMetrics.completionRate).toBeGreaterThanOrEqual(expectedPatterns.completion);
    } else
    /* istanbul ignore next */
    {
      cov_1qnv932f9y().b[25][1]++;
    }
  }
  /**
   * London School: Assert interaction sequence
   */
  toHaveInteractionSequence(mock, expectedSequence) {
    /* istanbul ignore next */
    cov_1qnv932f9y().f[18]++;
    const interactions =
    /* istanbul ignore next */
    (cov_1qnv932f9y().s[77]++,
    /* istanbul ignore next */
    (cov_1qnv932f9y().b[26][0]++, mock.__interactions) ||
    /* istanbul ignore next */
    (cov_1qnv932f9y().b[26][1]++, []));
    /* istanbul ignore next */
    cov_1qnv932f9y().s[78]++;
    expect(interactions).toHaveLength(expectedSequence.length);
    /* istanbul ignore next */
    cov_1qnv932f9y().s[79]++;
    expectedSequence.forEach((expected, index) => {
      /* istanbul ignore next */
      cov_1qnv932f9y().f[19]++;
      const interaction =
      /* istanbul ignore next */
      (cov_1qnv932f9y().s[80]++, interactions[index]);
      /* istanbul ignore next */
      cov_1qnv932f9y().s[81]++;
      expect(interaction.method).toBe(expected.method);
      /* istanbul ignore next */
      cov_1qnv932f9y().s[82]++;
      if (expected.args) {
        /* istanbul ignore next */
        cov_1qnv932f9y().b[27][0]++;
        cov_1qnv932f9y().s[83]++;
        expect(interaction.args).toEqual(expected.args);
      } else
      /* istanbul ignore next */
      {
        cov_1qnv932f9y().b[27][1]++;
      }
    });
  }
  /**
   * Classical School: Assert mathematical properties
   */
  toSatisfyMathematicalProperty(values, property) {
    /* istanbul ignore next */
    cov_1qnv932f9y().f[20]++;
    cov_1qnv932f9y().s[84]++;
    switch (property) {
      case 'monotonic-increasing':
        /* istanbul ignore next */
        cov_1qnv932f9y().b[28][0]++;
        cov_1qnv932f9y().s[85]++;
        for (let i =
        /* istanbul ignore next */
        (cov_1qnv932f9y().s[86]++, 1); i < values.length; i++) {
          /* istanbul ignore next */
          cov_1qnv932f9y().s[87]++;
          expect(values[i]).toBeGreaterThanOrEqual(values[i - 1]);
        }
        /* istanbul ignore next */
        cov_1qnv932f9y().s[88]++;
        break;
      case 'monotonic-decreasing':
        /* istanbul ignore next */
        cov_1qnv932f9y().b[28][1]++;
        cov_1qnv932f9y().s[89]++;
        for (let i =
        /* istanbul ignore next */
        (cov_1qnv932f9y().s[90]++, 1); i < values.length; i++) {
          /* istanbul ignore next */
          cov_1qnv932f9y().s[91]++;
          expect(values[i]).toBeLessThanOrEqual(values[i - 1]);
        }
        /* istanbul ignore next */
        cov_1qnv932f9y().s[92]++;
        break;
      case 'convex':
        /* istanbul ignore next */
        cov_1qnv932f9y().b[28][2]++;
        cov_1qnv932f9y().s[93]++;
        // Check second derivative > 0 (simplified)
        for (let i =
        /* istanbul ignore next */
        (cov_1qnv932f9y().s[94]++, 2); i < values.length; i++) {
          const secondDerivative =
          /* istanbul ignore next */
          (cov_1qnv932f9y().s[95]++, values[i] - 2 * values[i - 1] + values[i - 2]);
          /* istanbul ignore next */
          cov_1qnv932f9y().s[96]++;
          expect(secondDerivative).toBeGreaterThanOrEqual(0);
        }
        /* istanbul ignore next */
        cov_1qnv932f9y().s[97]++;
        break;
      case 'concave':
        /* istanbul ignore next */
        cov_1qnv932f9y().b[28][3]++;
        cov_1qnv932f9y().s[98]++;
        // Check second derivative < 0 (simplified)
        for (let i =
        /* istanbul ignore next */
        (cov_1qnv932f9y().s[99]++, 2); i < values.length; i++) {
          const secondDerivative =
          /* istanbul ignore next */
          (cov_1qnv932f9y().s[100]++, values[i] - 2 * values[i - 1] + values[i - 2]);
          /* istanbul ignore next */
          cov_1qnv932f9y().s[101]++;
          expect(secondDerivative).toBeLessThanOrEqual(0);
        }
        /* istanbul ignore next */
        cov_1qnv932f9y().s[102]++;
        break;
    }
  }
  deepEqualWithCustom(a, b, customComparator, path =
  /* istanbul ignore next */
  (cov_1qnv932f9y().b[29][0]++, '')) {
    /* istanbul ignore next */
    cov_1qnv932f9y().f[21]++;
    cov_1qnv932f9y().s[103]++;
    if (customComparator(a, b, path)) {
      /* istanbul ignore next */
      cov_1qnv932f9y().b[30][0]++;
      cov_1qnv932f9y().s[104]++;
      return true;
    } else
    /* istanbul ignore next */
    {
      cov_1qnv932f9y().b[30][1]++;
    }
    cov_1qnv932f9y().s[105]++;
    if (a === b) {
      /* istanbul ignore next */
      cov_1qnv932f9y().b[31][0]++;
      cov_1qnv932f9y().s[106]++;
      return true;
    } else
    /* istanbul ignore next */
    {
      cov_1qnv932f9y().b[31][1]++;
    }
    cov_1qnv932f9y().s[107]++;
    if (
    /* istanbul ignore next */
    (cov_1qnv932f9y().b[33][0]++, a == null) ||
    /* istanbul ignore next */
    (cov_1qnv932f9y().b[33][1]++, b == null)) {
      /* istanbul ignore next */
      cov_1qnv932f9y().b[32][0]++;
      cov_1qnv932f9y().s[108]++;
      return false;
    } else
    /* istanbul ignore next */
    {
      cov_1qnv932f9y().b[32][1]++;
    }
    cov_1qnv932f9y().s[109]++;
    if (typeof a !== typeof b) {
      /* istanbul ignore next */
      cov_1qnv932f9y().b[34][0]++;
      cov_1qnv932f9y().s[110]++;
      return false;
    } else
    /* istanbul ignore next */
    {
      cov_1qnv932f9y().b[34][1]++;
    }
    cov_1qnv932f9y().s[111]++;
    if (typeof a === 'object') {
      /* istanbul ignore next */
      cov_1qnv932f9y().b[35][0]++;
      const keysA =
      /* istanbul ignore next */
      (cov_1qnv932f9y().s[112]++, Object.keys(a));
      const keysB =
      /* istanbul ignore next */
      (cov_1qnv932f9y().s[113]++, Object.keys(b));
      /* istanbul ignore next */
      cov_1qnv932f9y().s[114]++;
      if (keysA.length !== keysB.length) {
        /* istanbul ignore next */
        cov_1qnv932f9y().b[36][0]++;
        cov_1qnv932f9y().s[115]++;
        return false;
      } else
      /* istanbul ignore next */
      {
        cov_1qnv932f9y().b[36][1]++;
      }
      cov_1qnv932f9y().s[116]++;
      for (const key of keysA) {
        /* istanbul ignore next */
        cov_1qnv932f9y().s[117]++;
        if (!keysB.includes(key)) {
          /* istanbul ignore next */
          cov_1qnv932f9y().b[37][0]++;
          cov_1qnv932f9y().s[118]++;
          return false;
        } else
        /* istanbul ignore next */
        {
          cov_1qnv932f9y().b[37][1]++;
        }
        cov_1qnv932f9y().s[119]++;
        if (!this.deepEqualWithCustom(a[key], b[key], customComparator, `${path}.${key}`)) {
          /* istanbul ignore next */
          cov_1qnv932f9y().b[38][0]++;
          cov_1qnv932f9y().s[120]++;
          return false;
        } else
        /* istanbul ignore next */
        {
          cov_1qnv932f9y().b[38][1]++;
        }
      }
      /* istanbul ignore next */
      cov_1qnv932f9y().s[121]++;
      return true;
    } else
    /* istanbul ignore next */
    {
      cov_1qnv932f9y().b[35][1]++;
    }
    cov_1qnv932f9y().s[122]++;
    return false;
  }
  sleep(ms) {
    /* istanbul ignore next */
    cov_1qnv932f9y().f[22]++;
    cov_1qnv932f9y().s[123]++;
    return new Promise(resolve => {
      /* istanbul ignore next */
      cov_1qnv932f9y().f[23]++;
      cov_1qnv932f9y().s[124]++;
      return setTimeout(resolve, ms);
    });
  }
}
// Global assertion helpers instance
export const assertionHelpers =
/* istanbul ignore next */
(cov_1qnv932f9y().s[125]++, new AssertionHelpers());
// Convenience functions for common assertions
export function expectApproximately(actual, expected, precision) {
  /* istanbul ignore next */
  cov_1qnv932f9y().f[24]++;
  cov_1qnv932f9y().s[126]++;
  assertionHelpers.toBeApproximately(actual, expected, precision);
}
export function expectPerformance(metrics, thresholds) {
  /* istanbul ignore next */
  cov_1qnv932f9y().f[25]++;
  cov_1qnv932f9y().s[127]++;
  assertionHelpers.toMeetPerformanceThreshold(metrics, thresholds);
}
export async function expectEventually(predicate, options) {
  /* istanbul ignore next */
  cov_1qnv932f9y().f[26]++;
  cov_1qnv932f9y().s[128]++;
  return assertionHelpers.toEventuallyBeTrue(predicate, options);
}
export function expectInteractionSequence(mock, sequence) {
  /* istanbul ignore next */
  cov_1qnv932f9y().f[27]++;
  cov_1qnv932f9y().s[129]++;
  assertionHelpers.toHaveInteractionSequence(mock, sequence);
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,