45bf5a886bdd1c6c07454d2cb1303697
/* istanbul ignore next */
function cov_298oho3wwc() {
  var path = "/home/mhugo/code/claude-code-flow/src/cli/core/error-handler.ts";
  var hash = "c607feebf6f530520cd59aaa64dbaf3903fbafb1";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/home/mhugo/code/claude-code-flow/src/cli/core/error-handler.ts",
    statementMap: {
      "0": {
        start: {
          line: 15,
          column: 0
        },
        end: {
          line: 20,
          column: 42
        }
      },
      "1": {
        start: {
          line: 16,
          column: 4
        },
        end: {
          line: 16,
          column: 33
        }
      },
      "2": {
        start: {
          line: 17,
          column: 4
        },
        end: {
          line: 17,
          column: 39
        }
      },
      "3": {
        start: {
          line: 18,
          column: 4
        },
        end: {
          line: 18,
          column: 35
        }
      },
      "4": {
        start: {
          line: 19,
          column: 4
        },
        end: {
          line: 19,
          column: 43
        }
      },
      "5": {
        start: {
          line: 25,
          column: 0
        },
        end: {
          line: 34,
          column: 42
        }
      },
      "6": {
        start: {
          line: 26,
          column: 4
        },
        end: {
          line: 26,
          column: 47
        }
      },
      "7": {
        start: {
          line: 27,
          column: 4
        },
        end: {
          line: 27,
          column: 45
        }
      },
      "8": {
        start: {
          line: 28,
          column: 4
        },
        end: {
          line: 28,
          column: 39
        }
      },
      "9": {
        start: {
          line: 29,
          column: 4
        },
        end: {
          line: 29,
          column: 41
        }
      },
      "10": {
        start: {
          line: 30,
          column: 4
        },
        end: {
          line: 30,
          column: 47
        }
      },
      "11": {
        start: {
          line: 31,
          column: 4
        },
        end: {
          line: 31,
          column: 39
        }
      },
      "12": {
        start: {
          line: 32,
          column: 4
        },
        end: {
          line: 32,
          column: 35
        }
      },
      "13": {
        start: {
          line: 33,
          column: 4
        },
        end: {
          line: 33,
          column: 43
        }
      },
      "14": {
        start: {
          line: 41,
          column: 15
        },
        end: {
          line: 41,
          column: 17
        }
      },
      "15": {
        start: {
          line: 42,
          column: 20
        },
        end: {
          line: 42,
          column: 24
        }
      },
      "16": {
        start: {
          line: 44,
          column: 8
        },
        end: {
          line: 59,
          column: 10
        }
      },
      "17": {
        start: {
          line: 65,
          column: 8
        },
        end: {
          line: 67,
          column: 9
        }
      },
      "18": {
        start: {
          line: 66,
          column: 12
        },
        end: {
          line: 66,
          column: 61
        }
      },
      "19": {
        start: {
          line: 68,
          column: 8
        },
        end: {
          line: 68,
          column: 37
        }
      },
      "20": {
        start: {
          line: 74,
          column: 26
        },
        end: {
          line: 74,
          column: 69
        }
      },
      "21": {
        start: {
          line: 76,
          column: 8
        },
        end: {
          line: 76,
          column: 33
        }
      },
      "22": {
        start: {
          line: 78,
          column: 8
        },
        end: {
          line: 78,
          column: 37
        }
      },
      "23": {
        start: {
          line: 80,
          column: 8
        },
        end: {
          line: 82,
          column: 9
        }
      },
      "24": {
        start: {
          line: 81,
          column: 12
        },
        end: {
          line: 81,
          column: 46
        }
      },
      "25": {
        start: {
          line: 84,
          column: 8
        },
        end: {
          line: 86,
          column: 9
        }
      },
      "26": {
        start: {
          line: 85,
          column: 12
        },
        end: {
          line: 85,
          column: 28
        }
      },
      "27": {
        start: {
          line: 92,
          column: 25
        },
        end: {
          line: 92,
          column: 49
        }
      },
      "28": {
        start: {
          line: 93,
          column: 8
        },
        end: {
          line: 93,
          column: 52
        }
      },
      "29": {
        start: {
          line: 94,
          column: 8
        },
        end: {
          line: 99,
          column: 10
        }
      },
      "30": {
        start: {
          line: 105,
          column: 22
        },
        end: {
          line: 105,
          column: 82
        }
      },
      "31": {
        start: {
          line: 106,
          column: 25
        },
        end: {
          line: 106,
          column: 82
        }
      },
      "32": {
        start: {
          line: 107,
          column: 8
        },
        end: {
          line: 107,
          column: 69
        }
      },
      "33": {
        start: {
          line: 113,
          column: 25
        },
        end: {
          line: 113,
          column: 52
        }
      },
      "34": {
        start: {
          line: 114,
          column: 8
        },
        end: {
          line: 114,
          column: 69
        }
      },
      "35": {
        start: {
          line: 116,
          column: 8
        },
        end: {
          line: 116,
          column: 24
        }
      },
      "36": {
        start: {
          line: 122,
          column: 8
        },
        end: {
          line: 124,
          column: 11
        }
      },
      "37": {
        start: {
          line: 123,
          column: 12
        },
        end: {
          line: 123,
          column: 59
        }
      },
      "38": {
        start: {
          line: 125,
          column: 8
        },
        end: {
          line: 127,
          column: 11
        }
      },
      "39": {
        start: {
          line: 126,
          column: 12
        },
        end: {
          line: 126,
          column: 48
        }
      },
      "40": {
        start: {
          line: 133,
          column: 25
        },
        end: {
          line: 133,
          column: 52
        }
      },
      "41": {
        start: {
          line: 134,
          column: 25
        },
        end: {
          line: 134,
          column: 61
        }
      },
      "42": {
        start: {
          line: 135,
          column: 28
        },
        end: {
          line: 135,
          column: 69
        }
      },
      "43": {
        start: {
          line: 136,
          column: 8
        },
        end: {
          line: 146,
          column: 10
        }
      },
      "44": {
        start: {
          line: 152,
          column: 24
        },
        end: {
          line: 152,
          column: 51
        }
      },
      "45": {
        start: {
          line: 153,
          column: 21
        },
        end: {
          line: 153,
          column: 45
        }
      },
      "46": {
        start: {
          line: 154,
          column: 8
        },
        end: {
          line: 156,
          column: 9
        }
      },
      "47": {
        start: {
          line: 155,
          column: 12
        },
        end: {
          line: 155,
          column: 44
        }
      },
      "48": {
        start: {
          line: 157,
          column: 8
        },
        end: {
          line: 159,
          column: 9
        }
      },
      "49": {
        start: {
          line: 158,
          column: 12
        },
        end: {
          line: 158,
          column: 44
        }
      },
      "50": {
        start: {
          line: 160,
          column: 8
        },
        end: {
          line: 162,
          column: 9
        }
      },
      "51": {
        start: {
          line: 161,
          column: 12
        },
        end: {
          line: 161,
          column: 41
        }
      },
      "52": {
        start: {
          line: 163,
          column: 8
        },
        end: {
          line: 165,
          column: 9
        }
      },
      "53": {
        start: {
          line: 164,
          column: 12
        },
        end: {
          line: 164,
          column: 40
        }
      },
      "54": {
        start: {
          line: 166,
          column: 8
        },
        end: {
          line: 168,
          column: 9
        }
      },
      "55": {
        start: {
          line: 167,
          column: 12
        },
        end: {
          line: 167,
          column: 40
        }
      },
      "56": {
        start: {
          line: 169,
          column: 8
        },
        end: {
          line: 171,
          column: 9
        }
      },
      "57": {
        start: {
          line: 170,
          column: 12
        },
        end: {
          line: 170,
          column: 38
        }
      },
      "58": {
        start: {
          line: 172,
          column: 8
        },
        end: {
          line: 172,
          column: 38
        }
      },
      "59": {
        start: {
          line: 179,
          column: 8
        },
        end: {
          line: 181,
          column: 9
        }
      },
      "60": {
        start: {
          line: 180,
          column: 12
        },
        end: {
          line: 180,
          column: 42
        }
      },
      "61": {
        start: {
          line: 183,
          column: 8
        },
        end: {
          line: 185,
          column: 9
        }
      },
      "62": {
        start: {
          line: 184,
          column: 12
        },
        end: {
          line: 184,
          column: 38
        }
      },
      "63": {
        start: {
          line: 187,
          column: 8
        },
        end: {
          line: 189,
          column: 9
        }
      },
      "64": {
        start: {
          line: 188,
          column: 12
        },
        end: {
          line: 188,
          column: 40
        }
      },
      "65": {
        start: {
          line: 191,
          column: 8
        },
        end: {
          line: 191,
          column: 33
        }
      },
      "66": {
        start: {
          line: 197,
          column: 28
        },
        end: {
          line: 197,
          column: 30
        }
      },
      "67": {
        start: {
          line: 198,
          column: 24
        },
        end: {
          line: 198,
          column: 51
        }
      },
      "68": {
        start: {
          line: 199,
          column: 8
        },
        end: {
          line: 221,
          column: 9
        }
      },
      "69": {
        start: {
          line: 201,
          column: 16
        },
        end: {
          line: 201,
          column: 75
        }
      },
      "70": {
        start: {
          line: 202,
          column: 16
        },
        end: {
          line: 202,
          column: 72
        }
      },
      "71": {
        start: {
          line: 203,
          column: 16
        },
        end: {
          line: 203,
          column: 22
        }
      },
      "72": {
        start: {
          line: 205,
          column: 16
        },
        end: {
          line: 205,
          column: 69
        }
      },
      "73": {
        start: {
          line: 206,
          column: 16
        },
        end: {
          line: 206,
          column: 76
        }
      },
      "74": {
        start: {
          line: 207,
          column: 16
        },
        end: {
          line: 207,
          column: 22
        }
      },
      "75": {
        start: {
          line: 209,
          column: 16
        },
        end: {
          line: 209,
          column: 67
        }
      },
      "76": {
        start: {
          line: 210,
          column: 16
        },
        end: {
          line: 210,
          column: 78
        }
      },
      "77": {
        start: {
          line: 211,
          column: 16
        },
        end: {
          line: 211,
          column: 63
        }
      },
      "78": {
        start: {
          line: 212,
          column: 16
        },
        end: {
          line: 212,
          column: 22
        }
      },
      "79": {
        start: {
          line: 214,
          column: 16
        },
        end: {
          line: 214,
          column: 66
        }
      },
      "80": {
        start: {
          line: 215,
          column: 16
        },
        end: {
          line: 215,
          column: 77
        }
      },
      "81": {
        start: {
          line: 216,
          column: 16
        },
        end: {
          line: 216,
          column: 22
        }
      },
      "82": {
        start: {
          line: 218,
          column: 16
        },
        end: {
          line: 218,
          column: 80
        }
      },
      "83": {
        start: {
          line: 219,
          column: 16
        },
        end: {
          line: 219,
          column: 77
        }
      },
      "84": {
        start: {
          line: 220,
          column: 16
        },
        end: {
          line: 220,
          column: 22
        }
      },
      "85": {
        start: {
          line: 223,
          column: 8
        },
        end: {
          line: 225,
          column: 9
        }
      },
      "86": {
        start: {
          line: 224,
          column: 12
        },
        end: {
          line: 224,
          column: 78
        }
      },
      "87": {
        start: {
          line: 226,
          column: 8
        },
        end: {
          line: 228,
          column: 9
        }
      },
      "88": {
        start: {
          line: 227,
          column: 12
        },
        end: {
          line: 227,
          column: 60
        }
      },
      "89": {
        start: {
          line: 229,
          column: 8
        },
        end: {
          line: 229,
          column: 27
        }
      },
      "90": {
        start: {
          line: 235,
          column: 8
        },
        end: {
          line: 239,
          column: 29
        }
      },
      "91": {
        start: {
          line: 245,
          column: 59
        },
        end: {
          line: 245,
          column: 68
        }
      },
      "92": {
        start: {
          line: 247,
          column: 30
        },
        end: {
          line: 247,
          column: 61
        }
      },
      "93": {
        start: {
          line: 248,
          column: 29
        },
        end: {
          line: 248,
          column: 51
        }
      },
      "94": {
        start: {
          line: 249,
          column: 8
        },
        end: {
          line: 249,
          column: 24
        }
      },
      "95": {
        start: {
          line: 250,
          column: 8
        },
        end: {
          line: 250,
          column: 78
        }
      },
      "96": {
        start: {
          line: 252,
          column: 8
        },
        end: {
          line: 256,
          column: 9
        }
      },
      "97": {
        start: {
          line: 253,
          column: 12
        },
        end: {
          line: 253,
          column: 28
        }
      },
      "98": {
        start: {
          line: 254,
          column: 12
        },
        end: {
          line: 254,
          column: 54
        }
      },
      "99": {
        start: {
          line: 255,
          column: 12
        },
        end: {
          line: 255,
          column: 51
        }
      },
      "100": {
        start: {
          line: 258,
          column: 8
        },
        end: {
          line: 264,
          column: 9
        }
      },
      "101": {
        start: {
          line: 259,
          column: 12
        },
        end: {
          line: 259,
          column: 28
        }
      },
      "102": {
        start: {
          line: 260,
          column: 12
        },
        end: {
          line: 260,
          column: 50
        }
      },
      "103": {
        start: {
          line: 261,
          column: 12
        },
        end: {
          line: 261,
          column: 83
        }
      },
      "104": {
        start: {
          line: 262,
          column: 12
        },
        end: {
          line: 262,
          column: 91
        }
      },
      "105": {
        start: {
          line: 263,
          column: 12
        },
        end: {
          line: 263,
          column: 85
        }
      },
      "106": {
        start: {
          line: 266,
          column: 8
        },
        end: {
          line: 272,
          column: 9
        }
      },
      "107": {
        start: {
          line: 267,
          column: 12
        },
        end: {
          line: 267,
          column: 28
        }
      },
      "108": {
        start: {
          line: 268,
          column: 12
        },
        end: {
          line: 268,
          column: 56
        }
      },
      "109": {
        start: {
          line: 269,
          column: 12
        },
        end: {
          line: 271,
          column: 13
        }
      },
      "110": {
        start: {
          line: 270,
          column: 16
        },
        end: {
          line: 270,
          column: 65
        }
      },
      "111": {
        start: {
          line: 273,
          column: 8
        },
        end: {
          line: 273,
          column: 24
        }
      },
      "112": {
        start: {
          line: 279,
          column: 8
        },
        end: {
          line: 281,
          column: 9
        }
      },
      "113": {
        start: {
          line: 280,
          column: 12
        },
        end: {
          line: 280,
          column: 34
        }
      },
      "114": {
        start: {
          line: 280,
          column: 29
        },
        end: {
          line: 280,
          column: 33
        }
      },
      "115": {
        start: {
          line: 282,
          column: 8
        },
        end: {
          line: 293,
          column: 9
        }
      },
      "116": {
        start: {
          line: 284,
          column: 16
        },
        end: {
          line: 284,
          column: 38
        }
      },
      "117": {
        start: {
          line: 286,
          column: 16
        },
        end: {
          line: 286,
          column: 33
        }
      },
      "118": {
        start: {
          line: 288,
          column: 16
        },
        end: {
          line: 288,
          column: 36
        }
      },
      "119": {
        start: {
          line: 290,
          column: 16
        },
        end: {
          line: 290,
          column: 34
        }
      },
      "120": {
        start: {
          line: 292,
          column: 16
        },
        end: {
          line: 292,
          column: 34
        }
      },
      "121": {
        start: {
          line: 299,
          column: 8
        },
        end: {
          line: 300,
          column: 23
        }
      },
      "122": {
        start: {
          line: 300,
          column: 12
        },
        end: {
          line: 300,
          column: 23
        }
      },
      "123": {
        start: {
          line: 301,
          column: 8
        },
        end: {
          line: 302,
          column: 23
        }
      },
      "124": {
        start: {
          line: 302,
          column: 12
        },
        end: {
          line: 302,
          column: 23
        }
      },
      "125": {
        start: {
          line: 303,
          column: 8
        },
        end: {
          line: 304,
          column: 23
        }
      },
      "126": {
        start: {
          line: 304,
          column: 12
        },
        end: {
          line: 304,
          column: 23
        }
      },
      "127": {
        start: {
          line: 305,
          column: 8
        },
        end: {
          line: 305,
          column: 17
        }
      },
      "128": {
        start: {
          line: 311,
          column: 8
        },
        end: {
          line: 311,
          column: 38
        }
      },
      "129": {
        start: {
          line: 313,
          column: 8
        },
        end: {
          line: 315,
          column: 9
        }
      },
      "130": {
        start: {
          line: 314,
          column: 12
        },
        end: {
          line: 314,
          column: 69
        }
      },
      "131": {
        start: {
          line: 321,
          column: 8
        },
        end: {
          line: 330,
          column: 9
        }
      },
      "132": {
        start: {
          line: 322,
          column: 27
        },
        end: {
          line: 322,
          column: 60
        }
      },
      "133": {
        start: {
          line: 323,
          column: 12
        },
        end: {
          line: 325,
          column: 13
        }
      },
      "134": {
        start: {
          line: 324,
          column: 16
        },
        end: {
          line: 324,
          column: 50
        }
      },
      "135": {
        start: {
          line: 329,
          column: 12
        },
        end: {
          line: 329,
          column: 69
        }
      },
      "136": {
        start: {
          line: 336,
          column: 23
        },
        end: {
          line: 342,
          column: 9
        }
      },
      "137": {
        start: {
          line: 343,
          column: 8
        },
        end: {
          line: 345,
          column: 9
        }
      },
      "138": {
        start: {
          line: 344,
          column: 12
        },
        end: {
          line: 344,
          column: 43
        }
      },
      "139": {
        start: {
          line: 346,
          column: 8
        },
        end: {
          line: 352,
          column: 9
        }
      },
      "140": {
        start: {
          line: 347,
          column: 12
        },
        end: {
          line: 351,
          column: 14
        }
      },
      "141": {
        start: {
          line: 353,
          column: 8
        },
        end: {
          line: 359,
          column: 9
        }
      },
      "142": {
        start: {
          line: 354,
          column: 12
        },
        end: {
          line: 358,
          column: 14
        }
      },
      "143": {
        start: {
          line: 360,
          column: 8
        },
        end: {
          line: 362,
          column: 9
        }
      },
      "144": {
        start: {
          line: 361,
          column: 12
        },
        end: {
          line: 361,
          column: 49
        }
      },
      "145": {
        start: {
          line: 363,
          column: 8
        },
        end: {
          line: 363,
          column: 47
        }
      },
      "146": {
        start: {
          line: 369,
          column: 24
        },
        end: {
          line: 369,
          column: 98
        }
      },
      "147": {
        start: {
          line: 370,
          column: 26
        },
        end: {
          line: 370,
          column: 50
        }
      },
      "148": {
        start: {
          line: 371,
          column: 25
        },
        end: {
          line: 371,
          column: 65
        }
      },
      "149": {
        start: {
          line: 372,
          column: 8
        },
        end: {
          line: 372,
          column: 58
        }
      },
      "150": {
        start: {
          line: 378,
          column: 22
        },
        end: {
          line: 383,
          column: 9
        }
      },
      "151": {
        start: {
          line: 385,
          column: 8
        },
        end: {
          line: 387,
          column: 11
        }
      },
      "152": {
        start: {
          line: 386,
          column: 12
        },
        end: {
          line: 386,
          column: 43
        }
      },
      "153": {
        start: {
          line: 388,
          column: 8
        },
        end: {
          line: 390,
          column: 11
        }
      },
      "154": {
        start: {
          line: 389,
          column: 12
        },
        end: {
          line: 389,
          column: 43
        }
      },
      "155": {
        start: {
          line: 392,
          column: 8
        },
        end: {
          line: 395,
          column: 9
        }
      },
      "156": {
        start: {
          line: 393,
          column: 12
        },
        end: {
          line: 393,
          column: 51
        }
      },
      "157": {
        start: {
          line: 394,
          column: 12
        },
        end: {
          line: 394,
          column: 51
        }
      },
      "158": {
        start: {
          line: 396,
          column: 8
        },
        end: {
          line: 396,
          column: 21
        }
      },
      "159": {
        start: {
          line: 402,
          column: 8
        },
        end: {
          line: 402,
          column: 33
        }
      },
      "160": {
        start: {
          line: 408,
          column: 8
        },
        end: {
          line: 408,
          column: 52
        }
      },
      "161": {
        start: {
          line: 414,
          column: 8
        },
        end: {
          line: 414,
          column: 34
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 15,
            column: 1
          },
          end: {
            line: 15,
            column: 2
          }
        },
        loc: {
          start: {
            line: 15,
            column: 26
          },
          end: {
            line: 20,
            column: 1
          }
        },
        line: 15
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 25,
            column: 1
          },
          end: {
            line: 25,
            column: 2
          }
        },
        loc: {
          start: {
            line: 25,
            column: 26
          },
          end: {
            line: 34,
            column: 1
          }
        },
        line: 25
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 43,
            column: 4
          },
          end: {
            line: 43,
            column: 5
          }
        },
        loc: {
          start: {
            line: 43,
            column: 29
          },
          end: {
            line: 60,
            column: 5
          }
        },
        line: 43
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 64,
            column: 4
          },
          end: {
            line: 64,
            column: 5
          }
        },
        loc: {
          start: {
            line: 64,
            column: 31
          },
          end: {
            line: 69,
            column: 5
          }
        },
        line: 64
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 73,
            column: 4
          },
          end: {
            line: 73,
            column: 5
          }
        },
        loc: {
          start: {
            line: 73,
            column: 43
          },
          end: {
            line: 87,
            column: 5
          }
        },
        line: 73
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 91,
            column: 4
          },
          end: {
            line: 91,
            column: 5
          }
        },
        loc: {
          start: {
            line: 91,
            column: 58
          },
          end: {
            line: 100,
            column: 5
          }
        },
        line: 91
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 104,
            column: 4
          },
          end: {
            line: 104,
            column: 5
          }
        },
        loc: {
          start: {
            line: 104,
            column: 46
          },
          end: {
            line: 108,
            column: 5
          }
        },
        line: 104
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 112,
            column: 4
          },
          end: {
            line: 112,
            column: 5
          }
        },
        loc: {
          start: {
            line: 112,
            column: 35
          },
          end: {
            line: 117,
            column: 5
          }
        },
        line: 112
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 121,
            column: 4
          },
          end: {
            line: 121,
            column: 5
          }
        },
        loc: {
          start: {
            line: 121,
            column: 26
          },
          end: {
            line: 128,
            column: 5
          }
        },
        line: 121
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 122,
            column: 41
          },
          end: {
            line: 122,
            column: 42
          }
        },
        loc: {
          start: {
            line: 122,
            column: 62
          },
          end: {
            line: 124,
            column: 9
          }
        },
        line: 122
      },
      "10": {
        name: "(anonymous_10)",
        decl: {
          start: {
            line: 125,
            column: 40
          },
          end: {
            line: 125,
            column: 41
          }
        },
        loc: {
          start: {
            line: 125,
            column: 51
          },
          end: {
            line: 127,
            column: 9
          }
        },
        line: 125
      },
      "11": {
        name: "(anonymous_11)",
        decl: {
          start: {
            line: 132,
            column: 4
          },
          end: {
            line: 132,
            column: 5
          }
        },
        loc: {
          start: {
            line: 132,
            column: 43
          },
          end: {
            line: 147,
            column: 5
          }
        },
        line: 132
      },
      "12": {
        name: "(anonymous_12)",
        decl: {
          start: {
            line: 151,
            column: 4
          },
          end: {
            line: 151,
            column: 5
          }
        },
        loc: {
          start: {
            line: 151,
            column: 27
          },
          end: {
            line: 173,
            column: 5
          }
        },
        line: 151
      },
      "13": {
        name: "(anonymous_13)",
        decl: {
          start: {
            line: 177,
            column: 4
          },
          end: {
            line: 177,
            column: 5
          }
        },
        loc: {
          start: {
            line: 177,
            column: 36
          },
          end: {
            line: 192,
            column: 5
          }
        },
        line: 177
      },
      "14": {
        name: "(anonymous_14)",
        decl: {
          start: {
            line: 196,
            column: 4
          },
          end: {
            line: 196,
            column: 5
          }
        },
        loc: {
          start: {
            line: 196,
            column: 41
          },
          end: {
            line: 230,
            column: 5
          }
        },
        line: 196
      },
      "15": {
        name: "(anonymous_15)",
        decl: {
          start: {
            line: 234,
            column: 4
          },
          end: {
            line: 234,
            column: 5
          }
        },
        loc: {
          start: {
            line: 234,
            column: 35
          },
          end: {
            line: 240,
            column: 5
          }
        },
        line: 234
      },
      "16": {
        name: "(anonymous_16)",
        decl: {
          start: {
            line: 244,
            column: 4
          },
          end: {
            line: 244,
            column: 5
          }
        },
        loc: {
          start: {
            line: 244,
            column: 28
          },
          end: {
            line: 274,
            column: 5
          }
        },
        line: 244
      },
      "17": {
        name: "(anonymous_17)",
        decl: {
          start: {
            line: 278,
            column: 4
          },
          end: {
            line: 278,
            column: 5
          }
        },
        loc: {
          start: {
            line: 278,
            column: 31
          },
          end: {
            line: 294,
            column: 5
          }
        },
        line: 278
      },
      "18": {
        name: "(anonymous_18)",
        decl: {
          start: {
            line: 280,
            column: 19
          },
          end: {
            line: 280,
            column: 20
          }
        },
        loc: {
          start: {
            line: 280,
            column: 29
          },
          end: {
            line: 280,
            column: 33
          }
        },
        line: 280
      },
      "19": {
        name: "(anonymous_19)",
        decl: {
          start: {
            line: 298,
            column: 4
          },
          end: {
            line: 298,
            column: 5
          }
        },
        loc: {
          start: {
            line: 298,
            column: 23
          },
          end: {
            line: 306,
            column: 5
          }
        },
        line: 298
      },
      "20": {
        name: "(anonymous_20)",
        decl: {
          start: {
            line: 310,
            column: 4
          },
          end: {
            line: 310,
            column: 5
          }
        },
        loc: {
          start: {
            line: 310,
            column: 24
          },
          end: {
            line: 316,
            column: 5
          }
        },
        line: 310
      },
      "21": {
        name: "(anonymous_21)",
        decl: {
          start: {
            line: 320,
            column: 4
          },
          end: {
            line: 320,
            column: 5
          }
        },
        loc: {
          start: {
            line: 320,
            column: 33
          },
          end: {
            line: 331,
            column: 5
          }
        },
        line: 320
      },
      "22": {
        name: "(anonymous_22)",
        decl: {
          start: {
            line: 335,
            column: 4
          },
          end: {
            line: 335,
            column: 5
          }
        },
        loc: {
          start: {
            line: 335,
            column: 33
          },
          end: {
            line: 364,
            column: 5
          }
        },
        line: 335
      },
      "23": {
        name: "(anonymous_23)",
        decl: {
          start: {
            line: 368,
            column: 4
          },
          end: {
            line: 368,
            column: 5
          }
        },
        loc: {
          start: {
            line: 368,
            column: 33
          },
          end: {
            line: 373,
            column: 5
          }
        },
        line: 368
      },
      "24": {
        name: "(anonymous_24)",
        decl: {
          start: {
            line: 377,
            column: 4
          },
          end: {
            line: 377,
            column: 5
          }
        },
        loc: {
          start: {
            line: 377,
            column: 20
          },
          end: {
            line: 397,
            column: 5
          }
        },
        line: 377
      },
      "25": {
        name: "(anonymous_25)",
        decl: {
          start: {
            line: 385,
            column: 45
          },
          end: {
            line: 385,
            column: 46
          }
        },
        loc: {
          start: {
            line: 385,
            column: 57
          },
          end: {
            line: 387,
            column: 9
          }
        },
        line: 385
      },
      "26": {
        name: "(anonymous_26)",
        decl: {
          start: {
            line: 388,
            column: 45
          },
          end: {
            line: 388,
            column: 46
          }
        },
        loc: {
          start: {
            line: 388,
            column: 57
          },
          end: {
            line: 390,
            column: 9
          }
        },
        line: 388
      },
      "27": {
        name: "(anonymous_27)",
        decl: {
          start: {
            line: 401,
            column: 4
          },
          end: {
            line: 401,
            column: 5
          }
        },
        loc: {
          start: {
            line: 401,
            column: 15
          },
          end: {
            line: 403,
            column: 5
          }
        },
        line: 401
      },
      "28": {
        name: "(anonymous_28)",
        decl: {
          start: {
            line: 407,
            column: 4
          },
          end: {
            line: 407,
            column: 5
          }
        },
        loc: {
          start: {
            line: 407,
            column: 25
          },
          end: {
            line: 409,
            column: 5
          }
        },
        line: 407
      },
      "29": {
        name: "(anonymous_29)",
        decl: {
          start: {
            line: 413,
            column: 4
          },
          end: {
            line: 413,
            column: 5
          }
        },
        loc: {
          start: {
            line: 413,
            column: 16
          },
          end: {
            line: 415,
            column: 5
          }
        },
        line: 413
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 20,
            column: 3
          },
          end: {
            line: 20,
            column: 40
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 20,
            column: 3
          },
          end: {
            line: 20,
            column: 16
          }
        }, {
          start: {
            line: 20,
            column: 21
          },
          end: {
            line: 20,
            column: 39
          }
        }],
        line: 20
      },
      "1": {
        loc: {
          start: {
            line: 34,
            column: 3
          },
          end: {
            line: 34,
            column: 40
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 34,
            column: 3
          },
          end: {
            line: 34,
            column: 16
          }
        }, {
          start: {
            line: 34,
            column: 21
          },
          end: {
            line: 34,
            column: 39
          }
        }],
        line: 34
      },
      "2": {
        loc: {
          start: {
            line: 43,
            column: 16
          },
          end: {
            line: 43,
            column: 27
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 43,
            column: 25
          },
          end: {
            line: 43,
            column: 27
          }
        }],
        line: 43
      },
      "3": {
        loc: {
          start: {
            line: 65,
            column: 8
          },
          end: {
            line: 67,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 65,
            column: 8
          },
          end: {
            line: 67,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 65
      },
      "4": {
        loc: {
          start: {
            line: 80,
            column: 8
          },
          end: {
            line: 82,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 80,
            column: 8
          },
          end: {
            line: 82,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 80
      },
      "5": {
        loc: {
          start: {
            line: 84,
            column: 8
          },
          end: {
            line: 86,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 84,
            column: 8
          },
          end: {
            line: 86,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 84
      },
      "6": {
        loc: {
          start: {
            line: 84,
            column: 12
          },
          end: {
            line: 84,
            column: 87
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 84,
            column: 12
          },
          end: {
            line: 84,
            column: 38
          }
        }, {
          start: {
            line: 84,
            column: 42
          },
          end: {
            line: 84,
            column: 87
          }
        }],
        line: 84
      },
      "7": {
        loc: {
          start: {
            line: 105,
            column: 22
          },
          end: {
            line: 105,
            column: 82
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 105,
            column: 48
          },
          end: {
            line: 105,
            column: 54
          }
        }, {
          start: {
            line: 105,
            column: 57
          },
          end: {
            line: 105,
            column: 82
          }
        }],
        line: 105
      },
      "8": {
        loc: {
          start: {
            line: 154,
            column: 8
          },
          end: {
            line: 156,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 154,
            column: 8
          },
          end: {
            line: 156,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 154
      },
      "9": {
        loc: {
          start: {
            line: 154,
            column: 12
          },
          end: {
            line: 154,
            column: 102
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 154,
            column: 12
          },
          end: {
            line: 154,
            column: 39
          }
        }, {
          start: {
            line: 154,
            column: 43
          },
          end: {
            line: 154,
            column: 70
          }
        }, {
          start: {
            line: 154,
            column: 74
          },
          end: {
            line: 154,
            column: 102
          }
        }],
        line: 154
      },
      "10": {
        loc: {
          start: {
            line: 157,
            column: 8
          },
          end: {
            line: 159,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 157,
            column: 8
          },
          end: {
            line: 159,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 157
      },
      "11": {
        loc: {
          start: {
            line: 157,
            column: 12
          },
          end: {
            line: 157,
            column: 103
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 157,
            column: 12
          },
          end: {
            line: 157,
            column: 42
          }
        }, {
          start: {
            line: 157,
            column: 46
          },
          end: {
            line: 157,
            column: 72
          }
        }, {
          start: {
            line: 157,
            column: 76
          },
          end: {
            line: 157,
            column: 103
          }
        }],
        line: 157
      },
      "12": {
        loc: {
          start: {
            line: 160,
            column: 8
          },
          end: {
            line: 162,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 160,
            column: 8
          },
          end: {
            line: 162,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 160
      },
      "13": {
        loc: {
          start: {
            line: 160,
            column: 12
          },
          end: {
            line: 160,
            column: 104
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 160,
            column: 12
          },
          end: {
            line: 160,
            column: 39
          }
        }, {
          start: {
            line: 160,
            column: 43
          },
          end: {
            line: 160,
            column: 73
          }
        }, {
          start: {
            line: 160,
            column: 77
          },
          end: {
            line: 160,
            column: 104
          }
        }],
        line: 160
      },
      "14": {
        loc: {
          start: {
            line: 163,
            column: 8
          },
          end: {
            line: 165,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 163,
            column: 8
          },
          end: {
            line: 165,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 163
      },
      "15": {
        loc: {
          start: {
            line: 163,
            column: 12
          },
          end: {
            line: 163,
            column: 75
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 163,
            column: 12
          },
          end: {
            line: 163,
            column: 38
          }
        }, {
          start: {
            line: 163,
            column: 42
          },
          end: {
            line: 163,
            column: 75
          }
        }],
        line: 163
      },
      "16": {
        loc: {
          start: {
            line: 166,
            column: 8
          },
          end: {
            line: 168,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 166,
            column: 8
          },
          end: {
            line: 168,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 166
      },
      "17": {
        loc: {
          start: {
            line: 166,
            column: 12
          },
          end: {
            line: 166,
            column: 65
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 166,
            column: 12
          },
          end: {
            line: 166,
            column: 35
          }
        }, {
          start: {
            line: 166,
            column: 39
          },
          end: {
            line: 166,
            column: 65
          }
        }],
        line: 166
      },
      "18": {
        loc: {
          start: {
            line: 169,
            column: 8
          },
          end: {
            line: 171,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 169,
            column: 8
          },
          end: {
            line: 171,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 169
      },
      "19": {
        loc: {
          start: {
            line: 169,
            column: 12
          },
          end: {
            line: 169,
            column: 69
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 169,
            column: 12
          },
          end: {
            line: 169,
            column: 41
          }
        }, {
          start: {
            line: 169,
            column: 45
          },
          end: {
            line: 169,
            column: 69
          }
        }],
        line: 169
      },
      "20": {
        loc: {
          start: {
            line: 179,
            column: 8
          },
          end: {
            line: 181,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 179,
            column: 8
          },
          end: {
            line: 181,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 179
      },
      "21": {
        loc: {
          start: {
            line: 179,
            column: 12
          },
          end: {
            line: 179,
            column: 76
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 179,
            column: 12
          },
          end: {
            line: 179,
            column: 45
          }
        }, {
          start: {
            line: 179,
            column: 49
          },
          end: {
            line: 179,
            column: 76
          }
        }],
        line: 179
      },
      "22": {
        loc: {
          start: {
            line: 183,
            column: 8
          },
          end: {
            line: 185,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 183,
            column: 8
          },
          end: {
            line: 185,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 183
      },
      "23": {
        loc: {
          start: {
            line: 183,
            column: 12
          },
          end: {
            line: 183,
            column: 86
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 183,
            column: 12
          },
          end: {
            line: 183,
            column: 49
          }
        }, {
          start: {
            line: 183,
            column: 53
          },
          end: {
            line: 183,
            column: 86
          }
        }],
        line: 183
      },
      "24": {
        loc: {
          start: {
            line: 187,
            column: 8
          },
          end: {
            line: 189,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 187,
            column: 8
          },
          end: {
            line: 189,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 187
      },
      "25": {
        loc: {
          start: {
            line: 187,
            column: 12
          },
          end: {
            line: 187,
            column: 86
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 187,
            column: 12
          },
          end: {
            line: 187,
            column: 46
          }
        }, {
          start: {
            line: 187,
            column: 50
          },
          end: {
            line: 187,
            column: 86
          }
        }],
        line: 187
      },
      "26": {
        loc: {
          start: {
            line: 199,
            column: 8
          },
          end: {
            line: 221,
            column: 9
          }
        },
        type: "switch",
        locations: [{
          start: {
            line: 200,
            column: 12
          },
          end: {
            line: 203,
            column: 22
          }
        }, {
          start: {
            line: 204,
            column: 12
          },
          end: {
            line: 207,
            column: 22
          }
        }, {
          start: {
            line: 208,
            column: 12
          },
          end: {
            line: 212,
            column: 22
          }
        }, {
          start: {
            line: 213,
            column: 12
          },
          end: {
            line: 216,
            column: 22
          }
        }, {
          start: {
            line: 217,
            column: 12
          },
          end: {
            line: 220,
            column: 22
          }
        }],
        line: 199
      },
      "27": {
        loc: {
          start: {
            line: 223,
            column: 8
          },
          end: {
            line: 225,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 223,
            column: 8
          },
          end: {
            line: 225,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 223
      },
      "28": {
        loc: {
          start: {
            line: 226,
            column: 8
          },
          end: {
            line: 228,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 226,
            column: 8
          },
          end: {
            line: 228,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 226
      },
      "29": {
        loc: {
          start: {
            line: 252,
            column: 8
          },
          end: {
            line: 256,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 252,
            column: 8
          },
          end: {
            line: 256,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 252
      },
      "30": {
        loc: {
          start: {
            line: 252,
            column: 12
          },
          end: {
            line: 252,
            column: 44
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 252,
            column: 12
          },
          end: {
            line: 252,
            column: 29
          }
        }, {
          start: {
            line: 252,
            column: 33
          },
          end: {
            line: 252,
            column: 44
          }
        }],
        line: 252
      },
      "31": {
        loc: {
          start: {
            line: 258,
            column: 8
          },
          end: {
            line: 264,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 258,
            column: 8
          },
          end: {
            line: 264,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 258
      },
      "32": {
        loc: {
          start: {
            line: 258,
            column: 12
          },
          end: {
            line: 258,
            column: 52
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 258,
            column: 12
          },
          end: {
            line: 258,
            column: 31
          }
        }, {
          start: {
            line: 258,
            column: 35
          },
          end: {
            line: 258,
            column: 52
          }
        }],
        line: 258
      },
      "33": {
        loc: {
          start: {
            line: 266,
            column: 8
          },
          end: {
            line: 272,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 266,
            column: 8
          },
          end: {
            line: 272,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 266
      },
      "34": {
        loc: {
          start: {
            line: 266,
            column: 12
          },
          end: {
            line: 266,
            column: 80
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 266,
            column: 12
          },
          end: {
            line: 266,
            column: 39
          }
        }, {
          start: {
            line: 266,
            column: 43
          },
          end: {
            line: 266,
            column: 54
          }
        }, {
          start: {
            line: 266,
            column: 58
          },
          end: {
            line: 266,
            column: 80
          }
        }],
        line: 266
      },
      "35": {
        loc: {
          start: {
            line: 279,
            column: 8
          },
          end: {
            line: 281,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 279,
            column: 8
          },
          end: {
            line: 281,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 279
      },
      "36": {
        loc: {
          start: {
            line: 282,
            column: 8
          },
          end: {
            line: 293,
            column: 9
          }
        },
        type: "switch",
        locations: [{
          start: {
            line: 283,
            column: 12
          },
          end: {
            line: 284,
            column: 38
          }
        }, {
          start: {
            line: 285,
            column: 12
          },
          end: {
            line: 286,
            column: 33
          }
        }, {
          start: {
            line: 287,
            column: 12
          },
          end: {
            line: 288,
            column: 36
          }
        }, {
          start: {
            line: 289,
            column: 12
          },
          end: {
            line: 290,
            column: 34
          }
        }, {
          start: {
            line: 291,
            column: 12
          },
          end: {
            line: 292,
            column: 34
          }
        }],
        line: 282
      },
      "37": {
        loc: {
          start: {
            line: 299,
            column: 8
          },
          end: {
            line: 300,
            column: 23
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 299,
            column: 8
          },
          end: {
            line: 300,
            column: 23
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 299
      },
      "38": {
        loc: {
          start: {
            line: 301,
            column: 8
          },
          end: {
            line: 302,
            column: 23
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 301,
            column: 8
          },
          end: {
            line: 302,
            column: 23
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 301
      },
      "39": {
        loc: {
          start: {
            line: 303,
            column: 8
          },
          end: {
            line: 304,
            column: 23
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 303,
            column: 8
          },
          end: {
            line: 304,
            column: 23
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 303
      },
      "40": {
        loc: {
          start: {
            line: 313,
            column: 8
          },
          end: {
            line: 315,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 313,
            column: 8
          },
          end: {
            line: 315,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 313
      },
      "41": {
        loc: {
          start: {
            line: 323,
            column: 12
          },
          end: {
            line: 325,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 323,
            column: 12
          },
          end: {
            line: 325,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 323
      },
      "42": {
        loc: {
          start: {
            line: 343,
            column: 8
          },
          end: {
            line: 345,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 343,
            column: 8
          },
          end: {
            line: 345,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 343
      },
      "43": {
        loc: {
          start: {
            line: 343,
            column: 12
          },
          end: {
            line: 343,
            column: 65
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 343,
            column: 12
          },
          end: {
            line: 343,
            column: 46
          }
        }, {
          start: {
            line: 343,
            column: 50
          },
          end: {
            line: 343,
            column: 65
          }
        }],
        line: 343
      },
      "44": {
        loc: {
          start: {
            line: 346,
            column: 8
          },
          end: {
            line: 352,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 346,
            column: 8
          },
          end: {
            line: 352,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 346
      },
      "45": {
        loc: {
          start: {
            line: 346,
            column: 12
          },
          end: {
            line: 346,
            column: 69
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 346,
            column: 12
          },
          end: {
            line: 346,
            column: 48
          }
        }, {
          start: {
            line: 346,
            column: 52
          },
          end: {
            line: 346,
            column: 69
          }
        }],
        line: 346
      },
      "46": {
        loc: {
          start: {
            line: 353,
            column: 8
          },
          end: {
            line: 359,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 353,
            column: 8
          },
          end: {
            line: 359,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 353
      },
      "47": {
        loc: {
          start: {
            line: 360,
            column: 8
          },
          end: {
            line: 362,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 360,
            column: 8
          },
          end: {
            line: 362,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 360
      },
      "48": {
        loc: {
          start: {
            line: 369,
            column: 24
          },
          end: {
            line: 369,
            column: 98
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 369,
            column: 24
          },
          end: {
            line: 369,
            column: 53
          }
        }, {
          start: {
            line: 369,
            column: 57
          },
          end: {
            line: 369,
            column: 98
          }
        }],
        line: 369
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0,
      "74": 0,
      "75": 0,
      "76": 0,
      "77": 0,
      "78": 0,
      "79": 0,
      "80": 0,
      "81": 0,
      "82": 0,
      "83": 0,
      "84": 0,
      "85": 0,
      "86": 0,
      "87": 0,
      "88": 0,
      "89": 0,
      "90": 0,
      "91": 0,
      "92": 0,
      "93": 0,
      "94": 0,
      "95": 0,
      "96": 0,
      "97": 0,
      "98": 0,
      "99": 0,
      "100": 0,
      "101": 0,
      "102": 0,
      "103": 0,
      "104": 0,
      "105": 0,
      "106": 0,
      "107": 0,
      "108": 0,
      "109": 0,
      "110": 0,
      "111": 0,
      "112": 0,
      "113": 0,
      "114": 0,
      "115": 0,
      "116": 0,
      "117": 0,
      "118": 0,
      "119": 0,
      "120": 0,
      "121": 0,
      "122": 0,
      "123": 0,
      "124": 0,
      "125": 0,
      "126": 0,
      "127": 0,
      "128": 0,
      "129": 0,
      "130": 0,
      "131": 0,
      "132": 0,
      "133": 0,
      "134": 0,
      "135": 0,
      "136": 0,
      "137": 0,
      "138": 0,
      "139": 0,
      "140": 0,
      "141": 0,
      "142": 0,
      "143": 0,
      "144": 0,
      "145": 0,
      "146": 0,
      "147": 0,
      "148": 0,
      "149": 0,
      "150": 0,
      "151": 0,
      "152": 0,
      "153": 0,
      "154": 0,
      "155": 0,
      "156": 0,
      "157": 0,
      "158": 0,
      "159": 0,
      "160": 0,
      "161": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0, 0, 0],
      "10": [0, 0],
      "11": [0, 0, 0],
      "12": [0, 0],
      "13": [0, 0, 0],
      "14": [0, 0],
      "15": [0, 0],
      "16": [0, 0],
      "17": [0, 0],
      "18": [0, 0],
      "19": [0, 0],
      "20": [0, 0],
      "21": [0, 0],
      "22": [0, 0],
      "23": [0, 0],
      "24": [0, 0],
      "25": [0, 0],
      "26": [0, 0, 0, 0, 0],
      "27": [0, 0],
      "28": [0, 0],
      "29": [0, 0],
      "30": [0, 0],
      "31": [0, 0],
      "32": [0, 0],
      "33": [0, 0],
      "34": [0, 0, 0],
      "35": [0, 0],
      "36": [0, 0, 0, 0, 0],
      "37": [0, 0],
      "38": [0, 0],
      "39": [0, 0],
      "40": [0, 0],
      "41": [0, 0],
      "42": [0, 0],
      "43": [0, 0],
      "44": [0, 0],
      "45": [0, 0],
      "46": [0, 0],
      "47": [0, 0],
      "48": [0, 0]
    },
    inputSourceMap: {
      file: "/home/mhugo/code/claude-code-flow/src/cli/core/error-handler.ts",
      mappings: "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",
      names: [],
      sources: ["/home/mhugo/code/claude-code-flow/src/cli/core/error-handler.ts"],
      sourcesContent: ["/**\n * Error Handler\n * \n * Global error handling system for the CLI application.\n * Provides error formatting, debugging support, and error reporting.\n */\n\nimport { writeFile } from 'fs/promises';\nimport { join } from 'path';\nimport { homedir } from 'os';\nimport chalk from 'chalk';\nimport type { CommandContext, CommandResult } from '../types/index.js';\n\n/**\n * Error severity levels\n */\nexport enum ErrorSeverity {\n  LOW = 'low',\n  MEDIUM = 'medium',\n  HIGH = 'high',\n  CRITICAL = 'critical'\n}\n\n/**\n * Error categories\n */\nexport enum ErrorCategory {\n  VALIDATION = 'validation',\n  EXECUTION = 'execution',\n  SYSTEM = 'system',\n  NETWORK = 'network',\n  PERMISSION = 'permission',\n  CONFIG = 'config',\n  USER = 'user',\n  INTERNAL = 'internal'\n}\n\n/**\n * Enhanced error information\n */\nexport interface ErrorInfo {\n  error: Error;\n  context?: CommandContext;\n  category: ErrorCategory;\n  severity: ErrorSeverity;\n  timestamp: number;\n  stack?: string;\n  metadata?: Record<string, unknown>;\n  suggestions?: string[];\n  recoverable: boolean;\n}\n\n/**\n * Error reporting configuration\n */\nexport interface ErrorReportingConfig {\n  enabled: boolean;\n  logFile?: string;\n  includeStack: boolean;\n  includeContext: boolean;\n  includeEnvironment: boolean;\n  maxLogSize: number; // in bytes\n  anonymize: boolean;\n}\n\n/**\n * Error handler configuration\n */\nexport interface ErrorHandlerConfig {\n  debug: boolean;\n  verbose: boolean;\n  colors: boolean;\n  reporting: ErrorReportingConfig;\n  exitOnCritical: boolean;\n  showSuggestions: boolean;\n}\n\n/**\n * Global error handler for CLI application\n */\nexport class ErrorHandler {\n  private static instance: ErrorHandler;\n  private config: ErrorHandlerConfig;\n  private errorLog: ErrorInfo[] = [];\n  private maxLogEntries = 1000;\n\n  constructor(config: Partial<ErrorHandlerConfig> = {}) {\n    this.config = {\n      debug: false,\n      verbose: false,\n      colors: true,\n      exitOnCritical: true,\n      showSuggestions: true,\n      reporting: {\n        enabled: true,\n        includeStack: true,\n        includeContext: false,\n        includeEnvironment: false,\n        maxLogSize: 10 * 1024 * 1024, // 10MB\n        anonymize: true\n      },\n      ...config\n    };\n  }\n\n  /**\n   * Get singleton instance\n   */\n  static getInstance(config?: Partial<ErrorHandlerConfig>): ErrorHandler {\n    if (!ErrorHandler.instance) {\n      ErrorHandler.instance = new ErrorHandler(config);\n    }\n    return ErrorHandler.instance;\n  }\n\n  /**\n   * Handle an error with full context\n   */\n  async handle(error: Error, context?: CommandContext, metadata?: Record<string, unknown>): Promise<void> {\n    const errorInfo = this.analyzeError(error, context, metadata);\n    \n    // Add to error log\n    this.addToLog(errorInfo);\n    \n    // Display error to user\n    this.displayError(errorInfo);\n    \n    // Report error if enabled\n    if (this.config.reporting.enabled) {\n      await this.reportError(errorInfo);\n    }\n    \n    // Exit on critical errors if configured\n    if (this.config.exitOnCritical && errorInfo.severity === ErrorSeverity.CRITICAL) {\n      process.exit(1);\n    }\n  }\n\n  /**\n   * Handle command execution errors\n   */\n  async handleCommandError(\n    error: Error, \n    commandName: string, \n    context: CommandContext\n  ): Promise<CommandResult> {\n    const metadata = { command: commandName };\n    await this.handle(error, context, metadata);\n    \n    return {\n      success: false,\n      error: error.message,\n      exitCode: this.getExitCode(error),\n      executionTime: 0\n    };\n  }\n\n  /**\n   * Handle unhandled promise rejections\n   */\n  handleUnhandledRejection(reason: unknown, promise: Promise<unknown>): void {\n    const error = reason instanceof Error ? reason : new Error(String(reason));\n    const metadata = { unhandledRejection: true, promise: promise.toString() };\n    \n    this.handle(error, undefined, metadata).catch(console.error);\n  }\n\n  /**\n   * Handle uncaught exceptions\n   */\n  handleUncaughtException(error: Error): void {\n    const metadata = { uncaughtException: true };\n    \n    this.handle(error, undefined, metadata).catch(console.error);\n    \n    // Always exit on uncaught exceptions\n    process.exit(1);\n  }\n\n  /**\n   * Setup global error handlers\n   */\n  setupGlobalHandlers(): void {\n    process.on('unhandledRejection', (reason, promise) => {\n      this.handleUnhandledRejection(reason, promise);\n    });\n    \n    process.on('uncaughtException', (error) => {\n      this.handleUncaughtException(error);\n    });\n  }\n\n  /**\n   * Analyze error and extract information\n   */\n  private analyzeError(error: Error, context?: CommandContext, metadata?: Record<string, unknown>): ErrorInfo {\n    const category = this.categorizeError(error);\n    const severity = this.assessSeverity(error, category);\n    const suggestions = this.generateSuggestions(error, category);\n    \n    return {\n      error,\n      context,\n      category,\n      severity,\n      timestamp: Date.now(),\n      stack: error.stack,\n      metadata,\n      suggestions,\n      recoverable: this.isRecoverable(error, category)\n    };\n  }\n\n  /**\n   * Categorize error type\n   */\n  private categorizeError(error: Error): ErrorCategory {\n    const message = error.message.toLowerCase();\n    const name = error.name.toLowerCase();\n    \n    if (name.includes('validation') || message.includes('invalid') || message.includes('required')) {\n      return ErrorCategory.VALIDATION;\n    }\n    \n    if (message.includes('permission') || message.includes('access') || name.includes('permission')) {\n      return ErrorCategory.PERMISSION;\n    }\n    \n    if (message.includes('network') || message.includes('connection') || message.includes('timeout')) {\n      return ErrorCategory.NETWORK;\n    }\n    \n    if (message.includes('config') || message.includes('configuration')) {\n      return ErrorCategory.CONFIG;\n    }\n    \n    if (name.includes('system') || message.includes('system')) {\n      return ErrorCategory.SYSTEM;\n    }\n    \n    if (error.stack?.includes('user') || message.includes('user')) {\n      return ErrorCategory.USER;\n    }\n    \n    return ErrorCategory.INTERNAL;\n  }\n\n  /**\n   * Assess error severity\n   */\n  private assessSeverity(error: Error, category: ErrorCategory): ErrorSeverity {\n    // Critical errors that should stop execution\n    if (category === ErrorCategory.SYSTEM || error.name === 'FatalError') {\n      return ErrorSeverity.CRITICAL;\n    }\n    \n    // High severity errors\n    if (category === ErrorCategory.PERMISSION || category === ErrorCategory.CONFIG) {\n      return ErrorSeverity.HIGH;\n    }\n    \n    // Medium severity errors\n    if (category === ErrorCategory.NETWORK || category === ErrorCategory.EXECUTION) {\n      return ErrorSeverity.MEDIUM;\n    }\n    \n    // Low severity errors (validation, user errors)\n    return ErrorSeverity.LOW;\n  }\n\n  /**\n   * Generate helpful suggestions\n   */\n  private generateSuggestions(error: Error, category: ErrorCategory): string[] {\n    const suggestions: string[] = [];\n    const message = error.message.toLowerCase();\n    \n    switch (category) {\n      case ErrorCategory.VALIDATION:\n        suggestions.push('Check your command arguments and flags');\n        suggestions.push('Use --help to see usage information');\n        break;\n        \n      case ErrorCategory.PERMISSION:\n        suggestions.push('Check file/directory permissions');\n        suggestions.push('Try running with appropriate privileges');\n        break;\n        \n      case ErrorCategory.NETWORK:\n        suggestions.push('Check your internet connection');\n        suggestions.push('Verify the service endpoint is accessible');\n        suggestions.push('Try again in a few moments');\n        break;\n        \n      case ErrorCategory.CONFIG:\n        suggestions.push('Check your configuration file');\n        suggestions.push('Reset to default configuration if needed');\n        break;\n        \n      case ErrorCategory.SYSTEM:\n        suggestions.push('Check system resources (disk space, memory)');\n        suggestions.push('Verify system dependencies are installed');\n        break;\n    }\n    \n    // Specific message-based suggestions\n    if (message.includes('command not found')) {\n      suggestions.push('Check if the command is installed and in PATH');\n    }\n    \n    if (message.includes('no such file')) {\n      suggestions.push('Verify the file path exists');\n    }\n    \n    return suggestions;\n  }\n\n  /**\n   * Check if error is recoverable\n   */\n  private isRecoverable(error: Error, category: ErrorCategory): boolean {\n    return [\n      ErrorCategory.VALIDATION,\n      ErrorCategory.USER,\n      ErrorCategory.NETWORK\n    ].includes(category);\n  }\n\n  /**\n   * Display error to user\n   */\n  private displayError(errorInfo: ErrorInfo): void {\n    const { error, category, severity, suggestions } = errorInfo;\n    \n    // Main error message\n    const severityColor = this.getSeverityColor(severity);\n    const categoryText = category.toUpperCase();\n    \n    console.error();\n    console.error(severityColor(`${categoryText} ERROR:`), error.message);\n    \n    // Stack trace in debug mode\n    if (this.config.debug && error.stack) {\n      console.error();\n      console.error(chalk.gray('Stack trace:'));\n      console.error(chalk.gray(error.stack));\n    }\n    \n    // Context information in verbose mode\n    if (this.config.verbose && errorInfo.context) {\n      console.error();\n      console.error(chalk.gray('Context:'));\n      console.error(chalk.gray(`Args: ${errorInfo.context.args.join(' ')}`));\n      console.error(chalk.gray(`Flags: ${JSON.stringify(errorInfo.context.flags)}`));\n      console.error(chalk.gray(`Input: ${errorInfo.context.input.join(' ')}`));\n    }\n    \n    // Suggestions\n    if (this.config.showSuggestions && suggestions && suggestions.length > 0) {\n      console.error();\n      console.error(chalk.yellow('Suggestions:'));\n      for (const suggestion of suggestions) {\n        console.error(chalk.yellow(`  \u2022 ${suggestion}`));\n      }\n    }\n    \n    console.error();\n  }\n\n  /**\n   * Get color for severity level\n   */\n  private getSeverityColor(severity: ErrorSeverity): (text: string) => string {\n    if (!this.config.colors) {\n      return (text: string) => text;\n    }\n    \n    switch (severity) {\n      case ErrorSeverity.CRITICAL:\n        return chalk.red.bold;\n      case ErrorSeverity.HIGH:\n        return chalk.red;\n      case ErrorSeverity.MEDIUM:\n        return chalk.yellow;\n      case ErrorSeverity.LOW:\n        return chalk.blue;\n      default:\n        return chalk.gray;\n    }\n  }\n\n  /**\n   * Get appropriate exit code for error\n   */\n  private getExitCode(error: Error): number {\n    if (error.message.includes('permission')) return 126;\n    if (error.message.includes('command not found')) return 127;\n    if (error.message.includes('invalid argument')) return 128;\n    return 1;\n  }\n\n  /**\n   * Add error to internal log\n   */\n  private addToLog(errorInfo: ErrorInfo): void {\n    this.errorLog.push(errorInfo);\n    \n    // Trim log if too large\n    if (this.errorLog.length > this.maxLogEntries) {\n      this.errorLog = this.errorLog.slice(-this.maxLogEntries);\n    }\n  }\n\n  /**\n   * Report error to log file or external service\n   */\n  private async reportError(errorInfo: ErrorInfo): Promise<void> {\n    try {\n      const report = this.formatErrorReport(errorInfo);\n      \n      if (this.config.reporting.logFile) {\n        await this.writeToLogFile(report);\n      }\n    } catch (reportingError) {\n      // Don't throw errors during error reporting\n      console.error('Failed to report error:', reportingError);\n    }\n  }\n\n  /**\n   * Format error report\n   */\n  private formatErrorReport(errorInfo: ErrorInfo): string {\n    const report: Record<string, unknown> = {\n      timestamp: new Date(errorInfo.timestamp).toISOString(),\n      category: errorInfo.category,\n      severity: errorInfo.severity,\n      message: errorInfo.error.message,\n      name: errorInfo.error.name\n    };\n    \n    if (this.config.reporting.includeStack && errorInfo.stack) {\n      report.stack = errorInfo.stack;\n    }\n    \n    if (this.config.reporting.includeContext && errorInfo.context) {\n      report.context = {\n        args: errorInfo.context.args,\n        flags: errorInfo.context.flags,\n        inputLength: errorInfo.context.input.length\n      };\n    }\n    \n    if (this.config.reporting.includeEnvironment) {\n      report.environment = {\n        nodeVersion: process.version,\n        platform: process.platform,\n        arch: process.arch\n      };\n    }\n    \n    if (errorInfo.metadata) {\n      report.metadata = errorInfo.metadata;\n    }\n    \n    return JSON.stringify(report, null, 2);\n  }\n\n  /**\n   * Write error report to log file\n   */\n  private async writeToLogFile(report: string): Promise<void> {\n    const logFile = this.config.reporting.logFile || join(homedir(), '.claude-zen-errors.log');\n    const timestamp = new Date().toISOString();\n    const logEntry = `\\\\n--- ${timestamp} ---\\\\n${report}\\\\n`;\n    \n    await writeFile(logFile, logEntry, { flag: 'a' });\n  }\n\n  /**\n   * Get error statistics\n   */\n  getErrorStats(): {\n    total: number;\n    byCategory: Record<ErrorCategory, number>;\n    bySeverity: Record<ErrorSeverity, number>;\n    recent: ErrorInfo[];\n  } {\n    const stats = {\n      total: this.errorLog.length,\n      byCategory: {} as Record<ErrorCategory, number>,\n      bySeverity: {} as Record<ErrorSeverity, number>,\n      recent: this.errorLog.slice(-10)\n    };\n    \n    // Initialize counters\n    Object.values(ErrorCategory).forEach(category => {\n      stats.byCategory[category] = 0;\n    });\n    \n    Object.values(ErrorSeverity).forEach(severity => {\n      stats.bySeverity[severity] = 0;\n    });\n    \n    // Count errors\n    for (const errorInfo of this.errorLog) {\n      stats.byCategory[errorInfo.category]++;\n      stats.bySeverity[errorInfo.severity]++;\n    }\n    \n    return stats;\n  }\n\n  /**\n   * Clear error log\n   */\n  clearLog(): void {\n    this.errorLog.length = 0;\n  }\n\n  /**\n   * Update configuration\n   */\n  updateConfig(config: Partial<ErrorHandlerConfig>): void {\n    this.config = { ...this.config, ...config };\n  }\n\n  /**\n   * Get current configuration\n   */\n  getConfig(): ErrorHandlerConfig {\n    return { ...this.config };\n  }\n}"],
      version: 3
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "c607feebf6f530520cd59aaa64dbaf3903fbafb1"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_298oho3wwc = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_298oho3wwc();
/**
 * Error Handler
 *
 * Global error handling system for the CLI application.
 * Provides error formatting, debugging support, and error reporting.
 */
import { writeFile } from 'fs/promises';
import { join } from 'path';
import { homedir } from 'os';
import chalk from 'chalk';
/**
 * Error severity levels
 */
export var ErrorSeverity;
/* istanbul ignore next */
cov_298oho3wwc().s[0]++;
(function (ErrorSeverity) {
  /* istanbul ignore next */
  cov_298oho3wwc().f[0]++;
  cov_298oho3wwc().s[1]++;
  ErrorSeverity["LOW"] = "low";
  /* istanbul ignore next */
  cov_298oho3wwc().s[2]++;
  ErrorSeverity["MEDIUM"] = "medium";
  /* istanbul ignore next */
  cov_298oho3wwc().s[3]++;
  ErrorSeverity["HIGH"] = "high";
  /* istanbul ignore next */
  cov_298oho3wwc().s[4]++;
  ErrorSeverity["CRITICAL"] = "critical";
})(
/* istanbul ignore next */
(cov_298oho3wwc().b[0][0]++, ErrorSeverity) ||
/* istanbul ignore next */
(cov_298oho3wwc().b[0][1]++, ErrorSeverity = {}));
/**
 * Error categories
 */
export var ErrorCategory;
/* istanbul ignore next */
cov_298oho3wwc().s[5]++;
(function (ErrorCategory) {
  /* istanbul ignore next */
  cov_298oho3wwc().f[1]++;
  cov_298oho3wwc().s[6]++;
  ErrorCategory["VALIDATION"] = "validation";
  /* istanbul ignore next */
  cov_298oho3wwc().s[7]++;
  ErrorCategory["EXECUTION"] = "execution";
  /* istanbul ignore next */
  cov_298oho3wwc().s[8]++;
  ErrorCategory["SYSTEM"] = "system";
  /* istanbul ignore next */
  cov_298oho3wwc().s[9]++;
  ErrorCategory["NETWORK"] = "network";
  /* istanbul ignore next */
  cov_298oho3wwc().s[10]++;
  ErrorCategory["PERMISSION"] = "permission";
  /* istanbul ignore next */
  cov_298oho3wwc().s[11]++;
  ErrorCategory["CONFIG"] = "config";
  /* istanbul ignore next */
  cov_298oho3wwc().s[12]++;
  ErrorCategory["USER"] = "user";
  /* istanbul ignore next */
  cov_298oho3wwc().s[13]++;
  ErrorCategory["INTERNAL"] = "internal";
})(
/* istanbul ignore next */
(cov_298oho3wwc().b[1][0]++, ErrorCategory) ||
/* istanbul ignore next */
(cov_298oho3wwc().b[1][1]++, ErrorCategory = {}));
/**
 * Global error handler for CLI application
 */
export class ErrorHandler {
  static instance;
  config;
  errorLog =
  /* istanbul ignore next */
  (cov_298oho3wwc().s[14]++, []);
  maxLogEntries =
  /* istanbul ignore next */
  (cov_298oho3wwc().s[15]++, 1000);
  constructor(config =
  /* istanbul ignore next */
  (cov_298oho3wwc().b[2][0]++, {})) {
    /* istanbul ignore next */
    cov_298oho3wwc().f[2]++;
    cov_298oho3wwc().s[16]++;
    this.config = {
      debug: false,
      verbose: false,
      colors: true,
      exitOnCritical: true,
      showSuggestions: true,
      reporting: {
        enabled: true,
        includeStack: true,
        includeContext: false,
        includeEnvironment: false,
        maxLogSize: 10 * 1024 * 1024,
        // 10MB
        anonymize: true
      },
      ...config
    };
  }
  /**
   * Get singleton instance
   */
  static getInstance(config) {
    /* istanbul ignore next */
    cov_298oho3wwc().f[3]++;
    cov_298oho3wwc().s[17]++;
    if (!ErrorHandler.instance) {
      /* istanbul ignore next */
      cov_298oho3wwc().b[3][0]++;
      cov_298oho3wwc().s[18]++;
      ErrorHandler.instance = new ErrorHandler(config);
    } else
    /* istanbul ignore next */
    {
      cov_298oho3wwc().b[3][1]++;
    }
    cov_298oho3wwc().s[19]++;
    return ErrorHandler.instance;
  }
  /**
   * Handle an error with full context
   */
  async handle(error, context, metadata) {
    /* istanbul ignore next */
    cov_298oho3wwc().f[4]++;
    const errorInfo =
    /* istanbul ignore next */
    (cov_298oho3wwc().s[20]++, this.analyzeError(error, context, metadata));
    // Add to error log
    /* istanbul ignore next */
    cov_298oho3wwc().s[21]++;
    this.addToLog(errorInfo);
    // Display error to user
    /* istanbul ignore next */
    cov_298oho3wwc().s[22]++;
    this.displayError(errorInfo);
    // Report error if enabled
    /* istanbul ignore next */
    cov_298oho3wwc().s[23]++;
    if (this.config.reporting.enabled) {
      /* istanbul ignore next */
      cov_298oho3wwc().b[4][0]++;
      cov_298oho3wwc().s[24]++;
      await this.reportError(errorInfo);
    } else
    /* istanbul ignore next */
    {
      cov_298oho3wwc().b[4][1]++;
    }
    // Exit on critical errors if configured
    cov_298oho3wwc().s[25]++;
    if (
    /* istanbul ignore next */
    (cov_298oho3wwc().b[6][0]++, this.config.exitOnCritical) &&
    /* istanbul ignore next */
    (cov_298oho3wwc().b[6][1]++, errorInfo.severity === ErrorSeverity.CRITICAL)) {
      /* istanbul ignore next */
      cov_298oho3wwc().b[5][0]++;
      cov_298oho3wwc().s[26]++;
      process.exit(1);
    } else
    /* istanbul ignore next */
    {
      cov_298oho3wwc().b[5][1]++;
    }
  }
  /**
   * Handle command execution errors
   */
  async handleCommandError(error, commandName, context) {
    /* istanbul ignore next */
    cov_298oho3wwc().f[5]++;
    const metadata =
    /* istanbul ignore next */
    (cov_298oho3wwc().s[27]++, {
      command: commandName
    });
    /* istanbul ignore next */
    cov_298oho3wwc().s[28]++;
    await this.handle(error, context, metadata);
    /* istanbul ignore next */
    cov_298oho3wwc().s[29]++;
    return {
      success: false,
      error: error.message,
      exitCode: this.getExitCode(error),
      executionTime: 0
    };
  }
  /**
   * Handle unhandled promise rejections
   */
  handleUnhandledRejection(reason, promise) {
    /* istanbul ignore next */
    cov_298oho3wwc().f[6]++;
    const error =
    /* istanbul ignore next */
    (cov_298oho3wwc().s[30]++, reason instanceof Error ?
    /* istanbul ignore next */
    (cov_298oho3wwc().b[7][0]++, reason) :
    /* istanbul ignore next */
    (cov_298oho3wwc().b[7][1]++, new Error(String(reason))));
    const metadata =
    /* istanbul ignore next */
    (cov_298oho3wwc().s[31]++, {
      unhandledRejection: true,
      promise: promise.toString()
    });
    /* istanbul ignore next */
    cov_298oho3wwc().s[32]++;
    this.handle(error, undefined, metadata).catch(console.error);
  }
  /**
   * Handle uncaught exceptions
   */
  handleUncaughtException(error) {
    /* istanbul ignore next */
    cov_298oho3wwc().f[7]++;
    const metadata =
    /* istanbul ignore next */
    (cov_298oho3wwc().s[33]++, {
      uncaughtException: true
    });
    /* istanbul ignore next */
    cov_298oho3wwc().s[34]++;
    this.handle(error, undefined, metadata).catch(console.error);
    // Always exit on uncaught exceptions
    /* istanbul ignore next */
    cov_298oho3wwc().s[35]++;
    process.exit(1);
  }
  /**
   * Setup global error handlers
   */
  setupGlobalHandlers() {
    /* istanbul ignore next */
    cov_298oho3wwc().f[8]++;
    cov_298oho3wwc().s[36]++;
    process.on('unhandledRejection', (reason, promise) => {
      /* istanbul ignore next */
      cov_298oho3wwc().f[9]++;
      cov_298oho3wwc().s[37]++;
      this.handleUnhandledRejection(reason, promise);
    });
    /* istanbul ignore next */
    cov_298oho3wwc().s[38]++;
    process.on('uncaughtException', error => {
      /* istanbul ignore next */
      cov_298oho3wwc().f[10]++;
      cov_298oho3wwc().s[39]++;
      this.handleUncaughtException(error);
    });
  }
  /**
   * Analyze error and extract information
   */
  analyzeError(error, context, metadata) {
    /* istanbul ignore next */
    cov_298oho3wwc().f[11]++;
    const category =
    /* istanbul ignore next */
    (cov_298oho3wwc().s[40]++, this.categorizeError(error));
    const severity =
    /* istanbul ignore next */
    (cov_298oho3wwc().s[41]++, this.assessSeverity(error, category));
    const suggestions =
    /* istanbul ignore next */
    (cov_298oho3wwc().s[42]++, this.generateSuggestions(error, category));
    /* istanbul ignore next */
    cov_298oho3wwc().s[43]++;
    return {
      error,
      context,
      category,
      severity,
      timestamp: Date.now(),
      stack: error.stack,
      metadata,
      suggestions,
      recoverable: this.isRecoverable(error, category)
    };
  }
  /**
   * Categorize error type
   */
  categorizeError(error) {
    /* istanbul ignore next */
    cov_298oho3wwc().f[12]++;
    const message =
    /* istanbul ignore next */
    (cov_298oho3wwc().s[44]++, error.message.toLowerCase());
    const name =
    /* istanbul ignore next */
    (cov_298oho3wwc().s[45]++, error.name.toLowerCase());
    /* istanbul ignore next */
    cov_298oho3wwc().s[46]++;
    if (
    /* istanbul ignore next */
    (cov_298oho3wwc().b[9][0]++, name.includes('validation')) ||
    /* istanbul ignore next */
    (cov_298oho3wwc().b[9][1]++, message.includes('invalid')) ||
    /* istanbul ignore next */
    (cov_298oho3wwc().b[9][2]++, message.includes('required'))) {
      /* istanbul ignore next */
      cov_298oho3wwc().b[8][0]++;
      cov_298oho3wwc().s[47]++;
      return ErrorCategory.VALIDATION;
    } else
    /* istanbul ignore next */
    {
      cov_298oho3wwc().b[8][1]++;
    }
    cov_298oho3wwc().s[48]++;
    if (
    /* istanbul ignore next */
    (cov_298oho3wwc().b[11][0]++, message.includes('permission')) ||
    /* istanbul ignore next */
    (cov_298oho3wwc().b[11][1]++, message.includes('access')) ||
    /* istanbul ignore next */
    (cov_298oho3wwc().b[11][2]++, name.includes('permission'))) {
      /* istanbul ignore next */
      cov_298oho3wwc().b[10][0]++;
      cov_298oho3wwc().s[49]++;
      return ErrorCategory.PERMISSION;
    } else
    /* istanbul ignore next */
    {
      cov_298oho3wwc().b[10][1]++;
    }
    cov_298oho3wwc().s[50]++;
    if (
    /* istanbul ignore next */
    (cov_298oho3wwc().b[13][0]++, message.includes('network')) ||
    /* istanbul ignore next */
    (cov_298oho3wwc().b[13][1]++, message.includes('connection')) ||
    /* istanbul ignore next */
    (cov_298oho3wwc().b[13][2]++, message.includes('timeout'))) {
      /* istanbul ignore next */
      cov_298oho3wwc().b[12][0]++;
      cov_298oho3wwc().s[51]++;
      return ErrorCategory.NETWORK;
    } else
    /* istanbul ignore next */
    {
      cov_298oho3wwc().b[12][1]++;
    }
    cov_298oho3wwc().s[52]++;
    if (
    /* istanbul ignore next */
    (cov_298oho3wwc().b[15][0]++, message.includes('config')) ||
    /* istanbul ignore next */
    (cov_298oho3wwc().b[15][1]++, message.includes('configuration'))) {
      /* istanbul ignore next */
      cov_298oho3wwc().b[14][0]++;
      cov_298oho3wwc().s[53]++;
      return ErrorCategory.CONFIG;
    } else
    /* istanbul ignore next */
    {
      cov_298oho3wwc().b[14][1]++;
    }
    cov_298oho3wwc().s[54]++;
    if (
    /* istanbul ignore next */
    (cov_298oho3wwc().b[17][0]++, name.includes('system')) ||
    /* istanbul ignore next */
    (cov_298oho3wwc().b[17][1]++, message.includes('system'))) {
      /* istanbul ignore next */
      cov_298oho3wwc().b[16][0]++;
      cov_298oho3wwc().s[55]++;
      return ErrorCategory.SYSTEM;
    } else
    /* istanbul ignore next */
    {
      cov_298oho3wwc().b[16][1]++;
    }
    cov_298oho3wwc().s[56]++;
    if (
    /* istanbul ignore next */
    (cov_298oho3wwc().b[19][0]++, error.stack?.includes('user')) ||
    /* istanbul ignore next */
    (cov_298oho3wwc().b[19][1]++, message.includes('user'))) {
      /* istanbul ignore next */
      cov_298oho3wwc().b[18][0]++;
      cov_298oho3wwc().s[57]++;
      return ErrorCategory.USER;
    } else
    /* istanbul ignore next */
    {
      cov_298oho3wwc().b[18][1]++;
    }
    cov_298oho3wwc().s[58]++;
    return ErrorCategory.INTERNAL;
  }
  /**
   * Assess error severity
   */
  assessSeverity(error, category) {
    /* istanbul ignore next */
    cov_298oho3wwc().f[13]++;
    cov_298oho3wwc().s[59]++;
    // Critical errors that should stop execution
    if (
    /* istanbul ignore next */
    (cov_298oho3wwc().b[21][0]++, category === ErrorCategory.SYSTEM) ||
    /* istanbul ignore next */
    (cov_298oho3wwc().b[21][1]++, error.name === 'FatalError')) {
      /* istanbul ignore next */
      cov_298oho3wwc().b[20][0]++;
      cov_298oho3wwc().s[60]++;
      return ErrorSeverity.CRITICAL;
    } else
    /* istanbul ignore next */
    {
      cov_298oho3wwc().b[20][1]++;
    }
    // High severity errors
    cov_298oho3wwc().s[61]++;
    if (
    /* istanbul ignore next */
    (cov_298oho3wwc().b[23][0]++, category === ErrorCategory.PERMISSION) ||
    /* istanbul ignore next */
    (cov_298oho3wwc().b[23][1]++, category === ErrorCategory.CONFIG)) {
      /* istanbul ignore next */
      cov_298oho3wwc().b[22][0]++;
      cov_298oho3wwc().s[62]++;
      return ErrorSeverity.HIGH;
    } else
    /* istanbul ignore next */
    {
      cov_298oho3wwc().b[22][1]++;
    }
    // Medium severity errors
    cov_298oho3wwc().s[63]++;
    if (
    /* istanbul ignore next */
    (cov_298oho3wwc().b[25][0]++, category === ErrorCategory.NETWORK) ||
    /* istanbul ignore next */
    (cov_298oho3wwc().b[25][1]++, category === ErrorCategory.EXECUTION)) {
      /* istanbul ignore next */
      cov_298oho3wwc().b[24][0]++;
      cov_298oho3wwc().s[64]++;
      return ErrorSeverity.MEDIUM;
    } else
    /* istanbul ignore next */
    {
      cov_298oho3wwc().b[24][1]++;
    }
    // Low severity errors (validation, user errors)
    cov_298oho3wwc().s[65]++;
    return ErrorSeverity.LOW;
  }
  /**
   * Generate helpful suggestions
   */
  generateSuggestions(error, category) {
    /* istanbul ignore next */
    cov_298oho3wwc().f[14]++;
    const suggestions =
    /* istanbul ignore next */
    (cov_298oho3wwc().s[66]++, []);
    const message =
    /* istanbul ignore next */
    (cov_298oho3wwc().s[67]++, error.message.toLowerCase());
    /* istanbul ignore next */
    cov_298oho3wwc().s[68]++;
    switch (category) {
      case ErrorCategory.VALIDATION:
        /* istanbul ignore next */
        cov_298oho3wwc().b[26][0]++;
        cov_298oho3wwc().s[69]++;
        suggestions.push('Check your command arguments and flags');
        /* istanbul ignore next */
        cov_298oho3wwc().s[70]++;
        suggestions.push('Use --help to see usage information');
        /* istanbul ignore next */
        cov_298oho3wwc().s[71]++;
        break;
      case ErrorCategory.PERMISSION:
        /* istanbul ignore next */
        cov_298oho3wwc().b[26][1]++;
        cov_298oho3wwc().s[72]++;
        suggestions.push('Check file/directory permissions');
        /* istanbul ignore next */
        cov_298oho3wwc().s[73]++;
        suggestions.push('Try running with appropriate privileges');
        /* istanbul ignore next */
        cov_298oho3wwc().s[74]++;
        break;
      case ErrorCategory.NETWORK:
        /* istanbul ignore next */
        cov_298oho3wwc().b[26][2]++;
        cov_298oho3wwc().s[75]++;
        suggestions.push('Check your internet connection');
        /* istanbul ignore next */
        cov_298oho3wwc().s[76]++;
        suggestions.push('Verify the service endpoint is accessible');
        /* istanbul ignore next */
        cov_298oho3wwc().s[77]++;
        suggestions.push('Try again in a few moments');
        /* istanbul ignore next */
        cov_298oho3wwc().s[78]++;
        break;
      case ErrorCategory.CONFIG:
        /* istanbul ignore next */
        cov_298oho3wwc().b[26][3]++;
        cov_298oho3wwc().s[79]++;
        suggestions.push('Check your configuration file');
        /* istanbul ignore next */
        cov_298oho3wwc().s[80]++;
        suggestions.push('Reset to default configuration if needed');
        /* istanbul ignore next */
        cov_298oho3wwc().s[81]++;
        break;
      case ErrorCategory.SYSTEM:
        /* istanbul ignore next */
        cov_298oho3wwc().b[26][4]++;
        cov_298oho3wwc().s[82]++;
        suggestions.push('Check system resources (disk space, memory)');
        /* istanbul ignore next */
        cov_298oho3wwc().s[83]++;
        suggestions.push('Verify system dependencies are installed');
        /* istanbul ignore next */
        cov_298oho3wwc().s[84]++;
        break;
    }
    // Specific message-based suggestions
    /* istanbul ignore next */
    cov_298oho3wwc().s[85]++;
    if (message.includes('command not found')) {
      /* istanbul ignore next */
      cov_298oho3wwc().b[27][0]++;
      cov_298oho3wwc().s[86]++;
      suggestions.push('Check if the command is installed and in PATH');
    } else
    /* istanbul ignore next */
    {
      cov_298oho3wwc().b[27][1]++;
    }
    cov_298oho3wwc().s[87]++;
    if (message.includes('no such file')) {
      /* istanbul ignore next */
      cov_298oho3wwc().b[28][0]++;
      cov_298oho3wwc().s[88]++;
      suggestions.push('Verify the file path exists');
    } else
    /* istanbul ignore next */
    {
      cov_298oho3wwc().b[28][1]++;
    }
    cov_298oho3wwc().s[89]++;
    return suggestions;
  }
  /**
   * Check if error is recoverable
   */
  isRecoverable(error, category) {
    /* istanbul ignore next */
    cov_298oho3wwc().f[15]++;
    cov_298oho3wwc().s[90]++;
    return [ErrorCategory.VALIDATION, ErrorCategory.USER, ErrorCategory.NETWORK].includes(category);
  }
  /**
   * Display error to user
   */
  displayError(errorInfo) {
    /* istanbul ignore next */
    cov_298oho3wwc().f[16]++;
    const {
      error,
      category,
      severity,
      suggestions
    } =
    /* istanbul ignore next */
    (cov_298oho3wwc().s[91]++, errorInfo);
    // Main error message
    const severityColor =
    /* istanbul ignore next */
    (cov_298oho3wwc().s[92]++, this.getSeverityColor(severity));
    const categoryText =
    /* istanbul ignore next */
    (cov_298oho3wwc().s[93]++, category.toUpperCase());
    /* istanbul ignore next */
    cov_298oho3wwc().s[94]++;
    console.error();
    /* istanbul ignore next */
    cov_298oho3wwc().s[95]++;
    console.error(severityColor(`${categoryText} ERROR:`), error.message);
    // Stack trace in debug mode
    /* istanbul ignore next */
    cov_298oho3wwc().s[96]++;
    if (
    /* istanbul ignore next */
    (cov_298oho3wwc().b[30][0]++, this.config.debug) &&
    /* istanbul ignore next */
    (cov_298oho3wwc().b[30][1]++, error.stack)) {
      /* istanbul ignore next */
      cov_298oho3wwc().b[29][0]++;
      cov_298oho3wwc().s[97]++;
      console.error();
      /* istanbul ignore next */
      cov_298oho3wwc().s[98]++;
      console.error(chalk.gray('Stack trace:'));
      /* istanbul ignore next */
      cov_298oho3wwc().s[99]++;
      console.error(chalk.gray(error.stack));
    } else
    /* istanbul ignore next */
    {
      cov_298oho3wwc().b[29][1]++;
    }
    // Context information in verbose mode
    cov_298oho3wwc().s[100]++;
    if (
    /* istanbul ignore next */
    (cov_298oho3wwc().b[32][0]++, this.config.verbose) &&
    /* istanbul ignore next */
    (cov_298oho3wwc().b[32][1]++, errorInfo.context)) {
      /* istanbul ignore next */
      cov_298oho3wwc().b[31][0]++;
      cov_298oho3wwc().s[101]++;
      console.error();
      /* istanbul ignore next */
      cov_298oho3wwc().s[102]++;
      console.error(chalk.gray('Context:'));
      /* istanbul ignore next */
      cov_298oho3wwc().s[103]++;
      console.error(chalk.gray(`Args: ${errorInfo.context.args.join(' ')}`));
      /* istanbul ignore next */
      cov_298oho3wwc().s[104]++;
      console.error(chalk.gray(`Flags: ${JSON.stringify(errorInfo.context.flags)}`));
      /* istanbul ignore next */
      cov_298oho3wwc().s[105]++;
      console.error(chalk.gray(`Input: ${errorInfo.context.input.join(' ')}`));
    } else
    /* istanbul ignore next */
    {
      cov_298oho3wwc().b[31][1]++;
    }
    // Suggestions
    cov_298oho3wwc().s[106]++;
    if (
    /* istanbul ignore next */
    (cov_298oho3wwc().b[34][0]++, this.config.showSuggestions) &&
    /* istanbul ignore next */
    (cov_298oho3wwc().b[34][1]++, suggestions) &&
    /* istanbul ignore next */
    (cov_298oho3wwc().b[34][2]++, suggestions.length > 0)) {
      /* istanbul ignore next */
      cov_298oho3wwc().b[33][0]++;
      cov_298oho3wwc().s[107]++;
      console.error();
      /* istanbul ignore next */
      cov_298oho3wwc().s[108]++;
      console.error(chalk.yellow('Suggestions:'));
      /* istanbul ignore next */
      cov_298oho3wwc().s[109]++;
      for (const suggestion of suggestions) {
        /* istanbul ignore next */
        cov_298oho3wwc().s[110]++;
        console.error(chalk.yellow(`  • ${suggestion}`));
      }
    } else
    /* istanbul ignore next */
    {
      cov_298oho3wwc().b[33][1]++;
    }
    cov_298oho3wwc().s[111]++;
    console.error();
  }
  /**
   * Get color for severity level
   */
  getSeverityColor(severity) {
    /* istanbul ignore next */
    cov_298oho3wwc().f[17]++;
    cov_298oho3wwc().s[112]++;
    if (!this.config.colors) {
      /* istanbul ignore next */
      cov_298oho3wwc().b[35][0]++;
      cov_298oho3wwc().s[113]++;
      return text => {
        /* istanbul ignore next */
        cov_298oho3wwc().f[18]++;
        cov_298oho3wwc().s[114]++;
        return text;
      };
    } else
    /* istanbul ignore next */
    {
      cov_298oho3wwc().b[35][1]++;
    }
    cov_298oho3wwc().s[115]++;
    switch (severity) {
      case ErrorSeverity.CRITICAL:
        /* istanbul ignore next */
        cov_298oho3wwc().b[36][0]++;
        cov_298oho3wwc().s[116]++;
        return chalk.red.bold;
      case ErrorSeverity.HIGH:
        /* istanbul ignore next */
        cov_298oho3wwc().b[36][1]++;
        cov_298oho3wwc().s[117]++;
        return chalk.red;
      case ErrorSeverity.MEDIUM:
        /* istanbul ignore next */
        cov_298oho3wwc().b[36][2]++;
        cov_298oho3wwc().s[118]++;
        return chalk.yellow;
      case ErrorSeverity.LOW:
        /* istanbul ignore next */
        cov_298oho3wwc().b[36][3]++;
        cov_298oho3wwc().s[119]++;
        return chalk.blue;
      default:
        /* istanbul ignore next */
        cov_298oho3wwc().b[36][4]++;
        cov_298oho3wwc().s[120]++;
        return chalk.gray;
    }
  }
  /**
   * Get appropriate exit code for error
   */
  getExitCode(error) {
    /* istanbul ignore next */
    cov_298oho3wwc().f[19]++;
    cov_298oho3wwc().s[121]++;
    if (error.message.includes('permission')) {
      /* istanbul ignore next */
      cov_298oho3wwc().b[37][0]++;
      cov_298oho3wwc().s[122]++;
      return 126;
    } else
    /* istanbul ignore next */
    {
      cov_298oho3wwc().b[37][1]++;
    }
    cov_298oho3wwc().s[123]++;
    if (error.message.includes('command not found')) {
      /* istanbul ignore next */
      cov_298oho3wwc().b[38][0]++;
      cov_298oho3wwc().s[124]++;
      return 127;
    } else
    /* istanbul ignore next */
    {
      cov_298oho3wwc().b[38][1]++;
    }
    cov_298oho3wwc().s[125]++;
    if (error.message.includes('invalid argument')) {
      /* istanbul ignore next */
      cov_298oho3wwc().b[39][0]++;
      cov_298oho3wwc().s[126]++;
      return 128;
    } else
    /* istanbul ignore next */
    {
      cov_298oho3wwc().b[39][1]++;
    }
    cov_298oho3wwc().s[127]++;
    return 1;
  }
  /**
   * Add error to internal log
   */
  addToLog(errorInfo) {
    /* istanbul ignore next */
    cov_298oho3wwc().f[20]++;
    cov_298oho3wwc().s[128]++;
    this.errorLog.push(errorInfo);
    // Trim log if too large
    /* istanbul ignore next */
    cov_298oho3wwc().s[129]++;
    if (this.errorLog.length > this.maxLogEntries) {
      /* istanbul ignore next */
      cov_298oho3wwc().b[40][0]++;
      cov_298oho3wwc().s[130]++;
      this.errorLog = this.errorLog.slice(-this.maxLogEntries);
    } else
    /* istanbul ignore next */
    {
      cov_298oho3wwc().b[40][1]++;
    }
  }
  /**
   * Report error to log file or external service
   */
  async reportError(errorInfo) {
    /* istanbul ignore next */
    cov_298oho3wwc().f[21]++;
    cov_298oho3wwc().s[131]++;
    try {
      const report =
      /* istanbul ignore next */
      (cov_298oho3wwc().s[132]++, this.formatErrorReport(errorInfo));
      /* istanbul ignore next */
      cov_298oho3wwc().s[133]++;
      if (this.config.reporting.logFile) {
        /* istanbul ignore next */
        cov_298oho3wwc().b[41][0]++;
        cov_298oho3wwc().s[134]++;
        await this.writeToLogFile(report);
      } else
      /* istanbul ignore next */
      {
        cov_298oho3wwc().b[41][1]++;
      }
    } catch (reportingError) {
      /* istanbul ignore next */
      cov_298oho3wwc().s[135]++;
      // Don't throw errors during error reporting
      console.error('Failed to report error:', reportingError);
    }
  }
  /**
   * Format error report
   */
  formatErrorReport(errorInfo) {
    /* istanbul ignore next */
    cov_298oho3wwc().f[22]++;
    const report =
    /* istanbul ignore next */
    (cov_298oho3wwc().s[136]++, {
      timestamp: new Date(errorInfo.timestamp).toISOString(),
      category: errorInfo.category,
      severity: errorInfo.severity,
      message: errorInfo.error.message,
      name: errorInfo.error.name
    });
    /* istanbul ignore next */
    cov_298oho3wwc().s[137]++;
    if (
    /* istanbul ignore next */
    (cov_298oho3wwc().b[43][0]++, this.config.reporting.includeStack) &&
    /* istanbul ignore next */
    (cov_298oho3wwc().b[43][1]++, errorInfo.stack)) {
      /* istanbul ignore next */
      cov_298oho3wwc().b[42][0]++;
      cov_298oho3wwc().s[138]++;
      report.stack = errorInfo.stack;
    } else
    /* istanbul ignore next */
    {
      cov_298oho3wwc().b[42][1]++;
    }
    cov_298oho3wwc().s[139]++;
    if (
    /* istanbul ignore next */
    (cov_298oho3wwc().b[45][0]++, this.config.reporting.includeContext) &&
    /* istanbul ignore next */
    (cov_298oho3wwc().b[45][1]++, errorInfo.context)) {
      /* istanbul ignore next */
      cov_298oho3wwc().b[44][0]++;
      cov_298oho3wwc().s[140]++;
      report.context = {
        args: errorInfo.context.args,
        flags: errorInfo.context.flags,
        inputLength: errorInfo.context.input.length
      };
    } else
    /* istanbul ignore next */
    {
      cov_298oho3wwc().b[44][1]++;
    }
    cov_298oho3wwc().s[141]++;
    if (this.config.reporting.includeEnvironment) {
      /* istanbul ignore next */
      cov_298oho3wwc().b[46][0]++;
      cov_298oho3wwc().s[142]++;
      report.environment = {
        nodeVersion: process.version,
        platform: process.platform,
        arch: process.arch
      };
    } else
    /* istanbul ignore next */
    {
      cov_298oho3wwc().b[46][1]++;
    }
    cov_298oho3wwc().s[143]++;
    if (errorInfo.metadata) {
      /* istanbul ignore next */
      cov_298oho3wwc().b[47][0]++;
      cov_298oho3wwc().s[144]++;
      report.metadata = errorInfo.metadata;
    } else
    /* istanbul ignore next */
    {
      cov_298oho3wwc().b[47][1]++;
    }
    cov_298oho3wwc().s[145]++;
    return JSON.stringify(report, null, 2);
  }
  /**
   * Write error report to log file
   */
  async writeToLogFile(report) {
    /* istanbul ignore next */
    cov_298oho3wwc().f[23]++;
    const logFile =
    /* istanbul ignore next */
    (cov_298oho3wwc().s[146]++,
    /* istanbul ignore next */
    (cov_298oho3wwc().b[48][0]++, this.config.reporting.logFile) ||
    /* istanbul ignore next */
    (cov_298oho3wwc().b[48][1]++, join(homedir(), '.claude-zen-errors.log')));
    const timestamp =
    /* istanbul ignore next */
    (cov_298oho3wwc().s[147]++, new Date().toISOString());
    const logEntry =
    /* istanbul ignore next */
    (cov_298oho3wwc().s[148]++, `\\n--- ${timestamp} ---\\n${report}\\n`);
    /* istanbul ignore next */
    cov_298oho3wwc().s[149]++;
    await writeFile(logFile, logEntry, {
      flag: 'a'
    });
  }
  /**
   * Get error statistics
   */
  getErrorStats() {
    /* istanbul ignore next */
    cov_298oho3wwc().f[24]++;
    const stats =
    /* istanbul ignore next */
    (cov_298oho3wwc().s[150]++, {
      total: this.errorLog.length,
      byCategory: {},
      bySeverity: {},
      recent: this.errorLog.slice(-10)
    });
    // Initialize counters
    /* istanbul ignore next */
    cov_298oho3wwc().s[151]++;
    Object.values(ErrorCategory).forEach(category => {
      /* istanbul ignore next */
      cov_298oho3wwc().f[25]++;
      cov_298oho3wwc().s[152]++;
      stats.byCategory[category] = 0;
    });
    /* istanbul ignore next */
    cov_298oho3wwc().s[153]++;
    Object.values(ErrorSeverity).forEach(severity => {
      /* istanbul ignore next */
      cov_298oho3wwc().f[26]++;
      cov_298oho3wwc().s[154]++;
      stats.bySeverity[severity] = 0;
    });
    // Count errors
    /* istanbul ignore next */
    cov_298oho3wwc().s[155]++;
    for (const errorInfo of this.errorLog) {
      /* istanbul ignore next */
      cov_298oho3wwc().s[156]++;
      stats.byCategory[errorInfo.category]++;
      /* istanbul ignore next */
      cov_298oho3wwc().s[157]++;
      stats.bySeverity[errorInfo.severity]++;
    }
    /* istanbul ignore next */
    cov_298oho3wwc().s[158]++;
    return stats;
  }
  /**
   * Clear error log
   */
  clearLog() {
    /* istanbul ignore next */
    cov_298oho3wwc().f[27]++;
    cov_298oho3wwc().s[159]++;
    this.errorLog.length = 0;
  }
  /**
   * Update configuration
   */
  updateConfig(config) {
    /* istanbul ignore next */
    cov_298oho3wwc().f[28]++;
    cov_298oho3wwc().s[160]++;
    this.config = {
      ...this.config,
      ...config
    };
  }
  /**
   * Get current configuration
   */
  getConfig() {
    /* istanbul ignore next */
    cov_298oho3wwc().f[29]++;
    cov_298oho3wwc().s[161]++;
    return {
      ...this.config
    };
  }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJjb3ZfMjk4b2hvM3d3YyIsImFjdHVhbENvdmVyYWdlIiwid3JpdGVGaWxlIiwiam9pbiIsImhvbWVkaXIiLCJjaGFsayIsIkVycm9yU2V2ZXJpdHkiLCJzIiwiZiIsImIiLCJFcnJvckNhdGVnb3J5IiwiRXJyb3JIYW5kbGVyIiwiaW5zdGFuY2UiLCJjb25maWciLCJlcnJvckxvZyIsIm1heExvZ0VudHJpZXMiLCJjb25zdHJ1Y3RvciIsImRlYnVnIiwidmVyYm9zZSIsImNvbG9ycyIsImV4aXRPbkNyaXRpY2FsIiwic2hvd1N1Z2dlc3Rpb25zIiwicmVwb3J0aW5nIiwiZW5hYmxlZCIsImluY2x1ZGVTdGFjayIsImluY2x1ZGVDb250ZXh0IiwiaW5jbHVkZUVudmlyb25tZW50IiwibWF4TG9nU2l6ZSIsImFub255bWl6ZSIsImdldEluc3RhbmNlIiwiaGFuZGxlIiwiZXJyb3IiLCJjb250ZXh0IiwibWV0YWRhdGEiLCJlcnJvckluZm8iLCJhbmFseXplRXJyb3IiLCJhZGRUb0xvZyIsImRpc3BsYXlFcnJvciIsInJlcG9ydEVycm9yIiwic2V2ZXJpdHkiLCJDUklUSUNBTCIsInByb2Nlc3MiLCJleGl0IiwiaGFuZGxlQ29tbWFuZEVycm9yIiwiY29tbWFuZE5hbWUiLCJjb21tYW5kIiwic3VjY2VzcyIsIm1lc3NhZ2UiLCJleGl0Q29kZSIsImdldEV4aXRDb2RlIiwiZXhlY3V0aW9uVGltZSIsImhhbmRsZVVuaGFuZGxlZFJlamVjdGlvbiIsInJlYXNvbiIsInByb21pc2UiLCJFcnJvciIsIlN0cmluZyIsInVuaGFuZGxlZFJlamVjdGlvbiIsInRvU3RyaW5nIiwidW5kZWZpbmVkIiwiY2F0Y2giLCJjb25zb2xlIiwiaGFuZGxlVW5jYXVnaHRFeGNlcHRpb24iLCJ1bmNhdWdodEV4Y2VwdGlvbiIsInNldHVwR2xvYmFsSGFuZGxlcnMiLCJvbiIsImNhdGVnb3J5IiwiY2F0ZWdvcml6ZUVycm9yIiwiYXNzZXNzU2V2ZXJpdHkiLCJzdWdnZXN0aW9ucyIsImdlbmVyYXRlU3VnZ2VzdGlvbnMiLCJ0aW1lc3RhbXAiLCJEYXRlIiwibm93Iiwic3RhY2siLCJyZWNvdmVyYWJsZSIsImlzUmVjb3ZlcmFibGUiLCJ0b0xvd2VyQ2FzZSIsIm5hbWUiLCJpbmNsdWRlcyIsIlZBTElEQVRJT04iLCJQRVJNSVNTSU9OIiwiTkVUV09SSyIsIkNPTkZJRyIsIlNZU1RFTSIsIlVTRVIiLCJJTlRFUk5BTCIsIkhJR0giLCJFWEVDVVRJT04iLCJNRURJVU0iLCJMT1ciLCJwdXNoIiwic2V2ZXJpdHlDb2xvciIsImdldFNldmVyaXR5Q29sb3IiLCJjYXRlZ29yeVRleHQiLCJ0b1VwcGVyQ2FzZSIsImdyYXkiLCJhcmdzIiwiSlNPTiIsInN0cmluZ2lmeSIsImZsYWdzIiwiaW5wdXQiLCJsZW5ndGgiLCJ5ZWxsb3ciLCJzdWdnZXN0aW9uIiwidGV4dCIsInJlZCIsImJvbGQiLCJibHVlIiwic2xpY2UiLCJyZXBvcnQiLCJmb3JtYXRFcnJvclJlcG9ydCIsImxvZ0ZpbGUiLCJ3cml0ZVRvTG9nRmlsZSIsInJlcG9ydGluZ0Vycm9yIiwidG9JU09TdHJpbmciLCJpbnB1dExlbmd0aCIsImVudmlyb25tZW50Iiwibm9kZVZlcnNpb24iLCJ2ZXJzaW9uIiwicGxhdGZvcm0iLCJhcmNoIiwibG9nRW50cnkiLCJmbGFnIiwiZ2V0RXJyb3JTdGF0cyIsInN0YXRzIiwidG90YWwiLCJieUNhdGVnb3J5IiwiYnlTZXZlcml0eSIsInJlY2VudCIsIk9iamVjdCIsInZhbHVlcyIsImZvckVhY2giLCJjbGVhckxvZyIsInVwZGF0ZUNvbmZpZyIsImdldENvbmZpZyJdLCJzb3VyY2VzIjpbIi9ob21lL21odWdvL2NvZGUvY2xhdWRlLWNvZGUtZmxvdy9zcmMvY2xpL2NvcmUvZXJyb3ItaGFuZGxlci50cyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEVycm9yIEhhbmRsZXJcbiAqIFxuICogR2xvYmFsIGVycm9yIGhhbmRsaW5nIHN5c3RlbSBmb3IgdGhlIENMSSBhcHBsaWNhdGlvbi5cbiAqIFByb3ZpZGVzIGVycm9yIGZvcm1hdHRpbmcsIGRlYnVnZ2luZyBzdXBwb3J0LCBhbmQgZXJyb3IgcmVwb3J0aW5nLlxuICovXG5cbmltcG9ydCB7IHdyaXRlRmlsZSB9IGZyb20gJ2ZzL3Byb21pc2VzJztcbmltcG9ydCB7IGpvaW4gfSBmcm9tICdwYXRoJztcbmltcG9ydCB7IGhvbWVkaXIgfSBmcm9tICdvcyc7XG5pbXBvcnQgY2hhbGsgZnJvbSAnY2hhbGsnO1xuaW1wb3J0IHR5cGUgeyBDb21tYW5kQ29udGV4dCwgQ29tbWFuZFJlc3VsdCB9IGZyb20gJy4uL3R5cGVzL2luZGV4LmpzJztcblxuLyoqXG4gKiBFcnJvciBzZXZlcml0eSBsZXZlbHNcbiAqL1xuZXhwb3J0IGVudW0gRXJyb3JTZXZlcml0eSB7XG4gIExPVyA9ICdsb3cnLFxuICBNRURJVU0gPSAnbWVkaXVtJyxcbiAgSElHSCA9ICdoaWdoJyxcbiAgQ1JJVElDQUwgPSAnY3JpdGljYWwnXG59XG5cbi8qKlxuICogRXJyb3IgY2F0ZWdvcmllc1xuICovXG5leHBvcnQgZW51bSBFcnJvckNhdGVnb3J5IHtcbiAgVkFMSURBVElPTiA9ICd2YWxpZGF0aW9uJyxcbiAgRVhFQ1VUSU9OID0gJ2V4ZWN1dGlvbicsXG4gIFNZU1RFTSA9ICdzeXN0ZW0nLFxuICBORVRXT1JLID0gJ25ldHdvcmsnLFxuICBQRVJNSVNTSU9OID0gJ3Blcm1pc3Npb24nLFxuICBDT05GSUcgPSAnY29uZmlnJyxcbiAgVVNFUiA9ICd1c2VyJyxcbiAgSU5URVJOQUwgPSAnaW50ZXJuYWwnXG59XG5cbi8qKlxuICogRW5oYW5jZWQgZXJyb3IgaW5mb3JtYXRpb25cbiAqL1xuZXhwb3J0IGludGVyZmFjZSBFcnJvckluZm8ge1xuICBlcnJvcjogRXJyb3I7XG4gIGNvbnRleHQ/OiBDb21tYW5kQ29udGV4dDtcbiAgY2F0ZWdvcnk6IEVycm9yQ2F0ZWdvcnk7XG4gIHNldmVyaXR5OiBFcnJvclNldmVyaXR5O1xuICB0aW1lc3RhbXA6IG51bWJlcjtcbiAgc3RhY2s/OiBzdHJpbmc7XG4gIG1ldGFkYXRhPzogUmVjb3JkPHN0cmluZywgdW5rbm93bj47XG4gIHN1Z2dlc3Rpb25zPzogc3RyaW5nW107XG4gIHJlY292ZXJhYmxlOiBib29sZWFuO1xufVxuXG4vKipcbiAqIEVycm9yIHJlcG9ydGluZyBjb25maWd1cmF0aW9uXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgRXJyb3JSZXBvcnRpbmdDb25maWcge1xuICBlbmFibGVkOiBib29sZWFuO1xuICBsb2dGaWxlPzogc3RyaW5nO1xuICBpbmNsdWRlU3RhY2s6IGJvb2xlYW47XG4gIGluY2x1ZGVDb250ZXh0OiBib29sZWFuO1xuICBpbmNsdWRlRW52aXJvbm1lbnQ6IGJvb2xlYW47XG4gIG1heExvZ1NpemU6IG51bWJlcjsgLy8gaW4gYnl0ZXNcbiAgYW5vbnltaXplOiBib29sZWFuO1xufVxuXG4vKipcbiAqIEVycm9yIGhhbmRsZXIgY29uZmlndXJhdGlvblxuICovXG5leHBvcnQgaW50ZXJmYWNlIEVycm9ySGFuZGxlckNvbmZpZyB7XG4gIGRlYnVnOiBib29sZWFuO1xuICB2ZXJib3NlOiBib29sZWFuO1xuICBjb2xvcnM6IGJvb2xlYW47XG4gIHJlcG9ydGluZzogRXJyb3JSZXBvcnRpbmdDb25maWc7XG4gIGV4aXRPbkNyaXRpY2FsOiBib29sZWFuO1xuICBzaG93U3VnZ2VzdGlvbnM6IGJvb2xlYW47XG59XG5cbi8qKlxuICogR2xvYmFsIGVycm9yIGhhbmRsZXIgZm9yIENMSSBhcHBsaWNhdGlvblxuICovXG5leHBvcnQgY2xhc3MgRXJyb3JIYW5kbGVyIHtcbiAgcHJpdmF0ZSBzdGF0aWMgaW5zdGFuY2U6IEVycm9ySGFuZGxlcjtcbiAgcHJpdmF0ZSBjb25maWc6IEVycm9ySGFuZGxlckNvbmZpZztcbiAgcHJpdmF0ZSBlcnJvckxvZzogRXJyb3JJbmZvW10gPSBbXTtcbiAgcHJpdmF0ZSBtYXhMb2dFbnRyaWVzID0gMTAwMDtcblxuICBjb25zdHJ1Y3Rvcihjb25maWc6IFBhcnRpYWw8RXJyb3JIYW5kbGVyQ29uZmlnPiA9IHt9KSB7XG4gICAgdGhpcy5jb25maWcgPSB7XG4gICAgICBkZWJ1ZzogZmFsc2UsXG4gICAgICB2ZXJib3NlOiBmYWxzZSxcbiAgICAgIGNvbG9yczogdHJ1ZSxcbiAgICAgIGV4aXRPbkNyaXRpY2FsOiB0cnVlLFxuICAgICAgc2hvd1N1Z2dlc3Rpb25zOiB0cnVlLFxuICAgICAgcmVwb3J0aW5nOiB7XG4gICAgICAgIGVuYWJsZWQ6IHRydWUsXG4gICAgICAgIGluY2x1ZGVTdGFjazogdHJ1ZSxcbiAgICAgICAgaW5jbHVkZUNvbnRleHQ6IGZhbHNlLFxuICAgICAgICBpbmNsdWRlRW52aXJvbm1lbnQ6IGZhbHNlLFxuICAgICAgICBtYXhMb2dTaXplOiAxMCAqIDEwMjQgKiAxMDI0LCAvLyAxME1CXG4gICAgICAgIGFub255bWl6ZTogdHJ1ZVxuICAgICAgfSxcbiAgICAgIC4uLmNvbmZpZ1xuICAgIH07XG4gIH1cblxuICAvKipcbiAgICogR2V0IHNpbmdsZXRvbiBpbnN0YW5jZVxuICAgKi9cbiAgc3RhdGljIGdldEluc3RhbmNlKGNvbmZpZz86IFBhcnRpYWw8RXJyb3JIYW5kbGVyQ29uZmlnPik6IEVycm9ySGFuZGxlciB7XG4gICAgaWYgKCFFcnJvckhhbmRsZXIuaW5zdGFuY2UpIHtcbiAgICAgIEVycm9ySGFuZGxlci5pbnN0YW5jZSA9IG5ldyBFcnJvckhhbmRsZXIoY29uZmlnKTtcbiAgICB9XG4gICAgcmV0dXJuIEVycm9ySGFuZGxlci5pbnN0YW5jZTtcbiAgfVxuXG4gIC8qKlxuICAgKiBIYW5kbGUgYW4gZXJyb3Igd2l0aCBmdWxsIGNvbnRleHRcbiAgICovXG4gIGFzeW5jIGhhbmRsZShlcnJvcjogRXJyb3IsIGNvbnRleHQ/OiBDb21tYW5kQ29udGV4dCwgbWV0YWRhdGE/OiBSZWNvcmQ8c3RyaW5nLCB1bmtub3duPik6IFByb21pc2U8dm9pZD4ge1xuICAgIGNvbnN0IGVycm9ySW5mbyA9IHRoaXMuYW5hbHl6ZUVycm9yKGVycm9yLCBjb250ZXh0LCBtZXRhZGF0YSk7XG4gICAgXG4gICAgLy8gQWRkIHRvIGVycm9yIGxvZ1xuICAgIHRoaXMuYWRkVG9Mb2coZXJyb3JJbmZvKTtcbiAgICBcbiAgICAvLyBEaXNwbGF5IGVycm9yIHRvIHVzZXJcbiAgICB0aGlzLmRpc3BsYXlFcnJvcihlcnJvckluZm8pO1xuICAgIFxuICAgIC8vIFJlcG9ydCBlcnJvciBpZiBlbmFibGVkXG4gICAgaWYgKHRoaXMuY29uZmlnLnJlcG9ydGluZy5lbmFibGVkKSB7XG4gICAgICBhd2FpdCB0aGlzLnJlcG9ydEVycm9yKGVycm9ySW5mbyk7XG4gICAgfVxuICAgIFxuICAgIC8vIEV4aXQgb24gY3JpdGljYWwgZXJyb3JzIGlmIGNvbmZpZ3VyZWRcbiAgICBpZiAodGhpcy5jb25maWcuZXhpdE9uQ3JpdGljYWwgJiYgZXJyb3JJbmZvLnNldmVyaXR5ID09PSBFcnJvclNldmVyaXR5LkNSSVRJQ0FMKSB7XG4gICAgICBwcm9jZXNzLmV4aXQoMSk7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIEhhbmRsZSBjb21tYW5kIGV4ZWN1dGlvbiBlcnJvcnNcbiAgICovXG4gIGFzeW5jIGhhbmRsZUNvbW1hbmRFcnJvcihcbiAgICBlcnJvcjogRXJyb3IsIFxuICAgIGNvbW1hbmROYW1lOiBzdHJpbmcsIFxuICAgIGNvbnRleHQ6IENvbW1hbmRDb250ZXh0XG4gICk6IFByb21pc2U8Q29tbWFuZFJlc3VsdD4ge1xuICAgIGNvbnN0IG1ldGFkYXRhID0geyBjb21tYW5kOiBjb21tYW5kTmFtZSB9O1xuICAgIGF3YWl0IHRoaXMuaGFuZGxlKGVycm9yLCBjb250ZXh0LCBtZXRhZGF0YSk7XG4gICAgXG4gICAgcmV0dXJuIHtcbiAgICAgIHN1Y2Nlc3M6IGZhbHNlLFxuICAgICAgZXJyb3I6IGVycm9yLm1lc3NhZ2UsXG4gICAgICBleGl0Q29kZTogdGhpcy5nZXRFeGl0Q29kZShlcnJvciksXG4gICAgICBleGVjdXRpb25UaW1lOiAwXG4gICAgfTtcbiAgfVxuXG4gIC8qKlxuICAgKiBIYW5kbGUgdW5oYW5kbGVkIHByb21pc2UgcmVqZWN0aW9uc1xuICAgKi9cbiAgaGFuZGxlVW5oYW5kbGVkUmVqZWN0aW9uKHJlYXNvbjogdW5rbm93biwgcHJvbWlzZTogUHJvbWlzZTx1bmtub3duPik6IHZvaWQge1xuICAgIGNvbnN0IGVycm9yID0gcmVhc29uIGluc3RhbmNlb2YgRXJyb3IgPyByZWFzb24gOiBuZXcgRXJyb3IoU3RyaW5nKHJlYXNvbikpO1xuICAgIGNvbnN0IG1ldGFkYXRhID0geyB1bmhhbmRsZWRSZWplY3Rpb246IHRydWUsIHByb21pc2U6IHByb21pc2UudG9TdHJpbmcoKSB9O1xuICAgIFxuICAgIHRoaXMuaGFuZGxlKGVycm9yLCB1bmRlZmluZWQsIG1ldGFkYXRhKS5jYXRjaChjb25zb2xlLmVycm9yKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBIYW5kbGUgdW5jYXVnaHQgZXhjZXB0aW9uc1xuICAgKi9cbiAgaGFuZGxlVW5jYXVnaHRFeGNlcHRpb24oZXJyb3I6IEVycm9yKTogdm9pZCB7XG4gICAgY29uc3QgbWV0YWRhdGEgPSB7IHVuY2F1Z2h0RXhjZXB0aW9uOiB0cnVlIH07XG4gICAgXG4gICAgdGhpcy5oYW5kbGUoZXJyb3IsIHVuZGVmaW5lZCwgbWV0YWRhdGEpLmNhdGNoKGNvbnNvbGUuZXJyb3IpO1xuICAgIFxuICAgIC8vIEFsd2F5cyBleGl0IG9uIHVuY2F1Z2h0IGV4Y2VwdGlvbnNcbiAgICBwcm9jZXNzLmV4aXQoMSk7XG4gIH1cblxuICAvKipcbiAgICogU2V0dXAgZ2xvYmFsIGVycm9yIGhhbmRsZXJzXG4gICAqL1xuICBzZXR1cEdsb2JhbEhhbmRsZXJzKCk6IHZvaWQge1xuICAgIHByb2Nlc3Mub24oJ3VuaGFuZGxlZFJlamVjdGlvbicsIChyZWFzb24sIHByb21pc2UpID0+IHtcbiAgICAgIHRoaXMuaGFuZGxlVW5oYW5kbGVkUmVqZWN0aW9uKHJlYXNvbiwgcHJvbWlzZSk7XG4gICAgfSk7XG4gICAgXG4gICAgcHJvY2Vzcy5vbigndW5jYXVnaHRFeGNlcHRpb24nLCAoZXJyb3IpID0+IHtcbiAgICAgIHRoaXMuaGFuZGxlVW5jYXVnaHRFeGNlcHRpb24oZXJyb3IpO1xuICAgIH0pO1xuICB9XG5cbiAgLyoqXG4gICAqIEFuYWx5emUgZXJyb3IgYW5kIGV4dHJhY3QgaW5mb3JtYXRpb25cbiAgICovXG4gIHByaXZhdGUgYW5hbHl6ZUVycm9yKGVycm9yOiBFcnJvciwgY29udGV4dD86IENvbW1hbmRDb250ZXh0LCBtZXRhZGF0YT86IFJlY29yZDxzdHJpbmcsIHVua25vd24+KTogRXJyb3JJbmZvIHtcbiAgICBjb25zdCBjYXRlZ29yeSA9IHRoaXMuY2F0ZWdvcml6ZUVycm9yKGVycm9yKTtcbiAgICBjb25zdCBzZXZlcml0eSA9IHRoaXMuYXNzZXNzU2V2ZXJpdHkoZXJyb3IsIGNhdGVnb3J5KTtcbiAgICBjb25zdCBzdWdnZXN0aW9ucyA9IHRoaXMuZ2VuZXJhdGVTdWdnZXN0aW9ucyhlcnJvciwgY2F0ZWdvcnkpO1xuICAgIFxuICAgIHJldHVybiB7XG4gICAgICBlcnJvcixcbiAgICAgIGNvbnRleHQsXG4gICAgICBjYXRlZ29yeSxcbiAgICAgIHNldmVyaXR5LFxuICAgICAgdGltZXN0YW1wOiBEYXRlLm5vdygpLFxuICAgICAgc3RhY2s6IGVycm9yLnN0YWNrLFxuICAgICAgbWV0YWRhdGEsXG4gICAgICBzdWdnZXN0aW9ucyxcbiAgICAgIHJlY292ZXJhYmxlOiB0aGlzLmlzUmVjb3ZlcmFibGUoZXJyb3IsIGNhdGVnb3J5KVxuICAgIH07XG4gIH1cblxuICAvKipcbiAgICogQ2F0ZWdvcml6ZSBlcnJvciB0eXBlXG4gICAqL1xuICBwcml2YXRlIGNhdGVnb3JpemVFcnJvcihlcnJvcjogRXJyb3IpOiBFcnJvckNhdGVnb3J5IHtcbiAgICBjb25zdCBtZXNzYWdlID0gZXJyb3IubWVzc2FnZS50b0xvd2VyQ2FzZSgpO1xuICAgIGNvbnN0IG5hbWUgPSBlcnJvci5uYW1lLnRvTG93ZXJDYXNlKCk7XG4gICAgXG4gICAgaWYgKG5hbWUuaW5jbHVkZXMoJ3ZhbGlkYXRpb24nKSB8fCBtZXNzYWdlLmluY2x1ZGVzKCdpbnZhbGlkJykgfHwgbWVzc2FnZS5pbmNsdWRlcygncmVxdWlyZWQnKSkge1xuICAgICAgcmV0dXJuIEVycm9yQ2F0ZWdvcnkuVkFMSURBVElPTjtcbiAgICB9XG4gICAgXG4gICAgaWYgKG1lc3NhZ2UuaW5jbHVkZXMoJ3Blcm1pc3Npb24nKSB8fCBtZXNzYWdlLmluY2x1ZGVzKCdhY2Nlc3MnKSB8fCBuYW1lLmluY2x1ZGVzKCdwZXJtaXNzaW9uJykpIHtcbiAgICAgIHJldHVybiBFcnJvckNhdGVnb3J5LlBFUk1JU1NJT047XG4gICAgfVxuICAgIFxuICAgIGlmIChtZXNzYWdlLmluY2x1ZGVzKCduZXR3b3JrJykgfHwgbWVzc2FnZS5pbmNsdWRlcygnY29ubmVjdGlvbicpIHx8IG1lc3NhZ2UuaW5jbHVkZXMoJ3RpbWVvdXQnKSkge1xuICAgICAgcmV0dXJuIEVycm9yQ2F0ZWdvcnkuTkVUV09SSztcbiAgICB9XG4gICAgXG4gICAgaWYgKG1lc3NhZ2UuaW5jbHVkZXMoJ2NvbmZpZycpIHx8IG1lc3NhZ2UuaW5jbHVkZXMoJ2NvbmZpZ3VyYXRpb24nKSkge1xuICAgICAgcmV0dXJuIEVycm9yQ2F0ZWdvcnkuQ09ORklHO1xuICAgIH1cbiAgICBcbiAgICBpZiAobmFtZS5pbmNsdWRlcygnc3lzdGVtJykgfHwgbWVzc2FnZS5pbmNsdWRlcygnc3lzdGVtJykpIHtcbiAgICAgIHJldHVybiBFcnJvckNhdGVnb3J5LlNZU1RFTTtcbiAgICB9XG4gICAgXG4gICAgaWYgKGVycm9yLnN0YWNrPy5pbmNsdWRlcygndXNlcicpIHx8IG1lc3NhZ2UuaW5jbHVkZXMoJ3VzZXInKSkge1xuICAgICAgcmV0dXJuIEVycm9yQ2F0ZWdvcnkuVVNFUjtcbiAgICB9XG4gICAgXG4gICAgcmV0dXJuIEVycm9yQ2F0ZWdvcnkuSU5URVJOQUw7XG4gIH1cblxuICAvKipcbiAgICogQXNzZXNzIGVycm9yIHNldmVyaXR5XG4gICAqL1xuICBwcml2YXRlIGFzc2Vzc1NldmVyaXR5KGVycm9yOiBFcnJvciwgY2F0ZWdvcnk6IEVycm9yQ2F0ZWdvcnkpOiBFcnJvclNldmVyaXR5IHtcbiAgICAvLyBDcml0aWNhbCBlcnJvcnMgdGhhdCBzaG91bGQgc3RvcCBleGVjdXRpb25cbiAgICBpZiAoY2F0ZWdvcnkgPT09IEVycm9yQ2F0ZWdvcnkuU1lTVEVNIHx8IGVycm9yLm5hbWUgPT09ICdGYXRhbEVycm9yJykge1xuICAgICAgcmV0dXJuIEVycm9yU2V2ZXJpdHkuQ1JJVElDQUw7XG4gICAgfVxuICAgIFxuICAgIC8vIEhpZ2ggc2V2ZXJpdHkgZXJyb3JzXG4gICAgaWYgKGNhdGVnb3J5ID09PSBFcnJvckNhdGVnb3J5LlBFUk1JU1NJT04gfHwgY2F0ZWdvcnkgPT09IEVycm9yQ2F0ZWdvcnkuQ09ORklHKSB7XG4gICAgICByZXR1cm4gRXJyb3JTZXZlcml0eS5ISUdIO1xuICAgIH1cbiAgICBcbiAgICAvLyBNZWRpdW0gc2V2ZXJpdHkgZXJyb3JzXG4gICAgaWYgKGNhdGVnb3J5ID09PSBFcnJvckNhdGVnb3J5Lk5FVFdPUksgfHwgY2F0ZWdvcnkgPT09IEVycm9yQ2F0ZWdvcnkuRVhFQ1VUSU9OKSB7XG4gICAgICByZXR1cm4gRXJyb3JTZXZlcml0eS5NRURJVU07XG4gICAgfVxuICAgIFxuICAgIC8vIExvdyBzZXZlcml0eSBlcnJvcnMgKHZhbGlkYXRpb24sIHVzZXIgZXJyb3JzKVxuICAgIHJldHVybiBFcnJvclNldmVyaXR5LkxPVztcbiAgfVxuXG4gIC8qKlxuICAgKiBHZW5lcmF0ZSBoZWxwZnVsIHN1Z2dlc3Rpb25zXG4gICAqL1xuICBwcml2YXRlIGdlbmVyYXRlU3VnZ2VzdGlvbnMoZXJyb3I6IEVycm9yLCBjYXRlZ29yeTogRXJyb3JDYXRlZ29yeSk6IHN0cmluZ1tdIHtcbiAgICBjb25zdCBzdWdnZXN0aW9uczogc3RyaW5nW10gPSBbXTtcbiAgICBjb25zdCBtZXNzYWdlID0gZXJyb3IubWVzc2FnZS50b0xvd2VyQ2FzZSgpO1xuICAgIFxuICAgIHN3aXRjaCAoY2F0ZWdvcnkpIHtcbiAgICAgIGNhc2UgRXJyb3JDYXRlZ29yeS5WQUxJREFUSU9OOlxuICAgICAgICBzdWdnZXN0aW9ucy5wdXNoKCdDaGVjayB5b3VyIGNvbW1hbmQgYXJndW1lbnRzIGFuZCBmbGFncycpO1xuICAgICAgICBzdWdnZXN0aW9ucy5wdXNoKCdVc2UgLS1oZWxwIHRvIHNlZSB1c2FnZSBpbmZvcm1hdGlvbicpO1xuICAgICAgICBicmVhaztcbiAgICAgICAgXG4gICAgICBjYXNlIEVycm9yQ2F0ZWdvcnkuUEVSTUlTU0lPTjpcbiAgICAgICAgc3VnZ2VzdGlvbnMucHVzaCgnQ2hlY2sgZmlsZS9kaXJlY3RvcnkgcGVybWlzc2lvbnMnKTtcbiAgICAgICAgc3VnZ2VzdGlvbnMucHVzaCgnVHJ5IHJ1bm5pbmcgd2l0aCBhcHByb3ByaWF0ZSBwcml2aWxlZ2VzJyk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgICBcbiAgICAgIGNhc2UgRXJyb3JDYXRlZ29yeS5ORVRXT1JLOlxuICAgICAgICBzdWdnZXN0aW9ucy5wdXNoKCdDaGVjayB5b3VyIGludGVybmV0IGNvbm5lY3Rpb24nKTtcbiAgICAgICAgc3VnZ2VzdGlvbnMucHVzaCgnVmVyaWZ5IHRoZSBzZXJ2aWNlIGVuZHBvaW50IGlzIGFjY2Vzc2libGUnKTtcbiAgICAgICAgc3VnZ2VzdGlvbnMucHVzaCgnVHJ5IGFnYWluIGluIGEgZmV3IG1vbWVudHMnKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICAgIFxuICAgICAgY2FzZSBFcnJvckNhdGVnb3J5LkNPTkZJRzpcbiAgICAgICAgc3VnZ2VzdGlvbnMucHVzaCgnQ2hlY2sgeW91ciBjb25maWd1cmF0aW9uIGZpbGUnKTtcbiAgICAgICAgc3VnZ2VzdGlvbnMucHVzaCgnUmVzZXQgdG8gZGVmYXVsdCBjb25maWd1cmF0aW9uIGlmIG5lZWRlZCcpO1xuICAgICAgICBicmVhaztcbiAgICAgICAgXG4gICAgICBjYXNlIEVycm9yQ2F0ZWdvcnkuU1lTVEVNOlxuICAgICAgICBzdWdnZXN0aW9ucy5wdXNoKCdDaGVjayBzeXN0ZW0gcmVzb3VyY2VzIChkaXNrIHNwYWNlLCBtZW1vcnkpJyk7XG4gICAgICAgIHN1Z2dlc3Rpb25zLnB1c2goJ1ZlcmlmeSBzeXN0ZW0gZGVwZW5kZW5jaWVzIGFyZSBpbnN0YWxsZWQnKTtcbiAgICAgICAgYnJlYWs7XG4gICAgfVxuICAgIFxuICAgIC8vIFNwZWNpZmljIG1lc3NhZ2UtYmFzZWQgc3VnZ2VzdGlvbnNcbiAgICBpZiAobWVzc2FnZS5pbmNsdWRlcygnY29tbWFuZCBub3QgZm91bmQnKSkge1xuICAgICAgc3VnZ2VzdGlvbnMucHVzaCgnQ2hlY2sgaWYgdGhlIGNvbW1hbmQgaXMgaW5zdGFsbGVkIGFuZCBpbiBQQVRIJyk7XG4gICAgfVxuICAgIFxuICAgIGlmIChtZXNzYWdlLmluY2x1ZGVzKCdubyBzdWNoIGZpbGUnKSkge1xuICAgICAgc3VnZ2VzdGlvbnMucHVzaCgnVmVyaWZ5IHRoZSBmaWxlIHBhdGggZXhpc3RzJyk7XG4gICAgfVxuICAgIFxuICAgIHJldHVybiBzdWdnZXN0aW9ucztcbiAgfVxuXG4gIC8qKlxuICAgKiBDaGVjayBpZiBlcnJvciBpcyByZWNvdmVyYWJsZVxuICAgKi9cbiAgcHJpdmF0ZSBpc1JlY292ZXJhYmxlKGVycm9yOiBFcnJvciwgY2F0ZWdvcnk6IEVycm9yQ2F0ZWdvcnkpOiBib29sZWFuIHtcbiAgICByZXR1cm4gW1xuICAgICAgRXJyb3JDYXRlZ29yeS5WQUxJREFUSU9OLFxuICAgICAgRXJyb3JDYXRlZ29yeS5VU0VSLFxuICAgICAgRXJyb3JDYXRlZ29yeS5ORVRXT1JLXG4gICAgXS5pbmNsdWRlcyhjYXRlZ29yeSk7XG4gIH1cblxuICAvKipcbiAgICogRGlzcGxheSBlcnJvciB0byB1c2VyXG4gICAqL1xuICBwcml2YXRlIGRpc3BsYXlFcnJvcihlcnJvckluZm86IEVycm9ySW5mbyk6IHZvaWQge1xuICAgIGNvbnN0IHsgZXJyb3IsIGNhdGVnb3J5LCBzZXZlcml0eSwgc3VnZ2VzdGlvbnMgfSA9IGVycm9ySW5mbztcbiAgICBcbiAgICAvLyBNYWluIGVycm9yIG1lc3NhZ2VcbiAgICBjb25zdCBzZXZlcml0eUNvbG9yID0gdGhpcy5nZXRTZXZlcml0eUNvbG9yKHNldmVyaXR5KTtcbiAgICBjb25zdCBjYXRlZ29yeVRleHQgPSBjYXRlZ29yeS50b1VwcGVyQ2FzZSgpO1xuICAgIFxuICAgIGNvbnNvbGUuZXJyb3IoKTtcbiAgICBjb25zb2xlLmVycm9yKHNldmVyaXR5Q29sb3IoYCR7Y2F0ZWdvcnlUZXh0fSBFUlJPUjpgKSwgZXJyb3IubWVzc2FnZSk7XG4gICAgXG4gICAgLy8gU3RhY2sgdHJhY2UgaW4gZGVidWcgbW9kZVxuICAgIGlmICh0aGlzLmNvbmZpZy5kZWJ1ZyAmJiBlcnJvci5zdGFjaykge1xuICAgICAgY29uc29sZS5lcnJvcigpO1xuICAgICAgY29uc29sZS5lcnJvcihjaGFsay5ncmF5KCdTdGFjayB0cmFjZTonKSk7XG4gICAgICBjb25zb2xlLmVycm9yKGNoYWxrLmdyYXkoZXJyb3Iuc3RhY2spKTtcbiAgICB9XG4gICAgXG4gICAgLy8gQ29udGV4dCBpbmZvcm1hdGlvbiBpbiB2ZXJib3NlIG1vZGVcbiAgICBpZiAodGhpcy5jb25maWcudmVyYm9zZSAmJiBlcnJvckluZm8uY29udGV4dCkge1xuICAgICAgY29uc29sZS5lcnJvcigpO1xuICAgICAgY29uc29sZS5lcnJvcihjaGFsay5ncmF5KCdDb250ZXh0OicpKTtcbiAgICAgIGNvbnNvbGUuZXJyb3IoY2hhbGsuZ3JheShgQXJnczogJHtlcnJvckluZm8uY29udGV4dC5hcmdzLmpvaW4oJyAnKX1gKSk7XG4gICAgICBjb25zb2xlLmVycm9yKGNoYWxrLmdyYXkoYEZsYWdzOiAke0pTT04uc3RyaW5naWZ5KGVycm9ySW5mby5jb250ZXh0LmZsYWdzKX1gKSk7XG4gICAgICBjb25zb2xlLmVycm9yKGNoYWxrLmdyYXkoYElucHV0OiAke2Vycm9ySW5mby5jb250ZXh0LmlucHV0LmpvaW4oJyAnKX1gKSk7XG4gICAgfVxuICAgIFxuICAgIC8vIFN1Z2dlc3Rpb25zXG4gICAgaWYgKHRoaXMuY29uZmlnLnNob3dTdWdnZXN0aW9ucyAmJiBzdWdnZXN0aW9ucyAmJiBzdWdnZXN0aW9ucy5sZW5ndGggPiAwKSB7XG4gICAgICBjb25zb2xlLmVycm9yKCk7XG4gICAgICBjb25zb2xlLmVycm9yKGNoYWxrLnllbGxvdygnU3VnZ2VzdGlvbnM6JykpO1xuICAgICAgZm9yIChjb25zdCBzdWdnZXN0aW9uIG9mIHN1Z2dlc3Rpb25zKSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoY2hhbGsueWVsbG93KGAgIOKAoiAke3N1Z2dlc3Rpb259YCkpO1xuICAgICAgfVxuICAgIH1cbiAgICBcbiAgICBjb25zb2xlLmVycm9yKCk7XG4gIH1cblxuICAvKipcbiAgICogR2V0IGNvbG9yIGZvciBzZXZlcml0eSBsZXZlbFxuICAgKi9cbiAgcHJpdmF0ZSBnZXRTZXZlcml0eUNvbG9yKHNldmVyaXR5OiBFcnJvclNldmVyaXR5KTogKHRleHQ6IHN0cmluZykgPT4gc3RyaW5nIHtcbiAgICBpZiAoIXRoaXMuY29uZmlnLmNvbG9ycykge1xuICAgICAgcmV0dXJuICh0ZXh0OiBzdHJpbmcpID0+IHRleHQ7XG4gICAgfVxuICAgIFxuICAgIHN3aXRjaCAoc2V2ZXJpdHkpIHtcbiAgICAgIGNhc2UgRXJyb3JTZXZlcml0eS5DUklUSUNBTDpcbiAgICAgICAgcmV0dXJuIGNoYWxrLnJlZC5ib2xkO1xuICAgICAgY2FzZSBFcnJvclNldmVyaXR5LkhJR0g6XG4gICAgICAgIHJldHVybiBjaGFsay5yZWQ7XG4gICAgICBjYXNlIEVycm9yU2V2ZXJpdHkuTUVESVVNOlxuICAgICAgICByZXR1cm4gY2hhbGsueWVsbG93O1xuICAgICAgY2FzZSBFcnJvclNldmVyaXR5LkxPVzpcbiAgICAgICAgcmV0dXJuIGNoYWxrLmJsdWU7XG4gICAgICBkZWZhdWx0OlxuICAgICAgICByZXR1cm4gY2hhbGsuZ3JheTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogR2V0IGFwcHJvcHJpYXRlIGV4aXQgY29kZSBmb3IgZXJyb3JcbiAgICovXG4gIHByaXZhdGUgZ2V0RXhpdENvZGUoZXJyb3I6IEVycm9yKTogbnVtYmVyIHtcbiAgICBpZiAoZXJyb3IubWVzc2FnZS5pbmNsdWRlcygncGVybWlzc2lvbicpKSByZXR1cm4gMTI2O1xuICAgIGlmIChlcnJvci5tZXNzYWdlLmluY2x1ZGVzKCdjb21tYW5kIG5vdCBmb3VuZCcpKSByZXR1cm4gMTI3O1xuICAgIGlmIChlcnJvci5tZXNzYWdlLmluY2x1ZGVzKCdpbnZhbGlkIGFyZ3VtZW50JykpIHJldHVybiAxMjg7XG4gICAgcmV0dXJuIDE7XG4gIH1cblxuICAvKipcbiAgICogQWRkIGVycm9yIHRvIGludGVybmFsIGxvZ1xuICAgKi9cbiAgcHJpdmF0ZSBhZGRUb0xvZyhlcnJvckluZm86IEVycm9ySW5mbyk6IHZvaWQge1xuICAgIHRoaXMuZXJyb3JMb2cucHVzaChlcnJvckluZm8pO1xuICAgIFxuICAgIC8vIFRyaW0gbG9nIGlmIHRvbyBsYXJnZVxuICAgIGlmICh0aGlzLmVycm9yTG9nLmxlbmd0aCA+IHRoaXMubWF4TG9nRW50cmllcykge1xuICAgICAgdGhpcy5lcnJvckxvZyA9IHRoaXMuZXJyb3JMb2cuc2xpY2UoLXRoaXMubWF4TG9nRW50cmllcyk7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIFJlcG9ydCBlcnJvciB0byBsb2cgZmlsZSBvciBleHRlcm5hbCBzZXJ2aWNlXG4gICAqL1xuICBwcml2YXRlIGFzeW5jIHJlcG9ydEVycm9yKGVycm9ySW5mbzogRXJyb3JJbmZvKTogUHJvbWlzZTx2b2lkPiB7XG4gICAgdHJ5IHtcbiAgICAgIGNvbnN0IHJlcG9ydCA9IHRoaXMuZm9ybWF0RXJyb3JSZXBvcnQoZXJyb3JJbmZvKTtcbiAgICAgIFxuICAgICAgaWYgKHRoaXMuY29uZmlnLnJlcG9ydGluZy5sb2dGaWxlKSB7XG4gICAgICAgIGF3YWl0IHRoaXMud3JpdGVUb0xvZ0ZpbGUocmVwb3J0KTtcbiAgICAgIH1cbiAgICB9IGNhdGNoIChyZXBvcnRpbmdFcnJvcikge1xuICAgICAgLy8gRG9uJ3QgdGhyb3cgZXJyb3JzIGR1cmluZyBlcnJvciByZXBvcnRpbmdcbiAgICAgIGNvbnNvbGUuZXJyb3IoJ0ZhaWxlZCB0byByZXBvcnQgZXJyb3I6JywgcmVwb3J0aW5nRXJyb3IpO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBGb3JtYXQgZXJyb3IgcmVwb3J0XG4gICAqL1xuICBwcml2YXRlIGZvcm1hdEVycm9yUmVwb3J0KGVycm9ySW5mbzogRXJyb3JJbmZvKTogc3RyaW5nIHtcbiAgICBjb25zdCByZXBvcnQ6IFJlY29yZDxzdHJpbmcsIHVua25vd24+ID0ge1xuICAgICAgdGltZXN0YW1wOiBuZXcgRGF0ZShlcnJvckluZm8udGltZXN0YW1wKS50b0lTT1N0cmluZygpLFxuICAgICAgY2F0ZWdvcnk6IGVycm9ySW5mby5jYXRlZ29yeSxcbiAgICAgIHNldmVyaXR5OiBlcnJvckluZm8uc2V2ZXJpdHksXG4gICAgICBtZXNzYWdlOiBlcnJvckluZm8uZXJyb3IubWVzc2FnZSxcbiAgICAgIG5hbWU6IGVycm9ySW5mby5lcnJvci5uYW1lXG4gICAgfTtcbiAgICBcbiAgICBpZiAodGhpcy5jb25maWcucmVwb3J0aW5nLmluY2x1ZGVTdGFjayAmJiBlcnJvckluZm8uc3RhY2spIHtcbiAgICAgIHJlcG9ydC5zdGFjayA9IGVycm9ySW5mby5zdGFjaztcbiAgICB9XG4gICAgXG4gICAgaWYgKHRoaXMuY29uZmlnLnJlcG9ydGluZy5pbmNsdWRlQ29udGV4dCAmJiBlcnJvckluZm8uY29udGV4dCkge1xuICAgICAgcmVwb3J0LmNvbnRleHQgPSB7XG4gICAgICAgIGFyZ3M6IGVycm9ySW5mby5jb250ZXh0LmFyZ3MsXG4gICAgICAgIGZsYWdzOiBlcnJvckluZm8uY29udGV4dC5mbGFncyxcbiAgICAgICAgaW5wdXRMZW5ndGg6IGVycm9ySW5mby5jb250ZXh0LmlucHV0Lmxlbmd0aFxuICAgICAgfTtcbiAgICB9XG4gICAgXG4gICAgaWYgKHRoaXMuY29uZmlnLnJlcG9ydGluZy5pbmNsdWRlRW52aXJvbm1lbnQpIHtcbiAgICAgIHJlcG9ydC5lbnZpcm9ubWVudCA9IHtcbiAgICAgICAgbm9kZVZlcnNpb246IHByb2Nlc3MudmVyc2lvbixcbiAgICAgICAgcGxhdGZvcm06IHByb2Nlc3MucGxhdGZvcm0sXG4gICAgICAgIGFyY2g6IHByb2Nlc3MuYXJjaFxuICAgICAgfTtcbiAgICB9XG4gICAgXG4gICAgaWYgKGVycm9ySW5mby5tZXRhZGF0YSkge1xuICAgICAgcmVwb3J0Lm1ldGFkYXRhID0gZXJyb3JJbmZvLm1ldGFkYXRhO1xuICAgIH1cbiAgICBcbiAgICByZXR1cm4gSlNPTi5zdHJpbmdpZnkocmVwb3J0LCBudWxsLCAyKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBXcml0ZSBlcnJvciByZXBvcnQgdG8gbG9nIGZpbGVcbiAgICovXG4gIHByaXZhdGUgYXN5bmMgd3JpdGVUb0xvZ0ZpbGUocmVwb3J0OiBzdHJpbmcpOiBQcm9taXNlPHZvaWQ+IHtcbiAgICBjb25zdCBsb2dGaWxlID0gdGhpcy5jb25maWcucmVwb3J0aW5nLmxvZ0ZpbGUgfHwgam9pbihob21lZGlyKCksICcuY2xhdWRlLXplbi1lcnJvcnMubG9nJyk7XG4gICAgY29uc3QgdGltZXN0YW1wID0gbmV3IERhdGUoKS50b0lTT1N0cmluZygpO1xuICAgIGNvbnN0IGxvZ0VudHJ5ID0gYFxcXFxuLS0tICR7dGltZXN0YW1wfSAtLS1cXFxcbiR7cmVwb3J0fVxcXFxuYDtcbiAgICBcbiAgICBhd2FpdCB3cml0ZUZpbGUobG9nRmlsZSwgbG9nRW50cnksIHsgZmxhZzogJ2EnIH0pO1xuICB9XG5cbiAgLyoqXG4gICAqIEdldCBlcnJvciBzdGF0aXN0aWNzXG4gICAqL1xuICBnZXRFcnJvclN0YXRzKCk6IHtcbiAgICB0b3RhbDogbnVtYmVyO1xuICAgIGJ5Q2F0ZWdvcnk6IFJlY29yZDxFcnJvckNhdGVnb3J5LCBudW1iZXI+O1xuICAgIGJ5U2V2ZXJpdHk6IFJlY29yZDxFcnJvclNldmVyaXR5LCBudW1iZXI+O1xuICAgIHJlY2VudDogRXJyb3JJbmZvW107XG4gIH0ge1xuICAgIGNvbnN0IHN0YXRzID0ge1xuICAgICAgdG90YWw6IHRoaXMuZXJyb3JMb2cubGVuZ3RoLFxuICAgICAgYnlDYXRlZ29yeToge30gYXMgUmVjb3JkPEVycm9yQ2F0ZWdvcnksIG51bWJlcj4sXG4gICAgICBieVNldmVyaXR5OiB7fSBhcyBSZWNvcmQ8RXJyb3JTZXZlcml0eSwgbnVtYmVyPixcbiAgICAgIHJlY2VudDogdGhpcy5lcnJvckxvZy5zbGljZSgtMTApXG4gICAgfTtcbiAgICBcbiAgICAvLyBJbml0aWFsaXplIGNvdW50ZXJzXG4gICAgT2JqZWN0LnZhbHVlcyhFcnJvckNhdGVnb3J5KS5mb3JFYWNoKGNhdGVnb3J5ID0+IHtcbiAgICAgIHN0YXRzLmJ5Q2F0ZWdvcnlbY2F0ZWdvcnldID0gMDtcbiAgICB9KTtcbiAgICBcbiAgICBPYmplY3QudmFsdWVzKEVycm9yU2V2ZXJpdHkpLmZvckVhY2goc2V2ZXJpdHkgPT4ge1xuICAgICAgc3RhdHMuYnlTZXZlcml0eVtzZXZlcml0eV0gPSAwO1xuICAgIH0pO1xuICAgIFxuICAgIC8vIENvdW50IGVycm9yc1xuICAgIGZvciAoY29uc3QgZXJyb3JJbmZvIG9mIHRoaXMuZXJyb3JMb2cpIHtcbiAgICAgIHN0YXRzLmJ5Q2F0ZWdvcnlbZXJyb3JJbmZvLmNhdGVnb3J5XSsrO1xuICAgICAgc3RhdHMuYnlTZXZlcml0eVtlcnJvckluZm8uc2V2ZXJpdHldKys7XG4gICAgfVxuICAgIFxuICAgIHJldHVybiBzdGF0cztcbiAgfVxuXG4gIC8qKlxuICAgKiBDbGVhciBlcnJvciBsb2dcbiAgICovXG4gIGNsZWFyTG9nKCk6IHZvaWQge1xuICAgIHRoaXMuZXJyb3JMb2cubGVuZ3RoID0gMDtcbiAgfVxuXG4gIC8qKlxuICAgKiBVcGRhdGUgY29uZmlndXJhdGlvblxuICAgKi9cbiAgdXBkYXRlQ29uZmlnKGNvbmZpZzogUGFydGlhbDxFcnJvckhhbmRsZXJDb25maWc+KTogdm9pZCB7XG4gICAgdGhpcy5jb25maWcgPSB7IC4uLnRoaXMuY29uZmlnLCAuLi5jb25maWcgfTtcbiAgfVxuXG4gIC8qKlxuICAgKiBHZXQgY3VycmVudCBjb25maWd1cmF0aW9uXG4gICAqL1xuICBnZXRDb25maWcoKTogRXJyb3JIYW5kbGVyQ29uZmlnIHtcbiAgICByZXR1cm4geyAuLi50aGlzLmNvbmZpZyB9O1xuICB9XG59Il0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7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