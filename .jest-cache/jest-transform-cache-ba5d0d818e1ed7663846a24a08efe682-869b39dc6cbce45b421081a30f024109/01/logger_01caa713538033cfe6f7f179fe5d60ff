7deeb414a0b2911f527eeb7d3333e91a
/* istanbul ignore next */
function cov_1v7vu9bedu() {
  var path = "/home/mhugo/code/claude-code-flow/src/cli/utils/logger.ts";
  var hash = "a13492028bdc5405d648fb81c2cc0043a96ae174";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/home/mhugo/code/claude-code-flow/src/cli/utils/logger.ts",
    statementMap: {
      "0": {
        start: {
          line: 14,
          column: 0
        },
        end: {
          line: 20,
          column: 32
        }
      },
      "1": {
        start: {
          line: 15,
          column: 4
        },
        end: {
          line: 15,
          column: 46
        }
      },
      "2": {
        start: {
          line: 16,
          column: 4
        },
        end: {
          line: 16,
          column: 44
        }
      },
      "3": {
        start: {
          line: 17,
          column: 4
        },
        end: {
          line: 17,
          column: 44
        }
      },
      "4": {
        start: {
          line: 18,
          column: 4
        },
        end: {
          line: 18,
          column: 46
        }
      },
      "5": {
        start: {
          line: 19,
          column: 4
        },
        end: {
          line: 19,
          column: 48
        }
      },
      "6": {
        start: {
          line: 24,
          column: 22
        },
        end: {
          line: 59,
          column: 1
        }
      },
      "7": {
        start: {
          line: 63,
          column: 23
        },
        end: {
          line: 71,
          column: 1
        }
      },
      "8": {
        start: {
          line: 76,
          column: 4
        },
        end: {
          line: 76,
          column: 52
        }
      },
      "9": {
        start: {
          line: 82,
          column: 18
        },
        end: {
          line: 82,
          column: 20
        }
      },
      "10": {
        start: {
          line: 84,
          column: 4
        },
        end: {
          line: 90,
          column: 5
        }
      },
      "11": {
        start: {
          line: 85,
          column: 26
        },
        end: {
          line: 85,
          column: 50
        }
      },
      "12": {
        start: {
          line: 86,
          column: 29
        },
        end: {
          line: 88,
          column: 23
        }
      },
      "13": {
        start: {
          line: 89,
          column: 8
        },
        end: {
          line: 89,
          column: 40
        }
      },
      "14": {
        start: {
          line: 92,
          column: 4
        },
        end: {
          line: 112,
          column: 5
        }
      },
      "15": {
        start: {
          line: 93,
          column: 26
        },
        end: {
          line: 93,
          column: 65
        }
      },
      "16": {
        start: {
          line: 94,
          column: 23
        },
        end: {
          line: 94,
          column: 32
        }
      },
      "17": {
        start: {
          line: 95,
          column: 8
        },
        end: {
          line: 110,
          column: 9
        }
      },
      "18": {
        start: {
          line: 96,
          column: 12
        },
        end: {
          line: 109,
          column: 13
        }
      },
      "19": {
        start: {
          line: 98,
          column: 20
        },
        end: {
          line: 98,
          column: 59
        }
      },
      "20": {
        start: {
          line: 99,
          column: 20
        },
        end: {
          line: 99,
          column: 26
        }
      },
      "21": {
        start: {
          line: 101,
          column: 20
        },
        end: {
          line: 101,
          column: 60
        }
      },
      "22": {
        start: {
          line: 102,
          column: 20
        },
        end: {
          line: 102,
          column: 26
        }
      },
      "23": {
        start: {
          line: 104,
          column: 20
        },
        end: {
          line: 104,
          column: 61
        }
      },
      "24": {
        start: {
          line: 105,
          column: 20
        },
        end: {
          line: 105,
          column: 26
        }
      },
      "25": {
        start: {
          line: 107,
          column: 20
        },
        end: {
          line: 107,
          column: 58
        }
      },
      "26": {
        start: {
          line: 108,
          column: 20
        },
        end: {
          line: 108,
          column: 26
        }
      },
      "27": {
        start: {
          line: 111,
          column: 8
        },
        end: {
          line: 111,
          column: 36
        }
      },
      "28": {
        start: {
          line: 114,
          column: 27
        },
        end: {
          line: 114,
          column: 76
        }
      },
      "29": {
        start: {
          line: 115,
          column: 4
        },
        end: {
          line: 120,
          column: 5
        }
      },
      "30": {
        start: {
          line: 116,
          column: 26
        },
        end: {
          line: 118,
          column: 28
        }
      },
      "31": {
        start: {
          line: 119,
          column: 8
        },
        end: {
          line: 119,
          column: 37
        }
      },
      "32": {
        start: {
          line: 122,
          column: 4
        },
        end: {
          line: 122,
          column: 24
        }
      },
      "33": {
        start: {
          line: 123,
          column: 4
        },
        end: {
          line: 123,
          column: 27
        }
      },
      "34": {
        start: {
          line: 129,
          column: 4
        },
        end: {
          line: 140,
          column: 5
        }
      },
      "35": {
        start: {
          line: 131,
          column: 12
        },
        end: {
          line: 131,
          column: 24
        }
      },
      "36": {
        start: {
          line: 133,
          column: 12
        },
        end: {
          line: 133,
          column: 24
        }
      },
      "37": {
        start: {
          line: 135,
          column: 12
        },
        end: {
          line: 135,
          column: 24
        }
      },
      "38": {
        start: {
          line: 137,
          column: 12
        },
        end: {
          line: 137,
          column: 23
        }
      },
      "39": {
        start: {
          line: 139,
          column: 12
        },
        end: {
          line: 139,
          column: 22
        }
      },
      "40": {
        start: {
          line: 146,
          column: 4
        },
        end: {
          line: 167,
          column: 5
        }
      },
      "41": {
        start: {
          line: 148,
          column: 20
        },
        end: {
          line: 148,
          column: 37
        }
      },
      "42": {
        start: {
          line: 149,
          column: 8
        },
        end: {
          line: 151,
          column: 9
        }
      },
      "43": {
        start: {
          line: 150,
          column: 12
        },
        end: {
          line: 150,
          column: 48
        }
      },
      "44": {
        start: {
          line: 153,
          column: 8
        },
        end: {
          line: 158,
          column: 9
        }
      },
      "45": {
        start: {
          line: 154,
          column: 26
        },
        end: {
          line: 154,
          column: 83
        }
      },
      "46": {
        start: {
          line: 154,
          column: 65
        },
        end: {
          line: 154,
          column: 82
        }
      },
      "47": {
        start: {
          line: 155,
          column: 12
        },
        end: {
          line: 157,
          column: 13
        }
      },
      "48": {
        start: {
          line: 156,
          column: 16
        },
        end: {
          line: 156,
          column: 68
        }
      },
      "49": {
        start: {
          line: 160,
          column: 8
        },
        end: {
          line: 160,
          column: 65
        }
      },
      "50": {
        start: {
          line: 164,
          column: 8
        },
        end: {
          line: 166,
          column: 9
        }
      },
      "51": {
        start: {
          line: 165,
          column: 12
        },
        end: {
          line: 165,
          column: 65
        }
      },
      "52": {
        start: {
          line: 173,
          column: 31
        },
        end: {
          line: 173,
          column: 58
        }
      },
      "53": {
        start: {
          line: 174,
          column: 4
        },
        end: {
          line: 194,
          column: 5
        }
      },
      "54": {
        start: {
          line: 176,
          column: 27
        },
        end: {
          line: 176,
          column: 52
        }
      },
      "55": {
        start: {
          line: 177,
          column: 8
        },
        end: {
          line: 179,
          column: 9
        }
      },
      "56": {
        start: {
          line: 178,
          column: 12
        },
        end: {
          line: 178,
          column: 37
        }
      },
      "57": {
        start: {
          line: 181,
          column: 8
        },
        end: {
          line: 187,
          column: 9
        }
      },
      "58": {
        start: {
          line: 181,
          column: 21
        },
        end: {
          line: 181,
          column: 33
        }
      },
      "59": {
        start: {
          line: 182,
          column: 32
        },
        end: {
          line: 182,
          column: 71
        }
      },
      "60": {
        start: {
          line: 183,
          column: 29
        },
        end: {
          line: 183,
          column: 51
        }
      },
      "61": {
        start: {
          line: 184,
          column: 12
        },
        end: {
          line: 186,
          column: 13
        }
      },
      "62": {
        start: {
          line: 185,
          column: 16
        },
        end: {
          line: 185,
          column: 52
        }
      },
      "63": {
        start: {
          line: 191,
          column: 8
        },
        end: {
          line: 193,
          column: 9
        }
      },
      "64": {
        start: {
          line: 192,
          column: 12
        },
        end: {
          line: 192,
          column: 63
        }
      },
      "65": {
        start: {
          line: 200,
          column: 24
        },
        end: {
          line: 200,
          column: 56
        }
      },
      "66": {
        start: {
          line: 201,
          column: 19
        },
        end: {
          line: 275,
          column: 5
        }
      },
      "67": {
        start: {
          line: 203,
          column: 12
        },
        end: {
          line: 203,
          column: 55
        }
      },
      "68": {
        start: {
          line: 206,
          column: 12
        },
        end: {
          line: 206,
          column: 54
        }
      },
      "69": {
        start: {
          line: 209,
          column: 12
        },
        end: {
          line: 209,
          column: 54
        }
      },
      "70": {
        start: {
          line: 212,
          column: 12
        },
        end: {
          line: 212,
          column: 55
        }
      },
      "71": {
        start: {
          line: 216,
          column: 12
        },
        end: {
          line: 218,
          column: 13
        }
      },
      "72": {
        start: {
          line: 217,
          column: 16
        },
        end: {
          line: 217,
          column: 23
        }
      },
      "73": {
        start: {
          line: 220,
          column: 37
        },
        end: {
          line: 220,
          column: 79
        }
      },
      "74": {
        start: {
          line: 222,
          column: 32
        },
        end: {
          line: 224,
          column: 34
        }
      },
      "75": {
        start: {
          line: 223,
          column: 57
        },
        end: {
          line: 223,
          column: 125
        }
      },
      "76": {
        start: {
          line: 226,
          column: 12
        },
        end: {
          line: 243,
          column: 13
        }
      },
      "77": {
        start: {
          line: 227,
          column: 29
        },
        end: {
          line: 227,
          column: 48
        }
      },
      "78": {
        start: {
          line: 228,
          column: 39
        },
        end: {
          line: 228,
          column: 84
        }
      },
      "79": {
        start: {
          line: 229,
          column: 16
        },
        end: {
          line: 242,
          column: 17
        }
      },
      "80": {
        start: {
          line: 231,
          column: 24
        },
        end: {
          line: 231,
          column: 54
        }
      },
      "81": {
        start: {
          line: 232,
          column: 24
        },
        end: {
          line: 232,
          column: 30
        }
      },
      "82": {
        start: {
          line: 234,
          column: 24
        },
        end: {
          line: 234,
          column: 53
        }
      },
      "83": {
        start: {
          line: 235,
          column: 24
        },
        end: {
          line: 235,
          column: 30
        }
      },
      "84": {
        start: {
          line: 237,
          column: 24
        },
        end: {
          line: 237,
          column: 53
        }
      },
      "85": {
        start: {
          line: 238,
          column: 24
        },
        end: {
          line: 238,
          column: 30
        }
      },
      "86": {
        start: {
          line: 240,
          column: 24
        },
        end: {
          line: 240,
          column: 54
        }
      },
      "87": {
        start: {
          line: 241,
          column: 24
        },
        end: {
          line: 241,
          column: 30
        }
      },
      "88": {
        start: {
          line: 245,
          column: 12
        },
        end: {
          line: 251,
          column: 13
        }
      },
      "89": {
        start: {
          line: 247,
          column: 37
        },
        end: {
          line: 247,
          column: 79
        }
      },
      "90": {
        start: {
          line: 248,
          column: 16
        },
        end: {
          line: 250,
          column: 19
        }
      },
      "91": {
        start: {
          line: 254,
          column: 12
        },
        end: {
          line: 254,
          column: 38
        }
      },
      "92": {
        start: {
          line: 257,
          column: 12
        },
        end: {
          line: 257,
          column: 37
        }
      },
      "93": {
        start: {
          line: 260,
          column: 12
        },
        end: {
          line: 260,
          column: 41
        }
      },
      "94": {
        start: {
          line: 263,
          column: 12
        },
        end: {
          line: 263,
          column: 45
        }
      },
      "95": {
        start: {
          line: 266,
          column: 12
        },
        end: {
          line: 266,
          column: 40
        }
      },
      "96": {
        start: {
          line: 269,
          column: 32
        },
        end: {
          line: 269,
          column: 50
        }
      },
      "97": {
        start: {
          line: 270,
          column: 12
        },
        end: {
          line: 272,
          column: 25
        }
      },
      "98": {
        start: {
          line: 273,
          column: 12
        },
        end: {
          line: 273,
          column: 45
        }
      },
      "99": {
        start: {
          line: 276,
          column: 4
        },
        end: {
          line: 276,
          column: 18
        }
      },
      "100": {
        start: {
          line: 281,
          column: 22
        },
        end: {
          line: 281,
          column: 36
        }
      },
      "101": {
        start: {
          line: 285,
          column: 21
        },
        end: {
          line: 285,
          column: 73
        }
      },
      "102": {
        start: {
          line: 285,
          column: 43
        },
        end: {
          line: 285,
          column: 73
        }
      },
      "103": {
        start: {
          line: 286,
          column: 20
        },
        end: {
          line: 286,
          column: 71
        }
      },
      "104": {
        start: {
          line: 286,
          column: 42
        },
        end: {
          line: 286,
          column: 71
        }
      },
      "105": {
        start: {
          line: 287,
          column: 20
        },
        end: {
          line: 287,
          column: 71
        }
      },
      "106": {
        start: {
          line: 287,
          column: 42
        },
        end: {
          line: 287,
          column: 71
        }
      },
      "107": {
        start: {
          line: 288,
          column: 21
        },
        end: {
          line: 288,
          column: 73
        }
      },
      "108": {
        start: {
          line: 288,
          column: 43
        },
        end: {
          line: 288,
          column: 73
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 14,
            column: 1
          },
          end: {
            line: 14,
            column: 2
          }
        },
        loc: {
          start: {
            line: 14,
            column: 21
          },
          end: {
            line: 20,
            column: 1
          }
        },
        line: 14
      },
      "1": {
        name: "colorize",
        decl: {
          start: {
            line: 75,
            column: 16
          },
          end: {
            line: 75,
            column: 24
          }
        },
        loc: {
          start: {
            line: 75,
            column: 38
          },
          end: {
            line: 77,
            column: 1
          }
        },
        line: 75
      },
      "2": {
        name: "formatMessage",
        decl: {
          start: {
            line: 81,
            column: 16
          },
          end: {
            line: 81,
            column: 29
          }
        },
        loc: {
          start: {
            line: 81,
            column: 62
          },
          end: {
            line: 124,
            column: 1
          }
        },
        line: 81
      },
      "3": {
        name: "getLevelIcon",
        decl: {
          start: {
            line: 128,
            column: 9
          },
          end: {
            line: 128,
            column: 21
          }
        },
        loc: {
          start: {
            line: 128,
            column: 29
          },
          end: {
            line: 141,
            column: 1
          }
        },
        line: 128
      },
      "4": {
        name: "writeToFile",
        decl: {
          start: {
            line: 145,
            column: 15
          },
          end: {
            line: 145,
            column: 26
          }
        },
        loc: {
          start: {
            line: 145,
            column: 54
          },
          end: {
            line: 168,
            column: 1
          }
        },
        line: 145
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 154,
            column: 59
          },
          end: {
            line: 154,
            column: 60
          }
        },
        loc: {
          start: {
            line: 154,
            column: 65
          },
          end: {
            line: 154,
            column: 82
          }
        },
        line: 154
      },
      "6": {
        name: "rotateLogFile",
        decl: {
          start: {
            line: 172,
            column: 15
          },
          end: {
            line: 172,
            column: 28
          }
        },
        loc: {
          start: {
            line: 172,
            column: 49
          },
          end: {
            line: 195,
            column: 1
          }
        },
        line: 172
      },
      "7": {
        name: "createLogger",
        decl: {
          start: {
            line: 199,
            column: 16
          },
          end: {
            line: 199,
            column: 28
          }
        },
        loc: {
          start: {
            line: 199,
            column: 42
          },
          end: {
            line: 277,
            column: 1
          }
        },
        line: 199
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 202,
            column: 8
          },
          end: {
            line: 202,
            column: 9
          }
        },
        loc: {
          start: {
            line: 202,
            column: 32
          },
          end: {
            line: 204,
            column: 9
          }
        },
        line: 202
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 205,
            column: 8
          },
          end: {
            line: 205,
            column: 9
          }
        },
        loc: {
          start: {
            line: 205,
            column: 31
          },
          end: {
            line: 207,
            column: 9
          }
        },
        line: 205
      },
      "10": {
        name: "(anonymous_10)",
        decl: {
          start: {
            line: 208,
            column: 8
          },
          end: {
            line: 208,
            column: 9
          }
        },
        loc: {
          start: {
            line: 208,
            column: 31
          },
          end: {
            line: 210,
            column: 9
          }
        },
        line: 208
      },
      "11": {
        name: "(anonymous_11)",
        decl: {
          start: {
            line: 211,
            column: 8
          },
          end: {
            line: 211,
            column: 9
          }
        },
        loc: {
          start: {
            line: 211,
            column: 32
          },
          end: {
            line: 213,
            column: 9
          }
        },
        line: 211
      },
      "12": {
        name: "(anonymous_12)",
        decl: {
          start: {
            line: 214,
            column: 8
          },
          end: {
            line: 214,
            column: 9
          }
        },
        loc: {
          start: {
            line: 214,
            column: 37
          },
          end: {
            line: 252,
            column: 9
          }
        },
        line: 214
      },
      "13": {
        name: "(anonymous_13)",
        decl: {
          start: {
            line: 223,
            column: 50
          },
          end: {
            line: 223,
            column: 51
          }
        },
        loc: {
          start: {
            line: 223,
            column: 57
          },
          end: {
            line: 223,
            column: 125
          }
        },
        line: 223
      },
      "14": {
        name: "(anonymous_14)",
        decl: {
          start: {
            line: 248,
            column: 79
          },
          end: {
            line: 248,
            column: 80
          }
        },
        loc: {
          start: {
            line: 248,
            column: 85
          },
          end: {
            line: 250,
            column: 17
          }
        },
        line: 248
      },
      "15": {
        name: "(anonymous_15)",
        decl: {
          start: {
            line: 253,
            column: 8
          },
          end: {
            line: 253,
            column: 9
          }
        },
        loc: {
          start: {
            line: 253,
            column: 24
          },
          end: {
            line: 255,
            column: 9
          }
        },
        line: 253
      },
      "16": {
        name: "(anonymous_16)",
        decl: {
          start: {
            line: 256,
            column: 8
          },
          end: {
            line: 256,
            column: 9
          }
        },
        loc: {
          start: {
            line: 256,
            column: 19
          },
          end: {
            line: 258,
            column: 9
          }
        },
        line: 256
      },
      "17": {
        name: "(anonymous_17)",
        decl: {
          start: {
            line: 259,
            column: 8
          },
          end: {
            line: 259,
            column: 9
          }
        },
        loc: {
          start: {
            line: 259,
            column: 30
          },
          end: {
            line: 261,
            column: 9
          }
        },
        line: 259
      },
      "18": {
        name: "(anonymous_18)",
        decl: {
          start: {
            line: 262,
            column: 8
          },
          end: {
            line: 262,
            column: 9
          }
        },
        loc: {
          start: {
            line: 262,
            column: 34
          },
          end: {
            line: 264,
            column: 9
          }
        },
        line: 262
      },
      "19": {
        name: "(anonymous_19)",
        decl: {
          start: {
            line: 265,
            column: 8
          },
          end: {
            line: 265,
            column: 9
          }
        },
        loc: {
          start: {
            line: 265,
            column: 26
          },
          end: {
            line: 267,
            column: 9
          }
        },
        line: 265
      },
      "20": {
        name: "(anonymous_20)",
        decl: {
          start: {
            line: 268,
            column: 8
          },
          end: {
            line: 268,
            column: 9
          }
        },
        loc: {
          start: {
            line: 268,
            column: 22
          },
          end: {
            line: 274,
            column: 9
          }
        },
        line: 268
      },
      "21": {
        name: "(anonymous_21)",
        decl: {
          start: {
            line: 285,
            column: 21
          },
          end: {
            line: 285,
            column: 22
          }
        },
        loc: {
          start: {
            line: 285,
            column: 43
          },
          end: {
            line: 285,
            column: 73
          }
        },
        line: 285
      },
      "22": {
        name: "(anonymous_22)",
        decl: {
          start: {
            line: 286,
            column: 20
          },
          end: {
            line: 286,
            column: 21
          }
        },
        loc: {
          start: {
            line: 286,
            column: 42
          },
          end: {
            line: 286,
            column: 71
          }
        },
        line: 286
      },
      "23": {
        name: "(anonymous_23)",
        decl: {
          start: {
            line: 287,
            column: 20
          },
          end: {
            line: 287,
            column: 21
          }
        },
        loc: {
          start: {
            line: 287,
            column: 42
          },
          end: {
            line: 287,
            column: 71
          }
        },
        line: 287
      },
      "24": {
        name: "(anonymous_24)",
        decl: {
          start: {
            line: 288,
            column: 21
          },
          end: {
            line: 288,
            column: 22
          }
        },
        loc: {
          start: {
            line: 288,
            column: 43
          },
          end: {
            line: 288,
            column: 73
          }
        },
        line: 288
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 20,
            column: 3
          },
          end: {
            line: 20,
            column: 30
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 20,
            column: 3
          },
          end: {
            line: 20,
            column: 11
          }
        }, {
          start: {
            line: 20,
            column: 16
          },
          end: {
            line: 20,
            column: 29
          }
        }],
        line: 20
      },
      "1": {
        loc: {
          start: {
            line: 84,
            column: 4
          },
          end: {
            line: 90,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 84,
            column: 4
          },
          end: {
            line: 90,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 84
      },
      "2": {
        loc: {
          start: {
            line: 86,
            column: 29
          },
          end: {
            line: 88,
            column: 23
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 87,
            column: 14
          },
          end: {
            line: 87,
            column: 40
          }
        }, {
          start: {
            line: 88,
            column: 14
          },
          end: {
            line: 88,
            column: 23
          }
        }],
        line: 86
      },
      "3": {
        loc: {
          start: {
            line: 92,
            column: 4
          },
          end: {
            line: 112,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 92,
            column: 4
          },
          end: {
            line: 112,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 92
      },
      "4": {
        loc: {
          start: {
            line: 95,
            column: 8
          },
          end: {
            line: 110,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 95,
            column: 8
          },
          end: {
            line: 110,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 95
      },
      "5": {
        loc: {
          start: {
            line: 96,
            column: 12
          },
          end: {
            line: 109,
            column: 13
          }
        },
        type: "switch",
        locations: [{
          start: {
            line: 97,
            column: 16
          },
          end: {
            line: 99,
            column: 26
          }
        }, {
          start: {
            line: 100,
            column: 16
          },
          end: {
            line: 102,
            column: 26
          }
        }, {
          start: {
            line: 103,
            column: 16
          },
          end: {
            line: 105,
            column: 26
          }
        }, {
          start: {
            line: 106,
            column: 16
          },
          end: {
            line: 108,
            column: 26
          }
        }],
        line: 96
      },
      "6": {
        loc: {
          start: {
            line: 115,
            column: 4
          },
          end: {
            line: 120,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 115,
            column: 4
          },
          end: {
            line: 120,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 115
      },
      "7": {
        loc: {
          start: {
            line: 116,
            column: 26
          },
          end: {
            line: 118,
            column: 28
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 117,
            column: 14
          },
          end: {
            line: 117,
            column: 49
          }
        }, {
          start: {
            line: 118,
            column: 14
          },
          end: {
            line: 118,
            column: 28
          }
        }],
        line: 116
      },
      "8": {
        loc: {
          start: {
            line: 129,
            column: 4
          },
          end: {
            line: 140,
            column: 5
          }
        },
        type: "switch",
        locations: [{
          start: {
            line: 130,
            column: 8
          },
          end: {
            line: 131,
            column: 24
          }
        }, {
          start: {
            line: 132,
            column: 8
          },
          end: {
            line: 133,
            column: 24
          }
        }, {
          start: {
            line: 134,
            column: 8
          },
          end: {
            line: 135,
            column: 24
          }
        }, {
          start: {
            line: 136,
            column: 8
          },
          end: {
            line: 137,
            column: 23
          }
        }, {
          start: {
            line: 138,
            column: 8
          },
          end: {
            line: 139,
            column: 22
          }
        }],
        line: 129
      },
      "9": {
        loc: {
          start: {
            line: 149,
            column: 8
          },
          end: {
            line: 151,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 149,
            column: 8
          },
          end: {
            line: 151,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 149
      },
      "10": {
        loc: {
          start: {
            line: 153,
            column: 8
          },
          end: {
            line: 158,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 153,
            column: 8
          },
          end: {
            line: 158,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 153
      },
      "11": {
        loc: {
          start: {
            line: 153,
            column: 12
          },
          end: {
            line: 153,
            column: 54
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 153,
            column: 12
          },
          end: {
            line: 153,
            column: 32
          }
        }, {
          start: {
            line: 153,
            column: 36
          },
          end: {
            line: 153,
            column: 54
          }
        }],
        line: 153
      },
      "12": {
        loc: {
          start: {
            line: 155,
            column: 12
          },
          end: {
            line: 157,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 155,
            column: 12
          },
          end: {
            line: 157,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 155
      },
      "13": {
        loc: {
          start: {
            line: 156,
            column: 46
          },
          end: {
            line: 156,
            column: 66
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 156,
            column: 46
          },
          end: {
            line: 156,
            column: 61
          }
        }, {
          start: {
            line: 156,
            column: 65
          },
          end: {
            line: 156,
            column: 66
          }
        }],
        line: 156
      },
      "14": {
        loc: {
          start: {
            line: 164,
            column: 8
          },
          end: {
            line: 166,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 164,
            column: 8
          },
          end: {
            line: 166,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 164
      },
      "15": {
        loc: {
          start: {
            line: 177,
            column: 8
          },
          end: {
            line: 179,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 177,
            column: 8
          },
          end: {
            line: 179,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 177
      },
      "16": {
        loc: {
          start: {
            line: 182,
            column: 32
          },
          end: {
            line: 182,
            column: 71
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 182,
            column: 42
          },
          end: {
            line: 182,
            column: 50
          }
        }, {
          start: {
            line: 182,
            column: 53
          },
          end: {
            line: 182,
            column: 71
          }
        }],
        line: 182
      },
      "17": {
        loc: {
          start: {
            line: 184,
            column: 12
          },
          end: {
            line: 186,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 184,
            column: 12
          },
          end: {
            line: 186,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 184
      },
      "18": {
        loc: {
          start: {
            line: 191,
            column: 8
          },
          end: {
            line: 193,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 191,
            column: 8
          },
          end: {
            line: 193,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 191
      },
      "19": {
        loc: {
          start: {
            line: 199,
            column: 29
          },
          end: {
            line: 199,
            column: 40
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 199,
            column: 38
          },
          end: {
            line: 199,
            column: 40
          }
        }],
        line: 199
      },
      "20": {
        loc: {
          start: {
            line: 216,
            column: 12
          },
          end: {
            line: 218,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 216,
            column: 12
          },
          end: {
            line: 218,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 216
      },
      "21": {
        loc: {
          start: {
            line: 222,
            column: 32
          },
          end: {
            line: 224,
            column: 34
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 223,
            column: 18
          },
          end: {
            line: 223,
            column: 138
          }
        }, {
          start: {
            line: 224,
            column: 18
          },
          end: {
            line: 224,
            column: 34
          }
        }],
        line: 222
      },
      "22": {
        loc: {
          start: {
            line: 223,
            column: 57
          },
          end: {
            line: 223,
            column: 125
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 223,
            column: 83
          },
          end: {
            line: 223,
            column: 111
          }
        }, {
          start: {
            line: 223,
            column: 114
          },
          end: {
            line: 223,
            column: 125
          }
        }],
        line: 223
      },
      "23": {
        loc: {
          start: {
            line: 226,
            column: 12
          },
          end: {
            line: 243,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 226,
            column: 12
          },
          end: {
            line: 243,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 226
      },
      "24": {
        loc: {
          start: {
            line: 228,
            column: 39
          },
          end: {
            line: 228,
            column: 84
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 228,
            column: 46
          },
          end: {
            line: 228,
            column: 70
          }
        }, {
          start: {
            line: 228,
            column: 73
          },
          end: {
            line: 228,
            column: 84
          }
        }],
        line: 228
      },
      "25": {
        loc: {
          start: {
            line: 229,
            column: 16
          },
          end: {
            line: 242,
            column: 17
          }
        },
        type: "switch",
        locations: [{
          start: {
            line: 230,
            column: 20
          },
          end: {
            line: 232,
            column: 30
          }
        }, {
          start: {
            line: 233,
            column: 20
          },
          end: {
            line: 235,
            column: 30
          }
        }, {
          start: {
            line: 236,
            column: 20
          },
          end: {
            line: 238,
            column: 30
          }
        }, {
          start: {
            line: 239,
            column: 20
          },
          end: {
            line: 241,
            column: 30
          }
        }],
        line: 229
      },
      "26": {
        loc: {
          start: {
            line: 245,
            column: 12
          },
          end: {
            line: 251,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 245,
            column: 12
          },
          end: {
            line: 251,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 245
      },
      "27": {
        loc: {
          start: {
            line: 270,
            column: 33
          },
          end: {
            line: 272,
            column: 24
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 271,
            column: 18
          },
          end: {
            line: 271,
            column: 51
          }
        }, {
          start: {
            line: 272,
            column: 18
          },
          end: {
            line: 272,
            column: 24
          }
        }],
        line: 270
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0,
      "74": 0,
      "75": 0,
      "76": 0,
      "77": 0,
      "78": 0,
      "79": 0,
      "80": 0,
      "81": 0,
      "82": 0,
      "83": 0,
      "84": 0,
      "85": 0,
      "86": 0,
      "87": 0,
      "88": 0,
      "89": 0,
      "90": 0,
      "91": 0,
      "92": 0,
      "93": 0,
      "94": 0,
      "95": 0,
      "96": 0,
      "97": 0,
      "98": 0,
      "99": 0,
      "100": 0,
      "101": 0,
      "102": 0,
      "103": 0,
      "104": 0,
      "105": 0,
      "106": 0,
      "107": 0,
      "108": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0, 0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0, 0, 0, 0],
      "9": [0, 0],
      "10": [0, 0],
      "11": [0, 0],
      "12": [0, 0],
      "13": [0, 0],
      "14": [0, 0],
      "15": [0, 0],
      "16": [0, 0],
      "17": [0, 0],
      "18": [0, 0],
      "19": [0],
      "20": [0, 0],
      "21": [0, 0],
      "22": [0, 0],
      "23": [0, 0],
      "24": [0, 0],
      "25": [0, 0, 0, 0],
      "26": [0, 0],
      "27": [0, 0]
    },
    inputSourceMap: {
      file: "/home/mhugo/code/claude-code-flow/src/cli/utils/logger.ts",
      mappings: "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",
      names: [],
      sources: ["/home/mhugo/code/claude-code-flow/src/cli/utils/logger.ts"],
      sourcesContent: ["/**\n * Logger Utilities\n * \n * Provides logging functionality with colors, levels, and formatting.\n * Supports console and file output with configurable verbosity.\n */\n\nimport { writeFile } from 'fs/promises';\nimport { existsSync, mkdirSync } from 'fs';\nimport { dirname, join } from 'path';\n\n/**\n * Log levels in order of severity\n */\nexport enum LogLevel {\n  DEBUG = 0,\n  INFO = 1,\n  WARN = 2,\n  ERROR = 3,\n  SILENT = 4,\n}\n\n/**\n * ANSI color codes\n */\nexport const Colors = {\n  reset: '\\x1b[0m',\n  bright: '\\x1b[1m',\n  dim: '\\x1b[2m',\n  underscore: '\\x1b[4m',\n  blink: '\\x1b[5m',\n  reverse: '\\x1b[7m',\n  hidden: '\\x1b[8m',\n  \n  // Foreground colors\n  black: '\\x1b[30m',\n  red: '\\x1b[31m',\n  green: '\\x1b[32m',\n  yellow: '\\x1b[33m',\n  blue: '\\x1b[34m',\n  magenta: '\\x1b[35m',\n  cyan: '\\x1b[36m',\n  white: '\\x1b[37m',\n  \n  // Background colors\n  bgBlack: '\\x1b[40m',\n  bgRed: '\\x1b[41m',\n  bgGreen: '\\x1b[42m',\n  bgYellow: '\\x1b[43m',\n  bgBlue: '\\x1b[44m',\n  bgMagenta: '\\x1b[45m',\n  bgCyan: '\\x1b[46m',\n  bgWhite: '\\x1b[47m',\n  \n  // Bright colors\n  brightBlack: '\\x1b[90m',\n  brightRed: '\\x1b[91m',\n  brightGreen: '\\x1b[92m',\n  brightYellow: '\\x1b[93m',\n  brightBlue: '\\x1b[94m',\n  brightMagenta: '\\x1b[95m',\n  brightCyan: '\\x1b[96m',\n  brightWhite: '\\x1b[97m',\n} as const;\n\n/**\n * Logger configuration\n */\nexport interface LoggerConfig {\n  /** Minimum log level to output */\n  level: LogLevel;\n  \n  /** Whether to use colors in output */\n  colors: boolean;\n  \n  /** Whether to show timestamps */\n  timestamps: boolean;\n  \n  /** Whether to show log levels */\n  showLevel: boolean;\n  \n  /** File path for file logging (optional) */\n  file?: string;\n  \n  /** Maximum file size before rotation (bytes) */\n  maxFileSize?: number;\n  \n  /** Maximum number of rotated files to keep */\n  maxFiles?: number;\n  \n  /** Custom prefix for log messages */\n  prefix?: string;\n  \n  /** Whether to log to console */\n  console: boolean;\n}\n\n/**\n * Default logger configuration\n */\nconst DEFAULT_CONFIG: LoggerConfig = {\n  level: LogLevel.INFO,\n  colors: true,\n  timestamps: true,\n  showLevel: true,\n  console: true,\n  maxFileSize: 10 * 1024 * 1024, // 10MB\n  maxFiles: 5,\n};\n\n/**\n * Logger interface\n */\nexport interface Logger {\n  debug(message: string, ...args: any[]): void;\n  info(message: string, ...args: any[]): void;\n  warn(message: string, ...args: any[]): void;\n  error(message: string, ...args: any[]): void;\n  log(level: LogLevel, message: string, ...args: any[]): void;\n  setLevel(level: LogLevel): void;\n  getLevel(): LogLevel;\n  enableColors(enabled: boolean): void;\n  enableTimestamps(enabled: boolean): void;\n  setPrefix(prefix: string): void;\n  child(prefix: string): Logger;\n}\n\n/**\n * Colorize text with ANSI colors\n */\nexport function colorize(text: string, color: keyof typeof Colors): string {\n  return `${Colors[color]}${text}${Colors.reset}`;\n}\n\n/**\n * Format log message with timestamp, level, and prefix\n */\nexport function formatMessage(\n  level: LogLevel,\n  message: string,\n  config: LoggerConfig,\n  prefix?: string\n): string {\n  const parts: string[] = [];\n  \n  // Add timestamp\n  if (config.timestamps) {\n    const timestamp = new Date().toISOString();\n    const timestampStr = config.colors \n      ? colorize(timestamp, 'dim')\n      : timestamp;\n    parts.push(`[${timestampStr}]`);\n  }\n  \n  // Add log level\n  if (config.showLevel) {\n    const levelName = LogLevel[level].toUpperCase().padEnd(5);\n    let levelStr = levelName;\n    \n    if (config.colors) {\n      switch (level) {\n        case LogLevel.DEBUG:\n          levelStr = colorize(levelName, 'cyan');\n          break;\n        case LogLevel.INFO:\n          levelStr = colorize(levelName, 'green');\n          break;\n        case LogLevel.WARN:\n          levelStr = colorize(levelName, 'yellow');\n          break;\n        case LogLevel.ERROR:\n          levelStr = colorize(levelName, 'red');\n          break;\n      }\n    }\n    \n    parts.push(`[${levelStr}]`);\n  }\n  \n  // Add prefix\n  const combinedPrefix = [config.prefix, prefix].filter(Boolean).join(':');\n  if (combinedPrefix) {\n    const prefixStr = config.colors\n      ? colorize(combinedPrefix, 'magenta')\n      : combinedPrefix;\n    parts.push(`[${prefixStr}]`);\n  }\n  \n  // Add message\n  parts.push(message);\n  \n  return parts.join(' ');\n}\n\n/**\n * Get log level icons\n */\nfunction getLevelIcon(level: LogLevel): string {\n  switch (level) {\n    case LogLevel.DEBUG:\n      return '\uD83D\uDC1B';\n    case LogLevel.INFO:\n      return '\u2139\uFE0F';\n    case LogLevel.WARN:\n      return '\u26A0\uFE0F';\n    case LogLevel.ERROR:\n      return '\u274C';\n    default:\n      return '';\n  }\n}\n\n/**\n * Write log to file with rotation\n */\nasync function writeToFile(\n  filePath: string,\n  message: string,\n  config: LoggerConfig\n): Promise<void> {\n  try {\n    // Ensure directory exists\n    const dir = dirname(filePath);\n    if (!existsSync(dir)) {\n      mkdirSync(dir, { recursive: true });\n    }\n    \n    // Check file size for rotation\n    if (existsSync(filePath) && config.maxFileSize) {\n      const stats = await import('fs/promises').then(fs => fs.stat(filePath));\n      \n      if (stats.size > config.maxFileSize) {\n        await rotateLogFile(filePath, config.maxFiles || 5);\n      }\n    }\n    \n    // Append to file\n    await writeFile(filePath, message + '\\n', { flag: 'a' });\n  } catch (error) {\n    // Silently fail file logging to avoid infinite loops\n    if (process.env.NODE_ENV === 'development') {\n      console.error('Failed to write to log file:', error);\n    }\n  }\n}\n\n/**\n * Rotate log files\n */\nasync function rotateLogFile(filePath: string, maxFiles: number): Promise<void> {\n  const { rename, unlink } = await import('fs/promises');\n  \n  try {\n    // Remove oldest file if it exists\n    const oldestFile = `${filePath}.${maxFiles}`;\n    if (existsSync(oldestFile)) {\n      await unlink(oldestFile);\n    }\n    \n    // Rotate existing files\n    for (let i = maxFiles - 1; i >= 1; i--) {\n      const currentFile = i === 1 ? filePath : `${filePath}.${i}`;\n      const nextFile = `${filePath}.${i + 1}`;\n      \n      if (existsSync(currentFile)) {\n        await rename(currentFile, nextFile);\n      }\n    }\n  } catch (error) {\n    // Silently fail rotation\n    if (process.env.NODE_ENV === 'development') {\n      console.error('Failed to rotate log file:', error);\n    }\n  }\n}\n\n/**\n * Create a logger instance\n */\nexport function createLogger(config: Partial<LoggerConfig> = {}): Logger {\n  const finalConfig: LoggerConfig = { ...DEFAULT_CONFIG, ...config };\n  \n  const logger: Logger = {\n    debug(message: string, ...args: any[]): void {\n      this.log(LogLevel.DEBUG, message, ...args);\n    },\n    \n    info(message: string, ...args: any[]): void {\n      this.log(LogLevel.INFO, message, ...args);\n    },\n    \n    warn(message: string, ...args: any[]): void {\n      this.log(LogLevel.WARN, message, ...args);\n    },\n    \n    error(message: string, ...args: any[]): void {\n      this.log(LogLevel.ERROR, message, ...args);\n    },\n    \n    log(level: LogLevel, message: string, ...args: any[]): void {\n      // Check if level is enabled\n      if (level < finalConfig.level) {\n        return;\n      }\n      \n      // Format message\n      const formattedMessage = formatMessage(level, message, finalConfig);\n      \n      // Add additional arguments\n      const fullMessage = args.length > 0 \n        ? `${formattedMessage} ${args.map(arg => \n            typeof arg === 'object' ? JSON.stringify(arg, null, 2) : String(arg)\n          ).join(' ')}`\n        : formattedMessage;\n      \n      // Console output\n      if (finalConfig.console) {\n        const icon = getLevelIcon(level);\n        const consoleMessage = icon ? `${icon} ${fullMessage}` : fullMessage;\n        \n        switch (level) {\n          case LogLevel.DEBUG:\n            console.debug(consoleMessage);\n            break;\n          case LogLevel.INFO:\n            console.info(consoleMessage);\n            break;\n          case LogLevel.WARN:\n            console.warn(consoleMessage);\n            break;\n          case LogLevel.ERROR:\n            console.error(consoleMessage);\n            break;\n        }\n      }\n      \n      // File output\n      if (finalConfig.file) {\n        // Remove ANSI colors for file output\n        const cleanMessage = fullMessage.replace(/\\x1b\\[[0-9;]*m/g, '');\n        writeToFile(finalConfig.file, cleanMessage, finalConfig).catch(() => {\n          // Silently fail\n        });\n      }\n    },\n    \n    setLevel(level: LogLevel): void {\n      finalConfig.level = level;\n    },\n    \n    getLevel(): LogLevel {\n      return finalConfig.level;\n    },\n    \n    enableColors(enabled: boolean): void {\n      finalConfig.colors = enabled;\n    },\n    \n    enableTimestamps(enabled: boolean): void {\n      finalConfig.timestamps = enabled;\n    },\n    \n    setPrefix(prefix: string): void {\n      finalConfig.prefix = prefix;\n    },\n    \n    child(prefix: string): Logger {\n      const childConfig = { ...finalConfig };\n      childConfig.prefix = finalConfig.prefix \n        ? `${finalConfig.prefix}:${prefix}`\n        : prefix;\n      \n      return createLogger(childConfig);\n    },\n  };\n  \n  return logger;\n}\n\n/**\n * Default logger instance\n */\nexport const logger = createLogger();\n\n/**\n * Quick logging functions\n */\nexport const debug = (message: string, ...args: any[]) => logger.debug(message, ...args);\nexport const info = (message: string, ...args: any[]) => logger.info(message, ...args);\nexport const warn = (message: string, ...args: any[]) => logger.warn(message, ...args);\nexport const error = (message: string, ...args: any[]) => logger.error(message, ...args);\n"],
      version: 3
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "a13492028bdc5405d648fb81c2cc0043a96ae174"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_1v7vu9bedu = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_1v7vu9bedu();
/**
 * Logger Utilities
 *
 * Provides logging functionality with colors, levels, and formatting.
 * Supports console and file output with configurable verbosity.
 */
import { writeFile } from 'fs/promises';
import { existsSync, mkdirSync } from 'fs';
import { dirname } from 'path';
/**
 * Log levels in order of severity
 */
export var LogLevel;
/* istanbul ignore next */
cov_1v7vu9bedu().s[0]++;
(function (LogLevel) {
  /* istanbul ignore next */
  cov_1v7vu9bedu().f[0]++;
  cov_1v7vu9bedu().s[1]++;
  LogLevel[LogLevel["DEBUG"] = 0] = "DEBUG";
  /* istanbul ignore next */
  cov_1v7vu9bedu().s[2]++;
  LogLevel[LogLevel["INFO"] = 1] = "INFO";
  /* istanbul ignore next */
  cov_1v7vu9bedu().s[3]++;
  LogLevel[LogLevel["WARN"] = 2] = "WARN";
  /* istanbul ignore next */
  cov_1v7vu9bedu().s[4]++;
  LogLevel[LogLevel["ERROR"] = 3] = "ERROR";
  /* istanbul ignore next */
  cov_1v7vu9bedu().s[5]++;
  LogLevel[LogLevel["SILENT"] = 4] = "SILENT";
})(
/* istanbul ignore next */
(cov_1v7vu9bedu().b[0][0]++, LogLevel) ||
/* istanbul ignore next */
(cov_1v7vu9bedu().b[0][1]++, LogLevel = {}));
/**
 * ANSI color codes
 */
export const Colors =
/* istanbul ignore next */
(cov_1v7vu9bedu().s[6]++, {
  reset: '\x1b[0m',
  bright: '\x1b[1m',
  dim: '\x1b[2m',
  underscore: '\x1b[4m',
  blink: '\x1b[5m',
  reverse: '\x1b[7m',
  hidden: '\x1b[8m',
  // Foreground colors
  black: '\x1b[30m',
  red: '\x1b[31m',
  green: '\x1b[32m',
  yellow: '\x1b[33m',
  blue: '\x1b[34m',
  magenta: '\x1b[35m',
  cyan: '\x1b[36m',
  white: '\x1b[37m',
  // Background colors
  bgBlack: '\x1b[40m',
  bgRed: '\x1b[41m',
  bgGreen: '\x1b[42m',
  bgYellow: '\x1b[43m',
  bgBlue: '\x1b[44m',
  bgMagenta: '\x1b[45m',
  bgCyan: '\x1b[46m',
  bgWhite: '\x1b[47m',
  // Bright colors
  brightBlack: '\x1b[90m',
  brightRed: '\x1b[91m',
  brightGreen: '\x1b[92m',
  brightYellow: '\x1b[93m',
  brightBlue: '\x1b[94m',
  brightMagenta: '\x1b[95m',
  brightCyan: '\x1b[96m',
  brightWhite: '\x1b[97m'
});
/**
 * Default logger configuration
 */
const DEFAULT_CONFIG =
/* istanbul ignore next */
(cov_1v7vu9bedu().s[7]++, {
  level: LogLevel.INFO,
  colors: true,
  timestamps: true,
  showLevel: true,
  console: true,
  maxFileSize: 10 * 1024 * 1024,
  // 10MB
  maxFiles: 5
});
/**
 * Colorize text with ANSI colors
 */
export function colorize(text, color) {
  /* istanbul ignore next */
  cov_1v7vu9bedu().f[1]++;
  cov_1v7vu9bedu().s[8]++;
  return `${Colors[color]}${text}${Colors.reset}`;
}
/**
 * Format log message with timestamp, level, and prefix
 */
export function formatMessage(level, message, config, prefix) {
  /* istanbul ignore next */
  cov_1v7vu9bedu().f[2]++;
  const parts =
  /* istanbul ignore next */
  (cov_1v7vu9bedu().s[9]++, []);
  // Add timestamp
  /* istanbul ignore next */
  cov_1v7vu9bedu().s[10]++;
  if (config.timestamps) {
    /* istanbul ignore next */
    cov_1v7vu9bedu().b[1][0]++;
    const timestamp =
    /* istanbul ignore next */
    (cov_1v7vu9bedu().s[11]++, new Date().toISOString());
    const timestampStr =
    /* istanbul ignore next */
    (cov_1v7vu9bedu().s[12]++, config.colors ?
    /* istanbul ignore next */
    (cov_1v7vu9bedu().b[2][0]++, colorize(timestamp, 'dim')) :
    /* istanbul ignore next */
    (cov_1v7vu9bedu().b[2][1]++, timestamp));
    /* istanbul ignore next */
    cov_1v7vu9bedu().s[13]++;
    parts.push(`[${timestampStr}]`);
  } else
  /* istanbul ignore next */
  {
    cov_1v7vu9bedu().b[1][1]++;
  }
  // Add log level
  cov_1v7vu9bedu().s[14]++;
  if (config.showLevel) {
    /* istanbul ignore next */
    cov_1v7vu9bedu().b[3][0]++;
    const levelName =
    /* istanbul ignore next */
    (cov_1v7vu9bedu().s[15]++, LogLevel[level].toUpperCase().padEnd(5));
    let levelStr =
    /* istanbul ignore next */
    (cov_1v7vu9bedu().s[16]++, levelName);
    /* istanbul ignore next */
    cov_1v7vu9bedu().s[17]++;
    if (config.colors) {
      /* istanbul ignore next */
      cov_1v7vu9bedu().b[4][0]++;
      cov_1v7vu9bedu().s[18]++;
      switch (level) {
        case LogLevel.DEBUG:
          /* istanbul ignore next */
          cov_1v7vu9bedu().b[5][0]++;
          cov_1v7vu9bedu().s[19]++;
          levelStr = colorize(levelName, 'cyan');
          /* istanbul ignore next */
          cov_1v7vu9bedu().s[20]++;
          break;
        case LogLevel.INFO:
          /* istanbul ignore next */
          cov_1v7vu9bedu().b[5][1]++;
          cov_1v7vu9bedu().s[21]++;
          levelStr = colorize(levelName, 'green');
          /* istanbul ignore next */
          cov_1v7vu9bedu().s[22]++;
          break;
        case LogLevel.WARN:
          /* istanbul ignore next */
          cov_1v7vu9bedu().b[5][2]++;
          cov_1v7vu9bedu().s[23]++;
          levelStr = colorize(levelName, 'yellow');
          /* istanbul ignore next */
          cov_1v7vu9bedu().s[24]++;
          break;
        case LogLevel.ERROR:
          /* istanbul ignore next */
          cov_1v7vu9bedu().b[5][3]++;
          cov_1v7vu9bedu().s[25]++;
          levelStr = colorize(levelName, 'red');
          /* istanbul ignore next */
          cov_1v7vu9bedu().s[26]++;
          break;
      }
    } else
    /* istanbul ignore next */
    {
      cov_1v7vu9bedu().b[4][1]++;
    }
    cov_1v7vu9bedu().s[27]++;
    parts.push(`[${levelStr}]`);
  } else
  /* istanbul ignore next */
  {
    cov_1v7vu9bedu().b[3][1]++;
  }
  // Add prefix
  const combinedPrefix =
  /* istanbul ignore next */
  (cov_1v7vu9bedu().s[28]++, [config.prefix, prefix].filter(Boolean).join(':'));
  /* istanbul ignore next */
  cov_1v7vu9bedu().s[29]++;
  if (combinedPrefix) {
    /* istanbul ignore next */
    cov_1v7vu9bedu().b[6][0]++;
    const prefixStr =
    /* istanbul ignore next */
    (cov_1v7vu9bedu().s[30]++, config.colors ?
    /* istanbul ignore next */
    (cov_1v7vu9bedu().b[7][0]++, colorize(combinedPrefix, 'magenta')) :
    /* istanbul ignore next */
    (cov_1v7vu9bedu().b[7][1]++, combinedPrefix));
    /* istanbul ignore next */
    cov_1v7vu9bedu().s[31]++;
    parts.push(`[${prefixStr}]`);
  } else
  /* istanbul ignore next */
  {
    cov_1v7vu9bedu().b[6][1]++;
  }
  // Add message
  cov_1v7vu9bedu().s[32]++;
  parts.push(message);
  /* istanbul ignore next */
  cov_1v7vu9bedu().s[33]++;
  return parts.join(' ');
}
/**
 * Get log level icons
 */
function getLevelIcon(level) {
  /* istanbul ignore next */
  cov_1v7vu9bedu().f[3]++;
  cov_1v7vu9bedu().s[34]++;
  switch (level) {
    case LogLevel.DEBUG:
      /* istanbul ignore next */
      cov_1v7vu9bedu().b[8][0]++;
      cov_1v7vu9bedu().s[35]++;
      return '🐛';
    case LogLevel.INFO:
      /* istanbul ignore next */
      cov_1v7vu9bedu().b[8][1]++;
      cov_1v7vu9bedu().s[36]++;
      return 'ℹ️';
    case LogLevel.WARN:
      /* istanbul ignore next */
      cov_1v7vu9bedu().b[8][2]++;
      cov_1v7vu9bedu().s[37]++;
      return '⚠️';
    case LogLevel.ERROR:
      /* istanbul ignore next */
      cov_1v7vu9bedu().b[8][3]++;
      cov_1v7vu9bedu().s[38]++;
      return '❌';
    default:
      /* istanbul ignore next */
      cov_1v7vu9bedu().b[8][4]++;
      cov_1v7vu9bedu().s[39]++;
      return '';
  }
}
/**
 * Write log to file with rotation
 */
async function writeToFile(filePath, message, config) {
  /* istanbul ignore next */
  cov_1v7vu9bedu().f[4]++;
  cov_1v7vu9bedu().s[40]++;
  try {
    // Ensure directory exists
    const dir =
    /* istanbul ignore next */
    (cov_1v7vu9bedu().s[41]++, dirname(filePath));
    /* istanbul ignore next */
    cov_1v7vu9bedu().s[42]++;
    if (!existsSync(dir)) {
      /* istanbul ignore next */
      cov_1v7vu9bedu().b[9][0]++;
      cov_1v7vu9bedu().s[43]++;
      mkdirSync(dir, {
        recursive: true
      });
    } else
    /* istanbul ignore next */
    {
      cov_1v7vu9bedu().b[9][1]++;
    }
    // Check file size for rotation
    cov_1v7vu9bedu().s[44]++;
    if (
    /* istanbul ignore next */
    (cov_1v7vu9bedu().b[11][0]++, existsSync(filePath)) &&
    /* istanbul ignore next */
    (cov_1v7vu9bedu().b[11][1]++, config.maxFileSize)) {
      /* istanbul ignore next */
      cov_1v7vu9bedu().b[10][0]++;
      const stats =
      /* istanbul ignore next */
      (cov_1v7vu9bedu().s[45]++, await import('fs/promises').then(fs => {
        /* istanbul ignore next */
        cov_1v7vu9bedu().f[5]++;
        cov_1v7vu9bedu().s[46]++;
        return fs.stat(filePath);
      }));
      /* istanbul ignore next */
      cov_1v7vu9bedu().s[47]++;
      if (stats.size > config.maxFileSize) {
        /* istanbul ignore next */
        cov_1v7vu9bedu().b[12][0]++;
        cov_1v7vu9bedu().s[48]++;
        await rotateLogFile(filePath,
        /* istanbul ignore next */
        (cov_1v7vu9bedu().b[13][0]++, config.maxFiles) ||
        /* istanbul ignore next */
        (cov_1v7vu9bedu().b[13][1]++, 5));
      } else
      /* istanbul ignore next */
      {
        cov_1v7vu9bedu().b[12][1]++;
      }
    } else
    /* istanbul ignore next */
    {
      cov_1v7vu9bedu().b[10][1]++;
    }
    // Append to file
    cov_1v7vu9bedu().s[49]++;
    await writeFile(filePath, message + '\n', {
      flag: 'a'
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_1v7vu9bedu().s[50]++;
    // Silently fail file logging to avoid infinite loops
    if (process.env.NODE_ENV === 'development') {
      /* istanbul ignore next */
      cov_1v7vu9bedu().b[14][0]++;
      cov_1v7vu9bedu().s[51]++;
      console.error('Failed to write to log file:', error);
    } else
    /* istanbul ignore next */
    {
      cov_1v7vu9bedu().b[14][1]++;
    }
  }
}
/**
 * Rotate log files
 */
async function rotateLogFile(filePath, maxFiles) {
  /* istanbul ignore next */
  cov_1v7vu9bedu().f[6]++;
  const {
    rename,
    unlink
  } =
  /* istanbul ignore next */
  (cov_1v7vu9bedu().s[52]++, await import('fs/promises'));
  /* istanbul ignore next */
  cov_1v7vu9bedu().s[53]++;
  try {
    // Remove oldest file if it exists
    const oldestFile =
    /* istanbul ignore next */
    (cov_1v7vu9bedu().s[54]++, `${filePath}.${maxFiles}`);
    /* istanbul ignore next */
    cov_1v7vu9bedu().s[55]++;
    if (existsSync(oldestFile)) {
      /* istanbul ignore next */
      cov_1v7vu9bedu().b[15][0]++;
      cov_1v7vu9bedu().s[56]++;
      await unlink(oldestFile);
    } else
    /* istanbul ignore next */
    {
      cov_1v7vu9bedu().b[15][1]++;
    }
    // Rotate existing files
    cov_1v7vu9bedu().s[57]++;
    for (let i =
    /* istanbul ignore next */
    (cov_1v7vu9bedu().s[58]++, maxFiles - 1); i >= 1; i--) {
      const currentFile =
      /* istanbul ignore next */
      (cov_1v7vu9bedu().s[59]++, i === 1 ?
      /* istanbul ignore next */
      (cov_1v7vu9bedu().b[16][0]++, filePath) :
      /* istanbul ignore next */
      (cov_1v7vu9bedu().b[16][1]++, `${filePath}.${i}`));
      const nextFile =
      /* istanbul ignore next */
      (cov_1v7vu9bedu().s[60]++, `${filePath}.${i + 1}`);
      /* istanbul ignore next */
      cov_1v7vu9bedu().s[61]++;
      if (existsSync(currentFile)) {
        /* istanbul ignore next */
        cov_1v7vu9bedu().b[17][0]++;
        cov_1v7vu9bedu().s[62]++;
        await rename(currentFile, nextFile);
      } else
      /* istanbul ignore next */
      {
        cov_1v7vu9bedu().b[17][1]++;
      }
    }
  } catch (error) {
    /* istanbul ignore next */
    cov_1v7vu9bedu().s[63]++;
    // Silently fail rotation
    if (process.env.NODE_ENV === 'development') {
      /* istanbul ignore next */
      cov_1v7vu9bedu().b[18][0]++;
      cov_1v7vu9bedu().s[64]++;
      console.error('Failed to rotate log file:', error);
    } else
    /* istanbul ignore next */
    {
      cov_1v7vu9bedu().b[18][1]++;
    }
  }
}
/**
 * Create a logger instance
 */
export function createLogger(config =
/* istanbul ignore next */
(cov_1v7vu9bedu().b[19][0]++, {})) {
  /* istanbul ignore next */
  cov_1v7vu9bedu().f[7]++;
  const finalConfig =
  /* istanbul ignore next */
  (cov_1v7vu9bedu().s[65]++, {
    ...DEFAULT_CONFIG,
    ...config
  });
  const logger =
  /* istanbul ignore next */
  (cov_1v7vu9bedu().s[66]++, {
    debug(message, ...args) {
      /* istanbul ignore next */
      cov_1v7vu9bedu().f[8]++;
      cov_1v7vu9bedu().s[67]++;
      this.log(LogLevel.DEBUG, message, ...args);
    },
    info(message, ...args) {
      /* istanbul ignore next */
      cov_1v7vu9bedu().f[9]++;
      cov_1v7vu9bedu().s[68]++;
      this.log(LogLevel.INFO, message, ...args);
    },
    warn(message, ...args) {
      /* istanbul ignore next */
      cov_1v7vu9bedu().f[10]++;
      cov_1v7vu9bedu().s[69]++;
      this.log(LogLevel.WARN, message, ...args);
    },
    error(message, ...args) {
      /* istanbul ignore next */
      cov_1v7vu9bedu().f[11]++;
      cov_1v7vu9bedu().s[70]++;
      this.log(LogLevel.ERROR, message, ...args);
    },
    log(level, message, ...args) {
      /* istanbul ignore next */
      cov_1v7vu9bedu().f[12]++;
      cov_1v7vu9bedu().s[71]++;
      // Check if level is enabled
      if (level < finalConfig.level) {
        /* istanbul ignore next */
        cov_1v7vu9bedu().b[20][0]++;
        cov_1v7vu9bedu().s[72]++;
        return;
      } else
      /* istanbul ignore next */
      {
        cov_1v7vu9bedu().b[20][1]++;
      }
      // Format message
      const formattedMessage =
      /* istanbul ignore next */
      (cov_1v7vu9bedu().s[73]++, formatMessage(level, message, finalConfig));
      // Add additional arguments
      const fullMessage =
      /* istanbul ignore next */
      (cov_1v7vu9bedu().s[74]++, args.length > 0 ?
      /* istanbul ignore next */
      (cov_1v7vu9bedu().b[21][0]++, `${formattedMessage} ${args.map(arg => {
        /* istanbul ignore next */
        cov_1v7vu9bedu().f[13]++;
        cov_1v7vu9bedu().s[75]++;
        return typeof arg === 'object' ?
        /* istanbul ignore next */
        (cov_1v7vu9bedu().b[22][0]++, JSON.stringify(arg, null, 2)) :
        /* istanbul ignore next */
        (cov_1v7vu9bedu().b[22][1]++, String(arg));
      }).join(' ')}`) :
      /* istanbul ignore next */
      (cov_1v7vu9bedu().b[21][1]++, formattedMessage));
      // Console output
      /* istanbul ignore next */
      cov_1v7vu9bedu().s[76]++;
      if (finalConfig.console) {
        /* istanbul ignore next */
        cov_1v7vu9bedu().b[23][0]++;
        const icon =
        /* istanbul ignore next */
        (cov_1v7vu9bedu().s[77]++, getLevelIcon(level));
        const consoleMessage =
        /* istanbul ignore next */
        (cov_1v7vu9bedu().s[78]++, icon ?
        /* istanbul ignore next */
        (cov_1v7vu9bedu().b[24][0]++, `${icon} ${fullMessage}`) :
        /* istanbul ignore next */
        (cov_1v7vu9bedu().b[24][1]++, fullMessage));
        /* istanbul ignore next */
        cov_1v7vu9bedu().s[79]++;
        switch (level) {
          case LogLevel.DEBUG:
            /* istanbul ignore next */
            cov_1v7vu9bedu().b[25][0]++;
            cov_1v7vu9bedu().s[80]++;
            console.debug(consoleMessage);
            /* istanbul ignore next */
            cov_1v7vu9bedu().s[81]++;
            break;
          case LogLevel.INFO:
            /* istanbul ignore next */
            cov_1v7vu9bedu().b[25][1]++;
            cov_1v7vu9bedu().s[82]++;
            console.info(consoleMessage);
            /* istanbul ignore next */
            cov_1v7vu9bedu().s[83]++;
            break;
          case LogLevel.WARN:
            /* istanbul ignore next */
            cov_1v7vu9bedu().b[25][2]++;
            cov_1v7vu9bedu().s[84]++;
            console.warn(consoleMessage);
            /* istanbul ignore next */
            cov_1v7vu9bedu().s[85]++;
            break;
          case LogLevel.ERROR:
            /* istanbul ignore next */
            cov_1v7vu9bedu().b[25][3]++;
            cov_1v7vu9bedu().s[86]++;
            console.error(consoleMessage);
            /* istanbul ignore next */
            cov_1v7vu9bedu().s[87]++;
            break;
        }
      } else
      /* istanbul ignore next */
      {
        cov_1v7vu9bedu().b[23][1]++;
      }
      // File output
      cov_1v7vu9bedu().s[88]++;
      if (finalConfig.file) {
        /* istanbul ignore next */
        cov_1v7vu9bedu().b[26][0]++;
        // Remove ANSI colors for file output
        const cleanMessage =
        /* istanbul ignore next */
        (cov_1v7vu9bedu().s[89]++, fullMessage.replace(/\x1b\[[0-9;]*m/g, ''));
        /* istanbul ignore next */
        cov_1v7vu9bedu().s[90]++;
        writeToFile(finalConfig.file, cleanMessage, finalConfig).catch(() => {
          /* istanbul ignore next */
          cov_1v7vu9bedu().f[14]++;
        } // Silently fail
        );
      } else
      /* istanbul ignore next */
      {
        cov_1v7vu9bedu().b[26][1]++;
      }
    },
    setLevel(level) {
      /* istanbul ignore next */
      cov_1v7vu9bedu().f[15]++;
      cov_1v7vu9bedu().s[91]++;
      finalConfig.level = level;
    },
    getLevel() {
      /* istanbul ignore next */
      cov_1v7vu9bedu().f[16]++;
      cov_1v7vu9bedu().s[92]++;
      return finalConfig.level;
    },
    enableColors(enabled) {
      /* istanbul ignore next */
      cov_1v7vu9bedu().f[17]++;
      cov_1v7vu9bedu().s[93]++;
      finalConfig.colors = enabled;
    },
    enableTimestamps(enabled) {
      /* istanbul ignore next */
      cov_1v7vu9bedu().f[18]++;
      cov_1v7vu9bedu().s[94]++;
      finalConfig.timestamps = enabled;
    },
    setPrefix(prefix) {
      /* istanbul ignore next */
      cov_1v7vu9bedu().f[19]++;
      cov_1v7vu9bedu().s[95]++;
      finalConfig.prefix = prefix;
    },
    child(prefix) {
      /* istanbul ignore next */
      cov_1v7vu9bedu().f[20]++;
      const childConfig =
      /* istanbul ignore next */
      (cov_1v7vu9bedu().s[96]++, {
        ...finalConfig
      });
      /* istanbul ignore next */
      cov_1v7vu9bedu().s[97]++;
      childConfig.prefix = finalConfig.prefix ?
      /* istanbul ignore next */
      (cov_1v7vu9bedu().b[27][0]++, `${finalConfig.prefix}:${prefix}`) :
      /* istanbul ignore next */
      (cov_1v7vu9bedu().b[27][1]++, prefix);
      /* istanbul ignore next */
      cov_1v7vu9bedu().s[98]++;
      return createLogger(childConfig);
    }
  });
  /* istanbul ignore next */
  cov_1v7vu9bedu().s[99]++;
  return logger;
}
/**
 * Default logger instance
 */
export const logger =
/* istanbul ignore next */
(cov_1v7vu9bedu().s[100]++, createLogger());
/**
 * Quick logging functions
 */
/* istanbul ignore next */
cov_1v7vu9bedu().s[101]++;
export const debug = (message, ...args) => {
  /* istanbul ignore next */
  cov_1v7vu9bedu().f[21]++;
  cov_1v7vu9bedu().s[102]++;
  return logger.debug(message, ...args);
};
/* istanbul ignore next */
cov_1v7vu9bedu().s[103]++;
export const info = (message, ...args) => {
  /* istanbul ignore next */
  cov_1v7vu9bedu().f[22]++;
  cov_1v7vu9bedu().s[104]++;
  return logger.info(message, ...args);
};
/* istanbul ignore next */
cov_1v7vu9bedu().s[105]++;
export const warn = (message, ...args) => {
  /* istanbul ignore next */
  cov_1v7vu9bedu().f[23]++;
  cov_1v7vu9bedu().s[106]++;
  return logger.warn(message, ...args);
};
/* istanbul ignore next */
cov_1v7vu9bedu().s[107]++;
export const error = (message, ...args) => {
  /* istanbul ignore next */
  cov_1v7vu9bedu().f[24]++;
  cov_1v7vu9bedu().s[108]++;
  return logger.error(message, ...args);
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,