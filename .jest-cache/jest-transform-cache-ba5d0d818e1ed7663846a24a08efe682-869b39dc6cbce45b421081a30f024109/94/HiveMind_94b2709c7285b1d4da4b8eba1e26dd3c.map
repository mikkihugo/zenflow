{"version":3,"names":["cov_1w12xgq2kq","actualCoverage","EventEmitter","v4","uuidv4","Queen","Agent","Memory","Communication","DatabaseManager","SwarmOrchestrator","ConsensusEngine","HiveMind","id","config","queen","agents","memory","communication","orchestrator","consensus","db","started","s","startTime","constructor","f","Map","Date","now","initialize","getInstance","createSwarm","name","topology","queenMode","maxAgents","consensusThreshold","memoryTTL","JSON","stringify","swarmId","mode","Promise","all","setActiveSwarm","autoSpawn","b","autoSpawnAgents","emit","error","load","swarmData","getSwarm","Error","parse","hiveMind","getAgents","agentData","agent","type","capabilities","set","topologyConfigs","hierarchical","count","mesh","ring","star","spawnedAgents","agentConfig","i","spawnAgent","push","options","size","getDefaultCapabilities","registerAgent","createAgent","status","addAgent","autoAssign","assignPendingTasksToAgent","submitTask","task","description","priority","strategy","progress","dependencies","assignedAgents","requireConsensus","requiredCapabilities","createdAt","metadata","createTask","onTaskSubmitted","getFullStatus","Array","from","values","tasks","getTasks","memoryStats","getStats","communicationStats","agentsByType","reduce","acc","taskStats","total","length","pending","filter","t","inProgress","completed","failed","performance","calculatePerformanceMetrics","health","determineHealth","warnings","getSystemWarnings","uptime","map","a","currentTask","messageCount","getTime","assignedAgent","assigned_agents","totalAgents","activeAgents","pendingTasks","availableCapacity","Math","round","getTask","taskId","cancelTask","updateTaskStatus","retryTask","originalTask","newTask","require_consensus","max_agents","required_capabilities","retryOf","rebalanceAgents","rebalance","shutdown","capabilityMap","coordinator","researcher","coder","analyst","architect","tester","reviewer","optimizer","documenter","monitor","specialist","requirements_analyst","design_architect","task_planner","implementation_coder","quality_reviewer","steering_documenter","getPendingTasks","every","cap","includes","assignTaskToAgent","avgTaskCompletion","messageThroughput","consensusSuccessRate","memoryHitRate","agentUtilization","busyAgents","utilization"],"sources":["/home/mhugo/code/claude-code-flow/src/hive-mind/core/HiveMind.ts"],"sourcesContent":["/**\n * HiveMind Core Class\n *\n * Main orchestrator for the collective intelligence swarm system.\n * Manages agents, tasks, memory, and coordination.\n */\n\nimport { EventEmitter } from 'events';\nimport { v4 as uuidv4 } from 'uuid';\nimport { Queen } from './Queen.js';\nimport { Agent } from './Agent.js';\nimport { Memory } from './Memory.js';\nimport { Communication } from './Communication.js';\nimport { DatabaseManager } from './DatabaseManager.js';\nimport { SwarmOrchestrator } from '../integration/SwarmOrchestrator.js';\nimport { ConsensusEngine } from '../integration/ConsensusEngine.js';\nimport {\n  HiveMindConfig,\n  SwarmTopology,\n  AgentType,\n  Task,\n  TaskPriority,\n  TaskStrategy,\n  SwarmStatus,\n  AgentSpawnOptions,\n  TaskSubmitOptions,\n} from '../types.js';\n\nexport class HiveMind extends EventEmitter {\n  private id: string;\n  private config: HiveMindConfig;\n  private queen: Queen;\n  private agents: Map<string, Agent>;\n  private memory: Memory;\n  private communication: Communication;\n  private orchestrator: SwarmOrchestrator;\n  private consensus: ConsensusEngine;\n  private db: DatabaseManager;\n  private started: boolean = false;\n  private startTime: number;\n\n  constructor(config: HiveMindConfig) {\n    super();\n    this.config = config;\n    this.id = uuidv4();\n    this.agents = new Map();\n    this.startTime = Date.now();\n  }\n\n  /**\n   * Initialize the Hive Mind and all subsystems\n   */\n  async initialize(): Promise<string> {\n    try {\n      // Initialize database\n      this.db = await DatabaseManager.getInstance();\n\n      // Create swarm in database\n      await this.db.createSwarm({\n        id: this.id,\n        name: this.config.name,\n        topology: this.config.topology,\n        queenMode: this.config.queenMode,\n        maxAgents: this.config.maxAgents,\n        consensusThreshold: this.config.consensusThreshold,\n        memoryTTL: this.config.memoryTTL,\n        config: JSON.stringify(this.config),\n      });\n\n      // Initialize Queen\n      this.queen = new Queen({\n        swarmId: this.id,\n        mode: this.config.queenMode,\n        topology: this.config.topology,\n      });\n\n      // Initialize subsystems\n      this.memory = new Memory(this.id);\n      this.communication = new Communication(this.id);\n      this.orchestrator = new SwarmOrchestrator(this);\n      this.consensus = new ConsensusEngine(this.config.consensusThreshold);\n\n      // Initialize subsystems\n      await Promise.all([\n        this.queen.initialize(),\n        this.memory.initialize(),\n        this.communication.initialize(),\n        this.orchestrator.initialize(),\n      ]);\n\n      // Set as active swarm\n      await this.db.setActiveSwarm(this.id);\n\n      // Auto-spawn agents if configured\n      if (this.config.autoSpawn) {\n        await this.autoSpawnAgents();\n      }\n\n      this.started = true;\n      this.emit('initialized', { swarmId: this.id });\n\n      return this.id;\n    } catch (error) {\n      this.emit('error', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Load an existing Hive Mind from the database\n   */\n  static async load(swarmId: string): Promise<HiveMind> {\n    const db = await DatabaseManager.getInstance();\n    const swarmData = await db.getSwarm(swarmId);\n\n    if (!swarmData) {\n      throw new Error(`Swarm ${swarmId} not found`);\n    }\n\n    const config = JSON.parse(swarmData.config);\n    const hiveMind = new HiveMind(config);\n    hiveMind.id = swarmId;\n\n    await hiveMind.initialize();\n\n    // Load existing agents\n    const agents = await db.getAgents(swarmId);\n    for (const agentData of agents) {\n      const agent = new Agent({\n        id: agentData.id,\n        name: agentData.name,\n        type: agentData.type,\n        swarmId: swarmId,\n        capabilities: JSON.parse(agentData.capabilities),\n      });\n\n      await agent.initialize();\n      hiveMind.agents.set(agent.id, agent);\n    }\n\n    return hiveMind;\n  }\n\n  /**\n   * Auto-spawn initial agents based on topology\n   */\n  async autoSpawnAgents(): Promise<Agent[]> {\n    const topologyConfigs = {\n      hierarchical: [\n        { type: 'coordinator', count: 1 },\n        { type: 'researcher', count: 2 },\n        { type: 'coder', count: 2 },\n        { type: 'analyst', count: 1 },\n        { type: 'tester', count: 1 },\n      ],\n      mesh: [\n        { type: 'coordinator', count: 2 },\n        { type: 'researcher', count: 2 },\n        { type: 'coder', count: 2 },\n        { type: 'specialist', count: 2 },\n      ],\n      ring: [\n        { type: 'coordinator', count: 1 },\n        { type: 'coder', count: 3 },\n        { type: 'reviewer', count: 2 },\n      ],\n      star: [\n        { type: 'coordinator', count: 1 },\n        { type: 'specialist', count: 4 },\n      ],\n      // Maestro specs-driven topology\n      'specs-driven': [\n        { type: 'requirements_analyst', count: 1 },\n        { type: 'design_architect', count: 2 },\n        { type: 'task_planner', count: 1 },\n        { type: 'implementation_coder', count: 2 },\n        { type: 'quality_reviewer', count: 1 },\n        { type: 'steering_documenter', count: 1 },\n      ],\n    };\n\n    const config = topologyConfigs[this.config.topology];\n    const spawnedAgents: Agent[] = [];\n\n    for (const agentConfig of config) {\n      for (let i = 0; i < agentConfig.count; i++) {\n        const agent = await this.spawnAgent({\n          type: agentConfig.type as AgentType,\n          name: `${agentConfig.type}-${i + 1}`,\n        });\n        spawnedAgents.push(agent);\n      }\n    }\n\n    return spawnedAgents;\n  }\n\n  /**\n   * Spawn a new agent into the swarm\n   */\n  async spawnAgent(options: AgentSpawnOptions): Promise<Agent> {\n    if (this.agents.size >= this.config.maxAgents) {\n      throw new Error('Maximum agent limit reached');\n    }\n\n    const agent = new Agent({\n      name: options.name || `${options.type}-${Date.now()}`,\n      type: options.type,\n      swarmId: this.id,\n      capabilities: options.capabilities || this.getDefaultCapabilities(options.type),\n    });\n\n    await agent.initialize();\n\n    // Register with Queen\n    await this.queen.registerAgent(agent);\n\n    // Store in database\n    await this.db.createAgent({\n      id: agent.id,\n      swarmId: this.id,\n      name: agent.name,\n      type: agent.type,\n      capabilities: JSON.stringify(agent.capabilities),\n      status: 'idle',\n    });\n\n    // Add to local map\n    this.agents.set(agent.id, agent);\n\n    // Setup communication channels\n    this.communication.addAgent(agent);\n\n    // Auto-assign to pending tasks if configured\n    if (options.autoAssign) {\n      await this.assignPendingTasksToAgent(agent);\n    }\n\n    this.emit('agentSpawned', { agent });\n\n    return agent;\n  }\n\n  /**\n   * Submit a task to the Hive Mind\n   */\n  async submitTask(options: TaskSubmitOptions): Promise<Task> {\n    const task: Task = {\n      id: uuidv4(),\n      swarmId: this.id,\n      description: options.description,\n      priority: options.priority,\n      strategy: options.strategy,\n      status: 'pending',\n      progress: 0,\n      dependencies: options.dependencies || [],\n      assignedAgents: [],\n      requireConsensus: options.requireConsensus || false,\n      maxAgents: options.maxAgents || 3,\n      requiredCapabilities: options.requiredCapabilities || [],\n      createdAt: new Date(),\n      metadata: options.metadata || {},\n    };\n\n    // Store in database\n    await this.db.createTask({\n      ...task,\n      dependencies: JSON.stringify(task.dependencies),\n      assignedAgents: JSON.stringify(task.assignedAgents),\n      requiredCapabilities: JSON.stringify(task.requiredCapabilities),\n      metadata: JSON.stringify(task.metadata),\n    });\n\n    // Submit to orchestrator\n    await this.orchestrator.submitTask(task);\n\n    // Notify Queen\n    await this.queen.onTaskSubmitted(task);\n\n    this.emit('taskSubmitted', { task });\n\n    return task;\n  }\n\n  /**\n   * Get full status of the Hive Mind\n   */\n  async getFullStatus(): Promise<SwarmStatus> {\n    const agents = Array.from(this.agents.values());\n    const tasks = await this.db.getTasks(this.id);\n    const memoryStats = await this.memory.getStats();\n    const communicationStats = await this.communication.getStats();\n\n    // Calculate agent statistics\n    const agentsByType = agents.reduce(\n      (acc, agent) => {\n        acc[agent.type] = (acc[agent.type] || 0) + 1;\n        return acc;\n      },\n      {} as Record<string, number>,\n    );\n\n    // Calculate task statistics\n    const taskStats = {\n      total: tasks.length,\n      pending: tasks.filter((t) => t.status === 'pending').length,\n      inProgress: tasks.filter((t) => t.status === 'in_progress').length,\n      completed: tasks.filter((t) => t.status === 'completed').length,\n      failed: tasks.filter((t) => t.status === 'failed').length,\n    };\n\n    // Calculate performance metrics\n    const performance = await this.calculatePerformanceMetrics();\n\n    // Determine health status\n    const health = this.determineHealth(agents, tasks, performance);\n\n    // Get any warnings\n    const warnings = this.getSystemWarnings(agents, tasks, performance);\n\n    return {\n      swarmId: this.id,\n      name: this.config.name,\n      topology: this.config.topology,\n      queenMode: this.config.queenMode,\n      health,\n      uptime: Date.now() - this.startTime,\n      agents: agents.map((a) => ({\n        id: a.id,\n        name: a.name,\n        type: a.type,\n        status: a.status,\n        currentTask: a.currentTask,\n        messageCount: a.messageCount,\n        createdAt: a.createdAt.getTime(),\n      })),\n      agentsByType,\n      tasks: tasks.map((t) => ({\n        id: t.id,\n        description: t.description,\n        status: t.status,\n        priority: t.priority,\n        progress: t.progress,\n        assignedAgent: t.assigned_agents ? JSON.parse(t.assigned_agents)[0] : null,\n      })),\n      taskStats,\n      memoryStats,\n      communicationStats,\n      performance,\n      warnings,\n    };\n  }\n\n  /**\n   * Get basic statistics\n   */\n  async getStats() {\n    const agents = Array.from(this.agents.values());\n    const tasks = await this.db.getTasks(this.id);\n\n    return {\n      totalAgents: agents.length,\n      activeAgents: agents.filter((a) => a.status === 'busy').length,\n      pendingTasks: tasks.filter((t) => t.status === 'pending').length,\n      availableCapacity: Math.round(\n        (1 - agents.filter((a) => a.status === 'busy').length / agents.length) * 100,\n      ),\n    };\n  }\n\n  /**\n   * Get list of agents\n   */\n  async getAgents(): Promise<Agent[]> {\n    return Array.from(this.agents.values());\n  }\n\n  /**\n   * Get list of tasks\n   */\n  async getTasks(): Promise<any[]> {\n    return this.db.getTasks(this.id);\n  }\n\n  /**\n   * Get specific task\n   */\n  async getTask(taskId: string): Promise<any> {\n    return this.db.getTask(taskId);\n  }\n\n  /**\n   * Cancel a task\n   */\n  async cancelTask(taskId: string): Promise<void> {\n    await this.orchestrator.cancelTask(taskId);\n    await this.db.updateTaskStatus(taskId, 'cancelled');\n    this.emit('taskCancelled', { taskId });\n  }\n\n  /**\n   * Retry a failed task\n   */\n  async retryTask(taskId: string): Promise<Task> {\n    const originalTask = await this.db.getTask(taskId);\n    if (!originalTask) {\n      throw new Error('Task not found');\n    }\n\n    const newTask = await this.submitTask({\n      description: originalTask.description + ' (Retry)',\n      priority: originalTask.priority,\n      strategy: originalTask.strategy,\n      dependencies: [],\n      requireConsensus: originalTask.require_consensus,\n      maxAgents: originalTask.max_agents,\n      requiredCapabilities: JSON.parse(originalTask.required_capabilities || '[]'),\n      metadata: {\n        ...JSON.parse(originalTask.metadata || '{}'),\n        retryOf: taskId,\n      },\n    });\n\n    return newTask;\n  }\n\n  /**\n   * Rebalance agents across tasks\n   */\n  async rebalanceAgents(): Promise<void> {\n    await this.orchestrator.rebalance();\n    this.emit('agentsRebalanced');\n  }\n\n  /**\n   * Shutdown the Hive Mind\n   */\n  async shutdown(): Promise<void> {\n    this.started = false;\n\n    // Shutdown all agents\n    for (const agent of this.agents.values()) {\n      await agent.shutdown();\n    }\n\n    // Shutdown subsystems\n    await Promise.all([\n      this.queen.shutdown(),\n      this.memory.shutdown(),\n      this.communication.shutdown(),\n      this.orchestrator.shutdown(),\n    ]);\n\n    this.emit('shutdown');\n  }\n\n  // Private helper methods\n\n  private getDefaultCapabilities(type: AgentType): string[] {\n    const capabilityMap: Record<AgentType, string[]> = {\n      coordinator: ['task_management', 'resource_allocation', 'consensus_building'],\n      researcher: ['information_gathering', 'pattern_recognition', 'knowledge_synthesis'],\n      coder: ['code_generation', 'refactoring', 'debugging'],\n      analyst: ['data_analysis', 'performance_metrics', 'bottleneck_detection'],\n      architect: ['system_design', 'architecture_patterns', 'integration_planning'],\n      tester: ['test_generation', 'quality_assurance', 'edge_case_detection'],\n      reviewer: ['code_review', 'standards_enforcement', 'best_practices'],\n      optimizer: ['performance_optimization', 'resource_optimization', 'algorithm_improvement'],\n      documenter: ['documentation_generation', 'api_docs', 'user_guides'],\n      monitor: ['system_monitoring', 'health_checks', 'alerting'],\n      specialist: ['domain_expertise', 'custom_capabilities', 'problem_solving'],\n      // Maestro specs-driven agent capabilities\n      requirements_analyst: ['requirements_analysis', 'user_story_creation', 'acceptance_criteria'],\n      design_architect: ['system_design', 'architecture', 'technical_writing', 'specs_driven_design'],\n      task_planner: ['task_management', 'workflow_orchestration', 'project_management'],\n      implementation_coder: ['code_generation', 'implementation', 'debugging', 'refactoring'],\n      quality_reviewer: ['code_review', 'quality_assurance', 'testing', 'standards_enforcement'],\n      steering_documenter: ['documentation_generation', 'governance', 'technical_writing'],\n    };\n\n    return capabilityMap[type] || [];\n  }\n\n  private async assignPendingTasksToAgent(agent: Agent): Promise<void> {\n    const pendingTasks = await this.db.getPendingTasks(this.id);\n\n    for (const task of pendingTasks) {\n      const requiredCapabilities = JSON.parse(task.required_capabilities || '[]');\n\n      // Check if agent has required capabilities\n      if (requiredCapabilities.every((cap: string) => agent.capabilities.includes(cap))) {\n        await this.orchestrator.assignTaskToAgent(task.id, agent.id);\n        break; // Only assign one task at a time\n      }\n    }\n  }\n\n  private async calculatePerformanceMetrics() {\n    // This would calculate real metrics from the database\n    return {\n      avgTaskCompletion: 3500,\n      messageThroughput: 120,\n      consensusSuccessRate: 92,\n      memoryHitRate: 85,\n      agentUtilization: 78,\n    };\n  }\n\n  private determineHealth(agents: Agent[], tasks: any[], performance: any): string {\n    if (agents.length === 0) return 'critical';\n\n    const busyAgents = agents.filter((a) => a.status === 'busy').length;\n    const utilization = busyAgents / agents.length;\n\n    if (utilization > 0.9) return 'degraded';\n    if (performance.consensusSuccessRate < 50) return 'degraded';\n    if (agents.filter((a) => a.status === 'error').length > agents.length * 0.2) return 'critical';\n\n    return 'healthy';\n  }\n\n  private getSystemWarnings(agents: Agent[], tasks: any[], performance: any): string[] {\n    const warnings: string[] = [];\n\n    const utilization = agents.filter((a) => a.status === 'busy').length / agents.length;\n    if (utilization > 0.8) {\n      warnings.push('High agent utilization - consider spawning more agents');\n    }\n\n    const pendingTasks = tasks.filter((t) => t.status === 'pending').length;\n    if (pendingTasks > agents.length * 2) {\n      warnings.push('Large task backlog - tasks may be delayed');\n    }\n\n    if (performance.memoryHitRate < 60) {\n      warnings.push('Low memory hit rate - consider optimizing memory usage');\n    }\n\n    return warnings;\n  }\n}\n"],"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","ignoreList":[]}