e960b10787273d0cba3e65ef6895525d
/**
 * Mock Builder - London School TDD Support
 *
 * Creates sophisticated mocks for interaction-focused testing
 */
import { jest } from '@jest/globals';
export class MockBuilder {
    static instance;
    globalConfig;
    constructor(config = { strategy: 'hybrid' }) {
        this.globalConfig = config;
    }
    static getInstance(config) {
        if (!MockBuilder.instance) {
            MockBuilder.instance = new MockBuilder(config);
        }
        return MockBuilder.instance;
    }
    /**
     * Create a mock object for a class/interface - London School approach
     */
    create(type, config = this.globalConfig) {
        const mockObj = {};
        const prototype = type.prototype;
        // Get all methods from the prototype
        const methods = this.extractMethods(prototype);
        for (const method of methods) {
            mockObj[method] = this.createMethodMock(method, config);
        }
        // Add interaction tracking for London School
        if (config.trackInteractions) {
            this.addInteractionTracking(mockObj);
        }
        return mockObj;
    }
    /**
     * Create a partial mock with specific overrides
     */
    createPartial(overrides, config = this.globalConfig) {
        const mockObj = {};
        Object.keys(overrides).forEach(key => {
            const value = overrides[key];
            if (typeof value === 'function') {
                mockObj[key] = jest.fn(value);
            }
            else {
                mockObj[key] = value;
            }
        });
        if (config.trackInteractions) {
            this.addInteractionTracking(mockObj);
        }
        return mockObj;
    }
    /**
     * Create spies on an existing object - Hybrid approach
     */
    createSpy(obj, methods) {
        const spy = { ...obj };
        const methodsToSpy = methods || Object.getOwnPropertyNames(Object.getPrototypeOf(obj));
        methodsToSpy.forEach(method => {
            if (typeof obj[method] === 'function') {
                spy[method] = jest.spyOn(obj, method);
            }
        });
        return spy;
    }
    /**
     * Create common dependency mocks for Claude Code Flow
     */
    createCommonMocks() {
        return {
            // Memory Store mock
            memoryStore: this.create(class MemoryStore {
                initialize() { }
                store() { }
                retrieve() { }
                delete() { }
                query() { }
                close() { }
            }),
            // Neural Engine mock
            neuralEngine: this.create(class NeuralEngine {
                initialize() { }
                processInput() { }
                trainModel() { }
                predict() { }
                optimize() { }
            }),
            // Swarm Orchestrator mock
            swarmOrchestrator: this.create(class SwarmOrchestrator {
                initialize() { }
                spawnAgent() { }
                orchestrateTask() { }
                getAgentStatus() { }
                terminateAgent() { }
                getSwarmStatus() { }
            }),
            // MCP Server mock
            mcpServer: this.create(class MCPServer {
                initialize() { }
                handleMessage() { }
                registerTool() { }
                shutdown() { }
            }),
            // Database mock
            database: this.create(class Database {
                connect() { }
                disconnect() { }
                query() { }
                transaction() { }
            }),
            // File System mock
            fileSystem: this.create(class FileSystem {
                readFile() { }
                writeFile() { }
                mkdir() { }
                exists() { }
                stat() { }
            })
        };
    }
    /**
     * Create expectation builders for London School interaction testing
     */
    createExpectations(mock) {
        const expectations = {
            // Verify method was called with specific arguments
            toHaveBeenCalledWith: (method, ...args) => {
                const mockMethod = mock[method];
                expect(mockMethod).toHaveBeenCalledWith(...args);
                return expectations;
            },
            // Verify call order for interaction sequences
            toHaveBeenCalledInOrder: (methods) => {
                const calls = methods.map(method => {
                    const mockMethod = mock[method];
                    return mockMethod.mock.invocationCallOrder[0];
                });
                for (let i = 1; i < calls.length; i++) {
                    expect(calls[i - 1]).toBeLessThan(calls[i]);
                }
                return expectations;
            },
            // Verify interaction patterns
            toHaveInteractionPattern: (pattern) => {
                const interactions = mock.__interactions || [];
                const patternFound = this.matchInteractionPattern(interactions, pattern);
                expect(patternFound).toBe(true);
                return expectations;
            },
            // Verify no unexpected interactions
            toHaveNoUnexpectedInteractions: () => {
                const interactions = mock.__interactions || [];
                const expected = mock.__expectedInteractions || [];
                const unexpected = interactions.filter((i) => !expected.includes(i.method));
                expect(unexpected).toHaveLength(0);
                return expectations;
            }
        };
        return expectations;
    }
    /**
     * Reset all mocks - useful for test isolation
     */
    resetAllMocks(mocks) {
        Object.values(mocks).forEach(mock => {
            if (mock && typeof mock === 'object') {
                Object.values(mock).forEach(method => {
                    if (jest.isMockFunction(method)) {
                        method.mockReset();
                    }
                });
                // Clear interaction tracking
                if (mock.__interactions) {
                    mock.__interactions = [];
                }
            }
        });
    }
    extractMethods(prototype) {
        const methods = [];
        let current = prototype;
        while (current && current !== Object.prototype) {
            Object.getOwnPropertyNames(current).forEach(name => {
                if (name !== 'constructor' && typeof current[name] === 'function') {
                    if (!methods.includes(name)) {
                        methods.push(name);
                    }
                }
            });
            current = Object.getPrototypeOf(current);
        }
        return methods;
    }
    createMethodMock(methodName, config) {
        const mock = jest.fn();
        if (config.autoGenerate) {
            // Auto-generate reasonable return values based on method name
            if (methodName.startsWith('get') || methodName.startsWith('find')) {
                mock.mockResolvedValue({});
            }
            else if (methodName.startsWith('is') || methodName.startsWith('has')) {
                mock.mockReturnValue(true);
            }
            else if (methodName.startsWith('create') || methodName.startsWith('save')) {
                mock.mockResolvedValue({ id: 'generated-id' });
            }
        }
        return mock;
    }
    addInteractionTracking(mockObj) {
        const interactions = [];
        mockObj.__interactions = interactions;
        // Wrap all mock functions to track interactions
        Object.keys(mockObj).forEach(key => {
            const originalMock = mockObj[key];
            if (jest.isMockFunction(originalMock)) {
                mockObj[key] = jest.fn((...args) => {
                    interactions.push({
                        method: key,
                        args,
                        timestamp: Date.now()
                    });
                    return originalMock(...args);
                });
            }
        });
    }
    matchInteractionPattern(interactions, pattern) {
        // Simple pattern matching for interaction sequences
        // Pattern format: "method1 -> method2 -> method3"
        const expectedSequence = pattern.split(' -> ').map(s => s.trim());
        const actualSequence = interactions.map(i => i.method);
        // Check if expected sequence exists in actual sequence
        for (let i = 0; i <= actualSequence.length - expectedSequence.length; i++) {
            let matches = true;
            for (let j = 0; j < expectedSequence.length; j++) {
                if (actualSequence[i + j] !== expectedSequence[j]) {
                    matches = false;
                    break;
                }
            }
            if (matches)
                return true;
        }
        return false;
    }
}
// Convenience functions for common patterns
export const mockBuilder = MockBuilder.getInstance();
export function createLondonMocks(config) {
    const londonConfig = {
        strategy: 'strict',
        trackInteractions: true,
        autoGenerate: true,
        autoReset: true,
        ...config
    };
    return new MockBuilder(londonConfig);
}
export function createClassicalMocks(config) {
    const classicalConfig = {
        strategy: 'minimal',
        trackInteractions: false,
        autoGenerate: false,
        autoReset: false,
        ...config
    };
    return new MockBuilder(classicalConfig);
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,