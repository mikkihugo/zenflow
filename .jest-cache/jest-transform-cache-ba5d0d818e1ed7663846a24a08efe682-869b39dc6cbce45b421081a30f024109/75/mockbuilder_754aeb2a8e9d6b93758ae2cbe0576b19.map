{"file":"/home/mhugo/code/claude-code-flow/src/__tests__/helpers/mock-builder.ts","mappings":"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","names":[],"sources":["/home/mhugo/code/claude-code-flow/src/__tests__/helpers/mock-builder.ts"],"sourcesContent":["/**\n * Mock Builder - London School TDD Support\n * \n * Creates sophisticated mocks for interaction-focused testing\n */\n\nimport { jest } from '@jest/globals';\nimport type { MockConfiguration, MockObject } from './types.js';\n\nexport class MockBuilder {\n  private static instance: MockBuilder;\n  private globalConfig: MockConfiguration;\n\n  constructor(config: MockConfiguration = { strategy: 'hybrid' }) {\n    this.globalConfig = config;\n  }\n\n  static getInstance(config?: MockConfiguration): MockBuilder {\n    if (!MockBuilder.instance) {\n      MockBuilder.instance = new MockBuilder(config);\n    }\n    return MockBuilder.instance;\n  }\n\n  /**\n   * Create a mock object for a class/interface - London School approach\n   */\n  create<T>(\n    type: new (...args: any[]) => T, \n    config: MockConfiguration = this.globalConfig\n  ): T {\n    const mockObj: MockObject = {};\n    const prototype = type.prototype;\n    \n    // Get all methods from the prototype\n    const methods = this.extractMethods(prototype);\n    \n    for (const method of methods) {\n      mockObj[method] = this.createMethodMock(method, config);\n    }\n\n    // Add interaction tracking for London School\n    if (config.trackInteractions) {\n      this.addInteractionTracking(mockObj);\n    }\n\n    return mockObj as T;\n  }\n\n  /**\n   * Create a partial mock with specific overrides\n   */\n  createPartial<T>(overrides: Partial<T>, config: MockConfiguration = this.globalConfig): T {\n    const mockObj: MockObject = {};\n    \n    Object.keys(overrides).forEach(key => {\n      const value = overrides[key as keyof T];\n      if (typeof value === 'function') {\n        mockObj[key] = jest.fn(value as any);\n      } else {\n        mockObj[key] = value;\n      }\n    });\n\n    if (config.trackInteractions) {\n      this.addInteractionTracking(mockObj);\n    }\n\n    return mockObj as T;\n  }\n\n  /**\n   * Create spies on an existing object - Hybrid approach\n   */\n  createSpy<T extends object>(obj: T, methods?: (keyof T)[]): T {\n    const spy = { ...obj };\n    const methodsToSpy = methods || Object.getOwnPropertyNames(Object.getPrototypeOf(obj));\n    \n    methodsToSpy.forEach(method => {\n      if (typeof obj[method] === 'function') {\n        spy[method] = jest.spyOn(obj, method as any);\n      }\n    });\n\n    return spy;\n  }\n\n  /**\n   * Create common dependency mocks for Claude Code Flow\n   */\n  createCommonMocks() {\n    return {\n      // Memory Store mock\n      memoryStore: this.create(class MemoryStore {\n        initialize() {}\n        store() {}\n        retrieve() {}\n        delete() {}\n        query() {}\n        close() {}\n      }),\n\n      // Neural Engine mock\n      neuralEngine: this.create(class NeuralEngine {\n        initialize() {}\n        processInput() {}\n        trainModel() {}\n        predict() {}\n        optimize() {}\n      }),\n\n      // Swarm Orchestrator mock\n      swarmOrchestrator: this.create(class SwarmOrchestrator {\n        initialize() {}\n        spawnAgent() {}\n        orchestrateTask() {}\n        getAgentStatus() {}\n        terminateAgent() {}\n        getSwarmStatus() {}\n      }),\n\n      // MCP Server mock\n      mcpServer: this.create(class MCPServer {\n        initialize() {}\n        handleMessage() {}\n        registerTool() {}\n        shutdown() {}\n      }),\n\n      // Database mock\n      database: this.create(class Database {\n        connect() {}\n        disconnect() {}\n        query() {}\n        transaction() {}\n      }),\n\n      // File System mock\n      fileSystem: this.create(class FileSystem {\n        readFile() {}\n        writeFile() {}\n        mkdir() {}\n        exists() {}\n        stat() {}\n      })\n    };\n  }\n\n  /**\n   * Create expectation builders for London School interaction testing\n   */\n  createExpectations<T>(mock: T) {\n    const expectations = {\n      // Verify method was called with specific arguments\n      toHaveBeenCalledWith: (method: keyof T, ...args: any[]) => {\n        const mockMethod = (mock as any)[method];\n        expect(mockMethod).toHaveBeenCalledWith(...args);\n        return expectations;\n      },\n\n      // Verify call order for interaction sequences\n      toHaveBeenCalledInOrder: (methods: (keyof T)[]) => {\n        const calls = methods.map(method => {\n          const mockMethod = (mock as any)[method];\n          return mockMethod.mock.invocationCallOrder[0];\n        });\n\n        for (let i = 1; i < calls.length; i++) {\n          expect(calls[i - 1]).toBeLessThan(calls[i]);\n        }\n        return expectations;\n      },\n\n      // Verify interaction patterns\n      toHaveInteractionPattern: (pattern: string) => {\n        const interactions = (mock as any).__interactions || [];\n        const patternFound = this.matchInteractionPattern(interactions, pattern);\n        expect(patternFound).toBe(true);\n        return expectations;\n      },\n\n      // Verify no unexpected interactions\n      toHaveNoUnexpectedInteractions: () => {\n        const interactions = (mock as any).__interactions || [];\n        const expected = (mock as any).__expectedInteractions || [];\n        const unexpected = interactions.filter((i: any) => !expected.includes(i.method));\n        expect(unexpected).toHaveLength(0);\n        return expectations;\n      }\n    };\n\n    return expectations;\n  }\n\n  /**\n   * Reset all mocks - useful for test isolation\n   */\n  resetAllMocks(mocks: Record<string, any>) {\n    Object.values(mocks).forEach(mock => {\n      if (mock && typeof mock === 'object') {\n        Object.values(mock).forEach(method => {\n          if (jest.isMockFunction(method)) {\n            (method as jest.Mock).mockReset();\n          }\n        });\n        \n        // Clear interaction tracking\n        if (mock.__interactions) {\n          mock.__interactions = [];\n        }\n      }\n    });\n  }\n\n  private extractMethods(prototype: any): string[] {\n    const methods: string[] = [];\n    let current = prototype;\n    \n    while (current && current !== Object.prototype) {\n      Object.getOwnPropertyNames(current).forEach(name => {\n        if (name !== 'constructor' && typeof current[name] === 'function') {\n          if (!methods.includes(name)) {\n            methods.push(name);\n          }\n        }\n      });\n      current = Object.getPrototypeOf(current);\n    }\n    \n    return methods;\n  }\n\n  private createMethodMock(methodName: string, config: MockConfiguration): jest.Mock {\n    const mock = jest.fn();\n    \n    if (config.autoGenerate) {\n      // Auto-generate reasonable return values based on method name\n      if (methodName.startsWith('get') || methodName.startsWith('find')) {\n        mock.mockResolvedValue({});\n      } else if (methodName.startsWith('is') || methodName.startsWith('has')) {\n        mock.mockReturnValue(true);\n      } else if (methodName.startsWith('create') || methodName.startsWith('save')) {\n        mock.mockResolvedValue({ id: 'generated-id' });\n      }\n    }\n\n    return mock;\n  }\n\n  private addInteractionTracking(mockObj: MockObject) {\n    const interactions: any[] = [];\n    mockObj.__interactions = interactions;\n\n    // Wrap all mock functions to track interactions\n    Object.keys(mockObj).forEach(key => {\n      const originalMock = mockObj[key];\n      if (jest.isMockFunction(originalMock)) {\n        mockObj[key] = jest.fn((...args: any[]) => {\n          interactions.push({\n            method: key,\n            args,\n            timestamp: Date.now()\n          });\n          return originalMock(...args);\n        });\n      }\n    });\n  }\n\n  private matchInteractionPattern(interactions: any[], pattern: string): boolean {\n    // Simple pattern matching for interaction sequences\n    // Pattern format: \"method1 -> method2 -> method3\"\n    const expectedSequence = pattern.split(' -> ').map(s => s.trim());\n    const actualSequence = interactions.map(i => i.method);\n    \n    // Check if expected sequence exists in actual sequence\n    for (let i = 0; i <= actualSequence.length - expectedSequence.length; i++) {\n      let matches = true;\n      for (let j = 0; j < expectedSequence.length; j++) {\n        if (actualSequence[i + j] !== expectedSequence[j]) {\n          matches = false;\n          break;\n        }\n      }\n      if (matches) return true;\n    }\n    \n    return false;\n  }\n}\n\n// Convenience functions for common patterns\nexport const mockBuilder = MockBuilder.getInstance();\n\nexport function createLondonMocks(config?: Partial<MockConfiguration>) {\n  const londonConfig: MockConfiguration = {\n    strategy: 'strict',\n    trackInteractions: true,\n    autoGenerate: true,\n    autoReset: true,\n    ...config\n  };\n  \n  return new MockBuilder(londonConfig);\n}\n\nexport function createClassicalMocks(config?: Partial<MockConfiguration>) {\n  const classicalConfig: MockConfiguration = {\n    strategy: 'minimal',\n    trackInteractions: false,\n    autoGenerate: false,\n    autoReset: false,\n    ...config\n  };\n  \n  return new MockBuilder(classicalConfig);\n}"],"version":3}