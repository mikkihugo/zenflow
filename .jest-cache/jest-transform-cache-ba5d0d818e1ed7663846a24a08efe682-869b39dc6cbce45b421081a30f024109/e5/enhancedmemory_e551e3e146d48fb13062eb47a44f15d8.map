{"version":3,"names":["cov_1c1br84gi","actualCoverage","existsSync","mkdirSync","readFileSync","writeFileSync","path","EventEmitter","EnhancedMemory","initialized","s","sessions","Map","options","directory","namespace","memoryFile","compressionEnabled","encryptionEnabled","autoSaveTimer","stats","constructor","b","f","enableCompression","maxMemorySize","autoSave","saveInterval","enableEncryption","encryptionKey","join","totalSessions","totalSize","averageAccessTime","cacheHitRate","initialize","recursive","loadFromDisk","startAutoSave","emit","console","log","size","error","store","sessionId","key","data","ensureInitialized","startTime","Date","now","session","get","metadata","created","updated","accessed","set","dataString","JSON","stringify","length","updateStats","duration","retrieve","result","found","getSessions","Array","from","keys","getStats","clearSession","deleted","delete","clearAll","count","clear","clearedCount","saveToDisk","memoryData","timestamp","entries","map","id","dataToWrite","file","parse","sessionData","warn","clearInterval","setInterval","values","Error","shutdown"],"sources":["/home/mhugo/code/claude-code-flow/src/memory/enhanced-memory.ts"],"sourcesContent":["/** Enhanced Memory Management System - TypeScript Edition */\n/** Provides persistent storage for session data and cross-session memory */\n/** with comprehensive type safety and performance optimizations */\n\nimport { existsSync, mkdirSync, readFileSync, writeFileSync } from 'node:fs';\nimport path from 'node:path';\nimport { EventEmitter } from 'node:events';\n\ninterface EnhancedMemoryOptions {\n  directory?: string;\n  namespace?: string;\n  enableCompression?: boolean;\n  maxMemorySize?: number;\n  autoSave?: boolean;\n  saveInterval?: number;\n  enableEncryption?: boolean;\n  encryptionKey?: string;\n}\n\ninterface SessionState {\n  sessionId: string;\n  data: Record<string, any>;\n  metadata: {\n    created: number;\n    updated: number;\n    accessed: number;\n    size: number;\n  };\n}\n\ninterface MemoryStats {\n  totalSessions: number;\n  totalSize: number;\n  averageAccessTime: number;\n  cacheHitRate: number;\n}\n\nexport class EnhancedMemory extends EventEmitter {\n  private initialized = false;\n  private sessions = new Map<string, SessionState>();\n  private options: Required<EnhancedMemoryOptions>;\n  private directory: string;\n  private namespace: string;\n  private memoryFile: string;\n  private compressionEnabled: boolean;\n  private encryptionEnabled: boolean;\n  private autoSaveTimer?: NodeJS.Timeout;\n  private stats: MemoryStats;\n\n  constructor(options: EnhancedMemoryOptions = {}) {\n    super();\n    \n    this.options = {\n      directory: options.directory ?? './data/memory',\n      namespace: options.namespace ?? 'claude-flow',\n      enableCompression: options.enableCompression ?? false,\n      maxMemorySize: options.maxMemorySize ?? 100 * 1024 * 1024, // 100MB\n      autoSave: options.autoSave ?? true,\n      saveInterval: options.saveInterval ?? 30000, // 30 seconds\n      enableEncryption: options.enableEncryption ?? false,\n      encryptionKey: options.encryptionKey ?? ''\n    };\n\n    this.directory = this.options.directory;\n    this.namespace = this.options.namespace;\n    this.memoryFile = path.join(this.directory, `${this.namespace}-memory.json`);\n    this.compressionEnabled = this.options.enableCompression;\n    this.encryptionEnabled = this.options.enableEncryption;\n    \n    this.stats = {\n      totalSessions: 0,\n      totalSize: 0,\n      averageAccessTime: 0,\n      cacheHitRate: 0\n    };\n  }\n\n  /** Initialize the memory system with enhanced error handling */\n  async initialize(): Promise<void> {\n    if (this.initialized) return;\n    \n    try {\n      // Ensure memory directory exists\n      if (!existsSync(this.directory)) {\n        mkdirSync(this.directory, { recursive: true });\n      }\n\n      // Load existing memory data\n      await this.loadFromDisk();\n\n      // Start auto-save timer if enabled\n      if (this.options.autoSave) {\n        this.startAutoSave();\n      }\n\n      this.initialized = true;\n      this.emit('initialized', { namespace: this.namespace });\n      \n      console.log(`‚úÖ Enhanced memory initialized: ${this.namespace}`);\n      console.log(`üìÅ Directory: ${this.directory}`);\n      console.log(`üìä Sessions loaded: ${this.sessions.size}`);\n      \n    } catch (error) {\n      console.error('‚ùå Enhanced memory initialization failed:', error);\n      throw error;\n    }\n  }\n\n  /** Store data in a session with metadata tracking */\n  async store(sessionId: string, key: string, data: any): Promise<void> {\n    this.ensureInitialized();\n    \n    const startTime = Date.now();\n    \n    try {\n      let session = this.sessions.get(sessionId);\n      \n      if (!session) {\n        session = {\n          sessionId,\n          data: {},\n          metadata: {\n            created: Date.now(),\n            updated: Date.now(),\n            accessed: Date.now(),\n            size: 0\n          }\n        };\n        this.sessions.set(sessionId, session);\n        this.stats.totalSessions++;\n      }\n\n      // Store the data\n      session.data[key] = data;\n      session.metadata.updated = Date.now();\n      session.metadata.accessed = Date.now();\n      \n      // Calculate size (approximate)\n      const dataString = JSON.stringify(session.data);\n      session.metadata.size = dataString.length;\n      \n      // Update statistics\n      this.updateStats();\n      \n      const duration = Date.now() - startTime;\n      this.emit('stored', { sessionId, key, duration });\n      \n    } catch (error) {\n      console.error(`‚ùå Failed to store data for session ${sessionId}:`, error);\n      throw error;\n    }\n  }\n\n  /** Retrieve data from a session */\n  async retrieve(sessionId: string, key?: string): Promise<any> {\n    this.ensureInitialized();\n    \n    const startTime = Date.now();\n    \n    try {\n      const session = this.sessions.get(sessionId);\n      \n      if (!session) {\n        return null;\n      }\n\n      // Update access time\n      session.metadata.accessed = Date.now();\n      \n      const result = key ? session.data[key] : session.data;\n      \n      const duration = Date.now() - startTime;\n      this.emit('retrieved', { sessionId, key, found: !!result, duration });\n      \n      return result;\n      \n    } catch (error) {\n      console.error(`‚ùå Failed to retrieve data for session ${sessionId}:`, error);\n      throw error;\n    }\n  }\n\n  /** Get all session IDs */\n  getSessions(): string[] {\n    this.ensureInitialized();\n    return Array.from(this.sessions.keys());\n  }\n\n  /** Get memory statistics */\n  getStats(): MemoryStats {\n    this.updateStats();\n    return { ...this.stats };\n  }\n\n  /** Clear a specific session */\n  async clearSession(sessionId: string): Promise<boolean> {\n    this.ensureInitialized();\n    \n    const deleted = this.sessions.delete(sessionId);\n    if (deleted) {\n      this.stats.totalSessions--;\n      this.emit('sessionCleared', { sessionId });\n    }\n    \n    return deleted;\n  }\n\n  /** Clear all sessions */\n  async clearAll(): Promise<void> {\n    this.ensureInitialized();\n    \n    const count = this.sessions.size;\n    this.sessions.clear();\n    this.stats.totalSessions = 0;\n    \n    this.emit('allCleared', { clearedCount: count });\n  }\n\n  /** Save memory to disk */\n  async saveToDisk(): Promise<void> {\n    this.ensureInitialized();\n    \n    try {\n      const memoryData = {\n        namespace: this.namespace,\n        timestamp: Date.now(),\n        sessions: Array.from(this.sessions.entries()).map(([id, session]) => ({\n          id,\n          ...session\n        })),\n        stats: this.stats\n      };\n\n      let dataToWrite = JSON.stringify(memoryData, null, 2);\n      \n      // Apply compression if enabled\n      if (this.compressionEnabled) {\n        // Simple compression could be implemented here\n        // For now, just minify JSON\n        dataToWrite = JSON.stringify(memoryData);\n      }\n\n      writeFileSync(this.memoryFile, dataToWrite);\n      this.emit('saved', { file: this.memoryFile, size: dataToWrite.length });\n      \n    } catch (error) {\n      console.error('‚ùå Failed to save memory to disk:', error);\n      throw error;\n    }\n  }\n\n  /** Load memory from disk */\n  private async loadFromDisk(): Promise<void> {\n    if (!existsSync(this.memoryFile)) {\n      console.log('üìù No existing memory file found, starting fresh');\n      return;\n    }\n\n    try {\n      const dataString = readFileSync(this.memoryFile, 'utf8');\n      const memoryData = JSON.parse(dataString);\n      \n      // Restore sessions\n      if (memoryData.sessions) {\n        for (const sessionData of memoryData.sessions) {\n          this.sessions.set(sessionData.id, {\n            sessionId: sessionData.sessionId,\n            data: sessionData.data,\n            metadata: sessionData.metadata\n          });\n        }\n      }\n      \n      // Restore stats\n      if (memoryData.stats) {\n        this.stats = { ...this.stats, ...memoryData.stats };\n      }\n      \n      this.emit('loaded', { sessions: this.sessions.size });\n      \n    } catch (error) {\n      console.warn('‚ö†Ô∏è Failed to load existing memory, starting fresh:', error);\n    }\n  }\n\n  /** Start auto-save timer */\n  private startAutoSave(): void {\n    if (this.autoSaveTimer) {\n      clearInterval(this.autoSaveTimer);\n    }\n    \n    this.autoSaveTimer = setInterval(async () => {\n      try {\n        await this.saveToDisk();\n      } catch (error) {\n        console.error('‚ùå Auto-save failed:', error);\n      }\n    }, this.options.saveInterval);\n  }\n\n  /** Update internal statistics */\n  private updateStats(): void {\n    let totalSize = 0;\n    \n    for (const session of this.sessions.values()) {\n      totalSize += session.metadata.size;\n    }\n    \n    this.stats.totalSessions = this.sessions.size;\n    this.stats.totalSize = totalSize;\n  }\n\n  /** Ensure system is initialized */\n  private ensureInitialized(): void {\n    if (!this.initialized) {\n      throw new Error('Enhanced memory system not initialized. Call initialize() first.');\n    }\n  }\n\n  /** Cleanup and shutdown */\n  async shutdown(): Promise<void> {\n    if (this.autoSaveTimer) {\n      clearInterval(this.autoSaveTimer);\n    }\n    \n    if (this.initialized) {\n      await this.saveToDisk();\n    }\n    \n    this.initialized = false;\n    this.emit('shutdown');\n  }\n}\n\nexport default EnhancedMemory;"],"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","ignoreList":[]}