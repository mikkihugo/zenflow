ce9c9f7d88bb1cda4720b83dc89e9a4d
/* istanbul ignore next */
function cov_1c1br84gi() {
  var path = "/home/mhugo/code/claude-code-flow/src/memory/enhanced-memory.ts";
  var hash = "15f8786b0ef4a396bf894b4a7fd5c52795db426a";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/home/mhugo/code/claude-code-flow/src/memory/enhanced-memory.ts",
    statementMap: {
      "0": {
        start: {
          line: 8,
          column: 18
        },
        end: {
          line: 8,
          column: 23
        }
      },
      "1": {
        start: {
          line: 9,
          column: 15
        },
        end: {
          line: 9,
          column: 24
        }
      },
      "2": {
        start: {
          line: 19,
          column: 8
        },
        end: {
          line: 19,
          column: 16
        }
      },
      "3": {
        start: {
          line: 20,
          column: 8
        },
        end: {
          line: 29,
          column: 10
        }
      },
      "4": {
        start: {
          line: 30,
          column: 8
        },
        end: {
          line: 30,
          column: 48
        }
      },
      "5": {
        start: {
          line: 31,
          column: 8
        },
        end: {
          line: 31,
          column: 48
        }
      },
      "6": {
        start: {
          line: 32,
          column: 8
        },
        end: {
          line: 32,
          column: 85
        }
      },
      "7": {
        start: {
          line: 33,
          column: 8
        },
        end: {
          line: 33,
          column: 65
        }
      },
      "8": {
        start: {
          line: 34,
          column: 8
        },
        end: {
          line: 34,
          column: 63
        }
      },
      "9": {
        start: {
          line: 35,
          column: 8
        },
        end: {
          line: 40,
          column: 10
        }
      },
      "10": {
        start: {
          line: 44,
          column: 8
        },
        end: {
          line: 45,
          column: 19
        }
      },
      "11": {
        start: {
          line: 45,
          column: 12
        },
        end: {
          line: 45,
          column: 19
        }
      },
      "12": {
        start: {
          line: 46,
          column: 8
        },
        end: {
          line: 66,
          column: 9
        }
      },
      "13": {
        start: {
          line: 48,
          column: 12
        },
        end: {
          line: 50,
          column: 13
        }
      },
      "14": {
        start: {
          line: 49,
          column: 16
        },
        end: {
          line: 49,
          column: 63
        }
      },
      "15": {
        start: {
          line: 52,
          column: 12
        },
        end: {
          line: 52,
          column: 38
        }
      },
      "16": {
        start: {
          line: 54,
          column: 12
        },
        end: {
          line: 56,
          column: 13
        }
      },
      "17": {
        start: {
          line: 55,
          column: 16
        },
        end: {
          line: 55,
          column: 37
        }
      },
      "18": {
        start: {
          line: 57,
          column: 12
        },
        end: {
          line: 57,
          column: 36
        }
      },
      "19": {
        start: {
          line: 58,
          column: 12
        },
        end: {
          line: 58,
          column: 68
        }
      },
      "20": {
        start: {
          line: 59,
          column: 12
        },
        end: {
          line: 59,
          column: 76
        }
      },
      "21": {
        start: {
          line: 60,
          column: 12
        },
        end: {
          line: 60,
          column: 59
        }
      },
      "22": {
        start: {
          line: 61,
          column: 12
        },
        end: {
          line: 61,
          column: 69
        }
      },
      "23": {
        start: {
          line: 64,
          column: 12
        },
        end: {
          line: 64,
          column: 77
        }
      },
      "24": {
        start: {
          line: 65,
          column: 12
        },
        end: {
          line: 65,
          column: 24
        }
      },
      "25": {
        start: {
          line: 70,
          column: 8
        },
        end: {
          line: 70,
          column: 33
        }
      },
      "26": {
        start: {
          line: 71,
          column: 26
        },
        end: {
          line: 71,
          column: 36
        }
      },
      "27": {
        start: {
          line: 72,
          column: 8
        },
        end: {
          line: 103,
          column: 9
        }
      },
      "28": {
        start: {
          line: 73,
          column: 26
        },
        end: {
          line: 73,
          column: 54
        }
      },
      "29": {
        start: {
          line: 74,
          column: 12
        },
        end: {
          line: 87,
          column: 13
        }
      },
      "30": {
        start: {
          line: 75,
          column: 16
        },
        end: {
          line: 84,
          column: 18
        }
      },
      "31": {
        start: {
          line: 85,
          column: 16
        },
        end: {
          line: 85,
          column: 54
        }
      },
      "32": {
        start: {
          line: 86,
          column: 16
        },
        end: {
          line: 86,
          column: 43
        }
      },
      "33": {
        start: {
          line: 89,
          column: 12
        },
        end: {
          line: 89,
          column: 37
        }
      },
      "34": {
        start: {
          line: 90,
          column: 12
        },
        end: {
          line: 90,
          column: 50
        }
      },
      "35": {
        start: {
          line: 91,
          column: 12
        },
        end: {
          line: 91,
          column: 51
        }
      },
      "36": {
        start: {
          line: 93,
          column: 31
        },
        end: {
          line: 93,
          column: 59
        }
      },
      "37": {
        start: {
          line: 94,
          column: 12
        },
        end: {
          line: 94,
          column: 54
        }
      },
      "38": {
        start: {
          line: 96,
          column: 12
        },
        end: {
          line: 96,
          column: 31
        }
      },
      "39": {
        start: {
          line: 97,
          column: 29
        },
        end: {
          line: 97,
          column: 51
        }
      },
      "40": {
        start: {
          line: 98,
          column: 12
        },
        end: {
          line: 98,
          column: 62
        }
      },
      "41": {
        start: {
          line: 101,
          column: 12
        },
        end: {
          line: 101,
          column: 85
        }
      },
      "42": {
        start: {
          line: 102,
          column: 12
        },
        end: {
          line: 102,
          column: 24
        }
      },
      "43": {
        start: {
          line: 107,
          column: 8
        },
        end: {
          line: 107,
          column: 33
        }
      },
      "44": {
        start: {
          line: 108,
          column: 26
        },
        end: {
          line: 108,
          column: 36
        }
      },
      "45": {
        start: {
          line: 109,
          column: 8
        },
        end: {
          line: 124,
          column: 9
        }
      },
      "46": {
        start: {
          line: 110,
          column: 28
        },
        end: {
          line: 110,
          column: 56
        }
      },
      "47": {
        start: {
          line: 111,
          column: 12
        },
        end: {
          line: 113,
          column: 13
        }
      },
      "48": {
        start: {
          line: 112,
          column: 16
        },
        end: {
          line: 112,
          column: 28
        }
      },
      "49": {
        start: {
          line: 115,
          column: 12
        },
        end: {
          line: 115,
          column: 51
        }
      },
      "50": {
        start: {
          line: 116,
          column: 27
        },
        end: {
          line: 116,
          column: 65
        }
      },
      "51": {
        start: {
          line: 117,
          column: 29
        },
        end: {
          line: 117,
          column: 51
        }
      },
      "52": {
        start: {
          line: 118,
          column: 12
        },
        end: {
          line: 118,
          column: 82
        }
      },
      "53": {
        start: {
          line: 119,
          column: 12
        },
        end: {
          line: 119,
          column: 26
        }
      },
      "54": {
        start: {
          line: 122,
          column: 12
        },
        end: {
          line: 122,
          column: 88
        }
      },
      "55": {
        start: {
          line: 123,
          column: 12
        },
        end: {
          line: 123,
          column: 24
        }
      },
      "56": {
        start: {
          line: 128,
          column: 8
        },
        end: {
          line: 128,
          column: 33
        }
      },
      "57": {
        start: {
          line: 129,
          column: 8
        },
        end: {
          line: 129,
          column: 48
        }
      },
      "58": {
        start: {
          line: 133,
          column: 8
        },
        end: {
          line: 133,
          column: 27
        }
      },
      "59": {
        start: {
          line: 134,
          column: 8
        },
        end: {
          line: 134,
          column: 33
        }
      },
      "60": {
        start: {
          line: 138,
          column: 8
        },
        end: {
          line: 138,
          column: 33
        }
      },
      "61": {
        start: {
          line: 139,
          column: 24
        },
        end: {
          line: 139,
          column: 55
        }
      },
      "62": {
        start: {
          line: 140,
          column: 8
        },
        end: {
          line: 143,
          column: 9
        }
      },
      "63": {
        start: {
          line: 141,
          column: 12
        },
        end: {
          line: 141,
          column: 39
        }
      },
      "64": {
        start: {
          line: 142,
          column: 12
        },
        end: {
          line: 142,
          column: 55
        }
      },
      "65": {
        start: {
          line: 144,
          column: 8
        },
        end: {
          line: 144,
          column: 23
        }
      },
      "66": {
        start: {
          line: 148,
          column: 8
        },
        end: {
          line: 148,
          column: 33
        }
      },
      "67": {
        start: {
          line: 149,
          column: 22
        },
        end: {
          line: 149,
          column: 40
        }
      },
      "68": {
        start: {
          line: 150,
          column: 8
        },
        end: {
          line: 150,
          column: 30
        }
      },
      "69": {
        start: {
          line: 151,
          column: 8
        },
        end: {
          line: 151,
          column: 37
        }
      },
      "70": {
        start: {
          line: 152,
          column: 8
        },
        end: {
          line: 152,
          column: 57
        }
      },
      "71": {
        start: {
          line: 156,
          column: 8
        },
        end: {
          line: 156,
          column: 33
        }
      },
      "72": {
        start: {
          line: 157,
          column: 8
        },
        end: {
          line: 180,
          column: 9
        }
      },
      "73": {
        start: {
          line: 158,
          column: 31
        },
        end: {
          line: 166,
          column: 13
        }
      },
      "74": {
        start: {
          line: 161,
          column: 86
        },
        end: {
          line: 164,
          column: 17
        }
      },
      "75": {
        start: {
          line: 167,
          column: 30
        },
        end: {
          line: 167,
          column: 65
        }
      },
      "76": {
        start: {
          line: 169,
          column: 12
        },
        end: {
          line: 173,
          column: 13
        }
      },
      "77": {
        start: {
          line: 172,
          column: 16
        },
        end: {
          line: 172,
          column: 57
        }
      },
      "78": {
        start: {
          line: 174,
          column: 12
        },
        end: {
          line: 174,
          column: 56
        }
      },
      "79": {
        start: {
          line: 175,
          column: 12
        },
        end: {
          line: 175,
          column: 84
        }
      },
      "80": {
        start: {
          line: 178,
          column: 12
        },
        end: {
          line: 178,
          column: 69
        }
      },
      "81": {
        start: {
          line: 179,
          column: 12
        },
        end: {
          line: 179,
          column: 24
        }
      },
      "82": {
        start: {
          line: 184,
          column: 8
        },
        end: {
          line: 187,
          column: 9
        }
      },
      "83": {
        start: {
          line: 185,
          column: 12
        },
        end: {
          line: 185,
          column: 76
        }
      },
      "84": {
        start: {
          line: 186,
          column: 12
        },
        end: {
          line: 186,
          column: 19
        }
      },
      "85": {
        start: {
          line: 188,
          column: 8
        },
        end: {
          line: 209,
          column: 9
        }
      },
      "86": {
        start: {
          line: 189,
          column: 31
        },
        end: {
          line: 189,
          column: 68
        }
      },
      "87": {
        start: {
          line: 190,
          column: 31
        },
        end: {
          line: 190,
          column: 53
        }
      },
      "88": {
        start: {
          line: 192,
          column: 12
        },
        end: {
          line: 200,
          column: 13
        }
      },
      "89": {
        start: {
          line: 193,
          column: 16
        },
        end: {
          line: 199,
          column: 17
        }
      },
      "90": {
        start: {
          line: 194,
          column: 20
        },
        end: {
          line: 198,
          column: 23
        }
      },
      "91": {
        start: {
          line: 202,
          column: 12
        },
        end: {
          line: 204,
          column: 13
        }
      },
      "92": {
        start: {
          line: 203,
          column: 16
        },
        end: {
          line: 203,
          column: 68
        }
      },
      "93": {
        start: {
          line: 205,
          column: 12
        },
        end: {
          line: 205,
          column: 66
        }
      },
      "94": {
        start: {
          line: 208,
          column: 12
        },
        end: {
          line: 208,
          column: 86
        }
      },
      "95": {
        start: {
          line: 213,
          column: 8
        },
        end: {
          line: 215,
          column: 9
        }
      },
      "96": {
        start: {
          line: 214,
          column: 12
        },
        end: {
          line: 214,
          column: 46
        }
      },
      "97": {
        start: {
          line: 216,
          column: 8
        },
        end: {
          line: 223,
          column: 38
        }
      },
      "98": {
        start: {
          line: 217,
          column: 12
        },
        end: {
          line: 222,
          column: 13
        }
      },
      "99": {
        start: {
          line: 218,
          column: 16
        },
        end: {
          line: 218,
          column: 40
        }
      },
      "100": {
        start: {
          line: 221,
          column: 16
        },
        end: {
          line: 221,
          column: 60
        }
      },
      "101": {
        start: {
          line: 227,
          column: 24
        },
        end: {
          line: 227,
          column: 25
        }
      },
      "102": {
        start: {
          line: 228,
          column: 8
        },
        end: {
          line: 230,
          column: 9
        }
      },
      "103": {
        start: {
          line: 229,
          column: 12
        },
        end: {
          line: 229,
          column: 47
        }
      },
      "104": {
        start: {
          line: 231,
          column: 8
        },
        end: {
          line: 231,
          column: 54
        }
      },
      "105": {
        start: {
          line: 232,
          column: 8
        },
        end: {
          line: 232,
          column: 41
        }
      },
      "106": {
        start: {
          line: 236,
          column: 8
        },
        end: {
          line: 238,
          column: 9
        }
      },
      "107": {
        start: {
          line: 237,
          column: 12
        },
        end: {
          line: 237,
          column: 96
        }
      },
      "108": {
        start: {
          line: 242,
          column: 8
        },
        end: {
          line: 244,
          column: 9
        }
      },
      "109": {
        start: {
          line: 243,
          column: 12
        },
        end: {
          line: 243,
          column: 46
        }
      },
      "110": {
        start: {
          line: 245,
          column: 8
        },
        end: {
          line: 247,
          column: 9
        }
      },
      "111": {
        start: {
          line: 246,
          column: 12
        },
        end: {
          line: 246,
          column: 36
        }
      },
      "112": {
        start: {
          line: 248,
          column: 8
        },
        end: {
          line: 248,
          column: 33
        }
      },
      "113": {
        start: {
          line: 249,
          column: 8
        },
        end: {
          line: 249,
          column: 30
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 18,
            column: 4
          },
          end: {
            line: 18,
            column: 5
          }
        },
        loc: {
          start: {
            line: 18,
            column: 30
          },
          end: {
            line: 41,
            column: 5
          }
        },
        line: 18
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 43,
            column: 4
          },
          end: {
            line: 43,
            column: 5
          }
        },
        loc: {
          start: {
            line: 43,
            column: 23
          },
          end: {
            line: 67,
            column: 5
          }
        },
        line: 43
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 69,
            column: 4
          },
          end: {
            line: 69,
            column: 5
          }
        },
        loc: {
          start: {
            line: 69,
            column: 38
          },
          end: {
            line: 104,
            column: 5
          }
        },
        line: 69
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 106,
            column: 4
          },
          end: {
            line: 106,
            column: 5
          }
        },
        loc: {
          start: {
            line: 106,
            column: 35
          },
          end: {
            line: 125,
            column: 5
          }
        },
        line: 106
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 127,
            column: 4
          },
          end: {
            line: 127,
            column: 5
          }
        },
        loc: {
          start: {
            line: 127,
            column: 18
          },
          end: {
            line: 130,
            column: 5
          }
        },
        line: 127
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 132,
            column: 4
          },
          end: {
            line: 132,
            column: 5
          }
        },
        loc: {
          start: {
            line: 132,
            column: 15
          },
          end: {
            line: 135,
            column: 5
          }
        },
        line: 132
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 137,
            column: 4
          },
          end: {
            line: 137,
            column: 5
          }
        },
        loc: {
          start: {
            line: 137,
            column: 34
          },
          end: {
            line: 145,
            column: 5
          }
        },
        line: 137
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 147,
            column: 4
          },
          end: {
            line: 147,
            column: 5
          }
        },
        loc: {
          start: {
            line: 147,
            column: 21
          },
          end: {
            line: 153,
            column: 5
          }
        },
        line: 147
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 155,
            column: 4
          },
          end: {
            line: 155,
            column: 5
          }
        },
        loc: {
          start: {
            line: 155,
            column: 23
          },
          end: {
            line: 181,
            column: 5
          }
        },
        line: 155
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 161,
            column: 66
          },
          end: {
            line: 161,
            column: 67
          }
        },
        loc: {
          start: {
            line: 161,
            column: 86
          },
          end: {
            line: 164,
            column: 17
          }
        },
        line: 161
      },
      "10": {
        name: "(anonymous_10)",
        decl: {
          start: {
            line: 183,
            column: 4
          },
          end: {
            line: 183,
            column: 5
          }
        },
        loc: {
          start: {
            line: 183,
            column: 25
          },
          end: {
            line: 210,
            column: 5
          }
        },
        line: 183
      },
      "11": {
        name: "(anonymous_11)",
        decl: {
          start: {
            line: 212,
            column: 4
          },
          end: {
            line: 212,
            column: 5
          }
        },
        loc: {
          start: {
            line: 212,
            column: 20
          },
          end: {
            line: 224,
            column: 5
          }
        },
        line: 212
      },
      "12": {
        name: "(anonymous_12)",
        decl: {
          start: {
            line: 216,
            column: 41
          },
          end: {
            line: 216,
            column: 42
          }
        },
        loc: {
          start: {
            line: 216,
            column: 53
          },
          end: {
            line: 223,
            column: 9
          }
        },
        line: 216
      },
      "13": {
        name: "(anonymous_13)",
        decl: {
          start: {
            line: 226,
            column: 4
          },
          end: {
            line: 226,
            column: 5
          }
        },
        loc: {
          start: {
            line: 226,
            column: 18
          },
          end: {
            line: 233,
            column: 5
          }
        },
        line: 226
      },
      "14": {
        name: "(anonymous_14)",
        decl: {
          start: {
            line: 235,
            column: 4
          },
          end: {
            line: 235,
            column: 5
          }
        },
        loc: {
          start: {
            line: 235,
            column: 24
          },
          end: {
            line: 239,
            column: 5
          }
        },
        line: 235
      },
      "15": {
        name: "(anonymous_15)",
        decl: {
          start: {
            line: 241,
            column: 4
          },
          end: {
            line: 241,
            column: 5
          }
        },
        loc: {
          start: {
            line: 241,
            column: 21
          },
          end: {
            line: 250,
            column: 5
          }
        },
        line: 241
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 18,
            column: 16
          },
          end: {
            line: 18,
            column: 28
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 18,
            column: 26
          },
          end: {
            line: 18,
            column: 28
          }
        }],
        line: 18
      },
      "1": {
        loc: {
          start: {
            line: 21,
            column: 23
          },
          end: {
            line: 21,
            column: 59
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 21,
            column: 23
          },
          end: {
            line: 21,
            column: 40
          }
        }, {
          start: {
            line: 21,
            column: 44
          },
          end: {
            line: 21,
            column: 59
          }
        }],
        line: 21
      },
      "2": {
        loc: {
          start: {
            line: 22,
            column: 23
          },
          end: {
            line: 22,
            column: 57
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 22,
            column: 23
          },
          end: {
            line: 22,
            column: 40
          }
        }, {
          start: {
            line: 22,
            column: 44
          },
          end: {
            line: 22,
            column: 57
          }
        }],
        line: 22
      },
      "3": {
        loc: {
          start: {
            line: 23,
            column: 31
          },
          end: {
            line: 23,
            column: 65
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 23,
            column: 31
          },
          end: {
            line: 23,
            column: 56
          }
        }, {
          start: {
            line: 23,
            column: 60
          },
          end: {
            line: 23,
            column: 65
          }
        }],
        line: 23
      },
      "4": {
        loc: {
          start: {
            line: 24,
            column: 27
          },
          end: {
            line: 24,
            column: 69
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 24,
            column: 27
          },
          end: {
            line: 24,
            column: 48
          }
        }, {
          start: {
            line: 24,
            column: 52
          },
          end: {
            line: 24,
            column: 69
          }
        }],
        line: 24
      },
      "5": {
        loc: {
          start: {
            line: 25,
            column: 22
          },
          end: {
            line: 25,
            column: 46
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 25,
            column: 22
          },
          end: {
            line: 25,
            column: 38
          }
        }, {
          start: {
            line: 25,
            column: 42
          },
          end: {
            line: 25,
            column: 46
          }
        }],
        line: 25
      },
      "6": {
        loc: {
          start: {
            line: 26,
            column: 26
          },
          end: {
            line: 26,
            column: 55
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 26,
            column: 26
          },
          end: {
            line: 26,
            column: 46
          }
        }, {
          start: {
            line: 26,
            column: 50
          },
          end: {
            line: 26,
            column: 55
          }
        }],
        line: 26
      },
      "7": {
        loc: {
          start: {
            line: 27,
            column: 30
          },
          end: {
            line: 27,
            column: 63
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 27,
            column: 30
          },
          end: {
            line: 27,
            column: 54
          }
        }, {
          start: {
            line: 27,
            column: 58
          },
          end: {
            line: 27,
            column: 63
          }
        }],
        line: 27
      },
      "8": {
        loc: {
          start: {
            line: 28,
            column: 27
          },
          end: {
            line: 28,
            column: 54
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 28,
            column: 27
          },
          end: {
            line: 28,
            column: 48
          }
        }, {
          start: {
            line: 28,
            column: 52
          },
          end: {
            line: 28,
            column: 54
          }
        }],
        line: 28
      },
      "9": {
        loc: {
          start: {
            line: 44,
            column: 8
          },
          end: {
            line: 45,
            column: 19
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 44,
            column: 8
          },
          end: {
            line: 45,
            column: 19
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 44
      },
      "10": {
        loc: {
          start: {
            line: 48,
            column: 12
          },
          end: {
            line: 50,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 48,
            column: 12
          },
          end: {
            line: 50,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 48
      },
      "11": {
        loc: {
          start: {
            line: 54,
            column: 12
          },
          end: {
            line: 56,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 54,
            column: 12
          },
          end: {
            line: 56,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 54
      },
      "12": {
        loc: {
          start: {
            line: 74,
            column: 12
          },
          end: {
            line: 87,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 74,
            column: 12
          },
          end: {
            line: 87,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 74
      },
      "13": {
        loc: {
          start: {
            line: 111,
            column: 12
          },
          end: {
            line: 113,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 111,
            column: 12
          },
          end: {
            line: 113,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 111
      },
      "14": {
        loc: {
          start: {
            line: 116,
            column: 27
          },
          end: {
            line: 116,
            column: 65
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 116,
            column: 33
          },
          end: {
            line: 116,
            column: 50
          }
        }, {
          start: {
            line: 116,
            column: 53
          },
          end: {
            line: 116,
            column: 65
          }
        }],
        line: 116
      },
      "15": {
        loc: {
          start: {
            line: 140,
            column: 8
          },
          end: {
            line: 143,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 140,
            column: 8
          },
          end: {
            line: 143,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 140
      },
      "16": {
        loc: {
          start: {
            line: 169,
            column: 12
          },
          end: {
            line: 173,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 169,
            column: 12
          },
          end: {
            line: 173,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 169
      },
      "17": {
        loc: {
          start: {
            line: 184,
            column: 8
          },
          end: {
            line: 187,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 184,
            column: 8
          },
          end: {
            line: 187,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 184
      },
      "18": {
        loc: {
          start: {
            line: 192,
            column: 12
          },
          end: {
            line: 200,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 192,
            column: 12
          },
          end: {
            line: 200,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 192
      },
      "19": {
        loc: {
          start: {
            line: 202,
            column: 12
          },
          end: {
            line: 204,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 202,
            column: 12
          },
          end: {
            line: 204,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 202
      },
      "20": {
        loc: {
          start: {
            line: 213,
            column: 8
          },
          end: {
            line: 215,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 213,
            column: 8
          },
          end: {
            line: 215,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 213
      },
      "21": {
        loc: {
          start: {
            line: 236,
            column: 8
          },
          end: {
            line: 238,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 236,
            column: 8
          },
          end: {
            line: 238,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 236
      },
      "22": {
        loc: {
          start: {
            line: 242,
            column: 8
          },
          end: {
            line: 244,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 242,
            column: 8
          },
          end: {
            line: 244,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 242
      },
      "23": {
        loc: {
          start: {
            line: 245,
            column: 8
          },
          end: {
            line: 247,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 245,
            column: 8
          },
          end: {
            line: 247,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 245
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0,
      "74": 0,
      "75": 0,
      "76": 0,
      "77": 0,
      "78": 0,
      "79": 0,
      "80": 0,
      "81": 0,
      "82": 0,
      "83": 0,
      "84": 0,
      "85": 0,
      "86": 0,
      "87": 0,
      "88": 0,
      "89": 0,
      "90": 0,
      "91": 0,
      "92": 0,
      "93": 0,
      "94": 0,
      "95": 0,
      "96": 0,
      "97": 0,
      "98": 0,
      "99": 0,
      "100": 0,
      "101": 0,
      "102": 0,
      "103": 0,
      "104": 0,
      "105": 0,
      "106": 0,
      "107": 0,
      "108": 0,
      "109": 0,
      "110": 0,
      "111": 0,
      "112": 0,
      "113": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0
    },
    b: {
      "0": [0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0, 0],
      "10": [0, 0],
      "11": [0, 0],
      "12": [0, 0],
      "13": [0, 0],
      "14": [0, 0],
      "15": [0, 0],
      "16": [0, 0],
      "17": [0, 0],
      "18": [0, 0],
      "19": [0, 0],
      "20": [0, 0],
      "21": [0, 0],
      "22": [0, 0],
      "23": [0, 0]
    },
    inputSourceMap: {
      file: "/home/mhugo/code/claude-code-flow/src/memory/enhanced-memory.ts",
      mappings: "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",
      names: [],
      sources: ["/home/mhugo/code/claude-code-flow/src/memory/enhanced-memory.ts"],
      sourcesContent: ["/** Enhanced Memory Management System - TypeScript Edition */\n/** Provides persistent storage for session data and cross-session memory */\n/** with comprehensive type safety and performance optimizations */\n\nimport { existsSync, mkdirSync, readFileSync, writeFileSync } from 'node:fs';\nimport path from 'node:path';\nimport { EventEmitter } from 'node:events';\n\ninterface EnhancedMemoryOptions {\n  directory?: string;\n  namespace?: string;\n  enableCompression?: boolean;\n  maxMemorySize?: number;\n  autoSave?: boolean;\n  saveInterval?: number;\n  enableEncryption?: boolean;\n  encryptionKey?: string;\n}\n\ninterface SessionState {\n  sessionId: string;\n  data: Record<string, any>;\n  metadata: {\n    created: number;\n    updated: number;\n    accessed: number;\n    size: number;\n  };\n}\n\ninterface MemoryStats {\n  totalSessions: number;\n  totalSize: number;\n  averageAccessTime: number;\n  cacheHitRate: number;\n}\n\nexport class EnhancedMemory extends EventEmitter {\n  private initialized = false;\n  private sessions = new Map<string, SessionState>();\n  private options: Required<EnhancedMemoryOptions>;\n  private directory: string;\n  private namespace: string;\n  private memoryFile: string;\n  private compressionEnabled: boolean;\n  private encryptionEnabled: boolean;\n  private autoSaveTimer?: NodeJS.Timeout;\n  private stats: MemoryStats;\n\n  constructor(options: EnhancedMemoryOptions = {}) {\n    super();\n    \n    this.options = {\n      directory: options.directory ?? './data/memory',\n      namespace: options.namespace ?? 'claude-flow',\n      enableCompression: options.enableCompression ?? false,\n      maxMemorySize: options.maxMemorySize ?? 100 * 1024 * 1024, // 100MB\n      autoSave: options.autoSave ?? true,\n      saveInterval: options.saveInterval ?? 30000, // 30 seconds\n      enableEncryption: options.enableEncryption ?? false,\n      encryptionKey: options.encryptionKey ?? ''\n    };\n\n    this.directory = this.options.directory;\n    this.namespace = this.options.namespace;\n    this.memoryFile = path.join(this.directory, `${this.namespace}-memory.json`);\n    this.compressionEnabled = this.options.enableCompression;\n    this.encryptionEnabled = this.options.enableEncryption;\n    \n    this.stats = {\n      totalSessions: 0,\n      totalSize: 0,\n      averageAccessTime: 0,\n      cacheHitRate: 0\n    };\n  }\n\n  /** Initialize the memory system with enhanced error handling */\n  async initialize(): Promise<void> {\n    if (this.initialized) return;\n    \n    try {\n      // Ensure memory directory exists\n      if (!existsSync(this.directory)) {\n        mkdirSync(this.directory, { recursive: true });\n      }\n\n      // Load existing memory data\n      await this.loadFromDisk();\n\n      // Start auto-save timer if enabled\n      if (this.options.autoSave) {\n        this.startAutoSave();\n      }\n\n      this.initialized = true;\n      this.emit('initialized', { namespace: this.namespace });\n      \n      console.log(`\u2705 Enhanced memory initialized: ${this.namespace}`);\n      console.log(`\uD83D\uDCC1 Directory: ${this.directory}`);\n      console.log(`\uD83D\uDCCA Sessions loaded: ${this.sessions.size}`);\n      \n    } catch (error) {\n      console.error('\u274C Enhanced memory initialization failed:', error);\n      throw error;\n    }\n  }\n\n  /** Store data in a session with metadata tracking */\n  async store(sessionId: string, key: string, data: any): Promise<void> {\n    this.ensureInitialized();\n    \n    const startTime = Date.now();\n    \n    try {\n      let session = this.sessions.get(sessionId);\n      \n      if (!session) {\n        session = {\n          sessionId,\n          data: {},\n          metadata: {\n            created: Date.now(),\n            updated: Date.now(),\n            accessed: Date.now(),\n            size: 0\n          }\n        };\n        this.sessions.set(sessionId, session);\n        this.stats.totalSessions++;\n      }\n\n      // Store the data\n      session.data[key] = data;\n      session.metadata.updated = Date.now();\n      session.metadata.accessed = Date.now();\n      \n      // Calculate size (approximate)\n      const dataString = JSON.stringify(session.data);\n      session.metadata.size = dataString.length;\n      \n      // Update statistics\n      this.updateStats();\n      \n      const duration = Date.now() - startTime;\n      this.emit('stored', { sessionId, key, duration });\n      \n    } catch (error) {\n      console.error(`\u274C Failed to store data for session ${sessionId}:`, error);\n      throw error;\n    }\n  }\n\n  /** Retrieve data from a session */\n  async retrieve(sessionId: string, key?: string): Promise<any> {\n    this.ensureInitialized();\n    \n    const startTime = Date.now();\n    \n    try {\n      const session = this.sessions.get(sessionId);\n      \n      if (!session) {\n        return null;\n      }\n\n      // Update access time\n      session.metadata.accessed = Date.now();\n      \n      const result = key ? session.data[key] : session.data;\n      \n      const duration = Date.now() - startTime;\n      this.emit('retrieved', { sessionId, key, found: !!result, duration });\n      \n      return result;\n      \n    } catch (error) {\n      console.error(`\u274C Failed to retrieve data for session ${sessionId}:`, error);\n      throw error;\n    }\n  }\n\n  /** Get all session IDs */\n  getSessions(): string[] {\n    this.ensureInitialized();\n    return Array.from(this.sessions.keys());\n  }\n\n  /** Get memory statistics */\n  getStats(): MemoryStats {\n    this.updateStats();\n    return { ...this.stats };\n  }\n\n  /** Clear a specific session */\n  async clearSession(sessionId: string): Promise<boolean> {\n    this.ensureInitialized();\n    \n    const deleted = this.sessions.delete(sessionId);\n    if (deleted) {\n      this.stats.totalSessions--;\n      this.emit('sessionCleared', { sessionId });\n    }\n    \n    return deleted;\n  }\n\n  /** Clear all sessions */\n  async clearAll(): Promise<void> {\n    this.ensureInitialized();\n    \n    const count = this.sessions.size;\n    this.sessions.clear();\n    this.stats.totalSessions = 0;\n    \n    this.emit('allCleared', { clearedCount: count });\n  }\n\n  /** Save memory to disk */\n  async saveToDisk(): Promise<void> {\n    this.ensureInitialized();\n    \n    try {\n      const memoryData = {\n        namespace: this.namespace,\n        timestamp: Date.now(),\n        sessions: Array.from(this.sessions.entries()).map(([id, session]) => ({\n          id,\n          ...session\n        })),\n        stats: this.stats\n      };\n\n      let dataToWrite = JSON.stringify(memoryData, null, 2);\n      \n      // Apply compression if enabled\n      if (this.compressionEnabled) {\n        // Simple compression could be implemented here\n        // For now, just minify JSON\n        dataToWrite = JSON.stringify(memoryData);\n      }\n\n      writeFileSync(this.memoryFile, dataToWrite);\n      this.emit('saved', { file: this.memoryFile, size: dataToWrite.length });\n      \n    } catch (error) {\n      console.error('\u274C Failed to save memory to disk:', error);\n      throw error;\n    }\n  }\n\n  /** Load memory from disk */\n  private async loadFromDisk(): Promise<void> {\n    if (!existsSync(this.memoryFile)) {\n      console.log('\uD83D\uDCDD No existing memory file found, starting fresh');\n      return;\n    }\n\n    try {\n      const dataString = readFileSync(this.memoryFile, 'utf8');\n      const memoryData = JSON.parse(dataString);\n      \n      // Restore sessions\n      if (memoryData.sessions) {\n        for (const sessionData of memoryData.sessions) {\n          this.sessions.set(sessionData.id, {\n            sessionId: sessionData.sessionId,\n            data: sessionData.data,\n            metadata: sessionData.metadata\n          });\n        }\n      }\n      \n      // Restore stats\n      if (memoryData.stats) {\n        this.stats = { ...this.stats, ...memoryData.stats };\n      }\n      \n      this.emit('loaded', { sessions: this.sessions.size });\n      \n    } catch (error) {\n      console.warn('\u26A0\uFE0F Failed to load existing memory, starting fresh:', error);\n    }\n  }\n\n  /** Start auto-save timer */\n  private startAutoSave(): void {\n    if (this.autoSaveTimer) {\n      clearInterval(this.autoSaveTimer);\n    }\n    \n    this.autoSaveTimer = setInterval(async () => {\n      try {\n        await this.saveToDisk();\n      } catch (error) {\n        console.error('\u274C Auto-save failed:', error);\n      }\n    }, this.options.saveInterval);\n  }\n\n  /** Update internal statistics */\n  private updateStats(): void {\n    let totalSize = 0;\n    \n    for (const session of this.sessions.values()) {\n      totalSize += session.metadata.size;\n    }\n    \n    this.stats.totalSessions = this.sessions.size;\n    this.stats.totalSize = totalSize;\n  }\n\n  /** Ensure system is initialized */\n  private ensureInitialized(): void {\n    if (!this.initialized) {\n      throw new Error('Enhanced memory system not initialized. Call initialize() first.');\n    }\n  }\n\n  /** Cleanup and shutdown */\n  async shutdown(): Promise<void> {\n    if (this.autoSaveTimer) {\n      clearInterval(this.autoSaveTimer);\n    }\n    \n    if (this.initialized) {\n      await this.saveToDisk();\n    }\n    \n    this.initialized = false;\n    this.emit('shutdown');\n  }\n}\n\nexport default EnhancedMemory;"],
      version: 3
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "15f8786b0ef4a396bf894b4a7fd5c52795db426a"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_1c1br84gi = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_1c1br84gi();
/** Enhanced Memory Management System - TypeScript Edition */
/** Provides persistent storage for session data and cross-session memory */
/** with comprehensive type safety and performance optimizations */
import { existsSync, mkdirSync, readFileSync, writeFileSync } from 'node:fs';
import path from 'node:path';
import { EventEmitter } from 'node:events';
export class EnhancedMemory extends EventEmitter {
  initialized =
  /* istanbul ignore next */
  (cov_1c1br84gi().s[0]++, false);
  sessions =
  /* istanbul ignore next */
  (cov_1c1br84gi().s[1]++, new Map());
  options;
  directory;
  namespace;
  memoryFile;
  compressionEnabled;
  encryptionEnabled;
  autoSaveTimer;
  stats;
  constructor(options =
  /* istanbul ignore next */
  (cov_1c1br84gi().b[0][0]++, {})) {
    /* istanbul ignore next */
    cov_1c1br84gi().f[0]++;
    cov_1c1br84gi().s[2]++;
    super();
    /* istanbul ignore next */
    cov_1c1br84gi().s[3]++;
    this.options = {
      directory:
      /* istanbul ignore next */
      (cov_1c1br84gi().b[1][0]++, options.directory) ??
      /* istanbul ignore next */
      (cov_1c1br84gi().b[1][1]++, './data/memory'),
      namespace:
      /* istanbul ignore next */
      (cov_1c1br84gi().b[2][0]++, options.namespace) ??
      /* istanbul ignore next */
      (cov_1c1br84gi().b[2][1]++, 'claude-flow'),
      enableCompression:
      /* istanbul ignore next */
      (cov_1c1br84gi().b[3][0]++, options.enableCompression) ??
      /* istanbul ignore next */
      (cov_1c1br84gi().b[3][1]++, false),
      maxMemorySize:
      /* istanbul ignore next */
      (cov_1c1br84gi().b[4][0]++, options.maxMemorySize) ??
      /* istanbul ignore next */
      (cov_1c1br84gi().b[4][1]++, 100 * 1024 * 1024),
      // 100MB
      autoSave:
      /* istanbul ignore next */
      (cov_1c1br84gi().b[5][0]++, options.autoSave) ??
      /* istanbul ignore next */
      (cov_1c1br84gi().b[5][1]++, true),
      saveInterval:
      /* istanbul ignore next */
      (cov_1c1br84gi().b[6][0]++, options.saveInterval) ??
      /* istanbul ignore next */
      (cov_1c1br84gi().b[6][1]++, 30000),
      // 30 seconds
      enableEncryption:
      /* istanbul ignore next */
      (cov_1c1br84gi().b[7][0]++, options.enableEncryption) ??
      /* istanbul ignore next */
      (cov_1c1br84gi().b[7][1]++, false),
      encryptionKey:
      /* istanbul ignore next */
      (cov_1c1br84gi().b[8][0]++, options.encryptionKey) ??
      /* istanbul ignore next */
      (cov_1c1br84gi().b[8][1]++, '')
    };
    /* istanbul ignore next */
    cov_1c1br84gi().s[4]++;
    this.directory = this.options.directory;
    /* istanbul ignore next */
    cov_1c1br84gi().s[5]++;
    this.namespace = this.options.namespace;
    /* istanbul ignore next */
    cov_1c1br84gi().s[6]++;
    this.memoryFile = path.join(this.directory, `${this.namespace}-memory.json`);
    /* istanbul ignore next */
    cov_1c1br84gi().s[7]++;
    this.compressionEnabled = this.options.enableCompression;
    /* istanbul ignore next */
    cov_1c1br84gi().s[8]++;
    this.encryptionEnabled = this.options.enableEncryption;
    /* istanbul ignore next */
    cov_1c1br84gi().s[9]++;
    this.stats = {
      totalSessions: 0,
      totalSize: 0,
      averageAccessTime: 0,
      cacheHitRate: 0
    };
  }
  /** Initialize the memory system with enhanced error handling */
  async initialize() {
    /* istanbul ignore next */
    cov_1c1br84gi().f[1]++;
    cov_1c1br84gi().s[10]++;
    if (this.initialized) {
      /* istanbul ignore next */
      cov_1c1br84gi().b[9][0]++;
      cov_1c1br84gi().s[11]++;
      return;
    } else
    /* istanbul ignore next */
    {
      cov_1c1br84gi().b[9][1]++;
    }
    cov_1c1br84gi().s[12]++;
    try {
      /* istanbul ignore next */
      cov_1c1br84gi().s[13]++;
      // Ensure memory directory exists
      if (!existsSync(this.directory)) {
        /* istanbul ignore next */
        cov_1c1br84gi().b[10][0]++;
        cov_1c1br84gi().s[14]++;
        mkdirSync(this.directory, {
          recursive: true
        });
      } else
      /* istanbul ignore next */
      {
        cov_1c1br84gi().b[10][1]++;
      }
      // Load existing memory data
      cov_1c1br84gi().s[15]++;
      await this.loadFromDisk();
      // Start auto-save timer if enabled
      /* istanbul ignore next */
      cov_1c1br84gi().s[16]++;
      if (this.options.autoSave) {
        /* istanbul ignore next */
        cov_1c1br84gi().b[11][0]++;
        cov_1c1br84gi().s[17]++;
        this.startAutoSave();
      } else
      /* istanbul ignore next */
      {
        cov_1c1br84gi().b[11][1]++;
      }
      cov_1c1br84gi().s[18]++;
      this.initialized = true;
      /* istanbul ignore next */
      cov_1c1br84gi().s[19]++;
      this.emit('initialized', {
        namespace: this.namespace
      });
      /* istanbul ignore next */
      cov_1c1br84gi().s[20]++;
      console.log(`✅ Enhanced memory initialized: ${this.namespace}`);
      /* istanbul ignore next */
      cov_1c1br84gi().s[21]++;
      console.log(`📁 Directory: ${this.directory}`);
      /* istanbul ignore next */
      cov_1c1br84gi().s[22]++;
      console.log(`📊 Sessions loaded: ${this.sessions.size}`);
    } catch (error) {
      /* istanbul ignore next */
      cov_1c1br84gi().s[23]++;
      console.error('❌ Enhanced memory initialization failed:', error);
      /* istanbul ignore next */
      cov_1c1br84gi().s[24]++;
      throw error;
    }
  }
  /** Store data in a session with metadata tracking */
  async store(sessionId, key, data) {
    /* istanbul ignore next */
    cov_1c1br84gi().f[2]++;
    cov_1c1br84gi().s[25]++;
    this.ensureInitialized();
    const startTime =
    /* istanbul ignore next */
    (cov_1c1br84gi().s[26]++, Date.now());
    /* istanbul ignore next */
    cov_1c1br84gi().s[27]++;
    try {
      let session =
      /* istanbul ignore next */
      (cov_1c1br84gi().s[28]++, this.sessions.get(sessionId));
      /* istanbul ignore next */
      cov_1c1br84gi().s[29]++;
      if (!session) {
        /* istanbul ignore next */
        cov_1c1br84gi().b[12][0]++;
        cov_1c1br84gi().s[30]++;
        session = {
          sessionId,
          data: {},
          metadata: {
            created: Date.now(),
            updated: Date.now(),
            accessed: Date.now(),
            size: 0
          }
        };
        /* istanbul ignore next */
        cov_1c1br84gi().s[31]++;
        this.sessions.set(sessionId, session);
        /* istanbul ignore next */
        cov_1c1br84gi().s[32]++;
        this.stats.totalSessions++;
      } else
      /* istanbul ignore next */
      {
        cov_1c1br84gi().b[12][1]++;
      }
      // Store the data
      cov_1c1br84gi().s[33]++;
      session.data[key] = data;
      /* istanbul ignore next */
      cov_1c1br84gi().s[34]++;
      session.metadata.updated = Date.now();
      /* istanbul ignore next */
      cov_1c1br84gi().s[35]++;
      session.metadata.accessed = Date.now();
      // Calculate size (approximate)
      const dataString =
      /* istanbul ignore next */
      (cov_1c1br84gi().s[36]++, JSON.stringify(session.data));
      /* istanbul ignore next */
      cov_1c1br84gi().s[37]++;
      session.metadata.size = dataString.length;
      // Update statistics
      /* istanbul ignore next */
      cov_1c1br84gi().s[38]++;
      this.updateStats();
      const duration =
      /* istanbul ignore next */
      (cov_1c1br84gi().s[39]++, Date.now() - startTime);
      /* istanbul ignore next */
      cov_1c1br84gi().s[40]++;
      this.emit('stored', {
        sessionId,
        key,
        duration
      });
    } catch (error) {
      /* istanbul ignore next */
      cov_1c1br84gi().s[41]++;
      console.error(`❌ Failed to store data for session ${sessionId}:`, error);
      /* istanbul ignore next */
      cov_1c1br84gi().s[42]++;
      throw error;
    }
  }
  /** Retrieve data from a session */
  async retrieve(sessionId, key) {
    /* istanbul ignore next */
    cov_1c1br84gi().f[3]++;
    cov_1c1br84gi().s[43]++;
    this.ensureInitialized();
    const startTime =
    /* istanbul ignore next */
    (cov_1c1br84gi().s[44]++, Date.now());
    /* istanbul ignore next */
    cov_1c1br84gi().s[45]++;
    try {
      const session =
      /* istanbul ignore next */
      (cov_1c1br84gi().s[46]++, this.sessions.get(sessionId));
      /* istanbul ignore next */
      cov_1c1br84gi().s[47]++;
      if (!session) {
        /* istanbul ignore next */
        cov_1c1br84gi().b[13][0]++;
        cov_1c1br84gi().s[48]++;
        return null;
      } else
      /* istanbul ignore next */
      {
        cov_1c1br84gi().b[13][1]++;
      }
      // Update access time
      cov_1c1br84gi().s[49]++;
      session.metadata.accessed = Date.now();
      const result =
      /* istanbul ignore next */
      (cov_1c1br84gi().s[50]++, key ?
      /* istanbul ignore next */
      (cov_1c1br84gi().b[14][0]++, session.data[key]) :
      /* istanbul ignore next */
      (cov_1c1br84gi().b[14][1]++, session.data));
      const duration =
      /* istanbul ignore next */
      (cov_1c1br84gi().s[51]++, Date.now() - startTime);
      /* istanbul ignore next */
      cov_1c1br84gi().s[52]++;
      this.emit('retrieved', {
        sessionId,
        key,
        found: !!result,
        duration
      });
      /* istanbul ignore next */
      cov_1c1br84gi().s[53]++;
      return result;
    } catch (error) {
      /* istanbul ignore next */
      cov_1c1br84gi().s[54]++;
      console.error(`❌ Failed to retrieve data for session ${sessionId}:`, error);
      /* istanbul ignore next */
      cov_1c1br84gi().s[55]++;
      throw error;
    }
  }
  /** Get all session IDs */
  getSessions() {
    /* istanbul ignore next */
    cov_1c1br84gi().f[4]++;
    cov_1c1br84gi().s[56]++;
    this.ensureInitialized();
    /* istanbul ignore next */
    cov_1c1br84gi().s[57]++;
    return Array.from(this.sessions.keys());
  }
  /** Get memory statistics */
  getStats() {
    /* istanbul ignore next */
    cov_1c1br84gi().f[5]++;
    cov_1c1br84gi().s[58]++;
    this.updateStats();
    /* istanbul ignore next */
    cov_1c1br84gi().s[59]++;
    return {
      ...this.stats
    };
  }
  /** Clear a specific session */
  async clearSession(sessionId) {
    /* istanbul ignore next */
    cov_1c1br84gi().f[6]++;
    cov_1c1br84gi().s[60]++;
    this.ensureInitialized();
    const deleted =
    /* istanbul ignore next */
    (cov_1c1br84gi().s[61]++, this.sessions.delete(sessionId));
    /* istanbul ignore next */
    cov_1c1br84gi().s[62]++;
    if (deleted) {
      /* istanbul ignore next */
      cov_1c1br84gi().b[15][0]++;
      cov_1c1br84gi().s[63]++;
      this.stats.totalSessions--;
      /* istanbul ignore next */
      cov_1c1br84gi().s[64]++;
      this.emit('sessionCleared', {
        sessionId
      });
    } else
    /* istanbul ignore next */
    {
      cov_1c1br84gi().b[15][1]++;
    }
    cov_1c1br84gi().s[65]++;
    return deleted;
  }
  /** Clear all sessions */
  async clearAll() {
    /* istanbul ignore next */
    cov_1c1br84gi().f[7]++;
    cov_1c1br84gi().s[66]++;
    this.ensureInitialized();
    const count =
    /* istanbul ignore next */
    (cov_1c1br84gi().s[67]++, this.sessions.size);
    /* istanbul ignore next */
    cov_1c1br84gi().s[68]++;
    this.sessions.clear();
    /* istanbul ignore next */
    cov_1c1br84gi().s[69]++;
    this.stats.totalSessions = 0;
    /* istanbul ignore next */
    cov_1c1br84gi().s[70]++;
    this.emit('allCleared', {
      clearedCount: count
    });
  }
  /** Save memory to disk */
  async saveToDisk() {
    /* istanbul ignore next */
    cov_1c1br84gi().f[8]++;
    cov_1c1br84gi().s[71]++;
    this.ensureInitialized();
    /* istanbul ignore next */
    cov_1c1br84gi().s[72]++;
    try {
      const memoryData =
      /* istanbul ignore next */
      (cov_1c1br84gi().s[73]++, {
        namespace: this.namespace,
        timestamp: Date.now(),
        sessions: Array.from(this.sessions.entries()).map(([id, session]) => {
          /* istanbul ignore next */
          cov_1c1br84gi().f[9]++;
          cov_1c1br84gi().s[74]++;
          return {
            id,
            ...session
          };
        }),
        stats: this.stats
      });
      let dataToWrite =
      /* istanbul ignore next */
      (cov_1c1br84gi().s[75]++, JSON.stringify(memoryData, null, 2));
      // Apply compression if enabled
      /* istanbul ignore next */
      cov_1c1br84gi().s[76]++;
      if (this.compressionEnabled) {
        /* istanbul ignore next */
        cov_1c1br84gi().b[16][0]++;
        cov_1c1br84gi().s[77]++;
        // Simple compression could be implemented here
        // For now, just minify JSON
        dataToWrite = JSON.stringify(memoryData);
      } else
      /* istanbul ignore next */
      {
        cov_1c1br84gi().b[16][1]++;
      }
      cov_1c1br84gi().s[78]++;
      writeFileSync(this.memoryFile, dataToWrite);
      /* istanbul ignore next */
      cov_1c1br84gi().s[79]++;
      this.emit('saved', {
        file: this.memoryFile,
        size: dataToWrite.length
      });
    } catch (error) {
      /* istanbul ignore next */
      cov_1c1br84gi().s[80]++;
      console.error('❌ Failed to save memory to disk:', error);
      /* istanbul ignore next */
      cov_1c1br84gi().s[81]++;
      throw error;
    }
  }
  /** Load memory from disk */
  async loadFromDisk() {
    /* istanbul ignore next */
    cov_1c1br84gi().f[10]++;
    cov_1c1br84gi().s[82]++;
    if (!existsSync(this.memoryFile)) {
      /* istanbul ignore next */
      cov_1c1br84gi().b[17][0]++;
      cov_1c1br84gi().s[83]++;
      console.log('📝 No existing memory file found, starting fresh');
      /* istanbul ignore next */
      cov_1c1br84gi().s[84]++;
      return;
    } else
    /* istanbul ignore next */
    {
      cov_1c1br84gi().b[17][1]++;
    }
    cov_1c1br84gi().s[85]++;
    try {
      const dataString =
      /* istanbul ignore next */
      (cov_1c1br84gi().s[86]++, readFileSync(this.memoryFile, 'utf8'));
      const memoryData =
      /* istanbul ignore next */
      (cov_1c1br84gi().s[87]++, JSON.parse(dataString));
      // Restore sessions
      /* istanbul ignore next */
      cov_1c1br84gi().s[88]++;
      if (memoryData.sessions) {
        /* istanbul ignore next */
        cov_1c1br84gi().b[18][0]++;
        cov_1c1br84gi().s[89]++;
        for (const sessionData of memoryData.sessions) {
          /* istanbul ignore next */
          cov_1c1br84gi().s[90]++;
          this.sessions.set(sessionData.id, {
            sessionId: sessionData.sessionId,
            data: sessionData.data,
            metadata: sessionData.metadata
          });
        }
      } else
      /* istanbul ignore next */
      {
        cov_1c1br84gi().b[18][1]++;
      }
      // Restore stats
      cov_1c1br84gi().s[91]++;
      if (memoryData.stats) {
        /* istanbul ignore next */
        cov_1c1br84gi().b[19][0]++;
        cov_1c1br84gi().s[92]++;
        this.stats = {
          ...this.stats,
          ...memoryData.stats
        };
      } else
      /* istanbul ignore next */
      {
        cov_1c1br84gi().b[19][1]++;
      }
      cov_1c1br84gi().s[93]++;
      this.emit('loaded', {
        sessions: this.sessions.size
      });
    } catch (error) {
      /* istanbul ignore next */
      cov_1c1br84gi().s[94]++;
      console.warn('⚠️ Failed to load existing memory, starting fresh:', error);
    }
  }
  /** Start auto-save timer */
  startAutoSave() {
    /* istanbul ignore next */
    cov_1c1br84gi().f[11]++;
    cov_1c1br84gi().s[95]++;
    if (this.autoSaveTimer) {
      /* istanbul ignore next */
      cov_1c1br84gi().b[20][0]++;
      cov_1c1br84gi().s[96]++;
      clearInterval(this.autoSaveTimer);
    } else
    /* istanbul ignore next */
    {
      cov_1c1br84gi().b[20][1]++;
    }
    cov_1c1br84gi().s[97]++;
    this.autoSaveTimer = setInterval(async () => {
      /* istanbul ignore next */
      cov_1c1br84gi().f[12]++;
      cov_1c1br84gi().s[98]++;
      try {
        /* istanbul ignore next */
        cov_1c1br84gi().s[99]++;
        await this.saveToDisk();
      } catch (error) {
        /* istanbul ignore next */
        cov_1c1br84gi().s[100]++;
        console.error('❌ Auto-save failed:', error);
      }
    }, this.options.saveInterval);
  }
  /** Update internal statistics */
  updateStats() {
    /* istanbul ignore next */
    cov_1c1br84gi().f[13]++;
    let totalSize =
    /* istanbul ignore next */
    (cov_1c1br84gi().s[101]++, 0);
    /* istanbul ignore next */
    cov_1c1br84gi().s[102]++;
    for (const session of this.sessions.values()) {
      /* istanbul ignore next */
      cov_1c1br84gi().s[103]++;
      totalSize += session.metadata.size;
    }
    /* istanbul ignore next */
    cov_1c1br84gi().s[104]++;
    this.stats.totalSessions = this.sessions.size;
    /* istanbul ignore next */
    cov_1c1br84gi().s[105]++;
    this.stats.totalSize = totalSize;
  }
  /** Ensure system is initialized */
  ensureInitialized() {
    /* istanbul ignore next */
    cov_1c1br84gi().f[14]++;
    cov_1c1br84gi().s[106]++;
    if (!this.initialized) {
      /* istanbul ignore next */
      cov_1c1br84gi().b[21][0]++;
      cov_1c1br84gi().s[107]++;
      throw new Error('Enhanced memory system not initialized. Call initialize() first.');
    } else
    /* istanbul ignore next */
    {
      cov_1c1br84gi().b[21][1]++;
    }
  }
  /** Cleanup and shutdown */
  async shutdown() {
    /* istanbul ignore next */
    cov_1c1br84gi().f[15]++;
    cov_1c1br84gi().s[108]++;
    if (this.autoSaveTimer) {
      /* istanbul ignore next */
      cov_1c1br84gi().b[22][0]++;
      cov_1c1br84gi().s[109]++;
      clearInterval(this.autoSaveTimer);
    } else
    /* istanbul ignore next */
    {
      cov_1c1br84gi().b[22][1]++;
    }
    cov_1c1br84gi().s[110]++;
    if (this.initialized) {
      /* istanbul ignore next */
      cov_1c1br84gi().b[23][0]++;
      cov_1c1br84gi().s[111]++;
      await this.saveToDisk();
    } else
    /* istanbul ignore next */
    {
      cov_1c1br84gi().b[23][1]++;
    }
    cov_1c1br84gi().s[112]++;
    this.initialized = false;
    /* istanbul ignore next */
    cov_1c1br84gi().s[113]++;
    this.emit('shutdown');
  }
}
export default EnhancedMemory;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,