{"file":"/home/mhugo/code/claude-code-flow/src/__tests__/helpers/example-usage.test.ts","mappings":"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","names":[],"sources":["/home/mhugo/code/claude-code-flow/src/__tests__/helpers/example-usage.test.ts"],"sourcesContent":["/**\n * Example Usage of Test Helper Utilities\n * \n * Demonstrates how to use the comprehensive test helpers for both\n * London School (mock-heavy) and Classical School (real object) TDD approaches\n */\n\nimport { describe, it, expect, beforeEach, afterEach, jest } from '@jest/globals';\n\n// Import all test helpers\nimport {\n  MockBuilder,\n  TestDataFactory,\n  AssertionHelpers,\n  PerformanceMeasurement,\n  IntegrationTestSetup,\n  TestLogger,\n  createLondonMocks,\n  createClassicalMocks,\n  testDataFactory,\n  assertionHelpers,\n  performanceMeasurement,\n  integrationTestSetup,\n  createTestLogger\n} from './index.js';\n\ndescribe('Test Helper Utilities - Example Usage', () => {\n  let testLogger: TestLogger;\n  \n  beforeEach(() => {\n    testLogger = createTestLogger('example-test');\n  });\n\n  afterEach(() => {\n    testLogger.clearLogs();\n  });\n\n  describe('🎭 London School TDD Examples', () => {\n    describe('Mock Builder Usage', () => {\n      it('should create sophisticated mocks for interaction testing', () => {\n        // Create London School mock builder\n        const mockBuilder = createLondonMocks({\n          trackInteractions: true,\n          autoGenerate: true\n        });\n\n        // Create mock dependencies\n        const mocks = mockBuilder.createCommonMocks();\n        \n        // Mock a service class\n        class UserService {\n          constructor(\n            private database: any,\n            private emailService: any,\n            private logger: any\n          ) {}\n\n          async createUser(userData: any) {\n            this.logger.info('Creating user', userData);\n            const user = await this.database.save('users', userData);\n            await this.emailService.sendWelcomeEmail(user.email);\n            return user;\n          }\n        }\n\n        const mockUserService = mockBuilder.create(UserService);\n        \n        // Setup mock expectations (London School style)\n        mocks.database.save.mockResolvedValue({ id: 1, email: 'test@example.com' });\n        mocks.emailService.sendWelcomeEmail.mockResolvedValue(true);\n        \n        testLogger.logInteraction('MockBuilder', 'create', [UserService]);\n        \n        // Verify mock creation\n        expect(mockUserService).toBeDefined();\n        expect(typeof mockUserService.createUser).toBe('function');\n      });\n\n      it('should verify interaction sequences', async () => {\n        const mockDatabase = {\n          connect: jest.fn(),\n          query: jest.fn(),\n          disconnect: jest.fn()\n        };\n\n        // Simulate a service that uses the database\n        class DataService {\n          async getData(id: string) {\n            await mockDatabase.connect();\n            const result = await mockDatabase.query('SELECT * FROM data WHERE id = ?', [id]);\n            await mockDatabase.disconnect();\n            return result;\n          }\n        }\n\n        const service = new DataService();\n        \n        // Setup mocks\n        mockDatabase.connect.mockResolvedValue(undefined);\n        mockDatabase.query.mockResolvedValue([{ id: '123', name: 'test' }]);\n        mockDatabase.disconnect.mockResolvedValue(undefined);\n\n        // Execute\n        const result = await service.getData('123');\n\n        // London School: Verify interactions (HOW it works)\n        expect(mockDatabase.connect).toHaveBeenCalledBefore(mockDatabase.query);\n        expect(mockDatabase.query).toHaveBeenCalledWith('SELECT * FROM data WHERE id = ?', ['123']);\n        expect(mockDatabase.disconnect).toHaveBeenCalledAfter(mockDatabase.query);\n\n        testLogger.logInteraction('DataService', 'getData', ['123'], result);\n      });\n    });\n\n    describe('Advanced Mock Patterns', () => {\n      it('should handle complex dependency injection scenarios', () => {\n        const mockBuilder = createLondonMocks();\n        \n        // Mock complex dependency graph\n        interface EmailProvider {\n          sendEmail(to: string, subject: string, body: string): Promise<boolean>;\n        }\n        \n        interface UserRepository {\n          findByEmail(email: string): Promise<any>;\n          save(user: any): Promise<any>;\n        }\n        \n        class EmailService {\n          constructor(private provider: EmailProvider) {}\n          \n          async sendWelcome(email: string) {\n            return this.provider.sendEmail(email, 'Welcome!', 'Welcome to our service');\n          }\n        }\n        \n        class UserService {\n          constructor(\n            private userRepo: UserRepository,\n            private emailService: EmailService\n          ) {}\n          \n          async registerUser(email: string, name: string) {\n            const existing = await this.userRepo.findByEmail(email);\n            if (existing) throw new Error('User exists');\n            \n            const user = await this.userRepo.save({ email, name });\n            await this.emailService.sendWelcome(email);\n            return user;\n          }\n        }\n\n        // Create mocks\n        const mockEmailProvider = mockBuilder.createPartial<EmailProvider>({\n          sendEmail: jest.fn().mockResolvedValue(true)\n        });\n        \n        const mockUserRepo = mockBuilder.createPartial<UserRepository>({\n          findByEmail: jest.fn().mockResolvedValue(null),\n          save: jest.fn().mockResolvedValue({ id: 1, email: 'test@example.com', name: 'Test' })\n        });\n\n        const emailService = new EmailService(mockEmailProvider);\n        const userService = new UserService(mockUserRepo, emailService);\n\n        // Test the interaction\n        expect(async () => {\n          const user = await userService.registerUser('test@example.com', 'Test User');\n          expect(user).toEqual({ id: 1, email: 'test@example.com', name: 'Test' });\n        }).not.toThrow();\n      });\n    });\n  });\n\n  describe('🏛️ Classical School TDD Examples', () => {\n    describe('Real Object Testing', () => {\n      it('should test actual implementations without mocks', () => {\n        // Classical TDD: Test real behavior, not mocks\n        class Calculator {\n          add(a: number, b: number): number {\n            return a + b;\n          }\n          \n          divide(a: number, b: number): number {\n            if (b === 0) throw new Error('Division by zero');\n            return a / b;\n          }\n          \n          factorial(n: number): number {\n            if (n < 0) throw new Error('Factorial of negative number');\n            if (n <= 1) return 1;\n            return n * this.factorial(n - 1);\n          }\n        }\n\n        const calculator = new Calculator();\n\n        // Test actual mathematical properties\n        expect(calculator.add(2, 3)).toBe(5);\n        expect(calculator.add(-1, 1)).toBe(0);\n        expect(calculator.divide(10, 2)).toBe(5);\n        expect(calculator.factorial(5)).toBe(120);\n        \n        // Test error conditions\n        expect(() => calculator.divide(5, 0)).toThrow('Division by zero');\n        expect(() => calculator.factorial(-1)).toThrow('Factorial of negative number');\n\n        testLogger.logStateChange('Calculator', { operation: 'none' }, { result: 'tested' }, 'mathematical_operations');\n      });\n\n      it('should test algorithms and data structures', () => {\n        // Classical approach: Test actual algorithm behavior\n        class SortingAlgorithms {\n          bubbleSort(arr: number[]): number[] {\n            const result = [...arr];\n            const n = result.length;\n            \n            for (let i = 0; i < n - 1; i++) {\n              for (let j = 0; j < n - i - 1; j++) {\n                if (result[j] > result[j + 1]) {\n                  [result[j], result[j + 1]] = [result[j + 1], result[j]];\n                }\n              }\n            }\n            \n            return result;\n          }\n          \n          quickSort(arr: number[]): number[] {\n            if (arr.length <= 1) return arr;\n            \n            const pivot = arr[Math.floor(arr.length / 2)];\n            const left = arr.filter(x => x < pivot);\n            const middle = arr.filter(x => x === pivot);\n            const right = arr.filter(x => x > pivot);\n            \n            return [...this.quickSort(left), ...middle, ...this.quickSort(right)];\n          }\n        }\n\n        const sorter = new SortingAlgorithms();\n        const testData = [64, 34, 25, 12, 22, 11, 90];\n        const expected = [11, 12, 22, 25, 34, 64, 90];\n\n        // Test both algorithms produce correct results\n        expect(sorter.bubbleSort(testData)).toEqual(expected);\n        expect(sorter.quickSort(testData)).toEqual(expected);\n        \n        // Test edge cases\n        expect(sorter.bubbleSort([])).toEqual([]);\n        expect(sorter.quickSort([1])).toEqual([1]);\n        expect(sorter.bubbleSort([3, 1, 2])).toEqual([1, 2, 3]);\n      });\n    });\n  });\n\n  describe('📊 Performance Testing Examples', () => {\n    it('should measure and compare algorithm performance', async () => {\n      // Test data generation\n      const testData = testDataFactory.createPerformanceData(1000);\n      \n      function linearSearch(arr: any[], target: any): number {\n        for (let i = 0; i < arr.length; i++) {\n          if (arr[i].id === target) return i;\n        }\n        return -1;\n      }\n      \n      function binarySearch(arr: any[], target: any): number {\n        let left = 0;\n        let right = arr.length - 1;\n        \n        while (left <= right) {\n          const mid = Math.floor((left + right) / 2);\n          if (arr[mid].id === target) return mid;\n          if (arr[mid].id < target) left = mid + 1;\n          else right = mid - 1;\n        }\n        return -1;\n      }\n\n      // Sort data for binary search\n      const sortedData = testData.data.sort((a, b) => a.id - b.id);\n      const target = testData.data[500].id;\n\n      // Benchmark comparison\n      const results = await performanceMeasurement.benchmarkComparison([\n        {\n          name: 'Linear Search',\n          fn: () => linearSearch(testData.data, target)\n        },\n        {\n          name: 'Binary Search',\n          fn: () => binarySearch(sortedData, target)\n        }\n      ]);\n\n      // Performance assertions\n      expect(results).toHaveLength(2);\n      expect(results[0].ranking).toBeLessThanOrEqual(2);\n      expect(results[1].ranking).toBeLessThanOrEqual(2);\n      \n      // Binary search should be faster (lower ranking = better performance)\n      const binaryResult = results.find(r => r.name === 'Binary Search');\n      const linearResult = results.find(r => r.name === 'Linear Search');\n      \n      expect(binaryResult!.ranking).toBeLessThan(linearResult!.ranking);\n\n      testLogger.logPerformance('Algorithm Comparison', \n        binaryResult!.metrics.executionTime, \n        { algorithm: 'binary-search' }\n      );\n    });\n\n    it('should detect memory leaks', async () => {\n      // Simulate potential memory leak\n      const leakyFunction = () => {\n        const largeArray: number[] = [];\n        for (let i = 0; i < 1000; i++) {\n          largeArray.push(Math.random());\n        }\n        // Intentionally don't clean up\n        return largeArray.length;\n      };\n\n      const cleanFunction = () => {\n        const smallArray = [1, 2, 3];\n        return smallArray.length;\n      };\n\n      // Test for memory leaks\n      const leakResult = await performanceMeasurement.detectMemoryLeaks(\n        'Leaky Function', \n        leakyFunction, \n        50\n      );\n      \n      const cleanResult = await performanceMeasurement.detectMemoryLeaks(\n        'Clean Function', \n        cleanFunction, \n        50\n      );\n\n      // The leaky function should show memory growth\n      expect(leakResult.memoryGrowth).toBeGreaterThan(cleanResult.memoryGrowth);\n    });\n  });\n\n  describe('🧪 Test Data Factory Examples', () => {\n    it('should generate realistic test data', () => {\n      // Generate consistent test data with seed\n      testDataFactory.resetSeed(12345);\n      \n      const users = testDataFactory.createUsers(5);\n      const projects = Array.from({ length: 3 }, () => testDataFactory.createProject());\n      const swarms = Array.from({ length: 2 }, () => testDataFactory.createSwarm());\n\n      // Verify data structure\n      expect(users).toHaveLength(5);\n      users.forEach(user => {\n        expect(user).toHaveProperty('id');\n        expect(user).toHaveProperty('name');\n        expect(user).toHaveProperty('email');\n        expect(user.email).toMatch(/@/);\n      });\n\n      expect(projects).toHaveLength(3);\n      projects.forEach(project => {\n        expect(project).toHaveProperty('name');\n        expect(project).toHaveProperty('type');\n        expect(['typescript', 'javascript', 'python', 'rust']).toContain(project.type);\n      });\n\n      expect(swarms).toHaveLength(2);\n      swarms.forEach(swarm => {\n        expect(swarm).toHaveProperty('topology');\n        expect(swarm).toHaveProperty('agents');\n        expect(swarm.agents.length).toBeGreaterThan(0);\n      });\n\n      testLogger.logStateChange('TestDataFactory', \n        { users: 0, projects: 0, swarms: 0 }, \n        { users: users.length, projects: projects.length, swarms: swarms.length },\n        'data_generation'\n      );\n    });\n\n    it('should create neural network training data', () => {\n      const trainingData = testDataFactory.createNeuralTrainingData(100);\n      \n      expect(trainingData).toHaveLength(100);\n      trainingData.forEach(sample => {\n        expect(sample).toHaveProperty('input');\n        expect(sample).toHaveProperty('output');\n        expect(sample.input).toHaveLength(3);\n        expect(sample.output).toHaveLength(2);\n        \n        // Verify input range [-1, 1]\n        sample.input.forEach(value => {\n          expect(value).toBeGreaterThanOrEqual(-1);\n          expect(value).toBeLessThanOrEqual(1);\n        });\n        \n        // Verify output range [0, 1]\n        sample.output.forEach(value => {\n          expect(value).toBeGreaterThanOrEqual(0);\n          expect(value).toBeLessThanOrEqual(1);\n        });\n      });\n    });\n  });\n\n  describe('🔧 Integration Test Setup Examples', () => {\n    it('should setup complete test environment', async () => {\n      const testSetup = new IntegrationTestSetup({\n        environment: {\n          database: 'memory',\n          filesystem: 'temp',\n          network: 'mock'\n        },\n        timeout: 10000\n      });\n\n      try {\n        const { database, filesystem, network } = await testSetup.setup();\n\n        // Test database operations\n        await database.setup();\n        await database.seed([\n          { id: 1, name: 'Test User 1' },\n          { id: 2, name: 'Test User 2' }\n        ]);\n        \n        const connection = database.getConnection();\n        expect(connection).toBeDefined();\n\n        // Test filesystem operations\n        const tempDir = await filesystem.createTempDir('integration-test');\n        await filesystem.createFile(`${tempDir}/test.txt`, 'Hello World');\n        \n        const exists = await filesystem.fileExists(`${tempDir}/test.txt`);\n        expect(exists).toBe(true);\n        \n        const content = await filesystem.readFile(`${tempDir}/test.txt`);\n        expect(content).toBe('Hello World');\n\n        // Test network operations\n        const port = await network.startMockServer();\n        expect(port).toBeGreaterThan(0);\n        \n        network.mockRequest('GET', '/api/health', {\n          status: 200,\n          headers: { 'Content-Type': 'application/json' },\n          body: { status: 'healthy' }\n        });\n\n        const client = network.createHttpClient();\n        const response = await client.get('/api/health');\n        expect(response.status).toBe(200);\n        expect(response.body).toEqual({ status: 'healthy' });\n\n        testLogger.logStateChange('IntegrationTest', \n          { environment: 'none' }, \n          { database: 'ready', filesystem: 'ready', network: 'ready' },\n          'environment_setup'\n        );\n      } finally {\n        await testSetup.cleanup();\n      }\n    });\n  });\n\n  describe('✅ Advanced Assertion Examples', () => {\n    it('should use custom assertions for specialized testing', () => {\n      // Performance assertions\n      const metrics = {\n        executionTime: 150,\n        memoryUsage: { heap: 1024 * 1024, external: 512 * 1024, total: 1536 * 1024 },\n        throughput: 1000\n      };\n\n      assertionHelpers.toMeetPerformanceThreshold(metrics, {\n        executionTime: 200,\n        memoryUsage: { heap: 2 * 1024 * 1024 },\n        throughput: 500\n      });\n\n      // Approximate equality\n      assertionHelpers.toBeApproximately(Math.PI, 3.14159, 5);\n\n      // Array assertions\n      assertionHelpers.toContainElementsInAnyOrder([1, 3, 2], [2, 1, 3]);\n\n      // Mathematical properties\n      const increasingValues = [1, 2, 3, 4, 5];\n      assertionHelpers.toSatisfyMathematicalProperty(increasingValues, 'monotonic-increasing');\n\n      testLogger.logAssertion('Custom assertions', true, 'specialized checks', 'passed');\n    });\n\n    it('should handle async assertions with timeouts', async () => {\n      let counter = 0;\n      const eventuallyTrue = () => {\n        counter++;\n        return counter >= 3;\n      };\n\n      // This should eventually become true\n      await assertionHelpers.toEventuallyBeTrue(eventuallyTrue, { \n        timeout: 1000, \n        interval: 50 \n      });\n\n      expect(counter).toBeGreaterThanOrEqual(3);\n    });\n  });\n\n  describe('📝 Test Logger Examples', () => {\n    it('should provide structured logging for test analysis', () => {\n      const componentLogger = testLogger.createChild('UserService');\n\n      // Log different types of events\n      componentLogger.info('Starting user creation process');\n      componentLogger.logInteraction('UserService', 'validateInput', ['user@example.com']);\n      componentLogger.logStateChange('UserValidator', \n        { isValid: false }, \n        { isValid: true }, \n        'email_validation'\n      );\n      componentLogger.logPerformance('Database Insert', 25);\n      componentLogger.logAssertion('User created successfully', true);\n\n      // Verify logs were captured\n      const logs = componentLogger.getLogs();\n      expect(logs.length).toBeGreaterThan(0);\n\n      const performanceLogs = componentLogger.getLogsByCategory('performance');\n      expect(performanceLogs).toHaveLength(1);\n      expect(performanceLogs[0].message).toContain('Database Insert');\n\n      const interactionLogs = componentLogger.getLogsByCategory('interaction');\n      expect(interactionLogs).toHaveLength(1);\n    });\n  });\n});\n\n/**\n * Key Takeaways from Examples:\n * \n * 1. London School TDD:\n *    - Focus on interaction testing\n *    - Heavy use of mocks to isolate units\n *    - Verify HOW objects collaborate\n *    - Test behavior through mock expectations\n * \n * 2. Classical School TDD:\n *    - Focus on state and output testing\n *    - Minimal mocks, prefer real objects\n *    - Verify WHAT the system produces\n *    - Test mathematical and algorithmic correctness\n * \n * 3. Performance Testing:\n *    - Measure execution time and memory usage\n *    - Compare algorithm efficiency\n *    - Detect memory leaks and performance regressions\n *    - Set performance thresholds and assertions\n * \n * 4. Integration Testing:\n *    - Test complete system interactions\n *    - Use realistic data and environments\n *    - Verify end-to-end workflows\n *    - Clean up resources properly\n * \n * 5. Test Data Management:\n *    - Generate reproducible test data\n *    - Create realistic domain objects\n *    - Support various data patterns and edge cases\n *    - Maintain data consistency across tests\n */"],"version":3}