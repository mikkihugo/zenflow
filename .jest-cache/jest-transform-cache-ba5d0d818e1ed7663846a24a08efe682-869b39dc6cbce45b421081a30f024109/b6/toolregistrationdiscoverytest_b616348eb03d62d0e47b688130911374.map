{"file":"/home/mhugo/code/claude-code-flow/src/__tests__/unit/london/mcp-protocol/tool-registration-discovery.test.ts","mappings":"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","names":[],"sources":["/home/mhugo/code/claude-code-flow/src/__tests__/unit/london/mcp-protocol/tool-registration-discovery.test.ts"],"sourcesContent":["/**\n * MCP Tool Registration and Discovery - TDD London Style\n * \n * Tests tool registration and discovery mechanisms using London School principles:\n * - Mock tool registry to focus on registration contracts\n * - Test tool discovery and enumeration behavior\n * - Verify tool metadata validation and schema compliance\n * - Focus on interaction patterns between components\n */\n\nimport { jest, describe, it, expect, beforeEach, afterEach } from '@jest/globals';\nimport type {\n  MCPTool,\n  MCPRequest,\n  MCPResponse,\n  MCPToolCall,\n  MCPToolResult,\n  MCPContext\n} from '../../../../utils/types';\n\n// === MOCK DEPENDENCIES (London School Contract Definition) ===\n\nconst mockToolRegistry = {\n  register: jest.fn(),\n  unregister: jest.fn(),\n  get: jest.fn(),\n  list: jest.fn(),\n  exists: jest.fn(),\n  validateTool: jest.fn(),\n  getSchema: jest.fn()\n};\n\nconst mockSchemaValidator = {\n  validateToolDefinition: jest.fn(),\n  validateInputSchema: jest.fn(),\n  validateToolCall: jest.fn()\n};\n\nconst mockLogger = {\n  debug: jest.fn(),\n  info: jest.fn(),\n  warn: jest.fn(),\n  error: jest.fn()\n};\n\nconst mockMetricsCollector = {\n  recordToolRegistration: jest.fn(),\n  recordToolDiscovery: jest.fn(),\n  recordToolCall: jest.fn(),\n  incrementCounter: jest.fn()\n};\n\nconst mockEventBus = {\n  emit: jest.fn(),\n  on: jest.fn(),\n  off: jest.fn()\n};\n\n// === CONTRACT INTERFACES ===\n\ninterface ToolRegistryContract {\n  registerTool(tool: MCPTool): Promise<RegistrationResult>;\n  unregisterTool(name: string): Promise<boolean>;\n  discoverTools(): Promise<MCPTool[]>;\n  getTool(name: string): Promise<MCPTool | null>;\n  validateToolDefinition(tool: MCPTool): Promise<ValidationResult>;\n}\n\ninterface RegistrationResult {\n  success: boolean;\n  toolName: string;\n  errors?: string[];\n  warnings?: string[];\n}\n\ninterface ValidationResult {\n  valid: boolean;\n  errors: string[];\n  warnings: string[];\n}\n\ninterface ToolDiscoveryContract {\n  handleToolsList(request: MCPRequest): Promise<MCPResponse>;\n  generateToolsResponse(tools: MCPTool[]): MCPResponse;\n  filterToolsByCapabilities(tools: MCPTool[], capabilities: string[]): MCPTool[];\n}\n\n// === MOCK IMPLEMENTATION ===\n\nclass MockMCPToolManager implements ToolRegistryContract, ToolDiscoveryContract {\n  constructor(\n    private registry = mockToolRegistry,\n    private validator = mockSchemaValidator,\n    private logger = mockLogger,\n    private metrics = mockMetricsCollector,\n    private eventBus = mockEventBus\n  ) {}\n\n  async registerTool(tool: MCPTool): Promise<RegistrationResult> {\n    this.logger.info('Registering tool', { name: tool.name });\n    \n    // Validate tool definition\n    const validation = await this.validateToolDefinition(tool);\n    if (!validation.valid) {\n      this.metrics.recordToolRegistration(tool.name, 'failed');\n      return { \n        success: false, \n        toolName: tool.name, \n        errors: validation.errors,\n        warnings: validation.warnings \n      };\n    }\n\n    // Check if tool already exists\n    const exists = this.registry.exists(tool.name);\n    if (exists) {\n      this.logger.warn('Tool already registered, updating', { name: tool.name });\n      this.eventBus.emit('tool:updated', { name: tool.name, tool });\n    } else {\n      this.eventBus.emit('tool:registered', { name: tool.name, tool });\n    }\n\n    // Register with registry\n    const registered = this.registry.register(tool);\n    \n    if (registered) {\n      this.metrics.recordToolRegistration(tool.name, 'success');\n      this.logger.info('Tool registered successfully', { name: tool.name });\n      return { \n        success: true, \n        toolName: tool.name,\n        warnings: validation.warnings \n      };\n    }\n\n    return { \n      success: false, \n      toolName: tool.name, \n      errors: ['Registry registration failed'] \n    };\n  }\n\n  async unregisterTool(name: string): Promise<boolean> {\n    this.logger.info('Unregistering tool', { name });\n    \n    const exists = this.registry.exists(name);\n    if (!exists) {\n      this.logger.warn('Tool not found for unregistration', { name });\n      return false;\n    }\n\n    const unregistered = this.registry.unregister(name);\n    if (unregistered) {\n      this.eventBus.emit('tool:unregistered', { name });\n      this.logger.info('Tool unregistered successfully', { name });\n    }\n\n    return unregistered;\n  }\n\n  async discoverTools(): Promise<MCPTool[]> {\n    this.logger.debug('Discovering available tools');\n    this.metrics.recordToolDiscovery();\n    \n    return this.registry.list();\n  }\n\n  async getTool(name: string): Promise<MCPTool | null> {\n    this.logger.debug('Getting tool', { name });\n    return this.registry.get(name);\n  }\n\n  async validateToolDefinition(tool: MCPTool): Promise<ValidationResult> {\n    const schemaValidation = this.validator.validateToolDefinition(tool);\n    const inputSchemaValidation = this.validator.validateInputSchema(tool.inputSchema);\n    \n    return {\n      valid: schemaValidation.valid && inputSchemaValidation.valid,\n      errors: [...schemaValidation.errors, ...inputSchemaValidation.errors],\n      warnings: [...schemaValidation.warnings, ...inputSchemaValidation.warnings]\n    };\n  }\n\n  async handleToolsList(request: MCPRequest): Promise<MCPResponse> {\n    this.logger.debug('Handling tools/list request', { id: request.id });\n    \n    const tools = await this.discoverTools();\n    return this.generateToolsResponse(tools);\n  }\n\n  generateToolsResponse(tools: MCPTool[]): MCPResponse {\n    return {\n      jsonrpc: '2.0',\n      id: 'tools-list',\n      result: {\n        tools: tools.map(tool => ({\n          name: tool.name,\n          description: tool.description,\n          inputSchema: tool.inputSchema\n        }))\n      }\n    };\n  }\n\n  filterToolsByCapabilities(tools: MCPTool[], capabilities: string[]): MCPTool[] {\n    return tools.filter(tool => \n      capabilities.some(cap => \n        tool.name.includes(cap) || \n        tool.description.toLowerCase().includes(cap.toLowerCase())\n      )\n    );\n  }\n}\n\ndescribe('MCP Tool Registration and Discovery - London TDD', () => {\n  \n  describe('🎯 Acceptance Tests - Tool Registration', () => {\n    \n    describe('User Story: Register New Tool', () => {\n      it('should register a valid tool with proper validation', async () => {\n        // Arrange - Mock successful tool registration\n        mockSchemaValidator.validateToolDefinition.mockReturnValue({\n          valid: true,\n          errors: [],\n          warnings: []\n        });\n        mockSchemaValidator.validateInputSchema.mockReturnValue({\n          valid: true,\n          errors: [],\n          warnings: []\n        });\n        mockToolRegistry.exists.mockReturnValue(false);\n        mockToolRegistry.register.mockReturnValue(true);\n\n        const toolManager = new MockMCPToolManager();\n        \n        const validTool: MCPTool = {\n          name: 'code_analyzer',\n          description: 'Analyzes code quality and patterns',\n          inputSchema: {\n            type: 'object',\n            required: ['codebase'],\n            properties: {\n              codebase: { type: 'string', description: 'Path to codebase' },\n              language: { type: 'string', enum: ['typescript', 'javascript', 'python'] },\n              includeTests: { type: 'boolean', default: false }\n            }\n          },\n          handler: jest.fn()\n        };\n\n        // Act - Register the tool\n        const result = await toolManager.registerTool(validTool);\n\n        // Assert - Verify registration conversation (London School focus)\n        expect(mockLogger.info).toHaveBeenCalledWith(\n          'Registering tool', \n          { name: 'code_analyzer' }\n        );\n        expect(mockSchemaValidator.validateToolDefinition).toHaveBeenCalledWith(validTool);\n        expect(mockSchemaValidator.validateInputSchema).toHaveBeenCalledWith(validTool.inputSchema);\n        expect(mockToolRegistry.exists).toHaveBeenCalledWith('code_analyzer');\n        expect(mockToolRegistry.register).toHaveBeenCalledWith(validTool);\n        expect(mockEventBus.emit).toHaveBeenCalledWith('tool:registered', {\n          name: 'code_analyzer',\n          tool: validTool\n        });\n        expect(mockMetricsCollector.recordToolRegistration).toHaveBeenCalledWith(\n          'code_analyzer', \n          'success'\n        );\n        \n        expect(result.success).toBe(true);\n        expect(result.toolName).toBe('code_analyzer');\n      });\n\n      it('should reject tool with invalid schema', async () => {\n        // Arrange - Mock schema validation failure\n        mockSchemaValidator.validateToolDefinition.mockReturnValue({\n          valid: false,\n          errors: ['Tool name cannot be empty', 'Description is required'],\n          warnings: []\n        });\n        mockSchemaValidator.validateInputSchema.mockReturnValue({\n          valid: true,\n          errors: [],\n          warnings: []\n        });\n\n        const toolManager = new MockMCPToolManager();\n        \n        const invalidTool: MCPTool = {\n          name: '', // Invalid: empty name\n          description: '', // Invalid: empty description\n          inputSchema: { type: 'object' },\n          handler: jest.fn()\n        };\n\n        // Act - Attempt to register invalid tool\n        const result = await toolManager.registerTool(invalidTool);\n\n        // Assert - Verify validation error handling\n        expect(mockSchemaValidator.validateToolDefinition).toHaveBeenCalledWith(invalidTool);\n        expect(mockMetricsCollector.recordToolRegistration).toHaveBeenCalledWith('', 'failed');\n        expect(result.success).toBe(false);\n        expect(result.errors).toContain('Tool name cannot be empty');\n        expect(result.errors).toContain('Description is required');\n      });\n\n      it('should handle tool updates when re-registering existing tool', async () => {\n        // Arrange - Mock tool update scenario\n        mockSchemaValidator.validateToolDefinition.mockReturnValue({\n          valid: true,\n          errors: [],\n          warnings: ['Tool updated with new capabilities']\n        });\n        mockSchemaValidator.validateInputSchema.mockReturnValue({\n          valid: true,\n          errors: [],\n          warnings: []\n        });\n        mockToolRegistry.exists.mockReturnValue(true); // Tool already exists\n        mockToolRegistry.register.mockReturnValue(true);\n\n        const toolManager = new MockMCPToolManager();\n        \n        const updatedTool: MCPTool = {\n          name: 'existing_tool',\n          description: 'Updated tool with enhanced features',\n          inputSchema: {\n            type: 'object',\n            properties: {\n              newFeature: { type: 'boolean' }\n            }\n          },\n          handler: jest.fn()\n        };\n\n        // Act - Re-register existing tool\n        const result = await toolManager.registerTool(updatedTool);\n\n        // Assert - Verify update conversation\n        expect(mockToolRegistry.exists).toHaveBeenCalledWith('existing_tool');\n        expect(mockLogger.warn).toHaveBeenCalledWith(\n          'Tool already registered, updating', \n          { name: 'existing_tool' }\n        );\n        expect(mockEventBus.emit).toHaveBeenCalledWith('tool:updated', {\n          name: 'existing_tool',\n          tool: updatedTool\n        });\n        expect(result.success).toBe(true);\n        expect(result.warnings).toContain('Tool updated with new capabilities');\n      });\n    });\n\n    describe('User Story: Unregister Tool', () => {\n      it('should unregister existing tool successfully', async () => {\n        // Arrange - Mock successful unregistration\n        mockToolRegistry.exists.mockReturnValue(true);\n        mockToolRegistry.unregister.mockReturnValue(true);\n\n        const toolManager = new MockMCPToolManager();\n\n        // Act - Unregister tool\n        const result = await toolManager.unregisterTool('test_tool');\n\n        // Assert - Verify unregistration conversation\n        expect(mockLogger.info).toHaveBeenCalledWith(\n          'Unregistering tool', \n          { name: 'test_tool' }\n        );\n        expect(mockToolRegistry.exists).toHaveBeenCalledWith('test_tool');\n        expect(mockToolRegistry.unregister).toHaveBeenCalledWith('test_tool');\n        expect(mockEventBus.emit).toHaveBeenCalledWith('tool:unregistered', {\n          name: 'test_tool'\n        });\n        expect(result).toBe(true);\n      });\n\n      it('should handle unregistration of non-existent tool', async () => {\n        // Arrange - Mock non-existent tool\n        mockToolRegistry.exists.mockReturnValue(false);\n\n        const toolManager = new MockMCPToolManager();\n\n        // Act - Attempt to unregister non-existent tool\n        const result = await toolManager.unregisterTool('nonexistent_tool');\n\n        // Assert - Verify non-existent tool handling\n        expect(mockToolRegistry.exists).toHaveBeenCalledWith('nonexistent_tool');\n        expect(mockLogger.warn).toHaveBeenCalledWith(\n          'Tool not found for unregistration', \n          { name: 'nonexistent_tool' }\n        );\n        expect(mockToolRegistry.unregister).not.toHaveBeenCalled();\n        expect(result).toBe(false);\n      });\n    });\n  });\n\n  describe('🔍 Acceptance Tests - Tool Discovery', () => {\n    \n    describe('User Story: List Available Tools', () => {\n      it('should discover and return all registered tools', async () => {\n        // Arrange - Mock tool discovery\n        const mockTools: MCPTool[] = [\n          {\n            name: 'analyze_code',\n            description: 'Code analysis tool',\n            inputSchema: { type: 'object' },\n            handler: jest.fn()\n          },\n          {\n            name: 'format_code',\n            description: 'Code formatting tool',\n            inputSchema: { type: 'object' },\n            handler: jest.fn()\n          },\n          {\n            name: 'test_runner',\n            description: 'Test execution tool',\n            inputSchema: { type: 'object' },\n            handler: jest.fn()\n          }\n        ];\n\n        mockToolRegistry.list.mockReturnValue(mockTools);\n\n        const toolManager = new MockMCPToolManager();\n\n        // Act - Discover tools\n        const discoveredTools = await toolManager.discoverTools();\n\n        // Assert - Verify discovery conversation\n        expect(mockLogger.debug).toHaveBeenCalledWith('Discovering available tools');\n        expect(mockMetricsCollector.recordToolDiscovery).toHaveBeenCalled();\n        expect(mockToolRegistry.list).toHaveBeenCalled();\n        expect(discoveredTools).toHaveLength(3);\n        expect(discoveredTools).toEqual(mockTools);\n      });\n\n      it('should handle tools/list MCP request properly', async () => {\n        // Arrange - Mock MCP tools/list request\n        const mockTools: MCPTool[] = [\n          {\n            name: 'test_tool',\n            description: 'Test tool for demo',\n            inputSchema: {\n              type: 'object',\n              required: ['input'],\n              properties: {\n                input: { type: 'string' }\n              }\n            },\n            handler: jest.fn()\n          }\n        ];\n\n        mockToolRegistry.list.mockReturnValue(mockTools);\n\n        const toolManager = new MockMCPToolManager();\n        \n        const toolsListRequest: MCPRequest = {\n          jsonrpc: '2.0',\n          id: 'tools-list-1',\n          method: 'tools/list',\n          params: {}\n        };\n\n        // Act - Handle tools/list request\n        const response = await toolManager.handleToolsList(toolsListRequest);\n\n        // Assert - Verify MCP response generation\n        expect(mockLogger.debug).toHaveBeenCalledWith(\n          'Handling tools/list request', \n          { id: 'tools-list-1' }\n        );\n        expect(response.jsonrpc).toBe('2.0');\n        expect(response.result).toBeDefined();\n        expect(response.result.tools).toHaveLength(1);\n        expect(response.result.tools[0]).toEqual({\n          name: 'test_tool',\n          description: 'Test tool for demo',\n          inputSchema: {\n            type: 'object',\n            required: ['input'],\n            properties: {\n              input: { type: 'string' }\n            }\n          }\n        });\n      });\n    });\n\n    describe('User Story: Filter Tools by Capabilities', () => {\n      it('should filter tools based on capability requirements', async () => {\n        // Arrange - Mock tools with different capabilities\n        const allTools: MCPTool[] = [\n          {\n            name: 'code_analyzer',\n            description: 'Analyzes code quality and complexity',\n            inputSchema: { type: 'object' },\n            handler: jest.fn()\n          },\n          {\n            name: 'test_generator',\n            description: 'Generates unit tests automatically',\n            inputSchema: { type: 'object' },\n            handler: jest.fn()\n          },\n          {\n            name: 'doc_writer',\n            description: 'Creates documentation from code',\n            inputSchema: { type: 'object' },\n            handler: jest.fn()\n          }\n        ];\n\n        const toolManager = new MockMCPToolManager();\n\n        // Act - Filter tools by capabilities\n        const codeRelatedTools = toolManager.filterToolsByCapabilities(\n          allTools, \n          ['code', 'analyzer']\n        );\n        const testRelatedTools = toolManager.filterToolsByCapabilities(\n          allTools, \n          ['test', 'testing']\n        );\n\n        // Assert - Verify filtering logic\n        expect(codeRelatedTools).toHaveLength(2); // code_analyzer + doc_writer (from 'code')\n        expect(codeRelatedTools.map(t => t.name)).toContain('code_analyzer');\n        expect(codeRelatedTools.map(t => t.name)).toContain('doc_writer');\n        \n        expect(testRelatedTools).toHaveLength(1); // test_generator\n        expect(testRelatedTools[0].name).toBe('test_generator');\n      });\n    });\n  });\n\n  describe('🔗 Contract Verification - Tool Access', () => {\n    \n    describe('Individual Tool Access', () => {\n      it('should retrieve specific tool by name', async () => {\n        // Arrange - Mock specific tool retrieval\n        const specificTool: MCPTool = {\n          name: 'specific_tool',\n          description: 'A specific tool for testing',\n          inputSchema: { type: 'object' },\n          handler: jest.fn()\n        };\n\n        mockToolRegistry.get.mockReturnValue(specificTool);\n\n        const toolManager = new MockMCPToolManager();\n\n        // Act - Get specific tool\n        const retrievedTool = await toolManager.getTool('specific_tool');\n\n        // Assert - Verify tool retrieval conversation\n        expect(mockLogger.debug).toHaveBeenCalledWith(\n          'Getting tool', \n          { name: 'specific_tool' }\n        );\n        expect(mockToolRegistry.get).toHaveBeenCalledWith('specific_tool');\n        expect(retrievedTool).toEqual(specificTool);\n      });\n\n      it('should return null for non-existent tool', async () => {\n        // Arrange - Mock non-existent tool\n        mockToolRegistry.get.mockReturnValue(null);\n\n        const toolManager = new MockMCPToolManager();\n\n        // Act - Get non-existent tool\n        const retrievedTool = await toolManager.getTool('nonexistent');\n\n        // Assert - Verify null handling\n        expect(mockToolRegistry.get).toHaveBeenCalledWith('nonexistent');\n        expect(retrievedTool).toBeNull();\n      });\n    });\n  });\n\n  describe('🧪 London School Patterns - Event-Driven Registration', () => {\n    \n    it('should demonstrate event-driven tool lifecycle management', async () => {\n      // Arrange - Mock complete tool lifecycle with events\n      mockSchemaValidator.validateToolDefinition.mockReturnValue({\n        valid: true,\n        errors: [],\n        warnings: []\n      });\n      mockSchemaValidator.validateInputSchema.mockReturnValue({\n        valid: true,\n        errors: [],\n        warnings: []\n      });\n      mockToolRegistry.exists.mockReturnValue(false);\n      mockToolRegistry.register.mockReturnValue(true);\n      mockToolRegistry.unregister.mockReturnValue(true);\n\n      const toolManager = new MockMCPToolManager();\n      \n      const lifecycleTool: MCPTool = {\n        name: 'lifecycle_tool',\n        description: 'Tool for testing lifecycle events',\n        inputSchema: { type: 'object' },\n        handler: jest.fn()\n      };\n\n      // Act - Register tool\n      await toolManager.registerTool(lifecycleTool);\n      \n      // Update exists mock for unregistration\n      mockToolRegistry.exists.mockReturnValue(true);\n      \n      // Act - Unregister tool\n      await toolManager.unregisterTool('lifecycle_tool');\n\n      // Assert - Verify complete event conversation\n      expect(mockEventBus.emit).toHaveBeenCalledWith('tool:registered', {\n        name: 'lifecycle_tool',\n        tool: lifecycleTool\n      });\n      expect(mockEventBus.emit).toHaveBeenCalledWith('tool:unregistered', {\n        name: 'lifecycle_tool'\n      });\n      \n      // Verify call order\n      const emitCalls = mockEventBus.emit.mock.calls;\n      expect(emitCalls[0][0]).toBe('tool:registered');\n      expect(emitCalls[1][0]).toBe('tool:unregistered');\n    });\n  });\n\n  // Clean test isolation - London School principle\n  beforeEach(() => {\n    jest.clearAllMocks();\n  });\n  \n  afterEach(() => {\n    jest.restoreAllMocks();\n  });\n});"],"version":3}