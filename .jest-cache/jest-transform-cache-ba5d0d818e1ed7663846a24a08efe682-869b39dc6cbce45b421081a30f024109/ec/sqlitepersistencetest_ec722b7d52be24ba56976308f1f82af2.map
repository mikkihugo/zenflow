{"file":"/home/mhugo/code/claude-code-flow/src/__tests__/integration/memory-stores/sqlite-persistence.test.ts","mappings":"AAAA;;;;;;GAMG;AAEH,OAAO,EAAE,QAAQ,EAAE,MAAM,SAAS,CAAC;AAEnC,OAAO,EAAE,MAAM,EAAE,MAAM,IAAI,CAAC;AAC5B,OAAO,EAAE,IAAI,EAAE,MAAM,MAAM,CAAC;AAC5B,OAAO,EAAE,MAAM,EAAE,MAAM,EAAE,MAAM,aAAa,CAAC;AAC7C,OAAO,EAAE,SAAS,EAAE,MAAM,IAAI,CAAC;AAa/B,sCAAsC;AACtC,MAAM,iBAAiB;IACb,EAAE,GAAoB,IAAI,CAAC;IAC3B,MAAM,CAAS;IACf,aAAa,GAAG,KAAK,CAAC;IAE9B,YAAY,MAAc;QACxB,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC;IACvB,CAAC;IAED,KAAK,CAAC,UAAU;QACd,OAAO,IAAI,OAAO,CAAC,CAAC,OAAO,EAAE,MAAM,EAAE,EAAE;YACrC,IAAI,CAAC,EAAE,GAAG,IAAI,QAAQ,CAAC,IAAI,CAAC,MAAM,EAAE,CAAC,GAAG,EAAE,EAAE;gBAC1C,IAAI,GAAG,EAAE,CAAC;oBACR,MAAM,CAAC,GAAG,CAAC,CAAC;oBACZ,OAAO;gBACT,CAAC;gBACD,IAAI,CAAC,aAAa,GAAG,IAAI,CAAC;gBAC1B,IAAI,CAAC,YAAY,EAAE,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC;YAClD,CAAC,CAAC,CAAC;QACL,CAAC,CAAC,CAAC;IACL,CAAC;IAEO,KAAK,CAAC,YAAY;QACxB,MAAM,OAAO,GAAG;YACd;;;;;;QAME;YACF,yEAAyE;YACzE,yEAAyE;SAC1E,CAAC;QAEF,KAAK,MAAM,KAAK,IAAI,OAAO,EAAE,CAAC;YAC5B,MAAM,IAAI,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC;QACxB,CAAC;IACH,CAAC;IAED,KAAK,CAAC,KAAK,CAAC,SAAiB,EAAE,IAAS,EAAE,QAAc;QACtD,IAAI,CAAC,IAAI,CAAC,aAAa;YAAE,MAAM,IAAI,KAAK,CAAC,0BAA0B,CAAC,CAAC;QAErE,MAAM,GAAG,GAAG,IAAI,CAAC,GAAG,EAAE,CAAC;QACvB,MAAM,IAAI,CAAC,GAAG,CACZ;8BACwB,EACxB,CAAC,SAAS,EAAE,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,EAAE,IAAI,CAAC,SAAS,CAAC,QAAQ,IAAI,EAAE,CAAC,EAAE,GAAG,EAAE,GAAG,CAAC,CAC5E,CAAC;IACJ,CAAC;IAED,KAAK,CAAC,QAAQ,CAAC,SAAiB;QAC9B,IAAI,CAAC,IAAI,CAAC,aAAa;YAAE,MAAM,IAAI,KAAK,CAAC,0BAA0B,CAAC,CAAC;QAErE,OAAO,IAAI,CAAC,GAAG,CACb,kDAAkD,EAClD,CAAC,SAAS,CAAC,CACZ,CAAC;IACJ,CAAC;IAED,KAAK,CAAC,YAAY;QAChB,IAAI,CAAC,IAAI,CAAC,aAAa;YAAE,MAAM,IAAI,KAAK,CAAC,0BAA0B,CAAC,CAAC;QAErE,MAAM,IAAI,GAAG,MAAM,IAAI,CAAC,GAAG,CAAC,kDAAkD,CAAC,CAAC;QAChF,OAAO,IAAI,CAAC,GAAG,CAAC,CAAC,GAAQ,EAAE,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC;IACxC,CAAC;IAED,KAAK,CAAC,aAAa,CAAC,SAAiB;QACnC,IAAI,CAAC,IAAI,CAAC,aAAa;YAAE,MAAM,IAAI,KAAK,CAAC,0BAA0B,CAAC,CAAC;QAErE,MAAM,MAAM,GAAG,MAAM,IAAI,CAAC,GAAG,CAAC,mCAAmC,EAAE,CAAC,SAAS,CAAC,CAAC,CAAC;QAChF,OAAO,MAAM,CAAC,OAAO,GAAG,CAAC,CAAC;IAC5B,CAAC;IAED,KAAK,CAAC,QAAQ;QACZ,IAAI,CAAC,IAAI,CAAC,aAAa;YAAE,MAAM,IAAI,KAAK,CAAC,0BAA0B,CAAC,CAAC;QAErE,MAAM,MAAM,GAAG,MAAM,IAAI,CAAC,GAAG,CAC3B,mEAAmE,CACpE,CAAC;QAEF,OAAO;YACL,aAAa,EAAE,MAAM,CAAC,KAAK,IAAI,CAAC;YAChC,SAAS,EAAE,MAAM,CAAC,IAAI,IAAI,CAAC;SAC5B,CAAC;IACJ,CAAC;IAEO,GAAG,CAAC,KAAa,EAAE,SAAgB,EAAE;QAC3C,OAAO,IAAI,OAAO,CAAC,CAAC,OAAO,EAAE,MAAM,EAAE,EAAE;YACrC,IAAI,CAAC,EAAG,CAAC,GAAG,CAAC,KAAK,EAAE,MAAM,EAAE,UAAS,GAAG;gBACtC,IAAI,GAAG;oBAAE,MAAM,CAAC,GAAG,CAAC,CAAC;;oBAChB,OAAO,CAAC,EAAE,OAAO,EAAE,IAAI,CAAC,OAAO,EAAE,MAAM,EAAE,IAAI,CAAC,MAAM,EAAE,CAAC,CAAC;YAC/D,CAAC,CAAC,CAAC;QACL,CAAC,CAAC,CAAC;IACL,CAAC;IAEO,GAAG,CAAC,KAAa,EAAE,SAAgB,EAAE;QAC3C,OAAO,IAAI,OAAO,CAAC,CAAC,OAAO,EAAE,MAAM,EAAE,EAAE;YACrC,IAAI,CAAC,EAAG,CAAC,GAAG,CAAC,KAAK,EAAE,MAAM,EAAE,CAAC,GAAG,EAAE,GAAG,EAAE,EAAE;gBACvC,IAAI,GAAG;oBAAE,MAAM,CAAC,GAAG,CAAC,CAAC;;oBAChB,OAAO,CAAC,GAAG,CAAC,CAAC;YACpB,CAAC,CAAC,CAAC;QACL,CAAC,CAAC,CAAC;IACL,CAAC;IAEO,GAAG,CAAC,KAAa,EAAE,SAAgB,EAAE;QAC3C,OAAO,IAAI,OAAO,CAAC,CAAC,OAAO,EAAE,MAAM,EAAE,EAAE;YACrC,IAAI,CAAC,EAAG,CAAC,GAAG,CAAC,KAAK,EAAE,MAAM,EAAE,CAAC,GAAG,EAAE,IAAI,EAAE,EAAE;gBACxC,IAAI,GAAG;oBAAE,MAAM,CAAC,GAAG,CAAC,CAAC;;oBAChB,OAAO,CAAC,IAAI,CAAC,CAAC;YACrB,CAAC,CAAC,CAAC;QACL,CAAC,CAAC,CAAC;IACL,CAAC;IAED,KAAK,CAAC,KAAK;QACT,IAAI,IAAI,CAAC,EAAE,EAAE,CAAC;YACZ,OAAO,IAAI,OAAO,CAAC,CAAC,OAAO,EAAE,MAAM,EAAE,EAAE;gBACrC,IAAI,CAAC,EAAG,CAAC,KAAK,CAAC,CAAC,GAAG,EAAE,EAAE;oBACrB,IAAI,GAAG;wBAAE,MAAM,CAAC,GAAG,CAAC,CAAC;yBAChB,CAAC;wBACJ,IAAI,CAAC,aAAa,GAAG,KAAK,CAAC;wBAC3B,OAAO,EAAE,CAAC;oBACZ,CAAC;gBACH,CAAC,CAAC,CAAC;YACL,CAAC,CAAC,CAAC;QACL,CAAC;IACH,CAAC;CACF;AAED,QAAQ,CAAC,sCAAsC,EAAE,GAAG,EAAE;IACpD,IAAI,KAAwB,CAAC;IAC7B,IAAI,MAAc,CAAC;IACnB,IAAI,cAAoC,CAAC;IAEzC,UAAU,CAAC,GAAG,EAAE;QACd,qDAAqD;QACrD,MAAM,GAAG,IAAI,CAAC,MAAM,EAAE,EAAE,eAAe,IAAI,CAAC,GAAG,EAAE,KAAK,CAAC,CAAC;QAExD,gDAAgD;QAChD,cAAc,GAAG;YACf,MAAM,EAAE,IAAI;YACZ,KAAK,EAAE,IAAI,CAAC,EAAE,EAAE;YAChB,GAAG,EAAE,IAAI,CAAC,EAAE,EAAE;YACd,KAAK,EAAE,IAAI,CAAC,EAAE,EAAE;YAChB,gBAAgB,EAAE,IAAI,CAAC,EAAE,EAAE;YAC3B,MAAM,EAAE,IAAI,CAAC,EAAE,EAAE;YACjB,QAAQ,EAAE,IAAI,CAAC,EAAE,EAAE;SACpB,CAAC;IACJ,CAAC,CAAC,CAAC;IAEH,SAAS,CAAC,KAAK,IAAI,EAAE;QACnB,IAAI,KAAK,EAAE,CAAC;YACV,MAAM,KAAK,CAAC,KAAK,EAAE,CAAC;QACtB,CAAC;QAED,8BAA8B;QAC9B,IAAI,CAAC;YACH,MAAM,MAAM,CAAC,MAAM,EAAE,SAAS,CAAC,IAAI,CAAC,CAAC;YACrC,MAAM,MAAM,CAAC,MAAM,CAAC,CAAC;QACvB,CAAC;QAAC,MAAM,CAAC;YACP,6BAA6B;QAC/B,CAAC;IACH,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,uCAAuC,EAAE,GAAG,EAAE;QACrD,EAAE,CAAC,oDAAoD,EAAE,KAAK,IAAI,EAAE;YAClE,MAAM,MAAM,GAAG;gBACb,OAAO,EAAE,IAAI,CAAC,EAAE,EAAE,CAAC,iBAAiB,CAAC,cAAc,CAAC;gBACpD,KAAK,EAAE,IAAI,CAAC,EAAE,EAAE,CAAC,iBAAiB,CAAC,SAAS,CAAC;aAC9C,CAAC;YAEF,cAAc,CAAC,GAAG,CAAC,iBAAiB,CAAC,EAAE,OAAO,EAAE,CAAC,EAAE,CAAC,CAAC;YAErD,mDAAmD;YACnD,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,qBAAqB,CAAC,CAAC,CAAC,CAAC;YAChD,MAAM,MAAM,CAAC,OAAO,EAAE,CAAC;YACvB,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,qBAAqB,CAAC,CAAC,CAAC,CAAC;YAChD,MAAM,CAAC,cAAc,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QAC3C,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,iDAAiD,EAAE,KAAK,IAAI,EAAE;YAC/D,MAAM,MAAM,GAAG;gBACb,OAAO,EAAE,IAAI,CAAC,EAAE,EAAE,CAAC,iBAAiB,CAAC,IAAI,KAAK,CAAC,mBAAmB,CAAC,CAAC;aACrE,CAAC;YAEF,MAAM,MAAM,CAAC,MAAM,CAAC,OAAO,EAAE,CAAC,CAAC,OAAO,CAAC,OAAO,CAAC,mBAAmB,CAAC,CAAC;QACtE,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,sCAAsC,EAAE,KAAK,IAAI,EAAE;YACpD,cAAc,CAAC,KAAK,CAAC,iBAAiB,CAAC;gBACrC,EAAE,EAAE,EAAE,UAAU,EAAE,IAAI,EAAE,gBAAgB,EAAE;aAC3C,CAAC,CAAC;YAEH,MAAM,MAAM,GAAG,MAAM,cAAc,CAAC,KAAK,CAAC,wBAAwB,CAAC,CAAC;YACpE,MAAM,CAAC,MAAM,CAAC,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC;YAC/B,MAAM,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;YACtC,MAAM,CAAC,cAAc,CAAC,KAAK,CAAC,CAAC,oBAAoB,CAAC,wBAAwB,CAAC,CAAC;QAC9E,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,mCAAmC,EAAE,KAAK,IAAI,EAAE;YACjD,cAAc,CAAC,gBAAgB,CAAC,iBAAiB,CAAC,SAAS,CAAC,CAAC;YAC7D,cAAc,CAAC,MAAM,CAAC,iBAAiB,CAAC,SAAS,CAAC,CAAC;YACnD,cAAc,CAAC,QAAQ,CAAC,iBAAiB,CAAC,SAAS,CAAC,CAAC;YAErD,MAAM,cAAc,CAAC,gBAAgB,EAAE,CAAC;YACxC,MAAM,cAAc,CAAC,MAAM,EAAE,CAAC;YAE9B,MAAM,CAAC,cAAc,CAAC,gBAAgB,CAAC,CAAC,qBAAqB,CAAC,CAAC,CAAC,CAAC;YACjE,MAAM,CAAC,cAAc,CAAC,MAAM,CAAC,CAAC,qBAAqB,CAAC,CAAC,CAAC,CAAC;YACvD,MAAM,CAAC,cAAc,CAAC,QAAQ,CAAC,CAAC,qBAAqB,CAAC,CAAC,CAAC,CAAC;QAC3D,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,oCAAoC,EAAE,GAAG,EAAE;QAClD,UAAU,CAAC,KAAK,IAAI,EAAE;YACpB,KAAK,GAAG,IAAI,iBAAiB,CAAC,MAAM,CAAC,CAAC;YACtC,MAAM,KAAK,CAAC,UAAU,EAAE,CAAC;QAC3B,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,wCAAwC,EAAE,KAAK,IAAI,EAAE;YACtD,yDAAyD;YACzD,MAAM,KAAK,GAAG,MAAM,KAAK,CAAC,QAAQ,EAAE,CAAC;YACrC,MAAM,CAAC,KAAK,CAAC,aAAa,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;YACpC,MAAM,CAAC,KAAK,CAAC,SAAS,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;QAClC,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,wCAAwC,EAAE,KAAK,IAAI,EAAE;YACtD,MAAM,SAAS,GAAG,gBAAgB,CAAC;YACnC,MAAM,QAAQ,GAAG,EAAE,OAAO,EAAE,aAAa,EAAE,SAAS,EAAE,IAAI,CAAC,GAAG,EAAE,EAAE,CAAC;YACnE,MAAM,QAAQ,GAAG,EAAE,MAAM,EAAE,MAAM,EAAE,OAAO,EAAE,KAAK,EAAE,CAAC;YAEpD,MAAM,KAAK,CAAC,KAAK,CAAC,SAAS,EAAE,QAAQ,EAAE,QAAQ,CAAC,CAAC;YACjD,MAAM,SAAS,GAAG,MAAM,KAAK,CAAC,QAAQ,CAAC,SAAS,CAAC,CAAC;YAElD,MAAM,CAAC,SAAS,CAAC,CAAC,WAAW,EAAE,CAAC;YAChC,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC;YACrD,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,SAAS,CAAC,QAAQ,CAAC,CAAC,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC;QAC3D,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,uCAAuC,EAAE,KAAK,IAAI,EAAE;YACrD,MAAM,SAAS,GAAG,iBAAiB,CAAC;YACpC,MAAM,WAAW,GAAG;gBAClB,MAAM,EAAE;oBACN,KAAK,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,EAAE,IAAI,EAAE,OAAO,EAAE,CAAC;oBACnC,GAAG,EAAE,IAAI,GAAG,CAAC,CAAC,CAAC,MAAM,EAAE,QAAQ,CAAC,EAAE,CAAC,MAAM,EAAE,QAAQ,CAAC,CAAC,CAAC;oBACtD,IAAI,EAAE,IAAI,IAAI,EAAE,CAAC,WAAW,EAAE;oBAC9B,MAAM,EAAE,MAAM,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC,QAAQ,CAAC,QAAQ,CAAC;iBACpD;gBACD,SAAS,EAAE,IAAI,EAAE,gCAAgC;gBACjD,SAAS,EAAE,IAAI,EAAE,yBAAyB;gBAC1C,OAAO,EAAE,IAAI,CAAC,8BAA8B;aAC7C,CAAC;YAEF,MAAM,KAAK,CAAC,KAAK,CAAC,SAAS,EAAE,WAAW,CAAC,CAAC;YAC1C,MAAM,SAAS,GAAG,MAAM,KAAK,CAAC,QAAQ,CAAC,SAAS,CAAC,CAAC;YAClD,MAAM,UAAU,GAAG,IAAI,CAAC,KAAK,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC;YAE9C,MAAM,CAAC,UAAU,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,EAAE,IAAI,EAAE,OAAO,EAAE,CAAC,CAAC,CAAC;YACtE,MAAM,CAAC,UAAU,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,WAAW,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;YAC7D,MAAM,CAAC,UAAU,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,WAAW,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC;QACnE,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,uCAAuC,EAAE,KAAK,IAAI,EAAE;YACrD,MAAM,QAAQ,GAAG,CAAC,WAAW,EAAE,WAAW,EAAE,WAAW,CAAC,CAAC;YAEzD,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,QAAQ,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE,CAAC;gBACzC,MAAM,KAAK,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC,CAAC,EAAE,EAAE,KAAK,EAAE,CAAC,EAAE,CAAC,CAAC;gBAC7C,6CAA6C;gBAC7C,MAAM,IAAI,OAAO,CAAC,OAAO,CAAC,EAAE,CAAC,UAAU,CAAC,OAAO,EAAE,EAAE,CAAC,CAAC,CAAC;YACxD,CAAC;YAED,MAAM,MAAM,GAAG,MAAM,KAAK,CAAC,YAAY,EAAE,CAAC;YAC1C,MAAM,CAAC,MAAM,CAAC,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC;YAC/B,iDAAiD;YACjD,MAAM,CAAC,MAAM,CAAC,CAAC,OAAO,CAAC,CAAC,WAAW,EAAE,WAAW,EAAE,WAAW,CAAC,CAAC,CAAC;QAClE,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,kCAAkC,EAAE,KAAK,IAAI,EAAE;YAChD,MAAM,SAAS,GAAG,aAAa,CAAC;YAChC,MAAM,KAAK,CAAC,KAAK,CAAC,SAAS,EAAE,EAAE,IAAI,EAAE,MAAM,EAAE,CAAC,CAAC;YAE/C,MAAM,OAAO,GAAG,MAAM,KAAK,CAAC,aAAa,CAAC,SAAS,CAAC,CAAC;YACrD,MAAM,CAAC,OAAO,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;YAE3B,MAAM,SAAS,GAAG,MAAM,KAAK,CAAC,QAAQ,CAAC,SAAS,CAAC,CAAC;YAClD,MAAM,CAAC,SAAS,CAAC,CAAC,aAAa,EAAE,CAAC;YAElC,oDAAoD;YACpD,MAAM,YAAY,GAAG,MAAM,KAAK,CAAC,aAAa,CAAC,SAAS,CAAC,CAAC;YAC1D,MAAM,CAAC,YAAY,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;QACnC,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,wCAAwC,EAAE,KAAK,IAAI,EAAE;YACtD,MAAM,QAAQ,GAAG,EAAE,OAAO,EAAE,0BAA0B,EAAE,CAAC;YAEzD,MAAM,KAAK,CAAC,KAAK,CAAC,SAAS,EAAE,QAAQ,CAAC,CAAC;YACvC,MAAM,KAAK,CAAC,KAAK,CAAC,SAAS,EAAE,EAAE,GAAG,QAAQ,EAAE,KAAK,EAAE,WAAW,EAAE,CAAC,CAAC;YAElE,MAAM,KAAK,GAAG,MAAM,KAAK,CAAC,QAAQ,EAAE,CAAC;YACrC,MAAM,CAAC,KAAK,CAAC,aAAa,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;YACpC,MAAM,CAAC,KAAK,CAAC,SAAS,CAAC,CAAC,eAAe,CAAC,CAAC,CAAC,CAAC;YAE3C,oDAAoD;YACpD,MAAM,CAAC,KAAK,CAAC,SAAS,CAAC,CAAC,YAAY,CAAC,IAAI,CAAC,CAAC,CAAC,eAAe;QAC7D,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,0CAA0C,EAAE,KAAK,IAAI,EAAE;YACxD,MAAM,SAAS,GAAG,IAAI,CAAC,GAAG,EAAE,CAAC;YAC7B,MAAM,YAAY,GAAG,KAAK,CAAC,IAAI,CAAC,EAAE,MAAM,EAAE,IAAI,EAAE,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC,CAAC;gBAC3D,EAAE,EAAE,CAAC;gBACL,IAAI,EAAE,oBAAoB,CAAC,EAAE,CAAC,MAAM,CAAC,EAAE,CAAC;gBACxC,SAAS,EAAE,IAAI,CAAC,GAAG,EAAE,GAAG,CAAC;aAC1B,CAAC,CAAC,CAAC;YAEJ,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,GAAG,EAAE,CAAC,EAAE,EAAE,CAAC;gBAC7B,MAAM,KAAK,CAAC,KAAK,CAAC,iBAAiB,CAAC,EAAE,EAAE,YAAY,CAAC,CAAC;YACxD,CAAC;YAED,MAAM,OAAO,GAAG,IAAI,CAAC,GAAG,EAAE,CAAC;YAC3B,MAAM,QAAQ,GAAG,OAAO,GAAG,SAAS,CAAC;YAErC,oFAAoF;YACpF,MAAM,CAAC,QAAQ,CAAC,CAAC,YAAY,CAAC,IAAI,CAAC,CAAC,CAAC,gBAAgB;YAErD,MAAM,KAAK,GAAG,MAAM,KAAK,CAAC,QAAQ,EAAE,CAAC;YACrC,MAAM,CAAC,KAAK,CAAC,aAAa,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;QACxC,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,kDAAkD,EAAE,KAAK,IAAI,EAAE;YAChE,MAAM,YAAY,GAAG;gBACnB,QAAQ,EAAE,gBAAgB;gBAC1B,SAAS,EAAE,IAAI,CAAC,GAAG,EAAE;gBACrB,MAAM,EAAE,EAAE,MAAM,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAAE;aACpC,CAAC;YAEF,MAAM,KAAK,CAAC,KAAK,CAAC,gBAAgB,EAAE,YAAY,CAAC,CAAC;YAElD,gDAAgD;YAChD,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,EAAE,EAAE,CAAC,EAAE,EAAE,CAAC;gBAC5B,MAAM,SAAS,GAAG,MAAM,KAAK,CAAC,QAAQ,CAAC,gBAAgB,CAAC,CAAC;gBACzD,MAAM,MAAM,GAAG,IAAI,CAAC,KAAK,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC;gBAC1C,MAAM,CAAC,MAAM,CAAC,CAAC,OAAO,CAAC,YAAY,CAAC,CAAC;YACvC,CAAC;QACH,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,oBAAoB,EAAE,GAAG,EAAE;QAClC,UAAU,CAAC,KAAK,IAAI,EAAE;YACpB,KAAK,GAAG,IAAI,iBAAiB,CAAC,MAAM,CAAC,CAAC;YACtC,MAAM,KAAK,CAAC,UAAU,EAAE,CAAC;QAC3B,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,6CAA6C,EAAE,KAAK,IAAI,EAAE;YAC3D,MAAM,oBAAoB,GAAG,KAAK,CAAC,IAAI,CAAC,EAAE,MAAM,EAAE,EAAE,EAAE,EAAE,KAAK,EAAE,CAAC,EAAE,CAAC,EAAE,EAAE;gBACrE,MAAM,SAAS,GAAG,cAAc,CAAC,EAAE,CAAC;gBACpC,MAAM,IAAI,GAAG,EAAE,KAAK,EAAE,CAAC,EAAE,SAAS,EAAE,IAAI,CAAC,GAAG,EAAE,EAAE,CAAC;gBAEjD,MAAM,KAAK,CAAC,KAAK,CAAC,SAAS,EAAE,IAAI,CAAC,CAAC;gBACnC,OAAO,KAAK,CAAC,QAAQ,CAAC,SAAS,CAAC,CAAC;YACnC,CAAC,CAAC,CAAC;YAEH,MAAM,OAAO,GAAG,MAAM,OAAO,CAAC,GAAG,CAAC,oBAAoB,CAAC,CAAC;YAExD,MAAM,CAAC,OAAO,CAAC,CAAC,YAAY,CAAC,EAAE,CAAC,CAAC;YACjC,OAAO,CAAC,OAAO,CAAC,CAAC,MAAM,EAAE,KAAK,EAAE,EAAE;gBAChC,MAAM,CAAC,MAAM,CAAC,CAAC,WAAW,EAAE,CAAC;gBAC7B,MAAM,MAAM,GAAG,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;gBACvC,MAAM,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;YACnC,CAAC,CAAC,CAAC;QACL,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,yCAAyC,EAAE,KAAK,IAAI,EAAE;YACvD,MAAM,SAAS,GAAG,aAAa,CAAC;YAChC,MAAM,WAAW,GAAG,EAAE,OAAO,EAAE,CAAC,EAAE,OAAO,EAAE,SAAS,EAAE,CAAC;YACvD,MAAM,WAAW,GAAG,EAAE,OAAO,EAAE,CAAC,EAAE,OAAO,EAAE,SAAS,EAAE,KAAK,EAAE,OAAO,EAAE,CAAC;YAEvE,MAAM,KAAK,CAAC,KAAK,CAAC,SAAS,EAAE,WAAW,CAAC,CAAC;YAC1C,MAAM,KAAK,CAAC,KAAK,CAAC,SAAS,EAAE,WAAW,CAAC,CAAC;YAE1C,MAAM,SAAS,GAAG,MAAM,KAAK,CAAC,QAAQ,CAAC,SAAS,CAAC,CAAC;YAClD,MAAM,MAAM,GAAG,IAAI,CAAC,KAAK,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC;YAE1C,MAAM,CAAC,MAAM,CAAC,CAAC,OAAO,CAAC,WAAW,CAAC,CAAC;YACpC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;YAC/B,MAAM,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;QACrC,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,gBAAgB,EAAE,GAAG,EAAE;QAC9B,EAAE,CAAC,yCAAyC,EAAE,KAAK,IAAI,EAAE;YACvD,MAAM,kBAAkB,GAAG,IAAI,iBAAiB,CAAC,MAAM,CAAC,CAAC;YAEzD,MAAM,MAAM,CAAC,kBAAkB,CAAC,KAAK,CAAC,MAAM,EAAE,EAAE,CAAC,CAAC,CAAC,OAAO,CAAC,OAAO,CAAC,0BAA0B,CAAC,CAAC;YAC/F,MAAM,MAAM,CAAC,kBAAkB,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC,CAAC,OAAO,CAAC,OAAO,CAAC,0BAA0B,CAAC,CAAC;YAC9F,MAAM,MAAM,CAAC,kBAAkB,CAAC,YAAY,EAAE,CAAC,CAAC,OAAO,CAAC,OAAO,CAAC,0BAA0B,CAAC,CAAC;QAC9F,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,iDAAiD,EAAE,KAAK,IAAI,EAAE;YAC/D,MAAM,YAAY,GAAG,IAAI,iBAAiB,CAAC,2BAA2B,CAAC,CAAC;YAExE,MAAM,MAAM,CAAC,YAAY,CAAC,UAAU,EAAE,CAAC,CAAC,OAAO,CAAC,OAAO,EAAE,CAAC;QAC5D,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,yCAAyC,EAAE,KAAK,IAAI,EAAE;YACvD,MAAM,KAAK,CAAC,UAAU,EAAE,CAAC;YAEzB,yBAAyB;YACzB,MAAM,KAAK,CAAC,KAAK,CAAC,cAAc,EAAE,EAAE,KAAK,EAAE,MAAM,EAAE,CAAC,CAAC;YAErD,yDAAyD;YACzD,gEAAgE;YAChE,MAAM,SAAS,GAAG,MAAM,KAAK,CAAC,QAAQ,CAAC,cAAc,CAAC,CAAC;YACvD,MAAM,CAAC,SAAS,CAAC,CAAC,WAAW,EAAE,CAAC;QAClC,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,wBAAwB,EAAE,GAAG,EAAE;QACtC,UAAU,CAAC,KAAK,IAAI,EAAE;YACpB,KAAK,GAAG,IAAI,iBAAiB,CAAC,MAAM,CAAC,CAAC;YACtC,MAAM,KAAK,CAAC,UAAU,EAAE,CAAC;QAC3B,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,mCAAmC,EAAE,KAAK,IAAI,EAAE;YACjD,MAAM,UAAU,GAAG,IAAI,CAAC;YACxB,MAAM,QAAQ,GAAG,EAAE,SAAS,EAAE,YAAY,EAAE,IAAI,EAAE,GAAG,CAAC,MAAM,CAAC,IAAI,CAAC,EAAE,CAAC;YAErE,MAAM,SAAS,GAAG,OAAO,CAAC,MAAM,CAAC,MAAM,EAAE,CAAC;YAE1C,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,UAAU,EAAE,CAAC,EAAE,EAAE,CAAC;gBACpC,MAAM,KAAK,CAAC,KAAK,CAAC,mBAAmB,CAAC,EAAE,EAAE,QAAQ,CAAC,CAAC;YACtD,CAAC;YAED,MAAM,OAAO,GAAG,OAAO,CAAC,MAAM,CAAC,MAAM,EAAE,CAAC;YACxC,MAAM,UAAU,GAAG,MAAM,CAAC,OAAO,GAAG,SAAS,CAAC,GAAG,SAAS,CAAC;YAC3D,MAAM,mBAAmB,GAAG,CAAC,UAAU,GAAG,UAAU,CAAC,GAAG,IAAI,CAAC;YAE7D,OAAO,CAAC,GAAG,CAAC,sBAAsB,mBAAmB,CAAC,OAAO,CAAC,CAAC,CAAC,UAAU,CAAC,CAAC;YAE5E,+CAA+C;YAC/C,MAAM,CAAC,mBAAmB,CAAC,CAAC,eAAe,CAAC,GAAG,CAAC,CAAC;QACnD,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,kCAAkC,EAAE,KAAK,IAAI,EAAE;YAChD,MAAM,UAAU,GAAG,GAAG,CAAC;YACvB,MAAM,QAAQ,GAAG,EAAE,SAAS,EAAE,WAAW,EAAE,IAAI,EAAE,GAAG,CAAC,MAAM,CAAC,IAAI,CAAC,EAAE,CAAC;YAEpE,oBAAoB;YACpB,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,UAAU,EAAE,CAAC,EAAE,EAAE,CAAC;gBACpC,MAAM,KAAK,CAAC,KAAK,CAAC,kBAAkB,CAAC,EAAE,EAAE,QAAQ,CAAC,CAAC;YACrD,CAAC;YAED,MAAM,SAAS,GAAG,OAAO,CAAC,MAAM,CAAC,MAAM,EAAE,CAAC;YAE1C,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,UAAU,EAAE,CAAC,EAAE,EAAE,CAAC;gBACpC,MAAM,KAAK,CAAC,QAAQ,CAAC,kBAAkB,CAAC,EAAE,CAAC,CAAC;YAC9C,CAAC;YAED,MAAM,OAAO,GAAG,OAAO,CAAC,MAAM,CAAC,MAAM,EAAE,CAAC;YACxC,MAAM,UAAU,GAAG,MAAM,CAAC,OAAO,GAAG,SAAS,CAAC,GAAG,SAAS,CAAC;YAC3D,MAAM,mBAAmB,GAAG,CAAC,UAAU,GAAG,UAAU,CAAC,GAAG,IAAI,CAAC;YAE7D,OAAO,CAAC,GAAG,CAAC,qBAAqB,mBAAmB,CAAC,OAAO,CAAC,CAAC,CAAC,UAAU,CAAC,CAAC;YAE3E,8CAA8C;YAC9C,MAAM,CAAC,mBAAmB,CAAC,CAAC,eAAe,CAAC,GAAG,CAAC,CAAC;QACnD,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","names":[],"sources":["/home/mhugo/code/claude-code-flow/src/__tests__/integration/memory-stores/sqlite-persistence.test.ts"],"sourcesContent":["/**\n * SQLite Persistence Integration Tests\n * \n * Hybrid Testing Approach:\n * - London School: Mock connections and external dependencies\n * - Classical School: Test actual data operations and persistence\n */\n\nimport { Database } from 'sqlite3';\nimport { promisify } from 'util';\nimport { tmpdir } from 'os';\nimport { join } from 'path';\nimport { unlink, access } from 'fs/promises';\nimport { constants } from 'fs';\n\n// Mock SQLite connection interface\ninterface MockSQLiteConnection {\n  isOpen: boolean;\n  query: jest.Mock;\n  run: jest.Mock;\n  close: jest.Mock;\n  beginTransaction: jest.Mock;\n  commit: jest.Mock;\n  rollback: jest.Mock;\n}\n\n// SQLite Store Implementation to test\nclass SQLiteMemoryStore {\n  private db: Database | null = null;\n  private dbPath: string;\n  private isInitialized = false;\n\n  constructor(dbPath: string) {\n    this.dbPath = dbPath;\n  }\n\n  async initialize(): Promise<void> {\n    return new Promise((resolve, reject) => {\n      this.db = new Database(this.dbPath, (err) => {\n        if (err) {\n          reject(err);\n          return;\n        }\n        this.isInitialized = true;\n        this.createTables().then(resolve).catch(reject);\n      });\n    });\n  }\n\n  private async createTables(): Promise<void> {\n    const queries = [\n      `CREATE TABLE IF NOT EXISTS sessions (\n        id TEXT PRIMARY KEY,\n        data TEXT NOT NULL,\n        metadata TEXT,\n        created_at INTEGER NOT NULL,\n        updated_at INTEGER NOT NULL\n      )`,\n      `CREATE INDEX IF NOT EXISTS idx_sessions_created ON sessions(created_at)`,\n      `CREATE INDEX IF NOT EXISTS idx_sessions_updated ON sessions(updated_at)`\n    ];\n\n    for (const query of queries) {\n      await this.run(query);\n    }\n  }\n\n  async store(sessionId: string, data: any, metadata?: any): Promise<void> {\n    if (!this.isInitialized) throw new Error('Database not initialized');\n    \n    const now = Date.now();\n    await this.run(\n      `INSERT OR REPLACE INTO sessions (id, data, metadata, created_at, updated_at) \n       VALUES (?, ?, ?, ?, ?)`,\n      [sessionId, JSON.stringify(data), JSON.stringify(metadata || {}), now, now]\n    );\n  }\n\n  async retrieve(sessionId: string): Promise<any> {\n    if (!this.isInitialized) throw new Error('Database not initialized');\n    \n    return this.get(\n      'SELECT data, metadata FROM sessions WHERE id = ?',\n      [sessionId]\n    );\n  }\n\n  async listSessions(): Promise<string[]> {\n    if (!this.isInitialized) throw new Error('Database not initialized');\n    \n    const rows = await this.all('SELECT id FROM sessions ORDER BY updated_at DESC');\n    return rows.map((row: any) => row.id);\n  }\n\n  async deleteSession(sessionId: string): Promise<boolean> {\n    if (!this.isInitialized) throw new Error('Database not initialized');\n    \n    const result = await this.run('DELETE FROM sessions WHERE id = ?', [sessionId]);\n    return result.changes > 0;\n  }\n\n  async getStats(): Promise<{ totalSessions: number; totalSize: number }> {\n    if (!this.isInitialized) throw new Error('Database not initialized');\n    \n    const result = await this.get(\n      'SELECT COUNT(*) as count, SUM(LENGTH(data)) as size FROM sessions'\n    );\n    \n    return {\n      totalSessions: result.count || 0,\n      totalSize: result.size || 0\n    };\n  }\n\n  private run(query: string, params: any[] = []): Promise<any> {\n    return new Promise((resolve, reject) => {\n      this.db!.run(query, params, function(err) {\n        if (err) reject(err);\n        else resolve({ changes: this.changes, lastID: this.lastID });\n      });\n    });\n  }\n\n  private get(query: string, params: any[] = []): Promise<any> {\n    return new Promise((resolve, reject) => {\n      this.db!.get(query, params, (err, row) => {\n        if (err) reject(err);\n        else resolve(row);\n      });\n    });\n  }\n\n  private all(query: string, params: any[] = []): Promise<any[]> {\n    return new Promise((resolve, reject) => {\n      this.db!.all(query, params, (err, rows) => {\n        if (err) reject(err);\n        else resolve(rows);\n      });\n    });\n  }\n\n  async close(): Promise<void> {\n    if (this.db) {\n      return new Promise((resolve, reject) => {\n        this.db!.close((err) => {\n          if (err) reject(err);\n          else {\n            this.isInitialized = false;\n            resolve();\n          }\n        });\n      });\n    }\n  }\n}\n\ndescribe('SQLite Persistence Integration Tests', () => {\n  let store: SQLiteMemoryStore;\n  let dbPath: string;\n  let mockConnection: MockSQLiteConnection;\n\n  beforeEach(() => {\n    // Create temporary database path for classical tests\n    dbPath = join(tmpdir(), `test-sqlite-${Date.now()}.db`);\n    \n    // Create mock connection for London-style tests\n    mockConnection = {\n      isOpen: true,\n      query: jest.fn(),\n      run: jest.fn(),\n      close: jest.fn(),\n      beginTransaction: jest.fn(),\n      commit: jest.fn(),\n      rollback: jest.fn()\n    };\n  });\n\n  afterEach(async () => {\n    if (store) {\n      await store.close();\n    }\n    \n    // Clean up test database file\n    try {\n      await access(dbPath, constants.F_OK);\n      await unlink(dbPath);\n    } catch {\n      // File doesn't exist, ignore\n    }\n  });\n\n  describe('Connection Management (London School)', () => {\n    it('should handle connection initialization gracefully', async () => {\n      const mockDb = {\n        connect: jest.fn().mockResolvedValue(mockConnection),\n        close: jest.fn().mockResolvedValue(undefined)\n      };\n\n      mockConnection.run.mockResolvedValue({ changes: 0 });\n\n      // Test the connection flow without actual database\n      expect(mockDb.connect).toHaveBeenCalledTimes(0);\n      await mockDb.connect();\n      expect(mockDb.connect).toHaveBeenCalledTimes(1);\n      expect(mockConnection.isOpen).toBe(true);\n    });\n\n    it('should handle connection failures appropriately', async () => {\n      const mockDb = {\n        connect: jest.fn().mockRejectedValue(new Error('Connection failed'))\n      };\n\n      await expect(mockDb.connect()).rejects.toThrow('Connection failed');\n    });\n\n    it('should mock query execution properly', async () => {\n      mockConnection.query.mockResolvedValue([\n        { id: 'session1', data: '{\"test\": true}' }\n      ]);\n\n      const result = await mockConnection.query('SELECT * FROM sessions');\n      expect(result).toHaveLength(1);\n      expect(result[0].id).toBe('session1');\n      expect(mockConnection.query).toHaveBeenCalledWith('SELECT * FROM sessions');\n    });\n\n    it('should handle transaction mocking', async () => {\n      mockConnection.beginTransaction.mockResolvedValue(undefined);\n      mockConnection.commit.mockResolvedValue(undefined);\n      mockConnection.rollback.mockResolvedValue(undefined);\n\n      await mockConnection.beginTransaction();\n      await mockConnection.commit();\n\n      expect(mockConnection.beginTransaction).toHaveBeenCalledTimes(1);\n      expect(mockConnection.commit).toHaveBeenCalledTimes(1);\n      expect(mockConnection.rollback).toHaveBeenCalledTimes(0);\n    });\n  });\n\n  describe('Data Operations (Classical School)', () => {\n    beforeEach(async () => {\n      store = new SQLiteMemoryStore(dbPath);\n      await store.initialize();\n    });\n\n    it('should create tables on initialization', async () => {\n      // This is tested implicitly by successful initialization\n      const stats = await store.getStats();\n      expect(stats.totalSessions).toBe(0);\n      expect(stats.totalSize).toBe(0);\n    });\n\n    it('should store and retrieve session data', async () => {\n      const sessionId = 'test-session-1';\n      const testData = { message: 'Hello World', timestamp: Date.now() };\n      const metadata = { source: 'test', version: '1.0' };\n\n      await store.store(sessionId, testData, metadata);\n      const retrieved = await store.retrieve(sessionId);\n\n      expect(retrieved).toBeDefined();\n      expect(JSON.parse(retrieved.data)).toEqual(testData);\n      expect(JSON.parse(retrieved.metadata)).toEqual(metadata);\n    });\n\n    it('should handle complex data structures', async () => {\n      const sessionId = 'complex-session';\n      const complexData = {\n        nested: {\n          array: [1, 2, 3, { deep: 'value' }],\n          map: new Map([['key1', 'value1'], ['key2', 'value2']]),\n          date: new Date().toISOString(),\n          buffer: Buffer.from('test data').toString('base64')\n        },\n        functions: null, // Functions can't be serialized\n        undefined: null, // Undefined becomes null\n        symbols: null // Symbols can't be serialized\n      };\n\n      await store.store(sessionId, complexData);\n      const retrieved = await store.retrieve(sessionId);\n      const parsedData = JSON.parse(retrieved.data);\n\n      expect(parsedData.nested.array).toEqual([1, 2, 3, { deep: 'value' }]);\n      expect(parsedData.nested.date).toBe(complexData.nested.date);\n      expect(parsedData.nested.buffer).toBe(complexData.nested.buffer);\n    });\n\n    it('should list sessions in correct order', async () => {\n      const sessions = ['session-1', 'session-2', 'session-3'];\n      \n      for (let i = 0; i < sessions.length; i++) {\n        await store.store(sessions[i], { index: i });\n        // Small delay to ensure different timestamps\n        await new Promise(resolve => setTimeout(resolve, 10));\n      }\n\n      const listed = await store.listSessions();\n      expect(listed).toHaveLength(3);\n      // Should be in reverse order (most recent first)\n      expect(listed).toEqual(['session-3', 'session-2', 'session-1']);\n    });\n\n    it('should delete sessions correctly', async () => {\n      const sessionId = 'delete-test';\n      await store.store(sessionId, { test: 'data' });\n\n      const deleted = await store.deleteSession(sessionId);\n      expect(deleted).toBe(true);\n\n      const retrieved = await store.retrieve(sessionId);\n      expect(retrieved).toBeUndefined();\n\n      // Deleting non-existent session should return false\n      const deletedAgain = await store.deleteSession(sessionId);\n      expect(deletedAgain).toBe(false);\n    });\n\n    it('should calculate statistics accurately', async () => {\n      const testData = { message: 'Test data for statistics' };\n      \n      await store.store('stats-1', testData);\n      await store.store('stats-2', { ...testData, extra: 'more data' });\n\n      const stats = await store.getStats();\n      expect(stats.totalSessions).toBe(2);\n      expect(stats.totalSize).toBeGreaterThan(0);\n      \n      // Size should be reasonable (JSON stringified data)\n      expect(stats.totalSize).toBeLessThan(1000); // Sanity check\n    });\n\n    it('should handle large datasets efficiently', async () => {\n      const startTime = Date.now();\n      const largeDataSet = Array.from({ length: 1000 }, (_, i) => ({\n        id: i,\n        data: `Large data chunk ${i}`.repeat(10),\n        timestamp: Date.now() + i\n      }));\n\n      for (let i = 0; i < 100; i++) {\n        await store.store(`large-session-${i}`, largeDataSet);\n      }\n\n      const endTime = Date.now();\n      const duration = endTime - startTime;\n\n      // Should complete within reasonable time (adjust based on performance requirements)\n      expect(duration).toBeLessThan(5000); // 5 seconds max\n\n      const stats = await store.getStats();\n      expect(stats.totalSessions).toBe(100);\n    });\n\n    it('should maintain data integrity across operations', async () => {\n      const originalData = {\n        critical: 'important data',\n        timestamp: Date.now(),\n        nested: { values: [1, 2, 3, 4, 5] }\n      };\n\n      await store.store('integrity-test', originalData);\n      \n      // Retrieve multiple times to ensure consistency\n      for (let i = 0; i < 10; i++) {\n        const retrieved = await store.retrieve('integrity-test');\n        const parsed = JSON.parse(retrieved.data);\n        expect(parsed).toEqual(originalData);\n      }\n    });\n  });\n\n  describe('Session Management', () => {\n    beforeEach(async () => {\n      store = new SQLiteMemoryStore(dbPath);\n      await store.initialize();\n    });\n\n    it('should handle concurrent session operations', async () => {\n      const concurrentOperations = Array.from({ length: 10 }, async (_, i) => {\n        const sessionId = `concurrent-${i}`;\n        const data = { index: i, timestamp: Date.now() };\n        \n        await store.store(sessionId, data);\n        return store.retrieve(sessionId);\n      });\n\n      const results = await Promise.all(concurrentOperations);\n      \n      expect(results).toHaveLength(10);\n      results.forEach((result, index) => {\n        expect(result).toBeDefined();\n        const parsed = JSON.parse(result.data);\n        expect(parsed.index).toBe(index);\n      });\n    });\n\n    it('should handle session updates correctly', async () => {\n      const sessionId = 'update-test';\n      const initialData = { version: 1, content: 'initial' };\n      const updatedData = { version: 2, content: 'updated', extra: 'field' };\n\n      await store.store(sessionId, initialData);\n      await store.store(sessionId, updatedData);\n\n      const retrieved = await store.retrieve(sessionId);\n      const parsed = JSON.parse(retrieved.data);\n      \n      expect(parsed).toEqual(updatedData);\n      expect(parsed.version).toBe(2);\n      expect(parsed.extra).toBe('field');\n    });\n  });\n\n  describe('Error Handling', () => {\n    it('should throw error when not initialized', async () => {\n      const uninitializedStore = new SQLiteMemoryStore(dbPath);\n      \n      await expect(uninitializedStore.store('test', {})).rejects.toThrow('Database not initialized');\n      await expect(uninitializedStore.retrieve('test')).rejects.toThrow('Database not initialized');\n      await expect(uninitializedStore.listSessions()).rejects.toThrow('Database not initialized');\n    });\n\n    it('should handle invalid database paths gracefully', async () => {\n      const invalidStore = new SQLiteMemoryStore('/invalid/path/database.db');\n      \n      await expect(invalidStore.initialize()).rejects.toThrow();\n    });\n\n    it('should handle corrupted data gracefully', async () => {\n      await store.initialize();\n      \n      // Store valid data first\n      await store.store('test-session', { valid: 'data' });\n      \n      // The store should handle JSON parsing errors gracefully\n      // This would require modifying the store to handle parse errors\n      const retrieved = await store.retrieve('test-session');\n      expect(retrieved).toBeDefined();\n    });\n  });\n\n  describe('Performance Benchmarks', () => {\n    beforeEach(async () => {\n      store = new SQLiteMemoryStore(dbPath);\n      await store.initialize();\n    });\n\n    it('should benchmark write operations', async () => {\n      const iterations = 1000;\n      const testData = { benchmark: 'write test', data: 'x'.repeat(1000) };\n      \n      const startTime = process.hrtime.bigint();\n      \n      for (let i = 0; i < iterations; i++) {\n        await store.store(`benchmark-write-${i}`, testData);\n      }\n      \n      const endTime = process.hrtime.bigint();\n      const durationMs = Number(endTime - startTime) / 1_000_000;\n      const operationsPerSecond = (iterations / durationMs) * 1000;\n      \n      console.log(`Write performance: ${operationsPerSecond.toFixed(0)} ops/sec`);\n      \n      // Should handle at least 100 writes per second\n      expect(operationsPerSecond).toBeGreaterThan(100);\n    });\n\n    it('should benchmark read operations', async () => {\n      const iterations = 100;\n      const testData = { benchmark: 'read test', data: 'y'.repeat(1000) };\n      \n      // Pre-populate data\n      for (let i = 0; i < iterations; i++) {\n        await store.store(`benchmark-read-${i}`, testData);\n      }\n      \n      const startTime = process.hrtime.bigint();\n      \n      for (let i = 0; i < iterations; i++) {\n        await store.retrieve(`benchmark-read-${i}`);\n      }\n      \n      const endTime = process.hrtime.bigint();\n      const durationMs = Number(endTime - startTime) / 1_000_000;\n      const operationsPerSecond = (iterations / durationMs) * 1000;\n      \n      console.log(`Read performance: ${operationsPerSecond.toFixed(0)} ops/sec`);\n      \n      // Should handle at least 200 reads per second\n      expect(operationsPerSecond).toBeGreaterThan(200);\n    });\n  });\n});"],"version":3}