{"version":3,"names":["cov_1smwphs069","actualCoverage","useState","useEffect","useCallback","useRef","s","useSwarmStatus","options","b","f","autoStart","pollInterval","onError","onStatusChange","data","setData","loading","setLoading","error","setError","isPolling","setIsPolling","pollIntervalRef","abortControllerRef","fetchSwarmStatus","signal","Promise","resolve","setTimeout","aborted","Error","mockAgents","id","name","type","status","tasksCompleted","currentTask","lastActivity","Date","performance","successRate","avgResponseTime","totalTasks","now","mockMetrics","totalAgents","activeAgents","tasksInProgress","uptime","setHours","throughput","errorRate","avgLatency","agents","metrics","isOnline","lastUpdated","refetch","current","abort","AbortController","statusData","err","message","startPolling","interval","setInterval","stopPolling","clearInterval"],"sources":["/home/mhugo/code/claude-code-flow/src/cli/ui/hooks/use-swarm-status.ts"],"sourcesContent":["import { useState, useEffect, useCallback, useRef } from 'react';\nimport { UseAsyncState } from './index';\n\n// Types for swarm status data\nexport interface SwarmAgent {\n  id: string;\n  name: string;\n  type: string;\n  status: 'active' | 'idle' | 'error' | 'stopped';\n  tasksCompleted: number;\n  currentTask?: string;\n  lastActivity: Date;\n  performance: {\n    successRate: number;\n    avgResponseTime: number;\n    totalTasks: number;\n  };\n}\n\nexport interface SwarmMetrics {\n  totalAgents: number;\n  activeAgents: number;\n  tasksInProgress: number;\n  tasksCompleted: number;\n  totalTasks: number;\n  uptime: number;\n  performance: {\n    throughput: number;\n    errorRate: number;\n    avgLatency: number;\n  };\n}\n\nexport interface SwarmStatusData {\n  agents: SwarmAgent[];\n  metrics: SwarmMetrics;\n  isOnline: boolean;\n  lastUpdated: Date;\n}\n\nexport interface SwarmStatusHook extends UseAsyncState<SwarmStatusData> {\n  agents: SwarmAgent[];\n  metrics: SwarmMetrics | null;\n  isOnline: boolean;\n  startPolling: (interval?: number) => void;\n  stopPolling: () => void;\n  isPolling: boolean;\n}\n\nexport interface UseSwarmStatusOptions {\n  autoStart?: boolean;\n  pollInterval?: number;\n  onError?: (error: Error) => void;\n  onStatusChange?: (status: SwarmStatusData) => void;\n}\n\n/**\n * Custom hook for managing swarm status data\n * \n * Provides real-time swarm status with automatic polling,\n * error handling, and data management.\n */\nexport const useSwarmStatus = (options: UseSwarmStatusOptions = {}): SwarmStatusHook => {\n  const {\n    autoStart = false,\n    pollInterval = 5000,\n    onError,\n    onStatusChange,\n  } = options;\n  \n  const [data, setData] = useState<SwarmStatusData | null>(null);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState<Error | null>(null);\n  const [isPolling, setIsPolling] = useState(false);\n  \n  const pollIntervalRef = useRef<NodeJS.Timeout | null>(null);\n  const abortControllerRef = useRef<AbortController | null>(null);\n  \n  // Mock API function - replace with actual API call\n  const fetchSwarmStatus = useCallback(async (signal?: AbortSignal): Promise<SwarmStatusData> => {\n    // Simulate API delay\n    await new Promise(resolve => setTimeout(resolve, 500));\n    \n    if (signal?.aborted) {\n      throw new Error('Request aborted');\n    }\n    \n    // Mock data - replace with actual API response\n    const mockAgents: SwarmAgent[] = [\n      {\n        id: 'agent-1',\n        name: 'Research Agent',\n        type: 'researcher',\n        status: 'active',\n        tasksCompleted: 15,\n        currentTask: 'Analyzing market trends',\n        lastActivity: new Date(),\n        performance: {\n          successRate: 0.95,\n          avgResponseTime: 1200,\n          totalTasks: 20,\n        },\n      },\n      {\n        id: 'agent-2',\n        name: 'Code Agent',\n        type: 'coder',\n        status: 'idle',\n        tasksCompleted: 8,\n        lastActivity: new Date(Date.now() - 300000), // 5 minutes ago\n        performance: {\n          successRate: 0.88,\n          avgResponseTime: 2100,\n          totalTasks: 12,\n        },\n      },\n    ];\n    \n    const mockMetrics: SwarmMetrics = {\n      totalAgents: 2,\n      activeAgents: 1,\n      tasksInProgress: 1,\n      tasksCompleted: 23,\n      totalTasks: 32,\n      uptime: Date.now() - (new Date().setHours(0, 0, 0, 0)),\n      performance: {\n        throughput: 4.2,\n        errorRate: 0.08,\n        avgLatency: 1650,\n      },\n    };\n    \n    return {\n      agents: mockAgents,\n      metrics: mockMetrics,\n      isOnline: true,\n      lastUpdated: new Date(),\n    };\n  }, []);\n  \n  const refetch = useCallback(async () => {\n    if (loading) return;\n    \n    setLoading(true);\n    setError(null);\n    \n    try {\n      // Cancel previous request\n      abortControllerRef.current?.abort();\n      abortControllerRef.current = new AbortController();\n      \n      const statusData = await fetchSwarmStatus(abortControllerRef.current.signal);\n      \n      setData(statusData);\n      onStatusChange?.(statusData);\n    } catch (err) {\n      const error = err instanceof Error ? err : new Error('Failed to fetch swarm status');\n      \n      if (error.message !== 'Request aborted') {\n        setError(error);\n        onError?.(error);\n      }\n    } finally {\n      setLoading(false);\n    }\n  }, [loading, fetchSwarmStatus, onError, onStatusChange]);\n  \n  const startPolling = useCallback((interval: number = pollInterval) => {\n    if (isPolling) return;\n    \n    setIsPolling(true);\n    \n    // Initial fetch\n    refetch();\n    \n    // Set up polling\n    pollIntervalRef.current = setInterval(() => {\n      refetch();\n    }, interval);\n  }, [isPolling, pollInterval, refetch]);\n  \n  const stopPolling = useCallback(() => {\n    if (!isPolling) return;\n    \n    setIsPolling(false);\n    \n    if (pollIntervalRef.current) {\n      clearInterval(pollIntervalRef.current);\n      pollIntervalRef.current = null;\n    }\n    \n    // Cancel ongoing request\n    abortControllerRef.current?.abort();\n  }, [isPolling]);\n  \n  // Auto-start polling if enabled\n  useEffect(() => {\n    if (autoStart) {\n      startPolling();\n    }\n    \n    return () => {\n      stopPolling();\n    };\n  }, [autoStart, startPolling, stopPolling]);\n  \n  // Cleanup on unmount\n  useEffect(() => {\n    return () => {\n      stopPolling();\n      abortControllerRef.current?.abort();\n    };\n  }, [stopPolling]);\n  \n  return {\n    data,\n    loading,\n    error,\n    refetch,\n    agents: data?.agents || [],\n    metrics: data?.metrics || null,\n    isOnline: data?.isOnline || false,\n    startPolling,\n    stopPolling,\n    isPolling,\n  };\n};\n\n// Default export for convenience\nexport default useSwarmStatus;\n"],"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","ignoreList":[]}