9f8bd921d06def922300e4c48ee8e09b
/* istanbul ignore next */
function cov_1n34bbk4t1() {
  var path = "/home/mhugo/code/claude-code-flow/src/maestro/services/HiveMindPlannerService.ts";
  var hash = "727edfd805c99dfb1b732eb1c49f73d0b6df73b6";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/home/mhugo/code/claude-code-flow/src/maestro/services/HiveMindPlannerService.ts",
    statementMap: {
      "0": {
        start: {
          line: 23,
          column: 8
        },
        end: {
          line: 23,
          column: 33
        }
      },
      "1": {
        start: {
          line: 24,
          column: 8
        },
        end: {
          line: 24,
          column: 29
        }
      },
      "2": {
        start: {
          line: 25,
          column: 8
        },
        end: {
          line: 25,
          column: 41
        }
      },
      "3": {
        start: {
          line: 26,
          column: 8
        },
        end: {
          line: 26,
          column: 43
        }
      },
      "4": {
        start: {
          line: 32,
          column: 80
        },
        end: {
          line: 32,
          column: 87
        }
      },
      "5": {
        start: {
          line: 33,
          column: 8
        },
        end: {
          line: 33,
          column: 99
        }
      },
      "6": {
        start: {
          line: 34,
          column: 8
        },
        end: {
          line: 95,
          column: 9
        }
      },
      "7": {
        start: {
          line: 36,
          column: 12
        },
        end: {
          line: 42,
          column: 13
        }
      },
      "8": {
        start: {
          line: 37,
          column: 43
        },
        end: {
          line: 37,
          column: 86
        }
      },
      "9": {
        start: {
          line: 38,
          column: 16
        },
        end: {
          line: 40,
          column: 17
        }
      },
      "10": {
        start: {
          line: 39,
          column: 20
        },
        end: {
          line: 39,
          column: 46
        }
      },
      "11": {
        start: {
          line: 41,
          column: 16
        },
        end: {
          line: 41,
          column: 104
        }
      },
      "12": {
        start: {
          line: 44,
          column: 33
        },
        end: {
          line: 44,
          column: 80
        }
      },
      "13": {
        start: {
          line: 45,
          column: 12
        },
        end: {
          line: 52,
          column: 13
        }
      },
      "14": {
        start: {
          line: 46,
          column: 16
        },
        end: {
          line: 46,
          column: 82
        }
      },
      "15": {
        start: {
          line: 47,
          column: 16
        },
        end: {
          line: 51,
          column: 18
        }
      },
      "16": {
        start: {
          line: 54,
          column: 32
        },
        end: {
          line: 67,
          column: 13
        }
      },
      "17": {
        start: {
          line: 68,
          column: 12
        },
        end: {
          line: 68,
          column: 107
        }
      },
      "18": {
        start: {
          line: 69,
          column: 25
        },
        end: {
          line: 69,
          column: 68
        }
      },
      "19": {
        start: {
          line: 71,
          column: 27
        },
        end: {
          line: 71,
          column: 83
        }
      },
      "20": {
        start: {
          line: 72,
          column: 12
        },
        end: {
          line: 80,
          column: 13
        }
      },
      "21": {
        start: {
          line: 73,
          column: 16
        },
        end: {
          line: 73,
          column: 115
        }
      },
      "22": {
        start: {
          line: 74,
          column: 16
        },
        end: {
          line: 79,
          column: 18
        }
      },
      "23": {
        start: {
          line: 81,
          column: 12
        },
        end: {
          line: 86,
          column: 14
        }
      },
      "24": {
        start: {
          line: 89,
          column: 12
        },
        end: {
          line: 89,
          column: 142
        }
      },
      "25": {
        start: {
          line: 90,
          column: 12
        },
        end: {
          line: 94,
          column: 14
        }
      },
      "26": {
        start: {
          line: 101,
          column: 8
        },
        end: {
          line: 150,
          column: 9
        }
      },
      "27": {
        start: {
          line: 103,
          column: 38
        },
        end: {
          line: 107,
          column: 14
        }
      },
      "28": {
        start: {
          line: 108,
          column: 12
        },
        end: {
          line: 141,
          column: 13
        }
      },
      "29": {
        start: {
          line: 110,
          column: 16
        },
        end: {
          line: 110,
          column: 96
        }
      },
      "30": {
        start: {
          line: 111,
          column: 32
        },
        end: {
          line: 117,
          column: 18
        }
      },
      "31": {
        start: {
          line: 118,
          column: 16
        },
        end: {
          line: 118,
          column: 60
        }
      },
      "32": {
        start: {
          line: 120,
          column: 39
        },
        end: {
          line: 120,
          column: 99
        }
      },
      "33": {
        start: {
          line: 122,
          column: 16
        },
        end: {
          line: 122,
          column: 59
        }
      },
      "34": {
        start: {
          line: 123,
          column: 16
        },
        end: {
          line: 128,
          column: 18
        }
      },
      "35": {
        start: {
          line: 132,
          column: 30
        },
        end: {
          line: 132,
          column: 50
        }
      },
      "36": {
        start: {
          line: 133,
          column: 16
        },
        end: {
          line: 133,
          column: 86
        }
      },
      "37": {
        start: {
          line: 134,
          column: 39
        },
        end: {
          line: 134,
          column: 103
        }
      },
      "38": {
        start: {
          line: 135,
          column: 16
        },
        end: {
          line: 140,
          column: 18
        }
      },
      "39": {
        start: {
          line: 144,
          column: 12
        },
        end: {
          line: 144,
          column: 120
        }
      },
      "40": {
        start: {
          line: 145,
          column: 12
        },
        end: {
          line: 149,
          column: 14
        }
      },
      "41": {
        start: {
          line: 156,
          column: 31
        },
        end: {
          line: 156,
          column: 65
        }
      },
      "42": {
        start: {
          line: 158,
          column: 21
        },
        end: {
          line: 173,
          column: 9
        }
      },
      "43": {
        start: {
          line: 175,
          column: 23
        },
        end: {
          line: 175,
          column: 73
        }
      },
      "44": {
        start: {
          line: 176,
          column: 8
        },
        end: {
          line: 178,
          column: 9
        }
      },
      "45": {
        start: {
          line: 177,
          column: 12
        },
        end: {
          line: 177,
          column: 85
        }
      },
      "46": {
        start: {
          line: 179,
          column: 8
        },
        end: {
          line: 179,
          column: 64
        }
      },
      "47": {
        start: {
          line: 185,
          column: 8
        },
        end: {
          line: 210,
          column: 2
        }
      },
      "48": {
        start: {
          line: 216,
          column: 8
        },
        end: {
          line: 218,
          column: 9
        }
      },
      "49": {
        start: {
          line: 217,
          column: 12
        },
        end: {
          line: 217,
          column: 26
        }
      },
      "50": {
        start: {
          line: 220,
          column: 8
        },
        end: {
          line: 222,
          column: 9
        }
      },
      "51": {
        start: {
          line: 221,
          column: 12
        },
        end: {
          line: 221,
          column: 109
        }
      },
      "52": {
        start: {
          line: 223,
          column: 8
        },
        end: {
          line: 223,
          column: 56
        }
      },
      "53": {
        start: {
          line: 230,
          column: 23
        },
        end: {
          line: 230,
          column: 54
        }
      },
      "54": {
        start: {
          line: 231,
          column: 32
        },
        end: {
          line: 231,
          column: 79
        }
      },
      "55": {
        start: {
          line: 231,
          column: 55
        },
        end: {
          line: 231,
          column: 78
        }
      },
      "56": {
        start: {
          line: 232,
          column: 8
        },
        end: {
          line: 235,
          column: 9
        }
      },
      "57": {
        start: {
          line: 233,
          column: 12
        },
        end: {
          line: 233,
          column: 75
        }
      },
      "58": {
        start: {
          line: 234,
          column: 12
        },
        end: {
          line: 234,
          column: 24
        }
      },
      "59": {
        start: {
          line: 237,
          column: 27
        },
        end: {
          line: 237,
          column: 86
        }
      },
      "60": {
        start: {
          line: 237,
          column: 59
        },
        end: {
          line: 237,
          column: 85
        }
      },
      "61": {
        start: {
          line: 238,
          column: 8
        },
        end: {
          line: 241,
          column: 9
        }
      },
      "62": {
        start: {
          line: 239,
          column: 12
        },
        end: {
          line: 239,
          column: 101
        }
      },
      "63": {
        start: {
          line: 240,
          column: 12
        },
        end: {
          line: 240,
          column: 33
        }
      },
      "64": {
        start: {
          line: 243,
          column: 28
        },
        end: {
          line: 244,
          column: 63
        }
      },
      "65": {
        start: {
          line: 243,
          column: 60
        },
        end: {
          line: 244,
          column: 62
        }
      },
      "66": {
        start: {
          line: 245,
          column: 8
        },
        end: {
          line: 248,
          column: 9
        }
      },
      "67": {
        start: {
          line: 246,
          column: 12
        },
        end: {
          line: 246,
          column: 102
        }
      },
      "68": {
        start: {
          line: 247,
          column: 12
        },
        end: {
          line: 247,
          column: 34
        }
      },
      "69": {
        start: {
          line: 250,
          column: 31
        },
        end: {
          line: 250,
          column: 91
        }
      },
      "70": {
        start: {
          line: 250,
          column: 63
        },
        end: {
          line: 250,
          column: 90
        }
      },
      "71": {
        start: {
          line: 251,
          column: 8
        },
        end: {
          line: 254,
          column: 9
        }
      },
      "72": {
        start: {
          line: 252,
          column: 12
        },
        end: {
          line: 252,
          column: 78
        }
      },
      "73": {
        start: {
          line: 253,
          column: 12
        },
        end: {
          line: 253,
          column: 37
        }
      },
      "74": {
        start: {
          line: 256,
          column: 8
        },
        end: {
          line: 256,
          column: 90
        }
      },
      "75": {
        start: {
          line: 257,
          column: 8
        },
        end: {
          line: 257,
          column: 34
        }
      },
      "76": {
        start: {
          line: 263,
          column: 29
        },
        end: {
          line: 263,
          column: 53
        }
      },
      "77": {
        start: {
          line: 265,
          column: 8
        },
        end: {
          line: 268,
          column: 9
        }
      },
      "78": {
        start: {
          line: 267,
          column: 12
        },
        end: {
          line: 267,
          column: 24
        }
      },
      "79": {
        start: {
          line: 270,
          column: 8
        },
        end: {
          line: 272,
          column: 9
        }
      },
      "80": {
        start: {
          line: 271,
          column: 12
        },
        end: {
          line: 271,
          column: 24
        }
      },
      "81": {
        start: {
          line: 274,
          column: 28
        },
        end: {
          line: 274,
          column: 71
        }
      },
      "82": {
        start: {
          line: 275,
          column: 23
        },
        end: {
          line: 275,
          column: 63
        }
      },
      "83": {
        start: {
          line: 276,
          column: 24
        },
        end: {
          line: 276,
          column: 71
        }
      },
      "84": {
        start: {
          line: 277,
          column: 8
        },
        end: {
          line: 279,
          column: 9
        }
      },
      "85": {
        start: {
          line: 278,
          column: 12
        },
        end: {
          line: 278,
          column: 24
        }
      },
      "86": {
        start: {
          line: 280,
          column: 8
        },
        end: {
          line: 282,
          column: 9
        }
      },
      "87": {
        start: {
          line: 281,
          column: 12
        },
        end: {
          line: 281,
          column: 24
        }
      },
      "88": {
        start: {
          line: 283,
          column: 8
        },
        end: {
          line: 283,
          column: 21
        }
      },
      "89": {
        start: {
          line: 289,
          column: 8
        },
        end: {
          line: 296,
          column: 9
        }
      },
      "90": {
        start: {
          line: 291,
          column: 16
        },
        end: {
          line: 291,
          column: 90
        }
      },
      "91": {
        start: {
          line: 293,
          column: 16
        },
        end: {
          line: 293,
          column: 82
        }
      },
      "92": {
        start: {
          line: 295,
          column: 16
        },
        end: {
          line: 295,
          column: 68
        }
      },
      "93": {
        start: {
          line: 302,
          column: 8
        },
        end: {
          line: 335,
          column: 11
        }
      },
      "94": {
        start: {
          line: 303,
          column: 30
        },
        end: {
          line: 303,
          column: 40
        }
      },
      "95": {
        start: {
          line: 304,
          column: 34
        },
        end: {
          line: 334,
          column: 20
        }
      },
      "96": {
        start: {
          line: 305,
          column: 16
        },
        end: {
          line: 333,
          column: 17
        }
      },
      "97": {
        start: {
          line: 307,
          column: 20
        },
        end: {
          line: 311,
          column: 21
        }
      },
      "98": {
        start: {
          line: 308,
          column: 24
        },
        end: {
          line: 308,
          column: 53
        }
      },
      "99": {
        start: {
          line: 309,
          column: 24
        },
        end: {
          line: 309,
          column: 84
        }
      },
      "100": {
        start: {
          line: 310,
          column: 24
        },
        end: {
          line: 310,
          column: 31
        }
      },
      "101": {
        start: {
          line: 313,
          column: 33
        },
        end: {
          line: 313,
          column: 68
        }
      },
      "102": {
        start: {
          line: 314,
          column: 20
        },
        end: {
          line: 328,
          column: 21
        }
      },
      "103": {
        start: {
          line: 315,
          column: 24
        },
        end: {
          line: 315,
          column: 53
        }
      },
      "104": {
        start: {
          line: 316,
          column: 24
        },
        end: {
          line: 323,
          column: 25
        }
      },
      "105": {
        start: {
          line: 317,
          column: 43
        },
        end: {
          line: 317,
          column: 87
        }
      },
      "106": {
        start: {
          line: 318,
          column: 49
        },
        end: {
          line: 318,
          column: 97
        }
      },
      "107": {
        start: {
          line: 319,
          column: 28
        },
        end: {
          line: 319,
          column: 69
        }
      },
      "108": {
        start: {
          line: 322,
          column: 28
        },
        end: {
          line: 322,
          column: 98
        }
      },
      "109": {
        start: {
          line: 325,
          column: 25
        },
        end: {
          line: 328,
          column: 21
        }
      },
      "110": {
        start: {
          line: 326,
          column: 24
        },
        end: {
          line: 326,
          column: 53
        }
      },
      "111": {
        start: {
          line: 327,
          column: 24
        },
        end: {
          line: 327,
          column: 97
        }
      },
      "112": {
        start: {
          line: 331,
          column: 20
        },
        end: {
          line: 331,
          column: 49
        }
      },
      "113": {
        start: {
          line: 332,
          column: 20
        },
        end: {
          line: 332,
          column: 111
        }
      },
      "114": {
        start: {
          line: 341,
          column: 28
        },
        end: {
          line: 341,
          column: 62
        }
      },
      "115": {
        start: {
          line: 342,
          column: 28
        },
        end: {
          line: 342,
          column: 60
        }
      },
      "116": {
        start: {
          line: 344,
          column: 8
        },
        end: {
          line: 346,
          column: 9
        }
      },
      "117": {
        start: {
          line: 345,
          column: 12
        },
        end: {
          line: 345,
          column: 26
        }
      },
      "118": {
        start: {
          line: 348,
          column: 8
        },
        end: {
          line: 350,
          column: 9
        }
      },
      "119": {
        start: {
          line: 349,
          column: 12
        },
        end: {
          line: 349,
          column: 83
        }
      },
      "120": {
        start: {
          line: 352,
          column: 8
        },
        end: {
          line: 352,
          column: 78
        }
      },
      "121": {
        start: {
          line: 358,
          column: 23
        },
        end: {
          line: 358,
          column: 70
        }
      },
      "122": {
        start: {
          line: 359,
          column: 8
        },
        end: {
          line: 359,
          column: 62
        }
      },
      "123": {
        start: {
          line: 360,
          column: 8
        },
        end: {
          line: 377,
          column: 9
        }
      },
      "124": {
        start: {
          line: 361,
          column: 12
        },
        end: {
          line: 376,
          column: 15
        }
      },
      "125": {
        start: {
          line: 362,
          column: 16
        },
        end: {
          line: 362,
          column: 106
        }
      },
      "126": {
        start: {
          line: 363,
          column: 16
        },
        end: {
          line: 365,
          column: 17
        }
      },
      "127": {
        start: {
          line: 364,
          column: 20
        },
        end: {
          line: 364,
          column: 58
        }
      },
      "128": {
        start: {
          line: 366,
          column: 16
        },
        end: {
          line: 372,
          column: 17
        }
      },
      "129": {
        start: {
          line: 367,
          column: 20
        },
        end: {
          line: 367,
          column: 61
        }
      },
      "130": {
        start: {
          line: 368,
          column: 20
        },
        end: {
          line: 370,
          column: 23
        }
      },
      "131": {
        start: {
          line: 369,
          column: 24
        },
        end: {
          line: 369,
          column: 58
        }
      },
      "132": {
        start: {
          line: 371,
          column: 20
        },
        end: {
          line: 371,
          column: 37
        }
      },
      "133": {
        start: {
          line: 373,
          column: 16
        },
        end: {
          line: 375,
          column: 17
        }
      },
      "134": {
        start: {
          line: 374,
          column: 20
        },
        end: {
          line: 374,
          column: 77
        }
      },
      "135": {
        start: {
          line: 378,
          column: 8
        },
        end: {
          line: 378,
          column: 24
        }
      },
      "136": {
        start: {
          line: 384,
          column: 23
        },
        end: {
          line: 384,
          column: 70
        }
      },
      "137": {
        start: {
          line: 385,
          column: 8
        },
        end: {
          line: 385,
          column: 72
        }
      },
      "138": {
        start: {
          line: 386,
          column: 8
        },
        end: {
          line: 400,
          column: 9
        }
      },
      "139": {
        start: {
          line: 387,
          column: 12
        },
        end: {
          line: 399,
          column: 15
        }
      },
      "140": {
        start: {
          line: 388,
          column: 16
        },
        end: {
          line: 388,
          column: 93
        }
      },
      "141": {
        start: {
          line: 389,
          column: 16
        },
        end: {
          line: 391,
          column: 17
        }
      },
      "142": {
        start: {
          line: 390,
          column: 20
        },
        end: {
          line: 390,
          column: 58
        }
      },
      "143": {
        start: {
          line: 392,
          column: 16
        },
        end: {
          line: 398,
          column: 17
        }
      },
      "144": {
        start: {
          line: 393,
          column: 20
        },
        end: {
          line: 393,
          column: 61
        }
      },
      "145": {
        start: {
          line: 394,
          column: 20
        },
        end: {
          line: 396,
          column: 23
        }
      },
      "146": {
        start: {
          line: 395,
          column: 24
        },
        end: {
          line: 395,
          column: 58
        }
      },
      "147": {
        start: {
          line: 397,
          column: 20
        },
        end: {
          line: 397,
          column: 37
        }
      },
      "148": {
        start: {
          line: 401,
          column: 8
        },
        end: {
          line: 401,
          column: 24
        }
      },
      "149": {
        start: {
          line: 407,
          column: 27
        },
        end: {
          line: 415,
          column: 9
        }
      },
      "150": {
        start: {
          line: 416,
          column: 23
        },
        end: {
          line: 416,
          column: 70
        }
      },
      "151": {
        start: {
          line: 417,
          column: 8
        },
        end: {
          line: 417,
          column: 66
        }
      },
      "152": {
        start: {
          line: 418,
          column: 8
        },
        end: {
          line: 418,
          column: 44
        }
      },
      "153": {
        start: {
          line: 419,
          column: 8
        },
        end: {
          line: 425,
          column: 11
        }
      },
      "154": {
        start: {
          line: 420,
          column: 12
        },
        end: {
          line: 420,
          column: 56
        }
      },
      "155": {
        start: {
          line: 421,
          column: 12
        },
        end: {
          line: 421,
          column: 50
        }
      },
      "156": {
        start: {
          line: 422,
          column: 12
        },
        end: {
          line: 422,
          column: 53
        }
      },
      "157": {
        start: {
          line: 423,
          column: 12
        },
        end: {
          line: 423,
          column: 62
        }
      },
      "158": {
        start: {
          line: 424,
          column: 12
        },
        end: {
          line: 424,
          column: 61
        }
      },
      "159": {
        start: {
          line: 426,
          column: 8
        },
        end: {
          line: 426,
          column: 24
        }
      },
      "160": {
        start: {
          line: 432,
          column: 27
        },
        end: {
          line: 440,
          column: 9
        }
      },
      "161": {
        start: {
          line: 441,
          column: 23
        },
        end: {
          line: 441,
          column: 70
        }
      },
      "162": {
        start: {
          line: 442,
          column: 8
        },
        end: {
          line: 442,
          column: 72
        }
      },
      "163": {
        start: {
          line: 443,
          column: 8
        },
        end: {
          line: 445,
          column: 9
        }
      },
      "164": {
        start: {
          line: 444,
          column: 12
        },
        end: {
          line: 444,
          column: 64
        }
      },
      "165": {
        start: {
          line: 446,
          column: 8
        },
        end: {
          line: 446,
          column: 44
        }
      },
      "166": {
        start: {
          line: 447,
          column: 8
        },
        end: {
          line: 450,
          column: 11
        }
      },
      "167": {
        start: {
          line: 448,
          column: 12
        },
        end: {
          line: 448,
          column: 56
        }
      },
      "168": {
        start: {
          line: 449,
          column: 12
        },
        end: {
          line: 449,
          column: 50
        }
      },
      "169": {
        start: {
          line: 451,
          column: 8
        },
        end: {
          line: 453,
          column: 9
        }
      },
      "170": {
        start: {
          line: 452,
          column: 12
        },
        end: {
          line: 452,
          column: 78
        }
      },
      "171": {
        start: {
          line: 454,
          column: 8
        },
        end: {
          line: 454,
          column: 24
        }
      },
      "172": {
        start: {
          line: 460,
          column: 8
        },
        end: {
          line: 501,
          column: 9
        }
      },
      "173": {
        start: {
          line: 461,
          column: 31
        },
        end: {
          line: 461,
          column: 32
        }
      },
      "174": {
        start: {
          line: 462,
          column: 40
        },
        end: {
          line: 462,
          column: 45
        }
      },
      "175": {
        start: {
          line: 463,
          column: 41
        },
        end: {
          line: 463,
          column: 46
        }
      },
      "176": {
        start: {
          line: 465,
          column: 12
        },
        end: {
          line: 478,
          column: 13
        }
      },
      "177": {
        start: {
          line: 466,
          column: 16
        },
        end: {
          line: 477,
          column: 17
        }
      },
      "178": {
        start: {
          line: 467,
          column: 46
        },
        end: {
          line: 470,
          column: 22
        }
      },
      "179": {
        start: {
          line: 471,
          column: 20
        },
        end: {
          line: 471,
          column: 60
        }
      },
      "180": {
        start: {
          line: 472,
          column: 20
        },
        end: {
          line: 472,
          column: 49
        }
      },
      "181": {
        start: {
          line: 473,
          column: 20
        },
        end: {
          line: 473,
          column: 50
        }
      },
      "182": {
        start: {
          line: 476,
          column: 20
        },
        end: {
          line: 476,
          column: 126
        }
      },
      "183": {
        start: {
          line: 480,
          column: 27
        },
        end: {
          line: 480,
          column: 58
        }
      },
      "184": {
        start: {
          line: 481,
          column: 31
        },
        end: {
          line: 481,
          column: 78
        }
      },
      "185": {
        start: {
          line: 481,
          column: 54
        },
        end: {
          line: 481,
          column: 77
        }
      },
      "186": {
        start: {
          line: 482,
          column: 12
        },
        end: {
          line: 489,
          column: 14
        }
      },
      "187": {
        start: {
          line: 484,
          column: 60
        },
        end: {
          line: 484,
          column: 82
        }
      },
      "188": {
        start: {
          line: 485,
          column: 61
        },
        end: {
          line: 485,
          column: 84
        }
      },
      "189": {
        start: {
          line: 492,
          column: 12
        },
        end: {
          line: 492,
          column: 129
        }
      },
      "190": {
        start: {
          line: 493,
          column: 12
        },
        end: {
          line: 500,
          column: 14
        }
      },
      "191": {
        start: {
          line: 507,
          column: 8
        },
        end: {
          line: 507,
          column: 89
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 22,
            column: 4
          },
          end: {
            line: 22,
            column: 5
          }
        },
        loc: {
          start: {
            line: 22,
            column: 63
          },
          end: {
            line: 27,
            column: 5
          }
        },
        line: 22
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 31,
            column: 4
          },
          end: {
            line: 31,
            column: 5
          }
        },
        loc: {
          start: {
            line: 31,
            column: 36
          },
          end: {
            line: 96,
            column: 5
          }
        },
        line: 31
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 100,
            column: 4
          },
          end: {
            line: 100,
            column: 5
          }
        },
        loc: {
          start: {
            line: 100,
            column: 43
          },
          end: {
            line: 151,
            column: 5
          }
        },
        line: 100
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 155,
            column: 4
          },
          end: {
            line: 155,
            column: 5
          }
        },
        loc: {
          start: {
            line: 155,
            column: 60
          },
          end: {
            line: 180,
            column: 5
          }
        },
        line: 155
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 184,
            column: 4
          },
          end: {
            line: 184,
            column: 5
          }
        },
        loc: {
          start: {
            line: 184,
            column: 34
          },
          end: {
            line: 211,
            column: 5
          }
        },
        line: 184
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 215,
            column: 4
          },
          end: {
            line: 215,
            column: 5
          }
        },
        loc: {
          start: {
            line: 215,
            column: 50
          },
          end: {
            line: 224,
            column: 5
          }
        },
        line: 215
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 229,
            column: 4
          },
          end: {
            line: 229,
            column: 5
          }
        },
        loc: {
          start: {
            line: 229,
            column: 47
          },
          end: {
            line: 258,
            column: 5
          }
        },
        line: 229
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 231,
            column: 46
          },
          end: {
            line: 231,
            column: 47
          }
        },
        loc: {
          start: {
            line: 231,
            column: 55
          },
          end: {
            line: 231,
            column: 78
          }
        },
        line: 231
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 237,
            column: 50
          },
          end: {
            line: 237,
            column: 51
          }
        },
        loc: {
          start: {
            line: 237,
            column: 59
          },
          end: {
            line: 237,
            column: 85
          }
        },
        line: 237
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 243,
            column: 51
          },
          end: {
            line: 243,
            column: 52
          }
        },
        loc: {
          start: {
            line: 243,
            column: 60
          },
          end: {
            line: 244,
            column: 62
          }
        },
        line: 243
      },
      "10": {
        name: "(anonymous_10)",
        decl: {
          start: {
            line: 250,
            column: 54
          },
          end: {
            line: 250,
            column: 55
          }
        },
        loc: {
          start: {
            line: 250,
            column: 63
          },
          end: {
            line: 250,
            column: 90
          }
        },
        line: 250
      },
      "11": {
        name: "(anonymous_11)",
        decl: {
          start: {
            line: 262,
            column: 4
          },
          end: {
            line: 262,
            column: 5
          }
        },
        loc: {
          start: {
            line: 262,
            column: 50
          },
          end: {
            line: 284,
            column: 5
          }
        },
        line: 262
      },
      "12": {
        name: "(anonymous_12)",
        decl: {
          start: {
            line: 288,
            column: 4
          },
          end: {
            line: 288,
            column: 5
          }
        },
        loc: {
          start: {
            line: 288,
            column: 39
          },
          end: {
            line: 297,
            column: 5
          }
        },
        line: 288
      },
      "13": {
        name: "(anonymous_13)",
        decl: {
          start: {
            line: 301,
            column: 4
          },
          end: {
            line: 301,
            column: 5
          }
        },
        loc: {
          start: {
            line: 301,
            column: 55
          },
          end: {
            line: 336,
            column: 5
          }
        },
        line: 301
      },
      "14": {
        name: "(anonymous_14)",
        decl: {
          start: {
            line: 302,
            column: 27
          },
          end: {
            line: 302,
            column: 28
          }
        },
        loc: {
          start: {
            line: 302,
            column: 40
          },
          end: {
            line: 335,
            column: 9
          }
        },
        line: 302
      },
      "15": {
        name: "(anonymous_15)",
        decl: {
          start: {
            line: 304,
            column: 46
          },
          end: {
            line: 304,
            column: 47
          }
        },
        loc: {
          start: {
            line: 304,
            column: 58
          },
          end: {
            line: 334,
            column: 13
          }
        },
        line: 304
      },
      "16": {
        name: "(anonymous_16)",
        decl: {
          start: {
            line: 340,
            column: 4
          },
          end: {
            line: 340,
            column: 5
          }
        },
        loc: {
          start: {
            line: 340,
            column: 43
          },
          end: {
            line: 353,
            column: 5
          }
        },
        line: 340
      },
      "17": {
        name: "(anonymous_17)",
        decl: {
          start: {
            line: 357,
            column: 4
          },
          end: {
            line: 357,
            column: 5
          }
        },
        loc: {
          start: {
            line: 357,
            column: 66
          },
          end: {
            line: 379,
            column: 5
          }
        },
        line: 357
      },
      "18": {
        name: "(anonymous_18)",
        decl: {
          start: {
            line: 361,
            column: 26
          },
          end: {
            line: 361,
            column: 27
          }
        },
        loc: {
          start: {
            line: 361,
            column: 43
          },
          end: {
            line: 376,
            column: 13
          }
        },
        line: 361
      },
      "19": {
        name: "(anonymous_19)",
        decl: {
          start: {
            line: 368,
            column: 44
          },
          end: {
            line: 368,
            column: 45
          }
        },
        loc: {
          start: {
            line: 368,
            column: 56
          },
          end: {
            line: 370,
            column: 21
          }
        },
        line: 368
      },
      "20": {
        name: "(anonymous_20)",
        decl: {
          start: {
            line: 383,
            column: 4
          },
          end: {
            line: 383,
            column: 5
          }
        },
        loc: {
          start: {
            line: 383,
            column: 56
          },
          end: {
            line: 402,
            column: 5
          }
        },
        line: 383
      },
      "21": {
        name: "(anonymous_21)",
        decl: {
          start: {
            line: 387,
            column: 26
          },
          end: {
            line: 387,
            column: 27
          }
        },
        loc: {
          start: {
            line: 387,
            column: 43
          },
          end: {
            line: 399,
            column: 13
          }
        },
        line: 387
      },
      "22": {
        name: "(anonymous_22)",
        decl: {
          start: {
            line: 394,
            column: 44
          },
          end: {
            line: 394,
            column: 45
          }
        },
        loc: {
          start: {
            line: 394,
            column: 56
          },
          end: {
            line: 396,
            column: 21
          }
        },
        line: 394
      },
      "23": {
        name: "(anonymous_23)",
        decl: {
          start: {
            line: 406,
            column: 4
          },
          end: {
            line: 406,
            column: 5
          }
        },
        loc: {
          start: {
            line: 406,
            column: 40
          },
          end: {
            line: 427,
            column: 5
          }
        },
        line: 406
      },
      "24": {
        name: "(anonymous_24)",
        decl: {
          start: {
            line: 419,
            column: 27
          },
          end: {
            line: 419,
            column: 28
          }
        },
        loc: {
          start: {
            line: 419,
            column: 44
          },
          end: {
            line: 425,
            column: 9
          }
        },
        line: 419
      },
      "25": {
        name: "(anonymous_25)",
        decl: {
          start: {
            line: 431,
            column: 4
          },
          end: {
            line: 431,
            column: 5
          }
        },
        loc: {
          start: {
            line: 431,
            column: 62
          },
          end: {
            line: 455,
            column: 5
          }
        },
        line: 431
      },
      "26": {
        name: "(anonymous_26)",
        decl: {
          start: {
            line: 447,
            column: 27
          },
          end: {
            line: 447,
            column: 28
          }
        },
        loc: {
          start: {
            line: 447,
            column: 44
          },
          end: {
            line: 450,
            column: 9
          }
        },
        line: 447
      },
      "27": {
        name: "(anonymous_27)",
        decl: {
          start: {
            line: 459,
            column: 4
          },
          end: {
            line: 459,
            column: 5
          }
        },
        loc: {
          start: {
            line: 459,
            column: 22
          },
          end: {
            line: 502,
            column: 5
          }
        },
        line: 459
      },
      "28": {
        name: "(anonymous_28)",
        decl: {
          start: {
            line: 481,
            column: 45
          },
          end: {
            line: 481,
            column: 46
          }
        },
        loc: {
          start: {
            line: 481,
            column: 54
          },
          end: {
            line: 481,
            column: 77
          }
        },
        line: 481
      },
      "29": {
        name: "(anonymous_29)",
        decl: {
          start: {
            line: 484,
            column: 55
          },
          end: {
            line: 484,
            column: 56
          }
        },
        loc: {
          start: {
            line: 484,
            column: 60
          },
          end: {
            line: 484,
            column: 82
          }
        },
        line: 484
      },
      "30": {
        name: "(anonymous_30)",
        decl: {
          start: {
            line: 485,
            column: 56
          },
          end: {
            line: 485,
            column: 57
          }
        },
        loc: {
          start: {
            line: 485,
            column: 61
          },
          end: {
            line: 485,
            column: 84
          }
        },
        line: 485
      },
      "31": {
        name: "(anonymous_31)",
        decl: {
          start: {
            line: 506,
            column: 4
          },
          end: {
            line: 506,
            column: 5
          }
        },
        loc: {
          start: {
            line: 506,
            column: 81
          },
          end: {
            line: 508,
            column: 5
          }
        },
        line: 506
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 32,
            column: 58
          },
          end: {
            line: 32,
            column: 75
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 32,
            column: 70
          },
          end: {
            line: 32,
            column: 75
          }
        }],
        line: 32
      },
      "1": {
        loc: {
          start: {
            line: 36,
            column: 12
          },
          end: {
            line: 42,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 36,
            column: 12
          },
          end: {
            line: 42,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 36
      },
      "2": {
        loc: {
          start: {
            line: 36,
            column: 16
          },
          end: {
            line: 36,
            column: 55
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 36,
            column: 16
          },
          end: {
            line: 36,
            column: 33
          }
        }, {
          start: {
            line: 36,
            column: 37
          },
          end: {
            line: 36,
            column: 55
          }
        }],
        line: 36
      },
      "3": {
        loc: {
          start: {
            line: 38,
            column: 16
          },
          end: {
            line: 40,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 38,
            column: 16
          },
          end: {
            line: 40,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 38
      },
      "4": {
        loc: {
          start: {
            line: 45,
            column: 12
          },
          end: {
            line: 52,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 45,
            column: 12
          },
          end: {
            line: 52,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 45
      },
      "5": {
        loc: {
          start: {
            line: 64,
            column: 34
          },
          end: {
            line: 64,
            column: 52
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 64,
            column: 34
          },
          end: {
            line: 64,
            column: 46
          }
        }, {
          start: {
            line: 64,
            column: 50
          },
          end: {
            line: 64,
            column: 52
          }
        }],
        line: 64
      },
      "6": {
        loc: {
          start: {
            line: 72,
            column: 12
          },
          end: {
            line: 80,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 72,
            column: 12
          },
          end: {
            line: 80,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 72
      },
      "7": {
        loc: {
          start: {
            line: 72,
            column: 16
          },
          end: {
            line: 72,
            column: 53
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 72,
            column: 16
          },
          end: {
            line: 72,
            column: 30
          }
        }, {
          start: {
            line: 72,
            column: 34
          },
          end: {
            line: 72,
            column: 53
          }
        }],
        line: 72
      },
      "8": {
        loc: {
          start: {
            line: 83,
            column: 23
          },
          end: {
            line: 83,
            column: 61
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 83,
            column: 23
          },
          end: {
            line: 83,
            column: 35
          }
        }, {
          start: {
            line: 83,
            column: 39
          },
          end: {
            line: 83,
            column: 61
          }
        }],
        line: 83
      },
      "9": {
        loc: {
          start: {
            line: 89,
            column: 84
          },
          end: {
            line: 89,
            column: 138
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 89,
            column: 109
          },
          end: {
            line: 89,
            column: 122
          }
        }, {
          start: {
            line: 89,
            column: 125
          },
          end: {
            line: 89,
            column: 138
          }
        }],
        line: 89
      },
      "10": {
        loc: {
          start: {
            line: 92,
            column: 23
          },
          end: {
            line: 92,
            column: 77
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 92,
            column: 48
          },
          end: {
            line: 92,
            column: 61
          }
        }, {
          start: {
            line: 92,
            column: 64
          },
          end: {
            line: 92,
            column: 77
          }
        }],
        line: 92
      },
      "11": {
        loc: {
          start: {
            line: 108,
            column: 12
          },
          end: {
            line: 141,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 108,
            column: 12
          },
          end: {
            line: 141,
            column: 13
          }
        }, {
          start: {
            line: 130,
            column: 17
          },
          end: {
            line: 141,
            column: 13
          }
        }],
        line: 108
      },
      "12": {
        loc: {
          start: {
            line: 144,
            column: 62
          },
          end: {
            line: 144,
            column: 116
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 144,
            column: 87
          },
          end: {
            line: 144,
            column: 100
          }
        }, {
          start: {
            line: 144,
            column: 103
          },
          end: {
            line: 144,
            column: 116
          }
        }],
        line: 144
      },
      "13": {
        loc: {
          start: {
            line: 147,
            column: 23
          },
          end: {
            line: 147,
            column: 77
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 147,
            column: 48
          },
          end: {
            line: 147,
            column: 61
          }
        }, {
          start: {
            line: 147,
            column: 64
          },
          end: {
            line: 147,
            column: 77
          }
        }],
        line: 147
      },
      "14": {
        loc: {
          start: {
            line: 165,
            column: 30
          },
          end: {
            line: 165,
            column: 56
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 165,
            column: 30
          },
          end: {
            line: 165,
            column: 50
          }
        }, {
          start: {
            line: 165,
            column: 54
          },
          end: {
            line: 165,
            column: 56
          }
        }],
        line: 165
      },
      "15": {
        loc: {
          start: {
            line: 176,
            column: 8
          },
          end: {
            line: 178,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 176,
            column: 8
          },
          end: {
            line: 178,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 176
      },
      "16": {
        loc: {
          start: {
            line: 176,
            column: 12
          },
          end: {
            line: 176,
            column: 35
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 176,
            column: 12
          },
          end: {
            line: 176,
            column: 18
          }
        }, {
          start: {
            line: 176,
            column: 22
          },
          end: {
            line: 176,
            column: 35
          }
        }],
        line: 176
      },
      "17": {
        loc: {
          start: {
            line: 193,
            column: 2
          },
          end: {
            line: 193,
            column: 75
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 193,
            column: 25
          },
          end: {
            line: 193,
            column: 70
          }
        }, {
          start: {
            line: 193,
            column: 73
          },
          end: {
            line: 193,
            column: 75
          }
        }],
        line: 193
      },
      "18": {
        loc: {
          start: {
            line: 216,
            column: 8
          },
          end: {
            line: 218,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 216,
            column: 8
          },
          end: {
            line: 218,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 216
      },
      "19": {
        loc: {
          start: {
            line: 216,
            column: 12
          },
          end: {
            line: 216,
            column: 83
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 216,
            column: 12
          },
          end: {
            line: 216,
            column: 38
          }
        }, {
          start: {
            line: 216,
            column: 42
          },
          end: {
            line: 216,
            column: 83
          }
        }],
        line: 216
      },
      "20": {
        loc: {
          start: {
            line: 220,
            column: 8
          },
          end: {
            line: 222,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 220,
            column: 8
          },
          end: {
            line: 222,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 220
      },
      "21": {
        loc: {
          start: {
            line: 220,
            column: 12
          },
          end: {
            line: 220,
            column: 34
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 220,
            column: 12
          },
          end: {
            line: 220,
            column: 18
          }
        }, {
          start: {
            line: 220,
            column: 22
          },
          end: {
            line: 220,
            column: 34
          }
        }],
        line: 220
      },
      "22": {
        loc: {
          start: {
            line: 232,
            column: 8
          },
          end: {
            line: 235,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 232,
            column: 8
          },
          end: {
            line: 235,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 232
      },
      "23": {
        loc: {
          start: {
            line: 238,
            column: 8
          },
          end: {
            line: 241,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 238,
            column: 8
          },
          end: {
            line: 241,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 238
      },
      "24": {
        loc: {
          start: {
            line: 243,
            column: 60
          },
          end: {
            line: 244,
            column: 62
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 243,
            column: 60
          },
          end: {
            line: 243,
            column: 87
          }
        }, {
          start: {
            line: 244,
            column: 12
          },
          end: {
            line: 244,
            column: 62
          }
        }],
        line: 243
      },
      "25": {
        loc: {
          start: {
            line: 245,
            column: 8
          },
          end: {
            line: 248,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 245,
            column: 8
          },
          end: {
            line: 248,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 245
      },
      "26": {
        loc: {
          start: {
            line: 251,
            column: 8
          },
          end: {
            line: 254,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 251,
            column: 8
          },
          end: {
            line: 254,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 251
      },
      "27": {
        loc: {
          start: {
            line: 263,
            column: 29
          },
          end: {
            line: 263,
            column: 53
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 263,
            column: 29
          },
          end: {
            line: 263,
            column: 47
          }
        }, {
          start: {
            line: 263,
            column: 51
          },
          end: {
            line: 263,
            column: 53
          }
        }],
        line: 263
      },
      "28": {
        loc: {
          start: {
            line: 265,
            column: 8
          },
          end: {
            line: 268,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 265,
            column: 8
          },
          end: {
            line: 268,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 265
      },
      "29": {
        loc: {
          start: {
            line: 265,
            column: 12
          },
          end: {
            line: 266,
            column: 58
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 265,
            column: 12
          },
          end: {
            line: 265,
            column: 50
          }
        }, {
          start: {
            line: 266,
            column: 12
          },
          end: {
            line: 266,
            column: 58
          }
        }],
        line: 265
      },
      "30": {
        loc: {
          start: {
            line: 270,
            column: 8
          },
          end: {
            line: 272,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 270,
            column: 8
          },
          end: {
            line: 272,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 270
      },
      "31": {
        loc: {
          start: {
            line: 277,
            column: 8
          },
          end: {
            line: 279,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 277,
            column: 8
          },
          end: {
            line: 279,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 277
      },
      "32": {
        loc: {
          start: {
            line: 277,
            column: 12
          },
          end: {
            line: 277,
            column: 65
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 277,
            column: 12
          },
          end: {
            line: 277,
            column: 23
          }
        }, {
          start: {
            line: 277,
            column: 27
          },
          end: {
            line: 277,
            column: 65
          }
        }],
        line: 277
      },
      "33": {
        loc: {
          start: {
            line: 280,
            column: 8
          },
          end: {
            line: 282,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 280,
            column: 8
          },
          end: {
            line: 282,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 280
      },
      "34": {
        loc: {
          start: {
            line: 280,
            column: 12
          },
          end: {
            line: 280,
            column: 67
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 280,
            column: 12
          },
          end: {
            line: 280,
            column: 18
          }
        }, {
          start: {
            line: 280,
            column: 22
          },
          end: {
            line: 280,
            column: 67
          }
        }],
        line: 280
      },
      "35": {
        loc: {
          start: {
            line: 289,
            column: 8
          },
          end: {
            line: 296,
            column: 9
          }
        },
        type: "switch",
        locations: [{
          start: {
            line: 290,
            column: 12
          },
          end: {
            line: 291,
            column: 90
          }
        }, {
          start: {
            line: 292,
            column: 12
          },
          end: {
            line: 293,
            column: 82
          }
        }, {
          start: {
            line: 294,
            column: 12
          },
          end: {
            line: 295,
            column: 68
          }
        }],
        line: 289
      },
      "36": {
        loc: {
          start: {
            line: 307,
            column: 20
          },
          end: {
            line: 311,
            column: 21
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 307,
            column: 20
          },
          end: {
            line: 311,
            column: 21
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 307
      },
      "37": {
        loc: {
          start: {
            line: 314,
            column: 20
          },
          end: {
            line: 328,
            column: 21
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 314,
            column: 20
          },
          end: {
            line: 328,
            column: 21
          }
        }, {
          start: {
            line: 325,
            column: 25
          },
          end: {
            line: 328,
            column: 21
          }
        }],
        line: 314
      },
      "38": {
        loc: {
          start: {
            line: 317,
            column: 43
          },
          end: {
            line: 317,
            column: 87
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 317,
            column: 57
          },
          end: {
            line: 317,
            column: 80
          }
        }, {
          start: {
            line: 317,
            column: 83
          },
          end: {
            line: 317,
            column: 87
          }
        }],
        line: 317
      },
      "39": {
        loc: {
          start: {
            line: 325,
            column: 25
          },
          end: {
            line: 328,
            column: 21
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 325,
            column: 25
          },
          end: {
            line: 328,
            column: 21
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 325
      },
      "40": {
        loc: {
          start: {
            line: 327,
            column: 57
          },
          end: {
            line: 327,
            column: 93
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 327,
            column: 57
          },
          end: {
            line: 327,
            column: 67
          }
        }, {
          start: {
            line: 327,
            column: 71
          },
          end: {
            line: 327,
            column: 93
          }
        }],
        line: 327
      },
      "41": {
        loc: {
          start: {
            line: 332,
            column: 53
          },
          end: {
            line: 332,
            column: 107
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 332,
            column: 78
          },
          end: {
            line: 332,
            column: 91
          }
        }, {
          start: {
            line: 332,
            column: 94
          },
          end: {
            line: 332,
            column: 107
          }
        }],
        line: 332
      },
      "42": {
        loc: {
          start: {
            line: 341,
            column: 28
          },
          end: {
            line: 341,
            column: 62
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 341,
            column: 28
          },
          end: {
            line: 341,
            column: 49
          }
        }, {
          start: {
            line: 341,
            column: 53
          },
          end: {
            line: 341,
            column: 62
          }
        }],
        line: 341
      },
      "43": {
        loc: {
          start: {
            line: 342,
            column: 28
          },
          end: {
            line: 342,
            column: 60
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 342,
            column: 28
          },
          end: {
            line: 342,
            column: 49
          }
        }, {
          start: {
            line: 342,
            column: 53
          },
          end: {
            line: 342,
            column: 60
          }
        }],
        line: 342
      },
      "44": {
        loc: {
          start: {
            line: 344,
            column: 8
          },
          end: {
            line: 346,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 344,
            column: 8
          },
          end: {
            line: 346,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 344
      },
      "45": {
        loc: {
          start: {
            line: 344,
            column: 12
          },
          end: {
            line: 344,
            column: 93
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 344,
            column: 12
          },
          end: {
            line: 344,
            column: 18
          }
        }, {
          start: {
            line: 344,
            column: 22
          },
          end: {
            line: 344,
            column: 48
          }
        }, {
          start: {
            line: 344,
            column: 52
          },
          end: {
            line: 344,
            column: 93
          }
        }],
        line: 344
      },
      "46": {
        loc: {
          start: {
            line: 348,
            column: 8
          },
          end: {
            line: 350,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 348,
            column: 8
          },
          end: {
            line: 350,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 348
      },
      "47": {
        loc: {
          start: {
            line: 348,
            column: 12
          },
          end: {
            line: 348,
            column: 34
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 348,
            column: 12
          },
          end: {
            line: 348,
            column: 18
          }
        }, {
          start: {
            line: 348,
            column: 22
          },
          end: {
            line: 348,
            column: 34
          }
        }],
        line: 348
      },
      "48": {
        loc: {
          start: {
            line: 360,
            column: 8
          },
          end: {
            line: 377,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 360,
            column: 8
          },
          end: {
            line: 377,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 360
      },
      "49": {
        loc: {
          start: {
            line: 362,
            column: 53
          },
          end: {
            line: 362,
            column: 99
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 362,
            column: 53
          },
          end: {
            line: 362,
            column: 63
          }
        }, {
          start: {
            line: 362,
            column: 67
          },
          end: {
            line: 362,
            column: 76
          }
        }, {
          start: {
            line: 362,
            column: 80
          },
          end: {
            line: 362,
            column: 99
          }
        }],
        line: 362
      },
      "50": {
        loc: {
          start: {
            line: 363,
            column: 16
          },
          end: {
            line: 365,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 363,
            column: 16
          },
          end: {
            line: 365,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 363
      },
      "51": {
        loc: {
          start: {
            line: 366,
            column: 16
          },
          end: {
            line: 372,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 366,
            column: 16
          },
          end: {
            line: 372,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 366
      },
      "52": {
        loc: {
          start: {
            line: 366,
            column: 20
          },
          end: {
            line: 366,
            column: 69
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 366,
            column: 20
          },
          end: {
            line: 366,
            column: 35
          }
        }, {
          start: {
            line: 366,
            column: 39
          },
          end: {
            line: 366,
            column: 69
          }
        }],
        line: 366
      },
      "53": {
        loc: {
          start: {
            line: 373,
            column: 16
          },
          end: {
            line: 375,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 373,
            column: 16
          },
          end: {
            line: 375,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 373
      },
      "54": {
        loc: {
          start: {
            line: 386,
            column: 8
          },
          end: {
            line: 400,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 386,
            column: 8
          },
          end: {
            line: 400,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 386
      },
      "55": {
        loc: {
          start: {
            line: 388,
            column: 53
          },
          end: {
            line: 388,
            column: 86
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 388,
            column: 53
          },
          end: {
            line: 388,
            column: 63
          }
        }, {
          start: {
            line: 388,
            column: 67
          },
          end: {
            line: 388,
            column: 86
          }
        }],
        line: 388
      },
      "56": {
        loc: {
          start: {
            line: 389,
            column: 16
          },
          end: {
            line: 391,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 389,
            column: 16
          },
          end: {
            line: 391,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 389
      },
      "57": {
        loc: {
          start: {
            line: 392,
            column: 16
          },
          end: {
            line: 398,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 392,
            column: 16
          },
          end: {
            line: 398,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 392
      },
      "58": {
        loc: {
          start: {
            line: 392,
            column: 20
          },
          end: {
            line: 392,
            column: 69
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 392,
            column: 20
          },
          end: {
            line: 392,
            column: 35
          }
        }, {
          start: {
            line: 392,
            column: 39
          },
          end: {
            line: 392,
            column: 69
          }
        }],
        line: 392
      },
      "59": {
        loc: {
          start: {
            line: 443,
            column: 8
          },
          end: {
            line: 445,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 443,
            column: 8
          },
          end: {
            line: 445,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 443
      },
      "60": {
        loc: {
          start: {
            line: 443,
            column: 12
          },
          end: {
            line: 443,
            column: 37
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 443,
            column: 12
          },
          end: {
            line: 443,
            column: 18
          }
        }, {
          start: {
            line: 443,
            column: 22
          },
          end: {
            line: 443,
            column: 37
          }
        }],
        line: 443
      },
      "61": {
        loc: {
          start: {
            line: 451,
            column: 8
          },
          end: {
            line: 453,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 451,
            column: 8
          },
          end: {
            line: 453,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 451
      },
      "62": {
        loc: {
          start: {
            line: 451,
            column: 12
          },
          end: {
            line: 451,
            column: 44
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 451,
            column: 12
          },
          end: {
            line: 451,
            column: 18
          }
        }, {
          start: {
            line: 451,
            column: 22
          },
          end: {
            line: 451,
            column: 44
          }
        }],
        line: 451
      },
      "63": {
        loc: {
          start: {
            line: 465,
            column: 12
          },
          end: {
            line: 478,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 465,
            column: 12
          },
          end: {
            line: 478,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 465
      },
      "64": {
        loc: {
          start: {
            line: 465,
            column: 16
          },
          end: {
            line: 465,
            column: 55
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 465,
            column: 16
          },
          end: {
            line: 465,
            column: 33
          }
        }, {
          start: {
            line: 465,
            column: 37
          },
          end: {
            line: 465,
            column: 55
          }
        }],
        line: 465
      },
      "65": {
        loc: {
          start: {
            line: 476,
            column: 68
          },
          end: {
            line: 476,
            column: 122
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 476,
            column: 93
          },
          end: {
            line: 476,
            column: 106
          }
        }, {
          start: {
            line: 476,
            column: 109
          },
          end: {
            line: 476,
            column: 122
          }
        }],
        line: 476
      },
      "66": {
        loc: {
          start: {
            line: 492,
            column: 71
          },
          end: {
            line: 492,
            column: 125
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 492,
            column: 96
          },
          end: {
            line: 492,
            column: 109
          }
        }, {
          start: {
            line: 492,
            column: 112
          },
          end: {
            line: 492,
            column: 125
          }
        }],
        line: 492
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0,
      "74": 0,
      "75": 0,
      "76": 0,
      "77": 0,
      "78": 0,
      "79": 0,
      "80": 0,
      "81": 0,
      "82": 0,
      "83": 0,
      "84": 0,
      "85": 0,
      "86": 0,
      "87": 0,
      "88": 0,
      "89": 0,
      "90": 0,
      "91": 0,
      "92": 0,
      "93": 0,
      "94": 0,
      "95": 0,
      "96": 0,
      "97": 0,
      "98": 0,
      "99": 0,
      "100": 0,
      "101": 0,
      "102": 0,
      "103": 0,
      "104": 0,
      "105": 0,
      "106": 0,
      "107": 0,
      "108": 0,
      "109": 0,
      "110": 0,
      "111": 0,
      "112": 0,
      "113": 0,
      "114": 0,
      "115": 0,
      "116": 0,
      "117": 0,
      "118": 0,
      "119": 0,
      "120": 0,
      "121": 0,
      "122": 0,
      "123": 0,
      "124": 0,
      "125": 0,
      "126": 0,
      "127": 0,
      "128": 0,
      "129": 0,
      "130": 0,
      "131": 0,
      "132": 0,
      "133": 0,
      "134": 0,
      "135": 0,
      "136": 0,
      "137": 0,
      "138": 0,
      "139": 0,
      "140": 0,
      "141": 0,
      "142": 0,
      "143": 0,
      "144": 0,
      "145": 0,
      "146": 0,
      "147": 0,
      "148": 0,
      "149": 0,
      "150": 0,
      "151": 0,
      "152": 0,
      "153": 0,
      "154": 0,
      "155": 0,
      "156": 0,
      "157": 0,
      "158": 0,
      "159": 0,
      "160": 0,
      "161": 0,
      "162": 0,
      "163": 0,
      "164": 0,
      "165": 0,
      "166": 0,
      "167": 0,
      "168": 0,
      "169": 0,
      "170": 0,
      "171": 0,
      "172": 0,
      "173": 0,
      "174": 0,
      "175": 0,
      "176": 0,
      "177": 0,
      "178": 0,
      "179": 0,
      "180": 0,
      "181": 0,
      "182": 0,
      "183": 0,
      "184": 0,
      "185": 0,
      "186": 0,
      "187": 0,
      "188": 0,
      "189": 0,
      "190": 0,
      "191": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0
    },
    b: {
      "0": [0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0, 0],
      "10": [0, 0],
      "11": [0, 0],
      "12": [0, 0],
      "13": [0, 0],
      "14": [0, 0],
      "15": [0, 0],
      "16": [0, 0],
      "17": [0, 0],
      "18": [0, 0],
      "19": [0, 0],
      "20": [0, 0],
      "21": [0, 0],
      "22": [0, 0],
      "23": [0, 0],
      "24": [0, 0],
      "25": [0, 0],
      "26": [0, 0],
      "27": [0, 0],
      "28": [0, 0],
      "29": [0, 0],
      "30": [0, 0],
      "31": [0, 0],
      "32": [0, 0],
      "33": [0, 0],
      "34": [0, 0],
      "35": [0, 0, 0],
      "36": [0, 0],
      "37": [0, 0],
      "38": [0, 0],
      "39": [0, 0],
      "40": [0, 0],
      "41": [0, 0],
      "42": [0, 0],
      "43": [0, 0],
      "44": [0, 0],
      "45": [0, 0, 0],
      "46": [0, 0],
      "47": [0, 0],
      "48": [0, 0],
      "49": [0, 0, 0],
      "50": [0, 0],
      "51": [0, 0],
      "52": [0, 0],
      "53": [0, 0],
      "54": [0, 0],
      "55": [0, 0],
      "56": [0, 0],
      "57": [0, 0],
      "58": [0, 0],
      "59": [0, 0],
      "60": [0, 0],
      "61": [0, 0],
      "62": [0, 0],
      "63": [0, 0],
      "64": [0, 0],
      "65": [0, 0],
      "66": [0, 0]
    },
    inputSourceMap: {
      file: "/home/mhugo/code/claude-code-flow/src/maestro/services/HiveMindPlannerService.ts",
      mappings: "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",
      names: [],
      sources: ["/home/mhugo/code/claude-code-flow/src/maestro/services/HiveMindPlannerService.ts"],
      sourcesContent: ["/**\n * Hive Mind Planner Service - Integrated with AgentManager System\n * \n * Leverages existing AgentManager task-planner template and AgentRegistry\n * for intelligent task planning. Follows KISS and SOLID principles.\n * \n * Key Features:\n * - Uses AgentManager task-planner template (lines 501-552 in agent-manager.ts)\n * - Integrates with AgentRegistry for agent selection and coordination\n * - Falls back to hive mind agents when AgentManager agents unavailable\n * - Simple, focused interface following Single Responsibility\n */\n\nimport { HiveMind } from '../../hive-mind/core/HiveMind.js';\nimport { Agent } from '../../hive-mind/core/Agent.js';\nimport { TaskSubmitOptions, AgentCapability } from '../../hive-mind/types.js';\nimport { ILogger } from '../../core/logger.js';\nimport { AgentManager } from '../../agents/agent-manager.js';\nimport { AgentRegistry } from '../../agents/agent-registry.js';\nimport { AgentState } from '../../swarm/types.js';\n\nexport interface PlannerRequest {\n  featureName: string;\n  designContent: string;\n  requirements?: string;\n  timeoutMs?: number;\n}\n\nexport interface PlannerResponse {\n  success: boolean;\n  taskMarkdown?: string;\n  error?: string;\n  agentUsed?: string;\n  plannerType?: 'task-planner' | 'architect' | 'specialist' | 'fallback';\n}\n\n/**\n * Service that coordinates task planning using AgentManager and hive mind agents\n * Follows Single Responsibility Principle - only handles planning coordination\n */\nexport class HiveMindPlannerService {\n\n  constructor(\n    private hiveMind: HiveMind,\n    private logger: ILogger,\n    private agentManager?: AgentManager,\n    private agentRegistry?: AgentRegistry\n  ) {}\n\n  /**\n   * Generate task plan using AgentManager task-planner template or hive mind agents\n   */\n  async generateTaskPlan(request: PlannerRequest): Promise<PlannerResponse> {\n    const { featureName, designContent, requirements, timeoutMs = 90000 } = request;\n\n    this.logger.info(`Generating task plan for ${featureName} using integrated agent systems`);\n\n    try {\n      // First try AgentManager task-planner template\n      if (this.agentManager && this.agentRegistry) {\n        const agentManagerResult = await this.tryAgentManagerPlanning(request);\n        if (agentManagerResult.success) {\n          return agentManagerResult;\n        }\n        this.logger.info('AgentManager planning unavailable, falling back to hive mind agents');\n      }\n\n      // Fallback to hive mind agents\n      const plannerAgent = await this.findBestHiveMindAgent(designContent);\n      \n      if (!plannerAgent) {\n        this.logger.warn('No suitable agents available in either system');\n        return {\n          success: false,\n          error: 'No suitable planner agents available',\n          plannerType: 'fallback'\n        };\n      }\n\n      // Submit planning task to the selected hive mind agent\n      const taskOptions: TaskSubmitOptions = {\n        description: `Generate implementation task breakdown for ${featureName}`,\n        priority: 'medium',\n        strategy: 'sequential',\n        assignedAgent: plannerAgent.id,\n        requiredCapabilities: this.getRequiredCapabilities(plannerAgent.type),\n        metadata: {\n          type: 'task_planning',\n          featureName,\n          designContent,\n          requirements: requirements || '',\n          plannerType: plannerAgent.type\n        }\n      };\n\n      this.logger.info(`Submitting task planning to ${plannerAgent.type} agent: ${plannerAgent.id}`);\n      const task = await this.hiveMind.submitTask(taskOptions);\n\n      // Wait for completion\n      const result = await this.waitForPlanningCompletion(task.id, timeoutMs);\n\n      if (result.success && result.taskMarkdown) {\n        this.logger.info(`Task plan generated successfully for ${featureName} using ${plannerAgent.type}`);\n        return {\n          success: true,\n          taskMarkdown: result.taskMarkdown,\n          agentUsed: plannerAgent.id,\n          plannerType: plannerAgent.type as 'architect' | 'specialist'\n        };\n      }\n\n      return {\n        success: false,\n        error: result.error || 'Planning task failed',\n        agentUsed: plannerAgent.id,\n        plannerType: plannerAgent.type as 'architect' | 'specialist'\n      };\n\n    } catch (error) {\n      this.logger.error(`Hive mind task planning failed for ${featureName}: ${error instanceof Error ? error.message : String(error)}`);\n      return {\n        success: false,\n        error: error instanceof Error ? error.message : String(error),\n        plannerType: 'fallback'\n      };\n    }\n  }\n\n  /**\n   * Try using AgentManager task-planner template for planning\n   */\n  private async tryAgentManagerPlanning(request: PlannerRequest): Promise<PlannerResponse> {\n    try {\n      // Query for task-planner agents in registry\n      const taskPlannerAgents = await this.agentRegistry!.queryAgents({\n        type: 'task-planner' as any,\n        status: 'idle',\n        healthThreshold: 0.7\n      });\n\n      if (taskPlannerAgents.length === 0) {\n        // Create new task-planner agent using AgentManager template\n        this.logger.info('Creating new task-planner agent using AgentManager template');\n        const agentId = await this.agentManager!.createAgent('task-planner', {\n          name: `Task Planner for ${request.featureName}`,\n          type: 'task-planner',\n          capabilities: ['project-management', 'task-breakdown', 'agile-planning'],\n          maxConcurrentTasks: 1,\n          priority: 90\n        });\n\n        await this.agentManager!.startAgent(agentId);\n        \n        // Execute planning task\n        const planningResult = await this.executePlanningWithAgentManager(agentId, request);\n        \n        // Cleanup agent after use\n        await this.agentManager!.stopAgent(agentId);\n        \n        return {\n          success: true,\n          taskMarkdown: planningResult,\n          agentUsed: agentId,\n          plannerType: 'task-planner'\n        };\n      } else {\n        // Use existing task-planner agent\n        const agent = taskPlannerAgents[0];\n        this.logger.info(`Using existing task-planner agent: ${agent.id.id}`);\n        \n        const planningResult = await this.executePlanningWithAgentManager(agent.id.id, request);\n        \n        return {\n          success: true,\n          taskMarkdown: planningResult,\n          agentUsed: agent.id.id,\n          plannerType: 'task-planner'\n        };\n      }\n    } catch (error) {\n      this.logger.warn(`AgentManager planning failed: ${error instanceof Error ? error.message : String(error)}`);\n      return {\n        success: false,\n        error: error instanceof Error ? error.message : String(error),\n        plannerType: 'fallback'\n      };\n    }\n  }\n\n  /**\n   * Execute planning task using AgentManager infrastructure\n   */\n  private async executePlanningWithAgentManager(agentId: string, request: PlannerRequest): Promise<string> {\n    const planningPrompt = this.createPlanningPrompt(request);\n    \n    // Use AgentManager's task execution capabilities\n    const task = {\n      id: `planning-${request.featureName}-${Date.now()}`,\n      type: 'task-planning',\n      description: `Generate implementation tasks for ${request.featureName}`,\n      input: {\n        featureName: request.featureName,\n        designContent: request.designContent,\n        requirements: request.requirements || '',\n        prompt: planningPrompt\n      },\n      priority: 90,\n      metadata: {\n        type: 'maestro_task_planning',\n        featureName: request.featureName\n      }\n    };\n\n    // Execute through AgentManager\n    const result = await this.agentManager!.executeTask(agentId, task);\n    \n    if (result && result.output) {\n      return this.formatAgentManagerResult(result.output, request.featureName);\n    }\n    \n    return this.createFallbackTaskPlan(request.featureName);\n  }\n\n  /**\n   * Create structured planning prompt for AgentManager agents\n   */\n  private createPlanningPrompt(request: PlannerRequest): string {\n    return `\n# Task Planning Request\n\n## Feature: ${request.featureName}\n\n## Design Content:\n${request.designContent}\n\n${request.requirements ? `## Requirements:\\n${request.requirements}\\n` : ''}\n## Instructions:\nGenerate a comprehensive implementation task breakdown following these guidelines:\n\n1. Create 5-10 specific, actionable tasks\n2. Order tasks by dependency and logical sequence\n3. Include acceptance criteria for each task\n4. Focus on implementation details from the design\n5. Consider testing, documentation, and deployment\n\n## Output Format:\nProvide structured markdown with:\n- Task titles and descriptions\n- Acceptance criteria as checkboxes\n- Implementation notes and dependencies\n\nGenerate the task breakdown now:\n`;\n  }\n\n  /**\n   * Format AgentManager result into consistent markdown\n   */\n  private formatAgentManagerResult(output: any, featureName: string): string {\n    if (typeof output === 'string' && output.includes('# Implementation Tasks')) {\n      return output;\n    }\n\n    // Extract structured content if available\n    if (output && output.tasks) {\n      return this.createStructuredTaskMarkdown(featureName, output.tasks, 'AgentManager task-planner');\n    }\n\n    return this.createFallbackTaskPlan(featureName);\n  }\n\n  /**\n   * Find the best available hive mind agent for task planning (fallback)\n   * Prioritizes: architect > specialist > any available\n   */\n  private async findBestHiveMindAgent(designContent: string): Promise<Agent | null> {\n    const agents = await this.hiveMind.getAgents();\n    const availableAgents = agents.filter(agent => agent.status === 'idle');\n\n    if (availableAgents.length === 0) {\n      this.logger.warn('No idle agents available for task planning');\n      return null;\n    }\n\n    // Priority 1: Look for architect agents (best for system design planning)\n    const architects = availableAgents.filter(agent => agent.type === 'architect');\n    if (architects.length > 0) {\n      this.logger.info(`Found ${architects.length} available architect agent(s) for planning`);\n      return architects[0]; // Return first available architect\n    }\n\n    // Priority 2: Look for specialist agents with relevant capabilities\n    const specialists = availableAgents.filter(agent => \n      agent.type === 'specialist' && \n      this.hasRelevantCapabilities(agent, designContent)\n    );\n    if (specialists.length > 0) {\n      this.logger.info(`Found ${specialists.length} relevant specialist agent(s) for planning`);\n      return specialists[0];\n    }\n\n    // Priority 3: Use any available specialist\n    const anySpecialists = availableAgents.filter(agent => agent.type === 'specialist');\n    if (anySpecialists.length > 0) {\n      this.logger.info(`Using available specialist agent for planning`);\n      return anySpecialists[0];\n    }\n\n    // Priority 4: Use any available agent as fallback\n    this.logger.info(`Using fallback agent for planning: ${availableAgents[0].type}`);\n    return availableAgents[0];\n  }\n\n  /**\n   * Check if agent has capabilities relevant to the design content\n   */\n  private hasRelevantCapabilities(agent: Agent, designContent: string): boolean {\n    const capabilities = agent.capabilities || [];\n    \n    // Check for system design capabilities\n    if (capabilities.includes('system_design' as AgentCapability) || \n        capabilities.includes('architecture_patterns' as AgentCapability)) {\n      return true;\n    }\n\n    // Check for task management capabilities\n    if (capabilities.includes('task_management' as AgentCapability)) {\n      return true;\n    }\n\n    // Check for domain expertise based on design content\n    const hasDatabase = /database|sql|storage/i.test(designContent);\n    const hasAPI = /api|endpoint|rest/i.test(designContent);\n    const hasAuth = /auth|security|permission/i.test(designContent);\n\n    if (hasDatabase && capabilities.includes('data_analysis' as AgentCapability)) {\n      return true;\n    }\n\n    if (hasAPI && capabilities.includes('integration_planning' as AgentCapability)) {\n      return true;\n    }\n\n    return false;\n  }\n\n  /**\n   * Get required capabilities based on agent type\n   */\n  private getRequiredCapabilities(agentType: string): AgentCapability[] {\n    switch (agentType) {\n      case 'architect':\n        return ['system_design', 'architecture_patterns', 'integration_planning'];\n      case 'specialist':\n        return ['domain_expertise', 'problem_solving', 'task_management'];\n      default:\n        return ['task_management', 'information_gathering'];\n    }\n  }\n\n  /**\n   * Wait for planning task completion with timeout\n   */\n  private async waitForPlanningCompletion(taskId: string, timeoutMs: number): Promise<{\n    success: boolean;\n    taskMarkdown?: string;\n    error?: string;\n  }> {\n    return new Promise((resolve) => {\n      const startTime = Date.now();\n      \n      const checkInterval = setInterval(async () => {\n        try {\n          // Check timeout\n          if (Date.now() - startTime > timeoutMs) {\n            clearInterval(checkInterval);\n            resolve({ success: false, error: 'Planning task timeout' });\n            return;\n          }\n\n          // Check task status\n          const task = await this.hiveMind.getTask(taskId);\n          \n          if (task.status === 'completed') {\n            clearInterval(checkInterval);\n            \n            try {\n              const result = task.result ? JSON.parse(task.result) : null;\n              const taskMarkdown = this.formatPlanningResult(result, task.metadata);\n              resolve({ success: true, taskMarkdown });\n            } catch (parseError) {\n              resolve({ success: false, error: 'Failed to parse planning result' });\n            }\n            \n          } else if (task.status === 'failed') {\n            clearInterval(checkInterval);\n            resolve({ success: false, error: task.error || 'Planning task failed' });\n          }\n          \n        } catch (error) {\n          clearInterval(checkInterval);\n          resolve({ success: false, error: error instanceof Error ? error.message : String(error) });\n        }\n      }, 3000); // Check every 3 seconds\n    });\n  }\n\n  /**\n   * Format planning result into structured markdown\n   */\n  private formatPlanningResult(result: any, metadata: any): string {\n    const featureName = metadata?.featureName || 'Feature';\n    const plannerType = metadata?.plannerType || 'agent';\n\n    // If the result already contains structured markdown, use it\n    if (result && typeof result === 'string' && result.includes('# Implementation Tasks')) {\n      return result;\n    }\n\n    // If result contains task breakdown, format it\n    if (result && result.tasks) {\n      return this.createTaskMarkdown(featureName, result.tasks, plannerType);\n    }\n\n    // Create basic task structure from agent analysis\n    return this.createBasicTaskMarkdown(featureName, result, plannerType);\n  }\n\n  /**\n   * Create structured task markdown from AgentManager or hive mind results\n   */\n  private createStructuredTaskMarkdown(featureName: string, tasks: any[], plannerType: string): string {\n    let markdown = `# Implementation Tasks for ${featureName}\\n\\n`;\n    markdown += `*Generated by ${plannerType} agent*\\n\\n`;\n\n    if (Array.isArray(tasks)) {\n      tasks.forEach((task, index) => {\n        markdown += `## Task ${index + 1}: ${task.title || task.name || `Task ${index + 1}`}\\n\\n`;\n        if (task.description) {\n          markdown += `${task.description}\\n\\n`;\n        }\n        if (task.acceptance && Array.isArray(task.acceptance)) {\n          markdown += `**Acceptance Criteria:**\\n`;\n          task.acceptance.forEach(criteria => {\n            markdown += `- [ ] ${criteria}\\n`;\n          });\n          markdown += '\\n';\n        }\n        if (task.dependencies) {\n          markdown += `**Dependencies:** ${task.dependencies}\\n\\n`;\n        }\n      });\n    }\n\n    return markdown;\n  }\n\n  /**\n   * Create structured task breakdown from detailed result (legacy method)\n   */\n  private createTaskMarkdown(featureName: string, tasks: any[], plannerType: string): string {\n    let markdown = `# Implementation Tasks for ${featureName}\\n\\n`;\n    markdown += `*Generated by hive mind ${plannerType} agent*\\n\\n`;\n\n    if (Array.isArray(tasks)) {\n      tasks.forEach((task, index) => {\n        markdown += `## Task ${index + 1}: ${task.title || `Task ${index + 1}`}\\n\\n`;\n        if (task.description) {\n          markdown += `${task.description}\\n\\n`;\n        }\n        if (task.acceptance && Array.isArray(task.acceptance)) {\n          markdown += `**Acceptance Criteria:**\\n`;\n          task.acceptance.forEach(criteria => {\n            markdown += `- [ ] ${criteria}\\n`;\n          });\n          markdown += '\\n';\n        }\n      });\n    }\n\n    return markdown;\n  }\n\n  /**\n   * Create fallback task plan when agents unavailable\n   */\n  private createFallbackTaskPlan(featureName: string): string {\n    const basicTasks = [\n      'Set up project structure and dependencies',\n      'Implement core data models and interfaces', \n      'Create API endpoints and routing',\n      'Implement business logic and validation',\n      'Add comprehensive testing suite',\n      'Create documentation and examples',\n      'Integration testing and deployment preparation'\n    ];\n\n    let markdown = `# Implementation Tasks for ${featureName}\\n\\n`;\n    markdown += `*Generated by fallback task generation*\\n\\n`;\n    markdown += `## Task Breakdown\\n\\n`;\n    \n    basicTasks.forEach((task, index) => {\n      markdown += `### ${index + 1}. ${task}\\n\\n`;\n      markdown += `**Status**: Pending\\n\\n`;\n      markdown += `**Acceptance Criteria:**\\n`;\n      markdown += `- [ ] Task completed successfully\\n`;\n      markdown += `- [ ] Code reviewed and tested\\n\\n`;\n    });\n\n    return markdown;\n  }\n\n  /**\n   * Create basic task markdown from simple result (legacy method)\n   */\n  private createBasicTaskMarkdown(featureName: string, result: any, plannerType: string): string {\n    const basicTasks = [\n      'Set up project structure and dependencies',\n      'Implement core data models and interfaces', \n      'Create API endpoints and routing',\n      'Implement business logic and validation',\n      'Add comprehensive testing suite',\n      'Create documentation and examples',\n      'Integration testing and deployment preparation'\n    ];\n\n    let markdown = `# Implementation Tasks for ${featureName}\\n\\n`;\n    markdown += `*Generated by hive mind ${plannerType} agent*\\n\\n`;\n\n    if (result && result.analysis) {\n      markdown += `## Analysis\\n\\n${result.analysis}\\n\\n`;\n    }\n\n    markdown += `## Task Breakdown\\n\\n`;\n    basicTasks.forEach((task, index) => {\n      markdown += `### ${index + 1}. ${task}\\n\\n`;\n      markdown += `**Status**: Pending\\n\\n`;\n    });\n\n    if (result && result.recommendations) {\n      markdown += `## Recommendations\\n\\n${result.recommendations}\\n\\n`;\n    }\n\n    return markdown;\n  }\n\n  /**\n   * Get status of integrated planning service\n   */\n  async getStatus(): Promise<{\n    availableTaskPlanners: number;\n    availableArchitects: number;\n    availableSpecialists: number;\n    totalAgents: number;\n    agentManagerAvailable: boolean;\n    agentRegistryAvailable: boolean;\n  }> {\n    try {\n      let taskPlanners = 0;\n      let agentManagerAvailable = false;\n      let agentRegistryAvailable = false;\n\n      // Check AgentManager system\n      if (this.agentManager && this.agentRegistry) {\n        try {\n          const taskPlannerAgents = await this.agentRegistry.queryAgents({\n            type: 'task-planner' as any,\n            status: 'idle'\n          });\n          taskPlanners = taskPlannerAgents.length;\n          agentManagerAvailable = true;\n          agentRegistryAvailable = true;\n        } catch (error) {\n          this.logger.warn(`AgentRegistry query failed: ${error instanceof Error ? error.message : String(error)}`);\n        }\n      }\n\n      // Check hive mind agents\n      const agents = await this.hiveMind.getAgents();\n      const idleAgents = agents.filter(agent => agent.status === 'idle');\n      \n      return {\n        availableTaskPlanners: taskPlanners,\n        availableArchitects: idleAgents.filter(a => a.type === 'architect').length,\n        availableSpecialists: idleAgents.filter(a => a.type === 'specialist').length,\n        totalAgents: agents.length + taskPlanners,\n        agentManagerAvailable,\n        agentRegistryAvailable\n      };\n    } catch (error) {\n      this.logger.error(`Failed to get planner service status: ${error instanceof Error ? error.message : String(error)}`);\n      return { \n        availableTaskPlanners: 0,\n        availableArchitects: 0, \n        availableSpecialists: 0, \n        totalAgents: 0,\n        agentManagerAvailable: false,\n        agentRegistryAvailable: false\n      };\n    }\n  }\n\n  /**\n   * Factory method to create service with AgentManager integration\n   */\n  static createWithAgentManager(\n    hiveMind: HiveMind,\n    logger: ILogger,\n    agentManager: AgentManager,\n    agentRegistry: AgentRegistry\n  ): HiveMindPlannerService {\n    return new HiveMindPlannerService(hiveMind, logger, agentManager, agentRegistry);\n  }\n}"],
      version: 3
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "727edfd805c99dfb1b732eb1c49f73d0b6df73b6"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_1n34bbk4t1 = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_1n34bbk4t1();
/**
 * Hive Mind Planner Service - Integrated with AgentManager System
 *
 * Leverages existing AgentManager task-planner template and AgentRegistry
 * for intelligent task planning. Follows KISS and SOLID principles.
 *
 * Key Features:
 * - Uses AgentManager task-planner template (lines 501-552 in agent-manager.ts)
 * - Integrates with AgentRegistry for agent selection and coordination
 * - Falls back to hive mind agents when AgentManager agents unavailable
 * - Simple, focused interface following Single Responsibility
 */
/**
 * Service that coordinates task planning using AgentManager and hive mind agents
 * Follows Single Responsibility Principle - only handles planning coordination
 */
export class HiveMindPlannerService {
  hiveMind;
  logger;
  agentManager;
  agentRegistry;
  constructor(hiveMind, logger, agentManager, agentRegistry) {
    /* istanbul ignore next */
    cov_1n34bbk4t1().f[0]++;
    cov_1n34bbk4t1().s[0]++;
    this.hiveMind = hiveMind;
    /* istanbul ignore next */
    cov_1n34bbk4t1().s[1]++;
    this.logger = logger;
    /* istanbul ignore next */
    cov_1n34bbk4t1().s[2]++;
    this.agentManager = agentManager;
    /* istanbul ignore next */
    cov_1n34bbk4t1().s[3]++;
    this.agentRegistry = agentRegistry;
  }
  /**
   * Generate task plan using AgentManager task-planner template or hive mind agents
   */
  async generateTaskPlan(request) {
    /* istanbul ignore next */
    cov_1n34bbk4t1().f[1]++;
    const {
      featureName,
      designContent,
      requirements,
      timeoutMs =
      /* istanbul ignore next */
      (cov_1n34bbk4t1().b[0][0]++, 90000)
    } =
    /* istanbul ignore next */
    (cov_1n34bbk4t1().s[4]++, request);
    /* istanbul ignore next */
    cov_1n34bbk4t1().s[5]++;
    this.logger.info(`Generating task plan for ${featureName} using integrated agent systems`);
    /* istanbul ignore next */
    cov_1n34bbk4t1().s[6]++;
    try {
      /* istanbul ignore next */
      cov_1n34bbk4t1().s[7]++;
      // First try AgentManager task-planner template
      if (
      /* istanbul ignore next */
      (cov_1n34bbk4t1().b[2][0]++, this.agentManager) &&
      /* istanbul ignore next */
      (cov_1n34bbk4t1().b[2][1]++, this.agentRegistry)) {
        /* istanbul ignore next */
        cov_1n34bbk4t1().b[1][0]++;
        const agentManagerResult =
        /* istanbul ignore next */
        (cov_1n34bbk4t1().s[8]++, await this.tryAgentManagerPlanning(request));
        /* istanbul ignore next */
        cov_1n34bbk4t1().s[9]++;
        if (agentManagerResult.success) {
          /* istanbul ignore next */
          cov_1n34bbk4t1().b[3][0]++;
          cov_1n34bbk4t1().s[10]++;
          return agentManagerResult;
        } else
        /* istanbul ignore next */
        {
          cov_1n34bbk4t1().b[3][1]++;
        }
        cov_1n34bbk4t1().s[11]++;
        this.logger.info('AgentManager planning unavailable, falling back to hive mind agents');
      } else
      /* istanbul ignore next */
      {
        cov_1n34bbk4t1().b[1][1]++;
      }
      // Fallback to hive mind agents
      const plannerAgent =
      /* istanbul ignore next */
      (cov_1n34bbk4t1().s[12]++, await this.findBestHiveMindAgent(designContent));
      /* istanbul ignore next */
      cov_1n34bbk4t1().s[13]++;
      if (!plannerAgent) {
        /* istanbul ignore next */
        cov_1n34bbk4t1().b[4][0]++;
        cov_1n34bbk4t1().s[14]++;
        this.logger.warn('No suitable agents available in either system');
        /* istanbul ignore next */
        cov_1n34bbk4t1().s[15]++;
        return {
          success: false,
          error: 'No suitable planner agents available',
          plannerType: 'fallback'
        };
      } else
      /* istanbul ignore next */
      {
        cov_1n34bbk4t1().b[4][1]++;
      }
      // Submit planning task to the selected hive mind agent
      const taskOptions =
      /* istanbul ignore next */
      (cov_1n34bbk4t1().s[16]++, {
        description: `Generate implementation task breakdown for ${featureName}`,
        priority: 'medium',
        strategy: 'sequential',
        assignedAgent: plannerAgent.id,
        requiredCapabilities: this.getRequiredCapabilities(plannerAgent.type),
        metadata: {
          type: 'task_planning',
          featureName,
          designContent,
          requirements:
          /* istanbul ignore next */
          (cov_1n34bbk4t1().b[5][0]++, requirements) ||
          /* istanbul ignore next */
          (cov_1n34bbk4t1().b[5][1]++, ''),
          plannerType: plannerAgent.type
        }
      });
      /* istanbul ignore next */
      cov_1n34bbk4t1().s[17]++;
      this.logger.info(`Submitting task planning to ${plannerAgent.type} agent: ${plannerAgent.id}`);
      const task =
      /* istanbul ignore next */
      (cov_1n34bbk4t1().s[18]++, await this.hiveMind.submitTask(taskOptions));
      // Wait for completion
      const result =
      /* istanbul ignore next */
      (cov_1n34bbk4t1().s[19]++, await this.waitForPlanningCompletion(task.id, timeoutMs));
      /* istanbul ignore next */
      cov_1n34bbk4t1().s[20]++;
      if (
      /* istanbul ignore next */
      (cov_1n34bbk4t1().b[7][0]++, result.success) &&
      /* istanbul ignore next */
      (cov_1n34bbk4t1().b[7][1]++, result.taskMarkdown)) {
        /* istanbul ignore next */
        cov_1n34bbk4t1().b[6][0]++;
        cov_1n34bbk4t1().s[21]++;
        this.logger.info(`Task plan generated successfully for ${featureName} using ${plannerAgent.type}`);
        /* istanbul ignore next */
        cov_1n34bbk4t1().s[22]++;
        return {
          success: true,
          taskMarkdown: result.taskMarkdown,
          agentUsed: plannerAgent.id,
          plannerType: plannerAgent.type
        };
      } else
      /* istanbul ignore next */
      {
        cov_1n34bbk4t1().b[6][1]++;
      }
      cov_1n34bbk4t1().s[23]++;
      return {
        success: false,
        error:
        /* istanbul ignore next */
        (cov_1n34bbk4t1().b[8][0]++, result.error) ||
        /* istanbul ignore next */
        (cov_1n34bbk4t1().b[8][1]++, 'Planning task failed'),
        agentUsed: plannerAgent.id,
        plannerType: plannerAgent.type
      };
    } catch (error) {
      /* istanbul ignore next */
      cov_1n34bbk4t1().s[24]++;
      this.logger.error(`Hive mind task planning failed for ${featureName}: ${error instanceof Error ?
      /* istanbul ignore next */
      (cov_1n34bbk4t1().b[9][0]++, error.message) :
      /* istanbul ignore next */
      (cov_1n34bbk4t1().b[9][1]++, String(error))}`);
      /* istanbul ignore next */
      cov_1n34bbk4t1().s[25]++;
      return {
        success: false,
        error: error instanceof Error ?
        /* istanbul ignore next */
        (cov_1n34bbk4t1().b[10][0]++, error.message) :
        /* istanbul ignore next */
        (cov_1n34bbk4t1().b[10][1]++, String(error)),
        plannerType: 'fallback'
      };
    }
  }
  /**
   * Try using AgentManager task-planner template for planning
   */
  async tryAgentManagerPlanning(request) {
    /* istanbul ignore next */
    cov_1n34bbk4t1().f[2]++;
    cov_1n34bbk4t1().s[26]++;
    try {
      // Query for task-planner agents in registry
      const taskPlannerAgents =
      /* istanbul ignore next */
      (cov_1n34bbk4t1().s[27]++, await this.agentRegistry.queryAgents({
        type: 'task-planner',
        status: 'idle',
        healthThreshold: 0.7
      }));
      /* istanbul ignore next */
      cov_1n34bbk4t1().s[28]++;
      if (taskPlannerAgents.length === 0) {
        /* istanbul ignore next */
        cov_1n34bbk4t1().b[11][0]++;
        cov_1n34bbk4t1().s[29]++;
        // Create new task-planner agent using AgentManager template
        this.logger.info('Creating new task-planner agent using AgentManager template');
        const agentId =
        /* istanbul ignore next */
        (cov_1n34bbk4t1().s[30]++, await this.agentManager.createAgent('task-planner', {
          name: `Task Planner for ${request.featureName}`,
          type: 'task-planner',
          capabilities: ['project-management', 'task-breakdown', 'agile-planning'],
          maxConcurrentTasks: 1,
          priority: 90
        }));
        /* istanbul ignore next */
        cov_1n34bbk4t1().s[31]++;
        await this.agentManager.startAgent(agentId);
        // Execute planning task
        const planningResult =
        /* istanbul ignore next */
        (cov_1n34bbk4t1().s[32]++, await this.executePlanningWithAgentManager(agentId, request));
        // Cleanup agent after use
        /* istanbul ignore next */
        cov_1n34bbk4t1().s[33]++;
        await this.agentManager.stopAgent(agentId);
        /* istanbul ignore next */
        cov_1n34bbk4t1().s[34]++;
        return {
          success: true,
          taskMarkdown: planningResult,
          agentUsed: agentId,
          plannerType: 'task-planner'
        };
      } else {
        /* istanbul ignore next */
        cov_1n34bbk4t1().b[11][1]++;
        // Use existing task-planner agent
        const agent =
        /* istanbul ignore next */
        (cov_1n34bbk4t1().s[35]++, taskPlannerAgents[0]);
        /* istanbul ignore next */
        cov_1n34bbk4t1().s[36]++;
        this.logger.info(`Using existing task-planner agent: ${agent.id.id}`);
        const planningResult =
        /* istanbul ignore next */
        (cov_1n34bbk4t1().s[37]++, await this.executePlanningWithAgentManager(agent.id.id, request));
        /* istanbul ignore next */
        cov_1n34bbk4t1().s[38]++;
        return {
          success: true,
          taskMarkdown: planningResult,
          agentUsed: agent.id.id,
          plannerType: 'task-planner'
        };
      }
    } catch (error) {
      /* istanbul ignore next */
      cov_1n34bbk4t1().s[39]++;
      this.logger.warn(`AgentManager planning failed: ${error instanceof Error ?
      /* istanbul ignore next */
      (cov_1n34bbk4t1().b[12][0]++, error.message) :
      /* istanbul ignore next */
      (cov_1n34bbk4t1().b[12][1]++, String(error))}`);
      /* istanbul ignore next */
      cov_1n34bbk4t1().s[40]++;
      return {
        success: false,
        error: error instanceof Error ?
        /* istanbul ignore next */
        (cov_1n34bbk4t1().b[13][0]++, error.message) :
        /* istanbul ignore next */
        (cov_1n34bbk4t1().b[13][1]++, String(error)),
        plannerType: 'fallback'
      };
    }
  }
  /**
   * Execute planning task using AgentManager infrastructure
   */
  async executePlanningWithAgentManager(agentId, request) {
    /* istanbul ignore next */
    cov_1n34bbk4t1().f[3]++;
    const planningPrompt =
    /* istanbul ignore next */
    (cov_1n34bbk4t1().s[41]++, this.createPlanningPrompt(request));
    // Use AgentManager's task execution capabilities
    const task =
    /* istanbul ignore next */
    (cov_1n34bbk4t1().s[42]++, {
      id: `planning-${request.featureName}-${Date.now()}`,
      type: 'task-planning',
      description: `Generate implementation tasks for ${request.featureName}`,
      input: {
        featureName: request.featureName,
        designContent: request.designContent,
        requirements:
        /* istanbul ignore next */
        (cov_1n34bbk4t1().b[14][0]++, request.requirements) ||
        /* istanbul ignore next */
        (cov_1n34bbk4t1().b[14][1]++, ''),
        prompt: planningPrompt
      },
      priority: 90,
      metadata: {
        type: 'maestro_task_planning',
        featureName: request.featureName
      }
    });
    // Execute through AgentManager
    const result =
    /* istanbul ignore next */
    (cov_1n34bbk4t1().s[43]++, await this.agentManager.executeTask(agentId, task));
    /* istanbul ignore next */
    cov_1n34bbk4t1().s[44]++;
    if (
    /* istanbul ignore next */
    (cov_1n34bbk4t1().b[16][0]++, result) &&
    /* istanbul ignore next */
    (cov_1n34bbk4t1().b[16][1]++, result.output)) {
      /* istanbul ignore next */
      cov_1n34bbk4t1().b[15][0]++;
      cov_1n34bbk4t1().s[45]++;
      return this.formatAgentManagerResult(result.output, request.featureName);
    } else
    /* istanbul ignore next */
    {
      cov_1n34bbk4t1().b[15][1]++;
    }
    cov_1n34bbk4t1().s[46]++;
    return this.createFallbackTaskPlan(request.featureName);
  }
  /**
   * Create structured planning prompt for AgentManager agents
   */
  createPlanningPrompt(request) {
    /* istanbul ignore next */
    cov_1n34bbk4t1().f[4]++;
    cov_1n34bbk4t1().s[47]++;
    return `
# Task Planning Request

## Feature: ${request.featureName}

## Design Content:
${request.designContent}

${request.requirements ?
    /* istanbul ignore next */
    (cov_1n34bbk4t1().b[17][0]++, `## Requirements:\n${request.requirements}\n`) :
    /* istanbul ignore next */
    (cov_1n34bbk4t1().b[17][1]++, '')}
## Instructions:
Generate a comprehensive implementation task breakdown following these guidelines:

1. Create 5-10 specific, actionable tasks
2. Order tasks by dependency and logical sequence
3. Include acceptance criteria for each task
4. Focus on implementation details from the design
5. Consider testing, documentation, and deployment

## Output Format:
Provide structured markdown with:
- Task titles and descriptions
- Acceptance criteria as checkboxes
- Implementation notes and dependencies

Generate the task breakdown now:
`;
  }
  /**
   * Format AgentManager result into consistent markdown
   */
  formatAgentManagerResult(output, featureName) {
    /* istanbul ignore next */
    cov_1n34bbk4t1().f[5]++;
    cov_1n34bbk4t1().s[48]++;
    if (
    /* istanbul ignore next */
    (cov_1n34bbk4t1().b[19][0]++, typeof output === 'string') &&
    /* istanbul ignore next */
    (cov_1n34bbk4t1().b[19][1]++, output.includes('# Implementation Tasks'))) {
      /* istanbul ignore next */
      cov_1n34bbk4t1().b[18][0]++;
      cov_1n34bbk4t1().s[49]++;
      return output;
    } else
    /* istanbul ignore next */
    {
      cov_1n34bbk4t1().b[18][1]++;
    }
    // Extract structured content if available
    cov_1n34bbk4t1().s[50]++;
    if (
    /* istanbul ignore next */
    (cov_1n34bbk4t1().b[21][0]++, output) &&
    /* istanbul ignore next */
    (cov_1n34bbk4t1().b[21][1]++, output.tasks)) {
      /* istanbul ignore next */
      cov_1n34bbk4t1().b[20][0]++;
      cov_1n34bbk4t1().s[51]++;
      return this.createStructuredTaskMarkdown(featureName, output.tasks, 'AgentManager task-planner');
    } else
    /* istanbul ignore next */
    {
      cov_1n34bbk4t1().b[20][1]++;
    }
    cov_1n34bbk4t1().s[52]++;
    return this.createFallbackTaskPlan(featureName);
  }
  /**
   * Find the best available hive mind agent for task planning (fallback)
   * Prioritizes: architect > specialist > any available
   */
  async findBestHiveMindAgent(designContent) {
    /* istanbul ignore next */
    cov_1n34bbk4t1().f[6]++;
    const agents =
    /* istanbul ignore next */
    (cov_1n34bbk4t1().s[53]++, await this.hiveMind.getAgents());
    const availableAgents =
    /* istanbul ignore next */
    (cov_1n34bbk4t1().s[54]++, agents.filter(agent => {
      /* istanbul ignore next */
      cov_1n34bbk4t1().f[7]++;
      cov_1n34bbk4t1().s[55]++;
      return agent.status === 'idle';
    }));
    /* istanbul ignore next */
    cov_1n34bbk4t1().s[56]++;
    if (availableAgents.length === 0) {
      /* istanbul ignore next */
      cov_1n34bbk4t1().b[22][0]++;
      cov_1n34bbk4t1().s[57]++;
      this.logger.warn('No idle agents available for task planning');
      /* istanbul ignore next */
      cov_1n34bbk4t1().s[58]++;
      return null;
    } else
    /* istanbul ignore next */
    {
      cov_1n34bbk4t1().b[22][1]++;
    }
    // Priority 1: Look for architect agents (best for system design planning)
    const architects =
    /* istanbul ignore next */
    (cov_1n34bbk4t1().s[59]++, availableAgents.filter(agent => {
      /* istanbul ignore next */
      cov_1n34bbk4t1().f[8]++;
      cov_1n34bbk4t1().s[60]++;
      return agent.type === 'architect';
    }));
    /* istanbul ignore next */
    cov_1n34bbk4t1().s[61]++;
    if (architects.length > 0) {
      /* istanbul ignore next */
      cov_1n34bbk4t1().b[23][0]++;
      cov_1n34bbk4t1().s[62]++;
      this.logger.info(`Found ${architects.length} available architect agent(s) for planning`);
      /* istanbul ignore next */
      cov_1n34bbk4t1().s[63]++;
      return architects[0]; // Return first available architect
    } else
    /* istanbul ignore next */
    {
      cov_1n34bbk4t1().b[23][1]++;
    }
    // Priority 2: Look for specialist agents with relevant capabilities
    const specialists =
    /* istanbul ignore next */
    (cov_1n34bbk4t1().s[64]++, availableAgents.filter(agent => {
      /* istanbul ignore next */
      cov_1n34bbk4t1().f[9]++;
      cov_1n34bbk4t1().s[65]++;
      return /* istanbul ignore next */(cov_1n34bbk4t1().b[24][0]++, agent.type === 'specialist') &&
      /* istanbul ignore next */
      (cov_1n34bbk4t1().b[24][1]++, this.hasRelevantCapabilities(agent, designContent));
    }));
    /* istanbul ignore next */
    cov_1n34bbk4t1().s[66]++;
    if (specialists.length > 0) {
      /* istanbul ignore next */
      cov_1n34bbk4t1().b[25][0]++;
      cov_1n34bbk4t1().s[67]++;
      this.logger.info(`Found ${specialists.length} relevant specialist agent(s) for planning`);
      /* istanbul ignore next */
      cov_1n34bbk4t1().s[68]++;
      return specialists[0];
    } else
    /* istanbul ignore next */
    {
      cov_1n34bbk4t1().b[25][1]++;
    }
    // Priority 3: Use any available specialist
    const anySpecialists =
    /* istanbul ignore next */
    (cov_1n34bbk4t1().s[69]++, availableAgents.filter(agent => {
      /* istanbul ignore next */
      cov_1n34bbk4t1().f[10]++;
      cov_1n34bbk4t1().s[70]++;
      return agent.type === 'specialist';
    }));
    /* istanbul ignore next */
    cov_1n34bbk4t1().s[71]++;
    if (anySpecialists.length > 0) {
      /* istanbul ignore next */
      cov_1n34bbk4t1().b[26][0]++;
      cov_1n34bbk4t1().s[72]++;
      this.logger.info(`Using available specialist agent for planning`);
      /* istanbul ignore next */
      cov_1n34bbk4t1().s[73]++;
      return anySpecialists[0];
    } else
    /* istanbul ignore next */
    {
      cov_1n34bbk4t1().b[26][1]++;
    }
    // Priority 4: Use any available agent as fallback
    cov_1n34bbk4t1().s[74]++;
    this.logger.info(`Using fallback agent for planning: ${availableAgents[0].type}`);
    /* istanbul ignore next */
    cov_1n34bbk4t1().s[75]++;
    return availableAgents[0];
  }
  /**
   * Check if agent has capabilities relevant to the design content
   */
  hasRelevantCapabilities(agent, designContent) {
    /* istanbul ignore next */
    cov_1n34bbk4t1().f[11]++;
    const capabilities =
    /* istanbul ignore next */
    (cov_1n34bbk4t1().s[76]++,
    /* istanbul ignore next */
    (cov_1n34bbk4t1().b[27][0]++, agent.capabilities) ||
    /* istanbul ignore next */
    (cov_1n34bbk4t1().b[27][1]++, []));
    // Check for system design capabilities
    /* istanbul ignore next */
    cov_1n34bbk4t1().s[77]++;
    if (
    /* istanbul ignore next */
    (cov_1n34bbk4t1().b[29][0]++, capabilities.includes('system_design')) ||
    /* istanbul ignore next */
    (cov_1n34bbk4t1().b[29][1]++, capabilities.includes('architecture_patterns'))) {
      /* istanbul ignore next */
      cov_1n34bbk4t1().b[28][0]++;
      cov_1n34bbk4t1().s[78]++;
      return true;
    } else
    /* istanbul ignore next */
    {
      cov_1n34bbk4t1().b[28][1]++;
    }
    // Check for task management capabilities
    cov_1n34bbk4t1().s[79]++;
    if (capabilities.includes('task_management')) {
      /* istanbul ignore next */
      cov_1n34bbk4t1().b[30][0]++;
      cov_1n34bbk4t1().s[80]++;
      return true;
    } else
    /* istanbul ignore next */
    {
      cov_1n34bbk4t1().b[30][1]++;
    }
    // Check for domain expertise based on design content
    const hasDatabase =
    /* istanbul ignore next */
    (cov_1n34bbk4t1().s[81]++, /database|sql|storage/i.test(designContent));
    const hasAPI =
    /* istanbul ignore next */
    (cov_1n34bbk4t1().s[82]++, /api|endpoint|rest/i.test(designContent));
    const hasAuth =
    /* istanbul ignore next */
    (cov_1n34bbk4t1().s[83]++, /auth|security|permission/i.test(designContent));
    /* istanbul ignore next */
    cov_1n34bbk4t1().s[84]++;
    if (
    /* istanbul ignore next */
    (cov_1n34bbk4t1().b[32][0]++, hasDatabase) &&
    /* istanbul ignore next */
    (cov_1n34bbk4t1().b[32][1]++, capabilities.includes('data_analysis'))) {
      /* istanbul ignore next */
      cov_1n34bbk4t1().b[31][0]++;
      cov_1n34bbk4t1().s[85]++;
      return true;
    } else
    /* istanbul ignore next */
    {
      cov_1n34bbk4t1().b[31][1]++;
    }
    cov_1n34bbk4t1().s[86]++;
    if (
    /* istanbul ignore next */
    (cov_1n34bbk4t1().b[34][0]++, hasAPI) &&
    /* istanbul ignore next */
    (cov_1n34bbk4t1().b[34][1]++, capabilities.includes('integration_planning'))) {
      /* istanbul ignore next */
      cov_1n34bbk4t1().b[33][0]++;
      cov_1n34bbk4t1().s[87]++;
      return true;
    } else
    /* istanbul ignore next */
    {
      cov_1n34bbk4t1().b[33][1]++;
    }
    cov_1n34bbk4t1().s[88]++;
    return false;
  }
  /**
   * Get required capabilities based on agent type
   */
  getRequiredCapabilities(agentType) {
    /* istanbul ignore next */
    cov_1n34bbk4t1().f[12]++;
    cov_1n34bbk4t1().s[89]++;
    switch (agentType) {
      case 'architect':
        /* istanbul ignore next */
        cov_1n34bbk4t1().b[35][0]++;
        cov_1n34bbk4t1().s[90]++;
        return ['system_design', 'architecture_patterns', 'integration_planning'];
      case 'specialist':
        /* istanbul ignore next */
        cov_1n34bbk4t1().b[35][1]++;
        cov_1n34bbk4t1().s[91]++;
        return ['domain_expertise', 'problem_solving', 'task_management'];
      default:
        /* istanbul ignore next */
        cov_1n34bbk4t1().b[35][2]++;
        cov_1n34bbk4t1().s[92]++;
        return ['task_management', 'information_gathering'];
    }
  }
  /**
   * Wait for planning task completion with timeout
   */
  async waitForPlanningCompletion(taskId, timeoutMs) {
    /* istanbul ignore next */
    cov_1n34bbk4t1().f[13]++;
    cov_1n34bbk4t1().s[93]++;
    return new Promise(resolve => {
      /* istanbul ignore next */
      cov_1n34bbk4t1().f[14]++;
      const startTime =
      /* istanbul ignore next */
      (cov_1n34bbk4t1().s[94]++, Date.now());
      const checkInterval =
      /* istanbul ignore next */
      (cov_1n34bbk4t1().s[95]++, setInterval(async () => {
        /* istanbul ignore next */
        cov_1n34bbk4t1().f[15]++;
        cov_1n34bbk4t1().s[96]++;
        try {
          /* istanbul ignore next */
          cov_1n34bbk4t1().s[97]++;
          // Check timeout
          if (Date.now() - startTime > timeoutMs) {
            /* istanbul ignore next */
            cov_1n34bbk4t1().b[36][0]++;
            cov_1n34bbk4t1().s[98]++;
            clearInterval(checkInterval);
            /* istanbul ignore next */
            cov_1n34bbk4t1().s[99]++;
            resolve({
              success: false,
              error: 'Planning task timeout'
            });
            /* istanbul ignore next */
            cov_1n34bbk4t1().s[100]++;
            return;
          } else
          /* istanbul ignore next */
          {
            cov_1n34bbk4t1().b[36][1]++;
          }
          // Check task status
          const task =
          /* istanbul ignore next */
          (cov_1n34bbk4t1().s[101]++, await this.hiveMind.getTask(taskId));
          /* istanbul ignore next */
          cov_1n34bbk4t1().s[102]++;
          if (task.status === 'completed') {
            /* istanbul ignore next */
            cov_1n34bbk4t1().b[37][0]++;
            cov_1n34bbk4t1().s[103]++;
            clearInterval(checkInterval);
            /* istanbul ignore next */
            cov_1n34bbk4t1().s[104]++;
            try {
              const result =
              /* istanbul ignore next */
              (cov_1n34bbk4t1().s[105]++, task.result ?
              /* istanbul ignore next */
              (cov_1n34bbk4t1().b[38][0]++, JSON.parse(task.result)) :
              /* istanbul ignore next */
              (cov_1n34bbk4t1().b[38][1]++, null));
              const taskMarkdown =
              /* istanbul ignore next */
              (cov_1n34bbk4t1().s[106]++, this.formatPlanningResult(result, task.metadata));
              /* istanbul ignore next */
              cov_1n34bbk4t1().s[107]++;
              resolve({
                success: true,
                taskMarkdown
              });
            } catch (parseError) {
              /* istanbul ignore next */
              cov_1n34bbk4t1().s[108]++;
              resolve({
                success: false,
                error: 'Failed to parse planning result'
              });
            }
          } else {
            /* istanbul ignore next */
            cov_1n34bbk4t1().b[37][1]++;
            cov_1n34bbk4t1().s[109]++;
            if (task.status === 'failed') {
              /* istanbul ignore next */
              cov_1n34bbk4t1().b[39][0]++;
              cov_1n34bbk4t1().s[110]++;
              clearInterval(checkInterval);
              /* istanbul ignore next */
              cov_1n34bbk4t1().s[111]++;
              resolve({
                success: false,
                error:
                /* istanbul ignore next */
                (cov_1n34bbk4t1().b[40][0]++, task.error) ||
                /* istanbul ignore next */
                (cov_1n34bbk4t1().b[40][1]++, 'Planning task failed')
              });
            } else
            /* istanbul ignore next */
            {
              cov_1n34bbk4t1().b[39][1]++;
            }
          }
        } catch (error) {
          /* istanbul ignore next */
          cov_1n34bbk4t1().s[112]++;
          clearInterval(checkInterval);
          /* istanbul ignore next */
          cov_1n34bbk4t1().s[113]++;
          resolve({
            success: false,
            error: error instanceof Error ?
            /* istanbul ignore next */
            (cov_1n34bbk4t1().b[41][0]++, error.message) :
            /* istanbul ignore next */
            (cov_1n34bbk4t1().b[41][1]++, String(error))
          });
        }
      }, 3000)); // Check every 3 seconds
    });
  }
  /**
   * Format planning result into structured markdown
   */
  formatPlanningResult(result, metadata) {
    /* istanbul ignore next */
    cov_1n34bbk4t1().f[16]++;
    const featureName =
    /* istanbul ignore next */
    (cov_1n34bbk4t1().s[114]++,
    /* istanbul ignore next */
    (cov_1n34bbk4t1().b[42][0]++, metadata?.featureName) ||
    /* istanbul ignore next */
    (cov_1n34bbk4t1().b[42][1]++, 'Feature'));
    const plannerType =
    /* istanbul ignore next */
    (cov_1n34bbk4t1().s[115]++,
    /* istanbul ignore next */
    (cov_1n34bbk4t1().b[43][0]++, metadata?.plannerType) ||
    /* istanbul ignore next */
    (cov_1n34bbk4t1().b[43][1]++, 'agent'));
    // If the result already contains structured markdown, use it
    /* istanbul ignore next */
    cov_1n34bbk4t1().s[116]++;
    if (
    /* istanbul ignore next */
    (cov_1n34bbk4t1().b[45][0]++, result) &&
    /* istanbul ignore next */
    (cov_1n34bbk4t1().b[45][1]++, typeof result === 'string') &&
    /* istanbul ignore next */
    (cov_1n34bbk4t1().b[45][2]++, result.includes('# Implementation Tasks'))) {
      /* istanbul ignore next */
      cov_1n34bbk4t1().b[44][0]++;
      cov_1n34bbk4t1().s[117]++;
      return result;
    } else
    /* istanbul ignore next */
    {
      cov_1n34bbk4t1().b[44][1]++;
    }
    // If result contains task breakdown, format it
    cov_1n34bbk4t1().s[118]++;
    if (
    /* istanbul ignore next */
    (cov_1n34bbk4t1().b[47][0]++, result) &&
    /* istanbul ignore next */
    (cov_1n34bbk4t1().b[47][1]++, result.tasks)) {
      /* istanbul ignore next */
      cov_1n34bbk4t1().b[46][0]++;
      cov_1n34bbk4t1().s[119]++;
      return this.createTaskMarkdown(featureName, result.tasks, plannerType);
    } else
    /* istanbul ignore next */
    {
      cov_1n34bbk4t1().b[46][1]++;
    }
    // Create basic task structure from agent analysis
    cov_1n34bbk4t1().s[120]++;
    return this.createBasicTaskMarkdown(featureName, result, plannerType);
  }
  /**
   * Create structured task markdown from AgentManager or hive mind results
   */
  createStructuredTaskMarkdown(featureName, tasks, plannerType) {
    /* istanbul ignore next */
    cov_1n34bbk4t1().f[17]++;
    let markdown =
    /* istanbul ignore next */
    (cov_1n34bbk4t1().s[121]++, `# Implementation Tasks for ${featureName}\n\n`);
    /* istanbul ignore next */
    cov_1n34bbk4t1().s[122]++;
    markdown += `*Generated by ${plannerType} agent*\n\n`;
    /* istanbul ignore next */
    cov_1n34bbk4t1().s[123]++;
    if (Array.isArray(tasks)) {
      /* istanbul ignore next */
      cov_1n34bbk4t1().b[48][0]++;
      cov_1n34bbk4t1().s[124]++;
      tasks.forEach((task, index) => {
        /* istanbul ignore next */
        cov_1n34bbk4t1().f[18]++;
        cov_1n34bbk4t1().s[125]++;
        markdown += `## Task ${index + 1}: ${
        /* istanbul ignore next */
        (cov_1n34bbk4t1().b[49][0]++, task.title) ||
        /* istanbul ignore next */
        (cov_1n34bbk4t1().b[49][1]++, task.name) ||
        /* istanbul ignore next */
        (cov_1n34bbk4t1().b[49][2]++, `Task ${index + 1}`)}\n\n`;
        /* istanbul ignore next */
        cov_1n34bbk4t1().s[126]++;
        if (task.description) {
          /* istanbul ignore next */
          cov_1n34bbk4t1().b[50][0]++;
          cov_1n34bbk4t1().s[127]++;
          markdown += `${task.description}\n\n`;
        } else
        /* istanbul ignore next */
        {
          cov_1n34bbk4t1().b[50][1]++;
        }
        cov_1n34bbk4t1().s[128]++;
        if (
        /* istanbul ignore next */
        (cov_1n34bbk4t1().b[52][0]++, task.acceptance) &&
        /* istanbul ignore next */
        (cov_1n34bbk4t1().b[52][1]++, Array.isArray(task.acceptance))) {
          /* istanbul ignore next */
          cov_1n34bbk4t1().b[51][0]++;
          cov_1n34bbk4t1().s[129]++;
          markdown += `**Acceptance Criteria:**\n`;
          /* istanbul ignore next */
          cov_1n34bbk4t1().s[130]++;
          task.acceptance.forEach(criteria => {
            /* istanbul ignore next */
            cov_1n34bbk4t1().f[19]++;
            cov_1n34bbk4t1().s[131]++;
            markdown += `- [ ] ${criteria}\n`;
          });
          /* istanbul ignore next */
          cov_1n34bbk4t1().s[132]++;
          markdown += '\n';
        } else
        /* istanbul ignore next */
        {
          cov_1n34bbk4t1().b[51][1]++;
        }
        cov_1n34bbk4t1().s[133]++;
        if (task.dependencies) {
          /* istanbul ignore next */
          cov_1n34bbk4t1().b[53][0]++;
          cov_1n34bbk4t1().s[134]++;
          markdown += `**Dependencies:** ${task.dependencies}\n\n`;
        } else
        /* istanbul ignore next */
        {
          cov_1n34bbk4t1().b[53][1]++;
        }
      });
    } else
    /* istanbul ignore next */
    {
      cov_1n34bbk4t1().b[48][1]++;
    }
    cov_1n34bbk4t1().s[135]++;
    return markdown;
  }
  /**
   * Create structured task breakdown from detailed result (legacy method)
   */
  createTaskMarkdown(featureName, tasks, plannerType) {
    /* istanbul ignore next */
    cov_1n34bbk4t1().f[20]++;
    let markdown =
    /* istanbul ignore next */
    (cov_1n34bbk4t1().s[136]++, `# Implementation Tasks for ${featureName}\n\n`);
    /* istanbul ignore next */
    cov_1n34bbk4t1().s[137]++;
    markdown += `*Generated by hive mind ${plannerType} agent*\n\n`;
    /* istanbul ignore next */
    cov_1n34bbk4t1().s[138]++;
    if (Array.isArray(tasks)) {
      /* istanbul ignore next */
      cov_1n34bbk4t1().b[54][0]++;
      cov_1n34bbk4t1().s[139]++;
      tasks.forEach((task, index) => {
        /* istanbul ignore next */
        cov_1n34bbk4t1().f[21]++;
        cov_1n34bbk4t1().s[140]++;
        markdown += `## Task ${index + 1}: ${
        /* istanbul ignore next */
        (cov_1n34bbk4t1().b[55][0]++, task.title) ||
        /* istanbul ignore next */
        (cov_1n34bbk4t1().b[55][1]++, `Task ${index + 1}`)}\n\n`;
        /* istanbul ignore next */
        cov_1n34bbk4t1().s[141]++;
        if (task.description) {
          /* istanbul ignore next */
          cov_1n34bbk4t1().b[56][0]++;
          cov_1n34bbk4t1().s[142]++;
          markdown += `${task.description}\n\n`;
        } else
        /* istanbul ignore next */
        {
          cov_1n34bbk4t1().b[56][1]++;
        }
        cov_1n34bbk4t1().s[143]++;
        if (
        /* istanbul ignore next */
        (cov_1n34bbk4t1().b[58][0]++, task.acceptance) &&
        /* istanbul ignore next */
        (cov_1n34bbk4t1().b[58][1]++, Array.isArray(task.acceptance))) {
          /* istanbul ignore next */
          cov_1n34bbk4t1().b[57][0]++;
          cov_1n34bbk4t1().s[144]++;
          markdown += `**Acceptance Criteria:**\n`;
          /* istanbul ignore next */
          cov_1n34bbk4t1().s[145]++;
          task.acceptance.forEach(criteria => {
            /* istanbul ignore next */
            cov_1n34bbk4t1().f[22]++;
            cov_1n34bbk4t1().s[146]++;
            markdown += `- [ ] ${criteria}\n`;
          });
          /* istanbul ignore next */
          cov_1n34bbk4t1().s[147]++;
          markdown += '\n';
        } else
        /* istanbul ignore next */
        {
          cov_1n34bbk4t1().b[57][1]++;
        }
      });
    } else
    /* istanbul ignore next */
    {
      cov_1n34bbk4t1().b[54][1]++;
    }
    cov_1n34bbk4t1().s[148]++;
    return markdown;
  }
  /**
   * Create fallback task plan when agents unavailable
   */
  createFallbackTaskPlan(featureName) {
    /* istanbul ignore next */
    cov_1n34bbk4t1().f[23]++;
    const basicTasks =
    /* istanbul ignore next */
    (cov_1n34bbk4t1().s[149]++, ['Set up project structure and dependencies', 'Implement core data models and interfaces', 'Create API endpoints and routing', 'Implement business logic and validation', 'Add comprehensive testing suite', 'Create documentation and examples', 'Integration testing and deployment preparation']);
    let markdown =
    /* istanbul ignore next */
    (cov_1n34bbk4t1().s[150]++, `# Implementation Tasks for ${featureName}\n\n`);
    /* istanbul ignore next */
    cov_1n34bbk4t1().s[151]++;
    markdown += `*Generated by fallback task generation*\n\n`;
    /* istanbul ignore next */
    cov_1n34bbk4t1().s[152]++;
    markdown += `## Task Breakdown\n\n`;
    /* istanbul ignore next */
    cov_1n34bbk4t1().s[153]++;
    basicTasks.forEach((task, index) => {
      /* istanbul ignore next */
      cov_1n34bbk4t1().f[24]++;
      cov_1n34bbk4t1().s[154]++;
      markdown += `### ${index + 1}. ${task}\n\n`;
      /* istanbul ignore next */
      cov_1n34bbk4t1().s[155]++;
      markdown += `**Status**: Pending\n\n`;
      /* istanbul ignore next */
      cov_1n34bbk4t1().s[156]++;
      markdown += `**Acceptance Criteria:**\n`;
      /* istanbul ignore next */
      cov_1n34bbk4t1().s[157]++;
      markdown += `- [ ] Task completed successfully\n`;
      /* istanbul ignore next */
      cov_1n34bbk4t1().s[158]++;
      markdown += `- [ ] Code reviewed and tested\n\n`;
    });
    /* istanbul ignore next */
    cov_1n34bbk4t1().s[159]++;
    return markdown;
  }
  /**
   * Create basic task markdown from simple result (legacy method)
   */
  createBasicTaskMarkdown(featureName, result, plannerType) {
    /* istanbul ignore next */
    cov_1n34bbk4t1().f[25]++;
    const basicTasks =
    /* istanbul ignore next */
    (cov_1n34bbk4t1().s[160]++, ['Set up project structure and dependencies', 'Implement core data models and interfaces', 'Create API endpoints and routing', 'Implement business logic and validation', 'Add comprehensive testing suite', 'Create documentation and examples', 'Integration testing and deployment preparation']);
    let markdown =
    /* istanbul ignore next */
    (cov_1n34bbk4t1().s[161]++, `# Implementation Tasks for ${featureName}\n\n`);
    /* istanbul ignore next */
    cov_1n34bbk4t1().s[162]++;
    markdown += `*Generated by hive mind ${plannerType} agent*\n\n`;
    /* istanbul ignore next */
    cov_1n34bbk4t1().s[163]++;
    if (
    /* istanbul ignore next */
    (cov_1n34bbk4t1().b[60][0]++, result) &&
    /* istanbul ignore next */
    (cov_1n34bbk4t1().b[60][1]++, result.analysis)) {
      /* istanbul ignore next */
      cov_1n34bbk4t1().b[59][0]++;
      cov_1n34bbk4t1().s[164]++;
      markdown += `## Analysis\n\n${result.analysis}\n\n`;
    } else
    /* istanbul ignore next */
    {
      cov_1n34bbk4t1().b[59][1]++;
    }
    cov_1n34bbk4t1().s[165]++;
    markdown += `## Task Breakdown\n\n`;
    /* istanbul ignore next */
    cov_1n34bbk4t1().s[166]++;
    basicTasks.forEach((task, index) => {
      /* istanbul ignore next */
      cov_1n34bbk4t1().f[26]++;
      cov_1n34bbk4t1().s[167]++;
      markdown += `### ${index + 1}. ${task}\n\n`;
      /* istanbul ignore next */
      cov_1n34bbk4t1().s[168]++;
      markdown += `**Status**: Pending\n\n`;
    });
    /* istanbul ignore next */
    cov_1n34bbk4t1().s[169]++;
    if (
    /* istanbul ignore next */
    (cov_1n34bbk4t1().b[62][0]++, result) &&
    /* istanbul ignore next */
    (cov_1n34bbk4t1().b[62][1]++, result.recommendations)) {
      /* istanbul ignore next */
      cov_1n34bbk4t1().b[61][0]++;
      cov_1n34bbk4t1().s[170]++;
      markdown += `## Recommendations\n\n${result.recommendations}\n\n`;
    } else
    /* istanbul ignore next */
    {
      cov_1n34bbk4t1().b[61][1]++;
    }
    cov_1n34bbk4t1().s[171]++;
    return markdown;
  }
  /**
   * Get status of integrated planning service
   */
  async getStatus() {
    /* istanbul ignore next */
    cov_1n34bbk4t1().f[27]++;
    cov_1n34bbk4t1().s[172]++;
    try {
      let taskPlanners =
      /* istanbul ignore next */
      (cov_1n34bbk4t1().s[173]++, 0);
      let agentManagerAvailable =
      /* istanbul ignore next */
      (cov_1n34bbk4t1().s[174]++, false);
      let agentRegistryAvailable =
      /* istanbul ignore next */
      (cov_1n34bbk4t1().s[175]++, false);
      // Check AgentManager system
      /* istanbul ignore next */
      cov_1n34bbk4t1().s[176]++;
      if (
      /* istanbul ignore next */
      (cov_1n34bbk4t1().b[64][0]++, this.agentManager) &&
      /* istanbul ignore next */
      (cov_1n34bbk4t1().b[64][1]++, this.agentRegistry)) {
        /* istanbul ignore next */
        cov_1n34bbk4t1().b[63][0]++;
        cov_1n34bbk4t1().s[177]++;
        try {
          const taskPlannerAgents =
          /* istanbul ignore next */
          (cov_1n34bbk4t1().s[178]++, await this.agentRegistry.queryAgents({
            type: 'task-planner',
            status: 'idle'
          }));
          /* istanbul ignore next */
          cov_1n34bbk4t1().s[179]++;
          taskPlanners = taskPlannerAgents.length;
          /* istanbul ignore next */
          cov_1n34bbk4t1().s[180]++;
          agentManagerAvailable = true;
          /* istanbul ignore next */
          cov_1n34bbk4t1().s[181]++;
          agentRegistryAvailable = true;
        } catch (error) {
          /* istanbul ignore next */
          cov_1n34bbk4t1().s[182]++;
          this.logger.warn(`AgentRegistry query failed: ${error instanceof Error ?
          /* istanbul ignore next */
          (cov_1n34bbk4t1().b[65][0]++, error.message) :
          /* istanbul ignore next */
          (cov_1n34bbk4t1().b[65][1]++, String(error))}`);
        }
      } else
      /* istanbul ignore next */
      {
        cov_1n34bbk4t1().b[63][1]++;
      }
      // Check hive mind agents
      const agents =
      /* istanbul ignore next */
      (cov_1n34bbk4t1().s[183]++, await this.hiveMind.getAgents());
      const idleAgents =
      /* istanbul ignore next */
      (cov_1n34bbk4t1().s[184]++, agents.filter(agent => {
        /* istanbul ignore next */
        cov_1n34bbk4t1().f[28]++;
        cov_1n34bbk4t1().s[185]++;
        return agent.status === 'idle';
      }));
      /* istanbul ignore next */
      cov_1n34bbk4t1().s[186]++;
      return {
        availableTaskPlanners: taskPlanners,
        availableArchitects: idleAgents.filter(a => {
          /* istanbul ignore next */
          cov_1n34bbk4t1().f[29]++;
          cov_1n34bbk4t1().s[187]++;
          return a.type === 'architect';
        }).length,
        availableSpecialists: idleAgents.filter(a => {
          /* istanbul ignore next */
          cov_1n34bbk4t1().f[30]++;
          cov_1n34bbk4t1().s[188]++;
          return a.type === 'specialist';
        }).length,
        totalAgents: agents.length + taskPlanners,
        agentManagerAvailable,
        agentRegistryAvailable
      };
    } catch (error) {
      /* istanbul ignore next */
      cov_1n34bbk4t1().s[189]++;
      this.logger.error(`Failed to get planner service status: ${error instanceof Error ?
      /* istanbul ignore next */
      (cov_1n34bbk4t1().b[66][0]++, error.message) :
      /* istanbul ignore next */
      (cov_1n34bbk4t1().b[66][1]++, String(error))}`);
      /* istanbul ignore next */
      cov_1n34bbk4t1().s[190]++;
      return {
        availableTaskPlanners: 0,
        availableArchitects: 0,
        availableSpecialists: 0,
        totalAgents: 0,
        agentManagerAvailable: false,
        agentRegistryAvailable: false
      };
    }
  }
  /**
   * Factory method to create service with AgentManager integration
   */
  static createWithAgentManager(hiveMind, logger, agentManager, agentRegistry) {
    /* istanbul ignore next */
    cov_1n34bbk4t1().f[31]++;
    cov_1n34bbk4t1().s[191]++;
    return new HiveMindPlannerService(hiveMind, logger, agentManager, agentRegistry);
  }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,