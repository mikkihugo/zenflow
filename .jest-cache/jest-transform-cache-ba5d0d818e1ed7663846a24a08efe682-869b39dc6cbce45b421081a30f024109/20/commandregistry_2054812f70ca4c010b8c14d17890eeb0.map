{"version":3,"names":["cov_1lcyhizf9","actualCoverage","EventEmitter","readdir","stat","join","extname","BaseCommand","CommandRegistry","commands","s","Map","aliases","plugins","loadingPaths","isInitialized","initialize","f","b","emit","loadPlugins","loadCommands","commandCount","size","pluginCount","error","register","metadata","has","config","name","Error","entry","loadTime","Date","now","usageCount","set","alias","registerCommand","command","get","unregister","delete","dispose","actualName","getCommand","list","Array","from","values","sort","a","localeCompare","findByCategory","category","filter","cmd","search","query","lowerQuery","toLowerCase","includes","description","execute","context","success","exitCode","executionTime","commandEntry","lastUsed","result","handler","commandError","String","message","addLoadingPath","path","push","removeLoadingPath","index","indexOf","splice","startTime","stats","totalCommands","loadedCommands","failedCommands","errors","loadingPath","loadCommandsFromPath","pathStat","isDirectory","files","file","filePath","fileExt","loadCommandFromFile","module","commandClass","default","Command","getConfig","registerPlugin","plugin","commandConfig","registeredAt","available","version","unregisterPlugin","count","getUsageStats","entries","map","clear","pluginName","keys","commandName","getStatus","initialized","aliasCount","removeAllListeners","length"],"sources":["/home/mhugo/code/claude-code-flow/src/cli/core/command-registry.ts"],"sourcesContent":["/**\n * Command Registry\n * \n * Manages command registration, discovery, and execution.\n * Supports dynamic command loading and plugin architecture.\n */\n\nimport { EventEmitter } from 'events';\nimport { readdir, stat } from 'fs/promises';\nimport { join, extname } from 'path';\nimport type {\n  CommandConfig,\n  CommandContext,\n  CommandResult,\n  CommandRegistry as ICommandRegistry,\n  CommandMetadata,\n  AsyncResult\n} from '../types/index.js';\nimport { BaseCommand } from './base-command.js';\n\n/**\n * Command registration entry\n */\ninterface CommandEntry extends CommandMetadata {\n  command?: BaseCommand;\n  loadTime: number;\n  lastUsed?: number;\n  usageCount: number;\n}\n\n/**\n * Command loading statistics\n */\ninterface LoadingStats {\n  totalCommands: number;\n  loadedCommands: number;\n  failedCommands: number;\n  loadTime: number;\n  errors: Array<{ path: string; error: Error }>;\n}\n\n/**\n * Plugin interface for command extensions\n */\nexport interface CommandPlugin {\n  name: string;\n  version: string;\n  commands: CommandConfig[];\n  initialize?(): Promise<void> | void;\n  dispose?(): Promise<void> | void;\n}\n\n/**\n * Command registry implementation\n */\nexport class CommandRegistry extends EventEmitter implements ICommandRegistry {\n  private commands = new Map<string, CommandEntry>();\n  private aliases = new Map<string, string>();\n  private plugins = new Map<string, CommandPlugin>();\n  private loadingPaths: string[] = [];\n  private isInitialized = false;\n\n  /**\n   * Initialize the registry\n   */\n  async initialize(): Promise<void> {\n    if (this.isInitialized) {\n      return;\n    }\n\n    this.emit('initializing');\n    \n    try {\n      // Load plugins first\n      await this.loadPlugins();\n      \n      // Then load commands from configured paths\n      await this.loadCommands();\n      \n      this.isInitialized = true;\n      this.emit('initialized', {\n        commandCount: this.commands.size,\n        pluginCount: this.plugins.size\n      });\n    } catch (error) {\n      this.emit('initialization-error', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Register a command metadata\n   */\n  register(metadata: CommandMetadata): void {\n    if (this.commands.has(metadata.config.name)) {\n      throw new Error(`Command '${metadata.config.name}' is already registered`);\n    }\n\n    const entry: CommandEntry = {\n      ...metadata,\n      loadTime: Date.now(),\n      usageCount: 0\n    };\n\n    this.commands.set(metadata.config.name, entry);\n\n    // Register aliases\n    if (metadata.config.aliases) {\n      for (const alias of metadata.config.aliases) {\n        if (this.aliases.has(alias)) {\n          throw new Error(`Alias '${alias}' is already registered`);\n        }\n        this.aliases.set(alias, metadata.config.name);\n      }\n    }\n\n    this.emit('command-registered', { name: metadata.config.name, metadata });\n  }\n\n  /**\n   * Register a BaseCommand instance\n   */\n  registerCommand(command: BaseCommand): void {\n    this.register(command.metadata);\n    \n    // Store the command instance for execution\n    const entry = this.commands.get(command.metadata.config.name);\n    if (entry) {\n      entry.command = command;\n    }\n  }\n\n  /**\n   * Unregister a command\n   */\n  unregister(name: string): boolean {\n    const entry = this.commands.get(name);\n    if (!entry) {\n      return false;\n    }\n\n    // Remove aliases\n    if (entry.config.aliases) {\n      for (const alias of entry.config.aliases) {\n        this.aliases.delete(alias);\n      }\n    }\n\n    // Dispose of command resources if it's a BaseCommand\n    if (entry.command) {\n      entry.command.dispose();\n    }\n    \n    this.commands.delete(name);\n    this.emit('command-unregistered', { name });\n    \n    return true;\n  }\n\n  /**\n   * Get a command metadata by name or alias\n   */\n  get(name: string): CommandMetadata | undefined {\n    // Check direct name first\n    let entry = this.commands.get(name);\n    \n    // Check aliases if not found\n    if (!entry) {\n      const actualName = this.aliases.get(name);\n      if (actualName) {\n        entry = this.commands.get(actualName);\n      }\n    }\n\n    return entry;\n  }\n\n  /**\n   * Get a BaseCommand instance by name or alias\n   */\n  getCommand(name: string): BaseCommand | null {\n    const entry = this.get(name) as CommandEntry;\n    return entry?.command || null;\n  }\n\n  /**\n   * Check if a command exists\n   */\n  has(name: string): boolean {\n    return this.commands.has(name) || this.aliases.has(name);\n  }\n\n  /**\n   * Get all registered commands metadata\n   */\n  list(): CommandMetadata[] {\n    return Array.from(this.commands.values())\n      .sort((a, b) => a.config.name.localeCompare(b.config.name));\n  }\n\n  /**\n   * Get commands by category\n   */\n  findByCategory(category: string): CommandMetadata[] {\n    return this.list().filter(cmd => cmd.config.category === category);\n  }\n\n  /**\n   * Search commands by name, description, or category\n   */\n  search(query: string): CommandMetadata[] {\n    const lowerQuery = query.toLowerCase();\n    \n    return this.list().filter(cmd => {\n      return cmd.config.name.toLowerCase().includes(lowerQuery) ||\n             cmd.config.description.toLowerCase().includes(lowerQuery) ||\n             cmd.config.category?.toLowerCase().includes(lowerQuery);\n    });\n  }\n\n  /**\n   * Execute a command\n   */\n  async execute(name: string, context: CommandContext): Promise<CommandResult> {\n    const entry = this.get(name) as CommandEntry;\n    \n    if (!entry) {\n      return {\n        success: false,\n        error: `Command '${name}' not found`,\n        exitCode: 127,\n        executionTime: 0\n      };\n    }\n\n    // Update usage statistics\n    const actualName = this.aliases.get(name) || name;\n    const commandEntry = this.commands.get(actualName);\n    if (commandEntry) {\n      commandEntry.lastUsed = Date.now();\n      commandEntry.usageCount++;\n    }\n\n    this.emit('command-executing', { name, context });\n    \n    try {\n      let result: CommandResult;\n\n      // Execute using BaseCommand if available, otherwise use handler\n      if (entry.command) {\n        result = await entry.command.execute(context);\n      } else if (entry.handler) {\n        result = await entry.handler(context);\n      } else {\n        throw new Error(`No execution method available for command '${name}'`);\n      }\n\n      this.emit('command-executed', { name, result });\n      return result;\n    } catch (error) {\n      const commandError = error instanceof Error ? error : new Error(String(error));\n      this.emit('command-error', { name, error: commandError });\n      \n      return {\n        success: false,\n        error: commandError.message,\n        exitCode: 1,\n        executionTime: 0\n      };\n    }\n  }\n\n  /**\n   * Add command loading path\n   */\n  addLoadingPath(path: string): void {\n    if (!this.loadingPaths.includes(path)) {\n      this.loadingPaths.push(path);\n    }\n  }\n\n  /**\n   * Remove command loading path\n   */\n  removeLoadingPath(path: string): void {\n    const index = this.loadingPaths.indexOf(path);\n    if (index > -1) {\n      this.loadingPaths.splice(index, 1);\n    }\n  }\n\n  /**\n   * Load commands from configured paths\n   */\n  private async loadCommands(): Promise<LoadingStats> {\n    const startTime = Date.now();\n    const stats: LoadingStats = {\n      totalCommands: 0,\n      loadedCommands: 0,\n      failedCommands: 0,\n      loadTime: 0,\n      errors: []\n    };\n\n    for (const loadingPath of this.loadingPaths) {\n      try {\n        await this.loadCommandsFromPath(loadingPath, stats);\n      } catch (error) {\n        stats.errors.push({\n          path: loadingPath,\n          error: error instanceof Error ? error : new Error(String(error))\n        });\n        stats.failedCommands++;\n      }\n    }\n\n    stats.loadTime = Date.now() - startTime;\n    this.emit('commands-loaded', stats);\n    \n    return stats;\n  }\n\n  /**\n   * Load commands from a specific path\n   */\n  private async loadCommandsFromPath(path: string, stats: LoadingStats): Promise<void> {\n    try {\n      const pathStat = await stat(path);\n      \n      if (pathStat.isDirectory()) {\n        const files = await readdir(path);\n        \n        for (const file of files) {\n          const filePath = join(path, file);\n          const fileExt = extname(file);\n          \n          if (['.js', '.ts'].includes(fileExt)) {\n            await this.loadCommandFromFile(filePath, stats);\n          }\n        }\n      } else if (['.js', '.ts'].includes(extname(path))) {\n        await this.loadCommandFromFile(path, stats);\n      }\n    } catch (error) {\n      stats.errors.push({\n        path,\n        error: error instanceof Error ? error : new Error(String(error))\n      });\n      stats.failedCommands++;\n    }\n  }\n\n  /**\n   * Load a command from a file\n   */\n  private async loadCommandFromFile(filePath: string, stats: LoadingStats): Promise<void> {\n    try {\n      stats.totalCommands++;\n      \n      // Dynamic import with proper error handling\n      const module = await import(filePath);\n      \n      // Look for command exports\n      const commandClass = module.default || module.Command;\n      \n      if (commandClass && typeof commandClass === 'function') {\n        const command = new commandClass() as BaseCommand;\n        \n        if (command instanceof BaseCommand) {\n          this.registerCommand(command);\n          stats.loadedCommands++;\n          this.emit('command-loaded', { path: filePath, name: command.getConfig().name });\n        } else {\n          throw new Error('Exported class is not a BaseCommand instance');\n        }\n      } else {\n        throw new Error('No valid command export found');\n      }\n    } catch (error) {\n      stats.errors.push({\n        path: filePath,\n        error: error instanceof Error ? error : new Error(String(error))\n      });\n      stats.failedCommands++;\n      this.emit('command-load-error', { path: filePath, error });\n    }\n  }\n\n  /**\n   * Register a plugin\n   */\n  async registerPlugin(plugin: CommandPlugin): Promise<void> {\n    if (this.plugins.has(plugin.name)) {\n      throw new Error(`Plugin '${plugin.name}' is already registered`);\n    }\n\n    try {\n      // Initialize plugin if it has an initialize method\n      if (plugin.initialize) {\n        await plugin.initialize();\n      }\n\n      // Register plugin commands\n      for (const commandConfig of plugin.commands) {\n        // Create a dynamic command metadata from config\n        const metadata: CommandMetadata = {\n          config: commandConfig,\n          handler: async (context: CommandContext): Promise<CommandResult> => {\n            // This is a placeholder - real plugins would provide actual handlers\n            return {\n              success: true,\n              message: `Dynamic command '${commandConfig.name}' executed`,\n              exitCode: 0\n            };\n          },\n          registeredAt: new Date(),\n          available: true,\n          plugin: plugin.name\n        };\n        \n        this.register(metadata);\n      }\n\n      this.plugins.set(plugin.name, plugin);\n      this.emit('plugin-registered', { name: plugin.name, version: plugin.version });\n    } catch (error) {\n      this.emit('plugin-error', { name: plugin.name, error });\n      throw error;\n    }\n  }\n\n  /**\n   * Unregister a plugin\n   */\n  async unregisterPlugin(name: string): Promise<boolean> {\n    const plugin = this.plugins.get(name);\n    if (!plugin) {\n      return false;\n    }\n\n    try {\n      // Unregister plugin commands\n      for (const commandConfig of plugin.commands) {\n        this.unregister(commandConfig.name);\n      }\n\n      // Dispose plugin if it has a dispose method\n      if (plugin.dispose) {\n        await plugin.dispose();\n      }\n\n      this.plugins.delete(name);\n      this.emit('plugin-unregistered', { name });\n      \n      return true;\n    } catch (error) {\n      this.emit('plugin-error', { name, error });\n      throw error;\n    }\n  }\n\n  /**\n   * Load plugins from configuration\n   */\n  private async loadPlugins(): Promise<void> {\n    // This would load plugins from configuration files or plugin directories\n    // For now, this is a placeholder\n    this.emit('plugins-loaded', { count: 0 });\n  }\n\n  /**\n   * Get usage statistics\n   */\n  getUsageStats(): Array<{ name: string; usageCount: number; lastUsed?: number }> {\n    return Array.from(this.commands.entries()).map(([name, entry]) => ({\n      name,\n      usageCount: entry.usageCount,\n      lastUsed: entry.lastUsed\n    }));\n  }\n\n  /**\n   * Clear all commands and plugins\n   */\n  async clear(): Promise<void> {\n    // Unregister all plugins\n    for (const pluginName of this.plugins.keys()) {\n      await this.unregisterPlugin(pluginName);\n    }\n\n    // Unregister all commands\n    for (const commandName of this.commands.keys()) {\n      this.unregister(commandName);\n    }\n\n    this.aliases.clear();\n    this.isInitialized = false;\n    \n    this.emit('cleared');\n  }\n\n  /**\n   * Get registry status\n   */\n  getStatus(): {\n    initialized: boolean;\n    commandCount: number;\n    pluginCount: number;\n    aliasCount: number;\n    loadingPaths: string[];\n  } {\n    return {\n      initialized: this.isInitialized,\n      commandCount: this.commands.size,\n      pluginCount: this.plugins.size,\n      aliasCount: this.aliases.size,\n      loadingPaths: [...this.loadingPaths]\n    };\n  }\n\n  /**\n   * Dispose of registry resources\n   */\n  async dispose(): Promise<void> {\n    await this.clear();\n    this.removeAllListeners();\n    this.loadingPaths.length = 0;\n  }\n}"],"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","ignoreList":[]}