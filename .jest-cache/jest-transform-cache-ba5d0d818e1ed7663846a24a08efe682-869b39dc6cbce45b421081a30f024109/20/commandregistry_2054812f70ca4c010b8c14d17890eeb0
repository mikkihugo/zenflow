a6b50deddcc4b8830b2bba2bec317ec8
/* istanbul ignore next */
function cov_1lcyhizf9() {
  var path = "/home/mhugo/code/claude-code-flow/src/cli/core/command-registry.ts";
  var hash = "10d84832b4358e029b85fb44035efacb0722e9df";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/home/mhugo/code/claude-code-flow/src/cli/core/command-registry.ts",
    statementMap: {
      "0": {
        start: {
          line: 15,
          column: 15
        },
        end: {
          line: 15,
          column: 24
        }
      },
      "1": {
        start: {
          line: 16,
          column: 14
        },
        end: {
          line: 16,
          column: 23
        }
      },
      "2": {
        start: {
          line: 17,
          column: 14
        },
        end: {
          line: 17,
          column: 23
        }
      },
      "3": {
        start: {
          line: 18,
          column: 19
        },
        end: {
          line: 18,
          column: 21
        }
      },
      "4": {
        start: {
          line: 19,
          column: 20
        },
        end: {
          line: 19,
          column: 25
        }
      },
      "5": {
        start: {
          line: 24,
          column: 8
        },
        end: {
          line: 26,
          column: 9
        }
      },
      "6": {
        start: {
          line: 25,
          column: 12
        },
        end: {
          line: 25,
          column: 19
        }
      },
      "7": {
        start: {
          line: 27,
          column: 8
        },
        end: {
          line: 27,
          column: 34
        }
      },
      "8": {
        start: {
          line: 28,
          column: 8
        },
        end: {
          line: 42,
          column: 9
        }
      },
      "9": {
        start: {
          line: 30,
          column: 12
        },
        end: {
          line: 30,
          column: 37
        }
      },
      "10": {
        start: {
          line: 32,
          column: 12
        },
        end: {
          line: 32,
          column: 38
        }
      },
      "11": {
        start: {
          line: 33,
          column: 12
        },
        end: {
          line: 33,
          column: 38
        }
      },
      "12": {
        start: {
          line: 34,
          column: 12
        },
        end: {
          line: 37,
          column: 15
        }
      },
      "13": {
        start: {
          line: 40,
          column: 12
        },
        end: {
          line: 40,
          column: 53
        }
      },
      "14": {
        start: {
          line: 41,
          column: 12
        },
        end: {
          line: 41,
          column: 24
        }
      },
      "15": {
        start: {
          line: 48,
          column: 8
        },
        end: {
          line: 50,
          column: 9
        }
      },
      "16": {
        start: {
          line: 49,
          column: 12
        },
        end: {
          line: 49,
          column: 87
        }
      },
      "17": {
        start: {
          line: 51,
          column: 22
        },
        end: {
          line: 55,
          column: 9
        }
      },
      "18": {
        start: {
          line: 56,
          column: 8
        },
        end: {
          line: 56,
          column: 55
        }
      },
      "19": {
        start: {
          line: 58,
          column: 8
        },
        end: {
          line: 65,
          column: 9
        }
      },
      "20": {
        start: {
          line: 59,
          column: 12
        },
        end: {
          line: 64,
          column: 13
        }
      },
      "21": {
        start: {
          line: 60,
          column: 16
        },
        end: {
          line: 62,
          column: 17
        }
      },
      "22": {
        start: {
          line: 61,
          column: 20
        },
        end: {
          line: 61,
          column: 78
        }
      },
      "23": {
        start: {
          line: 63,
          column: 16
        },
        end: {
          line: 63,
          column: 62
        }
      },
      "24": {
        start: {
          line: 66,
          column: 8
        },
        end: {
          line: 66,
          column: 82
        }
      },
      "25": {
        start: {
          line: 72,
          column: 8
        },
        end: {
          line: 72,
          column: 40
        }
      },
      "26": {
        start: {
          line: 74,
          column: 22
        },
        end: {
          line: 74,
          column: 69
        }
      },
      "27": {
        start: {
          line: 75,
          column: 8
        },
        end: {
          line: 77,
          column: 9
        }
      },
      "28": {
        start: {
          line: 76,
          column: 12
        },
        end: {
          line: 76,
          column: 36
        }
      },
      "29": {
        start: {
          line: 83,
          column: 22
        },
        end: {
          line: 83,
          column: 45
        }
      },
      "30": {
        start: {
          line: 84,
          column: 8
        },
        end: {
          line: 86,
          column: 9
        }
      },
      "31": {
        start: {
          line: 85,
          column: 12
        },
        end: {
          line: 85,
          column: 25
        }
      },
      "32": {
        start: {
          line: 88,
          column: 8
        },
        end: {
          line: 92,
          column: 9
        }
      },
      "33": {
        start: {
          line: 89,
          column: 12
        },
        end: {
          line: 91,
          column: 13
        }
      },
      "34": {
        start: {
          line: 90,
          column: 16
        },
        end: {
          line: 90,
          column: 43
        }
      },
      "35": {
        start: {
          line: 94,
          column: 8
        },
        end: {
          line: 96,
          column: 9
        }
      },
      "36": {
        start: {
          line: 95,
          column: 12
        },
        end: {
          line: 95,
          column: 36
        }
      },
      "37": {
        start: {
          line: 97,
          column: 8
        },
        end: {
          line: 97,
          column: 35
        }
      },
      "38": {
        start: {
          line: 98,
          column: 8
        },
        end: {
          line: 98,
          column: 52
        }
      },
      "39": {
        start: {
          line: 99,
          column: 8
        },
        end: {
          line: 99,
          column: 20
        }
      },
      "40": {
        start: {
          line: 106,
          column: 20
        },
        end: {
          line: 106,
          column: 43
        }
      },
      "41": {
        start: {
          line: 108,
          column: 8
        },
        end: {
          line: 113,
          column: 9
        }
      },
      "42": {
        start: {
          line: 109,
          column: 31
        },
        end: {
          line: 109,
          column: 53
        }
      },
      "43": {
        start: {
          line: 110,
          column: 12
        },
        end: {
          line: 112,
          column: 13
        }
      },
      "44": {
        start: {
          line: 111,
          column: 16
        },
        end: {
          line: 111,
          column: 54
        }
      },
      "45": {
        start: {
          line: 114,
          column: 8
        },
        end: {
          line: 114,
          column: 21
        }
      },
      "46": {
        start: {
          line: 120,
          column: 22
        },
        end: {
          line: 120,
          column: 36
        }
      },
      "47": {
        start: {
          line: 121,
          column: 8
        },
        end: {
          line: 121,
          column: 38
        }
      },
      "48": {
        start: {
          line: 127,
          column: 8
        },
        end: {
          line: 127,
          column: 65
        }
      },
      "49": {
        start: {
          line: 133,
          column: 8
        },
        end: {
          line: 134,
          column: 72
        }
      },
      "50": {
        start: {
          line: 134,
          column: 28
        },
        end: {
          line: 134,
          column: 70
        }
      },
      "51": {
        start: {
          line: 140,
          column: 8
        },
        end: {
          line: 140,
          column: 75
        }
      },
      "52": {
        start: {
          line: 140,
          column: 41
        },
        end: {
          line: 140,
          column: 73
        }
      },
      "53": {
        start: {
          line: 146,
          column: 27
        },
        end: {
          line: 146,
          column: 46
        }
      },
      "54": {
        start: {
          line: 147,
          column: 8
        },
        end: {
          line: 151,
          column: 11
        }
      },
      "55": {
        start: {
          line: 148,
          column: 12
        },
        end: {
          line: 150,
          column: 72
        }
      },
      "56": {
        start: {
          line: 157,
          column: 22
        },
        end: {
          line: 157,
          column: 36
        }
      },
      "57": {
        start: {
          line: 158,
          column: 8
        },
        end: {
          line: 165,
          column: 9
        }
      },
      "58": {
        start: {
          line: 159,
          column: 12
        },
        end: {
          line: 164,
          column: 14
        }
      },
      "59": {
        start: {
          line: 167,
          column: 27
        },
        end: {
          line: 167,
          column: 57
        }
      },
      "60": {
        start: {
          line: 168,
          column: 29
        },
        end: {
          line: 168,
          column: 58
        }
      },
      "61": {
        start: {
          line: 169,
          column: 8
        },
        end: {
          line: 172,
          column: 9
        }
      },
      "62": {
        start: {
          line: 170,
          column: 12
        },
        end: {
          line: 170,
          column: 47
        }
      },
      "63": {
        start: {
          line: 171,
          column: 12
        },
        end: {
          line: 171,
          column: 38
        }
      },
      "64": {
        start: {
          line: 173,
          column: 8
        },
        end: {
          line: 173,
          column: 58
        }
      },
      "65": {
        start: {
          line: 174,
          column: 8
        },
        end: {
          line: 198,
          column: 9
        }
      },
      "66": {
        start: {
          line: 177,
          column: 12
        },
        end: {
          line: 185,
          column: 13
        }
      },
      "67": {
        start: {
          line: 178,
          column: 16
        },
        end: {
          line: 178,
          column: 62
        }
      },
      "68": {
        start: {
          line: 180,
          column: 17
        },
        end: {
          line: 185,
          column: 13
        }
      },
      "69": {
        start: {
          line: 181,
          column: 16
        },
        end: {
          line: 181,
          column: 54
        }
      },
      "70": {
        start: {
          line: 184,
          column: 16
        },
        end: {
          line: 184,
          column: 87
        }
      },
      "71": {
        start: {
          line: 186,
          column: 12
        },
        end: {
          line: 186,
          column: 60
        }
      },
      "72": {
        start: {
          line: 187,
          column: 12
        },
        end: {
          line: 187,
          column: 26
        }
      },
      "73": {
        start: {
          line: 190,
          column: 33
        },
        end: {
          line: 190,
          column: 90
        }
      },
      "74": {
        start: {
          line: 191,
          column: 12
        },
        end: {
          line: 191,
          column: 70
        }
      },
      "75": {
        start: {
          line: 192,
          column: 12
        },
        end: {
          line: 197,
          column: 14
        }
      },
      "76": {
        start: {
          line: 204,
          column: 8
        },
        end: {
          line: 206,
          column: 9
        }
      },
      "77": {
        start: {
          line: 205,
          column: 12
        },
        end: {
          line: 205,
          column: 41
        }
      },
      "78": {
        start: {
          line: 212,
          column: 22
        },
        end: {
          line: 212,
          column: 53
        }
      },
      "79": {
        start: {
          line: 213,
          column: 8
        },
        end: {
          line: 215,
          column: 9
        }
      },
      "80": {
        start: {
          line: 214,
          column: 12
        },
        end: {
          line: 214,
          column: 47
        }
      },
      "81": {
        start: {
          line: 221,
          column: 26
        },
        end: {
          line: 221,
          column: 36
        }
      },
      "82": {
        start: {
          line: 222,
          column: 22
        },
        end: {
          line: 228,
          column: 9
        }
      },
      "83": {
        start: {
          line: 229,
          column: 8
        },
        end: {
          line: 240,
          column: 9
        }
      },
      "84": {
        start: {
          line: 230,
          column: 12
        },
        end: {
          line: 239,
          column: 13
        }
      },
      "85": {
        start: {
          line: 231,
          column: 16
        },
        end: {
          line: 231,
          column: 68
        }
      },
      "86": {
        start: {
          line: 234,
          column: 16
        },
        end: {
          line: 237,
          column: 19
        }
      },
      "87": {
        start: {
          line: 238,
          column: 16
        },
        end: {
          line: 238,
          column: 39
        }
      },
      "88": {
        start: {
          line: 241,
          column: 8
        },
        end: {
          line: 241,
          column: 48
        }
      },
      "89": {
        start: {
          line: 242,
          column: 8
        },
        end: {
          line: 242,
          column: 44
        }
      },
      "90": {
        start: {
          line: 243,
          column: 8
        },
        end: {
          line: 243,
          column: 21
        }
      },
      "91": {
        start: {
          line: 249,
          column: 8
        },
        end: {
          line: 271,
          column: 9
        }
      },
      "92": {
        start: {
          line: 250,
          column: 29
        },
        end: {
          line: 250,
          column: 45
        }
      },
      "93": {
        start: {
          line: 251,
          column: 12
        },
        end: {
          line: 263,
          column: 13
        }
      },
      "94": {
        start: {
          line: 252,
          column: 30
        },
        end: {
          line: 252,
          column: 49
        }
      },
      "95": {
        start: {
          line: 253,
          column: 16
        },
        end: {
          line: 259,
          column: 17
        }
      },
      "96": {
        start: {
          line: 254,
          column: 37
        },
        end: {
          line: 254,
          column: 53
        }
      },
      "97": {
        start: {
          line: 255,
          column: 36
        },
        end: {
          line: 255,
          column: 49
        }
      },
      "98": {
        start: {
          line: 256,
          column: 20
        },
        end: {
          line: 258,
          column: 21
        }
      },
      "99": {
        start: {
          line: 257,
          column: 24
        },
        end: {
          line: 257,
          column: 72
        }
      },
      "100": {
        start: {
          line: 261,
          column: 17
        },
        end: {
          line: 263,
          column: 13
        }
      },
      "101": {
        start: {
          line: 262,
          column: 16
        },
        end: {
          line: 262,
          column: 60
        }
      },
      "102": {
        start: {
          line: 266,
          column: 12
        },
        end: {
          line: 269,
          column: 15
        }
      },
      "103": {
        start: {
          line: 270,
          column: 12
        },
        end: {
          line: 270,
          column: 35
        }
      },
      "104": {
        start: {
          line: 277,
          column: 8
        },
        end: {
          line: 305,
          column: 9
        }
      },
      "105": {
        start: {
          line: 278,
          column: 12
        },
        end: {
          line: 278,
          column: 34
        }
      },
      "106": {
        start: {
          line: 280,
          column: 27
        },
        end: {
          line: 280,
          column: 49
        }
      },
      "107": {
        start: {
          line: 282,
          column: 33
        },
        end: {
          line: 282,
          column: 65
        }
      },
      "108": {
        start: {
          line: 283,
          column: 12
        },
        end: {
          line: 296,
          column: 13
        }
      },
      "109": {
        start: {
          line: 284,
          column: 32
        },
        end: {
          line: 284,
          column: 50
        }
      },
      "110": {
        start: {
          line: 285,
          column: 16
        },
        end: {
          line: 292,
          column: 17
        }
      },
      "111": {
        start: {
          line: 286,
          column: 20
        },
        end: {
          line: 286,
          column: 50
        }
      },
      "112": {
        start: {
          line: 287,
          column: 20
        },
        end: {
          line: 287,
          column: 43
        }
      },
      "113": {
        start: {
          line: 288,
          column: 20
        },
        end: {
          line: 288,
          column: 100
        }
      },
      "114": {
        start: {
          line: 291,
          column: 20
        },
        end: {
          line: 291,
          column: 84
        }
      },
      "115": {
        start: {
          line: 295,
          column: 16
        },
        end: {
          line: 295,
          column: 65
        }
      },
      "116": {
        start: {
          line: 299,
          column: 12
        },
        end: {
          line: 302,
          column: 15
        }
      },
      "117": {
        start: {
          line: 303,
          column: 12
        },
        end: {
          line: 303,
          column: 35
        }
      },
      "118": {
        start: {
          line: 304,
          column: 12
        },
        end: {
          line: 304,
          column: 71
        }
      },
      "119": {
        start: {
          line: 311,
          column: 8
        },
        end: {
          line: 313,
          column: 9
        }
      },
      "120": {
        start: {
          line: 312,
          column: 12
        },
        end: {
          line: 312,
          column: 77
        }
      },
      "121": {
        start: {
          line: 314,
          column: 8
        },
        end: {
          line: 344,
          column: 9
        }
      },
      "122": {
        start: {
          line: 316,
          column: 12
        },
        end: {
          line: 318,
          column: 13
        }
      },
      "123": {
        start: {
          line: 317,
          column: 16
        },
        end: {
          line: 317,
          column: 42
        }
      },
      "124": {
        start: {
          line: 320,
          column: 12
        },
        end: {
          line: 337,
          column: 13
        }
      },
      "125": {
        start: {
          line: 322,
          column: 33
        },
        end: {
          line: 335,
          column: 17
        }
      },
      "126": {
        start: {
          line: 326,
          column: 24
        },
        end: {
          line: 330,
          column: 26
        }
      },
      "127": {
        start: {
          line: 336,
          column: 16
        },
        end: {
          line: 336,
          column: 40
        }
      },
      "128": {
        start: {
          line: 338,
          column: 12
        },
        end: {
          line: 338,
          column: 50
        }
      },
      "129": {
        start: {
          line: 339,
          column: 12
        },
        end: {
          line: 339,
          column: 91
        }
      },
      "130": {
        start: {
          line: 342,
          column: 12
        },
        end: {
          line: 342,
          column: 68
        }
      },
      "131": {
        start: {
          line: 343,
          column: 12
        },
        end: {
          line: 343,
          column: 24
        }
      },
      "132": {
        start: {
          line: 350,
          column: 23
        },
        end: {
          line: 350,
          column: 45
        }
      },
      "133": {
        start: {
          line: 351,
          column: 8
        },
        end: {
          line: 353,
          column: 9
        }
      },
      "134": {
        start: {
          line: 352,
          column: 12
        },
        end: {
          line: 352,
          column: 25
        }
      },
      "135": {
        start: {
          line: 354,
          column: 8
        },
        end: {
          line: 370,
          column: 9
        }
      },
      "136": {
        start: {
          line: 356,
          column: 12
        },
        end: {
          line: 358,
          column: 13
        }
      },
      "137": {
        start: {
          line: 357,
          column: 16
        },
        end: {
          line: 357,
          column: 52
        }
      },
      "138": {
        start: {
          line: 360,
          column: 12
        },
        end: {
          line: 362,
          column: 13
        }
      },
      "139": {
        start: {
          line: 361,
          column: 16
        },
        end: {
          line: 361,
          column: 39
        }
      },
      "140": {
        start: {
          line: 363,
          column: 12
        },
        end: {
          line: 363,
          column: 38
        }
      },
      "141": {
        start: {
          line: 364,
          column: 12
        },
        end: {
          line: 364,
          column: 55
        }
      },
      "142": {
        start: {
          line: 365,
          column: 12
        },
        end: {
          line: 365,
          column: 24
        }
      },
      "143": {
        start: {
          line: 368,
          column: 12
        },
        end: {
          line: 368,
          column: 55
        }
      },
      "144": {
        start: {
          line: 369,
          column: 12
        },
        end: {
          line: 369,
          column: 24
        }
      },
      "145": {
        start: {
          line: 378,
          column: 8
        },
        end: {
          line: 378,
          column: 50
        }
      },
      "146": {
        start: {
          line: 384,
          column: 8
        },
        end: {
          line: 388,
          column: 12
        }
      },
      "147": {
        start: {
          line: 384,
          column: 75
        },
        end: {
          line: 388,
          column: 9
        }
      },
      "148": {
        start: {
          line: 395,
          column: 8
        },
        end: {
          line: 397,
          column: 9
        }
      },
      "149": {
        start: {
          line: 396,
          column: 12
        },
        end: {
          line: 396,
          column: 52
        }
      },
      "150": {
        start: {
          line: 399,
          column: 8
        },
        end: {
          line: 401,
          column: 9
        }
      },
      "151": {
        start: {
          line: 400,
          column: 12
        },
        end: {
          line: 400,
          column: 41
        }
      },
      "152": {
        start: {
          line: 402,
          column: 8
        },
        end: {
          line: 402,
          column: 29
        }
      },
      "153": {
        start: {
          line: 403,
          column: 8
        },
        end: {
          line: 403,
          column: 35
        }
      },
      "154": {
        start: {
          line: 404,
          column: 8
        },
        end: {
          line: 404,
          column: 29
        }
      },
      "155": {
        start: {
          line: 410,
          column: 8
        },
        end: {
          line: 416,
          column: 10
        }
      },
      "156": {
        start: {
          line: 422,
          column: 8
        },
        end: {
          line: 422,
          column: 27
        }
      },
      "157": {
        start: {
          line: 423,
          column: 8
        },
        end: {
          line: 423,
          column: 34
        }
      },
      "158": {
        start: {
          line: 424,
          column: 8
        },
        end: {
          line: 424,
          column: 37
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 23,
            column: 4
          },
          end: {
            line: 23,
            column: 5
          }
        },
        loc: {
          start: {
            line: 23,
            column: 23
          },
          end: {
            line: 43,
            column: 5
          }
        },
        line: 23
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 47,
            column: 4
          },
          end: {
            line: 47,
            column: 5
          }
        },
        loc: {
          start: {
            line: 47,
            column: 23
          },
          end: {
            line: 67,
            column: 5
          }
        },
        line: 47
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 71,
            column: 4
          },
          end: {
            line: 71,
            column: 5
          }
        },
        loc: {
          start: {
            line: 71,
            column: 29
          },
          end: {
            line: 78,
            column: 5
          }
        },
        line: 71
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 82,
            column: 4
          },
          end: {
            line: 82,
            column: 5
          }
        },
        loc: {
          start: {
            line: 82,
            column: 21
          },
          end: {
            line: 100,
            column: 5
          }
        },
        line: 82
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 104,
            column: 4
          },
          end: {
            line: 104,
            column: 5
          }
        },
        loc: {
          start: {
            line: 104,
            column: 14
          },
          end: {
            line: 115,
            column: 5
          }
        },
        line: 104
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 119,
            column: 4
          },
          end: {
            line: 119,
            column: 5
          }
        },
        loc: {
          start: {
            line: 119,
            column: 21
          },
          end: {
            line: 122,
            column: 5
          }
        },
        line: 119
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 126,
            column: 4
          },
          end: {
            line: 126,
            column: 5
          }
        },
        loc: {
          start: {
            line: 126,
            column: 14
          },
          end: {
            line: 128,
            column: 5
          }
        },
        line: 126
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 132,
            column: 4
          },
          end: {
            line: 132,
            column: 5
          }
        },
        loc: {
          start: {
            line: 132,
            column: 11
          },
          end: {
            line: 135,
            column: 5
          }
        },
        line: 132
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 134,
            column: 18
          },
          end: {
            line: 134,
            column: 19
          }
        },
        loc: {
          start: {
            line: 134,
            column: 28
          },
          end: {
            line: 134,
            column: 70
          }
        },
        line: 134
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 139,
            column: 4
          },
          end: {
            line: 139,
            column: 5
          }
        },
        loc: {
          start: {
            line: 139,
            column: 29
          },
          end: {
            line: 141,
            column: 5
          }
        },
        line: 139
      },
      "10": {
        name: "(anonymous_10)",
        decl: {
          start: {
            line: 140,
            column: 34
          },
          end: {
            line: 140,
            column: 35
          }
        },
        loc: {
          start: {
            line: 140,
            column: 41
          },
          end: {
            line: 140,
            column: 73
          }
        },
        line: 140
      },
      "11": {
        name: "(anonymous_11)",
        decl: {
          start: {
            line: 145,
            column: 4
          },
          end: {
            line: 145,
            column: 5
          }
        },
        loc: {
          start: {
            line: 145,
            column: 18
          },
          end: {
            line: 152,
            column: 5
          }
        },
        line: 145
      },
      "12": {
        name: "(anonymous_12)",
        decl: {
          start: {
            line: 147,
            column: 34
          },
          end: {
            line: 147,
            column: 35
          }
        },
        loc: {
          start: {
            line: 147,
            column: 41
          },
          end: {
            line: 151,
            column: 9
          }
        },
        line: 147
      },
      "13": {
        name: "(anonymous_13)",
        decl: {
          start: {
            line: 156,
            column: 4
          },
          end: {
            line: 156,
            column: 5
          }
        },
        loc: {
          start: {
            line: 156,
            column: 33
          },
          end: {
            line: 199,
            column: 5
          }
        },
        line: 156
      },
      "14": {
        name: "(anonymous_14)",
        decl: {
          start: {
            line: 203,
            column: 4
          },
          end: {
            line: 203,
            column: 5
          }
        },
        loc: {
          start: {
            line: 203,
            column: 25
          },
          end: {
            line: 207,
            column: 5
          }
        },
        line: 203
      },
      "15": {
        name: "(anonymous_15)",
        decl: {
          start: {
            line: 211,
            column: 4
          },
          end: {
            line: 211,
            column: 5
          }
        },
        loc: {
          start: {
            line: 211,
            column: 28
          },
          end: {
            line: 216,
            column: 5
          }
        },
        line: 211
      },
      "16": {
        name: "(anonymous_16)",
        decl: {
          start: {
            line: 220,
            column: 4
          },
          end: {
            line: 220,
            column: 5
          }
        },
        loc: {
          start: {
            line: 220,
            column: 25
          },
          end: {
            line: 244,
            column: 5
          }
        },
        line: 220
      },
      "17": {
        name: "(anonymous_17)",
        decl: {
          start: {
            line: 248,
            column: 4
          },
          end: {
            line: 248,
            column: 5
          }
        },
        loc: {
          start: {
            line: 248,
            column: 44
          },
          end: {
            line: 272,
            column: 5
          }
        },
        line: 248
      },
      "18": {
        name: "(anonymous_18)",
        decl: {
          start: {
            line: 276,
            column: 4
          },
          end: {
            line: 276,
            column: 5
          }
        },
        loc: {
          start: {
            line: 276,
            column: 47
          },
          end: {
            line: 306,
            column: 5
          }
        },
        line: 276
      },
      "19": {
        name: "(anonymous_19)",
        decl: {
          start: {
            line: 310,
            column: 4
          },
          end: {
            line: 310,
            column: 5
          }
        },
        loc: {
          start: {
            line: 310,
            column: 33
          },
          end: {
            line: 345,
            column: 5
          }
        },
        line: 310
      },
      "20": {
        name: "(anonymous_20)",
        decl: {
          start: {
            line: 324,
            column: 29
          },
          end: {
            line: 324,
            column: 30
          }
        },
        loc: {
          start: {
            line: 324,
            column: 48
          },
          end: {
            line: 331,
            column: 21
          }
        },
        line: 324
      },
      "21": {
        name: "(anonymous_21)",
        decl: {
          start: {
            line: 349,
            column: 4
          },
          end: {
            line: 349,
            column: 5
          }
        },
        loc: {
          start: {
            line: 349,
            column: 33
          },
          end: {
            line: 371,
            column: 5
          }
        },
        line: 349
      },
      "22": {
        name: "(anonymous_22)",
        decl: {
          start: {
            line: 375,
            column: 4
          },
          end: {
            line: 375,
            column: 5
          }
        },
        loc: {
          start: {
            line: 375,
            column: 24
          },
          end: {
            line: 379,
            column: 5
          }
        },
        line: 375
      },
      "23": {
        name: "(anonymous_23)",
        decl: {
          start: {
            line: 383,
            column: 4
          },
          end: {
            line: 383,
            column: 5
          }
        },
        loc: {
          start: {
            line: 383,
            column: 20
          },
          end: {
            line: 389,
            column: 5
          }
        },
        line: 383
      },
      "24": {
        name: "(anonymous_24)",
        decl: {
          start: {
            line: 384,
            column: 55
          },
          end: {
            line: 384,
            column: 56
          }
        },
        loc: {
          start: {
            line: 384,
            column: 75
          },
          end: {
            line: 388,
            column: 9
          }
        },
        line: 384
      },
      "25": {
        name: "(anonymous_25)",
        decl: {
          start: {
            line: 393,
            column: 4
          },
          end: {
            line: 393,
            column: 5
          }
        },
        loc: {
          start: {
            line: 393,
            column: 18
          },
          end: {
            line: 405,
            column: 5
          }
        },
        line: 393
      },
      "26": {
        name: "(anonymous_26)",
        decl: {
          start: {
            line: 409,
            column: 4
          },
          end: {
            line: 409,
            column: 5
          }
        },
        loc: {
          start: {
            line: 409,
            column: 16
          },
          end: {
            line: 417,
            column: 5
          }
        },
        line: 409
      },
      "27": {
        name: "(anonymous_27)",
        decl: {
          start: {
            line: 421,
            column: 4
          },
          end: {
            line: 421,
            column: 5
          }
        },
        loc: {
          start: {
            line: 421,
            column: 20
          },
          end: {
            line: 425,
            column: 5
          }
        },
        line: 421
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 24,
            column: 8
          },
          end: {
            line: 26,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 24,
            column: 8
          },
          end: {
            line: 26,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 24
      },
      "1": {
        loc: {
          start: {
            line: 48,
            column: 8
          },
          end: {
            line: 50,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 48,
            column: 8
          },
          end: {
            line: 50,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 48
      },
      "2": {
        loc: {
          start: {
            line: 58,
            column: 8
          },
          end: {
            line: 65,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 58,
            column: 8
          },
          end: {
            line: 65,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 58
      },
      "3": {
        loc: {
          start: {
            line: 60,
            column: 16
          },
          end: {
            line: 62,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 60,
            column: 16
          },
          end: {
            line: 62,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 60
      },
      "4": {
        loc: {
          start: {
            line: 75,
            column: 8
          },
          end: {
            line: 77,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 75,
            column: 8
          },
          end: {
            line: 77,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 75
      },
      "5": {
        loc: {
          start: {
            line: 84,
            column: 8
          },
          end: {
            line: 86,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 84,
            column: 8
          },
          end: {
            line: 86,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 84
      },
      "6": {
        loc: {
          start: {
            line: 88,
            column: 8
          },
          end: {
            line: 92,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 88,
            column: 8
          },
          end: {
            line: 92,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 88
      },
      "7": {
        loc: {
          start: {
            line: 94,
            column: 8
          },
          end: {
            line: 96,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 94,
            column: 8
          },
          end: {
            line: 96,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 94
      },
      "8": {
        loc: {
          start: {
            line: 108,
            column: 8
          },
          end: {
            line: 113,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 108,
            column: 8
          },
          end: {
            line: 113,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 108
      },
      "9": {
        loc: {
          start: {
            line: 110,
            column: 12
          },
          end: {
            line: 112,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 110,
            column: 12
          },
          end: {
            line: 112,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 110
      },
      "10": {
        loc: {
          start: {
            line: 121,
            column: 15
          },
          end: {
            line: 121,
            column: 37
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 121,
            column: 15
          },
          end: {
            line: 121,
            column: 29
          }
        }, {
          start: {
            line: 121,
            column: 33
          },
          end: {
            line: 121,
            column: 37
          }
        }],
        line: 121
      },
      "11": {
        loc: {
          start: {
            line: 127,
            column: 15
          },
          end: {
            line: 127,
            column: 64
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 127,
            column: 15
          },
          end: {
            line: 127,
            column: 38
          }
        }, {
          start: {
            line: 127,
            column: 42
          },
          end: {
            line: 127,
            column: 64
          }
        }],
        line: 127
      },
      "12": {
        loc: {
          start: {
            line: 148,
            column: 19
          },
          end: {
            line: 150,
            column: 71
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 148,
            column: 19
          },
          end: {
            line: 148,
            column: 69
          }
        }, {
          start: {
            line: 149,
            column: 16
          },
          end: {
            line: 149,
            column: 73
          }
        }, {
          start: {
            line: 150,
            column: 16
          },
          end: {
            line: 150,
            column: 71
          }
        }],
        line: 148
      },
      "13": {
        loc: {
          start: {
            line: 158,
            column: 8
          },
          end: {
            line: 165,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 158,
            column: 8
          },
          end: {
            line: 165,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 158
      },
      "14": {
        loc: {
          start: {
            line: 167,
            column: 27
          },
          end: {
            line: 167,
            column: 57
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 167,
            column: 27
          },
          end: {
            line: 167,
            column: 49
          }
        }, {
          start: {
            line: 167,
            column: 53
          },
          end: {
            line: 167,
            column: 57
          }
        }],
        line: 167
      },
      "15": {
        loc: {
          start: {
            line: 169,
            column: 8
          },
          end: {
            line: 172,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 169,
            column: 8
          },
          end: {
            line: 172,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 169
      },
      "16": {
        loc: {
          start: {
            line: 177,
            column: 12
          },
          end: {
            line: 185,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 177,
            column: 12
          },
          end: {
            line: 185,
            column: 13
          }
        }, {
          start: {
            line: 180,
            column: 17
          },
          end: {
            line: 185,
            column: 13
          }
        }],
        line: 177
      },
      "17": {
        loc: {
          start: {
            line: 180,
            column: 17
          },
          end: {
            line: 185,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 180,
            column: 17
          },
          end: {
            line: 185,
            column: 13
          }
        }, {
          start: {
            line: 183,
            column: 17
          },
          end: {
            line: 185,
            column: 13
          }
        }],
        line: 180
      },
      "18": {
        loc: {
          start: {
            line: 190,
            column: 33
          },
          end: {
            line: 190,
            column: 90
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 190,
            column: 58
          },
          end: {
            line: 190,
            column: 63
          }
        }, {
          start: {
            line: 190,
            column: 66
          },
          end: {
            line: 190,
            column: 90
          }
        }],
        line: 190
      },
      "19": {
        loc: {
          start: {
            line: 204,
            column: 8
          },
          end: {
            line: 206,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 204,
            column: 8
          },
          end: {
            line: 206,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 204
      },
      "20": {
        loc: {
          start: {
            line: 213,
            column: 8
          },
          end: {
            line: 215,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 213,
            column: 8
          },
          end: {
            line: 215,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 213
      },
      "21": {
        loc: {
          start: {
            line: 236,
            column: 27
          },
          end: {
            line: 236,
            column: 84
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 236,
            column: 52
          },
          end: {
            line: 236,
            column: 57
          }
        }, {
          start: {
            line: 236,
            column: 60
          },
          end: {
            line: 236,
            column: 84
          }
        }],
        line: 236
      },
      "22": {
        loc: {
          start: {
            line: 251,
            column: 12
          },
          end: {
            line: 263,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 251,
            column: 12
          },
          end: {
            line: 263,
            column: 13
          }
        }, {
          start: {
            line: 261,
            column: 17
          },
          end: {
            line: 263,
            column: 13
          }
        }],
        line: 251
      },
      "23": {
        loc: {
          start: {
            line: 256,
            column: 20
          },
          end: {
            line: 258,
            column: 21
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 256,
            column: 20
          },
          end: {
            line: 258,
            column: 21
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 256
      },
      "24": {
        loc: {
          start: {
            line: 261,
            column: 17
          },
          end: {
            line: 263,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 261,
            column: 17
          },
          end: {
            line: 263,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 261
      },
      "25": {
        loc: {
          start: {
            line: 268,
            column: 23
          },
          end: {
            line: 268,
            column: 80
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 268,
            column: 48
          },
          end: {
            line: 268,
            column: 53
          }
        }, {
          start: {
            line: 268,
            column: 56
          },
          end: {
            line: 268,
            column: 80
          }
        }],
        line: 268
      },
      "26": {
        loc: {
          start: {
            line: 282,
            column: 33
          },
          end: {
            line: 282,
            column: 65
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 282,
            column: 33
          },
          end: {
            line: 282,
            column: 47
          }
        }, {
          start: {
            line: 282,
            column: 51
          },
          end: {
            line: 282,
            column: 65
          }
        }],
        line: 282
      },
      "27": {
        loc: {
          start: {
            line: 283,
            column: 12
          },
          end: {
            line: 296,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 283,
            column: 12
          },
          end: {
            line: 296,
            column: 13
          }
        }, {
          start: {
            line: 294,
            column: 17
          },
          end: {
            line: 296,
            column: 13
          }
        }],
        line: 283
      },
      "28": {
        loc: {
          start: {
            line: 283,
            column: 16
          },
          end: {
            line: 283,
            column: 66
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 283,
            column: 16
          },
          end: {
            line: 283,
            column: 28
          }
        }, {
          start: {
            line: 283,
            column: 32
          },
          end: {
            line: 283,
            column: 66
          }
        }],
        line: 283
      },
      "29": {
        loc: {
          start: {
            line: 285,
            column: 16
          },
          end: {
            line: 292,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 285,
            column: 16
          },
          end: {
            line: 292,
            column: 17
          }
        }, {
          start: {
            line: 290,
            column: 21
          },
          end: {
            line: 292,
            column: 17
          }
        }],
        line: 285
      },
      "30": {
        loc: {
          start: {
            line: 301,
            column: 23
          },
          end: {
            line: 301,
            column: 80
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 301,
            column: 48
          },
          end: {
            line: 301,
            column: 53
          }
        }, {
          start: {
            line: 301,
            column: 56
          },
          end: {
            line: 301,
            column: 80
          }
        }],
        line: 301
      },
      "31": {
        loc: {
          start: {
            line: 311,
            column: 8
          },
          end: {
            line: 313,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 311,
            column: 8
          },
          end: {
            line: 313,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 311
      },
      "32": {
        loc: {
          start: {
            line: 316,
            column: 12
          },
          end: {
            line: 318,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 316,
            column: 12
          },
          end: {
            line: 318,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 316
      },
      "33": {
        loc: {
          start: {
            line: 351,
            column: 8
          },
          end: {
            line: 353,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 351,
            column: 8
          },
          end: {
            line: 353,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 351
      },
      "34": {
        loc: {
          start: {
            line: 360,
            column: 12
          },
          end: {
            line: 362,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 360,
            column: 12
          },
          end: {
            line: 362,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 360
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0,
      "74": 0,
      "75": 0,
      "76": 0,
      "77": 0,
      "78": 0,
      "79": 0,
      "80": 0,
      "81": 0,
      "82": 0,
      "83": 0,
      "84": 0,
      "85": 0,
      "86": 0,
      "87": 0,
      "88": 0,
      "89": 0,
      "90": 0,
      "91": 0,
      "92": 0,
      "93": 0,
      "94": 0,
      "95": 0,
      "96": 0,
      "97": 0,
      "98": 0,
      "99": 0,
      "100": 0,
      "101": 0,
      "102": 0,
      "103": 0,
      "104": 0,
      "105": 0,
      "106": 0,
      "107": 0,
      "108": 0,
      "109": 0,
      "110": 0,
      "111": 0,
      "112": 0,
      "113": 0,
      "114": 0,
      "115": 0,
      "116": 0,
      "117": 0,
      "118": 0,
      "119": 0,
      "120": 0,
      "121": 0,
      "122": 0,
      "123": 0,
      "124": 0,
      "125": 0,
      "126": 0,
      "127": 0,
      "128": 0,
      "129": 0,
      "130": 0,
      "131": 0,
      "132": 0,
      "133": 0,
      "134": 0,
      "135": 0,
      "136": 0,
      "137": 0,
      "138": 0,
      "139": 0,
      "140": 0,
      "141": 0,
      "142": 0,
      "143": 0,
      "144": 0,
      "145": 0,
      "146": 0,
      "147": 0,
      "148": 0,
      "149": 0,
      "150": 0,
      "151": 0,
      "152": 0,
      "153": 0,
      "154": 0,
      "155": 0,
      "156": 0,
      "157": 0,
      "158": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0, 0],
      "10": [0, 0],
      "11": [0, 0],
      "12": [0, 0, 0],
      "13": [0, 0],
      "14": [0, 0],
      "15": [0, 0],
      "16": [0, 0],
      "17": [0, 0],
      "18": [0, 0],
      "19": [0, 0],
      "20": [0, 0],
      "21": [0, 0],
      "22": [0, 0],
      "23": [0, 0],
      "24": [0, 0],
      "25": [0, 0],
      "26": [0, 0],
      "27": [0, 0],
      "28": [0, 0],
      "29": [0, 0],
      "30": [0, 0],
      "31": [0, 0],
      "32": [0, 0],
      "33": [0, 0],
      "34": [0, 0]
    },
    inputSourceMap: {
      file: "/home/mhugo/code/claude-code-flow/src/cli/core/command-registry.ts",
      mappings: "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",
      names: [],
      sources: ["/home/mhugo/code/claude-code-flow/src/cli/core/command-registry.ts"],
      sourcesContent: ["/**\n * Command Registry\n * \n * Manages command registration, discovery, and execution.\n * Supports dynamic command loading and plugin architecture.\n */\n\nimport { EventEmitter } from 'events';\nimport { readdir, stat } from 'fs/promises';\nimport { join, extname } from 'path';\nimport type {\n  CommandConfig,\n  CommandContext,\n  CommandResult,\n  CommandRegistry as ICommandRegistry,\n  CommandMetadata,\n  AsyncResult\n} from '../types/index.js';\nimport { BaseCommand } from './base-command.js';\n\n/**\n * Command registration entry\n */\ninterface CommandEntry extends CommandMetadata {\n  command?: BaseCommand;\n  loadTime: number;\n  lastUsed?: number;\n  usageCount: number;\n}\n\n/**\n * Command loading statistics\n */\ninterface LoadingStats {\n  totalCommands: number;\n  loadedCommands: number;\n  failedCommands: number;\n  loadTime: number;\n  errors: Array<{ path: string; error: Error }>;\n}\n\n/**\n * Plugin interface for command extensions\n */\nexport interface CommandPlugin {\n  name: string;\n  version: string;\n  commands: CommandConfig[];\n  initialize?(): Promise<void> | void;\n  dispose?(): Promise<void> | void;\n}\n\n/**\n * Command registry implementation\n */\nexport class CommandRegistry extends EventEmitter implements ICommandRegistry {\n  private commands = new Map<string, CommandEntry>();\n  private aliases = new Map<string, string>();\n  private plugins = new Map<string, CommandPlugin>();\n  private loadingPaths: string[] = [];\n  private isInitialized = false;\n\n  /**\n   * Initialize the registry\n   */\n  async initialize(): Promise<void> {\n    if (this.isInitialized) {\n      return;\n    }\n\n    this.emit('initializing');\n    \n    try {\n      // Load plugins first\n      await this.loadPlugins();\n      \n      // Then load commands from configured paths\n      await this.loadCommands();\n      \n      this.isInitialized = true;\n      this.emit('initialized', {\n        commandCount: this.commands.size,\n        pluginCount: this.plugins.size\n      });\n    } catch (error) {\n      this.emit('initialization-error', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Register a command metadata\n   */\n  register(metadata: CommandMetadata): void {\n    if (this.commands.has(metadata.config.name)) {\n      throw new Error(`Command '${metadata.config.name}' is already registered`);\n    }\n\n    const entry: CommandEntry = {\n      ...metadata,\n      loadTime: Date.now(),\n      usageCount: 0\n    };\n\n    this.commands.set(metadata.config.name, entry);\n\n    // Register aliases\n    if (metadata.config.aliases) {\n      for (const alias of metadata.config.aliases) {\n        if (this.aliases.has(alias)) {\n          throw new Error(`Alias '${alias}' is already registered`);\n        }\n        this.aliases.set(alias, metadata.config.name);\n      }\n    }\n\n    this.emit('command-registered', { name: metadata.config.name, metadata });\n  }\n\n  /**\n   * Register a BaseCommand instance\n   */\n  registerCommand(command: BaseCommand): void {\n    this.register(command.metadata);\n    \n    // Store the command instance for execution\n    const entry = this.commands.get(command.metadata.config.name);\n    if (entry) {\n      entry.command = command;\n    }\n  }\n\n  /**\n   * Unregister a command\n   */\n  unregister(name: string): boolean {\n    const entry = this.commands.get(name);\n    if (!entry) {\n      return false;\n    }\n\n    // Remove aliases\n    if (entry.config.aliases) {\n      for (const alias of entry.config.aliases) {\n        this.aliases.delete(alias);\n      }\n    }\n\n    // Dispose of command resources if it's a BaseCommand\n    if (entry.command) {\n      entry.command.dispose();\n    }\n    \n    this.commands.delete(name);\n    this.emit('command-unregistered', { name });\n    \n    return true;\n  }\n\n  /**\n   * Get a command metadata by name or alias\n   */\n  get(name: string): CommandMetadata | undefined {\n    // Check direct name first\n    let entry = this.commands.get(name);\n    \n    // Check aliases if not found\n    if (!entry) {\n      const actualName = this.aliases.get(name);\n      if (actualName) {\n        entry = this.commands.get(actualName);\n      }\n    }\n\n    return entry;\n  }\n\n  /**\n   * Get a BaseCommand instance by name or alias\n   */\n  getCommand(name: string): BaseCommand | null {\n    const entry = this.get(name) as CommandEntry;\n    return entry?.command || null;\n  }\n\n  /**\n   * Check if a command exists\n   */\n  has(name: string): boolean {\n    return this.commands.has(name) || this.aliases.has(name);\n  }\n\n  /**\n   * Get all registered commands metadata\n   */\n  list(): CommandMetadata[] {\n    return Array.from(this.commands.values())\n      .sort((a, b) => a.config.name.localeCompare(b.config.name));\n  }\n\n  /**\n   * Get commands by category\n   */\n  findByCategory(category: string): CommandMetadata[] {\n    return this.list().filter(cmd => cmd.config.category === category);\n  }\n\n  /**\n   * Search commands by name, description, or category\n   */\n  search(query: string): CommandMetadata[] {\n    const lowerQuery = query.toLowerCase();\n    \n    return this.list().filter(cmd => {\n      return cmd.config.name.toLowerCase().includes(lowerQuery) ||\n             cmd.config.description.toLowerCase().includes(lowerQuery) ||\n             cmd.config.category?.toLowerCase().includes(lowerQuery);\n    });\n  }\n\n  /**\n   * Execute a command\n   */\n  async execute(name: string, context: CommandContext): Promise<CommandResult> {\n    const entry = this.get(name) as CommandEntry;\n    \n    if (!entry) {\n      return {\n        success: false,\n        error: `Command '${name}' not found`,\n        exitCode: 127,\n        executionTime: 0\n      };\n    }\n\n    // Update usage statistics\n    const actualName = this.aliases.get(name) || name;\n    const commandEntry = this.commands.get(actualName);\n    if (commandEntry) {\n      commandEntry.lastUsed = Date.now();\n      commandEntry.usageCount++;\n    }\n\n    this.emit('command-executing', { name, context });\n    \n    try {\n      let result: CommandResult;\n\n      // Execute using BaseCommand if available, otherwise use handler\n      if (entry.command) {\n        result = await entry.command.execute(context);\n      } else if (entry.handler) {\n        result = await entry.handler(context);\n      } else {\n        throw new Error(`No execution method available for command '${name}'`);\n      }\n\n      this.emit('command-executed', { name, result });\n      return result;\n    } catch (error) {\n      const commandError = error instanceof Error ? error : new Error(String(error));\n      this.emit('command-error', { name, error: commandError });\n      \n      return {\n        success: false,\n        error: commandError.message,\n        exitCode: 1,\n        executionTime: 0\n      };\n    }\n  }\n\n  /**\n   * Add command loading path\n   */\n  addLoadingPath(path: string): void {\n    if (!this.loadingPaths.includes(path)) {\n      this.loadingPaths.push(path);\n    }\n  }\n\n  /**\n   * Remove command loading path\n   */\n  removeLoadingPath(path: string): void {\n    const index = this.loadingPaths.indexOf(path);\n    if (index > -1) {\n      this.loadingPaths.splice(index, 1);\n    }\n  }\n\n  /**\n   * Load commands from configured paths\n   */\n  private async loadCommands(): Promise<LoadingStats> {\n    const startTime = Date.now();\n    const stats: LoadingStats = {\n      totalCommands: 0,\n      loadedCommands: 0,\n      failedCommands: 0,\n      loadTime: 0,\n      errors: []\n    };\n\n    for (const loadingPath of this.loadingPaths) {\n      try {\n        await this.loadCommandsFromPath(loadingPath, stats);\n      } catch (error) {\n        stats.errors.push({\n          path: loadingPath,\n          error: error instanceof Error ? error : new Error(String(error))\n        });\n        stats.failedCommands++;\n      }\n    }\n\n    stats.loadTime = Date.now() - startTime;\n    this.emit('commands-loaded', stats);\n    \n    return stats;\n  }\n\n  /**\n   * Load commands from a specific path\n   */\n  private async loadCommandsFromPath(path: string, stats: LoadingStats): Promise<void> {\n    try {\n      const pathStat = await stat(path);\n      \n      if (pathStat.isDirectory()) {\n        const files = await readdir(path);\n        \n        for (const file of files) {\n          const filePath = join(path, file);\n          const fileExt = extname(file);\n          \n          if (['.js', '.ts'].includes(fileExt)) {\n            await this.loadCommandFromFile(filePath, stats);\n          }\n        }\n      } else if (['.js', '.ts'].includes(extname(path))) {\n        await this.loadCommandFromFile(path, stats);\n      }\n    } catch (error) {\n      stats.errors.push({\n        path,\n        error: error instanceof Error ? error : new Error(String(error))\n      });\n      stats.failedCommands++;\n    }\n  }\n\n  /**\n   * Load a command from a file\n   */\n  private async loadCommandFromFile(filePath: string, stats: LoadingStats): Promise<void> {\n    try {\n      stats.totalCommands++;\n      \n      // Dynamic import with proper error handling\n      const module = await import(filePath);\n      \n      // Look for command exports\n      const commandClass = module.default || module.Command;\n      \n      if (commandClass && typeof commandClass === 'function') {\n        const command = new commandClass() as BaseCommand;\n        \n        if (command instanceof BaseCommand) {\n          this.registerCommand(command);\n          stats.loadedCommands++;\n          this.emit('command-loaded', { path: filePath, name: command.getConfig().name });\n        } else {\n          throw new Error('Exported class is not a BaseCommand instance');\n        }\n      } else {\n        throw new Error('No valid command export found');\n      }\n    } catch (error) {\n      stats.errors.push({\n        path: filePath,\n        error: error instanceof Error ? error : new Error(String(error))\n      });\n      stats.failedCommands++;\n      this.emit('command-load-error', { path: filePath, error });\n    }\n  }\n\n  /**\n   * Register a plugin\n   */\n  async registerPlugin(plugin: CommandPlugin): Promise<void> {\n    if (this.plugins.has(plugin.name)) {\n      throw new Error(`Plugin '${plugin.name}' is already registered`);\n    }\n\n    try {\n      // Initialize plugin if it has an initialize method\n      if (plugin.initialize) {\n        await plugin.initialize();\n      }\n\n      // Register plugin commands\n      for (const commandConfig of plugin.commands) {\n        // Create a dynamic command metadata from config\n        const metadata: CommandMetadata = {\n          config: commandConfig,\n          handler: async (context: CommandContext): Promise<CommandResult> => {\n            // This is a placeholder - real plugins would provide actual handlers\n            return {\n              success: true,\n              message: `Dynamic command '${commandConfig.name}' executed`,\n              exitCode: 0\n            };\n          },\n          registeredAt: new Date(),\n          available: true,\n          plugin: plugin.name\n        };\n        \n        this.register(metadata);\n      }\n\n      this.plugins.set(plugin.name, plugin);\n      this.emit('plugin-registered', { name: plugin.name, version: plugin.version });\n    } catch (error) {\n      this.emit('plugin-error', { name: plugin.name, error });\n      throw error;\n    }\n  }\n\n  /**\n   * Unregister a plugin\n   */\n  async unregisterPlugin(name: string): Promise<boolean> {\n    const plugin = this.plugins.get(name);\n    if (!plugin) {\n      return false;\n    }\n\n    try {\n      // Unregister plugin commands\n      for (const commandConfig of plugin.commands) {\n        this.unregister(commandConfig.name);\n      }\n\n      // Dispose plugin if it has a dispose method\n      if (plugin.dispose) {\n        await plugin.dispose();\n      }\n\n      this.plugins.delete(name);\n      this.emit('plugin-unregistered', { name });\n      \n      return true;\n    } catch (error) {\n      this.emit('plugin-error', { name, error });\n      throw error;\n    }\n  }\n\n  /**\n   * Load plugins from configuration\n   */\n  private async loadPlugins(): Promise<void> {\n    // This would load plugins from configuration files or plugin directories\n    // For now, this is a placeholder\n    this.emit('plugins-loaded', { count: 0 });\n  }\n\n  /**\n   * Get usage statistics\n   */\n  getUsageStats(): Array<{ name: string; usageCount: number; lastUsed?: number }> {\n    return Array.from(this.commands.entries()).map(([name, entry]) => ({\n      name,\n      usageCount: entry.usageCount,\n      lastUsed: entry.lastUsed\n    }));\n  }\n\n  /**\n   * Clear all commands and plugins\n   */\n  async clear(): Promise<void> {\n    // Unregister all plugins\n    for (const pluginName of this.plugins.keys()) {\n      await this.unregisterPlugin(pluginName);\n    }\n\n    // Unregister all commands\n    for (const commandName of this.commands.keys()) {\n      this.unregister(commandName);\n    }\n\n    this.aliases.clear();\n    this.isInitialized = false;\n    \n    this.emit('cleared');\n  }\n\n  /**\n   * Get registry status\n   */\n  getStatus(): {\n    initialized: boolean;\n    commandCount: number;\n    pluginCount: number;\n    aliasCount: number;\n    loadingPaths: string[];\n  } {\n    return {\n      initialized: this.isInitialized,\n      commandCount: this.commands.size,\n      pluginCount: this.plugins.size,\n      aliasCount: this.aliases.size,\n      loadingPaths: [...this.loadingPaths]\n    };\n  }\n\n  /**\n   * Dispose of registry resources\n   */\n  async dispose(): Promise<void> {\n    await this.clear();\n    this.removeAllListeners();\n    this.loadingPaths.length = 0;\n  }\n}"],
      version: 3
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "10d84832b4358e029b85fb44035efacb0722e9df"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_1lcyhizf9 = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_1lcyhizf9();
/**
 * Command Registry
 *
 * Manages command registration, discovery, and execution.
 * Supports dynamic command loading and plugin architecture.
 */
import { EventEmitter } from 'events';
import { readdir, stat } from 'fs/promises';
import { join, extname } from 'path';
import { BaseCommand } from './base-command.js';
/**
 * Command registry implementation
 */
export class CommandRegistry extends EventEmitter {
  commands =
  /* istanbul ignore next */
  (cov_1lcyhizf9().s[0]++, new Map());
  aliases =
  /* istanbul ignore next */
  (cov_1lcyhizf9().s[1]++, new Map());
  plugins =
  /* istanbul ignore next */
  (cov_1lcyhizf9().s[2]++, new Map());
  loadingPaths =
  /* istanbul ignore next */
  (cov_1lcyhizf9().s[3]++, []);
  isInitialized =
  /* istanbul ignore next */
  (cov_1lcyhizf9().s[4]++, false);
  /**
   * Initialize the registry
   */
  async initialize() {
    /* istanbul ignore next */
    cov_1lcyhizf9().f[0]++;
    cov_1lcyhizf9().s[5]++;
    if (this.isInitialized) {
      /* istanbul ignore next */
      cov_1lcyhizf9().b[0][0]++;
      cov_1lcyhizf9().s[6]++;
      return;
    } else
    /* istanbul ignore next */
    {
      cov_1lcyhizf9().b[0][1]++;
    }
    cov_1lcyhizf9().s[7]++;
    this.emit('initializing');
    /* istanbul ignore next */
    cov_1lcyhizf9().s[8]++;
    try {
      /* istanbul ignore next */
      cov_1lcyhizf9().s[9]++;
      // Load plugins first
      await this.loadPlugins();
      // Then load commands from configured paths
      /* istanbul ignore next */
      cov_1lcyhizf9().s[10]++;
      await this.loadCommands();
      /* istanbul ignore next */
      cov_1lcyhizf9().s[11]++;
      this.isInitialized = true;
      /* istanbul ignore next */
      cov_1lcyhizf9().s[12]++;
      this.emit('initialized', {
        commandCount: this.commands.size,
        pluginCount: this.plugins.size
      });
    } catch (error) {
      /* istanbul ignore next */
      cov_1lcyhizf9().s[13]++;
      this.emit('initialization-error', error);
      /* istanbul ignore next */
      cov_1lcyhizf9().s[14]++;
      throw error;
    }
  }
  /**
   * Register a command metadata
   */
  register(metadata) {
    /* istanbul ignore next */
    cov_1lcyhizf9().f[1]++;
    cov_1lcyhizf9().s[15]++;
    if (this.commands.has(metadata.config.name)) {
      /* istanbul ignore next */
      cov_1lcyhizf9().b[1][0]++;
      cov_1lcyhizf9().s[16]++;
      throw new Error(`Command '${metadata.config.name}' is already registered`);
    } else
    /* istanbul ignore next */
    {
      cov_1lcyhizf9().b[1][1]++;
    }
    const entry =
    /* istanbul ignore next */
    (cov_1lcyhizf9().s[17]++, {
      ...metadata,
      loadTime: Date.now(),
      usageCount: 0
    });
    /* istanbul ignore next */
    cov_1lcyhizf9().s[18]++;
    this.commands.set(metadata.config.name, entry);
    // Register aliases
    /* istanbul ignore next */
    cov_1lcyhizf9().s[19]++;
    if (metadata.config.aliases) {
      /* istanbul ignore next */
      cov_1lcyhizf9().b[2][0]++;
      cov_1lcyhizf9().s[20]++;
      for (const alias of metadata.config.aliases) {
        /* istanbul ignore next */
        cov_1lcyhizf9().s[21]++;
        if (this.aliases.has(alias)) {
          /* istanbul ignore next */
          cov_1lcyhizf9().b[3][0]++;
          cov_1lcyhizf9().s[22]++;
          throw new Error(`Alias '${alias}' is already registered`);
        } else
        /* istanbul ignore next */
        {
          cov_1lcyhizf9().b[3][1]++;
        }
        cov_1lcyhizf9().s[23]++;
        this.aliases.set(alias, metadata.config.name);
      }
    } else
    /* istanbul ignore next */
    {
      cov_1lcyhizf9().b[2][1]++;
    }
    cov_1lcyhizf9().s[24]++;
    this.emit('command-registered', {
      name: metadata.config.name,
      metadata
    });
  }
  /**
   * Register a BaseCommand instance
   */
  registerCommand(command) {
    /* istanbul ignore next */
    cov_1lcyhizf9().f[2]++;
    cov_1lcyhizf9().s[25]++;
    this.register(command.metadata);
    // Store the command instance for execution
    const entry =
    /* istanbul ignore next */
    (cov_1lcyhizf9().s[26]++, this.commands.get(command.metadata.config.name));
    /* istanbul ignore next */
    cov_1lcyhizf9().s[27]++;
    if (entry) {
      /* istanbul ignore next */
      cov_1lcyhizf9().b[4][0]++;
      cov_1lcyhizf9().s[28]++;
      entry.command = command;
    } else
    /* istanbul ignore next */
    {
      cov_1lcyhizf9().b[4][1]++;
    }
  }
  /**
   * Unregister a command
   */
  unregister(name) {
    /* istanbul ignore next */
    cov_1lcyhizf9().f[3]++;
    const entry =
    /* istanbul ignore next */
    (cov_1lcyhizf9().s[29]++, this.commands.get(name));
    /* istanbul ignore next */
    cov_1lcyhizf9().s[30]++;
    if (!entry) {
      /* istanbul ignore next */
      cov_1lcyhizf9().b[5][0]++;
      cov_1lcyhizf9().s[31]++;
      return false;
    } else
    /* istanbul ignore next */
    {
      cov_1lcyhizf9().b[5][1]++;
    }
    // Remove aliases
    cov_1lcyhizf9().s[32]++;
    if (entry.config.aliases) {
      /* istanbul ignore next */
      cov_1lcyhizf9().b[6][0]++;
      cov_1lcyhizf9().s[33]++;
      for (const alias of entry.config.aliases) {
        /* istanbul ignore next */
        cov_1lcyhizf9().s[34]++;
        this.aliases.delete(alias);
      }
    } else
    /* istanbul ignore next */
    {
      cov_1lcyhizf9().b[6][1]++;
    }
    // Dispose of command resources if it's a BaseCommand
    cov_1lcyhizf9().s[35]++;
    if (entry.command) {
      /* istanbul ignore next */
      cov_1lcyhizf9().b[7][0]++;
      cov_1lcyhizf9().s[36]++;
      entry.command.dispose();
    } else
    /* istanbul ignore next */
    {
      cov_1lcyhizf9().b[7][1]++;
    }
    cov_1lcyhizf9().s[37]++;
    this.commands.delete(name);
    /* istanbul ignore next */
    cov_1lcyhizf9().s[38]++;
    this.emit('command-unregistered', {
      name
    });
    /* istanbul ignore next */
    cov_1lcyhizf9().s[39]++;
    return true;
  }
  /**
   * Get a command metadata by name or alias
   */
  get(name) {
    /* istanbul ignore next */
    cov_1lcyhizf9().f[4]++;
    // Check direct name first
    let entry =
    /* istanbul ignore next */
    (cov_1lcyhizf9().s[40]++, this.commands.get(name));
    // Check aliases if not found
    /* istanbul ignore next */
    cov_1lcyhizf9().s[41]++;
    if (!entry) {
      /* istanbul ignore next */
      cov_1lcyhizf9().b[8][0]++;
      const actualName =
      /* istanbul ignore next */
      (cov_1lcyhizf9().s[42]++, this.aliases.get(name));
      /* istanbul ignore next */
      cov_1lcyhizf9().s[43]++;
      if (actualName) {
        /* istanbul ignore next */
        cov_1lcyhizf9().b[9][0]++;
        cov_1lcyhizf9().s[44]++;
        entry = this.commands.get(actualName);
      } else
      /* istanbul ignore next */
      {
        cov_1lcyhizf9().b[9][1]++;
      }
    } else
    /* istanbul ignore next */
    {
      cov_1lcyhizf9().b[8][1]++;
    }
    cov_1lcyhizf9().s[45]++;
    return entry;
  }
  /**
   * Get a BaseCommand instance by name or alias
   */
  getCommand(name) {
    /* istanbul ignore next */
    cov_1lcyhizf9().f[5]++;
    const entry =
    /* istanbul ignore next */
    (cov_1lcyhizf9().s[46]++, this.get(name));
    /* istanbul ignore next */
    cov_1lcyhizf9().s[47]++;
    return /* istanbul ignore next */(cov_1lcyhizf9().b[10][0]++, entry?.command) ||
    /* istanbul ignore next */
    (cov_1lcyhizf9().b[10][1]++, null);
  }
  /**
   * Check if a command exists
   */
  has(name) {
    /* istanbul ignore next */
    cov_1lcyhizf9().f[6]++;
    cov_1lcyhizf9().s[48]++;
    return /* istanbul ignore next */(cov_1lcyhizf9().b[11][0]++, this.commands.has(name)) ||
    /* istanbul ignore next */
    (cov_1lcyhizf9().b[11][1]++, this.aliases.has(name));
  }
  /**
   * Get all registered commands metadata
   */
  list() {
    /* istanbul ignore next */
    cov_1lcyhizf9().f[7]++;
    cov_1lcyhizf9().s[49]++;
    return Array.from(this.commands.values()).sort((a, b) => {
      /* istanbul ignore next */
      cov_1lcyhizf9().f[8]++;
      cov_1lcyhizf9().s[50]++;
      return a.config.name.localeCompare(b.config.name);
    });
  }
  /**
   * Get commands by category
   */
  findByCategory(category) {
    /* istanbul ignore next */
    cov_1lcyhizf9().f[9]++;
    cov_1lcyhizf9().s[51]++;
    return this.list().filter(cmd => {
      /* istanbul ignore next */
      cov_1lcyhizf9().f[10]++;
      cov_1lcyhizf9().s[52]++;
      return cmd.config.category === category;
    });
  }
  /**
   * Search commands by name, description, or category
   */
  search(query) {
    /* istanbul ignore next */
    cov_1lcyhizf9().f[11]++;
    const lowerQuery =
    /* istanbul ignore next */
    (cov_1lcyhizf9().s[53]++, query.toLowerCase());
    /* istanbul ignore next */
    cov_1lcyhizf9().s[54]++;
    return this.list().filter(cmd => {
      /* istanbul ignore next */
      cov_1lcyhizf9().f[12]++;
      cov_1lcyhizf9().s[55]++;
      return /* istanbul ignore next */(cov_1lcyhizf9().b[12][0]++, cmd.config.name.toLowerCase().includes(lowerQuery)) ||
      /* istanbul ignore next */
      (cov_1lcyhizf9().b[12][1]++, cmd.config.description.toLowerCase().includes(lowerQuery)) ||
      /* istanbul ignore next */
      (cov_1lcyhizf9().b[12][2]++, cmd.config.category?.toLowerCase().includes(lowerQuery));
    });
  }
  /**
   * Execute a command
   */
  async execute(name, context) {
    /* istanbul ignore next */
    cov_1lcyhizf9().f[13]++;
    const entry =
    /* istanbul ignore next */
    (cov_1lcyhizf9().s[56]++, this.get(name));
    /* istanbul ignore next */
    cov_1lcyhizf9().s[57]++;
    if (!entry) {
      /* istanbul ignore next */
      cov_1lcyhizf9().b[13][0]++;
      cov_1lcyhizf9().s[58]++;
      return {
        success: false,
        error: `Command '${name}' not found`,
        exitCode: 127,
        executionTime: 0
      };
    } else
    /* istanbul ignore next */
    {
      cov_1lcyhizf9().b[13][1]++;
    }
    // Update usage statistics
    const actualName =
    /* istanbul ignore next */
    (cov_1lcyhizf9().s[59]++,
    /* istanbul ignore next */
    (cov_1lcyhizf9().b[14][0]++, this.aliases.get(name)) ||
    /* istanbul ignore next */
    (cov_1lcyhizf9().b[14][1]++, name));
    const commandEntry =
    /* istanbul ignore next */
    (cov_1lcyhizf9().s[60]++, this.commands.get(actualName));
    /* istanbul ignore next */
    cov_1lcyhizf9().s[61]++;
    if (commandEntry) {
      /* istanbul ignore next */
      cov_1lcyhizf9().b[15][0]++;
      cov_1lcyhizf9().s[62]++;
      commandEntry.lastUsed = Date.now();
      /* istanbul ignore next */
      cov_1lcyhizf9().s[63]++;
      commandEntry.usageCount++;
    } else
    /* istanbul ignore next */
    {
      cov_1lcyhizf9().b[15][1]++;
    }
    cov_1lcyhizf9().s[64]++;
    this.emit('command-executing', {
      name,
      context
    });
    /* istanbul ignore next */
    cov_1lcyhizf9().s[65]++;
    try {
      let result;
      // Execute using BaseCommand if available, otherwise use handler
      /* istanbul ignore next */
      cov_1lcyhizf9().s[66]++;
      if (entry.command) {
        /* istanbul ignore next */
        cov_1lcyhizf9().b[16][0]++;
        cov_1lcyhizf9().s[67]++;
        result = await entry.command.execute(context);
      } else {
        /* istanbul ignore next */
        cov_1lcyhizf9().b[16][1]++;
        cov_1lcyhizf9().s[68]++;
        if (entry.handler) {
          /* istanbul ignore next */
          cov_1lcyhizf9().b[17][0]++;
          cov_1lcyhizf9().s[69]++;
          result = await entry.handler(context);
        } else {
          /* istanbul ignore next */
          cov_1lcyhizf9().b[17][1]++;
          cov_1lcyhizf9().s[70]++;
          throw new Error(`No execution method available for command '${name}'`);
        }
      }
      /* istanbul ignore next */
      cov_1lcyhizf9().s[71]++;
      this.emit('command-executed', {
        name,
        result
      });
      /* istanbul ignore next */
      cov_1lcyhizf9().s[72]++;
      return result;
    } catch (error) {
      const commandError =
      /* istanbul ignore next */
      (cov_1lcyhizf9().s[73]++, error instanceof Error ?
      /* istanbul ignore next */
      (cov_1lcyhizf9().b[18][0]++, error) :
      /* istanbul ignore next */
      (cov_1lcyhizf9().b[18][1]++, new Error(String(error))));
      /* istanbul ignore next */
      cov_1lcyhizf9().s[74]++;
      this.emit('command-error', {
        name,
        error: commandError
      });
      /* istanbul ignore next */
      cov_1lcyhizf9().s[75]++;
      return {
        success: false,
        error: commandError.message,
        exitCode: 1,
        executionTime: 0
      };
    }
  }
  /**
   * Add command loading path
   */
  addLoadingPath(path) {
    /* istanbul ignore next */
    cov_1lcyhizf9().f[14]++;
    cov_1lcyhizf9().s[76]++;
    if (!this.loadingPaths.includes(path)) {
      /* istanbul ignore next */
      cov_1lcyhizf9().b[19][0]++;
      cov_1lcyhizf9().s[77]++;
      this.loadingPaths.push(path);
    } else
    /* istanbul ignore next */
    {
      cov_1lcyhizf9().b[19][1]++;
    }
  }
  /**
   * Remove command loading path
   */
  removeLoadingPath(path) {
    /* istanbul ignore next */
    cov_1lcyhizf9().f[15]++;
    const index =
    /* istanbul ignore next */
    (cov_1lcyhizf9().s[78]++, this.loadingPaths.indexOf(path));
    /* istanbul ignore next */
    cov_1lcyhizf9().s[79]++;
    if (index > -1) {
      /* istanbul ignore next */
      cov_1lcyhizf9().b[20][0]++;
      cov_1lcyhizf9().s[80]++;
      this.loadingPaths.splice(index, 1);
    } else
    /* istanbul ignore next */
    {
      cov_1lcyhizf9().b[20][1]++;
    }
  }
  /**
   * Load commands from configured paths
   */
  async loadCommands() {
    /* istanbul ignore next */
    cov_1lcyhizf9().f[16]++;
    const startTime =
    /* istanbul ignore next */
    (cov_1lcyhizf9().s[81]++, Date.now());
    const stats =
    /* istanbul ignore next */
    (cov_1lcyhizf9().s[82]++, {
      totalCommands: 0,
      loadedCommands: 0,
      failedCommands: 0,
      loadTime: 0,
      errors: []
    });
    /* istanbul ignore next */
    cov_1lcyhizf9().s[83]++;
    for (const loadingPath of this.loadingPaths) {
      /* istanbul ignore next */
      cov_1lcyhizf9().s[84]++;
      try {
        /* istanbul ignore next */
        cov_1lcyhizf9().s[85]++;
        await this.loadCommandsFromPath(loadingPath, stats);
      } catch (error) {
        /* istanbul ignore next */
        cov_1lcyhizf9().s[86]++;
        stats.errors.push({
          path: loadingPath,
          error: error instanceof Error ?
          /* istanbul ignore next */
          (cov_1lcyhizf9().b[21][0]++, error) :
          /* istanbul ignore next */
          (cov_1lcyhizf9().b[21][1]++, new Error(String(error)))
        });
        /* istanbul ignore next */
        cov_1lcyhizf9().s[87]++;
        stats.failedCommands++;
      }
    }
    /* istanbul ignore next */
    cov_1lcyhizf9().s[88]++;
    stats.loadTime = Date.now() - startTime;
    /* istanbul ignore next */
    cov_1lcyhizf9().s[89]++;
    this.emit('commands-loaded', stats);
    /* istanbul ignore next */
    cov_1lcyhizf9().s[90]++;
    return stats;
  }
  /**
   * Load commands from a specific path
   */
  async loadCommandsFromPath(path, stats) {
    /* istanbul ignore next */
    cov_1lcyhizf9().f[17]++;
    cov_1lcyhizf9().s[91]++;
    try {
      const pathStat =
      /* istanbul ignore next */
      (cov_1lcyhizf9().s[92]++, await stat(path));
      /* istanbul ignore next */
      cov_1lcyhizf9().s[93]++;
      if (pathStat.isDirectory()) {
        /* istanbul ignore next */
        cov_1lcyhizf9().b[22][0]++;
        const files =
        /* istanbul ignore next */
        (cov_1lcyhizf9().s[94]++, await readdir(path));
        /* istanbul ignore next */
        cov_1lcyhizf9().s[95]++;
        for (const file of files) {
          const filePath =
          /* istanbul ignore next */
          (cov_1lcyhizf9().s[96]++, join(path, file));
          const fileExt =
          /* istanbul ignore next */
          (cov_1lcyhizf9().s[97]++, extname(file));
          /* istanbul ignore next */
          cov_1lcyhizf9().s[98]++;
          if (['.js', '.ts'].includes(fileExt)) {
            /* istanbul ignore next */
            cov_1lcyhizf9().b[23][0]++;
            cov_1lcyhizf9().s[99]++;
            await this.loadCommandFromFile(filePath, stats);
          } else
          /* istanbul ignore next */
          {
            cov_1lcyhizf9().b[23][1]++;
          }
        }
      } else {
        /* istanbul ignore next */
        cov_1lcyhizf9().b[22][1]++;
        cov_1lcyhizf9().s[100]++;
        if (['.js', '.ts'].includes(extname(path))) {
          /* istanbul ignore next */
          cov_1lcyhizf9().b[24][0]++;
          cov_1lcyhizf9().s[101]++;
          await this.loadCommandFromFile(path, stats);
        } else
        /* istanbul ignore next */
        {
          cov_1lcyhizf9().b[24][1]++;
        }
      }
    } catch (error) {
      /* istanbul ignore next */
      cov_1lcyhizf9().s[102]++;
      stats.errors.push({
        path,
        error: error instanceof Error ?
        /* istanbul ignore next */
        (cov_1lcyhizf9().b[25][0]++, error) :
        /* istanbul ignore next */
        (cov_1lcyhizf9().b[25][1]++, new Error(String(error)))
      });
      /* istanbul ignore next */
      cov_1lcyhizf9().s[103]++;
      stats.failedCommands++;
    }
  }
  /**
   * Load a command from a file
   */
  async loadCommandFromFile(filePath, stats) {
    /* istanbul ignore next */
    cov_1lcyhizf9().f[18]++;
    cov_1lcyhizf9().s[104]++;
    try {
      /* istanbul ignore next */
      cov_1lcyhizf9().s[105]++;
      stats.totalCommands++;
      // Dynamic import with proper error handling
      const module =
      /* istanbul ignore next */
      (cov_1lcyhizf9().s[106]++, await import(filePath));
      // Look for command exports
      const commandClass =
      /* istanbul ignore next */
      (cov_1lcyhizf9().s[107]++,
      /* istanbul ignore next */
      (cov_1lcyhizf9().b[26][0]++, module.default) ||
      /* istanbul ignore next */
      (cov_1lcyhizf9().b[26][1]++, module.Command));
      /* istanbul ignore next */
      cov_1lcyhizf9().s[108]++;
      if (
      /* istanbul ignore next */
      (cov_1lcyhizf9().b[28][0]++, commandClass) &&
      /* istanbul ignore next */
      (cov_1lcyhizf9().b[28][1]++, typeof commandClass === 'function')) {
        /* istanbul ignore next */
        cov_1lcyhizf9().b[27][0]++;
        const command =
        /* istanbul ignore next */
        (cov_1lcyhizf9().s[109]++, new commandClass());
        /* istanbul ignore next */
        cov_1lcyhizf9().s[110]++;
        if (command instanceof BaseCommand) {
          /* istanbul ignore next */
          cov_1lcyhizf9().b[29][0]++;
          cov_1lcyhizf9().s[111]++;
          this.registerCommand(command);
          /* istanbul ignore next */
          cov_1lcyhizf9().s[112]++;
          stats.loadedCommands++;
          /* istanbul ignore next */
          cov_1lcyhizf9().s[113]++;
          this.emit('command-loaded', {
            path: filePath,
            name: command.getConfig().name
          });
        } else {
          /* istanbul ignore next */
          cov_1lcyhizf9().b[29][1]++;
          cov_1lcyhizf9().s[114]++;
          throw new Error('Exported class is not a BaseCommand instance');
        }
      } else {
        /* istanbul ignore next */
        cov_1lcyhizf9().b[27][1]++;
        cov_1lcyhizf9().s[115]++;
        throw new Error('No valid command export found');
      }
    } catch (error) {
      /* istanbul ignore next */
      cov_1lcyhizf9().s[116]++;
      stats.errors.push({
        path: filePath,
        error: error instanceof Error ?
        /* istanbul ignore next */
        (cov_1lcyhizf9().b[30][0]++, error) :
        /* istanbul ignore next */
        (cov_1lcyhizf9().b[30][1]++, new Error(String(error)))
      });
      /* istanbul ignore next */
      cov_1lcyhizf9().s[117]++;
      stats.failedCommands++;
      /* istanbul ignore next */
      cov_1lcyhizf9().s[118]++;
      this.emit('command-load-error', {
        path: filePath,
        error
      });
    }
  }
  /**
   * Register a plugin
   */
  async registerPlugin(plugin) {
    /* istanbul ignore next */
    cov_1lcyhizf9().f[19]++;
    cov_1lcyhizf9().s[119]++;
    if (this.plugins.has(plugin.name)) {
      /* istanbul ignore next */
      cov_1lcyhizf9().b[31][0]++;
      cov_1lcyhizf9().s[120]++;
      throw new Error(`Plugin '${plugin.name}' is already registered`);
    } else
    /* istanbul ignore next */
    {
      cov_1lcyhizf9().b[31][1]++;
    }
    cov_1lcyhizf9().s[121]++;
    try {
      /* istanbul ignore next */
      cov_1lcyhizf9().s[122]++;
      // Initialize plugin if it has an initialize method
      if (plugin.initialize) {
        /* istanbul ignore next */
        cov_1lcyhizf9().b[32][0]++;
        cov_1lcyhizf9().s[123]++;
        await plugin.initialize();
      } else
      /* istanbul ignore next */
      {
        cov_1lcyhizf9().b[32][1]++;
      }
      // Register plugin commands
      cov_1lcyhizf9().s[124]++;
      for (const commandConfig of plugin.commands) {
        // Create a dynamic command metadata from config
        const metadata =
        /* istanbul ignore next */
        (cov_1lcyhizf9().s[125]++, {
          config: commandConfig,
          handler: async context => {
            /* istanbul ignore next */
            cov_1lcyhizf9().f[20]++;
            cov_1lcyhizf9().s[126]++;
            // This is a placeholder - real plugins would provide actual handlers
            return {
              success: true,
              message: `Dynamic command '${commandConfig.name}' executed`,
              exitCode: 0
            };
          },
          registeredAt: new Date(),
          available: true,
          plugin: plugin.name
        });
        /* istanbul ignore next */
        cov_1lcyhizf9().s[127]++;
        this.register(metadata);
      }
      /* istanbul ignore next */
      cov_1lcyhizf9().s[128]++;
      this.plugins.set(plugin.name, plugin);
      /* istanbul ignore next */
      cov_1lcyhizf9().s[129]++;
      this.emit('plugin-registered', {
        name: plugin.name,
        version: plugin.version
      });
    } catch (error) {
      /* istanbul ignore next */
      cov_1lcyhizf9().s[130]++;
      this.emit('plugin-error', {
        name: plugin.name,
        error
      });
      /* istanbul ignore next */
      cov_1lcyhizf9().s[131]++;
      throw error;
    }
  }
  /**
   * Unregister a plugin
   */
  async unregisterPlugin(name) {
    /* istanbul ignore next */
    cov_1lcyhizf9().f[21]++;
    const plugin =
    /* istanbul ignore next */
    (cov_1lcyhizf9().s[132]++, this.plugins.get(name));
    /* istanbul ignore next */
    cov_1lcyhizf9().s[133]++;
    if (!plugin) {
      /* istanbul ignore next */
      cov_1lcyhizf9().b[33][0]++;
      cov_1lcyhizf9().s[134]++;
      return false;
    } else
    /* istanbul ignore next */
    {
      cov_1lcyhizf9().b[33][1]++;
    }
    cov_1lcyhizf9().s[135]++;
    try {
      /* istanbul ignore next */
      cov_1lcyhizf9().s[136]++;
      // Unregister plugin commands
      for (const commandConfig of plugin.commands) {
        /* istanbul ignore next */
        cov_1lcyhizf9().s[137]++;
        this.unregister(commandConfig.name);
      }
      // Dispose plugin if it has a dispose method
      /* istanbul ignore next */
      cov_1lcyhizf9().s[138]++;
      if (plugin.dispose) {
        /* istanbul ignore next */
        cov_1lcyhizf9().b[34][0]++;
        cov_1lcyhizf9().s[139]++;
        await plugin.dispose();
      } else
      /* istanbul ignore next */
      {
        cov_1lcyhizf9().b[34][1]++;
      }
      cov_1lcyhizf9().s[140]++;
      this.plugins.delete(name);
      /* istanbul ignore next */
      cov_1lcyhizf9().s[141]++;
      this.emit('plugin-unregistered', {
        name
      });
      /* istanbul ignore next */
      cov_1lcyhizf9().s[142]++;
      return true;
    } catch (error) {
      /* istanbul ignore next */
      cov_1lcyhizf9().s[143]++;
      this.emit('plugin-error', {
        name,
        error
      });
      /* istanbul ignore next */
      cov_1lcyhizf9().s[144]++;
      throw error;
    }
  }
  /**
   * Load plugins from configuration
   */
  async loadPlugins() {
    /* istanbul ignore next */
    cov_1lcyhizf9().f[22]++;
    cov_1lcyhizf9().s[145]++;
    // This would load plugins from configuration files or plugin directories
    // For now, this is a placeholder
    this.emit('plugins-loaded', {
      count: 0
    });
  }
  /**
   * Get usage statistics
   */
  getUsageStats() {
    /* istanbul ignore next */
    cov_1lcyhizf9().f[23]++;
    cov_1lcyhizf9().s[146]++;
    return Array.from(this.commands.entries()).map(([name, entry]) => {
      /* istanbul ignore next */
      cov_1lcyhizf9().f[24]++;
      cov_1lcyhizf9().s[147]++;
      return {
        name,
        usageCount: entry.usageCount,
        lastUsed: entry.lastUsed
      };
    });
  }
  /**
   * Clear all commands and plugins
   */
  async clear() {
    /* istanbul ignore next */
    cov_1lcyhizf9().f[25]++;
    cov_1lcyhizf9().s[148]++;
    // Unregister all plugins
    for (const pluginName of this.plugins.keys()) {
      /* istanbul ignore next */
      cov_1lcyhizf9().s[149]++;
      await this.unregisterPlugin(pluginName);
    }
    // Unregister all commands
    /* istanbul ignore next */
    cov_1lcyhizf9().s[150]++;
    for (const commandName of this.commands.keys()) {
      /* istanbul ignore next */
      cov_1lcyhizf9().s[151]++;
      this.unregister(commandName);
    }
    /* istanbul ignore next */
    cov_1lcyhizf9().s[152]++;
    this.aliases.clear();
    /* istanbul ignore next */
    cov_1lcyhizf9().s[153]++;
    this.isInitialized = false;
    /* istanbul ignore next */
    cov_1lcyhizf9().s[154]++;
    this.emit('cleared');
  }
  /**
   * Get registry status
   */
  getStatus() {
    /* istanbul ignore next */
    cov_1lcyhizf9().f[26]++;
    cov_1lcyhizf9().s[155]++;
    return {
      initialized: this.isInitialized,
      commandCount: this.commands.size,
      pluginCount: this.plugins.size,
      aliasCount: this.aliases.size,
      loadingPaths: [...this.loadingPaths]
    };
  }
  /**
   * Dispose of registry resources
   */
  async dispose() {
    /* istanbul ignore next */
    cov_1lcyhizf9().f[27]++;
    cov_1lcyhizf9().s[156]++;
    await this.clear();
    /* istanbul ignore next */
    cov_1lcyhizf9().s[157]++;
    this.removeAllListeners();
    /* istanbul ignore next */
    cov_1lcyhizf9().s[158]++;
    this.loadingPaths.length = 0;
  }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,