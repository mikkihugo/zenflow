{"file":"/home/mhugo/code/claude-code-flow/src/__tests__/integration/maestro/steering-workflow.test.ts","mappings":"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","names":[],"sources":["/home/mhugo/code/claude-code-flow/src/__tests__/integration/maestro/steering-workflow.test.ts"],"sourcesContent":["/**\n * Integration Tests for Maestro Steering Document Workflow\n * Tests the complete steering document workflow with real file system operations\n */\n\nimport { MaestroOrchestrator } from '../../../maestro/maestro-orchestrator.js';\nimport { readFile, writeFile, mkdir, access, unlink, rmdir } from 'fs/promises';\nimport { join } from 'path';\nimport { existsSync } from 'fs';\nimport { tmpdir } from 'os';\n\ndescribe('Maestro Steering Workflow Integration', () => {\n  let maestroOrchestrator: MaestroOrchestrator;\n  let testDirectory: string;\n  let mockConfig: any;\n  let mockEventBus: any;\n  let mockLogger: any;\n  let mockMemoryManager: any;\n  let mockAgentManager: any;\n  let mockMainOrchestrator: any;\n\n  beforeAll(async () => {\n    // Create temporary test directory\n    testDirectory = join(tmpdir(), `maestro-steering-test-${Date.now()}`);\n    await mkdir(testDirectory, { recursive: true });\n  });\n\n  afterAll(async () => {\n    // Cleanup test directory\n    try {\n      if (existsSync(testDirectory)) {\n        await rmdir(testDirectory, { recursive: true });\n      }\n    } catch (error) {\n      console.warn(`Warning: Failed to cleanup test directory: ${error}`);\n    }\n  });\n\n  beforeEach(async () => {\n    // Setup mocks\n    mockConfig = { environment: 'test' };\n    mockEventBus = {\n      emit: jest.fn(),\n      on: jest.fn()\n    };\n    mockLogger = {\n      info: jest.fn(),\n      warn: jest.fn(),\n      error: jest.fn(),\n      debug: jest.fn()\n    };\n    mockMemoryManager = {\n      get: jest.fn(),\n      set: jest.fn(),\n      delete: jest.fn()\n    };\n    mockAgentManager = {\n      createAgent: jest.fn().mockResolvedValue('agent-123'),\n      startAgent: jest.fn(),\n      stopAgent: jest.fn()\n    };\n    mockMainOrchestrator = {\n      assignTask: jest.fn().mockResolvedValue({ success: true })\n    };\n\n    // Create orchestrator instance with test directory\n    maestroOrchestrator = new MaestroOrchestrator(\n      mockConfig,\n      mockEventBus,\n      mockLogger,\n      mockMemoryManager,\n      mockAgentManager,\n      mockMainOrchestrator,\n      {\n        enableHiveMind: false,\n        steeringDirectory: join(testDirectory, 'steering')\n      }\n    );\n  });\n\n  describe('complete steering document workflow', () => {\n    it('should create multiple steering documents for complete project setup', async () => {\n      const domains = ['product', 'tech', 'structure', 'security'];\n      const contents = [\n        'Product vision and user experience guidelines',\n        'Technology standards and development practices',\n        'Project organization and file structure',\n        'Security guidelines and best practices'\n      ];\n\n      // Create all steering documents\n      for (let i = 0; i < domains.length; i++) {\n        await maestroOrchestrator.createSteeringDocument(domains[i], contents[i]);\n      }\n\n      // Verify all files were created\n      for (const domain of domains) {\n        const filePath = join(testDirectory, 'steering', `${domain}.md`);\n        expect(existsSync(filePath)).toBe(true);\n        \n        const content = await readFile(filePath, 'utf8');\n        expect(content).toContain(`# ${domain.charAt(0).toUpperCase() + domain.slice(1)} Steering Document`);\n        expect(content).toContain('## Guidelines');\n      }\n    });\n\n    it('should integrate steering context with spec creation', async () => {\n      // First create steering documents\n      await maestroOrchestrator.createSteeringDocument('product', 'User-centered design principles');\n      await maestroOrchestrator.createSteeringDocument('tech', 'Clean architecture standards');\n\n      // Then create a spec (simulated)\n      const featureName = 'user-authentication';\n      const specDirectory = join(testDirectory, 'specs', featureName);\n      await mkdir(specDirectory, { recursive: true });\n\n      // Get steering context\n      const steeringContext = await maestroOrchestrator.getSteeringContext('developer');\n\n      // Create requirements with steering context\n      const requirementsContent = `# Requirements for ${featureName}\n\n## High-Level Request\nImplement secure user authentication system\n\n## Steering Context Applied\n${steeringContext}\n\n## User Stories\n- As a user, I want secure authentication, so that my data is protected\n\n## Acceptance Criteria\n- [ ] Follows product steering guidelines\n- [ ] Meets technical architecture standards\n- [ ] Implements security best practices\n\n*Generated with Steering Document Context*\n`;\n\n      await writeFile(join(specDirectory, 'requirements.md'), requirementsContent, 'utf8');\n\n      // Verify steering context integration\n      const generatedContent = await readFile(join(specDirectory, 'requirements.md'), 'utf8');\n      expect(generatedContent).toContain('Steering Context Applied');\n    });\n\n    it('should handle steering document updates and versioning', async () => {\n      const domain = 'versioning-test';\n      const originalContent = 'Original guidelines v1';\n      const updatedContent = 'Updated guidelines v2 with new standards';\n\n      // Create initial steering document\n      await maestroOrchestrator.createSteeringDocument(domain, originalContent);\n\n      const filePath = join(testDirectory, 'steering', `${domain}.md`);\n      const initialContent = await readFile(filePath, 'utf8');\n      expect(initialContent).toContain(originalContent);\n\n      // Update steering document\n      await maestroOrchestrator.createSteeringDocument(domain, updatedContent);\n\n      const updatedFileContent = await readFile(filePath, 'utf8');\n      expect(updatedFileContent).toContain(updatedContent);\n      expect(updatedFileContent).not.toContain(originalContent);\n    });\n  });\n\n  describe('steering document validation and quality', () => {\n    it('should create steering documents with consistent structure', async () => {\n      const testDomains = [\n        { domain: 'consistency-product', content: 'Product consistency guidelines' },\n        { domain: 'consistency-tech', content: 'Technical consistency guidelines' },\n        { domain: 'consistency-custom', content: 'Custom domain consistency guidelines' }\n      ];\n\n      for (const testCase of testDomains) {\n        await maestroOrchestrator.createSteeringDocument(testCase.domain, testCase.content);\n\n        const filePath = join(testDirectory, 'steering', `${testCase.domain}.md`);\n        const content = await readFile(filePath, 'utf8');\n\n        // Validate consistent structure\n        expect(content).toMatch(/^# .+ Steering Document$/m);\n        expect(content).toContain('## Guidelines');\n        expect(content).toContain(testCase.content);\n        expect(content.length).toBeGreaterThan(200); // Minimum content length\n      }\n    });\n\n    it('should create domain-specific content for different steering types', async () => {\n      const domainSpecificTests = [\n        {\n          domain: 'api-design',\n          content: 'RESTful API design standards',\n          expectedKeywords: ['API', 'REST', 'endpoint']\n        },\n        {\n          domain: 'testing',\n          content: 'Comprehensive testing strategies',\n          expectedKeywords: ['test', 'coverage', 'automation']\n        },\n        {\n          domain: 'deployment',\n          content: 'CI/CD and deployment practices',\n          expectedKeywords: ['deployment', 'CI/CD', 'pipeline']\n        }\n      ];\n\n      for (const test of domainSpecificTests) {\n        await maestroOrchestrator.createSteeringDocument(test.domain, test.content);\n\n        const filePath = join(testDirectory, 'steering', `${test.domain}.md`);\n        const content = await readFile(filePath, 'utf8');\n\n        // Verify domain-specific content\n        expect(content).toContain(test.content);\n        \n        // Check for domain-specific keywords in generated content\n        const contentLower = content.toLowerCase();\n        const domainKeywordsFound = test.expectedKeywords.some(keyword => \n          contentLower.includes(keyword.toLowerCase())\n        );\n        expect(domainKeywordsFound).toBe(true);\n      }\n    });\n\n    it('should maintain proper markdown formatting', async () => {\n      await maestroOrchestrator.createSteeringDocument('markdown-test', 'Testing markdown formatting');\n\n      const filePath = join(testDirectory, 'steering', 'markdown-test.md');\n      const content = await readFile(filePath, 'utf8');\n\n      // Validate markdown structure\n      expect(content).toMatch(/^# .+$/m); // Has H1 header\n      expect(content).toMatch(/^## .+$/m); // Has H2 headers\n      expect(content).toContain('\\n\\n'); // Proper paragraph spacing\n      expect(content).not.toMatch(/<[^>]+>/); // No HTML tags\n    });\n  });\n\n  describe('error handling and edge cases', () => {\n    it('should handle invalid domain names gracefully', async () => {\n      const invalidDomains = ['', '   ', 'domain/with/slashes', 'domain with spaces'];\n\n      for (const invalidDomain of invalidDomains) {\n        // These should either be sanitized or throw appropriate errors\n        try {\n          await maestroOrchestrator.createSteeringDocument(invalidDomain, 'test content');\n          \n          // If it doesn't throw, verify the file was created with sanitized name\n          const sanitizedDomain = invalidDomain.replace(/[^a-zA-Z0-9-_]/g, '-').replace(/^-+|-+$/g, '');\n          if (sanitizedDomain) {\n            const filePath = join(testDirectory, 'steering', `${sanitizedDomain}.md`);\n            const exists = existsSync(filePath);\n            // This behavior would depend on implementation - either file exists or error was thrown\n          }\n        } catch (error) {\n          // Error handling is acceptable for invalid domains\n          expect(error).toBeDefined();\n        }\n      }\n    });\n\n    it('should handle concurrent steering document creation', async () => {\n      const concurrentDomains = Array.from({ length: 5 }, (_, i) => `concurrent-${i}`);\n      \n      // Create all documents concurrently\n      const promises = concurrentDomains.map(domain => \n        maestroOrchestrator.createSteeringDocument(domain, `Content for ${domain}`)\n      );\n\n      await Promise.all(promises);\n\n      // Verify all documents were created successfully\n      for (const domain of concurrentDomains) {\n        const filePath = join(testDirectory, 'steering', `${domain}.md`);\n        expect(existsSync(filePath)).toBe(true);\n        \n        const content = await readFile(filePath, 'utf8');\n        expect(content).toContain(`Content for ${domain}`);\n      }\n    });\n\n    it('should handle large steering document content', async () => {\n      const largeContent = 'Large content section. '.repeat(1000); // ~20KB content\n      \n      await maestroOrchestrator.createSteeringDocument('large-content', largeContent);\n\n      const filePath = join(testDirectory, 'steering', 'large-content.md');\n      const content = await readFile(filePath, 'utf8');\n      \n      expect(content).toContain(largeContent);\n      expect(content.length).toBeGreaterThan(20000);\n    });\n  });\n\n  describe('performance and scalability', () => {\n    it('should create steering documents efficiently', async () => {\n      const startTime = Date.now();\n      \n      // Create 10 steering documents\n      const domains = Array.from({ length: 10 }, (_, i) => `perf-test-${i}`);\n      for (const domain of domains) {\n        await maestroOrchestrator.createSteeringDocument(domain, `Performance test content for ${domain}`);\n      }\n      \n      const endTime = Date.now();\n      const duration = endTime - startTime;\n      \n      // Should complete within reasonable time (adjust threshold as needed)\n      expect(duration).toBeLessThan(5000); // 5 seconds for 10 documents\n      \n      // Verify all documents were created\n      for (const domain of domains) {\n        const filePath = join(testDirectory, 'steering', `${domain}.md`);\n        expect(existsSync(filePath)).toBe(true);\n      }\n    });\n\n    it('should maintain consistent performance with repeated operations', async () => {\n      const domain = 'repeated-operations';\n      const iterations = 5;\n      const durations: number[] = [];\n\n      for (let i = 0; i < iterations; i++) {\n        const startTime = Date.now();\n        await maestroOrchestrator.createSteeringDocument(`${domain}-${i}`, `Iteration ${i} content`);\n        const endTime = Date.now();\n        durations.push(endTime - startTime);\n      }\n\n      // Check performance consistency (no significant degradation)\n      const averageDuration = durations.reduce((a, b) => a + b, 0) / durations.length;\n      const maxDuration = Math.max(...durations);\n      \n      // Max duration shouldn't be more than 3x average (adjust as needed)\n      expect(maxDuration).toBeLessThan(averageDuration * 3);\n    });\n  });\n\n  describe('agent integration workflow', () => {\n    it('should track agent usage across steering document operations', async () => {\n      const initialStats = maestroOrchestrator.getAgentPoolStats();\n      \n      // Create multiple steering documents\n      await maestroOrchestrator.createSteeringDocument('agent-test-1', 'Content 1');\n      await maestroOrchestrator.createSteeringDocument('agent-test-2', 'Content 2');\n      \n      const finalStats = maestroOrchestrator.getAgentPoolStats();\n      \n      // Verify agent pool statistics are being tracked\n      expect(finalStats).toBeDefined();\n      expect(typeof finalStats.totalAgents).toBe('number');\n      expect(typeof finalStats.capabilitiesCovered).toBe('number');\n    });\n\n    it('should integrate with event system for workflow tracking', async () => {\n      await maestroOrchestrator.createSteeringDocument('event-test', 'Event tracking content');\n\n      // Verify event bus interactions (current implementation may not emit events)\n      // This test documents expected behavior\n      expect(mockEventBus.on).toHaveBeenCalled(); // Should have event listeners\n    });\n  });\n});"],"version":3}