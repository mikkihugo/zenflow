{"version":3,"names":["cov_13qbvwq1qw","actualCoverage","EventEmitter","meow","chalk","ora","CommandRegistry","ConfigLoader","ErrorHandler","CliApp","options","registry","configLoader","errorHandler","config","s","isInitialized","stats","spinner","constructor","f","setupErrorHandlers","colors","helpOnEmpty","getInstance","debug","verbose","startTime","Date","now","commandsExecuted","errorsHandled","pluginsLoaded","uptime","setupEventHandlers","initialize","b","emit","loadConfiguration","commandPaths","path","addLoadingPath","loadPlugins","error","run","argv","cli","parseArguments","flags","version","console","log","input","help","length","showHelp","commandName","commandArgs","red","context","args","pkg","name","description","cwd","process","env","defaults","result","executeCommand","success","message","exitCode","handle","Error","String","globalFlags","type","shortFlag","noColors","json","importMeta","import","meta","autoHelp","autoVersion","updateConfig","ui","theme","undefined","execute","commandError","executionTime","command","getCommand","getHelp","examples","getExamples","forEach","example","showAvailableCommands","showGeneralHelp","bold","commands","list","categories","Map","category","has","set","get","push","categoryCommands","yellow","sort","a","localeCompare","deprecated","green","padEnd","start","load","configFiles","files","envPrefix","createDefault","succeed","fail","pluginPaths","on","data","gray","setupGlobalHandlers","registerCommand","registerPlugin","plugin","getStats","getConfig","getRegistry","getErrorHandler","isReady","shutdown","dispose","removeAllListeners","create","runApp","app","shutdownError"],"sources":["/home/mhugo/code/claude-code-flow/src/cli/core/app.ts"],"sourcesContent":["/**\n * CLI Application\n * \n * Main CLI application class that orchestrates the entire command-line interface.\n * Handles initialization, command parsing, plugin management, and global coordination.\n */\n\nimport { EventEmitter } from 'events';\nimport meow from 'meow';\nimport chalk from 'chalk';\nimport ora from 'ora';\nimport type {\n  CliConfig,\n  CommandContext,\n  CommandResult,\n  CommandMetadata,\n  AsyncResult\n} from '../types/index.js';\nimport { CommandRegistry, type CommandPlugin } from './command-registry.js';\nimport { ConfigLoader } from './config-loader.js';\nimport { ErrorHandler } from './error-handler.js';\nimport { BaseCommand } from './base-command.js';\n\n/**\n * CLI application options\n */\nexport interface CliAppOptions {\n  /** Application name */\n  name: string;\n  \n  /** Application version */\n  version: string;\n  \n  /** Application description */\n  description: string;\n  \n  /** Configuration loading options */\n  config?: {\n    files?: string[];\n    envPrefix?: string;\n    createDefault?: boolean;\n  };\n  \n  /** Command loading paths */\n  commandPaths?: string[];\n  \n  /** Plugin loading paths */\n  pluginPaths?: string[];\n  \n  /** Global flags */\n  flags?: Record<string, any>;\n  \n  /** Whether to setup global error handlers */\n  setupErrorHandlers?: boolean;\n  \n  /** Whether to enable color output */\n  colors?: boolean;\n  \n  /** Whether to show help on no command */\n  helpOnEmpty?: boolean;\n}\n\n/**\n * CLI application statistics\n */\ninterface AppStats {\n  startTime: number;\n  commandsExecuted: number;\n  errorsHandled: number;\n  pluginsLoaded: number;\n  uptime: number;\n}\n\n/**\n * Main CLI application class\n */\nexport class CliApp extends EventEmitter {\n  private readonly options: CliAppOptions;\n  private readonly registry: CommandRegistry;\n  private readonly configLoader: ConfigLoader;\n  private readonly errorHandler: ErrorHandler;\n  private config: CliConfig | null = null;\n  private isInitialized = false;\n  private stats: AppStats;\n  private spinner = ora();\n\n  constructor(options: CliAppOptions) {\n    super();\n    \n    this.options = {\n      setupErrorHandlers: true,\n      colors: true,\n      helpOnEmpty: true,\n      ...options\n    };\n    \n    this.registry = new CommandRegistry();\n    this.configLoader = new ConfigLoader();\n    this.errorHandler = ErrorHandler.getInstance({\n      colors: this.options.colors,\n      debug: false, // Will be updated from config\n      verbose: false // Will be updated from config\n    });\n    \n    this.stats = {\n      startTime: Date.now(),\n      commandsExecuted: 0,\n      errorsHandled: 0,\n      pluginsLoaded: 0,\n      uptime: 0\n    };\n    \n    this.setupEventHandlers();\n  }\n\n  /**\n   * Initialize the CLI application\n   */\n  async initialize(): Promise<void> {\n    if (this.isInitialized) {\n      return;\n    }\n\n    this.emit('initializing');\n    \n    try {\n      // Load configuration\n      await this.loadConfiguration();\n      \n      // Setup error handlers\n      if (this.options.setupErrorHandlers) {\n        this.setupErrorHandlers();\n      }\n      \n      // Initialize command registry\n      if (this.options.commandPaths) {\n        for (const path of this.options.commandPaths) {\n          this.registry.addLoadingPath(path);\n        }\n      }\n      \n      await this.registry.initialize();\n      \n      // Load plugins\n      await this.loadPlugins();\n      \n      this.isInitialized = true;\n      this.emit('initialized');\n      \n    } catch (error) {\n      this.emit('initialization-error', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Run the CLI application\n   */\n  async run(argv?: string[]): Promise<number> {\n    try {\n      // Initialize if not already done\n      if (!this.isInitialized) {\n        await this.initialize();\n      }\n      \n      // Parse command line arguments\n      const cli = this.parseArguments(argv);\n      \n      // Handle version flag\n      if (cli.flags.version) {\n        console.log(this.options.version);\n        return 0;\n      }\n      \n      // Ensure cli.input exists\n      const input = cli.input || [];\n      \n      // Handle help flag or no command\n      if (cli.flags.help || (input.length === 0 && this.options.helpOnEmpty)) {\n        this.showHelp(input[0]);\n        return 0;\n      }\n      \n      // Extract command and arguments\n      const [commandName, ...commandArgs] = input;\n      \n      if (!commandName) {\n        if (this.options.helpOnEmpty) {\n          this.showHelp();\n          return 0;\n        } else {\n          console.error(chalk.red('No command specified'));\n          return 1;\n        }\n      }\n      \n      // Create command context\n      const context: CommandContext = {\n        args: commandArgs,\n        flags: cli.flags,\n        input: input,\n        pkg: {\n          name: this.options.name,\n          version: this.options.version,\n          description: this.options.description\n        },\n        cwd: process.cwd(),\n        env: process.env,\n        debug: cli.flags.debug || this.config?.defaults.debug || false,\n        verbose: cli.flags.verbose || this.config?.defaults.verbose || false,\n        config: this.config as Record<string, unknown>\n      };\n      \n      // Execute command\n      const result = await this.executeCommand(commandName, context);\n      \n      // Handle result\n      if (result.success) {\n        if (result.message) {\n          console.log(result.message);\n        }\n        return result.exitCode || 0;\n      } else {\n        if (result.error) {\n          await this.errorHandler.handle(new Error(result.error), context);\n        }\n        return result.exitCode || 1;\n      }\n      \n    } catch (error) {\n      await this.errorHandler.handle(\n        error instanceof Error ? error : new Error(String(error))\n      );\n      return 1;\n    }\n  }\n\n  /**\n   * Parse command line arguments\n   */\n  private parseArguments(argv?: string[]) {\n    const globalFlags = {\n      help: {\n        type: 'boolean',\n        shortFlag: 'h',\n        description: 'Show help'\n      },\n      version: {\n        type: 'boolean',\n        shortFlag: 'v',\n        description: 'Show version'\n      },\n      debug: {\n        type: 'boolean',\n        shortFlag: 'd',\n        description: 'Enable debug mode'\n      },\n      verbose: {\n        type: 'boolean',\n        description: 'Enable verbose output'\n      },\n      config: {\n        type: 'string',\n        shortFlag: 'c',\n        description: 'Configuration file path'\n      },\n      noColors: {\n        type: 'boolean',\n        description: 'Disable color output'\n      },\n      json: {\n        type: 'boolean',\n        description: 'Output in JSON format'\n      },\n      ...this.options.flags\n    };\n\n    return meow({\n      description: this.options.description,\n      flags: globalFlags,\n      argv,\n      importMeta: import.meta,\n      autoHelp: false,  // We'll handle help ourselves\n      autoVersion: false  // We'll handle version ourselves\n    });\n  }\n\n  /**\n   * Execute a command\n   */\n  private async executeCommand(name: string, context: CommandContext): Promise<CommandResult> {\n    this.emit('command-start', { name, context });\n    \n    try {\n      // Update error handler config from flags\n      this.errorHandler.updateConfig({\n        debug: context.debug,\n        verbose: context.verbose,\n        colors: !context.flags.noColors && (this.config?.ui?.theme !== undefined)\n      });\n      \n      const result = await this.registry.execute(name, context);\n      \n      this.stats.commandsExecuted++;\n      this.emit('command-complete', { name, result });\n      \n      return result;\n    } catch (error) {\n      this.stats.errorsHandled++;\n      const commandError = error instanceof Error ? error : new Error(String(error));\n      \n      this.emit('command-error', { name, error: commandError });\n      \n      return {\n        success: false,\n        error: commandError.message,\n        exitCode: 1,\n        executionTime: 0\n      };\n    }\n  }\n\n  /**\n   * Show help information\n   */\n  private showHelp(commandName?: string): void {\n    if (commandName) {\n      // Show help for specific command\n      const command = this.registry.getCommand(commandName);\n      if (command) {\n        console.log(command.getHelp());\n        \n        const examples = command.getExamples();\n        if (examples.length > 0) {\n          console.log('\\\\nExamples:');\n          examples.forEach(example => {\n            console.log(`  ${example}`);\n          });\n        }\n      } else {\n        console.error(chalk.red(`Command '${commandName}' not found`));\n        this.showAvailableCommands();\n      }\n    } else {\n      // Show general help\n      this.showGeneralHelp();\n    }\n  }\n\n  /**\n   * Show general help\n   */\n  private showGeneralHelp(): void {\n    console.log(chalk.bold(this.options.name), `v${this.options.version}`);\n    console.log(this.options.description);\n    console.log();\n    console.log(chalk.bold('Usage:'));\n    console.log(`  ${this.options.name} <command> [options]`);\n    console.log();\n    \n    this.showAvailableCommands();\n    \n    console.log();\n    console.log(chalk.bold('Global Options:'));\n    console.log('  -h, --help     Show help');\n    console.log('  -v, --version  Show version');\n    console.log('  -d, --debug    Enable debug mode');\n    console.log('  --verbose      Enable verbose output');\n    console.log('  -c, --config   Configuration file path');\n    console.log('  --noColors     Disable color output');\n    console.log('  --json         Output in JSON format');\n  }\n\n  /**\n   * Show available commands\n   */\n  private showAvailableCommands(): void {\n    const commands = this.registry.list();\n    \n    if (commands.length === 0) {\n      console.log('No commands available');\n      return;\n    }\n    \n    // Group commands by category\n    const categories = new Map<string, CommandMetadata[]>();\n    \n    for (const command of commands) {\n      const category = command.config.category || 'General';\n      if (!categories.has(category)) {\n        categories.set(category, []);\n      }\n      categories.get(category)!.push(command);\n    }\n    \n    console.log(chalk.bold('Available Commands:'));\n    \n    for (const [category, categoryCommands] of categories) {\n      console.log();\n      console.log(chalk.yellow(category + ':'));\n      \n      for (const command of categoryCommands.sort((a, b) => a.config.name.localeCompare(b.config.name))) {\n        const deprecated = command.config.deprecated ? chalk.red(' (deprecated)') : '';\n        console.log(`  ${chalk.green(command.config.name.padEnd(20))} ${command.config.description}${deprecated}`);\n      }\n    }\n  }\n\n  /**\n   * Load configuration\n   */\n  private async loadConfiguration(): Promise<void> {\n    this.spinner.start('Loading configuration...');\n    \n    try {\n      this.config = await this.configLoader.load({\n        configFiles: this.options.config?.files,\n        envPrefix: this.options.config?.envPrefix,\n        createDefault: this.options.config?.createDefault\n      });\n      \n      this.spinner.succeed('Configuration loaded');\n      this.emit('config-loaded', this.config);\n    } catch (error) {\n      this.spinner.fail('Failed to load configuration');\n      throw error;\n    }\n  }\n\n  /**\n   * Load plugins\n   */\n  private async loadPlugins(): Promise<void> {\n    if (!this.options.pluginPaths || this.options.pluginPaths.length === 0) {\n      return;\n    }\n    \n    this.spinner.start('Loading plugins...');\n    \n    try {\n      // This is a simplified plugin loading implementation\n      // In a real implementation, you would scan the plugin paths and load actual plugins\n      this.spinner.succeed(`Loaded ${this.stats.pluginsLoaded} plugins`);\n      this.emit('plugins-loaded', this.stats.pluginsLoaded);\n    } catch (error) {\n      this.spinner.fail('Failed to load plugins');\n      throw error;\n    }\n  }\n\n  /**\n   * Setup event handlers\n   */\n  private setupEventHandlers(): void {\n    // Registry events\n    this.registry.on('command-registered', (data) => {\n      this.emit('command-registered', data);\n    });\n    \n    this.registry.on('command-executing', (data) => {\n      if (this.config?.defaults.verbose) {\n        console.log(chalk.gray(`Executing command: ${data.name}`));\n      }\n    });\n    \n    this.registry.on('command-executed', (data) => {\n      if (this.config?.defaults.debug) {\n        console.log(chalk.gray(`Command completed in ${data.result.executionTime}ms`));\n      }\n    });\n  }\n\n  /**\n   * Setup global error handlers\n   */\n  private setupErrorHandlers(): void {\n    this.errorHandler.setupGlobalHandlers();\n  }\n\n  /**\n   * Register a command\n   */\n  registerCommand(command: BaseCommand): void {\n    this.registry.registerCommand(command);\n  }\n\n  /**\n   * Register a plugin\n   */\n  async registerPlugin(plugin: CommandPlugin): Promise<void> {\n    await this.registry.registerPlugin(plugin);\n    this.stats.pluginsLoaded++;\n  }\n\n  /**\n   * Get application statistics\n   */\n  getStats(): AppStats {\n    return {\n      ...this.stats,\n      uptime: Date.now() - this.stats.startTime\n    };\n  }\n\n  /**\n   * Get current configuration\n   */\n  getConfig(): CliConfig | null {\n    return this.config;\n  }\n\n  /**\n   * Get command registry\n   */\n  getRegistry(): CommandRegistry {\n    return this.registry;\n  }\n\n  /**\n   * Get error handler\n   */\n  getErrorHandler(): ErrorHandler {\n    return this.errorHandler;\n  }\n\n  /**\n   * Check if application is initialized\n   */\n  isReady(): boolean {\n    return this.isInitialized;\n  }\n\n  /**\n   * Graceful shutdown\n   */\n  async shutdown(): Promise<void> {\n    this.emit('shutting-down');\n    \n    try {\n      // Dispose of registry\n      await this.registry.dispose();\n      \n      // Clean up resources\n      this.removeAllListeners();\n      \n      this.emit('shutdown-complete');\n    } catch (error) {\n      this.emit('shutdown-error', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Create a new CLI application instance\n   */\n  static create(options: CliAppOptions): CliApp {\n    return new CliApp(options);\n  }\n\n  /**\n   * Run a CLI application with error handling\n   */\n  static async runApp(options: CliAppOptions, argv?: string[]): Promise<number> {\n    const app = new CliApp(options);\n    \n    try {\n      const exitCode = await app.run(argv);\n      await app.shutdown();\n      return exitCode;\n    } catch (error) {\n      console.error(chalk.red('Fatal error:'), error instanceof Error ? error.message : String(error));\n      try {\n        await app.shutdown();\n      } catch (shutdownError) {\n        // Ignore shutdown errors during fatal error handling\n      }\n      return 1;\n    }\n  }\n}"],"mappingscAAA,YAAAA,CAAA;MAAA,OAAAC,cAAA;IAAA;EAAA;EAAA,OAAAA,cAAA;AAAA;AAAAD,cAAA;AA3EH;;;;;;AAOA,SAASE,YAAY,QAAQ,QAAQ;AACrC,OAAOC,IAAI,MAAM,MAAM;AACvB,OAAOC,KAAK,MAAM,OAAO;AACzB,OAAOC,GAAG,MAAM,KAAK;AAQrB,SAASC,eAAe,QAA4B,uBAAuB;AAC3E,SAASC,YAAY,QAAQ,oBAAoB;AACjD,SAASC,YAAY,QAAQ,oBAAoB;AAqDjD;;;AAGA,OAAM,MAAOC,MAAO,SAAQP,YAAY;EACrBQ,OAAO;EACPC,QAAQ;EACRC,YAAY;EACZC,YAAY;EACrBC,MAAM;EAAA;EAAA,CAAAd,cAAA,GAAAe,CAAA,OAAqB,IAAI;EAC/BC,aAAa;EAAA;EAAA,CAAAhB,cAAA,GAAAe,CAAA,OAAG,KAAK;EACrBE,KAAK;EACLC,OAAO;EAAA;EAAA,CAAAlB,cAAA,GAAAe,CAAA,OAAGV,GAAG,EAAE;EAEvBc,YAAYT,OAAsB;IAAA;IAAAV,cAAA,GAAAoB,CAAA;IAAApB,cAAA,GAAAe,CAAA;IAChC,KAAK,EAAE;IAAC;IAAAf,cAAA,GAAAe,CAAA;IAER,IAAI,CAACL,OAAO,GAAG;MACbW,kBAAkB,EAAE,IAAI;MACxBC,MAAM,EAAE,IAAI;MACZC,WAAW,EAAE,IAAI;MACjB,GAAGb;KACJ;IAAC;IAAAV,cAAA,GAAAe,CAAA;IAEF,IAAI,CAACJ,QAAQ,GAAG,IAAIL,eAAe,EAAE;IAAC;IAAAN,cAAA,GAAAe,CAAA;IACtC,IAAI,CAACH,YAAY,GAAG,IAAIL,YAAY,EAAE;IAAC;IAAAP,cAAA,GAAAe,CAAA;IACvC,IAAI,CAACF,YAAY,GAAGL,YAAY,CAACgB,WAAW,CAAC;MAC3CF,MAAM,EAAE,IAAI,CAACZ,OAAO,CAACY,MAAM;MAC3BG,KAAK,EAAE,KAAK;MAAE;MACdC,OAAO,EAAE,KAAK,CAAC;KAChB,CAAC;IAAC;IAAA1B,cAAA,GAAAe,CAAA;IAEH,IAAI,CAACE,KAAK,GAAG;MACXU,SAAS,EAAEC,IAAI,CAACC,GAAG,EAAE;MACrBC,gBAAgB,EAAE,CAAC;MACnBC,aAAa,EAAE,CAAC;MAChBC,aAAa,EAAE,CAAC;MAChBC,MAAM,EAAE;KACT;IAAC;IAAAjC,cAAA,GAAAe,CAAA;IAEF,IAAI,CAACmB,kBAAkB,EAAE;EAC3B;EAEA;;;EAGA,MAAMC,UAAUA,CAAA;IAAA;IAAAnC,cAAA,GAAAoB,CAAA;IAAApB,cAAA,GAAAe,CAAA;IACd,IAAI,IAAI,CAACC,aAAa,EAAE;MAAA;MAAAhB,cAAA,GAAAoC,CAAA;MAAApC,cAAA,GAAAe,CAAA;MACtB;IACF,CAAC;IAAA;IAAA;MAAAf,cAAA,GAAAoC,CAAA;IAAA;IAAApC,cAAA,GAAAe,CAAA;IAED,IAAI,CAACsB,IAAI,CAAC,cAAc,CAAC;IAAC;IAAArC,cAAA,GAAAe,CAAA;IAE1B,IAAI;MAAA;MAAAf,cAAA,GAAAe,CAAA;MACF;MACA,MAAM,IAAI,CAACuB,iBAAiB,EAAE;MAE9B;MAAA;MAAAtC,cAAA,GAAAe,CAAA;MACA,IAAI,IAAI,CAACL,OAAO,CAACW,kBAAkB,EAAE;QAAA;QAAArB,cAAA,GAAAoC,CAAA;QAAApC,cAAA,GAAAe,CAAA;QACnC,IAAI,CAACM,kBAAkB,EAAE;MAC3B,CAAC;MAAA;MAAA;QAAArB,cAAA,GAAAoC,CAAA;MAAA;MAED;MAAApC,cAAA,GAAAe,CAAA;MACA,IAAI,IAAI,CAACL,OAAO,CAAC6B,YAAY,EAAE;QAAA;QAAAvC,cAAA,GAAAoC,CAAA;QAAApC,cAAA,GAAAe,CAAA;QAC7B,KAAK,MAAMyB,IAAI,IAAI,IAAI,CAAC9B,OAAO,CAAC6B,YAAY,EAAE;UAAA;UAAAvC,cAAA,GAAAe,CAAA;UAC5C,IAAI,CAACJ,QAAQ,CAAC8B,cAAc,CAACD,IAAI,CAAC;QACpC;MACF,CAAC;MAAA;MAAA;QAAAxC,cAAA,GAAAoC,CAAA;MAAA;MAAApC,cAAA,GAAAe,CAAA;MAED,MAAM,IAAI,CAACJ,QAAQ,CAACwB,UAAU,EAAE;MAEhC;MAAA;MAAAnC,cAAA,GAAAe,CAAA;MACA,MAAM,IAAI,CAAC2B,WAAW,EAAE;MAAC;MAAA1C,cAAA,GAAAe,CAAA;MAEzB,IAAI,CAACC,aAAa,GAAG,IAAI;MAAC;MAAAhB,cAAA,GAAAe,CAAA;MAC1B,IAAI,CAACsB,IAAI,CAAC,aAAa,CAAC;IAE1B,CAAC,CAAC,OAAOM,KAAK,EAAE;MAAA;MAAA3C,cAAA,GAAAe,CAAA;MACd,IAAI,CAACsB,IAAI,CAAC,sBAAsB,EAAEM,KAAK,CAAC;MAAC;MAAA3C,cAAA,GAAAe,CAAA;MACzC,MAAM4B,KAAK;IACb;EACF;EAEA;;;EAGA,MAAMC,GAAGA,CAACC,IAAe;IAAA;IAAA7C,cAAA,GAAAoB,CAAA;IAAApB,cAAA,GAAAe,CAAA;IACvB,IAAI;MAAA;MAAAf,cAAA,GAAAe,CAAA;MACF;MACA,IAAI,CAAC,IAAI,CAACC,aAAa,EAAE;QAAA;QAAAhB,cAAA,GAAAoC,CAAA;QAAApC,cAAA,GAAAe,CAAA;QACvB,MAAM,IAAI,CAACoB,UAAU,EAAE;MACzB,CAAC;MAAA;MAAA;QAAAnC,cAAA,GAAAoC,CAAA;MAAA;MAED;MACA,MAAMU,GAAG;MAAA;MAAA,CAAA9C,cAAA,GAAAe,CAAA,QAAG,IAAI,CAACgC,cAAc,CAACF,IAAI,CAAC;MAErC;MAAA;MAAA7C,cAAA,GAAAe,CAAA;MACA,IAAI+B,GAAG,CAACE,KAAK,CAACC,OAAO,EAAE;QAAA;QAAAjD,cAAA,GAAAoC,CAAA;QAAApC,cAAA,GAAAe,CAAA;QACrBmC,OAAO,CAACC,GAAG,CAAC,IAAI,CAACzC,OAAO,CAACuC,OAAO,CAAC;QAAC;QAAAjD,cAAA,GAAAe,CAAA;QAClC,OAAO,CAAC;MACV,CAAC;MAAA;MAAA;QAAAf,cAAA,GAAAoC,CAAA;MAAA;MAED;MACA,MAAMgB,KAAK;MAAA;MAAA,CAAApD,cAAA,GAAAe,CAAA;MAAG;MAAA,CAAAf,cAAA,GAAAoC,CAAA,UAAAU,GAAG,CAACM,KAAK;MAAA;MAAA,CAAApD,cAAA,GAAAoC,CAAA,UAAI,EAAE;MAE7B;MAAA;MAAApC,cAAA,GAAAe,CAAA;MACA;MAAI;MAAA,CAAAf,cAAA,GAAAoC,CAAA,UAAAU,GAAG,CAACE,KAAK,CAACK,IAAI;MAAK;MAAA,CAAArD,cAAA,GAAAoC,CAAA,UAAAgB,KAAK,CAACE,MAAM,KAAK,CAAC;MAAA;MAAA,CAAAtD,cAAA,GAAAoC,CAAA,UAAI,IAAI,CAAC1B,OAAO,CAACa,WAAW,CAAC,EAAE;QAAA;QAAAvB,cAAA,GAAAoC,CAAA;QAAApC,cAAA,GAAAe,CAAA;QACtE,IAAI,CAACwC,QAAQ,CAACH,KAAK,CAAC,CAAC,CAAC,CAAC;QAAC;QAAApD,cAAA,GAAAe,CAAA;QACxB,OAAO,CAAC;MACV,CAAC;MAAA;MAAA;QAAAf,cAAA,GAAAoC,CAAA;MAAA;MAED;MACA,MAAM,CAACoB,WAAW,EAAE,GAAGC,WAAW,CAAC;MAAA;MAAA,CAAAzD,cAAA,GAAAe,CAAA,QAAGqC,KAAK;MAAC;MAAApD,cAAA,GAAAe,CAAA;MAE5C,IAAI,CAACyC,WAAW,EAAE;QAAA;QAAAxD,cAAA,GAAAoC,CAAA;QAAApC,cAAA,GAAAe,CAAA;QAChB,IAAI,IAAI,CAACL,OAAO,CAACa,WAAW,EAAE;UAAA;UAAAvB,cAAA,GAAAoC,CAAA;UAAApC,cAAA,GAAAe,CAAA;UAC5B,IAAI,CAACwC,QAAQ,EAAE;UAAC;UAAAvD,cAAA,GAAAe,CAAA;UAChB,OAAO,CAAC;QACV,CAAC,MAAM;UAAA;UAAAf,cAAA,GAAAoC,CAAA;UAAApC,cAAA,GAAAe,CAAA;UACLmC,OAAO,CAACP,KAAK,CAACvC,KAAK,CAACsD,GAAG,CAAC,sBAAsB,CAAC,CAAC;UAAC;UAAA1D,cAAA,GAAAe,CAAA;UACjD,OAAO,CAAC;QACV;MACF,CAAC;MAAA;MAAA;QAAAf,cAAA,GAAAoC,CAAA;MAAA;MAED;MACA,MAAMuB,OAAO;MAAA;MAAA,CAAA3D,cAAA,GAAAe,CAAA,QAAmB;QAC9B6C,IAAI,EAAEH,WAAW;QACjBT,KAAK,EAAEF,GAAG,CAACE,KAAK;QAChBI,KAAK,EAAEA,KAAK;QACZS,GAAG,EAAE;UACHC,IAAI,EAAE,IAAI,CAACpD,OAAO,CAACoD,IAAI;UACvBb,OAAO,EAAE,IAAI,CAACvC,OAAO,CAACuC,OAAO;UAC7Bc,WAAW,EAAE,IAAI,CAACrD,OAAO,CAACqD;SAC3B;QACDC,GAAG,EAAEC,OAAO,CAACD,GAAG,EAAE;QAClBE,GAAG,EAAED,OAAO,CAACC,GAAG;QAChBzC,KAAK;QAAE;QAAA,CAAAzB,cAAA,GAAAoC,CAAA,WAAAU,GAAG,CAACE,KAAK,CAACvB,KAAK;QAAA;QAAA,CAAAzB,cAAA,GAAAoC,CAAA,WAAI,IAAI,CAACtB,MAAM,EAAEqD,QAAQ,CAAC1C,KAAK;QAAA;QAAA,CAAAzB,cAAA,GAAAoC,CAAA,WAAI,KAAK;QAC9DV,OAAO;QAAE;QAAA,CAAA1B,cAAA,GAAAoC,CAAA,WAAAU,GAAG,CAACE,KAAK,CAACtB,OAAO;QAAA;QAAA,CAAA1B,cAAA,GAAAoC,CAAA,WAAI,IAAI,CAACtB,MAAM,EAAEqD,QAAQ,CAACzC,OAAO;QAAA;QAAA,CAAA1B,cAAA,GAAAoC,CAAA,WAAI,KAAK;QACpEtB,MAAM,EAAE,IAAI,CAACA;OACd;MAED;MACA,MAAMsD,MAAM;MAAA;MAAA,CAAApE,cAAA,GAAAe,CAAA,QAAG,MAAM,IAAI,CAACsD,cAAc,CAACb,WAAW,EAAEG,OAAO,CAAC;MAE9D;MAAA;MAAA3D,cAAA,GAAAe,CAAA;MACA,IAAIqD,MAAM,CAACE,OAAO,EAAE;QAAA;QAAAtE,cAAA,GAAAoC,CAAA;QAAApC,cAAA,GAAAe,CAAA;QAClB,IAAIqD,MAAM,CAACG,OAAO,EAAE;UAAA;UAAAvE,cAAA,GAAAoC,CAAA;UAAApC,cAAA,GAAAe,CAAA;UAClBmC,OAAO,CAACC,GAAG,CAACiB,MAAM,CAACG,OAAO,CAAC;QAC7B,CAAC;QAAA;QAAA;UAAAvE,cAAA,GAAAoC,CAAA;QAAA;QAAApC,cAAA,GAAAe,CAAA;QACD,OAAO,2BAAAf,cAAA,GAAAoC,CAAA,WAAAgC,MAAM,CAACI,QAAQ;QAAA;QAAA,CAAAxE,cAAA,GAAAoC,CAAA,WAAI,CAAC;MAC7B,CAAC,MAAM;QAAA;QAAApC,cAAA,GAAAoC,CAAA;QAAApC,cAAA,GAAAe,CAAA;QACL,IAAIqD,MAAM,CAACzB,KAAK,EAAE;UAAA;UAAA3C,cAAA,GAAAoC,CAAA;UAAApC,cAAA,GAAAe,CAAA;UAChB,MAAM,IAAI,CAACF,YAAY,CAAC4D,MAAM,CAAC,IAAIC,KAAK,CAACN,MAAM,CAACzB,KAAK,CAAC,EAAEgB,OAAO,CAAC;QAClE,CAAC;QAAA;QAAA;UAAA3D,cAAA,GAAAoC,CAAA;QAAA;QAAApC,cAAA,GAAAe,CAAA;QACD,OAAO,2BAAAf,cAAA,GAAAoC,CAAA,WAAAgC,MAAM,CAACI,QAAQ;QAAA;QAAA,CAAAxE,cAAA,GAAAoC,CAAA,WAAI,CAAC;MAC7B;IAEF,CAAC,CAAC,OAAOO,KAAK,EAAE;MAAA;MAAA3C,cAAA,GAAAe,CAAA;MACd,MAAM,IAAI,CAACF,YAAY,CAAC4D,MAAM,CAC5B9B,KAAK,YAAY+B,KAAK;MAAA;MAAA,CAAA1E,cAAA,GAAAoC,CAAA,WAAGO,KAAK;MAAA;MAAA,CAAA3C,cAAA,GAAAoC,CAAA,WAAG,IAAIsC,KAAK,CAACC,MAAM,CAAChC,KAAK,CAAC,CAAC,EAC1D;MAAC;MAAA3C,cAAA,GAAAe,CAAA;MACF,OAAO,CAAC;IACV;EACF;EAEA;;;EAGQgC,cAAcA,CAACF,IAAe;IAAA;IAAA7C,cAAA,GAAAoB,CAAA;IACpC,MAAMwD,WAAW;IAAA;IAAA,CAAA5E,cAAA,GAAAe,CAAA,QAAG;MAClBsC,IAAI,EAAE;QACJwB,IAAI,EAAE,SAAS;QACfC,SAAS,EAAE,GAAG;QACdf,WAAW,EAAE;OACd;MACDd,OAAO,EAAE;QACP4B,IAAI,EAAE,SAAS;QACfC,SAAS,EAAE,GAAG;QACdf,WAAW,EAAE;OACd;MACDtC,KAAK,EAAE;QACLoD,IAAI,EAAE,SAAS;QACfC,SAAS,EAAE,GAAG;QACdf,WAAW,EAAE;OACd;MACDrC,OAAO,EAAE;QACPmD,IAAI,EAAE,SAAS;QACfd,WAAW,EAAE;OACd;MACDjD,MAAM,EAAE;QACN+D,IAAI,EAAE,QAAQ;QACdC,SAAS,EAAE,GAAG;QACdf,WAAW,EAAE;OACd;MACDgB,QAAQ,EAAE;QACRF,IAAI,EAAE,SAAS;QACfd,WAAW,EAAE;OACd;MACDiB,IAAI,EAAE;QACJH,IAAI,EAAE,SAAS;QACfd,WAAW,EAAE;OACd;MACD,GAAG,IAAI,CAACrD,OAAO,CAACsC;KACjB;IAAC;IAAAhD,cAAA,GAAAe,CAAA;IAEF,OAAOZ,IAAI,CAAC;MACV4D,WAAW,EAAE,IAAI,CAACrD,OAAO,CAACqD,WAAW;MACrCf,KAAK,EAAE4B,WAAW;MAClB/B,IAAI;MACJoC,UAAU,EAAEC,MAAM,CAACC,IAAI;MACvBC,QAAQ,EAAE,KAAK;MAAG;MAClBC,WAAW,EAAE,KAAK,CAAE;KACrB,CAAC;EACJ;EAEA;;;EAGQ,MAAMhB,cAAcA,CAACP,IAAY,EAAEH,OAAuB;IAAA;IAAA3D,cAAA,GAAAoB,CAAA;IAAApB,cAAA,GAAAe,CAAA;IAChE,IAAI,CAACsB,IAAI,CAAC,eAAe,EAAE;MAAEyB,IAAI;MAAEH;IAAO,CAAE,CAAC;IAAC;IAAA3D,cAAA,GAAAe,CAAA;IAE9C,IAAI;MAAA;MAAAf,cAAA,GAAAe,CAAA;MACF;MACA,IAAI,CAACF,YAAY,CAACyE,YAAY,CAAC;QAC7B7D,KAAK,EAAEkC,OAAO,CAAClC,KAAK;QACpBC,OAAO,EAAEiC,OAAO,CAACjC,OAAO;QACxBJ,MAAM;QAAE;QAAA,CAAAtB,cAAA,GAAAoC,CAAA,YAACuB,OAAO,CAACX,KAAK,CAAC+B,QAAQ;QAAA;QAAA,CAAA/E,cAAA,GAAAoC,CAAA,WAAK,IAAI,CAACtB,MAAM,EAAEyE,EAAE,EAAEC,KAAK,KAAKC,SAAS;OACzE,CAAC;MAEF,MAAMrB,MAAM;MAAA;MAAA,CAAApE,cAAA,GAAAe,CAAA,QAAG,MAAM,IAAI,CAACJ,QAAQ,CAAC+E,OAAO,CAAC5B,IAAI,EAAEH,OAAO,CAAC;MAAC;MAAA3D,cAAA,GAAAe,CAAA;MAE1D,IAAI,CAACE,KAAK,CAACa,gBAAgB,EAAE;MAAC;MAAA9B,cAAA,GAAAe,CAAA;MAC9B,IAAI,CAACsB,IAAI,CAAC,kBAAkB,EAAE;QAAEyB,IAAI;QAAEM;MAAM,CAAE,CAAC;MAAC;MAAApE,cAAA,GAAAe,CAAA;MAEhD,OAAOqD,MAAM;IACf,CAAC,CAAC,OAAOzB,KAAK,EAAE;MAAA;MAAA3C,cAAA,GAAAe,CAAA;MACd,IAAI,CAACE,KAAK,CAACc,aAAa,EAAE;MAC1B,MAAM4D,YAAY;MAAA;MAAA,CAAA3F,cAAA,GAAAe,CAAA,QAAG4B,KAAK,YAAY+B,KAAK;MAAA;MAAA,CAAA1E,cAAA,GAAAoC,CAAA,WAAGO,KAAK;MAAA;MAAA,CAAA3C,cAAA,GAAAoC,CAAA,WAAG,IAAIsC,KAAK,CAACC,MAAM,CAAChC,KAAK,CAAC,CAAC;MAAC;MAAA3C,cAAA,GAAAe,CAAA;MAE/E,IAAI,CAACsB,IAAI,CAAC,eAAe,EAAE;QAAEyB,IAAI;QAAEnB,KAAK,EAAEgD;MAAY,CAAE,CAAC;MAAC;MAAA3F,cAAA,GAAAe,CAAA;MAE1D,OAAO;QACLuD,OAAO,EAAE,KAAK;QACd3B,KAAK,EAAEgD,YAAY,CAACpB,OAAO;QAC3BC,QAAQ,EAAE,CAAC;QACXoB,aAAa,EAAE;OAChB;IACH;EACF;EAEA;;;EAGQrC,QAAQA,CAACC,WAAoB;IAAA;IAAAxD,cAAA,GAAAoB,CAAA;IAAApB,cAAA,GAAAe,CAAA;IACnC,IAAIyC,WAAW,EAAE;MAAA;MAAAxD,cAAA,GAAAoC,CAAA;MACf;MACA,MAAMyD,OAAO;MAAA;MAAA,CAAA7F,cAAA,GAAAe,CAAA,QAAG,IAAI,CAACJ,QAAQ,CAACmF,UAAU,CAACtC,WAAW,CAAC;MAAC;MAAAxD,cAAA,GAAAe,CAAA;MACtD,IAAI8E,OAAO,EAAE;QAAA;QAAA7F,cAAA,GAAAoC,CAAA;QAAApC,cAAA,GAAAe,CAAA;QACXmC,OAAO,CAACC,GAAG,CAAC0C,OAAO,CAACE,OAAO,EAAE,CAAC;QAE9B,MAAMC,QAAQ;QAAA;QAAA,CAAAhG,cAAA,GAAAe,CAAA,QAAG8E,OAAO,CAACI,WAAW,EAAE;QAAC;QAAAjG,cAAA,GAAAe,CAAA;QACvC,IAAIiF,QAAQ,CAAC1C,MAAM,GAAG,CAAC,EAAE;UAAA;UAAAtD,cAAA,GAAAoC,CAAA;UAAApC,cAAA,GAAAe,CAAA;UACvBmC,OAAO,CAACC,GAAG,CAAC,cAAc,CAAC;UAAC;UAAAnD,cAAA,GAAAe,CAAA;UAC5BiF,QAAQ,CAACE,OAAO,CAACC,OAAO,IAAG;YAAA;YAAAnG,cAAA,GAAAoB,CAAA;YAAApB,cAAA,GAAAe,CAAA;YACzBmC,OAAO,CAACC,GAAG,CAAC,KAAKgD,OAAO,EAAE,CAAC;UAC7B,CAAC,CAAC;QACJ,CAAC;QAAA;QAAA;UAAAnG,cAAA,GAAAoC,CAAA;QAAA;MACH,CAAC,MAAM;QAAA;QAAApC,cAAA,GAAAoC,CAAA;QAAApC,cAAA,GAAAe,CAAA;QACLmC,OAAO,CAACP,KAAK,CAACvC,KAAK,CAACsD,GAAG,CAAC,YAAYF,WAAW,aAAa,CAAC,CAAC;QAAC;QAAAxD,cAAA,GAAAe,CAAA;QAC/D,IAAI,CAACqF,qBAAqB,EAAE;MAC9B;IACF,CAAC,MAAM;MAAA;MAAApG,cAAA,GAAAoC,CAAA;MAAApC,cAAA,GAAAe,CAAA;MACL;MACA,IAAI,CAACsF,eAAe,EAAE;IACxB;EACF;EAEA;;;EAGQA,eAAeA,CAAA;IAAA;IAAArG,cAAA,GAAAoB,CAAA;IAAApB,cAAA,GAAAe,CAAA;IACrBmC,OAAO,CAACC,GAAG,CAAC/C,KAAK,CAACkG,IAAI,CAAC,IAAI,CAAC5F,OAAO,CAACoD,IAAI,CAAC,EAAE,IAAI,IAAI,CAACpD,OAAO,CAACuC,OAAO,EAAE,CAAC;IAAC;IAAAjD,cAAA,GAAAe,CAAA;IACvEmC,OAAO,CAACC,GAAG,CAAC,IAAI,CAACzC,OAAO,CAACqD,WAAW,CAAC;IAAC;IAAA/D,cAAA,GAAAe,CAAA;IACtCmC,OAAO,CAACC,GAAG,EAAE;IAAC;IAAAnD,cAAA,GAAAe,CAAA;IACdmC,OAAO,CAACC,GAAG,CAAC/C,KAAK,CAACkG,IAAI,CAAC,QAAQ,CAAC,CAAC;IAAC;IAAAtG,cAAA,GAAAe,CAAA;IAClCmC,OAAO,CAACC,GAAG,CAAC,KAAK,IAAI,CAACzC,OAAO,CAACoD,IAAI,sBAAsB,CAAC;IAAC;IAAA9D,cAAA,GAAAe,CAAA;IAC1DmC,OAAO,CAACC,GAAG,EAAE;IAAC;IAAAnD,cAAA,GAAAe,CAAA;IAEd,IAAI,CAACqF,qBAAqB,EAAE;IAAC;IAAApG,cAAA,GAAAe,CAAA;IAE7BmC,OAAO,CAACC,GAAG,EAAE;IAAC;IAAAnD,cAAA,GAAAe,CAAA;IACdmC,OAAO,CAACC,GAAG,CAAC/C,KAAK,CAACkG,IAAI,CAAC,iBAAiB,CAAC,CAAC;IAAC;IAAAtG,cAAA,GAAAe,CAAA;IAC3CmC,OAAO,CAACC,GAAG,CAAC,4BAA4B,CAAC;IAAC;IAAAnD,cAAA,GAAAe,CAAA;IAC1CmC,OAAO,CAACC,GAAG,CAAC,+BAA+B,CAAC;IAAC;IAAAnD,cAAA,GAAAe,CAAA;IAC7CmC,OAAO,CAACC,GAAG,CAAC,oCAAoC,CAAC;IAAC;IAAAnD,cAAA,GAAAe,CAAA;IAClDmC,OAAO,CAACC,GAAG,CAAC,wCAAwC,CAAC;IAAC;IAAAnD,cAAA,GAAAe,CAAA;IACtDmC,OAAO,CAACC,GAAG,CAAC,0CAA0C,CAAC;IAAC;IAAAnD,cAAA,GAAAe,CAAA;IACxDmC,OAAO,CAACC,GAAG,CAAC,uCAAuC,CAAC;IAAC;IAAAnD,cAAA,GAAAe,CAAA;IACrDmC,OAAO,CAACC,GAAG,CAAC,wCAAwC,CAAC;EACvD;EAEA;;;EAGQiD,qBAAqBA,CAAA;IAAA;IAAApG,cAAA,GAAAoB,CAAA;IAC3B,MAAMmF,QAAQ;IAAA;IAAA,CAAAvG,cAAA,GAAAe,CAAA,QAAG,IAAI,CAACJ,QAAQ,CAAC6F,IAAI,EAAE;IAAC;IAAAxG,cAAA,GAAAe,CAAA;IAEtC,IAAIwF,QAAQ,CAACjD,MAAM,KAAK,CAAC,EAAE;MAAA;MAAAtD,cAAA,GAAAoC,CAAA;MAAApC,cAAA,GAAAe,CAAA;MACzBmC,OAAO,CAACC,GAAG,CAAC,uBAAuB,CAAC;MAAC;MAAAnD,cAAA,GAAAe,CAAA;MACrC;IACF,CAAC;IAAA;IAAA;MAAAf,cAAA,GAAAoC,CAAA;IAAA;IAED;IACA,MAAMqE,UAAU;IAAA;IAAA,CAAAzG,cAAA,GAAAe,CAAA,SAAG,IAAI2F,GAAG,EAA6B;IAAC;IAAA1G,cAAA,GAAAe,CAAA;IAExD,KAAK,MAAM8E,OAAO,IAAIU,QAAQ,EAAE;MAC9B,MAAMI,QAAQ;MAAA;MAAA,CAAA3G,cAAA,GAAAe,CAAA;MAAG;MAAA,CAAAf,cAAA,GAAAoC,CAAA,WAAAyD,OAAO,CAAC/E,MAAM,CAAC6F,QAAQ;MAAA;MAAA,CAAA3G,cAAA,GAAAoC,CAAA,WAAI,SAAS;MAAC;MAAApC,cAAA,GAAAe,CAAA;MACtD,IAAI,CAAC0F,UAAU,CAACG,GAAG,CAACD,QAAQ,CAAC,EAAE;QAAA;QAAA3G,cAAA,GAAAoC,CAAA;QAAApC,cAAA,GAAAe,CAAA;QAC7B0F,UAAU,CAACI,GAAG,CAACF,QAAQ,EAAE,EAAE,CAAC;MAC9B,CAAC;MAAA;MAAA;QAAA3G,cAAA,GAAAoC,CAAA;MAAA;MAAApC,cAAA,GAAAe,CAAA;MACD0F,UAAU,CAACK,GAAG,CAACH,QAAQ,CAAE,CAACI,IAAI,CAAClB,OAAO,CAAC;IACzC;IAAC;IAAA7F,cAAA,GAAAe,CAAA;IAEDmC,OAAO,CAACC,GAAG,CAAC/C,KAAK,CAACkG,IAAI,CAAC,qBAAqB,CAAC,CAAC;IAAC;IAAAtG,cAAA,GAAAe,CAAA;IAE/C,KAAK,MAAM,CAAC4F,QAAQ,EAAEK,gBAAgB,CAAC,IAAIP,UAAU,EAAE;MAAA;MAAAzG,cAAA,GAAAe,CAAA;MACrDmC,OAAO,CAACC,GAAG,EAAE;MAAC;MAAAnD,cAAA,GAAAe,CAAA;MACdmC,OAAO,CAACC,GAAG,CAAC/C,KAAK,CAAC6G,MAAM,CAACN,QAAQ,GAAG,GAAG,CAAC,CAAC;MAAC;MAAA3G,cAAA,GAAAe,CAAA;MAE1C,KAAK,MAAM8E,OAAO,IAAImB,gBAAgB,CAACE,IAAI,CAAC,CAACC,CAAC,EAAE/E,CAAC,KAAK;QAAA;QAAApC,cAAA,GAAAoB,CAAA;QAAApB,cAAA,GAAAe,CAAA;QAAA,OAAAoG,CAAC,CAACrG,MAAM,CAACgD,IAAI,CAACsD,aAAa,CAAChF,CAAC,CAACtB,MAAM,CAACgD,IAAI,CAAC;MAAD,CAAC,CAAC,EAAE;QACjG,MAAMuD,UAAU;QAAA;QAAA,CAAArH,cAAA,GAAAe,CAAA,SAAG8E,OAAO,CAAC/E,MAAM,CAACuG,UAAU;QAAA;QAAA,CAAArH,cAAA,GAAAoC,CAAA,WAAGhC,KAAK,CAACsD,GAAG,CAAC,eAAe,CAAC;QAAA;QAAA,CAAA1D,cAAA,GAAAoC,CAAA,WAAG,EAAE;QAAC;QAAApC,cAAA,GAAAe,CAAA;QAC/EmC,OAAO,CAACC,GAAG,CAAC,KAAK/C,KAAK,CAACkH,KAAK,CAACzB,OAAO,CAAC/E,MAAM,CAACgD,IAAI,CAACyD,MAAM,CAAC,EAAE,CAAC,CAAC,IAAI1B,OAAO,CAAC/E,MAAM,CAACiD,WAAW,GAAGsD,UAAU,EAAE,CAAC;MAC5G;IACF;EACF;EAEA;;;EAGQ,MAAM/E,iBAAiBA,CAAA;IAAA;IAAAtC,cAAA,GAAAoB,CAAA;IAAApB,cAAA,GAAAe,CAAA;IAC7B,IAAI,CAACG,OAAO,CAACsG,KAAK,CAAC,0BAA0B,CAAC;IAAC;IAAAxH,cAAA,GAAAe,CAAA;IAE/C,IAAI;MAAA;MAAAf,cAAA,GAAAe,CAAA;MACF,IAAI,CAACD,MAAM,GAAG,MAAM,IAAI,CAACF,YAAY,CAAC6G,IAAI,CAAC;QACzCC,WAAW,EAAE,IAAI,CAAChH,OAAO,CAACI,MAAM,EAAE6G,KAAK;QACvCC,SAAS,EAAE,IAAI,CAAClH,OAAO,CAACI,MAAM,EAAE8G,SAAS;QACzCC,aAAa,EAAE,IAAI,CAACnH,OAAO,CAACI,MAAM,EAAE+G;OACrC,CAAC;MAAC;MAAA7H,cAAA,GAAAe,CAAA;MAEH,IAAI,CAACG,OAAO,CAAC4G,OAAO,CAAC,sBAAsB,CAAC;MAAC;MAAA9H,cAAA,GAAAe,CAAA;MAC7C,IAAI,CAACsB,IAAI,CAAC,eAAe,EAAE,IAAI,CAACvB,MAAM,CAAC;IACzC,CAAC,CAAC,OAAO6B,KAAK,EAAE;MAAA;MAAA3C,cAAA,GAAAe,CAAA;MACd,IAAI,CAACG,OAAO,CAAC6G,IAAI,CAAC,8BAA8B,CAAC;MAAC;MAAA/H,cAAA,GAAAe,CAAA;MAClD,MAAM4B,KAAK;IACb;EACF;EAEA;;;EAGQ,MAAMD,WAAWA,CAAA;IAAA;IAAA1C,cAAA,GAAAoB,CAAA;IAAApB,cAAA,GAAAe,CAAA;IACvB;IAAI;IAAA,CAAAf,cAAA,GAAAoC,CAAA,YAAC,IAAI,CAAC1B,OAAO,CAACsH,WAAW;IAAA;IAAA,CAAAhI,cAAA,GAAAoC,CAAA,WAAI,IAAI,CAAC1B,OAAO,CAACsH,WAAW,CAAC1E,MAAM,KAAK,CAAC,GAAE;MAAA;MAAAtD,cAAA,GAAAoC,CAAA;MAAApC,cAAA,GAAAe,CAAA;MACtE;IACF,CAAC;IAAA;IAAA;MAAAf,cAAA,GAAAoC,CAAA;IAAA;IAAApC,cAAA,GAAAe,CAAA;IAED,IAAI,CAACG,OAAO,CAACsG,KAAK,CAAC,oBAAoB,CAAC;IAAC;IAAAxH,cAAA,GAAAe,CAAA;IAEzC,IAAI;MAAA;MAAAf,cAAA,GAAAe,CAAA;MACF;MACA;MACA,IAAI,CAACG,OAAO,CAAC4G,OAAO,CAAC,UAAU,IAAI,CAAC7G,KAAK,CAACe,aAAa,UAAU,CAAC;MAAC;MAAAhC,cAAA,GAAAe,CAAA;MACnE,IAAI,CAACsB,IAAI,CAAC,gBAAgB,EAAE,IAAI,CAACpB,KAAK,CAACe,aAAa,CAAC;IACvD,CAAC,CAAC,OAAOW,KAAK,EAAE;MAAA;MAAA3C,cAAA,GAAAe,CAAA;MACd,IAAI,CAACG,OAAO,CAAC6G,IAAI,CAAC,wBAAwB,CAAC;MAAC;MAAA/H,cAAA,GAAAe,CAAA;MAC5C,MAAM4B,KAAK;IACb;EACF;EAEA;;;EAGQT,kBAAkBA,CAAA;IAAA;IAAAlC,cAAA,GAAAoB,CAAA;IAAApB,cAAA,GAAAe,CAAA;IACxB;IACA,IAAI,CAACJ,QAAQ,CAACsH,EAAE,CAAC,oBAAoB,EAAGC,IAAI,IAAI;MAAA;MAAAlI,cAAA,GAAAoB,CAAA;MAAApB,cAAA,GAAAe,CAAA;MAC9C,IAAI,CAACsB,IAAI,CAAC,oBAAoB,EAAE6F,IAAI,CAAC;IACvC,CAAC,CAAC;IAAC;IAAAlI,cAAA,GAAAe,CAAA;IAEH,IAAI,CAACJ,QAAQ,CAACsH,EAAE,CAAC,mBAAmB,EAAGC,IAAI,IAAI;MAAA;MAAAlI,cAAA,GAAAoB,CAAA;MAAApB,cAAA,GAAAe,CAAA;MAC7C,IAAI,IAAI,CAACD,MAAM,EAAEqD,QAAQ,CAACzC,OAAO,EAAE;QAAA;QAAA1B,cAAA,GAAAoC,CAAA;QAAApC,cAAA,GAAAe,CAAA;QACjCmC,OAAO,CAACC,GAAG,CAAC/C,KAAK,CAAC+H,IAAI,CAAC,sBAAsBD,IAAI,CAACpE,IAAI,EAAE,CAAC,CAAC;MAC5D,CAAC;MAAA;MAAA;QAAA9D,cAAA,GAAAoC,CAAA;MAAA;IACH,CAAC,CAAC;IAAC;IAAApC,cAAA,GAAAe,CAAA;IAEH,IAAI,CAACJ,QAAQ,CAACsH,EAAE,CAAC,kBAAkB,EAAGC,IAAI,IAAI;MAAA;MAAAlI,cAAA,GAAAoB,CAAA;MAAApB,cAAA,GAAAe,CAAA;MAC5C,IAAI,IAAI,CAACD,MAAM,EAAEqD,QAAQ,CAAC1C,KAAK,EAAE;QAAA;QAAAzB,cAAA,GAAAoC,CAAA;QAAApC,cAAA,GAAAe,CAAA;QAC/BmC,OAAO,CAACC,GAAG,CAAC/C,KAAK,CAAC+H,IAAI,CAAC,wBAAwBD,IAAI,CAAC9D,MAAM,CAACwB,aAAa,IAAI,CAAC,CAAC;MAChF,CAAC;MAAA;MAAA;QAAA5F,cAAA,GAAAoC,CAAA;MAAA;IACH,CAAC,CAAC;EACJ;EAEA;;;EAGQf,kBAAkBA,CAAA;IAAA;IAAArB,cAAA,GAAAoB,CAAA;IAAApB,cAAA,GAAAe,CAAA;IACxB,IAAI,CAACF,YAAY,CAACuH,mBAAmB,EAAE;EACzC;EAEA;;;EAGAC,eAAeA,CAACxC,OAAoB;IAAA;IAAA7F,cAAA,GAAAoB,CAAA;IAAApB,cAAA,GAAAe,CAAA;IAClC,IAAI,CAACJ,QAAQ,CAAC0H,eAAe,CAACxC,OAAO,CAAC;EACxC;EAEA;;;EAGA,MAAMyC,cAAcA,CAACC,MAAqB;IAAA;IAAAvI,cAAA,GAAAoB,CAAA;IAAApB,cAAA,GAAAe,CAAA;IACxC,MAAM,IAAI,CAACJ,QAAQ,CAAC2H,cAAc,CAACC,MAAM,CAAC;IAAC;IAAAvI,cAAA,GAAAe,CAAA;IAC3C,IAAI,CAACE,KAAK,CAACe,aAAa,EAAE;EAC5B;EAEA;;;EAGAwG,QAAQA,CAAA;IAAA;IAAAxI,cAAA,GAAAoB,CAAA;IAAApB,cAAA,GAAAe,CAAA;IACN,OAAO;MACL,GAAG,IAAI,CAACE,KAAK;MACbgB,MAAM,EAAEL,IAAI,CAACC,GAAG,EAAE,GAAG,IAAI,CAACZ,KAAK,CAACU;KACjC;EACH;EAEA;;;EAGA8G,SAASA,CAAA;IAAA;IAAAzI,cAAA,GAAAoB,CAAA;IAAApB,cAAA,GAAAe,CAAA;IACP,OAAO,IAAI,CAACD,MAAM;EACpB;EAEA;;;EAGA4H,WAAWA,CAAA;IAAA;IAAA1I,cAAA,GAAAoB,CAAA;IAAApB,cAAA,GAAAe,CAAA;IACT,OAAO,IAAI,CAACJ,QAAQ;EACtB;EAEA;;;EAGAgI,eAAeA,CAAA;IAAA;IAAA3I,cAAA,GAAAoB,CAAA;IAAApB,cAAA,GAAAe,CAAA;IACb,OAAO,IAAI,CAACF,YAAY;EAC1B;EAEA;;;EAGA+H,OAAOA,CAAA;IAAA;IAAA5I,cAAA,GAAAoB,CAAA;IAAApB,cAAA,GAAAe,CAAA;IACL,OAAO,IAAI,CAACC,aAAa;EAC3B;EAEA;;;EAGA,MAAM6H,QAAQA,CAAA;IAAA;IAAA7I,cAAA,GAAAoB,CAAA;IAAApB,cAAA,GAAAe,CAAA;IACZ,IAAI,CAACsB,IAAI,CAAC,eAAe,CAAC;IAAC;IAAArC,cAAA,GAAAe,CAAA;IAE3B,IAAI;MAAA;MAAAf,cAAA,GAAAe,CAAA;MACF;MACA,MAAM,IAAI,CAACJ,QAAQ,CAACmI,OAAO,EAAE;MAE7B;MAAA;MAAA9I,cAAA,GAAAe,CAAA;MACA,IAAI,CAACgI,kBAAkB,EAAE;MAAC;MAAA/I,cAAA,GAAAe,CAAA;MAE1B,IAAI,CAACsB,IAAI,CAAC,mBAAmB,CAAC;IAChC,CAAC,CAAC,OAAOM,KAAK,EAAE;MAAA;MAAA3C,cAAA,GAAAe,CAAA;MACd,IAAI,CAACsB,IAAI,CAAC,gBAAgB,EAAEM,KAAK,CAAC;MAAC;MAAA3C,cAAA,GAAAe,CAAA;MACnC,MAAM4B,KAAK;IACb;EACF;EAEA;;;EAGA,OAAOqG,MAAMA,CAACtI,OAAsB;IAAA;IAAAV,cAAA,GAAAoB,CAAA;IAAApB,cAAA,GAAAe,CAAA;IAClC,OAAO,IAAIN,MAAM,CAACC,OAAO,CAAC;EAC5B;EAEA;;;EAGA,aAAauI,MAAMA,CAACvI,OAAsB,EAAEmC,IAAe;IAAA;IAAA7C,cAAA,GAAAoB,CAAA;IACzD,MAAM8H,GAAG;IAAA;IAAA,CAAAlJ,cAAA,GAAAe,CAAA,SAAG,IAAIN,MAAM,CAACC,OAAO,CAAC;IAAC;IAAAV,cAAA,GAAAe,CAAA;IAEhC,IAAI;MACF,MAAMyD,QAAQ;MAAA;MAAA,CAAAxE,cAAA,GAAAe,CAAA,SAAG,MAAMmI,GAAG,CAACtG,GAAG,CAACC,IAAI,CAAC;MAAC;MAAA7C,cAAA,GAAAe,CAAA;MACrC,MAAMmI,GAAG,CAACL,QAAQ,EAAE;MAAC;MAAA7I,cAAA,GAAAe,CAAA;MACrB,OAAOyD,QAAQ;IACjB,CAAC,CAAC,OAAO7B,KAAK,EAAE;MAAA;MAAA3C,cAAA,GAAAe,CAAA;MACdmC,OAAO,CAACP,KAAK,CAACvC,KAAK,CAACsD,GAAG,CAAC,cAAc,CAAC,EAAEf,KAAK,YAAY+B,KAAK;MAAA;MAAA,CAAA1E,cAAA,GAAAoC,CAAA,WAAGO,KAAK,CAAC4B,OAAO;MAAA;MAAA,CAAAvE,cAAA,GAAAoC,CAAA,WAAGuC,MAAM,CAAChC,KAAK,CAAC,EAAC;MAAC;MAAA3C,cAAA,GAAAe,CAAA;MACjG,IAAI;QAAA;QAAAf,cAAA,GAAAe,CAAA;QACF,MAAMmI,GAAG,CAACL,QAAQ,EAAE;MACtB,CAAC,CAAC,OAAOM,aAAa,EAAE;QACtB;MAAA;MACD;MAAAnJ,cAAA,GAAAe,CAAA;MACD,OAAO,CAAC;IACV;EACF","ignoreList":[]}