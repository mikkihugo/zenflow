8045054e683d4b3f8ca8380aa649ca9c
/* istanbul ignore next */
function cov_13qbvwq1qw() {
  var path = "/home/mhugo/code/claude-code-flow/src/cli/core/app.ts";
  var hash = "b53b9d92b26b7993dfae7c47a20ac9501a592854";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/home/mhugo/code/claude-code-flow/src/cli/core/app.ts",
    statementMap: {
      "0": {
        start: {
          line: 22,
          column: 13
        },
        end: {
          line: 22,
          column: 17
        }
      },
      "1": {
        start: {
          line: 23,
          column: 20
        },
        end: {
          line: 23,
          column: 25
        }
      },
      "2": {
        start: {
          line: 25,
          column: 14
        },
        end: {
          line: 25,
          column: 19
        }
      },
      "3": {
        start: {
          line: 27,
          column: 8
        },
        end: {
          line: 27,
          column: 16
        }
      },
      "4": {
        start: {
          line: 28,
          column: 8
        },
        end: {
          line: 33,
          column: 10
        }
      },
      "5": {
        start: {
          line: 34,
          column: 8
        },
        end: {
          line: 34,
          column: 46
        }
      },
      "6": {
        start: {
          line: 35,
          column: 8
        },
        end: {
          line: 35,
          column: 47
        }
      },
      "7": {
        start: {
          line: 36,
          column: 8
        },
        end: {
          line: 40,
          column: 11
        }
      },
      "8": {
        start: {
          line: 41,
          column: 8
        },
        end: {
          line: 47,
          column: 10
        }
      },
      "9": {
        start: {
          line: 48,
          column: 8
        },
        end: {
          line: 48,
          column: 34
        }
      },
      "10": {
        start: {
          line: 54,
          column: 8
        },
        end: {
          line: 56,
          column: 9
        }
      },
      "11": {
        start: {
          line: 55,
          column: 12
        },
        end: {
          line: 55,
          column: 19
        }
      },
      "12": {
        start: {
          line: 57,
          column: 8
        },
        end: {
          line: 57,
          column: 34
        }
      },
      "13": {
        start: {
          line: 58,
          column: 8
        },
        end: {
          line: 80,
          column: 9
        }
      },
      "14": {
        start: {
          line: 60,
          column: 12
        },
        end: {
          line: 60,
          column: 43
        }
      },
      "15": {
        start: {
          line: 62,
          column: 12
        },
        end: {
          line: 64,
          column: 13
        }
      },
      "16": {
        start: {
          line: 63,
          column: 16
        },
        end: {
          line: 63,
          column: 42
        }
      },
      "17": {
        start: {
          line: 66,
          column: 12
        },
        end: {
          line: 70,
          column: 13
        }
      },
      "18": {
        start: {
          line: 67,
          column: 16
        },
        end: {
          line: 69,
          column: 17
        }
      },
      "19": {
        start: {
          line: 68,
          column: 20
        },
        end: {
          line: 68,
          column: 55
        }
      },
      "20": {
        start: {
          line: 71,
          column: 12
        },
        end: {
          line: 71,
          column: 45
        }
      },
      "21": {
        start: {
          line: 73,
          column: 12
        },
        end: {
          line: 73,
          column: 37
        }
      },
      "22": {
        start: {
          line: 74,
          column: 12
        },
        end: {
          line: 74,
          column: 38
        }
      },
      "23": {
        start: {
          line: 75,
          column: 12
        },
        end: {
          line: 75,
          column: 37
        }
      },
      "24": {
        start: {
          line: 78,
          column: 12
        },
        end: {
          line: 78,
          column: 53
        }
      },
      "25": {
        start: {
          line: 79,
          column: 12
        },
        end: {
          line: 79,
          column: 24
        }
      },
      "26": {
        start: {
          line: 86,
          column: 8
        },
        end: {
          line: 152,
          column: 9
        }
      },
      "27": {
        start: {
          line: 88,
          column: 12
        },
        end: {
          line: 90,
          column: 13
        }
      },
      "28": {
        start: {
          line: 89,
          column: 16
        },
        end: {
          line: 89,
          column: 40
        }
      },
      "29": {
        start: {
          line: 92,
          column: 24
        },
        end: {
          line: 92,
          column: 49
        }
      },
      "30": {
        start: {
          line: 94,
          column: 12
        },
        end: {
          line: 97,
          column: 13
        }
      },
      "31": {
        start: {
          line: 95,
          column: 16
        },
        end: {
          line: 95,
          column: 50
        }
      },
      "32": {
        start: {
          line: 96,
          column: 16
        },
        end: {
          line: 96,
          column: 25
        }
      },
      "33": {
        start: {
          line: 99,
          column: 26
        },
        end: {
          line: 99,
          column: 41
        }
      },
      "34": {
        start: {
          line: 101,
          column: 12
        },
        end: {
          line: 104,
          column: 13
        }
      },
      "35": {
        start: {
          line: 102,
          column: 16
        },
        end: {
          line: 102,
          column: 40
        }
      },
      "36": {
        start: {
          line: 103,
          column: 16
        },
        end: {
          line: 103,
          column: 25
        }
      },
      "37": {
        start: {
          line: 106,
          column: 50
        },
        end: {
          line: 106,
          column: 55
        }
      },
      "38": {
        start: {
          line: 107,
          column: 12
        },
        end: {
          line: 116,
          column: 13
        }
      },
      "39": {
        start: {
          line: 108,
          column: 16
        },
        end: {
          line: 115,
          column: 17
        }
      },
      "40": {
        start: {
          line: 109,
          column: 20
        },
        end: {
          line: 109,
          column: 36
        }
      },
      "41": {
        start: {
          line: 110,
          column: 20
        },
        end: {
          line: 110,
          column: 29
        }
      },
      "42": {
        start: {
          line: 113,
          column: 20
        },
        end: {
          line: 113,
          column: 69
        }
      },
      "43": {
        start: {
          line: 114,
          column: 20
        },
        end: {
          line: 114,
          column: 29
        }
      },
      "44": {
        start: {
          line: 118,
          column: 28
        },
        end: {
          line: 132,
          column: 13
        }
      },
      "45": {
        start: {
          line: 134,
          column: 27
        },
        end: {
          line: 134,
          column: 74
        }
      },
      "46": {
        start: {
          line: 136,
          column: 12
        },
        end: {
          line: 147,
          column: 13
        }
      },
      "47": {
        start: {
          line: 137,
          column: 16
        },
        end: {
          line: 139,
          column: 17
        }
      },
      "48": {
        start: {
          line: 138,
          column: 20
        },
        end: {
          line: 138,
          column: 48
        }
      },
      "49": {
        start: {
          line: 140,
          column: 16
        },
        end: {
          line: 140,
          column: 44
        }
      },
      "50": {
        start: {
          line: 143,
          column: 16
        },
        end: {
          line: 145,
          column: 17
        }
      },
      "51": {
        start: {
          line: 144,
          column: 20
        },
        end: {
          line: 144,
          column: 85
        }
      },
      "52": {
        start: {
          line: 146,
          column: 16
        },
        end: {
          line: 146,
          column: 44
        }
      },
      "53": {
        start: {
          line: 150,
          column: 12
        },
        end: {
          line: 150,
          column: 102
        }
      },
      "54": {
        start: {
          line: 151,
          column: 12
        },
        end: {
          line: 151,
          column: 21
        }
      },
      "55": {
        start: {
          line: 158,
          column: 28
        },
        end: {
          line: 192,
          column: 9
        }
      },
      "56": {
        start: {
          line: 193,
          column: 8
        },
        end: {
          line: 200,
          column: 11
        }
      },
      "57": {
        start: {
          line: 206,
          column: 8
        },
        end: {
          line: 206,
          column: 54
        }
      },
      "58": {
        start: {
          line: 207,
          column: 8
        },
        end: {
          line: 229,
          column: 9
        }
      },
      "59": {
        start: {
          line: 209,
          column: 12
        },
        end: {
          line: 213,
          column: 15
        }
      },
      "60": {
        start: {
          line: 214,
          column: 27
        },
        end: {
          line: 214,
          column: 69
        }
      },
      "61": {
        start: {
          line: 215,
          column: 12
        },
        end: {
          line: 215,
          column: 42
        }
      },
      "62": {
        start: {
          line: 216,
          column: 12
        },
        end: {
          line: 216,
          column: 60
        }
      },
      "63": {
        start: {
          line: 217,
          column: 12
        },
        end: {
          line: 217,
          column: 26
        }
      },
      "64": {
        start: {
          line: 220,
          column: 12
        },
        end: {
          line: 220,
          column: 39
        }
      },
      "65": {
        start: {
          line: 221,
          column: 33
        },
        end: {
          line: 221,
          column: 90
        }
      },
      "66": {
        start: {
          line: 222,
          column: 12
        },
        end: {
          line: 222,
          column: 70
        }
      },
      "67": {
        start: {
          line: 223,
          column: 12
        },
        end: {
          line: 228,
          column: 14
        }
      },
      "68": {
        start: {
          line: 235,
          column: 8
        },
        end: {
          line: 256,
          column: 9
        }
      },
      "69": {
        start: {
          line: 237,
          column: 28
        },
        end: {
          line: 237,
          column: 65
        }
      },
      "70": {
        start: {
          line: 238,
          column: 12
        },
        end: {
          line: 251,
          column: 13
        }
      },
      "71": {
        start: {
          line: 239,
          column: 16
        },
        end: {
          line: 239,
          column: 47
        }
      },
      "72": {
        start: {
          line: 240,
          column: 33
        },
        end: {
          line: 240,
          column: 54
        }
      },
      "73": {
        start: {
          line: 241,
          column: 16
        },
        end: {
          line: 246,
          column: 17
        }
      },
      "74": {
        start: {
          line: 242,
          column: 20
        },
        end: {
          line: 242,
          column: 48
        }
      },
      "75": {
        start: {
          line: 243,
          column: 20
        },
        end: {
          line: 245,
          column: 23
        }
      },
      "76": {
        start: {
          line: 244,
          column: 24
        },
        end: {
          line: 244,
          column: 52
        }
      },
      "77": {
        start: {
          line: 249,
          column: 16
        },
        end: {
          line: 249,
          column: 79
        }
      },
      "78": {
        start: {
          line: 250,
          column: 16
        },
        end: {
          line: 250,
          column: 45
        }
      },
      "79": {
        start: {
          line: 255,
          column: 12
        },
        end: {
          line: 255,
          column: 35
        }
      },
      "80": {
        start: {
          line: 262,
          column: 8
        },
        end: {
          line: 262,
          column: 79
        }
      },
      "81": {
        start: {
          line: 263,
          column: 8
        },
        end: {
          line: 263,
          column: 46
        }
      },
      "82": {
        start: {
          line: 264,
          column: 8
        },
        end: {
          line: 264,
          column: 22
        }
      },
      "83": {
        start: {
          line: 265,
          column: 8
        },
        end: {
          line: 265,
          column: 42
        }
      },
      "84": {
        start: {
          line: 266,
          column: 8
        },
        end: {
          line: 266,
          column: 66
        }
      },
      "85": {
        start: {
          line: 267,
          column: 8
        },
        end: {
          line: 267,
          column: 22
        }
      },
      "86": {
        start: {
          line: 268,
          column: 8
        },
        end: {
          line: 268,
          column: 37
        }
      },
      "87": {
        start: {
          line: 269,
          column: 8
        },
        end: {
          line: 269,
          column: 22
        }
      },
      "88": {
        start: {
          line: 270,
          column: 8
        },
        end: {
          line: 270,
          column: 51
        }
      },
      "89": {
        start: {
          line: 271,
          column: 8
        },
        end: {
          line: 271,
          column: 50
        }
      },
      "90": {
        start: {
          line: 272,
          column: 8
        },
        end: {
          line: 272,
          column: 53
        }
      },
      "91": {
        start: {
          line: 273,
          column: 8
        },
        end: {
          line: 273,
          column: 58
        }
      },
      "92": {
        start: {
          line: 274,
          column: 8
        },
        end: {
          line: 274,
          column: 62
        }
      },
      "93": {
        start: {
          line: 275,
          column: 8
        },
        end: {
          line: 275,
          column: 64
        }
      },
      "94": {
        start: {
          line: 276,
          column: 8
        },
        end: {
          line: 276,
          column: 61
        }
      },
      "95": {
        start: {
          line: 277,
          column: 8
        },
        end: {
          line: 277,
          column: 62
        }
      },
      "96": {
        start: {
          line: 283,
          column: 25
        },
        end: {
          line: 283,
          column: 45
        }
      },
      "97": {
        start: {
          line: 284,
          column: 8
        },
        end: {
          line: 287,
          column: 9
        }
      },
      "98": {
        start: {
          line: 285,
          column: 12
        },
        end: {
          line: 285,
          column: 49
        }
      },
      "99": {
        start: {
          line: 286,
          column: 12
        },
        end: {
          line: 286,
          column: 19
        }
      },
      "100": {
        start: {
          line: 289,
          column: 27
        },
        end: {
          line: 289,
          column: 36
        }
      },
      "101": {
        start: {
          line: 290,
          column: 8
        },
        end: {
          line: 296,
          column: 9
        }
      },
      "102": {
        start: {
          line: 291,
          column: 29
        },
        end: {
          line: 291,
          column: 65
        }
      },
      "103": {
        start: {
          line: 292,
          column: 12
        },
        end: {
          line: 294,
          column: 13
        }
      },
      "104": {
        start: {
          line: 293,
          column: 16
        },
        end: {
          line: 293,
          column: 45
        }
      },
      "105": {
        start: {
          line: 295,
          column: 12
        },
        end: {
          line: 295,
          column: 51
        }
      },
      "106": {
        start: {
          line: 297,
          column: 8
        },
        end: {
          line: 297,
          column: 55
        }
      },
      "107": {
        start: {
          line: 298,
          column: 8
        },
        end: {
          line: 305,
          column: 9
        }
      },
      "108": {
        start: {
          line: 299,
          column: 12
        },
        end: {
          line: 299,
          column: 26
        }
      },
      "109": {
        start: {
          line: 300,
          column: 12
        },
        end: {
          line: 300,
          column: 54
        }
      },
      "110": {
        start: {
          line: 301,
          column: 12
        },
        end: {
          line: 304,
          column: 13
        }
      },
      "111": {
        start: {
          line: 301,
          column: 66
        },
        end: {
          line: 301,
          column: 108
        }
      },
      "112": {
        start: {
          line: 302,
          column: 35
        },
        end: {
          line: 302,
          column: 94
        }
      },
      "113": {
        start: {
          line: 303,
          column: 16
        },
        end: {
          line: 303,
          column: 123
        }
      },
      "114": {
        start: {
          line: 311,
          column: 8
        },
        end: {
          line: 311,
          column: 55
        }
      },
      "115": {
        start: {
          line: 312,
          column: 8
        },
        end: {
          line: 324,
          column: 9
        }
      },
      "116": {
        start: {
          line: 313,
          column: 12
        },
        end: {
          line: 317,
          column: 15
        }
      },
      "117": {
        start: {
          line: 318,
          column: 12
        },
        end: {
          line: 318,
          column: 57
        }
      },
      "118": {
        start: {
          line: 319,
          column: 12
        },
        end: {
          line: 319,
          column: 52
        }
      },
      "119": {
        start: {
          line: 322,
          column: 12
        },
        end: {
          line: 322,
          column: 62
        }
      },
      "120": {
        start: {
          line: 323,
          column: 12
        },
        end: {
          line: 323,
          column: 24
        }
      },
      "121": {
        start: {
          line: 330,
          column: 8
        },
        end: {
          line: 332,
          column: 9
        }
      },
      "122": {
        start: {
          line: 331,
          column: 12
        },
        end: {
          line: 331,
          column: 19
        }
      },
      "123": {
        start: {
          line: 333,
          column: 8
        },
        end: {
          line: 333,
          column: 49
        }
      },
      "124": {
        start: {
          line: 334,
          column: 8
        },
        end: {
          line: 343,
          column: 9
        }
      },
      "125": {
        start: {
          line: 337,
          column: 12
        },
        end: {
          line: 337,
          column: 79
        }
      },
      "126": {
        start: {
          line: 338,
          column: 12
        },
        end: {
          line: 338,
          column: 66
        }
      },
      "127": {
        start: {
          line: 341,
          column: 12
        },
        end: {
          line: 341,
          column: 56
        }
      },
      "128": {
        start: {
          line: 342,
          column: 12
        },
        end: {
          line: 342,
          column: 24
        }
      },
      "129": {
        start: {
          line: 350,
          column: 8
        },
        end: {
          line: 352,
          column: 11
        }
      },
      "130": {
        start: {
          line: 351,
          column: 12
        },
        end: {
          line: 351,
          column: 50
        }
      },
      "131": {
        start: {
          line: 353,
          column: 8
        },
        end: {
          line: 357,
          column: 11
        }
      },
      "132": {
        start: {
          line: 354,
          column: 12
        },
        end: {
          line: 356,
          column: 13
        }
      },
      "133": {
        start: {
          line: 355,
          column: 16
        },
        end: {
          line: 355,
          column: 75
        }
      },
      "134": {
        start: {
          line: 358,
          column: 8
        },
        end: {
          line: 362,
          column: 11
        }
      },
      "135": {
        start: {
          line: 359,
          column: 12
        },
        end: {
          line: 361,
          column: 13
        }
      },
      "136": {
        start: {
          line: 360,
          column: 16
        },
        end: {
          line: 360,
          column: 95
        }
      },
      "137": {
        start: {
          line: 368,
          column: 8
        },
        end: {
          line: 368,
          column: 48
        }
      },
      "138": {
        start: {
          line: 374,
          column: 8
        },
        end: {
          line: 374,
          column: 47
        }
      },
      "139": {
        start: {
          line: 380,
          column: 8
        },
        end: {
          line: 380,
          column: 51
        }
      },
      "140": {
        start: {
          line: 381,
          column: 8
        },
        end: {
          line: 381,
          column: 35
        }
      },
      "141": {
        start: {
          line: 387,
          column: 8
        },
        end: {
          line: 390,
          column: 10
        }
      },
      "142": {
        start: {
          line: 396,
          column: 8
        },
        end: {
          line: 396,
          column: 27
        }
      },
      "143": {
        start: {
          line: 402,
          column: 8
        },
        end: {
          line: 402,
          column: 29
        }
      },
      "144": {
        start: {
          line: 408,
          column: 8
        },
        end: {
          line: 408,
          column: 33
        }
      },
      "145": {
        start: {
          line: 414,
          column: 8
        },
        end: {
          line: 414,
          column: 34
        }
      },
      "146": {
        start: {
          line: 420,
          column: 8
        },
        end: {
          line: 420,
          column: 35
        }
      },
      "147": {
        start: {
          line: 421,
          column: 8
        },
        end: {
          line: 431,
          column: 9
        }
      },
      "148": {
        start: {
          line: 423,
          column: 12
        },
        end: {
          line: 423,
          column: 42
        }
      },
      "149": {
        start: {
          line: 425,
          column: 12
        },
        end: {
          line: 425,
          column: 38
        }
      },
      "150": {
        start: {
          line: 426,
          column: 12
        },
        end: {
          line: 426,
          column: 43
        }
      },
      "151": {
        start: {
          line: 429,
          column: 12
        },
        end: {
          line: 429,
          column: 47
        }
      },
      "152": {
        start: {
          line: 430,
          column: 12
        },
        end: {
          line: 430,
          column: 24
        }
      },
      "153": {
        start: {
          line: 437,
          column: 8
        },
        end: {
          line: 437,
          column: 35
        }
      },
      "154": {
        start: {
          line: 443,
          column: 20
        },
        end: {
          line: 443,
          column: 39
        }
      },
      "155": {
        start: {
          line: 444,
          column: 8
        },
        end: {
          line: 458,
          column: 9
        }
      },
      "156": {
        start: {
          line: 445,
          column: 29
        },
        end: {
          line: 445,
          column: 48
        }
      },
      "157": {
        start: {
          line: 446,
          column: 12
        },
        end: {
          line: 446,
          column: 33
        }
      },
      "158": {
        start: {
          line: 447,
          column: 12
        },
        end: {
          line: 447,
          column: 28
        }
      },
      "159": {
        start: {
          line: 450,
          column: 12
        },
        end: {
          line: 450,
          column: 109
        }
      },
      "160": {
        start: {
          line: 451,
          column: 12
        },
        end: {
          line: 456,
          column: 13
        }
      },
      "161": {
        start: {
          line: 452,
          column: 16
        },
        end: {
          line: 452,
          column: 37
        }
      },
      "162": {
        start: {
          line: 457,
          column: 12
        },
        end: {
          line: 457,
          column: 21
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 26,
            column: 4
          },
          end: {
            line: 26,
            column: 5
          }
        },
        loc: {
          start: {
            line: 26,
            column: 25
          },
          end: {
            line: 49,
            column: 5
          }
        },
        line: 26
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 53,
            column: 4
          },
          end: {
            line: 53,
            column: 5
          }
        },
        loc: {
          start: {
            line: 53,
            column: 23
          },
          end: {
            line: 81,
            column: 5
          }
        },
        line: 53
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 85,
            column: 4
          },
          end: {
            line: 85,
            column: 5
          }
        },
        loc: {
          start: {
            line: 85,
            column: 20
          },
          end: {
            line: 153,
            column: 5
          }
        },
        line: 85
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 157,
            column: 4
          },
          end: {
            line: 157,
            column: 5
          }
        },
        loc: {
          start: {
            line: 157,
            column: 25
          },
          end: {
            line: 201,
            column: 5
          }
        },
        line: 157
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 205,
            column: 4
          },
          end: {
            line: 205,
            column: 5
          }
        },
        loc: {
          start: {
            line: 205,
            column: 40
          },
          end: {
            line: 230,
            column: 5
          }
        },
        line: 205
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 234,
            column: 4
          },
          end: {
            line: 234,
            column: 5
          }
        },
        loc: {
          start: {
            line: 234,
            column: 26
          },
          end: {
            line: 257,
            column: 5
          }
        },
        line: 234
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 243,
            column: 37
          },
          end: {
            line: 243,
            column: 38
          }
        },
        loc: {
          start: {
            line: 243,
            column: 48
          },
          end: {
            line: 245,
            column: 21
          }
        },
        line: 243
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 261,
            column: 4
          },
          end: {
            line: 261,
            column: 5
          }
        },
        loc: {
          start: {
            line: 261,
            column: 22
          },
          end: {
            line: 278,
            column: 5
          }
        },
        line: 261
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 282,
            column: 4
          },
          end: {
            line: 282,
            column: 5
          }
        },
        loc: {
          start: {
            line: 282,
            column: 28
          },
          end: {
            line: 306,
            column: 5
          }
        },
        line: 282
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 301,
            column: 56
          },
          end: {
            line: 301,
            column: 57
          }
        },
        loc: {
          start: {
            line: 301,
            column: 66
          },
          end: {
            line: 301,
            column: 108
          }
        },
        line: 301
      },
      "10": {
        name: "(anonymous_10)",
        decl: {
          start: {
            line: 310,
            column: 4
          },
          end: {
            line: 310,
            column: 5
          }
        },
        loc: {
          start: {
            line: 310,
            column: 30
          },
          end: {
            line: 325,
            column: 5
          }
        },
        line: 310
      },
      "11": {
        name: "(anonymous_11)",
        decl: {
          start: {
            line: 329,
            column: 4
          },
          end: {
            line: 329,
            column: 5
          }
        },
        loc: {
          start: {
            line: 329,
            column: 24
          },
          end: {
            line: 344,
            column: 5
          }
        },
        line: 329
      },
      "12": {
        name: "(anonymous_12)",
        decl: {
          start: {
            line: 348,
            column: 4
          },
          end: {
            line: 348,
            column: 5
          }
        },
        loc: {
          start: {
            line: 348,
            column: 25
          },
          end: {
            line: 363,
            column: 5
          }
        },
        line: 348
      },
      "13": {
        name: "(anonymous_13)",
        decl: {
          start: {
            line: 350,
            column: 47
          },
          end: {
            line: 350,
            column: 48
          }
        },
        loc: {
          start: {
            line: 350,
            column: 57
          },
          end: {
            line: 352,
            column: 9
          }
        },
        line: 350
      },
      "14": {
        name: "(anonymous_14)",
        decl: {
          start: {
            line: 353,
            column: 46
          },
          end: {
            line: 353,
            column: 47
          }
        },
        loc: {
          start: {
            line: 353,
            column: 56
          },
          end: {
            line: 357,
            column: 9
          }
        },
        line: 353
      },
      "15": {
        name: "(anonymous_15)",
        decl: {
          start: {
            line: 358,
            column: 45
          },
          end: {
            line: 358,
            column: 46
          }
        },
        loc: {
          start: {
            line: 358,
            column: 55
          },
          end: {
            line: 362,
            column: 9
          }
        },
        line: 358
      },
      "16": {
        name: "(anonymous_16)",
        decl: {
          start: {
            line: 367,
            column: 4
          },
          end: {
            line: 367,
            column: 5
          }
        },
        loc: {
          start: {
            line: 367,
            column: 25
          },
          end: {
            line: 369,
            column: 5
          }
        },
        line: 367
      },
      "17": {
        name: "(anonymous_17)",
        decl: {
          start: {
            line: 373,
            column: 4
          },
          end: {
            line: 373,
            column: 5
          }
        },
        loc: {
          start: {
            line: 373,
            column: 29
          },
          end: {
            line: 375,
            column: 5
          }
        },
        line: 373
      },
      "18": {
        name: "(anonymous_18)",
        decl: {
          start: {
            line: 379,
            column: 4
          },
          end: {
            line: 379,
            column: 5
          }
        },
        loc: {
          start: {
            line: 379,
            column: 33
          },
          end: {
            line: 382,
            column: 5
          }
        },
        line: 379
      },
      "19": {
        name: "(anonymous_19)",
        decl: {
          start: {
            line: 386,
            column: 4
          },
          end: {
            line: 386,
            column: 5
          }
        },
        loc: {
          start: {
            line: 386,
            column: 15
          },
          end: {
            line: 391,
            column: 5
          }
        },
        line: 386
      },
      "20": {
        name: "(anonymous_20)",
        decl: {
          start: {
            line: 395,
            column: 4
          },
          end: {
            line: 395,
            column: 5
          }
        },
        loc: {
          start: {
            line: 395,
            column: 16
          },
          end: {
            line: 397,
            column: 5
          }
        },
        line: 395
      },
      "21": {
        name: "(anonymous_21)",
        decl: {
          start: {
            line: 401,
            column: 4
          },
          end: {
            line: 401,
            column: 5
          }
        },
        loc: {
          start: {
            line: 401,
            column: 18
          },
          end: {
            line: 403,
            column: 5
          }
        },
        line: 401
      },
      "22": {
        name: "(anonymous_22)",
        decl: {
          start: {
            line: 407,
            column: 4
          },
          end: {
            line: 407,
            column: 5
          }
        },
        loc: {
          start: {
            line: 407,
            column: 22
          },
          end: {
            line: 409,
            column: 5
          }
        },
        line: 407
      },
      "23": {
        name: "(anonymous_23)",
        decl: {
          start: {
            line: 413,
            column: 4
          },
          end: {
            line: 413,
            column: 5
          }
        },
        loc: {
          start: {
            line: 413,
            column: 14
          },
          end: {
            line: 415,
            column: 5
          }
        },
        line: 413
      },
      "24": {
        name: "(anonymous_24)",
        decl: {
          start: {
            line: 419,
            column: 4
          },
          end: {
            line: 419,
            column: 5
          }
        },
        loc: {
          start: {
            line: 419,
            column: 21
          },
          end: {
            line: 432,
            column: 5
          }
        },
        line: 419
      },
      "25": {
        name: "(anonymous_25)",
        decl: {
          start: {
            line: 436,
            column: 4
          },
          end: {
            line: 436,
            column: 5
          }
        },
        loc: {
          start: {
            line: 436,
            column: 27
          },
          end: {
            line: 438,
            column: 5
          }
        },
        line: 436
      },
      "26": {
        name: "(anonymous_26)",
        decl: {
          start: {
            line: 442,
            column: 4
          },
          end: {
            line: 442,
            column: 5
          }
        },
        loc: {
          start: {
            line: 442,
            column: 39
          },
          end: {
            line: 459,
            column: 5
          }
        },
        line: 442
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 54,
            column: 8
          },
          end: {
            line: 56,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 54,
            column: 8
          },
          end: {
            line: 56,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 54
      },
      "1": {
        loc: {
          start: {
            line: 62,
            column: 12
          },
          end: {
            line: 64,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 62,
            column: 12
          },
          end: {
            line: 64,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 62
      },
      "2": {
        loc: {
          start: {
            line: 66,
            column: 12
          },
          end: {
            line: 70,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 66,
            column: 12
          },
          end: {
            line: 70,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 66
      },
      "3": {
        loc: {
          start: {
            line: 88,
            column: 12
          },
          end: {
            line: 90,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 88,
            column: 12
          },
          end: {
            line: 90,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 88
      },
      "4": {
        loc: {
          start: {
            line: 94,
            column: 12
          },
          end: {
            line: 97,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 94,
            column: 12
          },
          end: {
            line: 97,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 94
      },
      "5": {
        loc: {
          start: {
            line: 99,
            column: 26
          },
          end: {
            line: 99,
            column: 41
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 99,
            column: 26
          },
          end: {
            line: 99,
            column: 35
          }
        }, {
          start: {
            line: 99,
            column: 39
          },
          end: {
            line: 99,
            column: 41
          }
        }],
        line: 99
      },
      "6": {
        loc: {
          start: {
            line: 101,
            column: 12
          },
          end: {
            line: 104,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 101,
            column: 12
          },
          end: {
            line: 104,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 101
      },
      "7": {
        loc: {
          start: {
            line: 101,
            column: 16
          },
          end: {
            line: 101,
            column: 82
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 101,
            column: 16
          },
          end: {
            line: 101,
            column: 30
          }
        }, {
          start: {
            line: 101,
            column: 35
          },
          end: {
            line: 101,
            column: 53
          }
        }, {
          start: {
            line: 101,
            column: 57
          },
          end: {
            line: 101,
            column: 81
          }
        }],
        line: 101
      },
      "8": {
        loc: {
          start: {
            line: 107,
            column: 12
          },
          end: {
            line: 116,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 107,
            column: 12
          },
          end: {
            line: 116,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 107
      },
      "9": {
        loc: {
          start: {
            line: 108,
            column: 16
          },
          end: {
            line: 115,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 108,
            column: 16
          },
          end: {
            line: 115,
            column: 17
          }
        }, {
          start: {
            line: 112,
            column: 21
          },
          end: {
            line: 115,
            column: 17
          }
        }],
        line: 108
      },
      "10": {
        loc: {
          start: {
            line: 129,
            column: 23
          },
          end: {
            line: 129,
            column: 78
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 129,
            column: 23
          },
          end: {
            line: 129,
            column: 38
          }
        }, {
          start: {
            line: 129,
            column: 42
          },
          end: {
            line: 129,
            column: 69
          }
        }, {
          start: {
            line: 129,
            column: 73
          },
          end: {
            line: 129,
            column: 78
          }
        }],
        line: 129
      },
      "11": {
        loc: {
          start: {
            line: 130,
            column: 25
          },
          end: {
            line: 130,
            column: 84
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 130,
            column: 25
          },
          end: {
            line: 130,
            column: 42
          }
        }, {
          start: {
            line: 130,
            column: 46
          },
          end: {
            line: 130,
            column: 75
          }
        }, {
          start: {
            line: 130,
            column: 79
          },
          end: {
            line: 130,
            column: 84
          }
        }],
        line: 130
      },
      "12": {
        loc: {
          start: {
            line: 136,
            column: 12
          },
          end: {
            line: 147,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 136,
            column: 12
          },
          end: {
            line: 147,
            column: 13
          }
        }, {
          start: {
            line: 142,
            column: 17
          },
          end: {
            line: 147,
            column: 13
          }
        }],
        line: 136
      },
      "13": {
        loc: {
          start: {
            line: 137,
            column: 16
          },
          end: {
            line: 139,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 137,
            column: 16
          },
          end: {
            line: 139,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 137
      },
      "14": {
        loc: {
          start: {
            line: 140,
            column: 23
          },
          end: {
            line: 140,
            column: 43
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 140,
            column: 23
          },
          end: {
            line: 140,
            column: 38
          }
        }, {
          start: {
            line: 140,
            column: 42
          },
          end: {
            line: 140,
            column: 43
          }
        }],
        line: 140
      },
      "15": {
        loc: {
          start: {
            line: 143,
            column: 16
          },
          end: {
            line: 145,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 143,
            column: 16
          },
          end: {
            line: 145,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 143
      },
      "16": {
        loc: {
          start: {
            line: 146,
            column: 23
          },
          end: {
            line: 146,
            column: 43
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 146,
            column: 23
          },
          end: {
            line: 146,
            column: 38
          }
        }, {
          start: {
            line: 146,
            column: 42
          },
          end: {
            line: 146,
            column: 43
          }
        }],
        line: 146
      },
      "17": {
        loc: {
          start: {
            line: 150,
            column: 43
          },
          end: {
            line: 150,
            column: 100
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 150,
            column: 68
          },
          end: {
            line: 150,
            column: 73
          }
        }, {
          start: {
            line: 150,
            column: 76
          },
          end: {
            line: 150,
            column: 100
          }
        }],
        line: 150
      },
      "18": {
        loc: {
          start: {
            line: 212,
            column: 24
          },
          end: {
            line: 212,
            column: 89
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 212,
            column: 24
          },
          end: {
            line: 212,
            column: 47
          }
        }, {
          start: {
            line: 212,
            column: 52
          },
          end: {
            line: 212,
            column: 88
          }
        }],
        line: 212
      },
      "19": {
        loc: {
          start: {
            line: 221,
            column: 33
          },
          end: {
            line: 221,
            column: 90
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 221,
            column: 58
          },
          end: {
            line: 221,
            column: 63
          }
        }, {
          start: {
            line: 221,
            column: 66
          },
          end: {
            line: 221,
            column: 90
          }
        }],
        line: 221
      },
      "20": {
        loc: {
          start: {
            line: 235,
            column: 8
          },
          end: {
            line: 256,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 235,
            column: 8
          },
          end: {
            line: 256,
            column: 9
          }
        }, {
          start: {
            line: 253,
            column: 13
          },
          end: {
            line: 256,
            column: 9
          }
        }],
        line: 235
      },
      "21": {
        loc: {
          start: {
            line: 238,
            column: 12
          },
          end: {
            line: 251,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 238,
            column: 12
          },
          end: {
            line: 251,
            column: 13
          }
        }, {
          start: {
            line: 248,
            column: 17
          },
          end: {
            line: 251,
            column: 13
          }
        }],
        line: 238
      },
      "22": {
        loc: {
          start: {
            line: 241,
            column: 16
          },
          end: {
            line: 246,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 241,
            column: 16
          },
          end: {
            line: 246,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 241
      },
      "23": {
        loc: {
          start: {
            line: 284,
            column: 8
          },
          end: {
            line: 287,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 284,
            column: 8
          },
          end: {
            line: 287,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 284
      },
      "24": {
        loc: {
          start: {
            line: 291,
            column: 29
          },
          end: {
            line: 291,
            column: 65
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 291,
            column: 29
          },
          end: {
            line: 291,
            column: 52
          }
        }, {
          start: {
            line: 291,
            column: 56
          },
          end: {
            line: 291,
            column: 65
          }
        }],
        line: 291
      },
      "25": {
        loc: {
          start: {
            line: 292,
            column: 12
          },
          end: {
            line: 294,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 292,
            column: 12
          },
          end: {
            line: 294,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 292
      },
      "26": {
        loc: {
          start: {
            line: 302,
            column: 35
          },
          end: {
            line: 302,
            column: 94
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 302,
            column: 63
          },
          end: {
            line: 302,
            column: 89
          }
        }, {
          start: {
            line: 302,
            column: 92
          },
          end: {
            line: 302,
            column: 94
          }
        }],
        line: 302
      },
      "27": {
        loc: {
          start: {
            line: 330,
            column: 8
          },
          end: {
            line: 332,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 330,
            column: 8
          },
          end: {
            line: 332,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 330
      },
      "28": {
        loc: {
          start: {
            line: 330,
            column: 12
          },
          end: {
            line: 330,
            column: 78
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 330,
            column: 12
          },
          end: {
            line: 330,
            column: 37
          }
        }, {
          start: {
            line: 330,
            column: 41
          },
          end: {
            line: 330,
            column: 78
          }
        }],
        line: 330
      },
      "29": {
        loc: {
          start: {
            line: 354,
            column: 12
          },
          end: {
            line: 356,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 354,
            column: 12
          },
          end: {
            line: 356,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 354
      },
      "30": {
        loc: {
          start: {
            line: 359,
            column: 12
          },
          end: {
            line: 361,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 359,
            column: 12
          },
          end: {
            line: 361,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 359
      },
      "31": {
        loc: {
          start: {
            line: 450,
            column: 53
          },
          end: {
            line: 450,
            column: 107
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 450,
            column: 78
          },
          end: {
            line: 450,
            column: 91
          }
        }, {
          start: {
            line: 450,
            column: 94
          },
          end: {
            line: 450,
            column: 107
          }
        }],
        line: 450
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0,
      "74": 0,
      "75": 0,
      "76": 0,
      "77": 0,
      "78": 0,
      "79": 0,
      "80": 0,
      "81": 0,
      "82": 0,
      "83": 0,
      "84": 0,
      "85": 0,
      "86": 0,
      "87": 0,
      "88": 0,
      "89": 0,
      "90": 0,
      "91": 0,
      "92": 0,
      "93": 0,
      "94": 0,
      "95": 0,
      "96": 0,
      "97": 0,
      "98": 0,
      "99": 0,
      "100": 0,
      "101": 0,
      "102": 0,
      "103": 0,
      "104": 0,
      "105": 0,
      "106": 0,
      "107": 0,
      "108": 0,
      "109": 0,
      "110": 0,
      "111": 0,
      "112": 0,
      "113": 0,
      "114": 0,
      "115": 0,
      "116": 0,
      "117": 0,
      "118": 0,
      "119": 0,
      "120": 0,
      "121": 0,
      "122": 0,
      "123": 0,
      "124": 0,
      "125": 0,
      "126": 0,
      "127": 0,
      "128": 0,
      "129": 0,
      "130": 0,
      "131": 0,
      "132": 0,
      "133": 0,
      "134": 0,
      "135": 0,
      "136": 0,
      "137": 0,
      "138": 0,
      "139": 0,
      "140": 0,
      "141": 0,
      "142": 0,
      "143": 0,
      "144": 0,
      "145": 0,
      "146": 0,
      "147": 0,
      "148": 0,
      "149": 0,
      "150": 0,
      "151": 0,
      "152": 0,
      "153": 0,
      "154": 0,
      "155": 0,
      "156": 0,
      "157": 0,
      "158": 0,
      "159": 0,
      "160": 0,
      "161": 0,
      "162": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0, 0],
      "8": [0, 0],
      "9": [0, 0],
      "10": [0, 0, 0],
      "11": [0, 0, 0],
      "12": [0, 0],
      "13": [0, 0],
      "14": [0, 0],
      "15": [0, 0],
      "16": [0, 0],
      "17": [0, 0],
      "18": [0, 0],
      "19": [0, 0],
      "20": [0, 0],
      "21": [0, 0],
      "22": [0, 0],
      "23": [0, 0],
      "24": [0, 0],
      "25": [0, 0],
      "26": [0, 0],
      "27": [0, 0],
      "28": [0, 0],
      "29": [0, 0],
      "30": [0, 0],
      "31": [0, 0]
    },
    inputSourceMap: {
      file: "/home/mhugo/code/claude-code-flow/src/cli/core/app.ts",
      mappings: "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",
      names: [],
      sources: ["/home/mhugo/code/claude-code-flow/src/cli/core/app.ts"],
      sourcesContent: ["/**\n * CLI Application\n * \n * Main CLI application class that orchestrates the entire command-line interface.\n * Handles initialization, command parsing, plugin management, and global coordination.\n */\n\nimport { EventEmitter } from 'events';\nimport meow from 'meow';\nimport chalk from 'chalk';\nimport ora from 'ora';\nimport type {\n  CliConfig,\n  CommandContext,\n  CommandResult,\n  CommandMetadata,\n  AsyncResult\n} from '../types/index.js';\nimport { CommandRegistry, type CommandPlugin } from './command-registry.js';\nimport { ConfigLoader } from './config-loader.js';\nimport { ErrorHandler } from './error-handler.js';\nimport { BaseCommand } from './base-command.js';\n\n/**\n * CLI application options\n */\nexport interface CliAppOptions {\n  /** Application name */\n  name: string;\n  \n  /** Application version */\n  version: string;\n  \n  /** Application description */\n  description: string;\n  \n  /** Configuration loading options */\n  config?: {\n    files?: string[];\n    envPrefix?: string;\n    createDefault?: boolean;\n  };\n  \n  /** Command loading paths */\n  commandPaths?: string[];\n  \n  /** Plugin loading paths */\n  pluginPaths?: string[];\n  \n  /** Global flags */\n  flags?: Record<string, any>;\n  \n  /** Whether to setup global error handlers */\n  setupErrorHandlers?: boolean;\n  \n  /** Whether to enable color output */\n  colors?: boolean;\n  \n  /** Whether to show help on no command */\n  helpOnEmpty?: boolean;\n}\n\n/**\n * CLI application statistics\n */\ninterface AppStats {\n  startTime: number;\n  commandsExecuted: number;\n  errorsHandled: number;\n  pluginsLoaded: number;\n  uptime: number;\n}\n\n/**\n * Main CLI application class\n */\nexport class CliApp extends EventEmitter {\n  private readonly options: CliAppOptions;\n  private readonly registry: CommandRegistry;\n  private readonly configLoader: ConfigLoader;\n  private readonly errorHandler: ErrorHandler;\n  private config: CliConfig | null = null;\n  private isInitialized = false;\n  private stats: AppStats;\n  private spinner = ora();\n\n  constructor(options: CliAppOptions) {\n    super();\n    \n    this.options = {\n      setupErrorHandlers: true,\n      colors: true,\n      helpOnEmpty: true,\n      ...options\n    };\n    \n    this.registry = new CommandRegistry();\n    this.configLoader = new ConfigLoader();\n    this.errorHandler = ErrorHandler.getInstance({\n      colors: this.options.colors,\n      debug: false, // Will be updated from config\n      verbose: false // Will be updated from config\n    });\n    \n    this.stats = {\n      startTime: Date.now(),\n      commandsExecuted: 0,\n      errorsHandled: 0,\n      pluginsLoaded: 0,\n      uptime: 0\n    };\n    \n    this.setupEventHandlers();\n  }\n\n  /**\n   * Initialize the CLI application\n   */\n  async initialize(): Promise<void> {\n    if (this.isInitialized) {\n      return;\n    }\n\n    this.emit('initializing');\n    \n    try {\n      // Load configuration\n      await this.loadConfiguration();\n      \n      // Setup error handlers\n      if (this.options.setupErrorHandlers) {\n        this.setupErrorHandlers();\n      }\n      \n      // Initialize command registry\n      if (this.options.commandPaths) {\n        for (const path of this.options.commandPaths) {\n          this.registry.addLoadingPath(path);\n        }\n      }\n      \n      await this.registry.initialize();\n      \n      // Load plugins\n      await this.loadPlugins();\n      \n      this.isInitialized = true;\n      this.emit('initialized');\n      \n    } catch (error) {\n      this.emit('initialization-error', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Run the CLI application\n   */\n  async run(argv?: string[]): Promise<number> {\n    try {\n      // Initialize if not already done\n      if (!this.isInitialized) {\n        await this.initialize();\n      }\n      \n      // Parse command line arguments\n      const cli = this.parseArguments(argv);\n      \n      // Handle version flag\n      if (cli.flags.version) {\n        console.log(this.options.version);\n        return 0;\n      }\n      \n      // Ensure cli.input exists\n      const input = cli.input || [];\n      \n      // Handle help flag or no command\n      if (cli.flags.help || (input.length === 0 && this.options.helpOnEmpty)) {\n        this.showHelp(input[0]);\n        return 0;\n      }\n      \n      // Extract command and arguments\n      const [commandName, ...commandArgs] = input;\n      \n      if (!commandName) {\n        if (this.options.helpOnEmpty) {\n          this.showHelp();\n          return 0;\n        } else {\n          console.error(chalk.red('No command specified'));\n          return 1;\n        }\n      }\n      \n      // Create command context\n      const context: CommandContext = {\n        args: commandArgs,\n        flags: cli.flags,\n        input: input,\n        pkg: {\n          name: this.options.name,\n          version: this.options.version,\n          description: this.options.description\n        },\n        cwd: process.cwd(),\n        env: process.env,\n        debug: cli.flags.debug || this.config?.defaults.debug || false,\n        verbose: cli.flags.verbose || this.config?.defaults.verbose || false,\n        config: this.config as Record<string, unknown>\n      };\n      \n      // Execute command\n      const result = await this.executeCommand(commandName, context);\n      \n      // Handle result\n      if (result.success) {\n        if (result.message) {\n          console.log(result.message);\n        }\n        return result.exitCode || 0;\n      } else {\n        if (result.error) {\n          await this.errorHandler.handle(new Error(result.error), context);\n        }\n        return result.exitCode || 1;\n      }\n      \n    } catch (error) {\n      await this.errorHandler.handle(\n        error instanceof Error ? error : new Error(String(error))\n      );\n      return 1;\n    }\n  }\n\n  /**\n   * Parse command line arguments\n   */\n  private parseArguments(argv?: string[]) {\n    const globalFlags = {\n      help: {\n        type: 'boolean',\n        shortFlag: 'h',\n        description: 'Show help'\n      },\n      version: {\n        type: 'boolean',\n        shortFlag: 'v',\n        description: 'Show version'\n      },\n      debug: {\n        type: 'boolean',\n        shortFlag: 'd',\n        description: 'Enable debug mode'\n      },\n      verbose: {\n        type: 'boolean',\n        description: 'Enable verbose output'\n      },\n      config: {\n        type: 'string',\n        shortFlag: 'c',\n        description: 'Configuration file path'\n      },\n      noColors: {\n        type: 'boolean',\n        description: 'Disable color output'\n      },\n      json: {\n        type: 'boolean',\n        description: 'Output in JSON format'\n      },\n      ...this.options.flags\n    };\n\n    return meow({\n      description: this.options.description,\n      flags: globalFlags,\n      argv,\n      importMeta: import.meta,\n      autoHelp: false,  // We'll handle help ourselves\n      autoVersion: false  // We'll handle version ourselves\n    });\n  }\n\n  /**\n   * Execute a command\n   */\n  private async executeCommand(name: string, context: CommandContext): Promise<CommandResult> {\n    this.emit('command-start', { name, context });\n    \n    try {\n      // Update error handler config from flags\n      this.errorHandler.updateConfig({\n        debug: context.debug,\n        verbose: context.verbose,\n        colors: !context.flags.noColors && (this.config?.ui?.theme !== undefined)\n      });\n      \n      const result = await this.registry.execute(name, context);\n      \n      this.stats.commandsExecuted++;\n      this.emit('command-complete', { name, result });\n      \n      return result;\n    } catch (error) {\n      this.stats.errorsHandled++;\n      const commandError = error instanceof Error ? error : new Error(String(error));\n      \n      this.emit('command-error', { name, error: commandError });\n      \n      return {\n        success: false,\n        error: commandError.message,\n        exitCode: 1,\n        executionTime: 0\n      };\n    }\n  }\n\n  /**\n   * Show help information\n   */\n  private showHelp(commandName?: string): void {\n    if (commandName) {\n      // Show help for specific command\n      const command = this.registry.getCommand(commandName);\n      if (command) {\n        console.log(command.getHelp());\n        \n        const examples = command.getExamples();\n        if (examples.length > 0) {\n          console.log('\\\\nExamples:');\n          examples.forEach(example => {\n            console.log(`  ${example}`);\n          });\n        }\n      } else {\n        console.error(chalk.red(`Command '${commandName}' not found`));\n        this.showAvailableCommands();\n      }\n    } else {\n      // Show general help\n      this.showGeneralHelp();\n    }\n  }\n\n  /**\n   * Show general help\n   */\n  private showGeneralHelp(): void {\n    console.log(chalk.bold(this.options.name), `v${this.options.version}`);\n    console.log(this.options.description);\n    console.log();\n    console.log(chalk.bold('Usage:'));\n    console.log(`  ${this.options.name} <command> [options]`);\n    console.log();\n    \n    this.showAvailableCommands();\n    \n    console.log();\n    console.log(chalk.bold('Global Options:'));\n    console.log('  -h, --help     Show help');\n    console.log('  -v, --version  Show version');\n    console.log('  -d, --debug    Enable debug mode');\n    console.log('  --verbose      Enable verbose output');\n    console.log('  -c, --config   Configuration file path');\n    console.log('  --noColors     Disable color output');\n    console.log('  --json         Output in JSON format');\n  }\n\n  /**\n   * Show available commands\n   */\n  private showAvailableCommands(): void {\n    const commands = this.registry.list();\n    \n    if (commands.length === 0) {\n      console.log('No commands available');\n      return;\n    }\n    \n    // Group commands by category\n    const categories = new Map<string, CommandMetadata[]>();\n    \n    for (const command of commands) {\n      const category = command.config.category || 'General';\n      if (!categories.has(category)) {\n        categories.set(category, []);\n      }\n      categories.get(category)!.push(command);\n    }\n    \n    console.log(chalk.bold('Available Commands:'));\n    \n    for (const [category, categoryCommands] of categories) {\n      console.log();\n      console.log(chalk.yellow(category + ':'));\n      \n      for (const command of categoryCommands.sort((a, b) => a.config.name.localeCompare(b.config.name))) {\n        const deprecated = command.config.deprecated ? chalk.red(' (deprecated)') : '';\n        console.log(`  ${chalk.green(command.config.name.padEnd(20))} ${command.config.description}${deprecated}`);\n      }\n    }\n  }\n\n  /**\n   * Load configuration\n   */\n  private async loadConfiguration(): Promise<void> {\n    this.spinner.start('Loading configuration...');\n    \n    try {\n      this.config = await this.configLoader.load({\n        configFiles: this.options.config?.files,\n        envPrefix: this.options.config?.envPrefix,\n        createDefault: this.options.config?.createDefault\n      });\n      \n      this.spinner.succeed('Configuration loaded');\n      this.emit('config-loaded', this.config);\n    } catch (error) {\n      this.spinner.fail('Failed to load configuration');\n      throw error;\n    }\n  }\n\n  /**\n   * Load plugins\n   */\n  private async loadPlugins(): Promise<void> {\n    if (!this.options.pluginPaths || this.options.pluginPaths.length === 0) {\n      return;\n    }\n    \n    this.spinner.start('Loading plugins...');\n    \n    try {\n      // This is a simplified plugin loading implementation\n      // In a real implementation, you would scan the plugin paths and load actual plugins\n      this.spinner.succeed(`Loaded ${this.stats.pluginsLoaded} plugins`);\n      this.emit('plugins-loaded', this.stats.pluginsLoaded);\n    } catch (error) {\n      this.spinner.fail('Failed to load plugins');\n      throw error;\n    }\n  }\n\n  /**\n   * Setup event handlers\n   */\n  private setupEventHandlers(): void {\n    // Registry events\n    this.registry.on('command-registered', (data) => {\n      this.emit('command-registered', data);\n    });\n    \n    this.registry.on('command-executing', (data) => {\n      if (this.config?.defaults.verbose) {\n        console.log(chalk.gray(`Executing command: ${data.name}`));\n      }\n    });\n    \n    this.registry.on('command-executed', (data) => {\n      if (this.config?.defaults.debug) {\n        console.log(chalk.gray(`Command completed in ${data.result.executionTime}ms`));\n      }\n    });\n  }\n\n  /**\n   * Setup global error handlers\n   */\n  private setupErrorHandlers(): void {\n    this.errorHandler.setupGlobalHandlers();\n  }\n\n  /**\n   * Register a command\n   */\n  registerCommand(command: BaseCommand): void {\n    this.registry.registerCommand(command);\n  }\n\n  /**\n   * Register a plugin\n   */\n  async registerPlugin(plugin: CommandPlugin): Promise<void> {\n    await this.registry.registerPlugin(plugin);\n    this.stats.pluginsLoaded++;\n  }\n\n  /**\n   * Get application statistics\n   */\n  getStats(): AppStats {\n    return {\n      ...this.stats,\n      uptime: Date.now() - this.stats.startTime\n    };\n  }\n\n  /**\n   * Get current configuration\n   */\n  getConfig(): CliConfig | null {\n    return this.config;\n  }\n\n  /**\n   * Get command registry\n   */\n  getRegistry(): CommandRegistry {\n    return this.registry;\n  }\n\n  /**\n   * Get error handler\n   */\n  getErrorHandler(): ErrorHandler {\n    return this.errorHandler;\n  }\n\n  /**\n   * Check if application is initialized\n   */\n  isReady(): boolean {\n    return this.isInitialized;\n  }\n\n  /**\n   * Graceful shutdown\n   */\n  async shutdown(): Promise<void> {\n    this.emit('shutting-down');\n    \n    try {\n      // Dispose of registry\n      await this.registry.dispose();\n      \n      // Clean up resources\n      this.removeAllListeners();\n      \n      this.emit('shutdown-complete');\n    } catch (error) {\n      this.emit('shutdown-error', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Create a new CLI application instance\n   */\n  static create(options: CliAppOptions): CliApp {\n    return new CliApp(options);\n  }\n\n  /**\n   * Run a CLI application with error handling\n   */\n  static async runApp(options: CliAppOptions, argv?: string[]): Promise<number> {\n    const app = new CliApp(options);\n    \n    try {\n      const exitCode = await app.run(argv);\n      await app.shutdown();\n      return exitCode;\n    } catch (error) {\n      console.error(chalk.red('Fatal error:'), error instanceof Error ? error.message : String(error));\n      try {\n        await app.shutdown();\n      } catch (shutdownError) {\n        // Ignore shutdown errors during fatal error handling\n      }\n      return 1;\n    }\n  }\n}"],
      version: 3
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "b53b9d92b26b7993dfae7c47a20ac9501a592854"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_13qbvwq1qw = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_13qbvwq1qw();
/**
 * CLI Application
 *
 * Main CLI application class that orchestrates the entire command-line interface.
 * Handles initialization, command parsing, plugin management, and global coordination.
 */
import { EventEmitter } from 'events';
import meow from 'meow';
import chalk from 'chalk';
import ora from 'ora';
import { CommandRegistry } from './command-registry.js';
import { ConfigLoader } from './config-loader.js';
import { ErrorHandler } from './error-handler.js';
/**
 * Main CLI application class
 */
export class CliApp extends EventEmitter {
  options;
  registry;
  configLoader;
  errorHandler;
  config =
  /* istanbul ignore next */
  (cov_13qbvwq1qw().s[0]++, null);
  isInitialized =
  /* istanbul ignore next */
  (cov_13qbvwq1qw().s[1]++, false);
  stats;
  spinner =
  /* istanbul ignore next */
  (cov_13qbvwq1qw().s[2]++, ora());
  constructor(options) {
    /* istanbul ignore next */
    cov_13qbvwq1qw().f[0]++;
    cov_13qbvwq1qw().s[3]++;
    super();
    /* istanbul ignore next */
    cov_13qbvwq1qw().s[4]++;
    this.options = {
      setupErrorHandlers: true,
      colors: true,
      helpOnEmpty: true,
      ...options
    };
    /* istanbul ignore next */
    cov_13qbvwq1qw().s[5]++;
    this.registry = new CommandRegistry();
    /* istanbul ignore next */
    cov_13qbvwq1qw().s[6]++;
    this.configLoader = new ConfigLoader();
    /* istanbul ignore next */
    cov_13qbvwq1qw().s[7]++;
    this.errorHandler = ErrorHandler.getInstance({
      colors: this.options.colors,
      debug: false,
      // Will be updated from config
      verbose: false // Will be updated from config
    });
    /* istanbul ignore next */
    cov_13qbvwq1qw().s[8]++;
    this.stats = {
      startTime: Date.now(),
      commandsExecuted: 0,
      errorsHandled: 0,
      pluginsLoaded: 0,
      uptime: 0
    };
    /* istanbul ignore next */
    cov_13qbvwq1qw().s[9]++;
    this.setupEventHandlers();
  }
  /**
   * Initialize the CLI application
   */
  async initialize() {
    /* istanbul ignore next */
    cov_13qbvwq1qw().f[1]++;
    cov_13qbvwq1qw().s[10]++;
    if (this.isInitialized) {
      /* istanbul ignore next */
      cov_13qbvwq1qw().b[0][0]++;
      cov_13qbvwq1qw().s[11]++;
      return;
    } else
    /* istanbul ignore next */
    {
      cov_13qbvwq1qw().b[0][1]++;
    }
    cov_13qbvwq1qw().s[12]++;
    this.emit('initializing');
    /* istanbul ignore next */
    cov_13qbvwq1qw().s[13]++;
    try {
      /* istanbul ignore next */
      cov_13qbvwq1qw().s[14]++;
      // Load configuration
      await this.loadConfiguration();
      // Setup error handlers
      /* istanbul ignore next */
      cov_13qbvwq1qw().s[15]++;
      if (this.options.setupErrorHandlers) {
        /* istanbul ignore next */
        cov_13qbvwq1qw().b[1][0]++;
        cov_13qbvwq1qw().s[16]++;
        this.setupErrorHandlers();
      } else
      /* istanbul ignore next */
      {
        cov_13qbvwq1qw().b[1][1]++;
      }
      // Initialize command registry
      cov_13qbvwq1qw().s[17]++;
      if (this.options.commandPaths) {
        /* istanbul ignore next */
        cov_13qbvwq1qw().b[2][0]++;
        cov_13qbvwq1qw().s[18]++;
        for (const path of this.options.commandPaths) {
          /* istanbul ignore next */
          cov_13qbvwq1qw().s[19]++;
          this.registry.addLoadingPath(path);
        }
      } else
      /* istanbul ignore next */
      {
        cov_13qbvwq1qw().b[2][1]++;
      }
      cov_13qbvwq1qw().s[20]++;
      await this.registry.initialize();
      // Load plugins
      /* istanbul ignore next */
      cov_13qbvwq1qw().s[21]++;
      await this.loadPlugins();
      /* istanbul ignore next */
      cov_13qbvwq1qw().s[22]++;
      this.isInitialized = true;
      /* istanbul ignore next */
      cov_13qbvwq1qw().s[23]++;
      this.emit('initialized');
    } catch (error) {
      /* istanbul ignore next */
      cov_13qbvwq1qw().s[24]++;
      this.emit('initialization-error', error);
      /* istanbul ignore next */
      cov_13qbvwq1qw().s[25]++;
      throw error;
    }
  }
  /**
   * Run the CLI application
   */
  async run(argv) {
    /* istanbul ignore next */
    cov_13qbvwq1qw().f[2]++;
    cov_13qbvwq1qw().s[26]++;
    try {
      /* istanbul ignore next */
      cov_13qbvwq1qw().s[27]++;
      // Initialize if not already done
      if (!this.isInitialized) {
        /* istanbul ignore next */
        cov_13qbvwq1qw().b[3][0]++;
        cov_13qbvwq1qw().s[28]++;
        await this.initialize();
      } else
      /* istanbul ignore next */
      {
        cov_13qbvwq1qw().b[3][1]++;
      }
      // Parse command line arguments
      const cli =
      /* istanbul ignore next */
      (cov_13qbvwq1qw().s[29]++, this.parseArguments(argv));
      // Handle version flag
      /* istanbul ignore next */
      cov_13qbvwq1qw().s[30]++;
      if (cli.flags.version) {
        /* istanbul ignore next */
        cov_13qbvwq1qw().b[4][0]++;
        cov_13qbvwq1qw().s[31]++;
        console.log(this.options.version);
        /* istanbul ignore next */
        cov_13qbvwq1qw().s[32]++;
        return 0;
      } else
      /* istanbul ignore next */
      {
        cov_13qbvwq1qw().b[4][1]++;
      }
      // Ensure cli.input exists
      const input =
      /* istanbul ignore next */
      (cov_13qbvwq1qw().s[33]++,
      /* istanbul ignore next */
      (cov_13qbvwq1qw().b[5][0]++, cli.input) ||
      /* istanbul ignore next */
      (cov_13qbvwq1qw().b[5][1]++, []));
      // Handle help flag or no command
      /* istanbul ignore next */
      cov_13qbvwq1qw().s[34]++;
      if (
      /* istanbul ignore next */
      (cov_13qbvwq1qw().b[7][0]++, cli.flags.help) ||
      /* istanbul ignore next */
      (cov_13qbvwq1qw().b[7][1]++, input.length === 0) &&
      /* istanbul ignore next */
      (cov_13qbvwq1qw().b[7][2]++, this.options.helpOnEmpty)) {
        /* istanbul ignore next */
        cov_13qbvwq1qw().b[6][0]++;
        cov_13qbvwq1qw().s[35]++;
        this.showHelp(input[0]);
        /* istanbul ignore next */
        cov_13qbvwq1qw().s[36]++;
        return 0;
      } else
      /* istanbul ignore next */
      {
        cov_13qbvwq1qw().b[6][1]++;
      }
      // Extract command and arguments
      const [commandName, ...commandArgs] =
      /* istanbul ignore next */
      (cov_13qbvwq1qw().s[37]++, input);
      /* istanbul ignore next */
      cov_13qbvwq1qw().s[38]++;
      if (!commandName) {
        /* istanbul ignore next */
        cov_13qbvwq1qw().b[8][0]++;
        cov_13qbvwq1qw().s[39]++;
        if (this.options.helpOnEmpty) {
          /* istanbul ignore next */
          cov_13qbvwq1qw().b[9][0]++;
          cov_13qbvwq1qw().s[40]++;
          this.showHelp();
          /* istanbul ignore next */
          cov_13qbvwq1qw().s[41]++;
          return 0;
        } else {
          /* istanbul ignore next */
          cov_13qbvwq1qw().b[9][1]++;
          cov_13qbvwq1qw().s[42]++;
          console.error(chalk.red('No command specified'));
          /* istanbul ignore next */
          cov_13qbvwq1qw().s[43]++;
          return 1;
        }
      } else
      /* istanbul ignore next */
      {
        cov_13qbvwq1qw().b[8][1]++;
      }
      // Create command context
      const context =
      /* istanbul ignore next */
      (cov_13qbvwq1qw().s[44]++, {
        args: commandArgs,
        flags: cli.flags,
        input: input,
        pkg: {
          name: this.options.name,
          version: this.options.version,
          description: this.options.description
        },
        cwd: process.cwd(),
        env: process.env,
        debug:
        /* istanbul ignore next */
        (cov_13qbvwq1qw().b[10][0]++, cli.flags.debug) ||
        /* istanbul ignore next */
        (cov_13qbvwq1qw().b[10][1]++, this.config?.defaults.debug) ||
        /* istanbul ignore next */
        (cov_13qbvwq1qw().b[10][2]++, false),
        verbose:
        /* istanbul ignore next */
        (cov_13qbvwq1qw().b[11][0]++, cli.flags.verbose) ||
        /* istanbul ignore next */
        (cov_13qbvwq1qw().b[11][1]++, this.config?.defaults.verbose) ||
        /* istanbul ignore next */
        (cov_13qbvwq1qw().b[11][2]++, false),
        config: this.config
      });
      // Execute command
      const result =
      /* istanbul ignore next */
      (cov_13qbvwq1qw().s[45]++, await this.executeCommand(commandName, context));
      // Handle result
      /* istanbul ignore next */
      cov_13qbvwq1qw().s[46]++;
      if (result.success) {
        /* istanbul ignore next */
        cov_13qbvwq1qw().b[12][0]++;
        cov_13qbvwq1qw().s[47]++;
        if (result.message) {
          /* istanbul ignore next */
          cov_13qbvwq1qw().b[13][0]++;
          cov_13qbvwq1qw().s[48]++;
          console.log(result.message);
        } else
        /* istanbul ignore next */
        {
          cov_13qbvwq1qw().b[13][1]++;
        }
        cov_13qbvwq1qw().s[49]++;
        return /* istanbul ignore next */(cov_13qbvwq1qw().b[14][0]++, result.exitCode) ||
        /* istanbul ignore next */
        (cov_13qbvwq1qw().b[14][1]++, 0);
      } else {
        /* istanbul ignore next */
        cov_13qbvwq1qw().b[12][1]++;
        cov_13qbvwq1qw().s[50]++;
        if (result.error) {
          /* istanbul ignore next */
          cov_13qbvwq1qw().b[15][0]++;
          cov_13qbvwq1qw().s[51]++;
          await this.errorHandler.handle(new Error(result.error), context);
        } else
        /* istanbul ignore next */
        {
          cov_13qbvwq1qw().b[15][1]++;
        }
        cov_13qbvwq1qw().s[52]++;
        return /* istanbul ignore next */(cov_13qbvwq1qw().b[16][0]++, result.exitCode) ||
        /* istanbul ignore next */
        (cov_13qbvwq1qw().b[16][1]++, 1);
      }
    } catch (error) {
      /* istanbul ignore next */
      cov_13qbvwq1qw().s[53]++;
      await this.errorHandler.handle(error instanceof Error ?
      /* istanbul ignore next */
      (cov_13qbvwq1qw().b[17][0]++, error) :
      /* istanbul ignore next */
      (cov_13qbvwq1qw().b[17][1]++, new Error(String(error))));
      /* istanbul ignore next */
      cov_13qbvwq1qw().s[54]++;
      return 1;
    }
  }
  /**
   * Parse command line arguments
   */
  parseArguments(argv) {
    /* istanbul ignore next */
    cov_13qbvwq1qw().f[3]++;
    const globalFlags =
    /* istanbul ignore next */
    (cov_13qbvwq1qw().s[55]++, {
      help: {
        type: 'boolean',
        shortFlag: 'h',
        description: 'Show help'
      },
      version: {
        type: 'boolean',
        shortFlag: 'v',
        description: 'Show version'
      },
      debug: {
        type: 'boolean',
        shortFlag: 'd',
        description: 'Enable debug mode'
      },
      verbose: {
        type: 'boolean',
        description: 'Enable verbose output'
      },
      config: {
        type: 'string',
        shortFlag: 'c',
        description: 'Configuration file path'
      },
      noColors: {
        type: 'boolean',
        description: 'Disable color output'
      },
      json: {
        type: 'boolean',
        description: 'Output in JSON format'
      },
      ...this.options.flags
    });
    /* istanbul ignore next */
    cov_13qbvwq1qw().s[56]++;
    return meow({
      description: this.options.description,
      flags: globalFlags,
      argv,
      importMeta: import.meta,
      autoHelp: false,
      // We'll handle help ourselves
      autoVersion: false // We'll handle version ourselves
    });
  }
  /**
   * Execute a command
   */
  async executeCommand(name, context) {
    /* istanbul ignore next */
    cov_13qbvwq1qw().f[4]++;
    cov_13qbvwq1qw().s[57]++;
    this.emit('command-start', {
      name,
      context
    });
    /* istanbul ignore next */
    cov_13qbvwq1qw().s[58]++;
    try {
      /* istanbul ignore next */
      cov_13qbvwq1qw().s[59]++;
      // Update error handler config from flags
      this.errorHandler.updateConfig({
        debug: context.debug,
        verbose: context.verbose,
        colors:
        /* istanbul ignore next */
        (cov_13qbvwq1qw().b[18][0]++, !context.flags.noColors) &&
        /* istanbul ignore next */
        (cov_13qbvwq1qw().b[18][1]++, this.config?.ui?.theme !== undefined)
      });
      const result =
      /* istanbul ignore next */
      (cov_13qbvwq1qw().s[60]++, await this.registry.execute(name, context));
      /* istanbul ignore next */
      cov_13qbvwq1qw().s[61]++;
      this.stats.commandsExecuted++;
      /* istanbul ignore next */
      cov_13qbvwq1qw().s[62]++;
      this.emit('command-complete', {
        name,
        result
      });
      /* istanbul ignore next */
      cov_13qbvwq1qw().s[63]++;
      return result;
    } catch (error) {
      /* istanbul ignore next */
      cov_13qbvwq1qw().s[64]++;
      this.stats.errorsHandled++;
      const commandError =
      /* istanbul ignore next */
      (cov_13qbvwq1qw().s[65]++, error instanceof Error ?
      /* istanbul ignore next */
      (cov_13qbvwq1qw().b[19][0]++, error) :
      /* istanbul ignore next */
      (cov_13qbvwq1qw().b[19][1]++, new Error(String(error))));
      /* istanbul ignore next */
      cov_13qbvwq1qw().s[66]++;
      this.emit('command-error', {
        name,
        error: commandError
      });
      /* istanbul ignore next */
      cov_13qbvwq1qw().s[67]++;
      return {
        success: false,
        error: commandError.message,
        exitCode: 1,
        executionTime: 0
      };
    }
  }
  /**
   * Show help information
   */
  showHelp(commandName) {
    /* istanbul ignore next */
    cov_13qbvwq1qw().f[5]++;
    cov_13qbvwq1qw().s[68]++;
    if (commandName) {
      /* istanbul ignore next */
      cov_13qbvwq1qw().b[20][0]++;
      // Show help for specific command
      const command =
      /* istanbul ignore next */
      (cov_13qbvwq1qw().s[69]++, this.registry.getCommand(commandName));
      /* istanbul ignore next */
      cov_13qbvwq1qw().s[70]++;
      if (command) {
        /* istanbul ignore next */
        cov_13qbvwq1qw().b[21][0]++;
        cov_13qbvwq1qw().s[71]++;
        console.log(command.getHelp());
        const examples =
        /* istanbul ignore next */
        (cov_13qbvwq1qw().s[72]++, command.getExamples());
        /* istanbul ignore next */
        cov_13qbvwq1qw().s[73]++;
        if (examples.length > 0) {
          /* istanbul ignore next */
          cov_13qbvwq1qw().b[22][0]++;
          cov_13qbvwq1qw().s[74]++;
          console.log('\\nExamples:');
          /* istanbul ignore next */
          cov_13qbvwq1qw().s[75]++;
          examples.forEach(example => {
            /* istanbul ignore next */
            cov_13qbvwq1qw().f[6]++;
            cov_13qbvwq1qw().s[76]++;
            console.log(`  ${example}`);
          });
        } else
        /* istanbul ignore next */
        {
          cov_13qbvwq1qw().b[22][1]++;
        }
      } else {
        /* istanbul ignore next */
        cov_13qbvwq1qw().b[21][1]++;
        cov_13qbvwq1qw().s[77]++;
        console.error(chalk.red(`Command '${commandName}' not found`));
        /* istanbul ignore next */
        cov_13qbvwq1qw().s[78]++;
        this.showAvailableCommands();
      }
    } else {
      /* istanbul ignore next */
      cov_13qbvwq1qw().b[20][1]++;
      cov_13qbvwq1qw().s[79]++;
      // Show general help
      this.showGeneralHelp();
    }
  }
  /**
   * Show general help
   */
  showGeneralHelp() {
    /* istanbul ignore next */
    cov_13qbvwq1qw().f[7]++;
    cov_13qbvwq1qw().s[80]++;
    console.log(chalk.bold(this.options.name), `v${this.options.version}`);
    /* istanbul ignore next */
    cov_13qbvwq1qw().s[81]++;
    console.log(this.options.description);
    /* istanbul ignore next */
    cov_13qbvwq1qw().s[82]++;
    console.log();
    /* istanbul ignore next */
    cov_13qbvwq1qw().s[83]++;
    console.log(chalk.bold('Usage:'));
    /* istanbul ignore next */
    cov_13qbvwq1qw().s[84]++;
    console.log(`  ${this.options.name} <command> [options]`);
    /* istanbul ignore next */
    cov_13qbvwq1qw().s[85]++;
    console.log();
    /* istanbul ignore next */
    cov_13qbvwq1qw().s[86]++;
    this.showAvailableCommands();
    /* istanbul ignore next */
    cov_13qbvwq1qw().s[87]++;
    console.log();
    /* istanbul ignore next */
    cov_13qbvwq1qw().s[88]++;
    console.log(chalk.bold('Global Options:'));
    /* istanbul ignore next */
    cov_13qbvwq1qw().s[89]++;
    console.log('  -h, --help     Show help');
    /* istanbul ignore next */
    cov_13qbvwq1qw().s[90]++;
    console.log('  -v, --version  Show version');
    /* istanbul ignore next */
    cov_13qbvwq1qw().s[91]++;
    console.log('  -d, --debug    Enable debug mode');
    /* istanbul ignore next */
    cov_13qbvwq1qw().s[92]++;
    console.log('  --verbose      Enable verbose output');
    /* istanbul ignore next */
    cov_13qbvwq1qw().s[93]++;
    console.log('  -c, --config   Configuration file path');
    /* istanbul ignore next */
    cov_13qbvwq1qw().s[94]++;
    console.log('  --noColors     Disable color output');
    /* istanbul ignore next */
    cov_13qbvwq1qw().s[95]++;
    console.log('  --json         Output in JSON format');
  }
  /**
   * Show available commands
   */
  showAvailableCommands() {
    /* istanbul ignore next */
    cov_13qbvwq1qw().f[8]++;
    const commands =
    /* istanbul ignore next */
    (cov_13qbvwq1qw().s[96]++, this.registry.list());
    /* istanbul ignore next */
    cov_13qbvwq1qw().s[97]++;
    if (commands.length === 0) {
      /* istanbul ignore next */
      cov_13qbvwq1qw().b[23][0]++;
      cov_13qbvwq1qw().s[98]++;
      console.log('No commands available');
      /* istanbul ignore next */
      cov_13qbvwq1qw().s[99]++;
      return;
    } else
    /* istanbul ignore next */
    {
      cov_13qbvwq1qw().b[23][1]++;
    }
    // Group commands by category
    const categories =
    /* istanbul ignore next */
    (cov_13qbvwq1qw().s[100]++, new Map());
    /* istanbul ignore next */
    cov_13qbvwq1qw().s[101]++;
    for (const command of commands) {
      const category =
      /* istanbul ignore next */
      (cov_13qbvwq1qw().s[102]++,
      /* istanbul ignore next */
      (cov_13qbvwq1qw().b[24][0]++, command.config.category) ||
      /* istanbul ignore next */
      (cov_13qbvwq1qw().b[24][1]++, 'General'));
      /* istanbul ignore next */
      cov_13qbvwq1qw().s[103]++;
      if (!categories.has(category)) {
        /* istanbul ignore next */
        cov_13qbvwq1qw().b[25][0]++;
        cov_13qbvwq1qw().s[104]++;
        categories.set(category, []);
      } else
      /* istanbul ignore next */
      {
        cov_13qbvwq1qw().b[25][1]++;
      }
      cov_13qbvwq1qw().s[105]++;
      categories.get(category).push(command);
    }
    /* istanbul ignore next */
    cov_13qbvwq1qw().s[106]++;
    console.log(chalk.bold('Available Commands:'));
    /* istanbul ignore next */
    cov_13qbvwq1qw().s[107]++;
    for (const [category, categoryCommands] of categories) {
      /* istanbul ignore next */
      cov_13qbvwq1qw().s[108]++;
      console.log();
      /* istanbul ignore next */
      cov_13qbvwq1qw().s[109]++;
      console.log(chalk.yellow(category + ':'));
      /* istanbul ignore next */
      cov_13qbvwq1qw().s[110]++;
      for (const command of categoryCommands.sort((a, b) => {
        /* istanbul ignore next */
        cov_13qbvwq1qw().f[9]++;
        cov_13qbvwq1qw().s[111]++;
        return a.config.name.localeCompare(b.config.name);
      })) {
        const deprecated =
        /* istanbul ignore next */
        (cov_13qbvwq1qw().s[112]++, command.config.deprecated ?
        /* istanbul ignore next */
        (cov_13qbvwq1qw().b[26][0]++, chalk.red(' (deprecated)')) :
        /* istanbul ignore next */
        (cov_13qbvwq1qw().b[26][1]++, ''));
        /* istanbul ignore next */
        cov_13qbvwq1qw().s[113]++;
        console.log(`  ${chalk.green(command.config.name.padEnd(20))} ${command.config.description}${deprecated}`);
      }
    }
  }
  /**
   * Load configuration
   */
  async loadConfiguration() {
    /* istanbul ignore next */
    cov_13qbvwq1qw().f[10]++;
    cov_13qbvwq1qw().s[114]++;
    this.spinner.start('Loading configuration...');
    /* istanbul ignore next */
    cov_13qbvwq1qw().s[115]++;
    try {
      /* istanbul ignore next */
      cov_13qbvwq1qw().s[116]++;
      this.config = await this.configLoader.load({
        configFiles: this.options.config?.files,
        envPrefix: this.options.config?.envPrefix,
        createDefault: this.options.config?.createDefault
      });
      /* istanbul ignore next */
      cov_13qbvwq1qw().s[117]++;
      this.spinner.succeed('Configuration loaded');
      /* istanbul ignore next */
      cov_13qbvwq1qw().s[118]++;
      this.emit('config-loaded', this.config);
    } catch (error) {
      /* istanbul ignore next */
      cov_13qbvwq1qw().s[119]++;
      this.spinner.fail('Failed to load configuration');
      /* istanbul ignore next */
      cov_13qbvwq1qw().s[120]++;
      throw error;
    }
  }
  /**
   * Load plugins
   */
  async loadPlugins() {
    /* istanbul ignore next */
    cov_13qbvwq1qw().f[11]++;
    cov_13qbvwq1qw().s[121]++;
    if (
    /* istanbul ignore next */
    (cov_13qbvwq1qw().b[28][0]++, !this.options.pluginPaths) ||
    /* istanbul ignore next */
    (cov_13qbvwq1qw().b[28][1]++, this.options.pluginPaths.length === 0)) {
      /* istanbul ignore next */
      cov_13qbvwq1qw().b[27][0]++;
      cov_13qbvwq1qw().s[122]++;
      return;
    } else
    /* istanbul ignore next */
    {
      cov_13qbvwq1qw().b[27][1]++;
    }
    cov_13qbvwq1qw().s[123]++;
    this.spinner.start('Loading plugins...');
    /* istanbul ignore next */
    cov_13qbvwq1qw().s[124]++;
    try {
      /* istanbul ignore next */
      cov_13qbvwq1qw().s[125]++;
      // This is a simplified plugin loading implementation
      // In a real implementation, you would scan the plugin paths and load actual plugins
      this.spinner.succeed(`Loaded ${this.stats.pluginsLoaded} plugins`);
      /* istanbul ignore next */
      cov_13qbvwq1qw().s[126]++;
      this.emit('plugins-loaded', this.stats.pluginsLoaded);
    } catch (error) {
      /* istanbul ignore next */
      cov_13qbvwq1qw().s[127]++;
      this.spinner.fail('Failed to load plugins');
      /* istanbul ignore next */
      cov_13qbvwq1qw().s[128]++;
      throw error;
    }
  }
  /**
   * Setup event handlers
   */
  setupEventHandlers() {
    /* istanbul ignore next */
    cov_13qbvwq1qw().f[12]++;
    cov_13qbvwq1qw().s[129]++;
    // Registry events
    this.registry.on('command-registered', data => {
      /* istanbul ignore next */
      cov_13qbvwq1qw().f[13]++;
      cov_13qbvwq1qw().s[130]++;
      this.emit('command-registered', data);
    });
    /* istanbul ignore next */
    cov_13qbvwq1qw().s[131]++;
    this.registry.on('command-executing', data => {
      /* istanbul ignore next */
      cov_13qbvwq1qw().f[14]++;
      cov_13qbvwq1qw().s[132]++;
      if (this.config?.defaults.verbose) {
        /* istanbul ignore next */
        cov_13qbvwq1qw().b[29][0]++;
        cov_13qbvwq1qw().s[133]++;
        console.log(chalk.gray(`Executing command: ${data.name}`));
      } else
      /* istanbul ignore next */
      {
        cov_13qbvwq1qw().b[29][1]++;
      }
    });
    /* istanbul ignore next */
    cov_13qbvwq1qw().s[134]++;
    this.registry.on('command-executed', data => {
      /* istanbul ignore next */
      cov_13qbvwq1qw().f[15]++;
      cov_13qbvwq1qw().s[135]++;
      if (this.config?.defaults.debug) {
        /* istanbul ignore next */
        cov_13qbvwq1qw().b[30][0]++;
        cov_13qbvwq1qw().s[136]++;
        console.log(chalk.gray(`Command completed in ${data.result.executionTime}ms`));
      } else
      /* istanbul ignore next */
      {
        cov_13qbvwq1qw().b[30][1]++;
      }
    });
  }
  /**
   * Setup global error handlers
   */
  setupErrorHandlers() {
    /* istanbul ignore next */
    cov_13qbvwq1qw().f[16]++;
    cov_13qbvwq1qw().s[137]++;
    this.errorHandler.setupGlobalHandlers();
  }
  /**
   * Register a command
   */
  registerCommand(command) {
    /* istanbul ignore next */
    cov_13qbvwq1qw().f[17]++;
    cov_13qbvwq1qw().s[138]++;
    this.registry.registerCommand(command);
  }
  /**
   * Register a plugin
   */
  async registerPlugin(plugin) {
    /* istanbul ignore next */
    cov_13qbvwq1qw().f[18]++;
    cov_13qbvwq1qw().s[139]++;
    await this.registry.registerPlugin(plugin);
    /* istanbul ignore next */
    cov_13qbvwq1qw().s[140]++;
    this.stats.pluginsLoaded++;
  }
  /**
   * Get application statistics
   */
  getStats() {
    /* istanbul ignore next */
    cov_13qbvwq1qw().f[19]++;
    cov_13qbvwq1qw().s[141]++;
    return {
      ...this.stats,
      uptime: Date.now() - this.stats.startTime
    };
  }
  /**
   * Get current configuration
   */
  getConfig() {
    /* istanbul ignore next */
    cov_13qbvwq1qw().f[20]++;
    cov_13qbvwq1qw().s[142]++;
    return this.config;
  }
  /**
   * Get command registry
   */
  getRegistry() {
    /* istanbul ignore next */
    cov_13qbvwq1qw().f[21]++;
    cov_13qbvwq1qw().s[143]++;
    return this.registry;
  }
  /**
   * Get error handler
   */
  getErrorHandler() {
    /* istanbul ignore next */
    cov_13qbvwq1qw().f[22]++;
    cov_13qbvwq1qw().s[144]++;
    return this.errorHandler;
  }
  /**
   * Check if application is initialized
   */
  isReady() {
    /* istanbul ignore next */
    cov_13qbvwq1qw().f[23]++;
    cov_13qbvwq1qw().s[145]++;
    return this.isInitialized;
  }
  /**
   * Graceful shutdown
   */
  async shutdown() {
    /* istanbul ignore next */
    cov_13qbvwq1qw().f[24]++;
    cov_13qbvwq1qw().s[146]++;
    this.emit('shutting-down');
    /* istanbul ignore next */
    cov_13qbvwq1qw().s[147]++;
    try {
      /* istanbul ignore next */
      cov_13qbvwq1qw().s[148]++;
      // Dispose of registry
      await this.registry.dispose();
      // Clean up resources
      /* istanbul ignore next */
      cov_13qbvwq1qw().s[149]++;
      this.removeAllListeners();
      /* istanbul ignore next */
      cov_13qbvwq1qw().s[150]++;
      this.emit('shutdown-complete');
    } catch (error) {
      /* istanbul ignore next */
      cov_13qbvwq1qw().s[151]++;
      this.emit('shutdown-error', error);
      /* istanbul ignore next */
      cov_13qbvwq1qw().s[152]++;
      throw error;
    }
  }
  /**
   * Create a new CLI application instance
   */
  static create(options) {
    /* istanbul ignore next */
    cov_13qbvwq1qw().f[25]++;
    cov_13qbvwq1qw().s[153]++;
    return new CliApp(options);
  }
  /**
   * Run a CLI application with error handling
   */
  static async runApp(options, argv) {
    /* istanbul ignore next */
    cov_13qbvwq1qw().f[26]++;
    const app =
    /* istanbul ignore next */
    (cov_13qbvwq1qw().s[154]++, new CliApp(options));
    /* istanbul ignore next */
    cov_13qbvwq1qw().s[155]++;
    try {
      const exitCode =
      /* istanbul ignore next */
      (cov_13qbvwq1qw().s[156]++, await app.run(argv));
      /* istanbul ignore next */
      cov_13qbvwq1qw().s[157]++;
      await app.shutdown();
      /* istanbul ignore next */
      cov_13qbvwq1qw().s[158]++;
      return exitCode;
    } catch (error) {
      /* istanbul ignore next */
      cov_13qbvwq1qw().s[159]++;
      console.error(chalk.red('Fatal error:'), error instanceof Error ?
      /* istanbul ignore next */
      (cov_13qbvwq1qw().b[31][0]++, error.message) :
      /* istanbul ignore next */
      (cov_13qbvwq1qw().b[31][1]++, String(error)));
      /* istanbul ignore next */
      cov_13qbvwq1qw().s[160]++;
      try {
        /* istanbul ignore next */
        cov_13qbvwq1qw().s[161]++;
        await app.shutdown();
      } catch (shutdownError) {
        // Ignore shutdown errors during fatal error handling
      }
      /* istanbul ignore next */
      cov_13qbvwq1qw().s[162]++;
      return 1;
    }
  }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,