{"version":3,"names":["cov_p1cfn8fhv","actualCoverage","promises","fs","join","dirname","resolve","tmpdir","RealFileSystemTestHelper","tempDirs","s","createdFiles","watchers","createTempDir","prefix","b","f","tempPath","Date","now","Math","random","toString","substring","mkdir","recursive","push","createFile","path","content","dir","writeFile","createDirectory","readFile","fileExists","access","deleteFile","unlink","index","indexOf","splice","error","deleteDirectory","rm","force","listFiles","entries","readdir","withFileTypes","filter","entry","isFile","map","name","copyFile","src","dest","destDir","moveFile","rename","srcIndex","getFileStats","stats","stat","size","mtime","ctime","isDirectory","mode","watchFile","callback","watcher","startWatching","watch","on","event","stopWatching","close","unwatch","createSymlink","target","link","linkDir","symlink","cleanup","forEach","stop","Promise","allSettled","file","MockFileSystemTestHelper","files","Map","directories","Set","add","normalizedPath","normalizePath","set","triggerWatchers","get","undefined","Error","has","delete","pathPrefix","filePath","keys","startsWith","dirPath","relativePath","length","includes","sort","callbacks","clear","getAllFiles","result","getAllDirectories","Array","from","simulateFileEvent","replace","createRealFileSystemHelper","createMockFileSystemHelper","createTestProject","helper","projectName","projectDir","Object","fullPath","createTestWorkspace","workspaceName","workspaceDir","srcDir","testDir","configDir","all"],"sources":["/home/mhugo/code/claude-code-flow/src/__tests__/helpers/filesystem-test-helper.ts"],"sourcesContent":["/**\n * File System Test Helper - File System Testing Utilities\n * \n * Comprehensive file system testing support for both mocked and real environments\n */\n\nimport { promises as fs } from 'fs';\nimport { join, dirname, relative, resolve } from 'path';\nimport { tmpdir } from 'os';\n\nexport interface FileSystemTestHelper {\n  createTempDir(prefix?: string): Promise<string>;\n  createFile(path: string, content: string): Promise<void>;\n  createDirectory(path: string): Promise<void>;\n  readFile(path: string): Promise<string>;\n  fileExists(path: string): Promise<boolean>;\n  deleteFile(path: string): Promise<void>;\n  deleteDirectory(path: string): Promise<void>;\n  listFiles(path: string): Promise<string[]>;\n  copyFile(src: string, dest: string): Promise<void>;\n  moveFile(src: string, dest: string): Promise<void>;\n  getFileStats(path: string): Promise<any>;\n  watchFile(path: string, callback: (event: string) => void): () => void;\n  createSymlink(target: string, link: string): Promise<void>;\n  cleanup(): Promise<void>;\n}\n\nexport class RealFileSystemTestHelper implements FileSystemTestHelper {\n  private tempDirs: string[] = [];\n  private createdFiles: string[] = [];\n  private watchers: Array<() => void> = [];\n\n  async createTempDir(prefix: string = 'test'): Promise<string> {\n    const tempPath = join(\n      tmpdir(), \n      `claude-test-${prefix}-${Date.now()}-${Math.random().toString(36).substring(2)}`\n    );\n    \n    await fs.mkdir(tempPath, { recursive: true });\n    this.tempDirs.push(tempPath);\n    return tempPath;\n  }\n\n  async createFile(path: string, content: string): Promise<void> {\n    const dir = dirname(path);\n    await fs.mkdir(dir, { recursive: true });\n    await fs.writeFile(path, content, 'utf8');\n    this.createdFiles.push(path);\n  }\n\n  async createDirectory(path: string): Promise<void> {\n    await fs.mkdir(path, { recursive: true });\n    this.tempDirs.push(path);\n  }\n\n  async readFile(path: string): Promise<string> {\n    return fs.readFile(path, 'utf8');\n  }\n\n  async fileExists(path: string): Promise<boolean> {\n    try {\n      await fs.access(path);\n      return true;\n    } catch {\n      return false;\n    }\n  }\n\n  async deleteFile(path: string): Promise<void> {\n    try {\n      await fs.unlink(path);\n      const index = this.createdFiles.indexOf(path);\n      if (index > -1) {\n        this.createdFiles.splice(index, 1);\n      }\n    } catch (error) {\n      // File might not exist\n    }\n  }\n\n  async deleteDirectory(path: string): Promise<void> {\n    try {\n      await fs.rm(path, { recursive: true, force: true });\n      const index = this.tempDirs.indexOf(path);\n      if (index > -1) {\n        this.tempDirs.splice(index, 1);\n      }\n    } catch (error) {\n      // Directory might not exist\n    }\n  }\n\n  async listFiles(path: string): Promise<string[]> {\n    try {\n      const entries = await fs.readdir(path, { withFileTypes: true });\n      return entries\n        .filter(entry => entry.isFile())\n        .map(entry => join(path, entry.name));\n    } catch {\n      return [];\n    }\n  }\n\n  async copyFile(src: string, dest: string): Promise<void> {\n    const destDir = dirname(dest);\n    await fs.mkdir(destDir, { recursive: true });\n    await fs.copyFile(src, dest);\n    this.createdFiles.push(dest);\n  }\n\n  async moveFile(src: string, dest: string): Promise<void> {\n    const destDir = dirname(dest);\n    await fs.mkdir(destDir, { recursive: true });\n    await fs.rename(src, dest);\n    \n    const srcIndex = this.createdFiles.indexOf(src);\n    if (srcIndex > -1) {\n      this.createdFiles[srcIndex] = dest;\n    } else {\n      this.createdFiles.push(dest);\n    }\n  }\n\n  async getFileStats(path: string): Promise<any> {\n    const stats = await fs.stat(path);\n    return {\n      size: stats.size,\n      mtime: stats.mtime,\n      ctime: stats.ctime,\n      isFile: stats.isFile(),\n      isDirectory: stats.isDirectory(),\n      mode: stats.mode\n    };\n  }\n\n  watchFile(path: string, callback: (event: string) => void): () => void {\n    let watcher: any = null;\n    \n    const startWatching = async () => {\n      try {\n        const { watch } = await import('chokidar');\n        watcher = watch(path);\n        watcher.on('all', (event: string) => callback(event));\n      } catch {\n        // Fallback to basic fs.watch if chokidar not available\n        try {\n          watcher = fs.watch(path, (event) => callback(event));\n        } catch {\n          // File watching not available\n        }\n      }\n    };\n\n    startWatching();\n\n    const stopWatching = () => {\n      if (watcher) {\n        if (typeof watcher.close === 'function') {\n          watcher.close();\n        } else if (typeof watcher.unwatch === 'function') {\n          watcher.unwatch(path);\n        }\n      }\n    };\n\n    this.watchers.push(stopWatching);\n    return stopWatching;\n  }\n\n  async createSymlink(target: string, link: string): Promise<void> {\n    const linkDir = dirname(link);\n    await fs.mkdir(linkDir, { recursive: true });\n    await fs.symlink(target, link);\n    this.createdFiles.push(link);\n  }\n\n  async cleanup(): Promise<void> {\n    // Stop all watchers\n    this.watchers.forEach(stop => {\n      try {\n        stop();\n      } catch {\n        // Ignore errors when stopping watchers\n      }\n    });\n    this.watchers = [];\n\n    // Clean up created files\n    await Promise.allSettled(\n      this.createdFiles.map(file => this.deleteFile(file))\n    );\n    this.createdFiles = [];\n\n    // Clean up temp directories\n    await Promise.allSettled(\n      this.tempDirs.map(dir => this.deleteDirectory(dir))\n    );\n    this.tempDirs = [];\n  }\n}\n\nexport class MockFileSystemTestHelper implements FileSystemTestHelper {\n  private files = new Map<string, string>();\n  private directories = new Set<string>();\n  private watchers = new Map<string, Array<(event: string) => void>>();\n\n  async createTempDir(prefix: string = 'test'): Promise<string> {\n    const tempPath = `/mock/temp/${prefix}-${Date.now()}`;\n    this.directories.add(tempPath);\n    return tempPath;\n  }\n\n  async createFile(path: string, content: string): Promise<void> {\n    const normalizedPath = this.normalizePath(path);\n    this.files.set(normalizedPath, content);\n    \n    // Ensure parent directories exist\n    const dir = dirname(normalizedPath);\n    if (dir !== normalizedPath) {\n      this.directories.add(dir);\n    }\n\n    this.triggerWatchers(normalizedPath, 'add');\n  }\n\n  async createDirectory(path: string): Promise<void> {\n    const normalizedPath = this.normalizePath(path);\n    this.directories.add(normalizedPath);\n  }\n\n  async readFile(path: string): Promise<string> {\n    const normalizedPath = this.normalizePath(path);\n    const content = this.files.get(normalizedPath);\n    \n    if (content === undefined) {\n      throw new Error(`ENOENT: no such file or directory, open '${path}'`);\n    }\n    \n    return content;\n  }\n\n  async fileExists(path: string): Promise<boolean> {\n    const normalizedPath = this.normalizePath(path);\n    return this.files.has(normalizedPath) || this.directories.has(normalizedPath);\n  }\n\n  async deleteFile(path: string): Promise<void> {\n    const normalizedPath = this.normalizePath(path);\n    if (this.files.delete(normalizedPath)) {\n      this.triggerWatchers(normalizedPath, 'unlink');\n    }\n  }\n\n  async deleteDirectory(path: string): Promise<void> {\n    const normalizedPath = this.normalizePath(path);\n    \n    // Remove the directory\n    this.directories.delete(normalizedPath);\n    \n    // Remove all files and subdirectories under this path\n    const pathPrefix = normalizedPath + '/';\n    \n    for (const filePath of this.files.keys()) {\n      if (filePath.startsWith(pathPrefix)) {\n        this.files.delete(filePath);\n      }\n    }\n    \n    for (const dirPath of this.directories) {\n      if (dirPath.startsWith(pathPrefix)) {\n        this.directories.delete(dirPath);\n      }\n    }\n  }\n\n  async listFiles(path: string): Promise<string[]> {\n    const normalizedPath = this.normalizePath(path);\n    const pathPrefix = normalizedPath === '/' ? '' : normalizedPath + '/';\n    const files: string[] = [];\n    \n    for (const filePath of this.files.keys()) {\n      if (filePath.startsWith(pathPrefix)) {\n        const relativePath = filePath.substring(pathPrefix.length);\n        if (relativePath && !relativePath.includes('/')) {\n          files.push(filePath);\n        }\n      }\n    }\n    \n    return files.sort();\n  }\n\n  async copyFile(src: string, dest: string): Promise<void> {\n    const content = await this.readFile(src);\n    await this.createFile(dest, content);\n  }\n\n  async moveFile(src: string, dest: string): Promise<void> {\n    const content = await this.readFile(src);\n    await this.createFile(dest, content);\n    await this.deleteFile(src);\n  }\n\n  async getFileStats(path: string): Promise<any> {\n    const normalizedPath = this.normalizePath(path);\n    \n    if (!this.fileExists(normalizedPath)) {\n      throw new Error(`ENOENT: no such file or directory, stat '${path}'`);\n    }\n    \n    const isFile = this.files.has(normalizedPath);\n    const isDirectory = this.directories.has(normalizedPath);\n    const content = this.files.get(normalizedPath) || '';\n    \n    return {\n      size: content.length,\n      mtime: new Date(),\n      ctime: new Date(),\n      isFile,\n      isDirectory,\n      mode: isFile ? 0o644 : 0o755\n    };\n  }\n\n  watchFile(path: string, callback: (event: string) => void): () => void {\n    const normalizedPath = this.normalizePath(path);\n    \n    if (!this.watchers.has(normalizedPath)) {\n      this.watchers.set(normalizedPath, []);\n    }\n    \n    this.watchers.get(normalizedPath)!.push(callback);\n    \n    return () => {\n      const callbacks = this.watchers.get(normalizedPath);\n      if (callbacks) {\n        const index = callbacks.indexOf(callback);\n        if (index > -1) {\n          callbacks.splice(index, 1);\n        }\n        \n        if (callbacks.length === 0) {\n          this.watchers.delete(normalizedPath);\n        }\n      }\n    };\n  }\n\n  async createSymlink(target: string, link: string): Promise<void> {\n    // For mock filesystem, just create a file with special content\n    await this.createFile(link, `__SYMLINK__:${target}`);\n  }\n\n  async cleanup(): Promise<void> {\n    this.files.clear();\n    this.directories.clear();\n    this.watchers.clear();\n  }\n\n  // Mock-specific methods\n  \n  /**\n   * Get all files in the mock filesystem\n   */\n  getAllFiles(): Record<string, string> {\n    const result: Record<string, string> = {};\n    for (const [path, content] of this.files.entries()) {\n      result[path] = content;\n    }\n    return result;\n  }\n\n  /**\n   * Get all directories in the mock filesystem\n   */\n  getAllDirectories(): string[] {\n    return Array.from(this.directories).sort();\n  }\n\n  /**\n   * Simulate file system events\n   */\n  simulateFileEvent(path: string, event: string): void {\n    this.triggerWatchers(path, event);\n  }\n\n  private normalizePath(path: string): string {\n    return resolve(path).replace(/\\\\/g, '/');\n  }\n\n  private triggerWatchers(path: string, event: string): void {\n    const callbacks = this.watchers.get(path);\n    if (callbacks) {\n      callbacks.forEach(callback => {\n        try {\n          callback(event);\n        } catch (error) {\n          // Ignore callback errors\n        }\n      });\n    }\n  }\n}\n\n// Factory functions\nexport function createRealFileSystemHelper(): FileSystemTestHelper {\n  return new RealFileSystemTestHelper();\n}\n\nexport function createMockFileSystemHelper(): FileSystemTestHelper {\n  return new MockFileSystemTestHelper();\n}\n\n// Helper functions for common patterns\nexport async function createTestProject(\n  helper: FileSystemTestHelper,\n  projectName: string,\n  files: Record<string, string>\n): Promise<string> {\n  const projectDir = await helper.createTempDir(projectName);\n  \n  for (const [filePath, content] of Object.entries(files)) {\n    const fullPath = join(projectDir, filePath);\n    await helper.createFile(fullPath, content);\n  }\n  \n  return projectDir;\n}\n\nexport async function createTestWorkspace(\n  helper: FileSystemTestHelper,\n  workspaceName: string\n): Promise<{\n  workspaceDir: string;\n  srcDir: string;\n  testDir: string;\n  configDir: string;\n}> {\n  const workspaceDir = await helper.createTempDir(workspaceName);\n  const srcDir = join(workspaceDir, 'src');\n  const testDir = join(workspaceDir, 'tests');\n  const configDir = join(workspaceDir, 'config');\n  \n  await Promise.all([\n    helper.createDirectory(srcDir),\n    helper.createDirectory(testDir),\n    helper.createDirectory(configDir)\n  ]);\n  \n  return { workspaceDir, srcDir, testDir, configDir };\n}"],"mappingsuCQ;IAAAA,aAAA,YAAAA,CAAA;MAAA,OAAAC,cAAA;IAAA;EAAA;EAAA,OAAAA,cAAA;AAAA;AAAAD,aAAA;AAvCR;;;;;AAMA,SAASE,QAAQ,IAAIC,EAAE,QAAQ,IAAI;AACnC,SAASC,IAAI,EAAEC,OAAO,EAAYC,OAAO,QAAQ,MAAM;AACvD,SAASC,MAAM,QAAQ,IAAI;AAmB3B,OAAM,MAAOC,wBAAwB;EAC3BC,QAAQ;EAAA;EAAA,CAAAT,aAAA,GAAAU,CAAA,OAAa,EAAE;EACvBC,YAAY;EAAA;EAAA,CAAAX,aAAA,GAAAU,CAAA,OAAa,EAAE;EAC3BE,QAAQ;EAAA;EAAA,CAAAZ,aAAA,GAAAU,CAAA,OAAsB,EAAE;EAExC,MAAMG,aAAaA,CAACC,MAAA;EAAA;EAAA,CAAAd,aAAA,GAAAe,CAAA,UAAiB,MAAM;IAAA;IAAAf,aAAA,GAAAgB,CAAA;IACzC,MAAMC,QAAQ;IAAA;IAAA,CAAAjB,aAAA,GAAAU,CAAA,OAAGN,IAAI,CACnBG,MAAM,EAAE,EACR,eAAeO,MAAM,IAAII,IAAI,CAACC,GAAG,EAAE,IAAIC,IAAI,CAACC,MAAM,EAAE,CAACC,QAAQ,CAAC,EAAE,CAAC,CAACC,SAAS,CAAC,CAAC,CAAC,EAAE,CACjF;IAAC;IAAAvB,aAAA,GAAAU,CAAA;IAEF,MAAMP,EAAE,CAACqB,KAAK,CAACP,QAAQ,EAAE;MAAEQ,SAAS,EAAE;IAAI,CAAE,CAAC;IAAC;IAAAzB,aAAA,GAAAU,CAAA;IAC9C,IAAI,CAACD,QAAQ,CAACiB,IAAI,CAACT,QAAQ,CAAC;IAAC;IAAAjB,aAAA,GAAAU,CAAA;IAC7B,OAAOO,QAAQ;EACjB;EAEA,MAAMU,UAAUA,CAACC,IAAY,EAAEC,OAAe;IAAA;IAAA7B,aAAA,GAAAgB,CAAA;IAC5C,MAAMc,GAAG;IAAA;IAAA,CAAA9B,aAAA,GAAAU,CAAA,OAAGL,OAAO,CAACuB,IAAI,CAAC;IAAC;IAAA5B,aAAA,GAAAU,CAAA;IAC1B,MAAMP,EAAE,CAACqB,KAAK,CAACM,GAAG,EAAE;MAAEL,SAAS,EAAE;IAAI,CAAE,CAAC;IAAC;IAAAzB,aAAA,GAAAU,CAAA;IACzC,MAAMP,EAAE,CAAC4B,SAAS,CAACH,IAAI,EAAEC,OAAO,EAAE,MAAM,CAAC;IAAC;IAAA7B,aAAA,GAAAU,CAAA;IAC1C,IAAI,CAACC,YAAY,CAACe,IAAI,CAACE,IAAI,CAAC;EAC9B;EAEA,MAAMI,eAAeA,CAACJ,IAAY;IAAA;IAAA5B,aAAA,GAAAgB,CAAA;IAAAhB,aAAA,GAAAU,CAAA;IAChC,MAAMP,EAAE,CAACqB,KAAK,CAACI,IAAI,EAAE;MAAEH,SAAS,EAAE;IAAI,CAAE,CAAC;IAAC;IAAAzB,aAAA,GAAAU,CAAA;IAC1C,IAAI,CAACD,QAAQ,CAACiB,IAAI,CAACE,IAAI,CAAC;EAC1B;EAEA,MAAMK,QAAQA,CAACL,IAAY;IAAA;IAAA5B,aAAA,GAAAgB,CAAA;IAAAhB,aAAA,GAAAU,CAAA;IACzB,OAAOP,EAAE,CAAC8B,QAAQ,CAACL,IAAI,EAAE,MAAM,CAAC;EAClC;EAEA,MAAMM,UAAUA,CAACN,IAAY;IAAA;IAAA5B,aAAA,GAAAgB,CAAA;IAAAhB,aAAA,GAAAU,CAAA;IAC3B,IAAI;MAAA;MAAAV,aAAA,GAAAU,CAAA;MACF,MAAMP,EAAE,CAACgC,MAAM,CAACP,IAAI,CAAC;MAAC;MAAA5B,aAAA,GAAAU,CAAA;MACtB,OAAO,IAAI;IACb,CAAC,CAAC,MAAM;MAAA;MAAAV,aAAA,GAAAU,CAAA;MACN,OAAO,KAAK;IACd;EACF;EAEA,MAAM0B,UAAUA,CAACR,IAAY;IAAA;IAAA5B,aAAA,GAAAgB,CAAA;IAAAhB,aAAA,GAAAU,CAAA;IAC3B,IAAI;MAAA;MAAAV,aAAA,GAAAU,CAAA;MACF,MAAMP,EAAE,CAACkC,MAAM,CAACT,IAAI,CAAC;MACrB,MAAMU,KAAK;MAAA;MAAA,CAAAtC,aAAA,GAAAU,CAAA,QAAG,IAAI,CAACC,YAAY,CAAC4B,OAAO,CAACX,IAAI,CAAC;MAAC;MAAA5B,aAAA,GAAAU,CAAA;MAC9C,IAAI4B,KAAK,GAAG,CAAC,CAAC,EAAE;QAAA;QAAAtC,aAAA,GAAAe,CAAA;QAAAf,aAAA,GAAAU,CAAA;QACd,IAAI,CAACC,YAAY,CAAC6B,MAAM,CAACF,KAAK,EAAE,CAAC,CAAC;MACpC,CAAC;MAAA;MAAA;QAAAtC,aAAA,GAAAe,CAAA;MAAA;IACH,CAAC,CAAC,OAAO0B,KAAK,EAAE;MACd;IAAA;EAEJ;EAEA,MAAMC,eAAeA,CAACd,IAAY;IAAA;IAAA5B,aAAA,GAAAgB,CAAA;IAAAhB,aAAA,GAAAU,CAAA;IAChC,IAAI;MAAA;MAAAV,aAAA,GAAAU,CAAA;MACF,MAAMP,EAAE,CAACwC,EAAE,CAACf,IAAI,EAAE;QAAEH,SAAS,EAAE,IAAI;QAAEmB,KAAK,EAAE;MAAI,CAAE,CAAC;MACnD,MAAMN,KAAK;MAAA;MAAA,CAAAtC,aAAA,GAAAU,CAAA,QAAG,IAAI,CAACD,QAAQ,CAAC8B,OAAO,CAACX,IAAI,CAAC;MAAC;MAAA5B,aAAA,GAAAU,CAAA;MAC1C,IAAI4B,KAAK,GAAG,CAAC,CAAC,EAAE;QAAA;QAAAtC,aAAA,GAAAe,CAAA;QAAAf,aAAA,GAAAU,CAAA;QACd,IAAI,CAACD,QAAQ,CAAC+B,MAAM,CAACF,KAAK,EAAE,CAAC,CAAC;MAChC,CAAC;MAAA;MAAA;QAAAtC,aAAA,GAAAe,CAAA;MAAA;IACH,CAAC,CAAC,OAAO0B,KAAK,EAAE;MACd;IAAA;EAEJ;EAEA,MAAMI,SAASA,CAACjB,IAAY;IAAA;IAAA5B,aAAA,GAAAgB,CAAA;IAAAhB,aAAA,GAAAU,CAAA;IAC1B,IAAI;MACF,MAAMoC,OAAO;MAAA;MAAA,CAAA9C,aAAA,GAAAU,CAAA,QAAG,MAAMP,EAAE,CAAC4C,OAAO,CAACnB,IAAI,EAAE;QAAEoB,aAAa,EAAE;MAAI,CAAE,CAAC;MAAC;MAAAhD,aAAA,GAAAU,CAAA;MAChE,OAAOoC,OAAO,CACXG,MAAM,CAACC,KAAK,IAAI;QAAA;QAAAlD,aAAA,GAAAgB,CAAA;QAAAhB,aAAA,GAAAU,CAAA;QAAA,OAAAwC,KAAK,CAACC,MAAM,EAAE;MAAF,CAAE,CAAC,CAC/BC,GAAG,CAACF,KAAK,IAAI;QAAA;QAAAlD,aAAA,GAAAgB,CAAA;QAAAhB,aAAA,GAAAU,CAAA;QAAA,OAAAN,IAAI,CAACwB,IAAI,EAAEsB,KAAK,CAACG,IAAI,CAAC;MAAD,CAAC,CAAC;IACzC,CAAC,CAAC,MAAM;MAAA;MAAArD,aAAA,GAAAU,CAAA;MACN,OAAO,EAAE;IACX;EACF;EAEA,MAAM4C,QAAQA,CAACC,GAAW,EAAEC,IAAY;IAAA;IAAAxD,aAAA,GAAAgB,CAAA;IACtC,MAAMyC,OAAO;IAAA;IAAA,CAAAzD,aAAA,GAAAU,CAAA,QAAGL,OAAO,CAACmD,IAAI,CAAC;IAAC;IAAAxD,aAAA,GAAAU,CAAA;IAC9B,MAAMP,EAAE,CAACqB,KAAK,CAACiC,OAAO,EAAE;MAAEhC,SAAS,EAAE;IAAI,CAAE,CAAC;IAAC;IAAAzB,aAAA,GAAAU,CAAA;IAC7C,MAAMP,EAAE,CAACmD,QAAQ,CAACC,GAAG,EAAEC,IAAI,CAAC;IAAC;IAAAxD,aAAA,GAAAU,CAAA;IAC7B,IAAI,CAACC,YAAY,CAACe,IAAI,CAAC8B,IAAI,CAAC;EAC9B;EAEA,MAAME,QAAQA,CAACH,GAAW,EAAEC,IAAY;IAAA;IAAAxD,aAAA,GAAAgB,CAAA;IACtC,MAAMyC,OAAO;IAAA;IAAA,CAAAzD,aAAA,GAAAU,CAAA,QAAGL,OAAO,CAACmD,IAAI,CAAC;IAAC;IAAAxD,aAAA,GAAAU,CAAA;IAC9B,MAAMP,EAAE,CAACqB,KAAK,CAACiC,OAAO,EAAE;MAAEhC,SAAS,EAAE;IAAI,CAAE,CAAC;IAAC;IAAAzB,aAAA,GAAAU,CAAA;IAC7C,MAAMP,EAAE,CAACwD,MAAM,CAACJ,GAAG,EAAEC,IAAI,CAAC;IAE1B,MAAMI,QAAQ;IAAA;IAAA,CAAA5D,aAAA,GAAAU,CAAA,QAAG,IAAI,CAACC,YAAY,CAAC4B,OAAO,CAACgB,GAAG,CAAC;IAAC;IAAAvD,aAAA,GAAAU,CAAA;IAChD,IAAIkD,QAAQ,GAAG,CAAC,CAAC,EAAE;MAAA;MAAA5D,aAAA,GAAAe,CAAA;MAAAf,aAAA,GAAAU,CAAA;MACjB,IAAI,CAACC,YAAY,CAACiD,QAAQ,CAAC,GAAGJ,IAAI;IACpC,CAAC,MAAM;MAAA;MAAAxD,aAAA,GAAAe,CAAA;MAAAf,aAAA,GAAAU,CAAA;MACL,IAAI,CAACC,YAAY,CAACe,IAAI,CAAC8B,IAAI,CAAC;IAC9B;EACF;EAEA,MAAMK,YAAYA,CAACjC,IAAY;IAAA;IAAA5B,aAAA,GAAAgB,CAAA;IAC7B,MAAM8C,KAAK;IAAA;IAAA,CAAA9D,aAAA,GAAAU,CAAA,QAAG,MAAMP,EAAE,CAAC4D,IAAI,CAACnC,IAAI,CAAC;IAAC;IAAA5B,aAAA,GAAAU,CAAA;IAClC,OAAO;MACLsD,IAAI,EAAEF,KAAK,CAACE,IAAI;MAChBC,KAAK,EAAEH,KAAK,CAACG,KAAK;MAClBC,KAAK,EAAEJ,KAAK,CAACI,KAAK;MAClBf,MAAM,EAAEW,KAAK,CAACX,MAAM,EAAE;MACtBgB,WAAW,EAAEL,KAAK,CAACK,WAAW,EAAE;MAChCC,IAAI,EAAEN,KAAK,CAACM;KACb;EACH;EAEAC,SAASA,CAACzC,IAAY,EAAE0C,QAAiC;IAAA;IAAAtE,aAAA,GAAAgB,CAAA;IACvD,IAAIuD,OAAO;IAAA;IAAA,CAAAvE,aAAA,GAAAU,CAAA,QAAQ,IAAI;IAAC;IAAAV,aAAA,GAAAU,CAAA;IAExB,MAAM8D,aAAa,GAAG,MAAAA,CAAA,KAAW;MAAA;MAAAxE,aAAA,GAAAgB,CAAA;MAAAhB,aAAA,GAAAU,CAAA;MAC/B,IAAI;QACF,MAAM;UAAE+D;QAAK,CAAE;QAAA;QAAA,CAAAzE,aAAA,GAAAU,CAAA,QAAG,MAAM,MAAM,CAAC,UAAU,CAAC;QAAC;QAAAV,aAAA,GAAAU,CAAA;QAC3C6D,OAAO,GAAGE,KAAK,CAAC7C,IAAI,CAAC;QAAC;QAAA5B,aAAA,GAAAU,CAAA;QACtB6D,OAAO,CAACG,EAAE,CAAC,KAAK,EAAGC,KAAa,IAAK;UAAA;UAAA3E,aAAA,GAAAgB,CAAA;UAAAhB,aAAA,GAAAU,CAAA;UAAA,OAAA4D,QAAQ,CAACK,KAAK,CAAC;QAAD,CAAC,CAAC;MACvD,CAAC,CAAC,MAAM;QAAA;QAAA3E,aAAA,GAAAU,CAAA;QACN;QACA,IAAI;UAAA;UAAAV,aAAA,GAAAU,CAAA;UACF6D,OAAO,GAAGpE,EAAE,CAACsE,KAAK,CAAC7C,IAAI,EAAG+C,KAAK,IAAK;YAAA;YAAA3E,aAAA,GAAAgB,CAAA;YAAAhB,aAAA,GAAAU,CAAA;YAAA,OAAA4D,QAAQ,CAACK,KAAK,CAAC;UAAD,CAAC,CAAC;QACtD,CAAC,CAAC,MAAM;UACN;QAAA;MAEJ;IACF,CAAC;IAAC;IAAA3E,aAAA,GAAAU,CAAA;IAEF8D,aAAa,EAAE;IAAC;IAAAxE,aAAA,GAAAU,CAAA;IAEhB,MAAMkE,YAAY,GAAGA,CAAA,KAAK;MAAA;MAAA5E,aAAA,GAAAgB,CAAA;MAAAhB,aAAA,GAAAU,CAAA;MACxB,IAAI6D,OAAO,EAAE;QAAA;QAAAvE,aAAA,GAAAe,CAAA;QAAAf,aAAA,GAAAU,CAAA;QACX,IAAI,OAAO6D,OAAO,CAACM,KAAK,KAAK,UAAU,EAAE;UAAA;UAAA7E,aAAA,GAAAe,CAAA;UAAAf,aAAA,GAAAU,CAAA;UACvC6D,OAAO,CAACM,KAAK,EAAE;QACjB,CAAC,MAAM;UAAA;UAAA7E,aAAA,GAAAe,CAAA;UAAAf,aAAA,GAAAU,CAAA;UAAA,IAAI,OAAO6D,OAAO,CAACO,OAAO,KAAK,UAAU,EAAE;YAAA;YAAA9E,aAAA,GAAAe,CAAA;YAAAf,aAAA,GAAAU,CAAA;YAChD6D,OAAO,CAACO,OAAO,CAAClD,IAAI,CAAC;UACvB,CAAC;UAAA;UAAA;YAAA5B,aAAA,GAAAe,CAAA;UAAA;QAAD;MACF,CAAC;MAAA;MAAA;QAAAf,aAAA,GAAAe,CAAA;MAAA;IACH,CAAC;IAAC;IAAAf,aAAA,GAAAU,CAAA;IAEF,IAAI,CAACE,QAAQ,CAACc,IAAI,CAACkD,YAAY,CAAC;IAAC;IAAA5E,aAAA,GAAAU,CAAA;IACjC,OAAOkE,YAAY;EACrB;EAEA,MAAMG,aAAaA,CAACC,MAAc,EAAEC,IAAY;IAAA;IAAAjF,aAAA,GAAAgB,CAAA;IAC9C,MAAMkE,OAAO;IAAA;IAAA,CAAAlF,aAAA,GAAAU,CAAA,QAAGL,OAAO,CAAC4E,IAAI,CAAC;IAAC;IAAAjF,aAAA,GAAAU,CAAA;IAC9B,MAAMP,EAAE,CAACqB,KAAK,CAAC0D,OAAO,EAAE;MAAEzD,SAAS,EAAE;IAAI,CAAE,CAAC;IAAC;IAAAzB,aAAA,GAAAU,CAAA;IAC7C,MAAMP,EAAE,CAACgF,OAAO,CAACH,MAAM,EAAEC,IAAI,CAAC;IAAC;IAAAjF,aAAA,GAAAU,CAAA;IAC/B,IAAI,CAACC,YAAY,CAACe,IAAI,CAACuD,IAAI,CAAC;EAC9B;EAEA,MAAMG,OAAOA,CAAA;IAAA;IAAApF,aAAA,GAAAgB,CAAA;IAAAhB,aAAA,GAAAU,CAAA;IACX;IACA,IAAI,CAACE,QAAQ,CAACyE,OAAO,CAACC,IAAI,IAAG;MAAA;MAAAtF,aAAA,GAAAgB,CAAA;MAAAhB,aAAA,GAAAU,CAAA;MAC3B,IAAI;QAAA;QAAAV,aAAA,GAAAU,CAAA;QACF4E,IAAI,EAAE;MACR,CAAC,CAAC,MAAM;QACN;MAAA;IAEJ,CAAC,CAAC;IAAC;IAAAtF,aAAA,GAAAU,CAAA;IACH,IAAI,CAACE,QAAQ,GAAG,EAAE;IAElB;IAAA;IAAAZ,aAAA,GAAAU,CAAA;IACA,MAAM6E,OAAO,CAACC,UAAU,CACtB,IAAI,CAAC7E,YAAY,CAACyC,GAAG,CAACqC,IAAI,IAAI;MAAA;MAAAzF,aAAA,GAAAgB,CAAA;MAAAhB,aAAA,GAAAU,CAAA;MAAA,WAAI,CAAC0B,UAAU,CAACqD,IAAI,CAAC;IAAD,CAAC,CAAC,CACrD;IAAC;IAAAzF,aAAA,GAAAU,CAAA;IACF,IAAI,CAACC,YAAY,GAAG,EAAE;IAEtB;IAAA;IAAAX,aAAA,GAAAU,CAAA;IACA,MAAM6E,OAAO,CAACC,UAAU,CACtB,IAAI,CAAC/E,QAAQ,CAAC2C,GAAG,CAACtB,GAAG,IAAI;MAAA;MAAA9B,aAAA,GAAAgB,CAAA;MAAAhB,aAAA,GAAAU,CAAA;MAAA,WAAI,CAACgC,eAAe,CAACZ,GAAG,CAAC;IAAD,CAAC,CAAC,CACpD;IAAC;IAAA9B,aAAA,GAAAU,CAAA;IACF,IAAI,CAACD,QAAQ,GAAG,EAAE;EACpB;;AAGF,OAAM,MAAOiF,wBAAwB;EAC3BC,KAAK;EAAA;EAAA,CAAA3F,aAAA,GAAAU,CAAA,QAAG,IAAIkF,GAAG,EAAkB;EACjCC,WAAW;EAAA;EAAA,CAAA7F,aAAA,GAAAU,CAAA,QAAG,IAAIoF,GAAG,EAAU;EAC/BlF,QAAQ;EAAA;EAAA,CAAAZ,aAAA,GAAAU,CAAA,QAAG,IAAIkF,GAAG,EAA0C;EAEpE,MAAM/E,aAAaA,CAACC,MAAA;EAAA;EAAA,CAAAd,aAAA,GAAAe,CAAA,UAAiB,MAAM;IAAA;IAAAf,aAAA,GAAAgB,CAAA;IACzC,MAAMC,QAAQ;IAAA;IAAA,CAAAjB,aAAA,GAAAU,CAAA,QAAG,cAAcI,MAAM,IAAII,IAAI,CAACC,GAAG,EAAE,EAAE;IAAC;IAAAnB,aAAA,GAAAU,CAAA;IACtD,IAAI,CAACmF,WAAW,CAACE,GAAG,CAAC9E,QAAQ,CAAC;IAAC;IAAAjB,aAAA,GAAAU,CAAA;IAC/B,OAAOO,QAAQ;EACjB;EAEA,MAAMU,UAAUA,CAACC,IAAY,EAAEC,OAAe;IAAA;IAAA7B,aAAA,GAAAgB,CAAA;IAC5C,MAAMgF,cAAc;IAAA;IAAA,CAAAhG,aAAA,GAAAU,CAAA,QAAG,IAAI,CAACuF,aAAa,CAACrE,IAAI,CAAC;IAAC;IAAA5B,aAAA,GAAAU,CAAA;IAChD,IAAI,CAACiF,KAAK,CAACO,GAAG,CAACF,cAAc,EAAEnE,OAAO,CAAC;IAEvC;IACA,MAAMC,GAAG;IAAA;IAAA,CAAA9B,aAAA,GAAAU,CAAA,QAAGL,OAAO,CAAC2F,cAAc,CAAC;IAAC;IAAAhG,aAAA,GAAAU,CAAA;IACpC,IAAIoB,GAAG,KAAKkE,cAAc,EAAE;MAAA;MAAAhG,aAAA,GAAAe,CAAA;MAAAf,aAAA,GAAAU,CAAA;MAC1B,IAAI,CAACmF,WAAW,CAACE,GAAG,CAACjE,GAAG,CAAC;IAC3B,CAAC;IAAA;IAAA;MAAA9B,aAAA,GAAAe,CAAA;IAAA;IAAAf,aAAA,GAAAU,CAAA;IAED,IAAI,CAACyF,eAAe,CAACH,cAAc,EAAE,KAAK,CAAC;EAC7C;EAEA,MAAMhE,eAAeA,CAACJ,IAAY;IAAA;IAAA5B,aAAA,GAAAgB,CAAA;IAChC,MAAMgF,cAAc;IAAA;IAAA,CAAAhG,aAAA,GAAAU,CAAA,QAAG,IAAI,CAACuF,aAAa,CAACrE,IAAI,CAAC;IAAC;IAAA5B,aAAA,GAAAU,CAAA;IAChD,IAAI,CAACmF,WAAW,CAACE,GAAG,CAACC,cAAc,CAAC;EACtC;EAEA,MAAM/D,QAAQA,CAACL,IAAY;IAAA;IAAA5B,aAAA,GAAAgB,CAAA;IACzB,MAAMgF,cAAc;IAAA;IAAA,CAAAhG,aAAA,GAAAU,CAAA,QAAG,IAAI,CAACuF,aAAa,CAACrE,IAAI,CAAC;IAC/C,MAAMC,OAAO;IAAA;IAAA,CAAA7B,aAAA,GAAAU,CAAA,QAAG,IAAI,CAACiF,KAAK,CAACS,GAAG,CAACJ,cAAc,CAAC;IAAC;IAAAhG,aAAA,GAAAU,CAAA;IAE/C,IAAImB,OAAO,KAAKwE,SAAS,EAAE;MAAA;MAAArG,aAAA,GAAAe,CAAA;MAAAf,aAAA,GAAAU,CAAA;MACzB,MAAM,IAAI4F,KAAK,CAAC,4CAA4C1E,IAAI,GAAG,CAAC;IACtE,CAAC;IAAA;IAAA;MAAA5B,aAAA,GAAAe,CAAA;IAAA;IAAAf,aAAA,GAAAU,CAAA;IAED,OAAOmB,OAAO;EAChB;EAEA,MAAMK,UAAUA,CAACN,IAAY;IAAA;IAAA5B,aAAA,GAAAgB,CAAA;IAC3B,MAAMgF,cAAc;IAAA;IAAA,CAAAhG,aAAA,GAAAU,CAAA,QAAG,IAAI,CAACuF,aAAa,CAACrE,IAAI,CAAC;IAAC;IAAA5B,aAAA,GAAAU,CAAA;IAChD,OAAO,2BAAAV,aAAA,GAAAe,CAAA,eAAI,CAAC4E,KAAK,CAACY,GAAG,CAACP,cAAc,CAAC;IAAA;IAAA,CAAAhG,aAAA,GAAAe,CAAA,WAAI,IAAI,CAAC8E,WAAW,CAACU,GAAG,CAACP,cAAc,CAAC;EAC/E;EAEA,MAAM5D,UAAUA,CAACR,IAAY;IAAA;IAAA5B,aAAA,GAAAgB,CAAA;IAC3B,MAAMgF,cAAc;IAAA;IAAA,CAAAhG,aAAA,GAAAU,CAAA,SAAG,IAAI,CAACuF,aAAa,CAACrE,IAAI,CAAC;IAAC;IAAA5B,aAAA,GAAAU,CAAA;IAChD,IAAI,IAAI,CAACiF,KAAK,CAACa,MAAM,CAACR,cAAc,CAAC,EAAE;MAAA;MAAAhG,aAAA,GAAAe,CAAA;MAAAf,aAAA,GAAAU,CAAA;MACrC,IAAI,CAACyF,eAAe,CAACH,cAAc,EAAE,QAAQ,CAAC;IAChD,CAAC;IAAA;IAAA;MAAAhG,aAAA,GAAAe,CAAA;IAAA;EACH;EAEA,MAAM2B,eAAeA,CAACd,IAAY;IAAA;IAAA5B,aAAA,GAAAgB,CAAA;IAChC,MAAMgF,cAAc;IAAA;IAAA,CAAAhG,aAAA,GAAAU,CAAA,SAAG,IAAI,CAACuF,aAAa,CAACrE,IAAI,CAAC;IAE/C;IAAA;IAAA5B,aAAA,GAAAU,CAAA;IACA,IAAI,CAACmF,WAAW,CAACW,MAAM,CAACR,cAAc,CAAC;IAEvC;IACA,MAAMS,UAAU;IAAA;IAAA,CAAAzG,aAAA,GAAAU,CAAA,SAAGsF,cAAc,GAAG,GAAG;IAAC;IAAAhG,aAAA,GAAAU,CAAA;IAExC,KAAK,MAAMgG,QAAQ,IAAI,IAAI,CAACf,KAAK,CAACgB,IAAI,EAAE,EAAE;MAAA;MAAA3G,aAAA,GAAAU,CAAA;MACxC,IAAIgG,QAAQ,CAACE,UAAU,CAACH,UAAU,CAAC,EAAE;QAAA;QAAAzG,aAAA,GAAAe,CAAA;QAAAf,aAAA,GAAAU,CAAA;QACnC,IAAI,CAACiF,KAAK,CAACa,MAAM,CAACE,QAAQ,CAAC;MAC7B,CAAC;MAAA;MAAA;QAAA1G,aAAA,GAAAe,CAAA;MAAA;IACH;IAAC;IAAAf,aAAA,GAAAU,CAAA;IAED,KAAK,MAAMmG,OAAO,IAAI,IAAI,CAAChB,WAAW,EAAE;MAAA;MAAA7F,aAAA,GAAAU,CAAA;MACtC,IAAImG,OAAO,CAACD,UAAU,CAACH,UAAU,CAAC,EAAE;QAAA;QAAAzG,aAAA,GAAAe,CAAA;QAAAf,aAAA,GAAAU,CAAA;QAClC,IAAI,CAACmF,WAAW,CAACW,MAAM,CAACK,OAAO,CAAC;MAClC,CAAC;MAAA;MAAA;QAAA7G,aAAA,GAAAe,CAAA;MAAA;IACH;EACF;EAEA,MAAM8B,SAASA,CAACjB,IAAY;IAAA;IAAA5B,aAAA,GAAAgB,CAAA;IAC1B,MAAMgF,cAAc;IAAA;IAAA,CAAAhG,aAAA,GAAAU,CAAA,SAAG,IAAI,CAACuF,aAAa,CAACrE,IAAI,CAAC;IAC/C,MAAM6E,UAAU;IAAA;IAAA,CAAAzG,aAAA,GAAAU,CAAA,SAAGsF,cAAc,KAAK,GAAG;IAAA;IAAA,CAAAhG,aAAA,GAAAe,CAAA,WAAG,EAAE;IAAA;IAAA,CAAAf,aAAA,GAAAe,CAAA,WAAGiF,cAAc,GAAG,GAAG;IACrE,MAAML,KAAK;IAAA;IAAA,CAAA3F,aAAA,GAAAU,CAAA,SAAa,EAAE;IAAC;IAAAV,aAAA,GAAAU,CAAA;IAE3B,KAAK,MAAMgG,QAAQ,IAAI,IAAI,CAACf,KAAK,CAACgB,IAAI,EAAE,EAAE;MAAA;MAAA3G,aAAA,GAAAU,CAAA;MACxC,IAAIgG,QAAQ,CAACE,UAAU,CAACH,UAAU,CAAC,EAAE;QAAA;QAAAzG,aAAA,GAAAe,CAAA;QACnC,MAAM+F,YAAY;QAAA;QAAA,CAAA9G,aAAA,GAAAU,CAAA,SAAGgG,QAAQ,CAACnF,SAAS,CAACkF,UAAU,CAACM,MAAM,CAAC;QAAC;QAAA/G,aAAA,GAAAU,CAAA;QAC3D;QAAI;QAAA,CAAAV,aAAA,GAAAe,CAAA,WAAA+F,YAAY;QAAA;QAAA,CAAA9G,aAAA,GAAAe,CAAA,WAAI,CAAC+F,YAAY,CAACE,QAAQ,CAAC,GAAG,CAAC,GAAE;UAAA;UAAAhH,aAAA,GAAAe,CAAA;UAAAf,aAAA,GAAAU,CAAA;UAC/CiF,KAAK,CAACjE,IAAI,CAACgF,QAAQ,CAAC;QACtB,CAAC;QAAA;QAAA;UAAA1G,aAAA,GAAAe,CAAA;QAAA;MACH,CAAC;MAAA;MAAA;QAAAf,aAAA,GAAAe,CAAA;MAAA;IACH;IAAC;IAAAf,aAAA,GAAAU,CAAA;IAED,OAAOiF,KAAK,CAACsB,IAAI,EAAE;EACrB;EAEA,MAAM3D,QAAQA,CAACC,GAAW,EAAEC,IAAY;IAAA;IAAAxD,aAAA,GAAAgB,CAAA;IACtC,MAAMa,OAAO;IAAA;IAAA,CAAA7B,aAAA,GAAAU,CAAA,SAAG,MAAM,IAAI,CAACuB,QAAQ,CAACsB,GAAG,CAAC;IAAC;IAAAvD,aAAA,GAAAU,CAAA;IACzC,MAAM,IAAI,CAACiB,UAAU,CAAC6B,IAAI,EAAE3B,OAAO,CAAC;EACtC;EAEA,MAAM6B,QAAQA,CAACH,GAAW,EAAEC,IAAY;IAAA;IAAAxD,aAAA,GAAAgB,CAAA;IACtC,MAAMa,OAAO;IAAA;IAAA,CAAA7B,aAAA,GAAAU,CAAA,SAAG,MAAM,IAAI,CAACuB,QAAQ,CAACsB,GAAG,CAAC;IAAC;IAAAvD,aAAA,GAAAU,CAAA;IACzC,MAAM,IAAI,CAACiB,UAAU,CAAC6B,IAAI,EAAE3B,OAAO,CAAC;IAAC;IAAA7B,aAAA,GAAAU,CAAA;IACrC,MAAM,IAAI,CAAC0B,UAAU,CAACmB,GAAG,CAAC;EAC5B;EAEA,MAAMM,YAAYA,CAACjC,IAAY;IAAA;IAAA5B,aAAA,GAAAgB,CAAA;IAC7B,MAAMgF,cAAc;IAAA;IAAA,CAAAhG,aAAA,GAAAU,CAAA,SAAG,IAAI,CAACuF,aAAa,CAACrE,IAAI,CAAC;IAAC;IAAA5B,aAAA,GAAAU,CAAA;IAEhD,IAAI,CAAC,IAAI,CAACwB,UAAU,CAAC8D,cAAc,CAAC,EAAE;MAAA;MAAAhG,aAAA,GAAAe,CAAA;MAAAf,aAAA,GAAAU,CAAA;MACpC,MAAM,IAAI4F,KAAK,CAAC,4CAA4C1E,IAAI,GAAG,CAAC;IACtE,CAAC;IAAA;IAAA;MAAA5B,aAAA,GAAAe,CAAA;IAAA;IAED,MAAMoC,MAAM;IAAA;IAAA,CAAAnD,aAAA,GAAAU,CAAA,SAAG,IAAI,CAACiF,KAAK,CAACY,GAAG,CAACP,cAAc,CAAC;IAC7C,MAAM7B,WAAW;IAAA;IAAA,CAAAnE,aAAA,GAAAU,CAAA,SAAG,IAAI,CAACmF,WAAW,CAACU,GAAG,CAACP,cAAc,CAAC;IACxD,MAAMnE,OAAO;IAAA;IAAA,CAAA7B,aAAA,GAAAU,CAAA;IAAG;IAAA,CAAAV,aAAA,GAAAe,CAAA,eAAI,CAAC4E,KAAK,CAACS,GAAG,CAACJ,cAAc,CAAC;IAAA;IAAA,CAAAhG,aAAA,GAAAe,CAAA,WAAI,EAAE;IAAC;IAAAf,aAAA,GAAAU,CAAA;IAErD,OAAO;MACLsD,IAAI,EAAEnC,OAAO,CAACkF,MAAM;MACpB9C,KAAK,EAAE,IAAI/C,IAAI,EAAE;MACjBgD,KAAK,EAAE,IAAIhD,IAAI,EAAE;MACjBiC,MAAM;MACNgB,WAAW;MACXC,IAAI,EAAEjB,MAAM;MAAA;MAAA,CAAAnD,aAAA,GAAAe,CAAA,WAAG,KAAK;MAAA;MAAA,CAAAf,aAAA,GAAAe,CAAA,WAAG,KAAK;KAC7B;EACH;EAEAsD,SAASA,CAACzC,IAAY,EAAE0C,QAAiC;IAAA;IAAAtE,aAAA,GAAAgB,CAAA;IACvD,MAAMgF,cAAc;IAAA;IAAA,CAAAhG,aAAA,GAAAU,CAAA,SAAG,IAAI,CAACuF,aAAa,CAACrE,IAAI,CAAC;IAAC;IAAA5B,aAAA,GAAAU,CAAA;IAEhD,IAAI,CAAC,IAAI,CAACE,QAAQ,CAAC2F,GAAG,CAACP,cAAc,CAAC,EAAE;MAAA;MAAAhG,aAAA,GAAAe,CAAA;MAAAf,aAAA,GAAAU,CAAA;MACtC,IAAI,CAACE,QAAQ,CAACsF,GAAG,CAACF,cAAc,EAAE,EAAE,CAAC;IACvC,CAAC;IAAA;IAAA;MAAAhG,aAAA,GAAAe,CAAA;IAAA;IAAAf,aAAA,GAAAU,CAAA;IAED,IAAI,CAACE,QAAQ,CAACwF,GAAG,CAACJ,cAAc,CAAE,CAACtE,IAAI,CAAC4C,QAAQ,CAAC;IAAC;IAAAtE,aAAA,GAAAU,CAAA;IAElD,OAAO,MAAK;MAAA;MAAAV,aAAA,GAAAgB,CAAA;MACV,MAAMkG,SAAS;MAAA;MAAA,CAAAlH,aAAA,GAAAU,CAAA,SAAG,IAAI,CAACE,QAAQ,CAACwF,GAAG,CAACJ,cAAc,CAAC;MAAC;MAAAhG,aAAA,GAAAU,CAAA;MACpD,IAAIwG,SAAS,EAAE;QAAA;QAAAlH,aAAA,GAAAe,CAAA;QACb,MAAMuB,KAAK;QAAA;QAAA,CAAAtC,aAAA,GAAAU,CAAA,SAAGwG,SAAS,CAAC3E,OAAO,CAAC+B,QAAQ,CAAC;QAAC;QAAAtE,aAAA,GAAAU,CAAA;QAC1C,IAAI4B,KAAK,GAAG,CAAC,CAAC,EAAE;UAAA;UAAAtC,aAAA,GAAAe,CAAA;UAAAf,aAAA,GAAAU,CAAA;UACdwG,SAAS,CAAC1E,MAAM,CAACF,KAAK,EAAE,CAAC,CAAC;QAC5B,CAAC;QAAA;QAAA;UAAAtC,aAAA,GAAAe,CAAA;QAAA;QAAAf,aAAA,GAAAU,CAAA;QAED,IAAIwG,SAAS,CAACH,MAAM,KAAK,CAAC,EAAE;UAAA;UAAA/G,aAAA,GAAAe,CAAA;UAAAf,aAAA,GAAAU,CAAA;UAC1B,IAAI,CAACE,QAAQ,CAAC4F,MAAM,CAACR,cAAc,CAAC;QACtC,CAAC;QAAA;QAAA;UAAAhG,aAAA,GAAAe,CAAA;QAAA;MACH,CAAC;MAAA;MAAA;QAAAf,aAAA,GAAAe,CAAA;MAAA;IACH,CAAC;EACH;EAEA,MAAMgE,aAAaA,CAACC,MAAc,EAAEC,IAAY;IAAA;IAAAjF,aAAA,GAAAgB,CAAA;IAAAhB,aAAA,GAAAU,CAAA;IAC9C;IACA,MAAM,IAAI,CAACiB,UAAU,CAACsD,IAAI,EAAE,eAAeD,MAAM,EAAE,CAAC;EACtD;EAEA,MAAMI,OAAOA,CAAA;IAAA;IAAApF,aAAA,GAAAgB,CAAA;IAAAhB,aAAA,GAAAU,CAAA;IACX,IAAI,CAACiF,KAAK,CAACwB,KAAK,EAAE;IAAC;IAAAnH,aAAA,GAAAU,CAAA;IACnB,IAAI,CAACmF,WAAW,CAACsB,KAAK,EAAE;IAAC;IAAAnH,aAAA,GAAAU,CAAA;IACzB,IAAI,CAACE,QAAQ,CAACuG,KAAK,EAAE;EACvB;EAEA;EAEA;;;EAGAC,WAAWA,CAAA;IAAA;IAAApH,aAAA,GAAAgB,CAAA;IACT,MAAMqG,MAAM;IAAA;IAAA,CAAArH,aAAA,GAAAU,CAAA,SAA2B,EAAE;IAAC;IAAAV,aAAA,GAAAU,CAAA;IAC1C,KAAK,MAAM,CAACkB,IAAI,EAAEC,OAAO,CAAC,IAAI,IAAI,CAAC8D,KAAK,CAAC7C,OAAO,EAAE,EAAE;MAAA;MAAA9C,aAAA,GAAAU,CAAA;MAClD2G,MAAM,CAACzF,IAAI,CAAC,GAAGC,OAAO;IACxB;IAAC;IAAA7B,aAAA,GAAAU,CAAA;IACD,OAAO2G,MAAM;EACf;EAEA;;;EAGAC,iBAAiBA,CAAA;IAAA;IAAAtH,aAAA,GAAAgB,CAAA;IAAAhB,aAAA,GAAAU,CAAA;IACf,OAAO6G,KAAK,CAACC,IAAI,CAAC,IAAI,CAAC3B,WAAW,CAAC,CAACoB,IAAI,EAAE;EAC5C;EAEA;;;EAGAQ,iBAAiBA,CAAC7F,IAAY,EAAE+C,KAAa;IAAA;IAAA3E,aAAA,GAAAgB,CAAA;IAAAhB,aAAA,GAAAU,CAAA;IAC3C,IAAI,CAACyF,eAAe,CAACvE,IAAI,EAAE+C,KAAK,CAAC;EACnC;EAEQsB,aAAaA,CAACrE,IAAY;IAAA;IAAA5B,aAAA,GAAAgB,CAAA;IAAAhB,aAAA,GAAAU,CAAA;IAChC,OAAOJ,OAAO,CAACsB,IAAI,CAAC,CAAC8F,OAAO,CAAC,KAAK,EAAE,GAAG,CAAC;EAC1C;EAEQvB,eAAeA,CAACvE,IAAY,EAAE+C,KAAa;IAAA;IAAA3E,aAAA,GAAAgB,CAAA;IACjD,MAAMkG,SAAS;IAAA;IAAA,CAAAlH,aAAA,GAAAU,CAAA,SAAG,IAAI,CAACE,QAAQ,CAACwF,GAAG,CAACxE,IAAI,CAAC;IAAC;IAAA5B,aAAA,GAAAU,CAAA;IAC1C,IAAIwG,SAAS,EAAE;MAAA;MAAAlH,aAAA,GAAAe,CAAA;MAAAf,aAAA,GAAAU,CAAA;MACbwG,SAAS,CAAC7B,OAAO,CAACf,QAAQ,IAAG;QAAA;QAAAtE,aAAA,GAAAgB,CAAA;QAAAhB,aAAA,GAAAU,CAAA;QAC3B,IAAI;UAAA;UAAAV,aAAA,GAAAU,CAAA;UACF4D,QAAQ,CAACK,KAAK,CAAC;QACjB,CAAC,CAAC,OAAOlC,KAAK,EAAE;UACd;QAAA;MAEJ,CAAC,CAAC;IACJ,CAAC;IAAA;IAAA;MAAAzC,aAAA,GAAAe,CAAA;IAAA;EACH;;AAGF;AACA,OAAM,SAAU4G,0BAA0BA,CAAA;EAAA;EAAA3H,aAAA,GAAAgB,CAAA;EAAAhB,aAAA,GAAAU,CAAA;EACxC,OAAO,IAAIF,wBAAwB,EAAE;AACvC;AAEA,OAAM,SAAUoH,0BAA0BA,CAAA;EAAA;EAAA5H,aAAA,GAAAgB,CAAA;EAAAhB,aAAA,GAAAU,CAAA;EACxC,OAAO,IAAIgF,wBAAwB,EAAE;AACvC;AAEA;AACA,OAAO,eAAemC,iBAAiBA,CACrCC,MAA4B,EAC5BC,WAAmB,EACnBpC,KAA6B;EAAA;EAAA3F,aAAA,GAAAgB,CAAA;EAE7B,MAAMgH,UAAU;EAAA;EAAA,CAAAhI,aAAA,GAAAU,CAAA,SAAG,MAAMoH,MAAM,CAACjH,aAAa,CAACkH,WAAW,CAAC;EAAC;EAAA/H,aAAA,GAAAU,CAAA;EAE3D,KAAK,MAAM,CAACgG,QAAQ,EAAE7E,OAAO,CAAC,IAAIoG,MAAM,CAACnF,OAAO,CAAC6C,KAAK,CAAC,EAAE;IACvD,MAAMuC,QAAQ;IAAA;IAAA,CAAAlI,aAAA,GAAAU,CAAA,SAAGN,IAAI,CAAC4H,UAAU,EAAEtB,QAAQ,CAAC;IAAC;IAAA1G,aAAA,GAAAU,CAAA;IAC5C,MAAMoH,MAAM,CAACnG,UAAU,CAACuG,QAAQ,EAAErG,OAAO,CAAC;EAC5C;EAAC;EAAA7B,aAAA,GAAAU,CAAA;EAED,OAAOsH,UAAU;AACnB;AAEA,OAAO,eAAeG,mBAAmBA,CACvCL,MAA4B,EAC5BM,aAAqB;EAAA;EAAApI,aAAA,GAAAgB,CAAA;EAOrB,MAAMqH,YAAY;EAAA;EAAA,CAAArI,aAAA,GAAAU,CAAA,SAAG,MAAMoH,MAAM,CAACjH,aAAa,CAACuH,aAAa,CAAC;EAC9D,MAAME,MAAM;EAAA;EAAA,CAAAtI,aAAA,GAAAU,CAAA,SAAGN,IAAI,CAACiI,YAAY,EAAE,KAAK,CAAC;EACxC,MAAME,OAAO;EAAA;EAAA,CAAAvI,aAAA,GAAAU,CAAA,SAAGN,IAAI,CAACiI,YAAY,EAAE,OAAO,CAAC;EAC3C,MAAMG,SAAS;EAAA;EAAA,CAAAxI,aAAA,GAAAU,CAAA,SAAGN,IAAI,CAACiI,YAAY,EAAE,QAAQ,CAAC;EAAC;EAAArI,aAAA,GAAAU,CAAA;EAE/C,MAAM6E,OAAO,CAACkD,GAAG,CAAC,CAChBX,MAAM,CAAC9F,eAAe,CAACsG,MAAM,CAAC,EAC9BR,MAAM,CAAC9F,eAAe,CAACuG,OAAO,CAAC,EAC/BT,MAAM,CAAC9F,eAAe,CAACwG,SAAS,CAAC,CAClC,CAAC;EAAC;EAAAxI,aAAA,GAAAU,CAAA;EAEH,OAAO;IAAE2H,YAAY;IAAEC,MAAM;IAAEC,OAAO;IAAEC;EAAS,CAAE;AACrD","ignoreList":[]}