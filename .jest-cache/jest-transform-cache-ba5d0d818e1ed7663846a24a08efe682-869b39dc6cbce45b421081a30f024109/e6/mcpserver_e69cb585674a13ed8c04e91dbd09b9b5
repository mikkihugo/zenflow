fdfb875ec1bec1ff5360de29dcfa70e8
#!/usr/bin/env node
/**
 * @fileoverview Refactored Claude-Zen MCP Server
 * Clean architecture implementation of the Model Context Protocol server
 * @module MCPServerRefactored
 */
/* istanbul ignore next */
function cov_x19s4lpk5() {
  var path = "/home/mhugo/code/claude-code-flow/src/mcp/mcp-server.ts";
  var hash = "73e201047da35bcbf19f90c9b3fbc438cc6d0cdb";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/home/mhugo/code/claude-code-flow/src/mcp/mcp-server.ts",
    statementMap: {
      "0": {
        start: {
          line: 11,
          column: 8
        },
        end: {
          line: 11,
          column: 31
        }
      },
      "1": {
        start: {
          line: 12,
          column: 8
        },
        end: {
          line: 12,
          column: 50
        }
      },
      "2": {
        start: {
          line: 15,
          column: 8
        },
        end: {
          line: 15,
          column: 46
        }
      },
      "3": {
        start: {
          line: 16,
          column: 8
        },
        end: {
          line: 16,
          column: 33
        }
      },
      "4": {
        start: {
          line: 19,
          column: 8
        },
        end: {
          line: 19,
          column: 46
        }
      },
      "5": {
        start: {
          line: 20,
          column: 8
        },
        end: {
          line: 20,
          column: 33
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 10,
            column: 4
          },
          end: {
            line: 10,
            column: 5
          }
        },
        loc: {
          start: {
            line: 10,
            column: 30
          },
          end: {
            line: 13,
            column: 5
          }
        },
        line: 10
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 14,
            column: 4
          },
          end: {
            line: 14,
            column: 5
          }
        },
        loc: {
          start: {
            line: 14,
            column: 18
          },
          end: {
            line: 17,
            column: 5
          }
        },
        line: 14
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 18,
            column: 4
          },
          end: {
            line: 18,
            column: 5
          }
        },
        loc: {
          start: {
            line: 18,
            column: 17
          },
          end: {
            line: 21,
            column: 5
          }
        },
        line: 18
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 10,
            column: 16
          },
          end: {
            line: 10,
            column: 28
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 10,
            column: 26
          },
          end: {
            line: 10,
            column: 28
          }
        }],
        line: 10
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0
    },
    b: {
      "0": [0]
    },
    inputSourceMap: {
      file: "/home/mhugo/code/claude-code-flow/src/mcp/mcp-server.ts",
      mappings: ";AAEA;;;;GAIG;AAIH,OAAO,EAAE,eAAe,EAAE,MAAM,yBAAyB,CAAC;AAE1D,4CAA4C;AAC5C,MAAM,OAAO,SAAS;IACpB,YAAY,OAAO,GAAG,EAAE;QACtB,IAAI,CAAC,OAAO,GAAG,OAAO,CAAC;QACvB,IAAI,CAAC,YAAY,GAAG,IAAI,eAAe,EAAE,CAAC;IAC5C,CAAC;IAED,KAAK,CAAC,KAAK;QACT,OAAO,CAAC,GAAG,CAAC,wBAAwB,CAAC,CAAC;QACtC,OAAO,EAAE,OAAO,EAAE,IAAI,EAAE,CAAC;IAC3B,CAAC;IAED,KAAK,CAAC,IAAI;QACR,OAAO,CAAC,GAAG,CAAC,wBAAwB,CAAC,CAAC;QACtC,OAAO,EAAE,OAAO,EAAE,IAAI,EAAE,CAAC;IAC3B,CAAC;CACF;AAED,eAAe,SAAS,CAAC",
      names: [],
      sources: ["/home/mhugo/code/claude-code-flow/src/mcp/mcp-server.ts"],
      sourcesContent: ["#!/usr/bin/env node\n\n/**\n * @fileoverview Refactored Claude-Zen MCP Server\n * Clean architecture implementation of the Model Context Protocol server\n * @module MCPServerRefactored\n */\n\nimport { fileURLToPath } from 'node:url';\nimport { NeuralEngine } from '../neural/neural-engine.js';\nimport { MCPErrorHandler } from './core/error-handler.js';\n\n// Placeholder implementation for MCP server\nexport class MCPServer {\n  constructor(options = {}) {\n    this.options = options;\n    this.errorHandler = new MCPErrorHandler();\n  }\n\n  async start() {\n    console.log('MCP Server starting...');\n    return { success: true };\n  }\n\n  async stop() {\n    console.log('MCP Server stopping...');\n    return { success: true };\n  }\n}\n\nexport default MCPServer;"],
      version: 3
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "73e201047da35bcbf19f90c9b3fbc438cc6d0cdb"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_x19s4lpk5 = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_x19s4lpk5();
import { MCPErrorHandler } from './core/error-handler.js';
// Placeholder implementation for MCP server
export class MCPServer {
  constructor(options =
  /* istanbul ignore next */
  (cov_x19s4lpk5().b[0][0]++, {})) {
    /* istanbul ignore next */
    cov_x19s4lpk5().f[0]++;
    cov_x19s4lpk5().s[0]++;
    this.options = options;
    /* istanbul ignore next */
    cov_x19s4lpk5().s[1]++;
    this.errorHandler = new MCPErrorHandler();
  }
  async start() {
    /* istanbul ignore next */
    cov_x19s4lpk5().f[1]++;
    cov_x19s4lpk5().s[2]++;
    console.log('MCP Server starting...');
    /* istanbul ignore next */
    cov_x19s4lpk5().s[3]++;
    return {
      success: true
    };
  }
  async stop() {
    /* istanbul ignore next */
    cov_x19s4lpk5().f[2]++;
    cov_x19s4lpk5().s[4]++;
    console.log('MCP Server stopping...');
    /* istanbul ignore next */
    cov_x19s4lpk5().s[5]++;
    return {
      success: true
    };
  }
}
export default MCPServer;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJjb3ZfeDE5czRscGs1IiwicGF0aCIsImhhc2giLCJnbG9iYWwiLCJGdW5jdGlvbiIsImdjdiIsImNvdmVyYWdlRGF0YSIsInN0YXRlbWVudE1hcCIsInN0YXJ0IiwibGluZSIsImNvbHVtbiIsImVuZCIsImZuTWFwIiwibmFtZSIsImRlY2wiLCJsb2MiLCJicmFuY2hNYXAiLCJ0eXBlIiwibG9jYXRpb25zIiwicyIsImYiLCJiIiwiaW5wdXRTb3VyY2VNYXAiLCJmaWxlIiwibWFwcGluZ3MiLCJuYW1lcyIsInNvdXJjZXMiLCJzb3VyY2VzQ29udGVudCIsInZlcnNpb24iLCJfY292ZXJhZ2VTY2hlbWEiLCJjb3ZlcmFnZSIsImFjdHVhbENvdmVyYWdlIiwiTUNQRXJyb3JIYW5kbGVyIiwiTUNQU2VydmVyIiwiY29uc3RydWN0b3IiLCJvcHRpb25zIiwiZXJyb3JIYW5kbGVyIiwiY29uc29sZSIsImxvZyIsInN1Y2Nlc3MiLCJzdG9wIl0sInNvdXJjZXMiOlsiL2hvbWUvbWh1Z28vY29kZS9jbGF1ZGUtY29kZS1mbG93L3NyYy9tY3AvbWNwLXNlcnZlci50cyJdLCJzb3VyY2VzQ29udGVudCI6WyIjIS91c3IvYmluL2VudiBub2RlXG5cbi8qKlxuICogQGZpbGVvdmVydmlldyBSZWZhY3RvcmVkIENsYXVkZS1aZW4gTUNQIFNlcnZlclxuICogQ2xlYW4gYXJjaGl0ZWN0dXJlIGltcGxlbWVudGF0aW9uIG9mIHRoZSBNb2RlbCBDb250ZXh0IFByb3RvY29sIHNlcnZlclxuICogQG1vZHVsZSBNQ1BTZXJ2ZXJSZWZhY3RvcmVkXG4gKi9cblxuaW1wb3J0IHsgZmlsZVVSTFRvUGF0aCB9IGZyb20gJ25vZGU6dXJsJztcbmltcG9ydCB7IE5ldXJhbEVuZ2luZSB9IGZyb20gJy4uL25ldXJhbC9uZXVyYWwtZW5naW5lLmpzJztcbmltcG9ydCB7IE1DUEVycm9ySGFuZGxlciB9IGZyb20gJy4vY29yZS9lcnJvci1oYW5kbGVyLmpzJztcblxuLy8gUGxhY2Vob2xkZXIgaW1wbGVtZW50YXRpb24gZm9yIE1DUCBzZXJ2ZXJcbmV4cG9ydCBjbGFzcyBNQ1BTZXJ2ZXIge1xuICBjb25zdHJ1Y3RvcihvcHRpb25zID0ge30pIHtcbiAgICB0aGlzLm9wdGlvbnMgPSBvcHRpb25zO1xuICAgIHRoaXMuZXJyb3JIYW5kbGVyID0gbmV3IE1DUEVycm9ySGFuZGxlcigpO1xuICB9XG5cbiAgYXN5bmMgc3RhcnQoKSB7XG4gICAgY29uc29sZS5sb2coJ01DUCBTZXJ2ZXIgc3RhcnRpbmcuLi4nKTtcbiAgICByZXR1cm4geyBzdWNjZXNzOiB0cnVlIH07XG4gIH1cblxuICBhc3luYyBzdG9wKCkge1xuICAgIGNvbnNvbGUubG9nKCdNQ1AgU2VydmVyIHN0b3BwaW5nLi4uJyk7XG4gICAgcmV0dXJuIHsgc3VjY2VzczogdHJ1ZSB9O1xuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IE1DUFNlcnZlcjsiXSwibWFwcGluZ3MiOiI7QUFFQTs7Ozs7QUFBQTtBQUFBLFNBQUFBLGNBQUE7RUFBQSxJQUFBQyxJQUFBO0VBQUEsSUFBQUMsSUFBQTtFQUFBLElBQUFDLE1BQUEsT0FBQUMsUUFBQTtFQUFBLElBQUFDLEdBQUE7RUFBQSxJQUFBQyxZQUFBO0lBQUFMLElBQUE7SUFBQU0sWUFBQTtNQUFBO1FBQUFDLEtBQUE7VUFBQUMsSUFBQTtVQUFBQyxNQUFBO1FBQUE7UUFBQUMsR0FBQTtVQUFBRixJQUFBO1VBQUFDLE1BQUE7UUFBQTtNQUFBO01BQUE7UUFBQUYsS0FBQTtVQUFBQyxJQUFBO1VBQUFDLE1BQUE7UUFBQTtRQUFBQyxHQUFBO1VBQUFGLElBQUE7VUFBQUMsTUFBQTtRQUFBO01BQUE7TUFBQTtRQUFBRixLQUFBO1VBQUFDLElBQUE7VUFBQUMsTUFBQTtRQUFBO1FBQUFDLEdBQUE7VUFBQUYsSUFBQTtVQUFBQyxNQUFBO1FBQUE7TUFBQTtNQUFBO1FBQUFGLEtBQUE7VUFBQUMsSUFBQTtVQUFBQyxNQUFBO1FBQUE7UUFBQUMsR0FBQTtVQUFBRixJQUFBO1VBQUFDLE1BQUE7UUFBQTtNQUFBO01BQUE7UUFBQUYsS0FBQTtVQUFBQyxJQUFBO1VBQUFDLE1BQUE7UUFBQTtRQUFBQyxHQUFBO1VBQUFGLElBQUE7VUFBQUMsTUFBQTtRQUFBO01BQUE7TUFBQTtRQUFBRixLQUFBO1VBQUFDLElBQUE7VUFBQUMsTUFBQTtRQUFBO1FBQUFDLEdBQUE7VUFBQUYsSUFBQTtVQUFBQyxNQUFBO1FBQUE7TUFBQTtJQUFBO0lBQUFFLEtBQUE7TUFBQTtRQUFBQyxJQUFBO1FBQUFDLElBQUE7VUFBQU4sS0FBQTtZQUFBQyxJQUFBO1lBQUFDLE1BQUE7VUFBQTtVQUFBQyxHQUFBO1lBQUFGLElBQUE7WUFBQUMsTUFBQTtVQUFBO1FBQUE7UUFBQUssR0FBQTtVQUFBUCxLQUFBO1lBQUFDLElBQUE7WUFBQUMsTUFBQTtVQUFBO1VBQUFDLEdBQUE7WUFBQUYsSUFBQTtZQUFBQyxNQUFBO1VBQUE7UUFBQTtRQUFBRCxJQUFBO01BQUE7TUFBQTtRQUFBSSxJQUFBO1FBQUFDLElBQUE7VUFBQU4sS0FBQTtZQUFBQyxJQUFBO1lBQUFDLE1BQUE7VUFBQTtVQUFBQyxHQUFBO1lBQUFGLElBQUE7WUFBQUMsTUFBQTtVQUFBO1FBQUE7UUFBQUssR0FBQTtVQUFBUCxLQUFBO1lBQUFDLElBQUE7WUFBQUMsTUFBQTtVQUFBO1VBQUFDLEdBQUE7WUFBQUYsSUFBQTtZQUFBQyxNQUFBO1VBQUE7UUFBQTtRQUFBRCxJQUFBO01BQUE7TUFBQTtRQUFBSSxJQUFBO1FBQUFDLElBQUE7VUFBQU4sS0FBQTtZQUFBQyxJQUFBO1lBQUFDLE1BQUE7VUFBQTtVQUFBQyxHQUFBO1lBQUFGLElBQUE7WUFBQUMsTUFBQTtVQUFBO1FBQUE7UUFBQUssR0FBQTtVQUFBUCxLQUFBO1lBQUFDLElBQUE7WUFBQUMsTUFBQTtVQUFBO1VBQUFDLEdBQUE7WUFBQUYsSUFBQTtZQUFBQyxNQUFBO1VBQUE7UUFBQTtRQUFBRCxJQUFBO01BQUE7SUFBQTtJQUFBTyxTQUFBO01BQUE7UUFBQUQsR0FBQTtVQUFBUCxLQUFBO1lBQUFDLElBQUE7WUFBQUMsTUFBQTtVQUFBO1VBQUFDLEdBQUE7WUFBQUYsSUFBQTtZQUFBQyxNQUFBO1VBQUE7UUFBQTtRQUFBTyxJQUFBO1FBQUFDLFNBQUE7VUFBQVYsS0FBQTtZQUFBQyxJQUFBO1lBQUFDLE1BQUE7VUFBQTtVQUFBQyxHQUFBO1lBQUFGLElBQUE7WUFBQUMsTUFBQTtVQUFBO1FBQUE7UUFBQUQsSUFBQTtNQUFBO0lBQUE7SUFBQVUsQ0FBQTtNQUFBO01BQUE7TUFBQTtNQUFBO01BQUE7TUFBQTtJQUFBO0lBQUFDLENBQUE7TUFBQTtNQUFBO01BQUE7SUFBQTtJQUFBQyxDQUFBO01BQUE7SUFBQTtJQUFBQyxjQUFBO01BQUFDLElBQUE7TUFBQUMsUUFBQTtNQUFBQyxLQUFBO01BQUFDLE9BQUE7TUFBQUMsY0FBQTtNQUFBQyxPQUFBO0lBQUE7SUFBQUMsZUFBQTtJQUFBM0IsSUFBQTtFQUFBO0VBQUEsSUFBQTRCLFFBQUEsR0FBQTNCLE1BQUEsQ0FBQUUsR0FBQSxNQUFBRixNQUFBLENBQUFFLEdBQUE7RUFBQSxLQUFBeUIsUUFBQSxDQUFBN0IsSUFBQSxLQUFBNkIsUUFBQSxDQUFBN0IsSUFBQSxFQUFBQyxJQUFBLEtBQUFBLElBQUE7SUFBQTRCLFFBQUEsQ0FBQTdCLElBQUEsSUFBQUssWUFBQTtFQUFBO0VBQUEsSUFBQXlCLGNBQUEsR0FBQUQsUUFBQSxDQUFBN0IsSUFBQTtFQUFBO0lBbUJJO0lBQUFELGFBQUEsWUFBQUEsQ0FBQTtNQUFBLE9BQUErQixjQUFBO0lBQUE7RUFBQTtFQUFBLE9BQUFBLGNBQUE7QUFBQTtBQUFBL0IsYUFBQTtBQVhKLFNBQVNnQyxlQUFlLFFBQVEseUJBQXlCO0FBRXpEO0FBQ0EsT0FBTSxNQUFPQyxTQUFTO0VBQ3BCQyxZQUFZQyxPQUFPO0VBQUE7RUFBQSxDQUFBbkMsYUFBQSxHQUFBcUIsQ0FBQSxVQUFHLEVBQUU7SUFBQTtJQUFBckIsYUFBQSxHQUFBb0IsQ0FBQTtJQUFBcEIsYUFBQSxHQUFBbUIsQ0FBQTtJQUN0QixJQUFJLENBQUNnQixPQUFPLEdBQUdBLE9BQU87SUFBQztJQUFBbkMsYUFBQSxHQUFBbUIsQ0FBQTtJQUN2QixJQUFJLENBQUNpQixZQUFZLEdBQUcsSUFBSUosZUFBZSxFQUFFO0VBQzNDO0VBRUEsTUFBTXhCLEtBQUtBLENBQUE7SUFBQTtJQUFBUixhQUFBLEdBQUFvQixDQUFBO0lBQUFwQixhQUFBLEdBQUFtQixDQUFBO0lBQ1RrQixPQUFPLENBQUNDLEdBQUcsQ0FBQyx3QkFBd0IsQ0FBQztJQUFDO0lBQUF0QyxhQUFBLEdBQUFtQixDQUFBO0lBQ3RDLE9BQU87TUFBRW9CLE9BQU8sRUFBRTtJQUFJLENBQUU7RUFDMUI7RUFFQSxNQUFNQyxJQUFJQSxDQUFBO0lBQUE7SUFBQXhDLGFBQUEsR0FBQW9CLENBQUE7SUFBQXBCLGFBQUEsR0FBQW1CLENBQUE7SUFDUmtCLE9BQU8sQ0FBQ0MsR0FBRyxDQUFDLHdCQUF3QixDQUFDO0lBQUM7SUFBQXRDLGFBQUEsR0FBQW1CLENBQUE7SUFDdEMsT0FBTztNQUFFb0IsT0FBTyxFQUFFO0lBQUksQ0FBRTtFQUMxQjs7QUFHRixlQUFlTixTQUFTIiwiaWdub3JlTGlzdCI6W119