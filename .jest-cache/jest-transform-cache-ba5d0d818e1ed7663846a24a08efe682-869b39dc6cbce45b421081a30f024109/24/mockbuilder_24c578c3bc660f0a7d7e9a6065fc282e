ce510f0a2924e492024efc2e0793c1b5
/* istanbul ignore next */
function cov_23giu9qyb6() {
  var path = "/home/mhugo/code/claude-code-flow/src/__tests__/helpers/mock-builder.ts";
  var hash = "4487dd93238d5435b6863e90e634312c69d50697";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/home/mhugo/code/claude-code-flow/src/__tests__/helpers/mock-builder.ts",
    statementMap: {
      "0": {
        start: {
          line: 11,
          column: 8
        },
        end: {
          line: 11,
          column: 35
        }
      },
      "1": {
        start: {
          line: 14,
          column: 8
        },
        end: {
          line: 16,
          column: 9
        }
      },
      "2": {
        start: {
          line: 15,
          column: 12
        },
        end: {
          line: 15,
          column: 59
        }
      },
      "3": {
        start: {
          line: 17,
          column: 8
        },
        end: {
          line: 17,
          column: 36
        }
      },
      "4": {
        start: {
          line: 23,
          column: 24
        },
        end: {
          line: 23,
          column: 26
        }
      },
      "5": {
        start: {
          line: 24,
          column: 26
        },
        end: {
          line: 24,
          column: 40
        }
      },
      "6": {
        start: {
          line: 26,
          column: 24
        },
        end: {
          line: 26,
          column: 54
        }
      },
      "7": {
        start: {
          line: 27,
          column: 8
        },
        end: {
          line: 29,
          column: 9
        }
      },
      "8": {
        start: {
          line: 28,
          column: 12
        },
        end: {
          line: 28,
          column: 68
        }
      },
      "9": {
        start: {
          line: 31,
          column: 8
        },
        end: {
          line: 33,
          column: 9
        }
      },
      "10": {
        start: {
          line: 32,
          column: 12
        },
        end: {
          line: 32,
          column: 49
        }
      },
      "11": {
        start: {
          line: 34,
          column: 8
        },
        end: {
          line: 34,
          column: 23
        }
      },
      "12": {
        start: {
          line: 40,
          column: 24
        },
        end: {
          line: 40,
          column: 26
        }
      },
      "13": {
        start: {
          line: 41,
          column: 8
        },
        end: {
          line: 49,
          column: 11
        }
      },
      "14": {
        start: {
          line: 42,
          column: 26
        },
        end: {
          line: 42,
          column: 40
        }
      },
      "15": {
        start: {
          line: 43,
          column: 12
        },
        end: {
          line: 48,
          column: 13
        }
      },
      "16": {
        start: {
          line: 44,
          column: 16
        },
        end: {
          line: 44,
          column: 46
        }
      },
      "17": {
        start: {
          line: 47,
          column: 16
        },
        end: {
          line: 47,
          column: 37
        }
      },
      "18": {
        start: {
          line: 50,
          column: 8
        },
        end: {
          line: 52,
          column: 9
        }
      },
      "19": {
        start: {
          line: 51,
          column: 12
        },
        end: {
          line: 51,
          column: 49
        }
      },
      "20": {
        start: {
          line: 53,
          column: 8
        },
        end: {
          line: 53,
          column: 23
        }
      },
      "21": {
        start: {
          line: 59,
          column: 20
        },
        end: {
          line: 59,
          column: 30
        }
      },
      "22": {
        start: {
          line: 60,
          column: 29
        },
        end: {
          line: 60,
          column: 94
        }
      },
      "23": {
        start: {
          line: 61,
          column: 8
        },
        end: {
          line: 65,
          column: 11
        }
      },
      "24": {
        start: {
          line: 62,
          column: 12
        },
        end: {
          line: 64,
          column: 13
        }
      },
      "25": {
        start: {
          line: 63,
          column: 16
        },
        end: {
          line: 63,
          column: 54
        }
      },
      "26": {
        start: {
          line: 66,
          column: 8
        },
        end: {
          line: 66,
          column: 19
        }
      },
      "27": {
        start: {
          line: 72,
          column: 8
        },
        end: {
          line: 121,
          column: 10
        }
      },
      "28": {
        start: {
          line: 127,
          column: 29
        },
        end: {
          line: 160,
          column: 9
        }
      },
      "29": {
        start: {
          line: 130,
          column: 35
        },
        end: {
          line: 130,
          column: 47
        }
      },
      "30": {
        start: {
          line: 131,
          column: 16
        },
        end: {
          line: 131,
          column: 65
        }
      },
      "31": {
        start: {
          line: 132,
          column: 16
        },
        end: {
          line: 132,
          column: 36
        }
      },
      "32": {
        start: {
          line: 136,
          column: 30
        },
        end: {
          line: 139,
          column: 18
        }
      },
      "33": {
        start: {
          line: 137,
          column: 39
        },
        end: {
          line: 137,
          column: 51
        }
      },
      "34": {
        start: {
          line: 138,
          column: 20
        },
        end: {
          line: 138,
          column: 66
        }
      },
      "35": {
        start: {
          line: 140,
          column: 16
        },
        end: {
          line: 142,
          column: 17
        }
      },
      "36": {
        start: {
          line: 140,
          column: 29
        },
        end: {
          line: 140,
          column: 30
        }
      },
      "37": {
        start: {
          line: 141,
          column: 20
        },
        end: {
          line: 141,
          column: 64
        }
      },
      "38": {
        start: {
          line: 143,
          column: 16
        },
        end: {
          line: 143,
          column: 36
        }
      },
      "39": {
        start: {
          line: 147,
          column: 37
        },
        end: {
          line: 147,
          column: 62
        }
      },
      "40": {
        start: {
          line: 148,
          column: 37
        },
        end: {
          line: 148,
          column: 88
        }
      },
      "41": {
        start: {
          line: 149,
          column: 16
        },
        end: {
          line: 149,
          column: 48
        }
      },
      "42": {
        start: {
          line: 150,
          column: 16
        },
        end: {
          line: 150,
          column: 36
        }
      },
      "43": {
        start: {
          line: 154,
          column: 37
        },
        end: {
          line: 154,
          column: 62
        }
      },
      "44": {
        start: {
          line: 155,
          column: 33
        },
        end: {
          line: 155,
          column: 66
        }
      },
      "45": {
        start: {
          line: 156,
          column: 35
        },
        end: {
          line: 156,
          column: 91
        }
      },
      "46": {
        start: {
          line: 156,
          column: 62
        },
        end: {
          line: 156,
          column: 90
        }
      },
      "47": {
        start: {
          line: 157,
          column: 16
        },
        end: {
          line: 157,
          column: 51
        }
      },
      "48": {
        start: {
          line: 158,
          column: 16
        },
        end: {
          line: 158,
          column: 36
        }
      },
      "49": {
        start: {
          line: 161,
          column: 8
        },
        end: {
          line: 161,
          column: 28
        }
      },
      "50": {
        start: {
          line: 167,
          column: 8
        },
        end: {
          line: 179,
          column: 11
        }
      },
      "51": {
        start: {
          line: 168,
          column: 12
        },
        end: {
          line: 178,
          column: 13
        }
      },
      "52": {
        start: {
          line: 169,
          column: 16
        },
        end: {
          line: 173,
          column: 19
        }
      },
      "53": {
        start: {
          line: 170,
          column: 20
        },
        end: {
          line: 172,
          column: 21
        }
      },
      "54": {
        start: {
          line: 171,
          column: 24
        },
        end: {
          line: 171,
          column: 43
        }
      },
      "55": {
        start: {
          line: 175,
          column: 16
        },
        end: {
          line: 177,
          column: 17
        }
      },
      "56": {
        start: {
          line: 176,
          column: 20
        },
        end: {
          line: 176,
          column: 45
        }
      },
      "57": {
        start: {
          line: 182,
          column: 24
        },
        end: {
          line: 182,
          column: 26
        }
      },
      "58": {
        start: {
          line: 183,
          column: 22
        },
        end: {
          line: 183,
          column: 31
        }
      },
      "59": {
        start: {
          line: 184,
          column: 8
        },
        end: {
          line: 193,
          column: 9
        }
      },
      "60": {
        start: {
          line: 185,
          column: 12
        },
        end: {
          line: 191,
          column: 15
        }
      },
      "61": {
        start: {
          line: 186,
          column: 16
        },
        end: {
          line: 190,
          column: 17
        }
      },
      "62": {
        start: {
          line: 187,
          column: 20
        },
        end: {
          line: 189,
          column: 21
        }
      },
      "63": {
        start: {
          line: 188,
          column: 24
        },
        end: {
          line: 188,
          column: 43
        }
      },
      "64": {
        start: {
          line: 192,
          column: 12
        },
        end: {
          line: 192,
          column: 53
        }
      },
      "65": {
        start: {
          line: 194,
          column: 8
        },
        end: {
          line: 194,
          column: 23
        }
      },
      "66": {
        start: {
          line: 197,
          column: 21
        },
        end: {
          line: 197,
          column: 30
        }
      },
      "67": {
        start: {
          line: 198,
          column: 8
        },
        end: {
          line: 209,
          column: 9
        }
      },
      "68": {
        start: {
          line: 200,
          column: 12
        },
        end: {
          line: 208,
          column: 13
        }
      },
      "69": {
        start: {
          line: 201,
          column: 16
        },
        end: {
          line: 201,
          column: 43
        }
      },
      "70": {
        start: {
          line: 203,
          column: 17
        },
        end: {
          line: 208,
          column: 13
        }
      },
      "71": {
        start: {
          line: 204,
          column: 16
        },
        end: {
          line: 204,
          column: 43
        }
      },
      "72": {
        start: {
          line: 206,
          column: 17
        },
        end: {
          line: 208,
          column: 13
        }
      },
      "73": {
        start: {
          line: 207,
          column: 16
        },
        end: {
          line: 207,
          column: 63
        }
      },
      "74": {
        start: {
          line: 210,
          column: 8
        },
        end: {
          line: 210,
          column: 20
        }
      },
      "75": {
        start: {
          line: 213,
          column: 29
        },
        end: {
          line: 213,
          column: 31
        }
      },
      "76": {
        start: {
          line: 214,
          column: 8
        },
        end: {
          line: 214,
          column: 46
        }
      },
      "77": {
        start: {
          line: 216,
          column: 8
        },
        end: {
          line: 228,
          column: 11
        }
      },
      "78": {
        start: {
          line: 217,
          column: 33
        },
        end: {
          line: 217,
          column: 45
        }
      },
      "79": {
        start: {
          line: 218,
          column: 12
        },
        end: {
          line: 227,
          column: 13
        }
      },
      "80": {
        start: {
          line: 219,
          column: 16
        },
        end: {
          line: 226,
          column: 19
        }
      },
      "81": {
        start: {
          line: 220,
          column: 20
        },
        end: {
          line: 224,
          column: 23
        }
      },
      "82": {
        start: {
          line: 225,
          column: 20
        },
        end: {
          line: 225,
          column: 49
        }
      },
      "83": {
        start: {
          line: 233,
          column: 33
        },
        end: {
          line: 233,
          column: 73
        }
      },
      "84": {
        start: {
          line: 233,
          column: 64
        },
        end: {
          line: 233,
          column: 72
        }
      },
      "85": {
        start: {
          line: 234,
          column: 31
        },
        end: {
          line: 234,
          column: 62
        }
      },
      "86": {
        start: {
          line: 234,
          column: 53
        },
        end: {
          line: 234,
          column: 61
        }
      },
      "87": {
        start: {
          line: 236,
          column: 8
        },
        end: {
          line: 246,
          column: 9
        }
      },
      "88": {
        start: {
          line: 236,
          column: 21
        },
        end: {
          line: 236,
          column: 22
        }
      },
      "89": {
        start: {
          line: 237,
          column: 26
        },
        end: {
          line: 237,
          column: 30
        }
      },
      "90": {
        start: {
          line: 238,
          column: 12
        },
        end: {
          line: 243,
          column: 13
        }
      },
      "91": {
        start: {
          line: 238,
          column: 25
        },
        end: {
          line: 238,
          column: 26
        }
      },
      "92": {
        start: {
          line: 239,
          column: 16
        },
        end: {
          line: 242,
          column: 17
        }
      },
      "93": {
        start: {
          line: 240,
          column: 20
        },
        end: {
          line: 240,
          column: 36
        }
      },
      "94": {
        start: {
          line: 241,
          column: 20
        },
        end: {
          line: 241,
          column: 26
        }
      },
      "95": {
        start: {
          line: 244,
          column: 12
        },
        end: {
          line: 245,
          column: 28
        }
      },
      "96": {
        start: {
          line: 245,
          column: 16
        },
        end: {
          line: 245,
          column: 28
        }
      },
      "97": {
        start: {
          line: 247,
          column: 8
        },
        end: {
          line: 247,
          column: 21
        }
      },
      "98": {
        start: {
          line: 251,
          column: 27
        },
        end: {
          line: 251,
          column: 52
        }
      },
      "99": {
        start: {
          line: 253,
          column: 25
        },
        end: {
          line: 259,
          column: 5
        }
      },
      "100": {
        start: {
          line: 260,
          column: 4
        },
        end: {
          line: 260,
          column: 41
        }
      },
      "101": {
        start: {
          line: 263,
          column: 28
        },
        end: {
          line: 269,
          column: 5
        }
      },
      "102": {
        start: {
          line: 270,
          column: 4
        },
        end: {
          line: 270,
          column: 44
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 10,
            column: 4
          },
          end: {
            line: 10,
            column: 5
          }
        },
        loc: {
          start: {
            line: 10,
            column: 49
          },
          end: {
            line: 12,
            column: 5
          }
        },
        line: 10
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 13,
            column: 4
          },
          end: {
            line: 13,
            column: 5
          }
        },
        loc: {
          start: {
            line: 13,
            column: 31
          },
          end: {
            line: 18,
            column: 5
          }
        },
        line: 13
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 22,
            column: 4
          },
          end: {
            line: 22,
            column: 5
          }
        },
        loc: {
          start: {
            line: 22,
            column: 45
          },
          end: {
            line: 35,
            column: 5
          }
        },
        line: 22
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 39,
            column: 4
          },
          end: {
            line: 39,
            column: 5
          }
        },
        loc: {
          start: {
            line: 39,
            column: 57
          },
          end: {
            line: 54,
            column: 5
          }
        },
        line: 39
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 41,
            column: 39
          },
          end: {
            line: 41,
            column: 40
          }
        },
        loc: {
          start: {
            line: 41,
            column: 46
          },
          end: {
            line: 49,
            column: 9
          }
        },
        line: 41
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 58,
            column: 4
          },
          end: {
            line: 58,
            column: 5
          }
        },
        loc: {
          start: {
            line: 58,
            column: 28
          },
          end: {
            line: 67,
            column: 5
          }
        },
        line: 58
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 61,
            column: 29
          },
          end: {
            line: 61,
            column: 30
          }
        },
        loc: {
          start: {
            line: 61,
            column: 39
          },
          end: {
            line: 65,
            column: 9
          }
        },
        line: 61
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 71,
            column: 4
          },
          end: {
            line: 71,
            column: 5
          }
        },
        loc: {
          start: {
            line: 71,
            column: 24
          },
          end: {
            line: 122,
            column: 5
          }
        },
        line: 71
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 75,
            column: 16
          },
          end: {
            line: 75,
            column: 17
          }
        },
        loc: {
          start: {
            line: 75,
            column: 29
          },
          end: {
            line: 75,
            column: 32
          }
        },
        line: 75
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 76,
            column: 16
          },
          end: {
            line: 76,
            column: 17
          }
        },
        loc: {
          start: {
            line: 76,
            column: 24
          },
          end: {
            line: 76,
            column: 27
          }
        },
        line: 76
      },
      "10": {
        name: "(anonymous_10)",
        decl: {
          start: {
            line: 77,
            column: 16
          },
          end: {
            line: 77,
            column: 17
          }
        },
        loc: {
          start: {
            line: 77,
            column: 27
          },
          end: {
            line: 77,
            column: 30
          }
        },
        line: 77
      },
      "11": {
        name: "(anonymous_11)",
        decl: {
          start: {
            line: 78,
            column: 16
          },
          end: {
            line: 78,
            column: 17
          }
        },
        loc: {
          start: {
            line: 78,
            column: 25
          },
          end: {
            line: 78,
            column: 28
          }
        },
        line: 78
      },
      "12": {
        name: "(anonymous_12)",
        decl: {
          start: {
            line: 79,
            column: 16
          },
          end: {
            line: 79,
            column: 17
          }
        },
        loc: {
          start: {
            line: 79,
            column: 24
          },
          end: {
            line: 79,
            column: 27
          }
        },
        line: 79
      },
      "13": {
        name: "(anonymous_13)",
        decl: {
          start: {
            line: 80,
            column: 16
          },
          end: {
            line: 80,
            column: 17
          }
        },
        loc: {
          start: {
            line: 80,
            column: 24
          },
          end: {
            line: 80,
            column: 27
          }
        },
        line: 80
      },
      "14": {
        name: "(anonymous_14)",
        decl: {
          start: {
            line: 84,
            column: 16
          },
          end: {
            line: 84,
            column: 17
          }
        },
        loc: {
          start: {
            line: 84,
            column: 29
          },
          end: {
            line: 84,
            column: 32
          }
        },
        line: 84
      },
      "15": {
        name: "(anonymous_15)",
        decl: {
          start: {
            line: 85,
            column: 16
          },
          end: {
            line: 85,
            column: 17
          }
        },
        loc: {
          start: {
            line: 85,
            column: 31
          },
          end: {
            line: 85,
            column: 34
          }
        },
        line: 85
      },
      "16": {
        name: "(anonymous_16)",
        decl: {
          start: {
            line: 86,
            column: 16
          },
          end: {
            line: 86,
            column: 17
          }
        },
        loc: {
          start: {
            line: 86,
            column: 29
          },
          end: {
            line: 86,
            column: 32
          }
        },
        line: 86
      },
      "17": {
        name: "(anonymous_17)",
        decl: {
          start: {
            line: 87,
            column: 16
          },
          end: {
            line: 87,
            column: 17
          }
        },
        loc: {
          start: {
            line: 87,
            column: 26
          },
          end: {
            line: 87,
            column: 29
          }
        },
        line: 87
      },
      "18": {
        name: "(anonymous_18)",
        decl: {
          start: {
            line: 88,
            column: 16
          },
          end: {
            line: 88,
            column: 17
          }
        },
        loc: {
          start: {
            line: 88,
            column: 27
          },
          end: {
            line: 88,
            column: 30
          }
        },
        line: 88
      },
      "19": {
        name: "(anonymous_19)",
        decl: {
          start: {
            line: 92,
            column: 16
          },
          end: {
            line: 92,
            column: 17
          }
        },
        loc: {
          start: {
            line: 92,
            column: 29
          },
          end: {
            line: 92,
            column: 32
          }
        },
        line: 92
      },
      "20": {
        name: "(anonymous_20)",
        decl: {
          start: {
            line: 93,
            column: 16
          },
          end: {
            line: 93,
            column: 17
          }
        },
        loc: {
          start: {
            line: 93,
            column: 29
          },
          end: {
            line: 93,
            column: 32
          }
        },
        line: 93
      },
      "21": {
        name: "(anonymous_21)",
        decl: {
          start: {
            line: 94,
            column: 16
          },
          end: {
            line: 94,
            column: 17
          }
        },
        loc: {
          start: {
            line: 94,
            column: 34
          },
          end: {
            line: 94,
            column: 37
          }
        },
        line: 94
      },
      "22": {
        name: "(anonymous_22)",
        decl: {
          start: {
            line: 95,
            column: 16
          },
          end: {
            line: 95,
            column: 17
          }
        },
        loc: {
          start: {
            line: 95,
            column: 33
          },
          end: {
            line: 95,
            column: 36
          }
        },
        line: 95
      },
      "23": {
        name: "(anonymous_23)",
        decl: {
          start: {
            line: 96,
            column: 16
          },
          end: {
            line: 96,
            column: 17
          }
        },
        loc: {
          start: {
            line: 96,
            column: 33
          },
          end: {
            line: 96,
            column: 36
          }
        },
        line: 96
      },
      "24": {
        name: "(anonymous_24)",
        decl: {
          start: {
            line: 97,
            column: 16
          },
          end: {
            line: 97,
            column: 17
          }
        },
        loc: {
          start: {
            line: 97,
            column: 33
          },
          end: {
            line: 97,
            column: 36
          }
        },
        line: 97
      },
      "25": {
        name: "(anonymous_25)",
        decl: {
          start: {
            line: 101,
            column: 16
          },
          end: {
            line: 101,
            column: 17
          }
        },
        loc: {
          start: {
            line: 101,
            column: 29
          },
          end: {
            line: 101,
            column: 32
          }
        },
        line: 101
      },
      "26": {
        name: "(anonymous_26)",
        decl: {
          start: {
            line: 102,
            column: 16
          },
          end: {
            line: 102,
            column: 17
          }
        },
        loc: {
          start: {
            line: 102,
            column: 32
          },
          end: {
            line: 102,
            column: 35
          }
        },
        line: 102
      },
      "27": {
        name: "(anonymous_27)",
        decl: {
          start: {
            line: 103,
            column: 16
          },
          end: {
            line: 103,
            column: 17
          }
        },
        loc: {
          start: {
            line: 103,
            column: 31
          },
          end: {
            line: 103,
            column: 34
          }
        },
        line: 103
      },
      "28": {
        name: "(anonymous_28)",
        decl: {
          start: {
            line: 104,
            column: 16
          },
          end: {
            line: 104,
            column: 17
          }
        },
        loc: {
          start: {
            line: 104,
            column: 27
          },
          end: {
            line: 104,
            column: 30
          }
        },
        line: 104
      },
      "29": {
        name: "(anonymous_29)",
        decl: {
          start: {
            line: 108,
            column: 16
          },
          end: {
            line: 108,
            column: 17
          }
        },
        loc: {
          start: {
            line: 108,
            column: 26
          },
          end: {
            line: 108,
            column: 29
          }
        },
        line: 108
      },
      "30": {
        name: "(anonymous_30)",
        decl: {
          start: {
            line: 109,
            column: 16
          },
          end: {
            line: 109,
            column: 17
          }
        },
        loc: {
          start: {
            line: 109,
            column: 29
          },
          end: {
            line: 109,
            column: 32
          }
        },
        line: 109
      },
      "31": {
        name: "(anonymous_31)",
        decl: {
          start: {
            line: 110,
            column: 16
          },
          end: {
            line: 110,
            column: 17
          }
        },
        loc: {
          start: {
            line: 110,
            column: 24
          },
          end: {
            line: 110,
            column: 27
          }
        },
        line: 110
      },
      "32": {
        name: "(anonymous_32)",
        decl: {
          start: {
            line: 111,
            column: 16
          },
          end: {
            line: 111,
            column: 17
          }
        },
        loc: {
          start: {
            line: 111,
            column: 30
          },
          end: {
            line: 111,
            column: 33
          }
        },
        line: 111
      },
      "33": {
        name: "(anonymous_33)",
        decl: {
          start: {
            line: 115,
            column: 16
          },
          end: {
            line: 115,
            column: 17
          }
        },
        loc: {
          start: {
            line: 115,
            column: 27
          },
          end: {
            line: 115,
            column: 30
          }
        },
        line: 115
      },
      "34": {
        name: "(anonymous_34)",
        decl: {
          start: {
            line: 116,
            column: 16
          },
          end: {
            line: 116,
            column: 17
          }
        },
        loc: {
          start: {
            line: 116,
            column: 28
          },
          end: {
            line: 116,
            column: 31
          }
        },
        line: 116
      },
      "35": {
        name: "(anonymous_35)",
        decl: {
          start: {
            line: 117,
            column: 16
          },
          end: {
            line: 117,
            column: 17
          }
        },
        loc: {
          start: {
            line: 117,
            column: 24
          },
          end: {
            line: 117,
            column: 27
          }
        },
        line: 117
      },
      "36": {
        name: "(anonymous_36)",
        decl: {
          start: {
            line: 118,
            column: 16
          },
          end: {
            line: 118,
            column: 17
          }
        },
        loc: {
          start: {
            line: 118,
            column: 25
          },
          end: {
            line: 118,
            column: 28
          }
        },
        line: 118
      },
      "37": {
        name: "(anonymous_37)",
        decl: {
          start: {
            line: 119,
            column: 16
          },
          end: {
            line: 119,
            column: 17
          }
        },
        loc: {
          start: {
            line: 119,
            column: 23
          },
          end: {
            line: 119,
            column: 26
          }
        },
        line: 119
      },
      "38": {
        name: "(anonymous_38)",
        decl: {
          start: {
            line: 126,
            column: 4
          },
          end: {
            line: 126,
            column: 5
          }
        },
        loc: {
          start: {
            line: 126,
            column: 29
          },
          end: {
            line: 162,
            column: 5
          }
        },
        line: 126
      },
      "39": {
        name: "(anonymous_39)",
        decl: {
          start: {
            line: 129,
            column: 34
          },
          end: {
            line: 129,
            column: 35
          }
        },
        loc: {
          start: {
            line: 129,
            column: 55
          },
          end: {
            line: 133,
            column: 13
          }
        },
        line: 129
      },
      "40": {
        name: "(anonymous_40)",
        decl: {
          start: {
            line: 135,
            column: 37
          },
          end: {
            line: 135,
            column: 38
          }
        },
        loc: {
          start: {
            line: 135,
            column: 50
          },
          end: {
            line: 144,
            column: 13
          }
        },
        line: 135
      },
      "41": {
        name: "(anonymous_41)",
        decl: {
          start: {
            line: 136,
            column: 42
          },
          end: {
            line: 136,
            column: 43
          }
        },
        loc: {
          start: {
            line: 136,
            column: 52
          },
          end: {
            line: 139,
            column: 17
          }
        },
        line: 136
      },
      "42": {
        name: "(anonymous_42)",
        decl: {
          start: {
            line: 146,
            column: 38
          },
          end: {
            line: 146,
            column: 39
          }
        },
        loc: {
          start: {
            line: 146,
            column: 51
          },
          end: {
            line: 151,
            column: 13
          }
        },
        line: 146
      },
      "43": {
        name: "(anonymous_43)",
        decl: {
          start: {
            line: 153,
            column: 44
          },
          end: {
            line: 153,
            column: 45
          }
        },
        loc: {
          start: {
            line: 153,
            column: 50
          },
          end: {
            line: 159,
            column: 13
          }
        },
        line: 153
      },
      "44": {
        name: "(anonymous_44)",
        decl: {
          start: {
            line: 156,
            column: 55
          },
          end: {
            line: 156,
            column: 56
          }
        },
        loc: {
          start: {
            line: 156,
            column: 62
          },
          end: {
            line: 156,
            column: 90
          }
        },
        line: 156
      },
      "45": {
        name: "(anonymous_45)",
        decl: {
          start: {
            line: 166,
            column: 4
          },
          end: {
            line: 166,
            column: 5
          }
        },
        loc: {
          start: {
            line: 166,
            column: 25
          },
          end: {
            line: 180,
            column: 5
          }
        },
        line: 166
      },
      "46": {
        name: "(anonymous_46)",
        decl: {
          start: {
            line: 167,
            column: 37
          },
          end: {
            line: 167,
            column: 38
          }
        },
        loc: {
          start: {
            line: 167,
            column: 45
          },
          end: {
            line: 179,
            column: 9
          }
        },
        line: 167
      },
      "47": {
        name: "(anonymous_47)",
        decl: {
          start: {
            line: 169,
            column: 44
          },
          end: {
            line: 169,
            column: 45
          }
        },
        loc: {
          start: {
            line: 169,
            column: 54
          },
          end: {
            line: 173,
            column: 17
          }
        },
        line: 169
      },
      "48": {
        name: "(anonymous_48)",
        decl: {
          start: {
            line: 181,
            column: 4
          },
          end: {
            line: 181,
            column: 5
          }
        },
        loc: {
          start: {
            line: 181,
            column: 30
          },
          end: {
            line: 195,
            column: 5
          }
        },
        line: 181
      },
      "49": {
        name: "(anonymous_49)",
        decl: {
          start: {
            line: 185,
            column: 56
          },
          end: {
            line: 185,
            column: 57
          }
        },
        loc: {
          start: {
            line: 185,
            column: 64
          },
          end: {
            line: 191,
            column: 13
          }
        },
        line: 185
      },
      "50": {
        name: "(anonymous_50)",
        decl: {
          start: {
            line: 196,
            column: 4
          },
          end: {
            line: 196,
            column: 5
          }
        },
        loc: {
          start: {
            line: 196,
            column: 41
          },
          end: {
            line: 211,
            column: 5
          }
        },
        line: 196
      },
      "51": {
        name: "(anonymous_51)",
        decl: {
          start: {
            line: 212,
            column: 4
          },
          end: {
            line: 212,
            column: 5
          }
        },
        loc: {
          start: {
            line: 212,
            column: 36
          },
          end: {
            line: 229,
            column: 5
          }
        },
        line: 212
      },
      "52": {
        name: "(anonymous_52)",
        decl: {
          start: {
            line: 216,
            column: 37
          },
          end: {
            line: 216,
            column: 38
          }
        },
        loc: {
          start: {
            line: 216,
            column: 44
          },
          end: {
            line: 228,
            column: 9
          }
        },
        line: 216
      },
      "53": {
        name: "(anonymous_53)",
        decl: {
          start: {
            line: 219,
            column: 39
          },
          end: {
            line: 219,
            column: 40
          }
        },
        loc: {
          start: {
            line: 219,
            column: 52
          },
          end: {
            line: 226,
            column: 17
          }
        },
        line: 219
      },
      "54": {
        name: "(anonymous_54)",
        decl: {
          start: {
            line: 230,
            column: 4
          },
          end: {
            line: 230,
            column: 5
          }
        },
        loc: {
          start: {
            line: 230,
            column: 51
          },
          end: {
            line: 248,
            column: 5
          }
        },
        line: 230
      },
      "55": {
        name: "(anonymous_55)",
        decl: {
          start: {
            line: 233,
            column: 59
          },
          end: {
            line: 233,
            column: 60
          }
        },
        loc: {
          start: {
            line: 233,
            column: 64
          },
          end: {
            line: 233,
            column: 72
          }
        },
        line: 233
      },
      "56": {
        name: "(anonymous_56)",
        decl: {
          start: {
            line: 234,
            column: 48
          },
          end: {
            line: 234,
            column: 49
          }
        },
        loc: {
          start: {
            line: 234,
            column: 53
          },
          end: {
            line: 234,
            column: 61
          }
        },
        line: 234
      },
      "57": {
        name: "createLondonMocks",
        decl: {
          start: {
            line: 252,
            column: 16
          },
          end: {
            line: 252,
            column: 33
          }
        },
        loc: {
          start: {
            line: 252,
            column: 42
          },
          end: {
            line: 261,
            column: 1
          }
        },
        line: 252
      },
      "58": {
        name: "createClassicalMocks",
        decl: {
          start: {
            line: 262,
            column: 16
          },
          end: {
            line: 262,
            column: 36
          }
        },
        loc: {
          start: {
            line: 262,
            column: 45
          },
          end: {
            line: 271,
            column: 1
          }
        },
        line: 262
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 10,
            column: 16
          },
          end: {
            line: 10,
            column: 47
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 10,
            column: 25
          },
          end: {
            line: 10,
            column: 47
          }
        }],
        line: 10
      },
      "1": {
        loc: {
          start: {
            line: 14,
            column: 8
          },
          end: {
            line: 16,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 14,
            column: 8
          },
          end: {
            line: 16,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 14
      },
      "2": {
        loc: {
          start: {
            line: 22,
            column: 17
          },
          end: {
            line: 22,
            column: 43
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 22,
            column: 26
          },
          end: {
            line: 22,
            column: 43
          }
        }],
        line: 22
      },
      "3": {
        loc: {
          start: {
            line: 31,
            column: 8
          },
          end: {
            line: 33,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 31,
            column: 8
          },
          end: {
            line: 33,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 31
      },
      "4": {
        loc: {
          start: {
            line: 39,
            column: 29
          },
          end: {
            line: 39,
            column: 55
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 39,
            column: 38
          },
          end: {
            line: 39,
            column: 55
          }
        }],
        line: 39
      },
      "5": {
        loc: {
          start: {
            line: 43,
            column: 12
          },
          end: {
            line: 48,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 43,
            column: 12
          },
          end: {
            line: 48,
            column: 13
          }
        }, {
          start: {
            line: 46,
            column: 17
          },
          end: {
            line: 48,
            column: 13
          }
        }],
        line: 43
      },
      "6": {
        loc: {
          start: {
            line: 50,
            column: 8
          },
          end: {
            line: 52,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 50,
            column: 8
          },
          end: {
            line: 52,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 50
      },
      "7": {
        loc: {
          start: {
            line: 60,
            column: 29
          },
          end: {
            line: 60,
            column: 94
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 60,
            column: 29
          },
          end: {
            line: 60,
            column: 36
          }
        }, {
          start: {
            line: 60,
            column: 40
          },
          end: {
            line: 60,
            column: 94
          }
        }],
        line: 60
      },
      "8": {
        loc: {
          start: {
            line: 62,
            column: 12
          },
          end: {
            line: 64,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 62,
            column: 12
          },
          end: {
            line: 64,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 62
      },
      "9": {
        loc: {
          start: {
            line: 147,
            column: 37
          },
          end: {
            line: 147,
            column: 62
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 147,
            column: 37
          },
          end: {
            line: 147,
            column: 56
          }
        }, {
          start: {
            line: 147,
            column: 60
          },
          end: {
            line: 147,
            column: 62
          }
        }],
        line: 147
      },
      "10": {
        loc: {
          start: {
            line: 154,
            column: 37
          },
          end: {
            line: 154,
            column: 62
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 154,
            column: 37
          },
          end: {
            line: 154,
            column: 56
          }
        }, {
          start: {
            line: 154,
            column: 60
          },
          end: {
            line: 154,
            column: 62
          }
        }],
        line: 154
      },
      "11": {
        loc: {
          start: {
            line: 155,
            column: 33
          },
          end: {
            line: 155,
            column: 66
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 155,
            column: 33
          },
          end: {
            line: 155,
            column: 60
          }
        }, {
          start: {
            line: 155,
            column: 64
          },
          end: {
            line: 155,
            column: 66
          }
        }],
        line: 155
      },
      "12": {
        loc: {
          start: {
            line: 168,
            column: 12
          },
          end: {
            line: 178,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 168,
            column: 12
          },
          end: {
            line: 178,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 168
      },
      "13": {
        loc: {
          start: {
            line: 168,
            column: 16
          },
          end: {
            line: 168,
            column: 48
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 168,
            column: 16
          },
          end: {
            line: 168,
            column: 20
          }
        }, {
          start: {
            line: 168,
            column: 24
          },
          end: {
            line: 168,
            column: 48
          }
        }],
        line: 168
      },
      "14": {
        loc: {
          start: {
            line: 170,
            column: 20
          },
          end: {
            line: 172,
            column: 21
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 170,
            column: 20
          },
          end: {
            line: 172,
            column: 21
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 170
      },
      "15": {
        loc: {
          start: {
            line: 175,
            column: 16
          },
          end: {
            line: 177,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 175,
            column: 16
          },
          end: {
            line: 177,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 175
      },
      "16": {
        loc: {
          start: {
            line: 184,
            column: 15
          },
          end: {
            line: 184,
            column: 54
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 184,
            column: 15
          },
          end: {
            line: 184,
            column: 22
          }
        }, {
          start: {
            line: 184,
            column: 26
          },
          end: {
            line: 184,
            column: 54
          }
        }],
        line: 184
      },
      "17": {
        loc: {
          start: {
            line: 186,
            column: 16
          },
          end: {
            line: 190,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 186,
            column: 16
          },
          end: {
            line: 190,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 186
      },
      "18": {
        loc: {
          start: {
            line: 186,
            column: 20
          },
          end: {
            line: 186,
            column: 81
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 186,
            column: 20
          },
          end: {
            line: 186,
            column: 42
          }
        }, {
          start: {
            line: 186,
            column: 46
          },
          end: {
            line: 186,
            column: 81
          }
        }],
        line: 186
      },
      "19": {
        loc: {
          start: {
            line: 187,
            column: 20
          },
          end: {
            line: 189,
            column: 21
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 187,
            column: 20
          },
          end: {
            line: 189,
            column: 21
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 187
      },
      "20": {
        loc: {
          start: {
            line: 198,
            column: 8
          },
          end: {
            line: 209,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 198,
            column: 8
          },
          end: {
            line: 209,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 198
      },
      "21": {
        loc: {
          start: {
            line: 200,
            column: 12
          },
          end: {
            line: 208,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 200,
            column: 12
          },
          end: {
            line: 208,
            column: 13
          }
        }, {
          start: {
            line: 203,
            column: 17
          },
          end: {
            line: 208,
            column: 13
          }
        }],
        line: 200
      },
      "22": {
        loc: {
          start: {
            line: 200,
            column: 16
          },
          end: {
            line: 200,
            column: 77
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 200,
            column: 16
          },
          end: {
            line: 200,
            column: 44
          }
        }, {
          start: {
            line: 200,
            column: 48
          },
          end: {
            line: 200,
            column: 77
          }
        }],
        line: 200
      },
      "23": {
        loc: {
          start: {
            line: 203,
            column: 17
          },
          end: {
            line: 208,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 203,
            column: 17
          },
          end: {
            line: 208,
            column: 13
          }
        }, {
          start: {
            line: 206,
            column: 17
          },
          end: {
            line: 208,
            column: 13
          }
        }],
        line: 203
      },
      "24": {
        loc: {
          start: {
            line: 203,
            column: 21
          },
          end: {
            line: 203,
            column: 80
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 203,
            column: 21
          },
          end: {
            line: 203,
            column: 48
          }
        }, {
          start: {
            line: 203,
            column: 52
          },
          end: {
            line: 203,
            column: 80
          }
        }],
        line: 203
      },
      "25": {
        loc: {
          start: {
            line: 206,
            column: 17
          },
          end: {
            line: 208,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 206,
            column: 17
          },
          end: {
            line: 208,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 206
      },
      "26": {
        loc: {
          start: {
            line: 206,
            column: 21
          },
          end: {
            line: 206,
            column: 85
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 206,
            column: 21
          },
          end: {
            line: 206,
            column: 52
          }
        }, {
          start: {
            line: 206,
            column: 56
          },
          end: {
            line: 206,
            column: 85
          }
        }],
        line: 206
      },
      "27": {
        loc: {
          start: {
            line: 218,
            column: 12
          },
          end: {
            line: 227,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 218,
            column: 12
          },
          end: {
            line: 227,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 218
      },
      "28": {
        loc: {
          start: {
            line: 239,
            column: 16
          },
          end: {
            line: 242,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 239,
            column: 16
          },
          end: {
            line: 242,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 239
      },
      "29": {
        loc: {
          start: {
            line: 244,
            column: 12
          },
          end: {
            line: 245,
            column: 28
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 244,
            column: 12
          },
          end: {
            line: 245,
            column: 28
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 244
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0,
      "74": 0,
      "75": 0,
      "76": 0,
      "77": 0,
      "78": 0,
      "79": 0,
      "80": 0,
      "81": 0,
      "82": 0,
      "83": 0,
      "84": 0,
      "85": 0,
      "86": 0,
      "87": 0,
      "88": 0,
      "89": 0,
      "90": 0,
      "91": 0,
      "92": 0,
      "93": 0,
      "94": 0,
      "95": 0,
      "96": 0,
      "97": 0,
      "98": 0,
      "99": 0,
      "100": 0,
      "101": 0,
      "102": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0
    },
    b: {
      "0": [0],
      "1": [0, 0],
      "2": [0],
      "3": [0, 0],
      "4": [0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0, 0],
      "10": [0, 0],
      "11": [0, 0],
      "12": [0, 0],
      "13": [0, 0],
      "14": [0, 0],
      "15": [0, 0],
      "16": [0, 0],
      "17": [0, 0],
      "18": [0, 0],
      "19": [0, 0],
      "20": [0, 0],
      "21": [0, 0],
      "22": [0, 0],
      "23": [0, 0],
      "24": [0, 0],
      "25": [0, 0],
      "26": [0, 0],
      "27": [0, 0],
      "28": [0, 0],
      "29": [0, 0]
    },
    inputSourceMap: {
      file: "/home/mhugo/code/claude-code-flow/src/__tests__/helpers/mock-builder.ts",
      mappings: "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",
      names: [],
      sources: ["/home/mhugo/code/claude-code-flow/src/__tests__/helpers/mock-builder.ts"],
      sourcesContent: ["/**\n * Mock Builder - London School TDD Support\n * \n * Creates sophisticated mocks for interaction-focused testing\n */\n\nimport { jest } from '@jest/globals';\nimport type { MockConfiguration, MockObject } from './types.js';\n\nexport class MockBuilder {\n  private static instance: MockBuilder;\n  private globalConfig: MockConfiguration;\n\n  constructor(config: MockConfiguration = { strategy: 'hybrid' }) {\n    this.globalConfig = config;\n  }\n\n  static getInstance(config?: MockConfiguration): MockBuilder {\n    if (!MockBuilder.instance) {\n      MockBuilder.instance = new MockBuilder(config);\n    }\n    return MockBuilder.instance;\n  }\n\n  /**\n   * Create a mock object for a class/interface - London School approach\n   */\n  create<T>(\n    type: new (...args: any[]) => T, \n    config: MockConfiguration = this.globalConfig\n  ): T {\n    const mockObj: MockObject = {};\n    const prototype = type.prototype;\n    \n    // Get all methods from the prototype\n    const methods = this.extractMethods(prototype);\n    \n    for (const method of methods) {\n      mockObj[method] = this.createMethodMock(method, config);\n    }\n\n    // Add interaction tracking for London School\n    if (config.trackInteractions) {\n      this.addInteractionTracking(mockObj);\n    }\n\n    return mockObj as T;\n  }\n\n  /**\n   * Create a partial mock with specific overrides\n   */\n  createPartial<T>(overrides: Partial<T>, config: MockConfiguration = this.globalConfig): T {\n    const mockObj: MockObject = {};\n    \n    Object.keys(overrides).forEach(key => {\n      const value = overrides[key as keyof T];\n      if (typeof value === 'function') {\n        mockObj[key] = jest.fn(value as any);\n      } else {\n        mockObj[key] = value;\n      }\n    });\n\n    if (config.trackInteractions) {\n      this.addInteractionTracking(mockObj);\n    }\n\n    return mockObj as T;\n  }\n\n  /**\n   * Create spies on an existing object - Hybrid approach\n   */\n  createSpy<T extends object>(obj: T, methods?: (keyof T)[]): T {\n    const spy = { ...obj };\n    const methodsToSpy = methods || Object.getOwnPropertyNames(Object.getPrototypeOf(obj));\n    \n    methodsToSpy.forEach(method => {\n      if (typeof obj[method] === 'function') {\n        spy[method] = jest.spyOn(obj, method as any);\n      }\n    });\n\n    return spy;\n  }\n\n  /**\n   * Create common dependency mocks for Claude Code Flow\n   */\n  createCommonMocks() {\n    return {\n      // Memory Store mock\n      memoryStore: this.create(class MemoryStore {\n        initialize() {}\n        store() {}\n        retrieve() {}\n        delete() {}\n        query() {}\n        close() {}\n      }),\n\n      // Neural Engine mock\n      neuralEngine: this.create(class NeuralEngine {\n        initialize() {}\n        processInput() {}\n        trainModel() {}\n        predict() {}\n        optimize() {}\n      }),\n\n      // Swarm Orchestrator mock\n      swarmOrchestrator: this.create(class SwarmOrchestrator {\n        initialize() {}\n        spawnAgent() {}\n        orchestrateTask() {}\n        getAgentStatus() {}\n        terminateAgent() {}\n        getSwarmStatus() {}\n      }),\n\n      // MCP Server mock\n      mcpServer: this.create(class MCPServer {\n        initialize() {}\n        handleMessage() {}\n        registerTool() {}\n        shutdown() {}\n      }),\n\n      // Database mock\n      database: this.create(class Database {\n        connect() {}\n        disconnect() {}\n        query() {}\n        transaction() {}\n      }),\n\n      // File System mock\n      fileSystem: this.create(class FileSystem {\n        readFile() {}\n        writeFile() {}\n        mkdir() {}\n        exists() {}\n        stat() {}\n      })\n    };\n  }\n\n  /**\n   * Create expectation builders for London School interaction testing\n   */\n  createExpectations<T>(mock: T) {\n    const expectations = {\n      // Verify method was called with specific arguments\n      toHaveBeenCalledWith: (method: keyof T, ...args: any[]) => {\n        const mockMethod = (mock as any)[method];\n        expect(mockMethod).toHaveBeenCalledWith(...args);\n        return expectations;\n      },\n\n      // Verify call order for interaction sequences\n      toHaveBeenCalledInOrder: (methods: (keyof T)[]) => {\n        const calls = methods.map(method => {\n          const mockMethod = (mock as any)[method];\n          return mockMethod.mock.invocationCallOrder[0];\n        });\n\n        for (let i = 1; i < calls.length; i++) {\n          expect(calls[i - 1]).toBeLessThan(calls[i]);\n        }\n        return expectations;\n      },\n\n      // Verify interaction patterns\n      toHaveInteractionPattern: (pattern: string) => {\n        const interactions = (mock as any).__interactions || [];\n        const patternFound = this.matchInteractionPattern(interactions, pattern);\n        expect(patternFound).toBe(true);\n        return expectations;\n      },\n\n      // Verify no unexpected interactions\n      toHaveNoUnexpectedInteractions: () => {\n        const interactions = (mock as any).__interactions || [];\n        const expected = (mock as any).__expectedInteractions || [];\n        const unexpected = interactions.filter((i: any) => !expected.includes(i.method));\n        expect(unexpected).toHaveLength(0);\n        return expectations;\n      }\n    };\n\n    return expectations;\n  }\n\n  /**\n   * Reset all mocks - useful for test isolation\n   */\n  resetAllMocks(mocks: Record<string, any>) {\n    Object.values(mocks).forEach(mock => {\n      if (mock && typeof mock === 'object') {\n        Object.values(mock).forEach(method => {\n          if (jest.isMockFunction(method)) {\n            (method as jest.Mock).mockReset();\n          }\n        });\n        \n        // Clear interaction tracking\n        if (mock.__interactions) {\n          mock.__interactions = [];\n        }\n      }\n    });\n  }\n\n  private extractMethods(prototype: any): string[] {\n    const methods: string[] = [];\n    let current = prototype;\n    \n    while (current && current !== Object.prototype) {\n      Object.getOwnPropertyNames(current).forEach(name => {\n        if (name !== 'constructor' && typeof current[name] === 'function') {\n          if (!methods.includes(name)) {\n            methods.push(name);\n          }\n        }\n      });\n      current = Object.getPrototypeOf(current);\n    }\n    \n    return methods;\n  }\n\n  private createMethodMock(methodName: string, config: MockConfiguration): jest.Mock {\n    const mock = jest.fn();\n    \n    if (config.autoGenerate) {\n      // Auto-generate reasonable return values based on method name\n      if (methodName.startsWith('get') || methodName.startsWith('find')) {\n        mock.mockResolvedValue({});\n      } else if (methodName.startsWith('is') || methodName.startsWith('has')) {\n        mock.mockReturnValue(true);\n      } else if (methodName.startsWith('create') || methodName.startsWith('save')) {\n        mock.mockResolvedValue({ id: 'generated-id' });\n      }\n    }\n\n    return mock;\n  }\n\n  private addInteractionTracking(mockObj: MockObject) {\n    const interactions: any[] = [];\n    mockObj.__interactions = interactions;\n\n    // Wrap all mock functions to track interactions\n    Object.keys(mockObj).forEach(key => {\n      const originalMock = mockObj[key];\n      if (jest.isMockFunction(originalMock)) {\n        mockObj[key] = jest.fn((...args: any[]) => {\n          interactions.push({\n            method: key,\n            args,\n            timestamp: Date.now()\n          });\n          return originalMock(...args);\n        });\n      }\n    });\n  }\n\n  private matchInteractionPattern(interactions: any[], pattern: string): boolean {\n    // Simple pattern matching for interaction sequences\n    // Pattern format: \"method1 -> method2 -> method3\"\n    const expectedSequence = pattern.split(' -> ').map(s => s.trim());\n    const actualSequence = interactions.map(i => i.method);\n    \n    // Check if expected sequence exists in actual sequence\n    for (let i = 0; i <= actualSequence.length - expectedSequence.length; i++) {\n      let matches = true;\n      for (let j = 0; j < expectedSequence.length; j++) {\n        if (actualSequence[i + j] !== expectedSequence[j]) {\n          matches = false;\n          break;\n        }\n      }\n      if (matches) return true;\n    }\n    \n    return false;\n  }\n}\n\n// Convenience functions for common patterns\nexport const mockBuilder = MockBuilder.getInstance();\n\nexport function createLondonMocks(config?: Partial<MockConfiguration>) {\n  const londonConfig: MockConfiguration = {\n    strategy: 'strict',\n    trackInteractions: true,\n    autoGenerate: true,\n    autoReset: true,\n    ...config\n  };\n  \n  return new MockBuilder(londonConfig);\n}\n\nexport function createClassicalMocks(config?: Partial<MockConfiguration>) {\n  const classicalConfig: MockConfiguration = {\n    strategy: 'minimal',\n    trackInteractions: false,\n    autoGenerate: false,\n    autoReset: false,\n    ...config\n  };\n  \n  return new MockBuilder(classicalConfig);\n}"],
      version: 3
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "4487dd93238d5435b6863e90e634312c69d50697"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_23giu9qyb6 = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_23giu9qyb6();
/**
 * Mock Builder - London School TDD Support
 *
 * Creates sophisticated mocks for interaction-focused testing
 */
import { jest } from '@jest/globals';
export class MockBuilder {
  static instance;
  globalConfig;
  constructor(config =
  /* istanbul ignore next */
  (cov_23giu9qyb6().b[0][0]++, {
    strategy: 'hybrid'
  })) {
    /* istanbul ignore next */
    cov_23giu9qyb6().f[0]++;
    cov_23giu9qyb6().s[0]++;
    this.globalConfig = config;
  }
  static getInstance(config) {
    /* istanbul ignore next */
    cov_23giu9qyb6().f[1]++;
    cov_23giu9qyb6().s[1]++;
    if (!MockBuilder.instance) {
      /* istanbul ignore next */
      cov_23giu9qyb6().b[1][0]++;
      cov_23giu9qyb6().s[2]++;
      MockBuilder.instance = new MockBuilder(config);
    } else
    /* istanbul ignore next */
    {
      cov_23giu9qyb6().b[1][1]++;
    }
    cov_23giu9qyb6().s[3]++;
    return MockBuilder.instance;
  }
  /**
   * Create a mock object for a class/interface - London School approach
   */
  create(type, config =
  /* istanbul ignore next */
  (cov_23giu9qyb6().b[2][0]++, this.globalConfig)) {
    /* istanbul ignore next */
    cov_23giu9qyb6().f[2]++;
    const mockObj =
    /* istanbul ignore next */
    (cov_23giu9qyb6().s[4]++, {});
    const prototype =
    /* istanbul ignore next */
    (cov_23giu9qyb6().s[5]++, type.prototype);
    // Get all methods from the prototype
    const methods =
    /* istanbul ignore next */
    (cov_23giu9qyb6().s[6]++, this.extractMethods(prototype));
    /* istanbul ignore next */
    cov_23giu9qyb6().s[7]++;
    for (const method of methods) {
      /* istanbul ignore next */
      cov_23giu9qyb6().s[8]++;
      mockObj[method] = this.createMethodMock(method, config);
    }
    // Add interaction tracking for London School
    /* istanbul ignore next */
    cov_23giu9qyb6().s[9]++;
    if (config.trackInteractions) {
      /* istanbul ignore next */
      cov_23giu9qyb6().b[3][0]++;
      cov_23giu9qyb6().s[10]++;
      this.addInteractionTracking(mockObj);
    } else
    /* istanbul ignore next */
    {
      cov_23giu9qyb6().b[3][1]++;
    }
    cov_23giu9qyb6().s[11]++;
    return mockObj;
  }
  /**
   * Create a partial mock with specific overrides
   */
  createPartial(overrides, config =
  /* istanbul ignore next */
  (cov_23giu9qyb6().b[4][0]++, this.globalConfig)) {
    /* istanbul ignore next */
    cov_23giu9qyb6().f[3]++;
    const mockObj =
    /* istanbul ignore next */
    (cov_23giu9qyb6().s[12]++, {});
    /* istanbul ignore next */
    cov_23giu9qyb6().s[13]++;
    Object.keys(overrides).forEach(key => {
      /* istanbul ignore next */
      cov_23giu9qyb6().f[4]++;
      const value =
      /* istanbul ignore next */
      (cov_23giu9qyb6().s[14]++, overrides[key]);
      /* istanbul ignore next */
      cov_23giu9qyb6().s[15]++;
      if (typeof value === 'function') {
        /* istanbul ignore next */
        cov_23giu9qyb6().b[5][0]++;
        cov_23giu9qyb6().s[16]++;
        mockObj[key] = jest.fn(value);
      } else {
        /* istanbul ignore next */
        cov_23giu9qyb6().b[5][1]++;
        cov_23giu9qyb6().s[17]++;
        mockObj[key] = value;
      }
    });
    /* istanbul ignore next */
    cov_23giu9qyb6().s[18]++;
    if (config.trackInteractions) {
      /* istanbul ignore next */
      cov_23giu9qyb6().b[6][0]++;
      cov_23giu9qyb6().s[19]++;
      this.addInteractionTracking(mockObj);
    } else
    /* istanbul ignore next */
    {
      cov_23giu9qyb6().b[6][1]++;
    }
    cov_23giu9qyb6().s[20]++;
    return mockObj;
  }
  /**
   * Create spies on an existing object - Hybrid approach
   */
  createSpy(obj, methods) {
    /* istanbul ignore next */
    cov_23giu9qyb6().f[5]++;
    const spy =
    /* istanbul ignore next */
    (cov_23giu9qyb6().s[21]++, {
      ...obj
    });
    const methodsToSpy =
    /* istanbul ignore next */
    (cov_23giu9qyb6().s[22]++,
    /* istanbul ignore next */
    (cov_23giu9qyb6().b[7][0]++, methods) ||
    /* istanbul ignore next */
    (cov_23giu9qyb6().b[7][1]++, Object.getOwnPropertyNames(Object.getPrototypeOf(obj))));
    /* istanbul ignore next */
    cov_23giu9qyb6().s[23]++;
    methodsToSpy.forEach(method => {
      /* istanbul ignore next */
      cov_23giu9qyb6().f[6]++;
      cov_23giu9qyb6().s[24]++;
      if (typeof obj[method] === 'function') {
        /* istanbul ignore next */
        cov_23giu9qyb6().b[8][0]++;
        cov_23giu9qyb6().s[25]++;
        spy[method] = jest.spyOn(obj, method);
      } else
      /* istanbul ignore next */
      {
        cov_23giu9qyb6().b[8][1]++;
      }
    });
    /* istanbul ignore next */
    cov_23giu9qyb6().s[26]++;
    return spy;
  }
  /**
   * Create common dependency mocks for Claude Code Flow
   */
  createCommonMocks() {
    /* istanbul ignore next */
    cov_23giu9qyb6().f[7]++;
    cov_23giu9qyb6().s[27]++;
    return {
      // Memory Store mock
      memoryStore: this.create(class MemoryStore {
        initialize() {
          /* istanbul ignore next */
          cov_23giu9qyb6().f[8]++;
        }
        store() {
          /* istanbul ignore next */
          cov_23giu9qyb6().f[9]++;
        }
        retrieve() {
          /* istanbul ignore next */
          cov_23giu9qyb6().f[10]++;
        }
        delete() {
          /* istanbul ignore next */
          cov_23giu9qyb6().f[11]++;
        }
        query() {
          /* istanbul ignore next */
          cov_23giu9qyb6().f[12]++;
        }
        close() {
          /* istanbul ignore next */
          cov_23giu9qyb6().f[13]++;
        }
      }),
      // Neural Engine mock
      neuralEngine: this.create(class NeuralEngine {
        initialize() {
          /* istanbul ignore next */
          cov_23giu9qyb6().f[14]++;
        }
        processInput() {
          /* istanbul ignore next */
          cov_23giu9qyb6().f[15]++;
        }
        trainModel() {
          /* istanbul ignore next */
          cov_23giu9qyb6().f[16]++;
        }
        predict() {
          /* istanbul ignore next */
          cov_23giu9qyb6().f[17]++;
        }
        optimize() {
          /* istanbul ignore next */
          cov_23giu9qyb6().f[18]++;
        }
      }),
      // Swarm Orchestrator mock
      swarmOrchestrator: this.create(class SwarmOrchestrator {
        initialize() {
          /* istanbul ignore next */
          cov_23giu9qyb6().f[19]++;
        }
        spawnAgent() {
          /* istanbul ignore next */
          cov_23giu9qyb6().f[20]++;
        }
        orchestrateTask() {
          /* istanbul ignore next */
          cov_23giu9qyb6().f[21]++;
        }
        getAgentStatus() {
          /* istanbul ignore next */
          cov_23giu9qyb6().f[22]++;
        }
        terminateAgent() {
          /* istanbul ignore next */
          cov_23giu9qyb6().f[23]++;
        }
        getSwarmStatus() {
          /* istanbul ignore next */
          cov_23giu9qyb6().f[24]++;
        }
      }),
      // MCP Server mock
      mcpServer: this.create(class MCPServer {
        initialize() {
          /* istanbul ignore next */
          cov_23giu9qyb6().f[25]++;
        }
        handleMessage() {
          /* istanbul ignore next */
          cov_23giu9qyb6().f[26]++;
        }
        registerTool() {
          /* istanbul ignore next */
          cov_23giu9qyb6().f[27]++;
        }
        shutdown() {
          /* istanbul ignore next */
          cov_23giu9qyb6().f[28]++;
        }
      }),
      // Database mock
      database: this.create(class Database {
        connect() {
          /* istanbul ignore next */
          cov_23giu9qyb6().f[29]++;
        }
        disconnect() {
          /* istanbul ignore next */
          cov_23giu9qyb6().f[30]++;
        }
        query() {
          /* istanbul ignore next */
          cov_23giu9qyb6().f[31]++;
        }
        transaction() {
          /* istanbul ignore next */
          cov_23giu9qyb6().f[32]++;
        }
      }),
      // File System mock
      fileSystem: this.create(class FileSystem {
        readFile() {
          /* istanbul ignore next */
          cov_23giu9qyb6().f[33]++;
        }
        writeFile() {
          /* istanbul ignore next */
          cov_23giu9qyb6().f[34]++;
        }
        mkdir() {
          /* istanbul ignore next */
          cov_23giu9qyb6().f[35]++;
        }
        exists() {
          /* istanbul ignore next */
          cov_23giu9qyb6().f[36]++;
        }
        stat() {
          /* istanbul ignore next */
          cov_23giu9qyb6().f[37]++;
        }
      })
    };
  }
  /**
   * Create expectation builders for London School interaction testing
   */
  createExpectations(mock) {
    /* istanbul ignore next */
    cov_23giu9qyb6().f[38]++;
    const expectations =
    /* istanbul ignore next */
    (cov_23giu9qyb6().s[28]++, {
      // Verify method was called with specific arguments
      toHaveBeenCalledWith: (method, ...args) => {
        /* istanbul ignore next */
        cov_23giu9qyb6().f[39]++;
        const mockMethod =
        /* istanbul ignore next */
        (cov_23giu9qyb6().s[29]++, mock[method]);
        /* istanbul ignore next */
        cov_23giu9qyb6().s[30]++;
        expect(mockMethod).toHaveBeenCalledWith(...args);
        /* istanbul ignore next */
        cov_23giu9qyb6().s[31]++;
        return expectations;
      },
      // Verify call order for interaction sequences
      toHaveBeenCalledInOrder: methods => {
        /* istanbul ignore next */
        cov_23giu9qyb6().f[40]++;
        const calls =
        /* istanbul ignore next */
        (cov_23giu9qyb6().s[32]++, methods.map(method => {
          /* istanbul ignore next */
          cov_23giu9qyb6().f[41]++;
          const mockMethod =
          /* istanbul ignore next */
          (cov_23giu9qyb6().s[33]++, mock[method]);
          /* istanbul ignore next */
          cov_23giu9qyb6().s[34]++;
          return mockMethod.mock.invocationCallOrder[0];
        }));
        /* istanbul ignore next */
        cov_23giu9qyb6().s[35]++;
        for (let i =
        /* istanbul ignore next */
        (cov_23giu9qyb6().s[36]++, 1); i < calls.length; i++) {
          /* istanbul ignore next */
          cov_23giu9qyb6().s[37]++;
          expect(calls[i - 1]).toBeLessThan(calls[i]);
        }
        /* istanbul ignore next */
        cov_23giu9qyb6().s[38]++;
        return expectations;
      },
      // Verify interaction patterns
      toHaveInteractionPattern: pattern => {
        /* istanbul ignore next */
        cov_23giu9qyb6().f[42]++;
        const interactions =
        /* istanbul ignore next */
        (cov_23giu9qyb6().s[39]++,
        /* istanbul ignore next */
        (cov_23giu9qyb6().b[9][0]++, mock.__interactions) ||
        /* istanbul ignore next */
        (cov_23giu9qyb6().b[9][1]++, []));
        const patternFound =
        /* istanbul ignore next */
        (cov_23giu9qyb6().s[40]++, this.matchInteractionPattern(interactions, pattern));
        /* istanbul ignore next */
        cov_23giu9qyb6().s[41]++;
        expect(patternFound).toBe(true);
        /* istanbul ignore next */
        cov_23giu9qyb6().s[42]++;
        return expectations;
      },
      // Verify no unexpected interactions
      toHaveNoUnexpectedInteractions: () => {
        /* istanbul ignore next */
        cov_23giu9qyb6().f[43]++;
        const interactions =
        /* istanbul ignore next */
        (cov_23giu9qyb6().s[43]++,
        /* istanbul ignore next */
        (cov_23giu9qyb6().b[10][0]++, mock.__interactions) ||
        /* istanbul ignore next */
        (cov_23giu9qyb6().b[10][1]++, []));
        const expected =
        /* istanbul ignore next */
        (cov_23giu9qyb6().s[44]++,
        /* istanbul ignore next */
        (cov_23giu9qyb6().b[11][0]++, mock.__expectedInteractions) ||
        /* istanbul ignore next */
        (cov_23giu9qyb6().b[11][1]++, []));
        const unexpected =
        /* istanbul ignore next */
        (cov_23giu9qyb6().s[45]++, interactions.filter(i => {
          /* istanbul ignore next */
          cov_23giu9qyb6().f[44]++;
          cov_23giu9qyb6().s[46]++;
          return !expected.includes(i.method);
        }));
        /* istanbul ignore next */
        cov_23giu9qyb6().s[47]++;
        expect(unexpected).toHaveLength(0);
        /* istanbul ignore next */
        cov_23giu9qyb6().s[48]++;
        return expectations;
      }
    });
    /* istanbul ignore next */
    cov_23giu9qyb6().s[49]++;
    return expectations;
  }
  /**
   * Reset all mocks - useful for test isolation
   */
  resetAllMocks(mocks) {
    /* istanbul ignore next */
    cov_23giu9qyb6().f[45]++;
    cov_23giu9qyb6().s[50]++;
    Object.values(mocks).forEach(mock => {
      /* istanbul ignore next */
      cov_23giu9qyb6().f[46]++;
      cov_23giu9qyb6().s[51]++;
      if (
      /* istanbul ignore next */
      (cov_23giu9qyb6().b[13][0]++, mock) &&
      /* istanbul ignore next */
      (cov_23giu9qyb6().b[13][1]++, typeof mock === 'object')) {
        /* istanbul ignore next */
        cov_23giu9qyb6().b[12][0]++;
        cov_23giu9qyb6().s[52]++;
        Object.values(mock).forEach(method => {
          /* istanbul ignore next */
          cov_23giu9qyb6().f[47]++;
          cov_23giu9qyb6().s[53]++;
          if (jest.isMockFunction(method)) {
            /* istanbul ignore next */
            cov_23giu9qyb6().b[14][0]++;
            cov_23giu9qyb6().s[54]++;
            method.mockReset();
          } else
          /* istanbul ignore next */
          {
            cov_23giu9qyb6().b[14][1]++;
          }
        });
        // Clear interaction tracking
        /* istanbul ignore next */
        cov_23giu9qyb6().s[55]++;
        if (mock.__interactions) {
          /* istanbul ignore next */
          cov_23giu9qyb6().b[15][0]++;
          cov_23giu9qyb6().s[56]++;
          mock.__interactions = [];
        } else
        /* istanbul ignore next */
        {
          cov_23giu9qyb6().b[15][1]++;
        }
      } else
      /* istanbul ignore next */
      {
        cov_23giu9qyb6().b[12][1]++;
      }
    });
  }
  extractMethods(prototype) {
    /* istanbul ignore next */
    cov_23giu9qyb6().f[48]++;
    const methods =
    /* istanbul ignore next */
    (cov_23giu9qyb6().s[57]++, []);
    let current =
    /* istanbul ignore next */
    (cov_23giu9qyb6().s[58]++, prototype);
    /* istanbul ignore next */
    cov_23giu9qyb6().s[59]++;
    while (
    /* istanbul ignore next */
    (cov_23giu9qyb6().b[16][0]++, current) &&
    /* istanbul ignore next */
    (cov_23giu9qyb6().b[16][1]++, current !== Object.prototype)) {
      /* istanbul ignore next */
      cov_23giu9qyb6().s[60]++;
      Object.getOwnPropertyNames(current).forEach(name => {
        /* istanbul ignore next */
        cov_23giu9qyb6().f[49]++;
        cov_23giu9qyb6().s[61]++;
        if (
        /* istanbul ignore next */
        (cov_23giu9qyb6().b[18][0]++, name !== 'constructor') &&
        /* istanbul ignore next */
        (cov_23giu9qyb6().b[18][1]++, typeof current[name] === 'function')) {
          /* istanbul ignore next */
          cov_23giu9qyb6().b[17][0]++;
          cov_23giu9qyb6().s[62]++;
          if (!methods.includes(name)) {
            /* istanbul ignore next */
            cov_23giu9qyb6().b[19][0]++;
            cov_23giu9qyb6().s[63]++;
            methods.push(name);
          } else
          /* istanbul ignore next */
          {
            cov_23giu9qyb6().b[19][1]++;
          }
        } else
        /* istanbul ignore next */
        {
          cov_23giu9qyb6().b[17][1]++;
        }
      });
      /* istanbul ignore next */
      cov_23giu9qyb6().s[64]++;
      current = Object.getPrototypeOf(current);
    }
    /* istanbul ignore next */
    cov_23giu9qyb6().s[65]++;
    return methods;
  }
  createMethodMock(methodName, config) {
    /* istanbul ignore next */
    cov_23giu9qyb6().f[50]++;
    const mock =
    /* istanbul ignore next */
    (cov_23giu9qyb6().s[66]++, jest.fn());
    /* istanbul ignore next */
    cov_23giu9qyb6().s[67]++;
    if (config.autoGenerate) {
      /* istanbul ignore next */
      cov_23giu9qyb6().b[20][0]++;
      cov_23giu9qyb6().s[68]++;
      // Auto-generate reasonable return values based on method name
      if (
      /* istanbul ignore next */
      (cov_23giu9qyb6().b[22][0]++, methodName.startsWith('get')) ||
      /* istanbul ignore next */
      (cov_23giu9qyb6().b[22][1]++, methodName.startsWith('find'))) {
        /* istanbul ignore next */
        cov_23giu9qyb6().b[21][0]++;
        cov_23giu9qyb6().s[69]++;
        mock.mockResolvedValue({});
      } else {
        /* istanbul ignore next */
        cov_23giu9qyb6().b[21][1]++;
        cov_23giu9qyb6().s[70]++;
        if (
        /* istanbul ignore next */
        (cov_23giu9qyb6().b[24][0]++, methodName.startsWith('is')) ||
        /* istanbul ignore next */
        (cov_23giu9qyb6().b[24][1]++, methodName.startsWith('has'))) {
          /* istanbul ignore next */
          cov_23giu9qyb6().b[23][0]++;
          cov_23giu9qyb6().s[71]++;
          mock.mockReturnValue(true);
        } else {
          /* istanbul ignore next */
          cov_23giu9qyb6().b[23][1]++;
          cov_23giu9qyb6().s[72]++;
          if (
          /* istanbul ignore next */
          (cov_23giu9qyb6().b[26][0]++, methodName.startsWith('create')) ||
          /* istanbul ignore next */
          (cov_23giu9qyb6().b[26][1]++, methodName.startsWith('save'))) {
            /* istanbul ignore next */
            cov_23giu9qyb6().b[25][0]++;
            cov_23giu9qyb6().s[73]++;
            mock.mockResolvedValue({
              id: 'generated-id'
            });
          } else
          /* istanbul ignore next */
          {
            cov_23giu9qyb6().b[25][1]++;
          }
        }
      }
    } else
    /* istanbul ignore next */
    {
      cov_23giu9qyb6().b[20][1]++;
    }
    cov_23giu9qyb6().s[74]++;
    return mock;
  }
  addInteractionTracking(mockObj) {
    /* istanbul ignore next */
    cov_23giu9qyb6().f[51]++;
    const interactions =
    /* istanbul ignore next */
    (cov_23giu9qyb6().s[75]++, []);
    /* istanbul ignore next */
    cov_23giu9qyb6().s[76]++;
    mockObj.__interactions = interactions;
    // Wrap all mock functions to track interactions
    /* istanbul ignore next */
    cov_23giu9qyb6().s[77]++;
    Object.keys(mockObj).forEach(key => {
      /* istanbul ignore next */
      cov_23giu9qyb6().f[52]++;
      const originalMock =
      /* istanbul ignore next */
      (cov_23giu9qyb6().s[78]++, mockObj[key]);
      /* istanbul ignore next */
      cov_23giu9qyb6().s[79]++;
      if (jest.isMockFunction(originalMock)) {
        /* istanbul ignore next */
        cov_23giu9qyb6().b[27][0]++;
        cov_23giu9qyb6().s[80]++;
        mockObj[key] = jest.fn((...args) => {
          /* istanbul ignore next */
          cov_23giu9qyb6().f[53]++;
          cov_23giu9qyb6().s[81]++;
          interactions.push({
            method: key,
            args,
            timestamp: Date.now()
          });
          /* istanbul ignore next */
          cov_23giu9qyb6().s[82]++;
          return originalMock(...args);
        });
      } else
      /* istanbul ignore next */
      {
        cov_23giu9qyb6().b[27][1]++;
      }
    });
  }
  matchInteractionPattern(interactions, pattern) {
    /* istanbul ignore next */
    cov_23giu9qyb6().f[54]++;
    // Simple pattern matching for interaction sequences
    // Pattern format: "method1 -> method2 -> method3"
    const expectedSequence =
    /* istanbul ignore next */
    (cov_23giu9qyb6().s[83]++, pattern.split(' -> ').map(s => {
      /* istanbul ignore next */
      cov_23giu9qyb6().f[55]++;
      cov_23giu9qyb6().s[84]++;
      return s.trim();
    }));
    const actualSequence =
    /* istanbul ignore next */
    (cov_23giu9qyb6().s[85]++, interactions.map(i => {
      /* istanbul ignore next */
      cov_23giu9qyb6().f[56]++;
      cov_23giu9qyb6().s[86]++;
      return i.method;
    }));
    // Check if expected sequence exists in actual sequence
    /* istanbul ignore next */
    cov_23giu9qyb6().s[87]++;
    for (let i =
    /* istanbul ignore next */
    (cov_23giu9qyb6().s[88]++, 0); i <= actualSequence.length - expectedSequence.length; i++) {
      let matches =
      /* istanbul ignore next */
      (cov_23giu9qyb6().s[89]++, true);
      /* istanbul ignore next */
      cov_23giu9qyb6().s[90]++;
      for (let j =
      /* istanbul ignore next */
      (cov_23giu9qyb6().s[91]++, 0); j < expectedSequence.length; j++) {
        /* istanbul ignore next */
        cov_23giu9qyb6().s[92]++;
        if (actualSequence[i + j] !== expectedSequence[j]) {
          /* istanbul ignore next */
          cov_23giu9qyb6().b[28][0]++;
          cov_23giu9qyb6().s[93]++;
          matches = false;
          /* istanbul ignore next */
          cov_23giu9qyb6().s[94]++;
          break;
        } else
        /* istanbul ignore next */
        {
          cov_23giu9qyb6().b[28][1]++;
        }
      }
      /* istanbul ignore next */
      cov_23giu9qyb6().s[95]++;
      if (matches) {
        /* istanbul ignore next */
        cov_23giu9qyb6().b[29][0]++;
        cov_23giu9qyb6().s[96]++;
        return true;
      } else
      /* istanbul ignore next */
      {
        cov_23giu9qyb6().b[29][1]++;
      }
    }
    /* istanbul ignore next */
    cov_23giu9qyb6().s[97]++;
    return false;
  }
}
// Convenience functions for common patterns
export const mockBuilder =
/* istanbul ignore next */
(cov_23giu9qyb6().s[98]++, MockBuilder.getInstance());
export function createLondonMocks(config) {
  /* istanbul ignore next */
  cov_23giu9qyb6().f[57]++;
  const londonConfig =
  /* istanbul ignore next */
  (cov_23giu9qyb6().s[99]++, {
    strategy: 'strict',
    trackInteractions: true,
    autoGenerate: true,
    autoReset: true,
    ...config
  });
  /* istanbul ignore next */
  cov_23giu9qyb6().s[100]++;
  return new MockBuilder(londonConfig);
}
export function createClassicalMocks(config) {
  /* istanbul ignore next */
  cov_23giu9qyb6().f[58]++;
  const classicalConfig =
  /* istanbul ignore next */
  (cov_23giu9qyb6().s[101]++, {
    strategy: 'minimal',
    trackInteractions: false,
    autoGenerate: false,
    autoReset: false,
    ...config
  });
  /* istanbul ignore next */
  cov_23giu9qyb6().s[102]++;
  return new MockBuilder(classicalConfig);
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,