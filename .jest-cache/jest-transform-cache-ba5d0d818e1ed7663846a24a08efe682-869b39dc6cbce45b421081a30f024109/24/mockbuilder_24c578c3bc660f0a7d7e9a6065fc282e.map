{"version":3,"names":["cov_23giu9qyb6","actualCoverage","jest","MockBuilder","instance","globalConfig","constructor","config","b","strategy","f","s","getInstance","create","type","mockObj","prototype","methods","extractMethods","method","createMethodMock","trackInteractions","addInteractionTracking","createPartial","overrides","Object","keys","forEach","key","value","fn","createSpy","obj","spy","methodsToSpy","getOwnPropertyNames","getPrototypeOf","spyOn","createCommonMocks","memoryStore","MemoryStore","initialize","store","retrieve","delete","query","close","neuralEngine","NeuralEngine","processInput","trainModel","predict","optimize","swarmOrchestrator","SwarmOrchestrator","spawnAgent","orchestrateTask","getAgentStatus","terminateAgent","getSwarmStatus","mcpServer","MCPServer","handleMessage","registerTool","shutdown","database","Database","connect","disconnect","transaction","fileSystem","FileSystem","readFile","writeFile","mkdir","exists","stat","createExpectations","mock","expectations","toHaveBeenCalledWith","args","mockMethod","expect","toHaveBeenCalledInOrder","calls","map","invocationCallOrder","i","length","toBeLessThan","toHaveInteractionPattern","pattern","interactions","__interactions","patternFound","matchInteractionPattern","toBe","toHaveNoUnexpectedInteractions","expected","__expectedInteractions","unexpected","filter","includes","toHaveLength","resetAllMocks","mocks","values","isMockFunction","mockReset","current","name","push","methodName","autoGenerate","startsWith","mockResolvedValue","mockReturnValue","id","originalMock","timestamp","Date","now","expectedSequence","split","trim","actualSequence","matches","j","mockBuilder","createLondonMocks","londonConfig","autoReset","createClassicalMocks","classicalConfig"],"sources":["/home/mhugo/code/claude-code-flow/src/__tests__/helpers/mock-builder.ts"],"sourcesContent":["/**\n * Mock Builder - London School TDD Support\n * \n * Creates sophisticated mocks for interaction-focused testing\n */\n\nimport { jest } from '@jest/globals';\nimport type { MockConfiguration, MockObject } from './types.js';\n\nexport class MockBuilder {\n  private static instance: MockBuilder;\n  private globalConfig: MockConfiguration;\n\n  constructor(config: MockConfiguration = { strategy: 'hybrid' }) {\n    this.globalConfig = config;\n  }\n\n  static getInstance(config?: MockConfiguration): MockBuilder {\n    if (!MockBuilder.instance) {\n      MockBuilder.instance = new MockBuilder(config);\n    }\n    return MockBuilder.instance;\n  }\n\n  /**\n   * Create a mock object for a class/interface - London School approach\n   */\n  create<T>(\n    type: new (...args: any[]) => T, \n    config: MockConfiguration = this.globalConfig\n  ): T {\n    const mockObj: MockObject = {};\n    const prototype = type.prototype;\n    \n    // Get all methods from the prototype\n    const methods = this.extractMethods(prototype);\n    \n    for (const method of methods) {\n      mockObj[method] = this.createMethodMock(method, config);\n    }\n\n    // Add interaction tracking for London School\n    if (config.trackInteractions) {\n      this.addInteractionTracking(mockObj);\n    }\n\n    return mockObj as T;\n  }\n\n  /**\n   * Create a partial mock with specific overrides\n   */\n  createPartial<T>(overrides: Partial<T>, config: MockConfiguration = this.globalConfig): T {\n    const mockObj: MockObject = {};\n    \n    Object.keys(overrides).forEach(key => {\n      const value = overrides[key as keyof T];\n      if (typeof value === 'function') {\n        mockObj[key] = jest.fn(value as any);\n      } else {\n        mockObj[key] = value;\n      }\n    });\n\n    if (config.trackInteractions) {\n      this.addInteractionTracking(mockObj);\n    }\n\n    return mockObj as T;\n  }\n\n  /**\n   * Create spies on an existing object - Hybrid approach\n   */\n  createSpy<T extends object>(obj: T, methods?: (keyof T)[]): T {\n    const spy = { ...obj };\n    const methodsToSpy = methods || Object.getOwnPropertyNames(Object.getPrototypeOf(obj));\n    \n    methodsToSpy.forEach(method => {\n      if (typeof obj[method] === 'function') {\n        spy[method] = jest.spyOn(obj, method as any);\n      }\n    });\n\n    return spy;\n  }\n\n  /**\n   * Create common dependency mocks for Claude Code Flow\n   */\n  createCommonMocks() {\n    return {\n      // Memory Store mock\n      memoryStore: this.create(class MemoryStore {\n        initialize() {}\n        store() {}\n        retrieve() {}\n        delete() {}\n        query() {}\n        close() {}\n      }),\n\n      // Neural Engine mock\n      neuralEngine: this.create(class NeuralEngine {\n        initialize() {}\n        processInput() {}\n        trainModel() {}\n        predict() {}\n        optimize() {}\n      }),\n\n      // Swarm Orchestrator mock\n      swarmOrchestrator: this.create(class SwarmOrchestrator {\n        initialize() {}\n        spawnAgent() {}\n        orchestrateTask() {}\n        getAgentStatus() {}\n        terminateAgent() {}\n        getSwarmStatus() {}\n      }),\n\n      // MCP Server mock\n      mcpServer: this.create(class MCPServer {\n        initialize() {}\n        handleMessage() {}\n        registerTool() {}\n        shutdown() {}\n      }),\n\n      // Database mock\n      database: this.create(class Database {\n        connect() {}\n        disconnect() {}\n        query() {}\n        transaction() {}\n      }),\n\n      // File System mock\n      fileSystem: this.create(class FileSystem {\n        readFile() {}\n        writeFile() {}\n        mkdir() {}\n        exists() {}\n        stat() {}\n      })\n    };\n  }\n\n  /**\n   * Create expectation builders for London School interaction testing\n   */\n  createExpectations<T>(mock: T) {\n    const expectations = {\n      // Verify method was called with specific arguments\n      toHaveBeenCalledWith: (method: keyof T, ...args: any[]) => {\n        const mockMethod = (mock as any)[method];\n        expect(mockMethod).toHaveBeenCalledWith(...args);\n        return expectations;\n      },\n\n      // Verify call order for interaction sequences\n      toHaveBeenCalledInOrder: (methods: (keyof T)[]) => {\n        const calls = methods.map(method => {\n          const mockMethod = (mock as any)[method];\n          return mockMethod.mock.invocationCallOrder[0];\n        });\n\n        for (let i = 1; i < calls.length; i++) {\n          expect(calls[i - 1]).toBeLessThan(calls[i]);\n        }\n        return expectations;\n      },\n\n      // Verify interaction patterns\n      toHaveInteractionPattern: (pattern: string) => {\n        const interactions = (mock as any).__interactions || [];\n        const patternFound = this.matchInteractionPattern(interactions, pattern);\n        expect(patternFound).toBe(true);\n        return expectations;\n      },\n\n      // Verify no unexpected interactions\n      toHaveNoUnexpectedInteractions: () => {\n        const interactions = (mock as any).__interactions || [];\n        const expected = (mock as any).__expectedInteractions || [];\n        const unexpected = interactions.filter((i: any) => !expected.includes(i.method));\n        expect(unexpected).toHaveLength(0);\n        return expectations;\n      }\n    };\n\n    return expectations;\n  }\n\n  /**\n   * Reset all mocks - useful for test isolation\n   */\n  resetAllMocks(mocks: Record<string, any>) {\n    Object.values(mocks).forEach(mock => {\n      if (mock && typeof mock === 'object') {\n        Object.values(mock).forEach(method => {\n          if (jest.isMockFunction(method)) {\n            (method as jest.Mock).mockReset();\n          }\n        });\n        \n        // Clear interaction tracking\n        if (mock.__interactions) {\n          mock.__interactions = [];\n        }\n      }\n    });\n  }\n\n  private extractMethods(prototype: any): string[] {\n    const methods: string[] = [];\n    let current = prototype;\n    \n    while (current && current !== Object.prototype) {\n      Object.getOwnPropertyNames(current).forEach(name => {\n        if (name !== 'constructor' && typeof current[name] === 'function') {\n          if (!methods.includes(name)) {\n            methods.push(name);\n          }\n        }\n      });\n      current = Object.getPrototypeOf(current);\n    }\n    \n    return methods;\n  }\n\n  private createMethodMock(methodName: string, config: MockConfiguration): jest.Mock {\n    const mock = jest.fn();\n    \n    if (config.autoGenerate) {\n      // Auto-generate reasonable return values based on method name\n      if (methodName.startsWith('get') || methodName.startsWith('find')) {\n        mock.mockResolvedValue({});\n      } else if (methodName.startsWith('is') || methodName.startsWith('has')) {\n        mock.mockReturnValue(true);\n      } else if (methodName.startsWith('create') || methodName.startsWith('save')) {\n        mock.mockResolvedValue({ id: 'generated-id' });\n      }\n    }\n\n    return mock;\n  }\n\n  private addInteractionTracking(mockObj: MockObject) {\n    const interactions: any[] = [];\n    mockObj.__interactions = interactions;\n\n    // Wrap all mock functions to track interactions\n    Object.keys(mockObj).forEach(key => {\n      const originalMock = mockObj[key];\n      if (jest.isMockFunction(originalMock)) {\n        mockObj[key] = jest.fn((...args: any[]) => {\n          interactions.push({\n            method: key,\n            args,\n            timestamp: Date.now()\n          });\n          return originalMock(...args);\n        });\n      }\n    });\n  }\n\n  private matchInteractionPattern(interactions: any[], pattern: string): boolean {\n    // Simple pattern matching for interaction sequences\n    // Pattern format: \"method1 -> method2 -> method3\"\n    const expectedSequence = pattern.split(' -> ').map(s => s.trim());\n    const actualSequence = interactions.map(i => i.method);\n    \n    // Check if expected sequence exists in actual sequence\n    for (let i = 0; i <= actualSequence.length - expectedSequence.length; i++) {\n      let matches = true;\n      for (let j = 0; j < expectedSequence.length; j++) {\n        if (actualSequence[i + j] !== expectedSequence[j]) {\n          matches = false;\n          break;\n        }\n      }\n      if (matches) return true;\n    }\n    \n    return false;\n  }\n}\n\n// Convenience functions for common patterns\nexport const mockBuilder = MockBuilder.getInstance();\n\nexport function createLondonMocks(config?: Partial<MockConfiguration>) {\n  const londonConfig: MockConfiguration = {\n    strategy: 'strict',\n    trackInteractions: true,\n    autoGenerate: true,\n    autoReset: true,\n    ...config\n  };\n  \n  return new MockBuilder(londonConfig);\n}\n\nexport function createClassicalMocks(config?: Partial<MockConfiguration>) {\n  const classicalConfig: MockConfiguration = {\n    strategy: 'minimal',\n    trackInteractions: false,\n    autoGenerate: false,\n    autoReset: false,\n    ...config\n  };\n  \n  return new MockBuilder(classicalConfig);\n}"],"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","ignoreList":[]}