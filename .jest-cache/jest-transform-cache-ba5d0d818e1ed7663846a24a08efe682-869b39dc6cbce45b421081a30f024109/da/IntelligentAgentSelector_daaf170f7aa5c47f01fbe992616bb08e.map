{"version":3,"names":["cov_1x5jwomc9w","actualCoverage","DEFAULT_AGENT_REUSE_CONFIG","BalancedSelectionStrategy","IntelligentAgentSelector","agentRegistry","poolManager","workloadMonitor","performanceScorer","agentManager","logger","selectionStrategy","config","constructor","b","f","s","selectOptimalAgents","requiredCapabilities","taskContext","options","startTime","Date","now","info","join","candidates","findCapableAgents","length","warn","createEmptySelection","availableCandidates","filterByAvailability","capabilities","scoredCandidates","scoreAgents","selection","selectAgents","selectionTime","selectedAgents","error","Error","message","String","executeTaskWithIntelligentSelection","task","executionStart","acquiredAgents","id","type","featureName","metadata","priority","complexity","determineComplexity","agents","acquireAgents","maxAgents","push","result","executeWithAcquiredAgents","updateAgentPerformanceMetrics","executionTime","duration","agentMetrics","generateAgentMetrics","success","releaseAgents","map","a","primaryAgent","updateAgentStatus","assignedTask","trackTaskAssignment","executionResult","simulateTaskExecution","trackTaskCompletion","lastTask","completedAt","lastError","errorAt","agent","baseTime","complexityMultiplier","Promise","resolve","setTimeout","Math","min","random","output","undefined","registeredAgent","getAgent","performanceHistory","addCompletion","addFailure","agentId","taskDuration","cpuUsage","memoryUsage","successRate","qualityScore","highComplexityTypes","mediumComplexityTypes","includes","reason","alternativeAgents","selectionReason","confidence","estimatedSuccess","getSystemStatistics","registry","getRegistryStats","workload","getWorkloadStatistics","pool","getPoolStatistics","reuse","getReuseStatistics","totalTasks","reusedTasks","reuseRate","averageSelectionTime","optimizeSystem","poolOptimization","optimizePool","results","shutdown"],"sources":["/home/mhugo/code/claude-code-flow/src/maestro/agent-reuse/IntelligentAgentSelector.ts"],"sourcesContent":["/**\n * Intelligent Agent Selector - Core controller for capability-based agent selection\n * Implements SOLID principles with strategy pattern for optimization approaches\n */\n\nimport { ILogger } from '../../core/logger.js';\nimport { AgentManager } from '../../agents/agent-manager.js';\nimport {\n  TaskContext,\n  SelectionOptions,\n  ExecutionOptions,\n  AgentSelection,\n  TaskResult,\n  RegisteredAgent,\n  AvailableAgent,\n  ScoredAgent,\n  AcquiredAgent,\n  TaskDefinition,\n  AgentReuseConfig,\n  DEFAULT_AGENT_REUSE_CONFIG\n} from './types.js';\nimport { AgentRegistry } from './AgentRegistry.js';\nimport { AgentPoolManager } from './AgentPoolManager.js';\nimport { WorkloadMonitor } from './WorkloadMonitor.js';\nimport { PerformanceScorer } from './PerformanceScorer.js';\nimport { BalancedSelectionStrategy } from './strategies/BalancedSelectionStrategy.js';\n\n/**\n * Central orchestrator for intelligent agent selection and reuse\n * Replaces hardcoded agent arrays with dynamic, capability-based selection\n */\nexport class IntelligentAgentSelector {\n  private selectionStrategy: any;\n  private config: AgentReuseConfig;\n\n  constructor(\n    private agentRegistry: AgentRegistry,\n    private poolManager: AgentPoolManager, \n    private workloadMonitor: WorkloadMonitor,\n    private performanceScorer: PerformanceScorer,\n    private agentManager: AgentManager,\n    private logger: ILogger,\n    config: Partial<AgentReuseConfig> = {}\n  ) {\n    this.config = { ...DEFAULT_AGENT_REUSE_CONFIG, ...config };\n    this.selectionStrategy = new BalancedSelectionStrategy();\n  }\n\n  /**\n   * Primary selection method - replaces hardcoded agent arrays\n   * Implements intelligent, multi-criteria agent selection\n   */\n  async selectOptimalAgents(\n    requiredCapabilities: string[],\n    taskContext: TaskContext,\n    options: SelectionOptions = {}\n  ): Promise<AgentSelection> {\n    const startTime = Date.now();\n    \n    try {\n      this.logger.info(`Selecting agents for capabilities: [${requiredCapabilities.join(', ')}]`);\n\n      // Step 1: Find candidates with matching capabilities\n      const candidates = await this.agentRegistry.findCapableAgents(requiredCapabilities);\n      \n      if (candidates.length === 0) {\n        this.logger.warn(`No agents found with required capabilities: [${requiredCapabilities.join(', ')}]`);\n        return this.createEmptySelection('No capable agents found');\n      }\n\n      // Step 2: Apply workload filtering to get available agents\n      const availableCandidates = await this.workloadMonitor.filterByAvailability(\n        candidates,\n        { capabilities: requiredCapabilities }\n      );\n\n      if (availableCandidates.length === 0) {\n        this.logger.warn('No available agents found after workload filtering');\n        return this.createEmptySelection('All capable agents are busy');\n      }\n\n      // Step 3: Score candidates using multi-criteria algorithm\n      const scoredCandidates = await this.performanceScorer.scoreAgents(\n        availableCandidates,\n        requiredCapabilities,\n        taskContext\n      );\n\n      // Step 4: Apply selection strategy to choose optimal agents\n      const selection = this.selectionStrategy.selectAgents(scoredCandidates, options);\n\n      const selectionTime = Date.now() - startTime;\n      this.logger.info(`Agent selection completed in ${selectionTime}ms, selected ${selection.selectedAgents.length} agents`);\n\n      return selection;\n\n    } catch (error) {\n      const selectionTime = Date.now() - startTime;\n      this.logger.error(`Agent selection failed after ${selectionTime}ms: ${error instanceof Error ? error.message : String(error)}`);\n      return this.createEmptySelection(`Selection failed: ${error instanceof Error ? error.message : String(error)}`);\n    }\n  }\n\n  /**\n   * Enhanced task execution with intelligent agent reuse\n   * Replaces executeTaskWithManagedAgent with capability-based selection\n   */\n  async executeTaskWithIntelligentSelection(\n    requiredCapabilities: string[],\n    task: TaskDefinition,\n    options: ExecutionOptions = {}\n  ): Promise<TaskResult> {\n    const executionStart = Date.now();\n    const acquiredAgents: AcquiredAgent[] = [];\n\n    try {\n      this.logger.info(`Executing task ${task.id} with intelligent agent selection`);\n\n      // Convert task to context for selection\n      const taskContext: TaskContext = {\n        id: task.id,\n        type: task.type,\n        featureName: task.metadata?.featureName,\n        priority: task.priority,\n        complexity: this.determineComplexity(task),\n        metadata: task.metadata\n      };\n\n      // Step 1: Acquire optimal agents (reuse-first strategy)\n      const agents = await this.poolManager.acquireAgents(\n        requiredCapabilities,\n        taskContext,\n        options.maxAgents || 2\n      );\n\n      if (agents.length === 0) {\n        throw new Error('Failed to acquire any suitable agents');\n      }\n\n      acquiredAgents.push(...agents);\n\n      // Step 2: Execute task with acquired agents\n      const result = await this.executeWithAcquiredAgents(agents, task, options);\n\n      // Step 3: Update performance metrics\n      await this.updateAgentPerformanceMetrics(agents, result);\n\n      const executionTime = Date.now() - executionStart;\n      this.logger.info(`Task ${task.id} completed in ${executionTime}ms using ${agents.length} agents`);\n\n      return {\n        ...result,\n        duration: executionTime,\n        agentMetrics: this.generateAgentMetrics(agents, result)\n      };\n\n    } catch (error) {\n      const executionTime = Date.now() - executionStart;\n      this.logger.error(`Task execution failed after ${executionTime}ms: ${error instanceof Error ? error.message : String(error)}`);\n\n      return {\n        success: false,\n        duration: executionTime,\n        agentMetrics: [],\n        error: error as Error\n      };\n\n    } finally {\n      // Step 4: Release agents back to pool\n      if (acquiredAgents.length > 0) {\n        await this.poolManager.releaseAgents(\n          acquiredAgents.map(a => a.id),\n          {\n            id: task.id,\n            type: task.type,\n            priority: task.priority,\n            complexity: 'medium'\n          }\n        );\n      }\n    }\n  }\n\n  /**\n   * Execute task with the acquired agents\n   * Integrates with existing AgentManager for actual execution\n   */\n  private async executeWithAcquiredAgents(\n    agents: AcquiredAgent[],\n    task: TaskDefinition,\n    options: ExecutionOptions\n  ): Promise<TaskResult> {\n    // For now, use the first agent (primary) for execution\n    // Future enhancement: parallel execution across multiple agents\n    const primaryAgent = agents[0];\n    \n    try {\n      // Update agent status to busy\n      await this.agentRegistry.updateAgentStatus(primaryAgent.id, 'busy', {\n        assignedTask: task.id,\n        startTime: new Date()\n      });\n\n      // Track task assignment for workload monitoring\n      this.workloadMonitor.trackTaskAssignment(\n        primaryAgent.id,\n        task.id\n      );\n\n      // Execute through existing orchestrator infrastructure (simplified)\n      // In real implementation, this would integrate with the main orchestrator\n      const executionResult = await this.simulateTaskExecution(task, primaryAgent);\n\n      // Track task completion\n      this.workloadMonitor.trackTaskCompletion(\n        primaryAgent.id,\n        task.id,\n        executionResult.success || true\n      );\n\n      // Update agent status back to available\n      await this.agentRegistry.updateAgentStatus(primaryAgent.id, 'available', {\n        lastTask: task.id,\n        completedAt: new Date()\n      });\n\n      return executionResult;\n\n    } catch (error) {\n      // Update agent status on error\n      await this.agentRegistry.updateAgentStatus(primaryAgent.id, 'error', {\n        lastError: error instanceof Error ? error.message : String(error),\n        errorAt: new Date()\n      });\n\n      throw error;\n    }\n  }\n\n  /**\n   * Simulate task execution (placeholder for integration with main orchestrator)\n   * In production, this would delegate to the main orchestrator system\n   */\n  private async simulateTaskExecution(task: TaskDefinition, agent: AcquiredAgent): Promise<TaskResult> {\n    // Simulate variable execution time based on task complexity\n    const baseTime = 1000; // 1 second base\n    const complexityMultiplier = task.metadata?.complexity === 'high' ? 3 : \n                                task.metadata?.complexity === 'medium' ? 2 : 1;\n    const executionTime = baseTime * complexityMultiplier;\n\n    // Simulate execution delay\n    await new Promise(resolve => setTimeout(resolve, Math.min(executionTime, 5000)));\n\n    // Simulate success/failure based on agent reliability (90% success rate)\n    const success = Math.random() > 0.1;\n\n    return {\n      success,\n      output: success ? { result: `Task ${task.id} completed by agent ${agent.id}` } : undefined,\n      duration: executionTime,\n      agentMetrics: [],\n      error: success ? undefined : new Error('Simulated task execution failure')\n    };\n  }\n\n  /**\n   * Update agent performance metrics based on task results\n   */\n  private async updateAgentPerformanceMetrics(\n    agents: AcquiredAgent[],\n    result: TaskResult\n  ): Promise<void> {\n    for (const agent of agents) {\n      try {\n        const registeredAgent = await this.agentRegistry.getAgent(agent.id);\n        if (registeredAgent) {\n          if (result.success) {\n            registeredAgent.performanceHistory.addCompletion(\n              result.duration,\n              result.duration // Use actual duration as estimated for now\n            );\n          } else {\n            registeredAgent.performanceHistory.addFailure(\n              result.error?.message || 'Unknown error'\n            );\n          }\n        }\n      } catch (error) {\n        this.logger.warn(`Failed to update performance metrics for agent ${agent.id}: ${error instanceof Error ? error.message : String(error)}`);\n      }\n    }\n  }\n\n  /**\n   * Generate comprehensive agent metrics for reporting\n   */\n  private generateAgentMetrics(agents: AcquiredAgent[], result: TaskResult): any[] {\n    return agents.map(agent => ({\n      agentId: agent.id,\n      taskDuration: result.duration,\n      cpuUsage: Math.random() * 50, // Simulated\n      memoryUsage: Math.random() * 100, // Simulated\n      successRate: result.success ? 1.0 : 0.0,\n      qualityScore: result.success ? 0.8 + Math.random() * 0.2 : 0.0\n    }));\n  }\n\n  /**\n   * Determine task complexity based on various factors\n   */\n  private determineComplexity(task: TaskDefinition): 'low' | 'medium' | 'high' {\n    // Simple heuristics for complexity determination\n    if (task.metadata?.complexity) {\n      return task.metadata.complexity;\n    }\n\n    // Determine based on task type\n    const highComplexityTypes = ['system-design', 'architecture', 'complex-implementation'];\n    const mediumComplexityTypes = ['implementation', 'testing', 'code-review'];\n    \n    if (highComplexityTypes.includes(task.type)) return 'high';\n    if (mediumComplexityTypes.includes(task.type)) return 'medium';\n    return 'low';\n  }\n\n  /**\n   * Create empty selection for failure cases\n   */\n  private createEmptySelection(reason: string): AgentSelection {\n    return {\n      selectedAgents: [],\n      alternativeAgents: [],\n      selectionReason: reason,\n      confidence: 0,\n      estimatedSuccess: 0\n    };\n  }\n\n  /**\n   * Get comprehensive system statistics\n   */\n  async getSystemStatistics(): Promise<{\n    registry: any;\n    workload: any;\n    pool: any;\n    reuse: any;\n  }> {\n    return {\n      registry: this.agentRegistry.getRegistryStats(),\n      workload: this.workloadMonitor.getWorkloadStatistics(),\n      pool: await this.poolManager.getPoolStatistics(),\n      reuse: await this.getReuseStatistics()\n    };\n  }\n\n  /**\n   * Get agent reuse statistics\n   */\n  private async getReuseStatistics(): Promise<{\n    totalTasks: number;\n    reusedTasks: number;\n    reuseRate: number;\n    averageSelectionTime: number;\n  }> {\n    // This would be implemented with actual tracking in production\n    return {\n      totalTasks: 100,\n      reusedTasks: 75,\n      reuseRate: 0.75,\n      averageSelectionTime: 35\n    };\n  }\n\n  /**\n   * Optimize the entire agent system\n   */\n  async optimizeSystem(): Promise<any> {\n    this.logger.info('Starting system optimization');\n    \n    const poolOptimization = await this.poolManager.optimizePool();\n    \n    this.logger.info(`System optimization completed with ${poolOptimization.results.length} optimizations applied`);\n    \n    return poolOptimization;\n  }\n\n  /**\n   * Shutdown the selector and cleanup resources\n   */\n  async shutdown(): Promise<void> {\n    this.logger.info('Shutting down Intelligent Agent Selector');\n    \n    // Cleanup would be implemented here\n    // - Stop monitoring intervals\n    // - Release all agents\n    // - Clear registries\n    \n    this.logger.info('Intelligent Agent Selector shutdown complete');\n  }\n}"],"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","ignoreList":[]}