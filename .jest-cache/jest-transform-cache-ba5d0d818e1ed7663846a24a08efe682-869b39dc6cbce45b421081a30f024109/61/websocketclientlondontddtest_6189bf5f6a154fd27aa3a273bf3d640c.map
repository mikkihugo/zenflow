{"file":"/home/mhugo/code/claude-code-flow/src/__tests__/integration/websocket-client-london-tdd.test.ts","mappings":"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","names":[],"sources":["/home/mhugo/code/claude-code-flow/src/__tests__/integration/websocket-client-london-tdd.test.ts"],"sourcesContent":["/**\n * Claude-Zen WebSocket Client - London School TDD Tests\n * \n * Testing the Node.js 22 native WebSocket client using London School principles:\n * - Outside-in development from real-time communication requirements\n * - Mock-driven contracts for connection management\n * - Behavior verification for reconnection and error handling\n * - Focus on client-server interaction patterns\n */\n\nimport { jest, describe, it, expect, beforeEach, afterEach } from '@jest/globals';\n\n// === MOCK DEPENDENCIES (London School Contract Definition) ===\n\n// Mock Node.js WebSocket - Native WebSocket contract\nconst mockWebSocket = {\n  connect: jest.fn(),\n  send: jest.fn(),\n  close: jest.fn(),\n  on: jest.fn(),\n  off: jest.fn(),\n  readyState: 1, // OPEN\n  CONNECTING: 0,\n  OPEN: 1,\n  CLOSING: 2,\n  CLOSED: 3,\n};\n\n// Mock EventEmitter - Event handling contract\nconst mockEventEmitter = {\n  emit: jest.fn(),\n  on: jest.fn(),\n  off: jest.fn(),\n  removeAllListeners: jest.fn(),\n};\n\n// Mock Reconnection Manager - Connection resilience contract\nconst mockReconnectionManager = {\n  shouldReconnect: jest.fn(),\n  getReconnectDelay: jest.fn(),\n  incrementAttempts: jest.fn(),\n  resetAttempts: jest.fn(),\n  isMaxAttemptsReached: jest.fn(),\n};\n\n// Mock Message Queue - Message buffering contract\nconst mockMessageQueue = {\n  enqueue: jest.fn(),\n  dequeue: jest.fn(),\n  flush: jest.fn(),\n  clear: jest.fn(),\n  size: jest.fn(),\n};\n\n// Mock Heartbeat Manager - Connection health contract\nconst mockHeartbeatManager = {\n  start: jest.fn(),\n  stop: jest.fn(),\n  ping: jest.fn(),\n  onPong: jest.fn(),\n  isHealthy: jest.fn(),\n};\n\n// === CONTRACT INTERFACES ===\n\ninterface WebSocketClientContract {\n  connect(url: string, options?: any): Promise<void>;\n  send(data: any): Promise<void>;\n  disconnect(): Promise<void>;\n  isConnected(): boolean;\n  on(event: string, handler: Function): void;\n  off(event: string, handler: Function): void;\n}\n\ninterface ReconnectionContract {\n  shouldReconnect(error: any): boolean;\n  getReconnectDelay(attempt: number): number;\n  handleReconnection(): Promise<void>;\n}\n\ninterface MessageQueueContract {\n  enqueue(message: any): void;\n  flush(): Promise<void>;\n  clear(): void;\n}\n\ndescribe('Claude-Zen WebSocket Client - London School TDD', () => {\n  \n  // Mock WebSocket Client class (based on actual implementation structure)\n  class MockWebSocketClient {\n    private ws: any;\n    private eventEmitter: any;\n    private reconnectionManager: any;\n    private messageQueue: any;\n    private heartbeatManager: any;\n    private url: string = '';\n    private options: any = {};\n    \n    constructor() {\n      this.ws = null;\n      this.eventEmitter = mockEventEmitter;\n      this.reconnectionManager = mockReconnectionManager;\n      this.messageQueue = mockMessageQueue;\n      this.heartbeatManager = mockHeartbeatManager;\n    }\n    \n    async connect(url: string, options: any = {}) {\n      this.url = url;\n      this.options = options;\n      \n      // Create WebSocket connection\n      this.ws = mockWebSocket;\n      await mockWebSocket.connect(url);\n      \n      // Setup event handlers\n      mockWebSocket.on('open', this.handleOpen.bind(this));\n      mockWebSocket.on('message', this.handleMessage.bind(this));\n      mockWebSocket.on('close', this.handleClose.bind(this));\n      mockWebSocket.on('error', this.handleError.bind(this));\n      \n      // Start heartbeat if enabled\n      if (options.heartbeat) {\n        mockHeartbeatManager.start();\n      }\n      \n      return Promise.resolve();\n    }\n    \n    async send(data: any) {\n      if (this.isConnected()) {\n        return mockWebSocket.send(JSON.stringify(data));\n      } else {\n        // Queue message for when connection is restored\n        mockMessageQueue.enqueue(data);\n        return Promise.resolve();\n      }\n    }\n    \n    isConnected(): boolean {\n      return this.ws && mockWebSocket.readyState === mockWebSocket.OPEN;\n    }\n    \n    private handleOpen() {\n      mockEventEmitter.emit('connected');\n      mockReconnectionManager.resetAttempts();\n      mockMessageQueue.flush();\n    }\n    \n    private handleMessage(data: any) {\n      const parsed = JSON.parse(data);\n      mockEventEmitter.emit('message', parsed);\n    }\n    \n    private handleClose(code: number, reason: string) {\n      mockEventEmitter.emit('disconnected', { code, reason });\n      mockHeartbeatManager.stop();\n      \n      if (mockReconnectionManager.shouldReconnect({ code, reason })) {\n        this.attemptReconnection();\n      }\n    }\n    \n    private handleError(error: any) {\n      mockEventEmitter.emit('error', error);\n    }\n    \n    private async attemptReconnection() {\n      if (!mockReconnectionManager.isMaxAttemptsReached()) {\n        const delay = mockReconnectionManager.getReconnectDelay(1);\n        mockReconnectionManager.incrementAttempts();\n        \n        setTimeout(() => {\n          this.connect(this.url, this.options);\n        }, delay);\n      }\n    }\n    \n    on(event: string, handler: Function) {\n      mockEventEmitter.on(event, handler);\n    }\n  }\n\n  describe('🎯 Acceptance Tests - Real-time Communication', () => {\n    \n    describe('User Story: WebSocket Connection Management', () => {\n      it('should establish connection with proper event handling setup', async () => {\n        // Arrange - Mock successful connection\n        mockWebSocket.connect.mockResolvedValue(undefined);\n        mockWebSocket.on.mockImplementation((event, handler) => {\n          // Simulate immediate connection success\n          if (event === 'open') {\n            setTimeout(() => handler(), 0);\n          }\n        });\n        mockHeartbeatManager.start.mockImplementation(() => {});\n        \n        const client = new MockWebSocketClient();\n        const connectionHandler = jest.fn();\n        client.on('connected', connectionHandler);\n        \n        // Act - Connect to WebSocket server\n        await client.connect('ws://localhost:4000', { \n          heartbeat: true,\n          reconnect: true \n        });\n        \n        // Assert - Verify connection establishment conversation\n        expect(mockWebSocket.connect).toHaveBeenCalledWith('ws://localhost:4000');\n        expect(mockWebSocket.on).toHaveBeenCalledWith('open', expect.any(Function));\n        expect(mockWebSocket.on).toHaveBeenCalledWith('message', expect.any(Function));\n        expect(mockWebSocket.on).toHaveBeenCalledWith('close', expect.any(Function));\n        expect(mockWebSocket.on).toHaveBeenCalledWith('error', expect.any(Function));\n        expect(mockHeartbeatManager.start).toHaveBeenCalled();\n      });\n    });\n\n    describe('User Story: Message Transmission with Queuing', () => {\n      it('should send messages immediately when connected, queue when disconnected', async () => {\n        // Arrange - Mock connection states\n        mockWebSocket.readyState = mockWebSocket.OPEN;\n        mockWebSocket.send.mockResolvedValue(undefined);\n        mockMessageQueue.enqueue.mockImplementation(() => {});\n        \n        const client = new MockWebSocketClient();\n        client['ws'] = mockWebSocket; // Simulate connected state\n        \n        const connectedMessage = { type: 'task-update', data: { status: 'completed' } };\n        const disconnectedMessage = { type: 'queen-status', data: { id: 'arch-001' } };\n        \n        // Act - Send message when connected\n        await client.send(connectedMessage);\n        \n        // Simulate disconnection\n        mockWebSocket.readyState = mockWebSocket.CLOSED;\n        \n        // Send message when disconnected\n        await client.send(disconnectedMessage);\n        \n        // Assert - Verify message handling conversation\n        expect(mockWebSocket.send).toHaveBeenCalledWith(\n          JSON.stringify(connectedMessage)\n        );\n        expect(mockMessageQueue.enqueue).toHaveBeenCalledWith(disconnectedMessage);\n      });\n    });\n\n    describe('User Story: Automatic Reconnection with Backoff', () => {\n      it('should handle connection loss with intelligent reconnection strategy', async () => {\n        // Arrange - Mock reconnection logic\n        mockReconnectionManager.shouldReconnect.mockReturnValue(true);\n        mockReconnectionManager.isMaxAttemptsReached.mockReturnValue(false);\n        mockReconnectionManager.getReconnectDelay.mockReturnValue(1000);\n        mockReconnectionManager.incrementAttempts.mockImplementation(() => {});\n        \n        const client = new MockWebSocketClient();\n        \n        // Simulate connection established\n        mockWebSocket.on.mockImplementation((event, handler) => {\n          if (event === 'close') {\n            // Store close handler for later invocation\n            setTimeout(() => handler(1006, 'Connection lost'), 0);\n          }\n        });\n        \n        await client.connect('ws://localhost:4000', { reconnect: true });\n        \n        // Wait for close event to trigger reconnection logic\n        await new Promise(resolve => setTimeout(resolve, 10));\n        \n        // Assert - Verify reconnection conversation\n        expect(mockReconnectionManager.shouldReconnect).toHaveBeenCalledWith({\n          code: 1006,\n          reason: 'Connection lost'\n        });\n        expect(mockReconnectionManager.isMaxAttemptsReached).toHaveBeenCalled();\n        expect(mockReconnectionManager.getReconnectDelay).toHaveBeenCalledWith(1);\n        expect(mockReconnectionManager.incrementAttempts).toHaveBeenCalled();\n      });\n    });\n  });\n\n  describe('🔗 Contract Verification - Component Integration', () => {\n    \n    describe('Heartbeat Integration', () => {\n      it('should coordinate heartbeat with connection lifecycle', async () => {\n        // Arrange - Mock heartbeat coordination\n        mockHeartbeatManager.start.mockImplementation(() => {});\n        mockHeartbeatManager.stop.mockImplementation(() => {});\n        mockHeartbeatManager.ping.mockImplementation(() => {});\n        mockHeartbeatManager.isHealthy.mockReturnValue(true);\n        \n        const client = new MockWebSocketClient();\n        \n        // Mock connection open/close events\n        mockWebSocket.on.mockImplementation((event, handler) => {\n          if (event === 'open') {\n            setTimeout(() => handler(), 0);\n          } else if (event === 'close') {\n            setTimeout(() => handler(1000, 'Normal closure'), 100);\n          }\n        });\n        \n        // Act - Connect and then disconnect\n        await client.connect('ws://localhost:4000', { heartbeat: true });\n        \n        // Simulate close event\n        await new Promise(resolve => setTimeout(resolve, 150));\n        \n        // Assert - Verify heartbeat lifecycle conversation\n        expect(mockHeartbeatManager.start).toHaveBeenCalled();\n        expect(mockHeartbeatManager.stop).toHaveBeenCalled();\n      });\n    });\n\n    describe('Message Queue Integration', () => {\n      it('should flush queued messages upon reconnection', async () => {\n        // Arrange - Mock queue flush on reconnection\n        mockMessageQueue.flush.mockImplementation(() => {});\n        mockMessageQueue.enqueue.mockImplementation(() => {});\n        mockReconnectionManager.resetAttempts.mockImplementation(() => {});\n        \n        const client = new MockWebSocketClient();\n        \n        // Mock successful reconnection\n        mockWebSocket.on.mockImplementation((event, handler) => {\n          if (event === 'open') {\n            setTimeout(() => handler(), 0);\n          }\n        });\n        \n        // Act - Simulate reconnection\n        await client.connect('ws://localhost:4000');\n        \n        // Wait for open event\n        await new Promise(resolve => setTimeout(resolve, 10));\n        \n        // Assert - Verify message queue integration conversation\n        expect(mockMessageQueue.flush).toHaveBeenCalled();\n        expect(mockReconnectionManager.resetAttempts).toHaveBeenCalled();\n      });\n    });\n  });\n\n  describe('🧪 London School Patterns - WebSocket Communication', () => {\n    \n    it('should demonstrate event-driven interaction testing', () => {\n      // London School: Test HOW events flow through the system\n      const mockEventBus = {\n        subscribe: jest.fn(),\n        publish: jest.fn(),\n        unsubscribe: jest.fn()\n      };\n      \n      const eventDrivenClient = {\n        setupEventHandlers: () => {\n          mockEventBus.subscribe('connection-status', (status) => {\n            if (status === 'connected') {\n              mockEventBus.publish('ready-for-messages', true);\n            }\n          });\n          \n          mockEventBus.subscribe('message-received', (message) => {\n            mockEventBus.publish('message-processed', message.id);\n          });\n        }\n      };\n      \n      // Act - Setup event handling\n      eventDrivenClient.setupEventHandlers();\n      \n      // Simulate events\n      mockEventBus.subscribe.mock.calls[0][1]('connected');\n      mockEventBus.subscribe.mock.calls[1][1]({ id: 'msg-123', data: 'test' });\n      \n      // Assert - Verify event interaction conversation\n      expect(mockEventBus.subscribe).toHaveBeenCalledWith('connection-status', expect.any(Function));\n      expect(mockEventBus.subscribe).toHaveBeenCalledWith('message-received', expect.any(Function));\n      expect(mockEventBus.publish).toHaveBeenCalledWith('ready-for-messages', true);\n      expect(mockEventBus.publish).toHaveBeenCalledWith('message-processed', 'msg-123');\n    });\n    \n    it('should use mocks to drive connection resilience design', () => {\n      // London School: Mocks help discover optimal resilience patterns\n      const mockResilienceStrategy = {\n        evaluateConnectionHealth: jest.fn(),\n        determineReconnectionStrategy: jest.fn(),\n        executeRecoveryPlan: jest.fn()\n      };\n      \n      const resilientClient = {\n        handleConnectionIssue: async (issue: any) => {\n          const health = mockResilienceStrategy.evaluateConnectionHealth(issue);\n          const strategy = mockResilienceStrategy.determineReconnectionStrategy(health);\n          return mockResilienceStrategy.executeRecoveryPlan(strategy);\n        }\n      };\n      \n      // Mock the resilience conversation\n      mockResilienceStrategy.evaluateConnectionHealth.mockReturnValue({ severity: 'moderate' });\n      mockResilienceStrategy.determineReconnectionStrategy.mockReturnValue({ type: 'exponential-backoff' });\n      mockResilienceStrategy.executeRecoveryPlan.mockResolvedValue({ success: true });\n      \n      // Act - Test resilience design\n      const connectionIssue = { type: 'timeout', duration: 5000 };\n      resilientClient.handleConnectionIssue(connectionIssue);\n      \n      // Assert - Verify resilience interface exists and behaves correctly\n      expect(mockResilienceStrategy.evaluateConnectionHealth).toHaveBeenCalledWith(connectionIssue);\n      expect(mockResilienceStrategy.determineReconnectionStrategy).toHaveBeenCalledWith({ severity: 'moderate' });\n      expect(mockResilienceStrategy.executeRecoveryPlan).toHaveBeenCalledWith({ type: 'exponential-backoff' });\n    });\n  });\n\n  // Clean test isolation - London School principle\n  beforeEach(() => {\n    jest.clearAllMocks();\n    // Reset WebSocket state\n    mockWebSocket.readyState = mockWebSocket.CLOSED;\n  });\n  \n  afterEach(() => {\n    jest.restoreAllMocks();\n  });\n});"],"version":3}