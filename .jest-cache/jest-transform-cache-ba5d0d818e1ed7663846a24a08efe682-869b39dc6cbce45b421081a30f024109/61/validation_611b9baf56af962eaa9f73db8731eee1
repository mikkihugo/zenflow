821688310359f6ec18de6f9b10f69993
/* istanbul ignore next */
function cov_9ra591xvh() {
  var path = "/home/mhugo/code/claude-code-flow/src/cli/utils/validation.ts";
  var hash = "8a30af8f003baaaf1382495350af24753b076eb8";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/home/mhugo/code/claude-code-flow/src/cli/utils/validation.ts",
    statementMap: {
      "0": {
        start: {
          line: 12,
          column: 4
        },
        end: {
          line: 18,
          column: 6
        }
      },
      "1": {
        start: {
          line: 24,
          column: 4
        },
        end: {
          line: 29,
          column: 6
        }
      },
      "2": {
        start: {
          line: 35,
          column: 4
        },
        end: {
          line: 39,
          column: 6
        }
      },
      "3": {
        start: {
          line: 45,
          column: 4
        },
        end: {
          line: 49,
          column: 6
        }
      },
      "4": {
        start: {
          line: 55,
          column: 4
        },
        end: {
          line: 59,
          column: 5
        }
      },
      "5": {
        start: {
          line: 56,
          column: 8
        },
        end: {
          line: 58,
          column: 11
        }
      },
      "6": {
        start: {
          line: 60,
          column: 4
        },
        end: {
          line: 64,
          column: 5
        }
      },
      "7": {
        start: {
          line: 61,
          column: 8
        },
        end: {
          line: 63,
          column: 11
        }
      },
      "8": {
        start: {
          line: 65,
          column: 4
        },
        end: {
          line: 69,
          column: 5
        }
      },
      "9": {
        start: {
          line: 66,
          column: 8
        },
        end: {
          line: 68,
          column: 11
        }
      },
      "10": {
        start: {
          line: 70,
          column: 4
        },
        end: {
          line: 70,
          column: 33
        }
      },
      "11": {
        start: {
          line: 76,
          column: 22
        },
        end: {
          line: 76,
          column: 50
        }
      },
      "12": {
        start: {
          line: 77,
          column: 19
        },
        end: {
          line: 77,
          column: 21
        }
      },
      "13": {
        start: {
          line: 78,
          column: 21
        },
        end: {
          line: 78,
          column: 23
        }
      },
      "14": {
        start: {
          line: 79,
          column: 4
        },
        end: {
          line: 82,
          column: 5
        }
      },
      "15": {
        start: {
          line: 80,
          column: 8
        },
        end: {
          line: 80,
          column: 141
        }
      },
      "16": {
        start: {
          line: 81,
          column: 8
        },
        end: {
          line: 81,
          column: 53
        }
      },
      "17": {
        start: {
          line: 83,
          column: 4
        },
        end: {
          line: 85,
          column: 5
        }
      },
      "18": {
        start: {
          line: 84,
          column: 8
        },
        end: {
          line: 84,
          column: 143
        }
      },
      "19": {
        start: {
          line: 86,
          column: 4
        },
        end: {
          line: 88,
          column: 5
        }
      },
      "20": {
        start: {
          line: 87,
          column: 8
        },
        end: {
          line: 87,
          column: 220
        }
      },
      "21": {
        start: {
          line: 89,
          column: 4
        },
        end: {
          line: 91,
          column: 5
        }
      },
      "22": {
        start: {
          line: 90,
          column: 8
        },
        end: {
          line: 90,
          column: 219
        }
      },
      "23": {
        start: {
          line: 92,
          column: 4
        },
        end: {
          line: 94,
          column: 5
        }
      },
      "24": {
        start: {
          line: 93,
          column: 8
        },
        end: {
          line: 93,
          column: 175
        }
      },
      "25": {
        start: {
          line: 95,
          column: 4
        },
        end: {
          line: 95,
          column: 93
        }
      },
      "26": {
        start: {
          line: 101,
          column: 22
        },
        end: {
          line: 101,
          column: 50
        }
      },
      "27": {
        start: {
          line: 102,
          column: 19
        },
        end: {
          line: 102,
          column: 21
        }
      },
      "28": {
        start: {
          line: 103,
          column: 21
        },
        end: {
          line: 103,
          column: 23
        }
      },
      "29": {
        start: {
          line: 104,
          column: 4
        },
        end: {
          line: 107,
          column: 5
        }
      },
      "30": {
        start: {
          line: 105,
          column: 8
        },
        end: {
          line: 105,
          column: 147
        }
      },
      "31": {
        start: {
          line: 106,
          column: 8
        },
        end: {
          line: 106,
          column: 53
        }
      },
      "32": {
        start: {
          line: 108,
          column: 4
        },
        end: {
          line: 110,
          column: 5
        }
      },
      "33": {
        start: {
          line: 109,
          column: 8
        },
        end: {
          line: 109,
          column: 136
        }
      },
      "34": {
        start: {
          line: 111,
          column: 4
        },
        end: {
          line: 113,
          column: 5
        }
      },
      "35": {
        start: {
          line: 112,
          column: 8
        },
        end: {
          line: 112,
          column: 131
        }
      },
      "36": {
        start: {
          line: 114,
          column: 4
        },
        end: {
          line: 116,
          column: 5
        }
      },
      "37": {
        start: {
          line: 115,
          column: 8
        },
        end: {
          line: 115,
          column: 157
        }
      },
      "38": {
        start: {
          line: 117,
          column: 4
        },
        end: {
          line: 119,
          column: 5
        }
      },
      "39": {
        start: {
          line: 118,
          column: 8
        },
        end: {
          line: 118,
          column: 156
        }
      },
      "40": {
        start: {
          line: 120,
          column: 4
        },
        end: {
          line: 120,
          column: 93
        }
      },
      "41": {
        start: {
          line: 126,
          column: 4
        },
        end: {
          line: 130,
          column: 5
        }
      },
      "42": {
        start: {
          line: 127,
          column: 8
        },
        end: {
          line: 129,
          column: 11
        }
      },
      "43": {
        start: {
          line: 131,
          column: 4
        },
        end: {
          line: 131,
          column: 33
        }
      },
      "44": {
        start: {
          line: 137,
          column: 22
        },
        end: {
          line: 137,
          column: 50
        }
      },
      "45": {
        start: {
          line: 138,
          column: 19
        },
        end: {
          line: 138,
          column: 21
        }
      },
      "46": {
        start: {
          line: 139,
          column: 21
        },
        end: {
          line: 139,
          column: 23
        }
      },
      "47": {
        start: {
          line: 140,
          column: 4
        },
        end: {
          line: 143,
          column: 5
        }
      },
      "48": {
        start: {
          line: 141,
          column: 8
        },
        end: {
          line: 141,
          column: 140
        }
      },
      "49": {
        start: {
          line: 142,
          column: 8
        },
        end: {
          line: 142,
          column: 53
        }
      },
      "50": {
        start: {
          line: 144,
          column: 4
        },
        end: {
          line: 146,
          column: 5
        }
      },
      "51": {
        start: {
          line: 145,
          column: 8
        },
        end: {
          line: 145,
          column: 202
        }
      },
      "52": {
        start: {
          line: 147,
          column: 4
        },
        end: {
          line: 149,
          column: 5
        }
      },
      "53": {
        start: {
          line: 148,
          column: 8
        },
        end: {
          line: 148,
          column: 201
        }
      },
      "54": {
        start: {
          line: 151,
          column: 4
        },
        end: {
          line: 168,
          column: 5
        }
      },
      "55": {
        start: {
          line: 152,
          column: 8
        },
        end: {
          line: 167,
          column: 9
        }
      },
      "56": {
        start: {
          line: 152,
          column: 21
        },
        end: {
          line: 152,
          column: 22
        }
      },
      "57": {
        start: {
          line: 153,
          column: 31
        },
        end: {
          line: 153,
          column: 62
        }
      },
      "58": {
        start: {
          line: 154,
          column: 12
        },
        end: {
          line: 166,
          column: 13
        }
      },
      "59": {
        start: {
          line: 155,
          column: 16
        },
        end: {
          line: 155,
          column: 229
        }
      },
      "60": {
        start: {
          line: 158,
          column: 16
        },
        end: {
          line: 161,
          column: 21
        }
      },
      "61": {
        start: {
          line: 158,
          column: 63
        },
        end: {
          line: 161,
          column: 17
        }
      },
      "62": {
        start: {
          line: 162,
          column: 16
        },
        end: {
          line: 165,
          column: 21
        }
      },
      "63": {
        start: {
          line: 162,
          column: 69
        },
        end: {
          line: 165,
          column: 17
        }
      },
      "64": {
        start: {
          line: 169,
          column: 4
        },
        end: {
          line: 169,
          column: 93
        }
      },
      "65": {
        start: {
          line: 175,
          column: 22
        },
        end: {
          line: 175,
          column: 50
        }
      },
      "66": {
        start: {
          line: 176,
          column: 19
        },
        end: {
          line: 176,
          column: 21
        }
      },
      "67": {
        start: {
          line: 177,
          column: 21
        },
        end: {
          line: 177,
          column: 23
        }
      },
      "68": {
        start: {
          line: 178,
          column: 4
        },
        end: {
          line: 183,
          column: 5
        }
      },
      "69": {
        start: {
          line: 179,
          column: 8
        },
        end: {
          line: 181,
          column: 9
        }
      },
      "70": {
        start: {
          line: 180,
          column: 12
        },
        end: {
          line: 180,
          column: 133
        }
      },
      "71": {
        start: {
          line: 182,
          column: 8
        },
        end: {
          line: 182,
          column: 97
        }
      },
      "72": {
        start: {
          line: 184,
          column: 4
        },
        end: {
          line: 187,
          column: 5
        }
      },
      "73": {
        start: {
          line: 185,
          column: 8
        },
        end: {
          line: 185,
          column: 175
        }
      },
      "74": {
        start: {
          line: 186,
          column: 8
        },
        end: {
          line: 186,
          column: 53
        }
      },
      "75": {
        start: {
          line: 189,
          column: 4
        },
        end: {
          line: 195,
          column: 5
        }
      },
      "76": {
        start: {
          line: 190,
          column: 8
        },
        end: {
          line: 194,
          column: 9
        }
      },
      "77": {
        start: {
          line: 191,
          column: 12
        },
        end: {
          line: 193,
          column: 13
        }
      },
      "78": {
        start: {
          line: 192,
          column: 16
        },
        end: {
          line: 192,
          column: 184
        }
      },
      "79": {
        start: {
          line: 197,
          column: 4
        },
        end: {
          line: 216,
          column: 5
        }
      },
      "80": {
        start: {
          line: 198,
          column: 8
        },
        end: {
          line: 215,
          column: 9
        }
      },
      "81": {
        start: {
          line: 199,
          column: 12
        },
        end: {
          line: 214,
          column: 13
        }
      },
      "82": {
        start: {
          line: 200,
          column: 39
        },
        end: {
          line: 200,
          column: 60
        }
      },
      "83": {
        start: {
          line: 201,
          column: 16
        },
        end: {
          line: 213,
          column: 17
        }
      },
      "84": {
        start: {
          line: 202,
          column: 20
        },
        end: {
          line: 202,
          column: 246
        }
      },
      "85": {
        start: {
          line: 205,
          column: 20
        },
        end: {
          line: 208,
          column: 25
        }
      },
      "86": {
        start: {
          line: 205,
          column: 71
        },
        end: {
          line: 208,
          column: 21
        }
      },
      "87": {
        start: {
          line: 209,
          column: 20
        },
        end: {
          line: 212,
          column: 25
        }
      },
      "88": {
        start: {
          line: 209,
          column: 77
        },
        end: {
          line: 212,
          column: 21
        }
      },
      "89": {
        start: {
          line: 217,
          column: 4
        },
        end: {
          line: 217,
          column: 93
        }
      },
      "90": {
        start: {
          line: 223,
          column: 22
        },
        end: {
          line: 223,
          column: 48
        }
      },
      "91": {
        start: {
          line: 224,
          column: 22
        },
        end: {
          line: 224,
          column: 60
        }
      },
      "92": {
        start: {
          line: 225,
          column: 4
        },
        end: {
          line: 229,
          column: 5
        }
      },
      "93": {
        start: {
          line: 226,
          column: 8
        },
        end: {
          line: 228,
          column: 11
        }
      },
      "94": {
        start: {
          line: 230,
          column: 4
        },
        end: {
          line: 248,
          column: 5
        }
      },
      "95": {
        start: {
          line: 231,
          column: 20
        },
        end: {
          line: 231,
          column: 34
        }
      },
      "96": {
        start: {
          line: 232,
          column: 8
        },
        end: {
          line: 236,
          column: 9
        }
      },
      "97": {
        start: {
          line: 233,
          column: 12
        },
        end: {
          line: 235,
          column: 15
        }
      },
      "98": {
        start: {
          line: 237,
          column: 8
        },
        end: {
          line: 241,
          column: 9
        }
      },
      "99": {
        start: {
          line: 238,
          column: 12
        },
        end: {
          line: 240,
          column: 15
        }
      },
      "100": {
        start: {
          line: 242,
          column: 8
        },
        end: {
          line: 242,
          column: 37
        }
      },
      "101": {
        start: {
          line: 245,
          column: 8
        },
        end: {
          line: 247,
          column: 11
        }
      },
      "102": {
        start: {
          line: 254,
          column: 4
        },
        end: {
          line: 258,
          column: 5
        }
      },
      "103": {
        start: {
          line: 255,
          column: 8
        },
        end: {
          line: 257,
          column: 11
        }
      },
      "104": {
        start: {
          line: 259,
          column: 23
        },
        end: {
          line: 259,
          column: 51
        }
      },
      "105": {
        start: {
          line: 260,
          column: 4
        },
        end: {
          line: 264,
          column: 5
        }
      },
      "106": {
        start: {
          line: 261,
          column: 8
        },
        end: {
          line: 263,
          column: 11
        }
      },
      "107": {
        start: {
          line: 265,
          column: 4
        },
        end: {
          line: 265,
          column: 33
        }
      },
      "108": {
        start: {
          line: 271,
          column: 22
        },
        end: {
          line: 271,
          column: 54
        }
      },
      "109": {
        start: {
          line: 272,
          column: 19
        },
        end: {
          line: 272,
          column: 21
        }
      },
      "110": {
        start: {
          line: 273,
          column: 21
        },
        end: {
          line: 273,
          column: 23
        }
      },
      "111": {
        start: {
          line: 274,
          column: 4
        },
        end: {
          line: 277,
          column: 5
        }
      },
      "112": {
        start: {
          line: 275,
          column: 8
        },
        end: {
          line: 275,
          column: 141
        }
      },
      "113": {
        start: {
          line: 276,
          column: 8
        },
        end: {
          line: 276,
          column: 53
        }
      },
      "114": {
        start: {
          line: 278,
          column: 4
        },
        end: {
          line: 280,
          column: 5
        }
      },
      "115": {
        start: {
          line: 279,
          column: 8
        },
        end: {
          line: 279,
          column: 151
        }
      },
      "116": {
        start: {
          line: 281,
          column: 4
        },
        end: {
          line: 286,
          column: 5
        }
      },
      "117": {
        start: {
          line: 282,
          column: 26
        },
        end: {
          line: 282,
          column: 63
        }
      },
      "118": {
        start: {
          line: 283,
          column: 8
        },
        end: {
          line: 285,
          column: 9
        }
      },
      "119": {
        start: {
          line: 284,
          column: 12
        },
        end: {
          line: 284,
          column: 252
        }
      },
      "120": {
        start: {
          line: 287,
          column: 4
        },
        end: {
          line: 287,
          column: 93
        }
      },
      "121": {
        start: {
          line: 293,
          column: 22
        },
        end: {
          line: 293,
          column: 59
        }
      },
      "122": {
        start: {
          line: 294,
          column: 19
        },
        end: {
          line: 294,
          column: 21
        }
      },
      "123": {
        start: {
          line: 295,
          column: 21
        },
        end: {
          line: 295,
          column: 23
        }
      },
      "124": {
        start: {
          line: 296,
          column: 4
        },
        end: {
          line: 299,
          column: 5
        }
      },
      "125": {
        start: {
          line: 297,
          column: 8
        },
        end: {
          line: 297,
          column: 141
        }
      },
      "126": {
        start: {
          line: 298,
          column: 8
        },
        end: {
          line: 298,
          column: 53
        }
      },
      "127": {
        start: {
          line: 300,
          column: 4
        },
        end: {
          line: 302,
          column: 5
        }
      },
      "128": {
        start: {
          line: 301,
          column: 8
        },
        end: {
          line: 301,
          column: 161
        }
      },
      "129": {
        start: {
          line: 303,
          column: 4
        },
        end: {
          line: 303,
          column: 93
        }
      },
      "130": {
        start: {
          line: 309,
          column: 25
        },
        end: {
          line: 315,
          column: 6
        }
      },
      "131": {
        start: {
          line: 316,
          column: 4
        },
        end: {
          line: 318,
          column: 5
        }
      },
      "132": {
        start: {
          line: 317,
          column: 8
        },
        end: {
          line: 317,
          column: 28
        }
      },
      "133": {
        start: {
          line: 320,
          column: 21
        },
        end: {
          line: 320,
          column: 23
        }
      },
      "134": {
        start: {
          line: 321,
          column: 4
        },
        end: {
          line: 323,
          column: 5
        }
      },
      "135": {
        start: {
          line: 322,
          column: 8
        },
        end: {
          line: 322,
          column: 229
        }
      },
      "136": {
        start: {
          line: 324,
          column: 4
        },
        end: {
          line: 328,
          column: 6
        }
      },
      "137": {
        start: {
          line: 334,
          column: 4
        },
        end: {
          line: 338,
          column: 5
        }
      },
      "138": {
        start: {
          line: 335,
          column: 8
        },
        end: {
          line: 337,
          column: 11
        }
      },
      "139": {
        start: {
          line: 339,
          column: 24
        },
        end: {
          line: 339,
          column: 205
        }
      },
      "140": {
        start: {
          line: 340,
          column: 4
        },
        end: {
          line: 344,
          column: 5
        }
      },
      "141": {
        start: {
          line: 341,
          column: 8
        },
        end: {
          line: 343,
          column: 11
        }
      },
      "142": {
        start: {
          line: 345,
          column: 4
        },
        end: {
          line: 345,
          column: 33
        }
      },
      "143": {
        start: {
          line: 351,
          column: 4
        },
        end: {
          line: 355,
          column: 5
        }
      },
      "144": {
        start: {
          line: 352,
          column: 8
        },
        end: {
          line: 354,
          column: 11
        }
      },
      "145": {
        start: {
          line: 356,
          column: 22
        },
        end: {
          line: 356,
          column: 98
        }
      },
      "146": {
        start: {
          line: 357,
          column: 4
        },
        end: {
          line: 361,
          column: 5
        }
      },
      "147": {
        start: {
          line: 358,
          column: 8
        },
        end: {
          line: 360,
          column: 11
        }
      },
      "148": {
        start: {
          line: 362,
          column: 4
        },
        end: {
          line: 362,
          column: 33
        }
      },
      "149": {
        start: {
          line: 368,
          column: 4
        },
        end: {
          line: 374,
          column: 5
        }
      },
      "150": {
        start: {
          line: 369,
          column: 8
        },
        end: {
          line: 369,
          column: 26
        }
      },
      "151": {
        start: {
          line: 370,
          column: 8
        },
        end: {
          line: 370,
          column: 20
        }
      },
      "152": {
        start: {
          line: 373,
          column: 8
        },
        end: {
          line: 373,
          column: 21
        }
      },
      "153": {
        start: {
          line: 380,
          column: 4
        },
        end: {
          line: 389,
          column: 5
        }
      },
      "154": {
        start: {
          line: 381,
          column: 21
        },
        end: {
          line: 381,
          column: 38
        }
      },
      "155": {
        start: {
          line: 382,
          column: 8
        },
        end: {
          line: 382,
          column: 39
        }
      },
      "156": {
        start: {
          line: 385,
          column: 8
        },
        end: {
          line: 388,
          column: 10
        }
      },
      "157": {
        start: {
          line: 395,
          column: 4
        },
        end: {
          line: 398,
          column: 7
        }
      },
      "158": {
        start: {
          line: 404,
          column: 19
        },
        end: {
          line: 404,
          column: 21
        }
      },
      "159": {
        start: {
          line: 405,
          column: 21
        },
        end: {
          line: 405,
          column: 23
        }
      },
      "160": {
        start: {
          line: 406,
          column: 4
        },
        end: {
          line: 409,
          column: 5
        }
      },
      "161": {
        start: {
          line: 407,
          column: 8
        },
        end: {
          line: 407,
          column: 38
        }
      },
      "162": {
        start: {
          line: 408,
          column: 8
        },
        end: {
          line: 408,
          column: 42
        }
      },
      "163": {
        start: {
          line: 410,
          column: 4
        },
        end: {
          line: 414,
          column: 6
        }
      },
      "164": {
        start: {
          line: 420,
          column: 20
        },
        end: {
          line: 420,
          column: 22
        }
      },
      "165": {
        start: {
          line: 421,
          column: 4
        },
        end: {
          line: 428,
          column: 5
        }
      },
      "166": {
        start: {
          line: 422,
          column: 23
        },
        end: {
          line: 422,
          column: 45
        }
      },
      "167": {
        start: {
          line: 423,
          column: 8
        },
        end: {
          line: 423,
          column: 29
        }
      },
      "168": {
        start: {
          line: 425,
          column: 8
        },
        end: {
          line: 427,
          column: 9
        }
      },
      "169": {
        start: {
          line: 426,
          column: 12
        },
        end: {
          line: 426,
          column: 18
        }
      },
      "170": {
        start: {
          line: 429,
          column: 4
        },
        end: {
          line: 429,
          column: 48
        }
      }
    },
    fnMap: {
      "0": {
        name: "createValidationError",
        decl: {
          start: {
            line: 11,
            column: 9
          },
          end: {
            line: 11,
            column: 30
          }
        },
        loc: {
          start: {
            line: 11,
            column: 70
          },
          end: {
            line: 19,
            column: 1
          }
        },
        line: 11
      },
      "1": {
        name: "createValidationWarning",
        decl: {
          start: {
            line: 23,
            column: 9
          },
          end: {
            line: 23,
            column: 32
          }
        },
        loc: {
          start: {
            line: 23,
            column: 66
          },
          end: {
            line: 30,
            column: 1
          }
        },
        line: 23
      },
      "2": {
        name: "createSuccessResult",
        decl: {
          start: {
            line: 34,
            column: 9
          },
          end: {
            line: 34,
            column: 28
          }
        },
        loc: {
          start: {
            line: 34,
            column: 31
          },
          end: {
            line: 40,
            column: 1
          }
        },
        line: 34
      },
      "3": {
        name: "createFailureResult",
        decl: {
          start: {
            line: 44,
            column: 9
          },
          end: {
            line: 44,
            column: 28
          }
        },
        loc: {
          start: {
            line: 44,
            column: 52
          },
          end: {
            line: 50,
            column: 1
          }
        },
        line: 44
      },
      "4": {
        name: "validateRequired",
        decl: {
          start: {
            line: 54,
            column: 16
          },
          end: {
            line: 54,
            column: 32
          }
        },
        loc: {
          start: {
            line: 54,
            column: 61
          },
          end: {
            line: 71,
            column: 1
          }
        },
        line: 54
      },
      "5": {
        name: "validateString",
        decl: {
          start: {
            line: 75,
            column: 16
          },
          end: {
            line: 75,
            column: 30
          }
        },
        loc: {
          start: {
            line: 75,
            column: 52
          },
          end: {
            line: 96,
            column: 1
          }
        },
        line: 75
      },
      "6": {
        name: "validateNumber",
        decl: {
          start: {
            line: 100,
            column: 16
          },
          end: {
            line: 100,
            column: 30
          }
        },
        loc: {
          start: {
            line: 100,
            column: 52
          },
          end: {
            line: 121,
            column: 1
          }
        },
        line: 100
      },
      "7": {
        name: "validateBoolean",
        decl: {
          start: {
            line: 125,
            column: 16
          },
          end: {
            line: 125,
            column: 31
          }
        },
        loc: {
          start: {
            line: 125,
            column: 60
          },
          end: {
            line: 132,
            column: 1
          }
        },
        line: 125
      },
      "8": {
        name: "validateArray",
        decl: {
          start: {
            line: 136,
            column: 16
          },
          end: {
            line: 136,
            column: 29
          }
        },
        loc: {
          start: {
            line: 136,
            column: 51
          },
          end: {
            line: 170,
            column: 1
          }
        },
        line: 136
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 158,
            column: 53
          },
          end: {
            line: 158,
            column: 54
          }
        },
        loc: {
          start: {
            line: 158,
            column: 63
          },
          end: {
            line: 161,
            column: 17
          }
        },
        line: 158
      },
      "10": {
        name: "(anonymous_10)",
        decl: {
          start: {
            line: 162,
            column: 57
          },
          end: {
            line: 162,
            column: 58
          }
        },
        loc: {
          start: {
            line: 162,
            column: 69
          },
          end: {
            line: 165,
            column: 17
          }
        },
        line: 162
      },
      "11": {
        name: "validateObject",
        decl: {
          start: {
            line: 174,
            column: 16
          },
          end: {
            line: 174,
            column: 30
          }
        },
        loc: {
          start: {
            line: 174,
            column: 52
          },
          end: {
            line: 218,
            column: 1
          }
        },
        line: 174
      },
      "12": {
        name: "(anonymous_12)",
        decl: {
          start: {
            line: 205,
            column: 61
          },
          end: {
            line: 205,
            column: 62
          }
        },
        loc: {
          start: {
            line: 205,
            column: 71
          },
          end: {
            line: 208,
            column: 21
          }
        },
        line: 205
      },
      "13": {
        name: "(anonymous_13)",
        decl: {
          start: {
            line: 209,
            column: 65
          },
          end: {
            line: 209,
            column: 66
          }
        },
        loc: {
          start: {
            line: 209,
            column: 77
          },
          end: {
            line: 212,
            column: 21
          }
        },
        line: 209
      },
      "14": {
        name: "validateUrl",
        decl: {
          start: {
            line: 222,
            column: 16
          },
          end: {
            line: 222,
            column: 27
          }
        },
        loc: {
          start: {
            line: 222,
            column: 49
          },
          end: {
            line: 249,
            column: 1
          }
        },
        line: 222
      },
      "15": {
        name: "validateEmail",
        decl: {
          start: {
            line: 253,
            column: 16
          },
          end: {
            line: 253,
            column: 29
          }
        },
        loc: {
          start: {
            line: 253,
            column: 58
          },
          end: {
            line: 266,
            column: 1
          }
        },
        line: 253
      },
      "16": {
        name: "validateFilePath",
        decl: {
          start: {
            line: 270,
            column: 22
          },
          end: {
            line: 270,
            column: 38
          }
        },
        loc: {
          start: {
            line: 270,
            column: 60
          },
          end: {
            line: 288,
            column: 1
          }
        },
        line: 270
      },
      "17": {
        name: "validateDirectoryPath",
        decl: {
          start: {
            line: 292,
            column: 22
          },
          end: {
            line: 292,
            column: 43
          }
        },
        loc: {
          start: {
            line: 292,
            column: 65
          },
          end: {
            line: 304,
            column: 1
          }
        },
        line: 292
      },
      "18": {
        name: "validatePort",
        decl: {
          start: {
            line: 308,
            column: 16
          },
          end: {
            line: 308,
            column: 28
          }
        },
        loc: {
          start: {
            line: 308,
            column: 56
          },
          end: {
            line: 329,
            column: 1
          }
        },
        line: 308
      },
      "19": {
        name: "validateVersion",
        decl: {
          start: {
            line: 333,
            column: 16
          },
          end: {
            line: 333,
            column: 31
          }
        },
        loc: {
          start: {
            line: 333,
            column: 62
          },
          end: {
            line: 346,
            column: 1
          }
        },
        line: 333
      },
      "20": {
        name: "validateUuid",
        decl: {
          start: {
            line: 350,
            column: 16
          },
          end: {
            line: 350,
            column: 28
          }
        },
        loc: {
          start: {
            line: 350,
            column: 56
          },
          end: {
            line: 363,
            column: 1
          }
        },
        line: 350
      },
      "21": {
        name: "isValidJson",
        decl: {
          start: {
            line: 367,
            column: 16
          },
          end: {
            line: 367,
            column: 27
          }
        },
        loc: {
          start: {
            line: 367,
            column: 35
          },
          end: {
            line: 375,
            column: 1
          }
        },
        line: 367
      },
      "22": {
        name: "parseJson",
        decl: {
          start: {
            line: 379,
            column: 16
          },
          end: {
            line: 379,
            column: 25
          }
        },
        loc: {
          start: {
            line: 379,
            column: 53
          },
          end: {
            line: 390,
            column: 1
          }
        },
        line: 379
      },
      "23": {
        name: "validateJsonSchema",
        decl: {
          start: {
            line: 394,
            column: 16
          },
          end: {
            line: 394,
            column: 34
          }
        },
        loc: {
          start: {
            line: 394,
            column: 70
          },
          end: {
            line: 399,
            column: 1
          }
        },
        line: 394
      },
      "24": {
        name: "combineValidationResults",
        decl: {
          start: {
            line: 403,
            column: 16
          },
          end: {
            line: 403,
            column: 40
          }
        },
        loc: {
          start: {
            line: 403,
            column: 53
          },
          end: {
            line: 415,
            column: 1
          }
        },
        line: 403
      },
      "25": {
        name: "runValidators",
        decl: {
          start: {
            line: 419,
            column: 22
          },
          end: {
            line: 419,
            column: 35
          }
        },
        loc: {
          start: {
            line: 419,
            column: 64
          },
          end: {
            line: 430,
            column: 1
          }
        },
        line: 419
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 44,
            column: 37
          },
          end: {
            line: 44,
            column: 50
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 44,
            column: 48
          },
          end: {
            line: 44,
            column: 50
          }
        }],
        line: 44
      },
      "1": {
        loc: {
          start: {
            line: 54,
            column: 40
          },
          end: {
            line: 54,
            column: 59
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 54,
            column: 52
          },
          end: {
            line: 54,
            column: 59
          }
        }],
        line: 54
      },
      "2": {
        loc: {
          start: {
            line: 55,
            column: 4
          },
          end: {
            line: 59,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 55,
            column: 4
          },
          end: {
            line: 59,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 55
      },
      "3": {
        loc: {
          start: {
            line: 55,
            column: 8
          },
          end: {
            line: 55,
            column: 45
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 55,
            column: 8
          },
          end: {
            line: 55,
            column: 22
          }
        }, {
          start: {
            line: 55,
            column: 26
          },
          end: {
            line: 55,
            column: 45
          }
        }],
        line: 55
      },
      "4": {
        loc: {
          start: {
            line: 60,
            column: 4
          },
          end: {
            line: 64,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 60,
            column: 4
          },
          end: {
            line: 64,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 60
      },
      "5": {
        loc: {
          start: {
            line: 60,
            column: 8
          },
          end: {
            line: 60,
            column: 56
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 60,
            column: 8
          },
          end: {
            line: 60,
            column: 33
          }
        }, {
          start: {
            line: 60,
            column: 37
          },
          end: {
            line: 60,
            column: 56
          }
        }],
        line: 60
      },
      "6": {
        loc: {
          start: {
            line: 65,
            column: 4
          },
          end: {
            line: 69,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 65,
            column: 4
          },
          end: {
            line: 69,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 65
      },
      "7": {
        loc: {
          start: {
            line: 65,
            column: 8
          },
          end: {
            line: 65,
            column: 50
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 65,
            column: 8
          },
          end: {
            line: 65,
            column: 28
          }
        }, {
          start: {
            line: 65,
            column: 32
          },
          end: {
            line: 65,
            column: 50
          }
        }],
        line: 65
      },
      "8": {
        loc: {
          start: {
            line: 75,
            column: 38
          },
          end: {
            line: 75,
            column: 50
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 75,
            column: 48
          },
          end: {
            line: 75,
            column: 50
          }
        }],
        line: 75
      },
      "9": {
        loc: {
          start: {
            line: 76,
            column: 22
          },
          end: {
            line: 76,
            column: 50
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 76,
            column: 22
          },
          end: {
            line: 76,
            column: 39
          }
        }, {
          start: {
            line: 76,
            column: 43
          },
          end: {
            line: 76,
            column: 50
          }
        }],
        line: 76
      },
      "10": {
        loc: {
          start: {
            line: 79,
            column: 4
          },
          end: {
            line: 82,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 79,
            column: 4
          },
          end: {
            line: 82,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 79
      },
      "11": {
        loc: {
          start: {
            line: 83,
            column: 4
          },
          end: {
            line: 85,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 83,
            column: 4
          },
          end: {
            line: 85,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 83
      },
      "12": {
        loc: {
          start: {
            line: 83,
            column: 8
          },
          end: {
            line: 83,
            column: 50
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 83,
            column: 8
          },
          end: {
            line: 83,
            column: 27
          }
        }, {
          start: {
            line: 83,
            column: 31
          },
          end: {
            line: 83,
            column: 50
          }
        }],
        line: 83
      },
      "13": {
        loc: {
          start: {
            line: 86,
            column: 4
          },
          end: {
            line: 88,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 86,
            column: 4
          },
          end: {
            line: 88,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 86
      },
      "14": {
        loc: {
          start: {
            line: 86,
            column: 8
          },
          end: {
            line: 86,
            column: 75
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 86,
            column: 8
          },
          end: {
            line: 86,
            column: 39
          }
        }, {
          start: {
            line: 86,
            column: 43
          },
          end: {
            line: 86,
            column: 75
          }
        }],
        line: 86
      },
      "15": {
        loc: {
          start: {
            line: 89,
            column: 4
          },
          end: {
            line: 91,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 89,
            column: 4
          },
          end: {
            line: 91,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 89
      },
      "16": {
        loc: {
          start: {
            line: 89,
            column: 8
          },
          end: {
            line: 89,
            column: 75
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 89,
            column: 8
          },
          end: {
            line: 89,
            column: 39
          }
        }, {
          start: {
            line: 89,
            column: 43
          },
          end: {
            line: 89,
            column: 75
          }
        }],
        line: 89
      },
      "17": {
        loc: {
          start: {
            line: 92,
            column: 4
          },
          end: {
            line: 94,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 92,
            column: 4
          },
          end: {
            line: 94,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 92
      },
      "18": {
        loc: {
          start: {
            line: 92,
            column: 8
          },
          end: {
            line: 92,
            column: 55
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 92,
            column: 8
          },
          end: {
            line: 92,
            column: 23
          }
        }, {
          start: {
            line: 92,
            column: 27
          },
          end: {
            line: 92,
            column: 55
          }
        }],
        line: 92
      },
      "19": {
        loc: {
          start: {
            line: 95,
            column: 11
          },
          end: {
            line: 95,
            column: 92
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 95,
            column: 31
          },
          end: {
            line: 95,
            column: 68
          }
        }, {
          start: {
            line: 95,
            column: 71
          },
          end: {
            line: 95,
            column: 92
          }
        }],
        line: 95
      },
      "20": {
        loc: {
          start: {
            line: 100,
            column: 38
          },
          end: {
            line: 100,
            column: 50
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 100,
            column: 48
          },
          end: {
            line: 100,
            column: 50
          }
        }],
        line: 100
      },
      "21": {
        loc: {
          start: {
            line: 101,
            column: 22
          },
          end: {
            line: 101,
            column: 50
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 101,
            column: 22
          },
          end: {
            line: 101,
            column: 39
          }
        }, {
          start: {
            line: 101,
            column: 43
          },
          end: {
            line: 101,
            column: 50
          }
        }],
        line: 101
      },
      "22": {
        loc: {
          start: {
            line: 104,
            column: 4
          },
          end: {
            line: 107,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 104,
            column: 4
          },
          end: {
            line: 107,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 104
      },
      "23": {
        loc: {
          start: {
            line: 104,
            column: 8
          },
          end: {
            line: 104,
            column: 49
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 104,
            column: 8
          },
          end: {
            line: 104,
            column: 33
          }
        }, {
          start: {
            line: 104,
            column: 37
          },
          end: {
            line: 104,
            column: 49
          }
        }],
        line: 104
      },
      "24": {
        loc: {
          start: {
            line: 108,
            column: 4
          },
          end: {
            line: 110,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 108,
            column: 4
          },
          end: {
            line: 110,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 108
      },
      "25": {
        loc: {
          start: {
            line: 108,
            column: 8
          },
          end: {
            line: 108,
            column: 51
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 108,
            column: 8
          },
          end: {
            line: 108,
            column: 23
          }
        }, {
          start: {
            line: 108,
            column: 27
          },
          end: {
            line: 108,
            column: 51
          }
        }],
        line: 108
      },
      "26": {
        loc: {
          start: {
            line: 111,
            column: 4
          },
          end: {
            line: 113,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 111,
            column: 4
          },
          end: {
            line: 113,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 111
      },
      "27": {
        loc: {
          start: {
            line: 111,
            column: 8
          },
          end: {
            line: 111,
            column: 38
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 111,
            column: 8
          },
          end: {
            line: 111,
            column: 24
          }
        }, {
          start: {
            line: 111,
            column: 28
          },
          end: {
            line: 111,
            column: 38
          }
        }],
        line: 111
      },
      "28": {
        loc: {
          start: {
            line: 114,
            column: 4
          },
          end: {
            line: 116,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 114,
            column: 4
          },
          end: {
            line: 116,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 114
      },
      "29": {
        loc: {
          start: {
            line: 114,
            column: 8
          },
          end: {
            line: 114,
            column: 56
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 114,
            column: 8
          },
          end: {
            line: 114,
            column: 33
          }
        }, {
          start: {
            line: 114,
            column: 37
          },
          end: {
            line: 114,
            column: 56
          }
        }],
        line: 114
      },
      "30": {
        loc: {
          start: {
            line: 117,
            column: 4
          },
          end: {
            line: 119,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 117,
            column: 4
          },
          end: {
            line: 119,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 117
      },
      "31": {
        loc: {
          start: {
            line: 117,
            column: 8
          },
          end: {
            line: 117,
            column: 56
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 117,
            column: 8
          },
          end: {
            line: 117,
            column: 33
          }
        }, {
          start: {
            line: 117,
            column: 37
          },
          end: {
            line: 117,
            column: 56
          }
        }],
        line: 117
      },
      "32": {
        loc: {
          start: {
            line: 120,
            column: 11
          },
          end: {
            line: 120,
            column: 92
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 120,
            column: 31
          },
          end: {
            line: 120,
            column: 68
          }
        }, {
          start: {
            line: 120,
            column: 71
          },
          end: {
            line: 120,
            column: 92
          }
        }],
        line: 120
      },
      "33": {
        loc: {
          start: {
            line: 125,
            column: 39
          },
          end: {
            line: 125,
            column: 58
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 125,
            column: 51
          },
          end: {
            line: 125,
            column: 58
          }
        }],
        line: 125
      },
      "34": {
        loc: {
          start: {
            line: 126,
            column: 4
          },
          end: {
            line: 130,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 126,
            column: 4
          },
          end: {
            line: 130,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 126
      },
      "35": {
        loc: {
          start: {
            line: 136,
            column: 37
          },
          end: {
            line: 136,
            column: 49
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 136,
            column: 47
          },
          end: {
            line: 136,
            column: 49
          }
        }],
        line: 136
      },
      "36": {
        loc: {
          start: {
            line: 137,
            column: 22
          },
          end: {
            line: 137,
            column: 50
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 137,
            column: 22
          },
          end: {
            line: 137,
            column: 39
          }
        }, {
          start: {
            line: 137,
            column: 43
          },
          end: {
            line: 137,
            column: 50
          }
        }],
        line: 137
      },
      "37": {
        loc: {
          start: {
            line: 140,
            column: 4
          },
          end: {
            line: 143,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 140,
            column: 4
          },
          end: {
            line: 143,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 140
      },
      "38": {
        loc: {
          start: {
            line: 144,
            column: 4
          },
          end: {
            line: 146,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 144,
            column: 4
          },
          end: {
            line: 146,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 144
      },
      "39": {
        loc: {
          start: {
            line: 144,
            column: 8
          },
          end: {
            line: 144,
            column: 75
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 144,
            column: 8
          },
          end: {
            line: 144,
            column: 39
          }
        }, {
          start: {
            line: 144,
            column: 43
          },
          end: {
            line: 144,
            column: 75
          }
        }],
        line: 144
      },
      "40": {
        loc: {
          start: {
            line: 147,
            column: 4
          },
          end: {
            line: 149,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 147,
            column: 4
          },
          end: {
            line: 149,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 147
      },
      "41": {
        loc: {
          start: {
            line: 147,
            column: 8
          },
          end: {
            line: 147,
            column: 75
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 147,
            column: 8
          },
          end: {
            line: 147,
            column: 39
          }
        }, {
          start: {
            line: 147,
            column: 43
          },
          end: {
            line: 147,
            column: 75
          }
        }],
        line: 147
      },
      "42": {
        loc: {
          start: {
            line: 151,
            column: 4
          },
          end: {
            line: 168,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 151,
            column: 4
          },
          end: {
            line: 168,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 151
      },
      "43": {
        loc: {
          start: {
            line: 154,
            column: 12
          },
          end: {
            line: 166,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 154,
            column: 12
          },
          end: {
            line: 166,
            column: 13
          }
        }, {
          start: {
            line: 157,
            column: 17
          },
          end: {
            line: 166,
            column: 13
          }
        }],
        line: 154
      },
      "44": {
        loc: {
          start: {
            line: 160,
            column: 61
          },
          end: {
            line: 160,
            column: 95
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 160,
            column: 74
          },
          end: {
            line: 160,
            column: 90
          }
        }, {
          start: {
            line: 160,
            column: 93
          },
          end: {
            line: 160,
            column: 95
          }
        }],
        line: 160
      },
      "45": {
        loc: {
          start: {
            line: 164,
            column: 61
          },
          end: {
            line: 164,
            column: 99
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 164,
            column: 76
          },
          end: {
            line: 164,
            column: 94
          }
        }, {
          start: {
            line: 164,
            column: 97
          },
          end: {
            line: 164,
            column: 99
          }
        }],
        line: 164
      },
      "46": {
        loc: {
          start: {
            line: 169,
            column: 11
          },
          end: {
            line: 169,
            column: 92
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 169,
            column: 31
          },
          end: {
            line: 169,
            column: 68
          }
        }, {
          start: {
            line: 169,
            column: 71
          },
          end: {
            line: 169,
            column: 92
          }
        }],
        line: 169
      },
      "47": {
        loc: {
          start: {
            line: 174,
            column: 38
          },
          end: {
            line: 174,
            column: 50
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 174,
            column: 48
          },
          end: {
            line: 174,
            column: 50
          }
        }],
        line: 174
      },
      "48": {
        loc: {
          start: {
            line: 175,
            column: 22
          },
          end: {
            line: 175,
            column: 50
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 175,
            column: 22
          },
          end: {
            line: 175,
            column: 39
          }
        }, {
          start: {
            line: 175,
            column: 43
          },
          end: {
            line: 175,
            column: 50
          }
        }],
        line: 175
      },
      "49": {
        loc: {
          start: {
            line: 178,
            column: 4
          },
          end: {
            line: 183,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 178,
            column: 4
          },
          end: {
            line: 183,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 178
      },
      "50": {
        loc: {
          start: {
            line: 179,
            column: 8
          },
          end: {
            line: 181,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 179,
            column: 8
          },
          end: {
            line: 181,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 179
      },
      "51": {
        loc: {
          start: {
            line: 182,
            column: 15
          },
          end: {
            line: 182,
            column: 96
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 182,
            column: 35
          },
          end: {
            line: 182,
            column: 72
          }
        }, {
          start: {
            line: 182,
            column: 75
          },
          end: {
            line: 182,
            column: 96
          }
        }],
        line: 182
      },
      "52": {
        loc: {
          start: {
            line: 184,
            column: 4
          },
          end: {
            line: 187,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 184,
            column: 4
          },
          end: {
            line: 187,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 184
      },
      "53": {
        loc: {
          start: {
            line: 184,
            column: 8
          },
          end: {
            line: 184,
            column: 57
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 184,
            column: 8
          },
          end: {
            line: 184,
            column: 33
          }
        }, {
          start: {
            line: 184,
            column: 37
          },
          end: {
            line: 184,
            column: 57
          }
        }],
        line: 184
      },
      "54": {
        loc: {
          start: {
            line: 185,
            column: 127
          },
          end: {
            line: 185,
            column: 172
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 185,
            column: 150
          },
          end: {
            line: 185,
            column: 157
          }
        }, {
          start: {
            line: 185,
            column: 160
          },
          end: {
            line: 185,
            column: 172
          }
        }],
        line: 185
      },
      "55": {
        loc: {
          start: {
            line: 189,
            column: 4
          },
          end: {
            line: 195,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 189,
            column: 4
          },
          end: {
            line: 195,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 189
      },
      "56": {
        loc: {
          start: {
            line: 191,
            column: 12
          },
          end: {
            line: 193,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 191,
            column: 12
          },
          end: {
            line: 193,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 191
      },
      "57": {
        loc: {
          start: {
            line: 197,
            column: 4
          },
          end: {
            line: 216,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 197,
            column: 4
          },
          end: {
            line: 216,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 197
      },
      "58": {
        loc: {
          start: {
            line: 199,
            column: 12
          },
          end: {
            line: 214,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 199,
            column: 12
          },
          end: {
            line: 214,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 199
      },
      "59": {
        loc: {
          start: {
            line: 201,
            column: 16
          },
          end: {
            line: 213,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 201,
            column: 16
          },
          end: {
            line: 213,
            column: 17
          }
        }, {
          start: {
            line: 204,
            column: 21
          },
          end: {
            line: 213,
            column: 17
          }
        }],
        line: 201
      },
      "60": {
        loc: {
          start: {
            line: 207,
            column: 66
          },
          end: {
            line: 207,
            column: 100
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 207,
            column: 79
          },
          end: {
            line: 207,
            column: 95
          }
        }, {
          start: {
            line: 207,
            column: 98
          },
          end: {
            line: 207,
            column: 100
          }
        }],
        line: 207
      },
      "61": {
        loc: {
          start: {
            line: 211,
            column: 66
          },
          end: {
            line: 211,
            column: 104
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 211,
            column: 81
          },
          end: {
            line: 211,
            column: 99
          }
        }, {
          start: {
            line: 211,
            column: 102
          },
          end: {
            line: 211,
            column: 104
          }
        }],
        line: 211
      },
      "62": {
        loc: {
          start: {
            line: 217,
            column: 11
          },
          end: {
            line: 217,
            column: 92
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 217,
            column: 31
          },
          end: {
            line: 217,
            column: 68
          }
        }, {
          start: {
            line: 217,
            column: 71
          },
          end: {
            line: 217,
            column: 92
          }
        }],
        line: 217
      },
      "63": {
        loc: {
          start: {
            line: 222,
            column: 35
          },
          end: {
            line: 222,
            column: 47
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 222,
            column: 45
          },
          end: {
            line: 222,
            column: 47
          }
        }],
        line: 222
      },
      "64": {
        loc: {
          start: {
            line: 223,
            column: 22
          },
          end: {
            line: 223,
            column: 48
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 223,
            column: 22
          },
          end: {
            line: 223,
            column: 39
          }
        }, {
          start: {
            line: 223,
            column: 43
          },
          end: {
            line: 223,
            column: 48
          }
        }],
        line: 223
      },
      "65": {
        loc: {
          start: {
            line: 224,
            column: 22
          },
          end: {
            line: 224,
            column: 60
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 224,
            column: 22
          },
          end: {
            line: 224,
            column: 39
          }
        }, {
          start: {
            line: 224,
            column: 43
          },
          end: {
            line: 224,
            column: 60
          }
        }],
        line: 224
      },
      "66": {
        loc: {
          start: {
            line: 225,
            column: 4
          },
          end: {
            line: 229,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 225,
            column: 4
          },
          end: {
            line: 229,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 225
      },
      "67": {
        loc: {
          start: {
            line: 232,
            column: 8
          },
          end: {
            line: 236,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 232,
            column: 8
          },
          end: {
            line: 236,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 232
      },
      "68": {
        loc: {
          start: {
            line: 237,
            column: 8
          },
          end: {
            line: 241,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 237,
            column: 8
          },
          end: {
            line: 241,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 237
      },
      "69": {
        loc: {
          start: {
            line: 237,
            column: 12
          },
          end: {
            line: 237,
            column: 100
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 237,
            column: 12
          },
          end: {
            line: 237,
            column: 31
          }
        }, {
          start: {
            line: 237,
            column: 36
          },
          end: {
            line: 237,
            column: 64
          }
        }, {
          start: {
            line: 237,
            column: 68
          },
          end: {
            line: 237,
            column: 99
          }
        }],
        line: 237
      },
      "70": {
        loc: {
          start: {
            line: 253,
            column: 37
          },
          end: {
            line: 253,
            column: 56
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 253,
            column: 49
          },
          end: {
            line: 253,
            column: 56
          }
        }],
        line: 253
      },
      "71": {
        loc: {
          start: {
            line: 254,
            column: 4
          },
          end: {
            line: 258,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 254,
            column: 4
          },
          end: {
            line: 258,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 254
      },
      "72": {
        loc: {
          start: {
            line: 260,
            column: 4
          },
          end: {
            line: 264,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 260,
            column: 4
          },
          end: {
            line: 264,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 260
      },
      "73": {
        loc: {
          start: {
            line: 270,
            column: 46
          },
          end: {
            line: 270,
            column: 58
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 270,
            column: 56
          },
          end: {
            line: 270,
            column: 58
          }
        }],
        line: 270
      },
      "74": {
        loc: {
          start: {
            line: 271,
            column: 22
          },
          end: {
            line: 271,
            column: 54
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 271,
            column: 22
          },
          end: {
            line: 271,
            column: 39
          }
        }, {
          start: {
            line: 271,
            column: 43
          },
          end: {
            line: 271,
            column: 54
          }
        }],
        line: 271
      },
      "75": {
        loc: {
          start: {
            line: 274,
            column: 4
          },
          end: {
            line: 277,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 274,
            column: 4
          },
          end: {
            line: 277,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 274
      },
      "76": {
        loc: {
          start: {
            line: 278,
            column: 4
          },
          end: {
            line: 280,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 278,
            column: 4
          },
          end: {
            line: 280,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 278
      },
      "77": {
        loc: {
          start: {
            line: 278,
            column: 8
          },
          end: {
            line: 278,
            column: 55
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 278,
            column: 8
          },
          end: {
            line: 278,
            column: 25
          }
        }, {
          start: {
            line: 278,
            column: 29
          },
          end: {
            line: 278,
            column: 55
          }
        }],
        line: 278
      },
      "78": {
        loc: {
          start: {
            line: 281,
            column: 4
          },
          end: {
            line: 286,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 281,
            column: 4
          },
          end: {
            line: 286,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 281
      },
      "79": {
        loc: {
          start: {
            line: 283,
            column: 8
          },
          end: {
            line: 285,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 283,
            column: 8
          },
          end: {
            line: 285,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 283
      },
      "80": {
        loc: {
          start: {
            line: 283,
            column: 12
          },
          end: {
            line: 283,
            column: 72
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 283,
            column: 12
          },
          end: {
            line: 283,
            column: 22
          }
        }, {
          start: {
            line: 283,
            column: 26
          },
          end: {
            line: 283,
            column: 72
          }
        }],
        line: 283
      },
      "81": {
        loc: {
          start: {
            line: 284,
            column: 230
          },
          end: {
            line: 284,
            column: 249
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 284,
            column: 230
          },
          end: {
            line: 284,
            column: 239
          }
        }, {
          start: {
            line: 284,
            column: 243
          },
          end: {
            line: 284,
            column: 249
          }
        }],
        line: 284
      },
      "82": {
        loc: {
          start: {
            line: 287,
            column: 11
          },
          end: {
            line: 287,
            column: 92
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 287,
            column: 31
          },
          end: {
            line: 287,
            column: 68
          }
        }, {
          start: {
            line: 287,
            column: 71
          },
          end: {
            line: 287,
            column: 92
          }
        }],
        line: 287
      },
      "83": {
        loc: {
          start: {
            line: 292,
            column: 51
          },
          end: {
            line: 292,
            column: 63
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 292,
            column: 61
          },
          end: {
            line: 292,
            column: 63
          }
        }],
        line: 292
      },
      "84": {
        loc: {
          start: {
            line: 293,
            column: 22
          },
          end: {
            line: 293,
            column: 59
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 293,
            column: 22
          },
          end: {
            line: 293,
            column: 39
          }
        }, {
          start: {
            line: 293,
            column: 43
          },
          end: {
            line: 293,
            column: 59
          }
        }],
        line: 293
      },
      "85": {
        loc: {
          start: {
            line: 296,
            column: 4
          },
          end: {
            line: 299,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 296,
            column: 4
          },
          end: {
            line: 299,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 296
      },
      "86": {
        loc: {
          start: {
            line: 300,
            column: 4
          },
          end: {
            line: 302,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 300,
            column: 4
          },
          end: {
            line: 302,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 300
      },
      "87": {
        loc: {
          start: {
            line: 300,
            column: 8
          },
          end: {
            line: 300,
            column: 60
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 300,
            column: 8
          },
          end: {
            line: 300,
            column: 25
          }
        }, {
          start: {
            line: 300,
            column: 29
          },
          end: {
            line: 300,
            column: 60
          }
        }],
        line: 300
      },
      "88": {
        loc: {
          start: {
            line: 303,
            column: 11
          },
          end: {
            line: 303,
            column: 92
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 303,
            column: 31
          },
          end: {
            line: 303,
            column: 68
          }
        }, {
          start: {
            line: 303,
            column: 71
          },
          end: {
            line: 303,
            column: 92
          }
        }],
        line: 303
      },
      "89": {
        loc: {
          start: {
            line: 308,
            column: 36
          },
          end: {
            line: 308,
            column: 54
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 308,
            column: 48
          },
          end: {
            line: 308,
            column: 54
          }
        }],
        line: 308
      },
      "90": {
        loc: {
          start: {
            line: 316,
            column: 4
          },
          end: {
            line: 318,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 316,
            column: 4
          },
          end: {
            line: 318,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 316
      },
      "91": {
        loc: {
          start: {
            line: 321,
            column: 4
          },
          end: {
            line: 323,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 321,
            column: 4
          },
          end: {
            line: 323,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 321
      },
      "92": {
        loc: {
          start: {
            line: 333,
            column: 39
          },
          end: {
            line: 333,
            column: 60
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 333,
            column: 51
          },
          end: {
            line: 333,
            column: 60
          }
        }],
        line: 333
      },
      "93": {
        loc: {
          start: {
            line: 334,
            column: 4
          },
          end: {
            line: 338,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 334,
            column: 4
          },
          end: {
            line: 338,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 334
      },
      "94": {
        loc: {
          start: {
            line: 340,
            column: 4
          },
          end: {
            line: 344,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 340,
            column: 4
          },
          end: {
            line: 344,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 340
      },
      "95": {
        loc: {
          start: {
            line: 350,
            column: 36
          },
          end: {
            line: 350,
            column: 54
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 350,
            column: 48
          },
          end: {
            line: 350,
            column: 54
          }
        }],
        line: 350
      },
      "96": {
        loc: {
          start: {
            line: 351,
            column: 4
          },
          end: {
            line: 355,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 351,
            column: 4
          },
          end: {
            line: 355,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 351
      },
      "97": {
        loc: {
          start: {
            line: 357,
            column: 4
          },
          end: {
            line: 361,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 357,
            column: 4
          },
          end: {
            line: 361,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 357
      },
      "98": {
        loc: {
          start: {
            line: 379,
            column: 33
          },
          end: {
            line: 379,
            column: 51
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 379,
            column: 45
          },
          end: {
            line: 379,
            column: 51
          }
        }],
        line: 379
      },
      "99": {
        loc: {
          start: {
            line: 394,
            column: 50
          },
          end: {
            line: 394,
            column: 68
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 394,
            column: 62
          },
          end: {
            line: 394,
            column: 68
          }
        }],
        line: 394
      },
      "100": {
        loc: {
          start: {
            line: 425,
            column: 8
          },
          end: {
            line: 427,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 425,
            column: 8
          },
          end: {
            line: 427,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 425
      },
      "101": {
        loc: {
          start: {
            line: 425,
            column: 12
          },
          end: {
            line: 425,
            column: 59
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 425,
            column: 12
          },
          end: {
            line: 425,
            column: 25
          }
        }, {
          start: {
            line: 425,
            column: 29
          },
          end: {
            line: 425,
            column: 59
          }
        }],
        line: 425
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0,
      "74": 0,
      "75": 0,
      "76": 0,
      "77": 0,
      "78": 0,
      "79": 0,
      "80": 0,
      "81": 0,
      "82": 0,
      "83": 0,
      "84": 0,
      "85": 0,
      "86": 0,
      "87": 0,
      "88": 0,
      "89": 0,
      "90": 0,
      "91": 0,
      "92": 0,
      "93": 0,
      "94": 0,
      "95": 0,
      "96": 0,
      "97": 0,
      "98": 0,
      "99": 0,
      "100": 0,
      "101": 0,
      "102": 0,
      "103": 0,
      "104": 0,
      "105": 0,
      "106": 0,
      "107": 0,
      "108": 0,
      "109": 0,
      "110": 0,
      "111": 0,
      "112": 0,
      "113": 0,
      "114": 0,
      "115": 0,
      "116": 0,
      "117": 0,
      "118": 0,
      "119": 0,
      "120": 0,
      "121": 0,
      "122": 0,
      "123": 0,
      "124": 0,
      "125": 0,
      "126": 0,
      "127": 0,
      "128": 0,
      "129": 0,
      "130": 0,
      "131": 0,
      "132": 0,
      "133": 0,
      "134": 0,
      "135": 0,
      "136": 0,
      "137": 0,
      "138": 0,
      "139": 0,
      "140": 0,
      "141": 0,
      "142": 0,
      "143": 0,
      "144": 0,
      "145": 0,
      "146": 0,
      "147": 0,
      "148": 0,
      "149": 0,
      "150": 0,
      "151": 0,
      "152": 0,
      "153": 0,
      "154": 0,
      "155": 0,
      "156": 0,
      "157": 0,
      "158": 0,
      "159": 0,
      "160": 0,
      "161": 0,
      "162": 0,
      "163": 0,
      "164": 0,
      "165": 0,
      "166": 0,
      "167": 0,
      "168": 0,
      "169": 0,
      "170": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0
    },
    b: {
      "0": [0],
      "1": [0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0],
      "9": [0, 0],
      "10": [0, 0],
      "11": [0, 0],
      "12": [0, 0],
      "13": [0, 0],
      "14": [0, 0],
      "15": [0, 0],
      "16": [0, 0],
      "17": [0, 0],
      "18": [0, 0],
      "19": [0, 0],
      "20": [0],
      "21": [0, 0],
      "22": [0, 0],
      "23": [0, 0],
      "24": [0, 0],
      "25": [0, 0],
      "26": [0, 0],
      "27": [0, 0],
      "28": [0, 0],
      "29": [0, 0],
      "30": [0, 0],
      "31": [0, 0],
      "32": [0, 0],
      "33": [0],
      "34": [0, 0],
      "35": [0],
      "36": [0, 0],
      "37": [0, 0],
      "38": [0, 0],
      "39": [0, 0],
      "40": [0, 0],
      "41": [0, 0],
      "42": [0, 0],
      "43": [0, 0],
      "44": [0, 0],
      "45": [0, 0],
      "46": [0, 0],
      "47": [0],
      "48": [0, 0],
      "49": [0, 0],
      "50": [0, 0],
      "51": [0, 0],
      "52": [0, 0],
      "53": [0, 0],
      "54": [0, 0],
      "55": [0, 0],
      "56": [0, 0],
      "57": [0, 0],
      "58": [0, 0],
      "59": [0, 0],
      "60": [0, 0],
      "61": [0, 0],
      "62": [0, 0],
      "63": [0],
      "64": [0, 0],
      "65": [0, 0],
      "66": [0, 0],
      "67": [0, 0],
      "68": [0, 0],
      "69": [0, 0, 0],
      "70": [0],
      "71": [0, 0],
      "72": [0, 0],
      "73": [0],
      "74": [0, 0],
      "75": [0, 0],
      "76": [0, 0],
      "77": [0, 0],
      "78": [0, 0],
      "79": [0, 0],
      "80": [0, 0],
      "81": [0, 0],
      "82": [0, 0],
      "83": [0],
      "84": [0, 0],
      "85": [0, 0],
      "86": [0, 0],
      "87": [0, 0],
      "88": [0, 0],
      "89": [0],
      "90": [0, 0],
      "91": [0, 0],
      "92": [0],
      "93": [0, 0],
      "94": [0, 0],
      "95": [0],
      "96": [0, 0],
      "97": [0, 0],
      "98": [0],
      "99": [0],
      "100": [0, 0],
      "101": [0, 0]
    },
    inputSourceMap: {
      file: "/home/mhugo/code/claude-code-flow/src/cli/utils/validation.ts",
      mappings: "AAAA;;;;;GAKG;AAGH,OAAO,EAAE,UAAU,EAAE,eAAe,EAAE,MAAM,kBAAkB,CAAC;AA4C/D;;GAEG;AACH,SAAS,qBAAqB,CAC5B,OAAe,EACf,IAAY,EACZ,IAAa,EACb,QAAc,EACd,MAAY;IAEZ,OAAO;QACL,OAAO;QACP,IAAI;QACJ,IAAI;QACJ,QAAQ;QACR,MAAM;KACP,CAAC;AACJ,CAAC;AAED;;GAEG;AACH,SAAS,uBAAuB,CAC9B,OAAe,EACf,IAAY,EACZ,IAAa,EACb,UAAmB;IAEnB,OAAO;QACL,OAAO;QACP,IAAI;QACJ,IAAI;QACJ,UAAU;KACX,CAAC;AACJ,CAAC;AAED;;GAEG;AACH,SAAS,mBAAmB;IAC1B,OAAO;QACL,KAAK,EAAE,IAAI;QACX,MAAM,EAAE,EAAE;QACV,QAAQ,EAAE,EAAE;KACb,CAAC;AACJ,CAAC;AAED;;GAEG;AACH,SAAS,mBAAmB,CAC1B,MAAyB,EACzB,WAAgC,EAAE;IAElC,OAAO;QACL,KAAK,EAAE,KAAK;QACZ,MAAM;QACN,QAAQ;KACT,CAAC;AACJ,CAAC;AAED;;GAEG;AACH,MAAM,UAAU,gBAAgB,CAC9B,KAAU,EACV,YAAoB,OAAO;IAE3B,IAAI,KAAK,KAAK,IAAI,IAAI,KAAK,KAAK,SAAS,EAAE,CAAC;QAC1C,OAAO,mBAAmB,CAAC;YACzB,qBAAqB,CACnB,GAAG,SAAS,cAAc,EAC1B,UAAU,EACV,SAAS,CAAC,WAAW,EAAE,EACvB,gBAAgB,EAChB,KAAK,CACN;SACF,CAAC,CAAC;IACL,CAAC;IAED,IAAI,OAAO,KAAK,KAAK,QAAQ,IAAI,KAAK,CAAC,IAAI,EAAE,KAAK,EAAE,EAAE,CAAC;QACrD,OAAO,mBAAmB,CAAC;YACzB,qBAAqB,CACnB,GAAG,SAAS,kBAAkB,EAC9B,cAAc,EACd,SAAS,CAAC,WAAW,EAAE,EACvB,kBAAkB,EAClB,KAAK,CACN;SACF,CAAC,CAAC;IACL,CAAC;IAED,IAAI,KAAK,CAAC,OAAO,CAAC,KAAK,CAAC,IAAI,KAAK,CAAC,MAAM,KAAK,CAAC,EAAE,CAAC;QAC/C,OAAO,mBAAmB,CAAC;YACzB,qBAAqB,CACnB,GAAG,SAAS,kBAAkB,EAC9B,aAAa,EACb,SAAS,CAAC,WAAW,EAAE,EACvB,iBAAiB,EACjB,KAAK,CACN;SACF,CAAC,CAAC;IACL,CAAC;IAED,OAAO,mBAAmB,EAAE,CAAC;AAC/B,CAAC;AAED;;GAEG;AACH,MAAM,UAAU,cAAc,CAC5B,KAAU,EACV,UAMI,EAAE;IAEN,MAAM,SAAS,GAAG,OAAO,CAAC,SAAS,IAAI,OAAO,CAAC;IAC/C,MAAM,MAAM,GAAsB,EAAE,CAAC;IACrC,MAAM,QAAQ,GAAwB,EAAE,CAAC;IAEzC,IAAI,OAAO,KAAK,KAAK,QAAQ,EAAE,CAAC;QAC9B,MAAM,CAAC,IAAI,CAAC,qBAAqB,CAC/B,GAAG,SAAS,mBAAmB,EAC/B,cAAc,EACd,SAAS,CAAC,WAAW,EAAE,EACvB,QAAQ,EACR,OAAO,KAAK,CACb,CAAC,CAAC;QACH,OAAO,mBAAmB,CAAC,MAAM,EAAE,QAAQ,CAAC,CAAC;IAC/C,CAAC;IAED,IAAI,CAAC,OAAO,CAAC,UAAU,IAAI,KAAK,CAAC,IAAI,EAAE,KAAK,EAAE,EAAE,CAAC;QAC/C,MAAM,CAAC,IAAI,CAAC,qBAAqB,CAC/B,GAAG,SAAS,kBAAkB,EAC9B,cAAc,EACd,SAAS,CAAC,WAAW,EAAE,EACvB,kBAAkB,EAClB,KAAK,CACN,CAAC,CAAC;IACL,CAAC;IAED,IAAI,OAAO,CAAC,SAAS,KAAK,SAAS,IAAI,KAAK,CAAC,MAAM,GAAG,OAAO,CAAC,SAAS,EAAE,CAAC;QACxE,MAAM,CAAC,IAAI,CAAC,qBAAqB,CAC/B,GAAG,SAAS,qBAAqB,OAAO,CAAC,SAAS,kBAAkB,EACpE,YAAY,EACZ,SAAS,CAAC,WAAW,EAAE,EACvB,MAAM,OAAO,CAAC,SAAS,aAAa,EACpC,GAAG,KAAK,CAAC,MAAM,aAAa,CAC7B,CAAC,CAAC;IACL,CAAC;IAED,IAAI,OAAO,CAAC,SAAS,KAAK,SAAS,IAAI,KAAK,CAAC,MAAM,GAAG,OAAO,CAAC,SAAS,EAAE,CAAC;QACxE,MAAM,CAAC,IAAI,CAAC,qBAAqB,CAC/B,GAAG,SAAS,oBAAoB,OAAO,CAAC,SAAS,kBAAkB,EACnE,YAAY,EACZ,SAAS,CAAC,WAAW,EAAE,EACvB,MAAM,OAAO,CAAC,SAAS,aAAa,EACpC,GAAG,KAAK,CAAC,MAAM,aAAa,CAC7B,CAAC,CAAC;IACL,CAAC;IAED,IAAI,OAAO,CAAC,OAAO,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,IAAI,CAAC,KAAK,CAAC,EAAE,CAAC;QACpD,MAAM,CAAC,IAAI,CAAC,qBAAqB,CAC/B,GAAG,SAAS,sCAAsC,EAClD,kBAAkB,EAClB,SAAS,CAAC,WAAW,EAAE,EACvB,OAAO,CAAC,OAAO,CAAC,QAAQ,EAAE,EAC1B,KAAK,CACN,CAAC,CAAC;IACL,CAAC;IAED,OAAO,MAAM,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC,mBAAmB,CAAC,MAAM,EAAE,QAAQ,CAAC,CAAC,CAAC,CAAC,mBAAmB,EAAE,CAAC;AAC3F,CAAC;AAED;;GAEG;AACH,MAAM,UAAU,cAAc,CAC5B,KAAU,EACV,UAMI,EAAE;IAEN,MAAM,SAAS,GAAG,OAAO,CAAC,SAAS,IAAI,OAAO,CAAC;IAC/C,MAAM,MAAM,GAAsB,EAAE,CAAC;IACrC,MAAM,QAAQ,GAAwB,EAAE,CAAC;IAEzC,IAAI,OAAO,KAAK,KAAK,QAAQ,IAAI,KAAK,CAAC,KAAK,CAAC,EAAE,CAAC;QAC9C,MAAM,CAAC,IAAI,CAAC,qBAAqB,CAC/B,GAAG,SAAS,yBAAyB,EACrC,cAAc,EACd,SAAS,CAAC,WAAW,EAAE,EACvB,QAAQ,EACR,OAAO,KAAK,CACb,CAAC,CAAC;QACH,OAAO,mBAAmB,CAAC,MAAM,EAAE,QAAQ,CAAC,CAAC;IAC/C,CAAC;IAED,IAAI,OAAO,CAAC,OAAO,IAAI,CAAC,MAAM,CAAC,SAAS,CAAC,KAAK,CAAC,EAAE,CAAC;QAChD,MAAM,CAAC,IAAI,CAAC,qBAAqB,CAC/B,GAAG,SAAS,qBAAqB,EACjC,aAAa,EACb,SAAS,CAAC,WAAW,EAAE,EACvB,SAAS,EACT,KAAK,CACN,CAAC,CAAC;IACL,CAAC;IAED,IAAI,OAAO,CAAC,QAAQ,IAAI,KAAK,IAAI,CAAC,EAAE,CAAC;QACnC,MAAM,CAAC,IAAI,CAAC,qBAAqB,CAC/B,GAAG,SAAS,mBAAmB,EAC/B,cAAc,EACd,SAAS,CAAC,WAAW,EAAE,EACvB,KAAK,EACL,KAAK,CACN,CAAC,CAAC;IACL,CAAC;IAED,IAAI,OAAO,CAAC,GAAG,KAAK,SAAS,IAAI,KAAK,GAAG,OAAO,CAAC,GAAG,EAAE,CAAC;QACrD,MAAM,CAAC,IAAI,CAAC,qBAAqB,CAC/B,GAAG,SAAS,qBAAqB,OAAO,CAAC,GAAG,EAAE,EAC9C,WAAW,EACX,SAAS,CAAC,WAAW,EAAE,EACvB,MAAM,OAAO,CAAC,GAAG,EAAE,EACnB,KAAK,CACN,CAAC,CAAC;IACL,CAAC;IAED,IAAI,OAAO,CAAC,GAAG,KAAK,SAAS,IAAI,KAAK,GAAG,OAAO,CAAC,GAAG,EAAE,CAAC;QACrD,MAAM,CAAC,IAAI,CAAC,qBAAqB,CAC/B,GAAG,SAAS,oBAAoB,OAAO,CAAC,GAAG,EAAE,EAC7C,WAAW,EACX,SAAS,CAAC,WAAW,EAAE,EACvB,MAAM,OAAO,CAAC,GAAG,EAAE,EACnB,KAAK,CACN,CAAC,CAAC;IACL,CAAC;IAED,OAAO,MAAM,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC,mBAAmB,CAAC,MAAM,EAAE,QAAQ,CAAC,CAAC,CAAC,CAAC,mBAAmB,EAAE,CAAC;AAC3F,CAAC;AAED;;GAEG;AACH,MAAM,UAAU,eAAe,CAC7B,KAAU,EACV,YAAoB,OAAO;IAE3B,IAAI,OAAO,KAAK,KAAK,SAAS,EAAE,CAAC;QAC/B,OAAO,mBAAmB,CAAC;YACzB,qBAAqB,CACnB,GAAG,SAAS,oBAAoB,EAChC,cAAc,EACd,SAAS,CAAC,WAAW,EAAE,EACvB,SAAS,EACT,OAAO,KAAK,CACb;SACF,CAAC,CAAC;IACL,CAAC;IAED,OAAO,mBAAmB,EAAE,CAAC;AAC/B,CAAC;AAED;;GAEG;AACH,MAAM,UAAU,aAAa,CAC3B,KAAU,EACV,UAKI,EAAE;IAEN,MAAM,SAAS,GAAG,OAAO,CAAC,SAAS,IAAI,OAAO,CAAC;IAC/C,MAAM,MAAM,GAAsB,EAAE,CAAC;IACrC,MAAM,QAAQ,GAAwB,EAAE,CAAC;IAEzC,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,KAAK,CAAC,EAAE,CAAC;QAC1B,MAAM,CAAC,IAAI,CAAC,qBAAqB,CAC/B,GAAG,SAAS,mBAAmB,EAC/B,cAAc,EACd,SAAS,CAAC,WAAW,EAAE,EACvB,OAAO,EACP,OAAO,KAAK,CACb,CAAC,CAAC;QACH,OAAO,mBAAmB,CAAC,MAAM,EAAE,QAAQ,CAAC,CAAC;IAC/C,CAAC;IAED,IAAI,OAAO,CAAC,SAAS,KAAK,SAAS,IAAI,KAAK,CAAC,MAAM,GAAG,OAAO,CAAC,SAAS,EAAE,CAAC;QACxE,MAAM,CAAC,IAAI,CAAC,qBAAqB,CAC/B,GAAG,SAAS,uBAAuB,OAAO,CAAC,SAAS,QAAQ,EAC5D,YAAY,EACZ,SAAS,CAAC,WAAW,EAAE,EACvB,MAAM,OAAO,CAAC,SAAS,QAAQ,EAC/B,GAAG,KAAK,CAAC,MAAM,QAAQ,CACxB,CAAC,CAAC;IACL,CAAC;IAED,IAAI,OAAO,CAAC,SAAS,KAAK,SAAS,IAAI,KAAK,CAAC,MAAM,GAAG,OAAO,CAAC,SAAS,EAAE,CAAC;QACxE,MAAM,CAAC,IAAI,CAAC,qBAAqB,CAC/B,GAAG,SAAS,sBAAsB,OAAO,CAAC,SAAS,QAAQ,EAC3D,YAAY,EACZ,SAAS,CAAC,WAAW,EAAE,EACvB,MAAM,OAAO,CAAC,SAAS,QAAQ,EAC/B,GAAG,KAAK,CAAC,MAAM,QAAQ,CACxB,CAAC,CAAC;IACL,CAAC;IAED,6CAA6C;IAC7C,IAAI,OAAO,CAAC,aAAa,EAAE,CAAC;QAC1B,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,KAAK,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE,CAAC;YACtC,MAAM,UAAU,GAAG,OAAO,CAAC,aAAa,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC;YACnD,IAAI,UAAU,YAAY,OAAO,EAAE,CAAC;gBAClC,QAAQ,CAAC,IAAI,CAAC,uBAAuB,CACnC,4EAA4E,EAC5E,kBAAkB,EAClB,GAAG,SAAS,CAAC,WAAW,EAAE,IAAI,CAAC,GAAG,EAClC,sCAAsC,CACvC,CAAC,CAAC;YACL,CAAC;iBAAM,CAAC;gBACN,MAAM,CAAC,IAAI,CAAC,GAAG,UAAU,CAAC,MAAM,CAAC,GAAG,CAAC,KAAK,CAAC,EAAE,CAAC,CAAC;oBAC7C,GAAG,KAAK;oBACR,IAAI,EAAE,GAAG,SAAS,CAAC,WAAW,EAAE,IAAI,CAAC,IAAI,KAAK,CAAC,IAAI,CAAC,CAAC,CAAC,GAAG,GAAG,KAAK,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,EAAE;iBAC9E,CAAC,CAAC,CAAC,CAAC;gBACL,QAAQ,CAAC,IAAI,CAAC,GAAG,UAAU,CAAC,QAAQ,CAAC,GAAG,CAAC,OAAO,CAAC,EAAE,CAAC,CAAC;oBACnD,GAAG,OAAO;oBACV,IAAI,EAAE,GAAG,SAAS,CAAC,WAAW,EAAE,IAAI,CAAC,IAAI,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,GAAG,GAAG,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,EAAE;iBAClF,CAAC,CAAC,CAAC,CAAC;YACP,CAAC;QACH,CAAC;IACH,CAAC;IAED,OAAO,MAAM,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC,mBAAmB,CAAC,MAAM,EAAE,QAAQ,CAAC,CAAC,CAAC,CAAC,mBAAmB,EAAE,CAAC;AAC3F,CAAC;AAED;;GAEG;AACH,MAAM,UAAU,cAAc,CAC5B,KAAU,EACV,UAKI,EAAE;IAEN,MAAM,SAAS,GAAG,OAAO,CAAC,SAAS,IAAI,OAAO,CAAC;IAC/C,MAAM,MAAM,GAAsB,EAAE,CAAC;IACrC,MAAM,QAAQ,GAAwB,EAAE,CAAC;IAEzC,IAAI,KAAK,KAAK,IAAI,EAAE,CAAC;QACnB,IAAI,CAAC,OAAO,CAAC,SAAS,EAAE,CAAC;YACvB,MAAM,CAAC,IAAI,CAAC,qBAAqB,CAC/B,GAAG,SAAS,iBAAiB,EAC7B,YAAY,EACZ,SAAS,CAAC,WAAW,EAAE,EACvB,QAAQ,EACR,IAAI,CACL,CAAC,CAAC;QACL,CAAC;QACD,OAAO,MAAM,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC,mBAAmB,CAAC,MAAM,EAAE,QAAQ,CAAC,CAAC,CAAC,CAAC,mBAAmB,EAAE,CAAC;IAC3F,CAAC;IAED,IAAI,OAAO,KAAK,KAAK,QAAQ,IAAI,KAAK,CAAC,OAAO,CAAC,KAAK,CAAC,EAAE,CAAC;QACtD,MAAM,CAAC,IAAI,CAAC,qBAAqB,CAC/B,GAAG,SAAS,oBAAoB,EAChC,cAAc,EACd,SAAS,CAAC,WAAW,EAAE,EACvB,QAAQ,EACR,KAAK,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,OAAO,KAAK,CAC9C,CAAC,CAAC;QACH,OAAO,mBAAmB,CAAC,MAAM,EAAE,QAAQ,CAAC,CAAC;IAC/C,CAAC;IAED,sBAAsB;IACtB,IAAI,OAAO,CAAC,YAAY,EAAE,CAAC;QACzB,KAAK,MAAM,GAAG,IAAI,OAAO,CAAC,YAAY,EAAE,CAAC;YACvC,IAAI,CAAC,CAAC,GAAG,IAAI,KAAK,CAAC,EAAE,CAAC;gBACpB,MAAM,CAAC,IAAI,CAAC,qBAAqB,CAC/B,GAAG,SAAS,kCAAkC,GAAG,GAAG,EACpD,kBAAkB,EAClB,GAAG,SAAS,CAAC,WAAW,EAAE,IAAI,GAAG,EAAE,EACnC,SAAS,EACT,SAAS,CACV,CAAC,CAAC;YACL,CAAC;QACH,CAAC;IACH,CAAC;IAED,qCAAqC;IACrC,IAAI,OAAO,CAAC,MAAM,EAAE,CAAC;QACnB,KAAK,MAAM,CAAC,GAAG,EAAE,SAAS,CAAC,IAAI,MAAM,CAAC,OAAO,CAAC,OAAO,CAAC,MAAM,CAAC,EAAE,CAAC;YAC9D,IAAI,GAAG,IAAI,KAAK,EAAE,CAAC;gBACjB,MAAM,cAAc,GAAG,SAAS,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC;gBAC7C,IAAI,cAAc,YAAY,OAAO,EAAE,CAAC;oBACtC,QAAQ,CAAC,IAAI,CAAC,uBAAuB,CACnC,kFAAkF,EAClF,kBAAkB,EAClB,GAAG,SAAS,CAAC,WAAW,EAAE,IAAI,GAAG,EAAE,EACnC,4CAA4C,CAC7C,CAAC,CAAC;gBACL,CAAC;qBAAM,CAAC;oBACN,MAAM,CAAC,IAAI,CAAC,GAAG,cAAc,CAAC,MAAM,CAAC,GAAG,CAAC,KAAK,CAAC,EAAE,CAAC,CAAC;wBACjD,GAAG,KAAK;wBACR,IAAI,EAAE,GAAG,SAAS,CAAC,WAAW,EAAE,IAAI,GAAG,GAAG,KAAK,CAAC,IAAI,CAAC,CAAC,CAAC,GAAG,GAAG,KAAK,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,EAAE;qBAC/E,CAAC,CAAC,CAAC,CAAC;oBACL,QAAQ,CAAC,IAAI,CAAC,GAAG,cAAc,CAAC,QAAQ,CAAC,GAAG,CAAC,OAAO,CAAC,EAAE,CAAC,CAAC;wBACvD,GAAG,OAAO;wBACV,IAAI,EAAE,GAAG,SAAS,CAAC,WAAW,EAAE,IAAI,GAAG,GAAG,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,GAAG,GAAG,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,EAAE;qBACnF,CAAC,CAAC,CAAC,CAAC;gBACP,CAAC;YACH,CAAC;QACH,CAAC;IACH,CAAC;IAED,OAAO,MAAM,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC,mBAAmB,CAAC,MAAM,EAAE,QAAQ,CAAC,CAAC,CAAC,CAAC,mBAAmB,EAAE,CAAC;AAC3F,CAAC;AAED;;GAEG;AACH,MAAM,UAAU,WAAW,CACzB,KAAU,EACV,UAII,EAAE;IAEN,MAAM,SAAS,GAAG,OAAO,CAAC,SAAS,IAAI,KAAK,CAAC;IAC7C,MAAM,SAAS,GAAG,OAAO,CAAC,SAAS,IAAI,CAAC,MAAM,EAAE,OAAO,CAAC,CAAC;IAEzD,IAAI,OAAO,KAAK,KAAK,QAAQ,EAAE,CAAC;QAC9B,OAAO,mBAAmB,CAAC;YACzB,qBAAqB,CACnB,GAAG,SAAS,mBAAmB,EAC/B,cAAc,EACd,SAAS,CAAC,WAAW,EAAE,EACvB,QAAQ,EACR,OAAO,KAAK,CACb;SACF,CAAC,CAAC;IACL,CAAC;IAED,IAAI,CAAC;QACH,MAAM,GAAG,GAAG,IAAI,GAAG,CAAC,KAAK,CAAC,CAAC;QAE3B,IAAI,CAAC,SAAS,CAAC,QAAQ,CAAC,GAAG,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC;YACnD,OAAO,mBAAmB,CAAC;gBACzB,qBAAqB,CACnB,GAAG,SAAS,6CAA6C,SAAS,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE,EAC/E,kBAAkB,EAClB,SAAS,CAAC,WAAW,EAAE,EACvB,SAAS,CAAC,IAAI,CAAC,KAAK,CAAC,EACrB,GAAG,CAAC,QAAQ,CACb;aACF,CAAC,CAAC;QACL,CAAC;QAED,IAAI,CAAC,OAAO,CAAC,UAAU,IAAI,CAAC,GAAG,CAAC,QAAQ,KAAK,WAAW,IAAI,GAAG,CAAC,QAAQ,CAAC,UAAU,CAAC,MAAM,CAAC,CAAC,EAAE,CAAC;YAC7F,OAAO,mBAAmB,CAAC;gBACzB,qBAAqB,CACnB,GAAG,SAAS,wBAAwB,EACpC,WAAW,EACX,SAAS,CAAC,WAAW,EAAE,EACvB,eAAe,EACf,GAAG,CAAC,QAAQ,CACb;aACF,CAAC,CAAC;QACL,CAAC;QAED,OAAO,mBAAmB,EAAE,CAAC;IAC/B,CAAC;IAAC,OAAO,KAAK,EAAE,CAAC;QACf,OAAO,mBAAmB,CAAC;YACzB,qBAAqB,CACnB,GAAG,SAAS,wBAAyB,KAAe,CAAC,OAAO,EAAE,EAC9D,aAAa,EACb,SAAS,CAAC,WAAW,EAAE,EACvB,WAAW,EACX,KAAK,CACN;SACF,CAAC,CAAC;IACL,CAAC;AACH,CAAC;AAED;;GAEG;AACH,MAAM,UAAU,aAAa,CAC3B,KAAU,EACV,YAAoB,OAAO;IAE3B,IAAI,OAAO,KAAK,KAAK,QAAQ,EAAE,CAAC;QAC9B,OAAO,mBAAmB,CAAC;YACzB,qBAAqB,CACnB,GAAG,SAAS,mBAAmB,EAC/B,cAAc,EACd,SAAS,CAAC,WAAW,EAAE,EACvB,QAAQ,EACR,OAAO,KAAK,CACb;SACF,CAAC,CAAC;IACL,CAAC;IAED,MAAM,UAAU,GAAG,4BAA4B,CAAC;IAEhD,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,KAAK,CAAC,EAAE,CAAC;QAC5B,OAAO,mBAAmB,CAAC;YACzB,qBAAqB,CACnB,GAAG,SAAS,+BAA+B,EAC3C,eAAe,EACf,SAAS,CAAC,WAAW,EAAE,EACvB,oBAAoB,EACpB,KAAK,CACN;SACF,CAAC,CAAC;IACL,CAAC;IAED,OAAO,mBAAmB,EAAE,CAAC;AAC/B,CAAC;AAED;;GAEG;AACH,MAAM,CAAC,KAAK,UAAU,gBAAgB,CACpC,KAAU,EACV,UAMI,EAAE;IAEN,MAAM,SAAS,GAAG,OAAO,CAAC,SAAS,IAAI,WAAW,CAAC;IACnD,MAAM,MAAM,GAAsB,EAAE,CAAC;IACrC,MAAM,QAAQ,GAAwB,EAAE,CAAC;IAEzC,IAAI,OAAO,KAAK,KAAK,QAAQ,EAAE,CAAC;QAC9B,MAAM,CAAC,IAAI,CAAC,qBAAqB,CAC/B,GAAG,SAAS,mBAAmB,EAC/B,cAAc,EACd,SAAS,CAAC,WAAW,EAAE,EACvB,QAAQ,EACR,OAAO,KAAK,CACb,CAAC,CAAC;QACH,OAAO,mBAAmB,CAAC,MAAM,EAAE,QAAQ,CAAC,CAAC;IAC/C,CAAC;IAED,IAAI,OAAO,CAAC,SAAS,IAAI,CAAC,CAAC,MAAM,UAAU,CAAC,KAAK,CAAC,CAAC,EAAE,CAAC;QACpD,MAAM,CAAC,IAAI,CAAC,qBAAqB,CAC/B,GAAG,SAAS,oBAAoB,KAAK,EAAE,EACvC,gBAAgB,EAChB,SAAS,CAAC,WAAW,EAAE,EACvB,eAAe,EACf,KAAK,CACN,CAAC,CAAC;IACL,CAAC;IAED,IAAI,OAAO,CAAC,iBAAiB,EAAE,CAAC;QAC9B,MAAM,SAAS,GAAG,KAAK,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,GAAG,EAAE,EAAE,WAAW,EAAE,CAAC;QACxD,IAAI,CAAC,SAAS,IAAI,CAAC,OAAO,CAAC,iBAAiB,CAAC,QAAQ,CAAC,SAAS,CAAC,EAAE,CAAC;YACjE,MAAM,CAAC,IAAI,CAAC,qBAAqB,CAC/B,GAAG,SAAS,+CAA+C,OAAO,CAAC,iBAAiB,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE,EACjG,mBAAmB,EACnB,SAAS,CAAC,WAAW,EAAE,EACvB,OAAO,CAAC,iBAAiB,CAAC,IAAI,CAAC,KAAK,CAAC,EACrC,SAAS,IAAI,MAAM,CACpB,CAAC,CAAC;QACL,CAAC;IACH,CAAC;IAED,OAAO,MAAM,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC,mBAAmB,CAAC,MAAM,EAAE,QAAQ,CAAC,CAAC,CAAC,CAAC,mBAAmB,EAAE,CAAC;AAC3F,CAAC;AAED;;GAEG;AACH,MAAM,CAAC,KAAK,UAAU,qBAAqB,CACzC,KAAU,EACV,UAII,EAAE;IAEN,MAAM,SAAS,GAAG,OAAO,CAAC,SAAS,IAAI,gBAAgB,CAAC;IACxD,MAAM,MAAM,GAAsB,EAAE,CAAC;IACrC,MAAM,QAAQ,GAAwB,EAAE,CAAC;IAEzC,IAAI,OAAO,KAAK,KAAK,QAAQ,EAAE,CAAC;QAC9B,MAAM,CAAC,IAAI,CAAC,qBAAqB,CAC/B,GAAG,SAAS,mBAAmB,EAC/B,cAAc,EACd,SAAS,CAAC,WAAW,EAAE,EACvB,QAAQ,EACR,OAAO,KAAK,CACb,CAAC,CAAC;QACH,OAAO,mBAAmB,CAAC,MAAM,EAAE,QAAQ,CAAC,CAAC;IAC/C,CAAC;IAED,IAAI,OAAO,CAAC,SAAS,IAAI,CAAC,CAAC,MAAM,eAAe,CAAC,KAAK,CAAC,CAAC,EAAE,CAAC;QACzD,MAAM,CAAC,IAAI,CAAC,qBAAqB,CAC/B,GAAG,SAAS,oBAAoB,KAAK,EAAE,EACvC,qBAAqB,EACrB,SAAS,CAAC,WAAW,EAAE,EACvB,oBAAoB,EACpB,KAAK,CACN,CAAC,CAAC;IACL,CAAC;IAED,OAAO,MAAM,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC,mBAAmB,CAAC,MAAM,EAAE,QAAQ,CAAC,CAAC,CAAC,CAAC,mBAAmB,EAAE,CAAC;AAC3F,CAAC;AAED;;GAEG;AACH,MAAM,UAAU,YAAY,CAC1B,KAAU,EACV,YAAoB,MAAM;IAE1B,MAAM,YAAY,GAAG,cAAc,CAAC,KAAK,EAAE;QACzC,SAAS;QACT,GAAG,EAAE,CAAC;QACN,GAAG,EAAE,KAAK;QACV,OAAO,EAAE,IAAI;QACb,QAAQ,EAAE,IAAI;KACf,CAAC,CAAC;IAEH,IAAI,CAAC,YAAY,CAAC,KAAK,EAAE,CAAC;QACxB,OAAO,YAAY,CAAC;IACtB,CAAC;IAED,mCAAmC;IACnC,MAAM,QAAQ,GAAwB,EAAE,CAAC;IACzC,IAAI,KAAK,GAAG,IAAI,EAAE,CAAC;QACjB,QAAQ,CAAC,IAAI,CAAC,uBAAuB,CACnC,GAAG,SAAS,IAAI,KAAK,4DAA4D,EACjF,iBAAiB,EACjB,SAAS,CAAC,WAAW,EAAE,EACvB,qDAAqD,CACtD,CAAC,CAAC;IACL,CAAC;IAED,OAAO;QACL,KAAK,EAAE,IAAI;QACX,MAAM,EAAE,EAAE;QACV,QAAQ;KACT,CAAC;AACJ,CAAC;AAED;;GAEG;AACH,MAAM,UAAU,eAAe,CAC7B,KAAU,EACV,YAAoB,SAAS;IAE7B,IAAI,OAAO,KAAK,KAAK,QAAQ,EAAE,CAAC;QAC9B,OAAO,mBAAmB,CAAC;YACzB,qBAAqB,CACnB,GAAG,SAAS,mBAAmB,EAC/B,cAAc,EACd,SAAS,CAAC,WAAW,EAAE,EACvB,QAAQ,EACR,OAAO,KAAK,CACb;SACF,CAAC,CAAC;IACL,CAAC;IAED,MAAM,WAAW,GAAG,qLAAqL,CAAC;IAE1M,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,KAAK,CAAC,EAAE,CAAC;QAC7B,OAAO,mBAAmB,CAAC;YACzB,qBAAqB,CACnB,GAAG,SAAS,gDAAgD,EAC5D,iBAAiB,EACjB,SAAS,CAAC,WAAW,EAAE,EACvB,yBAAyB,EACzB,KAAK,CACN;SACF,CAAC,CAAC;IACL,CAAC;IAED,OAAO,mBAAmB,EAAE,CAAC;AAC/B,CAAC;AAED;;GAEG;AACH,MAAM,UAAU,YAAY,CAC1B,KAAU,EACV,YAAoB,MAAM;IAE1B,IAAI,OAAO,KAAK,KAAK,QAAQ,EAAE,CAAC;QAC9B,OAAO,mBAAmB,CAAC;YACzB,qBAAqB,CACnB,GAAG,SAAS,mBAAmB,EAC/B,cAAc,EACd,SAAS,CAAC,WAAW,EAAE,EACvB,QAAQ,EACR,OAAO,KAAK,CACb;SACF,CAAC,CAAC;IACL,CAAC;IAED,MAAM,SAAS,GAAG,4EAA4E,CAAC;IAE/F,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,KAAK,CAAC,EAAE,CAAC;QAC3B,OAAO,mBAAmB,CAAC;YACzB,qBAAqB,CACnB,GAAG,SAAS,sBAAsB,EAClC,cAAc,EACd,SAAS,CAAC,WAAW,EAAE,EACvB,aAAa,EACb,KAAK,CACN;SACF,CAAC,CAAC;IACL,CAAC;IAED,OAAO,mBAAmB,EAAE,CAAC;AAC/B,CAAC;AAED;;GAEG;AACH,MAAM,UAAU,WAAW,CAAC,KAAa;IACvC,IAAI,CAAC;QACH,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;QAClB,OAAO,IAAI,CAAC;IACd,CAAC;IAAC,MAAM,CAAC;QACP,OAAO,KAAK,CAAC;IACf,CAAC;AACH,CAAC;AAED;;GAEG;AACH,MAAM,UAAU,SAAS,CACvB,KAAa,EACb,YAAoB,MAAM;IAE1B,IAAI,CAAC;QACH,MAAM,IAAI,GAAG,IAAI,CAAC,KAAK,CAAC,KAAK,CAAM,CAAC;QACpC,OAAO,EAAE,OAAO,EAAE,IAAI,EAAE,IAAI,EAAE,CAAC;IACjC,CAAC;IAAC,OAAO,KAAK,EAAE,CAAC;QACf,OAAO;YACL,OAAO,EAAE,KAAK;YACd,KAAK,EAAE,qBAAqB,CAC1B,GAAG,SAAS,uBAAwB,KAAe,CAAC,OAAO,EAAE,EAC7D,cAAc,EACd,SAAS,CAAC,WAAW,EAAE,EACvB,YAAY,EACZ,KAAK,CACN;SACF,CAAC;IACJ,CAAC;AACH,CAAC;AAED;;GAEG;AACH,MAAM,UAAU,kBAAkB,CAChC,KAAU,EACV,MAAyC,EACzC,YAAoB,MAAM;IAE1B,OAAO,cAAc,CAAC,KAAK,EAAE;QAC3B,SAAS;QACT,MAAM;KACP,CAAC,CAAC;AACL,CAAC;AAED;;GAEG;AACH,MAAM,UAAU,wBAAwB,CACtC,GAAG,OAA2B;IAE9B,MAAM,MAAM,GAAsB,EAAE,CAAC;IACrC,MAAM,QAAQ,GAAwB,EAAE,CAAC;IAEzC,KAAK,MAAM,MAAM,IAAI,OAAO,EAAE,CAAC;QAC7B,MAAM,CAAC,IAAI,CAAC,GAAG,MAAM,CAAC,MAAM,CAAC,CAAC;QAC9B,QAAQ,CAAC,IAAI,CAAC,GAAG,MAAM,CAAC,QAAQ,CAAC,CAAC;IACpC,CAAC;IAED,OAAO;QACL,KAAK,EAAE,MAAM,CAAC,MAAM,KAAK,CAAC;QAC1B,MAAM;QACN,QAAQ;KACT,CAAC;AACJ,CAAC;AAED;;GAEG;AACH,MAAM,CAAC,KAAK,UAAU,aAAa,CACjC,KAAU,EACV,UAA+B,EAC/B,OAA2B;IAE3B,MAAM,OAAO,GAAuB,EAAE,CAAC;IAEvC,KAAK,MAAM,SAAS,IAAI,UAAU,EAAE,CAAC;QACnC,MAAM,MAAM,GAAG,MAAM,SAAS,CAAC,KAAK,CAAC,CAAC;QACtC,OAAO,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;QAErB,8CAA8C;QAC9C,IAAI,CAAC,MAAM,CAAC,KAAK,IAAI,OAAO,EAAE,QAAQ,EAAE,WAAW,EAAE,CAAC;YACpD,MAAM;QACR,CAAC;IACH,CAAC;IAED,OAAO,wBAAwB,CAAC,GAAG,OAAO,CAAC,CAAC;AAC9C,CAAC",
      names: [],
      sources: ["/home/mhugo/code/claude-code-flow/src/cli/utils/validation.ts"],
      sourcesContent: ["/**\n * Validation Utilities\n * \n * Provides input validation functions with comprehensive error handling and type safety.\n * Supports common validation patterns and custom validation rules.\n */\n\nimport { ValidationResult, ValidationError, ValidationWarning } from '../types/index.js';\nimport { fileExists, directoryExists } from './file-system.js';\n\n/**\n * Validation rule function type\n */\nexport type ValidatorFunction<T = any> = (value: T) => ValidationResult | Promise<ValidationResult>;\n\n/**\n * Validation rule configuration\n */\nexport interface ValidationRule<T = any> {\n  /** Rule name */\n  name: string;\n  \n  /** Validation function */\n  validator: ValidatorFunction<T>;\n  \n  /** Error message template */\n  message?: string;\n  \n  /** Whether this rule is required */\n  required?: boolean;\n  \n  /** Rule priority (higher numbers run first) */\n  priority?: number;\n}\n\n/**\n * Validation context with metadata\n */\nexport interface ValidationContext {\n  /** Field path being validated */\n  path: string;\n  \n  /** Parent object being validated */\n  parent?: any;\n  \n  /** Root object being validated */\n  root?: any;\n  \n  /** Additional context data */\n  metadata?: Record<string, any>;\n}\n\n/**\n * Create a validation error\n */\nfunction createValidationError(\n  message: string,\n  code: string,\n  path?: string,\n  expected?: any,\n  actual?: any\n): ValidationError {\n  return {\n    message,\n    code,\n    path,\n    expected,\n    actual,\n  };\n}\n\n/**\n * Create a validation warning\n */\nfunction createValidationWarning(\n  message: string,\n  code: string,\n  path?: string,\n  suggestion?: string\n): ValidationWarning {\n  return {\n    message,\n    code,\n    path,\n    suggestion,\n  };\n}\n\n/**\n * Create a successful validation result\n */\nfunction createSuccessResult(): ValidationResult {\n  return {\n    valid: true,\n    errors: [],\n    warnings: [],\n  };\n}\n\n/**\n * Create a failed validation result\n */\nfunction createFailureResult(\n  errors: ValidationError[],\n  warnings: ValidationWarning[] = []\n): ValidationResult {\n  return {\n    valid: false,\n    errors,\n    warnings,\n  };\n}\n\n/**\n * Validate that a value is required (not null, undefined, or empty)\n */\nexport function validateRequired(\n  value: any,\n  fieldName: string = 'Value'\n): ValidationResult {\n  if (value === null || value === undefined) {\n    return createFailureResult([\n      createValidationError(\n        `${fieldName} is required`,\n        'REQUIRED',\n        fieldName.toLowerCase(),\n        'non-null value',\n        value\n      ),\n    ]);\n  }\n  \n  if (typeof value === 'string' && value.trim() === '') {\n    return createFailureResult([\n      createValidationError(\n        `${fieldName} cannot be empty`,\n        'EMPTY_STRING',\n        fieldName.toLowerCase(),\n        'non-empty string',\n        value\n      ),\n    ]);\n  }\n  \n  if (Array.isArray(value) && value.length === 0) {\n    return createFailureResult([\n      createValidationError(\n        `${fieldName} cannot be empty`,\n        'EMPTY_ARRAY',\n        fieldName.toLowerCase(),\n        'non-empty array',\n        value\n      ),\n    ]);\n  }\n  \n  return createSuccessResult();\n}\n\n/**\n * Validate that a value is a string with optional constraints\n */\nexport function validateString(\n  value: any,\n  options: {\n    fieldName?: string;\n    minLength?: number;\n    maxLength?: number;\n    pattern?: RegExp;\n    allowEmpty?: boolean;\n  } = {}\n): ValidationResult {\n  const fieldName = options.fieldName || 'Value';\n  const errors: ValidationError[] = [];\n  const warnings: ValidationWarning[] = [];\n  \n  if (typeof value !== 'string') {\n    errors.push(createValidationError(\n      `${fieldName} must be a string`,\n      'INVALID_TYPE',\n      fieldName.toLowerCase(),\n      'string',\n      typeof value\n    ));\n    return createFailureResult(errors, warnings);\n  }\n  \n  if (!options.allowEmpty && value.trim() === '') {\n    errors.push(createValidationError(\n      `${fieldName} cannot be empty`,\n      'EMPTY_STRING',\n      fieldName.toLowerCase(),\n      'non-empty string',\n      value\n    ));\n  }\n  \n  if (options.minLength !== undefined && value.length < options.minLength) {\n    errors.push(createValidationError(\n      `${fieldName} must be at least ${options.minLength} characters long`,\n      'MIN_LENGTH',\n      fieldName.toLowerCase(),\n      `>= ${options.minLength} characters`,\n      `${value.length} characters`\n    ));\n  }\n  \n  if (options.maxLength !== undefined && value.length > options.maxLength) {\n    errors.push(createValidationError(\n      `${fieldName} must be at most ${options.maxLength} characters long`,\n      'MAX_LENGTH',\n      fieldName.toLowerCase(),\n      `<= ${options.maxLength} characters`,\n      `${value.length} characters`\n    ));\n  }\n  \n  if (options.pattern && !options.pattern.test(value)) {\n    errors.push(createValidationError(\n      `${fieldName} does not match the required pattern`,\n      'PATTERN_MISMATCH',\n      fieldName.toLowerCase(),\n      options.pattern.toString(),\n      value\n    ));\n  }\n  \n  return errors.length > 0 ? createFailureResult(errors, warnings) : createSuccessResult();\n}\n\n/**\n * Validate that a value is a number with optional constraints\n */\nexport function validateNumber(\n  value: any,\n  options: {\n    fieldName?: string;\n    min?: number;\n    max?: number;\n    integer?: boolean;\n    positive?: boolean;\n  } = {}\n): ValidationResult {\n  const fieldName = options.fieldName || 'Value';\n  const errors: ValidationError[] = [];\n  const warnings: ValidationWarning[] = [];\n  \n  if (typeof value !== 'number' || isNaN(value)) {\n    errors.push(createValidationError(\n      `${fieldName} must be a valid number`,\n      'INVALID_TYPE',\n      fieldName.toLowerCase(),\n      'number',\n      typeof value\n    ));\n    return createFailureResult(errors, warnings);\n  }\n  \n  if (options.integer && !Number.isInteger(value)) {\n    errors.push(createValidationError(\n      `${fieldName} must be an integer`,\n      'NOT_INTEGER',\n      fieldName.toLowerCase(),\n      'integer',\n      value\n    ));\n  }\n  \n  if (options.positive && value <= 0) {\n    errors.push(createValidationError(\n      `${fieldName} must be positive`,\n      'NOT_POSITIVE',\n      fieldName.toLowerCase(),\n      '> 0',\n      value\n    ));\n  }\n  \n  if (options.min !== undefined && value < options.min) {\n    errors.push(createValidationError(\n      `${fieldName} must be at least ${options.min}`,\n      'MIN_VALUE',\n      fieldName.toLowerCase(),\n      `>= ${options.min}`,\n      value\n    ));\n  }\n  \n  if (options.max !== undefined && value > options.max) {\n    errors.push(createValidationError(\n      `${fieldName} must be at most ${options.max}`,\n      'MAX_VALUE',\n      fieldName.toLowerCase(),\n      `<= ${options.max}`,\n      value\n    ));\n  }\n  \n  return errors.length > 0 ? createFailureResult(errors, warnings) : createSuccessResult();\n}\n\n/**\n * Validate that a value is a boolean\n */\nexport function validateBoolean(\n  value: any,\n  fieldName: string = 'Value'\n): ValidationResult {\n  if (typeof value !== 'boolean') {\n    return createFailureResult([\n      createValidationError(\n        `${fieldName} must be a boolean`,\n        'INVALID_TYPE',\n        fieldName.toLowerCase(),\n        'boolean',\n        typeof value\n      ),\n    ]);\n  }\n  \n  return createSuccessResult();\n}\n\n/**\n * Validate that a value is an array with optional constraints\n */\nexport function validateArray(\n  value: any,\n  options: {\n    fieldName?: string;\n    minLength?: number;\n    maxLength?: number;\n    itemValidator?: ValidatorFunction;\n  } = {}\n): ValidationResult {\n  const fieldName = options.fieldName || 'Value';\n  const errors: ValidationError[] = [];\n  const warnings: ValidationWarning[] = [];\n  \n  if (!Array.isArray(value)) {\n    errors.push(createValidationError(\n      `${fieldName} must be an array`,\n      'INVALID_TYPE',\n      fieldName.toLowerCase(),\n      'array',\n      typeof value\n    ));\n    return createFailureResult(errors, warnings);\n  }\n  \n  if (options.minLength !== undefined && value.length < options.minLength) {\n    errors.push(createValidationError(\n      `${fieldName} must have at least ${options.minLength} items`,\n      'MIN_LENGTH',\n      fieldName.toLowerCase(),\n      `>= ${options.minLength} items`,\n      `${value.length} items`\n    ));\n  }\n  \n  if (options.maxLength !== undefined && value.length > options.maxLength) {\n    errors.push(createValidationError(\n      `${fieldName} must have at most ${options.maxLength} items`,\n      'MAX_LENGTH',\n      fieldName.toLowerCase(),\n      `<= ${options.maxLength} items`,\n      `${value.length} items`\n    ));\n  }\n  \n  // Validate array items if validator provided\n  if (options.itemValidator) {\n    for (let i = 0; i < value.length; i++) {\n      const itemResult = options.itemValidator(value[i]);\n      if (itemResult instanceof Promise) {\n        warnings.push(createValidationWarning(\n          'Async validation of array items is not supported in synchronous validation',\n          'ASYNC_VALIDATION',\n          `${fieldName.toLowerCase()}[${i}]`,\n          'Use async validation for array items'\n        ));\n      } else {\n        errors.push(...itemResult.errors.map(error => ({\n          ...error,\n          path: `${fieldName.toLowerCase()}[${i}]${error.path ? '.' + error.path : ''}`,\n        })));\n        warnings.push(...itemResult.warnings.map(warning => ({\n          ...warning,\n          path: `${fieldName.toLowerCase()}[${i}]${warning.path ? '.' + warning.path : ''}`,\n        })));\n      }\n    }\n  }\n  \n  return errors.length > 0 ? createFailureResult(errors, warnings) : createSuccessResult();\n}\n\n/**\n * Validate that a value is an object with optional constraints\n */\nexport function validateObject(\n  value: any,\n  options: {\n    fieldName?: string;\n    allowNull?: boolean;\n    requiredKeys?: string[];\n    schema?: Record<string, ValidatorFunction>;\n  } = {}\n): ValidationResult {\n  const fieldName = options.fieldName || 'Value';\n  const errors: ValidationError[] = [];\n  const warnings: ValidationWarning[] = [];\n  \n  if (value === null) {\n    if (!options.allowNull) {\n      errors.push(createValidationError(\n        `${fieldName} cannot be null`,\n        'NULL_VALUE',\n        fieldName.toLowerCase(),\n        'object',\n        null\n      ));\n    }\n    return errors.length > 0 ? createFailureResult(errors, warnings) : createSuccessResult();\n  }\n  \n  if (typeof value !== 'object' || Array.isArray(value)) {\n    errors.push(createValidationError(\n      `${fieldName} must be an object`,\n      'INVALID_TYPE',\n      fieldName.toLowerCase(),\n      'object',\n      Array.isArray(value) ? 'array' : typeof value\n    ));\n    return createFailureResult(errors, warnings);\n  }\n  \n  // Check required keys\n  if (options.requiredKeys) {\n    for (const key of options.requiredKeys) {\n      if (!(key in value)) {\n        errors.push(createValidationError(\n          `${fieldName} is missing required property \"${key}\"`,\n          'MISSING_PROPERTY',\n          `${fieldName.toLowerCase()}.${key}`,\n          'present',\n          'missing'\n        ));\n      }\n    }\n  }\n  \n  // Validate properties against schema\n  if (options.schema) {\n    for (const [key, validator] of Object.entries(options.schema)) {\n      if (key in value) {\n        const propertyResult = validator(value[key]);\n        if (propertyResult instanceof Promise) {\n          warnings.push(createValidationWarning(\n            'Async validation of object properties is not supported in synchronous validation',\n            'ASYNC_VALIDATION',\n            `${fieldName.toLowerCase()}.${key}`,\n            'Use async validation for object properties'\n          ));\n        } else {\n          errors.push(...propertyResult.errors.map(error => ({\n            ...error,\n            path: `${fieldName.toLowerCase()}.${key}${error.path ? '.' + error.path : ''}`,\n          })));\n          warnings.push(...propertyResult.warnings.map(warning => ({\n            ...warning,\n            path: `${fieldName.toLowerCase()}.${key}${warning.path ? '.' + warning.path : ''}`,\n          })));\n        }\n      }\n    }\n  }\n  \n  return errors.length > 0 ? createFailureResult(errors, warnings) : createSuccessResult();\n}\n\n/**\n * Validate that a value is a valid URL\n */\nexport function validateUrl(\n  value: any,\n  options: {\n    fieldName?: string;\n    protocols?: string[];\n    allowLocal?: boolean;\n  } = {}\n): ValidationResult {\n  const fieldName = options.fieldName || 'URL';\n  const protocols = options.protocols || ['http', 'https'];\n  \n  if (typeof value !== 'string') {\n    return createFailureResult([\n      createValidationError(\n        `${fieldName} must be a string`,\n        'INVALID_TYPE',\n        fieldName.toLowerCase(),\n        'string',\n        typeof value\n      ),\n    ]);\n  }\n  \n  try {\n    const url = new URL(value);\n    \n    if (!protocols.includes(url.protocol.slice(0, -1))) {\n      return createFailureResult([\n        createValidationError(\n          `${fieldName} must use one of the following protocols: ${protocols.join(', ')}`,\n          'INVALID_PROTOCOL',\n          fieldName.toLowerCase(),\n          protocols.join(' | '),\n          url.protocol\n        ),\n      ]);\n    }\n    \n    if (!options.allowLocal && (url.hostname === 'localhost' || url.hostname.startsWith('127.'))) {\n      return createFailureResult([\n        createValidationError(\n          `${fieldName} cannot be a local URL`,\n          'LOCAL_URL',\n          fieldName.toLowerCase(),\n          'non-local URL',\n          url.hostname\n        ),\n      ]);\n    }\n    \n    return createSuccessResult();\n  } catch (error) {\n    return createFailureResult([\n      createValidationError(\n        `${fieldName} is not a valid URL: ${(error as Error).message}`,\n        'INVALID_URL',\n        fieldName.toLowerCase(),\n        'valid URL',\n        value\n      ),\n    ]);\n  }\n}\n\n/**\n * Validate that a value is a valid email address\n */\nexport function validateEmail(\n  value: any,\n  fieldName: string = 'Email'\n): ValidationResult {\n  if (typeof value !== 'string') {\n    return createFailureResult([\n      createValidationError(\n        `${fieldName} must be a string`,\n        'INVALID_TYPE',\n        fieldName.toLowerCase(),\n        'string',\n        typeof value\n      ),\n    ]);\n  }\n  \n  const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n  \n  if (!emailRegex.test(value)) {\n    return createFailureResult([\n      createValidationError(\n        `${fieldName} is not a valid email address`,\n        'INVALID_EMAIL',\n        fieldName.toLowerCase(),\n        'valid email format',\n        value\n      ),\n    ]);\n  }\n  \n  return createSuccessResult();\n}\n\n/**\n * Validate that a value is a valid file path\n */\nexport async function validateFilePath(\n  value: any,\n  options: {\n    fieldName?: string;\n    mustExist?: boolean;\n    mustBeReadable?: boolean;\n    mustBeWritable?: boolean;\n    allowedExtensions?: string[];\n  } = {}\n): Promise<ValidationResult> {\n  const fieldName = options.fieldName || 'File path';\n  const errors: ValidationError[] = [];\n  const warnings: ValidationWarning[] = [];\n  \n  if (typeof value !== 'string') {\n    errors.push(createValidationError(\n      `${fieldName} must be a string`,\n      'INVALID_TYPE',\n      fieldName.toLowerCase(),\n      'string',\n      typeof value\n    ));\n    return createFailureResult(errors, warnings);\n  }\n  \n  if (options.mustExist && !(await fileExists(value))) {\n    errors.push(createValidationError(\n      `${fieldName} does not exist: ${value}`,\n      'FILE_NOT_FOUND',\n      fieldName.toLowerCase(),\n      'existing file',\n      value\n    ));\n  }\n  \n  if (options.allowedExtensions) {\n    const extension = value.split('.').pop()?.toLowerCase();\n    if (!extension || !options.allowedExtensions.includes(extension)) {\n      errors.push(createValidationError(\n        `${fieldName} must have one of the following extensions: ${options.allowedExtensions.join(', ')}`,\n        'INVALID_EXTENSION',\n        fieldName.toLowerCase(),\n        options.allowedExtensions.join(' | '),\n        extension || 'none'\n      ));\n    }\n  }\n  \n  return errors.length > 0 ? createFailureResult(errors, warnings) : createSuccessResult();\n}\n\n/**\n * Validate that a value is a valid directory path\n */\nexport async function validateDirectoryPath(\n  value: any,\n  options: {\n    fieldName?: string;\n    mustExist?: boolean;\n    mustBeWritable?: boolean;\n  } = {}\n): Promise<ValidationResult> {\n  const fieldName = options.fieldName || 'Directory path';\n  const errors: ValidationError[] = [];\n  const warnings: ValidationWarning[] = [];\n  \n  if (typeof value !== 'string') {\n    errors.push(createValidationError(\n      `${fieldName} must be a string`,\n      'INVALID_TYPE',\n      fieldName.toLowerCase(),\n      'string',\n      typeof value\n    ));\n    return createFailureResult(errors, warnings);\n  }\n  \n  if (options.mustExist && !(await directoryExists(value))) {\n    errors.push(createValidationError(\n      `${fieldName} does not exist: ${value}`,\n      'DIRECTORY_NOT_FOUND',\n      fieldName.toLowerCase(),\n      'existing directory',\n      value\n    ));\n  }\n  \n  return errors.length > 0 ? createFailureResult(errors, warnings) : createSuccessResult();\n}\n\n/**\n * Validate that a value is a valid port number\n */\nexport function validatePort(\n  value: any,\n  fieldName: string = 'Port'\n): ValidationResult {\n  const numberResult = validateNumber(value, {\n    fieldName,\n    min: 1,\n    max: 65535,\n    integer: true,\n    positive: true,\n  });\n  \n  if (!numberResult.valid) {\n    return numberResult;\n  }\n  \n  // Add warning for well-known ports\n  const warnings: ValidationWarning[] = [];\n  if (value < 1024) {\n    warnings.push(createValidationWarning(\n      `${fieldName} ${value} is a well-known port that may require elevated privileges`,\n      'WELL_KNOWN_PORT',\n      fieldName.toLowerCase(),\n      'Consider using a port >= 1024 for user applications'\n    ));\n  }\n  \n  return {\n    valid: true,\n    errors: [],\n    warnings,\n  };\n}\n\n/**\n * Validate that a value is a valid semantic version\n */\nexport function validateVersion(\n  value: any,\n  fieldName: string = 'Version'\n): ValidationResult {\n  if (typeof value !== 'string') {\n    return createFailureResult([\n      createValidationError(\n        `${fieldName} must be a string`,\n        'INVALID_TYPE',\n        fieldName.toLowerCase(),\n        'string',\n        typeof value\n      ),\n    ]);\n  }\n  \n  const semverRegex = /^(0|[1-9]\\d*)\\.(0|[1-9]\\d*)\\.(0|[1-9]\\d*)(?:-((?:0|[1-9]\\d*|\\d*[a-zA-Z-][0-9a-zA-Z-]*)(?:\\.(?:0|[1-9]\\d*|\\d*[a-zA-Z-][0-9a-zA-Z-]*))*))?(?:\\+([0-9a-zA-Z-]+(?:\\.[0-9a-zA-Z-]+)*))?$/;\n  \n  if (!semverRegex.test(value)) {\n    return createFailureResult([\n      createValidationError(\n        `${fieldName} is not a valid semantic version (e.g., 1.0.0)`,\n        'INVALID_VERSION',\n        fieldName.toLowerCase(),\n        'semantic version format',\n        value\n      ),\n    ]);\n  }\n  \n  return createSuccessResult();\n}\n\n/**\n * Validate that a value is a valid UUID\n */\nexport function validateUuid(\n  value: any,\n  fieldName: string = 'UUID'\n): ValidationResult {\n  if (typeof value !== 'string') {\n    return createFailureResult([\n      createValidationError(\n        `${fieldName} must be a string`,\n        'INVALID_TYPE',\n        fieldName.toLowerCase(),\n        'string',\n        typeof value\n      ),\n    ]);\n  }\n  \n  const uuidRegex = /^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/i;\n  \n  if (!uuidRegex.test(value)) {\n    return createFailureResult([\n      createValidationError(\n        `${fieldName} is not a valid UUID`,\n        'INVALID_UUID',\n        fieldName.toLowerCase(),\n        'UUID format',\n        value\n      ),\n    ]);\n  }\n  \n  return createSuccessResult();\n}\n\n/**\n * Check if a string is valid JSON\n */\nexport function isValidJson(value: string): boolean {\n  try {\n    JSON.parse(value);\n    return true;\n  } catch {\n    return false;\n  }\n}\n\n/**\n * Parse JSON with validation\n */\nexport function parseJson<T = any>(\n  value: string,\n  fieldName: string = 'JSON'\n): { success: true; data: T } | { success: false; error: ValidationError } {\n  try {\n    const data = JSON.parse(value) as T;\n    return { success: true, data };\n  } catch (error) {\n    return {\n      success: false,\n      error: createValidationError(\n        `${fieldName} is not valid JSON: ${(error as Error).message}`,\n        'INVALID_JSON',\n        fieldName.toLowerCase(),\n        'valid JSON',\n        value\n      ),\n    };\n  }\n}\n\n/**\n * Validate JSON against a schema (basic implementation)\n */\nexport function validateJsonSchema(\n  value: any,\n  schema: Record<string, ValidatorFunction>,\n  fieldName: string = 'JSON'\n): ValidationResult {\n  return validateObject(value, {\n    fieldName,\n    schema,\n  });\n}\n\n/**\n * Combine multiple validation results\n */\nexport function combineValidationResults(\n  ...results: ValidationResult[]\n): ValidationResult {\n  const errors: ValidationError[] = [];\n  const warnings: ValidationWarning[] = [];\n  \n  for (const result of results) {\n    errors.push(...result.errors);\n    warnings.push(...result.warnings);\n  }\n  \n  return {\n    valid: errors.length === 0,\n    errors,\n    warnings,\n  };\n}\n\n/**\n * Run multiple validators in sequence\n */\nexport async function runValidators(\n  value: any,\n  validators: ValidatorFunction[],\n  context?: ValidationContext\n): Promise<ValidationResult> {\n  const results: ValidationResult[] = [];\n  \n  for (const validator of validators) {\n    const result = await validator(value);\n    results.push(result);\n    \n    // Stop on first error if context specifies it\n    if (!result.valid && context?.metadata?.stopOnError) {\n      break;\n    }\n  }\n  \n  return combineValidationResults(...results);\n}\n"],
      version: 3
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "8a30af8f003baaaf1382495350af24753b076eb8"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_9ra591xvh = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_9ra591xvh();
/**
 * Validation Utilities
 *
 * Provides input validation functions with comprehensive error handling and type safety.
 * Supports common validation patterns and custom validation rules.
 */
import { fileExists, directoryExists } from './file-system.js';
/**
 * Create a validation error
 */
function createValidationError(message, code, path, expected, actual) {
  /* istanbul ignore next */
  cov_9ra591xvh().f[0]++;
  cov_9ra591xvh().s[0]++;
  return {
    message,
    code,
    path,
    expected,
    actual
  };
}
/**
 * Create a validation warning
 */
function createValidationWarning(message, code, path, suggestion) {
  /* istanbul ignore next */
  cov_9ra591xvh().f[1]++;
  cov_9ra591xvh().s[1]++;
  return {
    message,
    code,
    path,
    suggestion
  };
}
/**
 * Create a successful validation result
 */
function createSuccessResult() {
  /* istanbul ignore next */
  cov_9ra591xvh().f[2]++;
  cov_9ra591xvh().s[2]++;
  return {
    valid: true,
    errors: [],
    warnings: []
  };
}
/**
 * Create a failed validation result
 */
function createFailureResult(errors, warnings =
/* istanbul ignore next */
(cov_9ra591xvh().b[0][0]++, [])) {
  /* istanbul ignore next */
  cov_9ra591xvh().f[3]++;
  cov_9ra591xvh().s[3]++;
  return {
    valid: false,
    errors,
    warnings
  };
}
/**
 * Validate that a value is required (not null, undefined, or empty)
 */
export function validateRequired(value, fieldName =
/* istanbul ignore next */
(cov_9ra591xvh().b[1][0]++, 'Value')) {
  /* istanbul ignore next */
  cov_9ra591xvh().f[4]++;
  cov_9ra591xvh().s[4]++;
  if (
  /* istanbul ignore next */
  (cov_9ra591xvh().b[3][0]++, value === null) ||
  /* istanbul ignore next */
  (cov_9ra591xvh().b[3][1]++, value === undefined)) {
    /* istanbul ignore next */
    cov_9ra591xvh().b[2][0]++;
    cov_9ra591xvh().s[5]++;
    return createFailureResult([createValidationError(`${fieldName} is required`, 'REQUIRED', fieldName.toLowerCase(), 'non-null value', value)]);
  } else
  /* istanbul ignore next */
  {
    cov_9ra591xvh().b[2][1]++;
  }
  cov_9ra591xvh().s[6]++;
  if (
  /* istanbul ignore next */
  (cov_9ra591xvh().b[5][0]++, typeof value === 'string') &&
  /* istanbul ignore next */
  (cov_9ra591xvh().b[5][1]++, value.trim() === '')) {
    /* istanbul ignore next */
    cov_9ra591xvh().b[4][0]++;
    cov_9ra591xvh().s[7]++;
    return createFailureResult([createValidationError(`${fieldName} cannot be empty`, 'EMPTY_STRING', fieldName.toLowerCase(), 'non-empty string', value)]);
  } else
  /* istanbul ignore next */
  {
    cov_9ra591xvh().b[4][1]++;
  }
  cov_9ra591xvh().s[8]++;
  if (
  /* istanbul ignore next */
  (cov_9ra591xvh().b[7][0]++, Array.isArray(value)) &&
  /* istanbul ignore next */
  (cov_9ra591xvh().b[7][1]++, value.length === 0)) {
    /* istanbul ignore next */
    cov_9ra591xvh().b[6][0]++;
    cov_9ra591xvh().s[9]++;
    return createFailureResult([createValidationError(`${fieldName} cannot be empty`, 'EMPTY_ARRAY', fieldName.toLowerCase(), 'non-empty array', value)]);
  } else
  /* istanbul ignore next */
  {
    cov_9ra591xvh().b[6][1]++;
  }
  cov_9ra591xvh().s[10]++;
  return createSuccessResult();
}
/**
 * Validate that a value is a string with optional constraints
 */
export function validateString(value, options =
/* istanbul ignore next */
(cov_9ra591xvh().b[8][0]++, {})) {
  /* istanbul ignore next */
  cov_9ra591xvh().f[5]++;
  const fieldName =
  /* istanbul ignore next */
  (cov_9ra591xvh().s[11]++,
  /* istanbul ignore next */
  (cov_9ra591xvh().b[9][0]++, options.fieldName) ||
  /* istanbul ignore next */
  (cov_9ra591xvh().b[9][1]++, 'Value'));
  const errors =
  /* istanbul ignore next */
  (cov_9ra591xvh().s[12]++, []);
  const warnings =
  /* istanbul ignore next */
  (cov_9ra591xvh().s[13]++, []);
  /* istanbul ignore next */
  cov_9ra591xvh().s[14]++;
  if (typeof value !== 'string') {
    /* istanbul ignore next */
    cov_9ra591xvh().b[10][0]++;
    cov_9ra591xvh().s[15]++;
    errors.push(createValidationError(`${fieldName} must be a string`, 'INVALID_TYPE', fieldName.toLowerCase(), 'string', typeof value));
    /* istanbul ignore next */
    cov_9ra591xvh().s[16]++;
    return createFailureResult(errors, warnings);
  } else
  /* istanbul ignore next */
  {
    cov_9ra591xvh().b[10][1]++;
  }
  cov_9ra591xvh().s[17]++;
  if (
  /* istanbul ignore next */
  (cov_9ra591xvh().b[12][0]++, !options.allowEmpty) &&
  /* istanbul ignore next */
  (cov_9ra591xvh().b[12][1]++, value.trim() === '')) {
    /* istanbul ignore next */
    cov_9ra591xvh().b[11][0]++;
    cov_9ra591xvh().s[18]++;
    errors.push(createValidationError(`${fieldName} cannot be empty`, 'EMPTY_STRING', fieldName.toLowerCase(), 'non-empty string', value));
  } else
  /* istanbul ignore next */
  {
    cov_9ra591xvh().b[11][1]++;
  }
  cov_9ra591xvh().s[19]++;
  if (
  /* istanbul ignore next */
  (cov_9ra591xvh().b[14][0]++, options.minLength !== undefined) &&
  /* istanbul ignore next */
  (cov_9ra591xvh().b[14][1]++, value.length < options.minLength)) {
    /* istanbul ignore next */
    cov_9ra591xvh().b[13][0]++;
    cov_9ra591xvh().s[20]++;
    errors.push(createValidationError(`${fieldName} must be at least ${options.minLength} characters long`, 'MIN_LENGTH', fieldName.toLowerCase(), `>= ${options.minLength} characters`, `${value.length} characters`));
  } else
  /* istanbul ignore next */
  {
    cov_9ra591xvh().b[13][1]++;
  }
  cov_9ra591xvh().s[21]++;
  if (
  /* istanbul ignore next */
  (cov_9ra591xvh().b[16][0]++, options.maxLength !== undefined) &&
  /* istanbul ignore next */
  (cov_9ra591xvh().b[16][1]++, value.length > options.maxLength)) {
    /* istanbul ignore next */
    cov_9ra591xvh().b[15][0]++;
    cov_9ra591xvh().s[22]++;
    errors.push(createValidationError(`${fieldName} must be at most ${options.maxLength} characters long`, 'MAX_LENGTH', fieldName.toLowerCase(), `<= ${options.maxLength} characters`, `${value.length} characters`));
  } else
  /* istanbul ignore next */
  {
    cov_9ra591xvh().b[15][1]++;
  }
  cov_9ra591xvh().s[23]++;
  if (
  /* istanbul ignore next */
  (cov_9ra591xvh().b[18][0]++, options.pattern) &&
  /* istanbul ignore next */
  (cov_9ra591xvh().b[18][1]++, !options.pattern.test(value))) {
    /* istanbul ignore next */
    cov_9ra591xvh().b[17][0]++;
    cov_9ra591xvh().s[24]++;
    errors.push(createValidationError(`${fieldName} does not match the required pattern`, 'PATTERN_MISMATCH', fieldName.toLowerCase(), options.pattern.toString(), value));
  } else
  /* istanbul ignore next */
  {
    cov_9ra591xvh().b[17][1]++;
  }
  cov_9ra591xvh().s[25]++;
  return errors.length > 0 ?
  /* istanbul ignore next */
  (cov_9ra591xvh().b[19][0]++, createFailureResult(errors, warnings)) :
  /* istanbul ignore next */
  (cov_9ra591xvh().b[19][1]++, createSuccessResult());
}
/**
 * Validate that a value is a number with optional constraints
 */
export function validateNumber(value, options =
/* istanbul ignore next */
(cov_9ra591xvh().b[20][0]++, {})) {
  /* istanbul ignore next */
  cov_9ra591xvh().f[6]++;
  const fieldName =
  /* istanbul ignore next */
  (cov_9ra591xvh().s[26]++,
  /* istanbul ignore next */
  (cov_9ra591xvh().b[21][0]++, options.fieldName) ||
  /* istanbul ignore next */
  (cov_9ra591xvh().b[21][1]++, 'Value'));
  const errors =
  /* istanbul ignore next */
  (cov_9ra591xvh().s[27]++, []);
  const warnings =
  /* istanbul ignore next */
  (cov_9ra591xvh().s[28]++, []);
  /* istanbul ignore next */
  cov_9ra591xvh().s[29]++;
  if (
  /* istanbul ignore next */
  (cov_9ra591xvh().b[23][0]++, typeof value !== 'number') ||
  /* istanbul ignore next */
  (cov_9ra591xvh().b[23][1]++, isNaN(value))) {
    /* istanbul ignore next */
    cov_9ra591xvh().b[22][0]++;
    cov_9ra591xvh().s[30]++;
    errors.push(createValidationError(`${fieldName} must be a valid number`, 'INVALID_TYPE', fieldName.toLowerCase(), 'number', typeof value));
    /* istanbul ignore next */
    cov_9ra591xvh().s[31]++;
    return createFailureResult(errors, warnings);
  } else
  /* istanbul ignore next */
  {
    cov_9ra591xvh().b[22][1]++;
  }
  cov_9ra591xvh().s[32]++;
  if (
  /* istanbul ignore next */
  (cov_9ra591xvh().b[25][0]++, options.integer) &&
  /* istanbul ignore next */
  (cov_9ra591xvh().b[25][1]++, !Number.isInteger(value))) {
    /* istanbul ignore next */
    cov_9ra591xvh().b[24][0]++;
    cov_9ra591xvh().s[33]++;
    errors.push(createValidationError(`${fieldName} must be an integer`, 'NOT_INTEGER', fieldName.toLowerCase(), 'integer', value));
  } else
  /* istanbul ignore next */
  {
    cov_9ra591xvh().b[24][1]++;
  }
  cov_9ra591xvh().s[34]++;
  if (
  /* istanbul ignore next */
  (cov_9ra591xvh().b[27][0]++, options.positive) &&
  /* istanbul ignore next */
  (cov_9ra591xvh().b[27][1]++, value <= 0)) {
    /* istanbul ignore next */
    cov_9ra591xvh().b[26][0]++;
    cov_9ra591xvh().s[35]++;
    errors.push(createValidationError(`${fieldName} must be positive`, 'NOT_POSITIVE', fieldName.toLowerCase(), '> 0', value));
  } else
  /* istanbul ignore next */
  {
    cov_9ra591xvh().b[26][1]++;
  }
  cov_9ra591xvh().s[36]++;
  if (
  /* istanbul ignore next */
  (cov_9ra591xvh().b[29][0]++, options.min !== undefined) &&
  /* istanbul ignore next */
  (cov_9ra591xvh().b[29][1]++, value < options.min)) {
    /* istanbul ignore next */
    cov_9ra591xvh().b[28][0]++;
    cov_9ra591xvh().s[37]++;
    errors.push(createValidationError(`${fieldName} must be at least ${options.min}`, 'MIN_VALUE', fieldName.toLowerCase(), `>= ${options.min}`, value));
  } else
  /* istanbul ignore next */
  {
    cov_9ra591xvh().b[28][1]++;
  }
  cov_9ra591xvh().s[38]++;
  if (
  /* istanbul ignore next */
  (cov_9ra591xvh().b[31][0]++, options.max !== undefined) &&
  /* istanbul ignore next */
  (cov_9ra591xvh().b[31][1]++, value > options.max)) {
    /* istanbul ignore next */
    cov_9ra591xvh().b[30][0]++;
    cov_9ra591xvh().s[39]++;
    errors.push(createValidationError(`${fieldName} must be at most ${options.max}`, 'MAX_VALUE', fieldName.toLowerCase(), `<= ${options.max}`, value));
  } else
  /* istanbul ignore next */
  {
    cov_9ra591xvh().b[30][1]++;
  }
  cov_9ra591xvh().s[40]++;
  return errors.length > 0 ?
  /* istanbul ignore next */
  (cov_9ra591xvh().b[32][0]++, createFailureResult(errors, warnings)) :
  /* istanbul ignore next */
  (cov_9ra591xvh().b[32][1]++, createSuccessResult());
}
/**
 * Validate that a value is a boolean
 */
export function validateBoolean(value, fieldName =
/* istanbul ignore next */
(cov_9ra591xvh().b[33][0]++, 'Value')) {
  /* istanbul ignore next */
  cov_9ra591xvh().f[7]++;
  cov_9ra591xvh().s[41]++;
  if (typeof value !== 'boolean') {
    /* istanbul ignore next */
    cov_9ra591xvh().b[34][0]++;
    cov_9ra591xvh().s[42]++;
    return createFailureResult([createValidationError(`${fieldName} must be a boolean`, 'INVALID_TYPE', fieldName.toLowerCase(), 'boolean', typeof value)]);
  } else
  /* istanbul ignore next */
  {
    cov_9ra591xvh().b[34][1]++;
  }
  cov_9ra591xvh().s[43]++;
  return createSuccessResult();
}
/**
 * Validate that a value is an array with optional constraints
 */
export function validateArray(value, options =
/* istanbul ignore next */
(cov_9ra591xvh().b[35][0]++, {})) {
  /* istanbul ignore next */
  cov_9ra591xvh().f[8]++;
  const fieldName =
  /* istanbul ignore next */
  (cov_9ra591xvh().s[44]++,
  /* istanbul ignore next */
  (cov_9ra591xvh().b[36][0]++, options.fieldName) ||
  /* istanbul ignore next */
  (cov_9ra591xvh().b[36][1]++, 'Value'));
  const errors =
  /* istanbul ignore next */
  (cov_9ra591xvh().s[45]++, []);
  const warnings =
  /* istanbul ignore next */
  (cov_9ra591xvh().s[46]++, []);
  /* istanbul ignore next */
  cov_9ra591xvh().s[47]++;
  if (!Array.isArray(value)) {
    /* istanbul ignore next */
    cov_9ra591xvh().b[37][0]++;
    cov_9ra591xvh().s[48]++;
    errors.push(createValidationError(`${fieldName} must be an array`, 'INVALID_TYPE', fieldName.toLowerCase(), 'array', typeof value));
    /* istanbul ignore next */
    cov_9ra591xvh().s[49]++;
    return createFailureResult(errors, warnings);
  } else
  /* istanbul ignore next */
  {
    cov_9ra591xvh().b[37][1]++;
  }
  cov_9ra591xvh().s[50]++;
  if (
  /* istanbul ignore next */
  (cov_9ra591xvh().b[39][0]++, options.minLength !== undefined) &&
  /* istanbul ignore next */
  (cov_9ra591xvh().b[39][1]++, value.length < options.minLength)) {
    /* istanbul ignore next */
    cov_9ra591xvh().b[38][0]++;
    cov_9ra591xvh().s[51]++;
    errors.push(createValidationError(`${fieldName} must have at least ${options.minLength} items`, 'MIN_LENGTH', fieldName.toLowerCase(), `>= ${options.minLength} items`, `${value.length} items`));
  } else
  /* istanbul ignore next */
  {
    cov_9ra591xvh().b[38][1]++;
  }
  cov_9ra591xvh().s[52]++;
  if (
  /* istanbul ignore next */
  (cov_9ra591xvh().b[41][0]++, options.maxLength !== undefined) &&
  /* istanbul ignore next */
  (cov_9ra591xvh().b[41][1]++, value.length > options.maxLength)) {
    /* istanbul ignore next */
    cov_9ra591xvh().b[40][0]++;
    cov_9ra591xvh().s[53]++;
    errors.push(createValidationError(`${fieldName} must have at most ${options.maxLength} items`, 'MAX_LENGTH', fieldName.toLowerCase(), `<= ${options.maxLength} items`, `${value.length} items`));
  } else
  /* istanbul ignore next */
  {
    cov_9ra591xvh().b[40][1]++;
  }
  // Validate array items if validator provided
  cov_9ra591xvh().s[54]++;
  if (options.itemValidator) {
    /* istanbul ignore next */
    cov_9ra591xvh().b[42][0]++;
    cov_9ra591xvh().s[55]++;
    for (let i =
    /* istanbul ignore next */
    (cov_9ra591xvh().s[56]++, 0); i < value.length; i++) {
      const itemResult =
      /* istanbul ignore next */
      (cov_9ra591xvh().s[57]++, options.itemValidator(value[i]));
      /* istanbul ignore next */
      cov_9ra591xvh().s[58]++;
      if (itemResult instanceof Promise) {
        /* istanbul ignore next */
        cov_9ra591xvh().b[43][0]++;
        cov_9ra591xvh().s[59]++;
        warnings.push(createValidationWarning('Async validation of array items is not supported in synchronous validation', 'ASYNC_VALIDATION', `${fieldName.toLowerCase()}[${i}]`, 'Use async validation for array items'));
      } else {
        /* istanbul ignore next */
        cov_9ra591xvh().b[43][1]++;
        cov_9ra591xvh().s[60]++;
        errors.push(...itemResult.errors.map(error => {
          /* istanbul ignore next */
          cov_9ra591xvh().f[9]++;
          cov_9ra591xvh().s[61]++;
          return {
            ...error,
            path: `${fieldName.toLowerCase()}[${i}]${error.path ?
            /* istanbul ignore next */
            (cov_9ra591xvh().b[44][0]++, '.' + error.path) :
            /* istanbul ignore next */
            (cov_9ra591xvh().b[44][1]++, '')}`
          };
        }));
        /* istanbul ignore next */
        cov_9ra591xvh().s[62]++;
        warnings.push(...itemResult.warnings.map(warning => {
          /* istanbul ignore next */
          cov_9ra591xvh().f[10]++;
          cov_9ra591xvh().s[63]++;
          return {
            ...warning,
            path: `${fieldName.toLowerCase()}[${i}]${warning.path ?
            /* istanbul ignore next */
            (cov_9ra591xvh().b[45][0]++, '.' + warning.path) :
            /* istanbul ignore next */
            (cov_9ra591xvh().b[45][1]++, '')}`
          };
        }));
      }
    }
  } else
  /* istanbul ignore next */
  {
    cov_9ra591xvh().b[42][1]++;
  }
  cov_9ra591xvh().s[64]++;
  return errors.length > 0 ?
  /* istanbul ignore next */
  (cov_9ra591xvh().b[46][0]++, createFailureResult(errors, warnings)) :
  /* istanbul ignore next */
  (cov_9ra591xvh().b[46][1]++, createSuccessResult());
}
/**
 * Validate that a value is an object with optional constraints
 */
export function validateObject(value, options =
/* istanbul ignore next */
(cov_9ra591xvh().b[47][0]++, {})) {
  /* istanbul ignore next */
  cov_9ra591xvh().f[11]++;
  const fieldName =
  /* istanbul ignore next */
  (cov_9ra591xvh().s[65]++,
  /* istanbul ignore next */
  (cov_9ra591xvh().b[48][0]++, options.fieldName) ||
  /* istanbul ignore next */
  (cov_9ra591xvh().b[48][1]++, 'Value'));
  const errors =
  /* istanbul ignore next */
  (cov_9ra591xvh().s[66]++, []);
  const warnings =
  /* istanbul ignore next */
  (cov_9ra591xvh().s[67]++, []);
  /* istanbul ignore next */
  cov_9ra591xvh().s[68]++;
  if (value === null) {
    /* istanbul ignore next */
    cov_9ra591xvh().b[49][0]++;
    cov_9ra591xvh().s[69]++;
    if (!options.allowNull) {
      /* istanbul ignore next */
      cov_9ra591xvh().b[50][0]++;
      cov_9ra591xvh().s[70]++;
      errors.push(createValidationError(`${fieldName} cannot be null`, 'NULL_VALUE', fieldName.toLowerCase(), 'object', null));
    } else
    /* istanbul ignore next */
    {
      cov_9ra591xvh().b[50][1]++;
    }
    cov_9ra591xvh().s[71]++;
    return errors.length > 0 ?
    /* istanbul ignore next */
    (cov_9ra591xvh().b[51][0]++, createFailureResult(errors, warnings)) :
    /* istanbul ignore next */
    (cov_9ra591xvh().b[51][1]++, createSuccessResult());
  } else
  /* istanbul ignore next */
  {
    cov_9ra591xvh().b[49][1]++;
  }
  cov_9ra591xvh().s[72]++;
  if (
  /* istanbul ignore next */
  (cov_9ra591xvh().b[53][0]++, typeof value !== 'object') ||
  /* istanbul ignore next */
  (cov_9ra591xvh().b[53][1]++, Array.isArray(value))) {
    /* istanbul ignore next */
    cov_9ra591xvh().b[52][0]++;
    cov_9ra591xvh().s[73]++;
    errors.push(createValidationError(`${fieldName} must be an object`, 'INVALID_TYPE', fieldName.toLowerCase(), 'object', Array.isArray(value) ?
    /* istanbul ignore next */
    (cov_9ra591xvh().b[54][0]++, 'array') :
    /* istanbul ignore next */
    (cov_9ra591xvh().b[54][1]++, typeof value)));
    /* istanbul ignore next */
    cov_9ra591xvh().s[74]++;
    return createFailureResult(errors, warnings);
  } else
  /* istanbul ignore next */
  {
    cov_9ra591xvh().b[52][1]++;
  }
  // Check required keys
  cov_9ra591xvh().s[75]++;
  if (options.requiredKeys) {
    /* istanbul ignore next */
    cov_9ra591xvh().b[55][0]++;
    cov_9ra591xvh().s[76]++;
    for (const key of options.requiredKeys) {
      /* istanbul ignore next */
      cov_9ra591xvh().s[77]++;
      if (!(key in value)) {
        /* istanbul ignore next */
        cov_9ra591xvh().b[56][0]++;
        cov_9ra591xvh().s[78]++;
        errors.push(createValidationError(`${fieldName} is missing required property "${key}"`, 'MISSING_PROPERTY', `${fieldName.toLowerCase()}.${key}`, 'present', 'missing'));
      } else
      /* istanbul ignore next */
      {
        cov_9ra591xvh().b[56][1]++;
      }
    }
  } else
  /* istanbul ignore next */
  {
    cov_9ra591xvh().b[55][1]++;
  }
  // Validate properties against schema
  cov_9ra591xvh().s[79]++;
  if (options.schema) {
    /* istanbul ignore next */
    cov_9ra591xvh().b[57][0]++;
    cov_9ra591xvh().s[80]++;
    for (const [key, validator] of Object.entries(options.schema)) {
      /* istanbul ignore next */
      cov_9ra591xvh().s[81]++;
      if (key in value) {
        /* istanbul ignore next */
        cov_9ra591xvh().b[58][0]++;
        const propertyResult =
        /* istanbul ignore next */
        (cov_9ra591xvh().s[82]++, validator(value[key]));
        /* istanbul ignore next */
        cov_9ra591xvh().s[83]++;
        if (propertyResult instanceof Promise) {
          /* istanbul ignore next */
          cov_9ra591xvh().b[59][0]++;
          cov_9ra591xvh().s[84]++;
          warnings.push(createValidationWarning('Async validation of object properties is not supported in synchronous validation', 'ASYNC_VALIDATION', `${fieldName.toLowerCase()}.${key}`, 'Use async validation for object properties'));
        } else {
          /* istanbul ignore next */
          cov_9ra591xvh().b[59][1]++;
          cov_9ra591xvh().s[85]++;
          errors.push(...propertyResult.errors.map(error => {
            /* istanbul ignore next */
            cov_9ra591xvh().f[12]++;
            cov_9ra591xvh().s[86]++;
            return {
              ...error,
              path: `${fieldName.toLowerCase()}.${key}${error.path ?
              /* istanbul ignore next */
              (cov_9ra591xvh().b[60][0]++, '.' + error.path) :
              /* istanbul ignore next */
              (cov_9ra591xvh().b[60][1]++, '')}`
            };
          }));
          /* istanbul ignore next */
          cov_9ra591xvh().s[87]++;
          warnings.push(...propertyResult.warnings.map(warning => {
            /* istanbul ignore next */
            cov_9ra591xvh().f[13]++;
            cov_9ra591xvh().s[88]++;
            return {
              ...warning,
              path: `${fieldName.toLowerCase()}.${key}${warning.path ?
              /* istanbul ignore next */
              (cov_9ra591xvh().b[61][0]++, '.' + warning.path) :
              /* istanbul ignore next */
              (cov_9ra591xvh().b[61][1]++, '')}`
            };
          }));
        }
      } else
      /* istanbul ignore next */
      {
        cov_9ra591xvh().b[58][1]++;
      }
    }
  } else
  /* istanbul ignore next */
  {
    cov_9ra591xvh().b[57][1]++;
  }
  cov_9ra591xvh().s[89]++;
  return errors.length > 0 ?
  /* istanbul ignore next */
  (cov_9ra591xvh().b[62][0]++, createFailureResult(errors, warnings)) :
  /* istanbul ignore next */
  (cov_9ra591xvh().b[62][1]++, createSuccessResult());
}
/**
 * Validate that a value is a valid URL
 */
export function validateUrl(value, options =
/* istanbul ignore next */
(cov_9ra591xvh().b[63][0]++, {})) {
  /* istanbul ignore next */
  cov_9ra591xvh().f[14]++;
  const fieldName =
  /* istanbul ignore next */
  (cov_9ra591xvh().s[90]++,
  /* istanbul ignore next */
  (cov_9ra591xvh().b[64][0]++, options.fieldName) ||
  /* istanbul ignore next */
  (cov_9ra591xvh().b[64][1]++, 'URL'));
  const protocols =
  /* istanbul ignore next */
  (cov_9ra591xvh().s[91]++,
  /* istanbul ignore next */
  (cov_9ra591xvh().b[65][0]++, options.protocols) ||
  /* istanbul ignore next */
  (cov_9ra591xvh().b[65][1]++, ['http', 'https']));
  /* istanbul ignore next */
  cov_9ra591xvh().s[92]++;
  if (typeof value !== 'string') {
    /* istanbul ignore next */
    cov_9ra591xvh().b[66][0]++;
    cov_9ra591xvh().s[93]++;
    return createFailureResult([createValidationError(`${fieldName} must be a string`, 'INVALID_TYPE', fieldName.toLowerCase(), 'string', typeof value)]);
  } else
  /* istanbul ignore next */
  {
    cov_9ra591xvh().b[66][1]++;
  }
  cov_9ra591xvh().s[94]++;
  try {
    const url =
    /* istanbul ignore next */
    (cov_9ra591xvh().s[95]++, new URL(value));
    /* istanbul ignore next */
    cov_9ra591xvh().s[96]++;
    if (!protocols.includes(url.protocol.slice(0, -1))) {
      /* istanbul ignore next */
      cov_9ra591xvh().b[67][0]++;
      cov_9ra591xvh().s[97]++;
      return createFailureResult([createValidationError(`${fieldName} must use one of the following protocols: ${protocols.join(', ')}`, 'INVALID_PROTOCOL', fieldName.toLowerCase(), protocols.join(' | '), url.protocol)]);
    } else
    /* istanbul ignore next */
    {
      cov_9ra591xvh().b[67][1]++;
    }
    cov_9ra591xvh().s[98]++;
    if (
    /* istanbul ignore next */
    (cov_9ra591xvh().b[69][0]++, !options.allowLocal) && (
    /* istanbul ignore next */
    (cov_9ra591xvh().b[69][1]++, url.hostname === 'localhost') ||
    /* istanbul ignore next */
    (cov_9ra591xvh().b[69][2]++, url.hostname.startsWith('127.')))) {
      /* istanbul ignore next */
      cov_9ra591xvh().b[68][0]++;
      cov_9ra591xvh().s[99]++;
      return createFailureResult([createValidationError(`${fieldName} cannot be a local URL`, 'LOCAL_URL', fieldName.toLowerCase(), 'non-local URL', url.hostname)]);
    } else
    /* istanbul ignore next */
    {
      cov_9ra591xvh().b[68][1]++;
    }
    cov_9ra591xvh().s[100]++;
    return createSuccessResult();
  } catch (error) {
    /* istanbul ignore next */
    cov_9ra591xvh().s[101]++;
    return createFailureResult([createValidationError(`${fieldName} is not a valid URL: ${error.message}`, 'INVALID_URL', fieldName.toLowerCase(), 'valid URL', value)]);
  }
}
/**
 * Validate that a value is a valid email address
 */
export function validateEmail(value, fieldName =
/* istanbul ignore next */
(cov_9ra591xvh().b[70][0]++, 'Email')) {
  /* istanbul ignore next */
  cov_9ra591xvh().f[15]++;
  cov_9ra591xvh().s[102]++;
  if (typeof value !== 'string') {
    /* istanbul ignore next */
    cov_9ra591xvh().b[71][0]++;
    cov_9ra591xvh().s[103]++;
    return createFailureResult([createValidationError(`${fieldName} must be a string`, 'INVALID_TYPE', fieldName.toLowerCase(), 'string', typeof value)]);
  } else
  /* istanbul ignore next */
  {
    cov_9ra591xvh().b[71][1]++;
  }
  const emailRegex =
  /* istanbul ignore next */
  (cov_9ra591xvh().s[104]++, /^[^\s@]+@[^\s@]+\.[^\s@]+$/);
  /* istanbul ignore next */
  cov_9ra591xvh().s[105]++;
  if (!emailRegex.test(value)) {
    /* istanbul ignore next */
    cov_9ra591xvh().b[72][0]++;
    cov_9ra591xvh().s[106]++;
    return createFailureResult([createValidationError(`${fieldName} is not a valid email address`, 'INVALID_EMAIL', fieldName.toLowerCase(), 'valid email format', value)]);
  } else
  /* istanbul ignore next */
  {
    cov_9ra591xvh().b[72][1]++;
  }
  cov_9ra591xvh().s[107]++;
  return createSuccessResult();
}
/**
 * Validate that a value is a valid file path
 */
export async function validateFilePath(value, options =
/* istanbul ignore next */
(cov_9ra591xvh().b[73][0]++, {})) {
  /* istanbul ignore next */
  cov_9ra591xvh().f[16]++;
  const fieldName =
  /* istanbul ignore next */
  (cov_9ra591xvh().s[108]++,
  /* istanbul ignore next */
  (cov_9ra591xvh().b[74][0]++, options.fieldName) ||
  /* istanbul ignore next */
  (cov_9ra591xvh().b[74][1]++, 'File path'));
  const errors =
  /* istanbul ignore next */
  (cov_9ra591xvh().s[109]++, []);
  const warnings =
  /* istanbul ignore next */
  (cov_9ra591xvh().s[110]++, []);
  /* istanbul ignore next */
  cov_9ra591xvh().s[111]++;
  if (typeof value !== 'string') {
    /* istanbul ignore next */
    cov_9ra591xvh().b[75][0]++;
    cov_9ra591xvh().s[112]++;
    errors.push(createValidationError(`${fieldName} must be a string`, 'INVALID_TYPE', fieldName.toLowerCase(), 'string', typeof value));
    /* istanbul ignore next */
    cov_9ra591xvh().s[113]++;
    return createFailureResult(errors, warnings);
  } else
  /* istanbul ignore next */
  {
    cov_9ra591xvh().b[75][1]++;
  }
  cov_9ra591xvh().s[114]++;
  if (
  /* istanbul ignore next */
  (cov_9ra591xvh().b[77][0]++, options.mustExist) &&
  /* istanbul ignore next */
  (cov_9ra591xvh().b[77][1]++, !(await fileExists(value)))) {
    /* istanbul ignore next */
    cov_9ra591xvh().b[76][0]++;
    cov_9ra591xvh().s[115]++;
    errors.push(createValidationError(`${fieldName} does not exist: ${value}`, 'FILE_NOT_FOUND', fieldName.toLowerCase(), 'existing file', value));
  } else
  /* istanbul ignore next */
  {
    cov_9ra591xvh().b[76][1]++;
  }
  cov_9ra591xvh().s[116]++;
  if (options.allowedExtensions) {
    /* istanbul ignore next */
    cov_9ra591xvh().b[78][0]++;
    const extension =
    /* istanbul ignore next */
    (cov_9ra591xvh().s[117]++, value.split('.').pop()?.toLowerCase());
    /* istanbul ignore next */
    cov_9ra591xvh().s[118]++;
    if (
    /* istanbul ignore next */
    (cov_9ra591xvh().b[80][0]++, !extension) ||
    /* istanbul ignore next */
    (cov_9ra591xvh().b[80][1]++, !options.allowedExtensions.includes(extension))) {
      /* istanbul ignore next */
      cov_9ra591xvh().b[79][0]++;
      cov_9ra591xvh().s[119]++;
      errors.push(createValidationError(`${fieldName} must have one of the following extensions: ${options.allowedExtensions.join(', ')}`, 'INVALID_EXTENSION', fieldName.toLowerCase(), options.allowedExtensions.join(' | '),
      /* istanbul ignore next */
      (cov_9ra591xvh().b[81][0]++, extension) ||
      /* istanbul ignore next */
      (cov_9ra591xvh().b[81][1]++, 'none')));
    } else
    /* istanbul ignore next */
    {
      cov_9ra591xvh().b[79][1]++;
    }
  } else
  /* istanbul ignore next */
  {
    cov_9ra591xvh().b[78][1]++;
  }
  cov_9ra591xvh().s[120]++;
  return errors.length > 0 ?
  /* istanbul ignore next */
  (cov_9ra591xvh().b[82][0]++, createFailureResult(errors, warnings)) :
  /* istanbul ignore next */
  (cov_9ra591xvh().b[82][1]++, createSuccessResult());
}
/**
 * Validate that a value is a valid directory path
 */
export async function validateDirectoryPath(value, options =
/* istanbul ignore next */
(cov_9ra591xvh().b[83][0]++, {})) {
  /* istanbul ignore next */
  cov_9ra591xvh().f[17]++;
  const fieldName =
  /* istanbul ignore next */
  (cov_9ra591xvh().s[121]++,
  /* istanbul ignore next */
  (cov_9ra591xvh().b[84][0]++, options.fieldName) ||
  /* istanbul ignore next */
  (cov_9ra591xvh().b[84][1]++, 'Directory path'));
  const errors =
  /* istanbul ignore next */
  (cov_9ra591xvh().s[122]++, []);
  const warnings =
  /* istanbul ignore next */
  (cov_9ra591xvh().s[123]++, []);
  /* istanbul ignore next */
  cov_9ra591xvh().s[124]++;
  if (typeof value !== 'string') {
    /* istanbul ignore next */
    cov_9ra591xvh().b[85][0]++;
    cov_9ra591xvh().s[125]++;
    errors.push(createValidationError(`${fieldName} must be a string`, 'INVALID_TYPE', fieldName.toLowerCase(), 'string', typeof value));
    /* istanbul ignore next */
    cov_9ra591xvh().s[126]++;
    return createFailureResult(errors, warnings);
  } else
  /* istanbul ignore next */
  {
    cov_9ra591xvh().b[85][1]++;
  }
  cov_9ra591xvh().s[127]++;
  if (
  /* istanbul ignore next */
  (cov_9ra591xvh().b[87][0]++, options.mustExist) &&
  /* istanbul ignore next */
  (cov_9ra591xvh().b[87][1]++, !(await directoryExists(value)))) {
    /* istanbul ignore next */
    cov_9ra591xvh().b[86][0]++;
    cov_9ra591xvh().s[128]++;
    errors.push(createValidationError(`${fieldName} does not exist: ${value}`, 'DIRECTORY_NOT_FOUND', fieldName.toLowerCase(), 'existing directory', value));
  } else
  /* istanbul ignore next */
  {
    cov_9ra591xvh().b[86][1]++;
  }
  cov_9ra591xvh().s[129]++;
  return errors.length > 0 ?
  /* istanbul ignore next */
  (cov_9ra591xvh().b[88][0]++, createFailureResult(errors, warnings)) :
  /* istanbul ignore next */
  (cov_9ra591xvh().b[88][1]++, createSuccessResult());
}
/**
 * Validate that a value is a valid port number
 */
export function validatePort(value, fieldName =
/* istanbul ignore next */
(cov_9ra591xvh().b[89][0]++, 'Port')) {
  /* istanbul ignore next */
  cov_9ra591xvh().f[18]++;
  const numberResult =
  /* istanbul ignore next */
  (cov_9ra591xvh().s[130]++, validateNumber(value, {
    fieldName,
    min: 1,
    max: 65535,
    integer: true,
    positive: true
  }));
  /* istanbul ignore next */
  cov_9ra591xvh().s[131]++;
  if (!numberResult.valid) {
    /* istanbul ignore next */
    cov_9ra591xvh().b[90][0]++;
    cov_9ra591xvh().s[132]++;
    return numberResult;
  } else
  /* istanbul ignore next */
  {
    cov_9ra591xvh().b[90][1]++;
  }
  // Add warning for well-known ports
  const warnings =
  /* istanbul ignore next */
  (cov_9ra591xvh().s[133]++, []);
  /* istanbul ignore next */
  cov_9ra591xvh().s[134]++;
  if (value < 1024) {
    /* istanbul ignore next */
    cov_9ra591xvh().b[91][0]++;
    cov_9ra591xvh().s[135]++;
    warnings.push(createValidationWarning(`${fieldName} ${value} is a well-known port that may require elevated privileges`, 'WELL_KNOWN_PORT', fieldName.toLowerCase(), 'Consider using a port >= 1024 for user applications'));
  } else
  /* istanbul ignore next */
  {
    cov_9ra591xvh().b[91][1]++;
  }
  cov_9ra591xvh().s[136]++;
  return {
    valid: true,
    errors: [],
    warnings
  };
}
/**
 * Validate that a value is a valid semantic version
 */
export function validateVersion(value, fieldName =
/* istanbul ignore next */
(cov_9ra591xvh().b[92][0]++, 'Version')) {
  /* istanbul ignore next */
  cov_9ra591xvh().f[19]++;
  cov_9ra591xvh().s[137]++;
  if (typeof value !== 'string') {
    /* istanbul ignore next */
    cov_9ra591xvh().b[93][0]++;
    cov_9ra591xvh().s[138]++;
    return createFailureResult([createValidationError(`${fieldName} must be a string`, 'INVALID_TYPE', fieldName.toLowerCase(), 'string', typeof value)]);
  } else
  /* istanbul ignore next */
  {
    cov_9ra591xvh().b[93][1]++;
  }
  const semverRegex =
  /* istanbul ignore next */
  (cov_9ra591xvh().s[139]++, /^(0|[1-9]\d*)\.(0|[1-9]\d*)\.(0|[1-9]\d*)(?:-((?:0|[1-9]\d*|\d*[a-zA-Z-][0-9a-zA-Z-]*)(?:\.(?:0|[1-9]\d*|\d*[a-zA-Z-][0-9a-zA-Z-]*))*))?(?:\+([0-9a-zA-Z-]+(?:\.[0-9a-zA-Z-]+)*))?$/);
  /* istanbul ignore next */
  cov_9ra591xvh().s[140]++;
  if (!semverRegex.test(value)) {
    /* istanbul ignore next */
    cov_9ra591xvh().b[94][0]++;
    cov_9ra591xvh().s[141]++;
    return createFailureResult([createValidationError(`${fieldName} is not a valid semantic version (e.g., 1.0.0)`, 'INVALID_VERSION', fieldName.toLowerCase(), 'semantic version format', value)]);
  } else
  /* istanbul ignore next */
  {
    cov_9ra591xvh().b[94][1]++;
  }
  cov_9ra591xvh().s[142]++;
  return createSuccessResult();
}
/**
 * Validate that a value is a valid UUID
 */
export function validateUuid(value, fieldName =
/* istanbul ignore next */
(cov_9ra591xvh().b[95][0]++, 'UUID')) {
  /* istanbul ignore next */
  cov_9ra591xvh().f[20]++;
  cov_9ra591xvh().s[143]++;
  if (typeof value !== 'string') {
    /* istanbul ignore next */
    cov_9ra591xvh().b[96][0]++;
    cov_9ra591xvh().s[144]++;
    return createFailureResult([createValidationError(`${fieldName} must be a string`, 'INVALID_TYPE', fieldName.toLowerCase(), 'string', typeof value)]);
  } else
  /* istanbul ignore next */
  {
    cov_9ra591xvh().b[96][1]++;
  }
  const uuidRegex =
  /* istanbul ignore next */
  (cov_9ra591xvh().s[145]++, /^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/i);
  /* istanbul ignore next */
  cov_9ra591xvh().s[146]++;
  if (!uuidRegex.test(value)) {
    /* istanbul ignore next */
    cov_9ra591xvh().b[97][0]++;
    cov_9ra591xvh().s[147]++;
    return createFailureResult([createValidationError(`${fieldName} is not a valid UUID`, 'INVALID_UUID', fieldName.toLowerCase(), 'UUID format', value)]);
  } else
  /* istanbul ignore next */
  {
    cov_9ra591xvh().b[97][1]++;
  }
  cov_9ra591xvh().s[148]++;
  return createSuccessResult();
}
/**
 * Check if a string is valid JSON
 */
export function isValidJson(value) {
  /* istanbul ignore next */
  cov_9ra591xvh().f[21]++;
  cov_9ra591xvh().s[149]++;
  try {
    /* istanbul ignore next */
    cov_9ra591xvh().s[150]++;
    JSON.parse(value);
    /* istanbul ignore next */
    cov_9ra591xvh().s[151]++;
    return true;
  } catch {
    /* istanbul ignore next */
    cov_9ra591xvh().s[152]++;
    return false;
  }
}
/**
 * Parse JSON with validation
 */
export function parseJson(value, fieldName =
/* istanbul ignore next */
(cov_9ra591xvh().b[98][0]++, 'JSON')) {
  /* istanbul ignore next */
  cov_9ra591xvh().f[22]++;
  cov_9ra591xvh().s[153]++;
  try {
    const data =
    /* istanbul ignore next */
    (cov_9ra591xvh().s[154]++, JSON.parse(value));
    /* istanbul ignore next */
    cov_9ra591xvh().s[155]++;
    return {
      success: true,
      data
    };
  } catch (error) {
    /* istanbul ignore next */
    cov_9ra591xvh().s[156]++;
    return {
      success: false,
      error: createValidationError(`${fieldName} is not valid JSON: ${error.message}`, 'INVALID_JSON', fieldName.toLowerCase(), 'valid JSON', value)
    };
  }
}
/**
 * Validate JSON against a schema (basic implementation)
 */
export function validateJsonSchema(value, schema, fieldName =
/* istanbul ignore next */
(cov_9ra591xvh().b[99][0]++, 'JSON')) {
  /* istanbul ignore next */
  cov_9ra591xvh().f[23]++;
  cov_9ra591xvh().s[157]++;
  return validateObject(value, {
    fieldName,
    schema
  });
}
/**
 * Combine multiple validation results
 */
export function combineValidationResults(...results) {
  /* istanbul ignore next */
  cov_9ra591xvh().f[24]++;
  const errors =
  /* istanbul ignore next */
  (cov_9ra591xvh().s[158]++, []);
  const warnings =
  /* istanbul ignore next */
  (cov_9ra591xvh().s[159]++, []);
  /* istanbul ignore next */
  cov_9ra591xvh().s[160]++;
  for (const result of results) {
    /* istanbul ignore next */
    cov_9ra591xvh().s[161]++;
    errors.push(...result.errors);
    /* istanbul ignore next */
    cov_9ra591xvh().s[162]++;
    warnings.push(...result.warnings);
  }
  /* istanbul ignore next */
  cov_9ra591xvh().s[163]++;
  return {
    valid: errors.length === 0,
    errors,
    warnings
  };
}
/**
 * Run multiple validators in sequence
 */
export async function runValidators(value, validators, context) {
  /* istanbul ignore next */
  cov_9ra591xvh().f[25]++;
  const results =
  /* istanbul ignore next */
  (cov_9ra591xvh().s[164]++, []);
  /* istanbul ignore next */
  cov_9ra591xvh().s[165]++;
  for (const validator of validators) {
    const result =
    /* istanbul ignore next */
    (cov_9ra591xvh().s[166]++, await validator(value));
    /* istanbul ignore next */
    cov_9ra591xvh().s[167]++;
    results.push(result);
    // Stop on first error if context specifies it
    /* istanbul ignore next */
    cov_9ra591xvh().s[168]++;
    if (
    /* istanbul ignore next */
    (cov_9ra591xvh().b[101][0]++, !result.valid) &&
    /* istanbul ignore next */
    (cov_9ra591xvh().b[101][1]++, context?.metadata?.stopOnError)) {
      /* istanbul ignore next */
      cov_9ra591xvh().b[100][0]++;
      cov_9ra591xvh().s[169]++;
      break;
    } else
    /* istanbul ignore next */
    {
      cov_9ra591xvh().b[100][1]++;
    }
  }
  /* istanbul ignore next */
  cov_9ra591xvh().s[170]++;
  return combineValidationResults(...results);
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,