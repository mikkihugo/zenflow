adadebc5b1ef07f405be05d13c35722a
/* istanbul ignore next */
function cov_1b7hij5kso() {
  var path = "/home/mhugo/code/claude-code-flow/src/cli/types/index.ts";
  var hash = "da04b2e252d959d953fb676b1e950e9857aae490";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/home/mhugo/code/claude-code-flow/src/cli/types/index.ts",
    statementMap: {},
    fnMap: {},
    branchMap: {},
    s: {},
    f: {},
    b: {},
    inputSourceMap: {
      file: "/home/mhugo/code/claude-code-flow/src/cli/types/index.ts",
      mappings: "AAAA;;;;;GAKG",
      names: [],
      sources: ["/home/mhugo/code/claude-code-flow/src/cli/types/index.ts"],
      sourcesContent: ["/**\n * CLI Types Index\n * \n * This module re-exports all CLI type definitions for convenient importing.\n * Follows Google's TypeScript style guide with clear barrel exports.\n */\n\n// Command-related types\nexport type {\n  CommandConfig,\n  CommandFlagConfig,\n  CommandContext,\n  CommandResult,\n  CommandFlags,\n  CommandMetadata,\n  CommandHandler,\n  CommandExecutionStats,\n  CommandValidationResult,\n  CommandRegistry,\n} from './command.js';\n\n// Configuration-related types\nexport type {\n  CliConfig,\n  PluginConfig,\n  SwarmConfig,\n  DatabaseConfig,\n  SSLConfig,\n  UIConfig,\n  LoggingConfig,\n  LogOutput,\n  SecurityConfig,\n  PerformanceConfig,\n  AgentType,\n  ConfigValidationResult,\n  ConfigValidationError,\n  ConfigValidationWarning,\n} from './config.js';\n\n// UI-related types\nexport type {\n  UITheme,\n  UIColorPalette,\n  UITypography,\n  UISpacing,\n  UIBorders,\n  UIAnimations,\n  UIAnimationConfig,\n  UIComponentStyles,\n  UIButtonStyles,\n  UIInputStyles,\n  UITableStyles,\n  UIModalStyles,\n  UINavigationStyles,\n  UICardStyles,\n  UIProgressStyles,\n  UIComponentVariant,\n  UIComponentSize,\n  UIComponentState,\n  UIComponent,\n  ScreenState,\n  FormState,\n  ModalState,\n  NotificationState,\n  NotificationAction,\n  FilterState,\n  FilterOption,\n  PaginationState,\n  UIEventHandlers,\n  UIClickEvent,\n  UIChangeEvent,\n  UIFocusEvent,\n  UIBlurEvent,\n  UIKeyboardEvent,\n  UISubmitEvent,\n} from './ui.js';\n\n/**\n * Common utility types used across the CLI system\n */\n\n/**\n * Generic result type for operations that can succeed or fail\n */\nexport type Result<T, E = Error> = \n  | { success: true; data: T }\n  | { success: false; error: E };\n\n/**\n * Generic async result type\n */\nexport type AsyncResult<T, E = Error> = Promise<Result<T, E>>;\n\n/**\n * Generic callback function type\n */\nexport type Callback<T = void> = (error?: Error, result?: T) => void;\n\n/**\n * Generic event emitter type\n */\nexport type EventEmitter<T extends Record<string, unknown[]> = Record<string, unknown[]>> = {\n  on<K extends keyof T>(event: K, listener: (...args: T[K]) => void): void;\n  off<K extends keyof T>(event: K, listener: (...args: T[K]) => void): void;\n  emit<K extends keyof T>(event: K, ...args: T[K]): void;\n};\n\n/**\n * Generic disposable resource type\n */\nexport interface Disposable {\n  dispose(): void | Promise<void>;\n}\n\n/**\n * Generic cancelable operation type\n */\nexport interface Cancelable {\n  cancel(): void;\n  readonly isCanceled: boolean;\n}\n\n/**\n * Progress reporting interface\n */\nexport interface ProgressReporter {\n  report(progress: ProgressInfo): void;\n}\n\n/**\n * Progress information\n */\nexport interface ProgressInfo {\n  /** Current progress (0-100) */\n  percentage: number;\n  \n  /** Progress message */\n  message?: string;\n  \n  /** Current step */\n  step?: number;\n  \n  /** Total steps */\n  totalSteps?: number;\n  \n  /** Additional data */\n  data?: unknown;\n}\n\n/**\n * Validation result type\n */\nexport interface ValidationResult {\n  /** Whether validation passed */\n  valid: boolean;\n  \n  /** Validation errors */\n  errors: ValidationError[];\n  \n  /** Validation warnings */\n  warnings: ValidationWarning[];\n}\n\n/**\n * Validation error\n */\nexport interface ValidationError {\n  /** Error message */\n  message: string;\n  \n  /** Error code */\n  code: string;\n  \n  /** Field path */\n  path?: string;\n  \n  /** Expected value */\n  expected?: unknown;\n  \n  /** Actual value */\n  actual?: unknown;\n}\n\n/**\n * Validation warning\n */\nexport interface ValidationWarning {\n  /** Warning message */\n  message: string;\n  \n  /** Warning code */\n  code: string;\n  \n  /** Field path */\n  path?: string;\n  \n  /** Suggested action */\n  suggestion?: string;\n}\n\n/**\n * Timestamp type\n */\nexport type Timestamp = number | Date | string;\n\n/**\n * Duration type (in milliseconds)\n */\nexport type Duration = number;\n\n/**\n * URL type\n */\nexport type URL = string;\n\n/**\n * File path type\n */\nexport type FilePath = string;\n\n/**\n * Directory path type\n */\nexport type DirectoryPath = string;\n\n/**\n * Semver version string type\n */\nexport type Version = string;\n\n/**\n * UUID string type\n */\nexport type UUID = string;\n\n/**\n * JSON-serializable value type\n */\nexport type JSONValue = \n  | string \n  | number \n  | boolean \n  | null \n  | JSONValue[] \n  | { [key: string]: JSONValue };\n\n/**\n * Deep partial type utility\n */\nexport type DeepPartial<T> = {\n  [P in keyof T]?: T[P] extends object ? DeepPartial<T[P]> : T[P];\n};\n\n/**\n * Deep readonly type utility\n */\nexport type DeepReadonly<T> = {\n  readonly [P in keyof T]: T[P] extends object ? DeepReadonly<T[P]> : T[P];\n};\n\n/**\n * Required keys type utility\n */\nexport type RequiredKeys<T, K extends keyof T> = T & Required<Pick<T, K>>;\n\n/**\n * Optional keys type utility\n */\nexport type OptionalKeys<T, K extends keyof T> = Omit<T, K> & Partial<Pick<T, K>>;\n\n/**\n * Non-empty array type utility\n */\nexport type NonEmptyArray<T> = [T, ...T[]];\n\n/**\n * Tuple to union type utility\n */\nexport type TupleToUnion<T extends readonly unknown[]> = T[number];\n\n/**\n * Exact type utility - prevents extra properties\n */\nexport type Exact<T, U> = T extends U ? (U extends T ? T : never) : never;"],
      version: 3
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "da04b2e252d959d953fb676b1e950e9857aae490"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_1b7hij5kso = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_1b7hij5kso();
/**
 * CLI Types Index
 *
 * This module re-exports all CLI type definitions for convenient importing.
 * Follows Google's TypeScript style guide with clear barrel exports.
 */
export {};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6W10sInNvdXJjZXMiOlsiL2hvbWUvbWh1Z28vY29kZS9jbGF1ZGUtY29kZS1mbG93L3NyYy9jbGkvdHlwZXMvaW5kZXgudHMiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBDTEkgVHlwZXMgSW5kZXhcbiAqIFxuICogVGhpcyBtb2R1bGUgcmUtZXhwb3J0cyBhbGwgQ0xJIHR5cGUgZGVmaW5pdGlvbnMgZm9yIGNvbnZlbmllbnQgaW1wb3J0aW5nLlxuICogRm9sbG93cyBHb29nbGUncyBUeXBlU2NyaXB0IHN0eWxlIGd1aWRlIHdpdGggY2xlYXIgYmFycmVsIGV4cG9ydHMuXG4gKi9cblxuLy8gQ29tbWFuZC1yZWxhdGVkIHR5cGVzXG5leHBvcnQgdHlwZSB7XG4gIENvbW1hbmRDb25maWcsXG4gIENvbW1hbmRGbGFnQ29uZmlnLFxuICBDb21tYW5kQ29udGV4dCxcbiAgQ29tbWFuZFJlc3VsdCxcbiAgQ29tbWFuZEZsYWdzLFxuICBDb21tYW5kTWV0YWRhdGEsXG4gIENvbW1hbmRIYW5kbGVyLFxuICBDb21tYW5kRXhlY3V0aW9uU3RhdHMsXG4gIENvbW1hbmRWYWxpZGF0aW9uUmVzdWx0LFxuICBDb21tYW5kUmVnaXN0cnksXG59IGZyb20gJy4vY29tbWFuZC5qcyc7XG5cbi8vIENvbmZpZ3VyYXRpb24tcmVsYXRlZCB0eXBlc1xuZXhwb3J0IHR5cGUge1xuICBDbGlDb25maWcsXG4gIFBsdWdpbkNvbmZpZyxcbiAgU3dhcm1Db25maWcsXG4gIERhdGFiYXNlQ29uZmlnLFxuICBTU0xDb25maWcsXG4gIFVJQ29uZmlnLFxuICBMb2dnaW5nQ29uZmlnLFxuICBMb2dPdXRwdXQsXG4gIFNlY3VyaXR5Q29uZmlnLFxuICBQZXJmb3JtYW5jZUNvbmZpZyxcbiAgQWdlbnRUeXBlLFxuICBDb25maWdWYWxpZGF0aW9uUmVzdWx0LFxuICBDb25maWdWYWxpZGF0aW9uRXJyb3IsXG4gIENvbmZpZ1ZhbGlkYXRpb25XYXJuaW5nLFxufSBmcm9tICcuL2NvbmZpZy5qcyc7XG5cbi8vIFVJLXJlbGF0ZWQgdHlwZXNcbmV4cG9ydCB0eXBlIHtcbiAgVUlUaGVtZSxcbiAgVUlDb2xvclBhbGV0dGUsXG4gIFVJVHlwb2dyYXBoeSxcbiAgVUlTcGFjaW5nLFxuICBVSUJvcmRlcnMsXG4gIFVJQW5pbWF0aW9ucyxcbiAgVUlBbmltYXRpb25Db25maWcsXG4gIFVJQ29tcG9uZW50U3R5bGVzLFxuICBVSUJ1dHRvblN0eWxlcyxcbiAgVUlJbnB1dFN0eWxlcyxcbiAgVUlUYWJsZVN0eWxlcyxcbiAgVUlNb2RhbFN0eWxlcyxcbiAgVUlOYXZpZ2F0aW9uU3R5bGVzLFxuICBVSUNhcmRTdHlsZXMsXG4gIFVJUHJvZ3Jlc3NTdHlsZXMsXG4gIFVJQ29tcG9uZW50VmFyaWFudCxcbiAgVUlDb21wb25lbnRTaXplLFxuICBVSUNvbXBvbmVudFN0YXRlLFxuICBVSUNvbXBvbmVudCxcbiAgU2NyZWVuU3RhdGUsXG4gIEZvcm1TdGF0ZSxcbiAgTW9kYWxTdGF0ZSxcbiAgTm90aWZpY2F0aW9uU3RhdGUsXG4gIE5vdGlmaWNhdGlvbkFjdGlvbixcbiAgRmlsdGVyU3RhdGUsXG4gIEZpbHRlck9wdGlvbixcbiAgUGFnaW5hdGlvblN0YXRlLFxuICBVSUV2ZW50SGFuZGxlcnMsXG4gIFVJQ2xpY2tFdmVudCxcbiAgVUlDaGFuZ2VFdmVudCxcbiAgVUlGb2N1c0V2ZW50LFxuICBVSUJsdXJFdmVudCxcbiAgVUlLZXlib2FyZEV2ZW50LFxuICBVSVN1Ym1pdEV2ZW50LFxufSBmcm9tICcuL3VpLmpzJztcblxuLyoqXG4gKiBDb21tb24gdXRpbGl0eSB0eXBlcyB1c2VkIGFjcm9zcyB0aGUgQ0xJIHN5c3RlbVxuICovXG5cbi8qKlxuICogR2VuZXJpYyByZXN1bHQgdHlwZSBmb3Igb3BlcmF0aW9ucyB0aGF0IGNhbiBzdWNjZWVkIG9yIGZhaWxcbiAqL1xuZXhwb3J0IHR5cGUgUmVzdWx0PFQsIEUgPSBFcnJvcj4gPSBcbiAgfCB7IHN1Y2Nlc3M6IHRydWU7IGRhdGE6IFQgfVxuICB8IHsgc3VjY2VzczogZmFsc2U7IGVycm9yOiBFIH07XG5cbi8qKlxuICogR2VuZXJpYyBhc3luYyByZXN1bHQgdHlwZVxuICovXG5leHBvcnQgdHlwZSBBc3luY1Jlc3VsdDxULCBFID0gRXJyb3I+ID0gUHJvbWlzZTxSZXN1bHQ8VCwgRT4+O1xuXG4vKipcbiAqIEdlbmVyaWMgY2FsbGJhY2sgZnVuY3Rpb24gdHlwZVxuICovXG5leHBvcnQgdHlwZSBDYWxsYmFjazxUID0gdm9pZD4gPSAoZXJyb3I/OiBFcnJvciwgcmVzdWx0PzogVCkgPT4gdm9pZDtcblxuLyoqXG4gKiBHZW5lcmljIGV2ZW50IGVtaXR0ZXIgdHlwZVxuICovXG5leHBvcnQgdHlwZSBFdmVudEVtaXR0ZXI8VCBleHRlbmRzIFJlY29yZDxzdHJpbmcsIHVua25vd25bXT4gPSBSZWNvcmQ8c3RyaW5nLCB1bmtub3duW10+PiA9IHtcbiAgb248SyBleHRlbmRzIGtleW9mIFQ+KGV2ZW50OiBLLCBsaXN0ZW5lcjogKC4uLmFyZ3M6IFRbS10pID0+IHZvaWQpOiB2b2lkO1xuICBvZmY8SyBleHRlbmRzIGtleW9mIFQ+KGV2ZW50OiBLLCBsaXN0ZW5lcjogKC4uLmFyZ3M6IFRbS10pID0+IHZvaWQpOiB2b2lkO1xuICBlbWl0PEsgZXh0ZW5kcyBrZXlvZiBUPihldmVudDogSywgLi4uYXJnczogVFtLXSk6IHZvaWQ7XG59O1xuXG4vKipcbiAqIEdlbmVyaWMgZGlzcG9zYWJsZSByZXNvdXJjZSB0eXBlXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgRGlzcG9zYWJsZSB7XG4gIGRpc3Bvc2UoKTogdm9pZCB8IFByb21pc2U8dm9pZD47XG59XG5cbi8qKlxuICogR2VuZXJpYyBjYW5jZWxhYmxlIG9wZXJhdGlvbiB0eXBlXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgQ2FuY2VsYWJsZSB7XG4gIGNhbmNlbCgpOiB2b2lkO1xuICByZWFkb25seSBpc0NhbmNlbGVkOiBib29sZWFuO1xufVxuXG4vKipcbiAqIFByb2dyZXNzIHJlcG9ydGluZyBpbnRlcmZhY2VcbiAqL1xuZXhwb3J0IGludGVyZmFjZSBQcm9ncmVzc1JlcG9ydGVyIHtcbiAgcmVwb3J0KHByb2dyZXNzOiBQcm9ncmVzc0luZm8pOiB2b2lkO1xufVxuXG4vKipcbiAqIFByb2dyZXNzIGluZm9ybWF0aW9uXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgUHJvZ3Jlc3NJbmZvIHtcbiAgLyoqIEN1cnJlbnQgcHJvZ3Jlc3MgKDAtMTAwKSAqL1xuICBwZXJjZW50YWdlOiBudW1iZXI7XG4gIFxuICAvKiogUHJvZ3Jlc3MgbWVzc2FnZSAqL1xuICBtZXNzYWdlPzogc3RyaW5nO1xuICBcbiAgLyoqIEN1cnJlbnQgc3RlcCAqL1xuICBzdGVwPzogbnVtYmVyO1xuICBcbiAgLyoqIFRvdGFsIHN0ZXBzICovXG4gIHRvdGFsU3RlcHM/OiBudW1iZXI7XG4gIFxuICAvKiogQWRkaXRpb25hbCBkYXRhICovXG4gIGRhdGE/OiB1bmtub3duO1xufVxuXG4vKipcbiAqIFZhbGlkYXRpb24gcmVzdWx0IHR5cGVcbiAqL1xuZXhwb3J0IGludGVyZmFjZSBWYWxpZGF0aW9uUmVzdWx0IHtcbiAgLyoqIFdoZXRoZXIgdmFsaWRhdGlvbiBwYXNzZWQgKi9cbiAgdmFsaWQ6IGJvb2xlYW47XG4gIFxuICAvKiogVmFsaWRhdGlvbiBlcnJvcnMgKi9cbiAgZXJyb3JzOiBWYWxpZGF0aW9uRXJyb3JbXTtcbiAgXG4gIC8qKiBWYWxpZGF0aW9uIHdhcm5pbmdzICovXG4gIHdhcm5pbmdzOiBWYWxpZGF0aW9uV2FybmluZ1tdO1xufVxuXG4vKipcbiAqIFZhbGlkYXRpb24gZXJyb3JcbiAqL1xuZXhwb3J0IGludGVyZmFjZSBWYWxpZGF0aW9uRXJyb3Ige1xuICAvKiogRXJyb3IgbWVzc2FnZSAqL1xuICBtZXNzYWdlOiBzdHJpbmc7XG4gIFxuICAvKiogRXJyb3IgY29kZSAqL1xuICBjb2RlOiBzdHJpbmc7XG4gIFxuICAvKiogRmllbGQgcGF0aCAqL1xuICBwYXRoPzogc3RyaW5nO1xuICBcbiAgLyoqIEV4cGVjdGVkIHZhbHVlICovXG4gIGV4cGVjdGVkPzogdW5rbm93bjtcbiAgXG4gIC8qKiBBY3R1YWwgdmFsdWUgKi9cbiAgYWN0dWFsPzogdW5rbm93bjtcbn1cblxuLyoqXG4gKiBWYWxpZGF0aW9uIHdhcm5pbmdcbiAqL1xuZXhwb3J0IGludGVyZmFjZSBWYWxpZGF0aW9uV2FybmluZyB7XG4gIC8qKiBXYXJuaW5nIG1lc3NhZ2UgKi9cbiAgbWVzc2FnZTogc3RyaW5nO1xuICBcbiAgLyoqIFdhcm5pbmcgY29kZSAqL1xuICBjb2RlOiBzdHJpbmc7XG4gIFxuICAvKiogRmllbGQgcGF0aCAqL1xuICBwYXRoPzogc3RyaW5nO1xuICBcbiAgLyoqIFN1Z2dlc3RlZCBhY3Rpb24gKi9cbiAgc3VnZ2VzdGlvbj86IHN0cmluZztcbn1cblxuLyoqXG4gKiBUaW1lc3RhbXAgdHlwZVxuICovXG5leHBvcnQgdHlwZSBUaW1lc3RhbXAgPSBudW1iZXIgfCBEYXRlIHwgc3RyaW5nO1xuXG4vKipcbiAqIER1cmF0aW9uIHR5cGUgKGluIG1pbGxpc2Vjb25kcylcbiAqL1xuZXhwb3J0IHR5cGUgRHVyYXRpb24gPSBudW1iZXI7XG5cbi8qKlxuICogVVJMIHR5cGVcbiAqL1xuZXhwb3J0IHR5cGUgVVJMID0gc3RyaW5nO1xuXG4vKipcbiAqIEZpbGUgcGF0aCB0eXBlXG4gKi9cbmV4cG9ydCB0eXBlIEZpbGVQYXRoID0gc3RyaW5nO1xuXG4vKipcbiAqIERpcmVjdG9yeSBwYXRoIHR5cGVcbiAqL1xuZXhwb3J0IHR5cGUgRGlyZWN0b3J5UGF0aCA9IHN0cmluZztcblxuLyoqXG4gKiBTZW12ZXIgdmVyc2lvbiBzdHJpbmcgdHlwZVxuICovXG5leHBvcnQgdHlwZSBWZXJzaW9uID0gc3RyaW5nO1xuXG4vKipcbiAqIFVVSUQgc3RyaW5nIHR5cGVcbiAqL1xuZXhwb3J0IHR5cGUgVVVJRCA9IHN0cmluZztcblxuLyoqXG4gKiBKU09OLXNlcmlhbGl6YWJsZSB2YWx1ZSB0eXBlXG4gKi9cbmV4cG9ydCB0eXBlIEpTT05WYWx1ZSA9IFxuICB8IHN0cmluZyBcbiAgfCBudW1iZXIgXG4gIHwgYm9vbGVhbiBcbiAgfCBudWxsIFxuICB8IEpTT05WYWx1ZVtdIFxuICB8IHsgW2tleTogc3RyaW5nXTogSlNPTlZhbHVlIH07XG5cbi8qKlxuICogRGVlcCBwYXJ0aWFsIHR5cGUgdXRpbGl0eVxuICovXG5leHBvcnQgdHlwZSBEZWVwUGFydGlhbDxUPiA9IHtcbiAgW1AgaW4ga2V5b2YgVF0/OiBUW1BdIGV4dGVuZHMgb2JqZWN0ID8gRGVlcFBhcnRpYWw8VFtQXT4gOiBUW1BdO1xufTtcblxuLyoqXG4gKiBEZWVwIHJlYWRvbmx5IHR5cGUgdXRpbGl0eVxuICovXG5leHBvcnQgdHlwZSBEZWVwUmVhZG9ubHk8VD4gPSB7XG4gIHJlYWRvbmx5IFtQIGluIGtleW9mIFRdOiBUW1BdIGV4dGVuZHMgb2JqZWN0ID8gRGVlcFJlYWRvbmx5PFRbUF0+IDogVFtQXTtcbn07XG5cbi8qKlxuICogUmVxdWlyZWQga2V5cyB0eXBlIHV0aWxpdHlcbiAqL1xuZXhwb3J0IHR5cGUgUmVxdWlyZWRLZXlzPFQsIEsgZXh0ZW5kcyBrZXlvZiBUPiA9IFQgJiBSZXF1aXJlZDxQaWNrPFQsIEs+PjtcblxuLyoqXG4gKiBPcHRpb25hbCBrZXlzIHR5cGUgdXRpbGl0eVxuICovXG5leHBvcnQgdHlwZSBPcHRpb25hbEtleXM8VCwgSyBleHRlbmRzIGtleW9mIFQ+ID0gT21pdDxULCBLPiAmIFBhcnRpYWw8UGljazxULCBLPj47XG5cbi8qKlxuICogTm9uLWVtcHR5IGFycmF5IHR5cGUgdXRpbGl0eVxuICovXG5leHBvcnQgdHlwZSBOb25FbXB0eUFycmF5PFQ+ID0gW1QsIC4uLlRbXV07XG5cbi8qKlxuICogVHVwbGUgdG8gdW5pb24gdHlwZSB1dGlsaXR5XG4gKi9cbmV4cG9ydCB0eXBlIFR1cGxlVG9VbmlvbjxUIGV4dGVuZHMgcmVhZG9ubHkgdW5rbm93bltdPiA9IFRbbnVtYmVyXTtcblxuLyoqXG4gKiBFeGFjdCB0eXBlIHV0aWxpdHkgLSBwcmV2ZW50cyBleHRyYSBwcm9wZXJ0aWVzXG4gKi9cbmV4cG9ydCB0eXBlIEV4YWN0PFQsIFU+ID0gVCBleHRlbmRzIFUgPyAoVSBleHRlbmRzIFQgPyBUIDogbmV2ZXIpIDogbmV2ZXI7Il0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBQSIsImlnbm9yZUxpc3QiOltdfQ==