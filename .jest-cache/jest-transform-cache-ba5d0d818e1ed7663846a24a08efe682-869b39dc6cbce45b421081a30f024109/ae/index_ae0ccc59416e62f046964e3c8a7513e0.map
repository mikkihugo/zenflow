{"version":3,"names":[],"sources":["/home/mhugo/code/claude-code-flow/src/cli/types/index.ts"],"sourcesContent":["/**\n * CLI Types Index\n * \n * This module re-exports all CLI type definitions for convenient importing.\n * Follows Google's TypeScript style guide with clear barrel exports.\n */\n\n// Command-related types\nexport type {\n  CommandConfig,\n  CommandFlagConfig,\n  CommandContext,\n  CommandResult,\n  CommandFlags,\n  CommandMetadata,\n  CommandHandler,\n  CommandExecutionStats,\n  CommandValidationResult,\n  CommandRegistry,\n} from './command.js';\n\n// Configuration-related types\nexport type {\n  CliConfig,\n  PluginConfig,\n  SwarmConfig,\n  DatabaseConfig,\n  SSLConfig,\n  UIConfig,\n  LoggingConfig,\n  LogOutput,\n  SecurityConfig,\n  PerformanceConfig,\n  AgentType,\n  ConfigValidationResult,\n  ConfigValidationError,\n  ConfigValidationWarning,\n} from './config.js';\n\n// UI-related types\nexport type {\n  UITheme,\n  UIColorPalette,\n  UITypography,\n  UISpacing,\n  UIBorders,\n  UIAnimations,\n  UIAnimationConfig,\n  UIComponentStyles,\n  UIButtonStyles,\n  UIInputStyles,\n  UITableStyles,\n  UIModalStyles,\n  UINavigationStyles,\n  UICardStyles,\n  UIProgressStyles,\n  UIComponentVariant,\n  UIComponentSize,\n  UIComponentState,\n  UIComponent,\n  ScreenState,\n  FormState,\n  ModalState,\n  NotificationState,\n  NotificationAction,\n  FilterState,\n  FilterOption,\n  PaginationState,\n  UIEventHandlers,\n  UIClickEvent,\n  UIChangeEvent,\n  UIFocusEvent,\n  UIBlurEvent,\n  UIKeyboardEvent,\n  UISubmitEvent,\n} from './ui.js';\n\n/**\n * Common utility types used across the CLI system\n */\n\n/**\n * Generic result type for operations that can succeed or fail\n */\nexport type Result<T, E = Error> = \n  | { success: true; data: T }\n  | { success: false; error: E };\n\n/**\n * Generic async result type\n */\nexport type AsyncResult<T, E = Error> = Promise<Result<T, E>>;\n\n/**\n * Generic callback function type\n */\nexport type Callback<T = void> = (error?: Error, result?: T) => void;\n\n/**\n * Generic event emitter type\n */\nexport type EventEmitter<T extends Record<string, unknown[]> = Record<string, unknown[]>> = {\n  on<K extends keyof T>(event: K, listener: (...args: T[K]) => void): void;\n  off<K extends keyof T>(event: K, listener: (...args: T[K]) => void): void;\n  emit<K extends keyof T>(event: K, ...args: T[K]): void;\n};\n\n/**\n * Generic disposable resource type\n */\nexport interface Disposable {\n  dispose(): void | Promise<void>;\n}\n\n/**\n * Generic cancelable operation type\n */\nexport interface Cancelable {\n  cancel(): void;\n  readonly isCanceled: boolean;\n}\n\n/**\n * Progress reporting interface\n */\nexport interface ProgressReporter {\n  report(progress: ProgressInfo): void;\n}\n\n/**\n * Progress information\n */\nexport interface ProgressInfo {\n  /** Current progress (0-100) */\n  percentage: number;\n  \n  /** Progress message */\n  message?: string;\n  \n  /** Current step */\n  step?: number;\n  \n  /** Total steps */\n  totalSteps?: number;\n  \n  /** Additional data */\n  data?: unknown;\n}\n\n/**\n * Validation result type\n */\nexport interface ValidationResult {\n  /** Whether validation passed */\n  valid: boolean;\n  \n  /** Validation errors */\n  errors: ValidationError[];\n  \n  /** Validation warnings */\n  warnings: ValidationWarning[];\n}\n\n/**\n * Validation error\n */\nexport interface ValidationError {\n  /** Error message */\n  message: string;\n  \n  /** Error code */\n  code: string;\n  \n  /** Field path */\n  path?: string;\n  \n  /** Expected value */\n  expected?: unknown;\n  \n  /** Actual value */\n  actual?: unknown;\n}\n\n/**\n * Validation warning\n */\nexport interface ValidationWarning {\n  /** Warning message */\n  message: string;\n  \n  /** Warning code */\n  code: string;\n  \n  /** Field path */\n  path?: string;\n  \n  /** Suggested action */\n  suggestion?: string;\n}\n\n/**\n * Timestamp type\n */\nexport type Timestamp = number | Date | string;\n\n/**\n * Duration type (in milliseconds)\n */\nexport type Duration = number;\n\n/**\n * URL type\n */\nexport type URL = string;\n\n/**\n * File path type\n */\nexport type FilePath = string;\n\n/**\n * Directory path type\n */\nexport type DirectoryPath = string;\n\n/**\n * Semver version string type\n */\nexport type Version = string;\n\n/**\n * UUID string type\n */\nexport type UUID = string;\n\n/**\n * JSON-serializable value type\n */\nexport type JSONValue = \n  | string \n  | number \n  | boolean \n  | null \n  | JSONValue[] \n  | { [key: string]: JSONValue };\n\n/**\n * Deep partial type utility\n */\nexport type DeepPartial<T> = {\n  [P in keyof T]?: T[P] extends object ? DeepPartial<T[P]> : T[P];\n};\n\n/**\n * Deep readonly type utility\n */\nexport type DeepReadonly<T> = {\n  readonly [P in keyof T]: T[P] extends object ? DeepReadonly<T[P]> : T[P];\n};\n\n/**\n * Required keys type utility\n */\nexport type RequiredKeys<T, K extends keyof T> = T & Required<Pick<T, K>>;\n\n/**\n * Optional keys type utility\n */\nexport type OptionalKeys<T, K extends keyof T> = Omit<T, K> & Partial<Pick<T, K>>;\n\n/**\n * Non-empty array type utility\n */\nexport type NonEmptyArray<T> = [T, ...T[]];\n\n/**\n * Tuple to union type utility\n */\nexport type TupleToUnion<T extends readonly unknown[]> = T[number];\n\n/**\n * Exact type utility - prevents extra properties\n */\nexport type Exact<T, U> = T extends U ? (U extends T ? T : never) : never;"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA","ignoreList":[]}