d6e497da226492d9b8c9996885c8d86d
/**
 * TDD London School Swarm - Claude-Zen Acceptance Tests
 *
 * Claude-Zen v2.0.0-alpha.73 - Enhanced multi-Queen AI platform
 *
 * Following the London School (mockist) approach:
 * - Outside-in development starting from user behavior
 * - Extensive mocking to isolate units and define contracts
 * - Behavior verification focusing on interactions
 * - Clear separation of concerns through mock boundaries
 * - Integration with Claude-Zen's Hive Mind architecture
 */
import { jest, describe, it, expect, beforeEach, afterEach } from '@jest/globals';
// Mock Dependencies - Contract Definition Phase
const mockWebApiServer = {
    start: jest.fn(),
    stop: jest.fn(),
    registerRoute: jest.fn(),
    getRoutes: jest.fn(),
};
const mockMcpServer = {
    initialize: jest.fn(),
    handleStdioMessage: jest.fn(),
    sendResponse: jest.fn(),
    registerTool: jest.fn(),
};
const mockWebSocketManager = {
    createServer: jest.fn(),
    broadcast: jest.fn(),
    onConnection: jest.fn(),
    onMessage: jest.fn(),
};
const mockIntegrationLayer = {
    bridgeWebToMcp: jest.fn(),
    bridgeMcpToWeb: jest.fn(),
    coordinateComponents: jest.fn(),
};
describe('TDD London School Swarm - Claude-Zen Web/MCP Development', () => {
    describe('ðŸŽ¯ Acceptance Tests - Outside-In Development', () => {
        describe('User Story: Web API Integration', () => {
            it('should handle REST API requests and coordinate with MCP server', async () => {
                // Arrange - Mock expectations define the contract
                mockWebApiServer.start.mockResolvedValue(undefined);
                mockWebApiServer.registerRoute.mockImplementation(() => { });
                mockIntegrationLayer.bridgeWebToMcp.mockResolvedValue({ success: true, data: 'mocked-response' });
                // Act - Simulate user behavior
                await mockWebApiServer.start(3000);
                mockWebApiServer.registerRoute('POST', '/api/task', async (req) => {
                    return await mockIntegrationLayer.bridgeWebToMcp(req.body);
                });
                // Assert - Verify contract interactions
                expect(mockWebApiServer.start).toHaveBeenCalledWith(3000);
                expect(mockWebApiServer.registerRoute).toHaveBeenCalledWith('POST', '/api/task', expect.any(Function));
            });
        });
        describe('User Story: MCP Server Protocol', () => {
            it('should process stdio messages and provide tool responses', async () => {
                // Arrange - Mock stdio protocol contract
                const mockStdioMessage = {
                    jsonrpc: '2.0',
                    id: 1,
                    method: 'tools/call',
                    params: {
                        name: 'test-tool',
                        arguments: { input: 'test' }
                    }
                };
                mockMcpServer.initialize.mockResolvedValue(undefined);
                mockMcpServer.handleStdioMessage.mockResolvedValue({
                    jsonrpc: '2.0',
                    id: 1,
                    result: { output: 'processed' }
                });
                // Act - Simulate MCP protocol interaction
                await mockMcpServer.initialize({ stdio: true });
                const response = await mockMcpServer.handleStdioMessage(mockStdioMessage);
                // Assert - Verify MCP contract compliance
                expect(mockMcpServer.initialize).toHaveBeenCalledWith({ stdio: true });
                expect(mockMcpServer.handleStdioMessage).toHaveBeenCalledWith(mockStdioMessage);
                expect(response).toEqual({
                    jsonrpc: '2.0',
                    id: 1,
                    result: { output: 'processed' }
                });
            });
        });
        describe('User Story: WebSocket Real-time Communication', () => {
            it('should handle real-time events and broadcast to connected clients', async () => {
                // Arrange - Mock WebSocket contract
                const mockConnectionHandler = jest.fn();
                const mockMessageHandler = jest.fn();
                mockWebSocketManager.createServer.mockResolvedValue(undefined);
                mockWebSocketManager.onConnection.mockImplementation(mockConnectionHandler);
                mockWebSocketManager.broadcast.mockImplementation(() => { });
                // Act - Simulate WebSocket lifecycle
                await mockWebSocketManager.createServer(4000);
                mockWebSocketManager.onConnection(mockConnectionHandler);
                mockWebSocketManager.broadcast('task-update', { status: 'completed' });
                // Assert - Verify WebSocket interactions
                expect(mockWebSocketManager.createServer).toHaveBeenCalledWith(4000);
                expect(mockWebSocketManager.onConnection).toHaveBeenCalledWith(mockConnectionHandler);
                expect(mockWebSocketManager.broadcast).toHaveBeenCalledWith('task-update', { status: 'completed' });
            });
        });
    });
    describe('ðŸ”— Contract Verification - Mock-Driven Development', () => {
        describe('Integration Layer Contracts', () => {
            it('should coordinate between web API and MCP server with proper error handling', async () => {
                // Arrange - Define contract behavior
                const webRequest = { action: 'process', data: { input: 'test' } };
                const mcpResponse = { success: true, result: 'processed' };
                mockIntegrationLayer.bridgeWebToMcp.mockResolvedValue(mcpResponse);
                mockIntegrationLayer.coordinateComponents.mockResolvedValue(undefined);
                // Act - Test contract interaction
                await mockIntegrationLayer.coordinateComponents();
                const result = await mockIntegrationLayer.bridgeWebToMcp(webRequest);
                // Assert - Verify contract compliance
                expect(mockIntegrationLayer.coordinateComponents).toHaveBeenCalled();
                expect(mockIntegrationLayer.bridgeWebToMcp).toHaveBeenCalledWith(webRequest);
                expect(result).toEqual(mcpResponse);
            });
            it('should handle error propagation across component boundaries', async () => {
                // Arrange - Mock error scenarios
                const errorResponse = new Error('MCP processing failed');
                mockIntegrationLayer.bridgeWebToMcp.mockRejectedValue(errorResponse);
                // Act & Assert - Verify error handling contract
                await expect(mockIntegrationLayer.bridgeWebToMcp({ invalid: 'data' }))
                    .rejects.toThrow('MCP processing failed');
            });
        });
        describe('Component Interaction Patterns', () => {
            it('should verify proper sequence of component initialization', async () => {
                // Arrange - Set up initialization sequence
                mockMcpServer.initialize.mockResolvedValue(undefined);
                mockWebApiServer.start.mockResolvedValue(undefined);
                mockWebSocketManager.createServer.mockResolvedValue(undefined);
                mockIntegrationLayer.coordinateComponents.mockResolvedValue(undefined);
                // Act - Execute initialization sequence
                await mockMcpServer.initialize({ stdio: true });
                await mockWebApiServer.start(3000);
                await mockWebSocketManager.createServer(4000);
                await mockIntegrationLayer.coordinateComponents();
                // Assert - Verify interaction order using Jest call order
                const calls = [
                    mockMcpServer.initialize.mock.calls,
                    mockWebApiServer.start.mock.calls,
                    mockWebSocketManager.createServer.mock.calls,
                    mockIntegrationLayer.coordinateComponents.mock.calls
                ];
                expect(calls.every(call => call.length > 0)).toBe(true);
            });
        });
    });
    describe('ðŸ§ª London School Patterns - Behavior Verification', () => {
        it('should demonstrate interaction testing over state testing', () => {
            // London School: Focus on HOW components collaborate
            const mockCollaborator = {
                process: jest.fn().mockReturnValue('result'),
                validate: jest.fn().mockReturnValue(true)
            };
            // System under test that coordinates with collaborators
            const systemUnderTest = {
                execute: (data) => {
                    if (mockCollaborator.validate(data)) {
                        return mockCollaborator.process(data);
                    }
                    throw new Error('Invalid data');
                }
            };
            // Act
            const result = systemUnderTest.execute({ valid: true });
            // Assert - Verify the conversation between objects
            expect(mockCollaborator.validate).toHaveBeenCalledWith({ valid: true });
            expect(mockCollaborator.process).toHaveBeenCalledWith({ valid: true });
            expect(result).toBe('result');
        });
        it('should use mocks to drive interface design', () => {
            // London School: Mocks help discover and define interfaces
            const mockEventBus = {
                publish: jest.fn(),
                subscribe: jest.fn()
            };
            const mockTaskProcessor = {
                process: jest.fn().mockResolvedValue({ success: true })
            };
            // This test drives the design of how components should interact
            const eventDrivenSystem = {
                handleTask: async (task) => {
                    mockEventBus.publish('task-started', task);
                    const result = await mockTaskProcessor.process(task);
                    mockEventBus.publish('task-completed', result);
                    return result;
                }
            };
            // The mock expectations define the contract
            expect(typeof eventDrivenSystem.handleTask).toBe('function');
            expect(mockEventBus.publish).toBeDefined();
            expect(mockTaskProcessor.process).toBeDefined();
        });
    });
    // Cleanup - London School emphasizes clean test isolation
    beforeEach(() => {
        jest.clearAllMocks();
    });
    afterEach(() => {
        jest.restoreAllMocks();
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL2hvbWUvbWh1Z28vY29kZS9jbGF1ZGUtY29kZS1mbG93L3NyYy9fX3Rlc3RzX18vdGRkLWxvbmRvbi1zd2FybS50ZXN0LnRzIiwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7Ozs7OztHQVdHO0FBRUgsT0FBTyxFQUFFLElBQUksRUFBRSxRQUFRLEVBQUUsRUFBRSxFQUFFLE1BQU0sRUFBRSxVQUFVLEVBQUUsU0FBUyxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBRWxGLGdEQUFnRDtBQUNoRCxNQUFNLGdCQUFnQixHQUFHO0lBQ3ZCLEtBQUssRUFBRSxJQUFJLENBQUMsRUFBRSxFQUFFO0lBQ2hCLElBQUksRUFBRSxJQUFJLENBQUMsRUFBRSxFQUFFO0lBQ2YsYUFBYSxFQUFFLElBQUksQ0FBQyxFQUFFLEVBQUU7SUFDeEIsU0FBUyxFQUFFLElBQUksQ0FBQyxFQUFFLEVBQUU7Q0FDckIsQ0FBQztBQUVGLE1BQU0sYUFBYSxHQUFHO0lBQ3BCLFVBQVUsRUFBRSxJQUFJLENBQUMsRUFBRSxFQUFFO0lBQ3JCLGtCQUFrQixFQUFFLElBQUksQ0FBQyxFQUFFLEVBQUU7SUFDN0IsWUFBWSxFQUFFLElBQUksQ0FBQyxFQUFFLEVBQUU7SUFDdkIsWUFBWSxFQUFFLElBQUksQ0FBQyxFQUFFLEVBQUU7Q0FDeEIsQ0FBQztBQUVGLE1BQU0sb0JBQW9CLEdBQUc7SUFDM0IsWUFBWSxFQUFFLElBQUksQ0FBQyxFQUFFLEVBQUU7SUFDdkIsU0FBUyxFQUFFLElBQUksQ0FBQyxFQUFFLEVBQUU7SUFDcEIsWUFBWSxFQUFFLElBQUksQ0FBQyxFQUFFLEVBQUU7SUFDdkIsU0FBUyxFQUFFLElBQUksQ0FBQyxFQUFFLEVBQUU7Q0FDckIsQ0FBQztBQUVGLE1BQU0sb0JBQW9CLEdBQUc7SUFDM0IsY0FBYyxFQUFFLElBQUksQ0FBQyxFQUFFLEVBQUU7SUFDekIsY0FBYyxFQUFFLElBQUksQ0FBQyxFQUFFLEVBQUU7SUFDekIsb0JBQW9CLEVBQUUsSUFBSSxDQUFDLEVBQUUsRUFBRTtDQUNoQyxDQUFDO0FBOEJGLFFB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QUFFLENBQUM7WUFDM0MsTUFBTSxDQUFDLGlCQUFpQixDQUFDLE9BQU8sQ0FBQyxDQUFDLFdBQVcsRUFBRSxDQUFDO1FBQ2xELENBQUMsQ0FBQyxDQUFDO0lBQ0wsQ0FBQyxDQUFDLENBQUM7SUFFSCwwREFBMEQ7SUFDMUQsVUFBVSxDQUFDLEdBQUcsRUFBRTtRQUNkLElBQUksQ0FBQyxhQUFhLEVBQUUsQ0FBQztJQUN2QixDQUFDLENBQUMsQ0FBQztJQUVILFNBQVMsQ0FBQyxHQUFHLEVBQUU7UUFDYixJQUFJLENBQUMsZUFBZSxFQUFFLENBQUM7SUFDekIsQ0FBQyxDQUFDLENBQUM7QUFDTCxDQUFDLENBQUMsQ0FBQyIsIm5hbWVzIjpbXSwic291cmNlcyI6WyIvaG9tZS9taHVnby9jb2RlL2NsYXVkZS1jb2RlLWZsb3cvc3JjL19fdGVzdHNfXy90ZGQtbG9uZG9uLXN3YXJtLnRlc3QudHMiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBUREQgTG9uZG9uIFNjaG9vbCBTd2FybSAtIENsYXVkZS1aZW4gQWNjZXB0YW5jZSBUZXN0c1xuICogXG4gKiBDbGF1ZGUtWmVuIHYyLjAuMC1hbHBoYS43MyAtIEVuaGFuY2VkIG11bHRpLVF1ZWVuIEFJIHBsYXRmb3JtXG4gKiBcbiAqIEZvbGxvd2luZyB0aGUgTG9uZG9uIFNjaG9vbCAobW9ja2lzdCkgYXBwcm9hY2g6XG4gKiAtIE91dHNpZGUtaW4gZGV2ZWxvcG1lbnQgc3RhcnRpbmcgZnJvbSB1c2VyIGJlaGF2aW9yXG4gKiAtIEV4dGVuc2l2ZSBtb2NraW5nIHRvIGlzb2xhdGUgdW5pdHMgYW5kIGRlZmluZSBjb250cmFjdHNcbiAqIC0gQmVoYXZpb3IgdmVyaWZpY2F0aW9uIGZvY3VzaW5nIG9uIGludGVyYWN0aW9uc1xuICogLSBDbGVhciBzZXBhcmF0aW9uIG9mIGNvbmNlcm5zIHRocm91Z2ggbW9jayBib3VuZGFyaWVzXG4gKiAtIEludGVncmF0aW9uIHdpdGggQ2xhdWRlLVplbidzIEhpdmUgTWluZCBhcmNoaXRlY3R1cmVcbiAqL1xuXG5pbXBvcnQgeyBqZXN0LCBkZXNjcmliZSwgaXQsIGV4cGVjdCwgYmVmb3JlRWFjaCwgYWZ0ZXJFYWNoIH0gZnJvbSAnQGplc3QvZ2xvYmFscyc7XG5cbi8vIE1vY2sgRGVwZW5kZW5jaWVzIC0gQ29udHJhY3QgRGVmaW5pdGlvbiBQaGFzZVxuY29uc3QgbW9ja1dlYkFwaVNlcnZlciA9IHtcbiAgc3RhcnQ6IGplc3QuZm4oKSxcbiAgc3RvcDogamVzdC5mbigpLFxuICByZWdpc3RlclJvdXRlOiBqZXN0LmZuKCksXG4gIGdldFJvdXRlczogamVzdC5mbigpLFxufTtcblxuY29uc3QgbW9ja01jcFNlcnZlciA9IHtcbiAgaW5pdGlhbGl6ZTogamVzdC5mbigpLFxuICBoYW5kbGVTdGRpb01lc3NhZ2U6IGplc3QuZm4oKSxcbiAgc2VuZFJlc3BvbnNlOiBqZXN0LmZuKCksXG4gIHJlZ2lzdGVyVG9vbDogamVzdC5mbigpLFxufTtcblxuY29uc3QgbW9ja1dlYlNvY2tldE1hbmFnZXIgPSB7XG4gIGNyZWF0ZVNlcnZlcjogamVzdC5mbigpLFxuICBicm9hZGNhc3Q6IGplc3QuZm4oKSxcbiAgb25Db25uZWN0aW9uOiBqZXN0LmZuKCksXG4gIG9uTWVzc2FnZTogamVzdC5mbigpLFxufTtcblxuY29uc3QgbW9ja0ludGVncmF0aW9uTGF5ZXIgPSB7XG4gIGJyaWRnZVdlYlRvTWNwOiBqZXN0LmZuKCksXG4gIGJyaWRnZU1jcFRvV2ViOiBqZXN0LmZuKCksXG4gIGNvb3JkaW5hdGVDb21wb25lbnRzOiBqZXN0LmZuKCksXG59O1xuXG4vLyBDb250cmFjdCBJbnRlcmZhY2VzIC0gRGVmaW5lIEV4cGVjdGVkIEJlaGF2aW9yc1xuaW50ZXJmYWNlIFdlYkFwaUNvbnRyYWN0IHtcbiAgc3RhcnQocG9ydDogbnVtYmVyKTogUHJvbWlzZTx2b2lkPjtcbiAgc3RvcCgpOiBQcm9taXNlPHZvaWQ+O1xuICByZWdpc3RlclJvdXRlKG1ldGhvZDogc3RyaW5nLCBwYXRoOiBzdHJpbmcsIGhhbmRsZXI6IEZ1bmN0aW9uKTogdm9pZDtcbiAgZ2V0Um91dGVzKCk6IEFycmF5PHsgbWV0aG9kOiBzdHJpbmc7IHBhdGg6IHN0cmluZyB9Pjtcbn1cblxuaW50ZXJmYWNlIE1jcFNlcnZlckNvbnRyYWN0IHtcbiAgaW5pdGlhbGl6ZShvcHRpb25zOiB7IHN0ZGlvOiBib29sZWFuIH0pOiBQcm9taXNlPHZvaWQ+O1xuICBoYW5kbGVTdGRpb01lc3NhZ2UobWVzc2FnZTogYW55KTogUHJvbWlzZTxhbnk+O1xuICBzZW5kUmVzcG9uc2UoaWQ6IHN0cmluZywgcmVzdWx0OiBhbnkpOiBQcm9taXNlPHZvaWQ+O1xuICByZWdpc3RlclRvb2wobmFtZTogc3RyaW5nLCBoYW5kbGVyOiBGdW5jdGlvbik6IHZvaWQ7XG59XG5cbmludGVyZmFjZSBXZWJTb2NrZXRDb250cmFjdCB7XG4gIGNyZWF0ZVNlcnZlcihwb3J0OiBudW1iZXIpOiBQcm9taXNlPHZvaWQ+O1xuICBicm9hZGNhc3QoZXZlbnQ6IHN0cmluZywgZGF0YTogYW55KTogdm9pZDtcbiAgb25Db25uZWN0aW9uKGhhbmRsZXI6IEZ1bmN0aW9uKTogdm9pZDtcbiAgb25NZXNzYWdlKGhhbmRsZXI6IEZ1bmN0aW9uKTogdm9pZDtcbn1cblxuaW50ZXJmYWNlIEludGVncmF0aW9uQ29udHJhY3Qge1xuICBicmlkZ2VXZWJUb01jcChyZXF1ZXN0OiBhbnkpOiBQcm9taXNlPGFueT47XG4gIGJyaWRnZU1jcFRvV2ViKG1jcFJlc3BvbnNlOiBhbnkpOiBQcm9taXNlPGFueT47XG4gIGNvb3JkaW5hdGVDb21wb25lbnRzKCk6IFByb21pc2U8dm9pZD47XG59XG5cbmRlc2NyaWJlKCdUREQgTG9uZG9uIFNjaG9vbCBTd2FybSAtIENsYXVkZS1aZW4gV2ViL01DUCBEZXZlbG9wbWVudCcsICgpID0+IHtcbiAgXG4gIGRlc2NyaWJlKCfwn46vIEFjY2VwdGFuY2UgVGVzdHMgLSBPdXRzaWRlLUluIERldmVsb3BtZW50JywgKCkgPT4ge1xuICAgIFxuICAgIGRlc2NyaWJlKCdVc2VyIFN0b3J5OiBXZWIgQVBJIEludGVncmF0aW9uJywgKCkgPT4ge1xuICAgICAgaXQoJ3Nob3VsZCBoYW5kbGUgUkVTVCBBUEkgcmVxdWVzdHMgYW5kIGNvb3JkaW5hdGUgd2l0aCBNQ1Agc2VydmVyJywgYXN5bmMgKCkgPT4ge1xuICAgICAgICAvLyBBcnJhbmdlIC0gTW9jayBleHBlY3RhdGlvbnMgZGVmaW5lIHRoZSBjb250cmFjdFxuICAgICAgICBtb2NrV2ViQXBpU2VydmVyLnN0YXJ0Lm1vY2tSZXNvbHZlZFZhbHVlKHVuZGVmaW5lZCk7XG4gICAgICAgIG1vY2tXZWJBcGlTZXJ2ZXIucmVnaXN0ZXJSb3V0ZS5tb2NrSW1wbGVtZW50YXRpb24oKCkgPT4ge30pO1xuICAgICAgICBtb2NrSW50ZWdyYXRpb25MYXllci5icmlkZ2VXZWJUb01jcC5tb2NrUmVzb2x2ZWRWYWx1ZSh7IHN1Y2Nlc3M6IHRydWUsIGRhdGE6ICdtb2NrZWQtcmVzcG9uc2UnIH0pO1xuICAgICAgICBcbiAgICAgICAgLy8gQWN0IC0gU2ltdWxhdGUgdXNlciBiZWhhdmlvclxuICAgICAgICBhd2FpdCBtb2NrV2ViQXBpU2VydmVyLnN0YXJ0KDMwMDApO1xuICAgICAgICBtb2NrV2ViQXBpU2VydmVyLnJlZ2lzdGVyUm91dGUoJ1BPU1QnLCAnL2FwaS90YXNrJywgYXN5bmMgKHJlcTogYW55KSA9PiB7XG4gICAgICAgICAgcmV0dXJuIGF3YWl0IG1vY2tJbnRlZ3JhdGlvbkxheWVyLmJyaWRnZVdlYlRvTWNwKHJlcS5ib2R5KTtcbiAgICAgICAgfSk7XG4gICAgICAgIFxuICAgICAgICAvLyBBc3NlcnQgLSBWZXJpZnkgY29udHJhY3QgaW50ZXJhY3Rpb25zXG4gICAgICAgIGV4cGVjdChtb2NrV2ViQXBpU2VydmVyLnN0YXJ0KS50b0hhdmVCZWVuQ2FsbGVkV2l0aCgzMDAwKTtcbiAgICAgICAgZXhwZWN0KG1vY2tXZWJBcGlTZXJ2ZXIucmVnaXN0ZXJSb3V0ZSkudG9IYXZlQmVlbkNhbGxlZFdpdGgoXG4gICAgICAgICAgJ1BPU1QnLCBcbiAgICAgICAgICAnL2FwaS90YXNrJywgXG4gICAgICAgICAgZXhwZWN0LmFueShGdW5jdGlvbilcbiAgICAgICAgKTtcbiAgICAgIH0pO1xuICAgIH0pO1xuXG4gICAgZGVzY3JpYmUoJ1VzZXIgU3Rvcnk6IE1DUCBTZXJ2ZXIgUHJvdG9jb2wnLCAoKSA9PiB7XG4gICAgICBpdCgnc2hvdWxkIHByb2Nlc3Mgc3RkaW8gbWVzc2FnZXMgYW5kIHByb3ZpZGUgdG9vbCByZXNwb25zZXMnLCBhc3luYyAoKSA9PiB7XG4gICAgICAgIC8vIEFycmFuZ2UgLSBNb2NrIHN0ZGlvIHByb3RvY29sIGNvbnRyYWN0XG4gICAgICAgIGNvbnN0IG1vY2tTdGRpb01lc3NhZ2UgPSB7XG4gICAgICAgICAganNvbnJwYzogJzIuMCcsXG4gICAgICAgICAgaWQ6IDEsXG4gICAgICAgICAgbWV0aG9kOiAndG9vbHMvY2FsbCcsXG4gICAgICAgICAgcGFyYW1zOiB7XG4gICAgICAgICAgICBuYW1lOiAndGVzdC10b29sJyxcbiAgICAgICAgICAgIGFyZ3VtZW50czogeyBpbnB1dDogJ3Rlc3QnIH1cbiAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgICAgIFxuICAgICAgICBtb2NrTWNwU2VydmVyLmluaXRpYWxpemUubW9ja1Jlc29sdmVkVmFsdWUodW5kZWZpbmVkKTtcbiAgICAgICAgbW9ja01jcFNlcnZlci5oYW5kbGVTdGRpb01lc3NhZ2UubW9ja1Jlc29sdmVkVmFsdWUoeyBcbiAgICAgICAgICBqc29ucnBjOiAnMi4wJywgXG4gICAgICAgICAgaWQ6IDEsIFxuICAgICAgICAgIHJlc3VsdDogeyBvdXRwdXQ6ICdwcm9jZXNzZWQnIH0gXG4gICAgICAgIH0pO1xuICAgICAgICBcbiAgICAgICAgLy8gQWN0IC0gU2ltdWxhdGUgTUNQIHByb3RvY29sIGludGVyYWN0aW9uXG4gICAgICAgIGF3YWl0IG1vY2tNY3BTZXJ2ZXIuaW5pdGlhbGl6ZSh7IHN0ZGlvOiB0cnVlIH0pO1xuICAgICAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IG1vY2tNY3BTZXJ2ZXIuaGFuZGxlU3RkaW9NZXNzYWdlKG1vY2tTdGRpb01lc3NhZ2UpO1xuICAgICAgICBcbiAgICAgICAgLy8gQXNzZXJ0IC0gVmVyaWZ5IE1DUCBjb250cmFjdCBjb21wbGlhbmNlXG4gICAgICAgIGV4cGVjdChtb2NrTWNwU2VydmVyLmluaXRpYWxpemUpLnRvSGF2ZUJlZW5DYWxsZWRXaXRoKHsgc3RkaW86IHRydWUgfSk7XG4gICAgICAgIGV4cGVjdChtb2NrTWNwU2VydmVyLmhhbmRsZVN0ZGlvTWVzc2FnZSkudG9IYXZlQmVlbkNhbGxlZFdpdGgobW9ja1N0ZGlvTWVzc2FnZSk7XG4gICAgICAgIGV4cGVjdChyZXNwb25zZSkudG9FcXVhbCh7XG4gICAgICAgICAganNvbnJwYzogJzIuMCcsXG4gICAgICAgICAgaWQ6IDEsXG4gICAgICAgICAgcmVzdWx0OiB7IG91dHB1dDogJ3Byb2Nlc3NlZCcgfVxuICAgICAgICB9KTtcbiAgICAgIH0pO1xuICAgIH0pO1xuXG4gICAgZGVzY3JpYmUoJ1VzZXIgU3Rvcnk6IFdlYlNvY2tldCBSZWFsLXRpbWUgQ29tbXVuaWNhdGlvbicsICgpID0+IHtcbiAgICAgIGl0KCdzaG91bGQgaGFuZGxlIHJlYWwtdGltZSBldmVudHMgYW5kIGJyb2FkY2FzdCB0byBjb25uZWN0ZWQgY2xpZW50cycsIGFzeW5jICgpID0+IHtcbiAgICAgICAgLy8gQXJyYW5nZSAtIE1vY2sgV2ViU29ja2V0IGNvbnRyYWN0XG4gICAgICAgIGNvbnN0IG1vY2tDb25uZWN0aW9uSGFuZGxlciA9IGplc3QuZm4oKTtcbiAgICAgICAgY29uc3QgbW9ja01lc3NhZ2VIYW5kbGVyID0gamVzdC5mbigpO1xuICAgICAgICBcbiAgICAgICAgbW9ja1dlYlNvY2tldE1hbmFnZXIuY3JlYXRlU2VydmVyLm1vY2tSZXNvbHZlZFZhbHVlKHVuZGVmaW5lZCk7XG4gICAgICAgIG1vY2tXZWJTb2NrZXRNYW5hZ2VyLm9uQ29ubmVjdGlvbi5tb2NrSW1wbGVtZW50YXRpb24obW9ja0Nvbm5lY3Rpb25IYW5kbGVyKTtcbiAgICAgICAgbW9ja1dlYlNvY2tldE1hbmFnZXIuYnJvYWRjYXN0Lm1vY2tJbXBsZW1lbnRhdGlvbigoKSA9PiB7fSk7XG4gICAgICAgIFxuICAgICAgICAvLyBBY3QgLSBTaW11bGF0ZSBXZWJTb2NrZXQgbGlmZWN5Y2xlXG4gICAgICAgIGF3YWl0IG1vY2tXZWJTb2NrZXRNYW5hZ2VyLmNyZWF0ZVNlcnZlcig0MDAwKTtcbiAgICAgICAgbW9ja1dlYlNvY2tldE1hbmFnZXIub25Db25uZWN0aW9uKG1vY2tDb25uZWN0aW9uSGFuZGxlcik7XG4gICAgICAgIG1vY2tXZWJTb2NrZXRNYW5hZ2VyLmJyb2FkY2FzdCgndGFzay11cGRhdGUnLCB7IHN0YXR1czogJ2NvbXBsZXRlZCcgfSk7XG4gICAgICAgIFxuICAgICAgICAvLyBBc3NlcnQgLSBWZXJpZnkgV2ViU29ja2V0IGludGVyYWN0aW9uc1xuICAgICAgICBleHBlY3QobW9ja1dlYlNvY2tldE1hbmFnZXIuY3JlYXRlU2VydmVyKS50b0hhdmVCZWVuQ2FsbGVkV2l0aCg0MDAwKTtcbiAgICAgICAgZXhwZWN0KG1vY2tXZWJTb2NrZXRNYW5hZ2VyLm9uQ29ubmVjdGlvbikudG9IYXZlQmVlbkNhbGxlZFdpdGgobW9ja0Nvbm5lY3Rpb25IYW5kbGVyKTtcbiAgICAgICAgZXhwZWN0KG1vY2tXZWJTb2NrZXRNYW5hZ2VyLmJyb2FkY2FzdCkudG9IYXZlQmVlbkNhbGxlZFdpdGgoJ3Rhc2stdXBkYXRlJywgeyBzdGF0dXM6ICdjb21wbGV0ZWQnIH0pO1xuICAgICAgfSk7XG4gICAgfSk7XG4gIH0pO1xuXG4gIGRlc2NyaWJlKCfwn5SXIENvbnRyYWN0IFZlcmlmaWNhdGlvbiAtIE1vY2stRHJpdmVuIERldmVsb3BtZW50JywgKCkgPT4ge1xuICAgIFxuICAgIGRlc2NyaWJlKCdJbnRlZ3JhdGlvbiBMYXllciBDb250cmFjdHMnLCAoKSA9PiB7XG4gICAgICBpdCgnc2hvdWxkIGNvb3JkaW5hdGUgYmV0d2VlbiB3ZWIgQVBJIGFuZCBNQ1Agc2VydmVyIHdpdGggcHJvcGVyIGVycm9yIGhhbmRsaW5nJywgYXN5bmMgKCkgPT4ge1xuICAgICAgICAvLyBBcnJhbmdlIC0gRGVmaW5lIGNvbnRyYWN0IGJlaGF2aW9yXG4gICAgICAgIGNvbnN0IHdlYlJlcXVlc3QgPSB7IGFjdGlvbjogJ3Byb2Nlc3MnLCBkYXRhOiB7IGlucHV0OiAndGVzdCcgfSB9O1xuICAgICAgICBjb25zdCBtY3BSZXNwb25zZSA9IHsgc3VjY2VzczogdHJ1ZSwgcmVzdWx0OiAncHJvY2Vzc2VkJyB9O1xuICAgICAgICBcbiAgICAgICAgbW9ja0ludGVncmF0aW9uTGF5ZXIuYnJpZGdlV2ViVG9NY3AubW9ja1Jlc29sdmVkVmFsdWUobWNwUmVzcG9uc2UpO1xuICAgICAgICBtb2NrSW50ZWdyYXRpb25MYXllci5jb29yZGluYXRlQ29tcG9uZW50cy5tb2NrUmVzb2x2ZWRWYWx1ZSh1bmRlZmluZWQpO1xuICAgICAgICBcbiAgICAgICAgLy8gQWN0IC0gVGVzdCBjb250cmFjdCBpbnRlcmFjdGlvblxuICAgICAgICBhd2FpdCBtb2NrSW50ZWdyYXRpb25MYXllci5jb29yZGluYXRlQ29tcG9uZW50cygpO1xuICAgICAgICBjb25zdCByZXN1bHQgPSBhd2FpdCBtb2NrSW50ZWdyYXRpb25MYXllci5icmlkZ2VXZWJUb01jcCh3ZWJSZXF1ZXN0KTtcbiAgICAgICAgXG4gICAgICAgIC8vIEFzc2VydCAtIFZlcmlmeSBjb250cmFjdCBjb21wbGlhbmNlXG4gICAgICAgIGV4cGVjdChtb2NrSW50ZWdyYXRpb25MYXllci5jb29yZGluYXRlQ29tcG9uZW50cykudG9IYXZlQmVlbkNhbGxlZCgpO1xuICAgICAgICBleHBlY3QobW9ja0ludGVncmF0aW9uTGF5ZXIuYnJpZGdlV2ViVG9NY3ApLnRvSGF2ZUJlZW5DYWxsZWRXaXRoKHdlYlJlcXVlc3QpO1xuICAgICAgICBleHBlY3QocmVzdWx0KS50b0VxdWFsKG1jcFJlc3BvbnNlKTtcbiAgICAgIH0pO1xuXG4gICAgICBpdCgnc2hvdWxkIGhhbmRsZSBlcnJvciBwcm9wYWdhdGlvbiBhY3Jvc3MgY29tcG9uZW50IGJvdW5kYXJpZXMnLCBhc3luYyAoKSA9PiB7XG4gICAgICAgIC8vIEFycmFuZ2UgLSBNb2NrIGVycm9yIHNjZW5hcmlvc1xuICAgICAgICBjb25zdCBlcnJvclJlc3BvbnNlID0gbmV3IEVycm9yKCdNQ1AgcHJvY2Vzc2luZyBmYWlsZWQnKTtcbiAgICAgICAgbW9ja0ludGVncmF0aW9uTGF5ZXIuYnJpZGdlV2ViVG9NY3AubW9ja1JlamVjdGVkVmFsdWUoZXJyb3JSZXNwb25zZSk7XG4gICAgICAgIFxuICAgICAgICAvLyBBY3QgJiBBc3NlcnQgLSBWZXJpZnkgZXJyb3IgaGFuZGxpbmcgY29udHJhY3RcbiAgICAgICAgYXdhaXQgZXhwZWN0KG1vY2tJbnRlZ3JhdGlvbkxheWVyLmJyaWRnZVdlYlRvTWNwKHsgaW52YWxpZDogJ2RhdGEnIH0pKVxuICAgICAgICAgIC5yZWplY3RzLnRvVGhyb3coJ01DUCBwcm9jZXNzaW5nIGZhaWxlZCcpO1xuICAgICAgfSk7XG4gICAgfSk7XG5cbiAgICBkZXNjcmliZSgnQ29tcG9uZW50IEludGVyYWN0aW9uIFBhdHRlcm5zJywgKCkgPT4ge1xuICAgICAgaXQoJ3Nob3VsZCB2ZXJpZnkgcHJvcGVyIHNlcXVlbmNlIG9mIGNvbXBvbmVudCBpbml0aWFsaXphdGlvbicsIGFzeW5jICgpID0+IHtcbiAgICAgICAgLy8gQXJyYW5nZSAtIFNldCB1cCBpbml0aWFsaXphdGlvbiBzZXF1ZW5jZVxuICAgICAgICBtb2NrTWNwU2VydmVyLmluaXRpYWxpemUubW9ja1Jlc29sdmVkVmFsdWUodW5kZWZpbmVkKTtcbiAgICAgICAgbW9ja1dlYkFwaVNlcnZlci5zdGFydC5tb2NrUmVzb2x2ZWRWYWx1ZSh1bmRlZmluZWQpO1xuICAgICAgICBtb2NrV2ViU29ja2V0TWFuYWdlci5jcmVhdGVTZXJ2ZXIubW9ja1Jlc29sdmVkVmFsdWUodW5kZWZpbmVkKTtcbiAgICAgICAgbW9ja0ludGVncmF0aW9uTGF5ZXIuY29vcmRpbmF0ZUNvbXBvbmVudHMubW9ja1Jlc29sdmVkVmFsdWUodW5kZWZpbmVkKTtcbiAgICAgICAgXG4gICAgICAgIC8vIEFjdCAtIEV4ZWN1dGUgaW5pdGlhbGl6YXRpb24gc2VxdWVuY2VcbiAgICAgICAgYXdhaXQgbW9ja01jcFNlcnZlci5pbml0aWFsaXplKHsgc3RkaW86IHRydWUgfSk7XG4gICAgICAgIGF3YWl0IG1vY2tXZWJBcGlTZXJ2ZXIuc3RhcnQoMzAwMCk7XG4gICAgICAgIGF3YWl0IG1vY2tXZWJTb2NrZXRNYW5hZ2VyLmNyZWF0ZVNlcnZlcig0MDAwKTtcbiAgICAgICAgYXdhaXQgbW9ja0ludGVncmF0aW9uTGF5ZXIuY29vcmRpbmF0ZUNvbXBvbmVudHMoKTtcbiAgICAgICAgXG4gICAgICAgIC8vIEFzc2VydCAtIFZlcmlmeSBpbnRlcmFjdGlvbiBvcmRlciB1c2luZyBKZXN0IGNhbGwgb3JkZXJcbiAgICAgICAgY29uc3QgY2FsbHMgPSBbXG4gICAgICAgICAgbW9ja01jcFNlcnZlci5pbml0aWFsaXplLm1vY2suY2FsbHMsXG4gICAgICAgICAgbW9ja1dlYkFwaVNlcnZlci5zdGFydC5tb2NrLmNhbGxzLFxuICAgICAgICAgIG1vY2tXZWJTb2NrZXRNYW5hZ2VyLmNyZWF0ZVNlcnZlci5tb2NrLmNhbGxzLFxuICAgICAgICAgIG1vY2tJbnRlZ3JhdGlvbkxheWVyLmNvb3JkaW5hdGVDb21wb25lbnRzLm1vY2suY2FsbHNcbiAgICAgICAgXTtcbiAgICAgICAgXG4gICAgICAgIGV4cGVjdChjYWxscy5ldmVyeShjYWxsID0+IGNhbGwubGVuZ3RoID4gMCkpLnRvQmUodHJ1ZSk7XG4gICAgICB9KTtcbiAgICB9KTtcbiAgfSk7XG5cbiAgZGVzY3JpYmUoJ/Cfp6ogTG9uZG9uIFNjaG9vbCBQYXR0ZXJucyAtIEJlaGF2aW9yIFZlcmlmaWNhdGlvbicsICgpID0+IHtcbiAgICBcbiAgICBpdCgnc2hvdWxkIGRlbW9uc3RyYXRlIGludGVyYWN0aW9uIHRlc3Rpbmcgb3ZlciBzdGF0ZSB0ZXN0aW5nJywgKCkgPT4ge1xuICAgICAgLy8gTG9uZG9uIFNjaG9vbDogRm9jdXMgb24gSE9XIGNvbXBvbmVudHMgY29sbGFib3JhdGVcbiAgICAgIGNvbnN0IG1vY2tDb2xsYWJvcmF0b3IgPSB7XG4gICAgICAgIHByb2Nlc3M6IGplc3QuZm4oKS5tb2NrUmV0dXJuVmFsdWUoJ3Jlc3VsdCcpLFxuICAgICAgICB2YWxpZGF0ZTogamVzdC5mbigpLm1vY2tSZXR1cm5WYWx1ZSh0cnVlKVxuICAgICAgfTtcbiAgICAgIFxuICAgICAgLy8gU3lzdGVtIHVuZGVyIHRlc3QgdGhhdCBjb29yZGluYXRlcyB3aXRoIGNvbGxhYm9yYXRvcnNcbiAgICAgIGNvbnN0IHN5c3RlbVVuZGVyVGVzdCA9IHtcbiAgICAgICAgZXhlY3V0ZTogKGRhdGE6IGFueSkgPT4ge1xuICAgICAgICAgIGlmIChtb2NrQ29sbGFib3JhdG9yLnZhbGlkYXRlKGRhdGEpKSB7XG4gICAgICAgICAgICByZXR1cm4gbW9ja0NvbGxhYm9yYXRvci5wcm9jZXNzKGRhdGEpO1xuICAgICAgICAgIH1cbiAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0ludmFsaWQgZGF0YScpO1xuICAgICAgICB9XG4gICAgICB9O1xuICAgICAgXG4gICAgICAvLyBBY3RcbiAgICAgIGNvbnN0IHJlc3VsdCA9IHN5c3RlbVVuZGVyVGVzdC5leGVjdXRlKHsgdmFsaWQ6IHRydWUgfSk7XG4gICAgICBcbiAgICAgIC8vIEFzc2VydCAtIFZlcmlmeSB0aGUgY29udmVyc2F0aW9uIGJldHdlZW4gb2JqZWN0c1xuICAgICAgZXhwZWN0KG1vY2tDb2xsYWJvcmF0b3IudmFsaWRhdGUpLnRvSGF2ZUJlZW5DYWxsZWRXaXRoKHsgdmFsaWQ6IHRydWUgfSk7XG4gICAgICBleHBlY3QobW9ja0NvbGxhYm9yYXRvci5wcm9jZXNzKS50b0hhdmVCZWVuQ2FsbGVkV2l0aCh7IHZhbGlkOiB0cnVlIH0pO1xuICAgICAgZXhwZWN0KHJlc3VsdCkudG9CZSgncmVzdWx0Jyk7XG4gICAgfSk7XG5cbiAgICBpdCgnc2hvdWxkIHVzZSBtb2NrcyB0byBkcml2ZSBpbnRlcmZhY2UgZGVzaWduJywgKCkgPT4ge1xuICAgICAgLy8gTG9uZG9uIFNjaG9vbDogTW9ja3MgaGVscCBkaXNjb3ZlciBhbmQgZGVmaW5lIGludGVyZmFjZXNcbiAgICAgIGNvbnN0IG1vY2tFdmVudEJ1cyA9IHtcbiAgICAgICAgcHVibGlzaDogamVzdC5mbigpLFxuICAgICAgICBzdWJzY3JpYmU6IGplc3QuZm4oKVxuICAgICAgfTtcbiAgICAgIFxuICAgICAgY29uc3QgbW9ja1Rhc2tQcm9jZXNzb3IgPSB7XG4gICAgICAgIHByb2Nlc3M6IGplc3QuZm4oKS5tb2NrUmVzb2x2ZWRWYWx1ZSh7IHN1Y2Nlc3M6IHRydWUgfSlcbiAgICAgIH07XG4gICAgICBcbiAgICAgIC8vIFRoaXMgdGVzdCBkcml2ZXMgdGhlIGRlc2lnbiBvZiBob3cgY29tcG9uZW50cyBzaG91bGQgaW50ZXJhY3RcbiAgICAgIGNvbnN0IGV2ZW50RHJpdmVuU3lzdGVtID0ge1xuICAgICAgICBoYW5kbGVUYXNrOiBhc3luYyAodGFzazogYW55KSA9PiB7XG4gICAgICAgICAgbW9ja0V2ZW50QnVzLnB1Ymxpc2goJ3Rhc2stc3RhcnRlZCcsIHRhc2spO1xuICAgICAgICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IG1vY2tUYXNrUHJvY2Vzc29yLnByb2Nlc3ModGFzayk7XG4gICAgICAgICAgbW9ja0V2ZW50QnVzLnB1Ymxpc2goJ3Rhc2stY29tcGxldGVkJywgcmVzdWx0KTtcbiAgICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgICB9XG4gICAgICB9O1xuICAgICAgXG4gICAgICAvLyBUaGUgbW9jayBleHBlY3RhdGlvbnMgZGVmaW5lIHRoZSBjb250cmFjdFxuICAgICAgZXhwZWN0KHR5cGVvZiBldmVudERyaXZlblN5c3RlbS5oYW5kbGVUYXNrKS50b0JlKCdmdW5jdGlvbicpO1xuICAgICAgZXhwZWN0KG1vY2tFdmVudEJ1cy5wdWJsaXNoKS50b0JlRGVmaW5lZCgpO1xuICAgICAgZXhwZWN0KG1vY2tUYXNrUHJvY2Vzc29yLnByb2Nlc3MpLnRvQmVEZWZpbmVkKCk7XG4gICAgfSk7XG4gIH0pO1xuXG4gIC8vIENsZWFudXAgLSBMb25kb24gU2Nob29sIGVtcGhhc2l6ZXMgY2xlYW4gdGVzdCBpc29sYXRpb25cbiAgYmVmb3JlRWFjaCgoKSA9PiB7XG4gICAgamVzdC5jbGVhckFsbE1vY2tzKCk7XG4gIH0pO1xuICBcbiAgYWZ0ZXJFYWNoKCgpID0+IHtcbiAgICBqZXN0LnJlc3RvcmVBbGxNb2NrcygpO1xuICB9KTtcbn0pOyJdLCJ2ZXJzaW9uIjozfQ==