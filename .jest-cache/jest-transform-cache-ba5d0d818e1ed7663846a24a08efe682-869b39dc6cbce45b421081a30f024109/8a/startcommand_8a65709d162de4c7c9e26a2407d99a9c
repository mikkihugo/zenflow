8dedcc655ba27a15d7b899e3d0ec2624
/* istanbul ignore next */
function cov_40h9ut2jk() {
  var path = "/home/mhugo/code/claude-code-flow/src/cli/commands/swarm/start-command.ts";
  var hash = "7c08295564a632547c9e4e93a6a9a4ea6d126a02";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/home/mhugo/code/claude-code-flow/src/cli/commands/swarm/start-command.ts",
    statementMap: {
      "0": {
        start: {
          line: 9,
          column: 8
        },
        end: {
          line: 63,
          column: 11
        }
      },
      "1": {
        start: {
          line: 66,
          column: 23
        },
        end: {
          line: 66,
          column: 25
        }
      },
      "2": {
        start: {
          line: 67,
          column: 25
        },
        end: {
          line: 67,
          column: 27
        }
      },
      "3": {
        start: {
          line: 69,
          column: 25
        },
        end: {
          line: 69,
          column: 47
        }
      },
      "4": {
        start: {
          line: 70,
          column: 32
        },
        end: {
          line: 70,
          column: 72
        }
      },
      "5": {
        start: {
          line: 71,
          column: 8
        },
        end: {
          line: 73,
          column: 9
        }
      },
      "6": {
        start: {
          line: 72,
          column: 12
        },
        end: {
          line: 72,
          column: 104
        }
      },
      "7": {
        start: {
          line: 75,
          column: 25
        },
        end: {
          line: 75,
          column: 47
        }
      },
      "8": {
        start: {
          line: 76,
          column: 32
        },
        end: {
          line: 76,
          column: 70
        }
      },
      "9": {
        start: {
          line: 77,
          column: 8
        },
        end: {
          line: 79,
          column: 9
        }
      },
      "10": {
        start: {
          line: 78,
          column: 12
        },
        end: {
          line: 78,
          column: 104
        }
      },
      "11": {
        start: {
          line: 81,
          column: 23
        },
        end: {
          line: 81,
          column: 43
        }
      },
      "12": {
        start: {
          line: 82,
          column: 8
        },
        end: {
          line: 84,
          column: 9
        }
      },
      "13": {
        start: {
          line: 83,
          column: 12
        },
        end: {
          line: 83,
          column: 64
        }
      },
      "14": {
        start: {
          line: 86,
          column: 21
        },
        end: {
          line: 86,
          column: 39
        }
      },
      "15": {
        start: {
          line: 87,
          column: 8
        },
        end: {
          line: 89,
          column: 9
        }
      },
      "16": {
        start: {
          line: 88,
          column: 12
        },
        end: {
          line: 88,
          column: 90
        }
      },
      "17": {
        start: {
          line: 91,
          column: 25
        },
        end: {
          line: 91,
          column: 51
        }
      },
      "18": {
        start: {
          line: 92,
          column: 31
        },
        end: {
          line: 92,
          column: 65
        }
      },
      "19": {
        start: {
          line: 93,
          column: 8
        },
        end: {
          line: 95,
          column: 9
        }
      },
      "20": {
        start: {
          line: 94,
          column: 12
        },
        end: {
          line: 94,
          column: 104
        }
      },
      "21": {
        start: {
          line: 96,
          column: 8
        },
        end: {
          line: 96,
          column: 114
        }
      },
      "22": {
        start: {
          line: 99,
          column: 8
        },
        end: {
          line: 145,
          column: 9
        }
      },
      "23": {
        start: {
          line: 100,
          column: 27
        },
        end: {
          line: 108,
          column: 13
        }
      },
      "24": {
        start: {
          line: 110,
          column: 12
        },
        end: {
          line: 113,
          column: 13
        }
      },
      "25": {
        start: {
          line: 111,
          column: 37
        },
        end: {
          line: 111,
          column: 80
        }
      },
      "26": {
        start: {
          line: 112,
          column: 16
        },
        end: {
          line: 112,
          column: 52
        }
      },
      "27": {
        start: {
          line: 114,
          column: 12
        },
        end: {
          line: 114,
          column: 62
        }
      },
      "28": {
        start: {
          line: 115,
          column: 12
        },
        end: {
          line: 115,
          column: 58
        }
      },
      "29": {
        start: {
          line: 116,
          column: 12
        },
        end: {
          line: 116,
          column: 61
        }
      },
      "30": {
        start: {
          line: 117,
          column: 12
        },
        end: {
          line: 117,
          column: 58
        }
      },
      "31": {
        start: {
          line: 118,
          column: 12
        },
        end: {
          line: 118,
          column: 50
        }
      },
      "32": {
        start: {
          line: 119,
          column: 12
        },
        end: {
          line: 119,
          column: 82
        }
      },
      "33": {
        start: {
          line: 120,
          column: 12
        },
        end: {
          line: 120,
          column: 28
        }
      },
      "34": {
        start: {
          line: 122,
          column: 28
        },
        end: {
          line: 122,
          column: 62
        }
      },
      "35": {
        start: {
          line: 124,
          column: 12
        },
        end: {
          line: 126,
          column: 13
        }
      },
      "36": {
        start: {
          line: 125,
          column: 16
        },
        end: {
          line: 125,
          column: 63
        }
      },
      "37": {
        start: {
          line: 127,
          column: 12
        },
        end: {
          line: 137,
          column: 14
        }
      },
      "38": {
        start: {
          line: 140,
          column: 12
        },
        end: {
          line: 144,
          column: 14
        }
      },
      "39": {
        start: {
          line: 148,
          column: 8
        },
        end: {
          line: 157,
          column: 9
        }
      },
      "40": {
        start: {
          line: 149,
          column: 23
        },
        end: {
          line: 149,
          column: 50
        }
      },
      "41": {
        start: {
          line: 150,
          column: 25
        },
        end: {
          line: 150,
          column: 45
        }
      },
      "42": {
        start: {
          line: 151,
          column: 29
        },
        end: {
          line: 151,
          column: 53
        }
      },
      "43": {
        start: {
          line: 152,
          column: 31
        },
        end: {
          line: 152,
          column: 67
        }
      },
      "44": {
        start: {
          line: 153,
          column: 12
        },
        end: {
          line: 153,
          column: 42
        }
      },
      "45": {
        start: {
          line: 156,
          column: 12
        },
        end: {
          line: 156,
          column: 131
        }
      },
      "46": {
        start: {
          line: 162,
          column: 24
        },
        end: {
          line: 162,
          column: 88
        }
      },
      "47": {
        start: {
          line: 164,
          column: 8
        },
        end: {
          line: 164,
          column: 64
        }
      },
      "48": {
        start: {
          line: 164,
          column: 37
        },
        end: {
          line: 164,
          column: 62
        }
      },
      "49": {
        start: {
          line: 165,
          column: 8
        },
        end: {
          line: 165,
          column: 63
        }
      },
      "50": {
        start: {
          line: 166,
          column: 8
        },
        end: {
          line: 166,
          column: 59
        }
      },
      "51": {
        start: {
          line: 167,
          column: 8
        },
        end: {
          line: 169,
          column: 9
        }
      },
      "52": {
        start: {
          line: 168,
          column: 12
        },
        end: {
          line: 168,
          column: 78
        }
      },
      "53": {
        start: {
          line: 170,
          column: 8
        },
        end: {
          line: 170,
          column: 23
        }
      },
      "54": {
        start: {
          line: 173,
          column: 8
        },
        end: {
          line: 173,
          column: 50
        }
      },
      "55": {
        start: {
          line: 174,
          column: 27
        },
        end: {
          line: 174,
          column: 67
        }
      },
      "56": {
        start: {
          line: 175,
          column: 30
        },
        end: {
          line: 175,
          column: 59
        }
      },
      "57": {
        start: {
          line: 176,
          column: 8
        },
        end: {
          line: 182,
          column: 9
        }
      },
      "58": {
        start: {
          line: 176,
          column: 21
        },
        end: {
          line: 176,
          column: 22
        }
      },
      "59": {
        start: {
          line: 177,
          column: 30
        },
        end: {
          line: 177,
          column: 63
        }
      },
      "60": {
        start: {
          line: 178,
          column: 28
        },
        end: {
          line: 178,
          column: 51
        }
      },
      "61": {
        start: {
          line: 180,
          column: 12
        },
        end: {
          line: 180,
          column: 67
        }
      },
      "62": {
        start: {
          line: 180,
          column: 41
        },
        end: {
          line: 180,
          column: 65
        }
      },
      "63": {
        start: {
          line: 181,
          column: 12
        },
        end: {
          line: 181,
          column: 70
        }
      },
      "64": {
        start: {
          line: 183,
          column: 8
        },
        end: {
          line: 183,
          column: 78
        }
      },
      "65": {
        start: {
          line: 186,
          column: 8
        },
        end: {
          line: 224,
          column: 2
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 8,
            column: 4
          },
          end: {
            line: 8,
            column: 5
          }
        },
        loc: {
          start: {
            line: 8,
            column: 18
          },
          end: {
            line: 64,
            column: 5
          }
        },
        line: 8
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 65,
            column: 4
          },
          end: {
            line: 65,
            column: 5
          }
        },
        loc: {
          start: {
            line: 65,
            column: 28
          },
          end: {
            line: 97,
            column: 5
          }
        },
        line: 65
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 98,
            column: 4
          },
          end: {
            line: 98,
            column: 5
          }
        },
        loc: {
          start: {
            line: 98,
            column: 23
          },
          end: {
            line: 146,
            column: 5
          }
        },
        line: 98
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 147,
            column: 4
          },
          end: {
            line: 147,
            column: 5
          }
        },
        loc: {
          start: {
            line: 147,
            column: 33
          },
          end: {
            line: 158,
            column: 5
          }
        },
        line: 147
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 159,
            column: 4
          },
          end: {
            line: 159,
            column: 5
          }
        },
        loc: {
          start: {
            line: 159,
            column: 34
          },
          end: {
            line: 171,
            column: 5
          }
        },
        line: 159
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 164,
            column: 26
          },
          end: {
            line: 164,
            column: 27
          }
        },
        loc: {
          start: {
            line: 164,
            column: 37
          },
          end: {
            line: 164,
            column: 62
          }
        },
        line: 164
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 172,
            column: 4
          },
          end: {
            line: 172,
            column: 5
          }
        },
        loc: {
          start: {
            line: 172,
            column: 46
          },
          end: {
            line: 184,
            column: 5
          }
        },
        line: 172
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 180,
            column: 30
          },
          end: {
            line: 180,
            column: 31
          }
        },
        loc: {
          start: {
            line: 180,
            column: 41
          },
          end: {
            line: 180,
            column: 65
          }
        },
        line: 180
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 185,
            column: 4
          },
          end: {
            line: 185,
            column: 5
          }
        },
        loc: {
          start: {
            line: 185,
            column: 14
          },
          end: {
            line: 225,
            column: 5
          }
        },
        line: 185
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 71,
            column: 8
          },
          end: {
            line: 73,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 71,
            column: 8
          },
          end: {
            line: 73,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 71
      },
      "1": {
        loc: {
          start: {
            line: 71,
            column: 12
          },
          end: {
            line: 71,
            column: 59
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 71,
            column: 12
          },
          end: {
            line: 71,
            column: 20
          }
        }, {
          start: {
            line: 71,
            column: 24
          },
          end: {
            line: 71,
            column: 59
          }
        }],
        line: 71
      },
      "2": {
        loc: {
          start: {
            line: 77,
            column: 8
          },
          end: {
            line: 79,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 77,
            column: 8
          },
          end: {
            line: 79,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 77
      },
      "3": {
        loc: {
          start: {
            line: 77,
            column: 12
          },
          end: {
            line: 77,
            column: 59
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 77,
            column: 12
          },
          end: {
            line: 77,
            column: 20
          }
        }, {
          start: {
            line: 77,
            column: 24
          },
          end: {
            line: 77,
            column: 59
          }
        }],
        line: 77
      },
      "4": {
        loc: {
          start: {
            line: 82,
            column: 8
          },
          end: {
            line: 84,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 82,
            column: 8
          },
          end: {
            line: 84,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 82
      },
      "5": {
        loc: {
          start: {
            line: 82,
            column: 12
          },
          end: {
            line: 82,
            column: 49
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 82,
            column: 12
          },
          end: {
            line: 82,
            column: 18
          }
        }, {
          start: {
            line: 82,
            column: 23
          },
          end: {
            line: 82,
            column: 33
          }
        }, {
          start: {
            line: 82,
            column: 37
          },
          end: {
            line: 82,
            column: 48
          }
        }],
        line: 82
      },
      "6": {
        loc: {
          start: {
            line: 87,
            column: 8
          },
          end: {
            line: 89,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 87,
            column: 8
          },
          end: {
            line: 89,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 87
      },
      "7": {
        loc: {
          start: {
            line: 87,
            column: 12
          },
          end: {
            line: 87,
            column: 49
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 87,
            column: 12
          },
          end: {
            line: 87,
            column: 16
          }
        }, {
          start: {
            line: 87,
            column: 21
          },
          end: {
            line: 87,
            column: 32
          }
        }, {
          start: {
            line: 87,
            column: 36
          },
          end: {
            line: 87,
            column: 48
          }
        }],
        line: 87
      },
      "8": {
        loc: {
          start: {
            line: 93,
            column: 8
          },
          end: {
            line: 95,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 93,
            column: 8
          },
          end: {
            line: 95,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 93
      },
      "9": {
        loc: {
          start: {
            line: 93,
            column: 12
          },
          end: {
            line: 93,
            column: 58
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 93,
            column: 12
          },
          end: {
            line: 93,
            column: 20
          }
        }, {
          start: {
            line: 93,
            column: 24
          },
          end: {
            line: 93,
            column: 58
          }
        }],
        line: 93
      },
      "10": {
        loc: {
          start: {
            line: 96,
            column: 15
          },
          end: {
            line: 96,
            column: 113
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 96,
            column: 58
          },
          end: {
            line: 96,
            column: 106
          }
        }, {
          start: {
            line: 96,
            column: 109
          },
          end: {
            line: 96,
            column: 113
          }
        }],
        line: 96
      },
      "11": {
        loc: {
          start: {
            line: 96,
            column: 15
          },
          end: {
            line: 96,
            column: 55
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 96,
            column: 15
          },
          end: {
            line: 96,
            column: 32
          }
        }, {
          start: {
            line: 96,
            column: 36
          },
          end: {
            line: 96,
            column: 55
          }
        }],
        line: 96
      },
      "12": {
        loc: {
          start: {
            line: 101,
            column: 26
          },
          end: {
            line: 101,
            column: 58
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 101,
            column: 26
          },
          end: {
            line: 101,
            column: 48
          }
        }, {
          start: {
            line: 101,
            column: 52
          },
          end: {
            line: 101,
            column: 58
          }
        }],
        line: 101
      },
      "13": {
        loc: {
          start: {
            line: 102,
            column: 27
          },
          end: {
            line: 102,
            column: 52
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 102,
            column: 27
          },
          end: {
            line: 102,
            column: 47
          }
        }, {
          start: {
            line: 102,
            column: 51
          },
          end: {
            line: 102,
            column: 52
          }
        }],
        line: 102
      },
      "14": {
        loc: {
          start: {
            line: 103,
            column: 26
          },
          end: {
            line: 103,
            column: 62
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 103,
            column: 26
          },
          end: {
            line: 103,
            column: 48
          }
        }, {
          start: {
            line: 103,
            column: 52
          },
          end: {
            line: 103,
            column: 62
          }
        }],
        line: 103
      },
      "15": {
        loc: {
          start: {
            line: 104,
            column: 25
          },
          end: {
            line: 104,
            column: 59
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 104,
            column: 25
          },
          end: {
            line: 104,
            column: 50
          }
        }, {
          start: {
            line: 104,
            column: 54
          },
          end: {
            line: 104,
            column: 59
          }
        }],
        line: 104
      },
      "16": {
        loc: {
          start: {
            line: 105,
            column: 27
          },
          end: {
            line: 105,
            column: 62
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 105,
            column: 27
          },
          end: {
            line: 105,
            column: 54
          }
        }, {
          start: {
            line: 105,
            column: 58
          },
          end: {
            line: 105,
            column: 62
          }
        }],
        line: 105
      },
      "17": {
        loc: {
          start: {
            line: 106,
            column: 22
          },
          end: {
            line: 106,
            column: 48
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 106,
            column: 22
          },
          end: {
            line: 106,
            column: 40
          }
        }, {
          start: {
            line: 106,
            column: 44
          },
          end: {
            line: 106,
            column: 48
          }
        }],
        line: 106
      },
      "18": {
        loc: {
          start: {
            line: 107,
            column: 26
          },
          end: {
            line: 107,
            column: 62
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 107,
            column: 26
          },
          end: {
            line: 107,
            column: 52
          }
        }, {
          start: {
            line: 107,
            column: 56
          },
          end: {
            line: 107,
            column: 62
          }
        }],
        line: 107
      },
      "19": {
        loc: {
          start: {
            line: 110,
            column: 12
          },
          end: {
            line: 113,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 110,
            column: 12
          },
          end: {
            line: 113,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 110
      },
      "20": {
        loc: {
          start: {
            line: 119,
            column: 39
          },
          end: {
            line: 119,
            column: 78
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 119,
            column: 56
          },
          end: {
            line: 119,
            column: 65
          }
        }, {
          start: {
            line: 119,
            column: 68
          },
          end: {
            line: 119,
            column: 78
          }
        }],
        line: 119
      },
      "21": {
        loc: {
          start: {
            line: 124,
            column: 12
          },
          end: {
            line: 126,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 124,
            column: 12
          },
          end: {
            line: 126,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 124
      },
      "22": {
        loc: {
          start: {
            line: 142,
            column: 49
          },
          end: {
            line: 142,
            column: 103
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 142,
            column: 74
          },
          end: {
            line: 142,
            column: 87
          }
        }, {
          start: {
            line: 142,
            column: 90
          },
          end: {
            line: 142,
            column: 103
          }
        }],
        line: 142
      },
      "23": {
        loc: {
          start: {
            line: 156,
            column: 73
          },
          end: {
            line: 156,
            column: 127
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 156,
            column: 98
          },
          end: {
            line: 156,
            column: 111
          }
        }, {
          start: {
            line: 156,
            column: 114
          },
          end: {
            line: 156,
            column: 127
          }
        }],
        line: 156
      },
      "24": {
        loc: {
          start: {
            line: 167,
            column: 8
          },
          end: {
            line: 169,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 167,
            column: 8
          },
          end: {
            line: 169,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 167
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0, 0],
      "6": [0, 0],
      "7": [0, 0, 0],
      "8": [0, 0],
      "9": [0, 0],
      "10": [0, 0],
      "11": [0, 0],
      "12": [0, 0],
      "13": [0, 0],
      "14": [0, 0],
      "15": [0, 0],
      "16": [0, 0],
      "17": [0, 0],
      "18": [0, 0],
      "19": [0, 0],
      "20": [0, 0],
      "21": [0, 0],
      "22": [0, 0],
      "23": [0, 0],
      "24": [0, 0]
    },
    inputSourceMap: {
      file: "/home/mhugo/code/claude-code-flow/src/cli/commands/swarm/start-command.ts",
      mappings: "AAAA;;;;GAIG;AAEH,OAAO,EAAE,WAAW,EAAE,MAAM,4BAA4B,CAAC;AAGzD,MAAM,OAAO,iBAAkB,SAAQ,WAAW;IAChD;QACE,KAAK,CAAC;YACJ,IAAI,EAAE,OAAO;YACb,WAAW,EAAE,mBAAmB;YAChC,KAAK,EAAE,mCAAmC;YAC1C,QAAQ,EAAE,OAAO;YACjB,OAAO,EAAE,CAAC;YACV,OAAO,EAAE,CAAC;YACV,QAAQ,EAAE;gBACR,yBAAyB;gBACzB,yCAAyC;gBACzC,wDAAwD;gBACxD,mDAAmD;aACpD;YACD,KAAK,EAAE;gBACL,QAAQ,EAAE;oBACR,IAAI,EAAE,QAAQ;oBACd,WAAW,EAAE,iDAAiD;oBAC9D,OAAO,EAAE,MAAM;iBAChB;gBACD,MAAM,EAAE;oBACN,IAAI,EAAE,QAAQ;oBACd,WAAW,EAAE,0BAA0B;oBACvC,OAAO,EAAE,CAAC;iBACX;gBACD,QAAQ,EAAE;oBACR,IAAI,EAAE,QAAQ;oBACd,WAAW,EAAE,qDAAqD;oBAClE,OAAO,EAAE,UAAU;iBACpB;gBACD,MAAM,EAAE;oBACN,IAAI,EAAE,QAAQ;oBACd,WAAW,EAAE,4BAA4B;iBAC1C;gBACD,UAAU,EAAE;oBACV,IAAI,EAAE,SAAS;oBACf,WAAW,EAAE,8CAA8C;oBAC3D,OAAO,EAAE,KAAK;iBACf;gBACD,YAAY,EAAE;oBACZ,IAAI,EAAE,SAAS;oBACf,WAAW,EAAE,oCAAoC;oBACjD,OAAO,EAAE,IAAI;iBACd;gBACD,IAAI,EAAE;oBACJ,IAAI,EAAE,QAAQ;oBACd,WAAW,EAAE,8BAA8B;oBAC3C,OAAO,EAAE,IAAI;iBACd;gBACD,WAAW,EAAE;oBACX,IAAI,EAAE,QAAQ;oBACd,WAAW,EAAE,sCAAsC;oBACnD,OAAO,EAAE,MAAM;iBAChB;aACF;SACF,CAAC,CAAC;IACL,CAAC;IAES,KAAK,CAAC,QAAQ,CAAC,OAAuB;QAC9C,MAAM,MAAM,GAAa,EAAE,CAAC;QAC5B,MAAM,QAAQ,GAAa,EAAE,CAAC;QAE9B,oBAAoB;QACpB,MAAM,QAAQ,GAAG,OAAO,CAAC,KAAK,CAAC,QAAkB,CAAC;QAClD,MAAM,eAAe,GAAG,CAAC,MAAM,EAAE,cAAc,EAAE,MAAM,EAAE,MAAM,CAAC,CAAC;QACjE,IAAI,QAAQ,IAAI,CAAC,eAAe,CAAC,QAAQ,CAAC,QAAQ,CAAC,EAAE,CAAC;YACpD,MAAM,CAAC,IAAI,CAAC,qBAAqB,QAAQ,qBAAqB,eAAe,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;QAC9F,CAAC;QAED,oBAAoB;QACpB,MAAM,QAAQ,GAAG,OAAO,CAAC,KAAK,CAAC,QAAkB,CAAC;QAClD,MAAM,eAAe,GAAG,CAAC,UAAU,EAAE,UAAU,EAAE,YAAY,CAAC,CAAC;QAC/D,IAAI,QAAQ,IAAI,CAAC,eAAe,CAAC,QAAQ,CAAC,QAAQ,CAAC,EAAE,CAAC;YACpD,MAAM,CAAC,IAAI,CAAC,qBAAqB,QAAQ,qBAAqB,eAAe,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;QAC9F,CAAC;QAED,wBAAwB;QACxB,MAAM,MAAM,GAAG,OAAO,CAAC,KAAK,CAAC,MAAgB,CAAC;QAC9C,IAAI,MAAM,IAAI,CAAC,MAAM,GAAG,CAAC,IAAI,MAAM,GAAG,EAAE,CAAC,EAAE,CAAC;YAC1C,MAAM,CAAC,IAAI,CAAC,sCAAsC,CAAC,CAAC;QACtD,CAAC;QAED,gBAAgB;QAChB,MAAM,IAAI,GAAG,OAAO,CAAC,KAAK,CAAC,IAAc,CAAC;QAC1C,IAAI,IAAI,IAAI,CAAC,IAAI,GAAG,IAAI,IAAI,IAAI,GAAG,KAAK,CAAC,EAAE,CAAC;YAC1C,QAAQ,CAAC,IAAI,CAAC,8DAA8D,CAAC,CAAC;QAChF,CAAC;QAED,qBAAqB;QACrB,MAAM,QAAQ,GAAG,OAAO,CAAC,KAAK,CAAC,WAAW,CAAW,CAAC;QACtD,MAAM,cAAc,GAAG,CAAC,OAAO,EAAE,MAAM,EAAE,MAAM,EAAE,OAAO,CAAC,CAAC;QAC1D,IAAI,QAAQ,IAAI,CAAC,cAAc,CAAC,QAAQ,CAAC,QAAQ,CAAC,EAAE,CAAC;YACnD,MAAM,CAAC,IAAI,CAAC,sBAAsB,QAAQ,qBAAqB,cAAc,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;QAC9F,CAAC;QAED,OAAO,MAAM,CAAC,MAAM,GAAG,CAAC,IAAI,QAAQ,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC,EAAE,KAAK,EAAE,MAAM,CAAC,MAAM,KAAK,CAAC,EAAE,MAAM,EAAE,QAAQ,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC;IAC5G,CAAC;IAES,KAAK,CAAC,GAAG,CAAC,OAAuB;QACzC,IAAI,CAAC;YACH,MAAM,MAAM,GAAG;gBACb,QAAQ,EAAE,OAAO,CAAC,KAAK,CAAC,QAAkB,IAAI,MAAM;gBACpD,SAAS,EAAE,OAAO,CAAC,KAAK,CAAC,MAAgB,IAAI,CAAC;gBAC9C,QAAQ,EAAE,OAAO,CAAC,KAAK,CAAC,QAAkB,IAAI,UAAU;gBACxD,OAAO,EAAE,OAAO,CAAC,KAAK,CAAC,UAAU,CAAY,IAAI,KAAK;gBACtD,SAAS,EAAE,OAAO,CAAC,KAAK,CAAC,YAAY,CAAY,IAAI,IAAI;gBACzD,IAAI,EAAE,OAAO,CAAC,KAAK,CAAC,IAAc,IAAI,IAAI;gBAC1C,QAAQ,EAAE,OAAO,CAAC,KAAK,CAAC,WAAW,CAAW,IAAI,MAAM;aACzD,CAAC;YAEF,iCAAiC;YACjC,IAAI,OAAO,CAAC,KAAK,CAAC,MAAM,EAAE,CAAC;gBACzB,MAAM,YAAY,GAAG,MAAM,IAAI,CAAC,UAAU,CAAC,OAAO,CAAC,KAAK,CAAC,MAAgB,CAAC,CAAC;gBAC3E,MAAM,CAAC,MAAM,CAAC,MAAM,EAAE,YAAY,CAAC,CAAC;YACtC,CAAC;YAED,OAAO,CAAC,GAAG,CAAC,oCAAoC,CAAC,CAAC;YAClD,OAAO,CAAC,GAAG,CAAC,eAAe,MAAM,CAAC,QAAQ,EAAE,CAAC,CAAC;YAC9C,OAAO,CAAC,GAAG,CAAC,iBAAiB,MAAM,CAAC,SAAS,EAAE,CAAC,CAAC;YACjD,OAAO,CAAC,GAAG,CAAC,eAAe,MAAM,CAAC,QAAQ,EAAE,CAAC,CAAC;YAC9C,OAAO,CAAC,GAAG,CAAC,WAAW,MAAM,CAAC,IAAI,EAAE,CAAC,CAAC;YACtC,OAAO,CAAC,GAAG,CAAC,eAAe,MAAM,CAAC,OAAO,CAAC,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC,UAAU,EAAE,CAAC,CAAC;YACtE,OAAO,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC;YAEhB,mBAAmB;YACnB,MAAM,OAAO,GAAG,MAAM,IAAI,CAAC,eAAe,CAAC,MAAM,CAAC,CAAC;YAEnD,yCAAyC;YACzC,IAAI,MAAM,CAAC,SAAS,EAAE,CAAC;gBACrB,MAAM,IAAI,CAAC,kBAAkB,CAAC,OAAO,EAAE,MAAM,CAAC,CAAC;YACjD,CAAC;YAED,OAAO;gBACL,OAAO,EAAE,IAAI;gBACb,QAAQ,EAAE,CAAC;gBACX,OAAO,EAAE,uCAAuC,OAAO,EAAE;gBACzD,IAAI,EAAE;oBACJ,OAAO;oBACP,MAAM;oBACN,IAAI,EAAE,MAAM,CAAC,IAAI;oBACjB,OAAO,EAAE,MAAM,CAAC,OAAO;iBACxB;aACF,CAAC;QACJ,CAAC;QAAC,OAAO,KAAK,EAAE,CAAC;YACf,OAAO;gBACL,OAAO,EAAE,KAAK;gBACd,KAAK,EAAE,0BAA0B,KAAK,YAAY,KAAK,CAAC,CAAC,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,CAAC,MAAM,CAAC,KAAK,CAAC,EAAE;gBACzF,QAAQ,EAAE,CAAC;aACZ,CAAC;QACJ,CAAC;IACH,CAAC;IAEO,KAAK,CAAC,UAAU,CAAC,UAAkB;QACzC,IAAI,CAAC;YACH,MAAM,EAAE,GAAG,MAAM,MAAM,CAAC,aAAa,CAAC,CAAC;YACvC,MAAM,IAAI,GAAG,MAAM,MAAM,CAAC,MAAM,CAAC,CAAC;YAElC,MAAM,QAAQ,GAAG,IAAI,CAAC,OAAO,CAAC,UAAU,CAAC,CAAC;YAC1C,MAAM,UAAU,GAAG,MAAM,EAAE,CAAC,QAAQ,CAAC,QAAQ,EAAE,OAAO,CAAC,CAAC;YAExD,OAAO,IAAI,CAAC,KAAK,CAAC,UAAU,CAAC,CAAC;QAChC,CAAC;QAAC,OAAO,KAAK,EAAE,CAAC;YACf,MAAM,IAAI,KAAK,CAAC,8BAA8B,UAAU,KAAK,KAAK,YAAY,KAAK,CAAC,CAAC,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,CAAC,MAAM,CAAC,KAAK,CAAC,EAAE,CAAC,CAAC;QACzH,CAAC;IACH,CAAC;IAEO,KAAK,CAAC,eAAe,CAAC,MAAW;QACvC,kEAAkE;QAClE,6CAA6C;QAE7C,MAAM,OAAO,GAAG,SAAS,IAAI,CAAC,GAAG,EAAE,IAAI,IAAI,CAAC,MAAM,EAAE,CAAC,QAAQ,CAAC,EAAE,CAAC,CAAC,MAAM,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC;QAEjF,gCAAgC;QAChC,MAAM,IAAI,OAAO,CAAC,OAAO,CAAC,EAAE,CAAC,UAAU,CAAC,OAAO,EAAE,IAAI,CAAC,CAAC,CAAC;QAExD,OAAO,CAAC,GAAG,CAAC,gCAAgC,OAAO,EAAE,CAAC,CAAC;QACvD,OAAO,CAAC,GAAG,CAAC,wBAAwB,MAAM,CAAC,IAAI,EAAE,CAAC,CAAC;QAEnD,IAAI,MAAM,CAAC,OAAO,EAAE,CAAC;YACnB,OAAO,CAAC,GAAG,CAAC,oDAAoD,CAAC,CAAC;QACpE,CAAC;QAED,OAAO,OAAO,CAAC;IACjB,CAAC;IAEO,KAAK,CAAC,kBAAkB,CAAC,OAAe,EAAE,MAAW;QAC3D,OAAO,CAAC,GAAG,CAAC,4BAA4B,CAAC,CAAC;QAE1C,MAAM,UAAU,GAAG,CAAC,YAAY,EAAE,SAAS,EAAE,aAAa,CAAC,CAAC;QAC5D,MAAM,aAAa,GAAG,IAAI,CAAC,GAAG,CAAC,MAAM,CAAC,SAAS,EAAE,CAAC,CAAC,CAAC;QAEpD,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,aAAa,EAAE,CAAC,EAAE,EAAE,CAAC;YACvC,MAAM,SAAS,GAAG,UAAU,CAAC,CAAC,GAAG,UAAU,CAAC,MAAM,CAAC,CAAC;YACpD,MAAM,OAAO,GAAG,GAAG,SAAS,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC;YAExC,0BAA0B;YAC1B,MAAM,IAAI,OAAO,CAAC,OAAO,CAAC,EAAE,CAAC,UAAU,CAAC,OAAO,EAAE,GAAG,CAAC,CAAC,CAAC;YAEvD,OAAO,CAAC,GAAG,CAAC,eAAe,SAAS,WAAW,OAAO,EAAE,CAAC,CAAC;QAC5D,CAAC;QAED,OAAO,CAAC,GAAG,CAAC,KAAK,aAAa,sCAAsC,CAAC,CAAC;IACxE,CAAC;IAED,OAAO;QACL,OAAO;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CAsCV,CAAC;IACA,CAAC;CACF",
      names: [],
      sources: ["/home/mhugo/code/claude-code-flow/src/cli/commands/swarm/start-command.ts"],
      sourcesContent: ["/**\n * Swarm Start Command Implementation\n * \n * Starts a new swarm with specified configuration\n */\n\nimport { BaseCommand } from '../../core/base-command.js';\nimport type { CommandContext, CommandResult, CommandValidationResult } from '../../types/index.js';\n\nexport class SwarmStartCommand extends BaseCommand {\n  constructor() {\n    super({\n      name: 'start',\n      description: 'Start a new swarm',\n      usage: 'claude-flow swarm start [options]',\n      category: 'swarm',\n      minArgs: 0,\n      maxArgs: 0,\n      examples: [\n        'claude-flow swarm start',\n        'claude-flow swarm start --topology mesh',\n        'claude-flow swarm start --agents 5 --strategy parallel',\n        'claude-flow swarm start --config ./my-config.json'\n      ],\n      flags: {\n        topology: {\n          type: 'string',\n          description: 'Swarm topology (mesh, hierarchical, ring, star)',\n          default: 'mesh'\n        },\n        agents: {\n          type: 'number',\n          description: 'Maximum number of agents',\n          default: 5\n        },\n        strategy: {\n          type: 'string',\n          description: 'Execution strategy (balanced, parallel, sequential)',\n          default: 'balanced'\n        },\n        config: {\n          type: 'string',\n          description: 'Path to configuration file'\n        },\n        'dev-mode': {\n          type: 'boolean',\n          description: 'Start in development mode with hot reloading',\n          default: false\n        },\n        'auto-spawn': {\n          type: 'boolean',\n          description: 'Automatically spawn initial agents',\n          default: true\n        },\n        port: {\n          type: 'number',\n          description: 'Port for swarm communication',\n          default: 3000\n        },\n        'log-level': {\n          type: 'string',\n          description: 'Log level (debug, info, warn, error)',\n          default: 'info'\n        }\n      }\n    });\n  }\n\n  protected async validate(context: CommandContext): Promise<CommandValidationResult | null> {\n    const errors: string[] = [];\n    const warnings: string[] = [];\n\n    // Validate topology\n    const topology = context.flags.topology as string;\n    const validTopologies = ['mesh', 'hierarchical', 'ring', 'star'];\n    if (topology && !validTopologies.includes(topology)) {\n      errors.push(`Invalid topology '${topology}'. Valid options: ${validTopologies.join(', ')}`);\n    }\n\n    // Validate strategy\n    const strategy = context.flags.strategy as string;\n    const validStrategies = ['balanced', 'parallel', 'sequential'];\n    if (strategy && !validStrategies.includes(strategy)) {\n      errors.push(`Invalid strategy '${strategy}'. Valid options: ${validStrategies.join(', ')}`);\n    }\n\n    // Validate agents count\n    const agents = context.flags.agents as number;\n    if (agents && (agents < 1 || agents > 50)) {\n      errors.push('Agent count must be between 1 and 50');\n    }\n\n    // Validate port\n    const port = context.flags.port as number;\n    if (port && (port < 1024 || port > 65535)) {\n      warnings.push('Port should be between 1024 and 65535 for best compatibility');\n    }\n\n    // Validate log level\n    const logLevel = context.flags['log-level'] as string;\n    const validLogLevels = ['debug', 'info', 'warn', 'error'];\n    if (logLevel && !validLogLevels.includes(logLevel)) {\n      errors.push(`Invalid log level '${logLevel}'. Valid options: ${validLogLevels.join(', ')}`);\n    }\n\n    return errors.length > 0 || warnings.length > 0 ? { valid: errors.length === 0, errors, warnings } : null;\n  }\n\n  protected async run(context: CommandContext): Promise<CommandResult> {\n    try {\n      const config = {\n        topology: context.flags.topology as string || 'mesh',\n        maxAgents: context.flags.agents as number || 5,\n        strategy: context.flags.strategy as string || 'balanced',\n        devMode: context.flags['dev-mode'] as boolean || false,\n        autoSpawn: context.flags['auto-spawn'] as boolean || true,\n        port: context.flags.port as number || 3000,\n        logLevel: context.flags['log-level'] as string || 'info'\n      };\n\n      // Load custom config if provided\n      if (context.flags.config) {\n        const customConfig = await this.loadConfig(context.flags.config as string);\n        Object.assign(config, customConfig);\n      }\n\n      console.log('Starting swarm with configuration:');\n      console.log(`  Topology: ${config.topology}`);\n      console.log(`  Max Agents: ${config.maxAgents}`);\n      console.log(`  Strategy: ${config.strategy}`);\n      console.log(`  Port: ${config.port}`);\n      console.log(`  Dev Mode: ${config.devMode ? 'enabled' : 'disabled'}`);\n      console.log('');\n\n      // Initialize swarm\n      const swarmId = await this.initializeSwarm(config);\n      \n      // Auto-spawn initial agents if requested\n      if (config.autoSpawn) {\n        await this.spawnInitialAgents(swarmId, config);\n      }\n\n      return {\n        success: true,\n        exitCode: 0,\n        message: `Swarm started successfully with ID: ${swarmId}`,\n        data: {\n          swarmId,\n          config,\n          port: config.port,\n          devMode: config.devMode\n        }\n      };\n    } catch (error) {\n      return {\n        success: false,\n        error: `Failed to start swarm: ${error instanceof Error ? error.message : String(error)}`,\n        exitCode: 1\n      };\n    }\n  }\n\n  private async loadConfig(configPath: string): Promise<any> {\n    try {\n      const fs = await import('fs/promises');\n      const path = await import('path');\n      \n      const fullPath = path.resolve(configPath);\n      const configData = await fs.readFile(fullPath, 'utf-8');\n      \n      return JSON.parse(configData);\n    } catch (error) {\n      throw new Error(`Failed to load config from ${configPath}: ${error instanceof Error ? error.message : String(error)}`);\n    }\n  }\n\n  private async initializeSwarm(config: any): Promise<string> {\n    // This would integrate with the actual swarm orchestration system\n    // For now, we'll simulate the initialization\n    \n    const swarmId = `swarm_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\n    \n    // Simulate initialization delay\n    await new Promise(resolve => setTimeout(resolve, 1000));\n    \n    console.log(`\u2705 Swarm initialized with ID: ${swarmId}`);\n    console.log(`\uD83C\uDF10 Listening on port ${config.port}`);\n    \n    if (config.devMode) {\n      console.log('\uD83D\uDD25 Development mode active - hot reloading enabled');\n    }\n    \n    return swarmId;\n  }\n\n  private async spawnInitialAgents(swarmId: string, config: any): Promise<void> {\n    console.log('Spawning initial agents...');\n    \n    const agentTypes = ['researcher', 'analyst', 'coordinator'];\n    const agentsToSpawn = Math.min(config.maxAgents, 3);\n    \n    for (let i = 0; i < agentsToSpawn; i++) {\n      const agentType = agentTypes[i % agentTypes.length];\n      const agentId = `${agentType}-${i + 1}`;\n      \n      // Simulate agent spawning\n      await new Promise(resolve => setTimeout(resolve, 200));\n      \n      console.log(`  \u2705 Spawned ${agentType} agent: ${agentId}`);\n    }\n    \n    console.log(`\u2705 ${agentsToSpawn} initial agents spawned successfully`);\n  }\n\n  getHelp(): string {\n    return `Start a new swarm\n\nUSAGE:\n  claude-flow swarm start [options]\n\nOPTIONS:\n  --topology <type>      Swarm topology (mesh, hierarchical, ring, star) [default: mesh]\n  --agents <count>       Maximum number of agents [default: 5]\n  --strategy <strategy>  Execution strategy (balanced, parallel, sequential) [default: balanced]\n  --config <path>        Path to configuration file\n  --dev-mode            Start in development mode with hot reloading\n  --auto-spawn          Automatically spawn initial agents [default: true]\n  --port <number>        Port for swarm communication [default: 3000]\n  --log-level <level>    Log level (debug, info, warn, error) [default: info]\n  --no-auto-spawn       Disable automatic agent spawning\n  -h, --help            Show help\n\nEXAMPLES:\n  claude-flow swarm start\n  claude-flow swarm start --topology mesh --agents 8\n  claude-flow swarm start --strategy parallel --dev-mode\n  claude-flow swarm start --config ./swarm-config.json\n  claude-flow swarm start --port 4000 --log-level debug\n\nTOPOLOGIES:\n  mesh          All agents can communicate with each other\n  hierarchical  Tree-like structure with coordinator agents\n  ring          Agents form a circular communication pattern\n  star          Central coordinator with spoke agents\n\nSTRATEGIES:\n  balanced      Load balance tasks across all agents\n  parallel      Execute multiple tasks simultaneously\n  sequential    Execute tasks one after another\n\nThe start command initializes a new swarm with the specified configuration.\nUse --dev-mode for development with hot reloading capabilities.\nUse --config to load settings from a JSON configuration file.\n`;\n  }\n}"],
      version: 3
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "7c08295564a632547c9e4e93a6a9a4ea6d126a02"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_40h9ut2jk = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_40h9ut2jk();
/**
 * Swarm Start Command Implementation
 *
 * Starts a new swarm with specified configuration
 */
import { BaseCommand } from '../../core/base-command.js';
export class SwarmStartCommand extends BaseCommand {
  constructor() {
    /* istanbul ignore next */
    cov_40h9ut2jk().f[0]++;
    cov_40h9ut2jk().s[0]++;
    super({
      name: 'start',
      description: 'Start a new swarm',
      usage: 'claude-flow swarm start [options]',
      category: 'swarm',
      minArgs: 0,
      maxArgs: 0,
      examples: ['claude-flow swarm start', 'claude-flow swarm start --topology mesh', 'claude-flow swarm start --agents 5 --strategy parallel', 'claude-flow swarm start --config ./my-config.json'],
      flags: {
        topology: {
          type: 'string',
          description: 'Swarm topology (mesh, hierarchical, ring, star)',
          default: 'mesh'
        },
        agents: {
          type: 'number',
          description: 'Maximum number of agents',
          default: 5
        },
        strategy: {
          type: 'string',
          description: 'Execution strategy (balanced, parallel, sequential)',
          default: 'balanced'
        },
        config: {
          type: 'string',
          description: 'Path to configuration file'
        },
        'dev-mode': {
          type: 'boolean',
          description: 'Start in development mode with hot reloading',
          default: false
        },
        'auto-spawn': {
          type: 'boolean',
          description: 'Automatically spawn initial agents',
          default: true
        },
        port: {
          type: 'number',
          description: 'Port for swarm communication',
          default: 3000
        },
        'log-level': {
          type: 'string',
          description: 'Log level (debug, info, warn, error)',
          default: 'info'
        }
      }
    });
  }
  async validate(context) {
    /* istanbul ignore next */
    cov_40h9ut2jk().f[1]++;
    const errors =
    /* istanbul ignore next */
    (cov_40h9ut2jk().s[1]++, []);
    const warnings =
    /* istanbul ignore next */
    (cov_40h9ut2jk().s[2]++, []);
    // Validate topology
    const topology =
    /* istanbul ignore next */
    (cov_40h9ut2jk().s[3]++, context.flags.topology);
    const validTopologies =
    /* istanbul ignore next */
    (cov_40h9ut2jk().s[4]++, ['mesh', 'hierarchical', 'ring', 'star']);
    /* istanbul ignore next */
    cov_40h9ut2jk().s[5]++;
    if (
    /* istanbul ignore next */
    (cov_40h9ut2jk().b[1][0]++, topology) &&
    /* istanbul ignore next */
    (cov_40h9ut2jk().b[1][1]++, !validTopologies.includes(topology))) {
      /* istanbul ignore next */
      cov_40h9ut2jk().b[0][0]++;
      cov_40h9ut2jk().s[6]++;
      errors.push(`Invalid topology '${topology}'. Valid options: ${validTopologies.join(', ')}`);
    } else
    /* istanbul ignore next */
    {
      cov_40h9ut2jk().b[0][1]++;
    }
    // Validate strategy
    const strategy =
    /* istanbul ignore next */
    (cov_40h9ut2jk().s[7]++, context.flags.strategy);
    const validStrategies =
    /* istanbul ignore next */
    (cov_40h9ut2jk().s[8]++, ['balanced', 'parallel', 'sequential']);
    /* istanbul ignore next */
    cov_40h9ut2jk().s[9]++;
    if (
    /* istanbul ignore next */
    (cov_40h9ut2jk().b[3][0]++, strategy) &&
    /* istanbul ignore next */
    (cov_40h9ut2jk().b[3][1]++, !validStrategies.includes(strategy))) {
      /* istanbul ignore next */
      cov_40h9ut2jk().b[2][0]++;
      cov_40h9ut2jk().s[10]++;
      errors.push(`Invalid strategy '${strategy}'. Valid options: ${validStrategies.join(', ')}`);
    } else
    /* istanbul ignore next */
    {
      cov_40h9ut2jk().b[2][1]++;
    }
    // Validate agents count
    const agents =
    /* istanbul ignore next */
    (cov_40h9ut2jk().s[11]++, context.flags.agents);
    /* istanbul ignore next */
    cov_40h9ut2jk().s[12]++;
    if (
    /* istanbul ignore next */
    (cov_40h9ut2jk().b[5][0]++, agents) && (
    /* istanbul ignore next */
    (cov_40h9ut2jk().b[5][1]++, agents < 1) ||
    /* istanbul ignore next */
    (cov_40h9ut2jk().b[5][2]++, agents > 50))) {
      /* istanbul ignore next */
      cov_40h9ut2jk().b[4][0]++;
      cov_40h9ut2jk().s[13]++;
      errors.push('Agent count must be between 1 and 50');
    } else
    /* istanbul ignore next */
    {
      cov_40h9ut2jk().b[4][1]++;
    }
    // Validate port
    const port =
    /* istanbul ignore next */
    (cov_40h9ut2jk().s[14]++, context.flags.port);
    /* istanbul ignore next */
    cov_40h9ut2jk().s[15]++;
    if (
    /* istanbul ignore next */
    (cov_40h9ut2jk().b[7][0]++, port) && (
    /* istanbul ignore next */
    (cov_40h9ut2jk().b[7][1]++, port < 1024) ||
    /* istanbul ignore next */
    (cov_40h9ut2jk().b[7][2]++, port > 65535))) {
      /* istanbul ignore next */
      cov_40h9ut2jk().b[6][0]++;
      cov_40h9ut2jk().s[16]++;
      warnings.push('Port should be between 1024 and 65535 for best compatibility');
    } else
    /* istanbul ignore next */
    {
      cov_40h9ut2jk().b[6][1]++;
    }
    // Validate log level
    const logLevel =
    /* istanbul ignore next */
    (cov_40h9ut2jk().s[17]++, context.flags['log-level']);
    const validLogLevels =
    /* istanbul ignore next */
    (cov_40h9ut2jk().s[18]++, ['debug', 'info', 'warn', 'error']);
    /* istanbul ignore next */
    cov_40h9ut2jk().s[19]++;
    if (
    /* istanbul ignore next */
    (cov_40h9ut2jk().b[9][0]++, logLevel) &&
    /* istanbul ignore next */
    (cov_40h9ut2jk().b[9][1]++, !validLogLevels.includes(logLevel))) {
      /* istanbul ignore next */
      cov_40h9ut2jk().b[8][0]++;
      cov_40h9ut2jk().s[20]++;
      errors.push(`Invalid log level '${logLevel}'. Valid options: ${validLogLevels.join(', ')}`);
    } else
    /* istanbul ignore next */
    {
      cov_40h9ut2jk().b[8][1]++;
    }
    cov_40h9ut2jk().s[21]++;
    return /* istanbul ignore next */(cov_40h9ut2jk().b[11][0]++, errors.length > 0) ||
    /* istanbul ignore next */
    (cov_40h9ut2jk().b[11][1]++, warnings.length > 0) ?
    /* istanbul ignore next */
    (cov_40h9ut2jk().b[10][0]++, {
      valid: errors.length === 0,
      errors,
      warnings
    }) :
    /* istanbul ignore next */
    (cov_40h9ut2jk().b[10][1]++, null);
  }
  async run(context) {
    /* istanbul ignore next */
    cov_40h9ut2jk().f[2]++;
    cov_40h9ut2jk().s[22]++;
    try {
      const config =
      /* istanbul ignore next */
      (cov_40h9ut2jk().s[23]++, {
        topology:
        /* istanbul ignore next */
        (cov_40h9ut2jk().b[12][0]++, context.flags.topology) ||
        /* istanbul ignore next */
        (cov_40h9ut2jk().b[12][1]++, 'mesh'),
        maxAgents:
        /* istanbul ignore next */
        (cov_40h9ut2jk().b[13][0]++, context.flags.agents) ||
        /* istanbul ignore next */
        (cov_40h9ut2jk().b[13][1]++, 5),
        strategy:
        /* istanbul ignore next */
        (cov_40h9ut2jk().b[14][0]++, context.flags.strategy) ||
        /* istanbul ignore next */
        (cov_40h9ut2jk().b[14][1]++, 'balanced'),
        devMode:
        /* istanbul ignore next */
        (cov_40h9ut2jk().b[15][0]++, context.flags['dev-mode']) ||
        /* istanbul ignore next */
        (cov_40h9ut2jk().b[15][1]++, false),
        autoSpawn:
        /* istanbul ignore next */
        (cov_40h9ut2jk().b[16][0]++, context.flags['auto-spawn']) ||
        /* istanbul ignore next */
        (cov_40h9ut2jk().b[16][1]++, true),
        port:
        /* istanbul ignore next */
        (cov_40h9ut2jk().b[17][0]++, context.flags.port) ||
        /* istanbul ignore next */
        (cov_40h9ut2jk().b[17][1]++, 3000),
        logLevel:
        /* istanbul ignore next */
        (cov_40h9ut2jk().b[18][0]++, context.flags['log-level']) ||
        /* istanbul ignore next */
        (cov_40h9ut2jk().b[18][1]++, 'info')
      });
      // Load custom config if provided
      /* istanbul ignore next */
      cov_40h9ut2jk().s[24]++;
      if (context.flags.config) {
        /* istanbul ignore next */
        cov_40h9ut2jk().b[19][0]++;
        const customConfig =
        /* istanbul ignore next */
        (cov_40h9ut2jk().s[25]++, await this.loadConfig(context.flags.config));
        /* istanbul ignore next */
        cov_40h9ut2jk().s[26]++;
        Object.assign(config, customConfig);
      } else
      /* istanbul ignore next */
      {
        cov_40h9ut2jk().b[19][1]++;
      }
      cov_40h9ut2jk().s[27]++;
      console.log('Starting swarm with configuration:');
      /* istanbul ignore next */
      cov_40h9ut2jk().s[28]++;
      console.log(`  Topology: ${config.topology}`);
      /* istanbul ignore next */
      cov_40h9ut2jk().s[29]++;
      console.log(`  Max Agents: ${config.maxAgents}`);
      /* istanbul ignore next */
      cov_40h9ut2jk().s[30]++;
      console.log(`  Strategy: ${config.strategy}`);
      /* istanbul ignore next */
      cov_40h9ut2jk().s[31]++;
      console.log(`  Port: ${config.port}`);
      /* istanbul ignore next */
      cov_40h9ut2jk().s[32]++;
      console.log(`  Dev Mode: ${config.devMode ?
      /* istanbul ignore next */
      (cov_40h9ut2jk().b[20][0]++, 'enabled') :
      /* istanbul ignore next */
      (cov_40h9ut2jk().b[20][1]++, 'disabled')}`);
      /* istanbul ignore next */
      cov_40h9ut2jk().s[33]++;
      console.log('');
      // Initialize swarm
      const swarmId =
      /* istanbul ignore next */
      (cov_40h9ut2jk().s[34]++, await this.initializeSwarm(config));
      // Auto-spawn initial agents if requested
      /* istanbul ignore next */
      cov_40h9ut2jk().s[35]++;
      if (config.autoSpawn) {
        /* istanbul ignore next */
        cov_40h9ut2jk().b[21][0]++;
        cov_40h9ut2jk().s[36]++;
        await this.spawnInitialAgents(swarmId, config);
      } else
      /* istanbul ignore next */
      {
        cov_40h9ut2jk().b[21][1]++;
      }
      cov_40h9ut2jk().s[37]++;
      return {
        success: true,
        exitCode: 0,
        message: `Swarm started successfully with ID: ${swarmId}`,
        data: {
          swarmId,
          config,
          port: config.port,
          devMode: config.devMode
        }
      };
    } catch (error) {
      /* istanbul ignore next */
      cov_40h9ut2jk().s[38]++;
      return {
        success: false,
        error: `Failed to start swarm: ${error instanceof Error ?
        /* istanbul ignore next */
        (cov_40h9ut2jk().b[22][0]++, error.message) :
        /* istanbul ignore next */
        (cov_40h9ut2jk().b[22][1]++, String(error))}`,
        exitCode: 1
      };
    }
  }
  async loadConfig(configPath) {
    /* istanbul ignore next */
    cov_40h9ut2jk().f[3]++;
    cov_40h9ut2jk().s[39]++;
    try {
      const fs =
      /* istanbul ignore next */
      (cov_40h9ut2jk().s[40]++, await import('fs/promises'));
      const path =
      /* istanbul ignore next */
      (cov_40h9ut2jk().s[41]++, await import('path'));
      const fullPath =
      /* istanbul ignore next */
      (cov_40h9ut2jk().s[42]++, path.resolve(configPath));
      const configData =
      /* istanbul ignore next */
      (cov_40h9ut2jk().s[43]++, await fs.readFile(fullPath, 'utf-8'));
      /* istanbul ignore next */
      cov_40h9ut2jk().s[44]++;
      return JSON.parse(configData);
    } catch (error) {
      /* istanbul ignore next */
      cov_40h9ut2jk().s[45]++;
      throw new Error(`Failed to load config from ${configPath}: ${error instanceof Error ?
      /* istanbul ignore next */
      (cov_40h9ut2jk().b[23][0]++, error.message) :
      /* istanbul ignore next */
      (cov_40h9ut2jk().b[23][1]++, String(error))}`);
    }
  }
  async initializeSwarm(config) {
    /* istanbul ignore next */
    cov_40h9ut2jk().f[4]++;
    // This would integrate with the actual swarm orchestration system
    // For now, we'll simulate the initialization
    const swarmId =
    /* istanbul ignore next */
    (cov_40h9ut2jk().s[46]++, `swarm_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`);
    // Simulate initialization delay
    /* istanbul ignore next */
    cov_40h9ut2jk().s[47]++;
    await new Promise(resolve => {
      /* istanbul ignore next */
      cov_40h9ut2jk().f[5]++;
      cov_40h9ut2jk().s[48]++;
      return setTimeout(resolve, 1000);
    });
    /* istanbul ignore next */
    cov_40h9ut2jk().s[49]++;
    console.log(`✅ Swarm initialized with ID: ${swarmId}`);
    /* istanbul ignore next */
    cov_40h9ut2jk().s[50]++;
    console.log(`🌐 Listening on port ${config.port}`);
    /* istanbul ignore next */
    cov_40h9ut2jk().s[51]++;
    if (config.devMode) {
      /* istanbul ignore next */
      cov_40h9ut2jk().b[24][0]++;
      cov_40h9ut2jk().s[52]++;
      console.log('🔥 Development mode active - hot reloading enabled');
    } else
    /* istanbul ignore next */
    {
      cov_40h9ut2jk().b[24][1]++;
    }
    cov_40h9ut2jk().s[53]++;
    return swarmId;
  }
  async spawnInitialAgents(swarmId, config) {
    /* istanbul ignore next */
    cov_40h9ut2jk().f[6]++;
    cov_40h9ut2jk().s[54]++;
    console.log('Spawning initial agents...');
    const agentTypes =
    /* istanbul ignore next */
    (cov_40h9ut2jk().s[55]++, ['researcher', 'analyst', 'coordinator']);
    const agentsToSpawn =
    /* istanbul ignore next */
    (cov_40h9ut2jk().s[56]++, Math.min(config.maxAgents, 3));
    /* istanbul ignore next */
    cov_40h9ut2jk().s[57]++;
    for (let i =
    /* istanbul ignore next */
    (cov_40h9ut2jk().s[58]++, 0); i < agentsToSpawn; i++) {
      const agentType =
      /* istanbul ignore next */
      (cov_40h9ut2jk().s[59]++, agentTypes[i % agentTypes.length]);
      const agentId =
      /* istanbul ignore next */
      (cov_40h9ut2jk().s[60]++, `${agentType}-${i + 1}`);
      // Simulate agent spawning
      /* istanbul ignore next */
      cov_40h9ut2jk().s[61]++;
      await new Promise(resolve => {
        /* istanbul ignore next */
        cov_40h9ut2jk().f[7]++;
        cov_40h9ut2jk().s[62]++;
        return setTimeout(resolve, 200);
      });
      /* istanbul ignore next */
      cov_40h9ut2jk().s[63]++;
      console.log(`  ✅ Spawned ${agentType} agent: ${agentId}`);
    }
    /* istanbul ignore next */
    cov_40h9ut2jk().s[64]++;
    console.log(`✅ ${agentsToSpawn} initial agents spawned successfully`);
  }
  getHelp() {
    /* istanbul ignore next */
    cov_40h9ut2jk().f[8]++;
    cov_40h9ut2jk().s[65]++;
    return `Start a new swarm

USAGE:
  claude-flow swarm start [options]

OPTIONS:
  --topology <type>      Swarm topology (mesh, hierarchical, ring, star) [default: mesh]
  --agents <count>       Maximum number of agents [default: 5]
  --strategy <strategy>  Execution strategy (balanced, parallel, sequential) [default: balanced]
  --config <path>        Path to configuration file
  --dev-mode            Start in development mode with hot reloading
  --auto-spawn          Automatically spawn initial agents [default: true]
  --port <number>        Port for swarm communication [default: 3000]
  --log-level <level>    Log level (debug, info, warn, error) [default: info]
  --no-auto-spawn       Disable automatic agent spawning
  -h, --help            Show help

EXAMPLES:
  claude-flow swarm start
  claude-flow swarm start --topology mesh --agents 8
  claude-flow swarm start --strategy parallel --dev-mode
  claude-flow swarm start --config ./swarm-config.json
  claude-flow swarm start --port 4000 --log-level debug

TOPOLOGIES:
  mesh          All agents can communicate with each other
  hierarchical  Tree-like structure with coordinator agents
  ring          Agents form a circular communication pattern
  star          Central coordinator with spoke agents

STRATEGIES:
  balanced      Load balance tasks across all agents
  parallel      Execute multiple tasks simultaneously
  sequential    Execute tasks one after another

The start command initializes a new swarm with the specified configuration.
Use --dev-mode for development with hot reloading capabilities.
Use --config to load settings from a JSON configuration file.
`;
  }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,