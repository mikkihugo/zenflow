{"version":3,"names":["cov_40h9ut2jk","actualCoverage","BaseCommand","SwarmStartCommand","constructor","f","s","name","description","usage","category","minArgs","maxArgs","examples","flags","topology","type","default","agents","strategy","config","port","validate","context","errors","warnings","validTopologies","b","includes","push","join","validStrategies","logLevel","validLogLevels","length","valid","run","maxAgents","devMode","autoSpawn","customConfig","loadConfig","Object","assign","console","log","swarmId","initializeSwarm","spawnInitialAgents","success","exitCode","message","data","error","Error","String","configPath","fs","path","fullPath","resolve","configData","readFile","JSON","parse","Date","now","Math","random","toString","substr","Promise","setTimeout","agentTypes","agentsToSpawn","min","i","agentType","agentId","getHelp"],"sources":["/home/mhugo/code/claude-code-flow/src/cli/commands/swarm/start-command.ts"],"sourcesContent":["/**\n * Swarm Start Command Implementation\n * \n * Starts a new swarm with specified configuration\n */\n\nimport { BaseCommand } from '../../core/base-command.js';\nimport type { CommandContext, CommandResult, CommandValidationResult } from '../../types/index.js';\n\nexport class SwarmStartCommand extends BaseCommand {\n  constructor() {\n    super({\n      name: 'start',\n      description: 'Start a new swarm',\n      usage: 'claude-flow swarm start [options]',\n      category: 'swarm',\n      minArgs: 0,\n      maxArgs: 0,\n      examples: [\n        'claude-flow swarm start',\n        'claude-flow swarm start --topology mesh',\n        'claude-flow swarm start --agents 5 --strategy parallel',\n        'claude-flow swarm start --config ./my-config.json'\n      ],\n      flags: {\n        topology: {\n          type: 'string',\n          description: 'Swarm topology (mesh, hierarchical, ring, star)',\n          default: 'mesh'\n        },\n        agents: {\n          type: 'number',\n          description: 'Maximum number of agents',\n          default: 5\n        },\n        strategy: {\n          type: 'string',\n          description: 'Execution strategy (balanced, parallel, sequential)',\n          default: 'balanced'\n        },\n        config: {\n          type: 'string',\n          description: 'Path to configuration file'\n        },\n        'dev-mode': {\n          type: 'boolean',\n          description: 'Start in development mode with hot reloading',\n          default: false\n        },\n        'auto-spawn': {\n          type: 'boolean',\n          description: 'Automatically spawn initial agents',\n          default: true\n        },\n        port: {\n          type: 'number',\n          description: 'Port for swarm communication',\n          default: 3000\n        },\n        'log-level': {\n          type: 'string',\n          description: 'Log level (debug, info, warn, error)',\n          default: 'info'\n        }\n      }\n    });\n  }\n\n  protected async validate(context: CommandContext): Promise<CommandValidationResult | null> {\n    const errors: string[] = [];\n    const warnings: string[] = [];\n\n    // Validate topology\n    const topology = context.flags.topology as string;\n    const validTopologies = ['mesh', 'hierarchical', 'ring', 'star'];\n    if (topology && !validTopologies.includes(topology)) {\n      errors.push(`Invalid topology '${topology}'. Valid options: ${validTopologies.join(', ')}`);\n    }\n\n    // Validate strategy\n    const strategy = context.flags.strategy as string;\n    const validStrategies = ['balanced', 'parallel', 'sequential'];\n    if (strategy && !validStrategies.includes(strategy)) {\n      errors.push(`Invalid strategy '${strategy}'. Valid options: ${validStrategies.join(', ')}`);\n    }\n\n    // Validate agents count\n    const agents = context.flags.agents as number;\n    if (agents && (agents < 1 || agents > 50)) {\n      errors.push('Agent count must be between 1 and 50');\n    }\n\n    // Validate port\n    const port = context.flags.port as number;\n    if (port && (port < 1024 || port > 65535)) {\n      warnings.push('Port should be between 1024 and 65535 for best compatibility');\n    }\n\n    // Validate log level\n    const logLevel = context.flags['log-level'] as string;\n    const validLogLevels = ['debug', 'info', 'warn', 'error'];\n    if (logLevel && !validLogLevels.includes(logLevel)) {\n      errors.push(`Invalid log level '${logLevel}'. Valid options: ${validLogLevels.join(', ')}`);\n    }\n\n    return errors.length > 0 || warnings.length > 0 ? { valid: errors.length === 0, errors, warnings } : null;\n  }\n\n  protected async run(context: CommandContext): Promise<CommandResult> {\n    try {\n      const config = {\n        topology: context.flags.topology as string || 'mesh',\n        maxAgents: context.flags.agents as number || 5,\n        strategy: context.flags.strategy as string || 'balanced',\n        devMode: context.flags['dev-mode'] as boolean || false,\n        autoSpawn: context.flags['auto-spawn'] as boolean || true,\n        port: context.flags.port as number || 3000,\n        logLevel: context.flags['log-level'] as string || 'info'\n      };\n\n      // Load custom config if provided\n      if (context.flags.config) {\n        const customConfig = await this.loadConfig(context.flags.config as string);\n        Object.assign(config, customConfig);\n      }\n\n      console.log('Starting swarm with configuration:');\n      console.log(`  Topology: ${config.topology}`);\n      console.log(`  Max Agents: ${config.maxAgents}`);\n      console.log(`  Strategy: ${config.strategy}`);\n      console.log(`  Port: ${config.port}`);\n      console.log(`  Dev Mode: ${config.devMode ? 'enabled' : 'disabled'}`);\n      console.log('');\n\n      // Initialize swarm\n      const swarmId = await this.initializeSwarm(config);\n      \n      // Auto-spawn initial agents if requested\n      if (config.autoSpawn) {\n        await this.spawnInitialAgents(swarmId, config);\n      }\n\n      return {\n        success: true,\n        exitCode: 0,\n        message: `Swarm started successfully with ID: ${swarmId}`,\n        data: {\n          swarmId,\n          config,\n          port: config.port,\n          devMode: config.devMode\n        }\n      };\n    } catch (error) {\n      return {\n        success: false,\n        error: `Failed to start swarm: ${error instanceof Error ? error.message : String(error)}`,\n        exitCode: 1\n      };\n    }\n  }\n\n  private async loadConfig(configPath: string): Promise<any> {\n    try {\n      const fs = await import('fs/promises');\n      const path = await import('path');\n      \n      const fullPath = path.resolve(configPath);\n      const configData = await fs.readFile(fullPath, 'utf-8');\n      \n      return JSON.parse(configData);\n    } catch (error) {\n      throw new Error(`Failed to load config from ${configPath}: ${error instanceof Error ? error.message : String(error)}`);\n    }\n  }\n\n  private async initializeSwarm(config: any): Promise<string> {\n    // This would integrate with the actual swarm orchestration system\n    // For now, we'll simulate the initialization\n    \n    const swarmId = `swarm_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\n    \n    // Simulate initialization delay\n    await new Promise(resolve => setTimeout(resolve, 1000));\n    \n    console.log(`‚úÖ Swarm initialized with ID: ${swarmId}`);\n    console.log(`üåê Listening on port ${config.port}`);\n    \n    if (config.devMode) {\n      console.log('üî• Development mode active - hot reloading enabled');\n    }\n    \n    return swarmId;\n  }\n\n  private async spawnInitialAgents(swarmId: string, config: any): Promise<void> {\n    console.log('Spawning initial agents...');\n    \n    const agentTypes = ['researcher', 'analyst', 'coordinator'];\n    const agentsToSpawn = Math.min(config.maxAgents, 3);\n    \n    for (let i = 0; i < agentsToSpawn; i++) {\n      const agentType = agentTypes[i % agentTypes.length];\n      const agentId = `${agentType}-${i + 1}`;\n      \n      // Simulate agent spawning\n      await new Promise(resolve => setTimeout(resolve, 200));\n      \n      console.log(`  ‚úÖ Spawned ${agentType} agent: ${agentId}`);\n    }\n    \n    console.log(`‚úÖ ${agentsToSpawn} initial agents spawned successfully`);\n  }\n\n  getHelp(): string {\n    return `Start a new swarm\n\nUSAGE:\n  claude-flow swarm start [options]\n\nOPTIONS:\n  --topology <type>      Swarm topology (mesh, hierarchical, ring, star) [default: mesh]\n  --agents <count>       Maximum number of agents [default: 5]\n  --strategy <strategy>  Execution strategy (balanced, parallel, sequential) [default: balanced]\n  --config <path>        Path to configuration file\n  --dev-mode            Start in development mode with hot reloading\n  --auto-spawn          Automatically spawn initial agents [default: true]\n  --port <number>        Port for swarm communication [default: 3000]\n  --log-level <level>    Log level (debug, info, warn, error) [default: info]\n  --no-auto-spawn       Disable automatic agent spawning\n  -h, --help            Show help\n\nEXAMPLES:\n  claude-flow swarm start\n  claude-flow swarm start --topology mesh --agents 8\n  claude-flow swarm start --strategy parallel --dev-mode\n  claude-flow swarm start --config ./swarm-config.json\n  claude-flow swarm start --port 4000 --log-level debug\n\nTOPOLOGIES:\n  mesh          All agents can communicate with each other\n  hierarchical  Tree-like structure with coordinator agents\n  ring          Agents form a circular communication pattern\n  star          Central coordinator with spoke agents\n\nSTRATEGIES:\n  balanced      Load balance tasks across all agents\n  parallel      Execute multiple tasks simultaneously\n  sequential    Execute tasks one after another\n\nThe start command initializes a new swarm with the specified configuration.\nUse --dev-mode for development with hot reloading capabilities.\nUse --config to load settings from a JSON configuration file.\n`;\n  }\n}"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;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","ignoreList":[]}