497a36cfc71472e55b5de021bd02a7f9
/* istanbul ignore next */
function cov_sogl3ghve() {
  var path = "/home/mhugo/code/claude-code-flow/src/agents/import-worker.ts";
  var hash = "55f390196a7d67df14fc216009526df22fcc2026";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/home/mhugo/code/claude-code-flow/src/agents/import-worker.ts",
    statementMap: {
      "0": {
        start: {
          line: 18,
          column: 23
        },
        end: {
          line: 18,
          column: 32
        }
      },
      "1": {
        start: {
          line: 19,
          column: 22
        },
        end: {
          line: 19,
          column: 31
        }
      },
      "2": {
        start: {
          line: 20,
          column: 27
        },
        end: {
          line: 20,
          column: 36
        }
      },
      "3": {
        start: {
          line: 22,
          column: 17
        },
        end: {
          line: 22,
          column: 26
        }
      },
      "4": {
        start: {
          line: 26,
          column: 18
        },
        end: {
          line: 26,
          column: 20
        }
      },
      "5": {
        start: {
          line: 28,
          column: 14
        },
        end: {
          line: 35,
          column: 5
        }
      },
      "6": {
        start: {
          line: 37,
          column: 8
        },
        end: {
          line: 37,
          column: 16
        }
      },
      "7": {
        start: {
          line: 38,
          column: 8
        },
        end: {
          line: 38,
          column: 29
        }
      },
      "8": {
        start: {
          line: 39,
          column: 8
        },
        end: {
          line: 39,
          column: 37
        }
      },
      "9": {
        start: {
          line: 40,
          column: 8
        },
        end: {
          line: 40,
          column: 95
        }
      },
      "10": {
        start: {
          line: 41,
          column: 8
        },
        end: {
          line: 59,
          column: 10
        }
      },
      "11": {
        start: {
          line: 60,
          column: 8
        },
        end: {
          line: 60,
          column: 39
        }
      },
      "12": {
        start: {
          line: 61,
          column: 8
        },
        end: {
          line: 61,
          column: 34
        }
      },
      "13": {
        start: {
          line: 68,
          column: 8
        },
        end: {
          line: 89,
          column: 16
        }
      },
      "14": {
        start: {
          line: 73,
          column: 34
        },
        end: {
          line: 73,
          column: 53
        }
      },
      "15": {
        start: {
          line: 74,
          column: 33
        },
        end: {
          line: 74,
          column: 54
        }
      },
      "16": {
        start: {
          line: 76,
          column: 40
        },
        end: {
          line: 76,
          column: 89
        }
      },
      "17": {
        start: {
          line: 77,
          column: 40
        },
        end: {
          line: 77,
          column: 89
        }
      },
      "18": {
        start: {
          line: 78,
          column: 34
        },
        end: {
          line: 78,
          column: 84
        }
      },
      "19": {
        start: {
          line: 79,
          column: 20
        },
        end: {
          line: 83,
          column: 21
        }
      },
      "20": {
        start: {
          line: 80,
          column: 57
        },
        end: {
          line: 80,
          column: 62
        }
      },
      "21": {
        start: {
          line: 81,
          column: 40
        },
        end: {
          line: 81,
          column: 125
        }
      },
      "22": {
        start: {
          line: 82,
          column: 24
        },
        end: {
          line: 82,
          column: 103
        }
      },
      "23": {
        start: {
          line: 84,
          column: 20
        },
        end: {
          line: 84,
          column: 44
        }
      },
      "24": {
        start: {
          line: 87,
          column: 20
        },
        end: {
          line: 87,
          column: 71
        }
      },
      "25": {
        start: {
          line: 91,
          column: 8
        },
        end: {
          line: 106,
          column: 16
        }
      },
      "26": {
        start: {
          line: 96,
          column: 34
        },
        end: {
          line: 96,
          column: 53
        }
      },
      "27": {
        start: {
          line: 97,
          column: 33
        },
        end: {
          line: 97,
          column: 54
        }
      },
      "28": {
        start: {
          line: 98,
          column: 20
        },
        end: {
          line: 100,
          column: 21
        }
      },
      "29": {
        start: {
          line: 99,
          column: 24
        },
        end: {
          line: 99,
          column: 99
        }
      },
      "30": {
        start: {
          line: 101,
          column: 20
        },
        end: {
          line: 101,
          column: 44
        }
      },
      "31": {
        start: {
          line: 104,
          column: 20
        },
        end: {
          line: 104,
          column: 46
        }
      },
      "32": {
        start: {
          line: 108,
          column: 8
        },
        end: {
          line: 123,
          column: 16
        }
      },
      "33": {
        start: {
          line: 113,
          column: 34
        },
        end: {
          line: 113,
          column: 53
        }
      },
      "34": {
        start: {
          line: 114,
          column: 33
        },
        end: {
          line: 114,
          column: 54
        }
      },
      "35": {
        start: {
          line: 115,
          column: 20
        },
        end: {
          line: 117,
          column: 21
        }
      },
      "36": {
        start: {
          line: 116,
          column: 24
        },
        end: {
          line: 116,
          column: 99
        }
      },
      "37": {
        start: {
          line: 118,
          column: 20
        },
        end: {
          line: 118,
          column: 44
        }
      },
      "38": {
        start: {
          line: 121,
          column: 20
        },
        end: {
          line: 121,
          column: 46
        }
      },
      "39": {
        start: {
          line: 125,
          column: 8
        },
        end: {
          line: 138,
          column: 16
        }
      },
      "40": {
        start: {
          line: 130,
          column: 34
        },
        end: {
          line: 130,
          column: 53
        }
      },
      "41": {
        start: {
          line: 132,
          column: 20
        },
        end: {
          line: 132,
          column: 52
        }
      },
      "42": {
        start: {
          line: 133,
          column: 20
        },
        end: {
          line: 133,
          column: 44
        }
      },
      "43": {
        start: {
          line: 136,
          column: 20
        },
        end: {
          line: 136,
          column: 58
        }
      },
      "44": {
        start: {
          line: 140,
          column: 8
        },
        end: {
          line: 158,
          column: 16
        }
      },
      "45": {
        start: {
          line: 145,
          column: 34
        },
        end: {
          line: 145,
          column: 53
        }
      },
      "46": {
        start: {
          line: 146,
          column: 33
        },
        end: {
          line: 146,
          column: 54
        }
      },
      "47": {
        start: {
          line: 148,
          column: 44
        },
        end: {
          line: 148,
          column: 83
        }
      },
      "48": {
        start: {
          line: 149,
          column: 34
        },
        end: {
          line: 149,
          column: 61
        }
      },
      "49": {
        start: {
          line: 150,
          column: 20
        },
        end: {
          line: 152,
          column: 21
        }
      },
      "50": {
        start: {
          line: 151,
          column: 24
        },
        end: {
          line: 151,
          column: 113
        }
      },
      "51": {
        start: {
          line: 153,
          column: 20
        },
        end: {
          line: 153,
          column: 44
        }
      },
      "52": {
        start: {
          line: 156,
          column: 20
        },
        end: {
          line: 156,
          column: 57
        }
      },
      "53": {
        start: {
          line: 164,
          column: 8
        },
        end: {
          line: 164,
          column: 82
        }
      },
      "54": {
        start: {
          line: 165,
          column: 8
        },
        end: {
          line: 165,
          column: 80
        }
      },
      "55": {
        start: {
          line: 166,
          column: 8
        },
        end: {
          line: 166,
          column: 84
        }
      },
      "56": {
        start: {
          line: 172,
          column: 26
        },
        end: {
          line: 172,
          column: 36
        }
      },
      "57": {
        start: {
          line: 173,
          column: 8
        },
        end: {
          line: 247,
          column: 9
        }
      },
      "58": {
        start: {
          line: 174,
          column: 12
        },
        end: {
          line: 178,
          column: 15
        }
      },
      "59": {
        start: {
          line: 180,
          column: 12
        },
        end: {
          line: 184,
          column: 15
        }
      },
      "60": {
        start: {
          line: 186,
          column: 12
        },
        end: {
          line: 198,
          column: 13
        }
      },
      "61": {
        start: {
          line: 188,
          column: 20
        },
        end: {
          line: 188,
          column: 62
        }
      },
      "62": {
        start: {
          line: 189,
          column: 20
        },
        end: {
          line: 189,
          column: 26
        }
      },
      "63": {
        start: {
          line: 191,
          column: 20
        },
        end: {
          line: 191,
          column: 61
        }
      },
      "64": {
        start: {
          line: 192,
          column: 20
        },
        end: {
          line: 192,
          column: 26
        }
      },
      "65": {
        start: {
          line: 194,
          column: 20
        },
        end: {
          line: 194,
          column: 62
        }
      },
      "66": {
        start: {
          line: 195,
          column: 20
        },
        end: {
          line: 195,
          column: 26
        }
      },
      "67": {
        start: {
          line: 197,
          column: 20
        },
        end: {
          line: 197,
          column: 75
        }
      },
      "68": {
        start: {
          line: 199,
          column: 34
        },
        end: {
          line: 199,
          column: 56
        }
      },
      "69": {
        start: {
          line: 200,
          column: 12
        },
        end: {
          line: 200,
          column: 61
        }
      },
      "70": {
        start: {
          line: 202,
          column: 12
        },
        end: {
          line: 202,
          column: 42
        }
      },
      "71": {
        start: {
          line: 204,
          column: 12
        },
        end: {
          line: 210,
          column: 15
        }
      },
      "72": {
        start: {
          line: 212,
          column: 12
        },
        end: {
          line: 218,
          column: 13
        }
      },
      "73": {
        start: {
          line: 213,
          column: 16
        },
        end: {
          line: 217,
          column: 19
        }
      },
      "74": {
        start: {
          line: 219,
          column: 12
        },
        end: {
          line: 219,
          column: 58
        }
      },
      "75": {
        start: {
          line: 220,
          column: 12
        },
        end: {
          line: 220,
          column: 26
        }
      },
      "76": {
        start: {
          line: 223,
          column: 34
        },
        end: {
          line: 223,
          column: 56
        }
      },
      "77": {
        start: {
          line: 224,
          column: 33
        },
        end: {
          line: 224,
          column: 87
        }
      },
      "78": {
        start: {
          line: 225,
          column: 12
        },
        end: {
          line: 229,
          column: 15
        }
      },
      "79": {
        start: {
          line: 231,
          column: 12
        },
        end: {
          line: 237,
          column: 15
        }
      },
      "80": {
        start: {
          line: 239,
          column: 12
        },
        end: {
          line: 245,
          column: 13
        }
      },
      "81": {
        start: {
          line: 240,
          column: 16
        },
        end: {
          line: 244,
          column: 19
        }
      },
      "82": {
        start: {
          line: 246,
          column: 12
        },
        end: {
          line: 246,
          column: 24
        }
      },
      "83": {
        start: {
          line: 253,
          column: 22
        },
        end: {
          line: 253,
          column: 44
        }
      },
      "84": {
        start: {
          line: 254,
          column: 27
        },
        end: {
          line: 254,
          column: 36
        }
      },
      "85": {
        start: {
          line: 255,
          column: 31
        },
        end: {
          line: 255,
          column: 32
        }
      },
      "86": {
        start: {
          line: 256,
          column: 8
        },
        end: {
          line: 332,
          column: 9
        }
      },
      "87": {
        start: {
          line: 257,
          column: 12
        },
        end: {
          line: 331,
          column: 13
        }
      },
      "88": {
        start: {
          line: 258,
          column: 32
        },
        end: {
          line: 258,
          column: 63
        }
      },
      "89": {
        start: {
          line: 259,
          column: 31
        },
        end: {
          line: 259,
          column: 79
        }
      },
      "90": {
        start: {
          line: 260,
          column: 16
        },
        end: {
          line: 260,
          column: 61
        }
      },
      "91": {
        start: {
          line: 261,
          column: 16
        },
        end: {
          line: 264,
          column: 17
        }
      },
      "92": {
        start: {
          line: 262,
          column: 20
        },
        end: {
          line: 262,
          column: 82
        }
      },
      "93": {
        start: {
          line: 263,
          column: 20
        },
        end: {
          line: 263,
          column: 29
        }
      },
      "94": {
        start: {
          line: 265,
          column: 35
        },
        end: {
          line: 265,
          column: 42
        }
      },
      "95": {
        start: {
          line: 266,
          column: 35
        },
        end: {
          line: 266,
          column: 36
        }
      },
      "96": {
        start: {
          line: 267,
          column: 30
        },
        end: {
          line: 267,
          column: 31
        }
      },
      "97": {
        start: {
          line: 269,
          column: 37
        },
        end: {
          line: 269,
          column: 87
        }
      },
      "98": {
        start: {
          line: 269,
          column: 59
        },
        end: {
          line: 269,
          column: 86
        }
      },
      "99": {
        start: {
          line: 270,
          column: 16
        },
        end: {
          line: 309,
          column: 17
        }
      },
      "100": {
        start: {
          line: 271,
          column: 20
        },
        end: {
          line: 274,
          column: 21
        }
      },
      "101": {
        start: {
          line: 272,
          column: 24
        },
        end: {
          line: 272,
          column: 34
        }
      },
      "102": {
        start: {
          line: 273,
          column: 24
        },
        end: {
          line: 273,
          column: 33
        }
      },
      "103": {
        start: {
          line: 275,
          column: 39
        },
        end: {
          line: 275,
          column: 76
        }
      },
      "104": {
        start: {
          line: 276,
          column: 32
        },
        end: {
          line: 276,
          column: 37
        }
      },
      "105": {
        start: {
          line: 277,
          column: 20
        },
        end: {
          line: 305,
          column: 21
        }
      },
      "106": {
        start: {
          line: 278,
          column: 24
        },
        end: {
          line: 304,
          column: 25
        }
      },
      "107": {
        start: {
          line: 279,
          column: 47
        },
        end: {
          line: 279,
          column: 82
        }
      },
      "108": {
        start: {
          line: 280,
          column: 28
        },
        end: {
          line: 295,
          column: 29
        }
      },
      "109": {
        start: {
          line: 281,
          column: 32
        },
        end: {
          line: 281,
          column: 58
        }
      },
      "110": {
        start: {
          line: 282,
          column: 32
        },
        end: {
          line: 282,
          column: 47
        }
      },
      "111": {
        start: {
          line: 283,
          column: 32
        },
        end: {
          line: 283,
          column: 51
        }
      },
      "112": {
        start: {
          line: 284,
          column: 32
        },
        end: {
          line: 284,
          column: 45
        }
      },
      "113": {
        start: {
          line: 286,
          column: 53
        },
        end: {
          line: 286,
          column: 99
        }
      },
      "114": {
        start: {
          line: 287,
          column: 32
        },
        end: {
          line: 287,
          column: 92
        }
      },
      "115": {
        start: {
          line: 288,
          column: 32
        },
        end: {
          line: 293,
          column: 35
        }
      },
      "116": {
        start: {
          line: 294,
          column: 32
        },
        end: {
          line: 294,
          column: 38
        }
      },
      "117": {
        start: {
          line: 298,
          column: 28
        },
        end: {
          line: 303,
          column: 31
        }
      },
      "118": {
        start: {
          line: 306,
          column: 20
        },
        end: {
          line: 308,
          column: 21
        }
      },
      "119": {
        start: {
          line: 307,
          column: 24
        },
        end: {
          line: 307,
          column: 34
        }
      },
      "120": {
        start: {
          line: 311,
          column: 16
        },
        end: {
          line: 313,
          column: 17
        }
      },
      "121": {
        start: {
          line: 312,
          column: 20
        },
        end: {
          line: 312,
          column: 67
        }
      },
      "122": {
        start: {
          line: 314,
          column: 16
        },
        end: {
          line: 318,
          column: 19
        }
      },
      "123": {
        start: {
          line: 321,
          column: 16
        },
        end: {
          line: 324,
          column: 19
        }
      },
      "124": {
        start: {
          line: 325,
          column: 16
        },
        end: {
          line: 330,
          column: 19
        }
      },
      "125": {
        start: {
          line: 333,
          column: 8
        },
        end: {
          line: 333,
          column: 53
        }
      },
      "126": {
        start: {
          line: 334,
          column: 8
        },
        end: {
          line: 357,
          column: 10
        }
      },
      "127": {
        start: {
          line: 363,
          column: 22
        },
        end: {
          line: 363,
          column: 44
        }
      },
      "128": {
        start: {
          line: 364,
          column: 32
        },
        end: {
          line: 364,
          column: 41
        }
      },
      "129": {
        start: {
          line: 365,
          column: 8
        },
        end: {
          line: 388,
          column: 9
        }
      },
      "130": {
        start: {
          line: 366,
          column: 12
        },
        end: {
          line: 387,
          column: 13
        }
      },
      "131": {
        start: {
          line: 367,
          column: 32
        },
        end: {
          line: 367,
          column: 63
        }
      },
      "132": {
        start: {
          line: 368,
          column: 31
        },
        end: {
          line: 368,
          column: 79
        }
      },
      "133": {
        start: {
          line: 369,
          column: 32
        },
        end: {
          line: 369,
          column: 60
        }
      },
      "134": {
        start: {
          line: 370,
          column: 16
        },
        end: {
          line: 381,
          column: 19
        }
      },
      "135": {
        start: {
          line: 374,
          column: 49
        },
        end: {
          line: 379,
          column: 21
        }
      },
      "136": {
        start: {
          line: 384,
          column: 16
        },
        end: {
          line: 386,
          column: 19
        }
      },
      "137": {
        start: {
          line: 389,
          column: 8
        },
        end: {
          line: 411,
          column: 10
        }
      },
      "138": {
        start: {
          line: 417,
          column: 22
        },
        end: {
          line: 417,
          column: 44
        }
      },
      "139": {
        start: {
          line: 418,
          column: 34
        },
        end: {
          line: 418,
          column: 43
        }
      },
      "140": {
        start: {
          line: 419,
          column: 26
        },
        end: {
          line: 419,
          column: 27
        }
      },
      "141": {
        start: {
          line: 420,
          column: 28
        },
        end: {
          line: 420,
          column: 29
        }
      },
      "142": {
        start: {
          line: 421,
          column: 8
        },
        end: {
          line: 449,
          column: 9
        }
      },
      "143": {
        start: {
          line: 422,
          column: 12
        },
        end: {
          line: 448,
          column: 13
        }
      },
      "144": {
        start: {
          line: 423,
          column: 32
        },
        end: {
          line: 423,
          column: 63
        }
      },
      "145": {
        start: {
          line: 424,
          column: 31
        },
        end: {
          line: 424,
          column: 79
        }
      },
      "146": {
        start: {
          line: 425,
          column: 31
        },
        end: {
          line: 425,
          column: 73
        }
      },
      "147": {
        start: {
          line: 425,
          column: 50
        },
        end: {
          line: 425,
          column: 72
        }
      },
      "148": {
        start: {
          line: 426,
          column: 33
        },
        end: {
          line: 426,
          column: 77
        }
      },
      "149": {
        start: {
          line: 426,
          column: 52
        },
        end: {
          line: 426,
          column: 76
        }
      },
      "150": {
        start: {
          line: 427,
          column: 16
        },
        end: {
          line: 427,
          column: 45
        }
      },
      "151": {
        start: {
          line: 428,
          column: 16
        },
        end: {
          line: 428,
          column: 49
        }
      },
      "152": {
        start: {
          line: 429,
          column: 16
        },
        end: {
          line: 440,
          column: 19
        }
      },
      "153": {
        start: {
          line: 433,
          column: 49
        },
        end: {
          line: 439,
          column: 21
        }
      },
      "154": {
        start: {
          line: 443,
          column: 16
        },
        end: {
          line: 443,
          column: 30
        }
      },
      "155": {
        start: {
          line: 444,
          column: 16
        },
        end: {
          line: 447,
          column: 19
        }
      },
      "156": {
        start: {
          line: 450,
          column: 8
        },
        end: {
          line: 472,
          column: 10
        }
      },
      "157": {
        start: {
          line: 478,
          column: 23
        },
        end: {
          line: 478,
          column: 25
        }
      },
      "158": {
        start: {
          line: 479,
          column: 22
        },
        end: {
          line: 479,
          column: 41
        }
      },
      "159": {
        start: {
          line: 480,
          column: 24
        },
        end: {
          line: 480,
          column: 52
        }
      },
      "160": {
        start: {
          line: 481,
          column: 8
        },
        end: {
          line: 542,
          column: 9
        }
      },
      "161": {
        start: {
          line: 482,
          column: 31
        },
        end: {
          line: 482,
          column: 89
        }
      },
      "162": {
        start: {
          line: 484,
          column: 12
        },
        end: {
          line: 498,
          column: 13
        }
      },
      "163": {
        start: {
          line: 485,
          column: 16
        },
        end: {
          line: 497,
          column: 17
        }
      },
      "164": {
        start: {
          line: 486,
          column: 20
        },
        end: {
          line: 496,
          column: 23
        }
      },
      "165": {
        start: {
          line: 500,
          column: 12
        },
        end: {
          line: 513,
          column: 13
        }
      },
      "166": {
        start: {
          line: 501,
          column: 37
        },
        end: {
          line: 501,
          column: 95
        }
      },
      "167": {
        start: {
          line: 502,
          column: 16
        },
        end: {
          line: 512,
          column: 19
        }
      },
      "168": {
        start: {
          line: 515,
          column: 37
        },
        end: {
          line: 515,
          column: 74
        }
      },
      "169": {
        start: {
          line: 516,
          column: 12
        },
        end: {
          line: 528,
          column: 13
        }
      },
      "170": {
        start: {
          line: 517,
          column: 16
        },
        end: {
          line: 527,
          column: 19
        }
      },
      "171": {
        start: {
          line: 530,
          column: 12
        },
        end: {
          line: 541,
          column: 13
        }
      },
      "172": {
        start: {
          line: 531,
          column: 16
        },
        end: {
          line: 540,
          column: 19
        }
      },
      "173": {
        start: {
          line: 543,
          column: 8
        },
        end: {
          line: 543,
          column: 22
        }
      },
      "174": {
        start: {
          line: 549,
          column: 24
        },
        end: {
          line: 549,
          column: 26
        }
      },
      "175": {
        start: {
          line: 550,
          column: 22
        },
        end: {
          line: 550,
          column: 41
        }
      },
      "176": {
        start: {
          line: 551,
          column: 8
        },
        end: {
          line: 574,
          column: 11
        }
      },
      "177": {
        start: {
          line: 553,
          column: 32
        },
        end: {
          line: 553,
          column: 89
        }
      },
      "178": {
        start: {
          line: 554,
          column: 12
        },
        end: {
          line: 562,
          column: 13
        }
      },
      "179": {
        start: {
          line: 555,
          column: 16
        },
        end: {
          line: 561,
          column: 19
        }
      },
      "180": {
        start: {
          line: 564,
          column: 32
        },
        end: {
          line: 564,
          column: 89
        }
      },
      "181": {
        start: {
          line: 565,
          column: 12
        },
        end: {
          line: 573,
          column: 13
        }
      },
      "182": {
        start: {
          line: 566,
          column: 16
        },
        end: {
          line: 572,
          column: 19
        }
      },
      "183": {
        start: {
          line: 575,
          column: 8
        },
        end: {
          line: 575,
          column: 23
        }
      },
      "184": {
        start: {
          line: 582,
          column: 27
        },
        end: {
          line: 582,
          column: 29
        }
      },
      "185": {
        start: {
          line: 584,
          column: 29
        },
        end: {
          line: 584,
          column: 63
        }
      },
      "186": {
        start: {
          line: 585,
          column: 8
        },
        end: {
          line: 587,
          column: 9
        }
      },
      "187": {
        start: {
          line: 586,
          column: 12
        },
        end: {
          line: 586,
          column: 58
        }
      },
      "188": {
        start: {
          line: 589,
          column: 27
        },
        end: {
          line: 589,
          column: 63
        }
      },
      "189": {
        start: {
          line: 590,
          column: 8
        },
        end: {
          line: 593,
          column: 9
        }
      },
      "190": {
        start: {
          line: 591,
          column: 26
        },
        end: {
          line: 591,
          column: 69
        }
      },
      "191": {
        start: {
          line: 591,
          column: 60
        },
        end: {
          line: 591,
          column: 68
        }
      },
      "192": {
        start: {
          line: 592,
          column: 12
        },
        end: {
          line: 592,
          column: 38
        }
      },
      "193": {
        start: {
          line: 595,
          column: 31
        },
        end: {
          line: 595,
          column: 71
        }
      },
      "194": {
        start: {
          line: 596,
          column: 8
        },
        end: {
          line: 598,
          column: 9
        }
      },
      "195": {
        start: {
          line: 597,
          column: 12
        },
        end: {
          line: 597,
          column: 62
        }
      },
      "196": {
        start: {
          line: 599,
          column: 8
        },
        end: {
          line: 599,
          column: 26
        }
      },
      "197": {
        start: {
          line: 605,
          column: 25
        },
        end: {
          line: 605,
          column: 52
        }
      },
      "198": {
        start: {
          line: 606,
          column: 8
        },
        end: {
          line: 608,
          column: 9
        }
      },
      "199": {
        start: {
          line: 607,
          column: 12
        },
        end: {
          line: 607,
          column: 55
        }
      },
      "200": {
        start: {
          line: 609,
          column: 27
        },
        end: {
          line: 616,
          column: 9
        }
      },
      "201": {
        start: {
          line: 617,
          column: 8
        },
        end: {
          line: 656,
          column: 9
        }
      },
      "202": {
        start: {
          line: 618,
          column: 29
        },
        end: {
          line: 618,
          column: 46
        }
      },
      "203": {
        start: {
          line: 619,
          column: 29
        },
        end: {
          line: 619,
          column: 58
        }
      },
      "204": {
        start: {
          line: 621,
          column: 12
        },
        end: {
          line: 650,
          column: 13
        }
      },
      "205": {
        start: {
          line: 622,
          column: 16
        },
        end: {
          line: 622,
          column: 51
        }
      },
      "206": {
        start: {
          line: 623,
          column: 16
        },
        end: {
          line: 623,
          column: 41
        }
      },
      "207": {
        start: {
          line: 624,
          column: 16
        },
        end: {
          line: 624,
          column: 60
        }
      },
      "208": {
        start: {
          line: 628,
          column: 16
        },
        end: {
          line: 636,
          column: 17
        }
      },
      "209": {
        start: {
          line: 629,
          column: 40
        },
        end: {
          line: 629,
          column: 54
        }
      },
      "210": {
        start: {
          line: 630,
          column: 20
        },
        end: {
          line: 635,
          column: 21
        }
      },
      "211": {
        start: {
          line: 631,
          column: 24
        },
        end: {
          line: 631,
          column: 62
        }
      },
      "212": {
        start: {
          line: 632,
          column: 24
        },
        end: {
          line: 632,
          column: 49
        }
      },
      "213": {
        start: {
          line: 633,
          column: 24
        },
        end: {
          line: 633,
          column: 56
        }
      },
      "214": {
        start: {
          line: 634,
          column: 24
        },
        end: {
          line: 634,
          column: 30
        }
      },
      "215": {
        start: {
          line: 638,
          column: 16
        },
        end: {
          line: 649,
          column: 17
        }
      },
      "216": {
        start: {
          line: 639,
          column: 20
        },
        end: {
          line: 648,
          column: 21
        }
      },
      "217": {
        start: {
          line: 640,
          column: 42
        },
        end: {
          line: 640,
          column: 67
        }
      },
      "218": {
        start: {
          line: 641,
          column: 24
        },
        end: {
          line: 647,
          column: 25
        }
      },
      "219": {
        start: {
          line: 642,
          column: 28
        },
        end: {
          line: 642,
          column: 64
        }
      },
      "220": {
        start: {
          line: 643,
          column: 28
        },
        end: {
          line: 643,
          column: 53
        }
      },
      "221": {
        start: {
          line: 644,
          column: 28
        },
        end: {
          line: 644,
          column: 58
        }
      },
      "222": {
        start: {
          line: 645,
          column: 28
        },
        end: {
          line: 645,
          column: 55
        }
      },
      "223": {
        start: {
          line: 646,
          column: 28
        },
        end: {
          line: 646,
          column: 34
        }
      },
      "224": {
        start: {
          line: 654,
          column: 12
        },
        end: {
          line: 654,
          column: 49
        }
      },
      "225": {
        start: {
          line: 655,
          column: 12
        },
        end: {
          line: 655,
          column: 37
        }
      },
      "226": {
        start: {
          line: 657,
          column: 8
        },
        end: {
          line: 657,
          column: 56
        }
      },
      "227": {
        start: {
          line: 658,
          column: 8
        },
        end: {
          line: 658,
          column: 26
        }
      },
      "228": {
        start: {
          line: 664,
          column: 8
        },
        end: {
          line: 664,
          column: 63
        }
      },
      "229": {
        start: {
          line: 667,
          column: 8
        },
        end: {
          line: 667,
          column: 70
        }
      },
      "230": {
        start: {
          line: 667,
          column: 50
        },
        end: {
          line: 667,
          column: 68
        }
      },
      "231": {
        start: {
          line: 670,
          column: 8
        },
        end: {
          line: 670,
          column: 29
        }
      },
      "232": {
        start: {
          line: 673,
          column: 8
        },
        end: {
          line: 675,
          column: 9
        }
      },
      "233": {
        start: {
          line: 674,
          column: 12
        },
        end: {
          line: 674,
          column: 24
        }
      },
      "234": {
        start: {
          line: 676,
          column: 8
        },
        end: {
          line: 676,
          column: 32
        }
      },
      "235": {
        start: {
          line: 679,
          column: 25
        },
        end: {
          line: 679,
          column: 53
        }
      },
      "236": {
        start: {
          line: 680,
          column: 8
        },
        end: {
          line: 680,
          column: 39
        }
      },
      "237": {
        start: {
          line: 683,
          column: 8
        },
        end: {
          line: 685,
          column: 9
        }
      },
      "238": {
        start: {
          line: 684,
          column: 12
        },
        end: {
          line: 684,
          column: 44
        }
      },
      "239": {
        start: {
          line: 686,
          column: 8
        },
        end: {
          line: 686,
          column: 20
        }
      },
      "240": {
        start: {
          line: 691,
          column: 25
        },
        end: {
          line: 691,
          column: 42
        }
      },
      "241": {
        start: {
          line: 692,
          column: 27
        },
        end: {
          line: 692,
          column: 56
        }
      },
      "242": {
        start: {
          line: 694,
          column: 27
        },
        end: {
          line: 699,
          column: 9
        }
      },
      "243": {
        start: {
          line: 700,
          column: 8
        },
        end: {
          line: 705,
          column: 9
        }
      },
      "244": {
        start: {
          line: 701,
          column: 29
        },
        end: {
          line: 701,
          column: 57
        }
      },
      "245": {
        start: {
          line: 702,
          column: 12
        },
        end: {
          line: 704,
          column: 13
        }
      },
      "246": {
        start: {
          line: 703,
          column: 16
        },
        end: {
          line: 703,
          column: 33
        }
      },
      "247": {
        start: {
          line: 706,
          column: 8
        },
        end: {
          line: 706,
          column: 25
        }
      },
      "248": {
        start: {
          line: 710,
          column: 24
        },
        end: {
          line: 710,
          column: 33
        }
      },
      "249": {
        start: {
          line: 711,
          column: 30
        },
        end: {
          line: 723,
          column: 9
        }
      },
      "250": {
        start: {
          line: 712,
          column: 12
        },
        end: {
          line: 713,
          column: 28
        }
      },
      "251": {
        start: {
          line: 713,
          column: 16
        },
        end: {
          line: 713,
          column: 28
        }
      },
      "252": {
        start: {
          line: 714,
          column: 12
        },
        end: {
          line: 715,
          column: 29
        }
      },
      "253": {
        start: {
          line: 715,
          column: 16
        },
        end: {
          line: 715,
          column: 29
        }
      },
      "254": {
        start: {
          line: 716,
          column: 12
        },
        end: {
          line: 716,
          column: 33
        }
      },
      "255": {
        start: {
          line: 717,
          column: 33
        },
        end: {
          line: 717,
          column: 79
        }
      },
      "256": {
        start: {
          line: 718,
          column: 12
        },
        end: {
          line: 721,
          column: 13
        }
      },
      "257": {
        start: {
          line: 719,
          column: 16
        },
        end: {
          line: 720,
          column: 32
        }
      },
      "258": {
        start: {
          line: 720,
          column: 20
        },
        end: {
          line: 720,
          column: 32
        }
      },
      "259": {
        start: {
          line: 722,
          column: 12
        },
        end: {
          line: 722,
          column: 25
        }
      },
      "260": {
        start: {
          line: 724,
          column: 8
        },
        end: {
          line: 724,
          column: 47
        }
      },
      "261": {
        start: {
          line: 730,
          column: 8
        },
        end: {
          line: 731,
          column: 19
        }
      },
      "262": {
        start: {
          line: 731,
          column: 12
        },
        end: {
          line: 731,
          column: 19
        }
      },
      "263": {
        start: {
          line: 732,
          column: 8
        },
        end: {
          line: 746,
          column: 9
        }
      },
      "264": {
        start: {
          line: 735,
          column: 12
        },
        end: {
          line: 742,
          column: 15
        }
      },
      "265": {
        start: {
          line: 745,
          column: 12
        },
        end: {
          line: 745,
          column: 80
        }
      },
      "266": {
        start: {
          line: 749,
          column: 8
        },
        end: {
          line: 759,
          column: 9
        }
      },
      "267": {
        start: {
          line: 750,
          column: 12
        },
        end: {
          line: 755,
          column: 15
        }
      },
      "268": {
        start: {
          line: 758,
          column: 12
        },
        end: {
          line: 758,
          column: 71
        }
      },
      "269": {
        start: {
          line: 766,
          column: 8
        },
        end: {
          line: 766,
          column: 62
        }
      },
      "270": {
        start: {
          line: 770,
          column: 8
        },
        end: {
          line: 770,
          column: 61
        }
      },
      "271": {
        start: {
          line: 774,
          column: 8
        },
        end: {
          line: 774,
          column: 64
        }
      },
      "272": {
        start: {
          line: 780,
          column: 27
        },
        end: {
          line: 780,
          column: 29
        }
      },
      "273": {
        start: {
          line: 781,
          column: 8
        },
        end: {
          line: 783,
          column: 9
        }
      },
      "274": {
        start: {
          line: 782,
          column: 12
        },
        end: {
          line: 782,
          column: 71
        }
      },
      "275": {
        start: {
          line: 784,
          column: 8
        },
        end: {
          line: 784,
          column: 26
        }
      },
      "276": {
        start: {
          line: 787,
          column: 27
        },
        end: {
          line: 787,
          column: 39
        }
      },
      "277": {
        start: {
          line: 788,
          column: 31
        },
        end: {
          line: 788,
          column: 88
        }
      },
      "278": {
        start: {
          line: 788,
          column: 72
        },
        end: {
          line: 788,
          column: 80
        }
      },
      "279": {
        start: {
          line: 789,
          column: 28
        },
        end: {
          line: 789,
          column: 101
        }
      },
      "280": {
        start: {
          line: 789,
          column: 76
        },
        end: {
          line: 789,
          column: 97
        }
      },
      "281": {
        start: {
          line: 790,
          column: 27
        },
        end: {
          line: 790,
          column: 99
        }
      },
      "282": {
        start: {
          line: 790,
          column: 75
        },
        end: {
          line: 790,
          column: 95
        }
      },
      "283": {
        start: {
          line: 791,
          column: 8
        },
        end: {
          line: 802,
          column: 10
        }
      },
      "284": {
        start: {
          line: 805,
          column: 8
        },
        end: {
          line: 812,
          column: 10
        }
      },
      "285": {
        start: {
          line: 808,
          column: 78
        },
        end: {
          line: 808,
          column: 105
        }
      },
      "286": {
        start: {
          line: 809,
          column: 77
        },
        end: {
          line: 809,
          column: 98
        }
      },
      "287": {
        start: {
          line: 815,
          column: 27
        },
        end: {
          line: 815,
          column: 83
        }
      },
      "288": {
        start: {
          line: 815,
          column: 68
        },
        end: {
          line: 815,
          column: 75
        }
      },
      "289": {
        start: {
          line: 816,
          column: 8
        },
        end: {
          line: 824,
          column: 10
        }
      },
      "290": {
        start: {
          line: 827,
          column: 32
        },
        end: {
          line: 827,
          column: 34
        }
      },
      "291": {
        start: {
          line: 828,
          column: 28
        },
        end: {
          line: 828,
          column: 101
        }
      },
      "292": {
        start: {
          line: 828,
          column: 76
        },
        end: {
          line: 828,
          column: 97
        }
      },
      "293": {
        start: {
          line: 829,
          column: 8
        },
        end: {
          line: 831,
          column: 9
        }
      },
      "294": {
        start: {
          line: 830,
          column: 12
        },
        end: {
          line: 830,
          column: 111
        }
      },
      "295": {
        start: {
          line: 832,
          column: 32
        },
        end: {
          line: 832,
          column: 66
        }
      },
      "296": {
        start: {
          line: 833,
          column: 8
        },
        end: {
          line: 835,
          column: 9
        }
      },
      "297": {
        start: {
          line: 834,
          column: 12
        },
        end: {
          line: 834,
          column: 94
        }
      },
      "298": {
        start: {
          line: 836,
          column: 8
        },
        end: {
          line: 836,
          column: 31
        }
      },
      "299": {
        start: {
          line: 839,
          column: 32
        },
        end: {
          line: 839,
          column: 34
        }
      },
      "300": {
        start: {
          line: 840,
          column: 27
        },
        end: {
          line: 840,
          column: 56
        }
      },
      "301": {
        start: {
          line: 841,
          column: 8
        },
        end: {
          line: 843,
          column: 9
        }
      },
      "302": {
        start: {
          line: 842,
          column: 12
        },
        end: {
          line: 842,
          column: 89
        }
      },
      "303": {
        start: {
          line: 844,
          column: 8
        },
        end: {
          line: 846,
          column: 9
        }
      },
      "304": {
        start: {
          line: 845,
          column: 12
        },
        end: {
          line: 845,
          column: 80
        }
      },
      "305": {
        start: {
          line: 847,
          column: 8
        },
        end: {
          line: 847,
          column: 31
        }
      },
      "306": {
        start: {
          line: 850,
          column: 22
        },
        end: {
          line: 850,
          column: 107
        }
      },
      "307": {
        start: {
          line: 850,
          column: 92
        },
        end: {
          line: 850,
          column: 103
        }
      },
      "308": {
        start: {
          line: 851,
          column: 8
        },
        end: {
          line: 851,
          column: 36
        }
      },
      "309": {
        start: {
          line: 857,
          column: 8
        },
        end: {
          line: 861,
          column: 10
        }
      },
      "310": {
        start: {
          line: 867,
          column: 8
        },
        end: {
          line: 880,
          column: 10
        }
      },
      "311": {
        start: {
          line: 887,
          column: 4
        },
        end: {
          line: 887,
          column: 61
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 36,
            column: 4
          },
          end: {
            line: 36,
            column: 5
          }
        },
        loc: {
          start: {
            line: 36,
            column: 44
          },
          end: {
            line: 62,
            column: 5
          }
        },
        line: 36
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 66,
            column: 4
          },
          end: {
            line: 66,
            column: 5
          }
        },
        loc: {
          start: {
            line: 66,
            column: 30
          },
          end: {
            line: 159,
            column: 5
          }
        },
        line: 66
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 72,
            column: 23
          },
          end: {
            line: 72,
            column: 24
          }
        },
        loc: {
          start: {
            line: 72,
            column: 43
          },
          end: {
            line: 85,
            column: 17
          }
        },
        line: 72
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 86,
            column: 26
          },
          end: {
            line: 86,
            column: 27
          }
        },
        loc: {
          start: {
            line: 86,
            column: 47
          },
          end: {
            line: 88,
            column: 17
          }
        },
        line: 86
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 95,
            column: 23
          },
          end: {
            line: 95,
            column: 24
          }
        },
        loc: {
          start: {
            line: 95,
            column: 43
          },
          end: {
            line: 102,
            column: 17
          }
        },
        line: 95
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 103,
            column: 26
          },
          end: {
            line: 103,
            column: 27
          }
        },
        loc: {
          start: {
            line: 103,
            column: 47
          },
          end: {
            line: 105,
            column: 17
          }
        },
        line: 103
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 112,
            column: 23
          },
          end: {
            line: 112,
            column: 24
          }
        },
        loc: {
          start: {
            line: 112,
            column: 43
          },
          end: {
            line: 119,
            column: 17
          }
        },
        line: 112
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 120,
            column: 26
          },
          end: {
            line: 120,
            column: 27
          }
        },
        loc: {
          start: {
            line: 120,
            column: 47
          },
          end: {
            line: 122,
            column: 17
          }
        },
        line: 120
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 129,
            column: 23
          },
          end: {
            line: 129,
            column: 24
          }
        },
        loc: {
          start: {
            line: 129,
            column: 43
          },
          end: {
            line: 134,
            column: 17
          }
        },
        line: 129
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 135,
            column: 26
          },
          end: {
            line: 135,
            column: 27
          }
        },
        loc: {
          start: {
            line: 135,
            column: 47
          },
          end: {
            line: 137,
            column: 17
          }
        },
        line: 135
      },
      "10": {
        name: "(anonymous_10)",
        decl: {
          start: {
            line: 144,
            column: 23
          },
          end: {
            line: 144,
            column: 24
          }
        },
        loc: {
          start: {
            line: 144,
            column: 43
          },
          end: {
            line: 154,
            column: 17
          }
        },
        line: 144
      },
      "11": {
        name: "(anonymous_11)",
        decl: {
          start: {
            line: 155,
            column: 26
          },
          end: {
            line: 155,
            column: 27
          }
        },
        loc: {
          start: {
            line: 155,
            column: 47
          },
          end: {
            line: 157,
            column: 17
          }
        },
        line: 155
      },
      "12": {
        name: "(anonymous_12)",
        decl: {
          start: {
            line: 163,
            column: 4
          },
          end: {
            line: 163,
            column: 5
          }
        },
        loc: {
          start: {
            line: 163,
            column: 25
          },
          end: {
            line: 167,
            column: 5
          }
        },
        line: 163
      },
      "13": {
        name: "(anonymous_13)",
        decl: {
          start: {
            line: 171,
            column: 4
          },
          end: {
            line: 171,
            column: 5
          }
        },
        loc: {
          start: {
            line: 171,
            column: 28
          },
          end: {
            line: 248,
            column: 5
          }
        },
        line: 171
      },
      "14": {
        name: "(anonymous_14)",
        decl: {
          start: {
            line: 252,
            column: 4
          },
          end: {
            line: 252,
            column: 5
          }
        },
        loc: {
          start: {
            line: 252,
            column: 32
          },
          end: {
            line: 358,
            column: 5
          }
        },
        line: 252
      },
      "15": {
        name: "(anonymous_15)",
        decl: {
          start: {
            line: 269,
            column: 49
          },
          end: {
            line: 269,
            column: 50
          }
        },
        loc: {
          start: {
            line: 269,
            column: 59
          },
          end: {
            line: 269,
            column: 86
          }
        },
        line: 269
      },
      "16": {
        name: "(anonymous_16)",
        decl: {
          start: {
            line: 362,
            column: 4
          },
          end: {
            line: 362,
            column: 5
          }
        },
        loc: {
          start: {
            line: 362,
            column: 31
          },
          end: {
            line: 412,
            column: 5
          }
        },
        line: 362
      },
      "17": {
        name: "(anonymous_17)",
        decl: {
          start: {
            line: 374,
            column: 41
          },
          end: {
            line: 374,
            column: 42
          }
        },
        loc: {
          start: {
            line: 374,
            column: 49
          },
          end: {
            line: 379,
            column: 21
          }
        },
        line: 374
      },
      "18": {
        name: "(anonymous_18)",
        decl: {
          start: {
            line: 416,
            column: 4
          },
          end: {
            line: 416,
            column: 5
          }
        },
        loc: {
          start: {
            line: 416,
            column: 32
          },
          end: {
            line: 473,
            column: 5
          }
        },
        line: 416
      },
      "19": {
        name: "(anonymous_19)",
        decl: {
          start: {
            line: 425,
            column: 45
          },
          end: {
            line: 425,
            column: 46
          }
        },
        loc: {
          start: {
            line: 425,
            column: 50
          },
          end: {
            line: 425,
            column: 72
          }
        },
        line: 425
      },
      "20": {
        name: "(anonymous_20)",
        decl: {
          start: {
            line: 426,
            column: 47
          },
          end: {
            line: 426,
            column: 48
          }
        },
        loc: {
          start: {
            line: 426,
            column: 52
          },
          end: {
            line: 426,
            column: 76
          }
        },
        line: 426
      },
      "21": {
        name: "(anonymous_21)",
        decl: {
          start: {
            line: 433,
            column: 39
          },
          end: {
            line: 433,
            column: 40
          }
        },
        loc: {
          start: {
            line: 433,
            column: 49
          },
          end: {
            line: 439,
            column: 21
          }
        },
        line: 433
      },
      "22": {
        name: "(anonymous_22)",
        decl: {
          start: {
            line: 477,
            column: 4
          },
          end: {
            line: 477,
            column: 5
          }
        },
        loc: {
          start: {
            line: 477,
            column: 48
          },
          end: {
            line: 544,
            column: 5
          }
        },
        line: 477
      },
      "23": {
        name: "(anonymous_23)",
        decl: {
          start: {
            line: 548,
            column: 4
          },
          end: {
            line: 548,
            column: 5
          }
        },
        loc: {
          start: {
            line: 548,
            column: 28
          },
          end: {
            line: 576,
            column: 5
          }
        },
        line: 548
      },
      "24": {
        name: "(anonymous_24)",
        decl: {
          start: {
            line: 551,
            column: 22
          },
          end: {
            line: 551,
            column: 23
          }
        },
        loc: {
          start: {
            line: 551,
            column: 39
          },
          end: {
            line: 574,
            column: 9
          }
        },
        line: 551
      },
      "25": {
        name: "(anonymous_25)",
        decl: {
          start: {
            line: 580,
            column: 4
          },
          end: {
            line: 580,
            column: 5
          }
        },
        loc: {
          start: {
            line: 580,
            column: 37
          },
          end: {
            line: 600,
            column: 5
          }
        },
        line: 580
      },
      "26": {
        name: "(anonymous_26)",
        decl: {
          start: {
            line: 591,
            column: 55
          },
          end: {
            line: 591,
            column: 56
          }
        },
        loc: {
          start: {
            line: 591,
            column: 60
          },
          end: {
            line: 591,
            column: 68
          }
        },
        line: 591
      },
      "27": {
        name: "(anonymous_27)",
        decl: {
          start: {
            line: 604,
            column: 4
          },
          end: {
            line: 604,
            column: 5
          }
        },
        loc: {
          start: {
            line: 604,
            column: 46
          },
          end: {
            line: 659,
            column: 5
          }
        },
        line: 604
      },
      "28": {
        name: "(anonymous_28)",
        decl: {
          start: {
            line: 663,
            column: 4
          },
          end: {
            line: 663,
            column: 5
          }
        },
        loc: {
          start: {
            line: 663,
            column: 27
          },
          end: {
            line: 665,
            column: 5
          }
        },
        line: 663
      },
      "29": {
        name: "(anonymous_29)",
        decl: {
          start: {
            line: 666,
            column: 4
          },
          end: {
            line: 666,
            column: 5
          }
        },
        loc: {
          start: {
            line: 666,
            column: 23
          },
          end: {
            line: 668,
            column: 5
          }
        },
        line: 666
      },
      "30": {
        name: "(anonymous_30)",
        decl: {
          start: {
            line: 667,
            column: 43
          },
          end: {
            line: 667,
            column: 44
          }
        },
        loc: {
          start: {
            line: 667,
            column: 50
          },
          end: {
            line: 667,
            column: 68
          }
        },
        line: 667
      },
      "31": {
        name: "(anonymous_31)",
        decl: {
          start: {
            line: 669,
            column: 4
          },
          end: {
            line: 669,
            column: 5
          }
        },
        loc: {
          start: {
            line: 669,
            column: 23
          },
          end: {
            line: 671,
            column: 5
          }
        },
        line: 669
      },
      "32": {
        name: "(anonymous_32)",
        decl: {
          start: {
            line: 672,
            column: 4
          },
          end: {
            line: 672,
            column: 5
          }
        },
        loc: {
          start: {
            line: 672,
            column: 42
          },
          end: {
            line: 677,
            column: 5
          }
        },
        line: 672
      },
      "33": {
        name: "(anonymous_33)",
        decl: {
          start: {
            line: 678,
            column: 4
          },
          end: {
            line: 678,
            column: 5
          }
        },
        loc: {
          start: {
            line: 678,
            column: 41
          },
          end: {
            line: 681,
            column: 5
          }
        },
        line: 678
      },
      "34": {
        name: "(anonymous_34)",
        decl: {
          start: {
            line: 682,
            column: 4
          },
          end: {
            line: 682,
            column: 5
          }
        },
        loc: {
          start: {
            line: 682,
            column: 37
          },
          end: {
            line: 687,
            column: 5
          }
        },
        line: 682
      },
      "35": {
        name: "(anonymous_35)",
        decl: {
          start: {
            line: 688,
            column: 4
          },
          end: {
            line: 688,
            column: 5
          }
        },
        loc: {
          start: {
            line: 688,
            column: 46
          },
          end: {
            line: 707,
            column: 5
          }
        },
        line: 688
      },
      "36": {
        name: "(anonymous_36)",
        decl: {
          start: {
            line: 708,
            column: 4
          },
          end: {
            line: 708,
            column: 5
          }
        },
        loc: {
          start: {
            line: 708,
            column: 43
          },
          end: {
            line: 725,
            column: 5
          }
        },
        line: 708
      },
      "37": {
        name: "(anonymous_37)",
        decl: {
          start: {
            line: 711,
            column: 30
          },
          end: {
            line: 711,
            column: 31
          }
        },
        loc: {
          start: {
            line: 711,
            column: 51
          },
          end: {
            line: 723,
            column: 9
          }
        },
        line: 711
      },
      "38": {
        name: "(anonymous_38)",
        decl: {
          start: {
            line: 729,
            column: 4
          },
          end: {
            line: 729,
            column: 5
          }
        },
        loc: {
          start: {
            line: 729,
            column: 37
          },
          end: {
            line: 747,
            column: 5
          }
        },
        line: 729
      },
      "39": {
        name: "(anonymous_39)",
        decl: {
          start: {
            line: 748,
            column: 4
          },
          end: {
            line: 748,
            column: 5
          }
        },
        loc: {
          start: {
            line: 748,
            column: 38
          },
          end: {
            line: 760,
            column: 5
          }
        },
        line: 748
      },
      "40": {
        name: "(anonymous_40)",
        decl: {
          start: {
            line: 764,
            column: 4
          },
          end: {
            line: 764,
            column: 5
          }
        },
        loc: {
          start: {
            line: 764,
            column: 29
          },
          end: {
            line: 767,
            column: 5
          }
        },
        line: 764
      },
      "41": {
        name: "(anonymous_41)",
        decl: {
          start: {
            line: 768,
            column: 4
          },
          end: {
            line: 768,
            column: 5
          }
        },
        loc: {
          start: {
            line: 768,
            column: 28
          },
          end: {
            line: 771,
            column: 5
          }
        },
        line: 768
      },
      "42": {
        name: "(anonymous_42)",
        decl: {
          start: {
            line: 772,
            column: 4
          },
          end: {
            line: 772,
            column: 5
          }
        },
        loc: {
          start: {
            line: 772,
            column: 30
          },
          end: {
            line: 775,
            column: 5
          }
        },
        line: 772
      },
      "43": {
        name: "(anonymous_43)",
        decl: {
          start: {
            line: 779,
            column: 4
          },
          end: {
            line: 779,
            column: 5
          }
        },
        loc: {
          start: {
            line: 779,
            column: 29
          },
          end: {
            line: 785,
            column: 5
          }
        },
        line: 779
      },
      "44": {
        name: "(anonymous_44)",
        decl: {
          start: {
            line: 786,
            column: 4
          },
          end: {
            line: 786,
            column: 5
          }
        },
        loc: {
          start: {
            line: 786,
            column: 31
          },
          end: {
            line: 803,
            column: 5
          }
        },
        line: 786
      },
      "45": {
        name: "(anonymous_45)",
        decl: {
          start: {
            line: 788,
            column: 67
          },
          end: {
            line: 788,
            column: 68
          }
        },
        loc: {
          start: {
            line: 788,
            column: 72
          },
          end: {
            line: 788,
            column: 80
          }
        },
        line: 788
      },
      "46": {
        name: "(anonymous_46)",
        decl: {
          start: {
            line: 789,
            column: 64
          },
          end: {
            line: 789,
            column: 65
          }
        },
        loc: {
          start: {
            line: 789,
            column: 76
          },
          end: {
            line: 789,
            column: 97
          }
        },
        line: 789
      },
      "47": {
        name: "(anonymous_47)",
        decl: {
          start: {
            line: 790,
            column: 63
          },
          end: {
            line: 790,
            column: 64
          }
        },
        loc: {
          start: {
            line: 790,
            column: 75
          },
          end: {
            line: 790,
            column: 95
          }
        },
        line: 790
      },
      "48": {
        name: "(anonymous_48)",
        decl: {
          start: {
            line: 804,
            column: 4
          },
          end: {
            line: 804,
            column: 5
          }
        },
        loc: {
          start: {
            line: 804,
            column: 36
          },
          end: {
            line: 813,
            column: 5
          }
        },
        line: 804
      },
      "49": {
        name: "(anonymous_49)",
        decl: {
          start: {
            line: 808,
            column: 66
          },
          end: {
            line: 808,
            column: 67
          }
        },
        loc: {
          start: {
            line: 808,
            column: 78
          },
          end: {
            line: 808,
            column: 105
          }
        },
        line: 808
      },
      "50": {
        name: "(anonymous_50)",
        decl: {
          start: {
            line: 809,
            column: 65
          },
          end: {
            line: 809,
            column: 66
          }
        },
        loc: {
          start: {
            line: 809,
            column: 77
          },
          end: {
            line: 809,
            column: 98
          }
        },
        line: 809
      },
      "51": {
        name: "(anonymous_51)",
        decl: {
          start: {
            line: 814,
            column: 4
          },
          end: {
            line: 814,
            column: 5
          }
        },
        loc: {
          start: {
            line: 814,
            column: 38
          },
          end: {
            line: 825,
            column: 5
          }
        },
        line: 814
      },
      "52": {
        name: "(anonymous_52)",
        decl: {
          start: {
            line: 815,
            column: 63
          },
          end: {
            line: 815,
            column: 64
          }
        },
        loc: {
          start: {
            line: 815,
            column: 68
          },
          end: {
            line: 815,
            column: 75
          }
        },
        line: 815
      },
      "53": {
        name: "(anonymous_53)",
        decl: {
          start: {
            line: 826,
            column: 4
          },
          end: {
            line: 826,
            column: 5
          }
        },
        loc: {
          start: {
            line: 826,
            column: 37
          },
          end: {
            line: 837,
            column: 5
          }
        },
        line: 826
      },
      "54": {
        name: "(anonymous_54)",
        decl: {
          start: {
            line: 828,
            column: 64
          },
          end: {
            line: 828,
            column: 65
          }
        },
        loc: {
          start: {
            line: 828,
            column: 76
          },
          end: {
            line: 828,
            column: 97
          }
        },
        line: 828
      },
      "55": {
        name: "(anonymous_55)",
        decl: {
          start: {
            line: 838,
            column: 4
          },
          end: {
            line: 838,
            column: 5
          }
        },
        loc: {
          start: {
            line: 838,
            column: 40
          },
          end: {
            line: 848,
            column: 5
          }
        },
        line: 838
      },
      "56": {
        name: "(anonymous_56)",
        decl: {
          start: {
            line: 849,
            column: 4
          },
          end: {
            line: 849,
            column: 5
          }
        },
        loc: {
          start: {
            line: 849,
            column: 33
          },
          end: {
            line: 852,
            column: 5
          }
        },
        line: 849
      },
      "57": {
        name: "(anonymous_57)",
        decl: {
          start: {
            line: 850,
            column: 76
          },
          end: {
            line: 850,
            column: 77
          }
        },
        loc: {
          start: {
            line: 850,
            column: 92
          },
          end: {
            line: 850,
            column: 103
          }
        },
        line: 850
      },
      "58": {
        name: "(anonymous_58)",
        decl: {
          start: {
            line: 856,
            column: 4
          },
          end: {
            line: 856,
            column: 5
          }
        },
        loc: {
          start: {
            line: 856,
            column: 17
          },
          end: {
            line: 862,
            column: 5
          }
        },
        line: 856
      },
      "59": {
        name: "(anonymous_59)",
        decl: {
          start: {
            line: 866,
            column: 4
          },
          end: {
            line: 866,
            column: 5
          }
        },
        loc: {
          start: {
            line: 866,
            column: 16
          },
          end: {
            line: 881,
            column: 5
          }
        },
        line: 866
      },
      "60": {
        name: "createImportWorker",
        decl: {
          start: {
            line: 886,
            column: 16
          },
          end: {
            line: 886,
            column: 34
          }
        },
        loc: {
          start: {
            line: 886,
            column: 63
          },
          end: {
            line: 888,
            column: 1
          }
        },
        line: 886
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 78,
            column: 34
          },
          end: {
            line: 78,
            column: 84
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 78,
            column: 34
          },
          end: {
            line: 78,
            column: 57
          }
        }, {
          start: {
            line: 78,
            column: 61
          },
          end: {
            line: 78,
            column: 84
          }
        }],
        line: 78
      },
      "1": {
        loc: {
          start: {
            line: 79,
            column: 20
          },
          end: {
            line: 83,
            column: 21
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 79,
            column: 20
          },
          end: {
            line: 83,
            column: 21
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 79
      },
      "2": {
        loc: {
          start: {
            line: 81,
            column: 72
          },
          end: {
            line: 81,
            column: 124
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 81,
            column: 72
          },
          end: {
            line: 81,
            column: 90
          }
        }, {
          start: {
            line: 81,
            column: 94
          },
          end: {
            line: 81,
            column: 124
          }
        }],
        line: 81
      },
      "3": {
        loc: {
          start: {
            line: 87,
            column: 27
          },
          end: {
            line: 87,
            column: 70
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 87,
            column: 27
          },
          end: {
            line: 87,
            column: 45
          }
        }, {
          start: {
            line: 87,
            column: 49
          },
          end: {
            line: 87,
            column: 70
          }
        }],
        line: 87
      },
      "4": {
        loc: {
          start: {
            line: 98,
            column: 20
          },
          end: {
            line: 100,
            column: 21
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 98,
            column: 20
          },
          end: {
            line: 100,
            column: 21
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 98
      },
      "5": {
        loc: {
          start: {
            line: 115,
            column: 20
          },
          end: {
            line: 117,
            column: 21
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 115,
            column: 20
          },
          end: {
            line: 117,
            column: 21
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 115
      },
      "6": {
        loc: {
          start: {
            line: 150,
            column: 20
          },
          end: {
            line: 152,
            column: 21
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 150,
            column: 20
          },
          end: {
            line: 152,
            column: 21
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 150
      },
      "7": {
        loc: {
          start: {
            line: 186,
            column: 12
          },
          end: {
            line: 198,
            column: 13
          }
        },
        type: "switch",
        locations: [{
          start: {
            line: 187,
            column: 16
          },
          end: {
            line: 189,
            column: 26
          }
        }, {
          start: {
            line: 190,
            column: 16
          },
          end: {
            line: 192,
            column: 26
          }
        }, {
          start: {
            line: 193,
            column: 16
          },
          end: {
            line: 195,
            column: 26
          }
        }, {
          start: {
            line: 196,
            column: 16
          },
          end: {
            line: 197,
            column: 75
          }
        }],
        line: 186
      },
      "8": {
        loc: {
          start: {
            line: 212,
            column: 12
          },
          end: {
            line: 218,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 212,
            column: 12
          },
          end: {
            line: 218,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 212
      },
      "9": {
        loc: {
          start: {
            line: 224,
            column: 33
          },
          end: {
            line: 224,
            column: 87
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 224,
            column: 58
          },
          end: {
            line: 224,
            column: 71
          }
        }, {
          start: {
            line: 224,
            column: 74
          },
          end: {
            line: 224,
            column: 87
          }
        }],
        line: 224
      },
      "10": {
        loc: {
          start: {
            line: 239,
            column: 12
          },
          end: {
            line: 245,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 239,
            column: 12
          },
          end: {
            line: 245,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 239
      },
      "11": {
        loc: {
          start: {
            line: 253,
            column: 22
          },
          end: {
            line: 253,
            column: 44
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 253,
            column: 22
          },
          end: {
            line: 253,
            column: 38
          }
        }, {
          start: {
            line: 253,
            column: 42
          },
          end: {
            line: 253,
            column: 44
          }
        }],
        line: 253
      },
      "12": {
        loc: {
          start: {
            line: 261,
            column: 16
          },
          end: {
            line: 264,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 261,
            column: 16
          },
          end: {
            line: 264,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 261
      },
      "13": {
        loc: {
          start: {
            line: 271,
            column: 20
          },
          end: {
            line: 274,
            column: 21
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 271,
            column: 20
          },
          end: {
            line: 274,
            column: 21
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 271
      },
      "14": {
        loc: {
          start: {
            line: 275,
            column: 39
          },
          end: {
            line: 275,
            column: 76
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 275,
            column: 39
          },
          end: {
            line: 275,
            column: 70
          }
        }, {
          start: {
            line: 275,
            column: 74
          },
          end: {
            line: 275,
            column: 76
          }
        }],
        line: 275
      },
      "15": {
        loc: {
          start: {
            line: 280,
            column: 28
          },
          end: {
            line: 295,
            column: 29
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 280,
            column: 28
          },
          end: {
            line: 295,
            column: 29
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 280
      },
      "16": {
        loc: {
          start: {
            line: 286,
            column: 53
          },
          end: {
            line: 286,
            column: 99
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 286,
            column: 53
          },
          end: {
            line: 286,
            column: 94
          }
        }, {
          start: {
            line: 286,
            column: 98
          },
          end: {
            line: 286,
            column: 99
          }
        }],
        line: 286
      },
      "17": {
        loc: {
          start: {
            line: 302,
            column: 39
          },
          end: {
            line: 302,
            column: 93
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 302,
            column: 64
          },
          end: {
            line: 302,
            column: 77
          }
        }, {
          start: {
            line: 302,
            column: 80
          },
          end: {
            line: 302,
            column: 93
          }
        }],
        line: 302
      },
      "18": {
        loc: {
          start: {
            line: 306,
            column: 20
          },
          end: {
            line: 308,
            column: 21
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 306,
            column: 20
          },
          end: {
            line: 308,
            column: 21
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 306
      },
      "19": {
        loc: {
          start: {
            line: 311,
            column: 16
          },
          end: {
            line: 313,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 311,
            column: 16
          },
          end: {
            line: 313,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 311
      },
      "20": {
        loc: {
          start: {
            line: 323,
            column: 27
          },
          end: {
            line: 323,
            column: 81
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 323,
            column: 52
          },
          end: {
            line: 323,
            column: 65
          }
        }, {
          start: {
            line: 323,
            column: 68
          },
          end: {
            line: 323,
            column: 81
          }
        }],
        line: 323
      },
      "21": {
        loc: {
          start: {
            line: 329,
            column: 27
          },
          end: {
            line: 329,
            column: 81
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 329,
            column: 52
          },
          end: {
            line: 329,
            column: 65
          }
        }, {
          start: {
            line: 329,
            column: 68
          },
          end: {
            line: 329,
            column: 81
          }
        }],
        line: 329
      },
      "22": {
        loc: {
          start: {
            line: 350,
            column: 21
          },
          end: {
            line: 350,
            column: 53
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 350,
            column: 44
          },
          end: {
            line: 350,
            column: 47
          }
        }, {
          start: {
            line: 350,
            column: 50
          },
          end: {
            line: 350,
            column: 53
          }
        }],
        line: 350
      },
      "23": {
        loc: {
          start: {
            line: 363,
            column: 22
          },
          end: {
            line: 363,
            column: 44
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 363,
            column: 22
          },
          end: {
            line: 363,
            column: 38
          }
        }, {
          start: {
            line: 363,
            column: 42
          },
          end: {
            line: 363,
            column: 44
          }
        }],
        line: 363
      },
      "24": {
        loc: {
          start: {
            line: 385,
            column: 27
          },
          end: {
            line: 385,
            column: 81
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 385,
            column: 52
          },
          end: {
            line: 385,
            column: 65
          }
        }, {
          start: {
            line: 385,
            column: 68
          },
          end: {
            line: 385,
            column: 81
          }
        }],
        line: 385
      },
      "25": {
        loc: {
          start: {
            line: 417,
            column: 22
          },
          end: {
            line: 417,
            column: 44
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 417,
            column: 22
          },
          end: {
            line: 417,
            column: 38
          }
        }, {
          start: {
            line: 417,
            column: 42
          },
          end: {
            line: 417,
            column: 44
          }
        }],
        line: 417
      },
      "26": {
        loc: {
          start: {
            line: 446,
            column: 27
          },
          end: {
            line: 446,
            column: 81
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 446,
            column: 52
          },
          end: {
            line: 446,
            column: 65
          }
        }, {
          start: {
            line: 446,
            column: 68
          },
          end: {
            line: 446,
            column: 81
          }
        }],
        line: 446
      },
      "27": {
        loc: {
          start: {
            line: 466,
            column: 21
          },
          end: {
            line: 466,
            column: 51
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 466,
            column: 41
          },
          end: {
            line: 466,
            column: 45
          }
        }, {
          start: {
            line: 466,
            column: 48
          },
          end: {
            line: 466,
            column: 51
          }
        }],
        line: 466
      },
      "28": {
        loc: {
          start: {
            line: 484,
            column: 12
          },
          end: {
            line: 498,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 484,
            column: 12
          },
          end: {
            line: 498,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 484
      },
      "29": {
        loc: {
          start: {
            line: 484,
            column: 16
          },
          end: {
            line: 484,
            column: 91
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 484,
            column: 16
          },
          end: {
            line: 484,
            column: 45
          }
        }, {
          start: {
            line: 484,
            column: 49
          },
          end: {
            line: 484,
            column: 91
          }
        }],
        line: 484
      },
      "30": {
        loc: {
          start: {
            line: 485,
            column: 16
          },
          end: {
            line: 497,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 485,
            column: 16
          },
          end: {
            line: 497,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 485
      },
      "31": {
        loc: {
          start: {
            line: 485,
            column: 20
          },
          end: {
            line: 485,
            column: 86
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 485,
            column: 20
          },
          end: {
            line: 485,
            column: 37
          }
        }, {
          start: {
            line: 485,
            column: 41
          },
          end: {
            line: 485,
            column: 86
          }
        }],
        line: 485
      },
      "32": {
        loc: {
          start: {
            line: 500,
            column: 12
          },
          end: {
            line: 513,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 500,
            column: 12
          },
          end: {
            line: 513,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 500
      },
      "33": {
        loc: {
          start: {
            line: 500,
            column: 16
          },
          end: {
            line: 500,
            column: 83
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 500,
            column: 16
          },
          end: {
            line: 500,
            column: 34
          }
        }, {
          start: {
            line: 500,
            column: 38
          },
          end: {
            line: 500,
            column: 83
          }
        }],
        line: 500
      },
      "34": {
        loc: {
          start: {
            line: 511,
            column: 32
          },
          end: {
            line: 511,
            column: 56
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 511,
            column: 47
          },
          end: {
            line: 511,
            column: 50
          }
        }, {
          start: {
            line: 511,
            column: 53
          },
          end: {
            line: 511,
            column: 56
          }
        }],
        line: 511
      },
      "35": {
        loc: {
          start: {
            line: 516,
            column: 12
          },
          end: {
            line: 528,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 516,
            column: 12
          },
          end: {
            line: 528,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 516
      },
      "36": {
        loc: {
          start: {
            line: 516,
            column: 16
          },
          end: {
            line: 516,
            column: 98
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 516,
            column: 16
          },
          end: {
            line: 516,
            column: 32
          }
        }, {
          start: {
            line: 516,
            column: 36
          },
          end: {
            line: 516,
            column: 98
          }
        }],
        line: 516
      },
      "37": {
        loc: {
          start: {
            line: 530,
            column: 12
          },
          end: {
            line: 541,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 530,
            column: 12
          },
          end: {
            line: 541,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 530
      },
      "38": {
        loc: {
          start: {
            line: 554,
            column: 12
          },
          end: {
            line: 562,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 554,
            column: 12
          },
          end: {
            line: 562,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 554
      },
      "39": {
        loc: {
          start: {
            line: 565,
            column: 12
          },
          end: {
            line: 573,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 565,
            column: 12
          },
          end: {
            line: 573,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 565
      },
      "40": {
        loc: {
          start: {
            line: 585,
            column: 8
          },
          end: {
            line: 587,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 585,
            column: 8
          },
          end: {
            line: 587,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 585
      },
      "41": {
        loc: {
          start: {
            line: 590,
            column: 8
          },
          end: {
            line: 593,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 590,
            column: 8
          },
          end: {
            line: 593,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 590
      },
      "42": {
        loc: {
          start: {
            line: 596,
            column: 8
          },
          end: {
            line: 598,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 596,
            column: 8
          },
          end: {
            line: 598,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 596
      },
      "43": {
        loc: {
          start: {
            line: 606,
            column: 8
          },
          end: {
            line: 608,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 606,
            column: 8
          },
          end: {
            line: 608,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 606
      },
      "44": {
        loc: {
          start: {
            line: 617,
            column: 8
          },
          end: {
            line: 656,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 617,
            column: 8
          },
          end: {
            line: 656,
            column: 9
          }
        }, {
          start: {
            line: 652,
            column: 13
          },
          end: {
            line: 656,
            column: 9
          }
        }],
        line: 617
      },
      "45": {
        loc: {
          start: {
            line: 621,
            column: 12
          },
          end: {
            line: 650,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 621,
            column: 12
          },
          end: {
            line: 650,
            column: 13
          }
        }, {
          start: {
            line: 626,
            column: 17
          },
          end: {
            line: 650,
            column: 13
          }
        }],
        line: 621
      },
      "46": {
        loc: {
          start: {
            line: 630,
            column: 20
          },
          end: {
            line: 635,
            column: 21
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 630,
            column: 20
          },
          end: {
            line: 635,
            column: 21
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 630
      },
      "47": {
        loc: {
          start: {
            line: 638,
            column: 16
          },
          end: {
            line: 649,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 638,
            column: 16
          },
          end: {
            line: 649,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 638
      },
      "48": {
        loc: {
          start: {
            line: 641,
            column: 24
          },
          end: {
            line: 647,
            column: 25
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 641,
            column: 24
          },
          end: {
            line: 647,
            column: 25
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 641
      },
      "49": {
        loc: {
          start: {
            line: 664,
            column: 15
          },
          end: {
            line: 664,
            column: 62
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 664,
            column: 15
          },
          end: {
            line: 664,
            column: 36
          }
        }, {
          start: {
            line: 664,
            column: 40
          },
          end: {
            line: 664,
            column: 62
          }
        }],
        line: 664
      },
      "50": {
        loc: {
          start: {
            line: 673,
            column: 8
          },
          end: {
            line: 675,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 673,
            column: 8
          },
          end: {
            line: 675,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 673
      },
      "51": {
        loc: {
          start: {
            line: 683,
            column: 8
          },
          end: {
            line: 685,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 683,
            column: 8
          },
          end: {
            line: 685,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 683
      },
      "52": {
        loc: {
          start: {
            line: 702,
            column: 12
          },
          end: {
            line: 704,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 702,
            column: 12
          },
          end: {
            line: 704,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 702
      },
      "53": {
        loc: {
          start: {
            line: 712,
            column: 12
          },
          end: {
            line: 713,
            column: 28
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 712,
            column: 12
          },
          end: {
            line: 713,
            column: 28
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 712
      },
      "54": {
        loc: {
          start: {
            line: 714,
            column: 12
          },
          end: {
            line: 715,
            column: 29
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 714,
            column: 12
          },
          end: {
            line: 715,
            column: 29
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 714
      },
      "55": {
        loc: {
          start: {
            line: 717,
            column: 33
          },
          end: {
            line: 717,
            column: 79
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 717,
            column: 33
          },
          end: {
            line: 717,
            column: 66
          }
        }, {
          start: {
            line: 717,
            column: 70
          },
          end: {
            line: 717,
            column: 79
          }
        }],
        line: 717
      },
      "56": {
        loc: {
          start: {
            line: 719,
            column: 16
          },
          end: {
            line: 720,
            column: 32
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 719,
            column: 16
          },
          end: {
            line: 720,
            column: 32
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 719
      },
      "57": {
        loc: {
          start: {
            line: 730,
            column: 8
          },
          end: {
            line: 731,
            column: 19
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 730,
            column: 8
          },
          end: {
            line: 731,
            column: 19
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 730
      },
      "58": {
        loc: {
          start: {
            line: 782,
            column: 38
          },
          end: {
            line: 782,
            column: 65
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 782,
            column: 38
          },
          end: {
            line: 782,
            column: 60
          }
        }, {
          start: {
            line: 782,
            column: 64
          },
          end: {
            line: 782,
            column: 65
          }
        }],
        line: 782
      },
      "59": {
        loc: {
          start: {
            line: 789,
            column: 83
          },
          end: {
            line: 789,
            column: 96
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 789,
            column: 83
          },
          end: {
            line: 789,
            column: 91
          }
        }, {
          start: {
            line: 789,
            column: 95
          },
          end: {
            line: 789,
            column: 96
          }
        }],
        line: 789
      },
      "60": {
        loc: {
          start: {
            line: 790,
            column: 82
          },
          end: {
            line: 790,
            column: 94
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 790,
            column: 82
          },
          end: {
            line: 790,
            column: 89
          }
        }, {
          start: {
            line: 790,
            column: 93
          },
          end: {
            line: 790,
            column: 94
          }
        }],
        line: 790
      },
      "61": {
        loc: {
          start: {
            line: 798,
            column: 25
          },
          end: {
            line: 798,
            column: 71
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 798,
            column: 43
          },
          end: {
            line: 798,
            column: 67
          }
        }, {
          start: {
            line: 798,
            column: 70
          },
          end: {
            line: 798,
            column: 71
          }
        }],
        line: 798
      },
      "62": {
        loc: {
          start: {
            line: 808,
            column: 85
          },
          end: {
            line: 808,
            column: 104
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 808,
            column: 85
          },
          end: {
            line: 808,
            column: 99
          }
        }, {
          start: {
            line: 808,
            column: 103
          },
          end: {
            line: 808,
            column: 104
          }
        }],
        line: 808
      },
      "63": {
        loc: {
          start: {
            line: 809,
            column: 84
          },
          end: {
            line: 809,
            column: 97
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 809,
            column: 84
          },
          end: {
            line: 809,
            column: 92
          }
        }, {
          start: {
            line: 809,
            column: 96
          },
          end: {
            line: 809,
            column: 97
          }
        }],
        line: 809
      },
      "64": {
        loc: {
          start: {
            line: 828,
            column: 83
          },
          end: {
            line: 828,
            column: 96
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 828,
            column: 83
          },
          end: {
            line: 828,
            column: 91
          }
        }, {
          start: {
            line: 828,
            column: 95
          },
          end: {
            line: 828,
            column: 96
          }
        }],
        line: 828
      },
      "65": {
        loc: {
          start: {
            line: 829,
            column: 8
          },
          end: {
            line: 831,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 829,
            column: 8
          },
          end: {
            line: 831,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 829
      },
      "66": {
        loc: {
          start: {
            line: 833,
            column: 8
          },
          end: {
            line: 835,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 833,
            column: 8
          },
          end: {
            line: 835,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 833
      },
      "67": {
        loc: {
          start: {
            line: 841,
            column: 8
          },
          end: {
            line: 843,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 841,
            column: 8
          },
          end: {
            line: 843,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 841
      },
      "68": {
        loc: {
          start: {
            line: 844,
            column: 8
          },
          end: {
            line: 846,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 844,
            column: 8
          },
          end: {
            line: 846,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 844
      },
      "69": {
        loc: {
          start: {
            line: 851,
            column: 15
          },
          end: {
            line: 851,
            column: 35
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 851,
            column: 27
          },
          end: {
            line: 851,
            column: 31
          }
        }, {
          start: {
            line: 851,
            column: 34
          },
          end: {
            line: 851,
            column: 35
          }
        }],
        line: 851
      },
      "70": {
        loc: {
          start: {
            line: 859,
            column: 34
          },
          end: {
            line: 859,
            column: 95
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 859,
            column: 34
          },
          end: {
            line: 859,
            column: 81
          }
        }, {
          start: {
            line: 859,
            column: 85
          },
          end: {
            line: 859,
            column: 95
          }
        }],
        line: 859
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0,
      "74": 0,
      "75": 0,
      "76": 0,
      "77": 0,
      "78": 0,
      "79": 0,
      "80": 0,
      "81": 0,
      "82": 0,
      "83": 0,
      "84": 0,
      "85": 0,
      "86": 0,
      "87": 0,
      "88": 0,
      "89": 0,
      "90": 0,
      "91": 0,
      "92": 0,
      "93": 0,
      "94": 0,
      "95": 0,
      "96": 0,
      "97": 0,
      "98": 0,
      "99": 0,
      "100": 0,
      "101": 0,
      "102": 0,
      "103": 0,
      "104": 0,
      "105": 0,
      "106": 0,
      "107": 0,
      "108": 0,
      "109": 0,
      "110": 0,
      "111": 0,
      "112": 0,
      "113": 0,
      "114": 0,
      "115": 0,
      "116": 0,
      "117": 0,
      "118": 0,
      "119": 0,
      "120": 0,
      "121": 0,
      "122": 0,
      "123": 0,
      "124": 0,
      "125": 0,
      "126": 0,
      "127": 0,
      "128": 0,
      "129": 0,
      "130": 0,
      "131": 0,
      "132": 0,
      "133": 0,
      "134": 0,
      "135": 0,
      "136": 0,
      "137": 0,
      "138": 0,
      "139": 0,
      "140": 0,
      "141": 0,
      "142": 0,
      "143": 0,
      "144": 0,
      "145": 0,
      "146": 0,
      "147": 0,
      "148": 0,
      "149": 0,
      "150": 0,
      "151": 0,
      "152": 0,
      "153": 0,
      "154": 0,
      "155": 0,
      "156": 0,
      "157": 0,
      "158": 0,
      "159": 0,
      "160": 0,
      "161": 0,
      "162": 0,
      "163": 0,
      "164": 0,
      "165": 0,
      "166": 0,
      "167": 0,
      "168": 0,
      "169": 0,
      "170": 0,
      "171": 0,
      "172": 0,
      "173": 0,
      "174": 0,
      "175": 0,
      "176": 0,
      "177": 0,
      "178": 0,
      "179": 0,
      "180": 0,
      "181": 0,
      "182": 0,
      "183": 0,
      "184": 0,
      "185": 0,
      "186": 0,
      "187": 0,
      "188": 0,
      "189": 0,
      "190": 0,
      "191": 0,
      "192": 0,
      "193": 0,
      "194": 0,
      "195": 0,
      "196": 0,
      "197": 0,
      "198": 0,
      "199": 0,
      "200": 0,
      "201": 0,
      "202": 0,
      "203": 0,
      "204": 0,
      "205": 0,
      "206": 0,
      "207": 0,
      "208": 0,
      "209": 0,
      "210": 0,
      "211": 0,
      "212": 0,
      "213": 0,
      "214": 0,
      "215": 0,
      "216": 0,
      "217": 0,
      "218": 0,
      "219": 0,
      "220": 0,
      "221": 0,
      "222": 0,
      "223": 0,
      "224": 0,
      "225": 0,
      "226": 0,
      "227": 0,
      "228": 0,
      "229": 0,
      "230": 0,
      "231": 0,
      "232": 0,
      "233": 0,
      "234": 0,
      "235": 0,
      "236": 0,
      "237": 0,
      "238": 0,
      "239": 0,
      "240": 0,
      "241": 0,
      "242": 0,
      "243": 0,
      "244": 0,
      "245": 0,
      "246": 0,
      "247": 0,
      "248": 0,
      "249": 0,
      "250": 0,
      "251": 0,
      "252": 0,
      "253": 0,
      "254": 0,
      "255": 0,
      "256": 0,
      "257": 0,
      "258": 0,
      "259": 0,
      "260": 0,
      "261": 0,
      "262": 0,
      "263": 0,
      "264": 0,
      "265": 0,
      "266": 0,
      "267": 0,
      "268": 0,
      "269": 0,
      "270": 0,
      "271": 0,
      "272": 0,
      "273": 0,
      "274": 0,
      "275": 0,
      "276": 0,
      "277": 0,
      "278": 0,
      "279": 0,
      "280": 0,
      "281": 0,
      "282": 0,
      "283": 0,
      "284": 0,
      "285": 0,
      "286": 0,
      "287": 0,
      "288": 0,
      "289": 0,
      "290": 0,
      "291": 0,
      "292": 0,
      "293": 0,
      "294": 0,
      "295": 0,
      "296": 0,
      "297": 0,
      "298": 0,
      "299": 0,
      "300": 0,
      "301": 0,
      "302": 0,
      "303": 0,
      "304": 0,
      "305": 0,
      "306": 0,
      "307": 0,
      "308": 0,
      "309": 0,
      "310": 0,
      "311": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0, 0, 0],
      "8": [0, 0],
      "9": [0, 0],
      "10": [0, 0],
      "11": [0, 0],
      "12": [0, 0],
      "13": [0, 0],
      "14": [0, 0],
      "15": [0, 0],
      "16": [0, 0],
      "17": [0, 0],
      "18": [0, 0],
      "19": [0, 0],
      "20": [0, 0],
      "21": [0, 0],
      "22": [0, 0],
      "23": [0, 0],
      "24": [0, 0],
      "25": [0, 0],
      "26": [0, 0],
      "27": [0, 0],
      "28": [0, 0],
      "29": [0, 0],
      "30": [0, 0],
      "31": [0, 0],
      "32": [0, 0],
      "33": [0, 0],
      "34": [0, 0],
      "35": [0, 0],
      "36": [0, 0],
      "37": [0, 0],
      "38": [0, 0],
      "39": [0, 0],
      "40": [0, 0],
      "41": [0, 0],
      "42": [0, 0],
      "43": [0, 0],
      "44": [0, 0],
      "45": [0, 0],
      "46": [0, 0],
      "47": [0, 0],
      "48": [0, 0],
      "49": [0, 0],
      "50": [0, 0],
      "51": [0, 0],
      "52": [0, 0],
      "53": [0, 0],
      "54": [0, 0],
      "55": [0, 0],
      "56": [0, 0],
      "57": [0, 0],
      "58": [0, 0],
      "59": [0, 0],
      "60": [0, 0],
      "61": [0, 0],
      "62": [0, 0],
      "63": [0, 0],
      "64": [0, 0],
      "65": [0, 0],
      "66": [0, 0],
      "67": [0, 0],
      "68": [0, 0],
      "69": [0, 0],
      "70": [0, 0]
    },
    inputSourceMap: {
      file: "/home/mhugo/code/claude-code-flow/src/agents/import-worker.ts",
      mappings: "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",
      names: [],
      sources: ["/home/mhugo/code/claude-code-flow/src/agents/import-worker.ts"],
      sourcesContent: ["/**\n * Import Worker Agent - Level 3 Worker in Hierarchical Lint Fixing Swarm\n * \n * Specialized agent for fixing import/export issues in TypeScript projects.\n * Reports to Level 2 specialists and coordinates with other Level 3 workers.\n */\n\nimport { EventEmitter } from 'node:events';\nimport { dirname, resolve, relative, extname, join } from 'node:path';\nimport { existsSync, readFileSync, writeFileSync } from 'node:fs';\nimport type { ILogger } from '../utils/logger.js';\nimport type { AgentState, AgentCapabilities, TaskDefinition, TaskResult } from '../swarm/types.js';\n\nexport interface ImportIssue {\n  type: ImportIssueType;\n  severity: 'error' | 'warning' | 'info';\n  file: string;\n  line: number;\n  column: number;\n  message: string;\n  importPath: string;\n  suggestedFix?: string;\n  confidence: number; // 0-1 confidence in the fix\n}\n\nexport type ImportIssueType =\n  | 'missing-extension' // Missing .js extension for ESM\n  | 'wrong-extension' // Wrong file extension\n  | 'relative-path-error' // Incorrect relative path\n  | 'non-existent-module' // Module doesn't exist\n  | 'circular-dependency' // Circular import detected\n  | 'type-only-import' // Should be type-only import\n  | 'unused-import' // Import is not used\n  | 'default-import-error' // Default import on non-default export\n  | 'named-import-error' // Named import doesn't exist\n  | 'index-file-implicit' // Implicit index file import\n  | 'barrel-export-issue' // Barrel export problem\n  | 'namespace-import-error'; // Namespace import issue\n\nexport interface ImportResolution {\n  originalPath: string;\n  resolvedPath: string;\n  exists: boolean;\n  isDirectory: boolean;\n  hasIndex: boolean;\n  extensions: string[];\n  exports?: string[];\n}\n\nexport interface FixStrategy {\n  name: string;\n  description: string;\n  confidence: number;\n  apply: (issue: ImportIssue, content: string) => string;\n  validate: (originalContent: string, fixedContent: string) => boolean;\n}\n\nexport interface ImportWorkerConfig {\n  // File system configuration\n  baseDir: string;\n  extensions: string[];\n  indexFiles: string[];\n  \n  // Resolution configuration\n  resolveExtensions: string[];\n  moduleResolution: 'node' | 'bundler' | 'classic';\n  allowImplicitExtensions: boolean;\n  enforceExtensions: boolean;\n  \n  // Fixing preferences\n  preferredExtension: string;\n  addMissingExtensions: boolean;\n  removeUnusedImports: boolean;\n  fixCircularDependencies: boolean;\n  \n  // Quality thresholds\n  minConfidence: number;\n  maxFixAttempts: number;\n  \n  // Coordination settings\n  reportToLevel2: boolean;\n  shareMemory: boolean;\n  batchSize: number;\n}\n\n/**\n * Import Worker Agent - Specialized for TypeScript import/export fixing\n */\nexport class ImportWorkerAgent extends EventEmitter {\n  private logger: ILogger;\n  private config: ImportWorkerConfig;\n  private agentState: AgentState;\n  \n  // Analysis state\n  private projectStructure = new Map<string, ImportResolution>();\n  private dependencyGraph = new Map<string, Set<string>>();\n  private circularDependencies = new Set<string>();\n  \n  // Fix strategies\n  private strategies = new Map<ImportIssueType, FixStrategy[]>();\n  \n  // Coordination state\n  private memoryKey: string;\n  private level2Coordinator?: string;\n  private workerPeers: string[] = [];\n  \n  // Performance tracking\n  private metrics = {\n    issuesDetected: 0,\n    issuesFixed: 0,\n    filesProcessed: 0,\n    fixesApplied: new Map<ImportIssueType, number>(),\n    averageConfidence: 0,\n    totalExecutionTime: 0,\n  };\n\n  constructor(\n    config: Partial<ImportWorkerConfig>,\n    logger: ILogger,\n    agentState: AgentState,\n  ) {\n    super();\n    \n    this.logger = logger;\n    this.agentState = agentState;\n    this.memoryKey = `swarm-lint-fix/hierarchy/level3/workers/imports/${agentState.id.id}`;\n    \n    this.config = {\n      baseDir: process.cwd(),\n      extensions: ['.ts', '.tsx', '.js', '.jsx', '.mjs', '.cjs'],\n      indexFiles: ['index.ts', 'index.tsx', 'index.js', 'index.jsx'],\n      resolveExtensions: ['.ts', '.tsx', '.js', '.jsx', '.mjs', '.cjs', '.json'],\n      moduleResolution: 'node',\n      allowImplicitExtensions: false,\n      enforceExtensions: true,\n      preferredExtension: '.js',\n      addMissingExtensions: true,\n      removeUnusedImports: true,\n      fixCircularDependencies: true,\n      minConfidence: 0.7,\n      maxFixAttempts: 3,\n      reportToLevel2: true,\n      shareMemory: true,\n      batchSize: 10,\n      ...config,\n    };\n\n    this.initializeFixStrategies();\n    this.setupEventHandlers();\n  }\n\n  /**\n   * Initialize import fixing strategies\n   */\n  private initializeFixStrategies(): void {\n    // Missing Extension Strategy\n    this.strategies.set('missing-extension', [{\n      name: 'add-js-extension',\n      description: 'Add .js extension for ESM compatibility',\n      confidence: 0.9,\n      apply: (issue: ImportIssue, content: string) => {\n        const lines = content.split('\\n');\n        const line = lines[issue.line - 1];\n        \n        // Match import/export statements\n        const importRegex = /(\\bimport\\s+.+?\\s+from\\s+['\"`])([^'\"`]+)(['\"`])/;\n        const exportRegex = /(\\bexport\\s+.+?\\s+from\\s+['\"`])([^'\"`]+)(['\"`])/;\n        \n        const match = line.match(importRegex) || line.match(exportRegex);\n        if (match) {\n          const [, prefix, path, suffix] = match;\n          const newPath = this.addExtensionIfNeeded(path, issue.suggestedFix || this.config.preferredExtension);\n          lines[issue.line - 1] = line.replace(match[0], `${prefix}${newPath}${suffix}`);\n        }\n        \n        return lines.join('\\n');\n      },\n      validate: (original: string, fixed: string) => {\n        return fixed !== original && fixed.includes('.js');\n      },\n    }]);\n\n    // Wrong Extension Strategy\n    this.strategies.set('wrong-extension', [{\n      name: 'correct-extension',\n      description: 'Correct file extension based on actual file',\n      confidence: 0.95,\n      apply: (issue: ImportIssue, content: string) => {\n        const lines = content.split('\\n');\n        const line = lines[issue.line - 1];\n        \n        if (issue.suggestedFix) {\n          lines[issue.line - 1] = line.replace(issue.importPath, issue.suggestedFix);\n        }\n        \n        return lines.join('\\n');\n      },\n      validate: (original: string, fixed: string) => {\n        return fixed !== original;\n      },\n    }]);\n\n    // Relative Path Error Strategy\n    this.strategies.set('relative-path-error', [{\n      name: 'fix-relative-path',\n      description: 'Correct relative import path',\n      confidence: 0.85,\n      apply: (issue: ImportIssue, content: string) => {\n        const lines = content.split('\\n');\n        const line = lines[issue.line - 1];\n        \n        if (issue.suggestedFix) {\n          lines[issue.line - 1] = line.replace(issue.importPath, issue.suggestedFix);\n        }\n        \n        return lines.join('\\n');\n      },\n      validate: (original: string, fixed: string) => {\n        return fixed !== original;\n      },\n    }]);\n\n    // Unused Import Strategy\n    this.strategies.set('unused-import', [{\n      name: 'remove-unused-import',\n      description: 'Remove unused import statements',\n      confidence: 0.8,\n      apply: (issue: ImportIssue, content: string) => {\n        const lines = content.split('\\n');\n        \n        // Remove the entire import line\n        lines.splice(issue.line - 1, 1);\n        \n        return lines.join('\\n');\n      },\n      validate: (original: string, fixed: string) => {\n        return fixed.length < original.length;\n      },\n    }]);\n\n    // Type-only Import Strategy\n    this.strategies.set('type-only-import', [{\n      name: 'add-type-modifier',\n      description: 'Add type modifier to import',\n      confidence: 0.9,\n      apply: (issue: ImportIssue, content: string) => {\n        const lines = content.split('\\n');\n        const line = lines[issue.line - 1];\n        \n        // Add type modifier\n        const typeImportRegex = /(\\bimport\\s+)(\\{[^}]+\\}|\\w+)(\\s+from)/;\n        const match = line.match(typeImportRegex);\n        \n        if (match) {\n          lines[issue.line - 1] = line.replace(match[0], `${match[1]}type ${match[2]}${match[3]}`);\n        }\n        \n        return lines.join('\\n');\n      },\n      validate: (original: string, fixed: string) => {\n        return fixed.includes('import type');\n      },\n    }]);\n  }\n\n  /**\n   * Set up event handlers for coordination\n   */\n  private setupEventHandlers(): void {\n    this.on('coordination:memory-update', this.handleMemoryUpdate.bind(this));\n    this.on('coordination:peer-message', this.handlePeerMessage.bind(this));\n    this.on('coordination:level2-request', this.handleLevel2Request.bind(this));\n  }\n\n  /**\n   * Main task execution method\n   */\n  async executeTask(task: TaskDefinition): Promise<TaskResult> {\n    const startTime = Date.now();\n    \n    try {\n      this.logger.info('Import Worker executing task', {\n        taskId: task.id.id,\n        type: task.type,\n        agent: this.agentState.id.id,\n      });\n\n      // Update coordination memory\n      await this.updateMemory('task-started', {\n        taskId: task.id.id,\n        timestamp: new Date(),\n        status: 'in-progress',\n      });\n\n      let result: TaskResult;\n\n      switch (task.type) {\n        case 'lint-fix':\n          result = await this.fixImportIssues(task);\n          break;\n        case 'analysis':\n          result = await this.analyzeImports(task);\n          break;\n        case 'validation':\n          result = await this.validateImports(task);\n          break;\n        default:\n          throw new Error(`Unsupported task type: ${task.type}`);\n      }\n\n      const executionTime = Date.now() - startTime;\n      this.metrics.totalExecutionTime += executionTime;\n\n      // Update metrics\n      this.metrics.filesProcessed++;\n      \n      // Update coordination memory\n      await this.updateMemory('task-completed', {\n        taskId: task.id.id,\n        timestamp: new Date(),\n        status: 'completed',\n        result: result.metadata,\n        executionTime,\n      });\n\n      // Report to Level 2 if configured\n      if (this.config.reportToLevel2) {\n        await this.reportToLevel2('task-completed', {\n          worker: this.agentState.id.id,\n          task: task.id.id,\n          result: result.metadata,\n        });\n      }\n\n      this.emit('task:completed', { task, result });\n      return result;\n\n    } catch (error) {\n      const executionTime = Date.now() - startTime;\n      const errorMessage = error instanceof Error ? error.message : String(error);\n      \n      this.logger.error('Import Worker task failed', {\n        taskId: task.id.id,\n        error: errorMessage,\n        executionTime,\n      });\n\n      // Update coordination memory\n      await this.updateMemory('task-failed', {\n        taskId: task.id.id,\n        timestamp: new Date(),\n        status: 'failed',\n        error: errorMessage,\n        executionTime,\n      });\n\n      // Report to Level 2\n      if (this.config.reportToLevel2) {\n        await this.reportToLevel2('task-failed', {\n          worker: this.agentState.id.id,\n          task: task.id.id,\n          error: errorMessage,\n        });\n      }\n\n      throw error;\n    }\n  }\n\n  /**\n   * Fix import issues in files\n   */\n  private async fixImportIssues(task: TaskDefinition): Promise<TaskResult> {\n    const files = task.input.files || [];\n    const fixResults = new Map<string, any>();\n    let totalIssuesFixed = 0;\n\n    for (const filePath of files) {\n      try {\n        const content = readFileSync(filePath, 'utf-8');\n        const issues = await this.detectImportIssues(filePath, content);\n        \n        this.metrics.issuesDetected += issues.length;\n        \n        if (issues.length === 0) {\n          fixResults.set(filePath, { issues: 0, fixed: 0, skipped: 0 });\n          continue;\n        }\n\n        let fixedContent = content;\n        let fixesApplied = 0;\n        let skipped = 0;\n\n        // Apply fixes in order of confidence\n        const sortedIssues = issues.sort((a, b) => b.confidence - a.confidence);\n        \n        for (const issue of sortedIssues) {\n          if (issue.confidence < this.config.minConfidence) {\n            skipped++;\n            continue;\n          }\n\n          const strategies = this.strategies.get(issue.type) || [];\n          let fixed = false;\n\n          for (const strategy of strategies) {\n            try {\n              const newContent = strategy.apply(issue, fixedContent);\n              \n              if (strategy.validate(fixedContent, newContent)) {\n                fixedContent = newContent;\n                fixesApplied++;\n                totalIssuesFixed++;\n                fixed = true;\n                \n                // Update strategy metrics\n                const currentCount = this.metrics.fixesApplied.get(issue.type) || 0;\n                this.metrics.fixesApplied.set(issue.type, currentCount + 1);\n                \n                this.logger.debug('Applied import fix', {\n                  file: filePath,\n                  issue: issue.type,\n                  strategy: strategy.name,\n                  confidence: issue.confidence,\n                });\n                \n                break;\n              }\n            } catch (error) {\n              this.logger.warn('Fix strategy failed', {\n                file: filePath,\n                issue: issue.type,\n                strategy: strategy.name,\n                error: error instanceof Error ? error.message : String(error),\n              });\n            }\n          }\n\n          if (!fixed) {\n            skipped++;\n          }\n        }\n\n        // Write fixed content back to file\n        if (fixesApplied > 0) {\n          writeFileSync(filePath, fixedContent, 'utf-8');\n        }\n\n        fixResults.set(filePath, {\n          issues: issues.length,\n          fixed: fixesApplied,\n          skipped,\n        });\n\n      } catch (error) {\n        this.logger.error('Failed to fix imports in file', {\n          file: filePath,\n          error: error instanceof Error ? error.message : String(error),\n        });\n        \n        fixResults.set(filePath, {\n          issues: 0,\n          fixed: 0,\n          skipped: 0,\n          error: error instanceof Error ? error.message : String(error),\n        });\n      }\n    }\n\n    this.metrics.issuesFixed += totalIssuesFixed;\n\n    return {\n      output: {\n        filesProcessed: files.length,\n        totalIssuesFixed,\n        results: Object.fromEntries(fixResults),\n      },\n      artifacts: {\n        fixReport: this.generateFixReport(fixResults),\n        metrics: this.getMetrics(),\n      },\n      metadata: {\n        worker: 'import-worker',\n        version: '1.0.0',\n        executedAt: new Date(),\n        confidence: this.calculateAverageConfidence(),\n      },\n      quality: totalIssuesFixed > 0 ? 0.9 : 0.7,\n      completeness: 1.0,\n      accuracy: 0.95,\n      executionTime: 0, // Will be set by caller\n      resourcesUsed: { memory: 50, cpu: 0.3 },\n      validated: true,\n      recommendations: this.generateRecommendations(fixResults),\n    };\n  }\n\n  /**\n   * Analyze imports in files\n   */\n  private async analyzeImports(task: TaskDefinition): Promise<TaskResult> {\n    const files = task.input.files || [];\n    const analysisResults = new Map<string, any>();\n\n    for (const filePath of files) {\n      try {\n        const content = readFileSync(filePath, 'utf-8');\n        const issues = await this.detectImportIssues(filePath, content);\n        const imports = this.extractImports(content);\n        \n        analysisResults.set(filePath, {\n          totalImports: imports.length,\n          issues: issues.length,\n          issueTypes: this.categorizeIssues(issues),\n          imports: imports.map(imp => ({\n            type: imp.type,\n            source: imp.source,\n            specifiers: imp.specifiers,\n            line: imp.line,\n          })),\n          recommendations: this.generateFileRecommendations(issues),\n        });\n\n      } catch (error) {\n        analysisResults.set(filePath, {\n          error: error instanceof Error ? error.message : String(error),\n        });\n      }\n    }\n\n    return {\n      output: {\n        filesAnalyzed: files.length,\n        results: Object.fromEntries(analysisResults),\n      },\n      artifacts: {\n        analysisReport: this.generateAnalysisReport(analysisResults),\n        dependencyGraph: Object.fromEntries(this.dependencyGraph),\n        circularDependencies: Array.from(this.circularDependencies),\n      },\n      metadata: {\n        worker: 'import-worker',\n        version: '1.0.0',\n        executedAt: new Date(),\n        analysisType: 'import-analysis',\n      },\n      quality: 0.95,\n      completeness: 1.0,\n      accuracy: 0.98,\n      executionTime: 0,\n      resourcesUsed: { memory: 30, cpu: 0.2 },\n      validated: true,\n    };\n  }\n\n  /**\n   * Validate imports in files\n   */\n  private async validateImports(task: TaskDefinition): Promise<TaskResult> {\n    const files = task.input.files || [];\n    const validationResults = new Map<string, any>();\n    let totalErrors = 0;\n    let totalWarnings = 0;\n\n    for (const filePath of files) {\n      try {\n        const content = readFileSync(filePath, 'utf-8');\n        const issues = await this.detectImportIssues(filePath, content);\n        \n        const errors = issues.filter(i => i.severity === 'error');\n        const warnings = issues.filter(i => i.severity === 'warning');\n        \n        totalErrors += errors.length;\n        totalWarnings += warnings.length;\n        \n        validationResults.set(filePath, {\n          valid: errors.length === 0,\n          errors: errors.length,\n          warnings: warnings.length,\n          issues: issues.map(issue => ({\n            type: issue.type,\n            severity: issue.severity,\n            message: issue.message,\n            line: issue.line,\n            column: issue.column,\n          })),\n        });\n\n      } catch (error) {\n        totalErrors++;\n        validationResults.set(filePath, {\n          valid: false,\n          error: error instanceof Error ? error.message : String(error),\n        });\n      }\n    }\n\n    return {\n      output: {\n        filesValidated: files.length,\n        totalErrors,\n        totalWarnings,\n        results: Object.fromEntries(validationResults),\n      },\n      artifacts: {\n        validationReport: this.generateValidationReport(validationResults),\n      },\n      metadata: {\n        worker: 'import-worker',\n        version: '1.0.0',\n        executedAt: new Date(),\n        validationType: 'import-validation',\n      },\n      quality: totalErrors === 0 ? 0.95 : 0.7,\n      completeness: 1.0,\n      accuracy: 0.98,\n      executionTime: 0,\n      resourcesUsed: { memory: 25, cpu: 0.15 },\n      validated: true,\n    };\n  }\n\n  /**\n   * Detect import issues in a file\n   */\n  private async detectImportIssues(filePath: string, content: string): Promise<ImportIssue[]> {\n    const issues: ImportIssue[] = [];\n    const lines = content.split('\\n');\n    const imports = this.extractImports(content);\n\n    for (const importStatement of imports) {\n      const resolution = await this.resolveImport(filePath, importStatement.source);\n      \n      // Check for missing extensions\n      if (this.config.enforceExtensions && !this.hasExtension(importStatement.source)) {\n        if (resolution.exists && this.isRelativeImport(importStatement.source)) {\n          issues.push({\n            type: 'missing-extension',\n            severity: 'error',\n            file: filePath,\n            line: importStatement.line,\n            column: importStatement.column,\n            message: `Missing file extension for ESM import: ${importStatement.source}`,\n            importPath: importStatement.source,\n            suggestedFix: this.addExtensionIfNeeded(importStatement.source, this.config.preferredExtension),\n            confidence: 0.9,\n          });\n        }\n      }\n\n      // Check if module exists\n      if (!resolution.exists && this.isRelativeImport(importStatement.source)) {\n        const suggestedFix = await this.findBestMatch(filePath, importStatement.source);\n        \n        issues.push({\n          type: 'non-existent-module',\n          severity: 'error',\n          file: filePath,\n          line: importStatement.line,\n          column: importStatement.column,\n          message: `Cannot resolve module: ${importStatement.source}`,\n          importPath: importStatement.source,\n          suggestedFix,\n          confidence: suggestedFix ? 0.8 : 0.3,\n        });\n      }\n\n      // Check for wrong extensions\n      const correctExtension = this.findCorrectExtension(resolution);\n      if (correctExtension && correctExtension !== this.getExtension(importStatement.source)) {\n        issues.push({\n          type: 'wrong-extension',\n          severity: 'warning',\n          file: filePath,\n          line: importStatement.line,\n          column: importStatement.column,\n          message: `Incorrect file extension, expected: ${correctExtension}`,\n          importPath: importStatement.source,\n          suggestedFix: this.replaceExtension(importStatement.source, correctExtension),\n          confidence: 0.95,\n        });\n      }\n\n      // Check for circular dependencies\n      if (this.isCircularDependency(filePath, resolution.resolvedPath)) {\n        issues.push({\n          type: 'circular-dependency',\n          severity: 'warning',\n          file: filePath,\n          line: importStatement.line,\n          column: importStatement.column,\n          message: `Circular dependency detected with: ${importStatement.source}`,\n          importPath: importStatement.source,\n          confidence: 0.9,\n        });\n      }\n    }\n\n    return issues;\n  }\n\n  /**\n   * Extract import statements from content\n   */\n  private extractImports(content: string): Array<{\n    type: 'import' | 'export';\n    source: string;\n    specifiers: string[];\n    line: number;\n    column: number;\n  }> {\n    const imports: Array<{\n      type: 'import' | 'export';\n      source: string;\n      specifiers: string[];\n      line: number;\n      column: number;\n    }> = [];\n    \n    const lines = content.split('\\n');\n    \n    lines.forEach((line, index) => {\n      // Match import statements\n      const importMatch = line.match(/import\\s+(.+?)\\s+from\\s+['\"`]([^'\"`]+)['\"`]/);\n      if (importMatch) {\n        imports.push({\n          type: 'import',\n          source: importMatch[2],\n          specifiers: this.parseSpecifiers(importMatch[1]),\n          line: index + 1,\n          column: line.indexOf('import'),\n        });\n      }\n\n      // Match export statements\n      const exportMatch = line.match(/export\\s+(.+?)\\s+from\\s+['\"`]([^'\"`]+)['\"`]/);\n      if (exportMatch) {\n        imports.push({\n          type: 'export',\n          source: exportMatch[2],\n          specifiers: this.parseSpecifiers(exportMatch[1]),\n          line: index + 1,\n          column: line.indexOf('export'),\n        });\n      }\n    });\n\n    return imports;\n  }\n\n  /**\n   * Parse import/export specifiers\n   */\n  private parseSpecifiers(specifierString: string): string[] {\n    // Handle different import patterns\n    const specifiers: string[] = [];\n    \n    // Default import\n    const defaultMatch = specifierString.match(/^\\s*(\\w+)/);\n    if (defaultMatch) {\n      specifiers.push(`default:${defaultMatch[1]}`);\n    }\n\n    // Named imports\n    const namedMatch = specifierString.match(/\\{([^}]+)\\}/);\n    if (namedMatch) {\n      const named = namedMatch[1].split(',').map(s => s.trim());\n      specifiers.push(...named);\n    }\n\n    // Namespace import\n    const namespaceMatch = specifierString.match(/\\*\\s+as\\s+(\\w+)/);\n    if (namespaceMatch) {\n      specifiers.push(`namespace:${namespaceMatch[1]}`);\n    }\n\n    return specifiers;\n  }\n\n  /**\n   * Resolve import path\n   */\n  private async resolveImport(fromFile: string, importPath: string): Promise<ImportResolution> {\n    const cacheKey = `${fromFile}:${importPath}`;\n    \n    if (this.projectStructure.has(cacheKey)) {\n      return this.projectStructure.get(cacheKey)!;\n    }\n\n    const resolution: ImportResolution = {\n      originalPath: importPath,\n      resolvedPath: '',\n      exists: false,\n      isDirectory: false,\n      hasIndex: false,\n      extensions: [],\n    };\n\n    if (this.isRelativeImport(importPath)) {\n      const basePath = dirname(fromFile);\n      const fullPath = resolve(basePath, importPath);\n      \n      // Try exact path\n      if (existsSync(fullPath)) {\n        resolution.resolvedPath = fullPath;\n        resolution.exists = true;\n        resolution.isDirectory = !extname(fullPath);\n      } else {\n        // Try with extensions\n        for (const ext of this.config.resolveExtensions) {\n          const pathWithExt = fullPath + ext;\n          if (existsSync(pathWithExt)) {\n            resolution.resolvedPath = pathWithExt;\n            resolution.exists = true;\n            resolution.extensions.push(ext);\n            break;\n          }\n        }\n\n        // Try as directory with index files\n        if (!resolution.exists) {\n          for (const indexFile of this.config.indexFiles) {\n            const indexPath = join(fullPath, indexFile);\n            if (existsSync(indexPath)) {\n              resolution.resolvedPath = indexPath;\n              resolution.exists = true;\n              resolution.isDirectory = true;\n              resolution.hasIndex = true;\n              break;\n            }\n          }\n        }\n      }\n    } else {\n      // Node module resolution (simplified)\n      resolution.resolvedPath = importPath;\n      resolution.exists = true; // Assume node modules exist\n    }\n\n    this.projectStructure.set(cacheKey, resolution);\n    return resolution;\n  }\n\n  /**\n   * Utility methods for import analysis\n   */\n  private isRelativeImport(path: string): boolean {\n    return path.startsWith('./') || path.startsWith('../');\n  }\n\n  private hasExtension(path: string): boolean {\n    return this.config.extensions.some(ext => path.endsWith(ext));\n  }\n\n  private getExtension(path: string): string {\n    return extname(path);\n  }\n\n  private addExtensionIfNeeded(path: string, extension: string): string {\n    if (this.hasExtension(path)) {\n      return path;\n    }\n    return path + extension;\n  }\n\n  private replaceExtension(path: string, newExtension: string): string {\n    const basePath = path.replace(/\\.[^.]*$/, '');\n    return basePath + newExtension;\n  }\n\n  private findCorrectExtension(resolution: ImportResolution): string | null {\n    if (resolution.extensions.length > 0) {\n      return resolution.extensions[0];\n    }\n    return null;\n  }\n\n  private async findBestMatch(fromFile: string, importPath: string): Promise<string | undefined> {\n    // Implement fuzzy matching for similar file names\n    // This is a simplified version\n    const basePath = dirname(fromFile);\n    const targetPath = resolve(basePath, importPath);\n    \n    // Try common variations\n    const variations = [\n      importPath + '.ts',\n      importPath + '.js',\n      importPath + '/index.ts',\n      importPath + '/index.js',\n    ];\n\n    for (const variation of variations) {\n      const fullPath = resolve(basePath, variation);\n      if (existsSync(fullPath)) {\n        return variation;\n      }\n    }\n\n    return undefined;\n  }\n\n  private isCircularDependency(fromFile: string, toFile: string): boolean {\n    // Simplified circular dependency detection\n    const visited = new Set<string>();\n    \n    const checkCircular = (current: string, target: string): boolean => {\n      if (current === target) return true;\n      if (visited.has(current)) return false;\n      \n      visited.add(current);\n      const dependencies = this.dependencyGraph.get(current) || new Set();\n      \n      for (const dep of dependencies) {\n        if (checkCircular(dep, target)) return true;\n      }\n      \n      return false;\n    };\n\n    return checkCircular(toFile, fromFile);\n  }\n\n  /**\n   * Coordination methods\n   */\n  private async updateMemory(action: string, data: any): Promise<void> {\n    if (!this.config.shareMemory) return;\n\n    try {\n      // This would integrate with the actual memory system\n      // For now, we'll emit an event\n      this.emit('coordination:memory-update', {\n        key: `${this.memoryKey}/${action}`,\n        data: {\n          timestamp: new Date(),\n          action,\n          ...data,\n        },\n      });\n    } catch (error) {\n      this.logger.warn('Failed to update coordination memory', { error });\n    }\n  }\n\n  private async reportToLevel2(event: string, data: any): Promise<void> {\n    try {\n      this.emit('coordination:level2-report', {\n        event,\n        from: this.agentState.id.id,\n        data,\n        timestamp: new Date(),\n      });\n    } catch (error) {\n      this.logger.warn('Failed to report to Level 2', { error });\n    }\n  }\n\n  /**\n   * Event handlers\n   */\n  private handleMemoryUpdate(data: any): void {\n    // Handle memory updates from coordination system\n    this.logger.debug('Memory update received', { data });\n  }\n\n  private handlePeerMessage(data: any): void {\n    // Handle messages from peer workers\n    this.logger.debug('Peer message received', { data });\n  }\n\n  private handleLevel2Request(data: any): void {\n    // Handle requests from Level 2 specialists\n    this.logger.debug('Level 2 request received', { data });\n  }\n\n  /**\n   * Utility methods for reporting\n   */\n  private categorizeIssues(issues: ImportIssue[]): Record<string, number> {\n    const categories: Record<string, number> = {};\n    \n    for (const issue of issues) {\n      categories[issue.type] = (categories[issue.type] || 0) + 1;\n    }\n    \n    return categories;\n  }\n\n  private generateFixReport(results: Map<string, any>): any {\n    const totalFiles = results.size;\n    const processedFiles = Array.from(results.values()).filter(r => !r.error).length;\n    const totalIssues = Array.from(results.values()).reduce((sum, r) => sum + (r.issues || 0), 0);\n    const totalFixed = Array.from(results.values()).reduce((sum, r) => sum + (r.fixed || 0), 0);\n    \n    return {\n      summary: {\n        totalFiles,\n        processedFiles,\n        totalIssues,\n        totalFixed,\n        successRate: processedFiles / totalFiles,\n        fixRate: totalIssues > 0 ? totalFixed / totalIssues : 1,\n      },\n      byFile: Object.fromEntries(results),\n      recommendations: this.generateRecommendations(results),\n    };\n  }\n\n  private generateAnalysisReport(results: Map<string, any>): any {\n    return {\n      summary: {\n        totalFiles: results.size,\n        totalImports: Array.from(results.values()).reduce((sum, r) => sum + (r.totalImports || 0), 0),\n        totalIssues: Array.from(results.values()).reduce((sum, r) => sum + (r.issues || 0), 0),\n      },\n      byFile: Object.fromEntries(results),\n    };\n  }\n\n  private generateValidationReport(results: Map<string, any>): any {\n    const validFiles = Array.from(results.values()).filter(r => r.valid).length;\n    \n    return {\n      summary: {\n        totalFiles: results.size,\n        validFiles,\n        invalidFiles: results.size - validFiles,\n        validationRate: validFiles / results.size,\n      },\n      byFile: Object.fromEntries(results),\n    };\n  }\n\n  private generateRecommendations(results: Map<string, any>): string[] {\n    const recommendations: string[] = [];\n    \n    const totalIssues = Array.from(results.values()).reduce((sum, r) => sum + (r.issues || 0), 0);\n    \n    if (totalIssues > 0) {\n      recommendations.push('Consider running the import fixer regularly as part of your CI/CD pipeline');\n    }\n    \n    const hasCircularDeps = this.circularDependencies.size > 0;\n    if (hasCircularDeps) {\n      recommendations.push('Refactor circular dependencies to improve maintainability');\n    }\n    \n    return recommendations;\n  }\n\n  private generateFileRecommendations(issues: ImportIssue[]): string[] {\n    const recommendations: string[] = [];\n    \n    const issueTypes = this.categorizeIssues(issues);\n    \n    if (issueTypes['missing-extension']) {\n      recommendations.push('Add file extensions to imports for ESM compatibility');\n    }\n    \n    if (issueTypes['unused-import']) {\n      recommendations.push('Remove unused imports to reduce bundle size');\n    }\n    \n    return recommendations;\n  }\n\n  private calculateAverageConfidence(): number {\n    const total = Array.from(this.metrics.fixesApplied.values()).reduce((sum, count) => sum + count, 0);\n    return total > 0 ? 0.85 : 0; // Simplified calculation\n  }\n\n  /**\n   * Get current metrics\n   */\n  getMetrics(): any {\n    return {\n      ...this.metrics,\n      uptime: Date.now() - (this.agentState.metrics.lastActivity?.getTime() || Date.now()),\n      memoryUsage: process.memoryUsage(),\n    };\n  }\n\n  /**\n   * Get current status\n   */\n  getStatus(): any {\n    return {\n      agentId: this.agentState.id.id,\n      status: this.agentState.status,\n      health: this.agentState.health,\n      workload: this.agentState.workload,\n      capabilities: this.agentState.capabilities,\n      metrics: this.getMetrics(),\n      level: 3,\n      type: 'import-worker',\n      coordinatedWith: {\n        level2: this.level2Coordinator,\n        peers: this.workerPeers,\n      },\n    };\n  }\n}\n\n/**\n * Factory function to create Import Worker agent\n */\nexport function createImportWorker(\n  config: Partial<ImportWorkerConfig>,\n  logger: ILogger,\n  agentState: AgentState,\n): ImportWorkerAgent {\n  return new ImportWorkerAgent(config, logger, agentState);\n}\n\n/**\n * Export types for use by coordination system\n */\nexport type { ImportWorkerConfig, ImportIssue, ImportResolution, FixStrategy };"],
      version: 3
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "55f390196a7d67df14fc216009526df22fcc2026"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_sogl3ghve = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_sogl3ghve();
/**
 * Import Worker Agent - Level 3 Worker in Hierarchical Lint Fixing Swarm
 *
 * Specialized agent for fixing import/export issues in TypeScript projects.
 * Reports to Level 2 specialists and coordinates with other Level 3 workers.
 */
import { EventEmitter } from 'node:events';
import { dirname, resolve, extname, join } from 'node:path';
import { existsSync, readFileSync, writeFileSync } from 'node:fs';
/**
 * Import Worker Agent - Specialized for TypeScript import/export fixing
 */
export class ImportWorkerAgent extends EventEmitter {
  logger;
  config;
  agentState;
  // Analysis state
  projectStructure =
  /* istanbul ignore next */
  (cov_sogl3ghve().s[0]++, new Map());
  dependencyGraph =
  /* istanbul ignore next */
  (cov_sogl3ghve().s[1]++, new Map());
  circularDependencies =
  /* istanbul ignore next */
  (cov_sogl3ghve().s[2]++, new Set());
  // Fix strategies
  strategies =
  /* istanbul ignore next */
  (cov_sogl3ghve().s[3]++, new Map());
  // Coordination state
  memoryKey;
  level2Coordinator;
  workerPeers =
  /* istanbul ignore next */
  (cov_sogl3ghve().s[4]++, []);
  // Performance tracking
  metrics =
  /* istanbul ignore next */
  (cov_sogl3ghve().s[5]++, {
    issuesDetected: 0,
    issuesFixed: 0,
    filesProcessed: 0,
    fixesApplied: new Map(),
    averageConfidence: 0,
    totalExecutionTime: 0
  });
  constructor(config, logger, agentState) {
    /* istanbul ignore next */
    cov_sogl3ghve().f[0]++;
    cov_sogl3ghve().s[6]++;
    super();
    /* istanbul ignore next */
    cov_sogl3ghve().s[7]++;
    this.logger = logger;
    /* istanbul ignore next */
    cov_sogl3ghve().s[8]++;
    this.agentState = agentState;
    /* istanbul ignore next */
    cov_sogl3ghve().s[9]++;
    this.memoryKey = `swarm-lint-fix/hierarchy/level3/workers/imports/${agentState.id.id}`;
    /* istanbul ignore next */
    cov_sogl3ghve().s[10]++;
    this.config = {
      baseDir: process.cwd(),
      extensions: ['.ts', '.tsx', '.js', '.jsx', '.mjs', '.cjs'],
      indexFiles: ['index.ts', 'index.tsx', 'index.js', 'index.jsx'],
      resolveExtensions: ['.ts', '.tsx', '.js', '.jsx', '.mjs', '.cjs', '.json'],
      moduleResolution: 'node',
      allowImplicitExtensions: false,
      enforceExtensions: true,
      preferredExtension: '.js',
      addMissingExtensions: true,
      removeUnusedImports: true,
      fixCircularDependencies: true,
      minConfidence: 0.7,
      maxFixAttempts: 3,
      reportToLevel2: true,
      shareMemory: true,
      batchSize: 10,
      ...config
    };
    /* istanbul ignore next */
    cov_sogl3ghve().s[11]++;
    this.initializeFixStrategies();
    /* istanbul ignore next */
    cov_sogl3ghve().s[12]++;
    this.setupEventHandlers();
  }
  /**
   * Initialize import fixing strategies
   */
  initializeFixStrategies() {
    /* istanbul ignore next */
    cov_sogl3ghve().f[1]++;
    cov_sogl3ghve().s[13]++;
    // Missing Extension Strategy
    this.strategies.set('missing-extension', [{
      name: 'add-js-extension',
      description: 'Add .js extension for ESM compatibility',
      confidence: 0.9,
      apply: (issue, content) => {
        /* istanbul ignore next */
        cov_sogl3ghve().f[2]++;
        const lines =
        /* istanbul ignore next */
        (cov_sogl3ghve().s[14]++, content.split('\n'));
        const line =
        /* istanbul ignore next */
        (cov_sogl3ghve().s[15]++, lines[issue.line - 1]);
        // Match import/export statements
        const importRegex =
        /* istanbul ignore next */
        (cov_sogl3ghve().s[16]++, /(\bimport\s+.+?\s+from\s+['"`])([^'"`]+)(['"`])/);
        const exportRegex =
        /* istanbul ignore next */
        (cov_sogl3ghve().s[17]++, /(\bexport\s+.+?\s+from\s+['"`])([^'"`]+)(['"`])/);
        const match =
        /* istanbul ignore next */
        (cov_sogl3ghve().s[18]++,
        /* istanbul ignore next */
        (cov_sogl3ghve().b[0][0]++, line.match(importRegex)) ||
        /* istanbul ignore next */
        (cov_sogl3ghve().b[0][1]++, line.match(exportRegex)));
        /* istanbul ignore next */
        cov_sogl3ghve().s[19]++;
        if (match) {
          /* istanbul ignore next */
          cov_sogl3ghve().b[1][0]++;
          const [, prefix, path, suffix] =
          /* istanbul ignore next */
          (cov_sogl3ghve().s[20]++, match);
          const newPath =
          /* istanbul ignore next */
          (cov_sogl3ghve().s[21]++, this.addExtensionIfNeeded(path,
          /* istanbul ignore next */
          (cov_sogl3ghve().b[2][0]++, issue.suggestedFix) ||
          /* istanbul ignore next */
          (cov_sogl3ghve().b[2][1]++, this.config.preferredExtension)));
          /* istanbul ignore next */
          cov_sogl3ghve().s[22]++;
          lines[issue.line - 1] = line.replace(match[0], `${prefix}${newPath}${suffix}`);
        } else
        /* istanbul ignore next */
        {
          cov_sogl3ghve().b[1][1]++;
        }
        cov_sogl3ghve().s[23]++;
        return lines.join('\n');
      },
      validate: (original, fixed) => {
        /* istanbul ignore next */
        cov_sogl3ghve().f[3]++;
        cov_sogl3ghve().s[24]++;
        return /* istanbul ignore next */(cov_sogl3ghve().b[3][0]++, fixed !== original) &&
        /* istanbul ignore next */
        (cov_sogl3ghve().b[3][1]++, fixed.includes('.js'));
      }
    }]);
    // Wrong Extension Strategy
    /* istanbul ignore next */
    cov_sogl3ghve().s[25]++;
    this.strategies.set('wrong-extension', [{
      name: 'correct-extension',
      description: 'Correct file extension based on actual file',
      confidence: 0.95,
      apply: (issue, content) => {
        /* istanbul ignore next */
        cov_sogl3ghve().f[4]++;
        const lines =
        /* istanbul ignore next */
        (cov_sogl3ghve().s[26]++, content.split('\n'));
        const line =
        /* istanbul ignore next */
        (cov_sogl3ghve().s[27]++, lines[issue.line - 1]);
        /* istanbul ignore next */
        cov_sogl3ghve().s[28]++;
        if (issue.suggestedFix) {
          /* istanbul ignore next */
          cov_sogl3ghve().b[4][0]++;
          cov_sogl3ghve().s[29]++;
          lines[issue.line - 1] = line.replace(issue.importPath, issue.suggestedFix);
        } else
        /* istanbul ignore next */
        {
          cov_sogl3ghve().b[4][1]++;
        }
        cov_sogl3ghve().s[30]++;
        return lines.join('\n');
      },
      validate: (original, fixed) => {
        /* istanbul ignore next */
        cov_sogl3ghve().f[5]++;
        cov_sogl3ghve().s[31]++;
        return fixed !== original;
      }
    }]);
    // Relative Path Error Strategy
    /* istanbul ignore next */
    cov_sogl3ghve().s[32]++;
    this.strategies.set('relative-path-error', [{
      name: 'fix-relative-path',
      description: 'Correct relative import path',
      confidence: 0.85,
      apply: (issue, content) => {
        /* istanbul ignore next */
        cov_sogl3ghve().f[6]++;
        const lines =
        /* istanbul ignore next */
        (cov_sogl3ghve().s[33]++, content.split('\n'));
        const line =
        /* istanbul ignore next */
        (cov_sogl3ghve().s[34]++, lines[issue.line - 1]);
        /* istanbul ignore next */
        cov_sogl3ghve().s[35]++;
        if (issue.suggestedFix) {
          /* istanbul ignore next */
          cov_sogl3ghve().b[5][0]++;
          cov_sogl3ghve().s[36]++;
          lines[issue.line - 1] = line.replace(issue.importPath, issue.suggestedFix);
        } else
        /* istanbul ignore next */
        {
          cov_sogl3ghve().b[5][1]++;
        }
        cov_sogl3ghve().s[37]++;
        return lines.join('\n');
      },
      validate: (original, fixed) => {
        /* istanbul ignore next */
        cov_sogl3ghve().f[7]++;
        cov_sogl3ghve().s[38]++;
        return fixed !== original;
      }
    }]);
    // Unused Import Strategy
    /* istanbul ignore next */
    cov_sogl3ghve().s[39]++;
    this.strategies.set('unused-import', [{
      name: 'remove-unused-import',
      description: 'Remove unused import statements',
      confidence: 0.8,
      apply: (issue, content) => {
        /* istanbul ignore next */
        cov_sogl3ghve().f[8]++;
        const lines =
        /* istanbul ignore next */
        (cov_sogl3ghve().s[40]++, content.split('\n'));
        // Remove the entire import line
        /* istanbul ignore next */
        cov_sogl3ghve().s[41]++;
        lines.splice(issue.line - 1, 1);
        /* istanbul ignore next */
        cov_sogl3ghve().s[42]++;
        return lines.join('\n');
      },
      validate: (original, fixed) => {
        /* istanbul ignore next */
        cov_sogl3ghve().f[9]++;
        cov_sogl3ghve().s[43]++;
        return fixed.length < original.length;
      }
    }]);
    // Type-only Import Strategy
    /* istanbul ignore next */
    cov_sogl3ghve().s[44]++;
    this.strategies.set('type-only-import', [{
      name: 'add-type-modifier',
      description: 'Add type modifier to import',
      confidence: 0.9,
      apply: (issue, content) => {
        /* istanbul ignore next */
        cov_sogl3ghve().f[10]++;
        const lines =
        /* istanbul ignore next */
        (cov_sogl3ghve().s[45]++, content.split('\n'));
        const line =
        /* istanbul ignore next */
        (cov_sogl3ghve().s[46]++, lines[issue.line - 1]);
        // Add type modifier
        const typeImportRegex =
        /* istanbul ignore next */
        (cov_sogl3ghve().s[47]++, /(\bimport\s+)(\{[^}]+\}|\w+)(\s+from)/);
        const match =
        /* istanbul ignore next */
        (cov_sogl3ghve().s[48]++, line.match(typeImportRegex));
        /* istanbul ignore next */
        cov_sogl3ghve().s[49]++;
        if (match) {
          /* istanbul ignore next */
          cov_sogl3ghve().b[6][0]++;
          cov_sogl3ghve().s[50]++;
          lines[issue.line - 1] = line.replace(match[0], `${match[1]}type ${match[2]}${match[3]}`);
        } else
        /* istanbul ignore next */
        {
          cov_sogl3ghve().b[6][1]++;
        }
        cov_sogl3ghve().s[51]++;
        return lines.join('\n');
      },
      validate: (original, fixed) => {
        /* istanbul ignore next */
        cov_sogl3ghve().f[11]++;
        cov_sogl3ghve().s[52]++;
        return fixed.includes('import type');
      }
    }]);
  }
  /**
   * Set up event handlers for coordination
   */
  setupEventHandlers() {
    /* istanbul ignore next */
    cov_sogl3ghve().f[12]++;
    cov_sogl3ghve().s[53]++;
    this.on('coordination:memory-update', this.handleMemoryUpdate.bind(this));
    /* istanbul ignore next */
    cov_sogl3ghve().s[54]++;
    this.on('coordination:peer-message', this.handlePeerMessage.bind(this));
    /* istanbul ignore next */
    cov_sogl3ghve().s[55]++;
    this.on('coordination:level2-request', this.handleLevel2Request.bind(this));
  }
  /**
   * Main task execution method
   */
  async executeTask(task) {
    /* istanbul ignore next */
    cov_sogl3ghve().f[13]++;
    const startTime =
    /* istanbul ignore next */
    (cov_sogl3ghve().s[56]++, Date.now());
    /* istanbul ignore next */
    cov_sogl3ghve().s[57]++;
    try {
      /* istanbul ignore next */
      cov_sogl3ghve().s[58]++;
      this.logger.info('Import Worker executing task', {
        taskId: task.id.id,
        type: task.type,
        agent: this.agentState.id.id
      });
      // Update coordination memory
      /* istanbul ignore next */
      cov_sogl3ghve().s[59]++;
      await this.updateMemory('task-started', {
        taskId: task.id.id,
        timestamp: new Date(),
        status: 'in-progress'
      });
      let result;
      /* istanbul ignore next */
      cov_sogl3ghve().s[60]++;
      switch (task.type) {
        case 'lint-fix':
          /* istanbul ignore next */
          cov_sogl3ghve().b[7][0]++;
          cov_sogl3ghve().s[61]++;
          result = await this.fixImportIssues(task);
          /* istanbul ignore next */
          cov_sogl3ghve().s[62]++;
          break;
        case 'analysis':
          /* istanbul ignore next */
          cov_sogl3ghve().b[7][1]++;
          cov_sogl3ghve().s[63]++;
          result = await this.analyzeImports(task);
          /* istanbul ignore next */
          cov_sogl3ghve().s[64]++;
          break;
        case 'validation':
          /* istanbul ignore next */
          cov_sogl3ghve().b[7][2]++;
          cov_sogl3ghve().s[65]++;
          result = await this.validateImports(task);
          /* istanbul ignore next */
          cov_sogl3ghve().s[66]++;
          break;
        default:
          /* istanbul ignore next */
          cov_sogl3ghve().b[7][3]++;
          cov_sogl3ghve().s[67]++;
          throw new Error(`Unsupported task type: ${task.type}`);
      }
      const executionTime =
      /* istanbul ignore next */
      (cov_sogl3ghve().s[68]++, Date.now() - startTime);
      /* istanbul ignore next */
      cov_sogl3ghve().s[69]++;
      this.metrics.totalExecutionTime += executionTime;
      // Update metrics
      /* istanbul ignore next */
      cov_sogl3ghve().s[70]++;
      this.metrics.filesProcessed++;
      // Update coordination memory
      /* istanbul ignore next */
      cov_sogl3ghve().s[71]++;
      await this.updateMemory('task-completed', {
        taskId: task.id.id,
        timestamp: new Date(),
        status: 'completed',
        result: result.metadata,
        executionTime
      });
      // Report to Level 2 if configured
      /* istanbul ignore next */
      cov_sogl3ghve().s[72]++;
      if (this.config.reportToLevel2) {
        /* istanbul ignore next */
        cov_sogl3ghve().b[8][0]++;
        cov_sogl3ghve().s[73]++;
        await this.reportToLevel2('task-completed', {
          worker: this.agentState.id.id,
          task: task.id.id,
          result: result.metadata
        });
      } else
      /* istanbul ignore next */
      {
        cov_sogl3ghve().b[8][1]++;
      }
      cov_sogl3ghve().s[74]++;
      this.emit('task:completed', {
        task,
        result
      });
      /* istanbul ignore next */
      cov_sogl3ghve().s[75]++;
      return result;
    } catch (error) {
      const executionTime =
      /* istanbul ignore next */
      (cov_sogl3ghve().s[76]++, Date.now() - startTime);
      const errorMessage =
      /* istanbul ignore next */
      (cov_sogl3ghve().s[77]++, error instanceof Error ?
      /* istanbul ignore next */
      (cov_sogl3ghve().b[9][0]++, error.message) :
      /* istanbul ignore next */
      (cov_sogl3ghve().b[9][1]++, String(error)));
      /* istanbul ignore next */
      cov_sogl3ghve().s[78]++;
      this.logger.error('Import Worker task failed', {
        taskId: task.id.id,
        error: errorMessage,
        executionTime
      });
      // Update coordination memory
      /* istanbul ignore next */
      cov_sogl3ghve().s[79]++;
      await this.updateMemory('task-failed', {
        taskId: task.id.id,
        timestamp: new Date(),
        status: 'failed',
        error: errorMessage,
        executionTime
      });
      // Report to Level 2
      /* istanbul ignore next */
      cov_sogl3ghve().s[80]++;
      if (this.config.reportToLevel2) {
        /* istanbul ignore next */
        cov_sogl3ghve().b[10][0]++;
        cov_sogl3ghve().s[81]++;
        await this.reportToLevel2('task-failed', {
          worker: this.agentState.id.id,
          task: task.id.id,
          error: errorMessage
        });
      } else
      /* istanbul ignore next */
      {
        cov_sogl3ghve().b[10][1]++;
      }
      cov_sogl3ghve().s[82]++;
      throw error;
    }
  }
  /**
   * Fix import issues in files
   */
  async fixImportIssues(task) {
    /* istanbul ignore next */
    cov_sogl3ghve().f[14]++;
    const files =
    /* istanbul ignore next */
    (cov_sogl3ghve().s[83]++,
    /* istanbul ignore next */
    (cov_sogl3ghve().b[11][0]++, task.input.files) ||
    /* istanbul ignore next */
    (cov_sogl3ghve().b[11][1]++, []));
    const fixResults =
    /* istanbul ignore next */
    (cov_sogl3ghve().s[84]++, new Map());
    let totalIssuesFixed =
    /* istanbul ignore next */
    (cov_sogl3ghve().s[85]++, 0);
    /* istanbul ignore next */
    cov_sogl3ghve().s[86]++;
    for (const filePath of files) {
      /* istanbul ignore next */
      cov_sogl3ghve().s[87]++;
      try {
        const content =
        /* istanbul ignore next */
        (cov_sogl3ghve().s[88]++, readFileSync(filePath, 'utf-8'));
        const issues =
        /* istanbul ignore next */
        (cov_sogl3ghve().s[89]++, await this.detectImportIssues(filePath, content));
        /* istanbul ignore next */
        cov_sogl3ghve().s[90]++;
        this.metrics.issuesDetected += issues.length;
        /* istanbul ignore next */
        cov_sogl3ghve().s[91]++;
        if (issues.length === 0) {
          /* istanbul ignore next */
          cov_sogl3ghve().b[12][0]++;
          cov_sogl3ghve().s[92]++;
          fixResults.set(filePath, {
            issues: 0,
            fixed: 0,
            skipped: 0
          });
          /* istanbul ignore next */
          cov_sogl3ghve().s[93]++;
          continue;
        } else
        /* istanbul ignore next */
        {
          cov_sogl3ghve().b[12][1]++;
        }
        let fixedContent =
        /* istanbul ignore next */
        (cov_sogl3ghve().s[94]++, content);
        let fixesApplied =
        /* istanbul ignore next */
        (cov_sogl3ghve().s[95]++, 0);
        let skipped =
        /* istanbul ignore next */
        (cov_sogl3ghve().s[96]++, 0);
        // Apply fixes in order of confidence
        const sortedIssues =
        /* istanbul ignore next */
        (cov_sogl3ghve().s[97]++, issues.sort((a, b) => {
          /* istanbul ignore next */
          cov_sogl3ghve().f[15]++;
          cov_sogl3ghve().s[98]++;
          return b.confidence - a.confidence;
        }));
        /* istanbul ignore next */
        cov_sogl3ghve().s[99]++;
        for (const issue of sortedIssues) {
          /* istanbul ignore next */
          cov_sogl3ghve().s[100]++;
          if (issue.confidence < this.config.minConfidence) {
            /* istanbul ignore next */
            cov_sogl3ghve().b[13][0]++;
            cov_sogl3ghve().s[101]++;
            skipped++;
            /* istanbul ignore next */
            cov_sogl3ghve().s[102]++;
            continue;
          } else
          /* istanbul ignore next */
          {
            cov_sogl3ghve().b[13][1]++;
          }
          const strategies =
          /* istanbul ignore next */
          (cov_sogl3ghve().s[103]++,
          /* istanbul ignore next */
          (cov_sogl3ghve().b[14][0]++, this.strategies.get(issue.type)) ||
          /* istanbul ignore next */
          (cov_sogl3ghve().b[14][1]++, []));
          let fixed =
          /* istanbul ignore next */
          (cov_sogl3ghve().s[104]++, false);
          /* istanbul ignore next */
          cov_sogl3ghve().s[105]++;
          for (const strategy of strategies) {
            /* istanbul ignore next */
            cov_sogl3ghve().s[106]++;
            try {
              const newContent =
              /* istanbul ignore next */
              (cov_sogl3ghve().s[107]++, strategy.apply(issue, fixedContent));
              /* istanbul ignore next */
              cov_sogl3ghve().s[108]++;
              if (strategy.validate(fixedContent, newContent)) {
                /* istanbul ignore next */
                cov_sogl3ghve().b[15][0]++;
                cov_sogl3ghve().s[109]++;
                fixedContent = newContent;
                /* istanbul ignore next */
                cov_sogl3ghve().s[110]++;
                fixesApplied++;
                /* istanbul ignore next */
                cov_sogl3ghve().s[111]++;
                totalIssuesFixed++;
                /* istanbul ignore next */
                cov_sogl3ghve().s[112]++;
                fixed = true;
                // Update strategy metrics
                const currentCount =
                /* istanbul ignore next */
                (cov_sogl3ghve().s[113]++,
                /* istanbul ignore next */
                (cov_sogl3ghve().b[16][0]++, this.metrics.fixesApplied.get(issue.type)) ||
                /* istanbul ignore next */
                (cov_sogl3ghve().b[16][1]++, 0));
                /* istanbul ignore next */
                cov_sogl3ghve().s[114]++;
                this.metrics.fixesApplied.set(issue.type, currentCount + 1);
                /* istanbul ignore next */
                cov_sogl3ghve().s[115]++;
                this.logger.debug('Applied import fix', {
                  file: filePath,
                  issue: issue.type,
                  strategy: strategy.name,
                  confidence: issue.confidence
                });
                /* istanbul ignore next */
                cov_sogl3ghve().s[116]++;
                break;
              } else
              /* istanbul ignore next */
              {
                cov_sogl3ghve().b[15][1]++;
              }
            } catch (error) {
              /* istanbul ignore next */
              cov_sogl3ghve().s[117]++;
              this.logger.warn('Fix strategy failed', {
                file: filePath,
                issue: issue.type,
                strategy: strategy.name,
                error: error instanceof Error ?
                /* istanbul ignore next */
                (cov_sogl3ghve().b[17][0]++, error.message) :
                /* istanbul ignore next */
                (cov_sogl3ghve().b[17][1]++, String(error))
              });
            }
          }
          /* istanbul ignore next */
          cov_sogl3ghve().s[118]++;
          if (!fixed) {
            /* istanbul ignore next */
            cov_sogl3ghve().b[18][0]++;
            cov_sogl3ghve().s[119]++;
            skipped++;
          } else
          /* istanbul ignore next */
          {
            cov_sogl3ghve().b[18][1]++;
          }
        }
        // Write fixed content back to file
        /* istanbul ignore next */
        cov_sogl3ghve().s[120]++;
        if (fixesApplied > 0) {
          /* istanbul ignore next */
          cov_sogl3ghve().b[19][0]++;
          cov_sogl3ghve().s[121]++;
          writeFileSync(filePath, fixedContent, 'utf-8');
        } else
        /* istanbul ignore next */
        {
          cov_sogl3ghve().b[19][1]++;
        }
        cov_sogl3ghve().s[122]++;
        fixResults.set(filePath, {
          issues: issues.length,
          fixed: fixesApplied,
          skipped
        });
      } catch (error) {
        /* istanbul ignore next */
        cov_sogl3ghve().s[123]++;
        this.logger.error('Failed to fix imports in file', {
          file: filePath,
          error: error instanceof Error ?
          /* istanbul ignore next */
          (cov_sogl3ghve().b[20][0]++, error.message) :
          /* istanbul ignore next */
          (cov_sogl3ghve().b[20][1]++, String(error))
        });
        /* istanbul ignore next */
        cov_sogl3ghve().s[124]++;
        fixResults.set(filePath, {
          issues: 0,
          fixed: 0,
          skipped: 0,
          error: error instanceof Error ?
          /* istanbul ignore next */
          (cov_sogl3ghve().b[21][0]++, error.message) :
          /* istanbul ignore next */
          (cov_sogl3ghve().b[21][1]++, String(error))
        });
      }
    }
    /* istanbul ignore next */
    cov_sogl3ghve().s[125]++;
    this.metrics.issuesFixed += totalIssuesFixed;
    /* istanbul ignore next */
    cov_sogl3ghve().s[126]++;
    return {
      output: {
        filesProcessed: files.length,
        totalIssuesFixed,
        results: Object.fromEntries(fixResults)
      },
      artifacts: {
        fixReport: this.generateFixReport(fixResults),
        metrics: this.getMetrics()
      },
      metadata: {
        worker: 'import-worker',
        version: '1.0.0',
        executedAt: new Date(),
        confidence: this.calculateAverageConfidence()
      },
      quality: totalIssuesFixed > 0 ?
      /* istanbul ignore next */
      (cov_sogl3ghve().b[22][0]++, 0.9) :
      /* istanbul ignore next */
      (cov_sogl3ghve().b[22][1]++, 0.7),
      completeness: 1.0,
      accuracy: 0.95,
      executionTime: 0,
      // Will be set by caller
      resourcesUsed: {
        memory: 50,
        cpu: 0.3
      },
      validated: true,
      recommendations: this.generateRecommendations(fixResults)
    };
  }
  /**
   * Analyze imports in files
   */
  async analyzeImports(task) {
    /* istanbul ignore next */
    cov_sogl3ghve().f[16]++;
    const files =
    /* istanbul ignore next */
    (cov_sogl3ghve().s[127]++,
    /* istanbul ignore next */
    (cov_sogl3ghve().b[23][0]++, task.input.files) ||
    /* istanbul ignore next */
    (cov_sogl3ghve().b[23][1]++, []));
    const analysisResults =
    /* istanbul ignore next */
    (cov_sogl3ghve().s[128]++, new Map());
    /* istanbul ignore next */
    cov_sogl3ghve().s[129]++;
    for (const filePath of files) {
      /* istanbul ignore next */
      cov_sogl3ghve().s[130]++;
      try {
        const content =
        /* istanbul ignore next */
        (cov_sogl3ghve().s[131]++, readFileSync(filePath, 'utf-8'));
        const issues =
        /* istanbul ignore next */
        (cov_sogl3ghve().s[132]++, await this.detectImportIssues(filePath, content));
        const imports =
        /* istanbul ignore next */
        (cov_sogl3ghve().s[133]++, this.extractImports(content));
        /* istanbul ignore next */
        cov_sogl3ghve().s[134]++;
        analysisResults.set(filePath, {
          totalImports: imports.length,
          issues: issues.length,
          issueTypes: this.categorizeIssues(issues),
          imports: imports.map(imp => {
            /* istanbul ignore next */
            cov_sogl3ghve().f[17]++;
            cov_sogl3ghve().s[135]++;
            return {
              type: imp.type,
              source: imp.source,
              specifiers: imp.specifiers,
              line: imp.line
            };
          }),
          recommendations: this.generateFileRecommendations(issues)
        });
      } catch (error) {
        /* istanbul ignore next */
        cov_sogl3ghve().s[136]++;
        analysisResults.set(filePath, {
          error: error instanceof Error ?
          /* istanbul ignore next */
          (cov_sogl3ghve().b[24][0]++, error.message) :
          /* istanbul ignore next */
          (cov_sogl3ghve().b[24][1]++, String(error))
        });
      }
    }
    /* istanbul ignore next */
    cov_sogl3ghve().s[137]++;
    return {
      output: {
        filesAnalyzed: files.length,
        results: Object.fromEntries(analysisResults)
      },
      artifacts: {
        analysisReport: this.generateAnalysisReport(analysisResults),
        dependencyGraph: Object.fromEntries(this.dependencyGraph),
        circularDependencies: Array.from(this.circularDependencies)
      },
      metadata: {
        worker: 'import-worker',
        version: '1.0.0',
        executedAt: new Date(),
        analysisType: 'import-analysis'
      },
      quality: 0.95,
      completeness: 1.0,
      accuracy: 0.98,
      executionTime: 0,
      resourcesUsed: {
        memory: 30,
        cpu: 0.2
      },
      validated: true
    };
  }
  /**
   * Validate imports in files
   */
  async validateImports(task) {
    /* istanbul ignore next */
    cov_sogl3ghve().f[18]++;
    const files =
    /* istanbul ignore next */
    (cov_sogl3ghve().s[138]++,
    /* istanbul ignore next */
    (cov_sogl3ghve().b[25][0]++, task.input.files) ||
    /* istanbul ignore next */
    (cov_sogl3ghve().b[25][1]++, []));
    const validationResults =
    /* istanbul ignore next */
    (cov_sogl3ghve().s[139]++, new Map());
    let totalErrors =
    /* istanbul ignore next */
    (cov_sogl3ghve().s[140]++, 0);
    let totalWarnings =
    /* istanbul ignore next */
    (cov_sogl3ghve().s[141]++, 0);
    /* istanbul ignore next */
    cov_sogl3ghve().s[142]++;
    for (const filePath of files) {
      /* istanbul ignore next */
      cov_sogl3ghve().s[143]++;
      try {
        const content =
        /* istanbul ignore next */
        (cov_sogl3ghve().s[144]++, readFileSync(filePath, 'utf-8'));
        const issues =
        /* istanbul ignore next */
        (cov_sogl3ghve().s[145]++, await this.detectImportIssues(filePath, content));
        const errors =
        /* istanbul ignore next */
        (cov_sogl3ghve().s[146]++, issues.filter(i => {
          /* istanbul ignore next */
          cov_sogl3ghve().f[19]++;
          cov_sogl3ghve().s[147]++;
          return i.severity === 'error';
        }));
        const warnings =
        /* istanbul ignore next */
        (cov_sogl3ghve().s[148]++, issues.filter(i => {
          /* istanbul ignore next */
          cov_sogl3ghve().f[20]++;
          cov_sogl3ghve().s[149]++;
          return i.severity === 'warning';
        }));
        /* istanbul ignore next */
        cov_sogl3ghve().s[150]++;
        totalErrors += errors.length;
        /* istanbul ignore next */
        cov_sogl3ghve().s[151]++;
        totalWarnings += warnings.length;
        /* istanbul ignore next */
        cov_sogl3ghve().s[152]++;
        validationResults.set(filePath, {
          valid: errors.length === 0,
          errors: errors.length,
          warnings: warnings.length,
          issues: issues.map(issue => {
            /* istanbul ignore next */
            cov_sogl3ghve().f[21]++;
            cov_sogl3ghve().s[153]++;
            return {
              type: issue.type,
              severity: issue.severity,
              message: issue.message,
              line: issue.line,
              column: issue.column
            };
          })
        });
      } catch (error) {
        /* istanbul ignore next */
        cov_sogl3ghve().s[154]++;
        totalErrors++;
        /* istanbul ignore next */
        cov_sogl3ghve().s[155]++;
        validationResults.set(filePath, {
          valid: false,
          error: error instanceof Error ?
          /* istanbul ignore next */
          (cov_sogl3ghve().b[26][0]++, error.message) :
          /* istanbul ignore next */
          (cov_sogl3ghve().b[26][1]++, String(error))
        });
      }
    }
    /* istanbul ignore next */
    cov_sogl3ghve().s[156]++;
    return {
      output: {
        filesValidated: files.length,
        totalErrors,
        totalWarnings,
        results: Object.fromEntries(validationResults)
      },
      artifacts: {
        validationReport: this.generateValidationReport(validationResults)
      },
      metadata: {
        worker: 'import-worker',
        version: '1.0.0',
        executedAt: new Date(),
        validationType: 'import-validation'
      },
      quality: totalErrors === 0 ?
      /* istanbul ignore next */
      (cov_sogl3ghve().b[27][0]++, 0.95) :
      /* istanbul ignore next */
      (cov_sogl3ghve().b[27][1]++, 0.7),
      completeness: 1.0,
      accuracy: 0.98,
      executionTime: 0,
      resourcesUsed: {
        memory: 25,
        cpu: 0.15
      },
      validated: true
    };
  }
  /**
   * Detect import issues in a file
   */
  async detectImportIssues(filePath, content) {
    /* istanbul ignore next */
    cov_sogl3ghve().f[22]++;
    const issues =
    /* istanbul ignore next */
    (cov_sogl3ghve().s[157]++, []);
    const lines =
    /* istanbul ignore next */
    (cov_sogl3ghve().s[158]++, content.split('\n'));
    const imports =
    /* istanbul ignore next */
    (cov_sogl3ghve().s[159]++, this.extractImports(content));
    /* istanbul ignore next */
    cov_sogl3ghve().s[160]++;
    for (const importStatement of imports) {
      const resolution =
      /* istanbul ignore next */
      (cov_sogl3ghve().s[161]++, await this.resolveImport(filePath, importStatement.source));
      // Check for missing extensions
      /* istanbul ignore next */
      cov_sogl3ghve().s[162]++;
      if (
      /* istanbul ignore next */
      (cov_sogl3ghve().b[29][0]++, this.config.enforceExtensions) &&
      /* istanbul ignore next */
      (cov_sogl3ghve().b[29][1]++, !this.hasExtension(importStatement.source))) {
        /* istanbul ignore next */
        cov_sogl3ghve().b[28][0]++;
        cov_sogl3ghve().s[163]++;
        if (
        /* istanbul ignore next */
        (cov_sogl3ghve().b[31][0]++, resolution.exists) &&
        /* istanbul ignore next */
        (cov_sogl3ghve().b[31][1]++, this.isRelativeImport(importStatement.source))) {
          /* istanbul ignore next */
          cov_sogl3ghve().b[30][0]++;
          cov_sogl3ghve().s[164]++;
          issues.push({
            type: 'missing-extension',
            severity: 'error',
            file: filePath,
            line: importStatement.line,
            column: importStatement.column,
            message: `Missing file extension for ESM import: ${importStatement.source}`,
            importPath: importStatement.source,
            suggestedFix: this.addExtensionIfNeeded(importStatement.source, this.config.preferredExtension),
            confidence: 0.9
          });
        } else
        /* istanbul ignore next */
        {
          cov_sogl3ghve().b[30][1]++;
        }
      } else
      /* istanbul ignore next */
      {
        cov_sogl3ghve().b[28][1]++;
      }
      // Check if module exists
      cov_sogl3ghve().s[165]++;
      if (
      /* istanbul ignore next */
      (cov_sogl3ghve().b[33][0]++, !resolution.exists) &&
      /* istanbul ignore next */
      (cov_sogl3ghve().b[33][1]++, this.isRelativeImport(importStatement.source))) {
        /* istanbul ignore next */
        cov_sogl3ghve().b[32][0]++;
        const suggestedFix =
        /* istanbul ignore next */
        (cov_sogl3ghve().s[166]++, await this.findBestMatch(filePath, importStatement.source));
        /* istanbul ignore next */
        cov_sogl3ghve().s[167]++;
        issues.push({
          type: 'non-existent-module',
          severity: 'error',
          file: filePath,
          line: importStatement.line,
          column: importStatement.column,
          message: `Cannot resolve module: ${importStatement.source}`,
          importPath: importStatement.source,
          suggestedFix,
          confidence: suggestedFix ?
          /* istanbul ignore next */
          (cov_sogl3ghve().b[34][0]++, 0.8) :
          /* istanbul ignore next */
          (cov_sogl3ghve().b[34][1]++, 0.3)
        });
      } else
      /* istanbul ignore next */
      {
        cov_sogl3ghve().b[32][1]++;
      }
      // Check for wrong extensions
      const correctExtension =
      /* istanbul ignore next */
      (cov_sogl3ghve().s[168]++, this.findCorrectExtension(resolution));
      /* istanbul ignore next */
      cov_sogl3ghve().s[169]++;
      if (
      /* istanbul ignore next */
      (cov_sogl3ghve().b[36][0]++, correctExtension) &&
      /* istanbul ignore next */
      (cov_sogl3ghve().b[36][1]++, correctExtension !== this.getExtension(importStatement.source))) {
        /* istanbul ignore next */
        cov_sogl3ghve().b[35][0]++;
        cov_sogl3ghve().s[170]++;
        issues.push({
          type: 'wrong-extension',
          severity: 'warning',
          file: filePath,
          line: importStatement.line,
          column: importStatement.column,
          message: `Incorrect file extension, expected: ${correctExtension}`,
          importPath: importStatement.source,
          suggestedFix: this.replaceExtension(importStatement.source, correctExtension),
          confidence: 0.95
        });
      } else
      /* istanbul ignore next */
      {
        cov_sogl3ghve().b[35][1]++;
      }
      // Check for circular dependencies
      cov_sogl3ghve().s[171]++;
      if (this.isCircularDependency(filePath, resolution.resolvedPath)) {
        /* istanbul ignore next */
        cov_sogl3ghve().b[37][0]++;
        cov_sogl3ghve().s[172]++;
        issues.push({
          type: 'circular-dependency',
          severity: 'warning',
          file: filePath,
          line: importStatement.line,
          column: importStatement.column,
          message: `Circular dependency detected with: ${importStatement.source}`,
          importPath: importStatement.source,
          confidence: 0.9
        });
      } else
      /* istanbul ignore next */
      {
        cov_sogl3ghve().b[37][1]++;
      }
    }
    /* istanbul ignore next */
    cov_sogl3ghve().s[173]++;
    return issues;
  }
  /**
   * Extract import statements from content
   */
  extractImports(content) {
    /* istanbul ignore next */
    cov_sogl3ghve().f[23]++;
    const imports =
    /* istanbul ignore next */
    (cov_sogl3ghve().s[174]++, []);
    const lines =
    /* istanbul ignore next */
    (cov_sogl3ghve().s[175]++, content.split('\n'));
    /* istanbul ignore next */
    cov_sogl3ghve().s[176]++;
    lines.forEach((line, index) => {
      /* istanbul ignore next */
      cov_sogl3ghve().f[24]++;
      // Match import statements
      const importMatch =
      /* istanbul ignore next */
      (cov_sogl3ghve().s[177]++, line.match(/import\s+(.+?)\s+from\s+['"`]([^'"`]+)['"`]/));
      /* istanbul ignore next */
      cov_sogl3ghve().s[178]++;
      if (importMatch) {
        /* istanbul ignore next */
        cov_sogl3ghve().b[38][0]++;
        cov_sogl3ghve().s[179]++;
        imports.push({
          type: 'import',
          source: importMatch[2],
          specifiers: this.parseSpecifiers(importMatch[1]),
          line: index + 1,
          column: line.indexOf('import')
        });
      } else
      /* istanbul ignore next */
      {
        cov_sogl3ghve().b[38][1]++;
      }
      // Match export statements
      const exportMatch =
      /* istanbul ignore next */
      (cov_sogl3ghve().s[180]++, line.match(/export\s+(.+?)\s+from\s+['"`]([^'"`]+)['"`]/));
      /* istanbul ignore next */
      cov_sogl3ghve().s[181]++;
      if (exportMatch) {
        /* istanbul ignore next */
        cov_sogl3ghve().b[39][0]++;
        cov_sogl3ghve().s[182]++;
        imports.push({
          type: 'export',
          source: exportMatch[2],
          specifiers: this.parseSpecifiers(exportMatch[1]),
          line: index + 1,
          column: line.indexOf('export')
        });
      } else
      /* istanbul ignore next */
      {
        cov_sogl3ghve().b[39][1]++;
      }
    });
    /* istanbul ignore next */
    cov_sogl3ghve().s[183]++;
    return imports;
  }
  /**
   * Parse import/export specifiers
   */
  parseSpecifiers(specifierString) {
    /* istanbul ignore next */
    cov_sogl3ghve().f[25]++;
    // Handle different import patterns
    const specifiers =
    /* istanbul ignore next */
    (cov_sogl3ghve().s[184]++, []);
    // Default import
    const defaultMatch =
    /* istanbul ignore next */
    (cov_sogl3ghve().s[185]++, specifierString.match(/^\s*(\w+)/));
    /* istanbul ignore next */
    cov_sogl3ghve().s[186]++;
    if (defaultMatch) {
      /* istanbul ignore next */
      cov_sogl3ghve().b[40][0]++;
      cov_sogl3ghve().s[187]++;
      specifiers.push(`default:${defaultMatch[1]}`);
    } else
    /* istanbul ignore next */
    {
      cov_sogl3ghve().b[40][1]++;
    }
    // Named imports
    const namedMatch =
    /* istanbul ignore next */
    (cov_sogl3ghve().s[188]++, specifierString.match(/\{([^}]+)\}/));
    /* istanbul ignore next */
    cov_sogl3ghve().s[189]++;
    if (namedMatch) {
      /* istanbul ignore next */
      cov_sogl3ghve().b[41][0]++;
      const named =
      /* istanbul ignore next */
      (cov_sogl3ghve().s[190]++, namedMatch[1].split(',').map(s => {
        /* istanbul ignore next */
        cov_sogl3ghve().f[26]++;
        cov_sogl3ghve().s[191]++;
        return s.trim();
      }));
      /* istanbul ignore next */
      cov_sogl3ghve().s[192]++;
      specifiers.push(...named);
    } else
    /* istanbul ignore next */
    {
      cov_sogl3ghve().b[41][1]++;
    }
    // Namespace import
    const namespaceMatch =
    /* istanbul ignore next */
    (cov_sogl3ghve().s[193]++, specifierString.match(/\*\s+as\s+(\w+)/));
    /* istanbul ignore next */
    cov_sogl3ghve().s[194]++;
    if (namespaceMatch) {
      /* istanbul ignore next */
      cov_sogl3ghve().b[42][0]++;
      cov_sogl3ghve().s[195]++;
      specifiers.push(`namespace:${namespaceMatch[1]}`);
    } else
    /* istanbul ignore next */
    {
      cov_sogl3ghve().b[42][1]++;
    }
    cov_sogl3ghve().s[196]++;
    return specifiers;
  }
  /**
   * Resolve import path
   */
  async resolveImport(fromFile, importPath) {
    /* istanbul ignore next */
    cov_sogl3ghve().f[27]++;
    const cacheKey =
    /* istanbul ignore next */
    (cov_sogl3ghve().s[197]++, `${fromFile}:${importPath}`);
    /* istanbul ignore next */
    cov_sogl3ghve().s[198]++;
    if (this.projectStructure.has(cacheKey)) {
      /* istanbul ignore next */
      cov_sogl3ghve().b[43][0]++;
      cov_sogl3ghve().s[199]++;
      return this.projectStructure.get(cacheKey);
    } else
    /* istanbul ignore next */
    {
      cov_sogl3ghve().b[43][1]++;
    }
    const resolution =
    /* istanbul ignore next */
    (cov_sogl3ghve().s[200]++, {
      originalPath: importPath,
      resolvedPath: '',
      exists: false,
      isDirectory: false,
      hasIndex: false,
      extensions: []
    });
    /* istanbul ignore next */
    cov_sogl3ghve().s[201]++;
    if (this.isRelativeImport(importPath)) {
      /* istanbul ignore next */
      cov_sogl3ghve().b[44][0]++;
      const basePath =
      /* istanbul ignore next */
      (cov_sogl3ghve().s[202]++, dirname(fromFile));
      const fullPath =
      /* istanbul ignore next */
      (cov_sogl3ghve().s[203]++, resolve(basePath, importPath));
      // Try exact path
      /* istanbul ignore next */
      cov_sogl3ghve().s[204]++;
      if (existsSync(fullPath)) {
        /* istanbul ignore next */
        cov_sogl3ghve().b[45][0]++;
        cov_sogl3ghve().s[205]++;
        resolution.resolvedPath = fullPath;
        /* istanbul ignore next */
        cov_sogl3ghve().s[206]++;
        resolution.exists = true;
        /* istanbul ignore next */
        cov_sogl3ghve().s[207]++;
        resolution.isDirectory = !extname(fullPath);
      } else {
        /* istanbul ignore next */
        cov_sogl3ghve().b[45][1]++;
        cov_sogl3ghve().s[208]++;
        // Try with extensions
        for (const ext of this.config.resolveExtensions) {
          const pathWithExt =
          /* istanbul ignore next */
          (cov_sogl3ghve().s[209]++, fullPath + ext);
          /* istanbul ignore next */
          cov_sogl3ghve().s[210]++;
          if (existsSync(pathWithExt)) {
            /* istanbul ignore next */
            cov_sogl3ghve().b[46][0]++;
            cov_sogl3ghve().s[211]++;
            resolution.resolvedPath = pathWithExt;
            /* istanbul ignore next */
            cov_sogl3ghve().s[212]++;
            resolution.exists = true;
            /* istanbul ignore next */
            cov_sogl3ghve().s[213]++;
            resolution.extensions.push(ext);
            /* istanbul ignore next */
            cov_sogl3ghve().s[214]++;
            break;
          } else
          /* istanbul ignore next */
          {
            cov_sogl3ghve().b[46][1]++;
          }
        }
        // Try as directory with index files
        /* istanbul ignore next */
        cov_sogl3ghve().s[215]++;
        if (!resolution.exists) {
          /* istanbul ignore next */
          cov_sogl3ghve().b[47][0]++;
          cov_sogl3ghve().s[216]++;
          for (const indexFile of this.config.indexFiles) {
            const indexPath =
            /* istanbul ignore next */
            (cov_sogl3ghve().s[217]++, join(fullPath, indexFile));
            /* istanbul ignore next */
            cov_sogl3ghve().s[218]++;
            if (existsSync(indexPath)) {
              /* istanbul ignore next */
              cov_sogl3ghve().b[48][0]++;
              cov_sogl3ghve().s[219]++;
              resolution.resolvedPath = indexPath;
              /* istanbul ignore next */
              cov_sogl3ghve().s[220]++;
              resolution.exists = true;
              /* istanbul ignore next */
              cov_sogl3ghve().s[221]++;
              resolution.isDirectory = true;
              /* istanbul ignore next */
              cov_sogl3ghve().s[222]++;
              resolution.hasIndex = true;
              /* istanbul ignore next */
              cov_sogl3ghve().s[223]++;
              break;
            } else
            /* istanbul ignore next */
            {
              cov_sogl3ghve().b[48][1]++;
            }
          }
        } else
        /* istanbul ignore next */
        {
          cov_sogl3ghve().b[47][1]++;
        }
      }
    } else {
      /* istanbul ignore next */
      cov_sogl3ghve().b[44][1]++;
      cov_sogl3ghve().s[224]++;
      // Node module resolution (simplified)
      resolution.resolvedPath = importPath;
      /* istanbul ignore next */
      cov_sogl3ghve().s[225]++;
      resolution.exists = true; // Assume node modules exist
    }
    /* istanbul ignore next */
    cov_sogl3ghve().s[226]++;
    this.projectStructure.set(cacheKey, resolution);
    /* istanbul ignore next */
    cov_sogl3ghve().s[227]++;
    return resolution;
  }
  /**
   * Utility methods for import analysis
   */
  isRelativeImport(path) {
    /* istanbul ignore next */
    cov_sogl3ghve().f[28]++;
    cov_sogl3ghve().s[228]++;
    return /* istanbul ignore next */(cov_sogl3ghve().b[49][0]++, path.startsWith('./')) ||
    /* istanbul ignore next */
    (cov_sogl3ghve().b[49][1]++, path.startsWith('../'));
  }
  hasExtension(path) {
    /* istanbul ignore next */
    cov_sogl3ghve().f[29]++;
    cov_sogl3ghve().s[229]++;
    return this.config.extensions.some(ext => {
      /* istanbul ignore next */
      cov_sogl3ghve().f[30]++;
      cov_sogl3ghve().s[230]++;
      return path.endsWith(ext);
    });
  }
  getExtension(path) {
    /* istanbul ignore next */
    cov_sogl3ghve().f[31]++;
    cov_sogl3ghve().s[231]++;
    return extname(path);
  }
  addExtensionIfNeeded(path, extension) {
    /* istanbul ignore next */
    cov_sogl3ghve().f[32]++;
    cov_sogl3ghve().s[232]++;
    if (this.hasExtension(path)) {
      /* istanbul ignore next */
      cov_sogl3ghve().b[50][0]++;
      cov_sogl3ghve().s[233]++;
      return path;
    } else
    /* istanbul ignore next */
    {
      cov_sogl3ghve().b[50][1]++;
    }
    cov_sogl3ghve().s[234]++;
    return path + extension;
  }
  replaceExtension(path, newExtension) {
    /* istanbul ignore next */
    cov_sogl3ghve().f[33]++;
    const basePath =
    /* istanbul ignore next */
    (cov_sogl3ghve().s[235]++, path.replace(/\.[^.]*$/, ''));
    /* istanbul ignore next */
    cov_sogl3ghve().s[236]++;
    return basePath + newExtension;
  }
  findCorrectExtension(resolution) {
    /* istanbul ignore next */
    cov_sogl3ghve().f[34]++;
    cov_sogl3ghve().s[237]++;
    if (resolution.extensions.length > 0) {
      /* istanbul ignore next */
      cov_sogl3ghve().b[51][0]++;
      cov_sogl3ghve().s[238]++;
      return resolution.extensions[0];
    } else
    /* istanbul ignore next */
    {
      cov_sogl3ghve().b[51][1]++;
    }
    cov_sogl3ghve().s[239]++;
    return null;
  }
  async findBestMatch(fromFile, importPath) {
    /* istanbul ignore next */
    cov_sogl3ghve().f[35]++;
    // Implement fuzzy matching for similar file names
    // This is a simplified version
    const basePath =
    /* istanbul ignore next */
    (cov_sogl3ghve().s[240]++, dirname(fromFile));
    const targetPath =
    /* istanbul ignore next */
    (cov_sogl3ghve().s[241]++, resolve(basePath, importPath));
    // Try common variations
    const variations =
    /* istanbul ignore next */
    (cov_sogl3ghve().s[242]++, [importPath + '.ts', importPath + '.js', importPath + '/index.ts', importPath + '/index.js']);
    /* istanbul ignore next */
    cov_sogl3ghve().s[243]++;
    for (const variation of variations) {
      const fullPath =
      /* istanbul ignore next */
      (cov_sogl3ghve().s[244]++, resolve(basePath, variation));
      /* istanbul ignore next */
      cov_sogl3ghve().s[245]++;
      if (existsSync(fullPath)) {
        /* istanbul ignore next */
        cov_sogl3ghve().b[52][0]++;
        cov_sogl3ghve().s[246]++;
        return variation;
      } else
      /* istanbul ignore next */
      {
        cov_sogl3ghve().b[52][1]++;
      }
    }
    /* istanbul ignore next */
    cov_sogl3ghve().s[247]++;
    return undefined;
  }
  isCircularDependency(fromFile, toFile) {
    /* istanbul ignore next */
    cov_sogl3ghve().f[36]++;
    // Simplified circular dependency detection
    const visited =
    /* istanbul ignore next */
    (cov_sogl3ghve().s[248]++, new Set());
    /* istanbul ignore next */
    cov_sogl3ghve().s[249]++;
    const checkCircular = (current, target) => {
      /* istanbul ignore next */
      cov_sogl3ghve().f[37]++;
      cov_sogl3ghve().s[250]++;
      if (current === target) {
        /* istanbul ignore next */
        cov_sogl3ghve().b[53][0]++;
        cov_sogl3ghve().s[251]++;
        return true;
      } else
      /* istanbul ignore next */
      {
        cov_sogl3ghve().b[53][1]++;
      }
      cov_sogl3ghve().s[252]++;
      if (visited.has(current)) {
        /* istanbul ignore next */
        cov_sogl3ghve().b[54][0]++;
        cov_sogl3ghve().s[253]++;
        return false;
      } else
      /* istanbul ignore next */
      {
        cov_sogl3ghve().b[54][1]++;
      }
      cov_sogl3ghve().s[254]++;
      visited.add(current);
      const dependencies =
      /* istanbul ignore next */
      (cov_sogl3ghve().s[255]++,
      /* istanbul ignore next */
      (cov_sogl3ghve().b[55][0]++, this.dependencyGraph.get(current)) ||
      /* istanbul ignore next */
      (cov_sogl3ghve().b[55][1]++, new Set()));
      /* istanbul ignore next */
      cov_sogl3ghve().s[256]++;
      for (const dep of dependencies) {
        /* istanbul ignore next */
        cov_sogl3ghve().s[257]++;
        if (checkCircular(dep, target)) {
          /* istanbul ignore next */
          cov_sogl3ghve().b[56][0]++;
          cov_sogl3ghve().s[258]++;
          return true;
        } else
        /* istanbul ignore next */
        {
          cov_sogl3ghve().b[56][1]++;
        }
      }
      /* istanbul ignore next */
      cov_sogl3ghve().s[259]++;
      return false;
    };
    /* istanbul ignore next */
    cov_sogl3ghve().s[260]++;
    return checkCircular(toFile, fromFile);
  }
  /**
   * Coordination methods
   */
  async updateMemory(action, data) {
    /* istanbul ignore next */
    cov_sogl3ghve().f[38]++;
    cov_sogl3ghve().s[261]++;
    if (!this.config.shareMemory) {
      /* istanbul ignore next */
      cov_sogl3ghve().b[57][0]++;
      cov_sogl3ghve().s[262]++;
      return;
    } else
    /* istanbul ignore next */
    {
      cov_sogl3ghve().b[57][1]++;
    }
    cov_sogl3ghve().s[263]++;
    try {
      /* istanbul ignore next */
      cov_sogl3ghve().s[264]++;
      // This would integrate with the actual memory system
      // For now, we'll emit an event
      this.emit('coordination:memory-update', {
        key: `${this.memoryKey}/${action}`,
        data: {
          timestamp: new Date(),
          action,
          ...data
        }
      });
    } catch (error) {
      /* istanbul ignore next */
      cov_sogl3ghve().s[265]++;
      this.logger.warn('Failed to update coordination memory', {
        error
      });
    }
  }
  async reportToLevel2(event, data) {
    /* istanbul ignore next */
    cov_sogl3ghve().f[39]++;
    cov_sogl3ghve().s[266]++;
    try {
      /* istanbul ignore next */
      cov_sogl3ghve().s[267]++;
      this.emit('coordination:level2-report', {
        event,
        from: this.agentState.id.id,
        data,
        timestamp: new Date()
      });
    } catch (error) {
      /* istanbul ignore next */
      cov_sogl3ghve().s[268]++;
      this.logger.warn('Failed to report to Level 2', {
        error
      });
    }
  }
  /**
   * Event handlers
   */
  handleMemoryUpdate(data) {
    /* istanbul ignore next */
    cov_sogl3ghve().f[40]++;
    cov_sogl3ghve().s[269]++;
    // Handle memory updates from coordination system
    this.logger.debug('Memory update received', {
      data
    });
  }
  handlePeerMessage(data) {
    /* istanbul ignore next */
    cov_sogl3ghve().f[41]++;
    cov_sogl3ghve().s[270]++;
    // Handle messages from peer workers
    this.logger.debug('Peer message received', {
      data
    });
  }
  handleLevel2Request(data) {
    /* istanbul ignore next */
    cov_sogl3ghve().f[42]++;
    cov_sogl3ghve().s[271]++;
    // Handle requests from Level 2 specialists
    this.logger.debug('Level 2 request received', {
      data
    });
  }
  /**
   * Utility methods for reporting
   */
  categorizeIssues(issues) {
    /* istanbul ignore next */
    cov_sogl3ghve().f[43]++;
    const categories =
    /* istanbul ignore next */
    (cov_sogl3ghve().s[272]++, {});
    /* istanbul ignore next */
    cov_sogl3ghve().s[273]++;
    for (const issue of issues) {
      /* istanbul ignore next */
      cov_sogl3ghve().s[274]++;
      categories[issue.type] = (
      /* istanbul ignore next */
      (cov_sogl3ghve().b[58][0]++, categories[issue.type]) ||
      /* istanbul ignore next */
      (cov_sogl3ghve().b[58][1]++, 0)) + 1;
    }
    /* istanbul ignore next */
    cov_sogl3ghve().s[275]++;
    return categories;
  }
  generateFixReport(results) {
    /* istanbul ignore next */
    cov_sogl3ghve().f[44]++;
    const totalFiles =
    /* istanbul ignore next */
    (cov_sogl3ghve().s[276]++, results.size);
    const processedFiles =
    /* istanbul ignore next */
    (cov_sogl3ghve().s[277]++, Array.from(results.values()).filter(r => {
      /* istanbul ignore next */
      cov_sogl3ghve().f[45]++;
      cov_sogl3ghve().s[278]++;
      return !r.error;
    }).length);
    const totalIssues =
    /* istanbul ignore next */
    (cov_sogl3ghve().s[279]++, Array.from(results.values()).reduce((sum, r) => {
      /* istanbul ignore next */
      cov_sogl3ghve().f[46]++;
      cov_sogl3ghve().s[280]++;
      return sum + (
      /* istanbul ignore next */
      (cov_sogl3ghve().b[59][0]++, r.issues) ||
      /* istanbul ignore next */
      (cov_sogl3ghve().b[59][1]++, 0));
    }, 0));
    const totalFixed =
    /* istanbul ignore next */
    (cov_sogl3ghve().s[281]++, Array.from(results.values()).reduce((sum, r) => {
      /* istanbul ignore next */
      cov_sogl3ghve().f[47]++;
      cov_sogl3ghve().s[282]++;
      return sum + (
      /* istanbul ignore next */
      (cov_sogl3ghve().b[60][0]++, r.fixed) ||
      /* istanbul ignore next */
      (cov_sogl3ghve().b[60][1]++, 0));
    }, 0));
    /* istanbul ignore next */
    cov_sogl3ghve().s[283]++;
    return {
      summary: {
        totalFiles,
        processedFiles,
        totalIssues,
        totalFixed,
        successRate: processedFiles / totalFiles,
        fixRate: totalIssues > 0 ?
        /* istanbul ignore next */
        (cov_sogl3ghve().b[61][0]++, totalFixed / totalIssues) :
        /* istanbul ignore next */
        (cov_sogl3ghve().b[61][1]++, 1)
      },
      byFile: Object.fromEntries(results),
      recommendations: this.generateRecommendations(results)
    };
  }
  generateAnalysisReport(results) {
    /* istanbul ignore next */
    cov_sogl3ghve().f[48]++;
    cov_sogl3ghve().s[284]++;
    return {
      summary: {
        totalFiles: results.size,
        totalImports: Array.from(results.values()).reduce((sum, r) => {
          /* istanbul ignore next */
          cov_sogl3ghve().f[49]++;
          cov_sogl3ghve().s[285]++;
          return sum + (
          /* istanbul ignore next */
          (cov_sogl3ghve().b[62][0]++, r.totalImports) ||
          /* istanbul ignore next */
          (cov_sogl3ghve().b[62][1]++, 0));
        }, 0),
        totalIssues: Array.from(results.values()).reduce((sum, r) => {
          /* istanbul ignore next */
          cov_sogl3ghve().f[50]++;
          cov_sogl3ghve().s[286]++;
          return sum + (
          /* istanbul ignore next */
          (cov_sogl3ghve().b[63][0]++, r.issues) ||
          /* istanbul ignore next */
          (cov_sogl3ghve().b[63][1]++, 0));
        }, 0)
      },
      byFile: Object.fromEntries(results)
    };
  }
  generateValidationReport(results) {
    /* istanbul ignore next */
    cov_sogl3ghve().f[51]++;
    const validFiles =
    /* istanbul ignore next */
    (cov_sogl3ghve().s[287]++, Array.from(results.values()).filter(r => {
      /* istanbul ignore next */
      cov_sogl3ghve().f[52]++;
      cov_sogl3ghve().s[288]++;
      return r.valid;
    }).length);
    /* istanbul ignore next */
    cov_sogl3ghve().s[289]++;
    return {
      summary: {
        totalFiles: results.size,
        validFiles,
        invalidFiles: results.size - validFiles,
        validationRate: validFiles / results.size
      },
      byFile: Object.fromEntries(results)
    };
  }
  generateRecommendations(results) {
    /* istanbul ignore next */
    cov_sogl3ghve().f[53]++;
    const recommendations =
    /* istanbul ignore next */
    (cov_sogl3ghve().s[290]++, []);
    const totalIssues =
    /* istanbul ignore next */
    (cov_sogl3ghve().s[291]++, Array.from(results.values()).reduce((sum, r) => {
      /* istanbul ignore next */
      cov_sogl3ghve().f[54]++;
      cov_sogl3ghve().s[292]++;
      return sum + (
      /* istanbul ignore next */
      (cov_sogl3ghve().b[64][0]++, r.issues) ||
      /* istanbul ignore next */
      (cov_sogl3ghve().b[64][1]++, 0));
    }, 0));
    /* istanbul ignore next */
    cov_sogl3ghve().s[293]++;
    if (totalIssues > 0) {
      /* istanbul ignore next */
      cov_sogl3ghve().b[65][0]++;
      cov_sogl3ghve().s[294]++;
      recommendations.push('Consider running the import fixer regularly as part of your CI/CD pipeline');
    } else
    /* istanbul ignore next */
    {
      cov_sogl3ghve().b[65][1]++;
    }
    const hasCircularDeps =
    /* istanbul ignore next */
    (cov_sogl3ghve().s[295]++, this.circularDependencies.size > 0);
    /* istanbul ignore next */
    cov_sogl3ghve().s[296]++;
    if (hasCircularDeps) {
      /* istanbul ignore next */
      cov_sogl3ghve().b[66][0]++;
      cov_sogl3ghve().s[297]++;
      recommendations.push('Refactor circular dependencies to improve maintainability');
    } else
    /* istanbul ignore next */
    {
      cov_sogl3ghve().b[66][1]++;
    }
    cov_sogl3ghve().s[298]++;
    return recommendations;
  }
  generateFileRecommendations(issues) {
    /* istanbul ignore next */
    cov_sogl3ghve().f[55]++;
    const recommendations =
    /* istanbul ignore next */
    (cov_sogl3ghve().s[299]++, []);
    const issueTypes =
    /* istanbul ignore next */
    (cov_sogl3ghve().s[300]++, this.categorizeIssues(issues));
    /* istanbul ignore next */
    cov_sogl3ghve().s[301]++;
    if (issueTypes['missing-extension']) {
      /* istanbul ignore next */
      cov_sogl3ghve().b[67][0]++;
      cov_sogl3ghve().s[302]++;
      recommendations.push('Add file extensions to imports for ESM compatibility');
    } else
    /* istanbul ignore next */
    {
      cov_sogl3ghve().b[67][1]++;
    }
    cov_sogl3ghve().s[303]++;
    if (issueTypes['unused-import']) {
      /* istanbul ignore next */
      cov_sogl3ghve().b[68][0]++;
      cov_sogl3ghve().s[304]++;
      recommendations.push('Remove unused imports to reduce bundle size');
    } else
    /* istanbul ignore next */
    {
      cov_sogl3ghve().b[68][1]++;
    }
    cov_sogl3ghve().s[305]++;
    return recommendations;
  }
  calculateAverageConfidence() {
    /* istanbul ignore next */
    cov_sogl3ghve().f[56]++;
    const total =
    /* istanbul ignore next */
    (cov_sogl3ghve().s[306]++, Array.from(this.metrics.fixesApplied.values()).reduce((sum, count) => {
      /* istanbul ignore next */
      cov_sogl3ghve().f[57]++;
      cov_sogl3ghve().s[307]++;
      return sum + count;
    }, 0));
    /* istanbul ignore next */
    cov_sogl3ghve().s[308]++;
    return total > 0 ?
    /* istanbul ignore next */
    (cov_sogl3ghve().b[69][0]++, 0.85) :
    /* istanbul ignore next */
    (cov_sogl3ghve().b[69][1]++, 0); // Simplified calculation
  }
  /**
   * Get current metrics
   */
  getMetrics() {
    /* istanbul ignore next */
    cov_sogl3ghve().f[58]++;
    cov_sogl3ghve().s[309]++;
    return {
      ...this.metrics,
      uptime: Date.now() - (
      /* istanbul ignore next */
      (cov_sogl3ghve().b[70][0]++, this.agentState.metrics.lastActivity?.getTime()) ||
      /* istanbul ignore next */
      (cov_sogl3ghve().b[70][1]++, Date.now())),
      memoryUsage: process.memoryUsage()
    };
  }
  /**
   * Get current status
   */
  getStatus() {
    /* istanbul ignore next */
    cov_sogl3ghve().f[59]++;
    cov_sogl3ghve().s[310]++;
    return {
      agentId: this.agentState.id.id,
      status: this.agentState.status,
      health: this.agentState.health,
      workload: this.agentState.workload,
      capabilities: this.agentState.capabilities,
      metrics: this.getMetrics(),
      level: 3,
      type: 'import-worker',
      coordinatedWith: {
        level2: this.level2Coordinator,
        peers: this.workerPeers
      }
    };
  }
}
/**
 * Factory function to create Import Worker agent
 */
export function createImportWorker(config, logger, agentState) {
  /* istanbul ignore next */
  cov_sogl3ghve().f[60]++;
  cov_sogl3ghve().s[311]++;
  return new ImportWorkerAgent(config, logger, agentState);
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,