{"version":3,"names":["cov_rvlm31msq","actualCoverage","BaseCommand","SwarmStopCommand","constructor","f","s","name","description","usage","category","minArgs","maxArgs","examples","flags","all","type","default","force","timeout","validate","context","errors","warnings","swarmId","args","stopAll","b","push","length","valid","run","saveState","killAgents","stopAllSwarms","stopSwarm","stopMostRecentSwarm","error","success","Error","message","String","exitCode","console","log","swarmExists","checkSwarmExists","forceStopSwarm","saveSwarmState","gracefulStopSwarm","data","forced","stateSaved","runningSwarms","getRunningSwarms","results","swarm","id","successCount","filter","r","failureCount","totalSwarms","mostRecent","some","createdAt","Date","now","agents","Promise","resolve","setTimeout","steps","step","getHelp"],"sources":["/home/mhugo/code/claude-code-flow/src/cli/commands/swarm/stop-command.ts"],"sourcesContent":["/**\n * Swarm Stop Command Implementation\n * \n * Stops running swarms with graceful shutdown\n */\n\nimport { BaseCommand } from '../../core/base-command.js';\nimport type { CommandContext, CommandResult, CommandValidationResult } from '../../types/index.js';\n\nexport class SwarmStopCommand extends BaseCommand {\n  constructor() {\n    super({\n      name: 'stop',\n      description: 'Stop running swarms',\n      usage: 'claude-flow swarm stop [swarm-id] [options]',\n      category: 'swarm',\n      minArgs: 0,\n      maxArgs: 1,\n      examples: [\n        'claude-flow swarm stop',\n        'claude-flow swarm stop swarm_123456',\n        'claude-flow swarm stop --all',\n        'claude-flow swarm stop --force --timeout 5'\n      ],\n      flags: {\n        all: {\n          type: 'boolean',\n          description: 'Stop all running swarms',\n          default: false\n        },\n        force: {\n          type: 'boolean',\n          description: 'Force stop without graceful shutdown',\n          default: false\n        },\n        timeout: {\n          type: 'number',\n          description: 'Graceful shutdown timeout in seconds',\n          default: 30\n        },\n        'save-state': {\n          type: 'boolean',\n          description: 'Save swarm state before stopping',\n          default: true\n        },\n        'kill-agents': {\n          type: 'boolean',\n          description: 'Forcefully terminate all agents',\n          default: false\n        }\n      }\n    });\n  }\n\n  protected async validate(context: CommandContext): Promise<CommandValidationResult | null> {\n    const errors: string[] = [];\n    const warnings: string[] = [];\n\n    const swarmId = context.args[0];\n    const stopAll = context.flags.all as boolean;\n\n    // Either provide swarm ID or use --all flag\n    if (!swarmId && !stopAll) {\n      warnings.push('No swarm ID provided. Will stop the most recent swarm. Use --all to stop all swarms.');\n    }\n\n    if (swarmId && stopAll) {\n      errors.push('Cannot specify both swarm ID and --all flag');\n    }\n\n    // Validate timeout\n    const timeout = context.flags.timeout as number;\n    if (timeout && (timeout < 1 || timeout > 300)) {\n      errors.push('Timeout must be between 1 and 300 seconds');\n    }\n\n    // Warn about force flag\n    if (context.flags.force) {\n      warnings.push('Force flag will terminate swarms immediately without cleanup');\n    }\n\n    return errors.length > 0 || warnings.length > 0 ? { valid: errors.length === 0, errors, warnings } : null;\n  }\n\n  protected async run(context: CommandContext): Promise<CommandResult> {\n    try {\n      const swarmId = context.args[0];\n      const stopAll = context.flags.all as boolean;\n      const force = context.flags.force as boolean;\n      const timeout = context.flags.timeout as number || 30;\n      const saveState = context.flags['save-state'] as boolean !== false;\n      const killAgents = context.flags['kill-agents'] as boolean || false;\n\n      if (stopAll) {\n        return await this.stopAllSwarms(force, timeout, saveState, killAgents);\n      } else if (swarmId) {\n        return await this.stopSwarm(swarmId, force, timeout, saveState, killAgents);\n      } else {\n        return await this.stopMostRecentSwarm(force, timeout, saveState, killAgents);\n      }\n    } catch (error) {\n      return {\n        success: false,\n        error: `Failed to stop swarm: ${error instanceof Error ? error.message : String(error)}`,\n        exitCode: 1\n      };\n    }\n  }\n\n  private async stopSwarm(\n    swarmId: string,\n    force: boolean,\n    timeout: number,\n    saveState: boolean,\n    killAgents: boolean\n  ): Promise<CommandResult> {\n    console.log(`Stopping swarm: ${swarmId}`);\n    \n    // Check if swarm exists\n    const swarmExists = await this.checkSwarmExists(swarmId);\n    if (!swarmExists) {\n      return {\n        success: false,\n        error: `Swarm '${swarmId}' not found or not running`,\n        exitCode: 1\n      };\n    }\n\n    if (force) {\n      console.log('⚡ Force stopping swarm (no graceful shutdown)...');\n      await this.forceStopSwarm(swarmId);\n    } else {\n      console.log('🔄 Initiating graceful shutdown...');\n      \n      if (saveState) {\n        console.log('💾 Saving swarm state...');\n        await this.saveSwarmState(swarmId);\n      }\n\n      await this.gracefulStopSwarm(swarmId, timeout, killAgents);\n    }\n\n    return {\n      success: true,\n      exitCode: 0,\n      message: `Swarm '${swarmId}' stopped successfully`,\n      data: {\n        swarmId,\n        forced: force,\n        stateSaved: saveState\n      }\n    };\n  }\n\n  private async stopAllSwarms(\n    force: boolean,\n    timeout: number,\n    saveState: boolean,\n    killAgents: boolean\n  ): Promise<CommandResult> {\n    console.log('Stopping all running swarms...');\n    \n    const runningSwarms = await this.getRunningSwarms();\n    if (runningSwarms.length === 0) {\n      return {\n        success: true,\n        exitCode: 0,\n        message: 'No running swarms found'\n      };\n    }\n\n    console.log(`Found ${runningSwarms.length} running swarms`);\n    \n    const results = [];\n    for (const swarm of runningSwarms) {\n      try {\n        console.log(`\\nStopping swarm: ${swarm.id}`);\n        \n        if (force) {\n          await this.forceStopSwarm(swarm.id);\n        } else {\n          if (saveState) {\n            await this.saveSwarmState(swarm.id);\n          }\n          await this.gracefulStopSwarm(swarm.id, timeout, killAgents);\n        }\n        \n        results.push({ swarmId: swarm.id, success: true });\n        console.log(`✅ Swarm '${swarm.id}' stopped successfully`);\n      } catch (error) {\n        results.push({ \n          swarmId: swarm.id, \n          success: false, \n          error: error instanceof Error ? error.message : String(error)\n        });\n        console.log(`❌ Failed to stop swarm '${swarm.id}': ${error instanceof Error ? error.message : String(error)}`);\n      }\n    }\n\n    const successCount = results.filter(r => r.success).length;\n    const failureCount = results.length - successCount;\n\n    return {\n      success: failureCount === 0,\n      exitCode: failureCount > 0 ? 1 : 0,\n      message: `Stopped ${successCount} swarms successfully${failureCount > 0 ? `, ${failureCount} failed` : ''}`,\n      data: {\n        results,\n        totalSwarms: results.length,\n        successCount,\n        failureCount\n      }\n    };\n  }\n\n  private async stopMostRecentSwarm(\n    force: boolean,\n    timeout: number,\n    saveState: boolean,\n    killAgents: boolean\n  ): Promise<CommandResult> {\n    const runningSwarms = await this.getRunningSwarms();\n    if (runningSwarms.length === 0) {\n      return {\n        success: false,\n        error: 'No running swarms found',\n        exitCode: 1\n      };\n    }\n\n    // Get most recent swarm (assuming they're sorted by creation time)\n    const mostRecent = runningSwarms[0];\n    return await this.stopSwarm(mostRecent.id, force, timeout, saveState, killAgents);\n  }\n\n  private async checkSwarmExists(swarmId: string): Promise<boolean> {\n    // This would check with the actual swarm registry\n    // For now, simulate the check\n    const runningSwarms = await this.getRunningSwarms();\n    return runningSwarms.some(swarm => swarm.id === swarmId);\n  }\n\n  private async getRunningSwarms(): Promise<Array<{ id: string; createdAt: Date; agents: number }>> {\n    // This would query the actual swarm registry\n    // For now, return mock data\n    return [\n      {\n        id: 'swarm_1704067200_abc123def',\n        createdAt: new Date(Date.now() - 600000), // 10 minutes ago\n        agents: 5\n      },\n      {\n        id: 'swarm_1704063600_xyz789ghi',\n        createdAt: new Date(Date.now() - 1800000), // 30 minutes ago\n        agents: 3\n      }\n    ];\n  }\n\n  private async saveSwarmState(swarmId: string): Promise<void> {\n    // Simulate state saving\n    await new Promise(resolve => setTimeout(resolve, 500));\n    console.log(`  ✅ State saved for swarm '${swarmId}'`);\n  }\n\n  private async gracefulStopSwarm(swarmId: string, timeout: number, killAgents: boolean): Promise<void> {\n    console.log(`  🔄 Stopping agents gracefully (timeout: ${timeout}s)...`);\n    \n    // Simulate graceful shutdown process\n    const steps = [\n      'Stopping new task acceptance',\n      'Completing active tasks',\n      'Saving agent state',\n      'Closing connections',\n      'Cleaning up resources'\n    ];\n\n    for (const step of steps) {\n      console.log(`  📋 ${step}...`);\n      await new Promise(resolve => setTimeout(resolve, 300));\n    }\n\n    if (killAgents) {\n      console.log('  ⚡ Forcefully terminating remaining agents...');\n      await new Promise(resolve => setTimeout(resolve, 200));\n    }\n\n    console.log(`  ✅ Swarm '${swarmId}' stopped gracefully`);\n  }\n\n  private async forceStopSwarm(swarmId: string): Promise<void> {\n    // Simulate force stop\n    await new Promise(resolve => setTimeout(resolve, 100));\n    console.log(`  ⚡ Swarm '${swarmId}' force stopped`);\n  }\n\n  getHelp(): string {\n    return `Stop running swarms\n\nUSAGE:\n  claude-flow swarm stop [swarm-id] [options]\n\nARGUMENTS:\n  [swarm-id]    ID of the swarm to stop (optional)\n\nOPTIONS:\n  --all              Stop all running swarms\n  --force            Force stop without graceful shutdown\n  --timeout <sec>    Graceful shutdown timeout in seconds [default: 30]\n  --save-state       Save swarm state before stopping [default: true]\n  --kill-agents      Forcefully terminate all agents\n  --no-save-state    Don't save state before stopping\n  -h, --help         Show help\n\nEXAMPLES:\n  claude-flow swarm stop\n  claude-flow swarm stop swarm_123456\n  claude-flow swarm stop --all\n  claude-flow swarm stop --force --timeout 5\n  claude-flow swarm stop swarm_123456 --no-save-state\n\nBEHAVIOR:\n  - Without swarm-id: Stops the most recently created swarm\n  - With --all: Stops all running swarms\n  - Default: Graceful shutdown with 30-second timeout\n  - With --force: Immediate termination without cleanup\n  - With --save-state: Preserves agent state and memory (default)\n\nThe stop command performs graceful shutdown by default:\n1. Stops accepting new tasks\n2. Completes active tasks  \n3. Saves agent state and memory\n4. Closes connections\n5. Cleans up resources\n\nUse --force only when immediate termination is required.\n`;\n  }\n}"],"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","ignoreList":[]}