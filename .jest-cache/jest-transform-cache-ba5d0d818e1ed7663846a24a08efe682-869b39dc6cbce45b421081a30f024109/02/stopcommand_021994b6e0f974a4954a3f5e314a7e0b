d7a5cc802dd60bce5b06a6b031e2ada7
/* istanbul ignore next */
function cov_rvlm31msq() {
  var path = "/home/mhugo/code/claude-code-flow/src/cli/commands/swarm/stop-command.ts";
  var hash = "acf73346449d09580e1ae3e3b3a76d7d501a38a1";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/home/mhugo/code/claude-code-flow/src/cli/commands/swarm/stop-command.ts",
    statementMap: {
      "0": {
        start: {
          line: 9,
          column: 8
        },
        end: {
          line: 49,
          column: 11
        }
      },
      "1": {
        start: {
          line: 52,
          column: 23
        },
        end: {
          line: 52,
          column: 25
        }
      },
      "2": {
        start: {
          line: 53,
          column: 25
        },
        end: {
          line: 53,
          column: 27
        }
      },
      "3": {
        start: {
          line: 54,
          column: 24
        },
        end: {
          line: 54,
          column: 39
        }
      },
      "4": {
        start: {
          line: 55,
          column: 24
        },
        end: {
          line: 55,
          column: 41
        }
      },
      "5": {
        start: {
          line: 57,
          column: 8
        },
        end: {
          line: 59,
          column: 9
        }
      },
      "6": {
        start: {
          line: 58,
          column: 12
        },
        end: {
          line: 58,
          column: 114
        }
      },
      "7": {
        start: {
          line: 60,
          column: 8
        },
        end: {
          line: 62,
          column: 9
        }
      },
      "8": {
        start: {
          line: 61,
          column: 12
        },
        end: {
          line: 61,
          column: 71
        }
      },
      "9": {
        start: {
          line: 64,
          column: 24
        },
        end: {
          line: 64,
          column: 45
        }
      },
      "10": {
        start: {
          line: 65,
          column: 8
        },
        end: {
          line: 67,
          column: 9
        }
      },
      "11": {
        start: {
          line: 66,
          column: 12
        },
        end: {
          line: 66,
          column: 69
        }
      },
      "12": {
        start: {
          line: 69,
          column: 8
        },
        end: {
          line: 71,
          column: 9
        }
      },
      "13": {
        start: {
          line: 70,
          column: 12
        },
        end: {
          line: 70,
          column: 90
        }
      },
      "14": {
        start: {
          line: 72,
          column: 8
        },
        end: {
          line: 72,
          column: 114
        }
      },
      "15": {
        start: {
          line: 75,
          column: 8
        },
        end: {
          line: 98,
          column: 9
        }
      },
      "16": {
        start: {
          line: 76,
          column: 28
        },
        end: {
          line: 76,
          column: 43
        }
      },
      "17": {
        start: {
          line: 77,
          column: 28
        },
        end: {
          line: 77,
          column: 45
        }
      },
      "18": {
        start: {
          line: 78,
          column: 26
        },
        end: {
          line: 78,
          column: 45
        }
      },
      "19": {
        start: {
          line: 79,
          column: 28
        },
        end: {
          line: 79,
          column: 55
        }
      },
      "20": {
        start: {
          line: 80,
          column: 30
        },
        end: {
          line: 80,
          column: 67
        }
      },
      "21": {
        start: {
          line: 81,
          column: 31
        },
        end: {
          line: 81,
          column: 68
        }
      },
      "22": {
        start: {
          line: 82,
          column: 12
        },
        end: {
          line: 90,
          column: 13
        }
      },
      "23": {
        start: {
          line: 83,
          column: 16
        },
        end: {
          line: 83,
          column: 87
        }
      },
      "24": {
        start: {
          line: 85,
          column: 17
        },
        end: {
          line: 90,
          column: 13
        }
      },
      "25": {
        start: {
          line: 86,
          column: 16
        },
        end: {
          line: 86,
          column: 92
        }
      },
      "26": {
        start: {
          line: 89,
          column: 16
        },
        end: {
          line: 89,
          column: 93
        }
      },
      "27": {
        start: {
          line: 93,
          column: 12
        },
        end: {
          line: 97,
          column: 14
        }
      },
      "28": {
        start: {
          line: 101,
          column: 8
        },
        end: {
          line: 101,
          column: 50
        }
      },
      "29": {
        start: {
          line: 103,
          column: 28
        },
        end: {
          line: 103,
          column: 64
        }
      },
      "30": {
        start: {
          line: 104,
          column: 8
        },
        end: {
          line: 110,
          column: 9
        }
      },
      "31": {
        start: {
          line: 105,
          column: 12
        },
        end: {
          line: 109,
          column: 14
        }
      },
      "32": {
        start: {
          line: 111,
          column: 8
        },
        end: {
          line: 122,
          column: 9
        }
      },
      "33": {
        start: {
          line: 112,
          column: 12
        },
        end: {
          line: 112,
          column: 76
        }
      },
      "34": {
        start: {
          line: 113,
          column: 12
        },
        end: {
          line: 113,
          column: 47
        }
      },
      "35": {
        start: {
          line: 116,
          column: 12
        },
        end: {
          line: 116,
          column: 62
        }
      },
      "36": {
        start: {
          line: 117,
          column: 12
        },
        end: {
          line: 120,
          column: 13
        }
      },
      "37": {
        start: {
          line: 118,
          column: 16
        },
        end: {
          line: 118,
          column: 56
        }
      },
      "38": {
        start: {
          line: 119,
          column: 16
        },
        end: {
          line: 119,
          column: 51
        }
      },
      "39": {
        start: {
          line: 121,
          column: 12
        },
        end: {
          line: 121,
          column: 71
        }
      },
      "40": {
        start: {
          line: 123,
          column: 8
        },
        end: {
          line: 132,
          column: 10
        }
      },
      "41": {
        start: {
          line: 135,
          column: 8
        },
        end: {
          line: 135,
          column: 54
        }
      },
      "42": {
        start: {
          line: 136,
          column: 30
        },
        end: {
          line: 136,
          column: 59
        }
      },
      "43": {
        start: {
          line: 137,
          column: 8
        },
        end: {
          line: 143,
          column: 9
        }
      },
      "44": {
        start: {
          line: 138,
          column: 12
        },
        end: {
          line: 142,
          column: 14
        }
      },
      "45": {
        start: {
          line: 144,
          column: 8
        },
        end: {
          line: 144,
          column: 68
        }
      },
      "46": {
        start: {
          line: 145,
          column: 24
        },
        end: {
          line: 145,
          column: 26
        }
      },
      "47": {
        start: {
          line: 146,
          column: 8
        },
        end: {
          line: 169,
          column: 9
        }
      },
      "48": {
        start: {
          line: 147,
          column: 12
        },
        end: {
          line: 168,
          column: 13
        }
      },
      "49": {
        start: {
          line: 148,
          column: 16
        },
        end: {
          line: 148,
          column: 61
        }
      },
      "50": {
        start: {
          line: 149,
          column: 16
        },
        end: {
          line: 157,
          column: 17
        }
      },
      "51": {
        start: {
          line: 150,
          column: 20
        },
        end: {
          line: 150,
          column: 56
        }
      },
      "52": {
        start: {
          line: 153,
          column: 20
        },
        end: {
          line: 155,
          column: 21
        }
      },
      "53": {
        start: {
          line: 154,
          column: 24
        },
        end: {
          line: 154,
          column: 60
        }
      },
      "54": {
        start: {
          line: 156,
          column: 20
        },
        end: {
          line: 156,
          column: 80
        }
      },
      "55": {
        start: {
          line: 158,
          column: 16
        },
        end: {
          line: 158,
          column: 67
        }
      },
      "56": {
        start: {
          line: 159,
          column: 16
        },
        end: {
          line: 159,
          column: 74
        }
      },
      "57": {
        start: {
          line: 162,
          column: 16
        },
        end: {
          line: 166,
          column: 19
        }
      },
      "58": {
        start: {
          line: 167,
          column: 16
        },
        end: {
          line: 167,
          column: 127
        }
      },
      "59": {
        start: {
          line: 170,
          column: 29
        },
        end: {
          line: 170,
          column: 66
        }
      },
      "60": {
        start: {
          line: 170,
          column: 49
        },
        end: {
          line: 170,
          column: 58
        }
      },
      "61": {
        start: {
          line: 171,
          column: 29
        },
        end: {
          line: 171,
          column: 58
        }
      },
      "62": {
        start: {
          line: 172,
          column: 8
        },
        end: {
          line: 182,
          column: 10
        }
      },
      "63": {
        start: {
          line: 185,
          column: 30
        },
        end: {
          line: 185,
          column: 59
        }
      },
      "64": {
        start: {
          line: 186,
          column: 8
        },
        end: {
          line: 192,
          column: 9
        }
      },
      "65": {
        start: {
          line: 187,
          column: 12
        },
        end: {
          line: 191,
          column: 14
        }
      },
      "66": {
        start: {
          line: 194,
          column: 27
        },
        end: {
          line: 194,
          column: 43
        }
      },
      "67": {
        start: {
          line: 195,
          column: 8
        },
        end: {
          line: 195,
          column: 90
        }
      },
      "68": {
        start: {
          line: 200,
          column: 30
        },
        end: {
          line: 200,
          column: 59
        }
      },
      "69": {
        start: {
          line: 201,
          column: 8
        },
        end: {
          line: 201,
          column: 65
        }
      },
      "70": {
        start: {
          line: 201,
          column: 43
        },
        end: {
          line: 201,
          column: 63
        }
      },
      "71": {
        start: {
          line: 206,
          column: 8
        },
        end: {
          line: 217,
          column: 10
        }
      },
      "72": {
        start: {
          line: 221,
          column: 8
        },
        end: {
          line: 221,
          column: 63
        }
      },
      "73": {
        start: {
          line: 221,
          column: 37
        },
        end: {
          line: 221,
          column: 61
        }
      },
      "74": {
        start: {
          line: 222,
          column: 8
        },
        end: {
          line: 222,
          column: 62
        }
      },
      "75": {
        start: {
          line: 225,
          column: 8
        },
        end: {
          line: 225,
          column: 81
        }
      },
      "76": {
        start: {
          line: 227,
          column: 22
        },
        end: {
          line: 233,
          column: 9
        }
      },
      "77": {
        start: {
          line: 234,
          column: 8
        },
        end: {
          line: 237,
          column: 9
        }
      },
      "78": {
        start: {
          line: 235,
          column: 12
        },
        end: {
          line: 235,
          column: 43
        }
      },
      "79": {
        start: {
          line: 236,
          column: 12
        },
        end: {
          line: 236,
          column: 67
        }
      },
      "80": {
        start: {
          line: 236,
          column: 41
        },
        end: {
          line: 236,
          column: 65
        }
      },
      "81": {
        start: {
          line: 238,
          column: 8
        },
        end: {
          line: 241,
          column: 9
        }
      },
      "82": {
        start: {
          line: 239,
          column: 12
        },
        end: {
          line: 239,
          column: 74
        }
      },
      "83": {
        start: {
          line: 240,
          column: 12
        },
        end: {
          line: 240,
          column: 67
        }
      },
      "84": {
        start: {
          line: 240,
          column: 41
        },
        end: {
          line: 240,
          column: 65
        }
      },
      "85": {
        start: {
          line: 242,
          column: 8
        },
        end: {
          line: 242,
          column: 65
        }
      },
      "86": {
        start: {
          line: 246,
          column: 8
        },
        end: {
          line: 246,
          column: 63
        }
      },
      "87": {
        start: {
          line: 246,
          column: 37
        },
        end: {
          line: 246,
          column: 61
        }
      },
      "88": {
        start: {
          line: 247,
          column: 8
        },
        end: {
          line: 247,
          column: 60
        }
      },
      "89": {
        start: {
          line: 250,
          column: 8
        },
        end: {
          line: 289,
          column: 2
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 8,
            column: 4
          },
          end: {
            line: 8,
            column: 5
          }
        },
        loc: {
          start: {
            line: 8,
            column: 18
          },
          end: {
            line: 50,
            column: 5
          }
        },
        line: 8
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 51,
            column: 4
          },
          end: {
            line: 51,
            column: 5
          }
        },
        loc: {
          start: {
            line: 51,
            column: 28
          },
          end: {
            line: 73,
            column: 5
          }
        },
        line: 51
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 74,
            column: 4
          },
          end: {
            line: 74,
            column: 5
          }
        },
        loc: {
          start: {
            line: 74,
            column: 23
          },
          end: {
            line: 99,
            column: 5
          }
        },
        line: 74
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 100,
            column: 4
          },
          end: {
            line: 100,
            column: 5
          }
        },
        loc: {
          start: {
            line: 100,
            column: 68
          },
          end: {
            line: 133,
            column: 5
          }
        },
        line: 100
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 134,
            column: 4
          },
          end: {
            line: 134,
            column: 5
          }
        },
        loc: {
          start: {
            line: 134,
            column: 63
          },
          end: {
            line: 183,
            column: 5
          }
        },
        line: 134
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 170,
            column: 44
          },
          end: {
            line: 170,
            column: 45
          }
        },
        loc: {
          start: {
            line: 170,
            column: 49
          },
          end: {
            line: 170,
            column: 58
          }
        },
        line: 170
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 184,
            column: 4
          },
          end: {
            line: 184,
            column: 5
          }
        },
        loc: {
          start: {
            line: 184,
            column: 69
          },
          end: {
            line: 196,
            column: 5
          }
        },
        line: 184
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 197,
            column: 4
          },
          end: {
            line: 197,
            column: 5
          }
        },
        loc: {
          start: {
            line: 197,
            column: 36
          },
          end: {
            line: 202,
            column: 5
          }
        },
        line: 197
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 201,
            column: 34
          },
          end: {
            line: 201,
            column: 35
          }
        },
        loc: {
          start: {
            line: 201,
            column: 43
          },
          end: {
            line: 201,
            column: 63
          }
        },
        line: 201
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 203,
            column: 4
          },
          end: {
            line: 203,
            column: 5
          }
        },
        loc: {
          start: {
            line: 203,
            column: 29
          },
          end: {
            line: 218,
            column: 5
          }
        },
        line: 203
      },
      "10": {
        name: "(anonymous_10)",
        decl: {
          start: {
            line: 219,
            column: 4
          },
          end: {
            line: 219,
            column: 5
          }
        },
        loc: {
          start: {
            line: 219,
            column: 34
          },
          end: {
            line: 223,
            column: 5
          }
        },
        line: 219
      },
      "11": {
        name: "(anonymous_11)",
        decl: {
          start: {
            line: 221,
            column: 26
          },
          end: {
            line: 221,
            column: 27
          }
        },
        loc: {
          start: {
            line: 221,
            column: 37
          },
          end: {
            line: 221,
            column: 61
          }
        },
        line: 221
      },
      "12": {
        name: "(anonymous_12)",
        decl: {
          start: {
            line: 224,
            column: 4
          },
          end: {
            line: 224,
            column: 5
          }
        },
        loc: {
          start: {
            line: 224,
            column: 58
          },
          end: {
            line: 243,
            column: 5
          }
        },
        line: 224
      },
      "13": {
        name: "(anonymous_13)",
        decl: {
          start: {
            line: 236,
            column: 30
          },
          end: {
            line: 236,
            column: 31
          }
        },
        loc: {
          start: {
            line: 236,
            column: 41
          },
          end: {
            line: 236,
            column: 65
          }
        },
        line: 236
      },
      "14": {
        name: "(anonymous_14)",
        decl: {
          start: {
            line: 240,
            column: 30
          },
          end: {
            line: 240,
            column: 31
          }
        },
        loc: {
          start: {
            line: 240,
            column: 41
          },
          end: {
            line: 240,
            column: 65
          }
        },
        line: 240
      },
      "15": {
        name: "(anonymous_15)",
        decl: {
          start: {
            line: 244,
            column: 4
          },
          end: {
            line: 244,
            column: 5
          }
        },
        loc: {
          start: {
            line: 244,
            column: 34
          },
          end: {
            line: 248,
            column: 5
          }
        },
        line: 244
      },
      "16": {
        name: "(anonymous_16)",
        decl: {
          start: {
            line: 246,
            column: 26
          },
          end: {
            line: 246,
            column: 27
          }
        },
        loc: {
          start: {
            line: 246,
            column: 37
          },
          end: {
            line: 246,
            column: 61
          }
        },
        line: 246
      },
      "17": {
        name: "(anonymous_17)",
        decl: {
          start: {
            line: 249,
            column: 4
          },
          end: {
            line: 249,
            column: 5
          }
        },
        loc: {
          start: {
            line: 249,
            column: 14
          },
          end: {
            line: 290,
            column: 5
          }
        },
        line: 249
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 57,
            column: 8
          },
          end: {
            line: 59,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 57,
            column: 8
          },
          end: {
            line: 59,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 57
      },
      "1": {
        loc: {
          start: {
            line: 57,
            column: 12
          },
          end: {
            line: 57,
            column: 32
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 57,
            column: 12
          },
          end: {
            line: 57,
            column: 20
          }
        }, {
          start: {
            line: 57,
            column: 24
          },
          end: {
            line: 57,
            column: 32
          }
        }],
        line: 57
      },
      "2": {
        loc: {
          start: {
            line: 60,
            column: 8
          },
          end: {
            line: 62,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 60,
            column: 8
          },
          end: {
            line: 62,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 60
      },
      "3": {
        loc: {
          start: {
            line: 60,
            column: 12
          },
          end: {
            line: 60,
            column: 30
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 60,
            column: 12
          },
          end: {
            line: 60,
            column: 19
          }
        }, {
          start: {
            line: 60,
            column: 23
          },
          end: {
            line: 60,
            column: 30
          }
        }],
        line: 60
      },
      "4": {
        loc: {
          start: {
            line: 65,
            column: 8
          },
          end: {
            line: 67,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 65,
            column: 8
          },
          end: {
            line: 67,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 65
      },
      "5": {
        loc: {
          start: {
            line: 65,
            column: 12
          },
          end: {
            line: 65,
            column: 53
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 65,
            column: 12
          },
          end: {
            line: 65,
            column: 19
          }
        }, {
          start: {
            line: 65,
            column: 24
          },
          end: {
            line: 65,
            column: 35
          }
        }, {
          start: {
            line: 65,
            column: 39
          },
          end: {
            line: 65,
            column: 52
          }
        }],
        line: 65
      },
      "6": {
        loc: {
          start: {
            line: 69,
            column: 8
          },
          end: {
            line: 71,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 69,
            column: 8
          },
          end: {
            line: 71,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 69
      },
      "7": {
        loc: {
          start: {
            line: 72,
            column: 15
          },
          end: {
            line: 72,
            column: 113
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 72,
            column: 58
          },
          end: {
            line: 72,
            column: 106
          }
        }, {
          start: {
            line: 72,
            column: 109
          },
          end: {
            line: 72,
            column: 113
          }
        }],
        line: 72
      },
      "8": {
        loc: {
          start: {
            line: 72,
            column: 15
          },
          end: {
            line: 72,
            column: 55
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 72,
            column: 15
          },
          end: {
            line: 72,
            column: 32
          }
        }, {
          start: {
            line: 72,
            column: 36
          },
          end: {
            line: 72,
            column: 55
          }
        }],
        line: 72
      },
      "9": {
        loc: {
          start: {
            line: 79,
            column: 28
          },
          end: {
            line: 79,
            column: 55
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 79,
            column: 28
          },
          end: {
            line: 79,
            column: 49
          }
        }, {
          start: {
            line: 79,
            column: 53
          },
          end: {
            line: 79,
            column: 55
          }
        }],
        line: 79
      },
      "10": {
        loc: {
          start: {
            line: 81,
            column: 31
          },
          end: {
            line: 81,
            column: 68
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 81,
            column: 31
          },
          end: {
            line: 81,
            column: 59
          }
        }, {
          start: {
            line: 81,
            column: 63
          },
          end: {
            line: 81,
            column: 68
          }
        }],
        line: 81
      },
      "11": {
        loc: {
          start: {
            line: 82,
            column: 12
          },
          end: {
            line: 90,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 82,
            column: 12
          },
          end: {
            line: 90,
            column: 13
          }
        }, {
          start: {
            line: 85,
            column: 17
          },
          end: {
            line: 90,
            column: 13
          }
        }],
        line: 82
      },
      "12": {
        loc: {
          start: {
            line: 85,
            column: 17
          },
          end: {
            line: 90,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 85,
            column: 17
          },
          end: {
            line: 90,
            column: 13
          }
        }, {
          start: {
            line: 88,
            column: 17
          },
          end: {
            line: 90,
            column: 13
          }
        }],
        line: 85
      },
      "13": {
        loc: {
          start: {
            line: 95,
            column: 48
          },
          end: {
            line: 95,
            column: 102
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 95,
            column: 73
          },
          end: {
            line: 95,
            column: 86
          }
        }, {
          start: {
            line: 95,
            column: 89
          },
          end: {
            line: 95,
            column: 102
          }
        }],
        line: 95
      },
      "14": {
        loc: {
          start: {
            line: 104,
            column: 8
          },
          end: {
            line: 110,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 104,
            column: 8
          },
          end: {
            line: 110,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 104
      },
      "15": {
        loc: {
          start: {
            line: 111,
            column: 8
          },
          end: {
            line: 122,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 111,
            column: 8
          },
          end: {
            line: 122,
            column: 9
          }
        }, {
          start: {
            line: 115,
            column: 13
          },
          end: {
            line: 122,
            column: 9
          }
        }],
        line: 111
      },
      "16": {
        loc: {
          start: {
            line: 117,
            column: 12
          },
          end: {
            line: 120,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 117,
            column: 12
          },
          end: {
            line: 120,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 117
      },
      "17": {
        loc: {
          start: {
            line: 137,
            column: 8
          },
          end: {
            line: 143,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 137,
            column: 8
          },
          end: {
            line: 143,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 137
      },
      "18": {
        loc: {
          start: {
            line: 149,
            column: 16
          },
          end: {
            line: 157,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 149,
            column: 16
          },
          end: {
            line: 157,
            column: 17
          }
        }, {
          start: {
            line: 152,
            column: 21
          },
          end: {
            line: 157,
            column: 17
          }
        }],
        line: 149
      },
      "19": {
        loc: {
          start: {
            line: 153,
            column: 20
          },
          end: {
            line: 155,
            column: 21
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 153,
            column: 20
          },
          end: {
            line: 155,
            column: 21
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 153
      },
      "20": {
        loc: {
          start: {
            line: 165,
            column: 27
          },
          end: {
            line: 165,
            column: 81
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 165,
            column: 52
          },
          end: {
            line: 165,
            column: 65
          }
        }, {
          start: {
            line: 165,
            column: 68
          },
          end: {
            line: 165,
            column: 81
          }
        }],
        line: 165
      },
      "21": {
        loc: {
          start: {
            line: 167,
            column: 69
          },
          end: {
            line: 167,
            column: 123
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 167,
            column: 94
          },
          end: {
            line: 167,
            column: 107
          }
        }, {
          start: {
            line: 167,
            column: 110
          },
          end: {
            line: 167,
            column: 123
          }
        }],
        line: 167
      },
      "22": {
        loc: {
          start: {
            line: 174,
            column: 22
          },
          end: {
            line: 174,
            column: 46
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 174,
            column: 41
          },
          end: {
            line: 174,
            column: 42
          }
        }, {
          start: {
            line: 174,
            column: 45
          },
          end: {
            line: 174,
            column: 46
          }
        }],
        line: 174
      },
      "23": {
        loc: {
          start: {
            line: 175,
            column: 67
          },
          end: {
            line: 175,
            column: 117
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 175,
            column: 86
          },
          end: {
            line: 175,
            column: 112
          }
        }, {
          start: {
            line: 175,
            column: 115
          },
          end: {
            line: 175,
            column: 117
          }
        }],
        line: 175
      },
      "24": {
        loc: {
          start: {
            line: 186,
            column: 8
          },
          end: {
            line: 192,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 186,
            column: 8
          },
          end: {
            line: 192,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 186
      },
      "25": {
        loc: {
          start: {
            line: 238,
            column: 8
          },
          end: {
            line: 241,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 238,
            column: 8
          },
          end: {
            line: 241,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 238
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0,
      "74": 0,
      "75": 0,
      "76": 0,
      "77": 0,
      "78": 0,
      "79": 0,
      "80": 0,
      "81": 0,
      "82": 0,
      "83": 0,
      "84": 0,
      "85": 0,
      "86": 0,
      "87": 0,
      "88": 0,
      "89": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0, 0],
      "10": [0, 0],
      "11": [0, 0],
      "12": [0, 0],
      "13": [0, 0],
      "14": [0, 0],
      "15": [0, 0],
      "16": [0, 0],
      "17": [0, 0],
      "18": [0, 0],
      "19": [0, 0],
      "20": [0, 0],
      "21": [0, 0],
      "22": [0, 0],
      "23": [0, 0],
      "24": [0, 0],
      "25": [0, 0]
    },
    inputSourceMap: {
      file: "/home/mhugo/code/claude-code-flow/src/cli/commands/swarm/stop-command.ts",
      mappings: "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",
      names: [],
      sources: ["/home/mhugo/code/claude-code-flow/src/cli/commands/swarm/stop-command.ts"],
      sourcesContent: ["/**\n * Swarm Stop Command Implementation\n * \n * Stops running swarms with graceful shutdown\n */\n\nimport { BaseCommand } from '../../core/base-command.js';\nimport type { CommandContext, CommandResult, CommandValidationResult } from '../../types/index.js';\n\nexport class SwarmStopCommand extends BaseCommand {\n  constructor() {\n    super({\n      name: 'stop',\n      description: 'Stop running swarms',\n      usage: 'claude-flow swarm stop [swarm-id] [options]',\n      category: 'swarm',\n      minArgs: 0,\n      maxArgs: 1,\n      examples: [\n        'claude-flow swarm stop',\n        'claude-flow swarm stop swarm_123456',\n        'claude-flow swarm stop --all',\n        'claude-flow swarm stop --force --timeout 5'\n      ],\n      flags: {\n        all: {\n          type: 'boolean',\n          description: 'Stop all running swarms',\n          default: false\n        },\n        force: {\n          type: 'boolean',\n          description: 'Force stop without graceful shutdown',\n          default: false\n        },\n        timeout: {\n          type: 'number',\n          description: 'Graceful shutdown timeout in seconds',\n          default: 30\n        },\n        'save-state': {\n          type: 'boolean',\n          description: 'Save swarm state before stopping',\n          default: true\n        },\n        'kill-agents': {\n          type: 'boolean',\n          description: 'Forcefully terminate all agents',\n          default: false\n        }\n      }\n    });\n  }\n\n  protected async validate(context: CommandContext): Promise<CommandValidationResult | null> {\n    const errors: string[] = [];\n    const warnings: string[] = [];\n\n    const swarmId = context.args[0];\n    const stopAll = context.flags.all as boolean;\n\n    // Either provide swarm ID or use --all flag\n    if (!swarmId && !stopAll) {\n      warnings.push('No swarm ID provided. Will stop the most recent swarm. Use --all to stop all swarms.');\n    }\n\n    if (swarmId && stopAll) {\n      errors.push('Cannot specify both swarm ID and --all flag');\n    }\n\n    // Validate timeout\n    const timeout = context.flags.timeout as number;\n    if (timeout && (timeout < 1 || timeout > 300)) {\n      errors.push('Timeout must be between 1 and 300 seconds');\n    }\n\n    // Warn about force flag\n    if (context.flags.force) {\n      warnings.push('Force flag will terminate swarms immediately without cleanup');\n    }\n\n    return errors.length > 0 || warnings.length > 0 ? { valid: errors.length === 0, errors, warnings } : null;\n  }\n\n  protected async run(context: CommandContext): Promise<CommandResult> {\n    try {\n      const swarmId = context.args[0];\n      const stopAll = context.flags.all as boolean;\n      const force = context.flags.force as boolean;\n      const timeout = context.flags.timeout as number || 30;\n      const saveState = context.flags['save-state'] as boolean !== false;\n      const killAgents = context.flags['kill-agents'] as boolean || false;\n\n      if (stopAll) {\n        return await this.stopAllSwarms(force, timeout, saveState, killAgents);\n      } else if (swarmId) {\n        return await this.stopSwarm(swarmId, force, timeout, saveState, killAgents);\n      } else {\n        return await this.stopMostRecentSwarm(force, timeout, saveState, killAgents);\n      }\n    } catch (error) {\n      return {\n        success: false,\n        error: `Failed to stop swarm: ${error instanceof Error ? error.message : String(error)}`,\n        exitCode: 1\n      };\n    }\n  }\n\n  private async stopSwarm(\n    swarmId: string,\n    force: boolean,\n    timeout: number,\n    saveState: boolean,\n    killAgents: boolean\n  ): Promise<CommandResult> {\n    console.log(`Stopping swarm: ${swarmId}`);\n    \n    // Check if swarm exists\n    const swarmExists = await this.checkSwarmExists(swarmId);\n    if (!swarmExists) {\n      return {\n        success: false,\n        error: `Swarm '${swarmId}' not found or not running`,\n        exitCode: 1\n      };\n    }\n\n    if (force) {\n      console.log('\u26A1 Force stopping swarm (no graceful shutdown)...');\n      await this.forceStopSwarm(swarmId);\n    } else {\n      console.log('\uD83D\uDD04 Initiating graceful shutdown...');\n      \n      if (saveState) {\n        console.log('\uD83D\uDCBE Saving swarm state...');\n        await this.saveSwarmState(swarmId);\n      }\n\n      await this.gracefulStopSwarm(swarmId, timeout, killAgents);\n    }\n\n    return {\n      success: true,\n      exitCode: 0,\n      message: `Swarm '${swarmId}' stopped successfully`,\n      data: {\n        swarmId,\n        forced: force,\n        stateSaved: saveState\n      }\n    };\n  }\n\n  private async stopAllSwarms(\n    force: boolean,\n    timeout: number,\n    saveState: boolean,\n    killAgents: boolean\n  ): Promise<CommandResult> {\n    console.log('Stopping all running swarms...');\n    \n    const runningSwarms = await this.getRunningSwarms();\n    if (runningSwarms.length === 0) {\n      return {\n        success: true,\n        exitCode: 0,\n        message: 'No running swarms found'\n      };\n    }\n\n    console.log(`Found ${runningSwarms.length} running swarms`);\n    \n    const results = [];\n    for (const swarm of runningSwarms) {\n      try {\n        console.log(`\\nStopping swarm: ${swarm.id}`);\n        \n        if (force) {\n          await this.forceStopSwarm(swarm.id);\n        } else {\n          if (saveState) {\n            await this.saveSwarmState(swarm.id);\n          }\n          await this.gracefulStopSwarm(swarm.id, timeout, killAgents);\n        }\n        \n        results.push({ swarmId: swarm.id, success: true });\n        console.log(`\u2705 Swarm '${swarm.id}' stopped successfully`);\n      } catch (error) {\n        results.push({ \n          swarmId: swarm.id, \n          success: false, \n          error: error instanceof Error ? error.message : String(error)\n        });\n        console.log(`\u274C Failed to stop swarm '${swarm.id}': ${error instanceof Error ? error.message : String(error)}`);\n      }\n    }\n\n    const successCount = results.filter(r => r.success).length;\n    const failureCount = results.length - successCount;\n\n    return {\n      success: failureCount === 0,\n      exitCode: failureCount > 0 ? 1 : 0,\n      message: `Stopped ${successCount} swarms successfully${failureCount > 0 ? `, ${failureCount} failed` : ''}`,\n      data: {\n        results,\n        totalSwarms: results.length,\n        successCount,\n        failureCount\n      }\n    };\n  }\n\n  private async stopMostRecentSwarm(\n    force: boolean,\n    timeout: number,\n    saveState: boolean,\n    killAgents: boolean\n  ): Promise<CommandResult> {\n    const runningSwarms = await this.getRunningSwarms();\n    if (runningSwarms.length === 0) {\n      return {\n        success: false,\n        error: 'No running swarms found',\n        exitCode: 1\n      };\n    }\n\n    // Get most recent swarm (assuming they're sorted by creation time)\n    const mostRecent = runningSwarms[0];\n    return await this.stopSwarm(mostRecent.id, force, timeout, saveState, killAgents);\n  }\n\n  private async checkSwarmExists(swarmId: string): Promise<boolean> {\n    // This would check with the actual swarm registry\n    // For now, simulate the check\n    const runningSwarms = await this.getRunningSwarms();\n    return runningSwarms.some(swarm => swarm.id === swarmId);\n  }\n\n  private async getRunningSwarms(): Promise<Array<{ id: string; createdAt: Date; agents: number }>> {\n    // This would query the actual swarm registry\n    // For now, return mock data\n    return [\n      {\n        id: 'swarm_1704067200_abc123def',\n        createdAt: new Date(Date.now() - 600000), // 10 minutes ago\n        agents: 5\n      },\n      {\n        id: 'swarm_1704063600_xyz789ghi',\n        createdAt: new Date(Date.now() - 1800000), // 30 minutes ago\n        agents: 3\n      }\n    ];\n  }\n\n  private async saveSwarmState(swarmId: string): Promise<void> {\n    // Simulate state saving\n    await new Promise(resolve => setTimeout(resolve, 500));\n    console.log(`  \u2705 State saved for swarm '${swarmId}'`);\n  }\n\n  private async gracefulStopSwarm(swarmId: string, timeout: number, killAgents: boolean): Promise<void> {\n    console.log(`  \uD83D\uDD04 Stopping agents gracefully (timeout: ${timeout}s)...`);\n    \n    // Simulate graceful shutdown process\n    const steps = [\n      'Stopping new task acceptance',\n      'Completing active tasks',\n      'Saving agent state',\n      'Closing connections',\n      'Cleaning up resources'\n    ];\n\n    for (const step of steps) {\n      console.log(`  \uD83D\uDCCB ${step}...`);\n      await new Promise(resolve => setTimeout(resolve, 300));\n    }\n\n    if (killAgents) {\n      console.log('  \u26A1 Forcefully terminating remaining agents...');\n      await new Promise(resolve => setTimeout(resolve, 200));\n    }\n\n    console.log(`  \u2705 Swarm '${swarmId}' stopped gracefully`);\n  }\n\n  private async forceStopSwarm(swarmId: string): Promise<void> {\n    // Simulate force stop\n    await new Promise(resolve => setTimeout(resolve, 100));\n    console.log(`  \u26A1 Swarm '${swarmId}' force stopped`);\n  }\n\n  getHelp(): string {\n    return `Stop running swarms\n\nUSAGE:\n  claude-flow swarm stop [swarm-id] [options]\n\nARGUMENTS:\n  [swarm-id]    ID of the swarm to stop (optional)\n\nOPTIONS:\n  --all              Stop all running swarms\n  --force            Force stop without graceful shutdown\n  --timeout <sec>    Graceful shutdown timeout in seconds [default: 30]\n  --save-state       Save swarm state before stopping [default: true]\n  --kill-agents      Forcefully terminate all agents\n  --no-save-state    Don't save state before stopping\n  -h, --help         Show help\n\nEXAMPLES:\n  claude-flow swarm stop\n  claude-flow swarm stop swarm_123456\n  claude-flow swarm stop --all\n  claude-flow swarm stop --force --timeout 5\n  claude-flow swarm stop swarm_123456 --no-save-state\n\nBEHAVIOR:\n  - Without swarm-id: Stops the most recently created swarm\n  - With --all: Stops all running swarms\n  - Default: Graceful shutdown with 30-second timeout\n  - With --force: Immediate termination without cleanup\n  - With --save-state: Preserves agent state and memory (default)\n\nThe stop command performs graceful shutdown by default:\n1. Stops accepting new tasks\n2. Completes active tasks  \n3. Saves agent state and memory\n4. Closes connections\n5. Cleans up resources\n\nUse --force only when immediate termination is required.\n`;\n  }\n}"],
      version: 3
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "acf73346449d09580e1ae3e3b3a76d7d501a38a1"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_rvlm31msq = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_rvlm31msq();
/**
 * Swarm Stop Command Implementation
 *
 * Stops running swarms with graceful shutdown
 */
import { BaseCommand } from '../../core/base-command.js';
export class SwarmStopCommand extends BaseCommand {
  constructor() {
    /* istanbul ignore next */
    cov_rvlm31msq().f[0]++;
    cov_rvlm31msq().s[0]++;
    super({
      name: 'stop',
      description: 'Stop running swarms',
      usage: 'claude-flow swarm stop [swarm-id] [options]',
      category: 'swarm',
      minArgs: 0,
      maxArgs: 1,
      examples: ['claude-flow swarm stop', 'claude-flow swarm stop swarm_123456', 'claude-flow swarm stop --all', 'claude-flow swarm stop --force --timeout 5'],
      flags: {
        all: {
          type: 'boolean',
          description: 'Stop all running swarms',
          default: false
        },
        force: {
          type: 'boolean',
          description: 'Force stop without graceful shutdown',
          default: false
        },
        timeout: {
          type: 'number',
          description: 'Graceful shutdown timeout in seconds',
          default: 30
        },
        'save-state': {
          type: 'boolean',
          description: 'Save swarm state before stopping',
          default: true
        },
        'kill-agents': {
          type: 'boolean',
          description: 'Forcefully terminate all agents',
          default: false
        }
      }
    });
  }
  async validate(context) {
    /* istanbul ignore next */
    cov_rvlm31msq().f[1]++;
    const errors =
    /* istanbul ignore next */
    (cov_rvlm31msq().s[1]++, []);
    const warnings =
    /* istanbul ignore next */
    (cov_rvlm31msq().s[2]++, []);
    const swarmId =
    /* istanbul ignore next */
    (cov_rvlm31msq().s[3]++, context.args[0]);
    const stopAll =
    /* istanbul ignore next */
    (cov_rvlm31msq().s[4]++, context.flags.all);
    // Either provide swarm ID or use --all flag
    /* istanbul ignore next */
    cov_rvlm31msq().s[5]++;
    if (
    /* istanbul ignore next */
    (cov_rvlm31msq().b[1][0]++, !swarmId) &&
    /* istanbul ignore next */
    (cov_rvlm31msq().b[1][1]++, !stopAll)) {
      /* istanbul ignore next */
      cov_rvlm31msq().b[0][0]++;
      cov_rvlm31msq().s[6]++;
      warnings.push('No swarm ID provided. Will stop the most recent swarm. Use --all to stop all swarms.');
    } else
    /* istanbul ignore next */
    {
      cov_rvlm31msq().b[0][1]++;
    }
    cov_rvlm31msq().s[7]++;
    if (
    /* istanbul ignore next */
    (cov_rvlm31msq().b[3][0]++, swarmId) &&
    /* istanbul ignore next */
    (cov_rvlm31msq().b[3][1]++, stopAll)) {
      /* istanbul ignore next */
      cov_rvlm31msq().b[2][0]++;
      cov_rvlm31msq().s[8]++;
      errors.push('Cannot specify both swarm ID and --all flag');
    } else
    /* istanbul ignore next */
    {
      cov_rvlm31msq().b[2][1]++;
    }
    // Validate timeout
    const timeout =
    /* istanbul ignore next */
    (cov_rvlm31msq().s[9]++, context.flags.timeout);
    /* istanbul ignore next */
    cov_rvlm31msq().s[10]++;
    if (
    /* istanbul ignore next */
    (cov_rvlm31msq().b[5][0]++, timeout) && (
    /* istanbul ignore next */
    (cov_rvlm31msq().b[5][1]++, timeout < 1) ||
    /* istanbul ignore next */
    (cov_rvlm31msq().b[5][2]++, timeout > 300))) {
      /* istanbul ignore next */
      cov_rvlm31msq().b[4][0]++;
      cov_rvlm31msq().s[11]++;
      errors.push('Timeout must be between 1 and 300 seconds');
    } else
    /* istanbul ignore next */
    {
      cov_rvlm31msq().b[4][1]++;
    }
    // Warn about force flag
    cov_rvlm31msq().s[12]++;
    if (context.flags.force) {
      /* istanbul ignore next */
      cov_rvlm31msq().b[6][0]++;
      cov_rvlm31msq().s[13]++;
      warnings.push('Force flag will terminate swarms immediately without cleanup');
    } else
    /* istanbul ignore next */
    {
      cov_rvlm31msq().b[6][1]++;
    }
    cov_rvlm31msq().s[14]++;
    return /* istanbul ignore next */(cov_rvlm31msq().b[8][0]++, errors.length > 0) ||
    /* istanbul ignore next */
    (cov_rvlm31msq().b[8][1]++, warnings.length > 0) ?
    /* istanbul ignore next */
    (cov_rvlm31msq().b[7][0]++, {
      valid: errors.length === 0,
      errors,
      warnings
    }) :
    /* istanbul ignore next */
    (cov_rvlm31msq().b[7][1]++, null);
  }
  async run(context) {
    /* istanbul ignore next */
    cov_rvlm31msq().f[2]++;
    cov_rvlm31msq().s[15]++;
    try {
      const swarmId =
      /* istanbul ignore next */
      (cov_rvlm31msq().s[16]++, context.args[0]);
      const stopAll =
      /* istanbul ignore next */
      (cov_rvlm31msq().s[17]++, context.flags.all);
      const force =
      /* istanbul ignore next */
      (cov_rvlm31msq().s[18]++, context.flags.force);
      const timeout =
      /* istanbul ignore next */
      (cov_rvlm31msq().s[19]++,
      /* istanbul ignore next */
      (cov_rvlm31msq().b[9][0]++, context.flags.timeout) ||
      /* istanbul ignore next */
      (cov_rvlm31msq().b[9][1]++, 30));
      const saveState =
      /* istanbul ignore next */
      (cov_rvlm31msq().s[20]++, context.flags['save-state'] !== false);
      const killAgents =
      /* istanbul ignore next */
      (cov_rvlm31msq().s[21]++,
      /* istanbul ignore next */
      (cov_rvlm31msq().b[10][0]++, context.flags['kill-agents']) ||
      /* istanbul ignore next */
      (cov_rvlm31msq().b[10][1]++, false));
      /* istanbul ignore next */
      cov_rvlm31msq().s[22]++;
      if (stopAll) {
        /* istanbul ignore next */
        cov_rvlm31msq().b[11][0]++;
        cov_rvlm31msq().s[23]++;
        return await this.stopAllSwarms(force, timeout, saveState, killAgents);
      } else {
        /* istanbul ignore next */
        cov_rvlm31msq().b[11][1]++;
        cov_rvlm31msq().s[24]++;
        if (swarmId) {
          /* istanbul ignore next */
          cov_rvlm31msq().b[12][0]++;
          cov_rvlm31msq().s[25]++;
          return await this.stopSwarm(swarmId, force, timeout, saveState, killAgents);
        } else {
          /* istanbul ignore next */
          cov_rvlm31msq().b[12][1]++;
          cov_rvlm31msq().s[26]++;
          return await this.stopMostRecentSwarm(force, timeout, saveState, killAgents);
        }
      }
    } catch (error) {
      /* istanbul ignore next */
      cov_rvlm31msq().s[27]++;
      return {
        success: false,
        error: `Failed to stop swarm: ${error instanceof Error ?
        /* istanbul ignore next */
        (cov_rvlm31msq().b[13][0]++, error.message) :
        /* istanbul ignore next */
        (cov_rvlm31msq().b[13][1]++, String(error))}`,
        exitCode: 1
      };
    }
  }
  async stopSwarm(swarmId, force, timeout, saveState, killAgents) {
    /* istanbul ignore next */
    cov_rvlm31msq().f[3]++;
    cov_rvlm31msq().s[28]++;
    console.log(`Stopping swarm: ${swarmId}`);
    // Check if swarm exists
    const swarmExists =
    /* istanbul ignore next */
    (cov_rvlm31msq().s[29]++, await this.checkSwarmExists(swarmId));
    /* istanbul ignore next */
    cov_rvlm31msq().s[30]++;
    if (!swarmExists) {
      /* istanbul ignore next */
      cov_rvlm31msq().b[14][0]++;
      cov_rvlm31msq().s[31]++;
      return {
        success: false,
        error: `Swarm '${swarmId}' not found or not running`,
        exitCode: 1
      };
    } else
    /* istanbul ignore next */
    {
      cov_rvlm31msq().b[14][1]++;
    }
    cov_rvlm31msq().s[32]++;
    if (force) {
      /* istanbul ignore next */
      cov_rvlm31msq().b[15][0]++;
      cov_rvlm31msq().s[33]++;
      console.log('⚡ Force stopping swarm (no graceful shutdown)...');
      /* istanbul ignore next */
      cov_rvlm31msq().s[34]++;
      await this.forceStopSwarm(swarmId);
    } else {
      /* istanbul ignore next */
      cov_rvlm31msq().b[15][1]++;
      cov_rvlm31msq().s[35]++;
      console.log('🔄 Initiating graceful shutdown...');
      /* istanbul ignore next */
      cov_rvlm31msq().s[36]++;
      if (saveState) {
        /* istanbul ignore next */
        cov_rvlm31msq().b[16][0]++;
        cov_rvlm31msq().s[37]++;
        console.log('💾 Saving swarm state...');
        /* istanbul ignore next */
        cov_rvlm31msq().s[38]++;
        await this.saveSwarmState(swarmId);
      } else
      /* istanbul ignore next */
      {
        cov_rvlm31msq().b[16][1]++;
      }
      cov_rvlm31msq().s[39]++;
      await this.gracefulStopSwarm(swarmId, timeout, killAgents);
    }
    /* istanbul ignore next */
    cov_rvlm31msq().s[40]++;
    return {
      success: true,
      exitCode: 0,
      message: `Swarm '${swarmId}' stopped successfully`,
      data: {
        swarmId,
        forced: force,
        stateSaved: saveState
      }
    };
  }
  async stopAllSwarms(force, timeout, saveState, killAgents) {
    /* istanbul ignore next */
    cov_rvlm31msq().f[4]++;
    cov_rvlm31msq().s[41]++;
    console.log('Stopping all running swarms...');
    const runningSwarms =
    /* istanbul ignore next */
    (cov_rvlm31msq().s[42]++, await this.getRunningSwarms());
    /* istanbul ignore next */
    cov_rvlm31msq().s[43]++;
    if (runningSwarms.length === 0) {
      /* istanbul ignore next */
      cov_rvlm31msq().b[17][0]++;
      cov_rvlm31msq().s[44]++;
      return {
        success: true,
        exitCode: 0,
        message: 'No running swarms found'
      };
    } else
    /* istanbul ignore next */
    {
      cov_rvlm31msq().b[17][1]++;
    }
    cov_rvlm31msq().s[45]++;
    console.log(`Found ${runningSwarms.length} running swarms`);
    const results =
    /* istanbul ignore next */
    (cov_rvlm31msq().s[46]++, []);
    /* istanbul ignore next */
    cov_rvlm31msq().s[47]++;
    for (const swarm of runningSwarms) {
      /* istanbul ignore next */
      cov_rvlm31msq().s[48]++;
      try {
        /* istanbul ignore next */
        cov_rvlm31msq().s[49]++;
        console.log(`\nStopping swarm: ${swarm.id}`);
        /* istanbul ignore next */
        cov_rvlm31msq().s[50]++;
        if (force) {
          /* istanbul ignore next */
          cov_rvlm31msq().b[18][0]++;
          cov_rvlm31msq().s[51]++;
          await this.forceStopSwarm(swarm.id);
        } else {
          /* istanbul ignore next */
          cov_rvlm31msq().b[18][1]++;
          cov_rvlm31msq().s[52]++;
          if (saveState) {
            /* istanbul ignore next */
            cov_rvlm31msq().b[19][0]++;
            cov_rvlm31msq().s[53]++;
            await this.saveSwarmState(swarm.id);
          } else
          /* istanbul ignore next */
          {
            cov_rvlm31msq().b[19][1]++;
          }
          cov_rvlm31msq().s[54]++;
          await this.gracefulStopSwarm(swarm.id, timeout, killAgents);
        }
        /* istanbul ignore next */
        cov_rvlm31msq().s[55]++;
        results.push({
          swarmId: swarm.id,
          success: true
        });
        /* istanbul ignore next */
        cov_rvlm31msq().s[56]++;
        console.log(`✅ Swarm '${swarm.id}' stopped successfully`);
      } catch (error) {
        /* istanbul ignore next */
        cov_rvlm31msq().s[57]++;
        results.push({
          swarmId: swarm.id,
          success: false,
          error: error instanceof Error ?
          /* istanbul ignore next */
          (cov_rvlm31msq().b[20][0]++, error.message) :
          /* istanbul ignore next */
          (cov_rvlm31msq().b[20][1]++, String(error))
        });
        /* istanbul ignore next */
        cov_rvlm31msq().s[58]++;
        console.log(`❌ Failed to stop swarm '${swarm.id}': ${error instanceof Error ?
        /* istanbul ignore next */
        (cov_rvlm31msq().b[21][0]++, error.message) :
        /* istanbul ignore next */
        (cov_rvlm31msq().b[21][1]++, String(error))}`);
      }
    }
    const successCount =
    /* istanbul ignore next */
    (cov_rvlm31msq().s[59]++, results.filter(r => {
      /* istanbul ignore next */
      cov_rvlm31msq().f[5]++;
      cov_rvlm31msq().s[60]++;
      return r.success;
    }).length);
    const failureCount =
    /* istanbul ignore next */
    (cov_rvlm31msq().s[61]++, results.length - successCount);
    /* istanbul ignore next */
    cov_rvlm31msq().s[62]++;
    return {
      success: failureCount === 0,
      exitCode: failureCount > 0 ?
      /* istanbul ignore next */
      (cov_rvlm31msq().b[22][0]++, 1) :
      /* istanbul ignore next */
      (cov_rvlm31msq().b[22][1]++, 0),
      message: `Stopped ${successCount} swarms successfully${failureCount > 0 ?
      /* istanbul ignore next */
      (cov_rvlm31msq().b[23][0]++, `, ${failureCount} failed`) :
      /* istanbul ignore next */
      (cov_rvlm31msq().b[23][1]++, '')}`,
      data: {
        results,
        totalSwarms: results.length,
        successCount,
        failureCount
      }
    };
  }
  async stopMostRecentSwarm(force, timeout, saveState, killAgents) {
    /* istanbul ignore next */
    cov_rvlm31msq().f[6]++;
    const runningSwarms =
    /* istanbul ignore next */
    (cov_rvlm31msq().s[63]++, await this.getRunningSwarms());
    /* istanbul ignore next */
    cov_rvlm31msq().s[64]++;
    if (runningSwarms.length === 0) {
      /* istanbul ignore next */
      cov_rvlm31msq().b[24][0]++;
      cov_rvlm31msq().s[65]++;
      return {
        success: false,
        error: 'No running swarms found',
        exitCode: 1
      };
    } else
    /* istanbul ignore next */
    {
      cov_rvlm31msq().b[24][1]++;
    }
    // Get most recent swarm (assuming they're sorted by creation time)
    const mostRecent =
    /* istanbul ignore next */
    (cov_rvlm31msq().s[66]++, runningSwarms[0]);
    /* istanbul ignore next */
    cov_rvlm31msq().s[67]++;
    return await this.stopSwarm(mostRecent.id, force, timeout, saveState, killAgents);
  }
  async checkSwarmExists(swarmId) {
    /* istanbul ignore next */
    cov_rvlm31msq().f[7]++;
    // This would check with the actual swarm registry
    // For now, simulate the check
    const runningSwarms =
    /* istanbul ignore next */
    (cov_rvlm31msq().s[68]++, await this.getRunningSwarms());
    /* istanbul ignore next */
    cov_rvlm31msq().s[69]++;
    return runningSwarms.some(swarm => {
      /* istanbul ignore next */
      cov_rvlm31msq().f[8]++;
      cov_rvlm31msq().s[70]++;
      return swarm.id === swarmId;
    });
  }
  async getRunningSwarms() {
    /* istanbul ignore next */
    cov_rvlm31msq().f[9]++;
    cov_rvlm31msq().s[71]++;
    // This would query the actual swarm registry
    // For now, return mock data
    return [{
      id: 'swarm_1704067200_abc123def',
      createdAt: new Date(Date.now() - 600000),
      // 10 minutes ago
      agents: 5
    }, {
      id: 'swarm_1704063600_xyz789ghi',
      createdAt: new Date(Date.now() - 1800000),
      // 30 minutes ago
      agents: 3
    }];
  }
  async saveSwarmState(swarmId) {
    /* istanbul ignore next */
    cov_rvlm31msq().f[10]++;
    cov_rvlm31msq().s[72]++;
    // Simulate state saving
    await new Promise(resolve => {
      /* istanbul ignore next */
      cov_rvlm31msq().f[11]++;
      cov_rvlm31msq().s[73]++;
      return setTimeout(resolve, 500);
    });
    /* istanbul ignore next */
    cov_rvlm31msq().s[74]++;
    console.log(`  ✅ State saved for swarm '${swarmId}'`);
  }
  async gracefulStopSwarm(swarmId, timeout, killAgents) {
    /* istanbul ignore next */
    cov_rvlm31msq().f[12]++;
    cov_rvlm31msq().s[75]++;
    console.log(`  🔄 Stopping agents gracefully (timeout: ${timeout}s)...`);
    // Simulate graceful shutdown process
    const steps =
    /* istanbul ignore next */
    (cov_rvlm31msq().s[76]++, ['Stopping new task acceptance', 'Completing active tasks', 'Saving agent state', 'Closing connections', 'Cleaning up resources']);
    /* istanbul ignore next */
    cov_rvlm31msq().s[77]++;
    for (const step of steps) {
      /* istanbul ignore next */
      cov_rvlm31msq().s[78]++;
      console.log(`  📋 ${step}...`);
      /* istanbul ignore next */
      cov_rvlm31msq().s[79]++;
      await new Promise(resolve => {
        /* istanbul ignore next */
        cov_rvlm31msq().f[13]++;
        cov_rvlm31msq().s[80]++;
        return setTimeout(resolve, 300);
      });
    }
    /* istanbul ignore next */
    cov_rvlm31msq().s[81]++;
    if (killAgents) {
      /* istanbul ignore next */
      cov_rvlm31msq().b[25][0]++;
      cov_rvlm31msq().s[82]++;
      console.log('  ⚡ Forcefully terminating remaining agents...');
      /* istanbul ignore next */
      cov_rvlm31msq().s[83]++;
      await new Promise(resolve => {
        /* istanbul ignore next */
        cov_rvlm31msq().f[14]++;
        cov_rvlm31msq().s[84]++;
        return setTimeout(resolve, 200);
      });
    } else
    /* istanbul ignore next */
    {
      cov_rvlm31msq().b[25][1]++;
    }
    cov_rvlm31msq().s[85]++;
    console.log(`  ✅ Swarm '${swarmId}' stopped gracefully`);
  }
  async forceStopSwarm(swarmId) {
    /* istanbul ignore next */
    cov_rvlm31msq().f[15]++;
    cov_rvlm31msq().s[86]++;
    // Simulate force stop
    await new Promise(resolve => {
      /* istanbul ignore next */
      cov_rvlm31msq().f[16]++;
      cov_rvlm31msq().s[87]++;
      return setTimeout(resolve, 100);
    });
    /* istanbul ignore next */
    cov_rvlm31msq().s[88]++;
    console.log(`  ⚡ Swarm '${swarmId}' force stopped`);
  }
  getHelp() {
    /* istanbul ignore next */
    cov_rvlm31msq().f[17]++;
    cov_rvlm31msq().s[89]++;
    return `Stop running swarms

USAGE:
  claude-flow swarm stop [swarm-id] [options]

ARGUMENTS:
  [swarm-id]    ID of the swarm to stop (optional)

OPTIONS:
  --all              Stop all running swarms
  --force            Force stop without graceful shutdown
  --timeout <sec>    Graceful shutdown timeout in seconds [default: 30]
  --save-state       Save swarm state before stopping [default: true]
  --kill-agents      Forcefully terminate all agents
  --no-save-state    Don't save state before stopping
  -h, --help         Show help

EXAMPLES:
  claude-flow swarm stop
  claude-flow swarm stop swarm_123456
  claude-flow swarm stop --all
  claude-flow swarm stop --force --timeout 5
  claude-flow swarm stop swarm_123456 --no-save-state

BEHAVIOR:
  - Without swarm-id: Stops the most recently created swarm
  - With --all: Stops all running swarms
  - Default: Graceful shutdown with 30-second timeout
  - With --force: Immediate termination without cleanup
  - With --save-state: Preserves agent state and memory (default)

The stop command performs graceful shutdown by default:
1. Stops accepting new tasks
2. Completes active tasks  
3. Saves agent state and memory
4. Closes connections
5. Cleans up resources

Use --force only when immediate termination is required.
`;
  }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,