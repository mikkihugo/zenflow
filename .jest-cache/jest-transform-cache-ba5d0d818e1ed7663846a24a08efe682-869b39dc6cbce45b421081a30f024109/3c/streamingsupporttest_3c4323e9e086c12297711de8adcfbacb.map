{"file":"/home/mhugo/code/claude-code-flow/src/__tests__/unit/london/mcp-protocol/streaming-support.test.ts","mappings":"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","names":[],"sources":["/home/mhugo/code/claude-code-flow/src/__tests__/unit/london/mcp-protocol/streaming-support.test.ts"],"sourcesContent":["/**\n * MCP Streaming Support - TDD London Style\n * \n * Tests streaming capabilities using London School principles:\n * - Mock streaming infrastructure and data flow\n * - Test streaming protocol compliance and backpressure\n * - Verify stream lifecycle management and error handling\n * - Focus on streaming interactions and contracts\n */\n\nimport { jest, describe, it, expect, beforeEach, afterEach } from '@jest/globals';\nimport type {\n  MCPRequest,\n  MCPResponse,\n  MCPNotification,\n  MCPContext\n} from '../../../../utils/types';\n\n// === MOCK DEPENDENCIES (London School Contract Definition) ===\n\nconst mockStreamManager = {\n  createStream: jest.fn(),\n  closeStream: jest.fn(),\n  writeToStream: jest.fn(),\n  readFromStream: jest.fn(),\n  getStreamState: jest.fn(),\n  handleBackpressure: jest.fn()\n};\n\nconst mockBufferManager = {\n  allocateBuffer: jest.fn(),\n  releaseBuffer: jest.fn(),\n  getBufferUsage: jest.fn(),\n  flushBuffer: jest.fn(),\n  resizeBuffer: jest.fn()\n};\n\nconst mockFlowController = {\n  checkBackpressure: jest.fn(),\n  pauseStream: jest.fn(),\n  resumeStream: jest.fn(),\n  adjustBufferSize: jest.fn(),\n  getFlowMetrics: jest.fn()\n};\n\nconst mockLogger = {\n  debug: jest.fn(),\n  info: jest.fn(),\n  warn: jest.fn(),\n  error: jest.fn()\n};\n\nconst mockMetricsCollector = {\n  recordStreamCreated: jest.fn(),\n  recordStreamClosed: jest.fn(),\n  recordDataTransfer: jest.fn(),\n  recordBackpressureEvent: jest.fn(),\n  recordStreamError: jest.fn()\n};\n\nconst mockEventEmitter = {\n  emit: jest.fn(),\n  on: jest.fn(),\n  off: jest.fn(),\n  once: jest.fn()\n};\n\n// === CONTRACT INTERFACES ===\n\ninterface StreamingContract {\n  createStreamingSession(request: MCPRequest, context: MCPContext): Promise<StreamSession>;\n  handleStreamingRequest(request: MCPRequest, context: MCPContext): Promise<MCPResponse>;\n  closeStreamingSession(streamId: string): Promise<void>;\n  handleStreamData(streamId: string, data: StreamData): Promise<void>;\n}\n\ninterface StreamSession {\n  id: string;\n  requestId: string | number;\n  method: string;\n  state: 'active' | 'paused' | 'closed' | 'error';\n  created: Date;\n  lastActivity: Date;\n  bytesTransferred: number;\n  bufferSize: number;\n  maxBufferSize: number;\n}\n\ninterface StreamData {\n  id: string;\n  sequence: number;\n  data: unknown;\n  isLast: boolean;\n  timestamp: Date;\n}\n\ninterface BackpressureEvent {\n  streamId: string;\n  bufferUsage: number;\n  threshold: number;\n  action: 'pause' | 'resume' | 'resize';\n}\n\ninterface StreamingProtocolContract {\n  startStream(params: StreamStartParams): Promise<StreamResponse>;\n  streamChunk(streamId: string, chunk: StreamChunk): Promise<void>;\n  endStream(streamId: string, summary?: StreamSummary): Promise<void>;\n  handleStreamError(streamId: string, error: Error): Promise<void>;\n}\n\ninterface StreamStartParams {\n  method: string;\n  bufferSize?: number;\n  maxChunks?: number;\n  compression?: boolean;\n}\n\ninterface StreamResponse {\n  streamId: string;\n  bufferSize: number;\n  readyForData: boolean;\n}\n\ninterface StreamChunk {\n  sequence: number;\n  data: unknown;\n  checksum?: string;\n  isLast: boolean;\n}\n\ninterface StreamSummary {\n  totalChunks: number;\n  totalBytes: number;\n  duration: number;\n  errors: number;\n}\n\n// === MOCK IMPLEMENTATION ===\n\nclass MockMCPStreamingHandler implements StreamingContract, StreamingProtocolContract {\n  private activeSessions = new Map<string, StreamSession>();\n  \n  constructor(\n    private streamManager = mockStreamManager,\n    private bufferManager = mockBufferManager,\n    private flowController = mockFlowController,\n    private logger = mockLogger,\n    private metrics = mockMetricsCollector,\n    private eventEmitter = mockEventEmitter\n  ) {}\n\n  async createStreamingSession(request: MCPRequest, context: MCPContext): Promise<StreamSession> {\n    const streamId = `stream-${Date.now()}-${Math.random().toString(36).substr(2, 8)}`;\n    \n    this.logger.info('Creating streaming session', { \n      streamId, \n      method: request.method,\n      sessionId: context.sessionId \n    });\n\n    const session: StreamSession = {\n      id: streamId,\n      requestId: request.id,\n      method: request.method,\n      state: 'active',\n      created: new Date(),\n      lastActivity: new Date(),\n      bytesTransferred: 0,\n      bufferSize: 64 * 1024, // 64KB default\n      maxBufferSize: 1024 * 1024 // 1MB max\n    };\n\n    // Initialize stream infrastructure\n    const streamCreated = this.streamManager.createStream(streamId, {\n      bufferSize: session.bufferSize,\n      maxBufferSize: session.maxBufferSize\n    });\n\n    if (streamCreated) {\n      this.activeSessions.set(streamId, session);\n      this.metrics.recordStreamCreated(streamId, request.method);\n      this.eventEmitter.emit('stream:created', { streamId, session });\n      \n      // Setup stream event handlers\n      this.setupStreamEventHandlers(streamId);\n    }\n\n    return session;\n  }\n\n  async handleStreamingRequest(request: MCPRequest, context: MCPContext): Promise<MCPResponse> {\n    this.logger.debug('Handling streaming request', { \n      method: request.method,\n      id: request.id \n    });\n\n    switch (request.method) {\n      case 'stream/start':\n        return this.handleStreamStart(request, context);\n      case 'stream/data':\n        return this.handleStreamData(request.params.streamId, request.params.data);\n      case 'stream/end':\n        return this.handleStreamEnd(request, context);\n      default:\n        throw new Error(`Unsupported streaming method: ${request.method}`);\n    }\n  }\n\n  async closeStreamingSession(streamId: string): Promise<void> {\n    this.logger.info('Closing streaming session', { streamId });\n\n    const session = this.activeSessions.get(streamId);\n    if (!session) {\n      this.logger.warn('Attempt to close non-existent stream', { streamId });\n      return;\n    }\n\n    // Close stream infrastructure\n    this.streamManager.closeStream(streamId);\n    this.bufferManager.releaseBuffer(streamId);\n    \n    // Update session state\n    session.state = 'closed';\n    this.activeSessions.delete(streamId);\n    \n    this.metrics.recordStreamClosed(streamId, session.bytesTransferred);\n    this.eventEmitter.emit('stream:closed', { streamId, session });\n  }\n\n  async handleStreamData(streamId: string, data: StreamData): Promise<void> {\n    const session = this.activeSessions.get(streamId);\n    if (!session) {\n      throw new Error(`Stream not found: ${streamId}`);\n    }\n\n    this.logger.debug('Processing stream data', { \n      streamId, \n      sequence: data.sequence,\n      isLast: data.isLast \n    });\n\n    // Check backpressure\n    const backpressureCheck = this.flowController.checkBackpressure(streamId);\n    if (backpressureCheck.shouldPause) {\n      await this.handleBackpressure(streamId, backpressureCheck.bufferUsage);\n    }\n\n    // Write data to stream\n    const bytesWritten = this.streamManager.writeToStream(streamId, data);\n    session.bytesTransferred += bytesWritten;\n    session.lastActivity = new Date();\n\n    this.metrics.recordDataTransfer(streamId, bytesWritten);\n\n    // Handle end of stream\n    if (data.isLast) {\n      await this.endStream(streamId, {\n        totalChunks: data.sequence + 1,\n        totalBytes: session.bytesTransferred,\n        duration: Date.now() - session.created.getTime(),\n        errors: 0\n      });\n    }\n  }\n\n  async startStream(params: StreamStartParams): Promise<StreamResponse> {\n    const streamId = `protocol-stream-${Date.now()}`;\n    \n    this.logger.info('Starting protocol stream', { \n      streamId, \n      method: params.method \n    });\n\n    const bufferSize = params.bufferSize || 64 * 1024;\n    const buffer = this.bufferManager.allocateBuffer(streamId, bufferSize);\n    \n    if (buffer) {\n      this.eventEmitter.emit('stream:protocol-started', { streamId, params });\n      return {\n        streamId,\n        bufferSize,\n        readyForData: true\n      };\n    }\n\n    throw new Error('Failed to allocate stream buffer');\n  }\n\n  async streamChunk(streamId: string, chunk: StreamChunk): Promise<void> {\n    this.logger.debug('Processing stream chunk', { \n      streamId, \n      sequence: chunk.sequence,\n      isLast: chunk.isLast \n    });\n\n    // Validate chunk sequence\n    if (chunk.sequence < 0) {\n      throw new Error(`Invalid chunk sequence: ${chunk.sequence}`);\n    }\n\n    // Process chunk data\n    const processed = this.streamManager.writeToStream(streamId, {\n      id: streamId,\n      sequence: chunk.sequence,\n      data: chunk.data,\n      isLast: chunk.isLast,\n      timestamp: new Date()\n    });\n\n    if (!processed) {\n      throw new Error(`Failed to process chunk ${chunk.sequence} for stream ${streamId}`);\n    }\n\n    this.eventEmitter.emit('stream:chunk-processed', { streamId, chunk });\n  }\n\n  async endStream(streamId: string, summary?: StreamSummary): Promise<void> {\n    this.logger.info('Ending stream', { streamId, summary });\n\n    const session = this.activeSessions.get(streamId);\n    if (session) {\n      session.state = 'closed';\n    }\n\n    this.streamManager.closeStream(streamId);\n    this.bufferManager.releaseBuffer(streamId);\n    \n    if (summary) {\n      this.metrics.recordDataTransfer(streamId, summary.totalBytes);\n    }\n\n    this.eventEmitter.emit('stream:ended', { streamId, summary });\n  }\n\n  async handleStreamError(streamId: string, error: Error): Promise<void> {\n    this.logger.error('Stream error occurred', { \n      streamId, \n      error: error.message \n    });\n\n    const session = this.activeSessions.get(streamId);\n    if (session) {\n      session.state = 'error';\n    }\n\n    this.metrics.recordStreamError(streamId, error.message);\n    this.eventEmitter.emit('stream:error', { streamId, error });\n\n    // Cleanup resources\n    await this.closeStreamingSession(streamId);\n  }\n\n  private async handleStreamStart(request: MCPRequest, context: MCPContext): Promise<MCPResponse> {\n    const session = await this.createStreamingSession(request, context);\n    \n    return {\n      jsonrpc: '2.0',\n      id: request.id,\n      result: {\n        streamId: session.id,\n        bufferSize: session.bufferSize,\n        maxBufferSize: session.maxBufferSize,\n        state: session.state\n      }\n    };\n  }\n\n  private async handleStreamEnd(request: MCPRequest, context: MCPContext): Promise<MCPResponse> {\n    const { streamId } = request.params;\n    await this.closeStreamingSession(streamId);\n    \n    return {\n      jsonrpc: '2.0',\n      id: request.id,\n      result: { \n        streamId, \n        closed: true \n      }\n    };\n  }\n\n  private async handleBackpressure(streamId: string, bufferUsage: number): Promise<void> {\n    this.logger.warn('Backpressure detected', { streamId, bufferUsage });\n\n    const backpressureEvent: BackpressureEvent = {\n      streamId,\n      bufferUsage,\n      threshold: 0.8, // 80% threshold\n      action: 'pause'\n    };\n\n    this.metrics.recordBackpressureEvent(streamId, bufferUsage);\n    this.flowController.pauseStream(streamId);\n    \n    // Try to resize buffer if possible\n    const session = this.activeSessions.get(streamId);\n    if (session && session.bufferSize < session.maxBufferSize) {\n      const newSize = Math.min(session.bufferSize * 2, session.maxBufferSize);\n      this.bufferManager.resizeBuffer(streamId, newSize);\n      session.bufferSize = newSize;\n      backpressureEvent.action = 'resize';\n    }\n\n    this.eventEmitter.emit('stream:backpressure', backpressureEvent);\n  }\n\n  private setupStreamEventHandlers(streamId: string): void {\n    // Setup event handlers for stream lifecycle\n    this.eventEmitter.on(`stream:${streamId}:data`, (data) => {\n      this.handleStreamData(streamId, data);\n    });\n\n    this.eventEmitter.on(`stream:${streamId}:error`, (error) => {\n      this.handleStreamError(streamId, error);\n    });\n\n    this.eventEmitter.on(`stream:${streamId}:close`, () => {\n      this.closeStreamingSession(streamId);\n    });\n  }\n}\n\ndescribe('MCP Streaming Support - London TDD', () => {\n  \n  describe('🎯 Acceptance Tests - Stream Creation', () => {\n    \n    describe('User Story: Create Streaming Session', () => {\n      it('should create streaming session with proper initialization', async () => {\n        // Arrange - Mock successful stream creation\n        mockStreamManager.createStream.mockReturnValue(true);\n        mockBufferManager.allocateBuffer.mockReturnValue(true);\n        mockEventEmitter.emit.mockReturnValue(undefined);\n\n        const streamingHandler = new MockMCPStreamingHandler();\n        \n        const streamRequest: MCPRequest = {\n          jsonrpc: '2.0',\n          id: 'stream-create-1',\n          method: 'stream/start',\n          params: {\n            bufferSize: 128 * 1024, // 128KB\n            maxChunks: 1000\n          }\n        };\n\n        const context: MCPContext = {\n          sessionId: 'session-stream',\n          logger: mockLogger\n        };\n\n        // Act - Create streaming session\n        const session = await streamingHandler.createStreamingSession(streamRequest, context);\n\n        // Assert - Verify stream creation conversation\n        expect(mockLogger.info).toHaveBeenCalledWith(\n          'Creating streaming session',\n          expect.objectContaining({\n            streamId: session.id,\n            method: 'stream/start',\n            sessionId: 'session-stream'\n          })\n        );\n        expect(mockStreamManager.createStream).toHaveBeenCalledWith(\n          session.id,\n          expect.objectContaining({\n            bufferSize: expect.any(Number),\n            maxBufferSize: expect.any(Number)\n          })\n        );\n        expect(mockMetricsCollector.recordStreamCreated).toHaveBeenCalledWith(\n          session.id,\n          'stream/start'\n        );\n        expect(mockEventEmitter.emit).toHaveBeenCalledWith('stream:created', {\n          streamId: session.id,\n          session\n        });\n        \n        expect(session.id).toBeDefined();\n        expect(session.state).toBe('active');\n        expect(session.method).toBe('stream/start');\n        expect(session.bytesTransferred).toBe(0);\n      });\n\n      it('should handle stream creation failure gracefully', async () => {\n        // Arrange - Mock stream creation failure\n        mockStreamManager.createStream.mockReturnValue(false);\n\n        const streamingHandler = new MockMCPStreamingHandler();\n        \n        const failedStreamRequest: MCPRequest = {\n          jsonrpc: '2.0',\n          id: 'stream-fail-1',\n          method: 'stream/start',\n          params: { bufferSize: 1024 }\n        };\n\n        const context: MCPContext = {\n          sessionId: 'session-fail',\n          logger: mockLogger\n        };\n\n        // Act - Attempt to create failing stream\n        const session = await streamingHandler.createStreamingSession(failedStreamRequest, context);\n\n        // Assert - Verify failure handling\n        expect(mockStreamManager.createStream).toHaveBeenCalled();\n        expect(mockMetricsCollector.recordStreamCreated).not.toHaveBeenCalled();\n        // Session should still be created but not active in the infrastructure\n        expect(session.id).toBeDefined();\n      });\n    });\n\n    describe('User Story: Handle Stream Start Protocol', () => {\n      it('should process stream/start requests correctly', async () => {\n        // Arrange - Mock stream start protocol\n        mockStreamManager.createStream.mockReturnValue(true);\n        mockEventEmitter.emit.mockReturnValue(undefined);\n\n        const streamingHandler = new MockMCPStreamingHandler();\n        \n        const streamStartRequest: MCPRequest = {\n          jsonrpc: '2.0',\n          id: 'protocol-start-1',\n          method: 'stream/start',\n          params: {\n            method: 'data/export',\n            bufferSize: 256 * 1024,\n            compression: true\n          }\n        };\n\n        const context: MCPContext = {\n          sessionId: 'session-protocol',\n          logger: mockLogger\n        };\n\n        // Act - Handle stream start request\n        const response = await streamingHandler.handleStreamingRequest(streamStartRequest, context);\n\n        // Assert - Verify stream start protocol handling\n        expect(mockLogger.debug).toHaveBeenCalledWith(\n          'Handling streaming request',\n          { method: 'stream/start', id: 'protocol-start-1' }\n        );\n        expect(response.jsonrpc).toBe('2.0');\n        expect(response.id).toBe('protocol-start-1');\n        expect(response.result).toBeDefined();\n        expect(response.result.streamId).toBeDefined();\n        expect(response.result.state).toBe('active');\n      });\n    });\n  });\n\n  describe('🌊 Acceptance Tests - Data Streaming', () => {\n    \n    describe('User Story: Stream Data Chunks', () => {\n      it('should process data chunks in sequence', async () => {\n        // Arrange - Mock data chunk processing\n        mockStreamManager.writeToStream.mockReturnValue(1024); // 1KB written\n        mockFlowController.checkBackpressure.mockReturnValue({ shouldPause: false });\n        mockEventEmitter.emit.mockReturnValue(undefined);\n\n        const streamingHandler = new MockMCPStreamingHandler();\n        \n        // First create a session\n        const session = await streamingHandler.createStreamingSession({\n          jsonrpc: '2.0',\n          id: 'chunk-test',\n          method: 'data/stream',\n          params: {}\n        }, { sessionId: 'session-chunks', logger: mockLogger });\n\n        const chunkData: StreamData = {\n          id: session.id,\n          sequence: 1,\n          data: { content: 'test data chunk', size: 1024 },\n          isLast: false,\n          timestamp: new Date()\n        };\n\n        // Act - Process data chunk\n        await streamingHandler.handleStreamData(session.id, chunkData);\n\n        // Assert - Verify chunk processing\n        expect(mockLogger.debug).toHaveBeenCalledWith(\n          'Processing stream data',\n          { \n            streamId: session.id,\n            sequence: 1,\n            isLast: false\n          }\n        );\n        expect(mockFlowController.checkBackpressure).toHaveBeenCalledWith(session.id);\n        expect(mockStreamManager.writeToStream).toHaveBeenCalledWith(session.id, chunkData);\n        expect(mockMetricsCollector.recordDataTransfer).toHaveBeenCalledWith(session.id, 1024);\n      });\n\n      it('should handle last chunk and end stream', async () => {\n        // Arrange - Mock last chunk processing\n        mockStreamManager.writeToStream.mockReturnValue(512);\n        mockFlowController.checkBackpressure.mockReturnValue({ shouldPause: false });\n        mockStreamManager.closeStream.mockReturnValue(undefined);\n        mockBufferManager.releaseBuffer.mockReturnValue(undefined);\n\n        const streamingHandler = new MockMCPStreamingHandler();\n        \n        // Create session\n        const session = await streamingHandler.createStreamingSession({\n          jsonrpc: '2.0',\n          id: 'last-chunk-test',\n          method: 'data/stream',\n          params: {}\n        }, { sessionId: 'session-last', logger: mockLogger });\n\n        const lastChunkData: StreamData = {\n          id: session.id,\n          sequence: 5,\n          data: { content: 'final chunk', size: 512 },\n          isLast: true,\n          timestamp: new Date()\n        };\n\n        // Act - Process last chunk\n        await streamingHandler.handleStreamData(session.id, lastChunkData);\n\n        // Assert - Verify last chunk handling and stream end\n        expect(mockStreamManager.writeToStream).toHaveBeenCalledWith(session.id, lastChunkData);\n        expect(mockEventEmitter.emit).toHaveBeenCalledWith('stream:ended', {\n          streamId: session.id,\n          summary: expect.objectContaining({\n            totalChunks: 6, // sequence 5 + 1\n            totalBytes: expect.any(Number),\n            duration: expect.any(Number),\n            errors: 0\n          })\n        });\n      });\n    });\n\n    describe('User Story: Handle Protocol Stream Chunks', () => {\n      it('should process protocol stream chunks correctly', async () => {\n        // Arrange - Mock protocol chunk processing\n        mockBufferManager.allocateBuffer.mockReturnValue(true);\n        mockStreamManager.writeToStream.mockReturnValue(true);\n        mockEventEmitter.emit.mockReturnValue(undefined);\n\n        const streamingHandler = new MockMCPStreamingHandler();\n        \n        // Start protocol stream\n        const streamResponse = await streamingHandler.startStream({\n          method: 'analysis/stream',\n          bufferSize: 64 * 1024,\n          compression: false\n        });\n\n        const chunk: StreamChunk = {\n          sequence: 1,\n          data: { analysis: 'code quality check', results: [1, 2, 3] },\n          checksum: 'abc123',\n          isLast: false\n        };\n\n        // Act - Process protocol chunk\n        await streamingHandler.streamChunk(streamResponse.streamId, chunk);\n\n        // Assert - Verify protocol chunk processing\n        expect(mockLogger.debug).toHaveBeenCalledWith(\n          'Processing stream chunk',\n          {\n            streamId: streamResponse.streamId,\n            sequence: 1,\n            isLast: false\n          }\n        );\n        expect(mockStreamManager.writeToStream).toHaveBeenCalledWith(\n          streamResponse.streamId,\n          expect.objectContaining({\n            id: streamResponse.streamId,\n            sequence: 1,\n            data: chunk.data,\n            isLast: false\n          })\n        );\n        expect(mockEventEmitter.emit).toHaveBeenCalledWith('stream:chunk-processed', {\n          streamId: streamResponse.streamId,\n          chunk\n        });\n      });\n\n      it('should validate chunk sequence numbers', async () => {\n        // Arrange - Mock invalid chunk sequence\n        const streamingHandler = new MockMCPStreamingHandler();\n        \n        const streamResponse = await streamingHandler.startStream({\n          method: 'validation/stream'\n        });\n\n        const invalidChunk: StreamChunk = {\n          sequence: -1, // Invalid sequence\n          data: { test: 'data' },\n          isLast: false\n        };\n\n        // Act & Assert - Should throw error for invalid sequence\n        await expect(\n          streamingHandler.streamChunk(streamResponse.streamId, invalidChunk)\n        ).rejects.toThrow('Invalid chunk sequence: -1');\n      });\n    });\n  });\n\n  describe('🚰 Acceptance Tests - Backpressure Management', () => {\n    \n    describe('User Story: Handle Buffer Backpressure', () => {\n      it('should detect and handle backpressure events', async () => {\n        // Arrange - Mock backpressure scenario\n        mockStreamManager.createStream.mockReturnValue(true);\n        mockFlowController.checkBackpressure.mockReturnValue({\n          shouldPause: true,\n          bufferUsage: 0.85 // 85% buffer usage\n        });\n        mockFlowController.pauseStream.mockReturnValue(undefined);\n        mockBufferManager.resizeBuffer.mockReturnValue(true);\n\n        const streamingHandler = new MockMCPStreamingHandler();\n        \n        // Create session\n        const session = await streamingHandler.createStreamingSession({\n          jsonrpc: '2.0',\n          id: 'backpressure-test',\n          method: 'heavy/stream',\n          params: {}\n        }, { sessionId: 'session-backpressure', logger: mockLogger });\n\n        const heavyData: StreamData = {\n          id: session.id,\n          sequence: 1,\n          data: { heavyPayload: 'x'.repeat(50000) }, // Large payload\n          isLast: false,\n          timestamp: new Date()\n        };\n\n        // Act - Process data that triggers backpressure\n        await streamingHandler.handleStreamData(session.id, heavyData);\n\n        // Assert - Verify backpressure handling\n        expect(mockFlowController.checkBackpressure).toHaveBeenCalledWith(session.id);\n        expect(mockLogger.warn).toHaveBeenCalledWith(\n          'Backpressure detected',\n          { streamId: session.id, bufferUsage: 0.85 }\n        );\n        expect(mockMetricsCollector.recordBackpressureEvent).toHaveBeenCalledWith(\n          session.id,\n          0.85\n        );\n        expect(mockFlowController.pauseStream).toHaveBeenCalledWith(session.id);\n        expect(mockEventEmitter.emit).toHaveBeenCalledWith('stream:backpressure', \n          expect.objectContaining({\n            streamId: session.id,\n            bufferUsage: 0.85,\n            action: expect.any(String)\n          })\n        );\n      });\n\n      it('should resize buffers when possible during backpressure', async () => {\n        // Arrange - Mock buffer resize scenario\n        mockStreamManager.createStream.mockReturnValue(true);\n        mockFlowController.checkBackpressure.mockReturnValue({\n          shouldPause: true,\n          bufferUsage: 0.9\n        });\n        mockBufferManager.resizeBuffer.mockReturnValue(true);\n\n        const streamingHandler = new MockMCPStreamingHandler();\n        \n        // Create session with room for buffer growth\n        const session = await streamingHandler.createStreamingSession({\n          jsonrpc: '2.0',\n          id: 'resize-test',\n          method: 'expandable/stream',\n          params: {}\n        }, { sessionId: 'session-resize', logger: mockLogger });\n\n        // Simulate buffer resize opportunity\n        const originalBufferSize = session.bufferSize;\n        \n        const data: StreamData = {\n          id: session.id,\n          sequence: 1,\n          data: { largeData: 'test'.repeat(20000) },\n          isLast: false,\n          timestamp: new Date()\n        };\n\n        // Act - Trigger backpressure with resize capability\n        await streamingHandler.handleStreamData(session.id, data);\n\n        // Assert - Verify buffer resize\n        expect(mockBufferManager.resizeBuffer).toHaveBeenCalledWith(\n          session.id,\n          originalBufferSize * 2 // Should double buffer size\n        );\n        expect(mockEventEmitter.emit).toHaveBeenCalledWith('stream:backpressure',\n          expect.objectContaining({\n            action: 'resize'\n          })\n        );\n      });\n    });\n  });\n\n  describe('🔚 Acceptance Tests - Stream Lifecycle', () => {\n    \n    describe('User Story: Close Streaming Sessions', () => {\n      it('should close streams and cleanup resources', async () => {\n        // Arrange - Mock stream closure\n        mockStreamManager.createStream.mockReturnValue(true);\n        mockStreamManager.closeStream.mockReturnValue(undefined);\n        mockBufferManager.releaseBuffer.mockReturnValue(undefined);\n        mockEventEmitter.emit.mockReturnValue(undefined);\n\n        const streamingHandler = new MockMCPStreamingHandler();\n        \n        // Create session to close\n        const session = await streamingHandler.createStreamingSession({\n          jsonrpc: '2.0',\n          id: 'close-test',\n          method: 'closeable/stream',\n          params: {}\n        }, { sessionId: 'session-close', logger: mockLogger });\n\n        // Act - Close streaming session\n        await streamingHandler.closeStreamingSession(session.id);\n\n        // Assert - Verify stream closure conversation\n        expect(mockLogger.info).toHaveBeenCalledWith(\n          'Closing streaming session',\n          { streamId: session.id }\n        );\n        expect(mockStreamManager.closeStream).toHaveBeenCalledWith(session.id);\n        expect(mockBufferManager.releaseBuffer).toHaveBeenCalledWith(session.id);\n        expect(mockMetricsCollector.recordStreamClosed).toHaveBeenCalledWith(\n          session.id,\n          expect.any(Number) // bytes transferred\n        );\n        expect(mockEventEmitter.emit).toHaveBeenCalledWith('stream:closed', {\n          streamId: session.id,\n          session: expect.objectContaining({ state: 'closed' })\n        });\n      });\n\n      it('should handle closure of non-existent streams gracefully', async () => {\n        // Arrange - Mock non-existent stream closure\n        const streamingHandler = new MockMCPStreamingHandler();\n        const nonExistentStreamId = 'non-existent-stream';\n\n        // Act - Attempt to close non-existent stream\n        await streamingHandler.closeStreamingSession(nonExistentStreamId);\n\n        // Assert - Verify graceful handling\n        expect(mockLogger.warn).toHaveBeenCalledWith(\n          'Attempt to close non-existent stream',\n          { streamId: nonExistentStreamId }\n        );\n        expect(mockStreamManager.closeStream).not.toHaveBeenCalled();\n      });\n    });\n\n    describe('User Story: Handle Stream Errors', () => {\n      it('should handle stream errors and cleanup resources', async () => {\n        // Arrange - Mock stream error scenario\n        mockStreamManager.createStream.mockReturnValue(true);\n        mockStreamManager.closeStream.mockReturnValue(undefined);\n        mockBufferManager.releaseBuffer.mockReturnValue(undefined);\n        mockEventEmitter.emit.mockReturnValue(undefined);\n\n        const streamingHandler = new MockMCPStreamingHandler();\n        \n        // Create session\n        const session = await streamingHandler.createStreamingSession({\n          jsonrpc: '2.0',\n          id: 'error-test',\n          method: 'error/stream',\n          params: {}\n        }, { sessionId: 'session-error', logger: mockLogger });\n\n        const streamError = new Error('Stream processing failed');\n\n        // Act - Handle stream error\n        await streamingHandler.handleStreamError(session.id, streamError);\n\n        // Assert - Verify error handling conversation\n        expect(mockLogger.error).toHaveBeenCalledWith(\n          'Stream error occurred',\n          { \n            streamId: session.id,\n            error: 'Stream processing failed'\n          }\n        );\n        expect(mockMetricsCollector.recordStreamError).toHaveBeenCalledWith(\n          session.id,\n          'Stream processing failed'\n        );\n        expect(mockEventEmitter.emit).toHaveBeenCalledWith('stream:error', {\n          streamId: session.id,\n          error: streamError\n        });\n        // Should also cleanup resources\n        expect(mockStreamManager.closeStream).toHaveBeenCalledWith(session.id);\n        expect(mockBufferManager.releaseBuffer).toHaveBeenCalledWith(session.id);\n      });\n    });\n  });\n\n  describe('🧪 London School Patterns - Streaming Workflow', () => {\n    \n    it('should demonstrate complete streaming lifecycle', async () => {\n      // Arrange - Mock complete streaming workflow\n      mockStreamManager.createStream.mockReturnValue(true);\n      mockStreamManager.writeToStream.mockReturnValue(2048);\n      mockFlowController.checkBackpressure.mockReturnValue({ shouldPause: false });\n      mockStreamManager.closeStream.mockReturnValue(undefined);\n      mockBufferManager.releaseBuffer.mockReturnValue(undefined);\n\n      const streamingHandler = new MockMCPStreamingHandler();\n      \n      const context: MCPContext = {\n        sessionId: 'workflow-session',\n        logger: mockLogger\n      };\n\n      // Act - Complete streaming workflow\n      \n      // 1. Create stream\n      const session = await streamingHandler.createStreamingSession({\n        jsonrpc: '2.0',\n        id: 'workflow-stream',\n        method: 'complete/workflow',\n        params: { bufferSize: 32768 }\n      }, context);\n\n      // 2. Stream multiple chunks\n      for (let i = 0; i < 3; i++) {\n        await streamingHandler.handleStreamData(session.id, {\n          id: session.id,\n          sequence: i,\n          data: { chunk: i, content: `data-${i}` },\n          isLast: i === 2,\n          timestamp: new Date()\n        });\n      }\n\n      // Assert - Verify complete workflow conversation (London School focus)\n      expect(mockLogger.info).toHaveBeenCalledWith(\n        'Creating streaming session',\n        expect.objectContaining({\n          streamId: session.id,\n          method: 'complete/workflow'\n        })\n      );\n      expect(mockStreamManager.createStream).toHaveBeenCalledTimes(1);\n      expect(mockMetricsCollector.recordStreamCreated).toHaveBeenCalledTimes(1);\n      expect(mockEventEmitter.emit).toHaveBeenCalledWith('stream:created', expect.any(Object));\n      \n      // Verify chunk processing\n      expect(mockLogger.debug).toHaveBeenCalledTimes(3); // One per chunk\n      expect(mockStreamManager.writeToStream).toHaveBeenCalledTimes(3);\n      expect(mockMetricsCollector.recordDataTransfer).toHaveBeenCalledTimes(4); // 3 chunks + 1 summary\n      \n      // Verify stream end\n      expect(mockEventEmitter.emit).toHaveBeenCalledWith('stream:ended', \n        expect.objectContaining({\n          streamId: session.id,\n          summary: expect.objectContaining({\n            totalChunks: 3,\n            totalBytes: expect.any(Number)\n          })\n        })\n      );\n    });\n  });\n\n  // Clean test isolation - London School principle\n  beforeEach(() => {\n    jest.clearAllMocks();\n  });\n  \n  afterEach(() => {\n    jest.restoreAllMocks();\n  });\n});"],"version":3}