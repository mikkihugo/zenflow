{"file":"/home/mhugo/code/claude-code-flow/src/__tests__/integration/web-mcp-integration-london-tdd.test.ts","mappings":"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","names":[],"sources":["/home/mhugo/code/claude-code-flow/src/__tests__/integration/web-mcp-integration-london-tdd.test.ts"],"sourcesContent":["/**\n * Claude-Zen Web ↔ MCP Integration Layer - London School TDD Tests\n * \n * Testing the integration layer that bridges Web API and MCP server using London School principles:\n * - Outside-in development from user API requests to MCP protocol\n * - Mock-driven contracts for seamless component bridging\n * - Behavior verification for request/response transformation\n * - Focus on protocol translation and error handling\n */\n\nimport { jest, describe, it, expect, beforeEach, afterEach } from '@jest/globals';\n\n// === MOCK DEPENDENCIES (London School Contract Definition) ===\n\n// Mock Web API Server - HTTP request handling contract\nconst mockWebApiServer = {\n  get: jest.fn(),\n  post: jest.fn(),\n  put: jest.fn(),\n  delete: jest.fn(),\n  use: jest.fn(),\n  listen: jest.fn(),\n  close: jest.fn(),\n};\n\n// Mock MCP Server - Protocol communication contract\nconst mockMcpServer = {\n  call: jest.fn(),\n  listTools: jest.fn(),\n  getCapabilities: jest.fn(),\n  notify: jest.fn(),\n};\n\n// Mock Request Transformer - HTTP to MCP transformation contract\nconst mockRequestTransformer = {\n  httpToMcp: jest.fn(),\n  mcpToHttp: jest.fn(),\n  validateHttpRequest: jest.fn(),\n  validateMcpResponse: jest.fn(),\n};\n\n// Mock Response Formatter - Response standardization contract\nconst mockResponseFormatter = {\n  formatSuccess: jest.fn(),\n  formatError: jest.fn(),\n  formatStream: jest.fn(),\n  addMetadata: jest.fn(),\n};\n\n// Mock Error Handler - Error transformation contract\nconst mockErrorHandler = {\n  handleMcpError: jest.fn(),\n  handleHttpError: jest.fn(),\n  createErrorResponse: jest.fn(),\n  logError: jest.fn(),\n};\n\n// Mock Authentication - Security contract\nconst mockAuthHandler = {\n  validateApiKey: jest.fn(),\n  checkPermissions: jest.fn(),\n  createAuthContext: jest.fn(),\n};\n\n// === CONTRACT INTERFACES ===\n\ninterface IntegrationLayerContract {\n  initialize(webPort: number, mcpEndpoint: string): Promise<void>;\n  bridgeRequest(httpRequest: any): Promise<any>;\n  setupRoutes(): void;\n  shutdown(): Promise<void>;\n}\n\ninterface RequestTransformationContract {\n  httpToMcp(httpRequest: any): any;\n  mcpToHttp(mcpResponse: any): any;\n  validateTransformation(original: any, transformed: any): boolean;\n}\n\ninterface ErrorBridgingContract {\n  transformMcpError(mcpError: any): any;\n  transformHttpError(httpError: any): any;\n  shouldRetry(error: any): boolean;\n}\n\ndescribe('Claude-Zen Web ↔ MCP Integration Layer - London School TDD', () => {\n  \n  // Mock Integration Layer class (based on architectural needs)\n  class MockWebMcpIntegrationLayer {\n    private webServer: any;\n    private mcpServer: any;\n    private requestTransformer: any;\n    private responseFormatter: any;\n    private errorHandler: any;\n    private authHandler: any;\n    \n    constructor() {\n      this.webServer = mockWebApiServer;\n      this.mcpServer = mockMcpServer;\n      this.requestTransformer = mockRequestTransformer;\n      this.responseFormatter = mockResponseFormatter;\n      this.errorHandler = mockErrorHandler;\n      this.authHandler = mockAuthHandler;\n    }\n    \n    async initialize(webPort: number, mcpEndpoint: string) {\n      // Setup web server\n      mockWebApiServer.listen.mockResolvedValue(undefined);\n      await mockWebApiServer.listen(webPort);\n      \n      // Setup routes\n      this.setupRoutes();\n      \n      return Promise.resolve();\n    }\n    \n    setupRoutes() {\n      // Route: List available tools\n      mockWebApiServer.get('/api/tools', async (req: any, res: any) => {\n        return this.handleToolsList(req, res);\n      });\n      \n      // Route: Execute tool\n      mockWebApiServer.post('/api/tools/:toolName', async (req: any, res: any) => {\n        return this.handleToolExecution(req, res);\n      });\n      \n      // Route: Queen task coordination\n      mockWebApiServer.post('/api/queens/:queenType/task', async (req: any, res: any) => {\n        return this.handleQueenTask(req, res);\n      });\n    }\n    \n    async handleToolsList(req: any, res: any) {\n      try {\n        // Authenticate request\n        const authContext = await mockAuthHandler.validateApiKey(req.headers.authorization);\n        \n        // Get tools from MCP server\n        const mcpResponse = await mockMcpServer.listTools();\n        \n        // Transform to HTTP response\n        const httpResponse = mockRequestTransformer.mcpToHttp(mcpResponse);\n        \n        // Format response\n        return mockResponseFormatter.formatSuccess(httpResponse);\n        \n      } catch (error) {\n        return mockErrorHandler.handleHttpError(error);\n      }\n    }\n    \n    async handleToolExecution(req: any, res: any) {\n      try {\n        // Validate and transform request\n        const isValid = mockRequestTransformer.validateHttpRequest(req);\n        if (!isValid) {\n          throw new Error('Invalid request format');\n        }\n        \n        const mcpRequest = mockRequestTransformer.httpToMcp({\n          method: 'tools/call',\n          params: {\n            name: req.params.toolName,\n            arguments: req.body\n          }\n        });\n        \n        // Execute via MCP\n        const mcpResponse = await mockMcpServer.call(mcpRequest);\n        \n        // Transform back to HTTP\n        const httpResponse = mockRequestTransformer.mcpToHttp(mcpResponse);\n        \n        return mockResponseFormatter.formatSuccess(httpResponse);\n        \n      } catch (error) {\n        const transformedError = mockErrorHandler.handleMcpError(error);\n        return mockResponseFormatter.formatError(transformedError);\n      }\n    }\n    \n    async handleQueenTask(req: any, res: any) {\n      try {\n        const queenType = req.params.queenType;\n        const task = req.body;\n        \n        // Transform to Queen-specific MCP call\n        const mcpRequest = mockRequestTransformer.httpToMcp({\n          method: 'tools/call',\n          params: {\n            name: `queen-${queenType}-process`,\n            arguments: {\n              task,\n              queenType,\n              context: req.headers['x-context'] || 'default'\n            }\n          }\n        });\n        \n        // Execute Queen task via MCP\n        const mcpResponse = await mockMcpServer.call(mcpRequest);\n        \n        // Format Queen response\n        const queenResponse = mockRequestTransformer.mcpToHttp(mcpResponse);\n        return mockResponseFormatter.formatSuccess({\n          queenType,\n          taskId: queenResponse.taskId,\n          status: queenResponse.status,\n          result: queenResponse.result\n        });\n        \n      } catch (error) {\n        return mockErrorHandler.handleQueenError(error, req.params.queenType);\n      }\n    }\n  }\n\n  describe('🎯 Acceptance Tests - Web to MCP Bridge', () => {\n    \n    describe('User Story: API Tool Discovery', () => {\n      it('should expose MCP tools through REST API with proper transformation', async () => {\n        // Arrange - Mock tool discovery workflow\n        mockAuthHandler.validateApiKey.mockResolvedValue({ valid: true, user: 'test-user' });\n        mockMcpServer.listTools.mockResolvedValue({\n          jsonrpc: '2.0',\n          id: 1,\n          result: {\n            tools: [\n              { name: 'claude-zen-analyze', description: 'Analyze code architecture' },\n              { name: 'queen-architect-design', description: 'Design system architecture' }\n            ]\n          }\n        });\n        \n        mockRequestTransformer.mcpToHttp.mockReturnValue({\n          tools: [\n            { name: 'claude-zen-analyze', description: 'Analyze code architecture' },\n            { name: 'queen-architect-design', description: 'Design system architecture' }\n          ]\n        });\n        \n        mockResponseFormatter.formatSuccess.mockReturnValue({\n          status: 'success',\n          data: {\n            tools: [\n              { name: 'claude-zen-analyze', description: 'Analyze code architecture' },\n              { name: 'queen-architect-design', description: 'Design system architecture' }\n            ]\n          }\n        });\n        \n        const integrationLayer = new MockWebMcpIntegrationLayer();\n        \n        // Act - Request tools list via HTTP API\n        const mockReq = { \n          headers: { authorization: 'Bearer test-token' }\n        };\n        const mockRes = {};\n        \n        const response = await integrationLayer.handleToolsList(mockReq, mockRes);\n        \n        // Assert - Verify complete transformation chain\n        expect(mockAuthHandler.validateApiKey).toHaveBeenCalledWith('Bearer test-token');\n        expect(mockMcpServer.listTools).toHaveBeenCalled();\n        expect(mockRequestTransformer.mcpToHttp).toHaveBeenCalledWith(\n          expect.objectContaining({\n            result: expect.objectContaining({\n              tools: expect.any(Array)\n            })\n          })\n        );\n        expect(mockResponseFormatter.formatSuccess).toHaveBeenCalled();\n        \n        expect(response.status).toBe('success');\n        expect(response.data.tools).toHaveLength(2);\n        expect(response.data.tools[0].name).toBe('claude-zen-analyze');\n      });\n    });\n\n    describe('User Story: Tool Execution via REST API', () => {\n      it('should execute MCP tools through HTTP endpoints with parameter transformation', async () => {\n        // Arrange - Mock tool execution workflow\n        const httpToolRequest = {\n          params: { toolName: 'claude-zen-analyze' },\n          body: { \n            codebase: 'typescript-monorepo',\n            focus: 'architecture'\n          }\n        };\n        \n        mockRequestTransformer.validateHttpRequest.mockReturnValue(true);\n        mockRequestTransformer.httpToMcp.mockReturnValue({\n          method: 'tools/call',\n          params: {\n            name: 'claude-zen-analyze',\n            arguments: {\n              codebase: 'typescript-monorepo',\n              focus: 'architecture'\n            }\n          }\n        });\n        \n        mockMcpServer.call.mockResolvedValue({\n          jsonrpc: '2.0',\n          id: 1,\n          result: {\n            analysis: 'clean-architecture-detected',\n            recommendations: ['enhance-separation-of-concerns'],\n            confidence: 0.91\n          }\n        });\n        \n        mockRequestTransformer.mcpToHttp.mockReturnValue({\n          analysis: 'clean-architecture-detected',\n          recommendations: ['enhance-separation-of-concerns'],\n          confidence: 0.91\n        });\n        \n        mockResponseFormatter.formatSuccess.mockReturnValue({\n          status: 'success',\n          data: {\n            analysis: 'clean-architecture-detected',\n            recommendations: ['enhance-separation-of-concerns'],\n            confidence: 0.91\n          }\n        });\n        \n        const integrationLayer = new MockWebMcpIntegrationLayer();\n        \n        // Act - Execute tool via HTTP\n        const response = await integrationLayer.handleToolExecution(httpToolRequest, {});\n        \n        // Assert - Verify request/response transformation chain\n        expect(mockRequestTransformer.validateHttpRequest).toHaveBeenCalledWith(httpToolRequest);\n        expect(mockRequestTransformer.httpToMcp).toHaveBeenCalledWith({\n          method: 'tools/call',\n          params: {\n            name: 'claude-zen-analyze',\n            arguments: {\n              codebase: 'typescript-monorepo',\n              focus: 'architecture'\n            }\n          }\n        });\n        expect(mockMcpServer.call).toHaveBeenCalled();\n        expect(mockRequestTransformer.mcpToHttp).toHaveBeenCalled();\n        expect(mockResponseFormatter.formatSuccess).toHaveBeenCalled();\n        \n        expect(response.status).toBe('success');\n        expect(response.data.analysis).toBe('clean-architecture-detected');\n        expect(response.data.confidence).toBe(0.91);\n      });\n    });\n\n    describe('User Story: Queen Task Coordination via API', () => {\n      it('should route Queen tasks through MCP with proper context handling', async () => {\n        // Arrange - Mock Queen task coordination\n        const queenTaskRequest = {\n          params: { queenType: 'architect' },\n          headers: { 'x-context': 'microservices-project' },\n          body: {\n            task: 'design-api-gateway',\n            requirements: ['scalability', 'security'],\n            deadline: '2024-08-15'\n          }\n        };\n        \n        mockRequestTransformer.httpToMcp.mockReturnValue({\n          method: 'tools/call',\n          params: {\n            name: 'queen-architect-process',\n            arguments: {\n              task: {\n                task: 'design-api-gateway',\n                requirements: ['scalability', 'security'],\n                deadline: '2024-08-15'\n              },\n              queenType: 'architect',\n              context: 'microservices-project'\n            }\n          }\n        });\n        \n        mockMcpServer.call.mockResolvedValue({\n          jsonrpc: '2.0',\n          id: 1,\n          result: {\n            taskId: 'queen-arch-task-001',\n            status: 'in-progress',\n            result: {\n              design: 'api-gateway-blueprint',\n              estimated_completion: '2024-08-10'\n            }\n          }\n        });\n        \n        mockRequestTransformer.mcpToHttp.mockReturnValue({\n          taskId: 'queen-arch-task-001',\n          status: 'in-progress',\n          result: {\n            design: 'api-gateway-blueprint',\n            estimated_completion: '2024-08-10'\n          }\n        });\n        \n        mockResponseFormatter.formatSuccess.mockReturnValue({\n          status: 'success',\n          data: {\n            queenType: 'architect',\n            taskId: 'queen-arch-task-001',\n            status: 'in-progress',\n            result: {\n              design: 'api-gateway-blueprint',\n              estimated_completion: '2024-08-10'\n            }\n          }\n        });\n        \n        const integrationLayer = new MockWebMcpIntegrationLayer();\n        \n        // Act - Execute Queen task via API\n        const response = await integrationLayer.handleQueenTask(queenTaskRequest, {});\n        \n        // Assert - Verify Queen coordination workflow\n        expect(mockRequestTransformer.httpToMcp).toHaveBeenCalledWith({\n          method: 'tools/call',\n          params: {\n            name: 'queen-architect-process',\n            arguments: {\n              task: queenTaskRequest.body,\n              queenType: 'architect',\n              context: 'microservices-project'\n            }\n          }\n        });\n        expect(mockMcpServer.call).toHaveBeenCalled();\n        expect(mockResponseFormatter.formatSuccess).toHaveBeenCalledWith({\n          queenType: 'architect',\n          taskId: 'queen-arch-task-001',\n          status: 'in-progress',\n          result: expect.any(Object)\n        });\n        \n        expect(response.data.queenType).toBe('architect');\n        expect(response.data.taskId).toBe('queen-arch-task-001');\n        expect(response.data.result.design).toBe('api-gateway-blueprint');\n      });\n    });\n  });\n\n  describe('🔗 Contract Verification - Protocol Translation', () => {\n    \n    describe('Error Transformation', () => {\n      it('should properly transform MCP errors to HTTP error responses', async () => {\n        // Arrange - Mock error scenarios\n        const mcpError = {\n          jsonrpc: '2.0',\n          id: 1,\n          error: {\n            code: -32602,\n            message: 'Invalid params',\n            data: { param: 'arguments', reason: 'missing required field' }\n          }\n        };\n        \n        mockRequestTransformer.validateHttpRequest.mockReturnValue(true);\n        mockRequestTransformer.httpToMcp.mockReturnValue({\n          method: 'tools/call',\n          params: { name: 'invalid-tool' }\n        });\n        \n        mockMcpServer.call.mockRejectedValue(mcpError);\n        \n        mockErrorHandler.handleMcpError.mockReturnValue({\n          type: 'validation_error',\n          message: 'Invalid request parameters',\n          details: 'missing required field in arguments',\n          code: 400\n        });\n        \n        mockResponseFormatter.formatError.mockReturnValue({\n          status: 'error',\n          error: {\n            type: 'validation_error',\n            message: 'Invalid request parameters',\n            code: 400\n          }\n        });\n        \n        const integrationLayer = new MockWebMcpIntegrationLayer();\n        \n        // Act - Handle error during tool execution\n        const response = await integrationLayer.handleToolExecution({\n          params: { toolName: 'invalid-tool' },\n          body: {}\n        }, {});\n        \n        // Assert - Verify error transformation chain\n        expect(mockMcpServer.call).toHaveBeenCalled();\n        expect(mockErrorHandler.handleMcpError).toHaveBeenCalledWith(mcpError);\n        expect(mockResponseFormatter.formatError).toHaveBeenCalled();\n        \n        expect(response.status).toBe('error');\n        expect(response.error.type).toBe('validation_error');\n        expect(response.error.code).toBe(400);\n      });\n    });\n  });\n\n  describe('🧪 London School Patterns - Integration Focus', () => {\n    \n    it('should demonstrate protocol bridging through interaction testing', () => {\n      // London School: Test HOW protocols communicate, not implementation details\n      const mockProtocolBridge = {\n        translateRequest: jest.fn(),\n        translateResponse: jest.fn(),\n        validateTranslation: jest.fn()\n      };\n      \n      const protocolIntegrator = {\n        bridge: (sourceRequest: any, sourceProtocol: string, targetProtocol: string) => {\n          const translated = mockProtocolBridge.translateRequest(sourceRequest, targetProtocol);\n          const isValid = mockProtocolBridge.validateTranslation(sourceRequest, translated);\n          \n          if (!isValid) {\n            throw new Error('Translation validation failed');\n          }\n          \n          return translated;\n        }\n      };\n      \n      // Mock the protocol translation conversation\n      mockProtocolBridge.translateRequest.mockReturnValue({ method: 'translated', params: {} });\n      mockProtocolBridge.validateTranslation.mockReturnValue(true);\n      \n      // Act - Test protocol bridging\n      const httpRequest = { endpoint: '/api/test', body: { data: 'test' } };\n      const result = protocolIntegrator.bridge(httpRequest, 'HTTP', 'MCP');\n      \n      // Assert - Verify protocol interaction\n      expect(mockProtocolBridge.translateRequest).toHaveBeenCalledWith(httpRequest, 'MCP');\n      expect(mockProtocolBridge.validateTranslation).toHaveBeenCalledWith(httpRequest, result);\n      expect(result.method).toBe('translated');\n    });\n  });\n\n  // Clean test isolation - London School principle\n  beforeEach(() => {\n    jest.clearAllMocks();\n  });\n  \n  afterEach(() => {\n    jest.restoreAllMocks();\n  });\n});"],"version":3}