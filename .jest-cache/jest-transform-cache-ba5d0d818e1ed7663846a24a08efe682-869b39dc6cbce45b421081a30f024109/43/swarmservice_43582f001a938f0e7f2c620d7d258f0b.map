{"version":3,"names":["cov_2hlhh53urz","actualCoverage","spawn","EventEmitter","writeFile","readFile","existsSync","join","createLogger","ensureDirectory","SwarmService","logger","swarms","s","Map","processes","dataDir","initialized","constructor","config","f","prefix","b","process","cwd","init","loadSwarms","info","error","dispose","stopPromises","Array","from","keys","map","id","stopSwarm","Promise","all","clear","healthCheck","healthy","message","runningSwarms","values","filter","swarm","status","length","startSwarm","has","existing","get","success","Error","swarmStatus","activeAgents","totalAgents","startTime","Date","uptime","activeTasks","completedTasks","errorCount","resourceUsage","memory","cpu","disk","set","spawnSwarmProcess","saveSwarmState","emit","swarmId","data","details","killed","kill","resolve","timeout","setTimeout","on","clearTimeout","delete","getSwarmStatus","now","getTime","listSwarms","forEach","getSwarmMetrics","metrics","timestamp","performance","throughput","Math","random","latency","errorRate","successRate","resources","memoryUsage","cpuUsage","diskUsage","networkIO","agents","active","idle","floor","busy","failed","tasks","queued","running","completed","spawnAgent","agentConfig","maxAgents","agent","toString","substr","type","name","createdAt","tasksCompleted","tasksActive","detached","stdio","stdout","debug","trim","stderr","code","swarmFiles","require","readdirSync","endsWith","file","filePath","JSON","parse","warn","stringify"],"sources":["/home/mhugo/code/claude-code-flow/src/cli/services/swarm-service.ts"],"sourcesContent":["/**\n * Swarm Service\n * \n * Provides swarm operations including start, stop, status, and monitoring.\n * Integrates with the claude-flow swarm system and manages agent lifecycle.\n */\n\nimport { spawn } from 'child_process';\nimport type { ChildProcess } from 'child_process';\nimport { EventEmitter } from 'events';\nimport { writeFile, readFile } from 'fs/promises';\nimport { existsSync } from 'fs';\nimport { join } from 'path';\nimport { createLogger, type Logger } from '../utils/logger.js';\nimport { fileExists, ensureDirectory } from '../utils/file-system.js';\nimport type { Result } from '../types/index.js';\n\n/**\n * Swarm topology types\n */\nexport type SwarmTopology = 'mesh' | 'hierarchical' | 'ring' | 'star';\n\n/**\n * Swarm agent configuration\n */\nexport interface SwarmAgent {\n  /** Agent ID */\n  id: string;\n  \n  /** Agent type/role */\n  type: string;\n  \n  /** Agent name */\n  name: string;\n  \n  /** Agent status */\n  status: 'active' | 'inactive' | 'error';\n  \n  /** Process ID (if running) */\n  pid?: number;\n  \n  /** Agent configuration */\n  config: Record<string, any>;\n  \n  /** Creation timestamp */\n  createdAt: Date;\n  \n  /** Last activity timestamp */\n  lastActivity?: Date;\n  \n  /** Agent metrics */\n  metrics: {\n    tasksCompleted: number;\n    tasksActive: number;\n    uptime: number;\n    memoryUsage: number;\n    cpuUsage: number;\n  };\n}\n\n/**\n * Swarm configuration\n */\nexport interface SwarmConfig {\n  /** Swarm ID */\n  id: string;\n  \n  /** Swarm topology */\n  topology: SwarmTopology;\n  \n  /** Maximum number of agents */\n  maxAgents: number;\n  \n  /** Swarm strategy */\n  strategy: 'balanced' | 'specialized' | 'adaptive' | 'parallel';\n  \n  /** Auto-scaling configuration */\n  autoScale?: {\n    enabled: boolean;\n    minAgents: number;\n    maxAgents: number;\n    scaleUpThreshold: number;\n    scaleDownThreshold: number;\n  };\n  \n  /** Resource limits */\n  resourceLimits?: {\n    maxMemory: number;\n    maxCpu: number;\n    maxDisk: number;\n  };\n  \n  /** Persistence settings */\n  persistence?: {\n    enabled: boolean;\n    storageType: 'file' | 'database' | 'memory';\n    location?: string;\n  };\n}\n\n/**\n * Swarm status information\n */\nexport interface SwarmStatus {\n  /** Swarm ID */\n  id: string;\n  \n  /** Overall status */\n  status: 'running' | 'stopped' | 'starting' | 'stopping' | 'error';\n  \n  /** Number of active agents */\n  activeAgents: number;\n  \n  /** Total number of agents */\n  totalAgents: number;\n  \n  /** Swarm configuration */\n  config: SwarmConfig;\n  \n  /** Start time */\n  startTime?: Date;\n  \n  /** Uptime in milliseconds */\n  uptime: number;\n  \n  /** Current tasks */\n  activeTasks: number;\n  \n  /** Completed tasks */\n  completedTasks: number;\n  \n  /** Error count */\n  errorCount: number;\n  \n  /** Resource usage */\n  resourceUsage: {\n    memory: number;\n    cpu: number;\n    disk: number;\n  };\n}\n\n/**\n * Swarm metrics\n */\nexport interface SwarmMetrics {\n  /** Metrics timestamp */\n  timestamp: Date;\n  \n  /** Performance metrics */\n  performance: {\n    throughput: number;\n    latency: number;\n    errorRate: number;\n    successRate: number;\n  };\n  \n  /** Resource metrics */\n  resources: {\n    memoryUsage: number;\n    cpuUsage: number;\n    diskUsage: number;\n    networkIO: number;\n  };\n  \n  /** Agent metrics */\n  agents: {\n    active: number;\n    idle: number;\n    busy: number;\n    failed: number;\n  };\n  \n  /** Task metrics */\n  tasks: {\n    queued: number;\n    running: number;\n    completed: number;\n    failed: number;\n  };\n}\n\n/**\n * Swarm operation result\n */\nexport interface SwarmOperationResult {\n  /** Operation success */\n  success: boolean;\n  \n  /** Operation message */\n  message: string;\n  \n  /** Operation details */\n  details?: any;\n  \n  /** Operation duration */\n  duration?: number;\n  \n  /** Affected agents */\n  affectedAgents?: string[];\n}\n\n/**\n * Swarm service implementation\n */\nexport class SwarmService extends EventEmitter {\n  private logger: Logger;\n  private swarms = new Map<string, SwarmStatus>();\n  private processes = new Map<string, ChildProcess>();\n  private dataDir: string;\n  private initialized = false;\n  \n  constructor(config?: Record<string, any>) {\n    super();\n    this.logger = createLogger({ prefix: 'SwarmService' });\n    this.dataDir = config?.dataDir || join(process.cwd(), 'data', 'swarms');\n  }\n  \n  /**\n   * Initialize the swarm service\n   */\n  async init(): Promise<void> {\n    if (this.initialized) {\n      return;\n    }\n    \n    try {\n      // Ensure data directory exists\n      await ensureDirectory(this.dataDir);\n      \n      // Load existing swarms\n      await this.loadSwarms();\n      \n      this.initialized = true;\n      this.logger.info('Swarm service initialized');\n    } catch (error) {\n      this.logger.error('Failed to initialize swarm service:', error);\n      throw error;\n    }\n  }\n  \n  /**\n   * Dispose the swarm service\n   */\n  async dispose(): Promise<void> {\n    if (!this.initialized) {\n      return;\n    }\n    \n    try {\n      // Stop all running swarms\n      const stopPromises = Array.from(this.swarms.keys()).map(id => \n        this.stopSwarm(id)\n      );\n      \n      await Promise.all(stopPromises);\n      \n      this.swarms.clear();\n      this.processes.clear();\n      this.initialized = false;\n      \n      this.logger.info('Swarm service disposed');\n    } catch (error) {\n      this.logger.error('Error disposing swarm service:', error);\n    }\n  }\n  \n  /**\n   * Health check for the service\n   */\n  async healthCheck(): Promise<{ healthy: boolean; message?: string }> {\n    try {\n      if (!this.initialized) {\n        return {\n          healthy: false,\n          message: 'Service not initialized',\n        };\n      }\n      \n      // Check if data directory is accessible\n      if (!existsSync(this.dataDir)) {\n        return {\n          healthy: false,\n          message: 'Data directory not accessible',\n        };\n      }\n      \n      // Check running swarms\n      const runningSwarms = Array.from(this.swarms.values())\n        .filter(swarm => swarm.status === 'running').length;\n      \n      return {\n        healthy: true,\n        message: `${runningSwarms} swarms running`,\n      };\n    } catch (error) {\n      return {\n        healthy: false,\n        message: (error as Error).message,\n      };\n    }\n  }\n  \n  /**\n   * Start a new swarm\n   */\n  async startSwarm(config: SwarmConfig): Promise<Result<SwarmOperationResult>> {\n    try {\n      this.logger.info(`Starting swarm: ${config.id}`);\n      \n      // Check if swarm already exists\n      if (this.swarms.has(config.id)) {\n        const existing = this.swarms.get(config.id)!;\n        if (existing.status === 'running') {\n          return {\n            success: false,\n            error: new Error(`Swarm ${config.id} is already running`),\n          };\n        }\n      }\n      \n      // Create swarm status\n      const swarmStatus: SwarmStatus = {\n        id: config.id,\n        status: 'starting',\n        activeAgents: 0,\n        totalAgents: 0,\n        config,\n        startTime: new Date(),\n        uptime: 0,\n        activeTasks: 0,\n        completedTasks: 0,\n        errorCount: 0,\n        resourceUsage: {\n          memory: 0,\n          cpu: 0,\n          disk: 0,\n        },\n      };\n      \n      this.swarms.set(config.id, swarmStatus);\n      \n      // Start swarm process (mock implementation - would integrate with actual swarm system)\n      const process = await this.spawnSwarmProcess(config);\n      this.processes.set(config.id, process);\n      \n      // Update status\n      swarmStatus.status = 'running';\n      this.swarms.set(config.id, swarmStatus);\n      \n      // Save swarm state\n      await this.saveSwarmState(config.id);\n      \n      this.emit('swarmStarted', { swarmId: config.id, config });\n      \n      return {\n        success: true,\n        data: {\n          success: true,\n          message: `Swarm ${config.id} started successfully`,\n          details: swarmStatus,\n        },\n      };\n    } catch (error) {\n      this.logger.error(`Failed to start swarm ${config.id}:`, error);\n      return {\n        success: false,\n        error: error as Error,\n      };\n    }\n  }\n  \n  /**\n   * Stop a swarm\n   */\n  async stopSwarm(swarmId: string): Promise<Result<SwarmOperationResult>> {\n    try {\n      this.logger.info(`Stopping swarm: ${swarmId}`);\n      \n      const swarm = this.swarms.get(swarmId);\n      if (!swarm) {\n        return {\n          success: false,\n          error: new Error(`Swarm ${swarmId} not found`),\n        };\n      }\n      \n      if (swarm.status === 'stopped') {\n        return {\n          success: true,\n          data: {\n            success: true,\n            message: `Swarm ${swarmId} is already stopped`,\n          },\n        };\n      }\n      \n      // Update status\n      swarm.status = 'stopping';\n      this.swarms.set(swarmId, swarm);\n      \n      // Stop process\n      const process = this.processes.get(swarmId);\n      if (process && !process.killed) {\n        process.kill('SIGTERM');\n        \n        // Wait for graceful shutdown or force kill after timeout\n        await new Promise<void>((resolve) => {\n          const timeout = setTimeout(() => {\n            if (!process.killed) {\n              process.kill('SIGKILL');\n            }\n            resolve();\n          }, 5000);\n          \n          process.on('exit', () => {\n            clearTimeout(timeout);\n            resolve();\n          });\n        });\n      }\n      \n      // Update status\n      swarm.status = 'stopped';\n      swarm.activeAgents = 0;\n      this.swarms.set(swarmId, swarm);\n      this.processes.delete(swarmId);\n      \n      // Save swarm state\n      await this.saveSwarmState(swarmId);\n      \n      this.emit('swarmStopped', { swarmId });\n      \n      return {\n        success: true,\n        data: {\n          success: true,\n          message: `Swarm ${swarmId} stopped successfully`,\n        },\n      };\n    } catch (error) {\n      this.logger.error(`Failed to stop swarm ${swarmId}:`, error);\n      return {\n        success: false,\n        error: error as Error,\n      };\n    }\n  }\n  \n  /**\n   * Get swarm status\n   */\n  async getSwarmStatus(swarmId: string): Promise<Result<SwarmStatus>> {\n    try {\n      const swarm = this.swarms.get(swarmId);\n      if (!swarm) {\n        return {\n          success: false,\n          error: new Error(`Swarm ${swarmId} not found`),\n        };\n      }\n      \n      // Update uptime\n      if (swarm.startTime && swarm.status === 'running') {\n        swarm.uptime = Date.now() - swarm.startTime.getTime();\n      }\n      \n      return {\n        success: true,\n        data: swarm,\n      };\n    } catch (error) {\n      return {\n        success: false,\n        error: error as Error,\n      };\n    }\n  }\n  \n  /**\n   * List all swarms\n   */\n  async listSwarms(): Promise<Result<SwarmStatus[]>> {\n    try {\n      const swarms = Array.from(this.swarms.values());\n      \n      // Update uptimes\n      swarms.forEach(swarm => {\n        if (swarm.startTime && swarm.status === 'running') {\n          swarm.uptime = Date.now() - swarm.startTime.getTime();\n        }\n      });\n      \n      return {\n        success: true,\n        data: swarms,\n      };\n    } catch (error) {\n      return {\n        success: false,\n        error: error as Error,\n      };\n    }\n  }\n  \n  /**\n   * Get swarm metrics\n   */\n  async getSwarmMetrics(swarmId: string): Promise<Result<SwarmMetrics>> {\n    try {\n      const swarm = this.swarms.get(swarmId);\n      if (!swarm) {\n        return {\n          success: false,\n          error: new Error(`Swarm ${swarmId} not found`),\n        };\n      }\n      \n      // Mock metrics - would integrate with actual monitoring system\n      const metrics: SwarmMetrics = {\n        timestamp: new Date(),\n        performance: {\n          throughput: Math.random() * 100,\n          latency: Math.random() * 50,\n          errorRate: Math.random() * 5,\n          successRate: 95 + Math.random() * 5,\n        },\n        resources: {\n          memoryUsage: swarm.resourceUsage.memory,\n          cpuUsage: swarm.resourceUsage.cpu,\n          diskUsage: swarm.resourceUsage.disk,\n          networkIO: Math.random() * 1000,\n        },\n        agents: {\n          active: swarm.activeAgents,\n          idle: Math.floor(swarm.activeAgents * 0.3),\n          busy: Math.floor(swarm.activeAgents * 0.7),\n          failed: 0,\n        },\n        tasks: {\n          queued: Math.floor(Math.random() * 10),\n          running: swarm.activeTasks,\n          completed: swarm.completedTasks,\n          failed: swarm.errorCount,\n        },\n      };\n      \n      return {\n        success: true,\n        data: metrics,\n      };\n    } catch (error) {\n      return {\n        success: false,\n        error: error as Error,\n      };\n    }\n  }\n  \n  /**\n   * Spawn agent in swarm\n   */\n  async spawnAgent(\n    swarmId: string,\n    agentConfig: Partial<SwarmAgent>\n  ): Promise<Result<SwarmAgent>> {\n    try {\n      const swarm = this.swarms.get(swarmId);\n      if (!swarm) {\n        return {\n          success: false,\n          error: new Error(`Swarm ${swarmId} not found`),\n        };\n      }\n      \n      if (swarm.status !== 'running') {\n        return {\n          success: false,\n          error: new Error(`Swarm ${swarmId} is not running`),\n        };\n      }\n      \n      if (swarm.totalAgents >= swarm.config.maxAgents) {\n        return {\n          success: false,\n          error: new Error(`Swarm ${swarmId} has reached maximum agent limit`),\n        };\n      }\n      \n      const agent: SwarmAgent = {\n        id: agentConfig.id || `agent-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`,\n        type: agentConfig.type || 'worker',\n        name: agentConfig.name || 'Unnamed Agent',\n        status: 'active',\n        config: agentConfig.config || {},\n        createdAt: new Date(),\n        metrics: {\n          tasksCompleted: 0,\n          tasksActive: 0,\n          uptime: 0,\n          memoryUsage: 0,\n          cpuUsage: 0,\n        },\n      };\n      \n      // Update swarm counts\n      swarm.totalAgents++;\n      swarm.activeAgents++;\n      this.swarms.set(swarmId, swarm);\n      \n      // Save state\n      await this.saveSwarmState(swarmId);\n      \n      this.emit('agentSpawned', { swarmId, agent });\n      \n      return {\n        success: true,\n        data: agent,\n      };\n    } catch (error) {\n      return {\n        success: false,\n        error: error as Error,\n      };\n    }\n  }\n  \n  /**\n   * Spawn swarm process (mock implementation)\n   */\n  private async spawnSwarmProcess(config: SwarmConfig): Promise<ChildProcess> {\n    // This would integrate with the actual claude-flow swarm system\n    // For now, we'll create a mock process\n    const process = spawn('node', ['-e', `\n      console.log('Swarm ${config.id} starting...');\n      setInterval(() => {\n        console.log('Swarm ${config.id} heartbeat');\n      }, 30000);\n      \n      process.on('SIGTERM', () => {\n        console.log('Swarm ${config.id} shutting down...');\n        process.exit(0);\n      });\n    `], {\n      detached: false,\n      stdio: ['ignore', 'pipe', 'pipe'],\n    });\n    \n    process.stdout?.on('data', (data) => {\n      this.logger.debug(`Swarm ${config.id}:`, data.toString().trim());\n    });\n    \n    process.stderr?.on('data', (data) => {\n      this.logger.error(`Swarm ${config.id} error:`, data.toString().trim());\n    });\n    \n    process.on('exit', (code) => {\n      this.logger.info(`Swarm ${config.id} exited with code ${code}`);\n      const swarm = this.swarms.get(config.id);\n      if (swarm) {\n        swarm.status = 'stopped';\n        swarm.activeAgents = 0;\n        this.swarms.set(config.id, swarm);\n      }\n      this.emit('swarmExited', { swarmId: config.id, code });\n    });\n    \n    return process;\n  }\n  \n  /**\n   * Load existing swarms from storage\n   */\n  private async loadSwarms(): Promise<void> {\n    try {\n      const swarmFiles = existsSync(this.dataDir) ? \n        require('fs').readdirSync(this.dataDir).filter((f: string) => f.endsWith('.json')) : [];\n      \n      for (const file of swarmFiles) {\n        try {\n          const filePath = join(this.dataDir, file);\n          const data = await readFile(filePath, 'utf8');\n          const swarm = JSON.parse(data) as SwarmStatus;\n          \n          // Mark stopped swarms as stopped (they don't survive restarts)\n          if (swarm.status === 'running') {\n            swarm.status = 'stopped';\n            swarm.activeAgents = 0;\n          }\n          \n          this.swarms.set(swarm.id, swarm);\n        } catch (error) {\n          this.logger.warn(`Failed to load swarm from ${file}:`, error);\n        }\n      }\n    } catch (error) {\n      this.logger.error('Failed to load swarms:', error);\n    }\n  }\n  \n  /**\n   * Save swarm state to storage\n   */\n  private async saveSwarmState(swarmId: string): Promise<void> {\n    try {\n      const swarm = this.swarms.get(swarmId);\n      if (!swarm) {\n        return;\n      }\n      \n      const filePath = join(this.dataDir, `${swarmId}.json`);\n      await writeFile(filePath, JSON.stringify(swarm, null, 2));\n    } catch (error) {\n      this.logger.error(`Failed to save swarm state for ${swarmId}:`, error);\n    }\n  }\n}\n"],"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","ignoreList":[]}