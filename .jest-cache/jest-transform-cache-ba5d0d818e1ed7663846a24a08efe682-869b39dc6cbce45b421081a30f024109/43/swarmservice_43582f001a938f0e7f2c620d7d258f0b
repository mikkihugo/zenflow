26823f11e3cdd2d4beaac8edfb0709dd
/* istanbul ignore next */
function cov_2hlhh53urz() {
  var path = "/home/mhugo/code/claude-code-flow/src/cli/services/swarm-service.ts";
  var hash = "26c262774e274ae708d4c6af0428bf23bde695f4";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/home/mhugo/code/claude-code-flow/src/cli/services/swarm-service.ts",
    statementMap: {
      "0": {
        start: {
          line: 19,
          column: 13
        },
        end: {
          line: 19,
          column: 22
        }
      },
      "1": {
        start: {
          line: 20,
          column: 16
        },
        end: {
          line: 20,
          column: 25
        }
      },
      "2": {
        start: {
          line: 22,
          column: 18
        },
        end: {
          line: 22,
          column: 23
        }
      },
      "3": {
        start: {
          line: 24,
          column: 8
        },
        end: {
          line: 24,
          column: 16
        }
      },
      "4": {
        start: {
          line: 25,
          column: 8
        },
        end: {
          line: 25,
          column: 63
        }
      },
      "5": {
        start: {
          line: 26,
          column: 8
        },
        end: {
          line: 26,
          column: 80
        }
      },
      "6": {
        start: {
          line: 32,
          column: 8
        },
        end: {
          line: 34,
          column: 9
        }
      },
      "7": {
        start: {
          line: 33,
          column: 12
        },
        end: {
          line: 33,
          column: 19
        }
      },
      "8": {
        start: {
          line: 35,
          column: 8
        },
        end: {
          line: 46,
          column: 9
        }
      },
      "9": {
        start: {
          line: 37,
          column: 12
        },
        end: {
          line: 37,
          column: 48
        }
      },
      "10": {
        start: {
          line: 39,
          column: 12
        },
        end: {
          line: 39,
          column: 36
        }
      },
      "11": {
        start: {
          line: 40,
          column: 12
        },
        end: {
          line: 40,
          column: 36
        }
      },
      "12": {
        start: {
          line: 41,
          column: 12
        },
        end: {
          line: 41,
          column: 58
        }
      },
      "13": {
        start: {
          line: 44,
          column: 12
        },
        end: {
          line: 44,
          column: 76
        }
      },
      "14": {
        start: {
          line: 45,
          column: 12
        },
        end: {
          line: 45,
          column: 24
        }
      },
      "15": {
        start: {
          line: 52,
          column: 8
        },
        end: {
          line: 54,
          column: 9
        }
      },
      "16": {
        start: {
          line: 53,
          column: 12
        },
        end: {
          line: 53,
          column: 19
        }
      },
      "17": {
        start: {
          line: 55,
          column: 8
        },
        end: {
          line: 66,
          column: 9
        }
      },
      "18": {
        start: {
          line: 57,
          column: 33
        },
        end: {
          line: 57,
          column: 93
        }
      },
      "19": {
        start: {
          line: 57,
          column: 74
        },
        end: {
          line: 57,
          column: 92
        }
      },
      "20": {
        start: {
          line: 58,
          column: 12
        },
        end: {
          line: 58,
          column: 44
        }
      },
      "21": {
        start: {
          line: 59,
          column: 12
        },
        end: {
          line: 59,
          column: 32
        }
      },
      "22": {
        start: {
          line: 60,
          column: 12
        },
        end: {
          line: 60,
          column: 35
        }
      },
      "23": {
        start: {
          line: 61,
          column: 12
        },
        end: {
          line: 61,
          column: 37
        }
      },
      "24": {
        start: {
          line: 62,
          column: 12
        },
        end: {
          line: 62,
          column: 55
        }
      },
      "25": {
        start: {
          line: 65,
          column: 12
        },
        end: {
          line: 65,
          column: 71
        }
      },
      "26": {
        start: {
          line: 72,
          column: 8
        },
        end: {
          line: 99,
          column: 9
        }
      },
      "27": {
        start: {
          line: 73,
          column: 12
        },
        end: {
          line: 78,
          column: 13
        }
      },
      "28": {
        start: {
          line: 74,
          column: 16
        },
        end: {
          line: 77,
          column: 18
        }
      },
      "29": {
        start: {
          line: 80,
          column: 12
        },
        end: {
          line: 85,
          column: 13
        }
      },
      "30": {
        start: {
          line: 81,
          column: 16
        },
        end: {
          line: 84,
          column: 18
        }
      },
      "31": {
        start: {
          line: 87,
          column: 34
        },
        end: {
          line: 88,
          column: 67
        }
      },
      "32": {
        start: {
          line: 88,
          column: 33
        },
        end: {
          line: 88,
          column: 59
        }
      },
      "33": {
        start: {
          line: 89,
          column: 12
        },
        end: {
          line: 92,
          column: 14
        }
      },
      "34": {
        start: {
          line: 95,
          column: 12
        },
        end: {
          line: 98,
          column: 14
        }
      },
      "35": {
        start: {
          line: 105,
          column: 8
        },
        end: {
          line: 160,
          column: 9
        }
      },
      "36": {
        start: {
          line: 106,
          column: 12
        },
        end: {
          line: 106,
          column: 61
        }
      },
      "37": {
        start: {
          line: 108,
          column: 12
        },
        end: {
          line: 116,
          column: 13
        }
      },
      "38": {
        start: {
          line: 109,
          column: 33
        },
        end: {
          line: 109,
          column: 59
        }
      },
      "39": {
        start: {
          line: 110,
          column: 16
        },
        end: {
          line: 115,
          column: 17
        }
      },
      "40": {
        start: {
          line: 111,
          column: 20
        },
        end: {
          line: 114,
          column: 22
        }
      },
      "41": {
        start: {
          line: 118,
          column: 32
        },
        end: {
          line: 134,
          column: 13
        }
      },
      "42": {
        start: {
          line: 135,
          column: 12
        },
        end: {
          line: 135,
          column: 52
        }
      },
      "43": {
        start: {
          line: 137,
          column: 28
        },
        end: {
          line: 137,
          column: 64
        }
      },
      "44": {
        start: {
          line: 138,
          column: 12
        },
        end: {
          line: 138,
          column: 51
        }
      },
      "45": {
        start: {
          line: 140,
          column: 12
        },
        end: {
          line: 140,
          column: 43
        }
      },
      "46": {
        start: {
          line: 141,
          column: 12
        },
        end: {
          line: 141,
          column: 52
        }
      },
      "47": {
        start: {
          line: 143,
          column: 12
        },
        end: {
          line: 143,
          column: 49
        }
      },
      "48": {
        start: {
          line: 144,
          column: 12
        },
        end: {
          line: 144,
          column: 70
        }
      },
      "49": {
        start: {
          line: 145,
          column: 12
        },
        end: {
          line: 152,
          column: 14
        }
      },
      "50": {
        start: {
          line: 155,
          column: 12
        },
        end: {
          line: 155,
          column: 76
        }
      },
      "51": {
        start: {
          line: 156,
          column: 12
        },
        end: {
          line: 159,
          column: 14
        }
      },
      "52": {
        start: {
          line: 166,
          column: 8
        },
        end: {
          line: 227,
          column: 9
        }
      },
      "53": {
        start: {
          line: 167,
          column: 12
        },
        end: {
          line: 167,
          column: 59
        }
      },
      "54": {
        start: {
          line: 168,
          column: 26
        },
        end: {
          line: 168,
          column: 50
        }
      },
      "55": {
        start: {
          line: 169,
          column: 12
        },
        end: {
          line: 174,
          column: 13
        }
      },
      "56": {
        start: {
          line: 170,
          column: 16
        },
        end: {
          line: 173,
          column: 18
        }
      },
      "57": {
        start: {
          line: 175,
          column: 12
        },
        end: {
          line: 183,
          column: 13
        }
      },
      "58": {
        start: {
          line: 176,
          column: 16
        },
        end: {
          line: 182,
          column: 18
        }
      },
      "59": {
        start: {
          line: 185,
          column: 12
        },
        end: {
          line: 185,
          column: 38
        }
      },
      "60": {
        start: {
          line: 186,
          column: 12
        },
        end: {
          line: 186,
          column: 44
        }
      },
      "61": {
        start: {
          line: 188,
          column: 28
        },
        end: {
          line: 188,
          column: 55
        }
      },
      "62": {
        start: {
          line: 189,
          column: 12
        },
        end: {
          line: 204,
          column: 13
        }
      },
      "63": {
        start: {
          line: 190,
          column: 16
        },
        end: {
          line: 190,
          column: 40
        }
      },
      "64": {
        start: {
          line: 192,
          column: 16
        },
        end: {
          line: 203,
          column: 19
        }
      },
      "65": {
        start: {
          line: 193,
          column: 36
        },
        end: {
          line: 198,
          column: 28
        }
      },
      "66": {
        start: {
          line: 194,
          column: 24
        },
        end: {
          line: 196,
          column: 25
        }
      },
      "67": {
        start: {
          line: 195,
          column: 28
        },
        end: {
          line: 195,
          column: 52
        }
      },
      "68": {
        start: {
          line: 197,
          column: 24
        },
        end: {
          line: 197,
          column: 34
        }
      },
      "69": {
        start: {
          line: 199,
          column: 20
        },
        end: {
          line: 202,
          column: 23
        }
      },
      "70": {
        start: {
          line: 200,
          column: 24
        },
        end: {
          line: 200,
          column: 46
        }
      },
      "71": {
        start: {
          line: 201,
          column: 24
        },
        end: {
          line: 201,
          column: 34
        }
      },
      "72": {
        start: {
          line: 206,
          column: 12
        },
        end: {
          line: 206,
          column: 37
        }
      },
      "73": {
        start: {
          line: 207,
          column: 12
        },
        end: {
          line: 207,
          column: 35
        }
      },
      "74": {
        start: {
          line: 208,
          column: 12
        },
        end: {
          line: 208,
          column: 44
        }
      },
      "75": {
        start: {
          line: 209,
          column: 12
        },
        end: {
          line: 209,
          column: 43
        }
      },
      "76": {
        start: {
          line: 211,
          column: 12
        },
        end: {
          line: 211,
          column: 47
        }
      },
      "77": {
        start: {
          line: 212,
          column: 12
        },
        end: {
          line: 212,
          column: 51
        }
      },
      "78": {
        start: {
          line: 213,
          column: 12
        },
        end: {
          line: 219,
          column: 14
        }
      },
      "79": {
        start: {
          line: 222,
          column: 12
        },
        end: {
          line: 222,
          column: 73
        }
      },
      "80": {
        start: {
          line: 223,
          column: 12
        },
        end: {
          line: 226,
          column: 14
        }
      },
      "81": {
        start: {
          line: 233,
          column: 8
        },
        end: {
          line: 255,
          column: 9
        }
      },
      "82": {
        start: {
          line: 234,
          column: 26
        },
        end: {
          line: 234,
          column: 50
        }
      },
      "83": {
        start: {
          line: 235,
          column: 12
        },
        end: {
          line: 240,
          column: 13
        }
      },
      "84": {
        start: {
          line: 236,
          column: 16
        },
        end: {
          line: 239,
          column: 18
        }
      },
      "85": {
        start: {
          line: 242,
          column: 12
        },
        end: {
          line: 244,
          column: 13
        }
      },
      "86": {
        start: {
          line: 243,
          column: 16
        },
        end: {
          line: 243,
          column: 70
        }
      },
      "87": {
        start: {
          line: 245,
          column: 12
        },
        end: {
          line: 248,
          column: 14
        }
      },
      "88": {
        start: {
          line: 251,
          column: 12
        },
        end: {
          line: 254,
          column: 14
        }
      },
      "89": {
        start: {
          line: 261,
          column: 8
        },
        end: {
          line: 279,
          column: 9
        }
      },
      "90": {
        start: {
          line: 262,
          column: 27
        },
        end: {
          line: 262,
          column: 59
        }
      },
      "91": {
        start: {
          line: 264,
          column: 12
        },
        end: {
          line: 268,
          column: 15
        }
      },
      "92": {
        start: {
          line: 265,
          column: 16
        },
        end: {
          line: 267,
          column: 17
        }
      },
      "93": {
        start: {
          line: 266,
          column: 20
        },
        end: {
          line: 266,
          column: 74
        }
      },
      "94": {
        start: {
          line: 269,
          column: 12
        },
        end: {
          line: 272,
          column: 14
        }
      },
      "95": {
        start: {
          line: 275,
          column: 12
        },
        end: {
          line: 278,
          column: 14
        }
      },
      "96": {
        start: {
          line: 285,
          column: 8
        },
        end: {
          line: 331,
          column: 9
        }
      },
      "97": {
        start: {
          line: 286,
          column: 26
        },
        end: {
          line: 286,
          column: 50
        }
      },
      "98": {
        start: {
          line: 287,
          column: 12
        },
        end: {
          line: 292,
          column: 13
        }
      },
      "99": {
        start: {
          line: 288,
          column: 16
        },
        end: {
          line: 291,
          column: 18
        }
      },
      "100": {
        start: {
          line: 294,
          column: 28
        },
        end: {
          line: 320,
          column: 13
        }
      },
      "101": {
        start: {
          line: 321,
          column: 12
        },
        end: {
          line: 324,
          column: 14
        }
      },
      "102": {
        start: {
          line: 327,
          column: 12
        },
        end: {
          line: 330,
          column: 14
        }
      },
      "103": {
        start: {
          line: 337,
          column: 8
        },
        end: {
          line: 389,
          column: 9
        }
      },
      "104": {
        start: {
          line: 338,
          column: 26
        },
        end: {
          line: 338,
          column: 50
        }
      },
      "105": {
        start: {
          line: 339,
          column: 12
        },
        end: {
          line: 344,
          column: 13
        }
      },
      "106": {
        start: {
          line: 340,
          column: 16
        },
        end: {
          line: 343,
          column: 18
        }
      },
      "107": {
        start: {
          line: 345,
          column: 12
        },
        end: {
          line: 350,
          column: 13
        }
      },
      "108": {
        start: {
          line: 346,
          column: 16
        },
        end: {
          line: 349,
          column: 18
        }
      },
      "109": {
        start: {
          line: 351,
          column: 12
        },
        end: {
          line: 356,
          column: 13
        }
      },
      "110": {
        start: {
          line: 352,
          column: 16
        },
        end: {
          line: 355,
          column: 18
        }
      },
      "111": {
        start: {
          line: 357,
          column: 26
        },
        end: {
          line: 371,
          column: 13
        }
      },
      "112": {
        start: {
          line: 373,
          column: 12
        },
        end: {
          line: 373,
          column: 32
        }
      },
      "113": {
        start: {
          line: 374,
          column: 12
        },
        end: {
          line: 374,
          column: 33
        }
      },
      "114": {
        start: {
          line: 375,
          column: 12
        },
        end: {
          line: 375,
          column: 44
        }
      },
      "115": {
        start: {
          line: 377,
          column: 12
        },
        end: {
          line: 377,
          column: 47
        }
      },
      "116": {
        start: {
          line: 378,
          column: 12
        },
        end: {
          line: 378,
          column: 58
        }
      },
      "117": {
        start: {
          line: 379,
          column: 12
        },
        end: {
          line: 382,
          column: 14
        }
      },
      "118": {
        start: {
          line: 385,
          column: 12
        },
        end: {
          line: 388,
          column: 14
        }
      },
      "119": {
        start: {
          line: 397,
          column: 24
        },
        end: {
          line: 410,
          column: 10
        }
      },
      "120": {
        start: {
          line: 411,
          column: 8
        },
        end: {
          line: 413,
          column: 11
        }
      },
      "121": {
        start: {
          line: 412,
          column: 12
        },
        end: {
          line: 412,
          column: 77
        }
      },
      "122": {
        start: {
          line: 414,
          column: 8
        },
        end: {
          line: 416,
          column: 11
        }
      },
      "123": {
        start: {
          line: 415,
          column: 12
        },
        end: {
          line: 415,
          column: 83
        }
      },
      "124": {
        start: {
          line: 417,
          column: 8
        },
        end: {
          line: 426,
          column: 11
        }
      },
      "125": {
        start: {
          line: 418,
          column: 12
        },
        end: {
          line: 418,
          column: 76
        }
      },
      "126": {
        start: {
          line: 419,
          column: 26
        },
        end: {
          line: 419,
          column: 52
        }
      },
      "127": {
        start: {
          line: 420,
          column: 12
        },
        end: {
          line: 424,
          column: 13
        }
      },
      "128": {
        start: {
          line: 421,
          column: 16
        },
        end: {
          line: 421,
          column: 41
        }
      },
      "129": {
        start: {
          line: 422,
          column: 16
        },
        end: {
          line: 422,
          column: 39
        }
      },
      "130": {
        start: {
          line: 423,
          column: 16
        },
        end: {
          line: 423,
          column: 50
        }
      },
      "131": {
        start: {
          line: 425,
          column: 12
        },
        end: {
          line: 425,
          column: 67
        }
      },
      "132": {
        start: {
          line: 427,
          column: 8
        },
        end: {
          line: 427,
          column: 23
        }
      },
      "133": {
        start: {
          line: 433,
          column: 8
        },
        end: {
          line: 455,
          column: 9
        }
      },
      "134": {
        start: {
          line: 434,
          column: 31
        },
        end: {
          line: 435,
          column: 95
        }
      },
      "135": {
        start: {
          line: 435,
          column: 70
        },
        end: {
          line: 435,
          column: 89
        }
      },
      "136": {
        start: {
          line: 436,
          column: 12
        },
        end: {
          line: 451,
          column: 13
        }
      },
      "137": {
        start: {
          line: 437,
          column: 16
        },
        end: {
          line: 450,
          column: 17
        }
      },
      "138": {
        start: {
          line: 438,
          column: 37
        },
        end: {
          line: 438,
          column: 61
        }
      },
      "139": {
        start: {
          line: 439,
          column: 33
        },
        end: {
          line: 439,
          column: 65
        }
      },
      "140": {
        start: {
          line: 440,
          column: 34
        },
        end: {
          line: 440,
          column: 50
        }
      },
      "141": {
        start: {
          line: 442,
          column: 20
        },
        end: {
          line: 445,
          column: 21
        }
      },
      "142": {
        start: {
          line: 443,
          column: 24
        },
        end: {
          line: 443,
          column: 49
        }
      },
      "143": {
        start: {
          line: 444,
          column: 24
        },
        end: {
          line: 444,
          column: 47
        }
      },
      "144": {
        start: {
          line: 446,
          column: 20
        },
        end: {
          line: 446,
          column: 53
        }
      },
      "145": {
        start: {
          line: 449,
          column: 20
        },
        end: {
          line: 449,
          column: 82
        }
      },
      "146": {
        start: {
          line: 454,
          column: 12
        },
        end: {
          line: 454,
          column: 63
        }
      },
      "147": {
        start: {
          line: 461,
          column: 8
        },
        end: {
          line: 471,
          column: 9
        }
      },
      "148": {
        start: {
          line: 462,
          column: 26
        },
        end: {
          line: 462,
          column: 50
        }
      },
      "149": {
        start: {
          line: 463,
          column: 12
        },
        end: {
          line: 465,
          column: 13
        }
      },
      "150": {
        start: {
          line: 464,
          column: 16
        },
        end: {
          line: 464,
          column: 23
        }
      },
      "151": {
        start: {
          line: 466,
          column: 29
        },
        end: {
          line: 466,
          column: 66
        }
      },
      "152": {
        start: {
          line: 467,
          column: 12
        },
        end: {
          line: 467,
          column: 70
        }
      },
      "153": {
        start: {
          line: 470,
          column: 12
        },
        end: {
          line: 470,
          column: 83
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 23,
            column: 4
          },
          end: {
            line: 23,
            column: 5
          }
        },
        loc: {
          start: {
            line: 23,
            column: 24
          },
          end: {
            line: 27,
            column: 5
          }
        },
        line: 23
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 31,
            column: 4
          },
          end: {
            line: 31,
            column: 5
          }
        },
        loc: {
          start: {
            line: 31,
            column: 17
          },
          end: {
            line: 47,
            column: 5
          }
        },
        line: 31
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 51,
            column: 4
          },
          end: {
            line: 51,
            column: 5
          }
        },
        loc: {
          start: {
            line: 51,
            column: 20
          },
          end: {
            line: 67,
            column: 5
          }
        },
        line: 51
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 57,
            column: 68
          },
          end: {
            line: 57,
            column: 69
          }
        },
        loc: {
          start: {
            line: 57,
            column: 74
          },
          end: {
            line: 57,
            column: 92
          }
        },
        line: 57
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 71,
            column: 4
          },
          end: {
            line: 71,
            column: 5
          }
        },
        loc: {
          start: {
            line: 71,
            column: 24
          },
          end: {
            line: 100,
            column: 5
          }
        },
        line: 71
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 88,
            column: 24
          },
          end: {
            line: 88,
            column: 25
          }
        },
        loc: {
          start: {
            line: 88,
            column: 33
          },
          end: {
            line: 88,
            column: 59
          }
        },
        line: 88
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 104,
            column: 4
          },
          end: {
            line: 104,
            column: 5
          }
        },
        loc: {
          start: {
            line: 104,
            column: 29
          },
          end: {
            line: 161,
            column: 5
          }
        },
        line: 104
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 165,
            column: 4
          },
          end: {
            line: 165,
            column: 5
          }
        },
        loc: {
          start: {
            line: 165,
            column: 29
          },
          end: {
            line: 228,
            column: 5
          }
        },
        line: 165
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 192,
            column: 34
          },
          end: {
            line: 192,
            column: 35
          }
        },
        loc: {
          start: {
            line: 192,
            column: 47
          },
          end: {
            line: 203,
            column: 17
          }
        },
        line: 192
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 193,
            column: 47
          },
          end: {
            line: 193,
            column: 48
          }
        },
        loc: {
          start: {
            line: 193,
            column: 53
          },
          end: {
            line: 198,
            column: 21
          }
        },
        line: 193
      },
      "10": {
        name: "(anonymous_10)",
        decl: {
          start: {
            line: 199,
            column: 39
          },
          end: {
            line: 199,
            column: 40
          }
        },
        loc: {
          start: {
            line: 199,
            column: 45
          },
          end: {
            line: 202,
            column: 21
          }
        },
        line: 199
      },
      "11": {
        name: "(anonymous_11)",
        decl: {
          start: {
            line: 232,
            column: 4
          },
          end: {
            line: 232,
            column: 5
          }
        },
        loc: {
          start: {
            line: 232,
            column: 34
          },
          end: {
            line: 256,
            column: 5
          }
        },
        line: 232
      },
      "12": {
        name: "(anonymous_12)",
        decl: {
          start: {
            line: 260,
            column: 4
          },
          end: {
            line: 260,
            column: 5
          }
        },
        loc: {
          start: {
            line: 260,
            column: 23
          },
          end: {
            line: 280,
            column: 5
          }
        },
        line: 260
      },
      "13": {
        name: "(anonymous_13)",
        decl: {
          start: {
            line: 264,
            column: 27
          },
          end: {
            line: 264,
            column: 28
          }
        },
        loc: {
          start: {
            line: 264,
            column: 36
          },
          end: {
            line: 268,
            column: 13
          }
        },
        line: 264
      },
      "14": {
        name: "(anonymous_14)",
        decl: {
          start: {
            line: 284,
            column: 4
          },
          end: {
            line: 284,
            column: 5
          }
        },
        loc: {
          start: {
            line: 284,
            column: 35
          },
          end: {
            line: 332,
            column: 5
          }
        },
        line: 284
      },
      "15": {
        name: "(anonymous_15)",
        decl: {
          start: {
            line: 336,
            column: 4
          },
          end: {
            line: 336,
            column: 5
          }
        },
        loc: {
          start: {
            line: 336,
            column: 43
          },
          end: {
            line: 390,
            column: 5
          }
        },
        line: 336
      },
      "16": {
        name: "(anonymous_16)",
        decl: {
          start: {
            line: 394,
            column: 4
          },
          end: {
            line: 394,
            column: 5
          }
        },
        loc: {
          start: {
            line: 394,
            column: 36
          },
          end: {
            line: 428,
            column: 5
          }
        },
        line: 394
      },
      "17": {
        name: "(anonymous_17)",
        decl: {
          start: {
            line: 411,
            column: 35
          },
          end: {
            line: 411,
            column: 36
          }
        },
        loc: {
          start: {
            line: 411,
            column: 45
          },
          end: {
            line: 413,
            column: 9
          }
        },
        line: 411
      },
      "18": {
        name: "(anonymous_18)",
        decl: {
          start: {
            line: 414,
            column: 35
          },
          end: {
            line: 414,
            column: 36
          }
        },
        loc: {
          start: {
            line: 414,
            column: 45
          },
          end: {
            line: 416,
            column: 9
          }
        },
        line: 414
      },
      "19": {
        name: "(anonymous_19)",
        decl: {
          start: {
            line: 417,
            column: 27
          },
          end: {
            line: 417,
            column: 28
          }
        },
        loc: {
          start: {
            line: 417,
            column: 37
          },
          end: {
            line: 426,
            column: 9
          }
        },
        line: 417
      },
      "20": {
        name: "(anonymous_20)",
        decl: {
          start: {
            line: 432,
            column: 4
          },
          end: {
            line: 432,
            column: 5
          }
        },
        loc: {
          start: {
            line: 432,
            column: 23
          },
          end: {
            line: 456,
            column: 5
          }
        },
        line: 432
      },
      "21": {
        name: "(anonymous_21)",
        decl: {
          start: {
            line: 435,
            column: 63
          },
          end: {
            line: 435,
            column: 64
          }
        },
        loc: {
          start: {
            line: 435,
            column: 70
          },
          end: {
            line: 435,
            column: 89
          }
        },
        line: 435
      },
      "22": {
        name: "(anonymous_22)",
        decl: {
          start: {
            line: 460,
            column: 4
          },
          end: {
            line: 460,
            column: 5
          }
        },
        loc: {
          start: {
            line: 460,
            column: 34
          },
          end: {
            line: 472,
            column: 5
          }
        },
        line: 460
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 26,
            column: 23
          },
          end: {
            line: 26,
            column: 79
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 26,
            column: 23
          },
          end: {
            line: 26,
            column: 38
          }
        }, {
          start: {
            line: 26,
            column: 42
          },
          end: {
            line: 26,
            column: 79
          }
        }],
        line: 26
      },
      "1": {
        loc: {
          start: {
            line: 32,
            column: 8
          },
          end: {
            line: 34,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 32,
            column: 8
          },
          end: {
            line: 34,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 32
      },
      "2": {
        loc: {
          start: {
            line: 52,
            column: 8
          },
          end: {
            line: 54,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 52,
            column: 8
          },
          end: {
            line: 54,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 52
      },
      "3": {
        loc: {
          start: {
            line: 73,
            column: 12
          },
          end: {
            line: 78,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 73,
            column: 12
          },
          end: {
            line: 78,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 73
      },
      "4": {
        loc: {
          start: {
            line: 80,
            column: 12
          },
          end: {
            line: 85,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 80,
            column: 12
          },
          end: {
            line: 85,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 80
      },
      "5": {
        loc: {
          start: {
            line: 108,
            column: 12
          },
          end: {
            line: 116,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 108,
            column: 12
          },
          end: {
            line: 116,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 108
      },
      "6": {
        loc: {
          start: {
            line: 110,
            column: 16
          },
          end: {
            line: 115,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 110,
            column: 16
          },
          end: {
            line: 115,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 110
      },
      "7": {
        loc: {
          start: {
            line: 169,
            column: 12
          },
          end: {
            line: 174,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 169,
            column: 12
          },
          end: {
            line: 174,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 169
      },
      "8": {
        loc: {
          start: {
            line: 175,
            column: 12
          },
          end: {
            line: 183,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 175,
            column: 12
          },
          end: {
            line: 183,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 175
      },
      "9": {
        loc: {
          start: {
            line: 189,
            column: 12
          },
          end: {
            line: 204,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 189,
            column: 12
          },
          end: {
            line: 204,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 189
      },
      "10": {
        loc: {
          start: {
            line: 189,
            column: 16
          },
          end: {
            line: 189,
            column: 42
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 189,
            column: 16
          },
          end: {
            line: 189,
            column: 23
          }
        }, {
          start: {
            line: 189,
            column: 27
          },
          end: {
            line: 189,
            column: 42
          }
        }],
        line: 189
      },
      "11": {
        loc: {
          start: {
            line: 194,
            column: 24
          },
          end: {
            line: 196,
            column: 25
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 194,
            column: 24
          },
          end: {
            line: 196,
            column: 25
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 194
      },
      "12": {
        loc: {
          start: {
            line: 235,
            column: 12
          },
          end: {
            line: 240,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 235,
            column: 12
          },
          end: {
            line: 240,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 235
      },
      "13": {
        loc: {
          start: {
            line: 242,
            column: 12
          },
          end: {
            line: 244,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 242,
            column: 12
          },
          end: {
            line: 244,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 242
      },
      "14": {
        loc: {
          start: {
            line: 242,
            column: 16
          },
          end: {
            line: 242,
            column: 61
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 242,
            column: 16
          },
          end: {
            line: 242,
            column: 31
          }
        }, {
          start: {
            line: 242,
            column: 35
          },
          end: {
            line: 242,
            column: 61
          }
        }],
        line: 242
      },
      "15": {
        loc: {
          start: {
            line: 265,
            column: 16
          },
          end: {
            line: 267,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 265,
            column: 16
          },
          end: {
            line: 267,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 265
      },
      "16": {
        loc: {
          start: {
            line: 265,
            column: 20
          },
          end: {
            line: 265,
            column: 65
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 265,
            column: 20
          },
          end: {
            line: 265,
            column: 35
          }
        }, {
          start: {
            line: 265,
            column: 39
          },
          end: {
            line: 265,
            column: 65
          }
        }],
        line: 265
      },
      "17": {
        loc: {
          start: {
            line: 287,
            column: 12
          },
          end: {
            line: 292,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 287,
            column: 12
          },
          end: {
            line: 292,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 287
      },
      "18": {
        loc: {
          start: {
            line: 339,
            column: 12
          },
          end: {
            line: 344,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 339,
            column: 12
          },
          end: {
            line: 344,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 339
      },
      "19": {
        loc: {
          start: {
            line: 345,
            column: 12
          },
          end: {
            line: 350,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 345,
            column: 12
          },
          end: {
            line: 350,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 345
      },
      "20": {
        loc: {
          start: {
            line: 351,
            column: 12
          },
          end: {
            line: 356,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 351,
            column: 12
          },
          end: {
            line: 356,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 351
      },
      "21": {
        loc: {
          start: {
            line: 358,
            column: 20
          },
          end: {
            line: 358,
            column: 102
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 358,
            column: 20
          },
          end: {
            line: 358,
            column: 34
          }
        }, {
          start: {
            line: 358,
            column: 38
          },
          end: {
            line: 358,
            column: 102
          }
        }],
        line: 358
      },
      "22": {
        loc: {
          start: {
            line: 359,
            column: 22
          },
          end: {
            line: 359,
            column: 50
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 359,
            column: 22
          },
          end: {
            line: 359,
            column: 38
          }
        }, {
          start: {
            line: 359,
            column: 42
          },
          end: {
            line: 359,
            column: 50
          }
        }],
        line: 359
      },
      "23": {
        loc: {
          start: {
            line: 360,
            column: 22
          },
          end: {
            line: 360,
            column: 57
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 360,
            column: 22
          },
          end: {
            line: 360,
            column: 38
          }
        }, {
          start: {
            line: 360,
            column: 42
          },
          end: {
            line: 360,
            column: 57
          }
        }],
        line: 360
      },
      "24": {
        loc: {
          start: {
            line: 362,
            column: 24
          },
          end: {
            line: 362,
            column: 48
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 362,
            column: 24
          },
          end: {
            line: 362,
            column: 42
          }
        }, {
          start: {
            line: 362,
            column: 46
          },
          end: {
            line: 362,
            column: 48
          }
        }],
        line: 362
      },
      "25": {
        loc: {
          start: {
            line: 420,
            column: 12
          },
          end: {
            line: 424,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 420,
            column: 12
          },
          end: {
            line: 424,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 420
      },
      "26": {
        loc: {
          start: {
            line: 434,
            column: 31
          },
          end: {
            line: 435,
            column: 95
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 435,
            column: 16
          },
          end: {
            line: 435,
            column: 90
          }
        }, {
          start: {
            line: 435,
            column: 93
          },
          end: {
            line: 435,
            column: 95
          }
        }],
        line: 434
      },
      "27": {
        loc: {
          start: {
            line: 442,
            column: 20
          },
          end: {
            line: 445,
            column: 21
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 442,
            column: 20
          },
          end: {
            line: 445,
            column: 21
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 442
      },
      "28": {
        loc: {
          start: {
            line: 463,
            column: 12
          },
          end: {
            line: 465,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 463,
            column: 12
          },
          end: {
            line: 465,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 463
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0,
      "74": 0,
      "75": 0,
      "76": 0,
      "77": 0,
      "78": 0,
      "79": 0,
      "80": 0,
      "81": 0,
      "82": 0,
      "83": 0,
      "84": 0,
      "85": 0,
      "86": 0,
      "87": 0,
      "88": 0,
      "89": 0,
      "90": 0,
      "91": 0,
      "92": 0,
      "93": 0,
      "94": 0,
      "95": 0,
      "96": 0,
      "97": 0,
      "98": 0,
      "99": 0,
      "100": 0,
      "101": 0,
      "102": 0,
      "103": 0,
      "104": 0,
      "105": 0,
      "106": 0,
      "107": 0,
      "108": 0,
      "109": 0,
      "110": 0,
      "111": 0,
      "112": 0,
      "113": 0,
      "114": 0,
      "115": 0,
      "116": 0,
      "117": 0,
      "118": 0,
      "119": 0,
      "120": 0,
      "121": 0,
      "122": 0,
      "123": 0,
      "124": 0,
      "125": 0,
      "126": 0,
      "127": 0,
      "128": 0,
      "129": 0,
      "130": 0,
      "131": 0,
      "132": 0,
      "133": 0,
      "134": 0,
      "135": 0,
      "136": 0,
      "137": 0,
      "138": 0,
      "139": 0,
      "140": 0,
      "141": 0,
      "142": 0,
      "143": 0,
      "144": 0,
      "145": 0,
      "146": 0,
      "147": 0,
      "148": 0,
      "149": 0,
      "150": 0,
      "151": 0,
      "152": 0,
      "153": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0, 0],
      "10": [0, 0],
      "11": [0, 0],
      "12": [0, 0],
      "13": [0, 0],
      "14": [0, 0],
      "15": [0, 0],
      "16": [0, 0],
      "17": [0, 0],
      "18": [0, 0],
      "19": [0, 0],
      "20": [0, 0],
      "21": [0, 0],
      "22": [0, 0],
      "23": [0, 0],
      "24": [0, 0],
      "25": [0, 0],
      "26": [0, 0],
      "27": [0, 0],
      "28": [0, 0]
    },
    inputSourceMap: {
      file: "/home/mhugo/code/claude-code-flow/src/cli/services/swarm-service.ts",
      mappings: "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",
      names: [],
      sources: ["/home/mhugo/code/claude-code-flow/src/cli/services/swarm-service.ts"],
      sourcesContent: ["/**\n * Swarm Service\n * \n * Provides swarm operations including start, stop, status, and monitoring.\n * Integrates with the claude-flow swarm system and manages agent lifecycle.\n */\n\nimport { spawn } from 'child_process';\nimport type { ChildProcess } from 'child_process';\nimport { EventEmitter } from 'events';\nimport { writeFile, readFile } from 'fs/promises';\nimport { existsSync } from 'fs';\nimport { join } from 'path';\nimport { createLogger, type Logger } from '../utils/logger.js';\nimport { fileExists, ensureDirectory } from '../utils/file-system.js';\nimport type { Result } from '../types/index.js';\n\n/**\n * Swarm topology types\n */\nexport type SwarmTopology = 'mesh' | 'hierarchical' | 'ring' | 'star';\n\n/**\n * Swarm agent configuration\n */\nexport interface SwarmAgent {\n  /** Agent ID */\n  id: string;\n  \n  /** Agent type/role */\n  type: string;\n  \n  /** Agent name */\n  name: string;\n  \n  /** Agent status */\n  status: 'active' | 'inactive' | 'error';\n  \n  /** Process ID (if running) */\n  pid?: number;\n  \n  /** Agent configuration */\n  config: Record<string, any>;\n  \n  /** Creation timestamp */\n  createdAt: Date;\n  \n  /** Last activity timestamp */\n  lastActivity?: Date;\n  \n  /** Agent metrics */\n  metrics: {\n    tasksCompleted: number;\n    tasksActive: number;\n    uptime: number;\n    memoryUsage: number;\n    cpuUsage: number;\n  };\n}\n\n/**\n * Swarm configuration\n */\nexport interface SwarmConfig {\n  /** Swarm ID */\n  id: string;\n  \n  /** Swarm topology */\n  topology: SwarmTopology;\n  \n  /** Maximum number of agents */\n  maxAgents: number;\n  \n  /** Swarm strategy */\n  strategy: 'balanced' | 'specialized' | 'adaptive' | 'parallel';\n  \n  /** Auto-scaling configuration */\n  autoScale?: {\n    enabled: boolean;\n    minAgents: number;\n    maxAgents: number;\n    scaleUpThreshold: number;\n    scaleDownThreshold: number;\n  };\n  \n  /** Resource limits */\n  resourceLimits?: {\n    maxMemory: number;\n    maxCpu: number;\n    maxDisk: number;\n  };\n  \n  /** Persistence settings */\n  persistence?: {\n    enabled: boolean;\n    storageType: 'file' | 'database' | 'memory';\n    location?: string;\n  };\n}\n\n/**\n * Swarm status information\n */\nexport interface SwarmStatus {\n  /** Swarm ID */\n  id: string;\n  \n  /** Overall status */\n  status: 'running' | 'stopped' | 'starting' | 'stopping' | 'error';\n  \n  /** Number of active agents */\n  activeAgents: number;\n  \n  /** Total number of agents */\n  totalAgents: number;\n  \n  /** Swarm configuration */\n  config: SwarmConfig;\n  \n  /** Start time */\n  startTime?: Date;\n  \n  /** Uptime in milliseconds */\n  uptime: number;\n  \n  /** Current tasks */\n  activeTasks: number;\n  \n  /** Completed tasks */\n  completedTasks: number;\n  \n  /** Error count */\n  errorCount: number;\n  \n  /** Resource usage */\n  resourceUsage: {\n    memory: number;\n    cpu: number;\n    disk: number;\n  };\n}\n\n/**\n * Swarm metrics\n */\nexport interface SwarmMetrics {\n  /** Metrics timestamp */\n  timestamp: Date;\n  \n  /** Performance metrics */\n  performance: {\n    throughput: number;\n    latency: number;\n    errorRate: number;\n    successRate: number;\n  };\n  \n  /** Resource metrics */\n  resources: {\n    memoryUsage: number;\n    cpuUsage: number;\n    diskUsage: number;\n    networkIO: number;\n  };\n  \n  /** Agent metrics */\n  agents: {\n    active: number;\n    idle: number;\n    busy: number;\n    failed: number;\n  };\n  \n  /** Task metrics */\n  tasks: {\n    queued: number;\n    running: number;\n    completed: number;\n    failed: number;\n  };\n}\n\n/**\n * Swarm operation result\n */\nexport interface SwarmOperationResult {\n  /** Operation success */\n  success: boolean;\n  \n  /** Operation message */\n  message: string;\n  \n  /** Operation details */\n  details?: any;\n  \n  /** Operation duration */\n  duration?: number;\n  \n  /** Affected agents */\n  affectedAgents?: string[];\n}\n\n/**\n * Swarm service implementation\n */\nexport class SwarmService extends EventEmitter {\n  private logger: Logger;\n  private swarms = new Map<string, SwarmStatus>();\n  private processes = new Map<string, ChildProcess>();\n  private dataDir: string;\n  private initialized = false;\n  \n  constructor(config?: Record<string, any>) {\n    super();\n    this.logger = createLogger({ prefix: 'SwarmService' });\n    this.dataDir = config?.dataDir || join(process.cwd(), 'data', 'swarms');\n  }\n  \n  /**\n   * Initialize the swarm service\n   */\n  async init(): Promise<void> {\n    if (this.initialized) {\n      return;\n    }\n    \n    try {\n      // Ensure data directory exists\n      await ensureDirectory(this.dataDir);\n      \n      // Load existing swarms\n      await this.loadSwarms();\n      \n      this.initialized = true;\n      this.logger.info('Swarm service initialized');\n    } catch (error) {\n      this.logger.error('Failed to initialize swarm service:', error);\n      throw error;\n    }\n  }\n  \n  /**\n   * Dispose the swarm service\n   */\n  async dispose(): Promise<void> {\n    if (!this.initialized) {\n      return;\n    }\n    \n    try {\n      // Stop all running swarms\n      const stopPromises = Array.from(this.swarms.keys()).map(id => \n        this.stopSwarm(id)\n      );\n      \n      await Promise.all(stopPromises);\n      \n      this.swarms.clear();\n      this.processes.clear();\n      this.initialized = false;\n      \n      this.logger.info('Swarm service disposed');\n    } catch (error) {\n      this.logger.error('Error disposing swarm service:', error);\n    }\n  }\n  \n  /**\n   * Health check for the service\n   */\n  async healthCheck(): Promise<{ healthy: boolean; message?: string }> {\n    try {\n      if (!this.initialized) {\n        return {\n          healthy: false,\n          message: 'Service not initialized',\n        };\n      }\n      \n      // Check if data directory is accessible\n      if (!existsSync(this.dataDir)) {\n        return {\n          healthy: false,\n          message: 'Data directory not accessible',\n        };\n      }\n      \n      // Check running swarms\n      const runningSwarms = Array.from(this.swarms.values())\n        .filter(swarm => swarm.status === 'running').length;\n      \n      return {\n        healthy: true,\n        message: `${runningSwarms} swarms running`,\n      };\n    } catch (error) {\n      return {\n        healthy: false,\n        message: (error as Error).message,\n      };\n    }\n  }\n  \n  /**\n   * Start a new swarm\n   */\n  async startSwarm(config: SwarmConfig): Promise<Result<SwarmOperationResult>> {\n    try {\n      this.logger.info(`Starting swarm: ${config.id}`);\n      \n      // Check if swarm already exists\n      if (this.swarms.has(config.id)) {\n        const existing = this.swarms.get(config.id)!;\n        if (existing.status === 'running') {\n          return {\n            success: false,\n            error: new Error(`Swarm ${config.id} is already running`),\n          };\n        }\n      }\n      \n      // Create swarm status\n      const swarmStatus: SwarmStatus = {\n        id: config.id,\n        status: 'starting',\n        activeAgents: 0,\n        totalAgents: 0,\n        config,\n        startTime: new Date(),\n        uptime: 0,\n        activeTasks: 0,\n        completedTasks: 0,\n        errorCount: 0,\n        resourceUsage: {\n          memory: 0,\n          cpu: 0,\n          disk: 0,\n        },\n      };\n      \n      this.swarms.set(config.id, swarmStatus);\n      \n      // Start swarm process (mock implementation - would integrate with actual swarm system)\n      const process = await this.spawnSwarmProcess(config);\n      this.processes.set(config.id, process);\n      \n      // Update status\n      swarmStatus.status = 'running';\n      this.swarms.set(config.id, swarmStatus);\n      \n      // Save swarm state\n      await this.saveSwarmState(config.id);\n      \n      this.emit('swarmStarted', { swarmId: config.id, config });\n      \n      return {\n        success: true,\n        data: {\n          success: true,\n          message: `Swarm ${config.id} started successfully`,\n          details: swarmStatus,\n        },\n      };\n    } catch (error) {\n      this.logger.error(`Failed to start swarm ${config.id}:`, error);\n      return {\n        success: false,\n        error: error as Error,\n      };\n    }\n  }\n  \n  /**\n   * Stop a swarm\n   */\n  async stopSwarm(swarmId: string): Promise<Result<SwarmOperationResult>> {\n    try {\n      this.logger.info(`Stopping swarm: ${swarmId}`);\n      \n      const swarm = this.swarms.get(swarmId);\n      if (!swarm) {\n        return {\n          success: false,\n          error: new Error(`Swarm ${swarmId} not found`),\n        };\n      }\n      \n      if (swarm.status === 'stopped') {\n        return {\n          success: true,\n          data: {\n            success: true,\n            message: `Swarm ${swarmId} is already stopped`,\n          },\n        };\n      }\n      \n      // Update status\n      swarm.status = 'stopping';\n      this.swarms.set(swarmId, swarm);\n      \n      // Stop process\n      const process = this.processes.get(swarmId);\n      if (process && !process.killed) {\n        process.kill('SIGTERM');\n        \n        // Wait for graceful shutdown or force kill after timeout\n        await new Promise<void>((resolve) => {\n          const timeout = setTimeout(() => {\n            if (!process.killed) {\n              process.kill('SIGKILL');\n            }\n            resolve();\n          }, 5000);\n          \n          process.on('exit', () => {\n            clearTimeout(timeout);\n            resolve();\n          });\n        });\n      }\n      \n      // Update status\n      swarm.status = 'stopped';\n      swarm.activeAgents = 0;\n      this.swarms.set(swarmId, swarm);\n      this.processes.delete(swarmId);\n      \n      // Save swarm state\n      await this.saveSwarmState(swarmId);\n      \n      this.emit('swarmStopped', { swarmId });\n      \n      return {\n        success: true,\n        data: {\n          success: true,\n          message: `Swarm ${swarmId} stopped successfully`,\n        },\n      };\n    } catch (error) {\n      this.logger.error(`Failed to stop swarm ${swarmId}:`, error);\n      return {\n        success: false,\n        error: error as Error,\n      };\n    }\n  }\n  \n  /**\n   * Get swarm status\n   */\n  async getSwarmStatus(swarmId: string): Promise<Result<SwarmStatus>> {\n    try {\n      const swarm = this.swarms.get(swarmId);\n      if (!swarm) {\n        return {\n          success: false,\n          error: new Error(`Swarm ${swarmId} not found`),\n        };\n      }\n      \n      // Update uptime\n      if (swarm.startTime && swarm.status === 'running') {\n        swarm.uptime = Date.now() - swarm.startTime.getTime();\n      }\n      \n      return {\n        success: true,\n        data: swarm,\n      };\n    } catch (error) {\n      return {\n        success: false,\n        error: error as Error,\n      };\n    }\n  }\n  \n  /**\n   * List all swarms\n   */\n  async listSwarms(): Promise<Result<SwarmStatus[]>> {\n    try {\n      const swarms = Array.from(this.swarms.values());\n      \n      // Update uptimes\n      swarms.forEach(swarm => {\n        if (swarm.startTime && swarm.status === 'running') {\n          swarm.uptime = Date.now() - swarm.startTime.getTime();\n        }\n      });\n      \n      return {\n        success: true,\n        data: swarms,\n      };\n    } catch (error) {\n      return {\n        success: false,\n        error: error as Error,\n      };\n    }\n  }\n  \n  /**\n   * Get swarm metrics\n   */\n  async getSwarmMetrics(swarmId: string): Promise<Result<SwarmMetrics>> {\n    try {\n      const swarm = this.swarms.get(swarmId);\n      if (!swarm) {\n        return {\n          success: false,\n          error: new Error(`Swarm ${swarmId} not found`),\n        };\n      }\n      \n      // Mock metrics - would integrate with actual monitoring system\n      const metrics: SwarmMetrics = {\n        timestamp: new Date(),\n        performance: {\n          throughput: Math.random() * 100,\n          latency: Math.random() * 50,\n          errorRate: Math.random() * 5,\n          successRate: 95 + Math.random() * 5,\n        },\n        resources: {\n          memoryUsage: swarm.resourceUsage.memory,\n          cpuUsage: swarm.resourceUsage.cpu,\n          diskUsage: swarm.resourceUsage.disk,\n          networkIO: Math.random() * 1000,\n        },\n        agents: {\n          active: swarm.activeAgents,\n          idle: Math.floor(swarm.activeAgents * 0.3),\n          busy: Math.floor(swarm.activeAgents * 0.7),\n          failed: 0,\n        },\n        tasks: {\n          queued: Math.floor(Math.random() * 10),\n          running: swarm.activeTasks,\n          completed: swarm.completedTasks,\n          failed: swarm.errorCount,\n        },\n      };\n      \n      return {\n        success: true,\n        data: metrics,\n      };\n    } catch (error) {\n      return {\n        success: false,\n        error: error as Error,\n      };\n    }\n  }\n  \n  /**\n   * Spawn agent in swarm\n   */\n  async spawnAgent(\n    swarmId: string,\n    agentConfig: Partial<SwarmAgent>\n  ): Promise<Result<SwarmAgent>> {\n    try {\n      const swarm = this.swarms.get(swarmId);\n      if (!swarm) {\n        return {\n          success: false,\n          error: new Error(`Swarm ${swarmId} not found`),\n        };\n      }\n      \n      if (swarm.status !== 'running') {\n        return {\n          success: false,\n          error: new Error(`Swarm ${swarmId} is not running`),\n        };\n      }\n      \n      if (swarm.totalAgents >= swarm.config.maxAgents) {\n        return {\n          success: false,\n          error: new Error(`Swarm ${swarmId} has reached maximum agent limit`),\n        };\n      }\n      \n      const agent: SwarmAgent = {\n        id: agentConfig.id || `agent-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`,\n        type: agentConfig.type || 'worker',\n        name: agentConfig.name || 'Unnamed Agent',\n        status: 'active',\n        config: agentConfig.config || {},\n        createdAt: new Date(),\n        metrics: {\n          tasksCompleted: 0,\n          tasksActive: 0,\n          uptime: 0,\n          memoryUsage: 0,\n          cpuUsage: 0,\n        },\n      };\n      \n      // Update swarm counts\n      swarm.totalAgents++;\n      swarm.activeAgents++;\n      this.swarms.set(swarmId, swarm);\n      \n      // Save state\n      await this.saveSwarmState(swarmId);\n      \n      this.emit('agentSpawned', { swarmId, agent });\n      \n      return {\n        success: true,\n        data: agent,\n      };\n    } catch (error) {\n      return {\n        success: false,\n        error: error as Error,\n      };\n    }\n  }\n  \n  /**\n   * Spawn swarm process (mock implementation)\n   */\n  private async spawnSwarmProcess(config: SwarmConfig): Promise<ChildProcess> {\n    // This would integrate with the actual claude-flow swarm system\n    // For now, we'll create a mock process\n    const process = spawn('node', ['-e', `\n      console.log('Swarm ${config.id} starting...');\n      setInterval(() => {\n        console.log('Swarm ${config.id} heartbeat');\n      }, 30000);\n      \n      process.on('SIGTERM', () => {\n        console.log('Swarm ${config.id} shutting down...');\n        process.exit(0);\n      });\n    `], {\n      detached: false,\n      stdio: ['ignore', 'pipe', 'pipe'],\n    });\n    \n    process.stdout?.on('data', (data) => {\n      this.logger.debug(`Swarm ${config.id}:`, data.toString().trim());\n    });\n    \n    process.stderr?.on('data', (data) => {\n      this.logger.error(`Swarm ${config.id} error:`, data.toString().trim());\n    });\n    \n    process.on('exit', (code) => {\n      this.logger.info(`Swarm ${config.id} exited with code ${code}`);\n      const swarm = this.swarms.get(config.id);\n      if (swarm) {\n        swarm.status = 'stopped';\n        swarm.activeAgents = 0;\n        this.swarms.set(config.id, swarm);\n      }\n      this.emit('swarmExited', { swarmId: config.id, code });\n    });\n    \n    return process;\n  }\n  \n  /**\n   * Load existing swarms from storage\n   */\n  private async loadSwarms(): Promise<void> {\n    try {\n      const swarmFiles = existsSync(this.dataDir) ? \n        require('fs').readdirSync(this.dataDir).filter((f: string) => f.endsWith('.json')) : [];\n      \n      for (const file of swarmFiles) {\n        try {\n          const filePath = join(this.dataDir, file);\n          const data = await readFile(filePath, 'utf8');\n          const swarm = JSON.parse(data) as SwarmStatus;\n          \n          // Mark stopped swarms as stopped (they don't survive restarts)\n          if (swarm.status === 'running') {\n            swarm.status = 'stopped';\n            swarm.activeAgents = 0;\n          }\n          \n          this.swarms.set(swarm.id, swarm);\n        } catch (error) {\n          this.logger.warn(`Failed to load swarm from ${file}:`, error);\n        }\n      }\n    } catch (error) {\n      this.logger.error('Failed to load swarms:', error);\n    }\n  }\n  \n  /**\n   * Save swarm state to storage\n   */\n  private async saveSwarmState(swarmId: string): Promise<void> {\n    try {\n      const swarm = this.swarms.get(swarmId);\n      if (!swarm) {\n        return;\n      }\n      \n      const filePath = join(this.dataDir, `${swarmId}.json`);\n      await writeFile(filePath, JSON.stringify(swarm, null, 2));\n    } catch (error) {\n      this.logger.error(`Failed to save swarm state for ${swarmId}:`, error);\n    }\n  }\n}\n"],
      version: 3
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "26c262774e274ae708d4c6af0428bf23bde695f4"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_2hlhh53urz = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_2hlhh53urz();
/**
 * Swarm Service
 *
 * Provides swarm operations including start, stop, status, and monitoring.
 * Integrates with the claude-flow swarm system and manages agent lifecycle.
 */
import { spawn } from 'child_process';
import { EventEmitter } from 'events';
import { writeFile, readFile } from 'fs/promises';
import { existsSync } from 'fs';
import { join } from 'path';
import { createLogger } from '../utils/logger.js';
import { ensureDirectory } from '../utils/file-system.js';
/**
 * Swarm service implementation
 */
export class SwarmService extends EventEmitter {
  logger;
  swarms =
  /* istanbul ignore next */
  (cov_2hlhh53urz().s[0]++, new Map());
  processes =
  /* istanbul ignore next */
  (cov_2hlhh53urz().s[1]++, new Map());
  dataDir;
  initialized =
  /* istanbul ignore next */
  (cov_2hlhh53urz().s[2]++, false);
  constructor(config) {
    /* istanbul ignore next */
    cov_2hlhh53urz().f[0]++;
    cov_2hlhh53urz().s[3]++;
    super();
    /* istanbul ignore next */
    cov_2hlhh53urz().s[4]++;
    this.logger = createLogger({
      prefix: 'SwarmService'
    });
    /* istanbul ignore next */
    cov_2hlhh53urz().s[5]++;
    this.dataDir =
    /* istanbul ignore next */
    (cov_2hlhh53urz().b[0][0]++, config?.dataDir) ||
    /* istanbul ignore next */
    (cov_2hlhh53urz().b[0][1]++, join(process.cwd(), 'data', 'swarms'));
  }
  /**
   * Initialize the swarm service
   */
  async init() {
    /* istanbul ignore next */
    cov_2hlhh53urz().f[1]++;
    cov_2hlhh53urz().s[6]++;
    if (this.initialized) {
      /* istanbul ignore next */
      cov_2hlhh53urz().b[1][0]++;
      cov_2hlhh53urz().s[7]++;
      return;
    } else
    /* istanbul ignore next */
    {
      cov_2hlhh53urz().b[1][1]++;
    }
    cov_2hlhh53urz().s[8]++;
    try {
      /* istanbul ignore next */
      cov_2hlhh53urz().s[9]++;
      // Ensure data directory exists
      await ensureDirectory(this.dataDir);
      // Load existing swarms
      /* istanbul ignore next */
      cov_2hlhh53urz().s[10]++;
      await this.loadSwarms();
      /* istanbul ignore next */
      cov_2hlhh53urz().s[11]++;
      this.initialized = true;
      /* istanbul ignore next */
      cov_2hlhh53urz().s[12]++;
      this.logger.info('Swarm service initialized');
    } catch (error) {
      /* istanbul ignore next */
      cov_2hlhh53urz().s[13]++;
      this.logger.error('Failed to initialize swarm service:', error);
      /* istanbul ignore next */
      cov_2hlhh53urz().s[14]++;
      throw error;
    }
  }
  /**
   * Dispose the swarm service
   */
  async dispose() {
    /* istanbul ignore next */
    cov_2hlhh53urz().f[2]++;
    cov_2hlhh53urz().s[15]++;
    if (!this.initialized) {
      /* istanbul ignore next */
      cov_2hlhh53urz().b[2][0]++;
      cov_2hlhh53urz().s[16]++;
      return;
    } else
    /* istanbul ignore next */
    {
      cov_2hlhh53urz().b[2][1]++;
    }
    cov_2hlhh53urz().s[17]++;
    try {
      // Stop all running swarms
      const stopPromises =
      /* istanbul ignore next */
      (cov_2hlhh53urz().s[18]++, Array.from(this.swarms.keys()).map(id => {
        /* istanbul ignore next */
        cov_2hlhh53urz().f[3]++;
        cov_2hlhh53urz().s[19]++;
        return this.stopSwarm(id);
      }));
      /* istanbul ignore next */
      cov_2hlhh53urz().s[20]++;
      await Promise.all(stopPromises);
      /* istanbul ignore next */
      cov_2hlhh53urz().s[21]++;
      this.swarms.clear();
      /* istanbul ignore next */
      cov_2hlhh53urz().s[22]++;
      this.processes.clear();
      /* istanbul ignore next */
      cov_2hlhh53urz().s[23]++;
      this.initialized = false;
      /* istanbul ignore next */
      cov_2hlhh53urz().s[24]++;
      this.logger.info('Swarm service disposed');
    } catch (error) {
      /* istanbul ignore next */
      cov_2hlhh53urz().s[25]++;
      this.logger.error('Error disposing swarm service:', error);
    }
  }
  /**
   * Health check for the service
   */
  async healthCheck() {
    /* istanbul ignore next */
    cov_2hlhh53urz().f[4]++;
    cov_2hlhh53urz().s[26]++;
    try {
      /* istanbul ignore next */
      cov_2hlhh53urz().s[27]++;
      if (!this.initialized) {
        /* istanbul ignore next */
        cov_2hlhh53urz().b[3][0]++;
        cov_2hlhh53urz().s[28]++;
        return {
          healthy: false,
          message: 'Service not initialized'
        };
      } else
      /* istanbul ignore next */
      {
        cov_2hlhh53urz().b[3][1]++;
      }
      // Check if data directory is accessible
      cov_2hlhh53urz().s[29]++;
      if (!existsSync(this.dataDir)) {
        /* istanbul ignore next */
        cov_2hlhh53urz().b[4][0]++;
        cov_2hlhh53urz().s[30]++;
        return {
          healthy: false,
          message: 'Data directory not accessible'
        };
      } else
      /* istanbul ignore next */
      {
        cov_2hlhh53urz().b[4][1]++;
      }
      // Check running swarms
      const runningSwarms =
      /* istanbul ignore next */
      (cov_2hlhh53urz().s[31]++, Array.from(this.swarms.values()).filter(swarm => {
        /* istanbul ignore next */
        cov_2hlhh53urz().f[5]++;
        cov_2hlhh53urz().s[32]++;
        return swarm.status === 'running';
      }).length);
      /* istanbul ignore next */
      cov_2hlhh53urz().s[33]++;
      return {
        healthy: true,
        message: `${runningSwarms} swarms running`
      };
    } catch (error) {
      /* istanbul ignore next */
      cov_2hlhh53urz().s[34]++;
      return {
        healthy: false,
        message: error.message
      };
    }
  }
  /**
   * Start a new swarm
   */
  async startSwarm(config) {
    /* istanbul ignore next */
    cov_2hlhh53urz().f[6]++;
    cov_2hlhh53urz().s[35]++;
    try {
      /* istanbul ignore next */
      cov_2hlhh53urz().s[36]++;
      this.logger.info(`Starting swarm: ${config.id}`);
      // Check if swarm already exists
      /* istanbul ignore next */
      cov_2hlhh53urz().s[37]++;
      if (this.swarms.has(config.id)) {
        /* istanbul ignore next */
        cov_2hlhh53urz().b[5][0]++;
        const existing =
        /* istanbul ignore next */
        (cov_2hlhh53urz().s[38]++, this.swarms.get(config.id));
        /* istanbul ignore next */
        cov_2hlhh53urz().s[39]++;
        if (existing.status === 'running') {
          /* istanbul ignore next */
          cov_2hlhh53urz().b[6][0]++;
          cov_2hlhh53urz().s[40]++;
          return {
            success: false,
            error: new Error(`Swarm ${config.id} is already running`)
          };
        } else
        /* istanbul ignore next */
        {
          cov_2hlhh53urz().b[6][1]++;
        }
      } else
      /* istanbul ignore next */
      {
        cov_2hlhh53urz().b[5][1]++;
      }
      // Create swarm status
      const swarmStatus =
      /* istanbul ignore next */
      (cov_2hlhh53urz().s[41]++, {
        id: config.id,
        status: 'starting',
        activeAgents: 0,
        totalAgents: 0,
        config,
        startTime: new Date(),
        uptime: 0,
        activeTasks: 0,
        completedTasks: 0,
        errorCount: 0,
        resourceUsage: {
          memory: 0,
          cpu: 0,
          disk: 0
        }
      });
      /* istanbul ignore next */
      cov_2hlhh53urz().s[42]++;
      this.swarms.set(config.id, swarmStatus);
      // Start swarm process (mock implementation - would integrate with actual swarm system)
      const process =
      /* istanbul ignore next */
      (cov_2hlhh53urz().s[43]++, await this.spawnSwarmProcess(config));
      /* istanbul ignore next */
      cov_2hlhh53urz().s[44]++;
      this.processes.set(config.id, process);
      // Update status
      /* istanbul ignore next */
      cov_2hlhh53urz().s[45]++;
      swarmStatus.status = 'running';
      /* istanbul ignore next */
      cov_2hlhh53urz().s[46]++;
      this.swarms.set(config.id, swarmStatus);
      // Save swarm state
      /* istanbul ignore next */
      cov_2hlhh53urz().s[47]++;
      await this.saveSwarmState(config.id);
      /* istanbul ignore next */
      cov_2hlhh53urz().s[48]++;
      this.emit('swarmStarted', {
        swarmId: config.id,
        config
      });
      /* istanbul ignore next */
      cov_2hlhh53urz().s[49]++;
      return {
        success: true,
        data: {
          success: true,
          message: `Swarm ${config.id} started successfully`,
          details: swarmStatus
        }
      };
    } catch (error) {
      /* istanbul ignore next */
      cov_2hlhh53urz().s[50]++;
      this.logger.error(`Failed to start swarm ${config.id}:`, error);
      /* istanbul ignore next */
      cov_2hlhh53urz().s[51]++;
      return {
        success: false,
        error: error
      };
    }
  }
  /**
   * Stop a swarm
   */
  async stopSwarm(swarmId) {
    /* istanbul ignore next */
    cov_2hlhh53urz().f[7]++;
    cov_2hlhh53urz().s[52]++;
    try {
      /* istanbul ignore next */
      cov_2hlhh53urz().s[53]++;
      this.logger.info(`Stopping swarm: ${swarmId}`);
      const swarm =
      /* istanbul ignore next */
      (cov_2hlhh53urz().s[54]++, this.swarms.get(swarmId));
      /* istanbul ignore next */
      cov_2hlhh53urz().s[55]++;
      if (!swarm) {
        /* istanbul ignore next */
        cov_2hlhh53urz().b[7][0]++;
        cov_2hlhh53urz().s[56]++;
        return {
          success: false,
          error: new Error(`Swarm ${swarmId} not found`)
        };
      } else
      /* istanbul ignore next */
      {
        cov_2hlhh53urz().b[7][1]++;
      }
      cov_2hlhh53urz().s[57]++;
      if (swarm.status === 'stopped') {
        /* istanbul ignore next */
        cov_2hlhh53urz().b[8][0]++;
        cov_2hlhh53urz().s[58]++;
        return {
          success: true,
          data: {
            success: true,
            message: `Swarm ${swarmId} is already stopped`
          }
        };
      } else
      /* istanbul ignore next */
      {
        cov_2hlhh53urz().b[8][1]++;
      }
      // Update status
      cov_2hlhh53urz().s[59]++;
      swarm.status = 'stopping';
      /* istanbul ignore next */
      cov_2hlhh53urz().s[60]++;
      this.swarms.set(swarmId, swarm);
      // Stop process
      const process =
      /* istanbul ignore next */
      (cov_2hlhh53urz().s[61]++, this.processes.get(swarmId));
      /* istanbul ignore next */
      cov_2hlhh53urz().s[62]++;
      if (
      /* istanbul ignore next */
      (cov_2hlhh53urz().b[10][0]++, process) &&
      /* istanbul ignore next */
      (cov_2hlhh53urz().b[10][1]++, !process.killed)) {
        /* istanbul ignore next */
        cov_2hlhh53urz().b[9][0]++;
        cov_2hlhh53urz().s[63]++;
        process.kill('SIGTERM');
        // Wait for graceful shutdown or force kill after timeout
        /* istanbul ignore next */
        cov_2hlhh53urz().s[64]++;
        await new Promise(resolve => {
          /* istanbul ignore next */
          cov_2hlhh53urz().f[8]++;
          const timeout =
          /* istanbul ignore next */
          (cov_2hlhh53urz().s[65]++, setTimeout(() => {
            /* istanbul ignore next */
            cov_2hlhh53urz().f[9]++;
            cov_2hlhh53urz().s[66]++;
            if (!process.killed) {
              /* istanbul ignore next */
              cov_2hlhh53urz().b[11][0]++;
              cov_2hlhh53urz().s[67]++;
              process.kill('SIGKILL');
            } else
            /* istanbul ignore next */
            {
              cov_2hlhh53urz().b[11][1]++;
            }
            cov_2hlhh53urz().s[68]++;
            resolve();
          }, 5000));
          /* istanbul ignore next */
          cov_2hlhh53urz().s[69]++;
          process.on('exit', () => {
            /* istanbul ignore next */
            cov_2hlhh53urz().f[10]++;
            cov_2hlhh53urz().s[70]++;
            clearTimeout(timeout);
            /* istanbul ignore next */
            cov_2hlhh53urz().s[71]++;
            resolve();
          });
        });
      } else
      /* istanbul ignore next */
      {
        cov_2hlhh53urz().b[9][1]++;
      }
      // Update status
      cov_2hlhh53urz().s[72]++;
      swarm.status = 'stopped';
      /* istanbul ignore next */
      cov_2hlhh53urz().s[73]++;
      swarm.activeAgents = 0;
      /* istanbul ignore next */
      cov_2hlhh53urz().s[74]++;
      this.swarms.set(swarmId, swarm);
      /* istanbul ignore next */
      cov_2hlhh53urz().s[75]++;
      this.processes.delete(swarmId);
      // Save swarm state
      /* istanbul ignore next */
      cov_2hlhh53urz().s[76]++;
      await this.saveSwarmState(swarmId);
      /* istanbul ignore next */
      cov_2hlhh53urz().s[77]++;
      this.emit('swarmStopped', {
        swarmId
      });
      /* istanbul ignore next */
      cov_2hlhh53urz().s[78]++;
      return {
        success: true,
        data: {
          success: true,
          message: `Swarm ${swarmId} stopped successfully`
        }
      };
    } catch (error) {
      /* istanbul ignore next */
      cov_2hlhh53urz().s[79]++;
      this.logger.error(`Failed to stop swarm ${swarmId}:`, error);
      /* istanbul ignore next */
      cov_2hlhh53urz().s[80]++;
      return {
        success: false,
        error: error
      };
    }
  }
  /**
   * Get swarm status
   */
  async getSwarmStatus(swarmId) {
    /* istanbul ignore next */
    cov_2hlhh53urz().f[11]++;
    cov_2hlhh53urz().s[81]++;
    try {
      const swarm =
      /* istanbul ignore next */
      (cov_2hlhh53urz().s[82]++, this.swarms.get(swarmId));
      /* istanbul ignore next */
      cov_2hlhh53urz().s[83]++;
      if (!swarm) {
        /* istanbul ignore next */
        cov_2hlhh53urz().b[12][0]++;
        cov_2hlhh53urz().s[84]++;
        return {
          success: false,
          error: new Error(`Swarm ${swarmId} not found`)
        };
      } else
      /* istanbul ignore next */
      {
        cov_2hlhh53urz().b[12][1]++;
      }
      // Update uptime
      cov_2hlhh53urz().s[85]++;
      if (
      /* istanbul ignore next */
      (cov_2hlhh53urz().b[14][0]++, swarm.startTime) &&
      /* istanbul ignore next */
      (cov_2hlhh53urz().b[14][1]++, swarm.status === 'running')) {
        /* istanbul ignore next */
        cov_2hlhh53urz().b[13][0]++;
        cov_2hlhh53urz().s[86]++;
        swarm.uptime = Date.now() - swarm.startTime.getTime();
      } else
      /* istanbul ignore next */
      {
        cov_2hlhh53urz().b[13][1]++;
      }
      cov_2hlhh53urz().s[87]++;
      return {
        success: true,
        data: swarm
      };
    } catch (error) {
      /* istanbul ignore next */
      cov_2hlhh53urz().s[88]++;
      return {
        success: false,
        error: error
      };
    }
  }
  /**
   * List all swarms
   */
  async listSwarms() {
    /* istanbul ignore next */
    cov_2hlhh53urz().f[12]++;
    cov_2hlhh53urz().s[89]++;
    try {
      const swarms =
      /* istanbul ignore next */
      (cov_2hlhh53urz().s[90]++, Array.from(this.swarms.values()));
      // Update uptimes
      /* istanbul ignore next */
      cov_2hlhh53urz().s[91]++;
      swarms.forEach(swarm => {
        /* istanbul ignore next */
        cov_2hlhh53urz().f[13]++;
        cov_2hlhh53urz().s[92]++;
        if (
        /* istanbul ignore next */
        (cov_2hlhh53urz().b[16][0]++, swarm.startTime) &&
        /* istanbul ignore next */
        (cov_2hlhh53urz().b[16][1]++, swarm.status === 'running')) {
          /* istanbul ignore next */
          cov_2hlhh53urz().b[15][0]++;
          cov_2hlhh53urz().s[93]++;
          swarm.uptime = Date.now() - swarm.startTime.getTime();
        } else
        /* istanbul ignore next */
        {
          cov_2hlhh53urz().b[15][1]++;
        }
      });
      /* istanbul ignore next */
      cov_2hlhh53urz().s[94]++;
      return {
        success: true,
        data: swarms
      };
    } catch (error) {
      /* istanbul ignore next */
      cov_2hlhh53urz().s[95]++;
      return {
        success: false,
        error: error
      };
    }
  }
  /**
   * Get swarm metrics
   */
  async getSwarmMetrics(swarmId) {
    /* istanbul ignore next */
    cov_2hlhh53urz().f[14]++;
    cov_2hlhh53urz().s[96]++;
    try {
      const swarm =
      /* istanbul ignore next */
      (cov_2hlhh53urz().s[97]++, this.swarms.get(swarmId));
      /* istanbul ignore next */
      cov_2hlhh53urz().s[98]++;
      if (!swarm) {
        /* istanbul ignore next */
        cov_2hlhh53urz().b[17][0]++;
        cov_2hlhh53urz().s[99]++;
        return {
          success: false,
          error: new Error(`Swarm ${swarmId} not found`)
        };
      } else
      /* istanbul ignore next */
      {
        cov_2hlhh53urz().b[17][1]++;
      }
      // Mock metrics - would integrate with actual monitoring system
      const metrics =
      /* istanbul ignore next */
      (cov_2hlhh53urz().s[100]++, {
        timestamp: new Date(),
        performance: {
          throughput: Math.random() * 100,
          latency: Math.random() * 50,
          errorRate: Math.random() * 5,
          successRate: 95 + Math.random() * 5
        },
        resources: {
          memoryUsage: swarm.resourceUsage.memory,
          cpuUsage: swarm.resourceUsage.cpu,
          diskUsage: swarm.resourceUsage.disk,
          networkIO: Math.random() * 1000
        },
        agents: {
          active: swarm.activeAgents,
          idle: Math.floor(swarm.activeAgents * 0.3),
          busy: Math.floor(swarm.activeAgents * 0.7),
          failed: 0
        },
        tasks: {
          queued: Math.floor(Math.random() * 10),
          running: swarm.activeTasks,
          completed: swarm.completedTasks,
          failed: swarm.errorCount
        }
      });
      /* istanbul ignore next */
      cov_2hlhh53urz().s[101]++;
      return {
        success: true,
        data: metrics
      };
    } catch (error) {
      /* istanbul ignore next */
      cov_2hlhh53urz().s[102]++;
      return {
        success: false,
        error: error
      };
    }
  }
  /**
   * Spawn agent in swarm
   */
  async spawnAgent(swarmId, agentConfig) {
    /* istanbul ignore next */
    cov_2hlhh53urz().f[15]++;
    cov_2hlhh53urz().s[103]++;
    try {
      const swarm =
      /* istanbul ignore next */
      (cov_2hlhh53urz().s[104]++, this.swarms.get(swarmId));
      /* istanbul ignore next */
      cov_2hlhh53urz().s[105]++;
      if (!swarm) {
        /* istanbul ignore next */
        cov_2hlhh53urz().b[18][0]++;
        cov_2hlhh53urz().s[106]++;
        return {
          success: false,
          error: new Error(`Swarm ${swarmId} not found`)
        };
      } else
      /* istanbul ignore next */
      {
        cov_2hlhh53urz().b[18][1]++;
      }
      cov_2hlhh53urz().s[107]++;
      if (swarm.status !== 'running') {
        /* istanbul ignore next */
        cov_2hlhh53urz().b[19][0]++;
        cov_2hlhh53urz().s[108]++;
        return {
          success: false,
          error: new Error(`Swarm ${swarmId} is not running`)
        };
      } else
      /* istanbul ignore next */
      {
        cov_2hlhh53urz().b[19][1]++;
      }
      cov_2hlhh53urz().s[109]++;
      if (swarm.totalAgents >= swarm.config.maxAgents) {
        /* istanbul ignore next */
        cov_2hlhh53urz().b[20][0]++;
        cov_2hlhh53urz().s[110]++;
        return {
          success: false,
          error: new Error(`Swarm ${swarmId} has reached maximum agent limit`)
        };
      } else
      /* istanbul ignore next */
      {
        cov_2hlhh53urz().b[20][1]++;
      }
      const agent =
      /* istanbul ignore next */
      (cov_2hlhh53urz().s[111]++, {
        id:
        /* istanbul ignore next */
        (cov_2hlhh53urz().b[21][0]++, agentConfig.id) ||
        /* istanbul ignore next */
        (cov_2hlhh53urz().b[21][1]++, `agent-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`),
        type:
        /* istanbul ignore next */
        (cov_2hlhh53urz().b[22][0]++, agentConfig.type) ||
        /* istanbul ignore next */
        (cov_2hlhh53urz().b[22][1]++, 'worker'),
        name:
        /* istanbul ignore next */
        (cov_2hlhh53urz().b[23][0]++, agentConfig.name) ||
        /* istanbul ignore next */
        (cov_2hlhh53urz().b[23][1]++, 'Unnamed Agent'),
        status: 'active',
        config:
        /* istanbul ignore next */
        (cov_2hlhh53urz().b[24][0]++, agentConfig.config) ||
        /* istanbul ignore next */
        (cov_2hlhh53urz().b[24][1]++, {}),
        createdAt: new Date(),
        metrics: {
          tasksCompleted: 0,
          tasksActive: 0,
          uptime: 0,
          memoryUsage: 0,
          cpuUsage: 0
        }
      });
      // Update swarm counts
      /* istanbul ignore next */
      cov_2hlhh53urz().s[112]++;
      swarm.totalAgents++;
      /* istanbul ignore next */
      cov_2hlhh53urz().s[113]++;
      swarm.activeAgents++;
      /* istanbul ignore next */
      cov_2hlhh53urz().s[114]++;
      this.swarms.set(swarmId, swarm);
      // Save state
      /* istanbul ignore next */
      cov_2hlhh53urz().s[115]++;
      await this.saveSwarmState(swarmId);
      /* istanbul ignore next */
      cov_2hlhh53urz().s[116]++;
      this.emit('agentSpawned', {
        swarmId,
        agent
      });
      /* istanbul ignore next */
      cov_2hlhh53urz().s[117]++;
      return {
        success: true,
        data: agent
      };
    } catch (error) {
      /* istanbul ignore next */
      cov_2hlhh53urz().s[118]++;
      return {
        success: false,
        error: error
      };
    }
  }
  /**
   * Spawn swarm process (mock implementation)
   */
  async spawnSwarmProcess(config) {
    /* istanbul ignore next */
    cov_2hlhh53urz().f[16]++;
    // This would integrate with the actual claude-flow swarm system
    // For now, we'll create a mock process
    const process =
    /* istanbul ignore next */
    (cov_2hlhh53urz().s[119]++, spawn('node', ['-e', `
      console.log('Swarm ${config.id} starting...');
      setInterval(() => {
        console.log('Swarm ${config.id} heartbeat');
      }, 30000);
      
      process.on('SIGTERM', () => {
        console.log('Swarm ${config.id} shutting down...');
        process.exit(0);
      });
    `], {
      detached: false,
      stdio: ['ignore', 'pipe', 'pipe']
    }));
    /* istanbul ignore next */
    cov_2hlhh53urz().s[120]++;
    process.stdout?.on('data', data => {
      /* istanbul ignore next */
      cov_2hlhh53urz().f[17]++;
      cov_2hlhh53urz().s[121]++;
      this.logger.debug(`Swarm ${config.id}:`, data.toString().trim());
    });
    /* istanbul ignore next */
    cov_2hlhh53urz().s[122]++;
    process.stderr?.on('data', data => {
      /* istanbul ignore next */
      cov_2hlhh53urz().f[18]++;
      cov_2hlhh53urz().s[123]++;
      this.logger.error(`Swarm ${config.id} error:`, data.toString().trim());
    });
    /* istanbul ignore next */
    cov_2hlhh53urz().s[124]++;
    process.on('exit', code => {
      /* istanbul ignore next */
      cov_2hlhh53urz().f[19]++;
      cov_2hlhh53urz().s[125]++;
      this.logger.info(`Swarm ${config.id} exited with code ${code}`);
      const swarm =
      /* istanbul ignore next */
      (cov_2hlhh53urz().s[126]++, this.swarms.get(config.id));
      /* istanbul ignore next */
      cov_2hlhh53urz().s[127]++;
      if (swarm) {
        /* istanbul ignore next */
        cov_2hlhh53urz().b[25][0]++;
        cov_2hlhh53urz().s[128]++;
        swarm.status = 'stopped';
        /* istanbul ignore next */
        cov_2hlhh53urz().s[129]++;
        swarm.activeAgents = 0;
        /* istanbul ignore next */
        cov_2hlhh53urz().s[130]++;
        this.swarms.set(config.id, swarm);
      } else
      /* istanbul ignore next */
      {
        cov_2hlhh53urz().b[25][1]++;
      }
      cov_2hlhh53urz().s[131]++;
      this.emit('swarmExited', {
        swarmId: config.id,
        code
      });
    });
    /* istanbul ignore next */
    cov_2hlhh53urz().s[132]++;
    return process;
  }
  /**
   * Load existing swarms from storage
   */
  async loadSwarms() {
    /* istanbul ignore next */
    cov_2hlhh53urz().f[20]++;
    cov_2hlhh53urz().s[133]++;
    try {
      const swarmFiles =
      /* istanbul ignore next */
      (cov_2hlhh53urz().s[134]++, existsSync(this.dataDir) ?
      /* istanbul ignore next */
      (cov_2hlhh53urz().b[26][0]++, require('fs').readdirSync(this.dataDir).filter(f => {
        /* istanbul ignore next */
        cov_2hlhh53urz().f[21]++;
        cov_2hlhh53urz().s[135]++;
        return f.endsWith('.json');
      })) :
      /* istanbul ignore next */
      (cov_2hlhh53urz().b[26][1]++, []));
      /* istanbul ignore next */
      cov_2hlhh53urz().s[136]++;
      for (const file of swarmFiles) {
        /* istanbul ignore next */
        cov_2hlhh53urz().s[137]++;
        try {
          const filePath =
          /* istanbul ignore next */
          (cov_2hlhh53urz().s[138]++, join(this.dataDir, file));
          const data =
          /* istanbul ignore next */
          (cov_2hlhh53urz().s[139]++, await readFile(filePath, 'utf8'));
          const swarm =
          /* istanbul ignore next */
          (cov_2hlhh53urz().s[140]++, JSON.parse(data));
          // Mark stopped swarms as stopped (they don't survive restarts)
          /* istanbul ignore next */
          cov_2hlhh53urz().s[141]++;
          if (swarm.status === 'running') {
            /* istanbul ignore next */
            cov_2hlhh53urz().b[27][0]++;
            cov_2hlhh53urz().s[142]++;
            swarm.status = 'stopped';
            /* istanbul ignore next */
            cov_2hlhh53urz().s[143]++;
            swarm.activeAgents = 0;
          } else
          /* istanbul ignore next */
          {
            cov_2hlhh53urz().b[27][1]++;
          }
          cov_2hlhh53urz().s[144]++;
          this.swarms.set(swarm.id, swarm);
        } catch (error) {
          /* istanbul ignore next */
          cov_2hlhh53urz().s[145]++;
          this.logger.warn(`Failed to load swarm from ${file}:`, error);
        }
      }
    } catch (error) {
      /* istanbul ignore next */
      cov_2hlhh53urz().s[146]++;
      this.logger.error('Failed to load swarms:', error);
    }
  }
  /**
   * Save swarm state to storage
   */
  async saveSwarmState(swarmId) {
    /* istanbul ignore next */
    cov_2hlhh53urz().f[22]++;
    cov_2hlhh53urz().s[147]++;
    try {
      const swarm =
      /* istanbul ignore next */
      (cov_2hlhh53urz().s[148]++, this.swarms.get(swarmId));
      /* istanbul ignore next */
      cov_2hlhh53urz().s[149]++;
      if (!swarm) {
        /* istanbul ignore next */
        cov_2hlhh53urz().b[28][0]++;
        cov_2hlhh53urz().s[150]++;
        return;
      } else
      /* istanbul ignore next */
      {
        cov_2hlhh53urz().b[28][1]++;
      }
      const filePath =
      /* istanbul ignore next */
      (cov_2hlhh53urz().s[151]++, join(this.dataDir, `${swarmId}.json`));
      /* istanbul ignore next */
      cov_2hlhh53urz().s[152]++;
      await writeFile(filePath, JSON.stringify(swarm, null, 2));
    } catch (error) {
      /* istanbul ignore next */
      cov_2hlhh53urz().s[153]++;
      this.logger.error(`Failed to save swarm state for ${swarmId}:`, error);
    }
  }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,