1c1499dd1f68fd0651f5281072945aa8
/* istanbul ignore next */
function cov_1s2yzaf8rj() {
  var path = "/home/mhugo/code/claude-code-flow/src/cli/types/config.ts";
  var hash = "210eb8046a2754eac8206a3c5daf8191416ec852";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/home/mhugo/code/claude-code-flow/src/cli/types/config.ts",
    statementMap: {},
    fnMap: {},
    branchMap: {},
    s: {},
    f: {},
    b: {},
    inputSourceMap: {
      file: "/home/mhugo/code/claude-code-flow/src/cli/types/config.ts",
      mappings: "AAAA;;;;;GAKG",
      names: [],
      sources: ["/home/mhugo/code/claude-code-flow/src/cli/types/config.ts"],
      sourcesContent: ["/**\n * Configuration Type Definitions\n * \n * This module defines configuration interfaces for the CLI system,\n * including CLI settings, swarm configuration, and database settings.\n */\n\n/**\n * Main CLI configuration interface\n */\nexport interface CliConfig {\n  /** CLI application metadata */\n  app: {\n    /** Application name */\n    name: string;\n    \n    /** Application version */\n    version: string;\n    \n    /** Application description */\n    description?: string;\n    \n    /** Application author */\n    author?: string;\n    \n    /** Application license */\n    license?: string;\n  };\n  \n  /** Default command flags */\n  defaults: {\n    /** Default debug mode */\n    debug: boolean;\n    \n    /** Default verbose mode */\n    verbose: boolean;\n    \n    /** Default output format */\n    format: 'json' | 'yaml' | 'table' | 'text';\n    \n    /** Default timeout in milliseconds */\n    timeout: number;\n    \n    /** Default retry attempts */\n    retries: number;\n  };\n  \n  /** Plugin configuration */\n  plugins: PluginConfig;\n  \n  /** Swarm configuration */\n  swarm: SwarmConfig;\n  \n  /** Database configuration */\n  database: DatabaseConfig;\n  \n  /** UI configuration */\n  ui: UIConfig;\n  \n  /** Logging configuration */\n  logging: LoggingConfig;\n  \n  /** Security configuration */\n  security: SecurityConfig;\n  \n  /** Performance configuration */\n  performance: PerformanceConfig;\n}\n\n/**\n * Plugin system configuration\n */\nexport interface PluginConfig {\n  /** Whether plugins are enabled */\n  enabled: boolean;\n  \n  /** Plugin discovery paths */\n  paths: string[];\n  \n  /** Auto-load plugins on startup */\n  autoLoad: boolean;\n  \n  /** Plugin initialization timeout */\n  initTimeout: number;\n  \n  /** Error handling strategy */\n  errorHandling: 'strict' | 'graceful' | 'ignore';\n  \n  /** Allowed plugin types */\n  allowedTypes: string[];\n  \n  /** Plugin security settings */\n  security: {\n    /** Require plugin signatures */\n    requireSignatures: boolean;\n    \n    /** Allowed plugin sources */\n    allowedSources: string[];\n    \n    /** Sandbox plugins */\n    sandbox: boolean;\n  };\n}\n\n/**\n * Swarm orchestration configuration\n */\nexport interface SwarmConfig {\n  /** Whether swarm functionality is enabled */\n  enabled: boolean;\n  \n  /** Default swarm topology */\n  defaultTopology: 'mesh' | 'hierarchical' | 'ring' | 'star';\n  \n  /** Maximum number of agents */\n  maxAgents: number;\n  \n  /** Default execution strategy */\n  defaultStrategy: 'balanced' | 'specialized' | 'parallel' | 'adaptive';\n  \n  /** Agent configuration */\n  agents: {\n    /** Default agent types */\n    defaultTypes: AgentType[];\n    \n    /** Agent spawn timeout */\n    spawnTimeout: number;\n    \n    /** Agent heartbeat interval */\n    heartbeatInterval: number;\n    \n    /** Agent cleanup timeout */\n    cleanupTimeout: number;\n  };\n  \n  /** Memory configuration */\n  memory: {\n    /** Memory persistence enabled */\n    persistent: boolean;\n    \n    /** Memory storage path */\n    storagePath: string;\n    \n    /** Memory retention period in days */\n    retentionDays: number;\n    \n    /** Maximum memory size in MB */\n    maxSizeMB: number;\n  };\n  \n  /** Communication configuration */\n  communication: {\n    /** Communication protocol */\n    protocol: 'websocket' | 'http' | 'grpc';\n    \n    /** Communication port */\n    port: number;\n    \n    /** Message timeout */\n    messageTimeout: number;\n    \n    /** Retry configuration */\n    retries: {\n      maxAttempts: number;\n      backoffMs: number;\n    };\n  };\n}\n\n/**\n * Database configuration\n */\nexport interface DatabaseConfig {\n  /** Database type */\n  type: 'sqlite' | 'postgresql' | 'mysql' | 'mongodb';\n  \n  /** Connection configuration */\n  connection: {\n    /** Database host */\n    host?: string;\n    \n    /** Database port */\n    port?: number;\n    \n    /** Database name */\n    database: string;\n    \n    /** Database username */\n    username?: string;\n    \n    /** Database password */\n    password?: string;\n    \n    /** Connection string (alternative to individual fields) */\n    url?: string;\n    \n    /** SSL configuration */\n    ssl?: boolean | SSLConfig;\n  };\n  \n  /** Connection pool configuration */\n  pool: {\n    /** Minimum pool size */\n    min: number;\n    \n    /** Maximum pool size */\n    max: number;\n    \n    /** Connection timeout */\n    acquireTimeoutMillis: number;\n    \n    /** Idle timeout */\n    idleTimeoutMillis: number;\n  };\n  \n  /** Migration configuration */\n  migrations: {\n    /** Migrations directory */\n    directory: string;\n    \n    /** Auto-run migrations */\n    autoRun: boolean;\n    \n    /** Migration table name */\n    tableName: string;\n  };\n  \n  /** Backup configuration */\n  backup: {\n    /** Backup enabled */\n    enabled: boolean;\n    \n    /** Backup directory */\n    directory: string;\n    \n    /** Backup interval in hours */\n    intervalHours: number;\n    \n    /** Backup retention days */\n    retentionDays: number;\n  };\n}\n\n/**\n * SSL configuration for database connections\n */\nexport interface SSLConfig {\n  /** SSL certificate file */\n  cert?: string;\n  \n  /** SSL key file */\n  key?: string;\n  \n  /** SSL CA file */\n  ca?: string;\n  \n  /** Reject unauthorized certificates */\n  rejectUnauthorized: boolean;\n}\n\n/**\n * UI configuration\n */\nexport interface UIConfig {\n  /** Default theme */\n  theme: 'light' | 'dark' | 'auto';\n  \n  /** Color scheme */\n  colors: {\n    primary: string;\n    secondary: string;\n    success: string;\n    warning: string;\n    error: string;\n    info: string;\n  };\n  \n  /** Animation settings */\n  animations: {\n    enabled: boolean;\n    duration: number;\n  };\n  \n  /** Terminal configuration */\n  terminal: {\n    /** Support color output */\n    colors: boolean;\n    \n    /** Support Unicode characters */\n    unicode: boolean;\n    \n    /** Terminal width override */\n    width?: number;\n    \n    /** Terminal height override */\n    height?: number;\n  };\n}\n\n/**\n * Logging configuration\n */\nexport interface LoggingConfig {\n  /** Logging level */\n  level: 'error' | 'warn' | 'info' | 'debug' | 'trace';\n  \n  /** Log format */\n  format: 'json' | 'text' | 'structured';\n  \n  /** Log output targets */\n  outputs: LogOutput[];\n  \n  /** Log rotation configuration */\n  rotation: {\n    enabled: boolean;\n    maxFiles: number;\n    maxSizeMB: number;\n  };\n  \n  /** Structured logging fields */\n  fields: {\n    timestamp: boolean;\n    level: boolean;\n    component: boolean;\n    requestId: boolean;\n    userId: boolean;\n  };\n}\n\n/**\n * Log output configuration\n */\nexport interface LogOutput {\n  /** Output type */\n  type: 'console' | 'file' | 'http' | 'database';\n  \n  /** Output configuration */\n  config: Record<string, unknown>;\n  \n  /** Minimum log level for this output */\n  level?: string;\n  \n  /** Output enabled */\n  enabled: boolean;\n}\n\n/**\n * Security configuration\n */\nexport interface SecurityConfig {\n  /** Authentication configuration */\n  auth: {\n    enabled: boolean;\n    provider: 'local' | 'oauth' | 'ldap' | 'saml';\n    config: Record<string, unknown>;\n  };\n  \n  /** Authorization configuration */\n  authorization: {\n    enabled: boolean;\n    rbac: boolean;\n    policies: string[];\n  };\n  \n  /** Encryption configuration */\n  encryption: {\n    algorithm: string;\n    keySize: number;\n    keyRotationDays: number;\n  };\n  \n  /** Rate limiting configuration */\n  rateLimit: {\n    enabled: boolean;\n    windowMs: number;\n    maxRequests: number;\n    skipSuccessfulRequests: boolean;\n  };\n}\n\n/**\n * Performance configuration\n */\nexport interface PerformanceConfig {\n  /** Caching configuration */\n  cache: {\n    enabled: boolean;\n    type: 'memory' | 'redis' | 'file';\n    ttlSeconds: number;\n    maxItems: number;\n  };\n  \n  /** Worker threads configuration */\n  workers: {\n    enabled: boolean;\n    poolSize: number;\n    taskTimeout: number;\n  };\n  \n  /** Memory limits */\n  memory: {\n    heapLimitMB: number;\n    gcEnabled: boolean;\n    monitoringEnabled: boolean;\n  };\n  \n  /** CPU limits */\n  cpu: {\n    maxUsagePercent: number;\n    throttleEnabled: boolean;\n  };\n}\n\n/**\n * Agent type enumeration\n */\nexport type AgentType = \n  | 'coordinator'\n  | 'researcher' \n  | 'coder'\n  | 'analyst'\n  | 'tester'\n  | 'architect'\n  | 'documenter'\n  | 'reviewer'\n  | 'deployer'\n  | 'monitor';\n\n/**\n * Configuration validation result\n */\nexport interface ConfigValidationResult {\n  /** Whether configuration is valid */\n  valid: boolean;\n  \n  /** Validation errors */\n  errors: ConfigValidationError[];\n  \n  /** Validation warnings */\n  warnings: ConfigValidationWarning[];\n  \n  /** Validated configuration */\n  config?: CliConfig;\n}\n\n/**\n * Configuration validation error\n */\nexport interface ConfigValidationError {\n  /** Error message */\n  message: string;\n  \n  /** Configuration path where error occurred */\n  path: string;\n  \n  /** Expected value or type */\n  expected?: string;\n  \n  /** Actual value */\n  actual?: unknown;\n}\n\n/**\n * Configuration validation warning\n */\nexport interface ConfigValidationWarning {\n  /** Warning message */\n  message: string;\n  \n  /** Configuration path where warning occurred */\n  path: string;\n  \n  /** Suggested action */\n  suggestion?: string;\n}"],
      version: 3
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "210eb8046a2754eac8206a3c5daf8191416ec852"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_1s2yzaf8rj = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_1s2yzaf8rj();
/**
 * Configuration Type Definitions
 *
 * This module defines configuration interfaces for the CLI system,
 * including CLI settings, swarm configuration, and database settings.
 */
export {};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,