317473df71bb562249e9adcf148614f1
/* istanbul ignore next */
function cov_1wtpxuulkk() {
  var path = "/home/mhugo/code/claude-code-flow/src/cli/services/index.ts";
  var hash = "1c4898fc18bfc685f9a113907d6d19a3cf1a9d35";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/home/mhugo/code/claude-code-flow/src/cli/services/index.ts",
    statementMap: {
      "0": {
        start: {
          line: 17,
          column: 15
        },
        end: {
          line: 17,
          column: 24
        }
      },
      "1": {
        start: {
          line: 18,
          column: 18
        },
        end: {
          line: 18,
          column: 23
        }
      },
      "2": {
        start: {
          line: 23,
          column: 8
        },
        end: {
          line: 23,
          column: 41
        }
      },
      "3": {
        start: {
          line: 29,
          column: 8
        },
        end: {
          line: 29,
          column: 39
        }
      },
      "4": {
        start: {
          line: 35,
          column: 8
        },
        end: {
          line: 35,
          column: 39
        }
      },
      "5": {
        start: {
          line: 41,
          column: 8
        },
        end: {
          line: 43,
          column: 9
        }
      },
      "6": {
        start: {
          line: 42,
          column: 12
        },
        end: {
          line: 42,
          column: 19
        }
      },
      "7": {
        start: {
          line: 45,
          column: 25
        },
        end: {
          line: 45,
          column: 59
        }
      },
      "8": {
        start: {
          line: 46,
          column: 8
        },
        end: {
          line: 50,
          column: 9
        }
      },
      "9": {
        start: {
          line: 47,
          column: 12
        },
        end: {
          line: 49,
          column: 13
        }
      },
      "10": {
        start: {
          line: 48,
          column: 16
        },
        end: {
          line: 48,
          column: 37
        }
      },
      "11": {
        start: {
          line: 51,
          column: 8
        },
        end: {
          line: 51,
          column: 32
        }
      },
      "12": {
        start: {
          line: 57,
          column: 25
        },
        end: {
          line: 57,
          column: 69
        }
      },
      "13": {
        start: {
          line: 58,
          column: 8
        },
        end: {
          line: 62,
          column: 9
        }
      },
      "14": {
        start: {
          line: 59,
          column: 12
        },
        end: {
          line: 61,
          column: 13
        }
      },
      "15": {
        start: {
          line: 60,
          column: 16
        },
        end: {
          line: 60,
          column: 40
        }
      },
      "16": {
        start: {
          line: 63,
          column: 8
        },
        end: {
          line: 63,
          column: 30
        }
      },
      "17": {
        start: {
          line: 64,
          column: 8
        },
        end: {
          line: 64,
          column: 33
        }
      },
      "18": {
        start: {
          line: 70,
          column: 8
        },
        end: {
          line: 70,
          column: 48
        }
      },
      "19": {
        start: {
          line: 76,
          column: 8
        },
        end: {
          line: 76,
          column: 32
        }
      },
      "20": {
        start: {
          line: 82,
          column: 31
        },
        end: {
          line: 82,
          column: 52
        }
      },
      "21": {
        start: {
          line: 88,
          column: 29
        },
        end: {
          line: 88,
          column: 63
        }
      },
      "22": {
        start: {
          line: 89,
          column: 30
        },
        end: {
          line: 89,
          column: 65
        }
      },
      "23": {
        start: {
          line: 90,
          column: 32
        },
        end: {
          line: 90,
          column: 69
        }
      },
      "24": {
        start: {
          line: 92,
          column: 4
        },
        end: {
          line: 92,
          column: 58
        }
      },
      "25": {
        start: {
          line: 93,
          column: 4
        },
        end: {
          line: 93,
          column: 60
        }
      },
      "26": {
        start: {
          line: 94,
          column: 4
        },
        end: {
          line: 94,
          column: 64
        }
      },
      "27": {
        start: {
          line: 96,
          column: 4
        },
        end: {
          line: 96,
          column: 33
        }
      },
      "28": {
        start: {
          line: 102,
          column: 4
        },
        end: {
          line: 102,
          column: 37
        }
      },
      "29": {
        start: {
          line: 107,
          column: 24
        },
        end: {
          line: 138,
          column: 1
        }
      },
      "30": {
        start: {
          line: 112,
          column: 24
        },
        end: {
          line: 112,
          column: 43
        }
      },
      "31": {
        start: {
          line: 113,
          column: 8
        },
        end: {
          line: 115,
          column: 9
        }
      },
      "32": {
        start: {
          line: 114,
          column: 12
        },
        end: {
          line: 114,
          column: 61
        }
      },
      "33": {
        start: {
          line: 116,
          column: 8
        },
        end: {
          line: 116,
          column: 23
        }
      },
      "34": {
        start: {
          line: 122,
          column: 24
        },
        end: {
          line: 122,
          column: 44
        }
      },
      "35": {
        start: {
          line: 123,
          column: 8
        },
        end: {
          line: 125,
          column: 9
        }
      },
      "36": {
        start: {
          line: 124,
          column: 12
        },
        end: {
          line: 124,
          column: 62
        }
      },
      "37": {
        start: {
          line: 126,
          column: 8
        },
        end: {
          line: 126,
          column: 23
        }
      },
      "38": {
        start: {
          line: 132,
          column: 24
        },
        end: {
          line: 132,
          column: 46
        }
      },
      "39": {
        start: {
          line: 133,
          column: 8
        },
        end: {
          line: 135,
          column: 9
        }
      },
      "40": {
        start: {
          line: 134,
          column: 12
        },
        end: {
          line: 134,
          column: 64
        }
      },
      "41": {
        start: {
          line: 136,
          column: 8
        },
        end: {
          line: 136,
          column: 23
        }
      },
      "42": {
        start: {
          line: 143,
          column: 20
        },
        end: {
          line: 143,
          column: 22
        }
      },
      "43": {
        start: {
          line: 144,
          column: 25
        },
        end: {
          line: 144,
          column: 58
        }
      },
      "44": {
        start: {
          line: 145,
          column: 4
        },
        end: {
          line: 169,
          column: 5
        }
      },
      "45": {
        start: {
          line: 146,
          column: 24
        },
        end: {
          line: 146,
          column: 49
        }
      },
      "46": {
        start: {
          line: 147,
          column: 21
        },
        end: {
          line: 147,
          column: 30
        }
      },
      "47": {
        start: {
          line: 149,
          column: 8
        },
        end: {
          line: 162,
          column: 9
        }
      },
      "48": {
        start: {
          line: 150,
          column: 12
        },
        end: {
          line: 157,
          column: 13
        }
      },
      "49": {
        start: {
          line: 151,
          column: 31
        },
        end: {
          line: 151,
          column: 58
        }
      },
      "50": {
        start: {
          line: 152,
          column: 16
        },
        end: {
          line: 152,
          column: 66
        }
      },
      "51": {
        start: {
          line: 153,
          column: 16
        },
        end: {
          line: 153,
          column: 41
        }
      },
      "52": {
        start: {
          line: 156,
          column: 16
        },
        end: {
          line: 156,
          column: 35
        }
      },
      "53": {
        start: {
          line: 160,
          column: 12
        },
        end: {
          line: 160,
          column: 33
        }
      },
      "54": {
        start: {
          line: 161,
          column: 12
        },
        end: {
          line: 161,
          column: 36
        }
      },
      "55": {
        start: {
          line: 163,
          column: 8
        },
        end: {
          line: 168,
          column: 11
        }
      },
      "56": {
        start: {
          line: 170,
          column: 4
        },
        end: {
          line: 170,
          column: 19
        }
      },
      "57": {
        start: {
          line: 177,
          column: 26
        },
        end: {
          line: 177,
          column: 87
        }
      },
      "58": {
        start: {
          line: 177,
          column: 49
        },
        end: {
          line: 177,
          column: 86
        }
      },
      "59": {
        start: {
          line: 178,
          column: 4
        },
        end: {
          line: 199,
          column: 5
        }
      },
      "60": {
        start: {
          line: 179,
          column: 8
        },
        end: {
          line: 198,
          column: 9
        }
      },
      "61": {
        start: {
          line: 182,
          column: 12
        },
        end: {
          line: 194,
          column: 13
        }
      },
      "62": {
        start: {
          line: 183,
          column: 16
        },
        end: {
          line: 193,
          column: 17
        }
      },
      "63": {
        start: {
          line: 185,
          column: 24
        },
        end: {
          line: 185,
          column: 91
        }
      },
      "64": {
        start: {
          line: 186,
          column: 24
        },
        end: {
          line: 186,
          column: 30
        }
      },
      "65": {
        start: {
          line: 188,
          column: 24
        },
        end: {
          line: 188,
          column: 93
        }
      },
      "66": {
        start: {
          line: 189,
          column: 24
        },
        end: {
          line: 189,
          column: 30
        }
      },
      "67": {
        start: {
          line: 191,
          column: 24
        },
        end: {
          line: 191,
          column: 97
        }
      },
      "68": {
        start: {
          line: 192,
          column: 24
        },
        end: {
          line: 192,
          column: 30
        }
      },
      "69": {
        start: {
          line: 197,
          column: 12
        },
        end: {
          line: 197,
          column: 86
        }
      },
      "70": {
        start: {
          line: 200,
          column: 4
        },
        end: {
          line: 200,
          column: 33
        }
      },
      "71": {
        start: {
          line: 207,
          column: 4
        },
        end: {
          line: 207,
          column: 35
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 22,
            column: 4
          },
          end: {
            line: 22,
            column: 5
          }
        },
        loc: {
          start: {
            line: 22,
            column: 28
          },
          end: {
            line: 24,
            column: 5
          }
        },
        line: 22
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 28,
            column: 4
          },
          end: {
            line: 28,
            column: 5
          }
        },
        loc: {
          start: {
            line: 28,
            column: 14
          },
          end: {
            line: 30,
            column: 5
          }
        },
        line: 28
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 34,
            column: 4
          },
          end: {
            line: 34,
            column: 5
          }
        },
        loc: {
          start: {
            line: 34,
            column: 14
          },
          end: {
            line: 36,
            column: 5
          }
        },
        line: 34
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 40,
            column: 4
          },
          end: {
            line: 40,
            column: 5
          }
        },
        loc: {
          start: {
            line: 40,
            column: 17
          },
          end: {
            line: 52,
            column: 5
          }
        },
        line: 40
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 56,
            column: 4
          },
          end: {
            line: 56,
            column: 5
          }
        },
        loc: {
          start: {
            line: 56,
            column: 20
          },
          end: {
            line: 65,
            column: 5
          }
        },
        line: 56
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 69,
            column: 4
          },
          end: {
            line: 69,
            column: 5
          }
        },
        loc: {
          start: {
            line: 69,
            column: 22
          },
          end: {
            line: 71,
            column: 5
          }
        },
        line: 69
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 75,
            column: 4
          },
          end: {
            line: 75,
            column: 5
          }
        },
        loc: {
          start: {
            line: 75,
            column: 20
          },
          end: {
            line: 77,
            column: 5
          }
        },
        line: 75
      },
      "7": {
        name: "initializeServices",
        decl: {
          start: {
            line: 86,
            column: 22
          },
          end: {
            line: 86,
            column: 40
          }
        },
        loc: {
          start: {
            line: 86,
            column: 43
          },
          end: {
            line: 97,
            column: 1
          }
        },
        line: 86
      },
      "8": {
        name: "getService",
        decl: {
          start: {
            line: 101,
            column: 16
          },
          end: {
            line: 101,
            column: 26
          }
        },
        loc: {
          start: {
            line: 101,
            column: 33
          },
          end: {
            line: 103,
            column: 1
          }
        },
        line: 101
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 111,
            column: 4
          },
          end: {
            line: 111,
            column: 5
          }
        },
        loc: {
          start: {
            line: 111,
            column: 12
          },
          end: {
            line: 117,
            column: 5
          }
        },
        line: 111
      },
      "10": {
        name: "(anonymous_10)",
        decl: {
          start: {
            line: 121,
            column: 4
          },
          end: {
            line: 121,
            column: 5
          }
        },
        loc: {
          start: {
            line: 121,
            column: 13
          },
          end: {
            line: 127,
            column: 5
          }
        },
        line: 121
      },
      "11": {
        name: "(anonymous_11)",
        decl: {
          start: {
            line: 131,
            column: 4
          },
          end: {
            line: 131,
            column: 5
          }
        },
        loc: {
          start: {
            line: 131,
            column: 15
          },
          end: {
            line: 137,
            column: 5
          }
        },
        line: 131
      },
      "12": {
        name: "checkServiceHealth",
        decl: {
          start: {
            line: 142,
            column: 22
          },
          end: {
            line: 142,
            column: 40
          }
        },
        loc: {
          start: {
            line: 142,
            column: 43
          },
          end: {
            line: 171,
            column: 1
          }
        },
        line: 142
      },
      "13": {
        name: "loadServicesFromConfig",
        decl: {
          start: {
            line: 175,
            column: 22
          },
          end: {
            line: 175,
            column: 44
          }
        },
        loc: {
          start: {
            line: 175,
            column: 54
          },
          end: {
            line: 201,
            column: 1
          }
        },
        line: 175
      },
      "14": {
        name: "(anonymous_14)",
        decl: {
          start: {
            line: 177,
            column: 39
          },
          end: {
            line: 177,
            column: 40
          }
        },
        loc: {
          start: {
            line: 177,
            column: 49
          },
          end: {
            line: 177,
            column: 86
          }
        },
        line: 177
      },
      "15": {
        name: "addServiceHooks",
        decl: {
          start: {
            line: 205,
            column: 16
          },
          end: {
            line: 205,
            column: 31
          }
        },
        loc: {
          start: {
            line: 205,
            column: 39
          },
          end: {
            line: 208,
            column: 1
          }
        },
        line: 205
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 41,
            column: 8
          },
          end: {
            line: 43,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 41,
            column: 8
          },
          end: {
            line: 43,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 41
      },
      "1": {
        loc: {
          start: {
            line: 47,
            column: 12
          },
          end: {
            line: 49,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 47,
            column: 12
          },
          end: {
            line: 49,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 47
      },
      "2": {
        loc: {
          start: {
            line: 47,
            column: 16
          },
          end: {
            line: 47,
            column: 61
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 47,
            column: 16
          },
          end: {
            line: 47,
            column: 23
          }
        }, {
          start: {
            line: 47,
            column: 27
          },
          end: {
            line: 47,
            column: 61
          }
        }],
        line: 47
      },
      "3": {
        loc: {
          start: {
            line: 59,
            column: 12
          },
          end: {
            line: 61,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 59,
            column: 12
          },
          end: {
            line: 61,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 59
      },
      "4": {
        loc: {
          start: {
            line: 59,
            column: 16
          },
          end: {
            line: 59,
            column: 64
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 59,
            column: 16
          },
          end: {
            line: 59,
            column: 23
          }
        }, {
          start: {
            line: 59,
            column: 27
          },
          end: {
            line: 59,
            column: 64
          }
        }],
        line: 59
      },
      "5": {
        loc: {
          start: {
            line: 113,
            column: 8
          },
          end: {
            line: 115,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 113,
            column: 8
          },
          end: {
            line: 115,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 113
      },
      "6": {
        loc: {
          start: {
            line: 123,
            column: 8
          },
          end: {
            line: 125,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 123,
            column: 8
          },
          end: {
            line: 125,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 123
      },
      "7": {
        loc: {
          start: {
            line: 133,
            column: 8
          },
          end: {
            line: 135,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 133,
            column: 8
          },
          end: {
            line: 135,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 133
      },
      "8": {
        loc: {
          start: {
            line: 150,
            column: 12
          },
          end: {
            line: 157,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 150,
            column: 12
          },
          end: {
            line: 157,
            column: 13
          }
        }, {
          start: {
            line: 155,
            column: 17
          },
          end: {
            line: 157,
            column: 13
          }
        }],
        line: 150
      },
      "9": {
        loc: {
          start: {
            line: 150,
            column: 16
          },
          end: {
            line: 150,
            column: 68
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 150,
            column: 16
          },
          end: {
            line: 150,
            column: 23
          }
        }, {
          start: {
            line: 150,
            column: 27
          },
          end: {
            line: 150,
            column: 68
          }
        }],
        line: 150
      },
      "10": {
        loc: {
          start: {
            line: 152,
            column: 25
          },
          end: {
            line: 152,
            column: 65
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 152,
            column: 42
          },
          end: {
            line: 152,
            column: 51
          }
        }, {
          start: {
            line: 152,
            column: 54
          },
          end: {
            line: 152,
            column: 65
          }
        }],
        line: 152
      },
      "11": {
        loc: {
          start: {
            line: 177,
            column: 50
          },
          end: {
            line: 177,
            column: 65
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 177,
            column: 50
          },
          end: {
            line: 177,
            column: 60
          }
        }, {
          start: {
            line: 177,
            column: 64
          },
          end: {
            line: 177,
            column: 65
          }
        }],
        line: 177
      },
      "12": {
        loc: {
          start: {
            line: 177,
            column: 70
          },
          end: {
            line: 177,
            column: 85
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 177,
            column: 70
          },
          end: {
            line: 177,
            column: 80
          }
        }, {
          start: {
            line: 177,
            column: 84
          },
          end: {
            line: 177,
            column: 85
          }
        }],
        line: 177
      },
      "13": {
        loc: {
          start: {
            line: 182,
            column: 12
          },
          end: {
            line: 194,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 182,
            column: 12
          },
          end: {
            line: 194,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 182
      },
      "14": {
        loc: {
          start: {
            line: 183,
            column: 16
          },
          end: {
            line: 193,
            column: 17
          }
        },
        type: "switch",
        locations: [{
          start: {
            line: 184,
            column: 20
          },
          end: {
            line: 186,
            column: 30
          }
        }, {
          start: {
            line: 187,
            column: 20
          },
          end: {
            line: 189,
            column: 30
          }
        }, {
          start: {
            line: 190,
            column: 20
          },
          end: {
            line: 192,
            column: 30
          }
        }],
        line: 183
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0, 0],
      "10": [0, 0],
      "11": [0, 0],
      "12": [0, 0],
      "13": [0, 0],
      "14": [0, 0, 0]
    },
    inputSourceMap: {
      file: "/home/mhugo/code/claude-code-flow/src/cli/services/index.ts",
      mappings: "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",
      names: [],
      sources: ["/home/mhugo/code/claude-code-flow/src/cli/services/index.ts"],
      sourcesContent: ["/**\n * CLI Services Index\n * \n * This module re-exports all CLI services for convenient importing.\n * Provides business logic services for swarm operations, configuration, and templates.\n */\n\n// Swarm operations service\nexport {\n  SwarmService,\n  type SwarmStatus,\n  type SwarmConfig,\n  type SwarmAgent,\n  type SwarmMetrics,\n  type SwarmTopology,\n  type SwarmOperationResult,\n} from './swarm-service.js';\n\n// Configuration management service\nexport {\n  ConfigService,\n  type ConfigManager,\n  type ConfigValidationOptions,\n  type ConfigMigrationResult,\n  type ConfigBackupOptions,\n} from './config-service.js';\n\n// Template operations service\nexport {\n  TemplateService,\n  type TemplateConfig,\n  type TemplateVariable,\n  type TemplateContext,\n  type TemplateEngine,\n  type TemplateRenderResult,\n  type ProjectTemplate,\n} from './template-service.js';\n\n/**\n * Service registry for managing all CLI services\n */\nexport class ServiceRegistry {\n  private services = new Map<string, any>();\n  private initialized = false;\n  \n  /**\n   * Register a service with the registry\n   */\n  register<T>(name: string, service: T): void {\n    this.services.set(name, service);\n  }\n  \n  /**\n   * Get a service from the registry\n   */\n  get<T>(name: string): T | undefined {\n    return this.services.get(name) as T;\n  }\n  \n  /**\n   * Check if a service is registered\n   */\n  has(name: string): boolean {\n    return this.services.has(name);\n  }\n  \n  /**\n   * Initialize all services\n   */\n  async init(): Promise<void> {\n    if (this.initialized) {\n      return;\n    }\n    \n    // Initialize services in dependency order\n    const services = Array.from(this.services.values());\n    \n    for (const service of services) {\n      if (service && typeof service.init === 'function') {\n        await service.init();\n      }\n    }\n    \n    this.initialized = true;\n  }\n  \n  /**\n   * Dispose all services\n   */\n  async dispose(): Promise<void> {\n    const services = Array.from(this.services.values()).reverse();\n    \n    for (const service of services) {\n      if (service && typeof service.dispose === 'function') {\n        await service.dispose();\n      }\n    }\n    \n    this.services.clear();\n    this.initialized = false;\n  }\n  \n  /**\n   * Get all registered service names\n   */\n  getServiceNames(): string[] {\n    return Array.from(this.services.keys());\n  }\n  \n  /**\n   * Check if services are initialized\n   */\n  isInitialized(): boolean {\n    return this.initialized;\n  }\n}\n\n/**\n * Default service registry instance\n */\nexport const serviceRegistry = new ServiceRegistry();\n\n/**\n * Initialize default services\n */\nexport async function initializeServices(): Promise<void> {\n  // Lazy import services to avoid circular dependencies\n  const { SwarmService } = await import('./swarm-service.js');\n  const { ConfigService } = await import('./config-service.js');\n  const { TemplateService } = await import('./template-service.js');\n  \n  // Register default services\n  serviceRegistry.register('swarm', new SwarmService());\n  serviceRegistry.register('config', new ConfigService());\n  serviceRegistry.register('template', new TemplateService());\n  \n  // Initialize all services\n  await serviceRegistry.init();\n}\n\n/**\n * Get a service from the default registry\n */\nexport function getService<T>(name: string): T | undefined {\n  return serviceRegistry.get<T>(name);\n}\n\n/**\n * Service factory functions for easy access\n */\nexport const Services = {\n  /**\n   * Get the swarm service\n   */\n  swarm(): SwarmService {\n    const service = getService<SwarmService>('swarm');\n    if (!service) {\n      throw new Error('Swarm service not initialized');\n    }\n    return service;\n  },\n  \n  /**\n   * Get the config service\n   */\n  config(): ConfigService {\n    const service = getService<ConfigService>('config');\n    if (!service) {\n      throw new Error('Config service not initialized');\n    }\n    return service;\n  },\n  \n  /**\n   * Get the template service\n   */\n  template(): TemplateService {\n    const service = getService<TemplateService>('template');\n    if (!service) {\n      throw new Error('Template service not initialized');\n    }\n    return service;\n  },\n};\n\n/**\n * Service health check\n */\nexport interface ServiceHealthCheck {\n  name: string;\n  status: 'healthy' | 'unhealthy' | 'unknown';\n  message?: string;\n  lastCheck: Date;\n  uptime?: number;\n}\n\n/**\n * Check health of all services\n */\nexport async function checkServiceHealth(): Promise<ServiceHealthCheck[]> {\n  const results: ServiceHealthCheck[] = [];\n  const serviceNames = serviceRegistry.getServiceNames();\n  \n  for (const name of serviceNames) {\n    const service = serviceRegistry.get(name);\n    let status: ServiceHealthCheck['status'] = 'unknown';\n    let message: string | undefined;\n    \n    try {\n      if (service && typeof service.healthCheck === 'function') {\n        const health = await service.healthCheck();\n        status = health.healthy ? 'healthy' : 'unhealthy';\n        message = health.message;\n      } else {\n        status = 'healthy'; // Assume healthy if no health check\n      }\n    } catch (error) {\n      status = 'unhealthy';\n      message = (error as Error).message;\n    }\n    \n    results.push({\n      name,\n      status,\n      message,\n      lastCheck: new Date(),\n    });\n  }\n  \n  return results;\n}\n\n/**\n * Service configuration interface\n */\nexport interface ServiceConfig {\n  /** Service name */\n  name: string;\n  \n  /** Service configuration */\n  config: Record<string, any>;\n  \n  /** Dependencies */\n  dependencies?: string[];\n  \n  /** Auto-start service */\n  autoStart?: boolean;\n  \n  /** Service priority (higher numbers start first) */\n  priority?: number;\n}\n\n/**\n * Load services from configuration\n */\nexport async function loadServicesFromConfig(\n  configs: ServiceConfig[]\n): Promise<void> {\n  // Sort by priority\n  const sortedConfigs = configs.sort((a, b) => \n    (b.priority || 0) - (a.priority || 0)\n  );\n  \n  for (const config of sortedConfigs) {\n    try {\n      // Dynamic service loading would go here\n      // For now, we only support built-in services\n      if (config.autoStart !== false) {\n        switch (config.name) {\n          case 'swarm':\n            serviceRegistry.register('swarm', new SwarmService(config.config));\n            break;\n          case 'config':\n            serviceRegistry.register('config', new ConfigService(config.config));\n            break;\n          case 'template':\n            serviceRegistry.register('template', new TemplateService(config.config));\n            break;\n        }\n      }\n    } catch (error) {\n      console.warn(`Failed to load service \"${config.name}\": ${(error as Error).message}`);\n    }\n  }\n  \n  await serviceRegistry.init();\n}\n\n/**\n * Service lifecycle hooks\n */\nexport interface ServiceLifecycleHooks {\n  beforeInit?(service: any): Promise<void> | void;\n  afterInit?(service: any): Promise<void> | void;\n  beforeDispose?(service: any): Promise<void> | void;\n  afterDispose?(service: any): Promise<void> | void;\n}\n\n/**\n * Add lifecycle hooks to the service registry\n */\nexport function addServiceHooks(hooks: ServiceLifecycleHooks): void {\n  // Store hooks for later use during service lifecycle events\n  (serviceRegistry as any)._hooks = hooks;\n}\n"],
      version: 3
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "1c4898fc18bfc685f9a113907d6d19a3cf1a9d35"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_1wtpxuulkk = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_1wtpxuulkk();
/**
 * CLI Services Index
 *
 * This module re-exports all CLI services for convenient importing.
 * Provides business logic services for swarm operations, configuration, and templates.
 */
// Swarm operations service
export { SwarmService } from './swarm-service.js';
// Configuration management service
export { ConfigService } from './config-service.js';
// Template operations service
export { TemplateService } from './template-service.js';
/**
 * Service registry for managing all CLI services
 */
export class ServiceRegistry {
  services =
  /* istanbul ignore next */
  (cov_1wtpxuulkk().s[0]++, new Map());
  initialized =
  /* istanbul ignore next */
  (cov_1wtpxuulkk().s[1]++, false);
  /**
   * Register a service with the registry
   */
  register(name, service) {
    /* istanbul ignore next */
    cov_1wtpxuulkk().f[0]++;
    cov_1wtpxuulkk().s[2]++;
    this.services.set(name, service);
  }
  /**
   * Get a service from the registry
   */
  get(name) {
    /* istanbul ignore next */
    cov_1wtpxuulkk().f[1]++;
    cov_1wtpxuulkk().s[3]++;
    return this.services.get(name);
  }
  /**
   * Check if a service is registered
   */
  has(name) {
    /* istanbul ignore next */
    cov_1wtpxuulkk().f[2]++;
    cov_1wtpxuulkk().s[4]++;
    return this.services.has(name);
  }
  /**
   * Initialize all services
   */
  async init() {
    /* istanbul ignore next */
    cov_1wtpxuulkk().f[3]++;
    cov_1wtpxuulkk().s[5]++;
    if (this.initialized) {
      /* istanbul ignore next */
      cov_1wtpxuulkk().b[0][0]++;
      cov_1wtpxuulkk().s[6]++;
      return;
    } else
    /* istanbul ignore next */
    {
      cov_1wtpxuulkk().b[0][1]++;
    }
    // Initialize services in dependency order
    const services =
    /* istanbul ignore next */
    (cov_1wtpxuulkk().s[7]++, Array.from(this.services.values()));
    /* istanbul ignore next */
    cov_1wtpxuulkk().s[8]++;
    for (const service of services) {
      /* istanbul ignore next */
      cov_1wtpxuulkk().s[9]++;
      if (
      /* istanbul ignore next */
      (cov_1wtpxuulkk().b[2][0]++, service) &&
      /* istanbul ignore next */
      (cov_1wtpxuulkk().b[2][1]++, typeof service.init === 'function')) {
        /* istanbul ignore next */
        cov_1wtpxuulkk().b[1][0]++;
        cov_1wtpxuulkk().s[10]++;
        await service.init();
      } else
      /* istanbul ignore next */
      {
        cov_1wtpxuulkk().b[1][1]++;
      }
    }
    /* istanbul ignore next */
    cov_1wtpxuulkk().s[11]++;
    this.initialized = true;
  }
  /**
   * Dispose all services
   */
  async dispose() {
    /* istanbul ignore next */
    cov_1wtpxuulkk().f[4]++;
    const services =
    /* istanbul ignore next */
    (cov_1wtpxuulkk().s[12]++, Array.from(this.services.values()).reverse());
    /* istanbul ignore next */
    cov_1wtpxuulkk().s[13]++;
    for (const service of services) {
      /* istanbul ignore next */
      cov_1wtpxuulkk().s[14]++;
      if (
      /* istanbul ignore next */
      (cov_1wtpxuulkk().b[4][0]++, service) &&
      /* istanbul ignore next */
      (cov_1wtpxuulkk().b[4][1]++, typeof service.dispose === 'function')) {
        /* istanbul ignore next */
        cov_1wtpxuulkk().b[3][0]++;
        cov_1wtpxuulkk().s[15]++;
        await service.dispose();
      } else
      /* istanbul ignore next */
      {
        cov_1wtpxuulkk().b[3][1]++;
      }
    }
    /* istanbul ignore next */
    cov_1wtpxuulkk().s[16]++;
    this.services.clear();
    /* istanbul ignore next */
    cov_1wtpxuulkk().s[17]++;
    this.initialized = false;
  }
  /**
   * Get all registered service names
   */
  getServiceNames() {
    /* istanbul ignore next */
    cov_1wtpxuulkk().f[5]++;
    cov_1wtpxuulkk().s[18]++;
    return Array.from(this.services.keys());
  }
  /**
   * Check if services are initialized
   */
  isInitialized() {
    /* istanbul ignore next */
    cov_1wtpxuulkk().f[6]++;
    cov_1wtpxuulkk().s[19]++;
    return this.initialized;
  }
}
/**
 * Default service registry instance
 */
export const serviceRegistry =
/* istanbul ignore next */
(cov_1wtpxuulkk().s[20]++, new ServiceRegistry());
/**
 * Initialize default services
 */
export async function initializeServices() {
  /* istanbul ignore next */
  cov_1wtpxuulkk().f[7]++;
  // Lazy import services to avoid circular dependencies
  const {
    SwarmService
  } =
  /* istanbul ignore next */
  (cov_1wtpxuulkk().s[21]++, await import('./swarm-service.js'));
  const {
    ConfigService
  } =
  /* istanbul ignore next */
  (cov_1wtpxuulkk().s[22]++, await import('./config-service.js'));
  const {
    TemplateService
  } =
  /* istanbul ignore next */
  (cov_1wtpxuulkk().s[23]++, await import('./template-service.js'));
  // Register default services
  /* istanbul ignore next */
  cov_1wtpxuulkk().s[24]++;
  serviceRegistry.register('swarm', new SwarmService());
  /* istanbul ignore next */
  cov_1wtpxuulkk().s[25]++;
  serviceRegistry.register('config', new ConfigService());
  /* istanbul ignore next */
  cov_1wtpxuulkk().s[26]++;
  serviceRegistry.register('template', new TemplateService());
  // Initialize all services
  /* istanbul ignore next */
  cov_1wtpxuulkk().s[27]++;
  await serviceRegistry.init();
}
/**
 * Get a service from the default registry
 */
export function getService(name) {
  /* istanbul ignore next */
  cov_1wtpxuulkk().f[8]++;
  cov_1wtpxuulkk().s[28]++;
  return serviceRegistry.get(name);
}
/**
 * Service factory functions for easy access
 */
export const Services =
/* istanbul ignore next */
(cov_1wtpxuulkk().s[29]++, {
  /**
   * Get the swarm service
   */
  swarm() {
    /* istanbul ignore next */
    cov_1wtpxuulkk().f[9]++;
    const service =
    /* istanbul ignore next */
    (cov_1wtpxuulkk().s[30]++, getService('swarm'));
    /* istanbul ignore next */
    cov_1wtpxuulkk().s[31]++;
    if (!service) {
      /* istanbul ignore next */
      cov_1wtpxuulkk().b[5][0]++;
      cov_1wtpxuulkk().s[32]++;
      throw new Error('Swarm service not initialized');
    } else
    /* istanbul ignore next */
    {
      cov_1wtpxuulkk().b[5][1]++;
    }
    cov_1wtpxuulkk().s[33]++;
    return service;
  },
  /**
   * Get the config service
   */
  config() {
    /* istanbul ignore next */
    cov_1wtpxuulkk().f[10]++;
    const service =
    /* istanbul ignore next */
    (cov_1wtpxuulkk().s[34]++, getService('config'));
    /* istanbul ignore next */
    cov_1wtpxuulkk().s[35]++;
    if (!service) {
      /* istanbul ignore next */
      cov_1wtpxuulkk().b[6][0]++;
      cov_1wtpxuulkk().s[36]++;
      throw new Error('Config service not initialized');
    } else
    /* istanbul ignore next */
    {
      cov_1wtpxuulkk().b[6][1]++;
    }
    cov_1wtpxuulkk().s[37]++;
    return service;
  },
  /**
   * Get the template service
   */
  template() {
    /* istanbul ignore next */
    cov_1wtpxuulkk().f[11]++;
    const service =
    /* istanbul ignore next */
    (cov_1wtpxuulkk().s[38]++, getService('template'));
    /* istanbul ignore next */
    cov_1wtpxuulkk().s[39]++;
    if (!service) {
      /* istanbul ignore next */
      cov_1wtpxuulkk().b[7][0]++;
      cov_1wtpxuulkk().s[40]++;
      throw new Error('Template service not initialized');
    } else
    /* istanbul ignore next */
    {
      cov_1wtpxuulkk().b[7][1]++;
    }
    cov_1wtpxuulkk().s[41]++;
    return service;
  }
});
/**
 * Check health of all services
 */
export async function checkServiceHealth() {
  /* istanbul ignore next */
  cov_1wtpxuulkk().f[12]++;
  const results =
  /* istanbul ignore next */
  (cov_1wtpxuulkk().s[42]++, []);
  const serviceNames =
  /* istanbul ignore next */
  (cov_1wtpxuulkk().s[43]++, serviceRegistry.getServiceNames());
  /* istanbul ignore next */
  cov_1wtpxuulkk().s[44]++;
  for (const name of serviceNames) {
    const service =
    /* istanbul ignore next */
    (cov_1wtpxuulkk().s[45]++, serviceRegistry.get(name));
    let status =
    /* istanbul ignore next */
    (cov_1wtpxuulkk().s[46]++, 'unknown');
    let message;
    /* istanbul ignore next */
    cov_1wtpxuulkk().s[47]++;
    try {
      /* istanbul ignore next */
      cov_1wtpxuulkk().s[48]++;
      if (
      /* istanbul ignore next */
      (cov_1wtpxuulkk().b[9][0]++, service) &&
      /* istanbul ignore next */
      (cov_1wtpxuulkk().b[9][1]++, typeof service.healthCheck === 'function')) {
        /* istanbul ignore next */
        cov_1wtpxuulkk().b[8][0]++;
        const health =
        /* istanbul ignore next */
        (cov_1wtpxuulkk().s[49]++, await service.healthCheck());
        /* istanbul ignore next */
        cov_1wtpxuulkk().s[50]++;
        status = health.healthy ?
        /* istanbul ignore next */
        (cov_1wtpxuulkk().b[10][0]++, 'healthy') :
        /* istanbul ignore next */
        (cov_1wtpxuulkk().b[10][1]++, 'unhealthy');
        /* istanbul ignore next */
        cov_1wtpxuulkk().s[51]++;
        message = health.message;
      } else {
        /* istanbul ignore next */
        cov_1wtpxuulkk().b[8][1]++;
        cov_1wtpxuulkk().s[52]++;
        status = 'healthy'; // Assume healthy if no health check
      }
    } catch (error) {
      /* istanbul ignore next */
      cov_1wtpxuulkk().s[53]++;
      status = 'unhealthy';
      /* istanbul ignore next */
      cov_1wtpxuulkk().s[54]++;
      message = error.message;
    }
    /* istanbul ignore next */
    cov_1wtpxuulkk().s[55]++;
    results.push({
      name,
      status,
      message,
      lastCheck: new Date()
    });
  }
  /* istanbul ignore next */
  cov_1wtpxuulkk().s[56]++;
  return results;
}
/**
 * Load services from configuration
 */
export async function loadServicesFromConfig(configs) {
  /* istanbul ignore next */
  cov_1wtpxuulkk().f[13]++;
  // Sort by priority
  const sortedConfigs =
  /* istanbul ignore next */
  (cov_1wtpxuulkk().s[57]++, configs.sort((a, b) => {
    /* istanbul ignore next */
    cov_1wtpxuulkk().f[14]++;
    cov_1wtpxuulkk().s[58]++;
    return (
    /* istanbul ignore next */
    (cov_1wtpxuulkk().b[11][0]++, b.priority) ||
    /* istanbul ignore next */
    (cov_1wtpxuulkk().b[11][1]++, 0)) - (
    /* istanbul ignore next */
    (cov_1wtpxuulkk().b[12][0]++, a.priority) ||
    /* istanbul ignore next */
    (cov_1wtpxuulkk().b[12][1]++, 0));
  }));
  /* istanbul ignore next */
  cov_1wtpxuulkk().s[59]++;
  for (const config of sortedConfigs) {
    /* istanbul ignore next */
    cov_1wtpxuulkk().s[60]++;
    try {
      /* istanbul ignore next */
      cov_1wtpxuulkk().s[61]++;
      // Dynamic service loading would go here
      // For now, we only support built-in services
      if (config.autoStart !== false) {
        /* istanbul ignore next */
        cov_1wtpxuulkk().b[13][0]++;
        cov_1wtpxuulkk().s[62]++;
        switch (config.name) {
          case 'swarm':
            /* istanbul ignore next */
            cov_1wtpxuulkk().b[14][0]++;
            cov_1wtpxuulkk().s[63]++;
            serviceRegistry.register('swarm', new SwarmService(config.config));
            /* istanbul ignore next */
            cov_1wtpxuulkk().s[64]++;
            break;
          case 'config':
            /* istanbul ignore next */
            cov_1wtpxuulkk().b[14][1]++;
            cov_1wtpxuulkk().s[65]++;
            serviceRegistry.register('config', new ConfigService(config.config));
            /* istanbul ignore next */
            cov_1wtpxuulkk().s[66]++;
            break;
          case 'template':
            /* istanbul ignore next */
            cov_1wtpxuulkk().b[14][2]++;
            cov_1wtpxuulkk().s[67]++;
            serviceRegistry.register('template', new TemplateService(config.config));
            /* istanbul ignore next */
            cov_1wtpxuulkk().s[68]++;
            break;
        }
      } else
      /* istanbul ignore next */
      {
        cov_1wtpxuulkk().b[13][1]++;
      }
    } catch (error) {
      /* istanbul ignore next */
      cov_1wtpxuulkk().s[69]++;
      console.warn(`Failed to load service "${config.name}": ${error.message}`);
    }
  }
  /* istanbul ignore next */
  cov_1wtpxuulkk().s[70]++;
  await serviceRegistry.init();
}
/**
 * Add lifecycle hooks to the service registry
 */
export function addServiceHooks(hooks) {
  /* istanbul ignore next */
  cov_1wtpxuulkk().f[15]++;
  cov_1wtpxuulkk().s[71]++;
  // Store hooks for later use during service lifecycle events
  serviceRegistry._hooks = hooks;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,