{"version":3,"names":["cov_15bq9hvdim","actualCoverage","path","fs","existsSync","BaseCommand","InitCommand","constructor","f","s","name","description","usage","category","minArgs","maxArgs","examples","flags","template","type","default","force","validate","context","errors","warnings","projectName","args","b","test","push","projectPath","resolve","cwd","validTemplates","includes","join","length","valid","run","skipInstall","skipGit","success","error","exitCode","mkdir","recursive","copyTemplate","initGitRepository","installDependencies","message","data","gitInitialized","dependenciesInstalled","Error","String","directories","dir","packageJson","version","main","scripts","dependencies","devDependencies","writeFile","JSON","stringify","config","swarm","topology","maxAgents","strategy","memory","provider","persistent","neural","enabled","models","mainContent","getTypescriptMainContent","getJavascriptMainContent","mainFile","tsConfig","compilerOptions","target","module","moduleResolution","outDir","rootDir","strict","esModuleInterop","skipLibCheck","forceConsistentCasingInFileNames","include","exclude","readme","getReadmeContent","gitignore","spawn","Promise","reject","git","on","code","npm","getHelp"],"sources":["/home/mhugo/code/claude-code-flow/src/cli/commands/init/init-command.ts"],"sourcesContent":["/**\n * Init Command Implementation\n * \n * Initializes a new claude-flow project with templates and configuration\n */\n\nimport path from 'path';\nimport fs from 'fs/promises';\nimport { existsSync } from 'fs';\nimport { BaseCommand } from '../../core/base-command.js';\nimport type { CommandContext, CommandResult, CommandValidationResult } from '../../types/index.js';\n\nexport class InitCommand extends BaseCommand {\n  constructor() {\n    super({\n      name: 'init',\n      description: 'Initialize a new claude-flow project',\n      usage: 'claude-flow init [project-name]',\n      category: 'core',\n      minArgs: 0,\n      maxArgs: 1,\n      examples: [\n        'claude-flow init',\n        'claude-flow init my-project',\n        'claude-flow init --template typescript'\n      ],\n      flags: {\n        template: {\n          type: 'string',\n          description: 'Project template to use',\n          default: 'basic'\n        },\n        force: {\n          type: 'boolean',\n          description: 'Overwrite existing files',\n          default: false\n        },\n        'skip-install': {\n          type: 'boolean',\n          description: 'Skip npm package installation',\n          default: false\n        },\n        'skip-git': {\n          type: 'boolean',\n          description: 'Skip git repository initialization',\n          default: false\n        }\n      }\n    });\n  }\n\n  protected async validate(context: CommandContext): Promise<CommandValidationResult | null> {\n    const errors: string[] = [];\n    const warnings: string[] = [];\n\n    const projectName = context.args[0];\n    if (projectName) {\n      // Validate project name\n      if (!/^[a-z0-9-_]+$/i.test(projectName)) {\n        errors.push('Project name can only contain letters, numbers, hyphens, and underscores');\n      }\n\n      // Check if directory already exists\n      const projectPath = path.resolve(context.cwd, projectName);\n      if (existsSync(projectPath) && !context.flags.force) {\n        warnings.push(`Directory '${projectName}' already exists. Use --force to overwrite.`);\n      }\n    }\n\n    // Validate template\n    const template = context.flags.template as string;\n    const validTemplates = ['basic', 'typescript', 'javascript', 'node', 'browser'];\n    if (!validTemplates.includes(template)) {\n      errors.push(`Invalid template '${template}'. Valid templates: ${validTemplates.join(', ')}`);\n    }\n\n    return errors.length > 0 || warnings.length > 0 ? { valid: errors.length === 0, errors, warnings } : null;\n  }\n\n  protected async run(context: CommandContext): Promise<CommandResult> {\n    try {\n      const projectName = context.args[0] || 'claude-flow-project';\n      const template = context.flags.template as string || 'basic';\n      const force = context.flags.force as boolean || false;\n      const skipInstall = context.flags['skip-install'] as boolean || false;\n      const skipGit = context.flags['skip-git'] as boolean || false;\n\n      const projectPath = path.resolve(context.cwd, projectName);\n\n      // Create project directory\n      if (existsSync(projectPath) && !force) {\n        return {\n          success: false,\n          error: `Directory '${projectName}' already exists. Use --force to overwrite.`,\n          exitCode: 1\n        };\n      }\n\n      await fs.mkdir(projectPath, { recursive: true });\n\n      // Copy template files\n      await this.copyTemplate(template, projectPath, projectName);\n\n      // Initialize git repository\n      if (!skipGit) {\n        await this.initGitRepository(projectPath);\n      }\n\n      // Install dependencies\n      if (!skipInstall) {\n        await this.installDependencies(projectPath);\n      }\n\n      return {\n        success: true,\n        exitCode: 0,\n        message: `Successfully initialized claude-flow project '${projectName}'`,\n        data: {\n          projectName,\n          projectPath,\n          template,\n          gitInitialized: !skipGit,\n          dependenciesInstalled: !skipInstall\n        }\n      };\n    } catch (error) {\n      return {\n        success: false,\n        error: `Failed to initialize project: ${error instanceof Error ? error.message : String(error)}`,\n        exitCode: 1\n      };\n    }\n  }\n\n  private async copyTemplate(template: string, projectPath: string, projectName: string): Promise<void> {\n    // Create basic project structure\n    const directories = [\n      'src',\n      'config',\n      'docs',\n      'tests',\n      'templates'\n    ];\n\n    for (const dir of directories) {\n      await fs.mkdir(path.join(projectPath, dir), { recursive: true });\n    }\n\n    // Create package.json\n    const packageJson = {\n      name: projectName,\n      version: '1.0.0',\n      description: 'A claude-flow project',\n      main: template === 'typescript' ? 'dist/index.js' : 'src/index.js',\n      scripts: {\n        'start': 'claude-flow swarm start',\n        'dev': 'claude-flow swarm start --dev',\n        'test': 'npm test',\n        'build': template === 'typescript' ? 'tsc' : 'echo \"No build step needed\"'\n      },\n      dependencies: {\n        'claude-flow': '^2.0.0'\n      },\n      devDependencies: template === 'typescript' ? {\n        'typescript': '^5.0.0',\n        '@types/node': '^20.0.0'\n      } : {}\n    };\n\n    await fs.writeFile(\n      path.join(projectPath, 'package.json'),\n      JSON.stringify(packageJson, null, 2)\n    );\n\n    // Create claude-flow configuration\n    const config = {\n      swarm: {\n        topology: 'mesh',\n        maxAgents: 5,\n        strategy: 'balanced'\n      },\n      memory: {\n        provider: 'sqlite',\n        persistent: true\n      },\n      neural: {\n        enabled: true,\n        models: ['claude-3-haiku', 'claude-3-sonnet']\n      }\n    };\n\n    await fs.writeFile(\n      path.join(projectPath, 'config', 'claude-flow.json'),\n      JSON.stringify(config, null, 2)\n    );\n\n    // Create main entry file\n    const mainContent = template === 'typescript' \n      ? this.getTypescriptMainContent()\n      : this.getJavascriptMainContent();\n\n    const mainFile = template === 'typescript' ? 'index.ts' : 'index.js';\n    await fs.writeFile(path.join(projectPath, 'src', mainFile), mainContent);\n\n    // Create TypeScript config if needed\n    if (template === 'typescript') {\n      const tsConfig = {\n        compilerOptions: {\n          target: 'ES2022',\n          module: 'NodeNext',\n          moduleResolution: 'NodeNext',\n          outDir: './dist',\n          rootDir: './src',\n          strict: true,\n          esModuleInterop: true,\n          skipLibCheck: true,\n          forceConsistentCasingInFileNames: true\n        },\n        include: ['src/**/*'],\n        exclude: ['node_modules', 'dist']\n      };\n\n      await fs.writeFile(\n        path.join(projectPath, 'tsconfig.json'),\n        JSON.stringify(tsConfig, null, 2)\n      );\n    }\n\n    // Create README\n    const readme = this.getReadmeContent(projectName, template);\n    await fs.writeFile(path.join(projectPath, 'README.md'), readme);\n\n    // Create .gitignore\n    const gitignore = [\n      'node_modules/',\n      'dist/',\n      '.env',\n      '*.log',\n      '.DS_Store',\n      'claude-flow-data.db'\n    ].join('\\n');\n\n    await fs.writeFile(path.join(projectPath, '.gitignore'), gitignore);\n  }\n\n  private async initGitRepository(projectPath: string): Promise<void> {\n    try {\n      const { spawn } = await import('child_process');\n      \n      return new Promise((resolve, reject) => {\n        const git = spawn('git', ['init'], { cwd: projectPath });\n        \n        git.on('close', (code) => {\n          if (code === 0) {\n            resolve();\n          } else {\n            reject(new Error(`Git init failed with code ${code}`));\n          }\n        });\n\n        git.on('error', reject);\n      });\n    } catch (error) {\n      throw new Error(`Failed to initialize git repository: ${error instanceof Error ? error.message : String(error)}`);\n    }\n  }\n\n  private async installDependencies(projectPath: string): Promise<void> {\n    try {\n      const { spawn } = await import('child_process');\n      \n      return new Promise((resolve, reject) => {\n        const npm = spawn('npm', ['install'], { cwd: projectPath });\n        \n        npm.on('close', (code) => {\n          if (code === 0) {\n            resolve();\n          } else {\n            reject(new Error(`npm install failed with code ${code}`));\n          }\n        });\n\n        npm.on('error', reject);\n      });\n    } catch (error) {\n      throw new Error(`Failed to install dependencies: ${error instanceof Error ? error.message : String(error)}`);\n    }\n  }\n\n  private getJavascriptMainContent(): string {\n    return `/**\n * Claude Flow Project Entry Point\n */\n\nimport { SwarmOrchestrator } from 'claude-flow';\n\nasync function main() {\n  const orchestrator = new SwarmOrchestrator({\n    topology: 'mesh',\n    maxAgents: 5\n  });\n\n  try {\n    await orchestrator.initialize();\n    \n    // Spawn agents\n    const researcher = await orchestrator.spawnAgent('researcher');\n    const analyst = await orchestrator.spawnAgent('analyst');\n    \n    console.log('Claude Flow swarm initialized successfully!');\n    \n    // Your application logic here\n    \n  } catch (error) {\n    console.error('Failed to initialize swarm:', error);\n    process.exit(1);\n  }\n}\n\nif (import.meta.url === \\`file://\\${process.argv[1]}\\`) {\n  main().catch(console.error);\n}\n`;\n  }\n\n  private getTypescriptMainContent(): string {\n    return `/**\n * Claude Flow Project Entry Point\n */\n\nimport { SwarmOrchestrator, type SwarmConfig } from 'claude-flow';\n\nasync function main(): Promise<void> {\n  const config: SwarmConfig = {\n    topology: 'mesh',\n    maxAgents: 5,\n    strategy: 'balanced'\n  };\n\n  const orchestrator = new SwarmOrchestrator(config);\n\n  try {\n    await orchestrator.initialize();\n    \n    // Spawn agents\n    const researcher = await orchestrator.spawnAgent('researcher');\n    const analyst = await orchestrator.spawnAgent('analyst');\n    \n    console.log('Claude Flow swarm initialized successfully!');\n    \n    // Your application logic here\n    \n  } catch (error) {\n    console.error('Failed to initialize swarm:', error);\n    process.exit(1);\n  }\n}\n\nif (require.main === module) {\n  main().catch(console.error);\n}\n`;\n  }\n\n  private getReadmeContent(projectName: string, template: string): string {\n    return `# ${projectName}\n\nA Claude Flow project using the ${template} template.\n\n## Getting Started\n\n1. Install dependencies:\n   \\`\\`\\`bash\n   npm install\n   \\`\\`\\`\n\n2. Start the swarm:\n   \\`\\`\\`bash\n   npm start\n   \\`\\`\\`\n\n3. Development mode:\n   \\`\\`\\`bash\n   npm run dev\n   \\`\\`\\`\n\n## Project Structure\n\n- \\`src/\\` - Source code\n- \\`config/\\` - Configuration files\n- \\`docs/\\` - Documentation\n- \\`tests/\\` - Test files\n- \\`templates/\\` - Project templates\n\n## Commands\n\n- \\`claude-flow status\\` - Show swarm status\n- \\`claude-flow swarm start\\` - Start the swarm\n- \\`claude-flow swarm stop\\` - Stop the swarm\n- \\`claude-flow help\\` - Show help\n\n## Configuration\n\nEdit \\`config/claude-flow.json\\` to customize your swarm configuration.\n\n## Documentation\n\nSee the [Claude Flow documentation](https://github.com/Ejb503/claude-flow) for more information.\n`;\n  }\n\n  getHelp(): string {\n    return `Initialize a new claude-flow project\n\nUSAGE:\n  claude-flow init [project-name] [options]\n\nARGUMENTS:\n  [project-name]  Name for the new project (default: claude-flow-project)\n\nOPTIONS:\n  --template <template>  Project template to use (basic, typescript, javascript, node, browser) [default: basic]\n  --force               Overwrite existing files\n  --skip-install        Skip npm package installation\n  --skip-git            Skip git repository initialization\n  -h, --help            Show help\n\nEXAMPLES:\n  claude-flow init\n  claude-flow init my-project\n  claude-flow init my-app --template typescript\n  claude-flow init existing-project --force\n  claude-flow init quick-start --skip-install --skip-git\n\nThe init command creates a new claude-flow project with:\n- Project structure and configuration\n- Package.json with dependencies\n- Main entry file\n- README and documentation\n- Git repository (unless --skip-git)\n- Installed dependencies (unless --skip-install)\n`;\n  }\n}"],"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","ignoreList":[]}