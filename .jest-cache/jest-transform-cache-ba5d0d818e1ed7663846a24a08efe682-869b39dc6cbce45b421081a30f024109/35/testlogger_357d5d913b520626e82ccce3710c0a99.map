{"version":3,"names":["cov_q2k5novc9","actualCoverage","TestLogger","logs","s","testName","silent","constructor","b","f","debug","message","context","log","info","warn","error","logInteraction","component","method","args","result","category","logStateChange","before","after","operation","logPerformance","duration","logAssertion","description","passed","expected","actual","level","getLogs","getLogsByLevel","filter","getLogsByCategory","clearLogs","exportLogs","format","JSON","stringify","map","timestamp","Date","toISOString","toUpperCase","join","createChild","name","child","entry","now","push","process","env","NODE_ENV","prefix","console","testLogger","createTestLogger"],"sources":["/home/mhugo/code/claude-code-flow/src/__tests__/helpers/test-logger.ts"],"sourcesContent":["/**\n * Test Logger - Specialized logging for test environments\n * \n * Provides structured logging for both London and Classical TDD approaches\n */\n\nexport interface LogEntry {\n  level: 'debug' | 'info' | 'warn' | 'error';\n  message: string;\n  timestamp: number;\n  context?: Record<string, any>;\n  testName?: string;\n  category?: string;\n}\n\nexport class TestLogger {\n  private logs: LogEntry[] = [];\n  private testName?: string;\n  private silent: boolean = false;\n\n  constructor(testName?: string, silent: boolean = false) {\n    this.testName = testName;\n    this.silent = silent;\n  }\n\n  /**\n   * Log a debug message\n   */\n  debug(message: string, context?: Record<string, any>): void {\n    this.log('debug', message, context);\n  }\n\n  /**\n   * Log an info message\n   */\n  info(message: string, context?: Record<string, any>): void {\n    this.log('info', message, context);\n  }\n\n  /**\n   * Log a warning message\n   */\n  warn(message: string, context?: Record<string, any>): void {\n    this.log('warn', message, context);\n  }\n\n  /**\n   * Log an error message\n   */\n  error(message: string, context?: Record<string, any>): void {\n    this.log('error', message, context);\n  }\n\n  /**\n   * Log test interactions (London School)\n   */\n  logInteraction(component: string, method: string, args?: any[], result?: any): void {\n    this.log('debug', `Interaction: ${component}.${method}`, {\n      component,\n      method,\n      args,\n      result,\n      category: 'interaction'\n    });\n  }\n\n  /**\n   * Log state changes (Classical School)\n   */\n  logStateChange(component: string, before: any, after: any, operation?: string): void {\n    this.log('debug', `State change in ${component}`, {\n      component,\n      before,\n      after,\n      operation,\n      category: 'state-change'\n    });\n  }\n\n  /**\n   * Log performance metrics\n   */\n  logPerformance(operation: string, duration: number, context?: Record<string, any>): void {\n    this.log('info', `Performance: ${operation} took ${duration}ms`, {\n      operation,\n      duration,\n      category: 'performance',\n      ...context\n    });\n  }\n\n  /**\n   * Log assertion results\n   */\n  logAssertion(description: string, passed: boolean, expected?: any, actual?: any): void {\n    const level = passed ? 'info' : 'error';\n    this.log(level, `Assertion: ${description} - ${passed ? 'PASSED' : 'FAILED'}`, {\n      description,\n      passed,\n      expected,\n      actual,\n      category: 'assertion'\n    });\n  }\n\n  /**\n   * Get all logs\n   */\n  getLogs(): LogEntry[] {\n    return [...this.logs];\n  }\n\n  /**\n   * Get logs by level\n   */\n  getLogsByLevel(level: LogEntry['level']): LogEntry[] {\n    return this.logs.filter(log => log.level === level);\n  }\n\n  /**\n   * Get logs by category\n   */\n  getLogsByCategory(category: string): LogEntry[] {\n    return this.logs.filter(log => log.context?.category === category);\n  }\n\n  /**\n   * Clear all logs\n   */\n  clearLogs(): void {\n    this.logs = [];\n  }\n\n  /**\n   * Export logs as string\n   */\n  exportLogs(format: 'text' | 'json' = 'text'): string {\n    if (format === 'json') {\n      return JSON.stringify(this.logs, null, 2);\n    }\n\n    return this.logs.map(log => {\n      const timestamp = new Date(log.timestamp).toISOString();\n      const context = log.context ? ` | ${JSON.stringify(log.context)}` : '';\n      return `[${timestamp}] ${log.level.toUpperCase()}: ${log.message}${context}`;\n    }).join('\\n');\n  }\n\n  /**\n   * Create a child logger for a specific component/test\n   */\n  createChild(name: string): TestLogger {\n    const child = new TestLogger(`${this.testName ? `${this.testName}.` : ''}${name}`, this.silent);\n    // Share the log storage\n    child.logs = this.logs;\n    return child;\n  }\n\n  private log(level: LogEntry['level'], message: string, context?: Record<string, any>): void {\n    const entry: LogEntry = {\n      level,\n      message,\n      timestamp: Date.now(),\n      context,\n      testName: this.testName\n    };\n\n    this.logs.push(entry);\n\n    if (!this.silent && process.env.NODE_ENV === 'test') {\n      const prefix = this.testName ? `[${this.testName}] ` : '';\n      console.log(`${prefix}${level.toUpperCase()}: ${message}`, context || '');\n    }\n  }\n}\n\n// Global test logger instance\nexport const testLogger = new TestLogger();\n\n// Factory function for creating test-specific loggers\nexport function createTestLogger(testName: string, silent?: boolean): TestLogger {\n  return new TestLogger(testName, silent);\n}"],"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","ignoreList":[]}