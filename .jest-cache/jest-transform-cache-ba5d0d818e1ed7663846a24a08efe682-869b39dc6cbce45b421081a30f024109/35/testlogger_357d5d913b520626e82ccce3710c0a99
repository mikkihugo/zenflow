7b653d62332eb55811dd77934d470734
/* istanbul ignore next */
function cov_q2k5novc9() {
  var path = "/home/mhugo/code/claude-code-flow/src/__tests__/helpers/test-logger.ts";
  var hash = "7fe4079adf3b9382d7c65c5df603ef55ee26480e";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/home/mhugo/code/claude-code-flow/src/__tests__/helpers/test-logger.ts",
    statementMap: {
      "0": {
        start: {
          line: 7,
          column: 11
        },
        end: {
          line: 7,
          column: 13
        }
      },
      "1": {
        start: {
          line: 9,
          column: 13
        },
        end: {
          line: 9,
          column: 18
        }
      },
      "2": {
        start: {
          line: 11,
          column: 8
        },
        end: {
          line: 11,
          column: 33
        }
      },
      "3": {
        start: {
          line: 12,
          column: 8
        },
        end: {
          line: 12,
          column: 29
        }
      },
      "4": {
        start: {
          line: 18,
          column: 8
        },
        end: {
          line: 18,
          column: 44
        }
      },
      "5": {
        start: {
          line: 24,
          column: 8
        },
        end: {
          line: 24,
          column: 43
        }
      },
      "6": {
        start: {
          line: 30,
          column: 8
        },
        end: {
          line: 30,
          column: 43
        }
      },
      "7": {
        start: {
          line: 36,
          column: 8
        },
        end: {
          line: 36,
          column: 44
        }
      },
      "8": {
        start: {
          line: 42,
          column: 8
        },
        end: {
          line: 48,
          column: 11
        }
      },
      "9": {
        start: {
          line: 54,
          column: 8
        },
        end: {
          line: 60,
          column: 11
        }
      },
      "10": {
        start: {
          line: 66,
          column: 8
        },
        end: {
          line: 71,
          column: 11
        }
      },
      "11": {
        start: {
          line: 77,
          column: 22
        },
        end: {
          line: 77,
          column: 47
        }
      },
      "12": {
        start: {
          line: 78,
          column: 8
        },
        end: {
          line: 84,
          column: 11
        }
      },
      "13": {
        start: {
          line: 90,
          column: 8
        },
        end: {
          line: 90,
          column: 30
        }
      },
      "14": {
        start: {
          line: 96,
          column: 8
        },
        end: {
          line: 96,
          column: 60
        }
      },
      "15": {
        start: {
          line: 96,
          column: 39
        },
        end: {
          line: 96,
          column: 58
        }
      },
      "16": {
        start: {
          line: 102,
          column: 8
        },
        end: {
          line: 102,
          column: 75
        }
      },
      "17": {
        start: {
          line: 102,
          column: 39
        },
        end: {
          line: 102,
          column: 73
        }
      },
      "18": {
        start: {
          line: 108,
          column: 8
        },
        end: {
          line: 108,
          column: 23
        }
      },
      "19": {
        start: {
          line: 114,
          column: 8
        },
        end: {
          line: 116,
          column: 9
        }
      },
      "20": {
        start: {
          line: 115,
          column: 12
        },
        end: {
          line: 115,
          column: 54
        }
      },
      "21": {
        start: {
          line: 117,
          column: 8
        },
        end: {
          line: 121,
          column: 22
        }
      },
      "22": {
        start: {
          line: 118,
          column: 30
        },
        end: {
          line: 118,
          column: 67
        }
      },
      "23": {
        start: {
          line: 119,
          column: 28
        },
        end: {
          line: 119,
          column: 82
        }
      },
      "24": {
        start: {
          line: 120,
          column: 12
        },
        end: {
          line: 120,
          column: 89
        }
      },
      "25": {
        start: {
          line: 127,
          column: 22
        },
        end: {
          line: 127,
          column: 103
        }
      },
      "26": {
        start: {
          line: 129,
          column: 8
        },
        end: {
          line: 129,
          column: 31
        }
      },
      "27": {
        start: {
          line: 130,
          column: 8
        },
        end: {
          line: 130,
          column: 21
        }
      },
      "28": {
        start: {
          line: 133,
          column: 22
        },
        end: {
          line: 139,
          column: 9
        }
      },
      "29": {
        start: {
          line: 140,
          column: 8
        },
        end: {
          line: 140,
          column: 30
        }
      },
      "30": {
        start: {
          line: 141,
          column: 8
        },
        end: {
          line: 144,
          column: 9
        }
      },
      "31": {
        start: {
          line: 142,
          column: 27
        },
        end: {
          line: 142,
          column: 69
        }
      },
      "32": {
        start: {
          line: 143,
          column: 12
        },
        end: {
          line: 143,
          column: 86
        }
      },
      "33": {
        start: {
          line: 148,
          column: 26
        },
        end: {
          line: 148,
          column: 42
        }
      },
      "34": {
        start: {
          line: 151,
          column: 4
        },
        end: {
          line: 151,
          column: 44
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 10,
            column: 4
          },
          end: {
            line: 10,
            column: 5
          }
        },
        loc: {
          start: {
            line: 10,
            column: 42
          },
          end: {
            line: 13,
            column: 5
          }
        },
        line: 10
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 17,
            column: 4
          },
          end: {
            line: 17,
            column: 5
          }
        },
        loc: {
          start: {
            line: 17,
            column: 28
          },
          end: {
            line: 19,
            column: 5
          }
        },
        line: 17
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 23,
            column: 4
          },
          end: {
            line: 23,
            column: 5
          }
        },
        loc: {
          start: {
            line: 23,
            column: 27
          },
          end: {
            line: 25,
            column: 5
          }
        },
        line: 23
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 29,
            column: 4
          },
          end: {
            line: 29,
            column: 5
          }
        },
        loc: {
          start: {
            line: 29,
            column: 27
          },
          end: {
            line: 31,
            column: 5
          }
        },
        line: 29
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 35,
            column: 4
          },
          end: {
            line: 35,
            column: 5
          }
        },
        loc: {
          start: {
            line: 35,
            column: 28
          },
          end: {
            line: 37,
            column: 5
          }
        },
        line: 35
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 41,
            column: 4
          },
          end: {
            line: 41,
            column: 5
          }
        },
        loc: {
          start: {
            line: 41,
            column: 52
          },
          end: {
            line: 49,
            column: 5
          }
        },
        line: 41
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 53,
            column: 4
          },
          end: {
            line: 53,
            column: 5
          }
        },
        loc: {
          start: {
            line: 53,
            column: 56
          },
          end: {
            line: 61,
            column: 5
          }
        },
        line: 53
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 65,
            column: 4
          },
          end: {
            line: 65,
            column: 5
          }
        },
        loc: {
          start: {
            line: 65,
            column: 49
          },
          end: {
            line: 72,
            column: 5
          }
        },
        line: 65
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 76,
            column: 4
          },
          end: {
            line: 76,
            column: 5
          }
        },
        loc: {
          start: {
            line: 76,
            column: 56
          },
          end: {
            line: 85,
            column: 5
          }
        },
        line: 76
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 89,
            column: 4
          },
          end: {
            line: 89,
            column: 5
          }
        },
        loc: {
          start: {
            line: 89,
            column: 14
          },
          end: {
            line: 91,
            column: 5
          }
        },
        line: 89
      },
      "10": {
        name: "(anonymous_10)",
        decl: {
          start: {
            line: 95,
            column: 4
          },
          end: {
            line: 95,
            column: 5
          }
        },
        loc: {
          start: {
            line: 95,
            column: 26
          },
          end: {
            line: 97,
            column: 5
          }
        },
        line: 95
      },
      "11": {
        name: "(anonymous_11)",
        decl: {
          start: {
            line: 96,
            column: 32
          },
          end: {
            line: 96,
            column: 33
          }
        },
        loc: {
          start: {
            line: 96,
            column: 39
          },
          end: {
            line: 96,
            column: 58
          }
        },
        line: 96
      },
      "12": {
        name: "(anonymous_12)",
        decl: {
          start: {
            line: 101,
            column: 4
          },
          end: {
            line: 101,
            column: 5
          }
        },
        loc: {
          start: {
            line: 101,
            column: 32
          },
          end: {
            line: 103,
            column: 5
          }
        },
        line: 101
      },
      "13": {
        name: "(anonymous_13)",
        decl: {
          start: {
            line: 102,
            column: 32
          },
          end: {
            line: 102,
            column: 33
          }
        },
        loc: {
          start: {
            line: 102,
            column: 39
          },
          end: {
            line: 102,
            column: 73
          }
        },
        line: 102
      },
      "14": {
        name: "(anonymous_14)",
        decl: {
          start: {
            line: 107,
            column: 4
          },
          end: {
            line: 107,
            column: 5
          }
        },
        loc: {
          start: {
            line: 107,
            column: 16
          },
          end: {
            line: 109,
            column: 5
          }
        },
        line: 107
      },
      "15": {
        name: "(anonymous_15)",
        decl: {
          start: {
            line: 113,
            column: 4
          },
          end: {
            line: 113,
            column: 5
          }
        },
        loc: {
          start: {
            line: 113,
            column: 32
          },
          end: {
            line: 122,
            column: 5
          }
        },
        line: 113
      },
      "16": {
        name: "(anonymous_16)",
        decl: {
          start: {
            line: 117,
            column: 29
          },
          end: {
            line: 117,
            column: 30
          }
        },
        loc: {
          start: {
            line: 117,
            column: 36
          },
          end: {
            line: 121,
            column: 9
          }
        },
        line: 117
      },
      "17": {
        name: "(anonymous_17)",
        decl: {
          start: {
            line: 126,
            column: 4
          },
          end: {
            line: 126,
            column: 5
          }
        },
        loc: {
          start: {
            line: 126,
            column: 22
          },
          end: {
            line: 131,
            column: 5
          }
        },
        line: 126
      },
      "18": {
        name: "(anonymous_18)",
        decl: {
          start: {
            line: 132,
            column: 4
          },
          end: {
            line: 132,
            column: 5
          }
        },
        loc: {
          start: {
            line: 132,
            column: 33
          },
          end: {
            line: 145,
            column: 5
          }
        },
        line: 132
      },
      "19": {
        name: "createTestLogger",
        decl: {
          start: {
            line: 150,
            column: 16
          },
          end: {
            line: 150,
            column: 32
          }
        },
        loc: {
          start: {
            line: 150,
            column: 51
          },
          end: {
            line: 152,
            column: 1
          }
        },
        line: 150
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 10,
            column: 26
          },
          end: {
            line: 10,
            column: 40
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 10,
            column: 35
          },
          end: {
            line: 10,
            column: 40
          }
        }],
        line: 10
      },
      "1": {
        loc: {
          start: {
            line: 77,
            column: 22
          },
          end: {
            line: 77,
            column: 47
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 77,
            column: 31
          },
          end: {
            line: 77,
            column: 37
          }
        }, {
          start: {
            line: 77,
            column: 40
          },
          end: {
            line: 77,
            column: 47
          }
        }],
        line: 77
      },
      "2": {
        loc: {
          start: {
            line: 78,
            column: 55
          },
          end: {
            line: 78,
            column: 83
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 78,
            column: 64
          },
          end: {
            line: 78,
            column: 72
          }
        }, {
          start: {
            line: 78,
            column: 75
          },
          end: {
            line: 78,
            column: 83
          }
        }],
        line: 78
      },
      "3": {
        loc: {
          start: {
            line: 113,
            column: 15
          },
          end: {
            line: 113,
            column: 30
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 113,
            column: 24
          },
          end: {
            line: 113,
            column: 30
          }
        }],
        line: 113
      },
      "4": {
        loc: {
          start: {
            line: 114,
            column: 8
          },
          end: {
            line: 116,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 114,
            column: 8
          },
          end: {
            line: 116,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 114
      },
      "5": {
        loc: {
          start: {
            line: 119,
            column: 28
          },
          end: {
            line: 119,
            column: 82
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 119,
            column: 42
          },
          end: {
            line: 119,
            column: 77
          }
        }, {
          start: {
            line: 119,
            column: 80
          },
          end: {
            line: 119,
            column: 82
          }
        }],
        line: 119
      },
      "6": {
        loc: {
          start: {
            line: 127,
            column: 40
          },
          end: {
            line: 127,
            column: 80
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 127,
            column: 56
          },
          end: {
            line: 127,
            column: 75
          }
        }, {
          start: {
            line: 127,
            column: 78
          },
          end: {
            line: 127,
            column: 80
          }
        }],
        line: 127
      },
      "7": {
        loc: {
          start: {
            line: 141,
            column: 8
          },
          end: {
            line: 144,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 141,
            column: 8
          },
          end: {
            line: 144,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 141
      },
      "8": {
        loc: {
          start: {
            line: 141,
            column: 12
          },
          end: {
            line: 141,
            column: 59
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 141,
            column: 12
          },
          end: {
            line: 141,
            column: 24
          }
        }, {
          start: {
            line: 141,
            column: 28
          },
          end: {
            line: 141,
            column: 59
          }
        }],
        line: 141
      },
      "9": {
        loc: {
          start: {
            line: 142,
            column: 27
          },
          end: {
            line: 142,
            column: 69
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 142,
            column: 43
          },
          end: {
            line: 142,
            column: 64
          }
        }, {
          start: {
            line: 142,
            column: 67
          },
          end: {
            line: 142,
            column: 69
          }
        }],
        line: 142
      },
      "10": {
        loc: {
          start: {
            line: 143,
            column: 71
          },
          end: {
            line: 143,
            column: 84
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 143,
            column: 71
          },
          end: {
            line: 143,
            column: 78
          }
        }, {
          start: {
            line: 143,
            column: 82
          },
          end: {
            line: 143,
            column: 84
          }
        }],
        line: 143
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0
    },
    b: {
      "0": [0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0, 0],
      "10": [0, 0]
    },
    inputSourceMap: {
      file: "/home/mhugo/code/claude-code-flow/src/__tests__/helpers/test-logger.ts",
      mappings: "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",
      names: [],
      sources: ["/home/mhugo/code/claude-code-flow/src/__tests__/helpers/test-logger.ts"],
      sourcesContent: ["/**\n * Test Logger - Specialized logging for test environments\n * \n * Provides structured logging for both London and Classical TDD approaches\n */\n\nexport interface LogEntry {\n  level: 'debug' | 'info' | 'warn' | 'error';\n  message: string;\n  timestamp: number;\n  context?: Record<string, any>;\n  testName?: string;\n  category?: string;\n}\n\nexport class TestLogger {\n  private logs: LogEntry[] = [];\n  private testName?: string;\n  private silent: boolean = false;\n\n  constructor(testName?: string, silent: boolean = false) {\n    this.testName = testName;\n    this.silent = silent;\n  }\n\n  /**\n   * Log a debug message\n   */\n  debug(message: string, context?: Record<string, any>): void {\n    this.log('debug', message, context);\n  }\n\n  /**\n   * Log an info message\n   */\n  info(message: string, context?: Record<string, any>): void {\n    this.log('info', message, context);\n  }\n\n  /**\n   * Log a warning message\n   */\n  warn(message: string, context?: Record<string, any>): void {\n    this.log('warn', message, context);\n  }\n\n  /**\n   * Log an error message\n   */\n  error(message: string, context?: Record<string, any>): void {\n    this.log('error', message, context);\n  }\n\n  /**\n   * Log test interactions (London School)\n   */\n  logInteraction(component: string, method: string, args?: any[], result?: any): void {\n    this.log('debug', `Interaction: ${component}.${method}`, {\n      component,\n      method,\n      args,\n      result,\n      category: 'interaction'\n    });\n  }\n\n  /**\n   * Log state changes (Classical School)\n   */\n  logStateChange(component: string, before: any, after: any, operation?: string): void {\n    this.log('debug', `State change in ${component}`, {\n      component,\n      before,\n      after,\n      operation,\n      category: 'state-change'\n    });\n  }\n\n  /**\n   * Log performance metrics\n   */\n  logPerformance(operation: string, duration: number, context?: Record<string, any>): void {\n    this.log('info', `Performance: ${operation} took ${duration}ms`, {\n      operation,\n      duration,\n      category: 'performance',\n      ...context\n    });\n  }\n\n  /**\n   * Log assertion results\n   */\n  logAssertion(description: string, passed: boolean, expected?: any, actual?: any): void {\n    const level = passed ? 'info' : 'error';\n    this.log(level, `Assertion: ${description} - ${passed ? 'PASSED' : 'FAILED'}`, {\n      description,\n      passed,\n      expected,\n      actual,\n      category: 'assertion'\n    });\n  }\n\n  /**\n   * Get all logs\n   */\n  getLogs(): LogEntry[] {\n    return [...this.logs];\n  }\n\n  /**\n   * Get logs by level\n   */\n  getLogsByLevel(level: LogEntry['level']): LogEntry[] {\n    return this.logs.filter(log => log.level === level);\n  }\n\n  /**\n   * Get logs by category\n   */\n  getLogsByCategory(category: string): LogEntry[] {\n    return this.logs.filter(log => log.context?.category === category);\n  }\n\n  /**\n   * Clear all logs\n   */\n  clearLogs(): void {\n    this.logs = [];\n  }\n\n  /**\n   * Export logs as string\n   */\n  exportLogs(format: 'text' | 'json' = 'text'): string {\n    if (format === 'json') {\n      return JSON.stringify(this.logs, null, 2);\n    }\n\n    return this.logs.map(log => {\n      const timestamp = new Date(log.timestamp).toISOString();\n      const context = log.context ? ` | ${JSON.stringify(log.context)}` : '';\n      return `[${timestamp}] ${log.level.toUpperCase()}: ${log.message}${context}`;\n    }).join('\\n');\n  }\n\n  /**\n   * Create a child logger for a specific component/test\n   */\n  createChild(name: string): TestLogger {\n    const child = new TestLogger(`${this.testName ? `${this.testName}.` : ''}${name}`, this.silent);\n    // Share the log storage\n    child.logs = this.logs;\n    return child;\n  }\n\n  private log(level: LogEntry['level'], message: string, context?: Record<string, any>): void {\n    const entry: LogEntry = {\n      level,\n      message,\n      timestamp: Date.now(),\n      context,\n      testName: this.testName\n    };\n\n    this.logs.push(entry);\n\n    if (!this.silent && process.env.NODE_ENV === 'test') {\n      const prefix = this.testName ? `[${this.testName}] ` : '';\n      console.log(`${prefix}${level.toUpperCase()}: ${message}`, context || '');\n    }\n  }\n}\n\n// Global test logger instance\nexport const testLogger = new TestLogger();\n\n// Factory function for creating test-specific loggers\nexport function createTestLogger(testName: string, silent?: boolean): TestLogger {\n  return new TestLogger(testName, silent);\n}"],
      version: 3
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "7fe4079adf3b9382d7c65c5df603ef55ee26480e"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_q2k5novc9 = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_q2k5novc9();
/**
 * Test Logger - Specialized logging for test environments
 *
 * Provides structured logging for both London and Classical TDD approaches
 */
export class TestLogger {
  logs =
  /* istanbul ignore next */
  (cov_q2k5novc9().s[0]++, []);
  testName;
  silent =
  /* istanbul ignore next */
  (cov_q2k5novc9().s[1]++, false);
  constructor(testName, silent =
  /* istanbul ignore next */
  (cov_q2k5novc9().b[0][0]++, false)) {
    /* istanbul ignore next */
    cov_q2k5novc9().f[0]++;
    cov_q2k5novc9().s[2]++;
    this.testName = testName;
    /* istanbul ignore next */
    cov_q2k5novc9().s[3]++;
    this.silent = silent;
  }
  /**
   * Log a debug message
   */
  debug(message, context) {
    /* istanbul ignore next */
    cov_q2k5novc9().f[1]++;
    cov_q2k5novc9().s[4]++;
    this.log('debug', message, context);
  }
  /**
   * Log an info message
   */
  info(message, context) {
    /* istanbul ignore next */
    cov_q2k5novc9().f[2]++;
    cov_q2k5novc9().s[5]++;
    this.log('info', message, context);
  }
  /**
   * Log a warning message
   */
  warn(message, context) {
    /* istanbul ignore next */
    cov_q2k5novc9().f[3]++;
    cov_q2k5novc9().s[6]++;
    this.log('warn', message, context);
  }
  /**
   * Log an error message
   */
  error(message, context) {
    /* istanbul ignore next */
    cov_q2k5novc9().f[4]++;
    cov_q2k5novc9().s[7]++;
    this.log('error', message, context);
  }
  /**
   * Log test interactions (London School)
   */
  logInteraction(component, method, args, result) {
    /* istanbul ignore next */
    cov_q2k5novc9().f[5]++;
    cov_q2k5novc9().s[8]++;
    this.log('debug', `Interaction: ${component}.${method}`, {
      component,
      method,
      args,
      result,
      category: 'interaction'
    });
  }
  /**
   * Log state changes (Classical School)
   */
  logStateChange(component, before, after, operation) {
    /* istanbul ignore next */
    cov_q2k5novc9().f[6]++;
    cov_q2k5novc9().s[9]++;
    this.log('debug', `State change in ${component}`, {
      component,
      before,
      after,
      operation,
      category: 'state-change'
    });
  }
  /**
   * Log performance metrics
   */
  logPerformance(operation, duration, context) {
    /* istanbul ignore next */
    cov_q2k5novc9().f[7]++;
    cov_q2k5novc9().s[10]++;
    this.log('info', `Performance: ${operation} took ${duration}ms`, {
      operation,
      duration,
      category: 'performance',
      ...context
    });
  }
  /**
   * Log assertion results
   */
  logAssertion(description, passed, expected, actual) {
    /* istanbul ignore next */
    cov_q2k5novc9().f[8]++;
    const level =
    /* istanbul ignore next */
    (cov_q2k5novc9().s[11]++, passed ?
    /* istanbul ignore next */
    (cov_q2k5novc9().b[1][0]++, 'info') :
    /* istanbul ignore next */
    (cov_q2k5novc9().b[1][1]++, 'error'));
    /* istanbul ignore next */
    cov_q2k5novc9().s[12]++;
    this.log(level, `Assertion: ${description} - ${passed ?
    /* istanbul ignore next */
    (cov_q2k5novc9().b[2][0]++, 'PASSED') :
    /* istanbul ignore next */
    (cov_q2k5novc9().b[2][1]++, 'FAILED')}`, {
      description,
      passed,
      expected,
      actual,
      category: 'assertion'
    });
  }
  /**
   * Get all logs
   */
  getLogs() {
    /* istanbul ignore next */
    cov_q2k5novc9().f[9]++;
    cov_q2k5novc9().s[13]++;
    return [...this.logs];
  }
  /**
   * Get logs by level
   */
  getLogsByLevel(level) {
    /* istanbul ignore next */
    cov_q2k5novc9().f[10]++;
    cov_q2k5novc9().s[14]++;
    return this.logs.filter(log => {
      /* istanbul ignore next */
      cov_q2k5novc9().f[11]++;
      cov_q2k5novc9().s[15]++;
      return log.level === level;
    });
  }
  /**
   * Get logs by category
   */
  getLogsByCategory(category) {
    /* istanbul ignore next */
    cov_q2k5novc9().f[12]++;
    cov_q2k5novc9().s[16]++;
    return this.logs.filter(log => {
      /* istanbul ignore next */
      cov_q2k5novc9().f[13]++;
      cov_q2k5novc9().s[17]++;
      return log.context?.category === category;
    });
  }
  /**
   * Clear all logs
   */
  clearLogs() {
    /* istanbul ignore next */
    cov_q2k5novc9().f[14]++;
    cov_q2k5novc9().s[18]++;
    this.logs = [];
  }
  /**
   * Export logs as string
   */
  exportLogs(format =
  /* istanbul ignore next */
  (cov_q2k5novc9().b[3][0]++, 'text')) {
    /* istanbul ignore next */
    cov_q2k5novc9().f[15]++;
    cov_q2k5novc9().s[19]++;
    if (format === 'json') {
      /* istanbul ignore next */
      cov_q2k5novc9().b[4][0]++;
      cov_q2k5novc9().s[20]++;
      return JSON.stringify(this.logs, null, 2);
    } else
    /* istanbul ignore next */
    {
      cov_q2k5novc9().b[4][1]++;
    }
    cov_q2k5novc9().s[21]++;
    return this.logs.map(log => {
      /* istanbul ignore next */
      cov_q2k5novc9().f[16]++;
      const timestamp =
      /* istanbul ignore next */
      (cov_q2k5novc9().s[22]++, new Date(log.timestamp).toISOString());
      const context =
      /* istanbul ignore next */
      (cov_q2k5novc9().s[23]++, log.context ?
      /* istanbul ignore next */
      (cov_q2k5novc9().b[5][0]++, ` | ${JSON.stringify(log.context)}`) :
      /* istanbul ignore next */
      (cov_q2k5novc9().b[5][1]++, ''));
      /* istanbul ignore next */
      cov_q2k5novc9().s[24]++;
      return `[${timestamp}] ${log.level.toUpperCase()}: ${log.message}${context}`;
    }).join('\n');
  }
  /**
   * Create a child logger for a specific component/test
   */
  createChild(name) {
    /* istanbul ignore next */
    cov_q2k5novc9().f[17]++;
    const child =
    /* istanbul ignore next */
    (cov_q2k5novc9().s[25]++, new TestLogger(`${this.testName ?
    /* istanbul ignore next */
    (cov_q2k5novc9().b[6][0]++, `${this.testName}.`) :
    /* istanbul ignore next */
    (cov_q2k5novc9().b[6][1]++, '')}${name}`, this.silent));
    // Share the log storage
    /* istanbul ignore next */
    cov_q2k5novc9().s[26]++;
    child.logs = this.logs;
    /* istanbul ignore next */
    cov_q2k5novc9().s[27]++;
    return child;
  }
  log(level, message, context) {
    /* istanbul ignore next */
    cov_q2k5novc9().f[18]++;
    const entry =
    /* istanbul ignore next */
    (cov_q2k5novc9().s[28]++, {
      level,
      message,
      timestamp: Date.now(),
      context,
      testName: this.testName
    });
    /* istanbul ignore next */
    cov_q2k5novc9().s[29]++;
    this.logs.push(entry);
    /* istanbul ignore next */
    cov_q2k5novc9().s[30]++;
    if (
    /* istanbul ignore next */
    (cov_q2k5novc9().b[8][0]++, !this.silent) &&
    /* istanbul ignore next */
    (cov_q2k5novc9().b[8][1]++, process.env.NODE_ENV === 'test')) {
      /* istanbul ignore next */
      cov_q2k5novc9().b[7][0]++;
      const prefix =
      /* istanbul ignore next */
      (cov_q2k5novc9().s[31]++, this.testName ?
      /* istanbul ignore next */
      (cov_q2k5novc9().b[9][0]++, `[${this.testName}] `) :
      /* istanbul ignore next */
      (cov_q2k5novc9().b[9][1]++, ''));
      /* istanbul ignore next */
      cov_q2k5novc9().s[32]++;
      console.log(`${prefix}${level.toUpperCase()}: ${message}`,
      /* istanbul ignore next */
      (cov_q2k5novc9().b[10][0]++, context) ||
      /* istanbul ignore next */
      (cov_q2k5novc9().b[10][1]++, ''));
    } else
    /* istanbul ignore next */
    {
      cov_q2k5novc9().b[7][1]++;
    }
  }
}
// Global test logger instance
export const testLogger =
/* istanbul ignore next */
(cov_q2k5novc9().s[33]++, new TestLogger());
// Factory function for creating test-specific loggers
export function createTestLogger(testName, silent) {
  /* istanbul ignore next */
  cov_q2k5novc9().f[19]++;
  cov_q2k5novc9().s[34]++;
  return new TestLogger(testName, silent);
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,