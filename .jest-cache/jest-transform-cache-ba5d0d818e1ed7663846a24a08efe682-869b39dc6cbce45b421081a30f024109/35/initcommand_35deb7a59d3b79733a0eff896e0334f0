fe6591f0141eda4d376f4190dda33ec2
/* istanbul ignore next */
function cov_15bq9hvdim() {
  var path = "/home/mhugo/code/claude-code-flow/src/cli/commands/init/init-command.ts";
  var hash = "8614e7899fd3f76a50a7f9dd877f0ad12f0ed7bd";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/home/mhugo/code/claude-code-flow/src/cli/commands/init/init-command.ts",
    statementMap: {
      "0": {
        start: {
          line: 12,
          column: 8
        },
        end: {
          line: 46,
          column: 11
        }
      },
      "1": {
        start: {
          line: 49,
          column: 23
        },
        end: {
          line: 49,
          column: 25
        }
      },
      "2": {
        start: {
          line: 50,
          column: 25
        },
        end: {
          line: 50,
          column: 27
        }
      },
      "3": {
        start: {
          line: 51,
          column: 28
        },
        end: {
          line: 51,
          column: 43
        }
      },
      "4": {
        start: {
          line: 52,
          column: 8
        },
        end: {
          line: 62,
          column: 9
        }
      },
      "5": {
        start: {
          line: 54,
          column: 12
        },
        end: {
          line: 56,
          column: 13
        }
      },
      "6": {
        start: {
          line: 55,
          column: 16
        },
        end: {
          line: 55,
          column: 104
        }
      },
      "7": {
        start: {
          line: 58,
          column: 32
        },
        end: {
          line: 58,
          column: 70
        }
      },
      "8": {
        start: {
          line: 59,
          column: 12
        },
        end: {
          line: 61,
          column: 13
        }
      },
      "9": {
        start: {
          line: 60,
          column: 16
        },
        end: {
          line: 60,
          column: 102
        }
      },
      "10": {
        start: {
          line: 64,
          column: 25
        },
        end: {
          line: 64,
          column: 47
        }
      },
      "11": {
        start: {
          line: 65,
          column: 31
        },
        end: {
          line: 65,
          column: 87
        }
      },
      "12": {
        start: {
          line: 66,
          column: 8
        },
        end: {
          line: 68,
          column: 9
        }
      },
      "13": {
        start: {
          line: 67,
          column: 12
        },
        end: {
          line: 67,
          column: 105
        }
      },
      "14": {
        start: {
          line: 69,
          column: 8
        },
        end: {
          line: 69,
          column: 114
        }
      },
      "15": {
        start: {
          line: 72,
          column: 8
        },
        end: {
          line: 117,
          column: 9
        }
      },
      "16": {
        start: {
          line: 73,
          column: 32
        },
        end: {
          line: 73,
          column: 72
        }
      },
      "17": {
        start: {
          line: 74,
          column: 29
        },
        end: {
          line: 74,
          column: 62
        }
      },
      "18": {
        start: {
          line: 75,
          column: 26
        },
        end: {
          line: 75,
          column: 54
        }
      },
      "19": {
        start: {
          line: 76,
          column: 32
        },
        end: {
          line: 76,
          column: 70
        }
      },
      "20": {
        start: {
          line: 77,
          column: 28
        },
        end: {
          line: 77,
          column: 62
        }
      },
      "21": {
        start: {
          line: 78,
          column: 32
        },
        end: {
          line: 78,
          column: 70
        }
      },
      "22": {
        start: {
          line: 80,
          column: 12
        },
        end: {
          line: 86,
          column: 13
        }
      },
      "23": {
        start: {
          line: 81,
          column: 16
        },
        end: {
          line: 85,
          column: 18
        }
      },
      "24": {
        start: {
          line: 87,
          column: 12
        },
        end: {
          line: 87,
          column: 61
        }
      },
      "25": {
        start: {
          line: 89,
          column: 12
        },
        end: {
          line: 89,
          column: 72
        }
      },
      "26": {
        start: {
          line: 91,
          column: 12
        },
        end: {
          line: 93,
          column: 13
        }
      },
      "27": {
        start: {
          line: 92,
          column: 16
        },
        end: {
          line: 92,
          column: 58
        }
      },
      "28": {
        start: {
          line: 95,
          column: 12
        },
        end: {
          line: 97,
          column: 13
        }
      },
      "29": {
        start: {
          line: 96,
          column: 16
        },
        end: {
          line: 96,
          column: 60
        }
      },
      "30": {
        start: {
          line: 98,
          column: 12
        },
        end: {
          line: 109,
          column: 14
        }
      },
      "31": {
        start: {
          line: 112,
          column: 12
        },
        end: {
          line: 116,
          column: 14
        }
      },
      "32": {
        start: {
          line: 121,
          column: 28
        },
        end: {
          line: 127,
          column: 9
        }
      },
      "33": {
        start: {
          line: 128,
          column: 8
        },
        end: {
          line: 130,
          column: 9
        }
      },
      "34": {
        start: {
          line: 129,
          column: 12
        },
        end: {
          line: 129,
          column: 77
        }
      },
      "35": {
        start: {
          line: 132,
          column: 28
        },
        end: {
          line: 150,
          column: 9
        }
      },
      "36": {
        start: {
          line: 151,
          column: 8
        },
        end: {
          line: 151,
          column: 105
        }
      },
      "37": {
        start: {
          line: 153,
          column: 23
        },
        end: {
          line: 167,
          column: 9
        }
      },
      "38": {
        start: {
          line: 168,
          column: 8
        },
        end: {
          line: 168,
          column: 114
        }
      },
      "39": {
        start: {
          line: 170,
          column: 28
        },
        end: {
          line: 172,
          column: 45
        }
      },
      "40": {
        start: {
          line: 173,
          column: 25
        },
        end: {
          line: 173,
          column: 76
        }
      },
      "41": {
        start: {
          line: 174,
          column: 8
        },
        end: {
          line: 174,
          column: 81
        }
      },
      "42": {
        start: {
          line: 176,
          column: 8
        },
        end: {
          line: 193,
          column: 9
        }
      },
      "43": {
        start: {
          line: 177,
          column: 29
        },
        end: {
          line: 191,
          column: 13
        }
      },
      "44": {
        start: {
          line: 192,
          column: 12
        },
        end: {
          line: 192,
          column: 107
        }
      },
      "45": {
        start: {
          line: 195,
          column: 23
        },
        end: {
          line: 195,
          column: 67
        }
      },
      "46": {
        start: {
          line: 196,
          column: 8
        },
        end: {
          line: 196,
          column: 72
        }
      },
      "47": {
        start: {
          line: 198,
          column: 26
        },
        end: {
          line: 205,
          column: 20
        }
      },
      "48": {
        start: {
          line: 206,
          column: 8
        },
        end: {
          line: 206,
          column: 76
        }
      },
      "49": {
        start: {
          line: 209,
          column: 8
        },
        end: {
          line: 226,
          column: 9
        }
      },
      "50": {
        start: {
          line: 210,
          column: 30
        },
        end: {
          line: 210,
          column: 59
        }
      },
      "51": {
        start: {
          line: 211,
          column: 12
        },
        end: {
          line: 222,
          column: 15
        }
      },
      "52": {
        start: {
          line: 212,
          column: 28
        },
        end: {
          line: 212,
          column: 72
        }
      },
      "53": {
        start: {
          line: 213,
          column: 16
        },
        end: {
          line: 220,
          column: 19
        }
      },
      "54": {
        start: {
          line: 214,
          column: 20
        },
        end: {
          line: 219,
          column: 21
        }
      },
      "55": {
        start: {
          line: 215,
          column: 24
        },
        end: {
          line: 215,
          column: 34
        }
      },
      "56": {
        start: {
          line: 218,
          column: 24
        },
        end: {
          line: 218,
          column: 79
        }
      },
      "57": {
        start: {
          line: 221,
          column: 16
        },
        end: {
          line: 221,
          column: 40
        }
      },
      "58": {
        start: {
          line: 225,
          column: 12
        },
        end: {
          line: 225,
          column: 126
        }
      },
      "59": {
        start: {
          line: 229,
          column: 8
        },
        end: {
          line: 246,
          column: 9
        }
      },
      "60": {
        start: {
          line: 230,
          column: 30
        },
        end: {
          line: 230,
          column: 59
        }
      },
      "61": {
        start: {
          line: 231,
          column: 12
        },
        end: {
          line: 242,
          column: 15
        }
      },
      "62": {
        start: {
          line: 232,
          column: 28
        },
        end: {
          line: 232,
          column: 75
        }
      },
      "63": {
        start: {
          line: 233,
          column: 16
        },
        end: {
          line: 240,
          column: 19
        }
      },
      "64": {
        start: {
          line: 234,
          column: 20
        },
        end: {
          line: 239,
          column: 21
        }
      },
      "65": {
        start: {
          line: 235,
          column: 24
        },
        end: {
          line: 235,
          column: 34
        }
      },
      "66": {
        start: {
          line: 238,
          column: 24
        },
        end: {
          line: 238,
          column: 82
        }
      },
      "67": {
        start: {
          line: 241,
          column: 16
        },
        end: {
          line: 241,
          column: 40
        }
      },
      "68": {
        start: {
          line: 245,
          column: 12
        },
        end: {
          line: 245,
          column: 121
        }
      },
      "69": {
        start: {
          line: 249,
          column: 8
        },
        end: {
          line: 281,
          column: 2
        }
      },
      "70": {
        start: {
          line: 284,
          column: 8
        },
        end: {
          line: 319,
          column: 2
        }
      },
      "71": {
        start: {
          line: 322,
          column: 8
        },
        end: {
          line: 365,
          column: 2
        }
      },
      "72": {
        start: {
          line: 368,
          column: 8
        },
        end: {
          line: 397,
          column: 2
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 11,
            column: 4
          },
          end: {
            line: 11,
            column: 5
          }
        },
        loc: {
          start: {
            line: 11,
            column: 18
          },
          end: {
            line: 47,
            column: 5
          }
        },
        line: 11
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 48,
            column: 4
          },
          end: {
            line: 48,
            column: 5
          }
        },
        loc: {
          start: {
            line: 48,
            column: 28
          },
          end: {
            line: 70,
            column: 5
          }
        },
        line: 48
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 71,
            column: 4
          },
          end: {
            line: 71,
            column: 5
          }
        },
        loc: {
          start: {
            line: 71,
            column: 23
          },
          end: {
            line: 118,
            column: 5
          }
        },
        line: 71
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 119,
            column: 4
          },
          end: {
            line: 119,
            column: 5
          }
        },
        loc: {
          start: {
            line: 119,
            column: 59
          },
          end: {
            line: 207,
            column: 5
          }
        },
        line: 119
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 208,
            column: 4
          },
          end: {
            line: 208,
            column: 5
          }
        },
        loc: {
          start: {
            line: 208,
            column: 41
          },
          end: {
            line: 227,
            column: 5
          }
        },
        line: 208
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 211,
            column: 31
          },
          end: {
            line: 211,
            column: 32
          }
        },
        loc: {
          start: {
            line: 211,
            column: 52
          },
          end: {
            line: 222,
            column: 13
          }
        },
        line: 211
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 213,
            column: 32
          },
          end: {
            line: 213,
            column: 33
          }
        },
        loc: {
          start: {
            line: 213,
            column: 42
          },
          end: {
            line: 220,
            column: 17
          }
        },
        line: 213
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 228,
            column: 4
          },
          end: {
            line: 228,
            column: 5
          }
        },
        loc: {
          start: {
            line: 228,
            column: 43
          },
          end: {
            line: 247,
            column: 5
          }
        },
        line: 228
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 231,
            column: 31
          },
          end: {
            line: 231,
            column: 32
          }
        },
        loc: {
          start: {
            line: 231,
            column: 52
          },
          end: {
            line: 242,
            column: 13
          }
        },
        line: 231
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 233,
            column: 32
          },
          end: {
            line: 233,
            column: 33
          }
        },
        loc: {
          start: {
            line: 233,
            column: 42
          },
          end: {
            line: 240,
            column: 17
          }
        },
        line: 233
      },
      "10": {
        name: "(anonymous_10)",
        decl: {
          start: {
            line: 248,
            column: 4
          },
          end: {
            line: 248,
            column: 5
          }
        },
        loc: {
          start: {
            line: 248,
            column: 31
          },
          end: {
            line: 282,
            column: 5
          }
        },
        line: 248
      },
      "11": {
        name: "(anonymous_11)",
        decl: {
          start: {
            line: 283,
            column: 4
          },
          end: {
            line: 283,
            column: 5
          }
        },
        loc: {
          start: {
            line: 283,
            column: 31
          },
          end: {
            line: 320,
            column: 5
          }
        },
        line: 283
      },
      "12": {
        name: "(anonymous_12)",
        decl: {
          start: {
            line: 321,
            column: 4
          },
          end: {
            line: 321,
            column: 5
          }
        },
        loc: {
          start: {
            line: 321,
            column: 44
          },
          end: {
            line: 366,
            column: 5
          }
        },
        line: 321
      },
      "13": {
        name: "(anonymous_13)",
        decl: {
          start: {
            line: 367,
            column: 4
          },
          end: {
            line: 367,
            column: 5
          }
        },
        loc: {
          start: {
            line: 367,
            column: 14
          },
          end: {
            line: 398,
            column: 5
          }
        },
        line: 367
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 52,
            column: 8
          },
          end: {
            line: 62,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 52,
            column: 8
          },
          end: {
            line: 62,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 52
      },
      "1": {
        loc: {
          start: {
            line: 54,
            column: 12
          },
          end: {
            line: 56,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 54,
            column: 12
          },
          end: {
            line: 56,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 54
      },
      "2": {
        loc: {
          start: {
            line: 59,
            column: 12
          },
          end: {
            line: 61,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 59,
            column: 12
          },
          end: {
            line: 61,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 59
      },
      "3": {
        loc: {
          start: {
            line: 59,
            column: 16
          },
          end: {
            line: 59,
            column: 63
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 59,
            column: 16
          },
          end: {
            line: 59,
            column: 39
          }
        }, {
          start: {
            line: 59,
            column: 43
          },
          end: {
            line: 59,
            column: 63
          }
        }],
        line: 59
      },
      "4": {
        loc: {
          start: {
            line: 66,
            column: 8
          },
          end: {
            line: 68,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 66,
            column: 8
          },
          end: {
            line: 68,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 66
      },
      "5": {
        loc: {
          start: {
            line: 69,
            column: 15
          },
          end: {
            line: 69,
            column: 113
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 69,
            column: 58
          },
          end: {
            line: 69,
            column: 106
          }
        }, {
          start: {
            line: 69,
            column: 109
          },
          end: {
            line: 69,
            column: 113
          }
        }],
        line: 69
      },
      "6": {
        loc: {
          start: {
            line: 69,
            column: 15
          },
          end: {
            line: 69,
            column: 55
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 69,
            column: 15
          },
          end: {
            line: 69,
            column: 32
          }
        }, {
          start: {
            line: 69,
            column: 36
          },
          end: {
            line: 69,
            column: 55
          }
        }],
        line: 69
      },
      "7": {
        loc: {
          start: {
            line: 73,
            column: 32
          },
          end: {
            line: 73,
            column: 72
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 73,
            column: 32
          },
          end: {
            line: 73,
            column: 47
          }
        }, {
          start: {
            line: 73,
            column: 51
          },
          end: {
            line: 73,
            column: 72
          }
        }],
        line: 73
      },
      "8": {
        loc: {
          start: {
            line: 74,
            column: 29
          },
          end: {
            line: 74,
            column: 62
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 74,
            column: 29
          },
          end: {
            line: 74,
            column: 51
          }
        }, {
          start: {
            line: 74,
            column: 55
          },
          end: {
            line: 74,
            column: 62
          }
        }],
        line: 74
      },
      "9": {
        loc: {
          start: {
            line: 75,
            column: 26
          },
          end: {
            line: 75,
            column: 54
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 75,
            column: 26
          },
          end: {
            line: 75,
            column: 45
          }
        }, {
          start: {
            line: 75,
            column: 49
          },
          end: {
            line: 75,
            column: 54
          }
        }],
        line: 75
      },
      "10": {
        loc: {
          start: {
            line: 76,
            column: 32
          },
          end: {
            line: 76,
            column: 70
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 76,
            column: 32
          },
          end: {
            line: 76,
            column: 61
          }
        }, {
          start: {
            line: 76,
            column: 65
          },
          end: {
            line: 76,
            column: 70
          }
        }],
        line: 76
      },
      "11": {
        loc: {
          start: {
            line: 77,
            column: 28
          },
          end: {
            line: 77,
            column: 62
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 77,
            column: 28
          },
          end: {
            line: 77,
            column: 53
          }
        }, {
          start: {
            line: 77,
            column: 57
          },
          end: {
            line: 77,
            column: 62
          }
        }],
        line: 77
      },
      "12": {
        loc: {
          start: {
            line: 80,
            column: 12
          },
          end: {
            line: 86,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 80,
            column: 12
          },
          end: {
            line: 86,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 80
      },
      "13": {
        loc: {
          start: {
            line: 80,
            column: 16
          },
          end: {
            line: 80,
            column: 49
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 80,
            column: 16
          },
          end: {
            line: 80,
            column: 39
          }
        }, {
          start: {
            line: 80,
            column: 43
          },
          end: {
            line: 80,
            column: 49
          }
        }],
        line: 80
      },
      "14": {
        loc: {
          start: {
            line: 91,
            column: 12
          },
          end: {
            line: 93,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 91,
            column: 12
          },
          end: {
            line: 93,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 91
      },
      "15": {
        loc: {
          start: {
            line: 95,
            column: 12
          },
          end: {
            line: 97,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 95,
            column: 12
          },
          end: {
            line: 97,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 95
      },
      "16": {
        loc: {
          start: {
            line: 114,
            column: 56
          },
          end: {
            line: 114,
            column: 110
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 114,
            column: 81
          },
          end: {
            line: 114,
            column: 94
          }
        }, {
          start: {
            line: 114,
            column: 97
          },
          end: {
            line: 114,
            column: 110
          }
        }],
        line: 114
      },
      "17": {
        loc: {
          start: {
            line: 136,
            column: 18
          },
          end: {
            line: 136,
            column: 78
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 136,
            column: 46
          },
          end: {
            line: 136,
            column: 61
          }
        }, {
          start: {
            line: 136,
            column: 64
          },
          end: {
            line: 136,
            column: 78
          }
        }],
        line: 136
      },
      "18": {
        loc: {
          start: {
            line: 141,
            column: 25
          },
          end: {
            line: 141,
            column: 90
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 141,
            column: 53
          },
          end: {
            line: 141,
            column: 58
          }
        }, {
          start: {
            line: 141,
            column: 61
          },
          end: {
            line: 141,
            column: 90
          }
        }],
        line: 141
      },
      "19": {
        loc: {
          start: {
            line: 146,
            column: 29
          },
          end: {
            line: 149,
            column: 18
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 146,
            column: 57
          },
          end: {
            line: 149,
            column: 13
          }
        }, {
          start: {
            line: 149,
            column: 16
          },
          end: {
            line: 149,
            column: 18
          }
        }],
        line: 146
      },
      "20": {
        loc: {
          start: {
            line: 170,
            column: 28
          },
          end: {
            line: 172,
            column: 45
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 171,
            column: 14
          },
          end: {
            line: 171,
            column: 45
          }
        }, {
          start: {
            line: 172,
            column: 14
          },
          end: {
            line: 172,
            column: 45
          }
        }],
        line: 170
      },
      "21": {
        loc: {
          start: {
            line: 173,
            column: 25
          },
          end: {
            line: 173,
            column: 76
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 173,
            column: 53
          },
          end: {
            line: 173,
            column: 63
          }
        }, {
          start: {
            line: 173,
            column: 66
          },
          end: {
            line: 173,
            column: 76
          }
        }],
        line: 173
      },
      "22": {
        loc: {
          start: {
            line: 176,
            column: 8
          },
          end: {
            line: 193,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 176,
            column: 8
          },
          end: {
            line: 193,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 176
      },
      "23": {
        loc: {
          start: {
            line: 214,
            column: 20
          },
          end: {
            line: 219,
            column: 21
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 214,
            column: 20
          },
          end: {
            line: 219,
            column: 21
          }
        }, {
          start: {
            line: 217,
            column: 25
          },
          end: {
            line: 219,
            column: 21
          }
        }],
        line: 214
      },
      "24": {
        loc: {
          start: {
            line: 225,
            column: 68
          },
          end: {
            line: 225,
            column: 122
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 225,
            column: 93
          },
          end: {
            line: 225,
            column: 106
          }
        }, {
          start: {
            line: 225,
            column: 109
          },
          end: {
            line: 225,
            column: 122
          }
        }],
        line: 225
      },
      "25": {
        loc: {
          start: {
            line: 234,
            column: 20
          },
          end: {
            line: 239,
            column: 21
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 234,
            column: 20
          },
          end: {
            line: 239,
            column: 21
          }
        }, {
          start: {
            line: 237,
            column: 25
          },
          end: {
            line: 239,
            column: 21
          }
        }],
        line: 234
      },
      "26": {
        loc: {
          start: {
            line: 245,
            column: 63
          },
          end: {
            line: 245,
            column: 117
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 245,
            column: 88
          },
          end: {
            line: 245,
            column: 101
          }
        }, {
          start: {
            line: 245,
            column: 104
          },
          end: {
            line: 245,
            column: 117
          }
        }],
        line: 245
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0, 0],
      "10": [0, 0],
      "11": [0, 0],
      "12": [0, 0],
      "13": [0, 0],
      "14": [0, 0],
      "15": [0, 0],
      "16": [0, 0],
      "17": [0, 0],
      "18": [0, 0],
      "19": [0, 0],
      "20": [0, 0],
      "21": [0, 0],
      "22": [0, 0],
      "23": [0, 0],
      "24": [0, 0],
      "25": [0, 0],
      "26": [0, 0]
    },
    inputSourceMap: {
      file: "/home/mhugo/code/claude-code-flow/src/cli/commands/init/init-command.ts",
      mappings: "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",
      names: [],
      sources: ["/home/mhugo/code/claude-code-flow/src/cli/commands/init/init-command.ts"],
      sourcesContent: ["/**\n * Init Command Implementation\n * \n * Initializes a new claude-flow project with templates and configuration\n */\n\nimport path from 'path';\nimport fs from 'fs/promises';\nimport { existsSync } from 'fs';\nimport { BaseCommand } from '../../core/base-command.js';\nimport type { CommandContext, CommandResult, CommandValidationResult } from '../../types/index.js';\n\nexport class InitCommand extends BaseCommand {\n  constructor() {\n    super({\n      name: 'init',\n      description: 'Initialize a new claude-flow project',\n      usage: 'claude-flow init [project-name]',\n      category: 'core',\n      minArgs: 0,\n      maxArgs: 1,\n      examples: [\n        'claude-flow init',\n        'claude-flow init my-project',\n        'claude-flow init --template typescript'\n      ],\n      flags: {\n        template: {\n          type: 'string',\n          description: 'Project template to use',\n          default: 'basic'\n        },\n        force: {\n          type: 'boolean',\n          description: 'Overwrite existing files',\n          default: false\n        },\n        'skip-install': {\n          type: 'boolean',\n          description: 'Skip npm package installation',\n          default: false\n        },\n        'skip-git': {\n          type: 'boolean',\n          description: 'Skip git repository initialization',\n          default: false\n        }\n      }\n    });\n  }\n\n  protected async validate(context: CommandContext): Promise<CommandValidationResult | null> {\n    const errors: string[] = [];\n    const warnings: string[] = [];\n\n    const projectName = context.args[0];\n    if (projectName) {\n      // Validate project name\n      if (!/^[a-z0-9-_]+$/i.test(projectName)) {\n        errors.push('Project name can only contain letters, numbers, hyphens, and underscores');\n      }\n\n      // Check if directory already exists\n      const projectPath = path.resolve(context.cwd, projectName);\n      if (existsSync(projectPath) && !context.flags.force) {\n        warnings.push(`Directory '${projectName}' already exists. Use --force to overwrite.`);\n      }\n    }\n\n    // Validate template\n    const template = context.flags.template as string;\n    const validTemplates = ['basic', 'typescript', 'javascript', 'node', 'browser'];\n    if (!validTemplates.includes(template)) {\n      errors.push(`Invalid template '${template}'. Valid templates: ${validTemplates.join(', ')}`);\n    }\n\n    return errors.length > 0 || warnings.length > 0 ? { valid: errors.length === 0, errors, warnings } : null;\n  }\n\n  protected async run(context: CommandContext): Promise<CommandResult> {\n    try {\n      const projectName = context.args[0] || 'claude-flow-project';\n      const template = context.flags.template as string || 'basic';\n      const force = context.flags.force as boolean || false;\n      const skipInstall = context.flags['skip-install'] as boolean || false;\n      const skipGit = context.flags['skip-git'] as boolean || false;\n\n      const projectPath = path.resolve(context.cwd, projectName);\n\n      // Create project directory\n      if (existsSync(projectPath) && !force) {\n        return {\n          success: false,\n          error: `Directory '${projectName}' already exists. Use --force to overwrite.`,\n          exitCode: 1\n        };\n      }\n\n      await fs.mkdir(projectPath, { recursive: true });\n\n      // Copy template files\n      await this.copyTemplate(template, projectPath, projectName);\n\n      // Initialize git repository\n      if (!skipGit) {\n        await this.initGitRepository(projectPath);\n      }\n\n      // Install dependencies\n      if (!skipInstall) {\n        await this.installDependencies(projectPath);\n      }\n\n      return {\n        success: true,\n        exitCode: 0,\n        message: `Successfully initialized claude-flow project '${projectName}'`,\n        data: {\n          projectName,\n          projectPath,\n          template,\n          gitInitialized: !skipGit,\n          dependenciesInstalled: !skipInstall\n        }\n      };\n    } catch (error) {\n      return {\n        success: false,\n        error: `Failed to initialize project: ${error instanceof Error ? error.message : String(error)}`,\n        exitCode: 1\n      };\n    }\n  }\n\n  private async copyTemplate(template: string, projectPath: string, projectName: string): Promise<void> {\n    // Create basic project structure\n    const directories = [\n      'src',\n      'config',\n      'docs',\n      'tests',\n      'templates'\n    ];\n\n    for (const dir of directories) {\n      await fs.mkdir(path.join(projectPath, dir), { recursive: true });\n    }\n\n    // Create package.json\n    const packageJson = {\n      name: projectName,\n      version: '1.0.0',\n      description: 'A claude-flow project',\n      main: template === 'typescript' ? 'dist/index.js' : 'src/index.js',\n      scripts: {\n        'start': 'claude-flow swarm start',\n        'dev': 'claude-flow swarm start --dev',\n        'test': 'npm test',\n        'build': template === 'typescript' ? 'tsc' : 'echo \"No build step needed\"'\n      },\n      dependencies: {\n        'claude-flow': '^2.0.0'\n      },\n      devDependencies: template === 'typescript' ? {\n        'typescript': '^5.0.0',\n        '@types/node': '^20.0.0'\n      } : {}\n    };\n\n    await fs.writeFile(\n      path.join(projectPath, 'package.json'),\n      JSON.stringify(packageJson, null, 2)\n    );\n\n    // Create claude-flow configuration\n    const config = {\n      swarm: {\n        topology: 'mesh',\n        maxAgents: 5,\n        strategy: 'balanced'\n      },\n      memory: {\n        provider: 'sqlite',\n        persistent: true\n      },\n      neural: {\n        enabled: true,\n        models: ['claude-3-haiku', 'claude-3-sonnet']\n      }\n    };\n\n    await fs.writeFile(\n      path.join(projectPath, 'config', 'claude-flow.json'),\n      JSON.stringify(config, null, 2)\n    );\n\n    // Create main entry file\n    const mainContent = template === 'typescript' \n      ? this.getTypescriptMainContent()\n      : this.getJavascriptMainContent();\n\n    const mainFile = template === 'typescript' ? 'index.ts' : 'index.js';\n    await fs.writeFile(path.join(projectPath, 'src', mainFile), mainContent);\n\n    // Create TypeScript config if needed\n    if (template === 'typescript') {\n      const tsConfig = {\n        compilerOptions: {\n          target: 'ES2022',\n          module: 'NodeNext',\n          moduleResolution: 'NodeNext',\n          outDir: './dist',\n          rootDir: './src',\n          strict: true,\n          esModuleInterop: true,\n          skipLibCheck: true,\n          forceConsistentCasingInFileNames: true\n        },\n        include: ['src/**/*'],\n        exclude: ['node_modules', 'dist']\n      };\n\n      await fs.writeFile(\n        path.join(projectPath, 'tsconfig.json'),\n        JSON.stringify(tsConfig, null, 2)\n      );\n    }\n\n    // Create README\n    const readme = this.getReadmeContent(projectName, template);\n    await fs.writeFile(path.join(projectPath, 'README.md'), readme);\n\n    // Create .gitignore\n    const gitignore = [\n      'node_modules/',\n      'dist/',\n      '.env',\n      '*.log',\n      '.DS_Store',\n      'claude-flow-data.db'\n    ].join('\\n');\n\n    await fs.writeFile(path.join(projectPath, '.gitignore'), gitignore);\n  }\n\n  private async initGitRepository(projectPath: string): Promise<void> {\n    try {\n      const { spawn } = await import('child_process');\n      \n      return new Promise((resolve, reject) => {\n        const git = spawn('git', ['init'], { cwd: projectPath });\n        \n        git.on('close', (code) => {\n          if (code === 0) {\n            resolve();\n          } else {\n            reject(new Error(`Git init failed with code ${code}`));\n          }\n        });\n\n        git.on('error', reject);\n      });\n    } catch (error) {\n      throw new Error(`Failed to initialize git repository: ${error instanceof Error ? error.message : String(error)}`);\n    }\n  }\n\n  private async installDependencies(projectPath: string): Promise<void> {\n    try {\n      const { spawn } = await import('child_process');\n      \n      return new Promise((resolve, reject) => {\n        const npm = spawn('npm', ['install'], { cwd: projectPath });\n        \n        npm.on('close', (code) => {\n          if (code === 0) {\n            resolve();\n          } else {\n            reject(new Error(`npm install failed with code ${code}`));\n          }\n        });\n\n        npm.on('error', reject);\n      });\n    } catch (error) {\n      throw new Error(`Failed to install dependencies: ${error instanceof Error ? error.message : String(error)}`);\n    }\n  }\n\n  private getJavascriptMainContent(): string {\n    return `/**\n * Claude Flow Project Entry Point\n */\n\nimport { SwarmOrchestrator } from 'claude-flow';\n\nasync function main() {\n  const orchestrator = new SwarmOrchestrator({\n    topology: 'mesh',\n    maxAgents: 5\n  });\n\n  try {\n    await orchestrator.initialize();\n    \n    // Spawn agents\n    const researcher = await orchestrator.spawnAgent('researcher');\n    const analyst = await orchestrator.spawnAgent('analyst');\n    \n    console.log('Claude Flow swarm initialized successfully!');\n    \n    // Your application logic here\n    \n  } catch (error) {\n    console.error('Failed to initialize swarm:', error);\n    process.exit(1);\n  }\n}\n\nif (import.meta.url === \\`file://\\${process.argv[1]}\\`) {\n  main().catch(console.error);\n}\n`;\n  }\n\n  private getTypescriptMainContent(): string {\n    return `/**\n * Claude Flow Project Entry Point\n */\n\nimport { SwarmOrchestrator, type SwarmConfig } from 'claude-flow';\n\nasync function main(): Promise<void> {\n  const config: SwarmConfig = {\n    topology: 'mesh',\n    maxAgents: 5,\n    strategy: 'balanced'\n  };\n\n  const orchestrator = new SwarmOrchestrator(config);\n\n  try {\n    await orchestrator.initialize();\n    \n    // Spawn agents\n    const researcher = await orchestrator.spawnAgent('researcher');\n    const analyst = await orchestrator.spawnAgent('analyst');\n    \n    console.log('Claude Flow swarm initialized successfully!');\n    \n    // Your application logic here\n    \n  } catch (error) {\n    console.error('Failed to initialize swarm:', error);\n    process.exit(1);\n  }\n}\n\nif (require.main === module) {\n  main().catch(console.error);\n}\n`;\n  }\n\n  private getReadmeContent(projectName: string, template: string): string {\n    return `# ${projectName}\n\nA Claude Flow project using the ${template} template.\n\n## Getting Started\n\n1. Install dependencies:\n   \\`\\`\\`bash\n   npm install\n   \\`\\`\\`\n\n2. Start the swarm:\n   \\`\\`\\`bash\n   npm start\n   \\`\\`\\`\n\n3. Development mode:\n   \\`\\`\\`bash\n   npm run dev\n   \\`\\`\\`\n\n## Project Structure\n\n- \\`src/\\` - Source code\n- \\`config/\\` - Configuration files\n- \\`docs/\\` - Documentation\n- \\`tests/\\` - Test files\n- \\`templates/\\` - Project templates\n\n## Commands\n\n- \\`claude-flow status\\` - Show swarm status\n- \\`claude-flow swarm start\\` - Start the swarm\n- \\`claude-flow swarm stop\\` - Stop the swarm\n- \\`claude-flow help\\` - Show help\n\n## Configuration\n\nEdit \\`config/claude-flow.json\\` to customize your swarm configuration.\n\n## Documentation\n\nSee the [Claude Flow documentation](https://github.com/Ejb503/claude-flow) for more information.\n`;\n  }\n\n  getHelp(): string {\n    return `Initialize a new claude-flow project\n\nUSAGE:\n  claude-flow init [project-name] [options]\n\nARGUMENTS:\n  [project-name]  Name for the new project (default: claude-flow-project)\n\nOPTIONS:\n  --template <template>  Project template to use (basic, typescript, javascript, node, browser) [default: basic]\n  --force               Overwrite existing files\n  --skip-install        Skip npm package installation\n  --skip-git            Skip git repository initialization\n  -h, --help            Show help\n\nEXAMPLES:\n  claude-flow init\n  claude-flow init my-project\n  claude-flow init my-app --template typescript\n  claude-flow init existing-project --force\n  claude-flow init quick-start --skip-install --skip-git\n\nThe init command creates a new claude-flow project with:\n- Project structure and configuration\n- Package.json with dependencies\n- Main entry file\n- README and documentation\n- Git repository (unless --skip-git)\n- Installed dependencies (unless --skip-install)\n`;\n  }\n}"],
      version: 3
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "8614e7899fd3f76a50a7f9dd877f0ad12f0ed7bd"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_15bq9hvdim = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_15bq9hvdim();
/**
 * Init Command Implementation
 *
 * Initializes a new claude-flow project with templates and configuration
 */
import path from 'path';
import fs from 'fs/promises';
import { existsSync } from 'fs';
import { BaseCommand } from '../../core/base-command.js';
export class InitCommand extends BaseCommand {
  constructor() {
    /* istanbul ignore next */
    cov_15bq9hvdim().f[0]++;
    cov_15bq9hvdim().s[0]++;
    super({
      name: 'init',
      description: 'Initialize a new claude-flow project',
      usage: 'claude-flow init [project-name]',
      category: 'core',
      minArgs: 0,
      maxArgs: 1,
      examples: ['claude-flow init', 'claude-flow init my-project', 'claude-flow init --template typescript'],
      flags: {
        template: {
          type: 'string',
          description: 'Project template to use',
          default: 'basic'
        },
        force: {
          type: 'boolean',
          description: 'Overwrite existing files',
          default: false
        },
        'skip-install': {
          type: 'boolean',
          description: 'Skip npm package installation',
          default: false
        },
        'skip-git': {
          type: 'boolean',
          description: 'Skip git repository initialization',
          default: false
        }
      }
    });
  }
  async validate(context) {
    /* istanbul ignore next */
    cov_15bq9hvdim().f[1]++;
    const errors =
    /* istanbul ignore next */
    (cov_15bq9hvdim().s[1]++, []);
    const warnings =
    /* istanbul ignore next */
    (cov_15bq9hvdim().s[2]++, []);
    const projectName =
    /* istanbul ignore next */
    (cov_15bq9hvdim().s[3]++, context.args[0]);
    /* istanbul ignore next */
    cov_15bq9hvdim().s[4]++;
    if (projectName) {
      /* istanbul ignore next */
      cov_15bq9hvdim().b[0][0]++;
      cov_15bq9hvdim().s[5]++;
      // Validate project name
      if (!/^[a-z0-9-_]+$/i.test(projectName)) {
        /* istanbul ignore next */
        cov_15bq9hvdim().b[1][0]++;
        cov_15bq9hvdim().s[6]++;
        errors.push('Project name can only contain letters, numbers, hyphens, and underscores');
      } else
      /* istanbul ignore next */
      {
        cov_15bq9hvdim().b[1][1]++;
      }
      // Check if directory already exists
      const projectPath =
      /* istanbul ignore next */
      (cov_15bq9hvdim().s[7]++, path.resolve(context.cwd, projectName));
      /* istanbul ignore next */
      cov_15bq9hvdim().s[8]++;
      if (
      /* istanbul ignore next */
      (cov_15bq9hvdim().b[3][0]++, existsSync(projectPath)) &&
      /* istanbul ignore next */
      (cov_15bq9hvdim().b[3][1]++, !context.flags.force)) {
        /* istanbul ignore next */
        cov_15bq9hvdim().b[2][0]++;
        cov_15bq9hvdim().s[9]++;
        warnings.push(`Directory '${projectName}' already exists. Use --force to overwrite.`);
      } else
      /* istanbul ignore next */
      {
        cov_15bq9hvdim().b[2][1]++;
      }
    } else
    /* istanbul ignore next */
    {
      cov_15bq9hvdim().b[0][1]++;
    }
    // Validate template
    const template =
    /* istanbul ignore next */
    (cov_15bq9hvdim().s[10]++, context.flags.template);
    const validTemplates =
    /* istanbul ignore next */
    (cov_15bq9hvdim().s[11]++, ['basic', 'typescript', 'javascript', 'node', 'browser']);
    /* istanbul ignore next */
    cov_15bq9hvdim().s[12]++;
    if (!validTemplates.includes(template)) {
      /* istanbul ignore next */
      cov_15bq9hvdim().b[4][0]++;
      cov_15bq9hvdim().s[13]++;
      errors.push(`Invalid template '${template}'. Valid templates: ${validTemplates.join(', ')}`);
    } else
    /* istanbul ignore next */
    {
      cov_15bq9hvdim().b[4][1]++;
    }
    cov_15bq9hvdim().s[14]++;
    return /* istanbul ignore next */(cov_15bq9hvdim().b[6][0]++, errors.length > 0) ||
    /* istanbul ignore next */
    (cov_15bq9hvdim().b[6][1]++, warnings.length > 0) ?
    /* istanbul ignore next */
    (cov_15bq9hvdim().b[5][0]++, {
      valid: errors.length === 0,
      errors,
      warnings
    }) :
    /* istanbul ignore next */
    (cov_15bq9hvdim().b[5][1]++, null);
  }
  async run(context) {
    /* istanbul ignore next */
    cov_15bq9hvdim().f[2]++;
    cov_15bq9hvdim().s[15]++;
    try {
      const projectName =
      /* istanbul ignore next */
      (cov_15bq9hvdim().s[16]++,
      /* istanbul ignore next */
      (cov_15bq9hvdim().b[7][0]++, context.args[0]) ||
      /* istanbul ignore next */
      (cov_15bq9hvdim().b[7][1]++, 'claude-flow-project'));
      const template =
      /* istanbul ignore next */
      (cov_15bq9hvdim().s[17]++,
      /* istanbul ignore next */
      (cov_15bq9hvdim().b[8][0]++, context.flags.template) ||
      /* istanbul ignore next */
      (cov_15bq9hvdim().b[8][1]++, 'basic'));
      const force =
      /* istanbul ignore next */
      (cov_15bq9hvdim().s[18]++,
      /* istanbul ignore next */
      (cov_15bq9hvdim().b[9][0]++, context.flags.force) ||
      /* istanbul ignore next */
      (cov_15bq9hvdim().b[9][1]++, false));
      const skipInstall =
      /* istanbul ignore next */
      (cov_15bq9hvdim().s[19]++,
      /* istanbul ignore next */
      (cov_15bq9hvdim().b[10][0]++, context.flags['skip-install']) ||
      /* istanbul ignore next */
      (cov_15bq9hvdim().b[10][1]++, false));
      const skipGit =
      /* istanbul ignore next */
      (cov_15bq9hvdim().s[20]++,
      /* istanbul ignore next */
      (cov_15bq9hvdim().b[11][0]++, context.flags['skip-git']) ||
      /* istanbul ignore next */
      (cov_15bq9hvdim().b[11][1]++, false));
      const projectPath =
      /* istanbul ignore next */
      (cov_15bq9hvdim().s[21]++, path.resolve(context.cwd, projectName));
      // Create project directory
      /* istanbul ignore next */
      cov_15bq9hvdim().s[22]++;
      if (
      /* istanbul ignore next */
      (cov_15bq9hvdim().b[13][0]++, existsSync(projectPath)) &&
      /* istanbul ignore next */
      (cov_15bq9hvdim().b[13][1]++, !force)) {
        /* istanbul ignore next */
        cov_15bq9hvdim().b[12][0]++;
        cov_15bq9hvdim().s[23]++;
        return {
          success: false,
          error: `Directory '${projectName}' already exists. Use --force to overwrite.`,
          exitCode: 1
        };
      } else
      /* istanbul ignore next */
      {
        cov_15bq9hvdim().b[12][1]++;
      }
      cov_15bq9hvdim().s[24]++;
      await fs.mkdir(projectPath, {
        recursive: true
      });
      // Copy template files
      /* istanbul ignore next */
      cov_15bq9hvdim().s[25]++;
      await this.copyTemplate(template, projectPath, projectName);
      // Initialize git repository
      /* istanbul ignore next */
      cov_15bq9hvdim().s[26]++;
      if (!skipGit) {
        /* istanbul ignore next */
        cov_15bq9hvdim().b[14][0]++;
        cov_15bq9hvdim().s[27]++;
        await this.initGitRepository(projectPath);
      } else
      /* istanbul ignore next */
      {
        cov_15bq9hvdim().b[14][1]++;
      }
      // Install dependencies
      cov_15bq9hvdim().s[28]++;
      if (!skipInstall) {
        /* istanbul ignore next */
        cov_15bq9hvdim().b[15][0]++;
        cov_15bq9hvdim().s[29]++;
        await this.installDependencies(projectPath);
      } else
      /* istanbul ignore next */
      {
        cov_15bq9hvdim().b[15][1]++;
      }
      cov_15bq9hvdim().s[30]++;
      return {
        success: true,
        exitCode: 0,
        message: `Successfully initialized claude-flow project '${projectName}'`,
        data: {
          projectName,
          projectPath,
          template,
          gitInitialized: !skipGit,
          dependenciesInstalled: !skipInstall
        }
      };
    } catch (error) {
      /* istanbul ignore next */
      cov_15bq9hvdim().s[31]++;
      return {
        success: false,
        error: `Failed to initialize project: ${error instanceof Error ?
        /* istanbul ignore next */
        (cov_15bq9hvdim().b[16][0]++, error.message) :
        /* istanbul ignore next */
        (cov_15bq9hvdim().b[16][1]++, String(error))}`,
        exitCode: 1
      };
    }
  }
  async copyTemplate(template, projectPath, projectName) {
    /* istanbul ignore next */
    cov_15bq9hvdim().f[3]++;
    // Create basic project structure
    const directories =
    /* istanbul ignore next */
    (cov_15bq9hvdim().s[32]++, ['src', 'config', 'docs', 'tests', 'templates']);
    /* istanbul ignore next */
    cov_15bq9hvdim().s[33]++;
    for (const dir of directories) {
      /* istanbul ignore next */
      cov_15bq9hvdim().s[34]++;
      await fs.mkdir(path.join(projectPath, dir), {
        recursive: true
      });
    }
    // Create package.json
    const packageJson =
    /* istanbul ignore next */
    (cov_15bq9hvdim().s[35]++, {
      name: projectName,
      version: '1.0.0',
      description: 'A claude-flow project',
      main: template === 'typescript' ?
      /* istanbul ignore next */
      (cov_15bq9hvdim().b[17][0]++, 'dist/index.js') :
      /* istanbul ignore next */
      (cov_15bq9hvdim().b[17][1]++, 'src/index.js'),
      scripts: {
        'start': 'claude-flow swarm start',
        'dev': 'claude-flow swarm start --dev',
        'test': 'npm test',
        'build': template === 'typescript' ?
        /* istanbul ignore next */
        (cov_15bq9hvdim().b[18][0]++, 'tsc') :
        /* istanbul ignore next */
        (cov_15bq9hvdim().b[18][1]++, 'echo "No build step needed"')
      },
      dependencies: {
        'claude-flow': '^2.0.0'
      },
      devDependencies: template === 'typescript' ?
      /* istanbul ignore next */
      (cov_15bq9hvdim().b[19][0]++, {
        'typescript': '^5.0.0',
        '@types/node': '^20.0.0'
      }) :
      /* istanbul ignore next */
      (cov_15bq9hvdim().b[19][1]++, {})
    });
    /* istanbul ignore next */
    cov_15bq9hvdim().s[36]++;
    await fs.writeFile(path.join(projectPath, 'package.json'), JSON.stringify(packageJson, null, 2));
    // Create claude-flow configuration
    const config =
    /* istanbul ignore next */
    (cov_15bq9hvdim().s[37]++, {
      swarm: {
        topology: 'mesh',
        maxAgents: 5,
        strategy: 'balanced'
      },
      memory: {
        provider: 'sqlite',
        persistent: true
      },
      neural: {
        enabled: true,
        models: ['claude-3-haiku', 'claude-3-sonnet']
      }
    });
    /* istanbul ignore next */
    cov_15bq9hvdim().s[38]++;
    await fs.writeFile(path.join(projectPath, 'config', 'claude-flow.json'), JSON.stringify(config, null, 2));
    // Create main entry file
    const mainContent =
    /* istanbul ignore next */
    (cov_15bq9hvdim().s[39]++, template === 'typescript' ?
    /* istanbul ignore next */
    (cov_15bq9hvdim().b[20][0]++, this.getTypescriptMainContent()) :
    /* istanbul ignore next */
    (cov_15bq9hvdim().b[20][1]++, this.getJavascriptMainContent()));
    const mainFile =
    /* istanbul ignore next */
    (cov_15bq9hvdim().s[40]++, template === 'typescript' ?
    /* istanbul ignore next */
    (cov_15bq9hvdim().b[21][0]++, 'index.ts') :
    /* istanbul ignore next */
    (cov_15bq9hvdim().b[21][1]++, 'index.js'));
    /* istanbul ignore next */
    cov_15bq9hvdim().s[41]++;
    await fs.writeFile(path.join(projectPath, 'src', mainFile), mainContent);
    // Create TypeScript config if needed
    /* istanbul ignore next */
    cov_15bq9hvdim().s[42]++;
    if (template === 'typescript') {
      /* istanbul ignore next */
      cov_15bq9hvdim().b[22][0]++;
      const tsConfig =
      /* istanbul ignore next */
      (cov_15bq9hvdim().s[43]++, {
        compilerOptions: {
          target: 'ES2022',
          module: 'NodeNext',
          moduleResolution: 'NodeNext',
          outDir: './dist',
          rootDir: './src',
          strict: true,
          esModuleInterop: true,
          skipLibCheck: true,
          forceConsistentCasingInFileNames: true
        },
        include: ['src/**/*'],
        exclude: ['node_modules', 'dist']
      });
      /* istanbul ignore next */
      cov_15bq9hvdim().s[44]++;
      await fs.writeFile(path.join(projectPath, 'tsconfig.json'), JSON.stringify(tsConfig, null, 2));
    } else
    /* istanbul ignore next */
    {
      cov_15bq9hvdim().b[22][1]++;
    }
    // Create README
    const readme =
    /* istanbul ignore next */
    (cov_15bq9hvdim().s[45]++, this.getReadmeContent(projectName, template));
    /* istanbul ignore next */
    cov_15bq9hvdim().s[46]++;
    await fs.writeFile(path.join(projectPath, 'README.md'), readme);
    // Create .gitignore
    const gitignore =
    /* istanbul ignore next */
    (cov_15bq9hvdim().s[47]++, ['node_modules/', 'dist/', '.env', '*.log', '.DS_Store', 'claude-flow-data.db'].join('\n'));
    /* istanbul ignore next */
    cov_15bq9hvdim().s[48]++;
    await fs.writeFile(path.join(projectPath, '.gitignore'), gitignore);
  }
  async initGitRepository(projectPath) {
    /* istanbul ignore next */
    cov_15bq9hvdim().f[4]++;
    cov_15bq9hvdim().s[49]++;
    try {
      const {
        spawn
      } =
      /* istanbul ignore next */
      (cov_15bq9hvdim().s[50]++, await import('child_process'));
      /* istanbul ignore next */
      cov_15bq9hvdim().s[51]++;
      return new Promise((resolve, reject) => {
        /* istanbul ignore next */
        cov_15bq9hvdim().f[5]++;
        const git =
        /* istanbul ignore next */
        (cov_15bq9hvdim().s[52]++, spawn('git', ['init'], {
          cwd: projectPath
        }));
        /* istanbul ignore next */
        cov_15bq9hvdim().s[53]++;
        git.on('close', code => {
          /* istanbul ignore next */
          cov_15bq9hvdim().f[6]++;
          cov_15bq9hvdim().s[54]++;
          if (code === 0) {
            /* istanbul ignore next */
            cov_15bq9hvdim().b[23][0]++;
            cov_15bq9hvdim().s[55]++;
            resolve();
          } else {
            /* istanbul ignore next */
            cov_15bq9hvdim().b[23][1]++;
            cov_15bq9hvdim().s[56]++;
            reject(new Error(`Git init failed with code ${code}`));
          }
        });
        /* istanbul ignore next */
        cov_15bq9hvdim().s[57]++;
        git.on('error', reject);
      });
    } catch (error) {
      /* istanbul ignore next */
      cov_15bq9hvdim().s[58]++;
      throw new Error(`Failed to initialize git repository: ${error instanceof Error ?
      /* istanbul ignore next */
      (cov_15bq9hvdim().b[24][0]++, error.message) :
      /* istanbul ignore next */
      (cov_15bq9hvdim().b[24][1]++, String(error))}`);
    }
  }
  async installDependencies(projectPath) {
    /* istanbul ignore next */
    cov_15bq9hvdim().f[7]++;
    cov_15bq9hvdim().s[59]++;
    try {
      const {
        spawn
      } =
      /* istanbul ignore next */
      (cov_15bq9hvdim().s[60]++, await import('child_process'));
      /* istanbul ignore next */
      cov_15bq9hvdim().s[61]++;
      return new Promise((resolve, reject) => {
        /* istanbul ignore next */
        cov_15bq9hvdim().f[8]++;
        const npm =
        /* istanbul ignore next */
        (cov_15bq9hvdim().s[62]++, spawn('npm', ['install'], {
          cwd: projectPath
        }));
        /* istanbul ignore next */
        cov_15bq9hvdim().s[63]++;
        npm.on('close', code => {
          /* istanbul ignore next */
          cov_15bq9hvdim().f[9]++;
          cov_15bq9hvdim().s[64]++;
          if (code === 0) {
            /* istanbul ignore next */
            cov_15bq9hvdim().b[25][0]++;
            cov_15bq9hvdim().s[65]++;
            resolve();
          } else {
            /* istanbul ignore next */
            cov_15bq9hvdim().b[25][1]++;
            cov_15bq9hvdim().s[66]++;
            reject(new Error(`npm install failed with code ${code}`));
          }
        });
        /* istanbul ignore next */
        cov_15bq9hvdim().s[67]++;
        npm.on('error', reject);
      });
    } catch (error) {
      /* istanbul ignore next */
      cov_15bq9hvdim().s[68]++;
      throw new Error(`Failed to install dependencies: ${error instanceof Error ?
      /* istanbul ignore next */
      (cov_15bq9hvdim().b[26][0]++, error.message) :
      /* istanbul ignore next */
      (cov_15bq9hvdim().b[26][1]++, String(error))}`);
    }
  }
  getJavascriptMainContent() {
    /* istanbul ignore next */
    cov_15bq9hvdim().f[10]++;
    cov_15bq9hvdim().s[69]++;
    return `/**
 * Claude Flow Project Entry Point
 */

import { SwarmOrchestrator } from 'claude-flow';

async function main() {
  const orchestrator = new SwarmOrchestrator({
    topology: 'mesh',
    maxAgents: 5
  });

  try {
    await orchestrator.initialize();
    
    // Spawn agents
    const researcher = await orchestrator.spawnAgent('researcher');
    const analyst = await orchestrator.spawnAgent('analyst');
    
    console.log('Claude Flow swarm initialized successfully!');
    
    // Your application logic here
    
  } catch (error) {
    console.error('Failed to initialize swarm:', error);
    process.exit(1);
  }
}

if (import.meta.url === \`file://\${process.argv[1]}\`) {
  main().catch(console.error);
}
`;
  }
  getTypescriptMainContent() {
    /* istanbul ignore next */
    cov_15bq9hvdim().f[11]++;
    cov_15bq9hvdim().s[70]++;
    return `/**
 * Claude Flow Project Entry Point
 */

import { SwarmOrchestrator, type SwarmConfig } from 'claude-flow';

async function main(): Promise<void> {
  const config: SwarmConfig = {
    topology: 'mesh',
    maxAgents: 5,
    strategy: 'balanced'
  };

  const orchestrator = new SwarmOrchestrator(config);

  try {
    await orchestrator.initialize();
    
    // Spawn agents
    const researcher = await orchestrator.spawnAgent('researcher');
    const analyst = await orchestrator.spawnAgent('analyst');
    
    console.log('Claude Flow swarm initialized successfully!');
    
    // Your application logic here
    
  } catch (error) {
    console.error('Failed to initialize swarm:', error);
    process.exit(1);
  }
}

if (require.main === module) {
  main().catch(console.error);
}
`;
  }
  getReadmeContent(projectName, template) {
    /* istanbul ignore next */
    cov_15bq9hvdim().f[12]++;
    cov_15bq9hvdim().s[71]++;
    return `# ${projectName}

A Claude Flow project using the ${template} template.

## Getting Started

1. Install dependencies:
   \`\`\`bash
   npm install
   \`\`\`

2. Start the swarm:
   \`\`\`bash
   npm start
   \`\`\`

3. Development mode:
   \`\`\`bash
   npm run dev
   \`\`\`

## Project Structure

- \`src/\` - Source code
- \`config/\` - Configuration files
- \`docs/\` - Documentation
- \`tests/\` - Test files
- \`templates/\` - Project templates

## Commands

- \`claude-flow status\` - Show swarm status
- \`claude-flow swarm start\` - Start the swarm
- \`claude-flow swarm stop\` - Stop the swarm
- \`claude-flow help\` - Show help

## Configuration

Edit \`config/claude-flow.json\` to customize your swarm configuration.

## Documentation

See the [Claude Flow documentation](https://github.com/Ejb503/claude-flow) for more information.
`;
  }
  getHelp() {
    /* istanbul ignore next */
    cov_15bq9hvdim().f[13]++;
    cov_15bq9hvdim().s[72]++;
    return `Initialize a new claude-flow project

USAGE:
  claude-flow init [project-name] [options]

ARGUMENTS:
  [project-name]  Name for the new project (default: claude-flow-project)

OPTIONS:
  --template <template>  Project template to use (basic, typescript, javascript, node, browser) [default: basic]
  --force               Overwrite existing files
  --skip-install        Skip npm package installation
  --skip-git            Skip git repository initialization
  -h, --help            Show help

EXAMPLES:
  claude-flow init
  claude-flow init my-project
  claude-flow init my-app --template typescript
  claude-flow init existing-project --force
  claude-flow init quick-start --skip-install --skip-git

The init command creates a new claude-flow project with:
- Project structure and configuration
- Package.json with dependencies
- Main entry file
- README and documentation
- Git repository (unless --skip-git)
- Installed dependencies (unless --skip-install)
`;
  }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,