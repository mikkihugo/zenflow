{"file":"/home/mhugo/code/claude-code-flow/src/cli/core/base-command.ts","mappings":"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","names":[],"sources":["/home/mhugo/code/claude-code-flow/src/cli/core/base-command.ts"],"sourcesContent":["/**\n * Base Command Abstract Class\n * \n * Provides common functionality for all CLI commands including validation,\n * error handling, hooks, and lifecycle management.\n */\n\nimport { EventEmitter } from 'events';\nimport type {\n  CommandConfig,\n  CommandContext,\n  CommandResult,\n  CommandHandler,\n  CommandMetadata,\n  CommandValidationResult,\n  AsyncResult\n} from '../types/index.js';\n\n/**\n * Hook types for command lifecycle\n */\nexport interface CommandHooks {\n  beforeValidation?: (context: CommandContext) => Promise<void> | void;\n  afterValidation?: (context: CommandContext, result: CommandValidationResult) => Promise<void> | void;\n  beforeExecution?: (context: CommandContext) => Promise<void> | void;\n  afterExecution?: (context: CommandContext, result: CommandResult) => Promise<void> | void;\n  onError?: (context: CommandContext, error: Error) => Promise<void> | void;\n}\n\n/**\n * Abstract base class for all CLI commands\n */\nexport abstract class BaseCommand extends EventEmitter {\n  protected readonly config: CommandConfig;\n  protected readonly hooks: CommandHooks = {};\n  protected isExecuting = false;\n\n  constructor(config: CommandConfig) {\n    super();\n    this.config = config;\n  }\n\n  /**\n   * Get command metadata\n   */\n  get metadata(): CommandMetadata {\n    return {\n      config: this.config,\n      handler: this.run.bind(this) as CommandHandler,\n      registeredAt: new Date(),\n      available: true\n    };\n  }\n\n  /**\n   * Check if command is currently executing\n   */\n  get executing(): boolean {\n    return this.isExecuting;\n  }\n\n  /**\n   * Register lifecycle hooks\n   */\n  registerHooks(hooks: Partial<CommandHooks>): void {\n    Object.assign(this.hooks, hooks);\n  }\n\n  /**\n   * Validate command context and arguments\n   */\n  protected async validateContext(context: CommandContext): Promise<CommandValidationResult> {\n    const errors: string[] = [];\n    const warnings: string[] = [];\n\n    try {\n      // Run pre-validation hook\n      await this.hooks.beforeValidation?.(context);\n\n      // Validate required flags\n      if (this.config.flags) {\n        for (const [flagName, flagConfig] of Object.entries(this.config.flags)) {\n          if (flagConfig.required && context.flags[flagName] === undefined) {\n            errors.push(`Required flag --${flagName} is missing`);\n          }\n\n          // Type validation\n          if (context.flags[flagName] !== undefined) {\n            const value = context.flags[flagName];\n            const expectedType = flagConfig.type || 'string';\n            \n            if (!this.validateFlagType(value, expectedType)) {\n              errors.push(`Flag --${flagName} expected ${expectedType} but got ${typeof value}`);\n            }\n          }\n        }\n      }\n\n      // Validate arguments count\n      const minArgs = this.config.minArgs || 0;\n      const maxArgs = this.config.maxArgs;\n      \n      if (context.args.length < minArgs) {\n        errors.push(`Expected at least ${minArgs} arguments, got ${context.args.length}`);\n      }\n      \n      if (maxArgs !== undefined && context.args.length > maxArgs) {\n        errors.push(`Expected at most ${maxArgs} arguments, got ${context.args.length}`);\n      }\n\n      // Custom validation\n      const customValidation = await this.validate(context);\n      if (customValidation) {\n        errors.push(...customValidation.errors);\n        warnings.push(...customValidation.warnings);\n      }\n\n      const result: CommandValidationResult = {\n        valid: errors.length === 0,\n        errors,\n        warnings\n      };\n\n      // Run post-validation hook\n      await this.hooks.afterValidation?.(context, result);\n\n      return result;\n    } catch (error) {\n      errors.push(`Validation failed: ${error instanceof Error ? error.message : String(error)}`);\n\n      return {\n        valid: false,\n        errors,\n        warnings\n      };\n    }\n  }\n\n  /**\n   * Validate flag type\n   */\n  private validateFlagType(value: unknown, expectedType: string): boolean {\n    switch (expectedType) {\n      case 'string':\n        return typeof value === 'string';\n      case 'boolean':\n        return typeof value === 'boolean';\n      case 'number':\n        return typeof value === 'number' && !isNaN(value);\n      case 'array':\n        return Array.isArray(value);\n      default:\n        return true; // Unknown types pass validation\n    }\n  }\n\n  /**\n   * Execute the command with full lifecycle management\n   */\n  async execute(context: CommandContext): Promise<CommandResult> {\n    if (this.isExecuting) {\n      return {\n        success: false,\n        error: 'Command is already executing',\n        exitCode: 1,\n        executionTime: 0\n      };\n    }\n\n    const startTime = Date.now();\n    this.isExecuting = true;\n\n    try {\n      this.emit('start', context);\n      \n      // Validate context\n      const validation = await this.validateContext(context);\n      if (!validation.valid) {\n        const errorMsg = `Validation failed: ${validation.errors.join(', ')}`;\n        this.emit('validation-error', validation);\n        return {\n          success: false,\n          error: errorMsg,\n          exitCode: 1,\n          executionTime: Date.now() - startTime\n        };\n      }\n\n      if (validation.warnings.length > 0) {\n        this.emit('validation-warning', validation.warnings);\n      }\n\n      // Run pre-execution hook\n      await this.hooks.beforeExecution?.(context);\n      this.emit('before-execution', context);\n\n      // Execute the command\n      const result = await this.run(context);\n      \n      // Calculate duration and add metadata\n      const finalResult: CommandResult = {\n        ...result,\n        executionTime: Date.now() - startTime\n      };\n\n      // Run post-execution hook\n      await this.hooks.afterExecution?.(context, finalResult);\n      this.emit('after-execution', finalResult);\n      this.emit('complete', finalResult);\n\n      return finalResult;\n    } catch (error) {\n      const commandError = error instanceof Error ? error : new Error(String(error));\n      \n      // Run error hook\n      await this.hooks.onError?.(context, commandError);\n      this.emit('error', commandError);\n\n      const result: CommandResult = {\n        success: false,\n        error: commandError.message,\n        exitCode: 1,\n        executionTime: Date.now() - startTime\n      };\n\n      this.emit('complete', result);\n      return result;\n    } finally {\n      this.isExecuting = false;\n    }\n  }\n\n  /**\n   * Abstract methods to be implemented by concrete commands\n   */\n  \n  /**\n   * Custom validation logic - override in subclasses\n   */\n  protected async validate(context: CommandContext): Promise<CommandValidationResult | null> {\n    return null;\n  }\n\n  /**\n   * Main command execution logic - must be implemented by subclasses\n   */\n  protected abstract run(context: CommandContext): Promise<CommandResult>;\n\n  /**\n   * Get help text for the command\n   */\n  abstract getHelp(): string;\n\n  /**\n   * Get usage examples\n   */\n  getExamples(): string[] {\n    return this.config.examples || [];\n  }\n\n  /**\n   * Get command configuration\n   */\n  getConfig(): CommandConfig {\n    return { ...this.config };\n  }\n\n  /**\n   * Dispose of resources\n   */\n  dispose(): void {\n    this.removeAllListeners();\n  }\n}"],"version":3}