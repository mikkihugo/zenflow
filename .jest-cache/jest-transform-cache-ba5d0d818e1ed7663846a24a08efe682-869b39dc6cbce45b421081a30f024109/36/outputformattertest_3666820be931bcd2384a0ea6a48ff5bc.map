{"file":"/home/mhugo/code/claude-code-flow/src/__tests__/unit/london/cli-commands/output-formatter.test.ts","mappings":"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","names":[],"sources":["/home/mhugo/code/claude-code-flow/src/__tests__/unit/london/cli-commands/output-formatter.test.ts"],"sourcesContent":["/**\n * Output Formatter Tests - TDD London School\n * \n * Tests the behavior of output formatting functionality using mocks\n * and interaction-based testing. Focuses on how the formatter collaborates\n * with different output targets and handles various data formats.\n */\n\nimport { jest } from '@jest/globals';\n\n// Mock output formatter interface for testing interactions\ninterface OutputFormatter {\n  format(data: unknown, options?: FormatOptions): string;\n  setDefaults(defaults: Partial<FormatOptions>): void;\n  addRenderer(format: string, renderer: FormatRenderer): void;\n  getSupportedFormats(): string[];\n  validate(format: string): boolean;\n}\n\ninterface FormatOptions {\n  format: 'json' | 'yaml' | 'table' | 'text' | 'csv' | 'xml';\n  indent?: number;\n  colors?: boolean;\n  compact?: boolean;\n  headers?: boolean;\n  maxWidth?: number;\n  theme?: 'light' | 'dark' | 'minimal';\n}\n\ninterface FormatRenderer {\n  render(data: unknown, options: FormatOptions): string;\n  validate?(data: unknown): boolean;\n}\n\ninterface TableColumn {\n  key: string;\n  header: string;\n  width?: number;\n  align?: 'left' | 'center' | 'right';\n  format?: (value: unknown) => string;\n}\n\n// Mock console interface for testing output behavior\ninterface MockConsole {\n  log: jest.Mock;\n  error: jest.Mock;\n  warn: jest.Mock;\n  info: jest.Mock;\n  table: jest.Mock;\n}\n\n// Mock implementation for testing\nclass MockOutputFormatter implements OutputFormatter {\n  private defaults: Partial<FormatOptions> = {};\n  private renderers = new Map<string, FormatRenderer>();\n  private formatFunction: jest.Mock;\n\n  constructor(formatFunction?: jest.Mock) {\n    this.formatFunction = formatFunction || jest.fn();\n    \n    // Setup default renderers\n    this.setupDefaultRenderers();\n  }\n\n  format(data: unknown, options?: FormatOptions): string {\n    return this.formatFunction(data, options);\n  }\n\n  setDefaults(defaults: Partial<FormatOptions>): void {\n    this.defaults = { ...this.defaults, ...defaults };\n  }\n\n  addRenderer(format: string, renderer: FormatRenderer): void {\n    this.renderers.set(format, renderer);\n  }\n\n  getSupportedFormats(): string[] {\n    return Array.from(this.renderers.keys());\n  }\n\n  validate(format: string): boolean {\n    return this.renderers.has(format);\n  }\n\n  // Test helpers\n  getDefaults(): Partial<FormatOptions> {\n    return { ...this.defaults };\n  }\n\n  getRenderer(format: string): FormatRenderer | undefined {\n    return this.renderers.get(format);\n  }\n\n  private setupDefaultRenderers(): void {\n    // Mock renderers for testing\n    this.renderers.set('json', {\n      render: jest.fn((data) => JSON.stringify(data, null, 2))\n    });\n    \n    this.renderers.set('table', {\n      render: jest.fn(() => 'Mock table output')\n    });\n    \n    this.renderers.set('yaml', {\n      render: jest.fn(() => 'Mock YAML output')\n    });\n  }\n}\n\n// Mock output writer for testing output behavior\nclass MockOutputWriter {\n  private console: MockConsole;\n  private formatFunction: jest.Mock;\n\n  constructor() {\n    this.console = {\n      log: jest.fn(),\n      error: jest.fn(),\n      warn: jest.fn(),\n      info: jest.fn(),\n      table: jest.fn()\n    };\n    this.formatFunction = jest.fn();\n  }\n\n  write(data: unknown, options?: FormatOptions & { target?: 'stdout' | 'stderr' }): void {\n    const formatted = this.formatFunction(data, options);\n    const target = options?.target || 'stdout';\n    \n    if (target === 'stderr') {\n      this.console.error(formatted);\n    } else {\n      this.console.log(formatted);\n    }\n  }\n\n  writeTable(data: Record<string, unknown>[], columns?: TableColumn[]): void {\n    this.console.table(data);\n  }\n\n  getConsole(): MockConsole {\n    return this.console;\n  }\n\n  setFormatter(formatter: jest.Mock): void {\n    this.formatFunction = formatter;\n  }\n}\n\ndescribe('OutputFormatter - TDD London', () => {\n  let formatter: MockOutputFormatter;\n  let writer: MockOutputWriter;\n  let mockFormatFunction: jest.Mock;\n\n  beforeEach(() => {\n    mockFormatFunction = jest.fn();\n    formatter = new MockOutputFormatter(mockFormatFunction);\n    writer = new MockOutputWriter();\n    writer.setFormatter(mockFormatFunction);\n  });\n\n  describe('formatting behavior', () => {\n    it('should format data according to specified format', () => {\n      // Arrange\n      const data = { status: 'active', count: 42 };\n      const options: FormatOptions = { format: 'json', indent: 4 };\n      const expectedOutput = JSON.stringify(data, null, 4);\n      mockFormatFunction.mockReturnValue(expectedOutput);\n\n      // Act\n      const result = formatter.format(data, options);\n\n      // Assert - verify formatting behavior\n      expect(mockFormatFunction).toHaveBeenCalledWith(data, options);\n      expect(result).toBe(expectedOutput);\n    });\n\n    it('should use default options when none provided', () => {\n      // Arrange\n      const data = { test: 'data' };\n      formatter.setDefaults({ format: 'json', colors: true });\n      mockFormatFunction.mockReturnValue('formatted output');\n\n      // Act\n      formatter.format(data);\n\n      // Assert - verify default option usage\n      expect(mockFormatFunction).toHaveBeenCalledWith(data, undefined);\n      expect(formatter.getDefaults()).toEqual({\n        format: 'json',\n        colors: true\n      });\n    });\n\n    it('should merge provided options with defaults', () => {\n      // Arrange\n      const data = { test: 'data' };\n      formatter.setDefaults({ format: 'json', colors: true, indent: 2 });\n      const options: Partial<FormatOptions> = { colors: false }; // Override colors\n      mockFormatFunction.mockReturnValue('formatted output');\n\n      // Act\n      formatter.format(data, options as FormatOptions);\n\n      // Assert - verify option merging behavior\n      expect(mockFormatFunction).toHaveBeenCalledWith(data, options);\n    });\n  });\n\n  describe('renderer registration behavior', () => {\n    it('should register custom format renderer', () => {\n      // Arrange\n      const customRenderer: FormatRenderer = {\n        render: jest.fn(() => 'custom output'),\n        validate: jest.fn(() => true)\n      };\n\n      // Act\n      formatter.addRenderer('custom', customRenderer);\n\n      // Assert - verify renderer registration\n      expect(formatter.validate('custom')).toBe(true);\n      expect(formatter.getSupportedFormats()).toContain('custom');\n      expect(formatter.getRenderer('custom')).toBe(customRenderer);\n    });\n\n    it('should list all supported formats', () => {\n      // Arrange\n      formatter.addRenderer('xml', { render: jest.fn() });\n      formatter.addRenderer('csv', { render: jest.fn() });\n\n      // Act\n      const formats = formatter.getSupportedFormats();\n\n      // Assert - verify format listing\n      expect(formats).toContain('json');\n      expect(formats).toContain('table');\n      expect(formats).toContain('yaml');\n      expect(formats).toContain('xml');\n      expect(formats).toContain('csv');\n    });\n\n    it('should validate format support', () => {\n      // Act & Assert - verify format validation\n      expect(formatter.validate('json')).toBe(true);\n      expect(formatter.validate('table')).toBe(true);\n      expect(formatter.validate('unsupported')).toBe(false);\n    });\n  });\n\n  describe('output writing behavior', () => {\n    it('should write formatted output to stdout by default', () => {\n      // Arrange\n      const data = { message: 'test output' };\n      const expectedOutput = 'formatted test output';\n      mockFormatFunction.mockReturnValue(expectedOutput);\n\n      // Act\n      writer.write(data, { format: 'text' });\n\n      // Assert - verify stdout writing behavior\n      expect(mockFormatFunction).toHaveBeenCalledWith(data, { format: 'text' });\n      expect(writer.getConsole().log).toHaveBeenCalledWith(expectedOutput);\n      expect(writer.getConsole().error).not.toHaveBeenCalled();\n    });\n\n    it('should write to stderr when specified', () => {\n      // Arrange\n      const errorData = { error: 'Something went wrong' };\n      const expectedOutput = 'formatted error output';\n      mockFormatFunction.mockReturnValue(expectedOutput);\n\n      // Act\n      writer.write(errorData, { format: 'text', target: 'stderr' });\n\n      // Assert - verify stderr writing behavior\n      expect(writer.getConsole().error).toHaveBeenCalledWith(expectedOutput);\n      expect(writer.getConsole().log).not.toHaveBeenCalled();\n    });\n\n    it('should handle table output specially', () => {\n      // Arrange\n      const tableData = [\n        { name: 'John', age: 30, city: 'New York' },\n        { name: 'Jane', age: 25, city: 'Boston' }\n      ];\n      const columns: TableColumn[] = [\n        { key: 'name', header: 'Name' },\n        { key: 'age', header: 'Age', align: 'right' },\n        { key: 'city', header: 'City' }\n      ];\n\n      // Act\n      writer.writeTable(tableData, columns);\n\n      // Assert - verify table writing behavior\n      expect(writer.getConsole().table).toHaveBeenCalledWith(tableData);\n    });\n  });\n\n  describe('JSON formatting behavior', () => {\n    it('should format JSON with proper indentation', () => {\n      // Arrange\n      const data = { nested: { value: 'test', number: 42 } };\n      const jsonRenderer = formatter.getRenderer('json')!;\n      \n      // Act\n      const result = jsonRenderer.render(data, { format: 'json', indent: 2 });\n\n      // Assert - verify JSON formatting\n      expect(result).toBe(JSON.stringify(data, null, 2));\n    });\n\n    it('should handle circular references gracefully', () => {\n      // Arrange\n      const circularData: any = { prop: 'value' };\n      circularData.self = circularData;\n      \n      const safeJsonRenderer: FormatRenderer = {\n        render: jest.fn().mockImplementation((data) => {\n          try {\n            return JSON.stringify(data, null, 2);\n          } catch (error) {\n            return JSON.stringify({ error: 'Circular reference detected' }, null, 2);\n          }\n        })\n      };\n\n      formatter.addRenderer('safe-json', safeJsonRenderer);\n\n      // Act\n      const result = formatter.getRenderer('safe-json')!.render(circularData, { format: 'json' });\n\n      // Assert - verify circular reference handling\n      expect(result).toContain('Circular reference detected');\n    });\n  });\n\n  describe('table formatting behavior', () => {\n    it('should format array data as table', () => {\n      // Arrange\n      const tableData = [\n        { id: 1, name: 'Agent 1', status: 'active' },\n        { id: 2, name: 'Agent 2', status: 'idle' }\n      ];\n      \n      const tableRenderer: FormatRenderer = {\n        render: jest.fn().mockImplementation((data) => {\n          if (Array.isArray(data)) {\n            return 'Mock table with ' + data.length + ' rows';\n          }\n          return 'Not table data';\n        })\n      };\n\n      formatter.addRenderer('table', tableRenderer);\n\n      // Act\n      const result = formatter.getRenderer('table')!.render(tableData, { format: 'table' });\n\n      // Assert - verify table formatting behavior\n      expect(result).toBe('Mock table with 2 rows');\n    });\n\n    it('should handle empty array gracefully', () => {\n      // Arrange\n      const emptyData: unknown[] = [];\n      const tableRenderer = formatter.getRenderer('table')!;\n\n      // Act\n      const result = tableRenderer.render(emptyData, { format: 'table' });\n\n      // Assert - verify empty array handling\n      expect(result).toBe('Mock table output');\n    });\n  });\n\n  describe('color and theme behavior', () => {\n    it('should apply colors when enabled', () => {\n      // Arrange\n      const colorRenderer: FormatRenderer = {\n        render: jest.fn().mockImplementation((data, options) => {\n          const baseOutput = JSON.stringify(data);\n          return options.colors ? `\\x1b[32m${baseOutput}\\x1b[0m` : baseOutput;\n        })\n      };\n\n      formatter.addRenderer('colored-json', colorRenderer);\n      const data = { status: 'success' };\n\n      // Act\n      const coloredResult = formatter.getRenderer('colored-json')!.render(data, { \n        format: 'json', \n        colors: true \n      });\n      const plainResult = formatter.getRenderer('colored-json')!.render(data, { \n        format: 'json', \n        colors: false \n      });\n\n      // Assert - verify color application behavior\n      expect(coloredResult).toContain('\\x1b[32m'); // Contains color codes\n      expect(plainResult).not.toContain('\\x1b[32m'); // No color codes\n    });\n\n    it('should apply theme-specific formatting', () => {\n      // Arrange\n      const themedRenderer: FormatRenderer = {\n        render: jest.fn().mockImplementation((data, options) => {\n          const theme = options.theme || 'light';\n          return `[${theme}] ${JSON.stringify(data)}`;\n        })\n      };\n\n      formatter.addRenderer('themed', themedRenderer);\n      const data = { message: 'test' };\n\n      // Act\n      const lightResult = formatter.getRenderer('themed')!.render(data, { \n        format: 'json', \n        theme: 'light' \n      });\n      const darkResult = formatter.getRenderer('themed')!.render(data, { \n        format: 'json', \n        theme: 'dark' \n      });\n\n      // Assert - verify theme behavior\n      expect(lightResult).toContain('[light]');\n      expect(darkResult).toContain('[dark]');\n    });\n  });\n\n  describe('error handling behavior', () => {\n    it('should handle invalid data gracefully', () => {\n      // Arrange\n      const invalidData = undefined;\n      const robustRenderer: FormatRenderer = {\n        render: jest.fn().mockImplementation((data) => {\n          if (data === undefined || data === null) {\n            return 'No data available';\n          }\n          return JSON.stringify(data);\n        }),\n        validate: jest.fn().mockImplementation((data) => data !== undefined)\n      };\n\n      formatter.addRenderer('robust', robustRenderer);\n\n      // Act\n      const result = formatter.getRenderer('robust')!.render(invalidData, { format: 'json' });\n\n      // Assert - verify error handling\n      expect(result).toBe('No data available');\n    });\n\n    it('should validate data before rendering when validator is provided', () => {\n      // Arrange\n      const validatingRenderer: FormatRenderer = {\n        render: jest.fn(() => 'Valid data rendered'),\n        validate: jest.fn().mockReturnValue(false)\n      };\n\n      formatter.addRenderer('validating', validatingRenderer);\n      const data = { invalid: 'data' };\n\n      // Act\n      const isValid = formatter.getRenderer('validating')!.validate!(data);\n\n      // Assert - verify validation behavior\n      expect(validatingRenderer.validate).toHaveBeenCalledWith(data);\n      expect(isValid).toBe(false);\n    });\n  });\n\n  describe('output size and truncation behavior', () => {\n    it('should respect maximum width constraints', () => {\n      // Arrange\n      const longData = { message: 'This is a very long message that should be truncated' };\n      const widthConstrainedRenderer: FormatRenderer = {\n        render: jest.fn().mockImplementation((data, options) => {\n          let output = JSON.stringify(data);\n          if (options.maxWidth && output.length > options.maxWidth) {\n            output = output.substring(0, options.maxWidth - 3) + '...';\n          }\n          return output;\n        })\n      };\n\n      formatter.addRenderer('constrained', widthConstrainedRenderer);\n\n      // Act\n      const result = formatter.getRenderer('constrained')!.render(longData, { \n        format: 'json', \n        maxWidth: 20 \n      });\n\n      // Assert - verify width constraint behavior\n      expect(result.length).toBeLessThanOrEqual(20);\n      expect(result).toEndWith('...');\n    });\n  });\n});"],"version":3}