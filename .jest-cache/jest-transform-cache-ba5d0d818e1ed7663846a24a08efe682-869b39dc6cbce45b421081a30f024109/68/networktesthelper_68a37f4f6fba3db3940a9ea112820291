8ea0f195814c01edfb16162b45a6dcc9
/**
 * Network Test Helper - Network Testing Utilities
 *
 * Comprehensive network testing support for HTTP, WebSocket, and other protocols
 */
export class MockNetworkTestHelper {
    routes = new Map();
    webSocketHandlers = new Map();
    requests = [];
    networkDelay = 0;
    networkError = null;
    isRunning = false;
    port = 0;
    async startMockServer(port = 0) {
        this.port = port || this.getRandomPort();
        this.isRunning = true;
        return this.port;
    }
    async stopMockServer() {
        this.isRunning = false;
        this.routes.clear();
        this.webSocketHandlers.clear();
        this.requests = [];
    }
    mockRequest(method, path, response) {
        const key = `${method.toUpperCase()} ${path}`;
        this.routes.set(key, response);
    }
    mockWebSocket(path, handlers) {
        this.webSocketHandlers.set(path, handlers);
    }
    captureRequests() {
        return [...this.requests];
    }
    clearRequests() {
        this.requests = [];
    }
    simulateNetworkDelay(delayMs) {
        this.networkDelay = delayMs;
    }
    simulateNetworkError(errorType) {
        this.networkError = errorType;
    }
    resetNetworkConditions() {
        this.networkDelay = 0;
        this.networkError = null;
    }
    createHttpClient(baseUrl) {
        const self = this;
        const url = baseUrl || `http://localhost:${this.port}`;
        return {
            async get(path, headers = {}) {
                return self.makeRequest('GET', path, undefined, headers);
            },
            async post(path, body, headers = {}) {
                return self.makeRequest('POST', path, body, headers);
            },
            async put(path, body, headers = {}) {
                return self.makeRequest('PUT', path, body, headers);
            },
            async delete(path, headers = {}) {
                return self.makeRequest('DELETE', path, undefined, headers);
            },
            async patch(path, body, headers = {}) {
                return self.makeRequest('PATCH', path, body, headers);
            }
        };
    }
    createWebSocketClient(url) {
        const self = this;
        const path = new URL(url).pathname;
        let isConnected = false;
        const messageCallbacks = [];
        const errorCallbacks = [];
        const connectCallbacks = [];
        const disconnectCallbacks = [];
        return {
            async connect() {
                if (self.networkError) {
                    throw new Error(`Network error: ${self.networkError}`);
                }
                if (self.networkDelay > 0) {
                    await self.delay(self.networkDelay);
                }
                isConnected = true;
                const handlers = self.webSocketHandlers.get(path);
                if (handlers?.onConnect) {
                    handlers.onConnect();
                }
                connectCallbacks.forEach(callback => callback());
            },
            async disconnect() {
                isConnected = false;
                const handlers = self.webSocketHandlers.get(path);
                if (handlers?.onDisconnect) {
                    handlers.onDisconnect();
                }
                disconnectCallbacks.forEach(callback => callback());
            },
            async send(message) {
                if (!isConnected) {
                    throw new Error('WebSocket not connected');
                }
                if (self.networkError) {
                    throw new Error(`Network error: ${self.networkError}`);
                }
                if (self.networkDelay > 0) {
                    await self.delay(self.networkDelay);
                }
                const handlers = self.webSocketHandlers.get(path);
                if (handlers?.onMessage) {
                    handlers.onMessage(message);
                }
            },
            onMessage(callback) {
                messageCallbacks.push(callback);
            },
            onError(callback) {
                errorCallbacks.push(callback);
            },
            onConnect(callback) {
                connectCallbacks.push(callback);
            },
            onDisconnect(callback) {
                disconnectCallbacks.push(callback);
            }
        };
    }
    async makeRequest(method, path, body, headers = {}) {
        if (!this.isRunning) {
            throw new Error('Mock server not running');
        }
        if (this.networkError) {
            throw new Error(`Network error: ${this.networkError}`);
        }
        if (this.networkDelay > 0) {
            await this.delay(this.networkDelay);
        }
        // Record the request
        const request = {
            method: method.toUpperCase(),
            url: path,
            headers,
            body,
            timestamp: Date.now()
        };
        this.requests.push(request);
        // Find matching route
        const key = `${method.toUpperCase()} ${path}`;
        const response = this.routes.get(key);
        if (response) {
            return response;
        }
        // Default 404 response
        return {
            status: 404,
            headers: { 'Content-Type': 'application/json' },
            body: { error: 'Not Found', path }
        };
    }
    delay(ms) {
        return new Promise(resolve => setTimeout(resolve, ms));
    }
    getRandomPort() {
        return Math.floor(Math.random() * (65535 - 3000) + 3000);
    }
}
export class RealNetworkTestHelper {
    server = null;
    port = 0;
    routes = new Map();
    requests = [];
    async startMockServer(port = 0) {
        try {
            const http = await import('http');
            this.server = http.createServer((req, res) => {
                this.handleRequest(req, res);
            });
            this.port = port || this.getRandomPort();
            await new Promise((resolve, reject) => {
                this.server.listen(this.port, (err) => {
                    if (err)
                        reject(err);
                    else
                        resolve();
                });
            });
            return this.port;
        }
        catch (error) {
            console.warn('Real HTTP server not available, using mock');
            throw error;
        }
    }
    async stopMockServer() {
        if (this.server) {
            await new Promise((resolve) => {
                this.server.close(() => resolve());
            });
            this.server = null;
        }
        this.routes.clear();
        this.requests = [];
    }
    mockRequest(method, path, response) {
        const key = `${method.toUpperCase()} ${path}`;
        this.routes.set(key, response);
    }
    mockWebSocket(path, handlers) {
        // WebSocket support would require additional setup
        console.warn('WebSocket mocking not fully implemented for real server');
    }
    captureRequests() {
        return [...this.requests];
    }
    clearRequests() {
        this.requests = [];
    }
    simulateNetworkDelay(delayMs) {
        // Not applicable for real server
        console.warn('Network delay simulation not supported for real server');
    }
    simulateNetworkError(errorType) {
        // Not applicable for real server
        console.warn('Network error simulation not supported for real server');
    }
    resetNetworkConditions() {
        // Not applicable for real server
    }
    createHttpClient(baseUrl) {
        const url = baseUrl || `http://localhost:${this.port}`;
        return {
            async get(path, headers = {}) {
                return this.makeRealRequest('GET', `${url}${path}`, undefined, headers);
            },
            async post(path, body, headers = {}) {
                return this.makeRealRequest('POST', `${url}${path}`, body, headers);
            },
            async put(path, body, headers = {}) {
                return this.makeRealRequest('PUT', `${url}${path}`, body, headers);
            },
            async delete(path, headers = {}) {
                return this.makeRealRequest('DELETE', `${url}${path}`, undefined, headers);
            },
            async patch(path, body, headers = {}) {
                return this.makeRealRequest('PATCH', `${url}${path}`, body, headers);
            }
        };
    }
    createWebSocketClient(url) {
        // Real WebSocket implementation would go here
        throw new Error('Real WebSocket client not implemented');
    }
    async handleRequest(req, res) {
        // Collect request body
        const chunks = [];
        req.on('data', (chunk) => {
            chunks.push(chunk);
        });
        req.on('end', () => {
            const body = chunks.length > 0 ? Buffer.concat(chunks).toString() : undefined;
            // Record the request
            const request = {
                method: req.method,
                url: req.url,
                headers: req.headers,
                body: body ? this.tryParseJson(body) : undefined,
                timestamp: Date.now()
            };
            this.requests.push(request);
            // Find matching route
            const key = `${req.method} ${req.url}`;
            const response = this.routes.get(key);
            if (response) {
                res.writeHead(response.status, response.headers);
                res.end(typeof response.body === 'string' ? response.body : JSON.stringify(response.body));
            }
            else {
                res.writeHead(404, { 'Content-Type': 'application/json' });
                res.end(JSON.stringify({ error: 'Not Found', path: req.url }));
            }
        });
    }
    async makeRealRequest(method, url, body, headers = {}) {
        try {
            // Use fetch if available, otherwise use http module
            if (typeof fetch !== 'undefined') {
                const options = {
                    method,
                    headers,
                };
                if (body) {
                    options.body = typeof body === 'string' ? body : JSON.stringify(body);
                    if (!headers['Content-Type']) {
                        headers['Content-Type'] = 'application/json';
                    }
                }
                const response = await fetch(url, options);
                const responseBody = await response.text();
                return {
                    status: response.status,
                    headers: Object.fromEntries(response.headers.entries()),
                    body: this.tryParseJson(responseBody)
                };
            }
            else {
                throw new Error('fetch not available');
            }
        }
        catch (error) {
            throw new Error(`HTTP request failed: ${error}`);
        }
    }
    tryParseJson(text) {
        try {
            return JSON.parse(text);
        }
        catch {
            return text;
        }
    }
    getRandomPort() {
        return Math.floor(Math.random() * (65535 - 3000) + 3000);
    }
}
// Factory functions
export function createMockNetworkHelper() {
    return new MockNetworkTestHelper();
}
export function createRealNetworkHelper() {
    return new RealNetworkTestHelper();
}
// Helper functions for common testing patterns
export async function testHttpEndpoint(helper, method, path, expectedResponse, requestBody) {
    const client = helper.createHttpClient();
    let response;
    switch (method.toUpperCase()) {
        case 'GET':
            response = await client.get(path);
            break;
        case 'POST':
            response = await client.post(path, requestBody);
            break;
        case 'PUT':
            response = await client.put(path, requestBody);
            break;
        case 'DELETE':
            response = await client.delete(path);
            break;
        case 'PATCH':
            response = await client.patch(path, requestBody);
            break;
        default:
            throw new Error(`Unsupported HTTP method: ${method}`);
    }
    // Verify expected response
    if (expectedResponse.status !== undefined) {
        if (response.status !== expectedResponse.status) {
            throw new Error(`Expected status ${expectedResponse.status}, got ${response.status}`);
        }
    }
    return response;
}
export async function setupRestApiMock(helper, endpoints) {
    await helper.startMockServer();
    for (const endpoint of endpoints) {
        helper.mockRequest(endpoint.method, endpoint.path, endpoint.response);
    }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,