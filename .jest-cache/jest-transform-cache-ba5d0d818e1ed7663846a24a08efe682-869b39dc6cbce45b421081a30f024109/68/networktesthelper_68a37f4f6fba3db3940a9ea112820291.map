{"file":"/home/mhugo/code/claude-code-flow/src/__tests__/helpers/network-test-helper.ts","mappings":"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","names":[],"sources":["/home/mhugo/code/claude-code-flow/src/__tests__/helpers/network-test-helper.ts"],"sourcesContent":["/**\n * Network Test Helper - Network Testing Utilities\n * \n * Comprehensive network testing support for HTTP, WebSocket, and other protocols\n */\n\nexport interface HttpRequest {\n  method: string;\n  url: string;\n  headers: Record<string, string>;\n  body?: any;\n  timestamp: number;\n}\n\nexport interface HttpResponse {\n  status: number;\n  headers: Record<string, string>;\n  body: any;\n}\n\nexport interface NetworkTestHelper {\n  startMockServer(port?: number): Promise<number>;\n  stopMockServer(): Promise<void>;\n  mockRequest(method: string, path: string, response: HttpResponse): void;\n  mockWebSocket(path: string, handlers: WebSocketHandlers): void;\n  captureRequests(): HttpRequest[];\n  clearRequests(): void;\n  simulateNetworkDelay(delayMs: number): void;\n  simulateNetworkError(errorType: 'timeout' | 'connection' | 'dns'): void;\n  resetNetworkConditions(): void;\n  createHttpClient(baseUrl?: string): HttpClient;\n  createWebSocketClient(url: string): WebSocketClient;\n}\n\nexport interface WebSocketHandlers {\n  onConnect?: () => void;\n  onMessage?: (message: any) => void;\n  onDisconnect?: () => void;\n  onError?: (error: Error) => void;\n}\n\nexport interface HttpClient {\n  get(path: string, headers?: Record<string, string>): Promise<HttpResponse>;\n  post(path: string, body?: any, headers?: Record<string, string>): Promise<HttpResponse>;\n  put(path: string, body?: any, headers?: Record<string, string>): Promise<HttpResponse>;\n  delete(path: string, headers?: Record<string, string>): Promise<HttpResponse>;\n  patch(path: string, body?: any, headers?: Record<string, string>): Promise<HttpResponse>;\n}\n\nexport interface WebSocketClient {\n  connect(): Promise<void>;\n  disconnect(): Promise<void>;\n  send(message: any): Promise<void>;\n  onMessage(callback: (message: any) => void): void;\n  onError(callback: (error: Error) => void): void;\n  onConnect(callback: () => void): void;\n  onDisconnect(callback: () => void): void;\n}\n\nexport class MockNetworkTestHelper implements NetworkTestHelper {\n  private routes = new Map<string, HttpResponse>();\n  private webSocketHandlers = new Map<string, WebSocketHandlers>();\n  private requests: HttpRequest[] = [];\n  private networkDelay = 0;\n  private networkError: string | null = null;\n  private isRunning = false;\n  private port = 0;\n\n  async startMockServer(port: number = 0): Promise<number> {\n    this.port = port || this.getRandomPort();\n    this.isRunning = true;\n    return this.port;\n  }\n\n  async stopMockServer(): Promise<void> {\n    this.isRunning = false;\n    this.routes.clear();\n    this.webSocketHandlers.clear();\n    this.requests = [];\n  }\n\n  mockRequest(method: string, path: string, response: HttpResponse): void {\n    const key = `${method.toUpperCase()} ${path}`;\n    this.routes.set(key, response);\n  }\n\n  mockWebSocket(path: string, handlers: WebSocketHandlers): void {\n    this.webSocketHandlers.set(path, handlers);\n  }\n\n  captureRequests(): HttpRequest[] {\n    return [...this.requests];\n  }\n\n  clearRequests(): void {\n    this.requests = [];\n  }\n\n  simulateNetworkDelay(delayMs: number): void {\n    this.networkDelay = delayMs;\n  }\n\n  simulateNetworkError(errorType: 'timeout' | 'connection' | 'dns'): void {\n    this.networkError = errorType;\n  }\n\n  resetNetworkConditions(): void {\n    this.networkDelay = 0;\n    this.networkError = null;\n  }\n\n  createHttpClient(baseUrl?: string): HttpClient {\n    const self = this;\n    const url = baseUrl || `http://localhost:${this.port}`;\n\n    return {\n      async get(path: string, headers: Record<string, string> = {}): Promise<HttpResponse> {\n        return self.makeRequest('GET', path, undefined, headers);\n      },\n\n      async post(path: string, body?: any, headers: Record<string, string> = {}): Promise<HttpResponse> {\n        return self.makeRequest('POST', path, body, headers);\n      },\n\n      async put(path: string, body?: any, headers: Record<string, string> = {}): Promise<HttpResponse> {\n        return self.makeRequest('PUT', path, body, headers);\n      },\n\n      async delete(path: string, headers: Record<string, string> = {}): Promise<HttpResponse> {\n        return self.makeRequest('DELETE', path, undefined, headers);\n      },\n\n      async patch(path: string, body?: any, headers: Record<string, string> = {}): Promise<HttpResponse> {\n        return self.makeRequest('PATCH', path, body, headers);\n      }\n    };\n  }\n\n  createWebSocketClient(url: string): WebSocketClient {\n    const self = this;\n    const path = new URL(url).pathname;\n    let isConnected = false;\n    const messageCallbacks: Array<(message: any) => void> = [];\n    const errorCallbacks: Array<(error: Error) => void> = [];\n    const connectCallbacks: Array<() => void> = [];\n    const disconnectCallbacks: Array<() => void> = [];\n\n    return {\n      async connect(): Promise<void> {\n        if (self.networkError) {\n          throw new Error(`Network error: ${self.networkError}`);\n        }\n\n        if (self.networkDelay > 0) {\n          await self.delay(self.networkDelay);\n        }\n\n        isConnected = true;\n        const handlers = self.webSocketHandlers.get(path);\n        \n        if (handlers?.onConnect) {\n          handlers.onConnect();\n        }\n\n        connectCallbacks.forEach(callback => callback());\n      },\n\n      async disconnect(): Promise<void> {\n        isConnected = false;\n        const handlers = self.webSocketHandlers.get(path);\n        \n        if (handlers?.onDisconnect) {\n          handlers.onDisconnect();\n        }\n\n        disconnectCallbacks.forEach(callback => callback());\n      },\n\n      async send(message: any): Promise<void> {\n        if (!isConnected) {\n          throw new Error('WebSocket not connected');\n        }\n\n        if (self.networkError) {\n          throw new Error(`Network error: ${self.networkError}`);\n        }\n\n        if (self.networkDelay > 0) {\n          await self.delay(self.networkDelay);\n        }\n\n        const handlers = self.webSocketHandlers.get(path);\n        if (handlers?.onMessage) {\n          handlers.onMessage(message);\n        }\n      },\n\n      onMessage(callback: (message: any) => void): void {\n        messageCallbacks.push(callback);\n      },\n\n      onError(callback: (error: Error) => void): void {\n        errorCallbacks.push(callback);\n      },\n\n      onConnect(callback: () => void): void {\n        connectCallbacks.push(callback);\n      },\n\n      onDisconnect(callback: () => void): void {\n        disconnectCallbacks.push(callback);\n      }\n    };\n  }\n\n  private async makeRequest(\n    method: string,\n    path: string,\n    body?: any,\n    headers: Record<string, string> = {}\n  ): Promise<HttpResponse> {\n    if (!this.isRunning) {\n      throw new Error('Mock server not running');\n    }\n\n    if (this.networkError) {\n      throw new Error(`Network error: ${this.networkError}`);\n    }\n\n    if (this.networkDelay > 0) {\n      await this.delay(this.networkDelay);\n    }\n\n    // Record the request\n    const request: HttpRequest = {\n      method: method.toUpperCase(),\n      url: path,\n      headers,\n      body,\n      timestamp: Date.now()\n    };\n    this.requests.push(request);\n\n    // Find matching route\n    const key = `${method.toUpperCase()} ${path}`;\n    const response = this.routes.get(key);\n\n    if (response) {\n      return response;\n    }\n\n    // Default 404 response\n    return {\n      status: 404,\n      headers: { 'Content-Type': 'application/json' },\n      body: { error: 'Not Found', path }\n    };\n  }\n\n  private delay(ms: number): Promise<void> {\n    return new Promise(resolve => setTimeout(resolve, ms));\n  }\n\n  private getRandomPort(): number {\n    return Math.floor(Math.random() * (65535 - 3000) + 3000);\n  }\n}\n\nexport class RealNetworkTestHelper implements NetworkTestHelper {\n  private server: any = null;\n  private port = 0;\n  private routes = new Map<string, HttpResponse>();\n  private requests: HttpRequest[] = [];\n\n  async startMockServer(port: number = 0): Promise<number> {\n    try {\n      const http = await import('http');\n      \n      this.server = http.createServer((req, res) => {\n        this.handleRequest(req, res);\n      });\n\n      this.port = port || this.getRandomPort();\n\n      await new Promise<void>((resolve, reject) => {\n        this.server.listen(this.port, (err: any) => {\n          if (err) reject(err);\n          else resolve();\n        });\n      });\n\n      return this.port;\n    } catch (error) {\n      console.warn('Real HTTP server not available, using mock');\n      throw error;\n    }\n  }\n\n  async stopMockServer(): Promise<void> {\n    if (this.server) {\n      await new Promise<void>((resolve) => {\n        this.server.close(() => resolve());\n      });\n      this.server = null;\n    }\n    \n    this.routes.clear();\n    this.requests = [];\n  }\n\n  mockRequest(method: string, path: string, response: HttpResponse): void {\n    const key = `${method.toUpperCase()} ${path}`;\n    this.routes.set(key, response);\n  }\n\n  mockWebSocket(path: string, handlers: WebSocketHandlers): void {\n    // WebSocket support would require additional setup\n    console.warn('WebSocket mocking not fully implemented for real server');\n  }\n\n  captureRequests(): HttpRequest[] {\n    return [...this.requests];\n  }\n\n  clearRequests(): void {\n    this.requests = [];\n  }\n\n  simulateNetworkDelay(delayMs: number): void {\n    // Not applicable for real server\n    console.warn('Network delay simulation not supported for real server');\n  }\n\n  simulateNetworkError(errorType: 'timeout' | 'connection' | 'dns'): void {\n    // Not applicable for real server\n    console.warn('Network error simulation not supported for real server');\n  }\n\n  resetNetworkConditions(): void {\n    // Not applicable for real server\n  }\n\n  createHttpClient(baseUrl?: string): HttpClient {\n    const url = baseUrl || `http://localhost:${this.port}`;\n\n    return {\n      async get(path: string, headers: Record<string, string> = {}): Promise<HttpResponse> {\n        return this.makeRealRequest('GET', `${url}${path}`, undefined, headers);\n      },\n\n      async post(path: string, body?: any, headers: Record<string, string> = {}): Promise<HttpResponse> {\n        return this.makeRealRequest('POST', `${url}${path}`, body, headers);\n      },\n\n      async put(path: string, body?: any, headers: Record<string, string> = {}): Promise<HttpResponse> {\n        return this.makeRealRequest('PUT', `${url}${path}`, body, headers);\n      },\n\n      async delete(path: string, headers: Record<string, string> = {}): Promise<HttpResponse> {\n        return this.makeRealRequest('DELETE', `${url}${path}`, undefined, headers);\n      },\n\n      async patch(path: string, body?: any, headers: Record<string, string> = {}): Promise<HttpResponse> {\n        return this.makeRealRequest('PATCH', `${url}${path}`, body, headers);\n      }\n    };\n  }\n\n  createWebSocketClient(url: string): WebSocketClient {\n    // Real WebSocket implementation would go here\n    throw new Error('Real WebSocket client not implemented');\n  }\n\n  private async handleRequest(req: any, res: any): Promise<void> {\n    // Collect request body\n    const chunks: Buffer[] = [];\n    \n    req.on('data', (chunk: Buffer) => {\n      chunks.push(chunk);\n    });\n\n    req.on('end', () => {\n      const body = chunks.length > 0 ? Buffer.concat(chunks).toString() : undefined;\n      \n      // Record the request\n      const request: HttpRequest = {\n        method: req.method,\n        url: req.url,\n        headers: req.headers,\n        body: body ? this.tryParseJson(body) : undefined,\n        timestamp: Date.now()\n      };\n      this.requests.push(request);\n\n      // Find matching route\n      const key = `${req.method} ${req.url}`;\n      const response = this.routes.get(key);\n\n      if (response) {\n        res.writeHead(response.status, response.headers);\n        res.end(typeof response.body === 'string' ? response.body : JSON.stringify(response.body));\n      } else {\n        res.writeHead(404, { 'Content-Type': 'application/json' });\n        res.end(JSON.stringify({ error: 'Not Found', path: req.url }));\n      }\n    });\n  }\n\n  private async makeRealRequest(\n    method: string,\n    url: string,\n    body?: any,\n    headers: Record<string, string> = {}\n  ): Promise<HttpResponse> {\n    try {\n      // Use fetch if available, otherwise use http module\n      if (typeof fetch !== 'undefined') {\n        const options: RequestInit = {\n          method,\n          headers,\n        };\n\n        if (body) {\n          options.body = typeof body === 'string' ? body : JSON.stringify(body);\n          if (!headers['Content-Type']) {\n            headers['Content-Type'] = 'application/json';\n          }\n        }\n\n        const response = await fetch(url, options);\n        const responseBody = await response.text();\n\n        return {\n          status: response.status,\n          headers: Object.fromEntries(response.headers.entries()),\n          body: this.tryParseJson(responseBody)\n        };\n      } else {\n        throw new Error('fetch not available');\n      }\n    } catch (error) {\n      throw new Error(`HTTP request failed: ${error}`);\n    }\n  }\n\n  private tryParseJson(text: string): any {\n    try {\n      return JSON.parse(text);\n    } catch {\n      return text;\n    }\n  }\n\n  private getRandomPort(): number {\n    return Math.floor(Math.random() * (65535 - 3000) + 3000);\n  }\n}\n\n// Factory functions\nexport function createMockNetworkHelper(): NetworkTestHelper {\n  return new MockNetworkTestHelper();\n}\n\nexport function createRealNetworkHelper(): NetworkTestHelper {\n  return new RealNetworkTestHelper();\n}\n\n// Helper functions for common testing patterns\nexport async function testHttpEndpoint(\n  helper: NetworkTestHelper,\n  method: string,\n  path: string,\n  expectedResponse: Partial<HttpResponse>,\n  requestBody?: any\n): Promise<HttpResponse> {\n  const client = helper.createHttpClient();\n  \n  let response: HttpResponse;\n  \n  switch (method.toUpperCase()) {\n    case 'GET':\n      response = await client.get(path);\n      break;\n    case 'POST':\n      response = await client.post(path, requestBody);\n      break;\n    case 'PUT':\n      response = await client.put(path, requestBody);\n      break;\n    case 'DELETE':\n      response = await client.delete(path);\n      break;\n    case 'PATCH':\n      response = await client.patch(path, requestBody);\n      break;\n    default:\n      throw new Error(`Unsupported HTTP method: ${method}`);\n  }\n\n  // Verify expected response\n  if (expectedResponse.status !== undefined) {\n    if (response.status !== expectedResponse.status) {\n      throw new Error(`Expected status ${expectedResponse.status}, got ${response.status}`);\n    }\n  }\n\n  return response;\n}\n\nexport async function setupRestApiMock(\n  helper: NetworkTestHelper,\n  endpoints: Array<{\n    method: string;\n    path: string;\n    response: HttpResponse;\n  }>\n): Promise<void> {\n  await helper.startMockServer();\n  \n  for (const endpoint of endpoints) {\n    helper.mockRequest(endpoint.method, endpoint.path, endpoint.response);\n  }\n}"],"version":3}