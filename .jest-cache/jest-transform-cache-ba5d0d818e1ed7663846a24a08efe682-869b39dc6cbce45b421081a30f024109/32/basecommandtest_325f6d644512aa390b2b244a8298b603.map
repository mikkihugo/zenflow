{"file":"/home/mhugo/code/claude-code-flow/src/__tests__/unit/london/cli-commands/base-command.test.ts","mappings":"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","names":[],"sources":["/home/mhugo/code/claude-code-flow/src/__tests__/unit/london/cli-commands/base-command.test.ts"],"sourcesContent":["/**\n * BaseCommand Tests - TDD London School\n * \n * Tests the behavior and interactions of the BaseCommand abstract class\n * using mocks for dependencies and focusing on command lifecycle,\n * validation behavior, and hook interactions.\n */\n\nimport { jest } from '@jest/globals';\nimport { BaseCommand, CommandHooks } from '../../../../cli/core/base-command.js';\nimport type { \n  CommandContext, \n  CommandResult, \n  CommandConfig,\n  CommandValidationResult \n} from '../../../../cli/types/index.js';\n\n// Concrete implementation for testing\nclass TestCommand extends BaseCommand {\n  private mockRun: jest.Mock;\n\n  constructor(config: CommandConfig, mockRun?: jest.Mock) {\n    super(config);\n    this.mockRun = mockRun || jest.fn().mockResolvedValue({\n      success: true,\n      exitCode: 0,\n      message: 'Test command executed'\n    });\n  }\n\n  protected async run(context: CommandContext): Promise<CommandResult> {\n    return this.mockRun(context);\n  }\n\n  getHelp(): string {\n    return `Help for ${this.config.name}`;\n  }\n\n  // Expose protected methods for testing\n  public async testValidateContext(context: CommandContext): Promise<CommandValidationResult> {\n    return this.validateContext(context);\n  }\n\n  public async testValidate(context: CommandContext): Promise<CommandValidationResult | null> {\n    return this.validate(context);\n  }\n\n  // Allow injection of custom validation logic\n  private customValidation?: (context: CommandContext) => Promise<CommandValidationResult | null>;\n\n  setCustomValidation(fn: (context: CommandContext) => Promise<CommandValidationResult | null>) {\n    this.customValidation = fn;\n  }\n\n  protected async validate(context: CommandContext): Promise<CommandValidationResult | null> {\n    return this.customValidation ? this.customValidation(context) : null;\n  }\n}\n\ndescribe('BaseCommand - TDD London', () => {\n  let command: TestCommand;\n  let mockContext: CommandContext;\n  let mockEventHandler: jest.Mock;\n\n  beforeEach(() => {\n    const config: CommandConfig = {\n      name: 'test-command',\n      description: 'Test command for validation',\n      minArgs: 1,\n      maxArgs: 3,\n      flags: {\n        required: {\n          type: 'string',\n          description: 'Required flag',\n          required: true\n        },\n        optional: {\n          type: 'boolean',\n          description: 'Optional flag',\n          default: false\n        },\n        number: {\n          type: 'number',\n          description: 'Number flag'\n        }\n      }\n    };\n\n    command = new TestCommand(config);\n    mockEventHandler = jest.fn();\n\n    // Listen to command events\n    command.on('start', mockEventHandler);\n    command.on('validation-error', mockEventHandler);\n    command.on('validation-warning', mockEventHandler);\n    command.on('before-execution', mockEventHandler);\n    command.on('after-execution', mockEventHandler);\n    command.on('error', mockEventHandler);\n    command.on('complete', mockEventHandler);\n\n    mockContext = {\n      args: ['arg1'],\n      flags: { required: 'test-value' },\n      input: ['test-command', 'arg1', '--required', 'test-value'],\n      pkg: { name: 'test-cli', version: '1.0.0' },\n      cwd: '/test/dir',\n      env: {},\n      debug: false,\n      verbose: false\n    };\n  });\n\n  afterEach(() => {\n    command.removeAllListeners();\n  });\n\n  describe('command lifecycle behavior', () => {\n    it('should emit start event when execution begins', async () => {\n      // Act\n      await command.execute(mockContext);\n\n      // Assert - verify start event emission\n      expect(mockEventHandler).toHaveBeenCalledWith(mockContext);\n      expect(mockEventHandler).toHaveBeenCalledWith(\n        expect.objectContaining({ success: true })\n      );\n    });\n\n    it('should emit complete event with execution time', async () => {\n      // Act\n      await command.execute(mockContext);\n\n      // Assert - verify complete event with timing\n      expect(mockEventHandler).toHaveBeenCalledWith(\n        expect.objectContaining({\n          success: true,\n          executionTime: expect.any(Number)\n        })\n      );\n    });\n\n    it('should prevent concurrent execution', async () => {\n      // Arrange\n      const slowCommand = new TestCommand(\n        { name: 'slow', description: 'Slow command' },\n        jest.fn().mockImplementation(() => new Promise(resolve => setTimeout(resolve, 100)))\n      );\n\n      // Act\n      const promise1 = slowCommand.execute(mockContext);\n      const result2 = await slowCommand.execute(mockContext);\n\n      // Assert - verify concurrent execution prevention\n      expect(result2).toEqual({\n        success: false,\n        error: 'Command is already executing',\n        exitCode: 1,\n        executionTime: 0\n      });\n\n      await promise1; // Cleanup\n    });\n\n    it('should track executing state correctly', async () => {\n      // Arrange\n      let executingDuringRun = false;\n      const trackingCommand = new TestCommand(\n        { name: 'tracking', description: 'Tracking command' },\n        jest.fn().mockImplementation(() => {\n          executingDuringRun = trackingCommand.executing;\n          return Promise.resolve({ success: true, exitCode: 0 });\n        })\n      );\n\n      // Act\n      expect(trackingCommand.executing).toBe(false);\n      await trackingCommand.execute(mockContext);\n\n      // Assert - verify state tracking\n      expect(executingDuringRun).toBe(true);\n      expect(trackingCommand.executing).toBe(false);\n    });\n  });\n\n  describe('validation behavior', () => {\n    it('should validate required flags and emit validation error', async () => {\n      // Arrange\n      const invalidContext = {\n        ...mockContext,\n        flags: {} // Missing required flag\n      };\n\n      // Act\n      const result = await command.execute(invalidContext);\n\n      // Assert - verify validation error behavior\n      expect(mockEventHandler).toHaveBeenCalledWith(\n        expect.objectContaining({\n          valid: false,\n          errors: expect.arrayContaining([\n            expect.stringContaining('Required flag --required is missing')\n          ])\n        })\n      );\n\n      expect(result).toEqual({\n        success: false,\n        error: expect.stringContaining('Validation failed'),\n        exitCode: 1,\n        executionTime: expect.any(Number)\n      });\n    });\n\n    it('should validate flag types', async () => {\n      // Arrange\n      const invalidContext = {\n        ...mockContext,\n        flags: {\n          required: 'test-value',\n          number: 'not-a-number' // Invalid type\n        }\n      };\n\n      // Act\n      const result = await command.execute(invalidContext);\n\n      // Assert - verify type validation\n      expect(result.success).toBe(false);\n      expect(result.error).toContain('expected number but got string');\n    });\n\n    it('should validate argument count', async () => {\n      // Arrange - Too few arguments\n      const tooFewArgs = {\n        ...mockContext,\n        args: [] // Less than minArgs (1)\n      };\n\n      // Act\n      const result1 = await command.execute(tooFewArgs);\n\n      // Assert\n      expect(result1.success).toBe(false);\n      expect(result1.error).toContain('Expected at least 1 arguments, got 0');\n\n      // Arrange - Too many arguments\n      const tooManyArgs = {\n        ...mockContext,\n        args: ['arg1', 'arg2', 'arg3', 'arg4'] // More than maxArgs (3)\n      };\n\n      // Act\n      const result2 = await command.execute(tooManyArgs);\n\n      // Assert\n      expect(result2.success).toBe(false);\n      expect(result2.error).toContain('Expected at most 3 arguments, got 4');\n    });\n\n    it('should call custom validation and include its results', async () => {\n      // Arrange\n      const customValidation = jest.fn().mockResolvedValue({\n        valid: false,\n        errors: ['Custom validation failed'],\n        warnings: ['Custom warning']\n      });\n      command.setCustomValidation(customValidation);\n\n      // Act\n      const result = await command.execute(mockContext);\n\n      // Assert - verify custom validation integration\n      expect(customValidation).toHaveBeenCalledWith(mockContext);\n      expect(result.success).toBe(false);\n      expect(result.error).toContain('Custom validation failed');\n      \n      expect(mockEventHandler).toHaveBeenCalledWith(['Custom warning']);\n    });\n\n    it('should handle validation exceptions gracefully', async () => {\n      // Arrange\n      const throwingValidation = jest.fn().mockRejectedValue(new Error('Validation exploded'));\n      command.setCustomValidation(throwingValidation);\n\n      // Act\n      const result = await command.execute(mockContext);\n\n      // Assert - verify validation error handling\n      expect(result.success).toBe(false);\n      expect(result.error).toContain('Validation failed: Validation exploded');\n    });\n  });\n\n  describe('hook behavior', () => {\n    let mockHooks: jest.Mocked<CommandHooks>;\n\n    beforeEach(() => {\n      mockHooks = {\n        beforeValidation: jest.fn(),\n        afterValidation: jest.fn(),\n        beforeExecution: jest.fn(),\n        afterExecution: jest.fn(),\n        onError: jest.fn()\n      };\n\n      command.registerHooks(mockHooks);\n    });\n\n    it('should call hooks in correct order during successful execution', async () => {\n      // Act\n      await command.execute(mockContext);\n\n      // Assert - verify hook execution order and parameters\n      expect(mockHooks.beforeValidation).toHaveBeenCalledWith(mockContext);\n      expect(mockHooks.afterValidation).toHaveBeenCalledWith(\n        mockContext,\n        expect.objectContaining({ valid: true })\n      );\n      expect(mockHooks.beforeExecution).toHaveBeenCalledWith(mockContext);\n      expect(mockHooks.afterExecution).toHaveBeenCalledWith(\n        mockContext,\n        expect.objectContaining({ success: true })\n      );\n      expect(mockHooks.onError).not.toHaveBeenCalled();\n    });\n\n    it('should call error hook when command execution fails', async () => {\n      // Arrange\n      const error = new Error('Command failed');\n      const failingCommand = new TestCommand(\n        { name: 'failing', description: 'Failing command' },\n        jest.fn().mockRejectedValue(error)\n      );\n      failingCommand.registerHooks(mockHooks);\n\n      // Act\n      await failingCommand.execute(mockContext);\n\n      // Assert - verify error hook behavior\n      expect(mockHooks.onError).toHaveBeenCalledWith(mockContext, error);\n      expect(mockHooks.afterExecution).not.toHaveBeenCalled();\n    });\n\n    it('should handle hook exceptions without breaking execution', async () => {\n      // Arrange\n      mockHooks.beforeExecution!.mockRejectedValue(new Error('Hook failed'));\n\n      // Act\n      const result = await command.execute(mockContext);\n\n      // Assert - verify hook exception handling\n      expect(result.success).toBe(false);\n      expect(result.error).toContain('Hook failed');\n      expect(mockHooks.onError).toHaveBeenCalled();\n    });\n\n    it('should allow hooks to be registered partially', async () => {\n      // Arrange\n      const partialHooks = {\n        beforeExecution: jest.fn()\n      };\n      \n      const partialCommand = new TestCommand({\n        name: 'partial',\n        description: 'Partial hooks'\n      });\n      partialCommand.registerHooks(partialHooks);\n\n      // Act\n      await partialCommand.execute(mockContext);\n\n      // Assert - verify partial hook registration\n      expect(partialHooks.beforeExecution).toHaveBeenCalledWith(mockContext);\n    });\n  });\n\n  describe('error handling behavior', () => {\n    it('should emit error event and return error result when run throws', async () => {\n      // Arrange\n      const error = new Error('Run method failed');\n      const errorCommand = new TestCommand(\n        { name: 'error', description: 'Error command' },\n        jest.fn().mockRejectedValue(error)\n      );\n      \n      const errorEventHandler = jest.fn();\n      errorCommand.on('error', errorEventHandler);\n\n      // Act\n      const result = await errorCommand.execute(mockContext);\n\n      // Assert - verify error handling behavior\n      expect(errorEventHandler).toHaveBeenCalledWith(error);\n      expect(result).toEqual({\n        success: false,\n        error: 'Run method failed',\n        exitCode: 1,\n        executionTime: expect.any(Number)\n      });\n    });\n\n    it('should handle non-Error exceptions', async () => {\n      // Arrange\n      const stringError = 'String error';\n      const errorCommand = new TestCommand(\n        { name: 'string-error', description: 'String error command' },\n        jest.fn().mockRejectedValue(stringError)\n      );\n\n      // Act\n      const result = await errorCommand.execute(mockContext);\n\n      // Assert - verify non-Error handling\n      expect(result).toEqual({\n        success: false,\n        error: 'String error',\n        exitCode: 1,\n        executionTime: expect.any(Number)\n      });\n    });\n  });\n\n  describe('metadata and configuration behavior', () => {\n    it('should provide correct metadata', () => {\n      // Act\n      const metadata = command.metadata;\n\n      // Assert - verify metadata structure\n      expect(metadata).toEqual({\n        config: expect.objectContaining({\n          name: 'test-command',\n          description: 'Test command for validation'\n        }),\n        handler: expect.any(Function),\n        registeredAt: expect.any(Date),\n        available: true\n      });\n    });\n\n    it('should return immutable configuration copy', () => {\n      // Act\n      const config1 = command.getConfig();\n      const config2 = command.getConfig();\n\n      // Assert - verify immutability\n      expect(config1).toEqual(config2);\n      expect(config1).not.toBe(config2);\n      \n      // Modify copy and verify original is unaffected\n      config1.name = 'modified';\n      expect(command.getConfig().name).toBe('test-command');\n    });\n\n    it('should return help text', () => {\n      // Act\n      const help = command.getHelp();\n\n      // Assert - verify help text\n      expect(help).toBe('Help for test-command');\n    });\n\n    it('should return examples from configuration', () => {\n      // Arrange\n      const commandWithExamples = new TestCommand({\n        name: 'examples',\n        description: 'Command with examples',\n        examples: ['example 1', 'example 2']\n      });\n\n      // Act\n      const examples = commandWithExamples.getExamples();\n\n      // Assert - verify examples\n      expect(examples).toEqual(['example 1', 'example 2']);\n    });\n  });\n\n  describe('cleanup behavior', () => {\n    it('should remove all event listeners when disposed', () => {\n      // Arrange\n      const listeners = command.listenerCount('start');\n      expect(listeners).toBeGreaterThan(0);\n\n      // Act\n      command.dispose();\n\n      // Assert - verify cleanup\n      expect(command.listenerCount('start')).toBe(0);\n      expect(command.listenerCount('complete')).toBe(0);\n      expect(command.listenerCount('error')).toBe(0);\n    });\n  });\n});"],"version":3}