672826d5525b50672c056652cc4e67a7
/* istanbul ignore next */
function cov_hj6l6sdbd() {
  var path = "/home/mhugo/code/claude-code-flow/src/maestro/maestro-orchestrator.ts";
  var hash = "fb8f75c4c80f49e6568c87941d13d6e1f37e07d4";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/home/mhugo/code/claude-code-flow/src/maestro/maestro-orchestrator.ts",
    statementMap: {
      "0": {
        start: {
          line: 31,
          column: 19
        },
        end: {
          line: 31,
          column: 28
        }
      },
      "1": {
        start: {
          line: 39,
          column: 30
        },
        end: {
          line: 39,
          column: 35
        }
      },
      "2": {
        start: {
          line: 41,
          column: 19
        },
        end: {
          line: 41,
          column: 28
        }
      },
      "3": {
        start: {
          line: 43,
          column: 16
        },
        end: {
          line: 43,
          column: 25
        }
      },
      "4": {
        start: {
          line: 44,
          column: 22
        },
        end: {
          line: 44,
          column: 31
        }
      },
      "5": {
        start: {
          line: 46,
          column: 8
        },
        end: {
          line: 46,
          column: 16
        }
      },
      "6": {
        start: {
          line: 47,
          column: 8
        },
        end: {
          line: 47,
          column: 29
        }
      },
      "7": {
        start: {
          line: 48,
          column: 8
        },
        end: {
          line: 48,
          column: 33
        }
      },
      "8": {
        start: {
          line: 49,
          column: 8
        },
        end: {
          line: 49,
          column: 29
        }
      },
      "9": {
        start: {
          line: 50,
          column: 8
        },
        end: {
          line: 50,
          column: 43
        }
      },
      "10": {
        start: {
          line: 51,
          column: 8
        },
        end: {
          line: 51,
          column: 41
        }
      },
      "11": {
        start: {
          line: 52,
          column: 8
        },
        end: {
          line: 52,
          column: 49
        }
      },
      "12": {
        start: {
          line: 53,
          column: 8
        },
        end: {
          line: 53,
          column: 43
        }
      },
      "13": {
        start: {
          line: 54,
          column: 8
        },
        end: {
          line: 54,
          column: 96
        }
      },
      "14": {
        start: {
          line: 55,
          column: 8
        },
        end: {
          line: 55,
          column: 102
        }
      },
      "15": {
        start: {
          line: 57,
          column: 8
        },
        end: {
          line: 59,
          column: 9
        }
      },
      "16": {
        start: {
          line: 58,
          column: 12
        },
        end: {
          line: 58,
          column: 42
        }
      },
      "17": {
        start: {
          line: 60,
          column: 8
        },
        end: {
          line: 60,
          column: 34
        }
      },
      "18": {
        start: {
          line: 61,
          column: 8
        },
        end: {
          line: 61,
          column: 61
        }
      },
      "19": {
        start: {
          line: 67,
          column: 8
        },
        end: {
          line: 70,
          column: 9
        }
      },
      "20": {
        start: {
          line: 68,
          column: 12
        },
        end: {
          line: 68,
          column: 63
        }
      },
      "21": {
        start: {
          line: 69,
          column: 12
        },
        end: {
          line: 69,
          column: 24
        }
      },
      "22": {
        start: {
          line: 71,
          column: 8
        },
        end: {
          line: 97,
          column: 9
        }
      },
      "23": {
        start: {
          line: 73,
          column: 35
        },
        end: {
          line: 84,
          column: 13
        }
      },
      "24": {
        start: {
          line: 86,
          column: 12
        },
        end: {
          line: 86,
          column: 57
        }
      },
      "25": {
        start: {
          line: 87,
          column: 28
        },
        end: {
          line: 87,
          column: 60
        }
      },
      "26": {
        start: {
          line: 89,
          column: 12
        },
        end: {
          line: 89,
          column: 59
        }
      },
      "27": {
        start: {
          line: 90,
          column: 12
        },
        end: {
          line: 90,
          column: 64
        }
      },
      "28": {
        start: {
          line: 91,
          column: 12
        },
        end: {
          line: 91,
          column: 74
        }
      },
      "29": {
        start: {
          line: 92,
          column: 12
        },
        end: {
          line: 92,
          column: 27
        }
      },
      "30": {
        start: {
          line: 95,
          column: 12
        },
        end: {
          line: 95,
          column: 123
        }
      },
      "31": {
        start: {
          line: 96,
          column: 12
        },
        end: {
          line: 96,
          column: 24
        }
      },
      "32": {
        start: {
          line: 103,
          column: 28
        },
        end: {
          line: 103,
          column: 66
        }
      },
      "33": {
        start: {
          line: 104,
          column: 8
        },
        end: {
          line: 104,
          column: 54
        }
      },
      "34": {
        start: {
          line: 106,
          column: 30
        },
        end: {
          line: 117,
          column: 9
        }
      },
      "35": {
        start: {
          line: 118,
          column: 8
        },
        end: {
          line: 118,
          column: 58
        }
      },
      "36": {
        start: {
          line: 120,
          column: 36
        },
        end: {
          line: 145,
          column: 1
        }
      },
      "37": {
        start: {
          line: 146,
          column: 8
        },
        end: {
          line: 146,
          column: 91
        }
      },
      "38": {
        start: {
          line: 147,
          column: 8
        },
        end: {
          line: 147,
          column: 71
        }
      },
      "39": {
        start: {
          line: 148,
          column: 8
        },
        end: {
          line: 148,
          column: 68
        }
      },
      "40": {
        start: {
          line: 150,
          column: 8
        },
        end: {
          line: 168,
          column: 9
        }
      },
      "41": {
        start: {
          line: 151,
          column: 12
        },
        end: {
          line: 167,
          column: 13
        }
      },
      "42": {
        start: {
          line: 152,
          column: 16
        },
        end: {
          line: 163,
          column: 19
        }
      },
      "43": {
        start: {
          line: 166,
          column: 16
        },
        end: {
          line: 166,
          column: 76
        }
      },
      "44": {
        start: {
          line: 174,
          column: 22
        },
        end: {
          line: 174,
          column: 56
        }
      },
      "45": {
        start: {
          line: 175,
          column: 8
        },
        end: {
          line: 177,
          column: 9
        }
      },
      "46": {
        start: {
          line: 176,
          column: 12
        },
        end: {
          line: 176,
          column: 82
        }
      },
      "47": {
        start: {
          line: 178,
          column: 28
        },
        end: {
          line: 178,
          column: 66
        }
      },
      "48": {
        start: {
          line: 179,
          column: 33
        },
        end: {
          line: 179,
          column: 69
        }
      },
      "49": {
        start: {
          line: 180,
          column: 8
        },
        end: {
          line: 185,
          column: 9
        }
      },
      "50": {
        start: {
          line: 181,
          column: 12
        },
        end: {
          line: 181,
          column: 43
        }
      },
      "51": {
        start: {
          line: 184,
          column: 12
        },
        end: {
          line: 184,
          column: 110
        }
      },
      "52": {
        start: {
          line: 186,
          column: 36
        },
        end: {
          line: 186,
          column: 76
        }
      },
      "53": {
        start: {
          line: 188,
          column: 8
        },
        end: {
          line: 193,
          column: 9
        }
      },
      "54": {
        start: {
          line: 189,
          column: 12
        },
        end: {
          line: 189,
          column: 84
        }
      },
      "55": {
        start: {
          line: 192,
          column: 12
        },
        end: {
          line: 192,
          column: 88
        }
      },
      "56": {
        start: {
          line: 195,
          column: 8
        },
        end: {
          line: 195,
          column: 49
        }
      },
      "57": {
        start: {
          line: 196,
          column: 8
        },
        end: {
          line: 196,
          column: 40
        }
      },
      "58": {
        start: {
          line: 197,
          column: 8
        },
        end: {
          line: 201,
          column: 11
        }
      },
      "59": {
        start: {
          line: 202,
          column: 8
        },
        end: {
          line: 202,
          column: 66
        }
      },
      "60": {
        start: {
          line: 203,
          column: 8
        },
        end: {
          line: 203,
          column: 72
        }
      },
      "61": {
        start: {
          line: 209,
          column: 28
        },
        end: {
          line: 219,
          column: 9
        }
      },
      "62": {
        start: {
          line: 221,
          column: 21
        },
        end: {
          line: 221,
          column: 64
        }
      },
      "63": {
        start: {
          line: 223,
          column: 23
        },
        end: {
          line: 223,
          column: 72
        }
      },
      "64": {
        start: {
          line: 225,
          column: 30
        },
        end: {
          line: 258,
          column: 1
        }
      },
      "65": {
        start: {
          line: 259,
          column: 28
        },
        end: {
          line: 259,
          column: 66
        }
      },
      "66": {
        start: {
          line: 260,
          column: 8
        },
        end: {
          line: 260,
          column: 79
        }
      },
      "67": {
        start: {
          line: 266,
          column: 27
        },
        end: {
          line: 287,
          column: 9
        }
      },
      "68": {
        start: {
          line: 289,
          column: 34
        },
        end: {
          line: 289,
          column: 129
        }
      },
      "69": {
        start: {
          line: 290,
          column: 8
        },
        end: {
          line: 290,
          column: 118
        }
      },
      "70": {
        start: {
          line: 296,
          column: 22
        },
        end: {
          line: 296,
          column: 56
        }
      },
      "71": {
        start: {
          line: 297,
          column: 8
        },
        end: {
          line: 299,
          column: 9
        }
      },
      "72": {
        start: {
          line: 298,
          column: 12
        },
        end: {
          line: 298,
          column: 82
        }
      },
      "73": {
        start: {
          line: 300,
          column: 28
        },
        end: {
          line: 300,
          column: 66
        }
      },
      "74": {
        start: {
          line: 301,
          column: 27
        },
        end: {
          line: 301,
          column: 57
        }
      },
      "75": {
        start: {
          line: 302,
          column: 8
        },
        end: {
          line: 307,
          column: 9
        }
      },
      "76": {
        start: {
          line: 303,
          column: 12
        },
        end: {
          line: 303,
          column: 37
        }
      },
      "77": {
        start: {
          line: 306,
          column: 12
        },
        end: {
          line: 306,
          column: 108
        }
      },
      "78": {
        start: {
          line: 308,
          column: 30
        },
        end: {
          line: 308,
          column: 64
        }
      },
      "79": {
        start: {
          line: 310,
          column: 29
        },
        end: {
          line: 310,
          column: 98
        }
      },
      "80": {
        start: {
          line: 311,
          column: 8
        },
        end: {
          line: 311,
          column: 77
        }
      },
      "81": {
        start: {
          line: 313,
          column: 8
        },
        end: {
          line: 313,
          column: 55
        }
      },
      "82": {
        start: {
          line: 314,
          column: 8
        },
        end: {
          line: 314,
          column: 40
        }
      },
      "83": {
        start: {
          line: 315,
          column: 8
        },
        end: {
          line: 319,
          column: 11
        }
      },
      "84": {
        start: {
          line: 320,
          column: 8
        },
        end: {
          line: 320,
          column: 65
        }
      },
      "85": {
        start: {
          line: 321,
          column: 8
        },
        end: {
          line: 321,
          column: 71
        }
      },
      "86": {
        start: {
          line: 328,
          column: 33
        },
        end: {
          line: 351,
          column: 9
        }
      },
      "87": {
        start: {
          line: 352,
          column: 8
        },
        end: {
          line: 362,
          column: 9
        }
      },
      "88": {
        start: {
          line: 353,
          column: 12
        },
        end: {
          line: 353,
          column: 102
        }
      },
      "89": {
        start: {
          line: 355,
          column: 27
        },
        end: {
          line: 355,
          column: 91
        }
      },
      "90": {
        start: {
          line: 356,
          column: 12
        },
        end: {
          line: 356,
          column: 84
        }
      },
      "91": {
        start: {
          line: 357,
          column: 12
        },
        end: {
          line: 357,
          column: 26
        }
      },
      "92": {
        start: {
          line: 360,
          column: 12
        },
        end: {
          line: 360,
          column: 158
        }
      },
      "93": {
        start: {
          line: 361,
          column: 12
        },
        end: {
          line: 361,
          column: 81
        }
      },
      "94": {
        start: {
          line: 369,
          column: 36
        },
        end: {
          line: 369,
          column: 141
        }
      },
      "95": {
        start: {
          line: 370,
          column: 8
        },
        end: {
          line: 370,
          column: 140
        }
      },
      "96": {
        start: {
          line: 372,
          column: 8
        },
        end: {
          line: 382,
          column: 9
        }
      },
      "97": {
        start: {
          line: 373,
          column: 31
        },
        end: {
          line: 373,
          column: 67
        }
      },
      "98": {
        start: {
          line: 374,
          column: 37
        },
        end: {
          line: 374,
          column: 71
        }
      },
      "99": {
        start: {
          line: 376,
          column: 12
        },
        end: {
          line: 378,
          column: 13
        }
      },
      "100": {
        start: {
          line: 377,
          column: 16
        },
        end: {
          line: 377,
          column: 107
        }
      },
      "101": {
        start: {
          line: 381,
          column: 12
        },
        end: {
          line: 381,
          column: 128
        }
      },
      "102": {
        start: {
          line: 384,
          column: 8
        },
        end: {
          line: 384,
          column: 123
        }
      },
      "103": {
        start: {
          line: 390,
          column: 8
        },
        end: {
          line: 392,
          column: 9
        }
      },
      "104": {
        start: {
          line: 391,
          column: 12
        },
        end: {
          line: 391,
          column: 26
        }
      },
      "105": {
        start: {
          line: 394,
          column: 8
        },
        end: {
          line: 415,
          column: 9
        }
      },
      "106": {
        start: {
          line: 395,
          column: 26
        },
        end: {
          line: 395,
          column: 63
        }
      },
      "107": {
        start: {
          line: 396,
          column: 33
        },
        end: {
          line: 396,
          column: 58
        }
      },
      "108": {
        start: {
          line: 397,
          column: 26
        },
        end: {
          line: 397,
          column: 74
        }
      },
      "109": {
        start: {
          line: 398,
          column: 12
        },
        end: {
          line: 414,
          column: 13
        }
      },
      "110": {
        start: {
          line: 399,
          column: 16
        },
        end: {
          line: 413,
          column: 50
        }
      },
      "111": {
        start: {
          line: 404,
          column: 20
        },
        end: {
          line: 406,
          column: 21
        }
      },
      "112": {
        start: {
          line: 405,
          column: 24
        },
        end: {
          line: 405,
          column: 81
        }
      },
      "113": {
        start: {
          line: 407,
          column: 20
        },
        end: {
          line: 407,
          column: 91
        }
      },
      "114": {
        start: {
          line: 417,
          column: 8
        },
        end: {
          line: 425,
          column: 9
        }
      },
      "115": {
        start: {
          line: 418,
          column: 12
        },
        end: {
          line: 424,
          column: 50
        }
      },
      "116": {
        start: {
          line: 426,
          column: 8
        },
        end: {
          line: 432,
          column: 50
        }
      },
      "117": {
        start: {
          line: 439,
          column: 22
        },
        end: {
          line: 450,
          column: 9
        }
      },
      "118": {
        start: {
          line: 451,
          column: 8
        },
        end: {
          line: 464,
          column: 2
        }
      },
      "119": {
        start: {
          line: 470,
          column: 22
        },
        end: {
          line: 470,
          column: 56
        }
      },
      "120": {
        start: {
          line: 471,
          column: 8
        },
        end: {
          line: 473,
          column: 9
        }
      },
      "121": {
        start: {
          line: 472,
          column: 12
        },
        end: {
          line: 472,
          column: 82
        }
      },
      "122": {
        start: {
          line: 474,
          column: 28
        },
        end: {
          line: 474,
          column: 66
        }
      },
      "123": {
        start: {
          line: 475,
          column: 26
        },
        end: {
          line: 475,
          column: 55
        }
      },
      "124": {
        start: {
          line: 477,
          column: 29
        },
        end: {
          line: 477,
          column: 62
        }
      },
      "125": {
        start: {
          line: 478,
          column: 26
        },
        end: {
          line: 478,
          column: 119
        }
      },
      "126": {
        start: {
          line: 478,
          column: 66
        },
        end: {
          line: 478,
          column: 118
        }
      },
      "127": {
        start: {
          line: 479,
          column: 8
        },
        end: {
          line: 481,
          column: 9
        }
      },
      "128": {
        start: {
          line: 480,
          column: 12
        },
        end: {
          line: 480,
          column: 128
        }
      },
      "129": {
        start: {
          line: 482,
          column: 32
        },
        end: {
          line: 482,
          column: 110
        }
      },
      "130": {
        start: {
          line: 484,
          column: 8
        },
        end: {
          line: 489,
          column: 9
        }
      },
      "131": {
        start: {
          line: 485,
          column: 12
        },
        end: {
          line: 485,
          column: 88
        }
      },
      "132": {
        start: {
          line: 488,
          column: 12
        },
        end: {
          line: 488,
          column: 81
        }
      },
      "133": {
        start: {
          line: 491,
          column: 36
        },
        end: {
          line: 491,
          column: 128
        }
      },
      "134": {
        start: {
          line: 492,
          column: 8
        },
        end: {
          line: 492,
          column: 64
        }
      },
      "135": {
        start: {
          line: 494,
          column: 8
        },
        end: {
          line: 494,
          column: 46
        }
      },
      "136": {
        start: {
          line: 495,
          column: 8
        },
        end: {
          line: 495,
          column: 40
        }
      },
      "137": {
        start: {
          line: 496,
          column: 8
        },
        end: {
          line: 496,
          column: 40
        }
      },
      "138": {
        start: {
          line: 497,
          column: 8
        },
        end: {
          line: 497,
          column: 96
        }
      },
      "139": {
        start: {
          line: 498,
          column: 8
        },
        end: {
          line: 498,
          column: 97
        }
      },
      "140": {
        start: {
          line: 505,
          column: 25
        },
        end: {
          line: 525,
          column: 9
        }
      },
      "141": {
        start: {
          line: 527,
          column: 27
        },
        end: {
          line: 527,
          column: 78
        }
      },
      "142": {
        start: {
          line: 528,
          column: 32
        },
        end: {
          line: 528,
          column: 85
        }
      },
      "143": {
        start: {
          line: 529,
          column: 8
        },
        end: {
          line: 531,
          column: 9
        }
      },
      "144": {
        start: {
          line: 530,
          column: 12
        },
        end: {
          line: 530,
          column: 124
        }
      },
      "145": {
        start: {
          line: 532,
          column: 8
        },
        end: {
          line: 532,
          column: 97
        }
      },
      "146": {
        start: {
          line: 534,
          column: 8
        },
        end: {
          line: 534,
          column: 77
        }
      },
      "147": {
        start: {
          line: 540,
          column: 33
        },
        end: {
          line: 540,
          column: 90
        }
      },
      "148": {
        start: {
          line: 541,
          column: 27
        },
        end: {
          line: 541,
          column: 78
        }
      },
      "149": {
        start: {
          line: 542,
          column: 36
        },
        end: {
          line: 542,
          column: 76
        }
      },
      "150": {
        start: {
          line: 543,
          column: 30
        },
        end: {
          line: 543,
          column: 64
        }
      },
      "151": {
        start: {
          line: 545,
          column: 35
        },
        end: {
          line: 563,
          column: 9
        }
      },
      "152": {
        start: {
          line: 565,
          column: 38
        },
        end: {
          line: 565,
          column: 136
        }
      },
      "153": {
        start: {
          line: 566,
          column: 8
        },
        end: {
          line: 566,
          column: 131
        }
      },
      "154": {
        start: {
          line: 572,
          column: 22
        },
        end: {
          line: 572,
          column: 56
        }
      },
      "155": {
        start: {
          line: 573,
          column: 8
        },
        end: {
          line: 575,
          column: 9
        }
      },
      "156": {
        start: {
          line: 574,
          column: 12
        },
        end: {
          line: 574,
          column: 82
        }
      },
      "157": {
        start: {
          line: 576,
          column: 29
        },
        end: {
          line: 576,
          column: 47
        }
      },
      "158": {
        start: {
          line: 578,
          column: 33
        },
        end: {
          line: 583,
          column: 9
        }
      },
      "159": {
        start: {
          line: 584,
          column: 26
        },
        end: {
          line: 584,
          column: 56
        }
      },
      "160": {
        start: {
          line: 585,
          column: 8
        },
        end: {
          line: 587,
          column: 9
        }
      },
      "161": {
        start: {
          line: 586,
          column: 12
        },
        end: {
          line: 586,
          column: 82
        }
      },
      "162": {
        start: {
          line: 589,
          column: 8
        },
        end: {
          line: 589,
          column: 39
        }
      },
      "163": {
        start: {
          line: 590,
          column: 8
        },
        end: {
          line: 590,
          column: 40
        }
      },
      "164": {
        start: {
          line: 591,
          column: 8
        },
        end: {
          line: 595,
          column: 11
        }
      },
      "165": {
        start: {
          line: 596,
          column: 8
        },
        end: {
          line: 596,
          column: 108
        }
      },
      "166": {
        start: {
          line: 597,
          column: 8
        },
        end: {
          line: 597,
          column: 115
        }
      },
      "167": {
        start: {
          line: 603,
          column: 8
        },
        end: {
          line: 603,
          column: 50
        }
      },
      "168": {
        start: {
          line: 609,
          column: 8
        },
        end: {
          line: 609,
          column: 65
        }
      },
      "169": {
        start: {
          line: 610,
          column: 29
        },
        end: {
          line: 610,
          column: 73
        }
      },
      "170": {
        start: {
          line: 611,
          column: 32
        },
        end: {
          line: 618,
          column: 1
        }
      },
      "171": {
        start: {
          line: 619,
          column: 8
        },
        end: {
          line: 619,
          column: 63
        }
      },
      "172": {
        start: {
          line: 620,
          column: 8
        },
        end: {
          line: 620,
          column: 91
        }
      },
      "173": {
        start: {
          line: 629,
          column: 31
        },
        end: {
          line: 629,
          column: 33
        }
      },
      "174": {
        start: {
          line: 630,
          column: 30
        },
        end: {
          line: 630,
          column: 32
        }
      },
      "175": {
        start: {
          line: 631,
          column: 8
        },
        end: {
          line: 667,
          column: 9
        }
      },
      "176": {
        start: {
          line: 633,
          column: 33
        },
        end: {
          line: 633,
          column: 95
        }
      },
      "177": {
        start: {
          line: 634,
          column: 12
        },
        end: {
          line: 634,
          column: 49
        }
      },
      "178": {
        start: {
          line: 636,
          column: 27
        },
        end: {
          line: 636,
          column: 66
        }
      },
      "179": {
        start: {
          line: 637,
          column: 12
        },
        end: {
          line: 654,
          column: 13
        }
      },
      "180": {
        start: {
          line: 638,
          column: 37
        },
        end: {
          line: 638,
          column: 64
        }
      },
      "181": {
        start: {
          line: 639,
          column: 16
        },
        end: {
          line: 653,
          column: 17
        }
      },
      "182": {
        start: {
          line: 640,
          column: 20
        },
        end: {
          line: 652,
          column: 21
        }
      },
      "183": {
        start: {
          line: 641,
          column: 45
        },
        end: {
          line: 641,
          column: 129
        }
      },
      "184": {
        start: {
          line: 642,
          column: 45
        },
        end: {
          line: 642,
          column: 77
        }
      },
      "185": {
        start: {
          line: 643,
          column: 40
        },
        end: {
          line: 643,
          column: 103
        }
      },
      "186": {
        start: {
          line: 644,
          column: 24
        },
        end: {
          line: 644,
          column: 68
        }
      },
      "187": {
        start: {
          line: 646,
          column: 24
        },
        end: {
          line: 646,
          column: 87
        }
      },
      "188": {
        start: {
          line: 647,
          column: 24
        },
        end: {
          line: 647,
          column: 52
        }
      },
      "189": {
        start: {
          line: 648,
          column: 24
        },
        end: {
          line: 648,
          column: 53
        }
      },
      "190": {
        start: {
          line: 651,
          column: 24
        },
        end: {
          line: 651,
          column: 182
        }
      },
      "191": {
        start: {
          line: 656,
          column: 12
        },
        end: {
          line: 656,
          column: 63
        }
      },
      "192": {
        start: {
          line: 658,
          column: 34
        },
        end: {
          line: 658,
          column: 64
        }
      },
      "193": {
        start: {
          line: 659,
          column: 12
        },
        end: {
          line: 659,
          column: 47
        }
      },
      "194": {
        start: {
          line: 661,
          column: 12
        },
        end: {
          line: 661,
          column: 57
        }
      },
      "195": {
        start: {
          line: 662,
          column: 12
        },
        end: {
          line: 662,
          column: 133
        }
      },
      "196": {
        start: {
          line: 666,
          column: 12
        },
        end: {
          line: 666,
          column: 74
        }
      },
      "197": {
        start: {
          line: 674,
          column: 29
        },
        end: {
          line: 674,
          column: 61
        }
      },
      "198": {
        start: {
          line: 675,
          column: 8
        },
        end: {
          line: 682,
          column: 10
        }
      },
      "199": {
        start: {
          line: 688,
          column: 25
        },
        end: {
          line: 691,
          column: 9
        }
      },
      "200": {
        start: {
          line: 692,
          column: 8
        },
        end: {
          line: 692,
          column: 48
        }
      },
      "201": {
        start: {
          line: 698,
          column: 30
        },
        end: {
          line: 716,
          column: 9
        }
      },
      "202": {
        start: {
          line: 717,
          column: 8
        },
        end: {
          line: 717,
          column: 55
        }
      },
      "203": {
        start: {
          line: 723,
          column: 28
        },
        end: {
          line: 741,
          column: 9
        }
      },
      "204": {
        start: {
          line: 742,
          column: 8
        },
        end: {
          line: 742,
          column: 44
        }
      },
      "205": {
        start: {
          line: 750,
          column: 32
        },
        end: {
          line: 750,
          column: 94
        }
      },
      "206": {
        start: {
          line: 751,
          column: 8
        },
        end: {
          line: 757,
          column: 9
        }
      },
      "207": {
        start: {
          line: 753,
          column: 12
        },
        end: {
          line: 756,
          column: 15
        }
      },
      "208": {
        start: {
          line: 754,
          column: 36
        },
        end: {
          line: 754,
          column: 63
        }
      },
      "209": {
        start: {
          line: 755,
          column: 16
        },
        end: {
          line: 755,
          column: 54
        }
      },
      "210": {
        start: {
          line: 759,
          column: 8
        },
        end: {
          line: 759,
          column: 87
        }
      },
      "211": {
        start: {
          line: 766,
          column: 31
        },
        end: {
          line: 773,
          column: 9
        }
      },
      "212": {
        start: {
          line: 775,
          column: 33
        },
        end: {
          line: 790,
          column: 9
        }
      },
      "213": {
        start: {
          line: 792,
          column: 25
        },
        end: {
          line: 792,
          column: 55
        }
      },
      "214": {
        start: {
          line: 794,
          column: 8
        },
        end: {
          line: 801,
          column: 9
        }
      },
      "215": {
        start: {
          line: 795,
          column: 28
        },
        end: {
          line: 795,
          column: 37
        }
      },
      "216": {
        start: {
          line: 796,
          column: 12
        },
        end: {
          line: 799,
          column: 13
        }
      },
      "217": {
        start: {
          line: 797,
          column: 38
        },
        end: {
          line: 797,
          column: 72
        }
      },
      "218": {
        start: {
          line: 798,
          column: 16
        },
        end: {
          line: 798,
          column: 65
        }
      },
      "219": {
        start: {
          line: 798,
          column: 46
        },
        end: {
          line: 798,
          column: 63
        }
      },
      "220": {
        start: {
          line: 800,
          column: 12
        },
        end: {
          line: 800,
          column: 45
        }
      },
      "221": {
        start: {
          line: 803,
          column: 8
        },
        end: {
          line: 805,
          column: 9
        }
      },
      "222": {
        start: {
          line: 804,
          column: 12
        },
        end: {
          line: 804,
          column: 50
        }
      },
      "223": {
        start: {
          line: 807,
          column: 8
        },
        end: {
          line: 807,
          column: 46
        }
      },
      "224": {
        start: {
          line: 813,
          column: 31
        },
        end: {
          line: 813,
          column: 33
        }
      },
      "225": {
        start: {
          line: 814,
          column: 8
        },
        end: {
          line: 853,
          column: 9
        }
      },
      "226": {
        start: {
          line: 816,
          column: 31
        },
        end: {
          line: 816,
          column: 35
        }
      },
      "227": {
        start: {
          line: 817,
          column: 12
        },
        end: {
          line: 835,
          column: 13
        }
      },
      "228": {
        start: {
          line: 818,
          column: 45
        },
        end: {
          line: 818,
          column: 81
        }
      },
      "229": {
        start: {
          line: 819,
          column: 16
        },
        end: {
          line: 821,
          column: 17
        }
      },
      "230": {
        start: {
          line: 820,
          column: 20
        },
        end: {
          line: 820,
          column: 29
        }
      },
      "231": {
        start: {
          line: 822,
          column: 16
        },
        end: {
          line: 834,
          column: 17
        }
      },
      "232": {
        start: {
          line: 823,
          column: 20
        },
        end: {
          line: 823,
          column: 65
        }
      },
      "233": {
        start: {
          line: 827,
          column: 41
        },
        end: {
          line: 827,
          column: 50
        }
      },
      "234": {
        start: {
          line: 828,
          column: 20
        },
        end: {
          line: 832,
          column: 23
        }
      },
      "235": {
        start: {
          line: 829,
          column: 24
        },
        end: {
          line: 831,
          column: 25
        }
      },
      "236": {
        start: {
          line: 830,
          column: 28
        },
        end: {
          line: 830,
          column: 49
        }
      },
      "237": {
        start: {
          line: 833,
          column: 20
        },
        end: {
          line: 833,
          column: 48
        }
      },
      "238": {
        start: {
          line: 837,
          column: 12
        },
        end: {
          line: 846,
          column: 13
        }
      },
      "239": {
        start: {
          line: 838,
          column: 16
        },
        end: {
          line: 845,
          column: 17
        }
      },
      "240": {
        start: {
          line: 839,
          column: 20
        },
        end: {
          line: 840,
          column: 30
        }
      },
      "241": {
        start: {
          line: 840,
          column: 24
        },
        end: {
          line: 840,
          column: 30
        }
      },
      "242": {
        start: {
          line: 841,
          column: 40
        },
        end: {
          line: 841,
          column: 67
        }
      },
      "243": {
        start: {
          line: 842,
          column: 20
        },
        end: {
          line: 844,
          column: 21
        }
      },
      "244": {
        start: {
          line: 843,
          column: 24
        },
        end: {
          line: 843,
          column: 53
        }
      },
      "245": {
        start: {
          line: 847,
          column: 12
        },
        end: {
          line: 849,
          column: 13
        }
      },
      "246": {
        start: {
          line: 848,
          column: 16
        },
        end: {
          line: 848,
          column: 138
        }
      },
      "247": {
        start: {
          line: 852,
          column: 12
        },
        end: {
          line: 852,
          column: 121
        }
      },
      "248": {
        start: {
          line: 854,
          column: 8
        },
        end: {
          line: 854,
          column: 30
        }
      },
      "249": {
        start: {
          line: 860,
          column: 8
        },
        end: {
          line: 883,
          column: 9
        }
      },
      "250": {
        start: {
          line: 861,
          column: 32
        },
        end: {
          line: 869,
          column: 13
        }
      },
      "251": {
        start: {
          line: 871,
          column: 12
        },
        end: {
          line: 871,
          column: 53
        }
      },
      "252": {
        start: {
          line: 873,
          column: 12
        },
        end: {
          line: 878,
          column: 13
        }
      },
      "253": {
        start: {
          line: 874,
          column: 16
        },
        end: {
          line: 876,
          column: 17
        }
      },
      "254": {
        start: {
          line: 875,
          column: 20
        },
        end: {
          line: 875,
          column: 68
        }
      },
      "255": {
        start: {
          line: 877,
          column: 16
        },
        end: {
          line: 877,
          column: 66
        }
      },
      "256": {
        start: {
          line: 879,
          column: 12
        },
        end: {
          line: 879,
          column: 127
        }
      },
      "257": {
        start: {
          line: 882,
          column: 12
        },
        end: {
          line: 882,
          column: 130
        }
      },
      "258": {
        start: {
          line: 889,
          column: 8
        },
        end: {
          line: 901,
          column: 9
        }
      },
      "259": {
        start: {
          line: 890,
          column: 12
        },
        end: {
          line: 900,
          column: 13
        }
      },
      "260": {
        start: {
          line: 891,
          column: 36
        },
        end: {
          line: 891,
          column: 63
        }
      },
      "261": {
        start: {
          line: 892,
          column: 16
        },
        end: {
          line: 896,
          column: 17
        }
      },
      "262": {
        start: {
          line: 893,
          column: 20
        },
        end: {
          line: 893,
          column: 48
        }
      },
      "263": {
        start: {
          line: 894,
          column: 20
        },
        end: {
          line: 894,
          column: 54
        }
      },
      "264": {
        start: {
          line: 895,
          column: 20
        },
        end: {
          line: 895,
          column: 45
        }
      },
      "265": {
        start: {
          line: 899,
          column: 16
        },
        end: {
          line: 899,
          column: 135
        }
      },
      "266": {
        start: {
          line: 907,
          column: 8
        },
        end: {
          line: 932,
          column: 9
        }
      },
      "267": {
        start: {
          line: 908,
          column: 12
        },
        end: {
          line: 931,
          column: 13
        }
      },
      "268": {
        start: {
          line: 909,
          column: 36
        },
        end: {
          line: 909,
          column: 63
        }
      },
      "269": {
        start: {
          line: 910,
          column: 16
        },
        end: {
          line: 927,
          column: 17
        }
      },
      "270": {
        start: {
          line: 912,
          column: 39
        },
        end: {
          line: 912,
          column: 70
        }
      },
      "271": {
        start: {
          line: 913,
          column: 45
        },
        end: {
          line: 913,
          column: 123
        }
      },
      "272": {
        start: {
          line: 914,
          column: 20
        },
        end: {
          line: 922,
          column: 21
        }
      },
      "273": {
        start: {
          line: 916,
          column: 24
        },
        end: {
          line: 916,
          column: 57
        }
      },
      "274": {
        start: {
          line: 917,
          column: 24
        },
        end: {
          line: 917,
          column: 119
        }
      },
      "275": {
        start: {
          line: 921,
          column: 24
        },
        end: {
          line: 921,
          column: 63
        }
      },
      "276": {
        start: {
          line: 926,
          column: 20
        },
        end: {
          line: 926,
          column: 63
        }
      },
      "277": {
        start: {
          line: 930,
          column: 16
        },
        end: {
          line: 930,
          column: 130
        }
      },
      "278": {
        start: {
          line: 938,
          column: 28
        },
        end: {
          line: 938,
          column: 30
        }
      },
      "279": {
        start: {
          line: 939,
          column: 32
        },
        end: {
          line: 939,
          column: 112
        }
      },
      "280": {
        start: {
          line: 939,
          column: 80
        },
        end: {
          line: 939,
          column: 104
        }
      },
      "281": {
        start: {
          line: 941,
          column: 29
        },
        end: {
          line: 941,
          column: 82
        }
      },
      "282": {
        start: {
          line: 942,
          column: 8
        },
        end: {
          line: 942,
          column: 93
        }
      },
      "283": {
        start: {
          line: 948,
          column: 8
        },
        end: {
          line: 970,
          column: 9
        }
      },
      "284": {
        start: {
          line: 949,
          column: 32
        },
        end: {
          line: 949,
          column: 59
        }
      },
      "285": {
        start: {
          line: 951,
          column: 12
        },
        end: {
          line: 961,
          column: 13
        }
      },
      "286": {
        start: {
          line: 952,
          column: 16
        },
        end: {
          line: 960,
          column: 17
        }
      },
      "287": {
        start: {
          line: 953,
          column: 42
        },
        end: {
          line: 953,
          column: 78
        }
      },
      "288": {
        start: {
          line: 954,
          column: 20
        },
        end: {
          line: 959,
          column: 21
        }
      },
      "289": {
        start: {
          line: 955,
          column: 24
        },
        end: {
          line: 955,
          column: 54
        }
      },
      "290": {
        start: {
          line: 956,
          column: 24
        },
        end: {
          line: 958,
          column: 25
        }
      },
      "291": {
        start: {
          line: 957,
          column: 28
        },
        end: {
          line: 957,
          column: 68
        }
      },
      "292": {
        start: {
          line: 963,
          column: 12
        },
        end: {
          line: 963,
          column: 43
        }
      },
      "293": {
        start: {
          line: 965,
          column: 12
        },
        end: {
          line: 965,
          column: 55
        }
      },
      "294": {
        start: {
          line: 966,
          column: 12
        },
        end: {
          line: 966,
          column: 83
        }
      },
      "295": {
        start: {
          line: 969,
          column: 12
        },
        end: {
          line: 969,
          column: 133
        }
      },
      "296": {
        start: {
          line: 977,
          column: 8
        },
        end: {
          line: 984,
          column: 9
        }
      },
      "297": {
        start: {
          line: 978,
          column: 12
        },
        end: {
          line: 983,
          column: 13
        }
      },
      "298": {
        start: {
          line: 979,
          column: 16
        },
        end: {
          line: 979,
          column: 55
        }
      },
      "299": {
        start: {
          line: 982,
          column: 16
        },
        end: {
          line: 982,
          column: 130
        }
      },
      "300": {
        start: {
          line: 990,
          column: 8
        },
        end: {
          line: 990,
          column: 88
        }
      },
      "301": {
        start: {
          line: 991,
          column: 28
        },
        end: {
          line: 991,
          column: 61
        }
      },
      "302": {
        start: {
          line: 993,
          column: 8
        },
        end: {
          line: 1000,
          column: 9
        }
      },
      "303": {
        start: {
          line: 994,
          column: 12
        },
        end: {
          line: 999,
          column: 13
        }
      },
      "304": {
        start: {
          line: 995,
          column: 16
        },
        end: {
          line: 995,
          column: 55
        }
      },
      "305": {
        start: {
          line: 998,
          column: 16
        },
        end: {
          line: 998,
          column: 153
        }
      },
      "306": {
        start: {
          line: 1002,
          column: 8
        },
        end: {
          line: 1002,
          column: 31
        }
      },
      "307": {
        start: {
          line: 1003,
          column: 8
        },
        end: {
          line: 1003,
          column: 37
        }
      },
      "308": {
        start: {
          line: 1004,
          column: 8
        },
        end: {
          line: 1004,
          column: 57
        }
      },
      "309": {
        start: {
          line: 1010,
          column: 23
        },
        end: {
          line: 1010,
          column: 58
        }
      },
      "310": {
        start: {
          line: 1011,
          column: 28
        },
        end: {
          line: 1011,
          column: 41
        }
      },
      "311": {
        start: {
          line: 1012,
          column: 8
        },
        end: {
          line: 1021,
          column: 9
        }
      },
      "312": {
        start: {
          line: 1013,
          column: 12
        },
        end: {
          line: 1020,
          column: 14
        }
      },
      "313": {
        start: {
          line: 1022,
          column: 32
        },
        end: {
          line: 1022,
          column: 83
        }
      },
      "314": {
        start: {
          line: 1022,
          column: 51
        },
        end: {
          line: 1022,
          column: 75
        }
      },
      "315": {
        start: {
          line: 1023,
          column: 27
        },
        end: {
          line: 1023,
          column: 73
        }
      },
      "316": {
        start: {
          line: 1023,
          column: 46
        },
        end: {
          line: 1023,
          column: 65
        }
      },
      "317": {
        start: {
          line: 1024,
          column: 29
        },
        end: {
          line: 1024,
          column: 91
        }
      },
      "318": {
        start: {
          line: 1024,
          column: 55
        },
        end: {
          line: 1024,
          column: 73
        }
      },
      "319": {
        start: {
          line: 1025,
          column: 36
        },
        end: {
          line: 1025,
          column: 61
        }
      },
      "320": {
        start: {
          line: 1027,
          column: 29
        },
        end: {
          line: 1027,
          column: 72
        }
      },
      "321": {
        start: {
          line: 1027,
          column: 48
        },
        end: {
          line: 1027,
          column: 64
        }
      },
      "322": {
        start: {
          line: 1028,
          column: 26
        },
        end: {
          line: 1028,
          column: 74
        }
      },
      "323": {
        start: {
          line: 1029,
          column: 8
        },
        end: {
          line: 1036,
          column: 10
        }
      },
      "324": {
        start: {
          line: 1042,
          column: 22
        },
        end: {
          line: 1042,
          column: 24
        }
      },
      "325": {
        start: {
          line: 1043,
          column: 30
        },
        end: {
          line: 1043,
          column: 71
        }
      },
      "326": {
        start: {
          line: 1044,
          column: 8
        },
        end: {
          line: 1051,
          column: 9
        }
      },
      "327": {
        start: {
          line: 1045,
          column: 12
        },
        end: {
          line: 1050,
          column: 13
        }
      },
      "328": {
        start: {
          line: 1046,
          column: 16
        },
        end: {
          line: 1046,
          column: 102
        }
      },
      "329": {
        start: {
          line: 1049,
          column: 16
        },
        end: {
          line: 1049,
          column: 132
        }
      },
      "330": {
        start: {
          line: 1052,
          column: 8
        },
        end: {
          line: 1052,
          column: 59
        }
      },
      "331": {
        start: {
          line: 1058,
          column: 8
        },
        end: {
          line: 1069,
          column: 9
        }
      },
      "332": {
        start: {
          line: 1059,
          column: 12
        },
        end: {
          line: 1068,
          column: 13
        }
      },
      "333": {
        start: {
          line: 1060,
          column: 16
        },
        end: {
          line: 1060,
          column: 51
        }
      },
      "334": {
        start: {
          line: 1061,
          column: 16
        },
        end: {
          line: 1061,
          column: 52
        }
      },
      "335": {
        start: {
          line: 1062,
          column: 16
        },
        end: {
          line: 1062,
          column: 81
        }
      },
      "336": {
        start: {
          line: 1064,
          column: 16
        },
        end: {
          line: 1064,
          column: 44
        }
      },
      "337": {
        start: {
          line: 1067,
          column: 16
        },
        end: {
          line: 1067,
          column: 80
        }
      },
      "338": {
        start: {
          line: 1076,
          column: 8
        },
        end: {
          line: 1084,
          column: 11
        }
      },
      "339": {
        start: {
          line: 1080,
          column: 16
        },
        end: {
          line: 1080,
          column: 73
        }
      },
      "340": {
        start: {
          line: 1081,
          column: 16
        },
        end: {
          line: 1081,
          column: 42
        }
      },
      "341": {
        start: {
          line: 1085,
          column: 8
        },
        end: {
          line: 1093,
          column: 11
        }
      },
      "342": {
        start: {
          line: 1089,
          column: 16
        },
        end: {
          line: 1089,
          column: 75
        }
      },
      "343": {
        start: {
          line: 1090,
          column: 16
        },
        end: {
          line: 1090,
          column: 42
        }
      },
      "344": {
        start: {
          line: 1094,
          column: 8
        },
        end: {
          line: 1094,
          column: 62
        }
      },
      "345": {
        start: {
          line: 1100,
          column: 8
        },
        end: {
          line: 1100,
          column: 84
        }
      },
      "346": {
        start: {
          line: 1101,
          column: 8
        },
        end: {
          line: 1101,
          column: 88
        }
      },
      "347": {
        start: {
          line: 1102,
          column: 8
        },
        end: {
          line: 1102,
          column: 92
        }
      },
      "348": {
        start: {
          line: 1108,
          column: 8
        },
        end: {
          line: 1108,
          column: 72
        }
      },
      "349": {
        start: {
          line: 1111,
          column: 8
        },
        end: {
          line: 1111,
          column: 74
        }
      },
      "350": {
        start: {
          line: 1114,
          column: 8
        },
        end: {
          line: 1114,
          column: 76
        }
      },
      "351": {
        start: {
          line: 1120,
          column: 8
        },
        end: {
          line: 1144,
          column: 11
        }
      },
      "352": {
        start: {
          line: 1121,
          column: 28
        },
        end: {
          line: 1123,
          column: 25
        }
      },
      "353": {
        start: {
          line: 1122,
          column: 16
        },
        end: {
          line: 1122,
          column: 61
        }
      },
      "354": {
        start: {
          line: 1124,
          column: 34
        },
        end: {
          line: 1143,
          column: 20
        }
      },
      "355": {
        start: {
          line: 1125,
          column: 16
        },
        end: {
          line: 1142,
          column: 17
        }
      },
      "356": {
        start: {
          line: 1126,
          column: 33
        },
        end: {
          line: 1126,
          column: 68
        }
      },
      "357": {
        start: {
          line: 1127,
          column: 20
        },
        end: {
          line: 1136,
          column: 21
        }
      },
      "358": {
        start: {
          line: 1128,
          column: 24
        },
        end: {
          line: 1128,
          column: 46
        }
      },
      "359": {
        start: {
          line: 1129,
          column: 24
        },
        end: {
          line: 1129,
          column: 53
        }
      },
      "360": {
        start: {
          line: 1130,
          column: 24
        },
        end: {
          line: 1130,
          column: 76
        }
      },
      "361": {
        start: {
          line: 1132,
          column: 25
        },
        end: {
          line: 1136,
          column: 21
        }
      },
      "362": {
        start: {
          line: 1133,
          column: 24
        },
        end: {
          line: 1133,
          column: 46
        }
      },
      "363": {
        start: {
          line: 1134,
          column: 24
        },
        end: {
          line: 1134,
          column: 53
        }
      },
      "364": {
        start: {
          line: 1135,
          column: 24
        },
        end: {
          line: 1135,
          column: 91
        }
      },
      "365": {
        start: {
          line: 1139,
          column: 20
        },
        end: {
          line: 1139,
          column: 42
        }
      },
      "366": {
        start: {
          line: 1140,
          column: 20
        },
        end: {
          line: 1140,
          column: 49
        }
      },
      "367": {
        start: {
          line: 1141,
          column: 20
        },
        end: {
          line: 1141,
          column: 34
        }
      },
      "368": {
        start: {
          line: 1150,
          column: 8
        },
        end: {
          line: 1182,
          column: 11
        }
      },
      "369": {
        start: {
          line: 1151,
          column: 28
        },
        end: {
          line: 1153,
          column: 25
        }
      },
      "370": {
        start: {
          line: 1152,
          column: 16
        },
        end: {
          line: 1152,
          column: 82
        }
      },
      "371": {
        start: {
          line: 1154,
          column: 34
        },
        end: {
          line: 1181,
          column: 20
        }
      },
      "372": {
        start: {
          line: 1155,
          column: 16
        },
        end: {
          line: 1180,
          column: 17
        }
      },
      "373": {
        start: {
          line: 1156,
          column: 35
        },
        end: {
          line: 1156,
          column: 91
        }
      },
      "374": {
        start: {
          line: 1157,
          column: 20
        },
        end: {
          line: 1174,
          column: 21
        }
      },
      "375": {
        start: {
          line: 1158,
          column: 24
        },
        end: {
          line: 1158,
          column: 46
        }
      },
      "376": {
        start: {
          line: 1159,
          column: 24
        },
        end: {
          line: 1159,
          column: 53
        }
      },
      "377": {
        start: {
          line: 1160,
          column: 24
        },
        end: {
          line: 1164,
          column: 27
        }
      },
      "378": {
        start: {
          line: 1166,
          column: 25
        },
        end: {
          line: 1174,
          column: 21
        }
      },
      "379": {
        start: {
          line: 1167,
          column: 24
        },
        end: {
          line: 1167,
          column: 46
        }
      },
      "380": {
        start: {
          line: 1168,
          column: 24
        },
        end: {
          line: 1168,
          column: 53
        }
      },
      "381": {
        start: {
          line: 1169,
          column: 24
        },
        end: {
          line: 1173,
          column: 27
        }
      },
      "382": {
        start: {
          line: 1177,
          column: 20
        },
        end: {
          line: 1177,
          column: 42
        }
      },
      "383": {
        start: {
          line: 1178,
          column: 20
        },
        end: {
          line: 1178,
          column: 49
        }
      },
      "384": {
        start: {
          line: 1179,
          column: 20
        },
        end: {
          line: 1179,
          column: 34
        }
      },
      "385": {
        start: {
          line: 1188,
          column: 8
        },
        end: {
          line: 1188,
          column: 63
        }
      },
      "386": {
        start: {
          line: 1190,
          column: 8
        },
        end: {
          line: 1193,
          column: 9
        }
      },
      "387": {
        start: {
          line: 1191,
          column: 12
        },
        end: {
          line: 1191,
          column: 34
        }
      },
      "388": {
        start: {
          line: 1192,
          column: 12
        },
        end: {
          line: 1192,
          column: 73
        }
      },
      "389": {
        start: {
          line: 1195,
          column: 8
        },
        end: {
          line: 1204,
          column: 9
        }
      },
      "390": {
        start: {
          line: 1197,
          column: 12
        },
        end: {
          line: 1203,
          column: 13
        }
      },
      "391": {
        start: {
          line: 1198,
          column: 16
        },
        end: {
          line: 1198,
          column: 70
        }
      },
      "392": {
        start: {
          line: 1199,
          column: 16
        },
        end: {
          line: 1199,
          column: 72
        }
      },
      "393": {
        start: {
          line: 1202,
          column: 16
        },
        end: {
          line: 1202,
          column: 79
        }
      },
      "394": {
        start: {
          line: 1206,
          column: 8
        },
        end: {
          line: 1209,
          column: 9
        }
      },
      "395": {
        start: {
          line: 1207,
          column: 12
        },
        end: {
          line: 1207,
          column: 43
        }
      },
      "396": {
        start: {
          line: 1208,
          column: 12
        },
        end: {
          line: 1208,
          column: 60
        }
      },
      "397": {
        start: {
          line: 1211,
          column: 8
        },
        end: {
          line: 1211,
          column: 39
        }
      },
      "398": {
        start: {
          line: 1213,
          column: 8
        },
        end: {
          line: 1213,
          column: 67
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 45,
            column: 4
          },
          end: {
            line: 45,
            column: 5
          }
        },
        loc: {
          start: {
            line: 45,
            column: 109
          },
          end: {
            line: 62,
            column: 5
          }
        },
        line: 45
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 66,
            column: 4
          },
          end: {
            line: 66,
            column: 5
          }
        },
        loc: {
          start: {
            line: 66,
            column: 31
          },
          end: {
            line: 98,
            column: 5
          }
        },
        line: 66
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 102,
            column: 4
          },
          end: {
            line: 102,
            column: 5
          }
        },
        loc: {
          start: {
            line: 102,
            column: 50
          },
          end: {
            line: 169,
            column: 5
          }
        },
        line: 102
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 173,
            column: 4
          },
          end: {
            line: 173,
            column: 5
          }
        },
        loc: {
          start: {
            line: 173,
            column: 38
          },
          end: {
            line: 204,
            column: 5
          }
        },
        line: 173
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 208,
            column: 4
          },
          end: {
            line: 208,
            column: 5
          }
        },
        loc: {
          start: {
            line: 208,
            column: 64
          },
          end: {
            line: 261,
            column: 5
          }
        },
        line: 208
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 265,
            column: 4
          },
          end: {
            line: 265,
            column: 5
          }
        },
        loc: {
          start: {
            line: 265,
            column: 68
          },
          end: {
            line: 291,
            column: 5
          }
        },
        line: 265
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 295,
            column: 4
          },
          end: {
            line: 295,
            column: 5
          }
        },
        loc: {
          start: {
            line: 295,
            column: 37
          },
          end: {
            line: 322,
            column: 5
          }
        },
        line: 295
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 326,
            column: 4
          },
          end: {
            line: 326,
            column: 5
          }
        },
        loc: {
          start: {
            line: 326,
            column: 69
          },
          end: {
            line: 363,
            column: 5
          }
        },
        line: 326
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 367,
            column: 4
          },
          end: {
            line: 367,
            column: 5
          }
        },
        loc: {
          start: {
            line: 367,
            column: 64
          },
          end: {
            line: 385,
            column: 5
          }
        },
        line: 367
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 389,
            column: 4
          },
          end: {
            line: 389,
            column: 5
          }
        },
        loc: {
          start: {
            line: 389,
            column: 50
          },
          end: {
            line: 433,
            column: 5
          }
        },
        line: 389
      },
      "10": {
        name: "(anonymous_10)",
        decl: {
          start: {
            line: 403,
            column: 12
          },
          end: {
            line: 403,
            column: 13
          }
        },
        loc: {
          start: {
            line: 403,
            column: 29
          },
          end: {
            line: 408,
            column: 17
          }
        },
        line: 403
      },
      "11": {
        name: "(anonymous_11)",
        decl: {
          start: {
            line: 437,
            column: 4
          },
          end: {
            line: 437,
            column: 5
          }
        },
        loc: {
          start: {
            line: 437,
            column: 67
          },
          end: {
            line: 465,
            column: 5
          }
        },
        line: 437
      },
      "12": {
        name: "(anonymous_12)",
        decl: {
          start: {
            line: 469,
            column: 4
          },
          end: {
            line: 469,
            column: 5
          }
        },
        loc: {
          start: {
            line: 469,
            column: 45
          },
          end: {
            line: 499,
            column: 5
          }
        },
        line: 469
      },
      "13": {
        name: "(anonymous_13)",
        decl: {
          start: {
            line: 478,
            column: 58
          },
          end: {
            line: 478,
            column: 59
          }
        },
        loc: {
          start: {
            line: 478,
            column: 66
          },
          end: {
            line: 478,
            column: 118
          }
        },
        line: 478
      },
      "14": {
        name: "(anonymous_14)",
        decl: {
          start: {
            line: 503,
            column: 4
          },
          end: {
            line: 503,
            column: 5
          }
        },
        loc: {
          start: {
            line: 503,
            column: 75
          },
          end: {
            line: 535,
            column: 5
          }
        },
        line: 503
      },
      "15": {
        name: "(anonymous_15)",
        decl: {
          start: {
            line: 539,
            column: 4
          },
          end: {
            line: 539,
            column: 5
          }
        },
        loc: {
          start: {
            line: 539,
            column: 68
          },
          end: {
            line: 567,
            column: 5
          }
        },
        line: 539
      },
      "16": {
        name: "(anonymous_16)",
        decl: {
          start: {
            line: 571,
            column: 4
          },
          end: {
            line: 571,
            column: 5
          }
        },
        loc: {
          start: {
            line: 571,
            column: 36
          },
          end: {
            line: 598,
            column: 5
          }
        },
        line: 571
      },
      "17": {
        name: "(anonymous_17)",
        decl: {
          start: {
            line: 602,
            column: 4
          },
          end: {
            line: 602,
            column: 5
          }
        },
        loc: {
          start: {
            line: 602,
            column: 34
          },
          end: {
            line: 604,
            column: 5
          }
        },
        line: 602
      },
      "18": {
        name: "(anonymous_18)",
        decl: {
          start: {
            line: 608,
            column: 4
          },
          end: {
            line: 608,
            column: 5
          }
        },
        loc: {
          start: {
            line: 608,
            column: 50
          },
          end: {
            line: 621,
            column: 5
          }
        },
        line: 608
      },
      "19": {
        name: "(anonymous_19)",
        decl: {
          start: {
            line: 628,
            column: 4
          },
          end: {
            line: 628,
            column: 5
          }
        },
        loc: {
          start: {
            line: 628,
            column: 70
          },
          end: {
            line: 668,
            column: 5
          }
        },
        line: 628
      },
      "20": {
        name: "(anonymous_20)",
        decl: {
          start: {
            line: 672,
            column: 4
          },
          end: {
            line: 672,
            column: 5
          }
        },
        loc: {
          start: {
            line: 672,
            column: 69
          },
          end: {
            line: 683,
            column: 5
          }
        },
        line: 672
      },
      "21": {
        name: "(anonymous_21)",
        decl: {
          start: {
            line: 687,
            column: 4
          },
          end: {
            line: 687,
            column: 5
          }
        },
        loc: {
          start: {
            line: 687,
            column: 32
          },
          end: {
            line: 693,
            column: 5
          }
        },
        line: 687
      },
      "22": {
        name: "(anonymous_22)",
        decl: {
          start: {
            line: 697,
            column: 4
          },
          end: {
            line: 697,
            column: 5
          }
        },
        loc: {
          start: {
            line: 697,
            column: 50
          },
          end: {
            line: 718,
            column: 5
          }
        },
        line: 697
      },
      "23": {
        name: "(anonymous_23)",
        decl: {
          start: {
            line: 722,
            column: 4
          },
          end: {
            line: 722,
            column: 5
          }
        },
        loc: {
          start: {
            line: 722,
            column: 46
          },
          end: {
            line: 743,
            column: 5
          }
        },
        line: 722
      },
      "24": {
        name: "(anonymous_24)",
        decl: {
          start: {
            line: 748,
            column: 4
          },
          end: {
            line: 748,
            column: 5
          }
        },
        loc: {
          start: {
            line: 748,
            column: 78
          },
          end: {
            line: 760,
            column: 5
          }
        },
        line: 748
      },
      "25": {
        name: "(anonymous_25)",
        decl: {
          start: {
            line: 753,
            column: 39
          },
          end: {
            line: 753,
            column: 40
          }
        },
        loc: {
          start: {
            line: 753,
            column: 50
          },
          end: {
            line: 756,
            column: 13
          }
        },
        line: 753
      },
      "26": {
        name: "(anonymous_26)",
        decl: {
          start: {
            line: 764,
            column: 4
          },
          end: {
            line: 764,
            column: 5
          }
        },
        loc: {
          start: {
            line: 764,
            column: 71
          },
          end: {
            line: 808,
            column: 5
          }
        },
        line: 764
      },
      "27": {
        name: "(anonymous_27)",
        decl: {
          start: {
            line: 798,
            column: 38
          },
          end: {
            line: 798,
            column: 39
          }
        },
        loc: {
          start: {
            line: 798,
            column: 46
          },
          end: {
            line: 798,
            column: 63
          }
        },
        line: 798
      },
      "28": {
        name: "(anonymous_28)",
        decl: {
          start: {
            line: 812,
            column: 4
          },
          end: {
            line: 812,
            column: 5
          }
        },
        loc: {
          start: {
            line: 812,
            column: 62
          },
          end: {
            line: 855,
            column: 5
          }
        },
        line: 812
      },
      "29": {
        name: "(anonymous_29)",
        decl: {
          start: {
            line: 828,
            column: 41
          },
          end: {
            line: 828,
            column: 42
          }
        },
        loc: {
          start: {
            line: 828,
            column: 47
          },
          end: {
            line: 832,
            column: 21
          }
        },
        line: 828
      },
      "30": {
        name: "(anonymous_30)",
        decl: {
          start: {
            line: 859,
            column: 4
          },
          end: {
            line: 859,
            column: 5
          }
        },
        loc: {
          start: {
            line: 859,
            column: 59
          },
          end: {
            line: 884,
            column: 5
          }
        },
        line: 859
      },
      "31": {
        name: "(anonymous_31)",
        decl: {
          start: {
            line: 888,
            column: 4
          },
          end: {
            line: 888,
            column: 5
          }
        },
        loc: {
          start: {
            line: 888,
            column: 45
          },
          end: {
            line: 902,
            column: 5
          }
        },
        line: 888
      },
      "32": {
        name: "(anonymous_32)",
        decl: {
          start: {
            line: 906,
            column: 4
          },
          end: {
            line: 906,
            column: 5
          }
        },
        loc: {
          start: {
            line: 906,
            column: 56
          },
          end: {
            line: 933,
            column: 5
          }
        },
        line: 906
      },
      "33": {
        name: "(anonymous_33)",
        decl: {
          start: {
            line: 937,
            column: 4
          },
          end: {
            line: 937,
            column: 5
          }
        },
        loc: {
          start: {
            line: 937,
            column: 33
          },
          end: {
            line: 943,
            column: 5
          }
        },
        line: 937
      },
      "34": {
        name: "(anonymous_34)",
        decl: {
          start: {
            line: 939,
            column: 75
          },
          end: {
            line: 939,
            column: 76
          }
        },
        loc: {
          start: {
            line: 939,
            column: 80
          },
          end: {
            line: 939,
            column: 104
          }
        },
        line: 939
      },
      "35": {
        name: "(anonymous_35)",
        decl: {
          start: {
            line: 947,
            column: 4
          },
          end: {
            line: 947,
            column: 5
          }
        },
        loc: {
          start: {
            line: 947,
            column: 38
          },
          end: {
            line: 971,
            column: 5
          }
        },
        line: 947
      },
      "36": {
        name: "(anonymous_36)",
        decl: {
          start: {
            line: 975,
            column: 4
          },
          end: {
            line: 975,
            column: 5
          }
        },
        loc: {
          start: {
            line: 975,
            column: 41
          },
          end: {
            line: 985,
            column: 5
          }
        },
        line: 975
      },
      "37": {
        name: "(anonymous_37)",
        decl: {
          start: {
            line: 989,
            column: 4
          },
          end: {
            line: 989,
            column: 5
          }
        },
        loc: {
          start: {
            line: 989,
            column: 30
          },
          end: {
            line: 1005,
            column: 5
          }
        },
        line: 989
      },
      "38": {
        name: "(anonymous_38)",
        decl: {
          start: {
            line: 1009,
            column: 4
          },
          end: {
            line: 1009,
            column: 5
          }
        },
        loc: {
          start: {
            line: 1009,
            column: 24
          },
          end: {
            line: 1037,
            column: 5
          }
        },
        line: 1009
      },
      "39": {
        name: "(anonymous_39)",
        decl: {
          start: {
            line: 1022,
            column: 46
          },
          end: {
            line: 1022,
            column: 47
          }
        },
        loc: {
          start: {
            line: 1022,
            column: 51
          },
          end: {
            line: 1022,
            column: 75
          }
        },
        line: 1022
      },
      "40": {
        name: "(anonymous_40)",
        decl: {
          start: {
            line: 1023,
            column: 41
          },
          end: {
            line: 1023,
            column: 42
          }
        },
        loc: {
          start: {
            line: 1023,
            column: 46
          },
          end: {
            line: 1023,
            column: 65
          }
        },
        line: 1023
      },
      "41": {
        name: "(anonymous_41)",
        decl: {
          start: {
            line: 1024,
            column: 43
          },
          end: {
            line: 1024,
            column: 44
          }
        },
        loc: {
          start: {
            line: 1024,
            column: 55
          },
          end: {
            line: 1024,
            column: 73
          }
        },
        line: 1024
      },
      "42": {
        name: "(anonymous_42)",
        decl: {
          start: {
            line: 1027,
            column: 43
          },
          end: {
            line: 1027,
            column: 44
          }
        },
        loc: {
          start: {
            line: 1027,
            column: 48
          },
          end: {
            line: 1027,
            column: 64
          }
        },
        line: 1027
      },
      "43": {
        name: "(anonymous_43)",
        decl: {
          start: {
            line: 1041,
            column: 4
          },
          end: {
            line: 1041,
            column: 5
          }
        },
        loc: {
          start: {
            line: 1041,
            column: 50
          },
          end: {
            line: 1053,
            column: 5
          }
        },
        line: 1041
      },
      "44": {
        name: "(anonymous_44)",
        decl: {
          start: {
            line: 1057,
            column: 4
          },
          end: {
            line: 1057,
            column: 5
          }
        },
        loc: {
          start: {
            line: 1057,
            column: 35
          },
          end: {
            line: 1070,
            column: 5
          }
        },
        line: 1057
      },
      "45": {
        name: "(anonymous_45)",
        decl: {
          start: {
            line: 1074,
            column: 4
          },
          end: {
            line: 1074,
            column: 5
          }
        },
        loc: {
          start: {
            line: 1074,
            column: 27
          },
          end: {
            line: 1095,
            column: 5
          }
        },
        line: 1074
      },
      "46": {
        name: "(anonymous_46)",
        decl: {
          start: {
            line: 1079,
            column: 21
          },
          end: {
            line: 1079,
            column: 22
          }
        },
        loc: {
          start: {
            line: 1079,
            column: 49
          },
          end: {
            line: 1082,
            column: 13
          }
        },
        line: 1079
      },
      "47": {
        name: "(anonymous_47)",
        decl: {
          start: {
            line: 1088,
            column: 21
          },
          end: {
            line: 1088,
            column: 22
          }
        },
        loc: {
          start: {
            line: 1088,
            column: 49
          },
          end: {
            line: 1091,
            column: 13
          }
        },
        line: 1088
      },
      "48": {
        name: "(anonymous_48)",
        decl: {
          start: {
            line: 1099,
            column: 4
          },
          end: {
            line: 1099,
            column: 5
          }
        },
        loc: {
          start: {
            line: 1099,
            column: 25
          },
          end: {
            line: 1103,
            column: 5
          }
        },
        line: 1099
      },
      "49": {
        name: "(anonymous_49)",
        decl: {
          start: {
            line: 1107,
            column: 4
          },
          end: {
            line: 1107,
            column: 5
          }
        },
        loc: {
          start: {
            line: 1107,
            column: 34
          },
          end: {
            line: 1109,
            column: 5
          }
        },
        line: 1107
      },
      "50": {
        name: "(anonymous_50)",
        decl: {
          start: {
            line: 1110,
            column: 4
          },
          end: {
            line: 1110,
            column: 5
          }
        },
        loc: {
          start: {
            line: 1110,
            column: 36
          },
          end: {
            line: 1112,
            column: 5
          }
        },
        line: 1110
      },
      "51": {
        name: "(anonymous_51)",
        decl: {
          start: {
            line: 1113,
            column: 4
          },
          end: {
            line: 1113,
            column: 5
          }
        },
        loc: {
          start: {
            line: 1113,
            column: 38
          },
          end: {
            line: 1115,
            column: 5
          }
        },
        line: 1113
      },
      "52": {
        name: "(anonymous_52)",
        decl: {
          start: {
            line: 1119,
            column: 4
          },
          end: {
            line: 1119,
            column: 5
          }
        },
        loc: {
          start: {
            line: 1119,
            column: 60
          },
          end: {
            line: 1145,
            column: 5
          }
        },
        line: 1119
      },
      "53": {
        name: "(anonymous_53)",
        decl: {
          start: {
            line: 1120,
            column: 27
          },
          end: {
            line: 1120,
            column: 28
          }
        },
        loc: {
          start: {
            line: 1120,
            column: 48
          },
          end: {
            line: 1144,
            column: 9
          }
        },
        line: 1120
      },
      "54": {
        name: "(anonymous_54)",
        decl: {
          start: {
            line: 1121,
            column: 39
          },
          end: {
            line: 1121,
            column: 40
          }
        },
        loc: {
          start: {
            line: 1121,
            column: 45
          },
          end: {
            line: 1123,
            column: 13
          }
        },
        line: 1121
      },
      "55": {
        name: "(anonymous_55)",
        decl: {
          start: {
            line: 1124,
            column: 46
          },
          end: {
            line: 1124,
            column: 47
          }
        },
        loc: {
          start: {
            line: 1124,
            column: 58
          },
          end: {
            line: 1143,
            column: 13
          }
        },
        line: 1124
      },
      "56": {
        name: "(anonymous_56)",
        decl: {
          start: {
            line: 1149,
            column: 4
          },
          end: {
            line: 1149,
            column: 5
          }
        },
        loc: {
          start: {
            line: 1149,
            column: 56
          },
          end: {
            line: 1183,
            column: 5
          }
        },
        line: 1149
      },
      "57": {
        name: "(anonymous_57)",
        decl: {
          start: {
            line: 1150,
            column: 27
          },
          end: {
            line: 1150,
            column: 28
          }
        },
        loc: {
          start: {
            line: 1150,
            column: 48
          },
          end: {
            line: 1182,
            column: 9
          }
        },
        line: 1150
      },
      "58": {
        name: "(anonymous_58)",
        decl: {
          start: {
            line: 1151,
            column: 39
          },
          end: {
            line: 1151,
            column: 40
          }
        },
        loc: {
          start: {
            line: 1151,
            column: 45
          },
          end: {
            line: 1153,
            column: 13
          }
        },
        line: 1151
      },
      "59": {
        name: "(anonymous_59)",
        decl: {
          start: {
            line: 1154,
            column: 46
          },
          end: {
            line: 1154,
            column: 47
          }
        },
        loc: {
          start: {
            line: 1154,
            column: 58
          },
          end: {
            line: 1181,
            column: 13
          }
        },
        line: 1154
      },
      "60": {
        name: "(anonymous_60)",
        decl: {
          start: {
            line: 1187,
            column: 4
          },
          end: {
            line: 1187,
            column: 5
          }
        },
        loc: {
          start: {
            line: 1187,
            column: 21
          },
          end: {
            line: 1214,
            column: 5
          }
        },
        line: 1187
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 45,
            column: 89
          },
          end: {
            line: 45,
            column: 107
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 45,
            column: 105
          },
          end: {
            line: 45,
            column: 107
          }
        }],
        line: 45
      },
      "1": {
        loc: {
          start: {
            line: 57,
            column: 8
          },
          end: {
            line: 59,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 57,
            column: 8
          },
          end: {
            line: 59,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 57
      },
      "2": {
        loc: {
          start: {
            line: 67,
            column: 8
          },
          end: {
            line: 70,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 67,
            column: 8
          },
          end: {
            line: 70,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 67
      },
      "3": {
        loc: {
          start: {
            line: 77,
            column: 27
          },
          end: {
            line: 77,
            column: 60
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 77,
            column: 27
          },
          end: {
            line: 77,
            column: 55
          }
        }, {
          start: {
            line: 77,
            column: 59
          },
          end: {
            line: 77,
            column: 60
          }
        }],
        line: 77
      },
      "4": {
        loc: {
          start: {
            line: 78,
            column: 36
          },
          end: {
            line: 78,
            column: 81
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 78,
            column: 36
          },
          end: {
            line: 78,
            column: 73
          }
        }, {
          start: {
            line: 78,
            column: 77
          },
          end: {
            line: 78,
            column: 81
          }
        }],
        line: 78
      },
      "5": {
        loc: {
          start: {
            line: 95,
            column: 65
          },
          end: {
            line: 95,
            column: 119
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 95,
            column: 90
          },
          end: {
            line: 95,
            column: 103
          }
        }, {
          start: {
            line: 95,
            column: 106
          },
          end: {
            line: 95,
            column: 119
          }
        }],
        line: 95
      },
      "6": {
        loc: {
          start: {
            line: 150,
            column: 8
          },
          end: {
            line: 168,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 150,
            column: 8
          },
          end: {
            line: 168,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 150
      },
      "7": {
        loc: {
          start: {
            line: 175,
            column: 8
          },
          end: {
            line: 177,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 175,
            column: 8
          },
          end: {
            line: 177,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 175
      },
      "8": {
        loc: {
          start: {
            line: 188,
            column: 8
          },
          end: {
            line: 193,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 188,
            column: 8
          },
          end: {
            line: 193,
            column: 9
          }
        }, {
          start: {
            line: 191,
            column: 13
          },
          end: {
            line: 193,
            column: 9
          }
        }],
        line: 188
      },
      "9": {
        loc: {
          start: {
            line: 188,
            column: 12
          },
          end: {
            line: 188,
            column: 51
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 188,
            column: 12
          },
          end: {
            line: 188,
            column: 25
          }
        }, {
          start: {
            line: 188,
            column: 29
          },
          end: {
            line: 188,
            column: 51
          }
        }],
        line: 188
      },
      "10": {
        loc: {
          start: {
            line: 229,
            column: 2
          },
          end: {
            line: 229,
            column: 101
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 229,
            column: 2
          },
          end: {
            line: 229,
            column: 29
          }
        }, {
          start: {
            line: 229,
            column: 33
          },
          end: {
            line: 229,
            column: 101
          }
        }],
        line: 229
      },
      "11": {
        loc: {
          start: {
            line: 233,
            column: 2
          },
          end: {
            line: 233,
            column: 100
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 233,
            column: 2
          },
          end: {
            line: 233,
            column: 24
          }
        }, {
          start: {
            line: 233,
            column: 28
          },
          end: {
            line: 233,
            column: 100
          }
        }],
        line: 233
      },
      "12": {
        loc: {
          start: {
            line: 237,
            column: 2
          },
          end: {
            line: 237,
            column: 99
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 237,
            column: 2
          },
          end: {
            line: 237,
            column: 18
          }
        }, {
          start: {
            line: 237,
            column: 22
          },
          end: {
            line: 237,
            column: 99
          }
        }],
        line: 237
      },
      "13": {
        loc: {
          start: {
            line: 241,
            column: 2
          },
          end: {
            line: 241,
            column: 87
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 241,
            column: 2
          },
          end: {
            line: 241,
            column: 23
          }
        }, {
          start: {
            line: 241,
            column: 27
          },
          end: {
            line: 241,
            column: 87
          }
        }],
        line: 241
      },
      "14": {
        loc: {
          start: {
            line: 245,
            column: 2
          },
          end: {
            line: 245,
            column: 109
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 245,
            column: 2
          },
          end: {
            line: 245,
            column: 31
          }
        }, {
          start: {
            line: 245,
            column: 35
          },
          end: {
            line: 245,
            column: 109
          }
        }],
        line: 245
      },
      "15": {
        loc: {
          start: {
            line: 249,
            column: 2
          },
          end: {
            line: 249,
            column: 97
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 249,
            column: 2
          },
          end: {
            line: 249,
            column: 32
          }
        }, {
          start: {
            line: 249,
            column: 36
          },
          end: {
            line: 249,
            column: 97
          }
        }],
        line: 249
      },
      "16": {
        loc: {
          start: {
            line: 253,
            column: 2
          },
          end: {
            line: 253,
            column: 95
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 253,
            column: 2
          },
          end: {
            line: 253,
            column: 31
          }
        }, {
          start: {
            line: 253,
            column: 35
          },
          end: {
            line: 253,
            column: 95
          }
        }],
        line: 253
      },
      "17": {
        loc: {
          start: {
            line: 256,
            column: 20
          },
          end: {
            line: 256,
            column: 51
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 256,
            column: 20
          },
          end: {
            line: 256,
            column: 37
          }
        }, {
          start: {
            line: 256,
            column: 41
          },
          end: {
            line: 256,
            column: 51
          }
        }],
        line: 256
      },
      "18": {
        loc: {
          start: {
            line: 257,
            column: 18
          },
          end: {
            line: 257,
            column: 93
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 257,
            column: 40
          },
          end: {
            line: 257,
            column: 84
          }
        }, {
          start: {
            line: 257,
            column: 87
          },
          end: {
            line: 257,
            column: 93
          }
        }],
        line: 257
      },
      "19": {
        loc: {
          start: {
            line: 297,
            column: 8
          },
          end: {
            line: 299,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 297,
            column: 8
          },
          end: {
            line: 299,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 297
      },
      "20": {
        loc: {
          start: {
            line: 360,
            column: 66
          },
          end: {
            line: 360,
            column: 120
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 360,
            column: 91
          },
          end: {
            line: 360,
            column: 104
          }
        }, {
          start: {
            line: 360,
            column: 107
          },
          end: {
            line: 360,
            column: 120
          }
        }],
        line: 360
      },
      "21": {
        loc: {
          start: {
            line: 376,
            column: 12
          },
          end: {
            line: 378,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 376,
            column: 12
          },
          end: {
            line: 378,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 376
      },
      "22": {
        loc: {
          start: {
            line: 376,
            column: 16
          },
          end: {
            line: 376,
            column: 63
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 376,
            column: 16
          },
          end: {
            line: 376,
            column: 32
          }
        }, {
          start: {
            line: 376,
            column: 36
          },
          end: {
            line: 376,
            column: 63
          }
        }],
        line: 376
      },
      "23": {
        loc: {
          start: {
            line: 381,
            column: 70
          },
          end: {
            line: 381,
            column: 124
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 381,
            column: 95
          },
          end: {
            line: 381,
            column: 108
          }
        }, {
          start: {
            line: 381,
            column: 111
          },
          end: {
            line: 381,
            column: 124
          }
        }],
        line: 381
      },
      "24": {
        loc: {
          start: {
            line: 390,
            column: 8
          },
          end: {
            line: 392,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 390,
            column: 8
          },
          end: {
            line: 392,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 390
      },
      "25": {
        loc: {
          start: {
            line: 390,
            column: 12
          },
          end: {
            line: 390,
            column: 83
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 390,
            column: 12
          },
          end: {
            line: 390,
            column: 38
          }
        }, {
          start: {
            line: 390,
            column: 42
          },
          end: {
            line: 390,
            column: 83
          }
        }],
        line: 390
      },
      "26": {
        loc: {
          start: {
            line: 394,
            column: 8
          },
          end: {
            line: 415,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 394,
            column: 8
          },
          end: {
            line: 415,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 394
      },
      "27": {
        loc: {
          start: {
            line: 394,
            column: 12
          },
          end: {
            line: 394,
            column: 48
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 394,
            column: 12
          },
          end: {
            line: 394,
            column: 18
          }
        }, {
          start: {
            line: 394,
            column: 22
          },
          end: {
            line: 394,
            column: 48
          }
        }],
        line: 394
      },
      "28": {
        loc: {
          start: {
            line: 395,
            column: 26
          },
          end: {
            line: 395,
            column: 63
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 395,
            column: 26
          },
          end: {
            line: 395,
            column: 38
          }
        }, {
          start: {
            line: 395,
            column: 42
          },
          end: {
            line: 395,
            column: 57
          }
        }, {
          start: {
            line: 395,
            column: 61
          },
          end: {
            line: 395,
            column: 63
          }
        }],
        line: 395
      },
      "29": {
        loc: {
          start: {
            line: 396,
            column: 33
          },
          end: {
            line: 396,
            column: 58
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 396,
            column: 33
          },
          end: {
            line: 396,
            column: 52
          }
        }, {
          start: {
            line: 396,
            column: 56
          },
          end: {
            line: 396,
            column: 58
          }
        }],
        line: 396
      },
      "30": {
        loc: {
          start: {
            line: 397,
            column: 26
          },
          end: {
            line: 397,
            column: 74
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 397,
            column: 26
          },
          end: {
            line: 397,
            column: 38
          }
        }, {
          start: {
            line: 397,
            column: 42
          },
          end: {
            line: 397,
            column: 68
          }
        }, {
          start: {
            line: 397,
            column: 72
          },
          end: {
            line: 397,
            column: 74
          }
        }],
        line: 397
      },
      "31": {
        loc: {
          start: {
            line: 398,
            column: 12
          },
          end: {
            line: 414,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 398,
            column: 12
          },
          end: {
            line: 414,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 398
      },
      "32": {
        loc: {
          start: {
            line: 398,
            column: 16
          },
          end: {
            line: 398,
            column: 56
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 398,
            column: 16
          },
          end: {
            line: 398,
            column: 36
          }
        }, {
          start: {
            line: 398,
            column: 40
          },
          end: {
            line: 398,
            column: 56
          }
        }],
        line: 398
      },
      "33": {
        loc: {
          start: {
            line: 404,
            column: 20
          },
          end: {
            line: 406,
            column: 21
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 404,
            column: 20
          },
          end: {
            line: 406,
            column: 21
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 404
      },
      "34": {
        loc: {
          start: {
            line: 405,
            column: 31
          },
          end: {
            line: 405,
            column: 80
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 405,
            column: 58
          },
          end: {
            line: 405,
            column: 62
          }
        }, {
          start: {
            line: 405,
            column: 65
          },
          end: {
            line: 405,
            column: 80
          }
        }],
        line: 405
      },
      "35": {
        loc: {
          start: {
            line: 407,
            column: 36
          },
          end: {
            line: 407,
            column: 88
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 407,
            column: 36
          },
          end: {
            line: 407,
            column: 52
          }
        }, {
          start: {
            line: 407,
            column: 56
          },
          end: {
            line: 407,
            column: 65
          }
        }, {
          start: {
            line: 407,
            column: 69
          },
          end: {
            line: 407,
            column: 88
          }
        }],
        line: 407
      },
      "36": {
        loc: {
          start: {
            line: 410,
            column: 2
          },
          end: {
            line: 410,
            column: 58
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 410,
            column: 17
          },
          end: {
            line: 410,
            column: 53
          }
        }, {
          start: {
            line: 410,
            column: 56
          },
          end: {
            line: 410,
            column: 58
          }
        }],
        line: 410
      },
      "37": {
        loc: {
          start: {
            line: 411,
            column: 2
          },
          end: {
            line: 411,
            column: 52
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 411,
            column: 10
          },
          end: {
            line: 411,
            column: 47
          }
        }, {
          start: {
            line: 411,
            column: 50
          },
          end: {
            line: 411,
            column: 52
          }
        }],
        line: 411
      },
      "38": {
        loc: {
          start: {
            line: 417,
            column: 8
          },
          end: {
            line: 425,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 417,
            column: 8
          },
          end: {
            line: 425,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 417
      },
      "39": {
        loc: {
          start: {
            line: 471,
            column: 8
          },
          end: {
            line: 473,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 471,
            column: 8
          },
          end: {
            line: 473,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 471
      },
      "40": {
        loc: {
          start: {
            line: 478,
            column: 66
          },
          end: {
            line: 478,
            column: 118
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 478,
            column: 66
          },
          end: {
            line: 478,
            column: 90
          }
        }, {
          start: {
            line: 478,
            column: 94
          },
          end: {
            line: 478,
            column: 118
          }
        }],
        line: 478
      },
      "41": {
        loc: {
          start: {
            line: 479,
            column: 8
          },
          end: {
            line: 481,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 479,
            column: 8
          },
          end: {
            line: 481,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 479
      },
      "42": {
        loc: {
          start: {
            line: 479,
            column: 12
          },
          end: {
            line: 479,
            column: 51
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 479,
            column: 12
          },
          end: {
            line: 479,
            column: 22
          }
        }, {
          start: {
            line: 479,
            column: 26
          },
          end: {
            line: 479,
            column: 51
          }
        }],
        line: 479
      },
      "43": {
        loc: {
          start: {
            line: 484,
            column: 8
          },
          end: {
            line: 489,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 484,
            column: 8
          },
          end: {
            line: 489,
            column: 9
          }
        }, {
          start: {
            line: 487,
            column: 13
          },
          end: {
            line: 489,
            column: 9
          }
        }],
        line: 484
      },
      "44": {
        loc: {
          start: {
            line: 484,
            column: 12
          },
          end: {
            line: 484,
            column: 69
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 484,
            column: 12
          },
          end: {
            line: 484,
            column: 32
          }
        }, {
          start: {
            line: 484,
            column: 36
          },
          end: {
            line: 484,
            column: 69
          }
        }],
        line: 484
      },
      "45": {
        loc: {
          start: {
            line: 515,
            column: 31
          },
          end: {
            line: 515,
            column: 76
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 515,
            column: 31
          },
          end: {
            line: 515,
            column: 68
          }
        }, {
          start: {
            line: 515,
            column: 72
          },
          end: {
            line: 515,
            column: 76
          }
        }],
        line: 515
      },
      "46": {
        loc: {
          start: {
            line: 529,
            column: 8
          },
          end: {
            line: 531,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 529,
            column: 8
          },
          end: {
            line: 531,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 529
      },
      "47": {
        loc: {
          start: {
            line: 530,
            column: 74
          },
          end: {
            line: 530,
            column: 120
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 530,
            column: 74
          },
          end: {
            line: 530,
            column: 96
          }
        }, {
          start: {
            line: 530,
            column: 100
          },
          end: {
            line: 530,
            column: 120
          }
        }],
        line: 530
      },
      "48": {
        loc: {
          start: {
            line: 573,
            column: 8
          },
          end: {
            line: 575,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 573,
            column: 8
          },
          end: {
            line: 575,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 573
      },
      "49": {
        loc: {
          start: {
            line: 585,
            column: 8
          },
          end: {
            line: 587,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 585,
            column: 8
          },
          end: {
            line: 587,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 585
      },
      "50": {
        loc: {
          start: {
            line: 637,
            column: 12
          },
          end: {
            line: 654,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 637,
            column: 12
          },
          end: {
            line: 654,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 637
      },
      "51": {
        loc: {
          start: {
            line: 651,
            column: 124
          },
          end: {
            line: 651,
            column: 178
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 651,
            column: 149
          },
          end: {
            line: 651,
            column: 162
          }
        }, {
          start: {
            line: 651,
            column: 165
          },
          end: {
            line: 651,
            column: 178
          }
        }],
        line: 651
      },
      "52": {
        loc: {
          start: {
            line: 658,
            column: 34
          },
          end: {
            line: 658,
            column: 64
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 658,
            column: 34
          },
          end: {
            line: 658,
            column: 51
          }
        }, {
          start: {
            line: 658,
            column: 55
          },
          end: {
            line: 658,
            column: 64
          }
        }],
        line: 658
      },
      "53": {
        loc: {
          start: {
            line: 676,
            column: 32
          },
          end: {
            line: 676,
            column: 56
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 676,
            column: 32
          },
          end: {
            line: 676,
            column: 43
          }
        }, {
          start: {
            line: 676,
            column: 47
          },
          end: {
            line: 676,
            column: 56
          }
        }],
        line: 676
      },
      "54": {
        loc: {
          start: {
            line: 677,
            column: 33
          },
          end: {
            line: 677,
            column: 73
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 677,
            column: 47
          },
          end: {
            line: 677,
            column: 68
          }
        }, {
          start: {
            line: 677,
            column: 71
          },
          end: {
            line: 677,
            column: 73
          }
        }],
        line: 677
      },
      "55": {
        loc: {
          start: {
            line: 679,
            column: 26
          },
          end: {
            line: 679,
            column: 92
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 679,
            column: 26
          },
          end: {
            line: 679,
            column: 38
          }
        }, {
          start: {
            line: 679,
            column: 42
          },
          end: {
            line: 679,
            column: 92
          }
        }],
        line: 679
      },
      "56": {
        loc: {
          start: {
            line: 692,
            column: 15
          },
          end: {
            line: 692,
            column: 47
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 692,
            column: 15
          },
          end: {
            line: 692,
            column: 34
          }
        }, {
          start: {
            line: 692,
            column: 38
          },
          end: {
            line: 692,
            column: 47
          }
        }],
        line: 692
      },
      "57": {
        loc: {
          start: {
            line: 717,
            column: 15
          },
          end: {
            line: 717,
            column: 54
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 717,
            column: 15
          },
          end: {
            line: 717,
            column: 39
          }
        }, {
          start: {
            line: 717,
            column: 43
          },
          end: {
            line: 717,
            column: 54
          }
        }],
        line: 717
      },
      "58": {
        loc: {
          start: {
            line: 742,
            column: 15
          },
          end: {
            line: 742,
            column: 43
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 742,
            column: 15
          },
          end: {
            line: 742,
            column: 37
          }
        }, {
          start: {
            line: 742,
            column: 41
          },
          end: {
            line: 742,
            column: 43
          }
        }],
        line: 742
      },
      "59": {
        loc: {
          start: {
            line: 748,
            column: 63
          },
          end: {
            line: 748,
            column: 76
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 748,
            column: 75
          },
          end: {
            line: 748,
            column: 76
          }
        }],
        line: 748
      },
      "60": {
        loc: {
          start: {
            line: 751,
            column: 8
          },
          end: {
            line: 757,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 751,
            column: 8
          },
          end: {
            line: 757,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 751
      },
      "61": {
        loc: {
          start: {
            line: 755,
            column: 23
          },
          end: {
            line: 755,
            column: 53
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 755,
            column: 23
          },
          end: {
            line: 755,
            column: 40
          }
        }, {
          start: {
            line: 755,
            column: 44
          },
          end: {
            line: 755,
            column: 53
          }
        }],
        line: 755
      },
      "62": {
        loc: {
          start: {
            line: 792,
            column: 25
          },
          end: {
            line: 792,
            column: 55
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 792,
            column: 25
          },
          end: {
            line: 792,
            column: 49
          }
        }, {
          start: {
            line: 792,
            column: 53
          },
          end: {
            line: 792,
            column: 55
          }
        }],
        line: 792
      },
      "63": {
        loc: {
          start: {
            line: 794,
            column: 8
          },
          end: {
            line: 801,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 794,
            column: 8
          },
          end: {
            line: 801,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 794
      },
      "64": {
        loc: {
          start: {
            line: 797,
            column: 38
          },
          end: {
            line: 797,
            column: 72
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 797,
            column: 38
          },
          end: {
            line: 797,
            column: 66
          }
        }, {
          start: {
            line: 797,
            column: 70
          },
          end: {
            line: 797,
            column: 72
          }
        }],
        line: 797
      },
      "65": {
        loc: {
          start: {
            line: 803,
            column: 8
          },
          end: {
            line: 805,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 803,
            column: 8
          },
          end: {
            line: 805,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 803
      },
      "66": {
        loc: {
          start: {
            line: 819,
            column: 16
          },
          end: {
            line: 821,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 819,
            column: 16
          },
          end: {
            line: 821,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 819
      },
      "67": {
        loc: {
          start: {
            line: 819,
            column: 20
          },
          end: {
            line: 819,
            column: 76
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 819,
            column: 20
          },
          end: {
            line: 819,
            column: 41
          }
        }, {
          start: {
            line: 819,
            column: 45
          },
          end: {
            line: 819,
            column: 76
          }
        }],
        line: 819
      },
      "68": {
        loc: {
          start: {
            line: 822,
            column: 16
          },
          end: {
            line: 834,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 822,
            column: 16
          },
          end: {
            line: 834,
            column: 17
          }
        }, {
          start: {
            line: 825,
            column: 21
          },
          end: {
            line: 834,
            column: 17
          }
        }],
        line: 822
      },
      "69": {
        loc: {
          start: {
            line: 829,
            column: 24
          },
          end: {
            line: 831,
            column: 25
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 829,
            column: 24
          },
          end: {
            line: 831,
            column: 25
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 829
      },
      "70": {
        loc: {
          start: {
            line: 837,
            column: 12
          },
          end: {
            line: 846,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 837,
            column: 12
          },
          end: {
            line: 846,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 837
      },
      "71": {
        loc: {
          start: {
            line: 837,
            column: 16
          },
          end: {
            line: 837,
            column: 53
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 837,
            column: 16
          },
          end: {
            line: 837,
            column: 28
          }
        }, {
          start: {
            line: 837,
            column: 32
          },
          end: {
            line: 837,
            column: 53
          }
        }],
        line: 837
      },
      "72": {
        loc: {
          start: {
            line: 839,
            column: 20
          },
          end: {
            line: 840,
            column: 30
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 839,
            column: 20
          },
          end: {
            line: 840,
            column: 30
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 839
      },
      "73": {
        loc: {
          start: {
            line: 842,
            column: 20
          },
          end: {
            line: 844,
            column: 21
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 842,
            column: 20
          },
          end: {
            line: 844,
            column: 21
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 842
      },
      "74": {
        loc: {
          start: {
            line: 842,
            column: 24
          },
          end: {
            line: 842,
            column: 73
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 842,
            column: 24
          },
          end: {
            line: 842,
            column: 35
          }
        }, {
          start: {
            line: 842,
            column: 39
          },
          end: {
            line: 842,
            column: 73
          }
        }],
        line: 842
      },
      "75": {
        loc: {
          start: {
            line: 847,
            column: 12
          },
          end: {
            line: 849,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 847,
            column: 12
          },
          end: {
            line: 849,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 847
      },
      "76": {
        loc: {
          start: {
            line: 852,
            column: 63
          },
          end: {
            line: 852,
            column: 117
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 852,
            column: 88
          },
          end: {
            line: 852,
            column: 101
          }
        }, {
          start: {
            line: 852,
            column: 104
          },
          end: {
            line: 852,
            column: 117
          }
        }],
        line: 852
      },
      "77": {
        loc: {
          start: {
            line: 874,
            column: 16
          },
          end: {
            line: 876,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 874,
            column: 16
          },
          end: {
            line: 876,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 874
      },
      "78": {
        loc: {
          start: {
            line: 882,
            column: 72
          },
          end: {
            line: 882,
            column: 126
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 882,
            column: 97
          },
          end: {
            line: 882,
            column: 110
          }
        }, {
          start: {
            line: 882,
            column: 113
          },
          end: {
            line: 882,
            column: 126
          }
        }],
        line: 882
      },
      "79": {
        loc: {
          start: {
            line: 892,
            column: 16
          },
          end: {
            line: 896,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 892,
            column: 16
          },
          end: {
            line: 896,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 892
      },
      "80": {
        loc: {
          start: {
            line: 899,
            column: 77
          },
          end: {
            line: 899,
            column: 131
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 899,
            column: 102
          },
          end: {
            line: 899,
            column: 115
          }
        }, {
          start: {
            line: 899,
            column: 118
          },
          end: {
            line: 899,
            column: 131
          }
        }],
        line: 899
      },
      "81": {
        loc: {
          start: {
            line: 910,
            column: 16
          },
          end: {
            line: 927,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 910,
            column: 16
          },
          end: {
            line: 927,
            column: 17
          }
        }, {
          start: {
            line: 924,
            column: 21
          },
          end: {
            line: 927,
            column: 17
          }
        }],
        line: 910
      },
      "82": {
        loc: {
          start: {
            line: 913,
            column: 45
          },
          end: {
            line: 913,
            column: 123
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 913,
            column: 45
          },
          end: {
            line: 913,
            column: 56
          }
        }, {
          start: {
            line: 913,
            column: 60
          },
          end: {
            line: 913,
            column: 86
          }
        }, {
          start: {
            line: 913,
            column: 90
          },
          end: {
            line: 913,
            column: 123
          }
        }],
        line: 913
      },
      "83": {
        loc: {
          start: {
            line: 914,
            column: 20
          },
          end: {
            line: 922,
            column: 21
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 914,
            column: 20
          },
          end: {
            line: 922,
            column: 21
          }
        }, {
          start: {
            line: 919,
            column: 25
          },
          end: {
            line: 922,
            column: 21
          }
        }],
        line: 914
      },
      "84": {
        loc: {
          start: {
            line: 930,
            column: 72
          },
          end: {
            line: 930,
            column: 126
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 930,
            column: 97
          },
          end: {
            line: 930,
            column: 110
          }
        }, {
          start: {
            line: 930,
            column: 113
          },
          end: {
            line: 930,
            column: 126
          }
        }],
        line: 930
      },
      "85": {
        loc: {
          start: {
            line: 942,
            column: 15
          },
          end: {
            line: 942,
            column: 92
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 942,
            column: 15
          },
          end: {
            line: 942,
            column: 44
          }
        }, {
          start: {
            line: 942,
            column: 49
          },
          end: {
            line: 942,
            column: 61
          }
        }, {
          start: {
            line: 942,
            column: 65
          },
          end: {
            line: 942,
            column: 91
          }
        }],
        line: 942
      },
      "86": {
        loc: {
          start: {
            line: 951,
            column: 12
          },
          end: {
            line: 961,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 951,
            column: 12
          },
          end: {
            line: 961,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 951
      },
      "87": {
        loc: {
          start: {
            line: 954,
            column: 20
          },
          end: {
            line: 959,
            column: 21
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 954,
            column: 20
          },
          end: {
            line: 959,
            column: 21
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 954
      },
      "88": {
        loc: {
          start: {
            line: 956,
            column: 24
          },
          end: {
            line: 958,
            column: 25
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 956,
            column: 24
          },
          end: {
            line: 958,
            column: 25
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 956
      },
      "89": {
        loc: {
          start: {
            line: 969,
            column: 75
          },
          end: {
            line: 969,
            column: 129
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 969,
            column: 100
          },
          end: {
            line: 969,
            column: 113
          }
        }, {
          start: {
            line: 969,
            column: 116
          },
          end: {
            line: 969,
            column: 129
          }
        }],
        line: 969
      },
      "90": {
        loc: {
          start: {
            line: 982,
            column: 72
          },
          end: {
            line: 982,
            column: 126
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 982,
            column: 97
          },
          end: {
            line: 982,
            column: 110
          }
        }, {
          start: {
            line: 982,
            column: 113
          },
          end: {
            line: 982,
            column: 126
          }
        }],
        line: 982
      },
      "91": {
        loc: {
          start: {
            line: 998,
            column: 95
          },
          end: {
            line: 998,
            column: 149
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 998,
            column: 120
          },
          end: {
            line: 998,
            column: 133
          }
        }, {
          start: {
            line: 998,
            column: 136
          },
          end: {
            line: 998,
            column: 149
          }
        }],
        line: 998
      },
      "92": {
        loc: {
          start: {
            line: 1012,
            column: 8
          },
          end: {
            line: 1021,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 1012,
            column: 8
          },
          end: {
            line: 1021,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 1012
      },
      "93": {
        loc: {
          start: {
            line: 1028,
            column: 26
          },
          end: {
            line: 1028,
            column: 74
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 1028,
            column: 44
          },
          end: {
            line: 1028,
            column: 70
          }
        }, {
          start: {
            line: 1028,
            column: 73
          },
          end: {
            line: 1028,
            column: 74
          }
        }],
        line: 1028
      },
      "94": {
        loc: {
          start: {
            line: 1049,
            column: 74
          },
          end: {
            line: 1049,
            column: 128
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 1049,
            column: 99
          },
          end: {
            line: 1049,
            column: 112
          }
        }, {
          start: {
            line: 1049,
            column: 115
          },
          end: {
            line: 1049,
            column: 128
          }
        }],
        line: 1049
      },
      "95": {
        loc: {
          start: {
            line: 1052,
            column: 15
          },
          end: {
            line: 1052,
            column: 58
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 1052,
            column: 15
          },
          end: {
            line: 1052,
            column: 22
          }
        }, {
          start: {
            line: 1052,
            column: 26
          },
          end: {
            line: 1052,
            column: 58
          }
        }],
        line: 1052
      },
      "96": {
        loc: {
          start: {
            line: 1058,
            column: 8
          },
          end: {
            line: 1069,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 1058,
            column: 8
          },
          end: {
            line: 1069,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 1058
      },
      "97": {
        loc: {
          start: {
            line: 1119,
            column: 40
          },
          end: {
            line: 1119,
            column: 58
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 1119,
            column: 52
          },
          end: {
            line: 1119,
            column: 58
          }
        }],
        line: 1119
      },
      "98": {
        loc: {
          start: {
            line: 1127,
            column: 20
          },
          end: {
            line: 1136,
            column: 21
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 1127,
            column: 20
          },
          end: {
            line: 1136,
            column: 21
          }
        }, {
          start: {
            line: 1132,
            column: 25
          },
          end: {
            line: 1136,
            column: 21
          }
        }],
        line: 1127
      },
      "99": {
        loc: {
          start: {
            line: 1130,
            column: 32
          },
          end: {
            line: 1130,
            column: 74
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 1130,
            column: 46
          },
          end: {
            line: 1130,
            column: 69
          }
        }, {
          start: {
            line: 1130,
            column: 72
          },
          end: {
            line: 1130,
            column: 74
          }
        }],
        line: 1130
      },
      "100": {
        loc: {
          start: {
            line: 1132,
            column: 25
          },
          end: {
            line: 1136,
            column: 21
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 1132,
            column: 25
          },
          end: {
            line: 1136,
            column: 21
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 1132
      },
      "101": {
        loc: {
          start: {
            line: 1135,
            column: 57
          },
          end: {
            line: 1135,
            column: 86
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 1135,
            column: 57
          },
          end: {
            line: 1135,
            column: 67
          }
        }, {
          start: {
            line: 1135,
            column: 71
          },
          end: {
            line: 1135,
            column: 86
          }
        }],
        line: 1135
      },
      "102": {
        loc: {
          start: {
            line: 1157,
            column: 20
          },
          end: {
            line: 1174,
            column: 21
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 1157,
            column: 20
          },
          end: {
            line: 1174,
            column: 21
          }
        }, {
          start: {
            line: 1166,
            column: 25
          },
          end: {
            line: 1174,
            column: 21
          }
        }],
        line: 1157
      },
      "103": {
        loc: {
          start: {
            line: 1166,
            column: 25
          },
          end: {
            line: 1174,
            column: 21
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 1166,
            column: 25
          },
          end: {
            line: 1174,
            column: 21
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 1166
      },
      "104": {
        loc: {
          start: {
            line: 1195,
            column: 8
          },
          end: {
            line: 1204,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 1195,
            column: 8
          },
          end: {
            line: 1204,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 1195
      },
      "105": {
        loc: {
          start: {
            line: 1206,
            column: 8
          },
          end: {
            line: 1209,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 1206,
            column: 8
          },
          end: {
            line: 1209,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 1206
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0,
      "74": 0,
      "75": 0,
      "76": 0,
      "77": 0,
      "78": 0,
      "79": 0,
      "80": 0,
      "81": 0,
      "82": 0,
      "83": 0,
      "84": 0,
      "85": 0,
      "86": 0,
      "87": 0,
      "88": 0,
      "89": 0,
      "90": 0,
      "91": 0,
      "92": 0,
      "93": 0,
      "94": 0,
      "95": 0,
      "96": 0,
      "97": 0,
      "98": 0,
      "99": 0,
      "100": 0,
      "101": 0,
      "102": 0,
      "103": 0,
      "104": 0,
      "105": 0,
      "106": 0,
      "107": 0,
      "108": 0,
      "109": 0,
      "110": 0,
      "111": 0,
      "112": 0,
      "113": 0,
      "114": 0,
      "115": 0,
      "116": 0,
      "117": 0,
      "118": 0,
      "119": 0,
      "120": 0,
      "121": 0,
      "122": 0,
      "123": 0,
      "124": 0,
      "125": 0,
      "126": 0,
      "127": 0,
      "128": 0,
      "129": 0,
      "130": 0,
      "131": 0,
      "132": 0,
      "133": 0,
      "134": 0,
      "135": 0,
      "136": 0,
      "137": 0,
      "138": 0,
      "139": 0,
      "140": 0,
      "141": 0,
      "142": 0,
      "143": 0,
      "144": 0,
      "145": 0,
      "146": 0,
      "147": 0,
      "148": 0,
      "149": 0,
      "150": 0,
      "151": 0,
      "152": 0,
      "153": 0,
      "154": 0,
      "155": 0,
      "156": 0,
      "157": 0,
      "158": 0,
      "159": 0,
      "160": 0,
      "161": 0,
      "162": 0,
      "163": 0,
      "164": 0,
      "165": 0,
      "166": 0,
      "167": 0,
      "168": 0,
      "169": 0,
      "170": 0,
      "171": 0,
      "172": 0,
      "173": 0,
      "174": 0,
      "175": 0,
      "176": 0,
      "177": 0,
      "178": 0,
      "179": 0,
      "180": 0,
      "181": 0,
      "182": 0,
      "183": 0,
      "184": 0,
      "185": 0,
      "186": 0,
      "187": 0,
      "188": 0,
      "189": 0,
      "190": 0,
      "191": 0,
      "192": 0,
      "193": 0,
      "194": 0,
      "195": 0,
      "196": 0,
      "197": 0,
      "198": 0,
      "199": 0,
      "200": 0,
      "201": 0,
      "202": 0,
      "203": 0,
      "204": 0,
      "205": 0,
      "206": 0,
      "207": 0,
      "208": 0,
      "209": 0,
      "210": 0,
      "211": 0,
      "212": 0,
      "213": 0,
      "214": 0,
      "215": 0,
      "216": 0,
      "217": 0,
      "218": 0,
      "219": 0,
      "220": 0,
      "221": 0,
      "222": 0,
      "223": 0,
      "224": 0,
      "225": 0,
      "226": 0,
      "227": 0,
      "228": 0,
      "229": 0,
      "230": 0,
      "231": 0,
      "232": 0,
      "233": 0,
      "234": 0,
      "235": 0,
      "236": 0,
      "237": 0,
      "238": 0,
      "239": 0,
      "240": 0,
      "241": 0,
      "242": 0,
      "243": 0,
      "244": 0,
      "245": 0,
      "246": 0,
      "247": 0,
      "248": 0,
      "249": 0,
      "250": 0,
      "251": 0,
      "252": 0,
      "253": 0,
      "254": 0,
      "255": 0,
      "256": 0,
      "257": 0,
      "258": 0,
      "259": 0,
      "260": 0,
      "261": 0,
      "262": 0,
      "263": 0,
      "264": 0,
      "265": 0,
      "266": 0,
      "267": 0,
      "268": 0,
      "269": 0,
      "270": 0,
      "271": 0,
      "272": 0,
      "273": 0,
      "274": 0,
      "275": 0,
      "276": 0,
      "277": 0,
      "278": 0,
      "279": 0,
      "280": 0,
      "281": 0,
      "282": 0,
      "283": 0,
      "284": 0,
      "285": 0,
      "286": 0,
      "287": 0,
      "288": 0,
      "289": 0,
      "290": 0,
      "291": 0,
      "292": 0,
      "293": 0,
      "294": 0,
      "295": 0,
      "296": 0,
      "297": 0,
      "298": 0,
      "299": 0,
      "300": 0,
      "301": 0,
      "302": 0,
      "303": 0,
      "304": 0,
      "305": 0,
      "306": 0,
      "307": 0,
      "308": 0,
      "309": 0,
      "310": 0,
      "311": 0,
      "312": 0,
      "313": 0,
      "314": 0,
      "315": 0,
      "316": 0,
      "317": 0,
      "318": 0,
      "319": 0,
      "320": 0,
      "321": 0,
      "322": 0,
      "323": 0,
      "324": 0,
      "325": 0,
      "326": 0,
      "327": 0,
      "328": 0,
      "329": 0,
      "330": 0,
      "331": 0,
      "332": 0,
      "333": 0,
      "334": 0,
      "335": 0,
      "336": 0,
      "337": 0,
      "338": 0,
      "339": 0,
      "340": 0,
      "341": 0,
      "342": 0,
      "343": 0,
      "344": 0,
      "345": 0,
      "346": 0,
      "347": 0,
      "348": 0,
      "349": 0,
      "350": 0,
      "351": 0,
      "352": 0,
      "353": 0,
      "354": 0,
      "355": 0,
      "356": 0,
      "357": 0,
      "358": 0,
      "359": 0,
      "360": 0,
      "361": 0,
      "362": 0,
      "363": 0,
      "364": 0,
      "365": 0,
      "366": 0,
      "367": 0,
      "368": 0,
      "369": 0,
      "370": 0,
      "371": 0,
      "372": 0,
      "373": 0,
      "374": 0,
      "375": 0,
      "376": 0,
      "377": 0,
      "378": 0,
      "379": 0,
      "380": 0,
      "381": 0,
      "382": 0,
      "383": 0,
      "384": 0,
      "385": 0,
      "386": 0,
      "387": 0,
      "388": 0,
      "389": 0,
      "390": 0,
      "391": 0,
      "392": 0,
      "393": 0,
      "394": 0,
      "395": 0,
      "396": 0,
      "397": 0,
      "398": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0
    },
    b: {
      "0": [0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0, 0],
      "10": [0, 0],
      "11": [0, 0],
      "12": [0, 0],
      "13": [0, 0],
      "14": [0, 0],
      "15": [0, 0],
      "16": [0, 0],
      "17": [0, 0],
      "18": [0, 0],
      "19": [0, 0],
      "20": [0, 0],
      "21": [0, 0],
      "22": [0, 0],
      "23": [0, 0],
      "24": [0, 0],
      "25": [0, 0],
      "26": [0, 0],
      "27": [0, 0],
      "28": [0, 0, 0],
      "29": [0, 0],
      "30": [0, 0, 0],
      "31": [0, 0],
      "32": [0, 0],
      "33": [0, 0],
      "34": [0, 0],
      "35": [0, 0, 0],
      "36": [0, 0],
      "37": [0, 0],
      "38": [0, 0],
      "39": [0, 0],
      "40": [0, 0],
      "41": [0, 0],
      "42": [0, 0],
      "43": [0, 0],
      "44": [0, 0],
      "45": [0, 0],
      "46": [0, 0],
      "47": [0, 0],
      "48": [0, 0],
      "49": [0, 0],
      "50": [0, 0],
      "51": [0, 0],
      "52": [0, 0],
      "53": [0, 0],
      "54": [0, 0],
      "55": [0, 0],
      "56": [0, 0],
      "57": [0, 0],
      "58": [0, 0],
      "59": [0],
      "60": [0, 0],
      "61": [0, 0],
      "62": [0, 0],
      "63": [0, 0],
      "64": [0, 0],
      "65": [0, 0],
      "66": [0, 0],
      "67": [0, 0],
      "68": [0, 0],
      "69": [0, 0],
      "70": [0, 0],
      "71": [0, 0],
      "72": [0, 0],
      "73": [0, 0],
      "74": [0, 0],
      "75": [0, 0],
      "76": [0, 0],
      "77": [0, 0],
      "78": [0, 0],
      "79": [0, 0],
      "80": [0, 0],
      "81": [0, 0],
      "82": [0, 0, 0],
      "83": [0, 0],
      "84": [0, 0],
      "85": [0, 0, 0],
      "86": [0, 0],
      "87": [0, 0],
      "88": [0, 0],
      "89": [0, 0],
      "90": [0, 0],
      "91": [0, 0],
      "92": [0, 0],
      "93": [0, 0],
      "94": [0, 0],
      "95": [0, 0],
      "96": [0, 0],
      "97": [0],
      "98": [0, 0],
      "99": [0, 0],
      "100": [0, 0],
      "101": [0, 0],
      "102": [0, 0],
      "103": [0, 0],
      "104": [0, 0],
      "105": [0, 0]
    },
    inputSourceMap: {
      file: "/home/mhugo/code/claude-code-flow/src/maestro/maestro-orchestrator.ts",
      mappings: "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",
      names: [],
      sources: ["/home/mhugo/code/claude-code-flow/src/maestro/maestro-orchestrator.ts"],
      sourcesContent: ["/**\n * Maestro Orchestrator - Refactored and Cleaned Up\n * \n * A specifications-driven development orchestrator that integrates seamlessly\n * with the existing claude-flow hive mind infrastructure for collective intelligence,\n * consensus-based decision making, and advanced workflow automation.\n * \n * This refactored version eliminates duplicate implementations and leverages\n * the proven hive mind system for enhanced reliability and performance.\n */\n\nimport { EventEmitter } from 'events';\nimport { join } from 'path';\nimport { readFile, writeFile, mkdir, access } from 'fs/promises';\n// Import agentic-flow hooks system\nimport { agenticHookManager, initializeAgenticFlowHooks, type AgenticHookContext } from '../services/agentic-flow-hooks/index.js';\n\n// Core claude-flow infrastructure\nimport { IEventBus } from '../core/event-bus.js';\nimport { ILogger } from '../core/logger.js';\nimport { IMemoryManager } from '../memory/manager.js';\nimport { AgentManager } from '../agents/agent-manager.js';\nimport { Orchestrator } from '../core/orchestrator.js';\nimport { Config } from '../utils/types.js';\nimport { SystemError } from '../utils/errors.js';\n\n// Existing hive mind infrastructure (proven and robust)\nimport { HiveMind } from '../hive-mind/core/HiveMind.js';\nimport { ConsensusEngine } from '../hive-mind/integration/ConsensusEngine.js';\nimport { SwarmOrchestrator } from '../hive-mind/integration/SwarmOrchestrator.js';\n\n// Types for maestro system\nimport {\n  MaestroSpec,\n  MaestroWorkflowState,\n  WorkflowPhase,\n  TaskItem,\n  AgentProfile,\n  SteeringContext\n} from './maestro-types.js';\n\n// Simple interface for agent pool (minimal-change enhancement)\ninterface PooledAgent {\n  id: string;\n  type: string;\n  capabilities: string[];\n  status: 'available' | 'busy' | 'maintenance';\n  lastUsed: Date;\n  usageCount: number;\n  createdAt: Date;\n}\n\n// Remove SimpleTaskPlanner dependency - using direct agent management\nimport {\n  HiveMindConfig,\n  ConsensusProposal,\n  TaskSubmitOptions,\n  AgentSpawnOptions,\n  QueenMode,\n  AgentCapability\n} from '../hive-mind/types.js';\n\nexport interface MaestroConfig {\n  // Integration with hive mind\n  enableHiveMind: boolean;\n  consensusThreshold: number;\n  maxAgents: number;\n  \n  // Maestro-specific features\n  enableLivingDocumentation: boolean;\n  enableAgentHooks: boolean;\n  enablePatternLearning: boolean;\n  \n  // File system settings\n  specsDirectory: string;\n  steeringDirectory: string;\n}\n\n/**\n * Main Maestro Orchestrator class\n * Integrates with existing hive mind infrastructure instead of duplicating it\n */\nexport class MaestroOrchestrator extends EventEmitter {\n  private maestroState: Map<string, MaestroWorkflowState> = new Map();\n  private specsDirectory: string;\n  private steeringDirectory: string;\n  \n  // Hive mind integration (leveraging existing robust systems)\n  private hiveMind?: HiveMind;\n  private consensusEngine?: ConsensusEngine;\n  private swarmOrchestrator?: SwarmOrchestrator;\n  \n  // Removed SimpleTaskPlanner - using direct agent management\n  \n  private agenticHooksInitialized: boolean = false;\n  \n  // File watchers for living documentation\n  private fileWatchers: Map<string, any> = new Map();\n  \n  // Simple agent pool for reuse (minimal-change enhancement)\n  private agentPool: Map<string, PooledAgent> = new Map();\n  private capabilityIndex: Map<string, Set<string>> = new Map();\n  \n  constructor(\n    private config: Config,\n    private eventBus: IEventBus,\n    private logger: ILogger,\n    private memoryManager: IMemoryManager,\n    private agentManager: AgentManager,\n    private mainOrchestrator: Orchestrator,\n    private maestroConfig: Partial<MaestroConfig> = {}\n  ) {\n    super();\n    \n    this.specsDirectory = join(process.cwd(), '.claude', 'claude-flow', 'maestro', 'specs');\n    this.steeringDirectory = join(process.cwd(), '.claude', 'claude-flow', 'maestro', 'steering');\n\n    // Initialize agentic-flow hooks if enabled\n    if (this.maestroConfig.enableAgentHooks) {\n      this.initializeAgenticHooks();\n    }\n    \n    this.setupEventHandlers();\n    this.logger.info('Maestro Orchestrator initialized');\n  }\n  \n  /**\n   * Initialize hive mind integration for advanced features\n   */\n  async initializeHiveMind(): Promise<string | null> {\n    if (!this.maestroConfig.enableHiveMind) {\n      this.logger.info('Hive mind integration disabled');\n      return null;\n    }\n    \n    try {\n      // Configure hive mind for Maestro workflows\n      const hiveMindConfig: HiveMindConfig = {\n        name: 'maestro-collective',\n        topology: 'hierarchical',\n        queenMode: 'strategic' as QueenMode,\n        maxAgents: this.maestroConfig.maxAgents || 8,\n        consensusThreshold: this.maestroConfig.consensusThreshold || 0.66,\n        memoryTTL: 86400000, // 24 hours\n        autoSpawn: true,\n        enableConsensus: true,\n        enableMemory: true,\n        enableCommunication: true\n      };\n      \n      // Initialize hive mind with existing infrastructure\n      this.hiveMind = new HiveMind(hiveMindConfig);\n      const swarmId = await this.hiveMind.initialize();\n      \n      // Get access to integrated subsystems\n      this.consensusEngine = (this.hiveMind as any).consensus;\n      this.swarmOrchestrator = (this.hiveMind as any).orchestrator;\n      \n      this.logger.info(`Maestro hive mind initialized: ${swarmId}`);\n      return swarmId;\n      \n    } catch (error) {\n      this.logger.error(`Failed to initialize hive mind: ${error instanceof Error ? error.message : String(error)}`);\n      throw error;\n    }\n  }\n  \n  /**\n   * Create a new specification using the 3-file system\n   */\n  async createSpec(featureName: string, initialRequest: string): Promise<void> {\n    const featurePath = join(this.specsDirectory, featureName);\n    await mkdir(featurePath, { recursive: true });\n    \n    // Initialize workflow state\n    const workflowState: MaestroWorkflowState = {\n      featureName,\n      currentPhase: 'Requirements Clarification' as WorkflowPhase,\n      currentTaskIndex: 0,\n      status: 'paused',\n      lastActivity: new Date(),\n      history: [{\n        phase: 'Requirements Clarification' as WorkflowPhase,\n        status: 'in-progress' as 'completed' | 'failed' | 'in-progress' | 'approved',\n        timestamp: new Date()\n      }]\n    };\n    \n    this.maestroState.set(featureName, workflowState);\n    \n    // Create requirements.md\n    const requirementsContent = `# Requirements for ${featureName}\n\n## High-Level Request\n\n${initialRequest}\n\n## User Stories\n\n- As a user, I want ${initialRequest.toLowerCase()}, so that I can achieve my goals\n\n## Acceptance Criteria\n\n- [ ] Feature functions as described\n- [ ] Code is well-tested\n- [ ] Documentation is complete\n- [ ] Performance requirements are met\n\n## Technical Requirements\n\n- [ ] Integration with existing systems\n- [ ] Error handling and validation\n- [ ] Security considerations\n- [ ] Scalability considerations\n\n*Generated by Maestro Orchestrator*\n`;\n    \n    await writeFile(join(featurePath, 'requirements.md'), requirementsContent, 'utf8');\n    \n    this.logger.info(`Created specification for '${featureName}'`);\n    this.eventBus.emit('maestro:spec_created', { featureName });\n    \n    // Trigger agentic hooks for spec creation\n    if (this.agenticHooksInitialized) {\n      try {\n        await agenticHookManager.executeHooks('workflow-start', {\n          workflowId: `maestro-${featureName}`,\n          state: { featureName, phase: 'spec-creation' }\n        } as any, {\n          sessionId: `maestro-session-${Date.now()}`,\n          timestamp: Date.now(),\n          correlationId: `maestro-${featureName}`,\n          metadata: { featureName },\n          memory: { namespace: 'maestro', provider: 'memory', cache: new Map() },\n          neural: { modelId: 'default', patterns: null as any, training: null as any },\n          performance: { metrics: new Map(), bottlenecks: [], optimizations: [] }\n        } as AgenticHookContext);\n      } catch (error) {\n        this.logger.warn('Failed to execute agentic hooks:', error);\n      }\n    }\n  }\n  \n  /**\n   * Generate design using hive mind collective intelligence\n   */\n  async generateDesign(featureName: string): Promise<void> {\n    const state = this.maestroState.get(featureName);\n    if (!state) {\n      throw new SystemError(`No workflow state found for '${featureName}'`);\n    }\n    \n    const featurePath = join(this.specsDirectory, featureName);\n    const requirementsPath = join(featurePath, 'requirements.md');\n    \n    try {\n      await access(requirementsPath);\n    } catch {\n      throw new SystemError(`Requirements file not found for '${featureName}'. Run create-spec first.`);\n    }\n    \n    const requirementsContent = await readFile(requirementsPath, 'utf8');\n    \n    // Use hive mind for collective design generation if available\n    if (this.hiveMind && this.swarmOrchestrator) {\n      await this.generateDesignWithHiveMind(featureName, requirementsContent);\n    } else {\n      await this.generateDesignWithAgentManager(featureName, requirementsContent);\n    }\n    \n    // Update workflow state\n    state.currentPhase = 'Research & Design' as WorkflowPhase;\n    state.lastActivity = new Date();\n    state.history.push({\n      phase: 'Research & Design' as WorkflowPhase,\n      status: 'completed',\n      timestamp: new Date()\n    });\n    \n    this.logger.info(`Generated design for '${featureName}'`);\n    this.eventBus.emit('maestro:design_generated', { featureName });\n  }\n  \n  /**\n   * Generate design using hive mind collective intelligence\n   */\n  private async generateDesignWithHiveMind(featureName: string, requirements: string): Promise<void> {\n    const taskOptions: TaskSubmitOptions = {\n      description: `Generate comprehensive design for ${featureName}`,\n      priority: 'high',\n      strategy: 'adaptive',\n      requiredCapabilities: ['system_design' as AgentCapability, 'architecture' as AgentCapability, 'technical_writing' as AgentCapability],\n      metadata: {\n        maestroFeature: featureName,\n        maestroPhase: 'Research & Design',\n        requirements\n      }\n    };\n    \n    // Submit to hive mind orchestrator\n    const task = await this.hiveMind!.submitTask(taskOptions);\n    \n    // Wait for completion with timeout\n    const result = await this.waitForTaskCompletion(task.id, 300000); // 5 minutes\n    \n    // Create design.md with hive mind results\n    const designContent = `# Design for ${featureName}\n\n## Architecture Overview\n\n${result.architectureOverview || 'System architecture designed by hive mind collective intelligence.'}\n\n## Component Design\n\n${result.componentDesign || 'Detailed component breakdown generated through collaborative analysis.'}\n\n## API Design\n\n${result.apiDesign || 'RESTful API endpoints and data structures designed for optimal integration.'}\n\n## Database Schema\n\n${result.databaseSchema || 'Database schema optimized for performance and scalability.'}\n\n## Security Considerations\n\n${result.securityConsiderations || 'Security measures and access controls implemented throughout the system.'}\n\n## Performance Requirements\n\n${result.performanceRequirements || 'Performance benchmarks and optimization strategies defined.'}\n\n## Implementation Strategy\n\n${result.implementationStrategy || 'Step-by-step implementation approach with risk mitigation.'}\n\n*Generated by Maestro with Hive Mind Collective Intelligence*\n*Agents involved: ${result.agentCount || 'Multiple'} specialized agents*\n*Quality score: ${result.qualityScore ? (result.qualityScore * 100).toFixed(1) + '%' : 'High'}*\n`;\n    \n    const featurePath = join(this.specsDirectory, featureName);\n    await writeFile(join(featurePath, 'design.md'), designContent, 'utf8');\n  }\n  \n  /**\n   * Generate design using consistent agent management\n   */\n  private async generateDesignWithAgentManager(featureName: string, requirements: string): Promise<void> {\n    const designTask = {\n      id: `design-task-${featureName}-${Date.now()}`,\n      type: 'design-generation',\n      description: `Generate comprehensive design for feature '${featureName}'`,\n      input: {\n        featureName,\n        requirementsPath: join(this.specsDirectory, featureName, 'requirements.md'),\n        outputPath: join(this.specsDirectory, featureName, 'design.md'),\n        instructions: [\n          'Create comprehensive system architecture',\n          'Define API endpoints and data structures', \n          'Include security and performance considerations',\n          'Provide implementation strategy'\n        ]\n      },\n      priority: 80,\n      metadata: { \n        featureName, \n        maestroPhase: 'Research & Design',\n        outputPath: join(this.specsDirectory, featureName, 'design.md')\n      },\n    };\n\n    // Execute with configurable agent selection (minimal-change enhancement)\n    const optimalAgentTypes = await this.getOptimalAgentTypes(\n      ['design', 'architecture', 'analysis'],\n      'design-generation',\n      2\n    );\n    await this.executeTaskWithManagedAgent(\n      optimalAgentTypes,\n      designTask,\n      ['design', 'architecture', 'analysis']\n    );\n  }\n  \n  /**\n   * Generate tasks from design using intelligent decomposition\n   */\n  async generateTasks(featureName: string): Promise<void> {\n    const state = this.maestroState.get(featureName);\n    if (!state) {\n      throw new SystemError(`No workflow state found for '${featureName}'`);\n    }\n    \n    const featurePath = join(this.specsDirectory, featureName);\n    const designPath = join(featurePath, 'design.md');\n    \n    try {\n      await access(designPath);\n    } catch {\n      throw new SystemError(`Design file not found for '${featureName}'. Run generate-design first.`);\n    }\n    \n    const designContent = await readFile(designPath, 'utf8');\n    \n    // Generate tasks using simple task planner\n    const tasksContent = await this.generateTasksWithSimplePlanner(featureName, designContent);\n    await writeFile(join(featurePath, 'tasks.md'), tasksContent, 'utf8');\n    \n    // Update workflow state\n    state.currentPhase = 'Implementation Planning' as WorkflowPhase;\n    state.lastActivity = new Date();\n    state.history.push({\n      phase: 'Implementation Planning' as WorkflowPhase,\n      status: 'completed',\n      timestamp: new Date()\n    });\n    \n    this.logger.info(`Generated tasks for '${featureName}'`);\n    this.eventBus.emit('maestro:tasks_generated', { featureName });\n  }\n  \n  /**\n   * Generate tasks using consistent agent management pattern\n   */\n  private async generateTasksWithSimplePlanner(featureName: string, designContent: string): Promise<string> {\n    // Create task planning task with consistent structure\n    const taskPlanningTask = {\n      id: `task-planning-${featureName}-${Date.now()}`,\n      type: 'task-planning',\n      description: `Generate implementation tasks for feature '${featureName}'`,\n      input: {\n        featureName,\n        designContent,\n        requirementsPath: join(this.specsDirectory, featureName, 'requirements.md'),\n        outputPath: join(this.specsDirectory, featureName, 'tasks.md'),\n        instructions: [\n          'Analyze design content for implementation tasks',\n          'Create 5-8 specific, actionable tasks with acceptance criteria',\n          'Organize tasks by logical implementation sequence',\n          'Include dependency relationships between tasks',\n          'Format as markdown with checkboxes'\n        ]\n      },\n      priority: 85,\n      metadata: {\n        featureName,\n        maestroPhase: 'Implementation Planning',\n        outputPath: join(this.specsDirectory, featureName, 'tasks.md')\n      },\n    };\n\n    try {\n      this.logger.info(`Generating tasks for ${featureName} using consistent agent management`);\n      \n      // Execute with consistent agent management pattern\n      const result = await this.executeTaskPlanningWithManagedAgent(taskPlanningTask);\n      \n      this.logger.info(`Task plan generated successfully for ${featureName}`);\n      return result;\n      \n    } catch (error) {\n      this.logger.warn(`Agent-based task planning failed: ${error instanceof Error ? error.message : String(error)}, falling back to basic generation`);\n      return this.generateBasicTasksFromDesign(featureName, designContent);\n    }\n  }\n\n  /**\n   * Execute task planning with consistent agent management\n   */\n  private async executeTaskPlanningWithManagedAgent(taskPlanningTask: any): Promise<string> {\n    // Execute with configurable agent selection (minimal-change enhancement)\n    const optimalPlannerTypes = await this.getOptimalAgentTypes(\n      ['project-management', 'task-breakdown', 'planning'],\n      'task-planning',\n      1\n    );\n    await this.executeTaskWithManagedAgent(\n      optimalPlannerTypes, \n      taskPlanningTask,\n      ['project-management', 'task-breakdown', 'planning']\n    );\n    \n    // Try to read the generated output file\n    try {\n      const outputPath = taskPlanningTask.metadata.outputPath;\n      const generatedContent = await readFile(outputPath, 'utf8');\n      \n      // If content was generated, format and return it\n      if (generatedContent && generatedContent.length > 0) {\n        return this.formatTaskPlanningOutput(generatedContent, taskPlanningTask.input.featureName);\n      }\n    } catch (error) {\n      this.logger.debug(`Could not read task planning output: ${error instanceof Error ? error.message : String(error)}`);\n    }\n    \n    // Fallback to basic task generation\n    return this.generateBasicTasksFromDesign(taskPlanningTask.input.featureName, taskPlanningTask.input.designContent);\n  }\n\n  /**\n   * Format task planning output to consistent markdown\n   */\n  private formatTaskPlanningOutput(output: any, featureName: string): string {\n    if (typeof output === 'string' && output.includes('# Implementation Tasks')) {\n      return output;\n    }\n\n    // Handle structured output from agent\n    if (output && typeof output === 'object') {\n      const tasks = output.tasks || output.taskList || [];\n      const dependencies = output.dependencies || '';\n      const notes = output.notes || output.implementationNotes || '';\n      \n      if (Array.isArray(tasks) && tasks.length > 0) {\n        return `# Implementation Tasks for ${featureName}\n\n## Task Breakdown\n\n${tasks.map((task: any, index: number) => {\n  if (typeof task === 'string') {\n    return task.startsWith('- [ ]') ? task : `- [ ] ${task}`;\n  }\n  return `- [ ] ${task.description || task.name || `Task ${index + 1}`}`;\n}).join('\\n')}\n\n${dependencies ? `## Dependencies\\n${dependencies}\\n` : ''}\n${notes ? `## Implementation Notes\\n${notes}\\n` : ''}\n\n*Generated by Maestro Agent-Based Task Planning*`;\n      }\n    }\n\n    // Convert string output to proper format\n    if (typeof output === 'string') {\n      return `# Implementation Tasks for ${featureName}\n\n## Task Breakdown\n\n${output}\n\n*Generated by Maestro Agent-Based Task Planning*`;\n    }\n\n    return `# Implementation Tasks for ${featureName}\n\n## Task Breakdown\n\n${JSON.stringify(output, null, 2)}\n\n*Generated by Maestro Agent-Based Task Planning*`;\n  }\n\n  /**\n   * Fallback: Generate basic tasks from design content\n   */\n  private async generateBasicTasksFromDesign(featureName: string, designContent: string): Promise<string> {\n    // Extract key components from design for task generation\n    const tasks = [\n      '- [ ] Set up project structure and dependencies',\n      '- [ ] Implement core data models',\n      '- [ ] Create API endpoints',\n      '- [ ] Implement business logic',\n      '- [ ] Add input validation and error handling',\n      '- [ ] Implement security measures',\n      '- [ ] Add comprehensive tests',\n      '- [ ] Create documentation',\n      '- [ ] Performance optimization',\n      '- [ ] Integration testing'\n    ];\n    \n    return `# Implementation Tasks for ${featureName}\n\n## Task List\n\n${tasks.join('\\n')}\n\n## Notes\n\n- Tasks are ordered by dependency and logical implementation sequence\n- Each task should be completed and tested before moving to the next\n- Use \\`npx claude-flow maestro implement-task ${featureName} <task-number>\\` to implement each task\n\n*Generated by Maestro Basic Task Generation (Fallback)*\n`;\n  }\n  \n  /**\n   * Implement a specific task with optional consensus validation\n   */\n  async implementTask(featureName: string, taskId: number): Promise<void> {\n    const state = this.maestroState.get(featureName);\n    if (!state) {\n      throw new SystemError(`No workflow state found for '${featureName}'`);\n    }\n    \n    const featurePath = join(this.specsDirectory, featureName);\n    const tasksPath = join(featurePath, 'tasks.md');\n    \n    // Read and validate task\n    const tasksContent = await readFile(tasksPath, 'utf8');\n    const taskLines = tasksContent.split('\\n').filter(line => line.startsWith('- [ ]') || line.startsWith('- [x]'));\n    \n    if (taskId < 1 || taskId > taskLines.length) {\n      throw new SystemError(`Invalid task ID ${taskId} for feature '${featureName}'. Valid range: 1-${taskLines.length}`);\n    }\n    \n    const taskDescription = taskLines[taskId - 1].substring(taskLines[taskId - 1].indexOf(']') + 2).trim();\n    \n    // Use consensus validation if hive mind is available and enabled\n    if (this.consensusEngine && this.maestroConfig.enableHiveMind) {\n      await this.implementTaskWithConsensus(featureName, taskId, taskDescription);\n    } else {\n      await this.implementTaskDirect(featureName, taskId, taskDescription);\n    }\n    \n    // Mark task as completed\n    const updatedTasksContent = tasksContent.replace(\n      taskLines[taskId - 1],\n      taskLines[taskId - 1].replace('- [ ]', '- [x]')\n    );\n    await writeFile(tasksPath, updatedTasksContent, 'utf8');\n    \n    // Update workflow state\n    state.currentPhase = 'Task Execution' as WorkflowPhase;\n    state.currentTaskIndex = taskId;\n    state.lastActivity = new Date();\n    \n    this.logger.info(`Implemented task ${taskId} for '${featureName}': ${taskDescription}`);\n    this.eventBus.emit('maestro:task_implemented', { featureName, taskId, taskDescription });\n  }\n  \n  /**\n   * Implement task with hive mind consensus validation\n   */\n  private async implementTaskWithConsensus(featureName: string, taskId: number, taskDescription: string): Promise<void> {\n    // Create consensus proposal for task implementation\n    const proposal: ConsensusProposal = {\n      id: `maestro-task-${featureName}-${taskId}-${Date.now()}`,\n      swarmId: (this.hiveMind as any).id,\n      proposal: {\n        action: 'implement_task',\n        featureName,\n        taskId,\n        taskDescription,\n        details: `Implement task: ${taskDescription}`\n      },\n      requiredThreshold: this.maestroConfig.consensusThreshold || 0.66,\n      deadline: new Date(Date.now() + 300000), // 5 minutes\n      // creator: 'maestro-orchestrator', // Remove unsupported property\n      taskId: `maestro-task-${featureName}-${taskId}`,\n      metadata: {\n        type: 'task_implementation',\n        featureName,\n        taskId,\n        taskDescription\n      }\n    };\n    \n    // Submit proposal and wait for consensus\n    const proposalId = await this.consensusEngine!.createProposal(proposal);\n    const consensusResult = await this.waitForConsensusResult(proposalId, 300000);\n    \n    if (!consensusResult.achieved) {\n      throw new SystemError(`Consensus failed for task ${taskId}: ${consensusResult.reason || 'Insufficient votes'}`);\n    }\n    \n    this.logger.info(`Consensus achieved for task ${taskId}: ${consensusResult.finalRatio}`);\n    \n    // Proceed with implementation\n    await this.implementTaskDirect(featureName, taskId, taskDescription);\n  }\n  \n  /**\n   * Direct task implementation using consistent agent management\n   */\n  private async implementTaskDirect(featureName: string, taskId: number, taskDescription: string): Promise<void> {\n    const requirementsPath = join(this.specsDirectory, featureName, 'requirements.md');\n    const designPath = join(this.specsDirectory, featureName, 'design.md');\n    \n    const requirementsContent = await readFile(requirementsPath, 'utf8');\n    const designContent = await readFile(designPath, 'utf8');\n    \n    // Create implementation task with consistent structure\n    const implementationTask = {\n      id: `impl-task-${featureName}-${taskId}-${Date.now()}`,\n      type: 'task-implementation',\n      description: `Implement: ${taskDescription}`,\n      input: {\n        featureName,\n        taskId,\n        taskDescription,\n        requirements: requirementsContent,\n        design: designContent,\n        context: await this.getSteeringContext('developer')\n      },\n      priority: 90,\n      metadata: { \n        featureName, \n        taskId,\n        maestroPhase: 'Task Execution' \n      },\n    };\n\n    // Execute with configurable agent selection (minimal-change enhancement)\n    const optimalDeveloperTypes = await this.getOptimalAgentTypes(\n      ['implementation', 'coding', 'testing'],\n      'task-implementation',\n      2\n    );\n    await this.executeTaskWithManagedAgent(\n      optimalDeveloperTypes, \n      implementationTask,\n      ['implementation', 'coding', 'testing']\n    );\n  }\n  \n  /**\n   * Approve a workflow phase with optional consensus\n   */\n  async approvePhase(featureName: string): Promise<void> {\n    const state = this.maestroState.get(featureName);\n    if (!state) {\n      throw new SystemError(`No workflow state found for '${featureName}'`);\n    }\n    \n    const currentPhase = state.currentPhase;\n    \n    // Phase progression logic\n    const phaseProgression: Record<string, string> = {\n      'Requirements Clarification': 'Research & Design',\n      'Research & Design': 'Implementation Planning', \n      'Implementation Planning': 'Task Execution',\n      'Task Execution': 'Completed'\n    };\n    \n    const nextPhase = phaseProgression[currentPhase];\n    if (!nextPhase) {\n      throw new SystemError(`Cannot progress from phase '${currentPhase}'`);\n    }\n    \n    // Update state\n    state.currentPhase = nextPhase as WorkflowPhase;\n    state.lastActivity = new Date();\n    state.history.push({\n      phase: nextPhase as WorkflowPhase,\n      status: 'approved' as 'completed' | 'failed' | 'in-progress' | 'approved',\n      timestamp: new Date()\n    });\n    \n    this.logger.info(`Approved phase transition for '${featureName}': ${currentPhase} -> ${nextPhase}`);\n    this.eventBus.emit('maestro:phase_approved', { featureName, fromPhase: currentPhase, toPhase: nextPhase });\n  }\n  \n  /**\n   * Get current workflow state\n   */\n  getWorkflowState(featureName: string): MaestroWorkflowState | undefined {\n    return this.maestroState.get(featureName);\n  }\n  \n  /**\n   * Create steering document for project context\n   */\n  async createSteeringDocument(domain: string, content: string): Promise<void> {\n    await mkdir(this.steeringDirectory, { recursive: true });\n    const steeringPath = join(this.steeringDirectory, `${domain}.md`);\n    \n    const steeringContent = `# ${domain.charAt(0).toUpperCase() + domain.slice(1)} Steering Document\n\n${content}\n\n## Guidelines\n\n[Provide specific guidelines for the '${domain}' domain. E.g., API design, testing, security, coding style.]\n`;\n    \n    await writeFile(steeringPath, steeringContent, 'utf8');\n    this.logger.info(`Created steering document for '${domain}' at '${steeringPath}'`);\n  }\n  \n  /**\n   * Enhanced agent management with reuse-first strategy (minimal-change improvement)\n   * Single Responsibility: Manages agent lifecycle for any task type\n   * Open/Closed: Extensible for new agent types without modification\n   * Dependency Inversion: Depends on abstractions, not concrete implementations\n   */\n  private async executeTaskWithManagedAgent(\n    agentTypes: string[], \n    task: any, \n    capabilities: string[]\n  ): Promise<void> {\n    const acquiredAgents: string[] = [];\n    const spawnedAgents: string[] = [];\n    \n    try {\n      // Step 1: Try to reuse existing agents first (minimal-change enhancement)\n      const reusedAgents = await this.findReusableAgents(capabilities, agentTypes.length);\n      acquiredAgents.push(...reusedAgents);\n      \n      // Step 2: Spawn additional agents only if needed\n      const needed = agentTypes.length - reusedAgents.length;\n      if (needed > 0) {\n        const typesToSpawn = agentTypes.slice(0, needed);\n        \n        for (const agentType of typesToSpawn) {\n          try {\n            const agentProfile = this.createStandardAgentProfile(agentType, task.metadata?.featureName, capabilities);\n            const resolvedType = this.getAgentTemplate(agentType);\n            const agentId = await this.agentManager.createAgent(resolvedType, agentProfile);\n            await this.agentManager.startAgent(agentId);\n            \n            // Add to pool for future reuse\n            await this.addAgentToPool(agentId, resolvedType, capabilities);\n            \n            spawnedAgents.push(agentId);\n            acquiredAgents.push(agentId);\n          } catch (error) {\n            this.logger.warn(`Failed to spawn ${agentType} (resolved to ${this.getAgentTemplate(agentType)}): ${error instanceof Error ? error.message : String(error)}`);\n          }\n        }\n      }\n      \n      // Step 3: Mark reused agents as busy\n      await this.markAgentsAsBusy(reusedAgents, task.id);\n      \n      // Assign task to first available agent (fallback to default)\n      const assignedAgent = acquiredAgents[0] || 'default';\n      task.assignedAgent = assignedAgent;\n      \n      // Execute task through main orchestrator\n      await this.mainOrchestrator.assignTask(task);\n      \n      this.logger.info(`Task ${task.id} executed with ${reusedAgents.length} reused + ${spawnedAgents.length} spawned agents`);\n      \n    } finally {\n      // Step 4: Release agents back to pool (enhanced cleanup)\n      await this.releaseAgentsToPool(acquiredAgents, spawnedAgents);\n    }\n  }\n\n  /**\n   * Create standardized agent profile (KISS + SOLID principles + alias support)\n   */\n  private createStandardAgentProfile(agentType: string, featureName?: string, capabilities?: string[]): AgentProfile {\n    // Resolve agent type aliases\n    const resolvedType = this.getAgentTemplate(agentType);\n    \n    return {\n      id: `${agentType}-${featureName || 'default'}-${Date.now()}`,\n      name: `${agentType}${featureName ? ` for ${featureName}` : ''}`,\n      type: resolvedType, // Use resolved type for actual agent creation\n      capabilities: capabilities || this.getDefaultCapabilitiesForAgentType(agentType),\n      maxConcurrentTasks: 1,\n      priority: this.getDefaultPriorityForAgentType(agentType)\n    };\n  }\n\n  /**\n   * Agent alias mapping for backward compatibility (SOLID: Open/Closed)\n   */\n  private getAgentTemplate(agentType: string): string {\n    const aliasMap: Record<string, string> = {\n      'planner': 'task-planner',\n      'coder': 'developer'\n    };\n    return aliasMap[agentType] || agentType;\n  }\n\n  /**\n   * Get default capabilities based on agent type (KISS principle + comprehensive coverage)\n   */\n  private getDefaultCapabilitiesForAgentType(agentType: string): string[] {\n    const capabilityMap: Record<string, string[]> = {\n      // Core Architecture & Design\n      'design-architect': ['design', 'architecture', 'analysis'],\n      'system-architect': ['system-architecture', 'scalability', 'performance', 'distributed-systems'],\n      \n      // Development & Implementation\n      'developer': ['implementation', 'coding', 'testing'],\n      'coder': ['implementation', 'coding', 'testing'],\n      \n      // Project Management & Planning\n      'task-planner': ['project-management', 'task-breakdown', 'planning'],\n      'planner': ['project-management', 'task-breakdown', 'planning'],\n      \n      // Quality Assurance & Testing\n      'tester': ['testing', 'quality-assurance', 'test-automation'],\n      'reviewer': ['code-review', 'quality-assurance', 'analysis'],\n      \n      // Research & Analysis (previously unused templates now integrated)\n      'researcher': ['research', 'analysis', 'documentation'],\n      'analyst': ['analysis', 'data-processing', 'visualization'],\n      'requirements-engineer': ['requirements', 'documentation', 'analysis'],\n      'steering-author': ['documentation', 'governance', 'content-creation']\n    };\n    \n    return capabilityMap[agentType] || ['general'];\n  }\n\n  /**\n   * Get default priority based on agent type (KISS principle + comprehensive coverage)\n   */\n  private getDefaultPriorityForAgentType(agentType: string): number {\n    const priorityMap: Record<string, number> = {\n      // Critical Implementation (Highest Priority)\n      'developer': 90,\n      'coder': 90,\n      \n      // Architecture & Planning (High Priority)  \n      'design-architect': 85,\n      'system-architect': 85,\n      'task-planner': 85,\n      'planner': 85,\n      \n      // Quality Assurance (Medium-High Priority)\n      'tester': 80,\n      'reviewer': 75,\n      \n      // Research & Analysis (Medium Priority)\n      'researcher': 70,\n      'analyst': 70,\n      'requirements-engineer': 75,\n      \n      // Documentation & Governance (Lower Priority)\n      'steering-author': 65\n    };\n    \n    return priorityMap[agentType] || 70;\n  }\n\n  /**\n   * Get optimal agent types for task based on capabilities and availability (minimal-change enhancement)\n   * Replaces hardcoded agent arrays with intelligent selection\n   */\n  private async getOptimalAgentTypes(\n    requiredCapabilities: string[], \n    taskType: string,\n    maxAgents: number = 2\n  ): Promise<string[]> {\n    // Check for available agents with matching capabilities first\n    const availableAgents = await this.findReusableAgents(requiredCapabilities, maxAgents);\n    \n    if (availableAgents.length >= maxAgents) {\n      // Use existing agents if available\n      return availableAgents.map(agentId => {\n        const pooledAgent = this.agentPool.get(agentId);\n        return pooledAgent?.type || 'general';\n      });\n    }\n    \n    // Fallback to configured agent types based on capabilities and task type\n    return this.getConfiguredAgentTypes(requiredCapabilities, taskType, maxAgents);\n  }\n\n  /**\n   * Get configured agent types based on task requirements (replaces hardcoded arrays)\n   */\n  private getConfiguredAgentTypes(\n    requiredCapabilities: string[], \n    taskType: string,\n    maxAgents: number\n  ): string[] {\n    // Smart mapping based on task type and capabilities\n    const taskTypeAgents: Record<string, string[]> = {\n      'design-generation': ['design-architect', 'system-architect'],\n      'task-planning': ['task-planner', 'planner'],\n      'task-implementation': ['developer', 'coder'],\n      'code-review': ['reviewer', 'analyst'],\n      'research': ['researcher', 'analyst'],\n      'documentation': ['requirements-engineer', 'steering-author']\n    };\n\n    // Capability-based fallback mapping\n    const capabilityAgents: Record<string, string[]> = {\n      'design': ['design-architect', 'system-architect'],\n      'architecture': ['system-architect', 'design-architect'],\n      'system-architecture': ['system-architect'],\n      'implementation': ['developer', 'coder'],\n      'coding': ['developer', 'coder'],\n      'testing': ['tester', 'developer'],\n      'project-management': ['task-planner'],\n      'task-breakdown': ['task-planner'],\n      'planning': ['task-planner', 'planner'],\n      'analysis': ['analyst', 'researcher'],\n      'research': ['researcher', 'analyst'],\n      'documentation': ['requirements-engineer', 'steering-author'],\n      'code-review': ['reviewer', 'analyst'],\n      'quality-assurance': ['reviewer', 'tester']\n    };\n\n    // Try task type first\n    let agentTypes = taskTypeAgents[taskType] || [];\n\n    // If no direct task type match, build from capabilities\n    if (agentTypes.length === 0) {\n      const typeSet = new Set<string>();\n      \n      for (const capability of requiredCapabilities) {\n        const possibleTypes = capabilityAgents[capability] || [];\n        possibleTypes.forEach(type => typeSet.add(type));\n      }\n      \n      agentTypes = Array.from(typeSet);\n    }\n\n    // Fallback to general agent types\n    if (agentTypes.length === 0) {\n      agentTypes = ['developer', 'analyst']; // Safe defaults\n    }\n\n    // Limit to maxAgents\n    return agentTypes.slice(0, maxAgents);\n  }\n\n  /**\n   * Find reusable agents with matching capabilities (minimal-change enhancement)\n   */\n  private async findReusableAgents(requiredCapabilities: string[], maxAgents: number): Promise<string[]> {\n    const reusableAgents: string[] = [];\n    \n    try {\n      // Find agents with matching capabilities using capability index\n      let candidateIds: Set<string> | null = null;\n      \n      for (const capability of requiredCapabilities) {\n        const agentsWithCapability = this.capabilityIndex.get(capability);\n        \n        if (!agentsWithCapability || agentsWithCapability.size === 0) {\n          continue; // Skip if no agents have this capability\n        }\n        \n        if (candidateIds === null) {\n          candidateIds = new Set(agentsWithCapability);\n        } else {\n          // Find intersection - agents with ALL required capabilities\n          const intersection = new Set<string>();\n          candidateIds.forEach(id => {\n            if (agentsWithCapability.has(id)) {\n              intersection.add(id);\n            }\n          });\n          candidateIds = intersection;\n        }\n      }\n      \n      // Get available agents from candidates\n      if (candidateIds && candidateIds.size > 0) {\n        for (const agentId of candidateIds) {\n          if (reusableAgents.length >= maxAgents) break;\n          \n          const pooledAgent = this.agentPool.get(agentId);\n          if (pooledAgent && pooledAgent.status === 'available') {\n            reusableAgents.push(agentId);\n          }\n        }\n      }\n      \n      if (reusableAgents.length > 0) {\n        this.logger.info(`Found ${reusableAgents.length} reusable agents for capabilities: [${requiredCapabilities.join(', ')}]`);\n      }\n      \n    } catch (error) {\n      this.logger.warn(`Error finding reusable agents: ${error instanceof Error ? error.message : String(error)}`);\n    }\n    \n    return reusableAgents;\n  }\n\n  /**\n   * Add agent to pool for future reuse (minimal-change enhancement)\n   */\n  private async addAgentToPool(agentId: string, agentType: string, capabilities: string[]): Promise<void> {\n    try {\n      const pooledAgent: PooledAgent = {\n        id: agentId,\n        type: agentType,\n        capabilities: capabilities,\n        status: 'available',\n        lastUsed: new Date(),\n        usageCount: 0,\n        createdAt: new Date()\n      };\n      \n      // Add to main pool\n      this.agentPool.set(agentId, pooledAgent);\n      \n      // Update capability index for efficient lookup\n      for (const capability of capabilities) {\n        if (!this.capabilityIndex.has(capability)) {\n          this.capabilityIndex.set(capability, new Set());\n        }\n        this.capabilityIndex.get(capability)!.add(agentId);\n      }\n      \n      this.logger.debug(`Added agent ${agentId} (${agentType}) to pool with capabilities: [${capabilities.join(', ')}]`);\n      \n    } catch (error) {\n      this.logger.warn(`Failed to add agent ${agentId} to pool: ${error instanceof Error ? error.message : String(error)}`);\n    }\n  }\n\n  /**\n   * Mark agents as busy when assigned to tasks (minimal-change enhancement)\n   */\n  private async markAgentsAsBusy(agentIds: string[], taskId: string): Promise<void> {\n    for (const agentId of agentIds) {\n      try {\n        const pooledAgent = this.agentPool.get(agentId);\n        if (pooledAgent) {\n          pooledAgent.status = 'busy';\n          pooledAgent.lastUsed = new Date();\n          pooledAgent.usageCount++;\n        }\n      } catch (error) {\n        this.logger.warn(`Failed to mark agent ${agentId} as busy: ${error instanceof Error ? error.message : String(error)}`);\n      }\n    }\n  }\n\n  /**\n   * Enhanced agent cleanup with pool management (minimal-change enhancement)\n   */\n  private async releaseAgentsToPool(allAgents: string[], spawnedAgents: string[]): Promise<void> {\n    for (const agentId of allAgents) {\n      try {\n        const pooledAgent = this.agentPool.get(agentId);\n        \n        if (pooledAgent) {\n          // If agent was spawned for this task and has low usage, consider cleanup\n          const wasSpawned = spawnedAgents.includes(agentId);\n          const shouldKeepInPool = !wasSpawned || pooledAgent.usageCount > 1 || this.shouldKeepAgent(pooledAgent);\n          \n          if (shouldKeepInPool) {\n            // Return to pool as available\n            pooledAgent.status = 'available';\n            this.logger.debug(`Released agent ${agentId} back to pool (usage: ${pooledAgent.usageCount})`);\n          } else {\n            // Cleanup agent and remove from pool\n            await this.cleanupPooledAgent(agentId);\n          }\n        } else {\n          // Agent not in pool, cleanup immediately\n          await this.agentManager.stopAgent(agentId);\n        }\n        \n      } catch (error) {\n        this.logger.warn(`Failed to release agent ${agentId}: ${error instanceof Error ? error.message : String(error)}`);\n      }\n    }\n  }\n\n  /**\n   * Determine if agent should be kept in pool (simple heuristic)\n   */\n  private shouldKeepAgent(pooledAgent: PooledAgent): boolean {\n    const maxPoolSize = 10; // Simple pool size limit\n    const currentPoolSize = Array.from(this.agentPool.values()).filter(a => a.status === 'available').length;\n    \n    // Keep if under pool limit and recently used\n    const recentlyUsed = Date.now() - pooledAgent.lastUsed.getTime() < 1800000; // 30 minutes\n    return currentPoolSize < maxPoolSize && (recentlyUsed || pooledAgent.usageCount > 2);\n  }\n\n  /**\n   * Cleanup agent and remove from pool\n   */\n  private async cleanupPooledAgent(agentId: string): Promise<void> {\n    try {\n      const pooledAgent = this.agentPool.get(agentId);\n      \n      // Remove from capability index\n      if (pooledAgent) {\n        for (const capability of pooledAgent.capabilities) {\n          const capabilitySet = this.capabilityIndex.get(capability);\n          if (capabilitySet) {\n            capabilitySet.delete(agentId);\n            if (capabilitySet.size === 0) {\n              this.capabilityIndex.delete(capability);\n            }\n          }\n        }\n      }\n      \n      // Remove from pool\n      this.agentPool.delete(agentId);\n      \n      // Stop the actual agent\n      await this.agentManager.stopAgent(agentId);\n      \n      this.logger.debug(`Cleaned up agent ${agentId} and removed from pool`);\n      \n    } catch (error) {\n      this.logger.warn(`Failed to cleanup pooled agent ${agentId}: ${error instanceof Error ? error.message : String(error)}`);\n    }\n  }\n\n  /**\n   * Legacy cleanup method - now delegates to enhanced pool management\n   */\n  private async cleanupManagedAgents(agentIds: string[]): Promise<void> {\n    // For backward compatibility - cleanup all specified agents\n    for (const agentId of agentIds) {\n      try {\n        await this.cleanupPooledAgent(agentId);\n      } catch (error) {\n        this.logger.warn(`Failed to cleanup agent ${agentId}: ${error instanceof Error ? error.message : String(error)}`);\n      }\n    }\n  }\n\n  /**\n   * Shutdown agent pool and cleanup all agents (minimal-change enhancement)\n   */\n  private async shutdownAgentPool(): Promise<void> {\n    this.logger.info(`Shutting down agent pool with ${this.agentPool.size} agents`);\n    \n    const allAgentIds = Array.from(this.agentPool.keys());\n    \n    // Cleanup all pooled agents\n    for (const agentId of allAgentIds) {\n      try {\n        await this.cleanupPooledAgent(agentId);\n      } catch (error) {\n        this.logger.warn(`Failed to cleanup pooled agent ${agentId} during shutdown: ${error instanceof Error ? error.message : String(error)}`);\n      }\n    }\n    \n    // Clear data structures\n    this.agentPool.clear();\n    this.capabilityIndex.clear();\n    \n    this.logger.info('Agent pool shutdown complete');\n  }\n\n  /**\n   * Get agent pool statistics (useful for monitoring and debugging)\n   */\n  getAgentPoolStats(): {\n    totalAgents: number;\n    availableAgents: number;\n    busyAgents: number;\n    averageUsage: number;\n    capabilitiesCovered: number;\n    reuseRate: number;\n  } {\n    const agents = Array.from(this.agentPool.values());\n    const totalAgents = agents.length;\n    \n    if (totalAgents === 0) {\n      return {\n        totalAgents: 0,\n        availableAgents: 0,\n        busyAgents: 0,\n        averageUsage: 0,\n        capabilitiesCovered: 0,\n        reuseRate: 0\n      };\n    }\n    \n    const availableAgents = agents.filter(a => a.status === 'available').length;\n    const busyAgents = agents.filter(a => a.status === 'busy').length;\n    const averageUsage = agents.reduce((sum, a) => sum + a.usageCount, 0) / totalAgents;\n    const capabilitiesCovered = this.capabilityIndex.size;\n    \n    // Calculate reuse rate (agents with usage > 1)\n    const reusedAgents = agents.filter(a => a.usageCount > 1).length;\n    const reuseRate = totalAgents > 0 ? reusedAgents / totalAgents : 0;\n    \n    return {\n      totalAgents,\n      availableAgents,\n      busyAgents,\n      averageUsage,\n      capabilitiesCovered,\n      reuseRate\n    };\n  }\n\n  /**\n   * Get steering context for agent types\n   */\n  async getSteeringContext(agentType: string, filePath?: string): Promise<string> {\n    let context = '';\n    const steeringFiles = ['product.md', 'tech.md', 'structure.md'];\n    \n    for (const file of steeringFiles) {\n      try {\n        context += await readFile(join(this.steeringDirectory, file), 'utf8') + '\\n\\n---\\n\\n';\n      } catch (error) {\n        this.logger.warn(`Could not read steering file ${file}: ${error instanceof Error ? error.message : String(error)}`);\n      }\n    }\n    \n    return context || 'No steering context available.';\n  }\n  \n  /**\n   * Initialize agentic hooks system\n   */\n  private async initializeAgenticHooks(): Promise<void> {\n    if (!this.agenticHooksInitialized) {\n      try {\n        await initializeAgenticFlowHooks();\n        this.agenticHooksInitialized = true;\n        this.logger.info('Agentic hooks system initialized for Maestro');\n        \n        // Register Maestro-specific hooks\n        this.registerMaestroHooks();\n      } catch (error) {\n        this.logger.error('Failed to initialize agentic hooks:', error);\n      }\n    }\n  }\n  \n  /**\n   * Register Maestro-specific hooks\n   */\n  private registerMaestroHooks(): void {\n    // Register workflow hooks\n    agenticHookManager.register({\n      id: 'maestro-spec-created',\n      type: 'workflow-start',\n      handler: async (payload, context) => {\n        this.logger.info('Maestro spec creation hook triggered');\n        return { continue: true };\n      },\n      priority: 50\n    });\n    \n    agenticHookManager.register({\n      id: 'maestro-task-completed', \n      type: 'workflow-step',\n      handler: async (payload, context) => {\n        this.logger.info('Maestro task completion hook triggered');\n        return { continue: true };\n      },\n      priority: 50\n    });\n    \n    this.logger.info('Maestro-specific hooks registered');\n  }\n  \n  /**\n   * Setup event handlers\n   */\n  private setupEventHandlers(): void {\n    this.eventBus.on('maestro:spec_created', this.handleSpecCreated.bind(this));\n    this.eventBus.on('maestro:phase_approved', this.handlePhaseApproved.bind(this));\n    this.eventBus.on('maestro:task_implemented', this.handleTaskImplemented.bind(this));\n  }\n  \n  /**\n   * Event handlers\n   */\n  private async handleSpecCreated(data: any): Promise<void> {\n    this.logger.info(`Spec created event: ${JSON.stringify(data)}`);\n  }\n  \n  private async handlePhaseApproved(data: any): Promise<void> {\n    this.logger.info(`Phase approved event: ${JSON.stringify(data)}`);\n  }\n  \n  private async handleTaskImplemented(data: any): Promise<void> {\n    this.logger.info(`Task implemented event: ${JSON.stringify(data)}`);\n  }\n  \n  /**\n   * Utility: Wait for task completion in hive mind\n   */\n  private async waitForTaskCompletion(taskId: string, timeoutMs: number = 300000): Promise<any> {\n    return new Promise((resolve, reject) => {\n      const timeout = setTimeout(() => {\n        reject(new Error(`Task timeout: ${taskId}`));\n      }, timeoutMs);\n      \n      const checkInterval = setInterval(async () => {\n        try {\n          const task = await this.hiveMind!.getTask(taskId);\n          \n          if (task.status === 'completed') {\n            clearTimeout(timeout);\n            clearInterval(checkInterval);\n            resolve(task.result ? JSON.parse(task.result) : {});\n          } else if (task.status === 'failed') {\n            clearTimeout(timeout);\n            clearInterval(checkInterval);\n            reject(new Error(`Task failed: ${task.error || 'Unknown error'}`));\n          }\n        } catch (error) {\n          clearTimeout(timeout);\n          clearInterval(checkInterval);\n          reject(error);\n        }\n      }, 2000);\n    });\n  }\n  \n  /**\n   * Utility: Wait for consensus result\n   */\n  private async waitForConsensusResult(proposalId: string, timeoutMs: number): Promise<any> {\n    return new Promise((resolve, reject) => {\n      const timeout = setTimeout(() => {\n        reject(new Error(`Consensus timeout for proposal ${proposalId}`));\n      }, timeoutMs);\n      \n      const checkInterval = setInterval(async () => {\n        try {\n          const status = await this.consensusEngine!.getProposalStatus(proposalId);\n          \n          if (status.status === 'achieved') {\n            clearTimeout(timeout);\n            clearInterval(checkInterval);\n            resolve({\n              achieved: true,\n              finalRatio: status.currentRatio,\n              reason: 'Consensus achieved'\n            });\n          } else if (status.status === 'failed') {\n            clearTimeout(timeout);\n            clearInterval(checkInterval);\n            resolve({\n              achieved: false,\n              finalRatio: status.currentRatio,\n              reason: 'Consensus failed'\n            });\n          }\n        } catch (error) {\n          clearTimeout(timeout);\n          clearInterval(checkInterval);\n          reject(error);\n        }\n      }, 1000);\n    });\n  }\n  \n  /**\n   * Shutdown orchestrator and cleanup resources\n   */\n  async shutdown(): Promise<void> {\n    this.logger.info('Shutting down Maestro Orchestrator');\n    \n    // Close file watchers\n    for (const [featureName, watcher] of this.fileWatchers) {\n      await watcher.close();\n      this.logger.info(`Closed file watcher for '${featureName}'`);\n    }\n    \n    // Shutdown agentic hooks if initialized\n    if (this.agenticHooksInitialized) {\n      // Unregister Maestro hooks\n      try {\n        agenticHookManager.unregister('maestro-spec-created');\n        agenticHookManager.unregister('maestro-task-completed');\n      } catch (error) {\n        this.logger.warn('Failed to unregister Maestro hooks:', error);\n      }\n    }\n\n    // Shutdown hive mind if initialized\n    if (this.hiveMind) {\n      await this.hiveMind.shutdown();\n      this.logger.info('Hive mind shutdown complete');\n    }\n    \n    // Cleanup agent pool (minimal-change enhancement)\n    await this.shutdownAgentPool();\n    \n    // Task planner removed - using direct agent management\n    \n    this.logger.info('Maestro Orchestrator shutdown complete');\n  }\n}"],
      version: 3
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "fb8f75c4c80f49e6568c87941d13d6e1f37e07d4"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_hj6l6sdbd = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_hj6l6sdbd();
/**
 * Maestro Orchestrator - Refactored and Cleaned Up
 *
 * A specifications-driven development orchestrator that integrates seamlessly
 * with the existing claude-flow hive mind infrastructure for collective intelligence,
 * consensus-based decision making, and advanced workflow automation.
 *
 * This refactored version eliminates duplicate implementations and leverages
 * the proven hive mind system for enhanced reliability and performance.
 */
import { EventEmitter } from 'events';
import { join } from 'path';
import { readFile, writeFile, mkdir, access } from 'fs/promises';
// Import agentic-flow hooks system
import { agenticHookManager, initializeAgenticFlowHooks } from '../services/agentic-flow-hooks/index.js';
import { SystemError } from '../utils/errors.js';
// Existing hive mind infrastructure (proven and robust)
import { HiveMind } from '../hive-mind/core/HiveMind.js';
/**
 * Main Maestro Orchestrator class
 * Integrates with existing hive mind infrastructure instead of duplicating it
 */
export class MaestroOrchestrator extends EventEmitter {
  config;
  eventBus;
  logger;
  memoryManager;
  agentManager;
  mainOrchestrator;
  maestroConfig;
  maestroState =
  /* istanbul ignore next */
  (cov_hj6l6sdbd().s[0]++, new Map());
  specsDirectory;
  steeringDirectory;
  // Hive mind integration (leveraging existing robust systems)
  hiveMind;
  consensusEngine;
  swarmOrchestrator;
  // Removed SimpleTaskPlanner - using direct agent management
  agenticHooksInitialized =
  /* istanbul ignore next */
  (cov_hj6l6sdbd().s[1]++, false);
  // File watchers for living documentation
  fileWatchers =
  /* istanbul ignore next */
  (cov_hj6l6sdbd().s[2]++, new Map());
  // Simple agent pool for reuse (minimal-change enhancement)
  agentPool =
  /* istanbul ignore next */
  (cov_hj6l6sdbd().s[3]++, new Map());
  capabilityIndex =
  /* istanbul ignore next */
  (cov_hj6l6sdbd().s[4]++, new Map());
  constructor(config, eventBus, logger, memoryManager, agentManager, mainOrchestrator, maestroConfig =
  /* istanbul ignore next */
  (cov_hj6l6sdbd().b[0][0]++, {})) {
    /* istanbul ignore next */
    cov_hj6l6sdbd().f[0]++;
    cov_hj6l6sdbd().s[5]++;
    super();
    /* istanbul ignore next */
    cov_hj6l6sdbd().s[6]++;
    this.config = config;
    /* istanbul ignore next */
    cov_hj6l6sdbd().s[7]++;
    this.eventBus = eventBus;
    /* istanbul ignore next */
    cov_hj6l6sdbd().s[8]++;
    this.logger = logger;
    /* istanbul ignore next */
    cov_hj6l6sdbd().s[9]++;
    this.memoryManager = memoryManager;
    /* istanbul ignore next */
    cov_hj6l6sdbd().s[10]++;
    this.agentManager = agentManager;
    /* istanbul ignore next */
    cov_hj6l6sdbd().s[11]++;
    this.mainOrchestrator = mainOrchestrator;
    /* istanbul ignore next */
    cov_hj6l6sdbd().s[12]++;
    this.maestroConfig = maestroConfig;
    /* istanbul ignore next */
    cov_hj6l6sdbd().s[13]++;
    this.specsDirectory = join(process.cwd(), '.claude', 'claude-flow', 'maestro', 'specs');
    /* istanbul ignore next */
    cov_hj6l6sdbd().s[14]++;
    this.steeringDirectory = join(process.cwd(), '.claude', 'claude-flow', 'maestro', 'steering');
    // Initialize agentic-flow hooks if enabled
    /* istanbul ignore next */
    cov_hj6l6sdbd().s[15]++;
    if (this.maestroConfig.enableAgentHooks) {
      /* istanbul ignore next */
      cov_hj6l6sdbd().b[1][0]++;
      cov_hj6l6sdbd().s[16]++;
      this.initializeAgenticHooks();
    } else
    /* istanbul ignore next */
    {
      cov_hj6l6sdbd().b[1][1]++;
    }
    cov_hj6l6sdbd().s[17]++;
    this.setupEventHandlers();
    /* istanbul ignore next */
    cov_hj6l6sdbd().s[18]++;
    this.logger.info('Maestro Orchestrator initialized');
  }
  /**
   * Initialize hive mind integration for advanced features
   */
  async initializeHiveMind() {
    /* istanbul ignore next */
    cov_hj6l6sdbd().f[1]++;
    cov_hj6l6sdbd().s[19]++;
    if (!this.maestroConfig.enableHiveMind) {
      /* istanbul ignore next */
      cov_hj6l6sdbd().b[2][0]++;
      cov_hj6l6sdbd().s[20]++;
      this.logger.info('Hive mind integration disabled');
      /* istanbul ignore next */
      cov_hj6l6sdbd().s[21]++;
      return null;
    } else
    /* istanbul ignore next */
    {
      cov_hj6l6sdbd().b[2][1]++;
    }
    cov_hj6l6sdbd().s[22]++;
    try {
      // Configure hive mind for Maestro workflows
      const hiveMindConfig =
      /* istanbul ignore next */
      (cov_hj6l6sdbd().s[23]++, {
        name: 'maestro-collective',
        topology: 'hierarchical',
        queenMode: 'strategic',
        maxAgents:
        /* istanbul ignore next */
        (cov_hj6l6sdbd().b[3][0]++, this.maestroConfig.maxAgents) ||
        /* istanbul ignore next */
        (cov_hj6l6sdbd().b[3][1]++, 8),
        consensusThreshold:
        /* istanbul ignore next */
        (cov_hj6l6sdbd().b[4][0]++, this.maestroConfig.consensusThreshold) ||
        /* istanbul ignore next */
        (cov_hj6l6sdbd().b[4][1]++, 0.66),
        memoryTTL: 86400000,
        // 24 hours
        autoSpawn: true,
        enableConsensus: true,
        enableMemory: true,
        enableCommunication: true
      });
      // Initialize hive mind with existing infrastructure
      /* istanbul ignore next */
      cov_hj6l6sdbd().s[24]++;
      this.hiveMind = new HiveMind(hiveMindConfig);
      const swarmId =
      /* istanbul ignore next */
      (cov_hj6l6sdbd().s[25]++, await this.hiveMind.initialize());
      // Get access to integrated subsystems
      /* istanbul ignore next */
      cov_hj6l6sdbd().s[26]++;
      this.consensusEngine = this.hiveMind.consensus;
      /* istanbul ignore next */
      cov_hj6l6sdbd().s[27]++;
      this.swarmOrchestrator = this.hiveMind.orchestrator;
      /* istanbul ignore next */
      cov_hj6l6sdbd().s[28]++;
      this.logger.info(`Maestro hive mind initialized: ${swarmId}`);
      /* istanbul ignore next */
      cov_hj6l6sdbd().s[29]++;
      return swarmId;
    } catch (error) {
      /* istanbul ignore next */
      cov_hj6l6sdbd().s[30]++;
      this.logger.error(`Failed to initialize hive mind: ${error instanceof Error ?
      /* istanbul ignore next */
      (cov_hj6l6sdbd().b[5][0]++, error.message) :
      /* istanbul ignore next */
      (cov_hj6l6sdbd().b[5][1]++, String(error))}`);
      /* istanbul ignore next */
      cov_hj6l6sdbd().s[31]++;
      throw error;
    }
  }
  /**
   * Create a new specification using the 3-file system
   */
  async createSpec(featureName, initialRequest) {
    /* istanbul ignore next */
    cov_hj6l6sdbd().f[2]++;
    const featurePath =
    /* istanbul ignore next */
    (cov_hj6l6sdbd().s[32]++, join(this.specsDirectory, featureName));
    /* istanbul ignore next */
    cov_hj6l6sdbd().s[33]++;
    await mkdir(featurePath, {
      recursive: true
    });
    // Initialize workflow state
    const workflowState =
    /* istanbul ignore next */
    (cov_hj6l6sdbd().s[34]++, {
      featureName,
      currentPhase: 'Requirements Clarification',
      currentTaskIndex: 0,
      status: 'paused',
      lastActivity: new Date(),
      history: [{
        phase: 'Requirements Clarification',
        status: 'in-progress',
        timestamp: new Date()
      }]
    });
    /* istanbul ignore next */
    cov_hj6l6sdbd().s[35]++;
    this.maestroState.set(featureName, workflowState);
    // Create requirements.md
    const requirementsContent =
    /* istanbul ignore next */
    (cov_hj6l6sdbd().s[36]++, `# Requirements for ${featureName}

## High-Level Request

${initialRequest}

## User Stories

- As a user, I want ${initialRequest.toLowerCase()}, so that I can achieve my goals

## Acceptance Criteria

- [ ] Feature functions as described
- [ ] Code is well-tested
- [ ] Documentation is complete
- [ ] Performance requirements are met

## Technical Requirements

- [ ] Integration with existing systems
- [ ] Error handling and validation
- [ ] Security considerations
- [ ] Scalability considerations

*Generated by Maestro Orchestrator*
`);
    /* istanbul ignore next */
    cov_hj6l6sdbd().s[37]++;
    await writeFile(join(featurePath, 'requirements.md'), requirementsContent, 'utf8');
    /* istanbul ignore next */
    cov_hj6l6sdbd().s[38]++;
    this.logger.info(`Created specification for '${featureName}'`);
    /* istanbul ignore next */
    cov_hj6l6sdbd().s[39]++;
    this.eventBus.emit('maestro:spec_created', {
      featureName
    });
    // Trigger agentic hooks for spec creation
    /* istanbul ignore next */
    cov_hj6l6sdbd().s[40]++;
    if (this.agenticHooksInitialized) {
      /* istanbul ignore next */
      cov_hj6l6sdbd().b[6][0]++;
      cov_hj6l6sdbd().s[41]++;
      try {
        /* istanbul ignore next */
        cov_hj6l6sdbd().s[42]++;
        await agenticHookManager.executeHooks('workflow-start', {
          workflowId: `maestro-${featureName}`,
          state: {
            featureName,
            phase: 'spec-creation'
          }
        }, {
          sessionId: `maestro-session-${Date.now()}`,
          timestamp: Date.now(),
          correlationId: `maestro-${featureName}`,
          metadata: {
            featureName
          },
          memory: {
            namespace: 'maestro',
            provider: 'memory',
            cache: new Map()
          },
          neural: {
            modelId: 'default',
            patterns: null,
            training: null
          },
          performance: {
            metrics: new Map(),
            bottlenecks: [],
            optimizations: []
          }
        });
      } catch (error) {
        /* istanbul ignore next */
        cov_hj6l6sdbd().s[43]++;
        this.logger.warn('Failed to execute agentic hooks:', error);
      }
    } else
    /* istanbul ignore next */
    {
      cov_hj6l6sdbd().b[6][1]++;
    }
  }
  /**
   * Generate design using hive mind collective intelligence
   */
  async generateDesign(featureName) {
    /* istanbul ignore next */
    cov_hj6l6sdbd().f[3]++;
    const state =
    /* istanbul ignore next */
    (cov_hj6l6sdbd().s[44]++, this.maestroState.get(featureName));
    /* istanbul ignore next */
    cov_hj6l6sdbd().s[45]++;
    if (!state) {
      /* istanbul ignore next */
      cov_hj6l6sdbd().b[7][0]++;
      cov_hj6l6sdbd().s[46]++;
      throw new SystemError(`No workflow state found for '${featureName}'`);
    } else
    /* istanbul ignore next */
    {
      cov_hj6l6sdbd().b[7][1]++;
    }
    const featurePath =
    /* istanbul ignore next */
    (cov_hj6l6sdbd().s[47]++, join(this.specsDirectory, featureName));
    const requirementsPath =
    /* istanbul ignore next */
    (cov_hj6l6sdbd().s[48]++, join(featurePath, 'requirements.md'));
    /* istanbul ignore next */
    cov_hj6l6sdbd().s[49]++;
    try {
      /* istanbul ignore next */
      cov_hj6l6sdbd().s[50]++;
      await access(requirementsPath);
    } catch {
      /* istanbul ignore next */
      cov_hj6l6sdbd().s[51]++;
      throw new SystemError(`Requirements file not found for '${featureName}'. Run create-spec first.`);
    }
    const requirementsContent =
    /* istanbul ignore next */
    (cov_hj6l6sdbd().s[52]++, await readFile(requirementsPath, 'utf8'));
    // Use hive mind for collective design generation if available
    /* istanbul ignore next */
    cov_hj6l6sdbd().s[53]++;
    if (
    /* istanbul ignore next */
    (cov_hj6l6sdbd().b[9][0]++, this.hiveMind) &&
    /* istanbul ignore next */
    (cov_hj6l6sdbd().b[9][1]++, this.swarmOrchestrator)) {
      /* istanbul ignore next */
      cov_hj6l6sdbd().b[8][0]++;
      cov_hj6l6sdbd().s[54]++;
      await this.generateDesignWithHiveMind(featureName, requirementsContent);
    } else {
      /* istanbul ignore next */
      cov_hj6l6sdbd().b[8][1]++;
      cov_hj6l6sdbd().s[55]++;
      await this.generateDesignWithAgentManager(featureName, requirementsContent);
    }
    // Update workflow state
    /* istanbul ignore next */
    cov_hj6l6sdbd().s[56]++;
    state.currentPhase = 'Research & Design';
    /* istanbul ignore next */
    cov_hj6l6sdbd().s[57]++;
    state.lastActivity = new Date();
    /* istanbul ignore next */
    cov_hj6l6sdbd().s[58]++;
    state.history.push({
      phase: 'Research & Design',
      status: 'completed',
      timestamp: new Date()
    });
    /* istanbul ignore next */
    cov_hj6l6sdbd().s[59]++;
    this.logger.info(`Generated design for '${featureName}'`);
    /* istanbul ignore next */
    cov_hj6l6sdbd().s[60]++;
    this.eventBus.emit('maestro:design_generated', {
      featureName
    });
  }
  /**
   * Generate design using hive mind collective intelligence
   */
  async generateDesignWithHiveMind(featureName, requirements) {
    /* istanbul ignore next */
    cov_hj6l6sdbd().f[4]++;
    const taskOptions =
    /* istanbul ignore next */
    (cov_hj6l6sdbd().s[61]++, {
      description: `Generate comprehensive design for ${featureName}`,
      priority: 'high',
      strategy: 'adaptive',
      requiredCapabilities: ['system_design', 'architecture', 'technical_writing'],
      metadata: {
        maestroFeature: featureName,
        maestroPhase: 'Research & Design',
        requirements
      }
    });
    // Submit to hive mind orchestrator
    const task =
    /* istanbul ignore next */
    (cov_hj6l6sdbd().s[62]++, await this.hiveMind.submitTask(taskOptions));
    // Wait for completion with timeout
    const result =
    /* istanbul ignore next */
    (cov_hj6l6sdbd().s[63]++, await this.waitForTaskCompletion(task.id, 300000)); // 5 minutes
    // Create design.md with hive mind results
    const designContent =
    /* istanbul ignore next */
    (cov_hj6l6sdbd().s[64]++, `# Design for ${featureName}

## Architecture Overview

${
    /* istanbul ignore next */
    (cov_hj6l6sdbd().b[10][0]++, result.architectureOverview) ||
    /* istanbul ignore next */
    (cov_hj6l6sdbd().b[10][1]++, 'System architecture designed by hive mind collective intelligence.')}

## Component Design

${
    /* istanbul ignore next */
    (cov_hj6l6sdbd().b[11][0]++, result.componentDesign) ||
    /* istanbul ignore next */
    (cov_hj6l6sdbd().b[11][1]++, 'Detailed component breakdown generated through collaborative analysis.')}

## API Design

${
    /* istanbul ignore next */
    (cov_hj6l6sdbd().b[12][0]++, result.apiDesign) ||
    /* istanbul ignore next */
    (cov_hj6l6sdbd().b[12][1]++, 'RESTful API endpoints and data structures designed for optimal integration.')}

## Database Schema

${
    /* istanbul ignore next */
    (cov_hj6l6sdbd().b[13][0]++, result.databaseSchema) ||
    /* istanbul ignore next */
    (cov_hj6l6sdbd().b[13][1]++, 'Database schema optimized for performance and scalability.')}

## Security Considerations

${
    /* istanbul ignore next */
    (cov_hj6l6sdbd().b[14][0]++, result.securityConsiderations) ||
    /* istanbul ignore next */
    (cov_hj6l6sdbd().b[14][1]++, 'Security measures and access controls implemented throughout the system.')}

## Performance Requirements

${
    /* istanbul ignore next */
    (cov_hj6l6sdbd().b[15][0]++, result.performanceRequirements) ||
    /* istanbul ignore next */
    (cov_hj6l6sdbd().b[15][1]++, 'Performance benchmarks and optimization strategies defined.')}

## Implementation Strategy

${
    /* istanbul ignore next */
    (cov_hj6l6sdbd().b[16][0]++, result.implementationStrategy) ||
    /* istanbul ignore next */
    (cov_hj6l6sdbd().b[16][1]++, 'Step-by-step implementation approach with risk mitigation.')}

*Generated by Maestro with Hive Mind Collective Intelligence*
*Agents involved: ${
    /* istanbul ignore next */
    (cov_hj6l6sdbd().b[17][0]++, result.agentCount) ||
    /* istanbul ignore next */
    (cov_hj6l6sdbd().b[17][1]++, 'Multiple')} specialized agents*
*Quality score: ${result.qualityScore ?
    /* istanbul ignore next */
    (cov_hj6l6sdbd().b[18][0]++, (result.qualityScore * 100).toFixed(1) + '%') :
    /* istanbul ignore next */
    (cov_hj6l6sdbd().b[18][1]++, 'High')}*
`);
    const featurePath =
    /* istanbul ignore next */
    (cov_hj6l6sdbd().s[65]++, join(this.specsDirectory, featureName));
    /* istanbul ignore next */
    cov_hj6l6sdbd().s[66]++;
    await writeFile(join(featurePath, 'design.md'), designContent, 'utf8');
  }
  /**
   * Generate design using consistent agent management
   */
  async generateDesignWithAgentManager(featureName, requirements) {
    /* istanbul ignore next */
    cov_hj6l6sdbd().f[5]++;
    const designTask =
    /* istanbul ignore next */
    (cov_hj6l6sdbd().s[67]++, {
      id: `design-task-${featureName}-${Date.now()}`,
      type: 'design-generation',
      description: `Generate comprehensive design for feature '${featureName}'`,
      input: {
        featureName,
        requirementsPath: join(this.specsDirectory, featureName, 'requirements.md'),
        outputPath: join(this.specsDirectory, featureName, 'design.md'),
        instructions: ['Create comprehensive system architecture', 'Define API endpoints and data structures', 'Include security and performance considerations', 'Provide implementation strategy']
      },
      priority: 80,
      metadata: {
        featureName,
        maestroPhase: 'Research & Design',
        outputPath: join(this.specsDirectory, featureName, 'design.md')
      }
    });
    // Execute with configurable agent selection (minimal-change enhancement)
    const optimalAgentTypes =
    /* istanbul ignore next */
    (cov_hj6l6sdbd().s[68]++, await this.getOptimalAgentTypes(['design', 'architecture', 'analysis'], 'design-generation', 2));
    /* istanbul ignore next */
    cov_hj6l6sdbd().s[69]++;
    await this.executeTaskWithManagedAgent(optimalAgentTypes, designTask, ['design', 'architecture', 'analysis']);
  }
  /**
   * Generate tasks from design using intelligent decomposition
   */
  async generateTasks(featureName) {
    /* istanbul ignore next */
    cov_hj6l6sdbd().f[6]++;
    const state =
    /* istanbul ignore next */
    (cov_hj6l6sdbd().s[70]++, this.maestroState.get(featureName));
    /* istanbul ignore next */
    cov_hj6l6sdbd().s[71]++;
    if (!state) {
      /* istanbul ignore next */
      cov_hj6l6sdbd().b[19][0]++;
      cov_hj6l6sdbd().s[72]++;
      throw new SystemError(`No workflow state found for '${featureName}'`);
    } else
    /* istanbul ignore next */
    {
      cov_hj6l6sdbd().b[19][1]++;
    }
    const featurePath =
    /* istanbul ignore next */
    (cov_hj6l6sdbd().s[73]++, join(this.specsDirectory, featureName));
    const designPath =
    /* istanbul ignore next */
    (cov_hj6l6sdbd().s[74]++, join(featurePath, 'design.md'));
    /* istanbul ignore next */
    cov_hj6l6sdbd().s[75]++;
    try {
      /* istanbul ignore next */
      cov_hj6l6sdbd().s[76]++;
      await access(designPath);
    } catch {
      /* istanbul ignore next */
      cov_hj6l6sdbd().s[77]++;
      throw new SystemError(`Design file not found for '${featureName}'. Run generate-design first.`);
    }
    const designContent =
    /* istanbul ignore next */
    (cov_hj6l6sdbd().s[78]++, await readFile(designPath, 'utf8'));
    // Generate tasks using simple task planner
    const tasksContent =
    /* istanbul ignore next */
    (cov_hj6l6sdbd().s[79]++, await this.generateTasksWithSimplePlanner(featureName, designContent));
    /* istanbul ignore next */
    cov_hj6l6sdbd().s[80]++;
    await writeFile(join(featurePath, 'tasks.md'), tasksContent, 'utf8');
    // Update workflow state
    /* istanbul ignore next */
    cov_hj6l6sdbd().s[81]++;
    state.currentPhase = 'Implementation Planning';
    /* istanbul ignore next */
    cov_hj6l6sdbd().s[82]++;
    state.lastActivity = new Date();
    /* istanbul ignore next */
    cov_hj6l6sdbd().s[83]++;
    state.history.push({
      phase: 'Implementation Planning',
      status: 'completed',
      timestamp: new Date()
    });
    /* istanbul ignore next */
    cov_hj6l6sdbd().s[84]++;
    this.logger.info(`Generated tasks for '${featureName}'`);
    /* istanbul ignore next */
    cov_hj6l6sdbd().s[85]++;
    this.eventBus.emit('maestro:tasks_generated', {
      featureName
    });
  }
  /**
   * Generate tasks using consistent agent management pattern
   */
  async generateTasksWithSimplePlanner(featureName, designContent) {
    /* istanbul ignore next */
    cov_hj6l6sdbd().f[7]++;
    // Create task planning task with consistent structure
    const taskPlanningTask =
    /* istanbul ignore next */
    (cov_hj6l6sdbd().s[86]++, {
      id: `task-planning-${featureName}-${Date.now()}`,
      type: 'task-planning',
      description: `Generate implementation tasks for feature '${featureName}'`,
      input: {
        featureName,
        designContent,
        requirementsPath: join(this.specsDirectory, featureName, 'requirements.md'),
        outputPath: join(this.specsDirectory, featureName, 'tasks.md'),
        instructions: ['Analyze design content for implementation tasks', 'Create 5-8 specific, actionable tasks with acceptance criteria', 'Organize tasks by logical implementation sequence', 'Include dependency relationships between tasks', 'Format as markdown with checkboxes']
      },
      priority: 85,
      metadata: {
        featureName,
        maestroPhase: 'Implementation Planning',
        outputPath: join(this.specsDirectory, featureName, 'tasks.md')
      }
    });
    /* istanbul ignore next */
    cov_hj6l6sdbd().s[87]++;
    try {
      /* istanbul ignore next */
      cov_hj6l6sdbd().s[88]++;
      this.logger.info(`Generating tasks for ${featureName} using consistent agent management`);
      // Execute with consistent agent management pattern
      const result =
      /* istanbul ignore next */
      (cov_hj6l6sdbd().s[89]++, await this.executeTaskPlanningWithManagedAgent(taskPlanningTask));
      /* istanbul ignore next */
      cov_hj6l6sdbd().s[90]++;
      this.logger.info(`Task plan generated successfully for ${featureName}`);
      /* istanbul ignore next */
      cov_hj6l6sdbd().s[91]++;
      return result;
    } catch (error) {
      /* istanbul ignore next */
      cov_hj6l6sdbd().s[92]++;
      this.logger.warn(`Agent-based task planning failed: ${error instanceof Error ?
      /* istanbul ignore next */
      (cov_hj6l6sdbd().b[20][0]++, error.message) :
      /* istanbul ignore next */
      (cov_hj6l6sdbd().b[20][1]++, String(error))}, falling back to basic generation`);
      /* istanbul ignore next */
      cov_hj6l6sdbd().s[93]++;
      return this.generateBasicTasksFromDesign(featureName, designContent);
    }
  }
  /**
   * Execute task planning with consistent agent management
   */
  async executeTaskPlanningWithManagedAgent(taskPlanningTask) {
    /* istanbul ignore next */
    cov_hj6l6sdbd().f[8]++;
    // Execute with configurable agent selection (minimal-change enhancement)
    const optimalPlannerTypes =
    /* istanbul ignore next */
    (cov_hj6l6sdbd().s[94]++, await this.getOptimalAgentTypes(['project-management', 'task-breakdown', 'planning'], 'task-planning', 1));
    /* istanbul ignore next */
    cov_hj6l6sdbd().s[95]++;
    await this.executeTaskWithManagedAgent(optimalPlannerTypes, taskPlanningTask, ['project-management', 'task-breakdown', 'planning']);
    // Try to read the generated output file
    /* istanbul ignore next */
    cov_hj6l6sdbd().s[96]++;
    try {
      const outputPath =
      /* istanbul ignore next */
      (cov_hj6l6sdbd().s[97]++, taskPlanningTask.metadata.outputPath);
      const generatedContent =
      /* istanbul ignore next */
      (cov_hj6l6sdbd().s[98]++, await readFile(outputPath, 'utf8'));
      // If content was generated, format and return it
      /* istanbul ignore next */
      cov_hj6l6sdbd().s[99]++;
      if (
      /* istanbul ignore next */
      (cov_hj6l6sdbd().b[22][0]++, generatedContent) &&
      /* istanbul ignore next */
      (cov_hj6l6sdbd().b[22][1]++, generatedContent.length > 0)) {
        /* istanbul ignore next */
        cov_hj6l6sdbd().b[21][0]++;
        cov_hj6l6sdbd().s[100]++;
        return this.formatTaskPlanningOutput(generatedContent, taskPlanningTask.input.featureName);
      } else
      /* istanbul ignore next */
      {
        cov_hj6l6sdbd().b[21][1]++;
      }
    } catch (error) {
      /* istanbul ignore next */
      cov_hj6l6sdbd().s[101]++;
      this.logger.debug(`Could not read task planning output: ${error instanceof Error ?
      /* istanbul ignore next */
      (cov_hj6l6sdbd().b[23][0]++, error.message) :
      /* istanbul ignore next */
      (cov_hj6l6sdbd().b[23][1]++, String(error))}`);
    }
    // Fallback to basic task generation
    /* istanbul ignore next */
    cov_hj6l6sdbd().s[102]++;
    return this.generateBasicTasksFromDesign(taskPlanningTask.input.featureName, taskPlanningTask.input.designContent);
  }
  /**
   * Format task planning output to consistent markdown
   */
  formatTaskPlanningOutput(output, featureName) {
    /* istanbul ignore next */
    cov_hj6l6sdbd().f[9]++;
    cov_hj6l6sdbd().s[103]++;
    if (
    /* istanbul ignore next */
    (cov_hj6l6sdbd().b[25][0]++, typeof output === 'string') &&
    /* istanbul ignore next */
    (cov_hj6l6sdbd().b[25][1]++, output.includes('# Implementation Tasks'))) {
      /* istanbul ignore next */
      cov_hj6l6sdbd().b[24][0]++;
      cov_hj6l6sdbd().s[104]++;
      return output;
    } else
    /* istanbul ignore next */
    {
      cov_hj6l6sdbd().b[24][1]++;
    }
    // Handle structured output from agent
    cov_hj6l6sdbd().s[105]++;
    if (
    /* istanbul ignore next */
    (cov_hj6l6sdbd().b[27][0]++, output) &&
    /* istanbul ignore next */
    (cov_hj6l6sdbd().b[27][1]++, typeof output === 'object')) {
      /* istanbul ignore next */
      cov_hj6l6sdbd().b[26][0]++;
      const tasks =
      /* istanbul ignore next */
      (cov_hj6l6sdbd().s[106]++,
      /* istanbul ignore next */
      (cov_hj6l6sdbd().b[28][0]++, output.tasks) ||
      /* istanbul ignore next */
      (cov_hj6l6sdbd().b[28][1]++, output.taskList) ||
      /* istanbul ignore next */
      (cov_hj6l6sdbd().b[28][2]++, []));
      const dependencies =
      /* istanbul ignore next */
      (cov_hj6l6sdbd().s[107]++,
      /* istanbul ignore next */
      (cov_hj6l6sdbd().b[29][0]++, output.dependencies) ||
      /* istanbul ignore next */
      (cov_hj6l6sdbd().b[29][1]++, ''));
      const notes =
      /* istanbul ignore next */
      (cov_hj6l6sdbd().s[108]++,
      /* istanbul ignore next */
      (cov_hj6l6sdbd().b[30][0]++, output.notes) ||
      /* istanbul ignore next */
      (cov_hj6l6sdbd().b[30][1]++, output.implementationNotes) ||
      /* istanbul ignore next */
      (cov_hj6l6sdbd().b[30][2]++, ''));
      /* istanbul ignore next */
      cov_hj6l6sdbd().s[109]++;
      if (
      /* istanbul ignore next */
      (cov_hj6l6sdbd().b[32][0]++, Array.isArray(tasks)) &&
      /* istanbul ignore next */
      (cov_hj6l6sdbd().b[32][1]++, tasks.length > 0)) {
        /* istanbul ignore next */
        cov_hj6l6sdbd().b[31][0]++;
        cov_hj6l6sdbd().s[110]++;
        return `# Implementation Tasks for ${featureName}

## Task Breakdown

${tasks.map((task, index) => {
          /* istanbul ignore next */
          cov_hj6l6sdbd().f[10]++;
          cov_hj6l6sdbd().s[111]++;
          if (typeof task === 'string') {
            /* istanbul ignore next */
            cov_hj6l6sdbd().b[33][0]++;
            cov_hj6l6sdbd().s[112]++;
            return task.startsWith('- [ ]') ?
            /* istanbul ignore next */
            (cov_hj6l6sdbd().b[34][0]++, task) :
            /* istanbul ignore next */
            (cov_hj6l6sdbd().b[34][1]++, `- [ ] ${task}`);
          } else
          /* istanbul ignore next */
          {
            cov_hj6l6sdbd().b[33][1]++;
          }
          cov_hj6l6sdbd().s[113]++;
          return `- [ ] ${
          /* istanbul ignore next */
          (cov_hj6l6sdbd().b[35][0]++, task.description) ||
          /* istanbul ignore next */
          (cov_hj6l6sdbd().b[35][1]++, task.name) ||
          /* istanbul ignore next */
          (cov_hj6l6sdbd().b[35][2]++, `Task ${index + 1}`)}`;
        }).join('\n')}

${dependencies ?
        /* istanbul ignore next */
        (cov_hj6l6sdbd().b[36][0]++, `## Dependencies\n${dependencies}\n`) :
        /* istanbul ignore next */
        (cov_hj6l6sdbd().b[36][1]++, '')}
${notes ?
        /* istanbul ignore next */
        (cov_hj6l6sdbd().b[37][0]++, `## Implementation Notes\n${notes}\n`) :
        /* istanbul ignore next */
        (cov_hj6l6sdbd().b[37][1]++, '')}

*Generated by Maestro Agent-Based Task Planning*`;
      } else
      /* istanbul ignore next */
      {
        cov_hj6l6sdbd().b[31][1]++;
      }
    } else
    /* istanbul ignore next */
    {
      cov_hj6l6sdbd().b[26][1]++;
    }
    // Convert string output to proper format
    cov_hj6l6sdbd().s[114]++;
    if (typeof output === 'string') {
      /* istanbul ignore next */
      cov_hj6l6sdbd().b[38][0]++;
      cov_hj6l6sdbd().s[115]++;
      return `# Implementation Tasks for ${featureName}

## Task Breakdown

${output}

*Generated by Maestro Agent-Based Task Planning*`;
    } else
    /* istanbul ignore next */
    {
      cov_hj6l6sdbd().b[38][1]++;
    }
    cov_hj6l6sdbd().s[116]++;
    return `# Implementation Tasks for ${featureName}

## Task Breakdown

${JSON.stringify(output, null, 2)}

*Generated by Maestro Agent-Based Task Planning*`;
  }
  /**
   * Fallback: Generate basic tasks from design content
   */
  async generateBasicTasksFromDesign(featureName, designContent) {
    /* istanbul ignore next */
    cov_hj6l6sdbd().f[11]++;
    // Extract key components from design for task generation
    const tasks =
    /* istanbul ignore next */
    (cov_hj6l6sdbd().s[117]++, ['- [ ] Set up project structure and dependencies', '- [ ] Implement core data models', '- [ ] Create API endpoints', '- [ ] Implement business logic', '- [ ] Add input validation and error handling', '- [ ] Implement security measures', '- [ ] Add comprehensive tests', '- [ ] Create documentation', '- [ ] Performance optimization', '- [ ] Integration testing']);
    /* istanbul ignore next */
    cov_hj6l6sdbd().s[118]++;
    return `# Implementation Tasks for ${featureName}

## Task List

${tasks.join('\n')}

## Notes

- Tasks are ordered by dependency and logical implementation sequence
- Each task should be completed and tested before moving to the next
- Use \`npx claude-flow maestro implement-task ${featureName} <task-number>\` to implement each task

*Generated by Maestro Basic Task Generation (Fallback)*
`;
  }
  /**
   * Implement a specific task with optional consensus validation
   */
  async implementTask(featureName, taskId) {
    /* istanbul ignore next */
    cov_hj6l6sdbd().f[12]++;
    const state =
    /* istanbul ignore next */
    (cov_hj6l6sdbd().s[119]++, this.maestroState.get(featureName));
    /* istanbul ignore next */
    cov_hj6l6sdbd().s[120]++;
    if (!state) {
      /* istanbul ignore next */
      cov_hj6l6sdbd().b[39][0]++;
      cov_hj6l6sdbd().s[121]++;
      throw new SystemError(`No workflow state found for '${featureName}'`);
    } else
    /* istanbul ignore next */
    {
      cov_hj6l6sdbd().b[39][1]++;
    }
    const featurePath =
    /* istanbul ignore next */
    (cov_hj6l6sdbd().s[122]++, join(this.specsDirectory, featureName));
    const tasksPath =
    /* istanbul ignore next */
    (cov_hj6l6sdbd().s[123]++, join(featurePath, 'tasks.md'));
    // Read and validate task
    const tasksContent =
    /* istanbul ignore next */
    (cov_hj6l6sdbd().s[124]++, await readFile(tasksPath, 'utf8'));
    const taskLines =
    /* istanbul ignore next */
    (cov_hj6l6sdbd().s[125]++, tasksContent.split('\n').filter(line => {
      /* istanbul ignore next */
      cov_hj6l6sdbd().f[13]++;
      cov_hj6l6sdbd().s[126]++;
      return /* istanbul ignore next */(cov_hj6l6sdbd().b[40][0]++, line.startsWith('- [ ]')) ||
      /* istanbul ignore next */
      (cov_hj6l6sdbd().b[40][1]++, line.startsWith('- [x]'));
    }));
    /* istanbul ignore next */
    cov_hj6l6sdbd().s[127]++;
    if (
    /* istanbul ignore next */
    (cov_hj6l6sdbd().b[42][0]++, taskId < 1) ||
    /* istanbul ignore next */
    (cov_hj6l6sdbd().b[42][1]++, taskId > taskLines.length)) {
      /* istanbul ignore next */
      cov_hj6l6sdbd().b[41][0]++;
      cov_hj6l6sdbd().s[128]++;
      throw new SystemError(`Invalid task ID ${taskId} for feature '${featureName}'. Valid range: 1-${taskLines.length}`);
    } else
    /* istanbul ignore next */
    {
      cov_hj6l6sdbd().b[41][1]++;
    }
    const taskDescription =
    /* istanbul ignore next */
    (cov_hj6l6sdbd().s[129]++, taskLines[taskId - 1].substring(taskLines[taskId - 1].indexOf(']') + 2).trim());
    // Use consensus validation if hive mind is available and enabled
    /* istanbul ignore next */
    cov_hj6l6sdbd().s[130]++;
    if (
    /* istanbul ignore next */
    (cov_hj6l6sdbd().b[44][0]++, this.consensusEngine) &&
    /* istanbul ignore next */
    (cov_hj6l6sdbd().b[44][1]++, this.maestroConfig.enableHiveMind)) {
      /* istanbul ignore next */
      cov_hj6l6sdbd().b[43][0]++;
      cov_hj6l6sdbd().s[131]++;
      await this.implementTaskWithConsensus(featureName, taskId, taskDescription);
    } else {
      /* istanbul ignore next */
      cov_hj6l6sdbd().b[43][1]++;
      cov_hj6l6sdbd().s[132]++;
      await this.implementTaskDirect(featureName, taskId, taskDescription);
    }
    // Mark task as completed
    const updatedTasksContent =
    /* istanbul ignore next */
    (cov_hj6l6sdbd().s[133]++, tasksContent.replace(taskLines[taskId - 1], taskLines[taskId - 1].replace('- [ ]', '- [x]')));
    /* istanbul ignore next */
    cov_hj6l6sdbd().s[134]++;
    await writeFile(tasksPath, updatedTasksContent, 'utf8');
    // Update workflow state
    /* istanbul ignore next */
    cov_hj6l6sdbd().s[135]++;
    state.currentPhase = 'Task Execution';
    /* istanbul ignore next */
    cov_hj6l6sdbd().s[136]++;
    state.currentTaskIndex = taskId;
    /* istanbul ignore next */
    cov_hj6l6sdbd().s[137]++;
    state.lastActivity = new Date();
    /* istanbul ignore next */
    cov_hj6l6sdbd().s[138]++;
    this.logger.info(`Implemented task ${taskId} for '${featureName}': ${taskDescription}`);
    /* istanbul ignore next */
    cov_hj6l6sdbd().s[139]++;
    this.eventBus.emit('maestro:task_implemented', {
      featureName,
      taskId,
      taskDescription
    });
  }
  /**
   * Implement task with hive mind consensus validation
   */
  async implementTaskWithConsensus(featureName, taskId, taskDescription) {
    /* istanbul ignore next */
    cov_hj6l6sdbd().f[14]++;
    // Create consensus proposal for task implementation
    const proposal =
    /* istanbul ignore next */
    (cov_hj6l6sdbd().s[140]++, {
      id: `maestro-task-${featureName}-${taskId}-${Date.now()}`,
      swarmId: this.hiveMind.id,
      proposal: {
        action: 'implement_task',
        featureName,
        taskId,
        taskDescription,
        details: `Implement task: ${taskDescription}`
      },
      requiredThreshold:
      /* istanbul ignore next */
      (cov_hj6l6sdbd().b[45][0]++, this.maestroConfig.consensusThreshold) ||
      /* istanbul ignore next */
      (cov_hj6l6sdbd().b[45][1]++, 0.66),
      deadline: new Date(Date.now() + 300000),
      // 5 minutes
      // creator: 'maestro-orchestrator', // Remove unsupported property
      taskId: `maestro-task-${featureName}-${taskId}`,
      metadata: {
        type: 'task_implementation',
        featureName,
        taskId,
        taskDescription
      }
    });
    // Submit proposal and wait for consensus
    const proposalId =
    /* istanbul ignore next */
    (cov_hj6l6sdbd().s[141]++, await this.consensusEngine.createProposal(proposal));
    const consensusResult =
    /* istanbul ignore next */
    (cov_hj6l6sdbd().s[142]++, await this.waitForConsensusResult(proposalId, 300000));
    /* istanbul ignore next */
    cov_hj6l6sdbd().s[143]++;
    if (!consensusResult.achieved) {
      /* istanbul ignore next */
      cov_hj6l6sdbd().b[46][0]++;
      cov_hj6l6sdbd().s[144]++;
      throw new SystemError(`Consensus failed for task ${taskId}: ${
      /* istanbul ignore next */
      (cov_hj6l6sdbd().b[47][0]++, consensusResult.reason) ||
      /* istanbul ignore next */
      (cov_hj6l6sdbd().b[47][1]++, 'Insufficient votes')}`);
    } else
    /* istanbul ignore next */
    {
      cov_hj6l6sdbd().b[46][1]++;
    }
    cov_hj6l6sdbd().s[145]++;
    this.logger.info(`Consensus achieved for task ${taskId}: ${consensusResult.finalRatio}`);
    // Proceed with implementation
    /* istanbul ignore next */
    cov_hj6l6sdbd().s[146]++;
    await this.implementTaskDirect(featureName, taskId, taskDescription);
  }
  /**
   * Direct task implementation using consistent agent management
   */
  async implementTaskDirect(featureName, taskId, taskDescription) {
    /* istanbul ignore next */
    cov_hj6l6sdbd().f[15]++;
    const requirementsPath =
    /* istanbul ignore next */
    (cov_hj6l6sdbd().s[147]++, join(this.specsDirectory, featureName, 'requirements.md'));
    const designPath =
    /* istanbul ignore next */
    (cov_hj6l6sdbd().s[148]++, join(this.specsDirectory, featureName, 'design.md'));
    const requirementsContent =
    /* istanbul ignore next */
    (cov_hj6l6sdbd().s[149]++, await readFile(requirementsPath, 'utf8'));
    const designContent =
    /* istanbul ignore next */
    (cov_hj6l6sdbd().s[150]++, await readFile(designPath, 'utf8'));
    // Create implementation task with consistent structure
    const implementationTask =
    /* istanbul ignore next */
    (cov_hj6l6sdbd().s[151]++, {
      id: `impl-task-${featureName}-${taskId}-${Date.now()}`,
      type: 'task-implementation',
      description: `Implement: ${taskDescription}`,
      input: {
        featureName,
        taskId,
        taskDescription,
        requirements: requirementsContent,
        design: designContent,
        context: await this.getSteeringContext('developer')
      },
      priority: 90,
      metadata: {
        featureName,
        taskId,
        maestroPhase: 'Task Execution'
      }
    });
    // Execute with configurable agent selection (minimal-change enhancement)
    const optimalDeveloperTypes =
    /* istanbul ignore next */
    (cov_hj6l6sdbd().s[152]++, await this.getOptimalAgentTypes(['implementation', 'coding', 'testing'], 'task-implementation', 2));
    /* istanbul ignore next */
    cov_hj6l6sdbd().s[153]++;
    await this.executeTaskWithManagedAgent(optimalDeveloperTypes, implementationTask, ['implementation', 'coding', 'testing']);
  }
  /**
   * Approve a workflow phase with optional consensus
   */
  async approvePhase(featureName) {
    /* istanbul ignore next */
    cov_hj6l6sdbd().f[16]++;
    const state =
    /* istanbul ignore next */
    (cov_hj6l6sdbd().s[154]++, this.maestroState.get(featureName));
    /* istanbul ignore next */
    cov_hj6l6sdbd().s[155]++;
    if (!state) {
      /* istanbul ignore next */
      cov_hj6l6sdbd().b[48][0]++;
      cov_hj6l6sdbd().s[156]++;
      throw new SystemError(`No workflow state found for '${featureName}'`);
    } else
    /* istanbul ignore next */
    {
      cov_hj6l6sdbd().b[48][1]++;
    }
    const currentPhase =
    /* istanbul ignore next */
    (cov_hj6l6sdbd().s[157]++, state.currentPhase);
    // Phase progression logic
    const phaseProgression =
    /* istanbul ignore next */
    (cov_hj6l6sdbd().s[158]++, {
      'Requirements Clarification': 'Research & Design',
      'Research & Design': 'Implementation Planning',
      'Implementation Planning': 'Task Execution',
      'Task Execution': 'Completed'
    });
    const nextPhase =
    /* istanbul ignore next */
    (cov_hj6l6sdbd().s[159]++, phaseProgression[currentPhase]);
    /* istanbul ignore next */
    cov_hj6l6sdbd().s[160]++;
    if (!nextPhase) {
      /* istanbul ignore next */
      cov_hj6l6sdbd().b[49][0]++;
      cov_hj6l6sdbd().s[161]++;
      throw new SystemError(`Cannot progress from phase '${currentPhase}'`);
    } else
    /* istanbul ignore next */
    {
      cov_hj6l6sdbd().b[49][1]++;
    }
    // Update state
    cov_hj6l6sdbd().s[162]++;
    state.currentPhase = nextPhase;
    /* istanbul ignore next */
    cov_hj6l6sdbd().s[163]++;
    state.lastActivity = new Date();
    /* istanbul ignore next */
    cov_hj6l6sdbd().s[164]++;
    state.history.push({
      phase: nextPhase,
      status: 'approved',
      timestamp: new Date()
    });
    /* istanbul ignore next */
    cov_hj6l6sdbd().s[165]++;
    this.logger.info(`Approved phase transition for '${featureName}': ${currentPhase} -> ${nextPhase}`);
    /* istanbul ignore next */
    cov_hj6l6sdbd().s[166]++;
    this.eventBus.emit('maestro:phase_approved', {
      featureName,
      fromPhase: currentPhase,
      toPhase: nextPhase
    });
  }
  /**
   * Get current workflow state
   */
  getWorkflowState(featureName) {
    /* istanbul ignore next */
    cov_hj6l6sdbd().f[17]++;
    cov_hj6l6sdbd().s[167]++;
    return this.maestroState.get(featureName);
  }
  /**
   * Create steering document for project context
   */
  async createSteeringDocument(domain, content) {
    /* istanbul ignore next */
    cov_hj6l6sdbd().f[18]++;
    cov_hj6l6sdbd().s[168]++;
    await mkdir(this.steeringDirectory, {
      recursive: true
    });
    const steeringPath =
    /* istanbul ignore next */
    (cov_hj6l6sdbd().s[169]++, join(this.steeringDirectory, `${domain}.md`));
    const steeringContent =
    /* istanbul ignore next */
    (cov_hj6l6sdbd().s[170]++, `# ${domain.charAt(0).toUpperCase() + domain.slice(1)} Steering Document

${content}

## Guidelines

[Provide specific guidelines for the '${domain}' domain. E.g., API design, testing, security, coding style.]
`);
    /* istanbul ignore next */
    cov_hj6l6sdbd().s[171]++;
    await writeFile(steeringPath, steeringContent, 'utf8');
    /* istanbul ignore next */
    cov_hj6l6sdbd().s[172]++;
    this.logger.info(`Created steering document for '${domain}' at '${steeringPath}'`);
  }
  /**
   * Enhanced agent management with reuse-first strategy (minimal-change improvement)
   * Single Responsibility: Manages agent lifecycle for any task type
   * Open/Closed: Extensible for new agent types without modification
   * Dependency Inversion: Depends on abstractions, not concrete implementations
   */
  async executeTaskWithManagedAgent(agentTypes, task, capabilities) {
    /* istanbul ignore next */
    cov_hj6l6sdbd().f[19]++;
    const acquiredAgents =
    /* istanbul ignore next */
    (cov_hj6l6sdbd().s[173]++, []);
    const spawnedAgents =
    /* istanbul ignore next */
    (cov_hj6l6sdbd().s[174]++, []);
    /* istanbul ignore next */
    cov_hj6l6sdbd().s[175]++;
    try {
      // Step 1: Try to reuse existing agents first (minimal-change enhancement)
      const reusedAgents =
      /* istanbul ignore next */
      (cov_hj6l6sdbd().s[176]++, await this.findReusableAgents(capabilities, agentTypes.length));
      /* istanbul ignore next */
      cov_hj6l6sdbd().s[177]++;
      acquiredAgents.push(...reusedAgents);
      // Step 2: Spawn additional agents only if needed
      const needed =
      /* istanbul ignore next */
      (cov_hj6l6sdbd().s[178]++, agentTypes.length - reusedAgents.length);
      /* istanbul ignore next */
      cov_hj6l6sdbd().s[179]++;
      if (needed > 0) {
        /* istanbul ignore next */
        cov_hj6l6sdbd().b[50][0]++;
        const typesToSpawn =
        /* istanbul ignore next */
        (cov_hj6l6sdbd().s[180]++, agentTypes.slice(0, needed));
        /* istanbul ignore next */
        cov_hj6l6sdbd().s[181]++;
        for (const agentType of typesToSpawn) {
          /* istanbul ignore next */
          cov_hj6l6sdbd().s[182]++;
          try {
            const agentProfile =
            /* istanbul ignore next */
            (cov_hj6l6sdbd().s[183]++, this.createStandardAgentProfile(agentType, task.metadata?.featureName, capabilities));
            const resolvedType =
            /* istanbul ignore next */
            (cov_hj6l6sdbd().s[184]++, this.getAgentTemplate(agentType));
            const agentId =
            /* istanbul ignore next */
            (cov_hj6l6sdbd().s[185]++, await this.agentManager.createAgent(resolvedType, agentProfile));
            /* istanbul ignore next */
            cov_hj6l6sdbd().s[186]++;
            await this.agentManager.startAgent(agentId);
            // Add to pool for future reuse
            /* istanbul ignore next */
            cov_hj6l6sdbd().s[187]++;
            await this.addAgentToPool(agentId, resolvedType, capabilities);
            /* istanbul ignore next */
            cov_hj6l6sdbd().s[188]++;
            spawnedAgents.push(agentId);
            /* istanbul ignore next */
            cov_hj6l6sdbd().s[189]++;
            acquiredAgents.push(agentId);
          } catch (error) {
            /* istanbul ignore next */
            cov_hj6l6sdbd().s[190]++;
            this.logger.warn(`Failed to spawn ${agentType} (resolved to ${this.getAgentTemplate(agentType)}): ${error instanceof Error ?
            /* istanbul ignore next */
            (cov_hj6l6sdbd().b[51][0]++, error.message) :
            /* istanbul ignore next */
            (cov_hj6l6sdbd().b[51][1]++, String(error))}`);
          }
        }
      } else
      /* istanbul ignore next */
      {
        cov_hj6l6sdbd().b[50][1]++;
      }
      // Step 3: Mark reused agents as busy
      cov_hj6l6sdbd().s[191]++;
      await this.markAgentsAsBusy(reusedAgents, task.id);
      // Assign task to first available agent (fallback to default)
      const assignedAgent =
      /* istanbul ignore next */
      (cov_hj6l6sdbd().s[192]++,
      /* istanbul ignore next */
      (cov_hj6l6sdbd().b[52][0]++, acquiredAgents[0]) ||
      /* istanbul ignore next */
      (cov_hj6l6sdbd().b[52][1]++, 'default'));
      /* istanbul ignore next */
      cov_hj6l6sdbd().s[193]++;
      task.assignedAgent = assignedAgent;
      // Execute task through main orchestrator
      /* istanbul ignore next */
      cov_hj6l6sdbd().s[194]++;
      await this.mainOrchestrator.assignTask(task);
      /* istanbul ignore next */
      cov_hj6l6sdbd().s[195]++;
      this.logger.info(`Task ${task.id} executed with ${reusedAgents.length} reused + ${spawnedAgents.length} spawned agents`);
    } finally {
      /* istanbul ignore next */
      cov_hj6l6sdbd().s[196]++;
      // Step 4: Release agents back to pool (enhanced cleanup)
      await this.releaseAgentsToPool(acquiredAgents, spawnedAgents);
    }
  }
  /**
   * Create standardized agent profile (KISS + SOLID principles + alias support)
   */
  createStandardAgentProfile(agentType, featureName, capabilities) {
    /* istanbul ignore next */
    cov_hj6l6sdbd().f[20]++;
    // Resolve agent type aliases
    const resolvedType =
    /* istanbul ignore next */
    (cov_hj6l6sdbd().s[197]++, this.getAgentTemplate(agentType));
    /* istanbul ignore next */
    cov_hj6l6sdbd().s[198]++;
    return {
      id: `${agentType}-${
      /* istanbul ignore next */
      (cov_hj6l6sdbd().b[53][0]++, featureName) ||
      /* istanbul ignore next */
      (cov_hj6l6sdbd().b[53][1]++, 'default')}-${Date.now()}`,
      name: `${agentType}${featureName ?
      /* istanbul ignore next */
      (cov_hj6l6sdbd().b[54][0]++, ` for ${featureName}`) :
      /* istanbul ignore next */
      (cov_hj6l6sdbd().b[54][1]++, '')}`,
      type: resolvedType,
      // Use resolved type for actual agent creation
      capabilities:
      /* istanbul ignore next */
      (cov_hj6l6sdbd().b[55][0]++, capabilities) ||
      /* istanbul ignore next */
      (cov_hj6l6sdbd().b[55][1]++, this.getDefaultCapabilitiesForAgentType(agentType)),
      maxConcurrentTasks: 1,
      priority: this.getDefaultPriorityForAgentType(agentType)
    };
  }
  /**
   * Agent alias mapping for backward compatibility (SOLID: Open/Closed)
   */
  getAgentTemplate(agentType) {
    /* istanbul ignore next */
    cov_hj6l6sdbd().f[21]++;
    const aliasMap =
    /* istanbul ignore next */
    (cov_hj6l6sdbd().s[199]++, {
      'planner': 'task-planner',
      'coder': 'developer'
    });
    /* istanbul ignore next */
    cov_hj6l6sdbd().s[200]++;
    return /* istanbul ignore next */(cov_hj6l6sdbd().b[56][0]++, aliasMap[agentType]) ||
    /* istanbul ignore next */
    (cov_hj6l6sdbd().b[56][1]++, agentType);
  }
  /**
   * Get default capabilities based on agent type (KISS principle + comprehensive coverage)
   */
  getDefaultCapabilitiesForAgentType(agentType) {
    /* istanbul ignore next */
    cov_hj6l6sdbd().f[22]++;
    const capabilityMap =
    /* istanbul ignore next */
    (cov_hj6l6sdbd().s[201]++, {
      // Core Architecture & Design
      'design-architect': ['design', 'architecture', 'analysis'],
      'system-architect': ['system-architecture', 'scalability', 'performance', 'distributed-systems'],
      // Development & Implementation
      'developer': ['implementation', 'coding', 'testing'],
      'coder': ['implementation', 'coding', 'testing'],
      // Project Management & Planning
      'task-planner': ['project-management', 'task-breakdown', 'planning'],
      'planner': ['project-management', 'task-breakdown', 'planning'],
      // Quality Assurance & Testing
      'tester': ['testing', 'quality-assurance', 'test-automation'],
      'reviewer': ['code-review', 'quality-assurance', 'analysis'],
      // Research & Analysis (previously unused templates now integrated)
      'researcher': ['research', 'analysis', 'documentation'],
      'analyst': ['analysis', 'data-processing', 'visualization'],
      'requirements-engineer': ['requirements', 'documentation', 'analysis'],
      'steering-author': ['documentation', 'governance', 'content-creation']
    });
    /* istanbul ignore next */
    cov_hj6l6sdbd().s[202]++;
    return /* istanbul ignore next */(cov_hj6l6sdbd().b[57][0]++, capabilityMap[agentType]) ||
    /* istanbul ignore next */
    (cov_hj6l6sdbd().b[57][1]++, ['general']);
  }
  /**
   * Get default priority based on agent type (KISS principle + comprehensive coverage)
   */
  getDefaultPriorityForAgentType(agentType) {
    /* istanbul ignore next */
    cov_hj6l6sdbd().f[23]++;
    const priorityMap =
    /* istanbul ignore next */
    (cov_hj6l6sdbd().s[203]++, {
      // Critical Implementation (Highest Priority)
      'developer': 90,
      'coder': 90,
      // Architecture & Planning (High Priority)  
      'design-architect': 85,
      'system-architect': 85,
      'task-planner': 85,
      'planner': 85,
      // Quality Assurance (Medium-High Priority)
      'tester': 80,
      'reviewer': 75,
      // Research & Analysis (Medium Priority)
      'researcher': 70,
      'analyst': 70,
      'requirements-engineer': 75,
      // Documentation & Governance (Lower Priority)
      'steering-author': 65
    });
    /* istanbul ignore next */
    cov_hj6l6sdbd().s[204]++;
    return /* istanbul ignore next */(cov_hj6l6sdbd().b[58][0]++, priorityMap[agentType]) ||
    /* istanbul ignore next */
    (cov_hj6l6sdbd().b[58][1]++, 70);
  }
  /**
   * Get optimal agent types for task based on capabilities and availability (minimal-change enhancement)
   * Replaces hardcoded agent arrays with intelligent selection
   */
  async getOptimalAgentTypes(requiredCapabilities, taskType, maxAgents =
  /* istanbul ignore next */
  (cov_hj6l6sdbd().b[59][0]++, 2)) {
    /* istanbul ignore next */
    cov_hj6l6sdbd().f[24]++;
    // Check for available agents with matching capabilities first
    const availableAgents =
    /* istanbul ignore next */
    (cov_hj6l6sdbd().s[205]++, await this.findReusableAgents(requiredCapabilities, maxAgents));
    /* istanbul ignore next */
    cov_hj6l6sdbd().s[206]++;
    if (availableAgents.length >= maxAgents) {
      /* istanbul ignore next */
      cov_hj6l6sdbd().b[60][0]++;
      cov_hj6l6sdbd().s[207]++;
      // Use existing agents if available
      return availableAgents.map(agentId => {
        /* istanbul ignore next */
        cov_hj6l6sdbd().f[25]++;
        const pooledAgent =
        /* istanbul ignore next */
        (cov_hj6l6sdbd().s[208]++, this.agentPool.get(agentId));
        /* istanbul ignore next */
        cov_hj6l6sdbd().s[209]++;
        return /* istanbul ignore next */(cov_hj6l6sdbd().b[61][0]++, pooledAgent?.type) ||
        /* istanbul ignore next */
        (cov_hj6l6sdbd().b[61][1]++, 'general');
      });
    } else
    /* istanbul ignore next */
    {
      cov_hj6l6sdbd().b[60][1]++;
    }
    // Fallback to configured agent types based on capabilities and task type
    cov_hj6l6sdbd().s[210]++;
    return this.getConfiguredAgentTypes(requiredCapabilities, taskType, maxAgents);
  }
  /**
   * Get configured agent types based on task requirements (replaces hardcoded arrays)
   */
  getConfiguredAgentTypes(requiredCapabilities, taskType, maxAgents) {
    /* istanbul ignore next */
    cov_hj6l6sdbd().f[26]++;
    // Smart mapping based on task type and capabilities
    const taskTypeAgents =
    /* istanbul ignore next */
    (cov_hj6l6sdbd().s[211]++, {
      'design-generation': ['design-architect', 'system-architect'],
      'task-planning': ['task-planner', 'planner'],
      'task-implementation': ['developer', 'coder'],
      'code-review': ['reviewer', 'analyst'],
      'research': ['researcher', 'analyst'],
      'documentation': ['requirements-engineer', 'steering-author']
    });
    // Capability-based fallback mapping
    const capabilityAgents =
    /* istanbul ignore next */
    (cov_hj6l6sdbd().s[212]++, {
      'design': ['design-architect', 'system-architect'],
      'architecture': ['system-architect', 'design-architect'],
      'system-architecture': ['system-architect'],
      'implementation': ['developer', 'coder'],
      'coding': ['developer', 'coder'],
      'testing': ['tester', 'developer'],
      'project-management': ['task-planner'],
      'task-breakdown': ['task-planner'],
      'planning': ['task-planner', 'planner'],
      'analysis': ['analyst', 'researcher'],
      'research': ['researcher', 'analyst'],
      'documentation': ['requirements-engineer', 'steering-author'],
      'code-review': ['reviewer', 'analyst'],
      'quality-assurance': ['reviewer', 'tester']
    });
    // Try task type first
    let agentTypes =
    /* istanbul ignore next */
    (cov_hj6l6sdbd().s[213]++,
    /* istanbul ignore next */
    (cov_hj6l6sdbd().b[62][0]++, taskTypeAgents[taskType]) ||
    /* istanbul ignore next */
    (cov_hj6l6sdbd().b[62][1]++, []));
    // If no direct task type match, build from capabilities
    /* istanbul ignore next */
    cov_hj6l6sdbd().s[214]++;
    if (agentTypes.length === 0) {
      /* istanbul ignore next */
      cov_hj6l6sdbd().b[63][0]++;
      const typeSet =
      /* istanbul ignore next */
      (cov_hj6l6sdbd().s[215]++, new Set());
      /* istanbul ignore next */
      cov_hj6l6sdbd().s[216]++;
      for (const capability of requiredCapabilities) {
        const possibleTypes =
        /* istanbul ignore next */
        (cov_hj6l6sdbd().s[217]++,
        /* istanbul ignore next */
        (cov_hj6l6sdbd().b[64][0]++, capabilityAgents[capability]) ||
        /* istanbul ignore next */
        (cov_hj6l6sdbd().b[64][1]++, []));
        /* istanbul ignore next */
        cov_hj6l6sdbd().s[218]++;
        possibleTypes.forEach(type => {
          /* istanbul ignore next */
          cov_hj6l6sdbd().f[27]++;
          cov_hj6l6sdbd().s[219]++;
          return typeSet.add(type);
        });
      }
      /* istanbul ignore next */
      cov_hj6l6sdbd().s[220]++;
      agentTypes = Array.from(typeSet);
    } else
    /* istanbul ignore next */
    {
      cov_hj6l6sdbd().b[63][1]++;
    }
    // Fallback to general agent types
    cov_hj6l6sdbd().s[221]++;
    if (agentTypes.length === 0) {
      /* istanbul ignore next */
      cov_hj6l6sdbd().b[65][0]++;
      cov_hj6l6sdbd().s[222]++;
      agentTypes = ['developer', 'analyst']; // Safe defaults
    } else
    /* istanbul ignore next */
    {
      cov_hj6l6sdbd().b[65][1]++;
    }
    // Limit to maxAgents
    cov_hj6l6sdbd().s[223]++;
    return agentTypes.slice(0, maxAgents);
  }
  /**
   * Find reusable agents with matching capabilities (minimal-change enhancement)
   */
  async findReusableAgents(requiredCapabilities, maxAgents) {
    /* istanbul ignore next */
    cov_hj6l6sdbd().f[28]++;
    const reusableAgents =
    /* istanbul ignore next */
    (cov_hj6l6sdbd().s[224]++, []);
    /* istanbul ignore next */
    cov_hj6l6sdbd().s[225]++;
    try {
      // Find agents with matching capabilities using capability index
      let candidateIds =
      /* istanbul ignore next */
      (cov_hj6l6sdbd().s[226]++, null);
      /* istanbul ignore next */
      cov_hj6l6sdbd().s[227]++;
      for (const capability of requiredCapabilities) {
        const agentsWithCapability =
        /* istanbul ignore next */
        (cov_hj6l6sdbd().s[228]++, this.capabilityIndex.get(capability));
        /* istanbul ignore next */
        cov_hj6l6sdbd().s[229]++;
        if (
        /* istanbul ignore next */
        (cov_hj6l6sdbd().b[67][0]++, !agentsWithCapability) ||
        /* istanbul ignore next */
        (cov_hj6l6sdbd().b[67][1]++, agentsWithCapability.size === 0)) {
          /* istanbul ignore next */
          cov_hj6l6sdbd().b[66][0]++;
          cov_hj6l6sdbd().s[230]++;
          continue; // Skip if no agents have this capability
        } else
        /* istanbul ignore next */
        {
          cov_hj6l6sdbd().b[66][1]++;
        }
        cov_hj6l6sdbd().s[231]++;
        if (candidateIds === null) {
          /* istanbul ignore next */
          cov_hj6l6sdbd().b[68][0]++;
          cov_hj6l6sdbd().s[232]++;
          candidateIds = new Set(agentsWithCapability);
        } else {
          /* istanbul ignore next */
          cov_hj6l6sdbd().b[68][1]++;
          // Find intersection - agents with ALL required capabilities
          const intersection =
          /* istanbul ignore next */
          (cov_hj6l6sdbd().s[233]++, new Set());
          /* istanbul ignore next */
          cov_hj6l6sdbd().s[234]++;
          candidateIds.forEach(id => {
            /* istanbul ignore next */
            cov_hj6l6sdbd().f[29]++;
            cov_hj6l6sdbd().s[235]++;
            if (agentsWithCapability.has(id)) {
              /* istanbul ignore next */
              cov_hj6l6sdbd().b[69][0]++;
              cov_hj6l6sdbd().s[236]++;
              intersection.add(id);
            } else
            /* istanbul ignore next */
            {
              cov_hj6l6sdbd().b[69][1]++;
            }
          });
          /* istanbul ignore next */
          cov_hj6l6sdbd().s[237]++;
          candidateIds = intersection;
        }
      }
      // Get available agents from candidates
      /* istanbul ignore next */
      cov_hj6l6sdbd().s[238]++;
      if (
      /* istanbul ignore next */
      (cov_hj6l6sdbd().b[71][0]++, candidateIds) &&
      /* istanbul ignore next */
      (cov_hj6l6sdbd().b[71][1]++, candidateIds.size > 0)) {
        /* istanbul ignore next */
        cov_hj6l6sdbd().b[70][0]++;
        cov_hj6l6sdbd().s[239]++;
        for (const agentId of candidateIds) {
          /* istanbul ignore next */
          cov_hj6l6sdbd().s[240]++;
          if (reusableAgents.length >= maxAgents) {
            /* istanbul ignore next */
            cov_hj6l6sdbd().b[72][0]++;
            cov_hj6l6sdbd().s[241]++;
            break;
          } else
          /* istanbul ignore next */
          {
            cov_hj6l6sdbd().b[72][1]++;
          }
          const pooledAgent =
          /* istanbul ignore next */
          (cov_hj6l6sdbd().s[242]++, this.agentPool.get(agentId));
          /* istanbul ignore next */
          cov_hj6l6sdbd().s[243]++;
          if (
          /* istanbul ignore next */
          (cov_hj6l6sdbd().b[74][0]++, pooledAgent) &&
          /* istanbul ignore next */
          (cov_hj6l6sdbd().b[74][1]++, pooledAgent.status === 'available')) {
            /* istanbul ignore next */
            cov_hj6l6sdbd().b[73][0]++;
            cov_hj6l6sdbd().s[244]++;
            reusableAgents.push(agentId);
          } else
          /* istanbul ignore next */
          {
            cov_hj6l6sdbd().b[73][1]++;
          }
        }
      } else
      /* istanbul ignore next */
      {
        cov_hj6l6sdbd().b[70][1]++;
      }
      cov_hj6l6sdbd().s[245]++;
      if (reusableAgents.length > 0) {
        /* istanbul ignore next */
        cov_hj6l6sdbd().b[75][0]++;
        cov_hj6l6sdbd().s[246]++;
        this.logger.info(`Found ${reusableAgents.length} reusable agents for capabilities: [${requiredCapabilities.join(', ')}]`);
      } else
      /* istanbul ignore next */
      {
        cov_hj6l6sdbd().b[75][1]++;
      }
    } catch (error) {
      /* istanbul ignore next */
      cov_hj6l6sdbd().s[247]++;
      this.logger.warn(`Error finding reusable agents: ${error instanceof Error ?
      /* istanbul ignore next */
      (cov_hj6l6sdbd().b[76][0]++, error.message) :
      /* istanbul ignore next */
      (cov_hj6l6sdbd().b[76][1]++, String(error))}`);
    }
    /* istanbul ignore next */
    cov_hj6l6sdbd().s[248]++;
    return reusableAgents;
  }
  /**
   * Add agent to pool for future reuse (minimal-change enhancement)
   */
  async addAgentToPool(agentId, agentType, capabilities) {
    /* istanbul ignore next */
    cov_hj6l6sdbd().f[30]++;
    cov_hj6l6sdbd().s[249]++;
    try {
      const pooledAgent =
      /* istanbul ignore next */
      (cov_hj6l6sdbd().s[250]++, {
        id: agentId,
        type: agentType,
        capabilities: capabilities,
        status: 'available',
        lastUsed: new Date(),
        usageCount: 0,
        createdAt: new Date()
      });
      // Add to main pool
      /* istanbul ignore next */
      cov_hj6l6sdbd().s[251]++;
      this.agentPool.set(agentId, pooledAgent);
      // Update capability index for efficient lookup
      /* istanbul ignore next */
      cov_hj6l6sdbd().s[252]++;
      for (const capability of capabilities) {
        /* istanbul ignore next */
        cov_hj6l6sdbd().s[253]++;
        if (!this.capabilityIndex.has(capability)) {
          /* istanbul ignore next */
          cov_hj6l6sdbd().b[77][0]++;
          cov_hj6l6sdbd().s[254]++;
          this.capabilityIndex.set(capability, new Set());
        } else
        /* istanbul ignore next */
        {
          cov_hj6l6sdbd().b[77][1]++;
        }
        cov_hj6l6sdbd().s[255]++;
        this.capabilityIndex.get(capability).add(agentId);
      }
      /* istanbul ignore next */
      cov_hj6l6sdbd().s[256]++;
      this.logger.debug(`Added agent ${agentId} (${agentType}) to pool with capabilities: [${capabilities.join(', ')}]`);
    } catch (error) {
      /* istanbul ignore next */
      cov_hj6l6sdbd().s[257]++;
      this.logger.warn(`Failed to add agent ${agentId} to pool: ${error instanceof Error ?
      /* istanbul ignore next */
      (cov_hj6l6sdbd().b[78][0]++, error.message) :
      /* istanbul ignore next */
      (cov_hj6l6sdbd().b[78][1]++, String(error))}`);
    }
  }
  /**
   * Mark agents as busy when assigned to tasks (minimal-change enhancement)
   */
  async markAgentsAsBusy(agentIds, taskId) {
    /* istanbul ignore next */
    cov_hj6l6sdbd().f[31]++;
    cov_hj6l6sdbd().s[258]++;
    for (const agentId of agentIds) {
      /* istanbul ignore next */
      cov_hj6l6sdbd().s[259]++;
      try {
        const pooledAgent =
        /* istanbul ignore next */
        (cov_hj6l6sdbd().s[260]++, this.agentPool.get(agentId));
        /* istanbul ignore next */
        cov_hj6l6sdbd().s[261]++;
        if (pooledAgent) {
          /* istanbul ignore next */
          cov_hj6l6sdbd().b[79][0]++;
          cov_hj6l6sdbd().s[262]++;
          pooledAgent.status = 'busy';
          /* istanbul ignore next */
          cov_hj6l6sdbd().s[263]++;
          pooledAgent.lastUsed = new Date();
          /* istanbul ignore next */
          cov_hj6l6sdbd().s[264]++;
          pooledAgent.usageCount++;
        } else
        /* istanbul ignore next */
        {
          cov_hj6l6sdbd().b[79][1]++;
        }
      } catch (error) {
        /* istanbul ignore next */
        cov_hj6l6sdbd().s[265]++;
        this.logger.warn(`Failed to mark agent ${agentId} as busy: ${error instanceof Error ?
        /* istanbul ignore next */
        (cov_hj6l6sdbd().b[80][0]++, error.message) :
        /* istanbul ignore next */
        (cov_hj6l6sdbd().b[80][1]++, String(error))}`);
      }
    }
  }
  /**
   * Enhanced agent cleanup with pool management (minimal-change enhancement)
   */
  async releaseAgentsToPool(allAgents, spawnedAgents) {
    /* istanbul ignore next */
    cov_hj6l6sdbd().f[32]++;
    cov_hj6l6sdbd().s[266]++;
    for (const agentId of allAgents) {
      /* istanbul ignore next */
      cov_hj6l6sdbd().s[267]++;
      try {
        const pooledAgent =
        /* istanbul ignore next */
        (cov_hj6l6sdbd().s[268]++, this.agentPool.get(agentId));
        /* istanbul ignore next */
        cov_hj6l6sdbd().s[269]++;
        if (pooledAgent) {
          /* istanbul ignore next */
          cov_hj6l6sdbd().b[81][0]++;
          // If agent was spawned for this task and has low usage, consider cleanup
          const wasSpawned =
          /* istanbul ignore next */
          (cov_hj6l6sdbd().s[270]++, spawnedAgents.includes(agentId));
          const shouldKeepInPool =
          /* istanbul ignore next */
          (cov_hj6l6sdbd().s[271]++,
          /* istanbul ignore next */
          (cov_hj6l6sdbd().b[82][0]++, !wasSpawned) ||
          /* istanbul ignore next */
          (cov_hj6l6sdbd().b[82][1]++, pooledAgent.usageCount > 1) ||
          /* istanbul ignore next */
          (cov_hj6l6sdbd().b[82][2]++, this.shouldKeepAgent(pooledAgent)));
          /* istanbul ignore next */
          cov_hj6l6sdbd().s[272]++;
          if (shouldKeepInPool) {
            /* istanbul ignore next */
            cov_hj6l6sdbd().b[83][0]++;
            cov_hj6l6sdbd().s[273]++;
            // Return to pool as available
            pooledAgent.status = 'available';
            /* istanbul ignore next */
            cov_hj6l6sdbd().s[274]++;
            this.logger.debug(`Released agent ${agentId} back to pool (usage: ${pooledAgent.usageCount})`);
          } else {
            /* istanbul ignore next */
            cov_hj6l6sdbd().b[83][1]++;
            cov_hj6l6sdbd().s[275]++;
            // Cleanup agent and remove from pool
            await this.cleanupPooledAgent(agentId);
          }
        } else {
          /* istanbul ignore next */
          cov_hj6l6sdbd().b[81][1]++;
          cov_hj6l6sdbd().s[276]++;
          // Agent not in pool, cleanup immediately
          await this.agentManager.stopAgent(agentId);
        }
      } catch (error) {
        /* istanbul ignore next */
        cov_hj6l6sdbd().s[277]++;
        this.logger.warn(`Failed to release agent ${agentId}: ${error instanceof Error ?
        /* istanbul ignore next */
        (cov_hj6l6sdbd().b[84][0]++, error.message) :
        /* istanbul ignore next */
        (cov_hj6l6sdbd().b[84][1]++, String(error))}`);
      }
    }
  }
  /**
   * Determine if agent should be kept in pool (simple heuristic)
   */
  shouldKeepAgent(pooledAgent) {
    /* istanbul ignore next */
    cov_hj6l6sdbd().f[33]++;
    const maxPoolSize =
    /* istanbul ignore next */
    (cov_hj6l6sdbd().s[278]++, 10); // Simple pool size limit
    const currentPoolSize =
    /* istanbul ignore next */
    (cov_hj6l6sdbd().s[279]++, Array.from(this.agentPool.values()).filter(a => {
      /* istanbul ignore next */
      cov_hj6l6sdbd().f[34]++;
      cov_hj6l6sdbd().s[280]++;
      return a.status === 'available';
    }).length);
    // Keep if under pool limit and recently used
    const recentlyUsed =
    /* istanbul ignore next */
    (cov_hj6l6sdbd().s[281]++, Date.now() - pooledAgent.lastUsed.getTime() < 1800000); // 30 minutes
    /* istanbul ignore next */
    cov_hj6l6sdbd().s[282]++;
    return /* istanbul ignore next */(cov_hj6l6sdbd().b[85][0]++, currentPoolSize < maxPoolSize) && (
    /* istanbul ignore next */
    (cov_hj6l6sdbd().b[85][1]++, recentlyUsed) ||
    /* istanbul ignore next */
    (cov_hj6l6sdbd().b[85][2]++, pooledAgent.usageCount > 2));
  }
  /**
   * Cleanup agent and remove from pool
   */
  async cleanupPooledAgent(agentId) {
    /* istanbul ignore next */
    cov_hj6l6sdbd().f[35]++;
    cov_hj6l6sdbd().s[283]++;
    try {
      const pooledAgent =
      /* istanbul ignore next */
      (cov_hj6l6sdbd().s[284]++, this.agentPool.get(agentId));
      // Remove from capability index
      /* istanbul ignore next */
      cov_hj6l6sdbd().s[285]++;
      if (pooledAgent) {
        /* istanbul ignore next */
        cov_hj6l6sdbd().b[86][0]++;
        cov_hj6l6sdbd().s[286]++;
        for (const capability of pooledAgent.capabilities) {
          const capabilitySet =
          /* istanbul ignore next */
          (cov_hj6l6sdbd().s[287]++, this.capabilityIndex.get(capability));
          /* istanbul ignore next */
          cov_hj6l6sdbd().s[288]++;
          if (capabilitySet) {
            /* istanbul ignore next */
            cov_hj6l6sdbd().b[87][0]++;
            cov_hj6l6sdbd().s[289]++;
            capabilitySet.delete(agentId);
            /* istanbul ignore next */
            cov_hj6l6sdbd().s[290]++;
            if (capabilitySet.size === 0) {
              /* istanbul ignore next */
              cov_hj6l6sdbd().b[88][0]++;
              cov_hj6l6sdbd().s[291]++;
              this.capabilityIndex.delete(capability);
            } else
            /* istanbul ignore next */
            {
              cov_hj6l6sdbd().b[88][1]++;
            }
          } else
          /* istanbul ignore next */
          {
            cov_hj6l6sdbd().b[87][1]++;
          }
        }
      } else
      /* istanbul ignore next */
      {
        cov_hj6l6sdbd().b[86][1]++;
      }
      // Remove from pool
      cov_hj6l6sdbd().s[292]++;
      this.agentPool.delete(agentId);
      // Stop the actual agent
      /* istanbul ignore next */
      cov_hj6l6sdbd().s[293]++;
      await this.agentManager.stopAgent(agentId);
      /* istanbul ignore next */
      cov_hj6l6sdbd().s[294]++;
      this.logger.debug(`Cleaned up agent ${agentId} and removed from pool`);
    } catch (error) {
      /* istanbul ignore next */
      cov_hj6l6sdbd().s[295]++;
      this.logger.warn(`Failed to cleanup pooled agent ${agentId}: ${error instanceof Error ?
      /* istanbul ignore next */
      (cov_hj6l6sdbd().b[89][0]++, error.message) :
      /* istanbul ignore next */
      (cov_hj6l6sdbd().b[89][1]++, String(error))}`);
    }
  }
  /**
   * Legacy cleanup method - now delegates to enhanced pool management
   */
  async cleanupManagedAgents(agentIds) {
    /* istanbul ignore next */
    cov_hj6l6sdbd().f[36]++;
    cov_hj6l6sdbd().s[296]++;
    // For backward compatibility - cleanup all specified agents
    for (const agentId of agentIds) {
      /* istanbul ignore next */
      cov_hj6l6sdbd().s[297]++;
      try {
        /* istanbul ignore next */
        cov_hj6l6sdbd().s[298]++;
        await this.cleanupPooledAgent(agentId);
      } catch (error) {
        /* istanbul ignore next */
        cov_hj6l6sdbd().s[299]++;
        this.logger.warn(`Failed to cleanup agent ${agentId}: ${error instanceof Error ?
        /* istanbul ignore next */
        (cov_hj6l6sdbd().b[90][0]++, error.message) :
        /* istanbul ignore next */
        (cov_hj6l6sdbd().b[90][1]++, String(error))}`);
      }
    }
  }
  /**
   * Shutdown agent pool and cleanup all agents (minimal-change enhancement)
   */
  async shutdownAgentPool() {
    /* istanbul ignore next */
    cov_hj6l6sdbd().f[37]++;
    cov_hj6l6sdbd().s[300]++;
    this.logger.info(`Shutting down agent pool with ${this.agentPool.size} agents`);
    const allAgentIds =
    /* istanbul ignore next */
    (cov_hj6l6sdbd().s[301]++, Array.from(this.agentPool.keys()));
    // Cleanup all pooled agents
    /* istanbul ignore next */
    cov_hj6l6sdbd().s[302]++;
    for (const agentId of allAgentIds) {
      /* istanbul ignore next */
      cov_hj6l6sdbd().s[303]++;
      try {
        /* istanbul ignore next */
        cov_hj6l6sdbd().s[304]++;
        await this.cleanupPooledAgent(agentId);
      } catch (error) {
        /* istanbul ignore next */
        cov_hj6l6sdbd().s[305]++;
        this.logger.warn(`Failed to cleanup pooled agent ${agentId} during shutdown: ${error instanceof Error ?
        /* istanbul ignore next */
        (cov_hj6l6sdbd().b[91][0]++, error.message) :
        /* istanbul ignore next */
        (cov_hj6l6sdbd().b[91][1]++, String(error))}`);
      }
    }
    // Clear data structures
    /* istanbul ignore next */
    cov_hj6l6sdbd().s[306]++;
    this.agentPool.clear();
    /* istanbul ignore next */
    cov_hj6l6sdbd().s[307]++;
    this.capabilityIndex.clear();
    /* istanbul ignore next */
    cov_hj6l6sdbd().s[308]++;
    this.logger.info('Agent pool shutdown complete');
  }
  /**
   * Get agent pool statistics (useful for monitoring and debugging)
   */
  getAgentPoolStats() {
    /* istanbul ignore next */
    cov_hj6l6sdbd().f[38]++;
    const agents =
    /* istanbul ignore next */
    (cov_hj6l6sdbd().s[309]++, Array.from(this.agentPool.values()));
    const totalAgents =
    /* istanbul ignore next */
    (cov_hj6l6sdbd().s[310]++, agents.length);
    /* istanbul ignore next */
    cov_hj6l6sdbd().s[311]++;
    if (totalAgents === 0) {
      /* istanbul ignore next */
      cov_hj6l6sdbd().b[92][0]++;
      cov_hj6l6sdbd().s[312]++;
      return {
        totalAgents: 0,
        availableAgents: 0,
        busyAgents: 0,
        averageUsage: 0,
        capabilitiesCovered: 0,
        reuseRate: 0
      };
    } else
    /* istanbul ignore next */
    {
      cov_hj6l6sdbd().b[92][1]++;
    }
    const availableAgents =
    /* istanbul ignore next */
    (cov_hj6l6sdbd().s[313]++, agents.filter(a => {
      /* istanbul ignore next */
      cov_hj6l6sdbd().f[39]++;
      cov_hj6l6sdbd().s[314]++;
      return a.status === 'available';
    }).length);
    const busyAgents =
    /* istanbul ignore next */
    (cov_hj6l6sdbd().s[315]++, agents.filter(a => {
      /* istanbul ignore next */
      cov_hj6l6sdbd().f[40]++;
      cov_hj6l6sdbd().s[316]++;
      return a.status === 'busy';
    }).length);
    const averageUsage =
    /* istanbul ignore next */
    (cov_hj6l6sdbd().s[317]++, agents.reduce((sum, a) => {
      /* istanbul ignore next */
      cov_hj6l6sdbd().f[41]++;
      cov_hj6l6sdbd().s[318]++;
      return sum + a.usageCount;
    }, 0) / totalAgents);
    const capabilitiesCovered =
    /* istanbul ignore next */
    (cov_hj6l6sdbd().s[319]++, this.capabilityIndex.size);
    // Calculate reuse rate (agents with usage > 1)
    const reusedAgents =
    /* istanbul ignore next */
    (cov_hj6l6sdbd().s[320]++, agents.filter(a => {
      /* istanbul ignore next */
      cov_hj6l6sdbd().f[42]++;
      cov_hj6l6sdbd().s[321]++;
      return a.usageCount > 1;
    }).length);
    const reuseRate =
    /* istanbul ignore next */
    (cov_hj6l6sdbd().s[322]++, totalAgents > 0 ?
    /* istanbul ignore next */
    (cov_hj6l6sdbd().b[93][0]++, reusedAgents / totalAgents) :
    /* istanbul ignore next */
    (cov_hj6l6sdbd().b[93][1]++, 0));
    /* istanbul ignore next */
    cov_hj6l6sdbd().s[323]++;
    return {
      totalAgents,
      availableAgents,
      busyAgents,
      averageUsage,
      capabilitiesCovered,
      reuseRate
    };
  }
  /**
   * Get steering context for agent types
   */
  async getSteeringContext(agentType, filePath) {
    /* istanbul ignore next */
    cov_hj6l6sdbd().f[43]++;
    let context =
    /* istanbul ignore next */
    (cov_hj6l6sdbd().s[324]++, '');
    const steeringFiles =
    /* istanbul ignore next */
    (cov_hj6l6sdbd().s[325]++, ['product.md', 'tech.md', 'structure.md']);
    /* istanbul ignore next */
    cov_hj6l6sdbd().s[326]++;
    for (const file of steeringFiles) {
      /* istanbul ignore next */
      cov_hj6l6sdbd().s[327]++;
      try {
        /* istanbul ignore next */
        cov_hj6l6sdbd().s[328]++;
        context += (await readFile(join(this.steeringDirectory, file), 'utf8')) + '\n\n---\n\n';
      } catch (error) {
        /* istanbul ignore next */
        cov_hj6l6sdbd().s[329]++;
        this.logger.warn(`Could not read steering file ${file}: ${error instanceof Error ?
        /* istanbul ignore next */
        (cov_hj6l6sdbd().b[94][0]++, error.message) :
        /* istanbul ignore next */
        (cov_hj6l6sdbd().b[94][1]++, String(error))}`);
      }
    }
    /* istanbul ignore next */
    cov_hj6l6sdbd().s[330]++;
    return /* istanbul ignore next */(cov_hj6l6sdbd().b[95][0]++, context) ||
    /* istanbul ignore next */
    (cov_hj6l6sdbd().b[95][1]++, 'No steering context available.');
  }
  /**
   * Initialize agentic hooks system
   */
  async initializeAgenticHooks() {
    /* istanbul ignore next */
    cov_hj6l6sdbd().f[44]++;
    cov_hj6l6sdbd().s[331]++;
    if (!this.agenticHooksInitialized) {
      /* istanbul ignore next */
      cov_hj6l6sdbd().b[96][0]++;
      cov_hj6l6sdbd().s[332]++;
      try {
        /* istanbul ignore next */
        cov_hj6l6sdbd().s[333]++;
        await initializeAgenticFlowHooks();
        /* istanbul ignore next */
        cov_hj6l6sdbd().s[334]++;
        this.agenticHooksInitialized = true;
        /* istanbul ignore next */
        cov_hj6l6sdbd().s[335]++;
        this.logger.info('Agentic hooks system initialized for Maestro');
        // Register Maestro-specific hooks
        /* istanbul ignore next */
        cov_hj6l6sdbd().s[336]++;
        this.registerMaestroHooks();
      } catch (error) {
        /* istanbul ignore next */
        cov_hj6l6sdbd().s[337]++;
        this.logger.error('Failed to initialize agentic hooks:', error);
      }
    } else
    /* istanbul ignore next */
    {
      cov_hj6l6sdbd().b[96][1]++;
    }
  }
  /**
   * Register Maestro-specific hooks
   */
  registerMaestroHooks() {
    /* istanbul ignore next */
    cov_hj6l6sdbd().f[45]++;
    cov_hj6l6sdbd().s[338]++;
    // Register workflow hooks
    agenticHookManager.register({
      id: 'maestro-spec-created',
      type: 'workflow-start',
      handler: async (payload, context) => {
        /* istanbul ignore next */
        cov_hj6l6sdbd().f[46]++;
        cov_hj6l6sdbd().s[339]++;
        this.logger.info('Maestro spec creation hook triggered');
        /* istanbul ignore next */
        cov_hj6l6sdbd().s[340]++;
        return {
          continue: true
        };
      },
      priority: 50
    });
    /* istanbul ignore next */
    cov_hj6l6sdbd().s[341]++;
    agenticHookManager.register({
      id: 'maestro-task-completed',
      type: 'workflow-step',
      handler: async (payload, context) => {
        /* istanbul ignore next */
        cov_hj6l6sdbd().f[47]++;
        cov_hj6l6sdbd().s[342]++;
        this.logger.info('Maestro task completion hook triggered');
        /* istanbul ignore next */
        cov_hj6l6sdbd().s[343]++;
        return {
          continue: true
        };
      },
      priority: 50
    });
    /* istanbul ignore next */
    cov_hj6l6sdbd().s[344]++;
    this.logger.info('Maestro-specific hooks registered');
  }
  /**
   * Setup event handlers
   */
  setupEventHandlers() {
    /* istanbul ignore next */
    cov_hj6l6sdbd().f[48]++;
    cov_hj6l6sdbd().s[345]++;
    this.eventBus.on('maestro:spec_created', this.handleSpecCreated.bind(this));
    /* istanbul ignore next */
    cov_hj6l6sdbd().s[346]++;
    this.eventBus.on('maestro:phase_approved', this.handlePhaseApproved.bind(this));
    /* istanbul ignore next */
    cov_hj6l6sdbd().s[347]++;
    this.eventBus.on('maestro:task_implemented', this.handleTaskImplemented.bind(this));
  }
  /**
   * Event handlers
   */
  async handleSpecCreated(data) {
    /* istanbul ignore next */
    cov_hj6l6sdbd().f[49]++;
    cov_hj6l6sdbd().s[348]++;
    this.logger.info(`Spec created event: ${JSON.stringify(data)}`);
  }
  async handlePhaseApproved(data) {
    /* istanbul ignore next */
    cov_hj6l6sdbd().f[50]++;
    cov_hj6l6sdbd().s[349]++;
    this.logger.info(`Phase approved event: ${JSON.stringify(data)}`);
  }
  async handleTaskImplemented(data) {
    /* istanbul ignore next */
    cov_hj6l6sdbd().f[51]++;
    cov_hj6l6sdbd().s[350]++;
    this.logger.info(`Task implemented event: ${JSON.stringify(data)}`);
  }
  /**
   * Utility: Wait for task completion in hive mind
   */
  async waitForTaskCompletion(taskId, timeoutMs =
  /* istanbul ignore next */
  (cov_hj6l6sdbd().b[97][0]++, 300000)) {
    /* istanbul ignore next */
    cov_hj6l6sdbd().f[52]++;
    cov_hj6l6sdbd().s[351]++;
    return new Promise((resolve, reject) => {
      /* istanbul ignore next */
      cov_hj6l6sdbd().f[53]++;
      const timeout =
      /* istanbul ignore next */
      (cov_hj6l6sdbd().s[352]++, setTimeout(() => {
        /* istanbul ignore next */
        cov_hj6l6sdbd().f[54]++;
        cov_hj6l6sdbd().s[353]++;
        reject(new Error(`Task timeout: ${taskId}`));
      }, timeoutMs));
      const checkInterval =
      /* istanbul ignore next */
      (cov_hj6l6sdbd().s[354]++, setInterval(async () => {
        /* istanbul ignore next */
        cov_hj6l6sdbd().f[55]++;
        cov_hj6l6sdbd().s[355]++;
        try {
          const task =
          /* istanbul ignore next */
          (cov_hj6l6sdbd().s[356]++, await this.hiveMind.getTask(taskId));
          /* istanbul ignore next */
          cov_hj6l6sdbd().s[357]++;
          if (task.status === 'completed') {
            /* istanbul ignore next */
            cov_hj6l6sdbd().b[98][0]++;
            cov_hj6l6sdbd().s[358]++;
            clearTimeout(timeout);
            /* istanbul ignore next */
            cov_hj6l6sdbd().s[359]++;
            clearInterval(checkInterval);
            /* istanbul ignore next */
            cov_hj6l6sdbd().s[360]++;
            resolve(task.result ?
            /* istanbul ignore next */
            (cov_hj6l6sdbd().b[99][0]++, JSON.parse(task.result)) :
            /* istanbul ignore next */
            (cov_hj6l6sdbd().b[99][1]++, {}));
          } else {
            /* istanbul ignore next */
            cov_hj6l6sdbd().b[98][1]++;
            cov_hj6l6sdbd().s[361]++;
            if (task.status === 'failed') {
              /* istanbul ignore next */
              cov_hj6l6sdbd().b[100][0]++;
              cov_hj6l6sdbd().s[362]++;
              clearTimeout(timeout);
              /* istanbul ignore next */
              cov_hj6l6sdbd().s[363]++;
              clearInterval(checkInterval);
              /* istanbul ignore next */
              cov_hj6l6sdbd().s[364]++;
              reject(new Error(`Task failed: ${
              /* istanbul ignore next */
              (cov_hj6l6sdbd().b[101][0]++, task.error) ||
              /* istanbul ignore next */
              (cov_hj6l6sdbd().b[101][1]++, 'Unknown error')}`));
            } else
            /* istanbul ignore next */
            {
              cov_hj6l6sdbd().b[100][1]++;
            }
          }
        } catch (error) {
          /* istanbul ignore next */
          cov_hj6l6sdbd().s[365]++;
          clearTimeout(timeout);
          /* istanbul ignore next */
          cov_hj6l6sdbd().s[366]++;
          clearInterval(checkInterval);
          /* istanbul ignore next */
          cov_hj6l6sdbd().s[367]++;
          reject(error);
        }
      }, 2000));
    });
  }
  /**
   * Utility: Wait for consensus result
   */
  async waitForConsensusResult(proposalId, timeoutMs) {
    /* istanbul ignore next */
    cov_hj6l6sdbd().f[56]++;
    cov_hj6l6sdbd().s[368]++;
    return new Promise((resolve, reject) => {
      /* istanbul ignore next */
      cov_hj6l6sdbd().f[57]++;
      const timeout =
      /* istanbul ignore next */
      (cov_hj6l6sdbd().s[369]++, setTimeout(() => {
        /* istanbul ignore next */
        cov_hj6l6sdbd().f[58]++;
        cov_hj6l6sdbd().s[370]++;
        reject(new Error(`Consensus timeout for proposal ${proposalId}`));
      }, timeoutMs));
      const checkInterval =
      /* istanbul ignore next */
      (cov_hj6l6sdbd().s[371]++, setInterval(async () => {
        /* istanbul ignore next */
        cov_hj6l6sdbd().f[59]++;
        cov_hj6l6sdbd().s[372]++;
        try {
          const status =
          /* istanbul ignore next */
          (cov_hj6l6sdbd().s[373]++, await this.consensusEngine.getProposalStatus(proposalId));
          /* istanbul ignore next */
          cov_hj6l6sdbd().s[374]++;
          if (status.status === 'achieved') {
            /* istanbul ignore next */
            cov_hj6l6sdbd().b[102][0]++;
            cov_hj6l6sdbd().s[375]++;
            clearTimeout(timeout);
            /* istanbul ignore next */
            cov_hj6l6sdbd().s[376]++;
            clearInterval(checkInterval);
            /* istanbul ignore next */
            cov_hj6l6sdbd().s[377]++;
            resolve({
              achieved: true,
              finalRatio: status.currentRatio,
              reason: 'Consensus achieved'
            });
          } else {
            /* istanbul ignore next */
            cov_hj6l6sdbd().b[102][1]++;
            cov_hj6l6sdbd().s[378]++;
            if (status.status === 'failed') {
              /* istanbul ignore next */
              cov_hj6l6sdbd().b[103][0]++;
              cov_hj6l6sdbd().s[379]++;
              clearTimeout(timeout);
              /* istanbul ignore next */
              cov_hj6l6sdbd().s[380]++;
              clearInterval(checkInterval);
              /* istanbul ignore next */
              cov_hj6l6sdbd().s[381]++;
              resolve({
                achieved: false,
                finalRatio: status.currentRatio,
                reason: 'Consensus failed'
              });
            } else
            /* istanbul ignore next */
            {
              cov_hj6l6sdbd().b[103][1]++;
            }
          }
        } catch (error) {
          /* istanbul ignore next */
          cov_hj6l6sdbd().s[382]++;
          clearTimeout(timeout);
          /* istanbul ignore next */
          cov_hj6l6sdbd().s[383]++;
          clearInterval(checkInterval);
          /* istanbul ignore next */
          cov_hj6l6sdbd().s[384]++;
          reject(error);
        }
      }, 1000));
    });
  }
  /**
   * Shutdown orchestrator and cleanup resources
   */
  async shutdown() {
    /* istanbul ignore next */
    cov_hj6l6sdbd().f[60]++;
    cov_hj6l6sdbd().s[385]++;
    this.logger.info('Shutting down Maestro Orchestrator');
    // Close file watchers
    /* istanbul ignore next */
    cov_hj6l6sdbd().s[386]++;
    for (const [featureName, watcher] of this.fileWatchers) {
      /* istanbul ignore next */
      cov_hj6l6sdbd().s[387]++;
      await watcher.close();
      /* istanbul ignore next */
      cov_hj6l6sdbd().s[388]++;
      this.logger.info(`Closed file watcher for '${featureName}'`);
    }
    // Shutdown agentic hooks if initialized
    /* istanbul ignore next */
    cov_hj6l6sdbd().s[389]++;
    if (this.agenticHooksInitialized) {
      /* istanbul ignore next */
      cov_hj6l6sdbd().b[104][0]++;
      cov_hj6l6sdbd().s[390]++;
      // Unregister Maestro hooks
      try {
        /* istanbul ignore next */
        cov_hj6l6sdbd().s[391]++;
        agenticHookManager.unregister('maestro-spec-created');
        /* istanbul ignore next */
        cov_hj6l6sdbd().s[392]++;
        agenticHookManager.unregister('maestro-task-completed');
      } catch (error) {
        /* istanbul ignore next */
        cov_hj6l6sdbd().s[393]++;
        this.logger.warn('Failed to unregister Maestro hooks:', error);
      }
    } else
    /* istanbul ignore next */
    {
      cov_hj6l6sdbd().b[104][1]++;
    }
    // Shutdown hive mind if initialized
    cov_hj6l6sdbd().s[394]++;
    if (this.hiveMind) {
      /* istanbul ignore next */
      cov_hj6l6sdbd().b[105][0]++;
      cov_hj6l6sdbd().s[395]++;
      await this.hiveMind.shutdown();
      /* istanbul ignore next */
      cov_hj6l6sdbd().s[396]++;
      this.logger.info('Hive mind shutdown complete');
    } else
    /* istanbul ignore next */
    {
      cov_hj6l6sdbd().b[105][1]++;
    }
    // Cleanup agent pool (minimal-change enhancement)
    cov_hj6l6sdbd().s[397]++;
    await this.shutdownAgentPool();
    // Task planner removed - using direct agent management
    /* istanbul ignore next */
    cov_hj6l6sdbd().s[398]++;
    this.logger.info('Maestro Orchestrator shutdown complete');
  }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,