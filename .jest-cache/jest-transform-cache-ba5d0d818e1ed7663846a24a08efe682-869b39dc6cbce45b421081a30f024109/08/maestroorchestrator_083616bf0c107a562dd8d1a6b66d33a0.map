{"version":3,"names":["cov_hj6l6sdbd","actualCoverage","EventEmitter","join","readFile","writeFile","mkdir","access","agenticHookManager","initializeAgenticFlowHooks","SystemError","HiveMind","MaestroOrchestrator","config","eventBus","logger","memoryManager","agentManager","mainOrchestrator","maestroConfig","maestroState","s","Map","specsDirectory","steeringDirectory","hiveMind","consensusEngine","swarmOrchestrator","agenticHooksInitialized","fileWatchers","agentPool","capabilityIndex","constructor","b","f","process","cwd","enableAgentHooks","initializeAgenticHooks","setupEventHandlers","info","initializeHiveMind","enableHiveMind","hiveMindConfig","name","topology","queenMode","maxAgents","consensusThreshold","memoryTTL","autoSpawn","enableConsensus","enableMemory","enableCommunication","swarmId","initialize","consensus","orchestrator","error","Error","message","String","createSpec","featureName","initialRequest","featurePath","recursive","workflowState","currentPhase","currentTaskIndex","status","lastActivity","Date","history","phase","timestamp","set","requirementsContent","toLowerCase","emit","executeHooks","workflowId","state","sessionId","now","correlationId","metadata","memory","namespace","provider","cache","neural","modelId","patterns","training","performance","metrics","bottlenecks","optimizations","warn","generateDesign","get","requirementsPath","generateDesignWithHiveMind","generateDesignWithAgentManager","push","requirements","taskOptions","description","priority","strategy","requiredCapabilities","maestroFeature","maestroPhase","task","submitTask","result","waitForTaskCompletion","id","designContent","architectureOverview","componentDesign","apiDesign","databaseSchema","securityConsiderations","performanceRequirements","implementationStrategy","agentCount","qualityScore","toFixed","designTask","type","input","outputPath","instructions","optimalAgentTypes","getOptimalAgentTypes","executeTaskWithManagedAgent","generateTasks","designPath","tasksContent","generateTasksWithSimplePlanner","taskPlanningTask","executeTaskPlanningWithManagedAgent","generateBasicTasksFromDesign","optimalPlannerTypes","generatedContent","length","formatTaskPlanningOutput","debug","output","includes","tasks","taskList","dependencies","notes","implementationNotes","Array","isArray","map","index","startsWith","JSON","stringify","implementTask","taskId","tasksPath","taskLines","split","filter","line","taskDescription","substring","indexOf","trim","implementTaskWithConsensus","implementTaskDirect","updatedTasksContent","replace","proposal","action","details","requiredThreshold","deadline","proposalId","createProposal","consensusResult","waitForConsensusResult","achieved","reason","finalRatio","implementationTask","design","context","getSteeringContext","optimalDeveloperTypes","approvePhase","phaseProgression","nextPhase","fromPhase","toPhase","getWorkflowState","createSteeringDocument","domain","content","steeringPath","steeringContent","charAt","toUpperCase","slice","agentTypes","capabilities","acquiredAgents","spawnedAgents","reusedAgents","findReusableAgents","needed","typesToSpawn","agentType","agentProfile","createStandardAgentProfile","resolvedType","getAgentTemplate","agentId","createAgent","startAgent","addAgentToPool","markAgentsAsBusy","assignedAgent","assignTask","releaseAgentsToPool","getDefaultCapabilitiesForAgentType","maxConcurrentTasks","getDefaultPriorityForAgentType","aliasMap","capabilityMap","priorityMap","taskType","availableAgents","pooledAgent","getConfiguredAgentTypes","taskTypeAgents","capabilityAgents","typeSet","Set","capability","possibleTypes","forEach","add","from","reusableAgents","candidateIds","agentsWithCapability","size","intersection","has","lastUsed","usageCount","createdAt","agentIds","allAgents","wasSpawned","shouldKeepInPool","shouldKeepAgent","cleanupPooledAgent","stopAgent","maxPoolSize","currentPoolSize","values","a","recentlyUsed","getTime","capabilitySet","delete","cleanupManagedAgents","shutdownAgentPool","allAgentIds","keys","clear","getAgentPoolStats","agents","totalAgents","busyAgents","averageUsage","capabilitiesCovered","reuseRate","reduce","sum","filePath","steeringFiles","file","registerMaestroHooks","register","handler","payload","continue","on","handleSpecCreated","bind","handlePhaseApproved","handleTaskImplemented","data","timeoutMs","Promise","resolve","reject","timeout","setTimeout","checkInterval","setInterval","getTask","clearTimeout","clearInterval","parse","getProposalStatus","currentRatio","shutdown","watcher","close","unregister"],"sources":["/home/mhugo/code/claude-code-flow/src/maestro/maestro-orchestrator.ts"],"sourcesContent":["/**\n * Maestro Orchestrator - Refactored and Cleaned Up\n * \n * A specifications-driven development orchestrator that integrates seamlessly\n * with the existing claude-flow hive mind infrastructure for collective intelligence,\n * consensus-based decision making, and advanced workflow automation.\n * \n * This refactored version eliminates duplicate implementations and leverages\n * the proven hive mind system for enhanced reliability and performance.\n */\n\nimport { EventEmitter } from 'events';\nimport { join } from 'path';\nimport { readFile, writeFile, mkdir, access } from 'fs/promises';\n// Import agentic-flow hooks system\nimport { agenticHookManager, initializeAgenticFlowHooks, type AgenticHookContext } from '../services/agentic-flow-hooks/index.js';\n\n// Core claude-flow infrastructure\nimport { IEventBus } from '../core/event-bus.js';\nimport { ILogger } from '../core/logger.js';\nimport { IMemoryManager } from '../memory/manager.js';\nimport { AgentManager } from '../agents/agent-manager.js';\nimport { Orchestrator } from '../core/orchestrator.js';\nimport { Config } from '../utils/types.js';\nimport { SystemError } from '../utils/errors.js';\n\n// Existing hive mind infrastructure (proven and robust)\nimport { HiveMind } from '../hive-mind/core/HiveMind.js';\nimport { ConsensusEngine } from '../hive-mind/integration/ConsensusEngine.js';\nimport { SwarmOrchestrator } from '../hive-mind/integration/SwarmOrchestrator.js';\n\n// Types for maestro system\nimport {\n  MaestroSpec,\n  MaestroWorkflowState,\n  WorkflowPhase,\n  TaskItem,\n  AgentProfile,\n  SteeringContext\n} from './maestro-types.js';\n\n// Simple interface for agent pool (minimal-change enhancement)\ninterface PooledAgent {\n  id: string;\n  type: string;\n  capabilities: string[];\n  status: 'available' | 'busy' | 'maintenance';\n  lastUsed: Date;\n  usageCount: number;\n  createdAt: Date;\n}\n\n// Remove SimpleTaskPlanner dependency - using direct agent management\nimport {\n  HiveMindConfig,\n  ConsensusProposal,\n  TaskSubmitOptions,\n  AgentSpawnOptions,\n  QueenMode,\n  AgentCapability\n} from '../hive-mind/types.js';\n\nexport interface MaestroConfig {\n  // Integration with hive mind\n  enableHiveMind: boolean;\n  consensusThreshold: number;\n  maxAgents: number;\n  \n  // Maestro-specific features\n  enableLivingDocumentation: boolean;\n  enableAgentHooks: boolean;\n  enablePatternLearning: boolean;\n  \n  // File system settings\n  specsDirectory: string;\n  steeringDirectory: string;\n}\n\n/**\n * Main Maestro Orchestrator class\n * Integrates with existing hive mind infrastructure instead of duplicating it\n */\nexport class MaestroOrchestrator extends EventEmitter {\n  private maestroState: Map<string, MaestroWorkflowState> = new Map();\n  private specsDirectory: string;\n  private steeringDirectory: string;\n  \n  // Hive mind integration (leveraging existing robust systems)\n  private hiveMind?: HiveMind;\n  private consensusEngine?: ConsensusEngine;\n  private swarmOrchestrator?: SwarmOrchestrator;\n  \n  // Removed SimpleTaskPlanner - using direct agent management\n  \n  private agenticHooksInitialized: boolean = false;\n  \n  // File watchers for living documentation\n  private fileWatchers: Map<string, any> = new Map();\n  \n  // Simple agent pool for reuse (minimal-change enhancement)\n  private agentPool: Map<string, PooledAgent> = new Map();\n  private capabilityIndex: Map<string, Set<string>> = new Map();\n  \n  constructor(\n    private config: Config,\n    private eventBus: IEventBus,\n    private logger: ILogger,\n    private memoryManager: IMemoryManager,\n    private agentManager: AgentManager,\n    private mainOrchestrator: Orchestrator,\n    private maestroConfig: Partial<MaestroConfig> = {}\n  ) {\n    super();\n    \n    this.specsDirectory = join(process.cwd(), '.claude', 'claude-flow', 'maestro', 'specs');\n    this.steeringDirectory = join(process.cwd(), '.claude', 'claude-flow', 'maestro', 'steering');\n\n    // Initialize agentic-flow hooks if enabled\n    if (this.maestroConfig.enableAgentHooks) {\n      this.initializeAgenticHooks();\n    }\n    \n    this.setupEventHandlers();\n    this.logger.info('Maestro Orchestrator initialized');\n  }\n  \n  /**\n   * Initialize hive mind integration for advanced features\n   */\n  async initializeHiveMind(): Promise<string | null> {\n    if (!this.maestroConfig.enableHiveMind) {\n      this.logger.info('Hive mind integration disabled');\n      return null;\n    }\n    \n    try {\n      // Configure hive mind for Maestro workflows\n      const hiveMindConfig: HiveMindConfig = {\n        name: 'maestro-collective',\n        topology: 'hierarchical',\n        queenMode: 'strategic' as QueenMode,\n        maxAgents: this.maestroConfig.maxAgents || 8,\n        consensusThreshold: this.maestroConfig.consensusThreshold || 0.66,\n        memoryTTL: 86400000, // 24 hours\n        autoSpawn: true,\n        enableConsensus: true,\n        enableMemory: true,\n        enableCommunication: true\n      };\n      \n      // Initialize hive mind with existing infrastructure\n      this.hiveMind = new HiveMind(hiveMindConfig);\n      const swarmId = await this.hiveMind.initialize();\n      \n      // Get access to integrated subsystems\n      this.consensusEngine = (this.hiveMind as any).consensus;\n      this.swarmOrchestrator = (this.hiveMind as any).orchestrator;\n      \n      this.logger.info(`Maestro hive mind initialized: ${swarmId}`);\n      return swarmId;\n      \n    } catch (error) {\n      this.logger.error(`Failed to initialize hive mind: ${error instanceof Error ? error.message : String(error)}`);\n      throw error;\n    }\n  }\n  \n  /**\n   * Create a new specification using the 3-file system\n   */\n  async createSpec(featureName: string, initialRequest: string): Promise<void> {\n    const featurePath = join(this.specsDirectory, featureName);\n    await mkdir(featurePath, { recursive: true });\n    \n    // Initialize workflow state\n    const workflowState: MaestroWorkflowState = {\n      featureName,\n      currentPhase: 'Requirements Clarification' as WorkflowPhase,\n      currentTaskIndex: 0,\n      status: 'paused',\n      lastActivity: new Date(),\n      history: [{\n        phase: 'Requirements Clarification' as WorkflowPhase,\n        status: 'in-progress' as 'completed' | 'failed' | 'in-progress' | 'approved',\n        timestamp: new Date()\n      }]\n    };\n    \n    this.maestroState.set(featureName, workflowState);\n    \n    // Create requirements.md\n    const requirementsContent = `# Requirements for ${featureName}\n\n## High-Level Request\n\n${initialRequest}\n\n## User Stories\n\n- As a user, I want ${initialRequest.toLowerCase()}, so that I can achieve my goals\n\n## Acceptance Criteria\n\n- [ ] Feature functions as described\n- [ ] Code is well-tested\n- [ ] Documentation is complete\n- [ ] Performance requirements are met\n\n## Technical Requirements\n\n- [ ] Integration with existing systems\n- [ ] Error handling and validation\n- [ ] Security considerations\n- [ ] Scalability considerations\n\n*Generated by Maestro Orchestrator*\n`;\n    \n    await writeFile(join(featurePath, 'requirements.md'), requirementsContent, 'utf8');\n    \n    this.logger.info(`Created specification for '${featureName}'`);\n    this.eventBus.emit('maestro:spec_created', { featureName });\n    \n    // Trigger agentic hooks for spec creation\n    if (this.agenticHooksInitialized) {\n      try {\n        await agenticHookManager.executeHooks('workflow-start', {\n          workflowId: `maestro-${featureName}`,\n          state: { featureName, phase: 'spec-creation' }\n        } as any, {\n          sessionId: `maestro-session-${Date.now()}`,\n          timestamp: Date.now(),\n          correlationId: `maestro-${featureName}`,\n          metadata: { featureName },\n          memory: { namespace: 'maestro', provider: 'memory', cache: new Map() },\n          neural: { modelId: 'default', patterns: null as any, training: null as any },\n          performance: { metrics: new Map(), bottlenecks: [], optimizations: [] }\n        } as AgenticHookContext);\n      } catch (error) {\n        this.logger.warn('Failed to execute agentic hooks:', error);\n      }\n    }\n  }\n  \n  /**\n   * Generate design using hive mind collective intelligence\n   */\n  async generateDesign(featureName: string): Promise<void> {\n    const state = this.maestroState.get(featureName);\n    if (!state) {\n      throw new SystemError(`No workflow state found for '${featureName}'`);\n    }\n    \n    const featurePath = join(this.specsDirectory, featureName);\n    const requirementsPath = join(featurePath, 'requirements.md');\n    \n    try {\n      await access(requirementsPath);\n    } catch {\n      throw new SystemError(`Requirements file not found for '${featureName}'. Run create-spec first.`);\n    }\n    \n    const requirementsContent = await readFile(requirementsPath, 'utf8');\n    \n    // Use hive mind for collective design generation if available\n    if (this.hiveMind && this.swarmOrchestrator) {\n      await this.generateDesignWithHiveMind(featureName, requirementsContent);\n    } else {\n      await this.generateDesignWithAgentManager(featureName, requirementsContent);\n    }\n    \n    // Update workflow state\n    state.currentPhase = 'Research & Design' as WorkflowPhase;\n    state.lastActivity = new Date();\n    state.history.push({\n      phase: 'Research & Design' as WorkflowPhase,\n      status: 'completed',\n      timestamp: new Date()\n    });\n    \n    this.logger.info(`Generated design for '${featureName}'`);\n    this.eventBus.emit('maestro:design_generated', { featureName });\n  }\n  \n  /**\n   * Generate design using hive mind collective intelligence\n   */\n  private async generateDesignWithHiveMind(featureName: string, requirements: string): Promise<void> {\n    const taskOptions: TaskSubmitOptions = {\n      description: `Generate comprehensive design for ${featureName}`,\n      priority: 'high',\n      strategy: 'adaptive',\n      requiredCapabilities: ['system_design' as AgentCapability, 'architecture' as AgentCapability, 'technical_writing' as AgentCapability],\n      metadata: {\n        maestroFeature: featureName,\n        maestroPhase: 'Research & Design',\n        requirements\n      }\n    };\n    \n    // Submit to hive mind orchestrator\n    const task = await this.hiveMind!.submitTask(taskOptions);\n    \n    // Wait for completion with timeout\n    const result = await this.waitForTaskCompletion(task.id, 300000); // 5 minutes\n    \n    // Create design.md with hive mind results\n    const designContent = `# Design for ${featureName}\n\n## Architecture Overview\n\n${result.architectureOverview || 'System architecture designed by hive mind collective intelligence.'}\n\n## Component Design\n\n${result.componentDesign || 'Detailed component breakdown generated through collaborative analysis.'}\n\n## API Design\n\n${result.apiDesign || 'RESTful API endpoints and data structures designed for optimal integration.'}\n\n## Database Schema\n\n${result.databaseSchema || 'Database schema optimized for performance and scalability.'}\n\n## Security Considerations\n\n${result.securityConsiderations || 'Security measures and access controls implemented throughout the system.'}\n\n## Performance Requirements\n\n${result.performanceRequirements || 'Performance benchmarks and optimization strategies defined.'}\n\n## Implementation Strategy\n\n${result.implementationStrategy || 'Step-by-step implementation approach with risk mitigation.'}\n\n*Generated by Maestro with Hive Mind Collective Intelligence*\n*Agents involved: ${result.agentCount || 'Multiple'} specialized agents*\n*Quality score: ${result.qualityScore ? (result.qualityScore * 100).toFixed(1) + '%' : 'High'}*\n`;\n    \n    const featurePath = join(this.specsDirectory, featureName);\n    await writeFile(join(featurePath, 'design.md'), designContent, 'utf8');\n  }\n  \n  /**\n   * Generate design using consistent agent management\n   */\n  private async generateDesignWithAgentManager(featureName: string, requirements: string): Promise<void> {\n    const designTask = {\n      id: `design-task-${featureName}-${Date.now()}`,\n      type: 'design-generation',\n      description: `Generate comprehensive design for feature '${featureName}'`,\n      input: {\n        featureName,\n        requirementsPath: join(this.specsDirectory, featureName, 'requirements.md'),\n        outputPath: join(this.specsDirectory, featureName, 'design.md'),\n        instructions: [\n          'Create comprehensive system architecture',\n          'Define API endpoints and data structures', \n          'Include security and performance considerations',\n          'Provide implementation strategy'\n        ]\n      },\n      priority: 80,\n      metadata: { \n        featureName, \n        maestroPhase: 'Research & Design',\n        outputPath: join(this.specsDirectory, featureName, 'design.md')\n      },\n    };\n\n    // Execute with configurable agent selection (minimal-change enhancement)\n    const optimalAgentTypes = await this.getOptimalAgentTypes(\n      ['design', 'architecture', 'analysis'],\n      'design-generation',\n      2\n    );\n    await this.executeTaskWithManagedAgent(\n      optimalAgentTypes,\n      designTask,\n      ['design', 'architecture', 'analysis']\n    );\n  }\n  \n  /**\n   * Generate tasks from design using intelligent decomposition\n   */\n  async generateTasks(featureName: string): Promise<void> {\n    const state = this.maestroState.get(featureName);\n    if (!state) {\n      throw new SystemError(`No workflow state found for '${featureName}'`);\n    }\n    \n    const featurePath = join(this.specsDirectory, featureName);\n    const designPath = join(featurePath, 'design.md');\n    \n    try {\n      await access(designPath);\n    } catch {\n      throw new SystemError(`Design file not found for '${featureName}'. Run generate-design first.`);\n    }\n    \n    const designContent = await readFile(designPath, 'utf8');\n    \n    // Generate tasks using simple task planner\n    const tasksContent = await this.generateTasksWithSimplePlanner(featureName, designContent);\n    await writeFile(join(featurePath, 'tasks.md'), tasksContent, 'utf8');\n    \n    // Update workflow state\n    state.currentPhase = 'Implementation Planning' as WorkflowPhase;\n    state.lastActivity = new Date();\n    state.history.push({\n      phase: 'Implementation Planning' as WorkflowPhase,\n      status: 'completed',\n      timestamp: new Date()\n    });\n    \n    this.logger.info(`Generated tasks for '${featureName}'`);\n    this.eventBus.emit('maestro:tasks_generated', { featureName });\n  }\n  \n  /**\n   * Generate tasks using consistent agent management pattern\n   */\n  private async generateTasksWithSimplePlanner(featureName: string, designContent: string): Promise<string> {\n    // Create task planning task with consistent structure\n    const taskPlanningTask = {\n      id: `task-planning-${featureName}-${Date.now()}`,\n      type: 'task-planning',\n      description: `Generate implementation tasks for feature '${featureName}'`,\n      input: {\n        featureName,\n        designContent,\n        requirementsPath: join(this.specsDirectory, featureName, 'requirements.md'),\n        outputPath: join(this.specsDirectory, featureName, 'tasks.md'),\n        instructions: [\n          'Analyze design content for implementation tasks',\n          'Create 5-8 specific, actionable tasks with acceptance criteria',\n          'Organize tasks by logical implementation sequence',\n          'Include dependency relationships between tasks',\n          'Format as markdown with checkboxes'\n        ]\n      },\n      priority: 85,\n      metadata: {\n        featureName,\n        maestroPhase: 'Implementation Planning',\n        outputPath: join(this.specsDirectory, featureName, 'tasks.md')\n      },\n    };\n\n    try {\n      this.logger.info(`Generating tasks for ${featureName} using consistent agent management`);\n      \n      // Execute with consistent agent management pattern\n      const result = await this.executeTaskPlanningWithManagedAgent(taskPlanningTask);\n      \n      this.logger.info(`Task plan generated successfully for ${featureName}`);\n      return result;\n      \n    } catch (error) {\n      this.logger.warn(`Agent-based task planning failed: ${error instanceof Error ? error.message : String(error)}, falling back to basic generation`);\n      return this.generateBasicTasksFromDesign(featureName, designContent);\n    }\n  }\n\n  /**\n   * Execute task planning with consistent agent management\n   */\n  private async executeTaskPlanningWithManagedAgent(taskPlanningTask: any): Promise<string> {\n    // Execute with configurable agent selection (minimal-change enhancement)\n    const optimalPlannerTypes = await this.getOptimalAgentTypes(\n      ['project-management', 'task-breakdown', 'planning'],\n      'task-planning',\n      1\n    );\n    await this.executeTaskWithManagedAgent(\n      optimalPlannerTypes, \n      taskPlanningTask,\n      ['project-management', 'task-breakdown', 'planning']\n    );\n    \n    // Try to read the generated output file\n    try {\n      const outputPath = taskPlanningTask.metadata.outputPath;\n      const generatedContent = await readFile(outputPath, 'utf8');\n      \n      // If content was generated, format and return it\n      if (generatedContent && generatedContent.length > 0) {\n        return this.formatTaskPlanningOutput(generatedContent, taskPlanningTask.input.featureName);\n      }\n    } catch (error) {\n      this.logger.debug(`Could not read task planning output: ${error instanceof Error ? error.message : String(error)}`);\n    }\n    \n    // Fallback to basic task generation\n    return this.generateBasicTasksFromDesign(taskPlanningTask.input.featureName, taskPlanningTask.input.designContent);\n  }\n\n  /**\n   * Format task planning output to consistent markdown\n   */\n  private formatTaskPlanningOutput(output: any, featureName: string): string {\n    if (typeof output === 'string' && output.includes('# Implementation Tasks')) {\n      return output;\n    }\n\n    // Handle structured output from agent\n    if (output && typeof output === 'object') {\n      const tasks = output.tasks || output.taskList || [];\n      const dependencies = output.dependencies || '';\n      const notes = output.notes || output.implementationNotes || '';\n      \n      if (Array.isArray(tasks) && tasks.length > 0) {\n        return `# Implementation Tasks for ${featureName}\n\n## Task Breakdown\n\n${tasks.map((task: any, index: number) => {\n  if (typeof task === 'string') {\n    return task.startsWith('- [ ]') ? task : `- [ ] ${task}`;\n  }\n  return `- [ ] ${task.description || task.name || `Task ${index + 1}`}`;\n}).join('\\n')}\n\n${dependencies ? `## Dependencies\\n${dependencies}\\n` : ''}\n${notes ? `## Implementation Notes\\n${notes}\\n` : ''}\n\n*Generated by Maestro Agent-Based Task Planning*`;\n      }\n    }\n\n    // Convert string output to proper format\n    if (typeof output === 'string') {\n      return `# Implementation Tasks for ${featureName}\n\n## Task Breakdown\n\n${output}\n\n*Generated by Maestro Agent-Based Task Planning*`;\n    }\n\n    return `# Implementation Tasks for ${featureName}\n\n## Task Breakdown\n\n${JSON.stringify(output, null, 2)}\n\n*Generated by Maestro Agent-Based Task Planning*`;\n  }\n\n  /**\n   * Fallback: Generate basic tasks from design content\n   */\n  private async generateBasicTasksFromDesign(featureName: string, designContent: string): Promise<string> {\n    // Extract key components from design for task generation\n    const tasks = [\n      '- [ ] Set up project structure and dependencies',\n      '- [ ] Implement core data models',\n      '- [ ] Create API endpoints',\n      '- [ ] Implement business logic',\n      '- [ ] Add input validation and error handling',\n      '- [ ] Implement security measures',\n      '- [ ] Add comprehensive tests',\n      '- [ ] Create documentation',\n      '- [ ] Performance optimization',\n      '- [ ] Integration testing'\n    ];\n    \n    return `# Implementation Tasks for ${featureName}\n\n## Task List\n\n${tasks.join('\\n')}\n\n## Notes\n\n- Tasks are ordered by dependency and logical implementation sequence\n- Each task should be completed and tested before moving to the next\n- Use \\`npx claude-flow maestro implement-task ${featureName} <task-number>\\` to implement each task\n\n*Generated by Maestro Basic Task Generation (Fallback)*\n`;\n  }\n  \n  /**\n   * Implement a specific task with optional consensus validation\n   */\n  async implementTask(featureName: string, taskId: number): Promise<void> {\n    const state = this.maestroState.get(featureName);\n    if (!state) {\n      throw new SystemError(`No workflow state found for '${featureName}'`);\n    }\n    \n    const featurePath = join(this.specsDirectory, featureName);\n    const tasksPath = join(featurePath, 'tasks.md');\n    \n    // Read and validate task\n    const tasksContent = await readFile(tasksPath, 'utf8');\n    const taskLines = tasksContent.split('\\n').filter(line => line.startsWith('- [ ]') || line.startsWith('- [x]'));\n    \n    if (taskId < 1 || taskId > taskLines.length) {\n      throw new SystemError(`Invalid task ID ${taskId} for feature '${featureName}'. Valid range: 1-${taskLines.length}`);\n    }\n    \n    const taskDescription = taskLines[taskId - 1].substring(taskLines[taskId - 1].indexOf(']') + 2).trim();\n    \n    // Use consensus validation if hive mind is available and enabled\n    if (this.consensusEngine && this.maestroConfig.enableHiveMind) {\n      await this.implementTaskWithConsensus(featureName, taskId, taskDescription);\n    } else {\n      await this.implementTaskDirect(featureName, taskId, taskDescription);\n    }\n    \n    // Mark task as completed\n    const updatedTasksContent = tasksContent.replace(\n      taskLines[taskId - 1],\n      taskLines[taskId - 1].replace('- [ ]', '- [x]')\n    );\n    await writeFile(tasksPath, updatedTasksContent, 'utf8');\n    \n    // Update workflow state\n    state.currentPhase = 'Task Execution' as WorkflowPhase;\n    state.currentTaskIndex = taskId;\n    state.lastActivity = new Date();\n    \n    this.logger.info(`Implemented task ${taskId} for '${featureName}': ${taskDescription}`);\n    this.eventBus.emit('maestro:task_implemented', { featureName, taskId, taskDescription });\n  }\n  \n  /**\n   * Implement task with hive mind consensus validation\n   */\n  private async implementTaskWithConsensus(featureName: string, taskId: number, taskDescription: string): Promise<void> {\n    // Create consensus proposal for task implementation\n    const proposal: ConsensusProposal = {\n      id: `maestro-task-${featureName}-${taskId}-${Date.now()}`,\n      swarmId: (this.hiveMind as any).id,\n      proposal: {\n        action: 'implement_task',\n        featureName,\n        taskId,\n        taskDescription,\n        details: `Implement task: ${taskDescription}`\n      },\n      requiredThreshold: this.maestroConfig.consensusThreshold || 0.66,\n      deadline: new Date(Date.now() + 300000), // 5 minutes\n      // creator: 'maestro-orchestrator', // Remove unsupported property\n      taskId: `maestro-task-${featureName}-${taskId}`,\n      metadata: {\n        type: 'task_implementation',\n        featureName,\n        taskId,\n        taskDescription\n      }\n    };\n    \n    // Submit proposal and wait for consensus\n    const proposalId = await this.consensusEngine!.createProposal(proposal);\n    const consensusResult = await this.waitForConsensusResult(proposalId, 300000);\n    \n    if (!consensusResult.achieved) {\n      throw new SystemError(`Consensus failed for task ${taskId}: ${consensusResult.reason || 'Insufficient votes'}`);\n    }\n    \n    this.logger.info(`Consensus achieved for task ${taskId}: ${consensusResult.finalRatio}`);\n    \n    // Proceed with implementation\n    await this.implementTaskDirect(featureName, taskId, taskDescription);\n  }\n  \n  /**\n   * Direct task implementation using consistent agent management\n   */\n  private async implementTaskDirect(featureName: string, taskId: number, taskDescription: string): Promise<void> {\n    const requirementsPath = join(this.specsDirectory, featureName, 'requirements.md');\n    const designPath = join(this.specsDirectory, featureName, 'design.md');\n    \n    const requirementsContent = await readFile(requirementsPath, 'utf8');\n    const designContent = await readFile(designPath, 'utf8');\n    \n    // Create implementation task with consistent structure\n    const implementationTask = {\n      id: `impl-task-${featureName}-${taskId}-${Date.now()}`,\n      type: 'task-implementation',\n      description: `Implement: ${taskDescription}`,\n      input: {\n        featureName,\n        taskId,\n        taskDescription,\n        requirements: requirementsContent,\n        design: designContent,\n        context: await this.getSteeringContext('developer')\n      },\n      priority: 90,\n      metadata: { \n        featureName, \n        taskId,\n        maestroPhase: 'Task Execution' \n      },\n    };\n\n    // Execute with configurable agent selection (minimal-change enhancement)\n    const optimalDeveloperTypes = await this.getOptimalAgentTypes(\n      ['implementation', 'coding', 'testing'],\n      'task-implementation',\n      2\n    );\n    await this.executeTaskWithManagedAgent(\n      optimalDeveloperTypes, \n      implementationTask,\n      ['implementation', 'coding', 'testing']\n    );\n  }\n  \n  /**\n   * Approve a workflow phase with optional consensus\n   */\n  async approvePhase(featureName: string): Promise<void> {\n    const state = this.maestroState.get(featureName);\n    if (!state) {\n      throw new SystemError(`No workflow state found for '${featureName}'`);\n    }\n    \n    const currentPhase = state.currentPhase;\n    \n    // Phase progression logic\n    const phaseProgression: Record<string, string> = {\n      'Requirements Clarification': 'Research & Design',\n      'Research & Design': 'Implementation Planning', \n      'Implementation Planning': 'Task Execution',\n      'Task Execution': 'Completed'\n    };\n    \n    const nextPhase = phaseProgression[currentPhase];\n    if (!nextPhase) {\n      throw new SystemError(`Cannot progress from phase '${currentPhase}'`);\n    }\n    \n    // Update state\n    state.currentPhase = nextPhase as WorkflowPhase;\n    state.lastActivity = new Date();\n    state.history.push({\n      phase: nextPhase as WorkflowPhase,\n      status: 'approved' as 'completed' | 'failed' | 'in-progress' | 'approved',\n      timestamp: new Date()\n    });\n    \n    this.logger.info(`Approved phase transition for '${featureName}': ${currentPhase} -> ${nextPhase}`);\n    this.eventBus.emit('maestro:phase_approved', { featureName, fromPhase: currentPhase, toPhase: nextPhase });\n  }\n  \n  /**\n   * Get current workflow state\n   */\n  getWorkflowState(featureName: string): MaestroWorkflowState | undefined {\n    return this.maestroState.get(featureName);\n  }\n  \n  /**\n   * Create steering document for project context\n   */\n  async createSteeringDocument(domain: string, content: string): Promise<void> {\n    await mkdir(this.steeringDirectory, { recursive: true });\n    const steeringPath = join(this.steeringDirectory, `${domain}.md`);\n    \n    const steeringContent = `# ${domain.charAt(0).toUpperCase() + domain.slice(1)} Steering Document\n\n${content}\n\n## Guidelines\n\n[Provide specific guidelines for the '${domain}' domain. E.g., API design, testing, security, coding style.]\n`;\n    \n    await writeFile(steeringPath, steeringContent, 'utf8');\n    this.logger.info(`Created steering document for '${domain}' at '${steeringPath}'`);\n  }\n  \n  /**\n   * Enhanced agent management with reuse-first strategy (minimal-change improvement)\n   * Single Responsibility: Manages agent lifecycle for any task type\n   * Open/Closed: Extensible for new agent types without modification\n   * Dependency Inversion: Depends on abstractions, not concrete implementations\n   */\n  private async executeTaskWithManagedAgent(\n    agentTypes: string[], \n    task: any, \n    capabilities: string[]\n  ): Promise<void> {\n    const acquiredAgents: string[] = [];\n    const spawnedAgents: string[] = [];\n    \n    try {\n      // Step 1: Try to reuse existing agents first (minimal-change enhancement)\n      const reusedAgents = await this.findReusableAgents(capabilities, agentTypes.length);\n      acquiredAgents.push(...reusedAgents);\n      \n      // Step 2: Spawn additional agents only if needed\n      const needed = agentTypes.length - reusedAgents.length;\n      if (needed > 0) {\n        const typesToSpawn = agentTypes.slice(0, needed);\n        \n        for (const agentType of typesToSpawn) {\n          try {\n            const agentProfile = this.createStandardAgentProfile(agentType, task.metadata?.featureName, capabilities);\n            const resolvedType = this.getAgentTemplate(agentType);\n            const agentId = await this.agentManager.createAgent(resolvedType, agentProfile);\n            await this.agentManager.startAgent(agentId);\n            \n            // Add to pool for future reuse\n            await this.addAgentToPool(agentId, resolvedType, capabilities);\n            \n            spawnedAgents.push(agentId);\n            acquiredAgents.push(agentId);\n          } catch (error) {\n            this.logger.warn(`Failed to spawn ${agentType} (resolved to ${this.getAgentTemplate(agentType)}): ${error instanceof Error ? error.message : String(error)}`);\n          }\n        }\n      }\n      \n      // Step 3: Mark reused agents as busy\n      await this.markAgentsAsBusy(reusedAgents, task.id);\n      \n      // Assign task to first available agent (fallback to default)\n      const assignedAgent = acquiredAgents[0] || 'default';\n      task.assignedAgent = assignedAgent;\n      \n      // Execute task through main orchestrator\n      await this.mainOrchestrator.assignTask(task);\n      \n      this.logger.info(`Task ${task.id} executed with ${reusedAgents.length} reused + ${spawnedAgents.length} spawned agents`);\n      \n    } finally {\n      // Step 4: Release agents back to pool (enhanced cleanup)\n      await this.releaseAgentsToPool(acquiredAgents, spawnedAgents);\n    }\n  }\n\n  /**\n   * Create standardized agent profile (KISS + SOLID principles + alias support)\n   */\n  private createStandardAgentProfile(agentType: string, featureName?: string, capabilities?: string[]): AgentProfile {\n    // Resolve agent type aliases\n    const resolvedType = this.getAgentTemplate(agentType);\n    \n    return {\n      id: `${agentType}-${featureName || 'default'}-${Date.now()}`,\n      name: `${agentType}${featureName ? ` for ${featureName}` : ''}`,\n      type: resolvedType, // Use resolved type for actual agent creation\n      capabilities: capabilities || this.getDefaultCapabilitiesForAgentType(agentType),\n      maxConcurrentTasks: 1,\n      priority: this.getDefaultPriorityForAgentType(agentType)\n    };\n  }\n\n  /**\n   * Agent alias mapping for backward compatibility (SOLID: Open/Closed)\n   */\n  private getAgentTemplate(agentType: string): string {\n    const aliasMap: Record<string, string> = {\n      'planner': 'task-planner',\n      'coder': 'developer'\n    };\n    return aliasMap[agentType] || agentType;\n  }\n\n  /**\n   * Get default capabilities based on agent type (KISS principle + comprehensive coverage)\n   */\n  private getDefaultCapabilitiesForAgentType(agentType: string): string[] {\n    const capabilityMap: Record<string, string[]> = {\n      // Core Architecture & Design\n      'design-architect': ['design', 'architecture', 'analysis'],\n      'system-architect': ['system-architecture', 'scalability', 'performance', 'distributed-systems'],\n      \n      // Development & Implementation\n      'developer': ['implementation', 'coding', 'testing'],\n      'coder': ['implementation', 'coding', 'testing'],\n      \n      // Project Management & Planning\n      'task-planner': ['project-management', 'task-breakdown', 'planning'],\n      'planner': ['project-management', 'task-breakdown', 'planning'],\n      \n      // Quality Assurance & Testing\n      'tester': ['testing', 'quality-assurance', 'test-automation'],\n      'reviewer': ['code-review', 'quality-assurance', 'analysis'],\n      \n      // Research & Analysis (previously unused templates now integrated)\n      'researcher': ['research', 'analysis', 'documentation'],\n      'analyst': ['analysis', 'data-processing', 'visualization'],\n      'requirements-engineer': ['requirements', 'documentation', 'analysis'],\n      'steering-author': ['documentation', 'governance', 'content-creation']\n    };\n    \n    return capabilityMap[agentType] || ['general'];\n  }\n\n  /**\n   * Get default priority based on agent type (KISS principle + comprehensive coverage)\n   */\n  private getDefaultPriorityForAgentType(agentType: string): number {\n    const priorityMap: Record<string, number> = {\n      // Critical Implementation (Highest Priority)\n      'developer': 90,\n      'coder': 90,\n      \n      // Architecture & Planning (High Priority)  \n      'design-architect': 85,\n      'system-architect': 85,\n      'task-planner': 85,\n      'planner': 85,\n      \n      // Quality Assurance (Medium-High Priority)\n      'tester': 80,\n      'reviewer': 75,\n      \n      // Research & Analysis (Medium Priority)\n      'researcher': 70,\n      'analyst': 70,\n      'requirements-engineer': 75,\n      \n      // Documentation & Governance (Lower Priority)\n      'steering-author': 65\n    };\n    \n    return priorityMap[agentType] || 70;\n  }\n\n  /**\n   * Get optimal agent types for task based on capabilities and availability (minimal-change enhancement)\n   * Replaces hardcoded agent arrays with intelligent selection\n   */\n  private async getOptimalAgentTypes(\n    requiredCapabilities: string[], \n    taskType: string,\n    maxAgents: number = 2\n  ): Promise<string[]> {\n    // Check for available agents with matching capabilities first\n    const availableAgents = await this.findReusableAgents(requiredCapabilities, maxAgents);\n    \n    if (availableAgents.length >= maxAgents) {\n      // Use existing agents if available\n      return availableAgents.map(agentId => {\n        const pooledAgent = this.agentPool.get(agentId);\n        return pooledAgent?.type || 'general';\n      });\n    }\n    \n    // Fallback to configured agent types based on capabilities and task type\n    return this.getConfiguredAgentTypes(requiredCapabilities, taskType, maxAgents);\n  }\n\n  /**\n   * Get configured agent types based on task requirements (replaces hardcoded arrays)\n   */\n  private getConfiguredAgentTypes(\n    requiredCapabilities: string[], \n    taskType: string,\n    maxAgents: number\n  ): string[] {\n    // Smart mapping based on task type and capabilities\n    const taskTypeAgents: Record<string, string[]> = {\n      'design-generation': ['design-architect', 'system-architect'],\n      'task-planning': ['task-planner', 'planner'],\n      'task-implementation': ['developer', 'coder'],\n      'code-review': ['reviewer', 'analyst'],\n      'research': ['researcher', 'analyst'],\n      'documentation': ['requirements-engineer', 'steering-author']\n    };\n\n    // Capability-based fallback mapping\n    const capabilityAgents: Record<string, string[]> = {\n      'design': ['design-architect', 'system-architect'],\n      'architecture': ['system-architect', 'design-architect'],\n      'system-architecture': ['system-architect'],\n      'implementation': ['developer', 'coder'],\n      'coding': ['developer', 'coder'],\n      'testing': ['tester', 'developer'],\n      'project-management': ['task-planner'],\n      'task-breakdown': ['task-planner'],\n      'planning': ['task-planner', 'planner'],\n      'analysis': ['analyst', 'researcher'],\n      'research': ['researcher', 'analyst'],\n      'documentation': ['requirements-engineer', 'steering-author'],\n      'code-review': ['reviewer', 'analyst'],\n      'quality-assurance': ['reviewer', 'tester']\n    };\n\n    // Try task type first\n    let agentTypes = taskTypeAgents[taskType] || [];\n\n    // If no direct task type match, build from capabilities\n    if (agentTypes.length === 0) {\n      const typeSet = new Set<string>();\n      \n      for (const capability of requiredCapabilities) {\n        const possibleTypes = capabilityAgents[capability] || [];\n        possibleTypes.forEach(type => typeSet.add(type));\n      }\n      \n      agentTypes = Array.from(typeSet);\n    }\n\n    // Fallback to general agent types\n    if (agentTypes.length === 0) {\n      agentTypes = ['developer', 'analyst']; // Safe defaults\n    }\n\n    // Limit to maxAgents\n    return agentTypes.slice(0, maxAgents);\n  }\n\n  /**\n   * Find reusable agents with matching capabilities (minimal-change enhancement)\n   */\n  private async findReusableAgents(requiredCapabilities: string[], maxAgents: number): Promise<string[]> {\n    const reusableAgents: string[] = [];\n    \n    try {\n      // Find agents with matching capabilities using capability index\n      let candidateIds: Set<string> | null = null;\n      \n      for (const capability of requiredCapabilities) {\n        const agentsWithCapability = this.capabilityIndex.get(capability);\n        \n        if (!agentsWithCapability || agentsWithCapability.size === 0) {\n          continue; // Skip if no agents have this capability\n        }\n        \n        if (candidateIds === null) {\n          candidateIds = new Set(agentsWithCapability);\n        } else {\n          // Find intersection - agents with ALL required capabilities\n          const intersection = new Set<string>();\n          candidateIds.forEach(id => {\n            if (agentsWithCapability.has(id)) {\n              intersection.add(id);\n            }\n          });\n          candidateIds = intersection;\n        }\n      }\n      \n      // Get available agents from candidates\n      if (candidateIds && candidateIds.size > 0) {\n        for (const agentId of candidateIds) {\n          if (reusableAgents.length >= maxAgents) break;\n          \n          const pooledAgent = this.agentPool.get(agentId);\n          if (pooledAgent && pooledAgent.status === 'available') {\n            reusableAgents.push(agentId);\n          }\n        }\n      }\n      \n      if (reusableAgents.length > 0) {\n        this.logger.info(`Found ${reusableAgents.length} reusable agents for capabilities: [${requiredCapabilities.join(', ')}]`);\n      }\n      \n    } catch (error) {\n      this.logger.warn(`Error finding reusable agents: ${error instanceof Error ? error.message : String(error)}`);\n    }\n    \n    return reusableAgents;\n  }\n\n  /**\n   * Add agent to pool for future reuse (minimal-change enhancement)\n   */\n  private async addAgentToPool(agentId: string, agentType: string, capabilities: string[]): Promise<void> {\n    try {\n      const pooledAgent: PooledAgent = {\n        id: agentId,\n        type: agentType,\n        capabilities: capabilities,\n        status: 'available',\n        lastUsed: new Date(),\n        usageCount: 0,\n        createdAt: new Date()\n      };\n      \n      // Add to main pool\n      this.agentPool.set(agentId, pooledAgent);\n      \n      // Update capability index for efficient lookup\n      for (const capability of capabilities) {\n        if (!this.capabilityIndex.has(capability)) {\n          this.capabilityIndex.set(capability, new Set());\n        }\n        this.capabilityIndex.get(capability)!.add(agentId);\n      }\n      \n      this.logger.debug(`Added agent ${agentId} (${agentType}) to pool with capabilities: [${capabilities.join(', ')}]`);\n      \n    } catch (error) {\n      this.logger.warn(`Failed to add agent ${agentId} to pool: ${error instanceof Error ? error.message : String(error)}`);\n    }\n  }\n\n  /**\n   * Mark agents as busy when assigned to tasks (minimal-change enhancement)\n   */\n  private async markAgentsAsBusy(agentIds: string[], taskId: string): Promise<void> {\n    for (const agentId of agentIds) {\n      try {\n        const pooledAgent = this.agentPool.get(agentId);\n        if (pooledAgent) {\n          pooledAgent.status = 'busy';\n          pooledAgent.lastUsed = new Date();\n          pooledAgent.usageCount++;\n        }\n      } catch (error) {\n        this.logger.warn(`Failed to mark agent ${agentId} as busy: ${error instanceof Error ? error.message : String(error)}`);\n      }\n    }\n  }\n\n  /**\n   * Enhanced agent cleanup with pool management (minimal-change enhancement)\n   */\n  private async releaseAgentsToPool(allAgents: string[], spawnedAgents: string[]): Promise<void> {\n    for (const agentId of allAgents) {\n      try {\n        const pooledAgent = this.agentPool.get(agentId);\n        \n        if (pooledAgent) {\n          // If agent was spawned for this task and has low usage, consider cleanup\n          const wasSpawned = spawnedAgents.includes(agentId);\n          const shouldKeepInPool = !wasSpawned || pooledAgent.usageCount > 1 || this.shouldKeepAgent(pooledAgent);\n          \n          if (shouldKeepInPool) {\n            // Return to pool as available\n            pooledAgent.status = 'available';\n            this.logger.debug(`Released agent ${agentId} back to pool (usage: ${pooledAgent.usageCount})`);\n          } else {\n            // Cleanup agent and remove from pool\n            await this.cleanupPooledAgent(agentId);\n          }\n        } else {\n          // Agent not in pool, cleanup immediately\n          await this.agentManager.stopAgent(agentId);\n        }\n        \n      } catch (error) {\n        this.logger.warn(`Failed to release agent ${agentId}: ${error instanceof Error ? error.message : String(error)}`);\n      }\n    }\n  }\n\n  /**\n   * Determine if agent should be kept in pool (simple heuristic)\n   */\n  private shouldKeepAgent(pooledAgent: PooledAgent): boolean {\n    const maxPoolSize = 10; // Simple pool size limit\n    const currentPoolSize = Array.from(this.agentPool.values()).filter(a => a.status === 'available').length;\n    \n    // Keep if under pool limit and recently used\n    const recentlyUsed = Date.now() - pooledAgent.lastUsed.getTime() < 1800000; // 30 minutes\n    return currentPoolSize < maxPoolSize && (recentlyUsed || pooledAgent.usageCount > 2);\n  }\n\n  /**\n   * Cleanup agent and remove from pool\n   */\n  private async cleanupPooledAgent(agentId: string): Promise<void> {\n    try {\n      const pooledAgent = this.agentPool.get(agentId);\n      \n      // Remove from capability index\n      if (pooledAgent) {\n        for (const capability of pooledAgent.capabilities) {\n          const capabilitySet = this.capabilityIndex.get(capability);\n          if (capabilitySet) {\n            capabilitySet.delete(agentId);\n            if (capabilitySet.size === 0) {\n              this.capabilityIndex.delete(capability);\n            }\n          }\n        }\n      }\n      \n      // Remove from pool\n      this.agentPool.delete(agentId);\n      \n      // Stop the actual agent\n      await this.agentManager.stopAgent(agentId);\n      \n      this.logger.debug(`Cleaned up agent ${agentId} and removed from pool`);\n      \n    } catch (error) {\n      this.logger.warn(`Failed to cleanup pooled agent ${agentId}: ${error instanceof Error ? error.message : String(error)}`);\n    }\n  }\n\n  /**\n   * Legacy cleanup method - now delegates to enhanced pool management\n   */\n  private async cleanupManagedAgents(agentIds: string[]): Promise<void> {\n    // For backward compatibility - cleanup all specified agents\n    for (const agentId of agentIds) {\n      try {\n        await this.cleanupPooledAgent(agentId);\n      } catch (error) {\n        this.logger.warn(`Failed to cleanup agent ${agentId}: ${error instanceof Error ? error.message : String(error)}`);\n      }\n    }\n  }\n\n  /**\n   * Shutdown agent pool and cleanup all agents (minimal-change enhancement)\n   */\n  private async shutdownAgentPool(): Promise<void> {\n    this.logger.info(`Shutting down agent pool with ${this.agentPool.size} agents`);\n    \n    const allAgentIds = Array.from(this.agentPool.keys());\n    \n    // Cleanup all pooled agents\n    for (const agentId of allAgentIds) {\n      try {\n        await this.cleanupPooledAgent(agentId);\n      } catch (error) {\n        this.logger.warn(`Failed to cleanup pooled agent ${agentId} during shutdown: ${error instanceof Error ? error.message : String(error)}`);\n      }\n    }\n    \n    // Clear data structures\n    this.agentPool.clear();\n    this.capabilityIndex.clear();\n    \n    this.logger.info('Agent pool shutdown complete');\n  }\n\n  /**\n   * Get agent pool statistics (useful for monitoring and debugging)\n   */\n  getAgentPoolStats(): {\n    totalAgents: number;\n    availableAgents: number;\n    busyAgents: number;\n    averageUsage: number;\n    capabilitiesCovered: number;\n    reuseRate: number;\n  } {\n    const agents = Array.from(this.agentPool.values());\n    const totalAgents = agents.length;\n    \n    if (totalAgents === 0) {\n      return {\n        totalAgents: 0,\n        availableAgents: 0,\n        busyAgents: 0,\n        averageUsage: 0,\n        capabilitiesCovered: 0,\n        reuseRate: 0\n      };\n    }\n    \n    const availableAgents = agents.filter(a => a.status === 'available').length;\n    const busyAgents = agents.filter(a => a.status === 'busy').length;\n    const averageUsage = agents.reduce((sum, a) => sum + a.usageCount, 0) / totalAgents;\n    const capabilitiesCovered = this.capabilityIndex.size;\n    \n    // Calculate reuse rate (agents with usage > 1)\n    const reusedAgents = agents.filter(a => a.usageCount > 1).length;\n    const reuseRate = totalAgents > 0 ? reusedAgents / totalAgents : 0;\n    \n    return {\n      totalAgents,\n      availableAgents,\n      busyAgents,\n      averageUsage,\n      capabilitiesCovered,\n      reuseRate\n    };\n  }\n\n  /**\n   * Get steering context for agent types\n   */\n  async getSteeringContext(agentType: string, filePath?: string): Promise<string> {\n    let context = '';\n    const steeringFiles = ['product.md', 'tech.md', 'structure.md'];\n    \n    for (const file of steeringFiles) {\n      try {\n        context += await readFile(join(this.steeringDirectory, file), 'utf8') + '\\n\\n---\\n\\n';\n      } catch (error) {\n        this.logger.warn(`Could not read steering file ${file}: ${error instanceof Error ? error.message : String(error)}`);\n      }\n    }\n    \n    return context || 'No steering context available.';\n  }\n  \n  /**\n   * Initialize agentic hooks system\n   */\n  private async initializeAgenticHooks(): Promise<void> {\n    if (!this.agenticHooksInitialized) {\n      try {\n        await initializeAgenticFlowHooks();\n        this.agenticHooksInitialized = true;\n        this.logger.info('Agentic hooks system initialized for Maestro');\n        \n        // Register Maestro-specific hooks\n        this.registerMaestroHooks();\n      } catch (error) {\n        this.logger.error('Failed to initialize agentic hooks:', error);\n      }\n    }\n  }\n  \n  /**\n   * Register Maestro-specific hooks\n   */\n  private registerMaestroHooks(): void {\n    // Register workflow hooks\n    agenticHookManager.register({\n      id: 'maestro-spec-created',\n      type: 'workflow-start',\n      handler: async (payload, context) => {\n        this.logger.info('Maestro spec creation hook triggered');\n        return { continue: true };\n      },\n      priority: 50\n    });\n    \n    agenticHookManager.register({\n      id: 'maestro-task-completed', \n      type: 'workflow-step',\n      handler: async (payload, context) => {\n        this.logger.info('Maestro task completion hook triggered');\n        return { continue: true };\n      },\n      priority: 50\n    });\n    \n    this.logger.info('Maestro-specific hooks registered');\n  }\n  \n  /**\n   * Setup event handlers\n   */\n  private setupEventHandlers(): void {\n    this.eventBus.on('maestro:spec_created', this.handleSpecCreated.bind(this));\n    this.eventBus.on('maestro:phase_approved', this.handlePhaseApproved.bind(this));\n    this.eventBus.on('maestro:task_implemented', this.handleTaskImplemented.bind(this));\n  }\n  \n  /**\n   * Event handlers\n   */\n  private async handleSpecCreated(data: any): Promise<void> {\n    this.logger.info(`Spec created event: ${JSON.stringify(data)}`);\n  }\n  \n  private async handlePhaseApproved(data: any): Promise<void> {\n    this.logger.info(`Phase approved event: ${JSON.stringify(data)}`);\n  }\n  \n  private async handleTaskImplemented(data: any): Promise<void> {\n    this.logger.info(`Task implemented event: ${JSON.stringify(data)}`);\n  }\n  \n  /**\n   * Utility: Wait for task completion in hive mind\n   */\n  private async waitForTaskCompletion(taskId: string, timeoutMs: number = 300000): Promise<any> {\n    return new Promise((resolve, reject) => {\n      const timeout = setTimeout(() => {\n        reject(new Error(`Task timeout: ${taskId}`));\n      }, timeoutMs);\n      \n      const checkInterval = setInterval(async () => {\n        try {\n          const task = await this.hiveMind!.getTask(taskId);\n          \n          if (task.status === 'completed') {\n            clearTimeout(timeout);\n            clearInterval(checkInterval);\n            resolve(task.result ? JSON.parse(task.result) : {});\n          } else if (task.status === 'failed') {\n            clearTimeout(timeout);\n            clearInterval(checkInterval);\n            reject(new Error(`Task failed: ${task.error || 'Unknown error'}`));\n          }\n        } catch (error) {\n          clearTimeout(timeout);\n          clearInterval(checkInterval);\n          reject(error);\n        }\n      }, 2000);\n    });\n  }\n  \n  /**\n   * Utility: Wait for consensus result\n   */\n  private async waitForConsensusResult(proposalId: string, timeoutMs: number): Promise<any> {\n    return new Promise((resolve, reject) => {\n      const timeout = setTimeout(() => {\n        reject(new Error(`Consensus timeout for proposal ${proposalId}`));\n      }, timeoutMs);\n      \n      const checkInterval = setInterval(async () => {\n        try {\n          const status = await this.consensusEngine!.getProposalStatus(proposalId);\n          \n          if (status.status === 'achieved') {\n            clearTimeout(timeout);\n            clearInterval(checkInterval);\n            resolve({\n              achieved: true,\n              finalRatio: status.currentRatio,\n              reason: 'Consensus achieved'\n            });\n          } else if (status.status === 'failed') {\n            clearTimeout(timeout);\n            clearInterval(checkInterval);\n            resolve({\n              achieved: false,\n              finalRatio: status.currentRatio,\n              reason: 'Consensus failed'\n            });\n          }\n        } catch (error) {\n          clearTimeout(timeout);\n          clearInterval(checkInterval);\n          reject(error);\n        }\n      }, 1000);\n    });\n  }\n  \n  /**\n   * Shutdown orchestrator and cleanup resources\n   */\n  async shutdown(): Promise<void> {\n    this.logger.info('Shutting down Maestro Orchestrator');\n    \n    // Close file watchers\n    for (const [featureName, watcher] of this.fileWatchers) {\n      await watcher.close();\n      this.logger.info(`Closed file watcher for '${featureName}'`);\n    }\n    \n    // Shutdown agentic hooks if initialized\n    if (this.agenticHooksInitialized) {\n      // Unregister Maestro hooks\n      try {\n        agenticHookManager.unregister('maestro-spec-created');\n        agenticHookManager.unregister('maestro-task-completed');\n      } catch (error) {\n        this.logger.warn('Failed to unregister Maestro hooks:', error);\n      }\n    }\n\n    // Shutdown hive mind if initialized\n    if (this.hiveMind) {\n      await this.hiveMind.shutdown();\n      this.logger.info('Hive mind shutdown complete');\n    }\n    \n    // Cleanup agent pool (minimal-change enhancement)\n    await this.shutdownAgentPool();\n    \n    // Task planner removed - using direct agent management\n    \n    this.logger.info('Maestro Orchestrator shutdown complete');\n  }\n}"],"mappingswBS;IAAAA,aAAA,YAAAA,CAAA;MAAA,OAAAC,cAAA;IAAA;EAAA;EAAA,OAAAA,cAAA;AAAA;AAAAD,aAAA;AAxBT;;;;;;;;;;AAWA,SAASE,YAAY,QAAQ,QAAQ;AACrC,SAASC,IAAI,QAAQ,MAAM;AAC3B,SAASC,QAAQ,EAAEC,SAAS,EAAEC,KAAK,EAAEC,MAAM,QAAQ,aAAa;AAChE;AACA,SAASC,kBAAkB,EAAEC,0BAA0B,QAAiC,yCAAyC;AASjI,SAASC,WAAW,QAAQ,oBAAoB;AAEhD;AACA,SAASC,QAAQ,QAAQ,+BAA+B;AAmDxD;;;;AAIA,OAAM,MAAOC,mBAAoB,SAAQV,YAAY;EAsBzCW,MAAA;EACAC,QAAA;EACAC,MAAA;EACAC,aAAA;EACAC,YAAA;EACAC,gBAAA;EACAC,aAAA;EA3BFC,YAAY;EAAA;EAAA,CAAApB,aAAA,GAAAqB,CAAA,OAAsC,IAAIC,GAAG,EAAE;EAC3DC,cAAc;EACdC,iBAAiB;EAEzB;EACQC,QAAQ;EACRC,eAAe;EACfC,iBAAiB;EAEzB;EAEQC,uBAAuB;EAAA;EAAA,CAAA5B,aAAA,GAAAqB,CAAA,OAAY,KAAK;EAEhD;EACQQ,YAAY;EAAA;EAAA,CAAA7B,aAAA,GAAAqB,CAAA,OAAqB,IAAIC,GAAG,EAAE;EAElD;EACQQ,SAAS;EAAA;EAAA,CAAA9B,aAAA,GAAAqB,CAAA,OAA6B,IAAIC,GAAG,EAAE;EAC/CS,eAAe;EAAA;EAAA,CAAA/B,aAAA,GAAAqB,CAAA,OAA6B,IAAIC,GAAG,EAAE;EAE7DU,YACUnB,MAAc,EACdC,QAAmB,EACnBC,MAAe,EACfC,aAA6B,EAC7BC,YAA0B,EAC1BC,gBAA8B,EAC9BC,aAAA;EAAA;EAAA,CAAAnB,aAAA,GAAAiC,CAAA,UAAwC,EAAE;IAAA;IAAAjC,aAAA,GAAAkC,CAAA;IAAAlC,aAAA,GAAAqB,CAAA;IAElD,KAAK,EAAE;IAAC;IAAArB,aAAA,GAAAqB,CAAA;IARA,KAAAR,MAAM,GAANA,MAAM;IAAQ;IAAAb,aAAA,GAAAqB,CAAA;IACd,KAAAP,QAAQ,GAARA,QAAQ;IAAW;IAAAd,aAAA,GAAAqB,CAAA;IACnB,KAAAN,MAAM,GAANA,MAAM;IAAS;IAAAf,aAAA,GAAAqB,CAAA;IACf,KAAAL,aAAa,GAAbA,aAAa;IAAgB;IAAAhB,aAAA,GAAAqB,CAAA;IAC7B,KAAAJ,YAAY,GAAZA,YAAY;IAAc;IAAAjB,aAAA,GAAAqB,CAAA;IAC1B,KAAAH,gBAAgB,GAAhBA,gBAAgB;IAAc;IAAAlB,aAAA,GAAAqB,CAAA;IAC9B,KAAAF,aAAa,GAAbA,aAAa;IAA6B;IAAAnB,aAAA,GAAAqB,CAAA;IAIlD,IAAI,CAACE,cAAc,GAAGpB,IAAI,CAACgC,OAAO,CAACC,GAAG,EAAE,EAAE,SAAS,EAAE,aAAa,EAAE,SAAS,EAAE,OAAO,CAAC;IAAC;IAAApC,aAAA,GAAAqB,CAAA;IACxF,IAAI,CAACG,iBAAiB,GAAGrB,IAAI,CAACgC,OAAO,CAACC,GAAG,EAAE,EAAE,SAAS,EAAE,aAAa,EAAE,SAAS,EAAE,UAAU,CAAC;IAE7F;IAAA;IAAApC,aAAA,GAAAqB,CAAA;IACA,IAAI,IAAI,CAACF,aAAa,CAACkB,gBAAgB,EAAE;MAAA;MAAArC,aAAA,GAAAiC,CAAA;MAAAjC,aAAA,GAAAqB,CAAA;MACvC,IAAI,CAACiB,sBAAsB,EAAE;IAC/B,CAAC;IAAA;IAAA;MAAAtC,aAAA,GAAAiC,CAAA;IAAA;IAAAjC,aAAA,GAAAqB,CAAA;IAED,IAAI,CAACkB,kBAAkB,EAAE;IAAC;IAAAvC,aAAA,GAAAqB,CAAA;IAC1B,IAAI,CAACN,MAAM,CAACyB,IAAI,CAAC,kCAAkC,CAAC;EACtD;EAEA;;;EAGA,MAAMC,kBAAkBA,CAAA;IAAA;IAAAzC,aAAA,GAAAkC,CAAA;IAAAlC,aAAA,GAAAqB,CAAA;IACtB,IAAI,CAAC,IAAI,CAACF,aAAa,CAACuB,cAAc,EAAE;MAAA;MAAA1C,aAAA,GAAAiC,CAAA;MAAAjC,aAAA,GAAAqB,CAAA;MACtC,IAAI,CAACN,MAAM,CAACyB,IAAI,CAAC,gCAAgC,CAAC;MAAC;MAAAxC,aAAA,GAAAqB,CAAA;MACnD,OAAO,IAAI;IACb,CAAC;IAAA;IAAA;MAAArB,aAAA,GAAAiC,CAAA;IAAA;IAAAjC,aAAA,GAAAqB,CAAA;IAED,IAAI;MACF;MACA,MAAMsB,cAAc;MAAA;MAAA,CAAA3C,aAAA,GAAAqB,CAAA,QAAmB;QACrCuB,IAAI,EAAE,oBAAoB;QAC1BC,QAAQ,EAAE,cAAc;QACxBC,SAAS,EAAE,WAAwB;QACnCC,SAAS;QAAE;QAAA,CAAA/C,aAAA,GAAAiC,CAAA,cAAI,CAACd,aAAa,CAAC4B,SAAS;QAAA;QAAA,CAAA/C,aAAA,GAAAiC,CAAA,UAAI,CAAC;QAC5Ce,kBAAkB;QAAE;QAAA,CAAAhD,aAAA,GAAAiC,CAAA,cAAI,CAACd,aAAa,CAAC6B,kBAAkB;QAAA;QAAA,CAAAhD,aAAA,GAAAiC,CAAA,UAAI,IAAI;QACjEgB,SAAS,EAAE,QAAQ;QAAE;QACrBC,SAAS,EAAE,IAAI;QACfC,eAAe,EAAE,IAAI;QACrBC,YAAY,EAAE,IAAI;QAClBC,mBAAmB,EAAE;OACtB;MAED;MAAA;MAAArD,aAAA,GAAAqB,CAAA;MACA,IAAI,CAACI,QAAQ,GAAG,IAAId,QAAQ,CAACgC,cAAc,CAAC;MAC5C,MAAMW,OAAO;MAAA;MAAA,CAAAtD,aAAA,GAAAqB,CAAA,QAAG,MAAM,IAAI,CAACI,QAAQ,CAAC8B,UAAU,EAAE;MAEhD;MAAA;MAAAvD,aAAA,GAAAqB,CAAA;MACA,IAAI,CAACK,eAAe,GAAI,IAAI,CAACD,QAAgB,CAAC+B,SAAS;MAAC;MAAAxD,aAAA,GAAAqB,CAAA;MACxD,IAAI,CAACM,iBAAiB,GAAI,IAAI,CAACF,QAAgB,CAACgC,YAAY;MAAC;MAAAzD,aAAA,GAAAqB,CAAA;MAE7D,IAAI,CAACN,MAAM,CAACyB,IAAI,CAAC,kCAAkCc,OAAO,EAAE,CAAC;MAAC;MAAAtD,aAAA,GAAAqB,CAAA;MAC9D,OAAOiC,OAAO;IAEhB,CAAC,CAAC,OAAOI,KAAK,EAAE;MAAA;MAAA1D,aAAA,GAAAqB,CAAA;MACd,IAAI,CAACN,MAAM,CAAC2C,KAAK,CAAC,mCAAmCA,KAAK,YAAYC,KAAK;MAAA;MAAA,CAAA3D,aAAA,GAAAiC,CAAA,UAAGyB,KAAK,CAACE,OAAO;MAAA;MAAA,CAAA5D,aAAA,GAAAiC,CAAA,UAAG4B,MAAM,CAACH,KAAK,CAAC,GAAE,CAAC;MAAC;MAAA1D,aAAA,GAAAqB,CAAA;MAC/G,MAAMqC,KAAK;IACb;EACF;EAEA;;;EAGA,MAAMI,UAAUA,CAACC,WAAmB,EAAEC,cAAsB;IAAA;IAAAhE,aAAA,GAAAkC,CAAA;IAC1D,MAAM+B,WAAW;IAAA;IAAA,CAAAjE,aAAA,GAAAqB,CAAA,QAAGlB,IAAI,CAAC,IAAI,CAACoB,cAAc,EAAEwC,WAAW,CAAC;IAAC;IAAA/D,aAAA,GAAAqB,CAAA;IAC3D,MAAMf,KAAK,CAAC2D,WAAW,EAAE;MAAEC,SAAS,EAAE;IAAI,CAAE,CAAC;IAE7C;IACA,MAAMC,aAAa;IAAA;IAAA,CAAAnE,aAAA,GAAAqB,CAAA,QAAyB;MAC1C0C,WAAW;MACXK,YAAY,EAAE,4BAA6C;MAC3DC,gBAAgB,EAAE,CAAC;MACnBC,MAAM,EAAE,QAAQ;MAChBC,YAAY,EAAE,IAAIC,IAAI,EAAE;MACxBC,OAAO,EAAE,CAAC;QACRC,KAAK,EAAE,4BAA6C;QACpDJ,MAAM,EAAE,aAAoE;QAC5EK,SAAS,EAAE,IAAIH,IAAI;OACpB;KACF;IAAC;IAAAxE,aAAA,GAAAqB,CAAA;IAEF,IAAI,CAACD,YAAY,CAACwD,GAAG,CAACb,WAAW,EAAEI,aAAa,CAAC;IAEjD;IACA,MAAMU,mBAAmB;IAAA;IAAA,CAAA7E,aAAA,GAAAqB,CAAA,QAAG,sBAAsB0C,WAAW;;;;EAI/DC,cAAc;;;;sBAIMA,cAAc,CAACc,WAAW,EAAE;;;;;;;;;;;;;;;;;CAiBjD;IAAC;IAAA9E,aAAA,GAAAqB,CAAA;IAEE,MAAMhB,SAAS,CAACF,IAAI,CAAC8D,WAAW,EAAE,iBAAiB,CAAC,EAAEY,mBAAmB,EAAE,MAAM,CAAC;IAAC;IAAA7E,aAAA,GAAAqB,CAAA;IAEnF,IAAI,CAACN,MAAM,CAACyB,IAAI,CAAC,8BAA8BuB,WAAW,GAAG,CAAC;IAAC;IAAA/D,aAAA,GAAAqB,CAAA;IAC/D,IAAI,CAACP,QAAQ,CAACiE,IAAI,CAAC,sBAAsB,EAAE;MAAEhB;IAAW,CAAE,CAAC;IAE3D;IAAA;IAAA/D,aAAA,GAAAqB,CAAA;IACA,IAAI,IAAI,CAACO,uBAAuB,EAAE;MAAA;MAAA5B,aAAA,GAAAiC,CAAA;MAAAjC,aAAA,GAAAqB,CAAA;MAChC,IAAI;QAAA;QAAArB,aAAA,GAAAqB,CAAA;QACF,MAAMb,kBAAkB,CAACwE,YAAY,CAAC,gBAAgB,EAAE;UACtDC,UAAU,EAAE,WAAWlB,WAAW,EAAE;UACpCmB,KAAK,EAAE;YAAEnB,WAAW;YAAEW,KAAK,EAAE;UAAe;SACtC,EAAE;UACRS,SAAS,EAAE,mBAAmBX,IAAI,CAACY,GAAG,EAAE,EAAE;UAC1CT,SAAS,EAAEH,IAAI,CAACY,GAAG,EAAE;UACrBC,aAAa,EAAE,WAAWtB,WAAW,EAAE;UACvCuB,QAAQ,EAAE;YAAEvB;UAAW,CAAE;UACzBwB,MAAM,EAAE;YAAEC,SAAS,EAAE,SAAS;YAAEC,QAAQ,EAAE,QAAQ;YAAEC,KAAK,EAAE,IAAIpE,GAAG;UAAE,CAAE;UACtEqE,MAAM,EAAE;YAAEC,OAAO,EAAE,SAAS;YAAEC,QAAQ,EAAE,IAAW;YAAEC,QAAQ,EAAE;UAAW,CAAE;UAC5EC,WAAW,EAAE;YAAEC,OAAO,EAAE,IAAI1E,GAAG,EAAE;YAAE2E,WAAW,EAAE,EAAE;YAAEC,aAAa,EAAE;UAAE;SAChD,CAAC;MAC1B,CAAC,CAAC,OAAOxC,KAAK,EAAE;QAAA;QAAA1D,aAAA,GAAAqB,CAAA;QACd,IAAI,CAACN,MAAM,CAACoF,IAAI,CAAC,kCAAkC,EAAEzC,KAAK,CAAC;MAC7D;IACF,CAAC;IAAA;IAAA;MAAA1D,aAAA,GAAAiC,CAAA;IAAA;EACH;EAEA;;;EAGA,MAAMmE,cAAcA,CAACrC,WAAmB;IAAA;IAAA/D,aAAA,GAAAkC,CAAA;IACtC,MAAMgD,KAAK;IAAA;IAAA,CAAAlF,aAAA,GAAAqB,CAAA,QAAG,IAAI,CAACD,YAAY,CAACiF,GAAG,CAACtC,WAAW,CAAC;IAAC;IAAA/D,aAAA,GAAAqB,CAAA;IACjD,IAAI,CAAC6D,KAAK,EAAE;MAAA;MAAAlF,aAAA,GAAAiC,CAAA;MAAAjC,aAAA,GAAAqB,CAAA;MACV,MAAM,IAAIX,WAAW,CAAC,gCAAgCqD,WAAW,GAAG,CAAC;IACvE,CAAC;IAAA;IAAA;MAAA/D,aAAA,GAAAiC,CAAA;IAAA;IAED,MAAMgC,WAAW;IAAA;IAAA,CAAAjE,aAAA,GAAAqB,CAAA,QAAGlB,IAAI,CAAC,IAAI,CAACoB,cAAc,EAAEwC,WAAW,CAAC;IAC1D,MAAMuC,gBAAgB;IAAA;IAAA,CAAAtG,aAAA,GAAAqB,CAAA,QAAGlB,IAAI,CAAC8D,WAAW,EAAE,iBAAiB,CAAC;IAAC;IAAAjE,aAAA,GAAAqB,CAAA;IAE9D,IAAI;MAAA;MAAArB,aAAA,GAAAqB,CAAA;MACF,MAAMd,MAAM,CAAC+F,gBAAgB,CAAC;IAChC,CAAC,CAAC,MAAM;MAAA;MAAAtG,aAAA,GAAAqB,CAAA;MACN,MAAM,IAAIX,WAAW,CAAC,oCAAoCqD,WAAW,2BAA2B,CAAC;IACnG;IAEA,MAAMc,mBAAmB;IAAA;IAAA,CAAA7E,aAAA,GAAAqB,CAAA,QAAG,MAAMjB,QAAQ,CAACkG,gBAAgB,EAAE,MAAM,CAAC;IAEpE;IAAA;IAAAtG,aAAA,GAAAqB,CAAA;IACA;IAAI;IAAA,CAAArB,aAAA,GAAAiC,CAAA,cAAI,CAACR,QAAQ;IAAA;IAAA,CAAAzB,aAAA,GAAAiC,CAAA,UAAI,IAAI,CAACN,iBAAiB,GAAE;MAAA;MAAA3B,aAAA,GAAAiC,CAAA;MAAAjC,aAAA,GAAAqB,CAAA;MAC3C,MAAM,IAAI,CAACkF,0BAA0B,CAACxC,WAAW,EAAEc,mBAAmB,CAAC;IACzE,CAAC,MAAM;MAAA;MAAA7E,aAAA,GAAAiC,CAAA;MAAAjC,aAAA,GAAAqB,CAAA;MACL,MAAM,IAAI,CAACmF,8BAA8B,CAACzC,WAAW,EAAEc,mBAAmB,CAAC;IAC7E;IAEA;IAAA;IAAA7E,aAAA,GAAAqB,CAAA;IACA6D,KAAK,CAACd,YAAY,GAAG,mBAAoC;IAAC;IAAApE,aAAA,GAAAqB,CAAA;IAC1D6D,KAAK,CAACX,YAAY,GAAG,IAAIC,IAAI,EAAE;IAAC;IAAAxE,aAAA,GAAAqB,CAAA;IAChC6D,KAAK,CAACT,OAAO,CAACgC,IAAI,CAAC;MACjB/B,KAAK,EAAE,mBAAoC;MAC3CJ,MAAM,EAAE,WAAW;MACnBK,SAAS,EAAE,IAAIH,IAAI;KACpB,CAAC;IAAC;IAAAxE,aAAA,GAAAqB,CAAA;IAEH,IAAI,CAACN,MAAM,CAACyB,IAAI,CAAC,yBAAyBuB,WAAW,GAAG,CAAC;IAAC;IAAA/D,aAAA,GAAAqB,CAAA;IAC1D,IAAI,CAACP,QAAQ,CAACiE,IAAI,CAAC,0BAA0B,EAAE;MAAEhB;IAAW,CAAE,CAAC;EACjE;EAEA;;;EAGQ,MAAMwC,0BAA0BA,CAACxC,WAAmB,EAAE2C,YAAoB;IAAA;IAAA1G,aAAA,GAAAkC,CAAA;IAChF,MAAMyE,WAAW;IAAA;IAAA,CAAA3G,aAAA,GAAAqB,CAAA,QAAsB;MACrCuF,WAAW,EAAE,qCAAqC7C,WAAW,EAAE;MAC/D8C,QAAQ,EAAE,MAAM;MAChBC,QAAQ,EAAE,UAAU;MACpBC,oBAAoB,EAAE,CAAC,eAAkC,EAAE,cAAiC,EAAE,mBAAsC,CAAC;MACrIzB,QAAQ,EAAE;QACR0B,cAAc,EAAEjD,WAAW;QAC3BkD,YAAY,EAAE,mBAAmB;QACjCP;;KAEH;IAED;IACA,MAAMQ,IAAI;IAAA;IAAA,CAAAlH,aAAA,GAAAqB,CAAA,QAAG,MAAM,IAAI,CAACI,QAAS,CAAC0F,UAAU,CAACR,WAAW,CAAC;IAEzD;IACA,MAAMS,MAAM;IAAA;IAAA,CAAApH,aAAA,GAAAqB,CAAA,QAAG,MAAM,IAAI,CAACgG,qBAAqB,CAACH,IAAI,CAACI,EAAE,EAAE,MAAM,CAAC,EAAC,CAAC;IAElE;IACA,MAAMC,aAAa;IAAA;IAAA,CAAAvH,aAAA,GAAAqB,CAAA,QAAG,gBAAgB0C,WAAW;;;;;IAInD;IAAA,CAAA/D,aAAA,GAAAiC,CAAA,WAAAmF,MAAM,CAACI,oBAAoB;IAAA;IAAA,CAAAxH,aAAA,GAAAiC,CAAA,WAAI,oEAAoE;;;;;IAInG;IAAA,CAAAjC,aAAA,GAAAiC,CAAA,WAAAmF,MAAM,CAACK,eAAe;IAAA;IAAA,CAAAzH,aAAA,GAAAiC,CAAA,WAAI,wEAAwE;;;;;IAIlG;IAAA,CAAAjC,aAAA,GAAAiC,CAAA,WAAAmF,MAAM,CAACM,SAAS;IAAA;IAAA,CAAA1H,aAAA,GAAAiC,CAAA,WAAI,6EAA6E;;;;;IAIjG;IAAA,CAAAjC,aAAA,GAAAiC,CAAA,WAAAmF,MAAM,CAACO,cAAc;IAAA;IAAA,CAAA3H,aAAA,GAAAiC,CAAA,WAAI,4DAA4D;;;;;IAIrF;IAAA,CAAAjC,aAAA,GAAAiC,CAAA,WAAAmF,MAAM,CAACQ,sBAAsB;IAAA;IAAA,CAAA5H,aAAA,GAAAiC,CAAA,WAAI,0EAA0E;;;;;IAI3G;IAAA,CAAAjC,aAAA,GAAAiC,CAAA,WAAAmF,MAAM,CAACS,uBAAuB;IAAA;IAAA,CAAA7H,aAAA,GAAAiC,CAAA,WAAI,6DAA6D;;;;;IAI/F;IAAA,CAAAjC,aAAA,GAAAiC,CAAA,WAAAmF,MAAM,CAACU,sBAAsB;IAAA;IAAA,CAAA9H,aAAA,GAAAiC,CAAA,WAAI,4DAA4D;;;;IAG3E;IAAA,CAAAjC,aAAA,GAAAiC,CAAA,WAAAmF,MAAM,CAACW,UAAU;IAAA;IAAA,CAAA/H,aAAA,GAAAiC,CAAA,WAAI,UAAU;kBACjCmF,MAAM,CAACY,YAAY;IAAA;IAAA,CAAAhI,aAAA,GAAAiC,CAAA,WAAG,CAACmF,MAAM,CAACY,YAAY,GAAG,GAAG,EAAEC,OAAO,CAAC,CAAC,CAAC,GAAG,GAAG;IAAA;IAAA,CAAAjI,aAAA,GAAAiC,CAAA,WAAG,MAAM;CAC5F;IAEG,MAAMgC,WAAW;IAAA;IAAA,CAAAjE,aAAA,GAAAqB,CAAA,QAAGlB,IAAI,CAAC,IAAI,CAACoB,cAAc,EAAEwC,WAAW,CAAC;IAAC;IAAA/D,aAAA,GAAAqB,CAAA;IAC3D,MAAMhB,SAAS,CAACF,IAAI,CAAC8D,WAAW,EAAE,WAAW,CAAC,EAAEsD,aAAa,EAAE,MAAM,CAAC;EACxE;EAEA;;;EAGQ,MAAMf,8BAA8BA,CAACzC,WAAmB,EAAE2C,YAAoB;IAAA;IAAA1G,aAAA,GAAAkC,CAAA;IACpF,MAAMgG,UAAU;IAAA;IAAA,CAAAlI,aAAA,GAAAqB,CAAA,QAAG;MACjBiG,EAAE,EAAE,eAAevD,WAAW,IAAIS,IAAI,CAACY,GAAG,EAAE,EAAE;MAC9C+C,IAAI,EAAE,mBAAmB;MACzBvB,WAAW,EAAE,8CAA8C7C,WAAW,GAAG;MACzEqE,KAAK,EAAE;QACLrE,WAAW;QACXuC,gBAAgB,EAAEnG,IAAI,CAAC,IAAI,CAACoB,cAAc,EAAEwC,WAAW,EAAE,iBAAiB,CAAC;QAC3EsE,UAAU,EAAElI,IAAI,CAAC,IAAI,CAACoB,cAAc,EAAEwC,WAAW,EAAE,WAAW,CAAC;QAC/DuE,YAAY,EAAE,CACZ,0CAA0C,EAC1C,0CAA0C,EAC1C,iDAAiD,EACjD,iCAAiC;OAEpC;MACDzB,QAAQ,EAAE,EAAE;MACZvB,QAAQ,EAAE;QACRvB,WAAW;QACXkD,YAAY,EAAE,mBAAmB;QACjCoB,UAAU,EAAElI,IAAI,CAAC,IAAI,CAACoB,cAAc,EAAEwC,WAAW,EAAE,WAAW;;KAEjE;IAED;IACA,MAAMwE,iBAAiB;IAAA;IAAA,CAAAvI,aAAA,GAAAqB,CAAA,QAAG,MAAM,IAAI,CAACmH,oBAAoB,CACvD,CAAC,QAAQ,EAAE,cAAc,EAAE,UAAU,CAAC,EACtC,mBAAmB,EACnB,CAAC,CACF;IAAC;IAAAxI,aAAA,GAAAqB,CAAA;IACF,MAAM,IAAI,CAACoH,2BAA2B,CACpCF,iBAAiB,EACjBL,UAAU,EACV,CAAC,QAAQ,EAAE,cAAc,EAAE,UAAU,CAAC,CACvC;EACH;EAEA;;;EAGA,MAAMQ,aAAaA,CAAC3E,WAAmB;IAAA;IAAA/D,aAAA,GAAAkC,CAAA;IACrC,MAAMgD,KAAK;IAAA;IAAA,CAAAlF,aAAA,GAAAqB,CAAA,QAAG,IAAI,CAACD,YAAY,CAACiF,GAAG,CAACtC,WAAW,CAAC;IAAC;IAAA/D,aAAA,GAAAqB,CAAA;IACjD,IAAI,CAAC6D,KAAK,EAAE;MAAA;MAAAlF,aAAA,GAAAiC,CAAA;MAAAjC,aAAA,GAAAqB,CAAA;MACV,MAAM,IAAIX,WAAW,CAAC,gCAAgCqD,WAAW,GAAG,CAAC;IACvE,CAAC;IAAA;IAAA;MAAA/D,aAAA,GAAAiC,CAAA;IAAA;IAED,MAAMgC,WAAW;IAAA;IAAA,CAAAjE,aAAA,GAAAqB,CAAA,QAAGlB,IAAI,CAAC,IAAI,CAACoB,cAAc,EAAEwC,WAAW,CAAC;IAC1D,MAAM4E,UAAU;IAAA;IAAA,CAAA3I,aAAA,GAAAqB,CAAA,QAAGlB,IAAI,CAAC8D,WAAW,EAAE,WAAW,CAAC;IAAC;IAAAjE,aAAA,GAAAqB,CAAA;IAElD,IAAI;MAAA;MAAArB,aAAA,GAAAqB,CAAA;MACF,MAAMd,MAAM,CAACoI,UAAU,CAAC;IAC1B,CAAC,CAAC,MAAM;MAAA;MAAA3I,aAAA,GAAAqB,CAAA;MACN,MAAM,IAAIX,WAAW,CAAC,8BAA8BqD,WAAW,+BAA+B,CAAC;IACjG;IAEA,MAAMwD,aAAa;IAAA;IAAA,CAAAvH,aAAA,GAAAqB,CAAA,QAAG,MAAMjB,QAAQ,CAACuI,UAAU,EAAE,MAAM,CAAC;IAExD;IACA,MAAMC,YAAY;IAAA;IAAA,CAAA5I,aAAA,GAAAqB,CAAA,QAAG,MAAM,IAAI,CAACwH,8BAA8B,CAAC9E,WAAW,EAAEwD,aAAa,CAAC;IAAC;IAAAvH,aAAA,GAAAqB,CAAA;IAC3F,MAAMhB,SAAS,CAACF,IAAI,CAAC8D,WAAW,EAAE,UAAU,CAAC,EAAE2E,YAAY,EAAE,MAAM,CAAC;IAEpE;IAAA;IAAA5I,aAAA,GAAAqB,CAAA;IACA6D,KAAK,CAACd,YAAY,GAAG,yBAA0C;IAAC;IAAApE,aAAA,GAAAqB,CAAA;IAChE6D,KAAK,CAACX,YAAY,GAAG,IAAIC,IAAI,EAAE;IAAC;IAAAxE,aAAA,GAAAqB,CAAA;IAChC6D,KAAK,CAACT,OAAO,CAACgC,IAAI,CAAC;MACjB/B,KAAK,EAAE,yBAA0C;MACjDJ,MAAM,EAAE,WAAW;MACnBK,SAAS,EAAE,IAAIH,IAAI;KACpB,CAAC;IAAC;IAAAxE,aAAA,GAAAqB,CAAA;IAEH,IAAI,CAACN,MAAM,CAACyB,IAAI,CAAC,wBAAwBuB,WAAW,GAAG,CAAC;IAAC;IAAA/D,aAAA,GAAAqB,CAAA;IACzD,IAAI,CAACP,QAAQ,CAACiE,IAAI,CAAC,yBAAyB,EAAE;MAAEhB;IAAW,CAAE,CAAC;EAChE;EAEA;;;EAGQ,MAAM8E,8BAA8BA,CAAC9E,WAAmB,EAAEwD,aAAqB;IAAA;IAAAvH,aAAA,GAAAkC,CAAA;IACrF;IACA,MAAM4G,gBAAgB;IAAA;IAAA,CAAA9I,aAAA,GAAAqB,CAAA,QAAG;MACvBiG,EAAE,EAAE,iBAAiBvD,WAAW,IAAIS,IAAI,CAACY,GAAG,EAAE,EAAE;MAChD+C,IAAI,EAAE,eAAe;MACrBvB,WAAW,EAAE,8CAA8C7C,WAAW,GAAG;MACzEqE,KAAK,EAAE;QACLrE,WAAW;QACXwD,aAAa;QACbjB,gBAAgB,EAAEnG,IAAI,CAAC,IAAI,CAACoB,cAAc,EAAEwC,WAAW,EAAE,iBAAiB,CAAC;QAC3EsE,UAAU,EAAElI,IAAI,CAAC,IAAI,CAACoB,cAAc,EAAEwC,WAAW,EAAE,UAAU,CAAC;QAC9DuE,YAAY,EAAE,CACZ,iDAAiD,EACjD,gEAAgE,EAChE,mDAAmD,EACnD,gDAAgD,EAChD,oCAAoC;OAEvC;MACDzB,QAAQ,EAAE,EAAE;MACZvB,QAAQ,EAAE;QACRvB,WAAW;QACXkD,YAAY,EAAE,yBAAyB;QACvCoB,UAAU,EAAElI,IAAI,CAAC,IAAI,CAACoB,cAAc,EAAEwC,WAAW,EAAE,UAAU;;KAEhE;IAAC;IAAA/D,aAAA,GAAAqB,CAAA;IAEF,IAAI;MAAA;MAAArB,aAAA,GAAAqB,CAAA;MACF,IAAI,CAACN,MAAM,CAACyB,IAAI,CAAC,wBAAwBuB,WAAW,oCAAoC,CAAC;MAEzF;MACA,MAAMqD,MAAM;MAAA;MAAA,CAAApH,aAAA,GAAAqB,CAAA,QAAG,MAAM,IAAI,CAAC0H,mCAAmC,CAACD,gBAAgB,CAAC;MAAC;MAAA9I,aAAA,GAAAqB,CAAA;MAEhF,IAAI,CAACN,MAAM,CAACyB,IAAI,CAAC,wCAAwCuB,WAAW,EAAE,CAAC;MAAC;MAAA/D,aAAA,GAAAqB,CAAA;MACxE,OAAO+F,MAAM;IAEf,CAAC,CAAC,OAAO1D,KAAK,EAAE;MAAA;MAAA1D,aAAA,GAAAqB,CAAA;MACd,IAAI,CAACN,MAAM,CAACoF,IAAI,CAAC,qCAAqCzC,KAAK,YAAYC,KAAK;MAAA;MAAA,CAAA3D,aAAA,GAAAiC,CAAA,WAAGyB,KAAK,CAACE,OAAO;MAAA;MAAA,CAAA5D,aAAA,GAAAiC,CAAA,WAAG4B,MAAM,CAACH,KAAK,CAAC,qCAAoC,CAAC;MAAC;MAAA1D,aAAA,GAAAqB,CAAA;MAClJ,OAAO,IAAI,CAAC2H,4BAA4B,CAACjF,WAAW,EAAEwD,aAAa,CAAC;IACtE;EACF;EAEA;;;EAGQ,MAAMwB,mCAAmCA,CAACD,gBAAqB;IAAA;IAAA9I,aAAA,GAAAkC,CAAA;IACrE;IACA,MAAM+G,mBAAmB;IAAA;IAAA,CAAAjJ,aAAA,GAAAqB,CAAA,QAAG,MAAM,IAAI,CAACmH,oBAAoB,CACzD,CAAC,oBAAoB,EAAE,gBAAgB,EAAE,UAAU,CAAC,EACpD,eAAe,EACf,CAAC,CACF;IAAC;IAAAxI,aAAA,GAAAqB,CAAA;IACF,MAAM,IAAI,CAACoH,2BAA2B,CACpCQ,mBAAmB,EACnBH,gBAAgB,EAChB,CAAC,oBAAoB,EAAE,gBAAgB,EAAE,UAAU,CAAC,CACrD;IAED;IAAA;IAAA9I,aAAA,GAAAqB,CAAA;IACA,IAAI;MACF,MAAMgH,UAAU;MAAA;MAAA,CAAArI,aAAA,GAAAqB,CAAA,QAAGyH,gBAAgB,CAACxD,QAAQ,CAAC+C,UAAU;MACvD,MAAMa,gBAAgB;MAAA;MAAA,CAAAlJ,aAAA,GAAAqB,CAAA,QAAG,MAAMjB,QAAQ,CAACiI,UAAU,EAAE,MAAM,CAAC;MAE3D;MAAA;MAAArI,aAAA,GAAAqB,CAAA;MACA;MAAI;MAAA,CAAArB,aAAA,GAAAiC,CAAA,WAAAiH,gBAAgB;MAAA;MAAA,CAAAlJ,aAAA,GAAAiC,CAAA,WAAIiH,gBAAgB,CAACC,MAAM,GAAG,CAAC,GAAE;QAAA;QAAAnJ,aAAA,GAAAiC,CAAA;QAAAjC,aAAA,GAAAqB,CAAA;QACnD,OAAO,IAAI,CAAC+H,wBAAwB,CAACF,gBAAgB,EAAEJ,gBAAgB,CAACV,KAAK,CAACrE,WAAW,CAAC;MAC5F,CAAC;MAAA;MAAA;QAAA/D,aAAA,GAAAiC,CAAA;MAAA;IACH,CAAC,CAAC,OAAOyB,KAAK,EAAE;MAAA;MAAA1D,aAAA,GAAAqB,CAAA;MACd,IAAI,CAACN,MAAM,CAACsI,KAAK,CAAC,wCAAwC3F,KAAK,YAAYC,KAAK;MAAA;MAAA,CAAA3D,aAAA,GAAAiC,CAAA,WAAGyB,KAAK,CAACE,OAAO;MAAA;MAAA,CAAA5D,aAAA,GAAAiC,CAAA,WAAG4B,MAAM,CAACH,KAAK,CAAC,GAAE,CAAC;IACrH;IAEA;IAAA;IAAA1D,aAAA,GAAAqB,CAAA;IACA,OAAO,IAAI,CAAC2H,4BAA4B,CAACF,gBAAgB,CAACV,KAAK,CAACrE,WAAW,EAAE+E,gBAAgB,CAACV,KAAK,CAACb,aAAa,CAAC;EACpH;EAEA;;;EAGQ6B,wBAAwBA,CAACE,MAAW,EAAEvF,WAAmB;IAAA;IAAA/D,aAAA,GAAAkC,CAAA;IAAAlC,aAAA,GAAAqB,CAAA;IAC/D;IAAI;IAAA,CAAArB,aAAA,GAAAiC,CAAA,kBAAOqH,MAAM,KAAK,QAAQ;IAAA;IAAA,CAAAtJ,aAAA,GAAAiC,CAAA,WAAIqH,MAAM,CAACC,QAAQ,CAAC,wBAAwB,CAAC,GAAE;MAAA;MAAAvJ,aAAA,GAAAiC,CAAA;MAAAjC,aAAA,GAAAqB,CAAA;MAC3E,OAAOiI,MAAM;IACf,CAAC;IAAA;IAAA;MAAAtJ,aAAA,GAAAiC,CAAA;IAAA;IAED;IAAAjC,aAAA,GAAAqB,CAAA;IACA;IAAI;IAAA,CAAArB,aAAA,GAAAiC,CAAA,WAAAqH,MAAM;IAAA;IAAA,CAAAtJ,aAAA,GAAAiC,CAAA,WAAI,OAAOqH,MAAM,KAAK,QAAQ,GAAE;MAAA;MAAAtJ,aAAA,GAAAiC,CAAA;MACxC,MAAMuH,KAAK;MAAA;MAAA,CAAAxJ,aAAA,GAAAqB,CAAA;MAAG;MAAA,CAAArB,aAAA,GAAAiC,CAAA,WAAAqH,MAAM,CAACE,KAAK;MAAA;MAAA,CAAAxJ,aAAA,GAAAiC,CAAA,WAAIqH,MAAM,CAACG,QAAQ;MAAA;MAAA,CAAAzJ,aAAA,GAAAiC,CAAA,WAAI,EAAE;MACnD,MAAMyH,YAAY;MAAA;MAAA,CAAA1J,aAAA,GAAAqB,CAAA;MAAG;MAAA,CAAArB,aAAA,GAAAiC,CAAA,WAAAqH,MAAM,CAACI,YAAY;MAAA;MAAA,CAAA1J,aAAA,GAAAiC,CAAA,WAAI,EAAE;MAC9C,MAAM0H,KAAK;MAAA;MAAA,CAAA3J,aAAA,GAAAqB,CAAA;MAAG;MAAA,CAAArB,aAAA,GAAAiC,CAAA,WAAAqH,MAAM,CAACK,KAAK;MAAA;MAAA,CAAA3J,aAAA,GAAAiC,CAAA,WAAIqH,MAAM,CAACM,mBAAmB;MAAA;MAAA,CAAA5J,aAAA,GAAAiC,CAAA,WAAI,EAAE;MAAC;MAAAjC,aAAA,GAAAqB,CAAA;MAE/D;MAAI;MAAA,CAAArB,aAAA,GAAAiC,CAAA,WAAA4H,KAAK,CAACC,OAAO,CAACN,KAAK,CAAC;MAAA;MAAA,CAAAxJ,aAAA,GAAAiC,CAAA,WAAIuH,KAAK,CAACL,MAAM,GAAG,CAAC,GAAE;QAAA;QAAAnJ,aAAA,GAAAiC,CAAA;QAAAjC,aAAA,GAAAqB,CAAA;QAC5C,OAAO,8BAA8B0C,WAAW;;;;EAItDyF,KAAK,CAACO,GAAG,CAAC,CAAC7C,IAAS,EAAE8C,KAAa,KAAI;UAAA;UAAAhK,aAAA,GAAAkC,CAAA;UAAAlC,aAAA,GAAAqB,CAAA;UACvC,IAAI,OAAO6F,IAAI,KAAK,QAAQ,EAAE;YAAA;YAAAlH,aAAA,GAAAiC,CAAA;YAAAjC,aAAA,GAAAqB,CAAA;YAC5B,OAAO6F,IAAI,CAAC+C,UAAU,CAAC,OAAO,CAAC;YAAA;YAAA,CAAAjK,aAAA,GAAAiC,CAAA,WAAGiF,IAAI;YAAA;YAAA,CAAAlH,aAAA,GAAAiC,CAAA,WAAG,SAASiF,IAAI,EAAE;UAC1D,CAAC;UAAA;UAAA;YAAAlH,aAAA,GAAAiC,CAAA;UAAA;UAAAjC,aAAA,GAAAqB,CAAA;UACD,OAAO;UAAS;UAAA,CAAArB,aAAA,GAAAiC,CAAA,WAAAiF,IAAI,CAACN,WAAW;UAAA;UAAA,CAAA5G,aAAA,GAAAiC,CAAA,WAAIiF,IAAI,CAACtE,IAAI;UAAA;UAAA,CAAA5C,aAAA,GAAAiC,CAAA,WAAI,QAAQ+H,KAAK,GAAG,CAAC,EAAE,GAAE;QACxE,CAAC,CAAC,CAAC7J,IAAI,CAAC,IAAI,CAAC;;EAEXuJ,YAAY;QAAA;QAAA,CAAA1J,aAAA,GAAAiC,CAAA,WAAG,oBAAoByH,YAAY,IAAI;QAAA;QAAA,CAAA1J,aAAA,GAAAiC,CAAA,WAAG,EAAE;EACxD0H,KAAK;QAAA;QAAA,CAAA3J,aAAA,GAAAiC,CAAA,WAAG,4BAA4B0H,KAAK,IAAI;QAAA;QAAA,CAAA3J,aAAA,GAAAiC,CAAA,WAAG,EAAE;;iDAEH;MAC3C,CAAC;MAAA;MAAA;QAAAjC,aAAA,GAAAiC,CAAA;MAAA;IACH,CAAC;IAAA;IAAA;MAAAjC,aAAA,GAAAiC,CAAA;IAAA;IAED;IAAAjC,aAAA,GAAAqB,CAAA;IACA,IAAI,OAAOiI,MAAM,KAAK,QAAQ,EAAE;MAAA;MAAAtJ,aAAA,GAAAiC,CAAA;MAAAjC,aAAA,GAAAqB,CAAA;MAC9B,OAAO,8BAA8B0C,WAAW;;;;EAIpDuF,MAAM;;iDAEyC;IAC7C,CAAC;IAAA;IAAA;MAAAtJ,aAAA,GAAAiC,CAAA;IAAA;IAAAjC,aAAA,GAAAqB,CAAA;IAED,OAAO,8BAA8B0C,WAAW;;;;EAIlDmG,IAAI,CAACC,SAAS,CAACb,MAAM,EAAE,IAAI,EAAE,CAAC,CAAC;;iDAEgB;EAC/C;EAEA;;;EAGQ,MAAMN,4BAA4BA,CAACjF,WAAmB,EAAEwD,aAAqB;IAAA;IAAAvH,aAAA,GAAAkC,CAAA;IACnF;IACA,MAAMsH,KAAK;IAAA;IAAA,CAAAxJ,aAAA,GAAAqB,CAAA,SAAG,CACZ,iDAAiD,EACjD,kCAAkC,EAClC,4BAA4B,EAC5B,gCAAgC,EAChC,+CAA+C,EAC/C,mCAAmC,EACnC,+BAA+B,EAC/B,4BAA4B,EAC5B,gCAAgC,EAChC,2BAA2B,CAC5B;IAAC;IAAArB,aAAA,GAAAqB,CAAA;IAEF,OAAO,8BAA8B0C,WAAW;;;;EAIlDyF,KAAK,CAACrJ,IAAI,CAAC,IAAI,CAAC;;;;;;iDAM+B4D,WAAW;;;CAG3D;EACC;EAEA;;;EAGA,MAAMqG,aAAaA,CAACrG,WAAmB,EAAEsG,MAAc;IAAA;IAAArK,aAAA,GAAAkC,CAAA;IACrD,MAAMgD,KAAK;IAAA;IAAA,CAAAlF,aAAA,GAAAqB,CAAA,SAAG,IAAI,CAACD,YAAY,CAACiF,GAAG,CAACtC,WAAW,CAAC;IAAC;IAAA/D,aAAA,GAAAqB,CAAA;IACjD,IAAI,CAAC6D,KAAK,EAAE;MAAA;MAAAlF,aAAA,GAAAiC,CAAA;MAAAjC,aAAA,GAAAqB,CAAA;MACV,MAAM,IAAIX,WAAW,CAAC,gCAAgCqD,WAAW,GAAG,CAAC;IACvE,CAAC;IAAA;IAAA;MAAA/D,aAAA,GAAAiC,CAAA;IAAA;IAED,MAAMgC,WAAW;IAAA;IAAA,CAAAjE,aAAA,GAAAqB,CAAA,SAAGlB,IAAI,CAAC,IAAI,CAACoB,cAAc,EAAEwC,WAAW,CAAC;IAC1D,MAAMuG,SAAS;IAAA;IAAA,CAAAtK,aAAA,GAAAqB,CAAA,SAAGlB,IAAI,CAAC8D,WAAW,EAAE,UAAU,CAAC;IAE/C;IACA,MAAM2E,YAAY;IAAA;IAAA,CAAA5I,aAAA,GAAAqB,CAAA,SAAG,MAAMjB,QAAQ,CAACkK,SAAS,EAAE,MAAM,CAAC;IACtD,MAAMC,SAAS;IAAA;IAAA,CAAAvK,aAAA,GAAAqB,CAAA,SAAGuH,YAAY,CAAC4B,KAAK,CAAC,IAAI,CAAC,CAACC,MAAM,CAACC,IAAI,IAAI;MAAA;MAAA1K,aAAA,GAAAkC,CAAA;MAAAlC,aAAA,GAAAqB,CAAA;MAAA,kCAAArB,aAAA,GAAAiC,CAAA,WAAAyI,IAAI,CAACT,UAAU,CAAC,OAAO,CAAC;MAAA;MAAA,CAAAjK,aAAA,GAAAiC,CAAA,WAAIyI,IAAI,CAACT,UAAU,CAAC,OAAO,CAAC;IAAD,CAAC,CAAC;IAAC;IAAAjK,aAAA,GAAAqB,CAAA;IAEhH;IAAI;IAAA,CAAArB,aAAA,GAAAiC,CAAA,WAAAoI,MAAM,GAAG,CAAC;IAAA;IAAA,CAAArK,aAAA,GAAAiC,CAAA,WAAIoI,MAAM,GAAGE,SAAS,CAACpB,MAAM,GAAE;MAAA;MAAAnJ,aAAA,GAAAiC,CAAA;MAAAjC,aAAA,GAAAqB,CAAA;MAC3C,MAAM,IAAIX,WAAW,CAAC,mBAAmB2J,MAAM,iBAAiBtG,WAAW,qBAAqBwG,SAAS,CAACpB,MAAM,EAAE,CAAC;IACrH,CAAC;IAAA;IAAA;MAAAnJ,aAAA,GAAAiC,CAAA;IAAA;IAED,MAAM0I,eAAe;IAAA;IAAA,CAAA3K,aAAA,GAAAqB,CAAA,SAAGkJ,SAAS,CAACF,MAAM,GAAG,CAAC,CAAC,CAACO,SAAS,CAACL,SAAS,CAACF,MAAM,GAAG,CAAC,CAAC,CAACQ,OAAO,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAACC,IAAI,EAAE;IAEtG;IAAA;IAAA9K,aAAA,GAAAqB,CAAA;IACA;IAAI;IAAA,CAAArB,aAAA,GAAAiC,CAAA,eAAI,CAACP,eAAe;IAAA;IAAA,CAAA1B,aAAA,GAAAiC,CAAA,WAAI,IAAI,CAACd,aAAa,CAACuB,cAAc,GAAE;MAAA;MAAA1C,aAAA,GAAAiC,CAAA;MAAAjC,aAAA,GAAAqB,CAAA;MAC7D,MAAM,IAAI,CAAC0J,0BAA0B,CAAChH,WAAW,EAAEsG,MAAM,EAAEM,eAAe,CAAC;IAC7E,CAAC,MAAM;MAAA;MAAA3K,aAAA,GAAAiC,CAAA;MAAAjC,aAAA,GAAAqB,CAAA;MACL,MAAM,IAAI,CAAC2J,mBAAmB,CAACjH,WAAW,EAAEsG,MAAM,EAAEM,eAAe,CAAC;IACtE;IAEA;IACA,MAAMM,mBAAmB;IAAA;IAAA,CAAAjL,aAAA,GAAAqB,CAAA,SAAGuH,YAAY,CAACsC,OAAO,CAC9CX,SAAS,CAACF,MAAM,GAAG,CAAC,CAAC,EACrBE,SAAS,CAACF,MAAM,GAAG,CAAC,CAAC,CAACa,OAAO,CAAC,OAAO,EAAE,OAAO,CAAC,CAChD;IAAC;IAAAlL,aAAA,GAAAqB,CAAA;IACF,MAAMhB,SAAS,CAACiK,SAAS,EAAEW,mBAAmB,EAAE,MAAM,CAAC;IAEvD;IAAA;IAAAjL,aAAA,GAAAqB,CAAA;IACA6D,KAAK,CAACd,YAAY,GAAG,gBAAiC;IAAC;IAAApE,aAAA,GAAAqB,CAAA;IACvD6D,KAAK,CAACb,gBAAgB,GAAGgG,MAAM;IAAC;IAAArK,aAAA,GAAAqB,CAAA;IAChC6D,KAAK,CAACX,YAAY,GAAG,IAAIC,IAAI,EAAE;IAAC;IAAAxE,aAAA,GAAAqB,CAAA;IAEhC,IAAI,CAACN,MAAM,CAACyB,IAAI,CAAC,oBAAoB6H,MAAM,SAAStG,WAAW,MAAM4G,eAAe,EAAE,CAAC;IAAC;IAAA3K,aAAA,GAAAqB,CAAA;IACxF,IAAI,CAACP,QAAQ,CAACiE,IAAI,CAAC,0BAA0B,EAAE;MAAEhB,WAAW;MAAEsG,MAAM;MAAEM;IAAe,CAAE,CAAC;EAC1F;EAEA;;;EAGQ,MAAMI,0BAA0BA,CAAChH,WAAmB,EAAEsG,MAAc,EAAEM,eAAuB;IAAA;IAAA3K,aAAA,GAAAkC,CAAA;IACnG;IACA,MAAMiJ,QAAQ;IAAA;IAAA,CAAAnL,aAAA,GAAAqB,CAAA,SAAsB;MAClCiG,EAAE,EAAE,gBAAgBvD,WAAW,IAAIsG,MAAM,IAAI7F,IAAI,CAACY,GAAG,EAAE,EAAE;MACzD9B,OAAO,EAAG,IAAI,CAAC7B,QAAgB,CAAC6F,EAAE;MAClC6D,QAAQ,EAAE;QACRC,MAAM,EAAE,gBAAgB;QACxBrH,WAAW;QACXsG,MAAM;QACNM,eAAe;QACfU,OAAO,EAAE,mBAAmBV,eAAe;OAC5C;MACDW,iBAAiB;MAAE;MAAA,CAAAtL,aAAA,GAAAiC,CAAA,eAAI,CAACd,aAAa,CAAC6B,kBAAkB;MAAA;MAAA,CAAAhD,aAAA,GAAAiC,CAAA,WAAI,IAAI;MAChEsJ,QAAQ,EAAE,IAAI/G,IAAI,CAACA,IAAI,CAACY,GAAG,EAAE,GAAG,MAAM,CAAC;MAAE;MACzC;MACAiF,MAAM,EAAE,gBAAgBtG,WAAW,IAAIsG,MAAM,EAAE;MAC/C/E,QAAQ,EAAE;QACR6C,IAAI,EAAE,qBAAqB;QAC3BpE,WAAW;QACXsG,MAAM;QACNM;;KAEH;IAED;IACA,MAAMa,UAAU;IAAA;IAAA,CAAAxL,aAAA,GAAAqB,CAAA,SAAG,MAAM,IAAI,CAACK,eAAgB,CAAC+J,cAAc,CAACN,QAAQ,CAAC;IACvE,MAAMO,eAAe;IAAA;IAAA,CAAA1L,aAAA,GAAAqB,CAAA,SAAG,MAAM,IAAI,CAACsK,sBAAsB,CAACH,UAAU,EAAE,MAAM,CAAC;IAAC;IAAAxL,aAAA,GAAAqB,CAAA;IAE9E,IAAI,CAACqK,eAAe,CAACE,QAAQ,EAAE;MAAA;MAAA5L,aAAA,GAAAiC,CAAA;MAAAjC,aAAA,GAAAqB,CAAA;MAC7B,MAAM,IAAIX,WAAW,CAAC,6BAA6B2J,MAAM;MAAK;MAAA,CAAArK,aAAA,GAAAiC,CAAA,WAAAyJ,eAAe,CAACG,MAAM;MAAA;MAAA,CAAA7L,aAAA,GAAAiC,CAAA,WAAI,oBAAoB,GAAE,CAAC;IACjH,CAAC;IAAA;IAAA;MAAAjC,aAAA,GAAAiC,CAAA;IAAA;IAAAjC,aAAA,GAAAqB,CAAA;IAED,IAAI,CAACN,MAAM,CAACyB,IAAI,CAAC,+BAA+B6H,MAAM,KAAKqB,eAAe,CAACI,UAAU,EAAE,CAAC;IAExF;IAAA;IAAA9L,aAAA,GAAAqB,CAAA;IACA,MAAM,IAAI,CAAC2J,mBAAmB,CAACjH,WAAW,EAAEsG,MAAM,EAAEM,eAAe,CAAC;EACtE;EAEA;;;EAGQ,MAAMK,mBAAmBA,CAACjH,WAAmB,EAAEsG,MAAc,EAAEM,eAAuB;IAAA;IAAA3K,aAAA,GAAAkC,CAAA;IAC5F,MAAMoE,gBAAgB;IAAA;IAAA,CAAAtG,aAAA,GAAAqB,CAAA,SAAGlB,IAAI,CAAC,IAAI,CAACoB,cAAc,EAAEwC,WAAW,EAAE,iBAAiB,CAAC;IAClF,MAAM4E,UAAU;IAAA;IAAA,CAAA3I,aAAA,GAAAqB,CAAA,SAAGlB,IAAI,CAAC,IAAI,CAACoB,cAAc,EAAEwC,WAAW,EAAE,WAAW,CAAC;IAEtE,MAAMc,mBAAmB;IAAA;IAAA,CAAA7E,aAAA,GAAAqB,CAAA,SAAG,MAAMjB,QAAQ,CAACkG,gBAAgB,EAAE,MAAM,CAAC;IACpE,MAAMiB,aAAa;IAAA;IAAA,CAAAvH,aAAA,GAAAqB,CAAA,SAAG,MAAMjB,QAAQ,CAACuI,UAAU,EAAE,MAAM,CAAC;IAExD;IACA,MAAMoD,kBAAkB;IAAA;IAAA,CAAA/L,aAAA,GAAAqB,CAAA,SAAG;MACzBiG,EAAE,EAAE,aAAavD,WAAW,IAAIsG,MAAM,IAAI7F,IAAI,CAACY,GAAG,EAAE,EAAE;MACtD+C,IAAI,EAAE,qBAAqB;MAC3BvB,WAAW,EAAE,cAAc+D,eAAe,EAAE;MAC5CvC,KAAK,EAAE;QACLrE,WAAW;QACXsG,MAAM;QACNM,eAAe;QACfjE,YAAY,EAAE7B,mBAAmB;QACjCmH,MAAM,EAAEzE,aAAa;QACrB0E,OAAO,EAAE,MAAM,IAAI,CAACC,kBAAkB,CAAC,WAAW;OACnD;MACDrF,QAAQ,EAAE,EAAE;MACZvB,QAAQ,EAAE;QACRvB,WAAW;QACXsG,MAAM;QACNpD,YAAY,EAAE;;KAEjB;IAED;IACA,MAAMkF,qBAAqB;IAAA;IAAA,CAAAnM,aAAA,GAAAqB,CAAA,SAAG,MAAM,IAAI,CAACmH,oBAAoB,CAC3D,CAAC,gBAAgB,EAAE,QAAQ,EAAE,SAAS,CAAC,EACvC,qBAAqB,EACrB,CAAC,CACF;IAAC;IAAAxI,aAAA,GAAAqB,CAAA;IACF,MAAM,IAAI,CAACoH,2BAA2B,CACpC0D,qBAAqB,EACrBJ,kBAAkB,EAClB,CAAC,gBAAgB,EAAE,QAAQ,EAAE,SAAS,CAAC,CACxC;EACH;EAEA;;;EAGA,MAAMK,YAAYA,CAACrI,WAAmB;IAAA;IAAA/D,aAAA,GAAAkC,CAAA;IACpC,MAAMgD,KAAK;IAAA;IAAA,CAAAlF,aAAA,GAAAqB,CAAA,SAAG,IAAI,CAACD,YAAY,CAACiF,GAAG,CAACtC,WAAW,CAAC;IAAC;IAAA/D,aAAA,GAAAqB,CAAA;IACjD,IAAI,CAAC6D,KAAK,EAAE;MAAA;MAAAlF,aAAA,GAAAiC,CAAA;MAAAjC,aAAA,GAAAqB,CAAA;MACV,MAAM,IAAIX,WAAW,CAAC,gCAAgCqD,WAAW,GAAG,CAAC;IACvE,CAAC;IAAA;IAAA;MAAA/D,aAAA,GAAAiC,CAAA;IAAA;IAED,MAAMmC,YAAY;IAAA;IAAA,CAAApE,aAAA,GAAAqB,CAAA,SAAG6D,KAAK,CAACd,YAAY;IAEvC;IACA,MAAMiI,gBAAgB;IAAA;IAAA,CAAArM,aAAA,GAAAqB,CAAA,SAA2B;MAC/C,4BAA4B,EAAE,mBAAmB;MACjD,mBAAmB,EAAE,yBAAyB;MAC9C,yBAAyB,EAAE,gBAAgB;MAC3C,gBAAgB,EAAE;KACnB;IAED,MAAMiL,SAAS;IAAA;IAAA,CAAAtM,aAAA,GAAAqB,CAAA,SAAGgL,gBAAgB,CAACjI,YAAY,CAAC;IAAC;IAAApE,aAAA,GAAAqB,CAAA;IACjD,IAAI,CAACiL,SAAS,EAAE;MAAA;MAAAtM,aAAA,GAAAiC,CAAA;MAAAjC,aAAA,GAAAqB,CAAA;MACd,MAAM,IAAIX,WAAW,CAAC,+BAA+B0D,YAAY,GAAG,CAAC;IACvE,CAAC;IAAA;IAAA;MAAApE,aAAA,GAAAiC,CAAA;IAAA;IAED;IAAAjC,aAAA,GAAAqB,CAAA;IACA6D,KAAK,CAACd,YAAY,GAAGkI,SAA0B;IAAC;IAAAtM,aAAA,GAAAqB,CAAA;IAChD6D,KAAK,CAACX,YAAY,GAAG,IAAIC,IAAI,EAAE;IAAC;IAAAxE,aAAA,GAAAqB,CAAA;IAChC6D,KAAK,CAACT,OAAO,CAACgC,IAAI,CAAC;MACjB/B,KAAK,EAAE4H,SAA0B;MACjChI,MAAM,EAAE,UAAiE;MACzEK,SAAS,EAAE,IAAIH,IAAI;KACpB,CAAC;IAAC;IAAAxE,aAAA,GAAAqB,CAAA;IAEH,IAAI,CAACN,MAAM,CAACyB,IAAI,CAAC,kCAAkCuB,WAAW,MAAMK,YAAY,OAAOkI,SAAS,EAAE,CAAC;IAAC;IAAAtM,aAAA,GAAAqB,CAAA;IACpG,IAAI,CAACP,QAAQ,CAACiE,IAAI,CAAC,wBAAwB,EAAE;MAAEhB,WAAW;MAAEwI,SAAS,EAAEnI,YAAY;MAAEoI,OAAO,EAAEF;IAAS,CAAE,CAAC;EAC5G;EAEA;;;EAGAG,gBAAgBA,CAAC1I,WAAmB;IAAA;IAAA/D,aAAA,GAAAkC,CAAA;IAAAlC,aAAA,GAAAqB,CAAA;IAClC,OAAO,IAAI,CAACD,YAAY,CAACiF,GAAG,CAACtC,WAAW,CAAC;EAC3C;EAEA;;;EAGA,MAAM2I,sBAAsBA,CAACC,MAAc,EAAEC,OAAe;IAAA;IAAA5M,aAAA,GAAAkC,CAAA;IAAAlC,aAAA,GAAAqB,CAAA;IAC1D,MAAMf,KAAK,CAAC,IAAI,CAACkB,iBAAiB,EAAE;MAAE0C,SAAS,EAAE;IAAI,CAAE,CAAC;IACxD,MAAM2I,YAAY;IAAA;IAAA,CAAA7M,aAAA,GAAAqB,CAAA,SAAGlB,IAAI,CAAC,IAAI,CAACqB,iBAAiB,EAAE,GAAGmL,MAAM,KAAK,CAAC;IAEjE,MAAMG,eAAe;IAAA;IAAA,CAAA9M,aAAA,GAAAqB,CAAA,SAAG,KAAKsL,MAAM,CAACI,MAAM,CAAC,CAAC,CAAC,CAACC,WAAW,EAAE,GAAGL,MAAM,CAACM,KAAK,CAAC,CAAC,CAAC;;EAE/EL,OAAO;;;;wCAI+BD,MAAM;CAC7C;IAAC;IAAA3M,aAAA,GAAAqB,CAAA;IAEE,MAAMhB,SAAS,CAACwM,YAAY,EAAEC,eAAe,EAAE,MAAM,CAAC;IAAC;IAAA9M,aAAA,GAAAqB,CAAA;IACvD,IAAI,CAACN,MAAM,CAACyB,IAAI,CAAC,kCAAkCmK,MAAM,SAASE,YAAY,GAAG,CAAC;EACpF;EAEA;;;;;;EAMQ,MAAMpE,2BAA2BA,CACvCyE,UAAoB,EACpBhG,IAAS,EACTiG,YAAsB;IAAA;IAAAnN,aAAA,GAAAkC,CAAA;IAEtB,MAAMkL,cAAc;IAAA;IAAA,CAAApN,aAAA,GAAAqB,CAAA,SAAa,EAAE;IACnC,MAAMgM,aAAa;IAAA;IAAA,CAAArN,aAAA,GAAAqB,CAAA,SAAa,EAAE;IAAC;IAAArB,aAAA,GAAAqB,CAAA;IAEnC,IAAI;MACF;MACA,MAAMiM,YAAY;MAAA;MAAA,CAAAtN,aAAA,GAAAqB,CAAA,SAAG,MAAM,IAAI,CAACkM,kBAAkB,CAACJ,YAAY,EAAED,UAAU,CAAC/D,MAAM,CAAC;MAAC;MAAAnJ,aAAA,GAAAqB,CAAA;MACpF+L,cAAc,CAAC3G,IAAI,CAAC,GAAG6G,YAAY,CAAC;MAEpC;MACA,MAAME,MAAM;MAAA;MAAA,CAAAxN,aAAA,GAAAqB,CAAA,SAAG6L,UAAU,CAAC/D,MAAM,GAAGmE,YAAY,CAACnE,MAAM;MAAC;MAAAnJ,aAAA,GAAAqB,CAAA;MACvD,IAAImM,MAAM,GAAG,CAAC,EAAE;QAAA;QAAAxN,aAAA,GAAAiC,CAAA;QACd,MAAMwL,YAAY;QAAA;QAAA,CAAAzN,aAAA,GAAAqB,CAAA,SAAG6L,UAAU,CAACD,KAAK,CAAC,CAAC,EAAEO,MAAM,CAAC;QAAC;QAAAxN,aAAA,GAAAqB,CAAA;QAEjD,KAAK,MAAMqM,SAAS,IAAID,YAAY,EAAE;UAAA;UAAAzN,aAAA,GAAAqB,CAAA;UACpC,IAAI;YACF,MAAMsM,YAAY;YAAA;YAAA,CAAA3N,aAAA,GAAAqB,CAAA,SAAG,IAAI,CAACuM,0BAA0B,CAACF,SAAS,EAAExG,IAAI,CAAC5B,QAAQ,EAAEvB,WAAW,EAAEoJ,YAAY,CAAC;YACzG,MAAMU,YAAY;YAAA;YAAA,CAAA7N,aAAA,GAAAqB,CAAA,SAAG,IAAI,CAACyM,gBAAgB,CAACJ,SAAS,CAAC;YACrD,MAAMK,OAAO;YAAA;YAAA,CAAA/N,aAAA,GAAAqB,CAAA,SAAG,MAAM,IAAI,CAACJ,YAAY,CAAC+M,WAAW,CAACH,YAAY,EAAEF,YAAY,CAAC;YAAC;YAAA3N,aAAA,GAAAqB,CAAA;YAChF,MAAM,IAAI,CAACJ,YAAY,CAACgN,UAAU,CAACF,OAAO,CAAC;YAE3C;YAAA;YAAA/N,aAAA,GAAAqB,CAAA;YACA,MAAM,IAAI,CAAC6M,cAAc,CAACH,OAAO,EAAEF,YAAY,EAAEV,YAAY,CAAC;YAAC;YAAAnN,aAAA,GAAAqB,CAAA;YAE/DgM,aAAa,CAAC5G,IAAI,CAACsH,OAAO,CAAC;YAAC;YAAA/N,aAAA,GAAAqB,CAAA;YAC5B+L,cAAc,CAAC3G,IAAI,CAACsH,OAAO,CAAC;UAC9B,CAAC,CAAC,OAAOrK,KAAK,EAAE;YAAA;YAAA1D,aAAA,GAAAqB,CAAA;YACd,IAAI,CAACN,MAAM,CAACoF,IAAI,CAAC,mBAAmBuH,SAAS,iBAAiB,IAAI,CAACI,gBAAgB,CAACJ,SAAS,CAAC,MAAMhK,KAAK,YAAYC,KAAK;YAAA;YAAA,CAAA3D,aAAA,GAAAiC,CAAA,WAAGyB,KAAK,CAACE,OAAO;YAAA;YAAA,CAAA5D,aAAA,GAAAiC,CAAA,WAAG4B,MAAM,CAACH,KAAK,CAAC,GAAE,CAAC;UAC/J;QACF;MACF,CAAC;MAAA;MAAA;QAAA1D,aAAA,GAAAiC,CAAA;MAAA;MAED;MAAAjC,aAAA,GAAAqB,CAAA;MACA,MAAM,IAAI,CAAC8M,gBAAgB,CAACb,YAAY,EAAEpG,IAAI,CAACI,EAAE,CAAC;MAElD;MACA,MAAM8G,aAAa;MAAA;MAAA,CAAApO,aAAA,GAAAqB,CAAA;MAAG;MAAA,CAAArB,aAAA,GAAAiC,CAAA,WAAAmL,cAAc,CAAC,CAAC,CAAC;MAAA;MAAA,CAAApN,aAAA,GAAAiC,CAAA,WAAI,SAAS;MAAC;MAAAjC,aAAA,GAAAqB,CAAA;MACrD6F,IAAI,CAACkH,aAAa,GAAGA,aAAa;MAElC;MAAA;MAAApO,aAAA,GAAAqB,CAAA;MACA,MAAM,IAAI,CAACH,gBAAgB,CAACmN,UAAU,CAACnH,IAAI,CAAC;MAAC;MAAAlH,aAAA,GAAAqB,CAAA;MAE7C,IAAI,CAACN,MAAM,CAACyB,IAAI,CAAC,QAAQ0E,IAAI,CAACI,EAAE,kBAAkBgG,YAAY,CAACnE,MAAM,aAAakE,aAAa,CAAClE,MAAM,iBAAiB,CAAC;IAE1H,CAAC,SAAS;MAAA;MAAAnJ,aAAA,GAAAqB,CAAA;MACR;MACA,MAAM,IAAI,CAACiN,mBAAmB,CAAClB,cAAc,EAAEC,aAAa,CAAC;IAC/D;EACF;EAEA;;;EAGQO,0BAA0BA,CAACF,SAAiB,EAAE3J,WAAoB,EAAEoJ,YAAuB;IAAA;IAAAnN,aAAA,GAAAkC,CAAA;IACjG;IACA,MAAM2L,YAAY;IAAA;IAAA,CAAA7N,aAAA,GAAAqB,CAAA,SAAG,IAAI,CAACyM,gBAAgB,CAACJ,SAAS,CAAC;IAAC;IAAA1N,aAAA,GAAAqB,CAAA;IAEtD,OAAO;MACLiG,EAAE,EAAE,GAAGoG,SAAS;MAAI;MAAA,CAAA1N,aAAA,GAAAiC,CAAA,WAAA8B,WAAW;MAAA;MAAA,CAAA/D,aAAA,GAAAiC,CAAA,WAAI,SAAS,KAAIuC,IAAI,CAACY,GAAG,EAAE,EAAE;MAC5DxC,IAAI,EAAE,GAAG8K,SAAS,GAAG3J,WAAW;MAAA;MAAA,CAAA/D,aAAA,GAAAiC,CAAA,WAAG,QAAQ8B,WAAW,EAAE;MAAA;MAAA,CAAA/D,aAAA,GAAAiC,CAAA,WAAG,EAAE,GAAE;MAC/DkG,IAAI,EAAE0F,YAAY;MAAE;MACpBV,YAAY;MAAE;MAAA,CAAAnN,aAAA,GAAAiC,CAAA,WAAAkL,YAAY;MAAA;MAAA,CAAAnN,aAAA,GAAAiC,CAAA,WAAI,IAAI,CAACsM,kCAAkC,CAACb,SAAS,CAAC;MAChFc,kBAAkB,EAAE,CAAC;MACrB3H,QAAQ,EAAE,IAAI,CAAC4H,8BAA8B,CAACf,SAAS;KACxD;EACH;EAEA;;;EAGQI,gBAAgBA,CAACJ,SAAiB;IAAA;IAAA1N,aAAA,GAAAkC,CAAA;IACxC,MAAMwM,QAAQ;IAAA;IAAA,CAAA1O,aAAA,GAAAqB,CAAA,SAA2B;MACvC,SAAS,EAAE,cAAc;MACzB,OAAO,EAAE;KACV;IAAC;IAAArB,aAAA,GAAAqB,CAAA;IACF,OAAO,2BAAArB,aAAA,GAAAiC,CAAA,WAAAyM,QAAQ,CAAChB,SAAS,CAAC;IAAA;IAAA,CAAA1N,aAAA,GAAAiC,CAAA,WAAIyL,SAAS;EACzC;EAEA;;;EAGQa,kCAAkCA,CAACb,SAAiB;IAAA;IAAA1N,aAAA,GAAAkC,CAAA;IAC1D,MAAMyM,aAAa;IAAA;IAAA,CAAA3O,aAAA,GAAAqB,CAAA,SAA6B;MAC9C;MACA,kBAAkB,EAAE,CAAC,QAAQ,EAAE,cAAc,EAAE,UAAU,CAAC;MAC1D,kBAAkB,EAAE,CAAC,qBAAqB,EAAE,aAAa,EAAE,aAAa,EAAE,qBAAqB,CAAC;MAEhG;MACA,WAAW,EAAE,CAAC,gBAAgB,EAAE,QAAQ,EAAE,SAAS,CAAC;MACpD,OAAO,EAAE,CAAC,gBAAgB,EAAE,QAAQ,EAAE,SAAS,CAAC;MAEhD;MACA,cAAc,EAAE,CAAC,oBAAoB,EAAE,gBAAgB,EAAE,UAAU,CAAC;MACpE,SAAS,EAAE,CAAC,oBAAoB,EAAE,gBAAgB,EAAE,UAAU,CAAC;MAE/D;MACA,QAAQ,EAAE,CAAC,SAAS,EAAE,mBAAmB,EAAE,iBAAiB,CAAC;MAC7D,UAAU,EAAE,CAAC,aAAa,EAAE,mBAAmB,EAAE,UAAU,CAAC;MAE5D;MACA,YAAY,EAAE,CAAC,UAAU,EAAE,UAAU,EAAE,eAAe,CAAC;MACvD,SAAS,EAAE,CAAC,UAAU,EAAE,iBAAiB,EAAE,eAAe,CAAC;MAC3D,uBAAuB,EAAE,CAAC,cAAc,EAAE,eAAe,EAAE,UAAU,CAAC;MACtE,iBAAiB,EAAE,CAAC,eAAe,EAAE,YAAY,EAAE,kBAAkB;KACtE;IAAC;IAAArB,aAAA,GAAAqB,CAAA;IAEF,OAAO,2BAAArB,aAAA,GAAAiC,CAAA,WAAA0M,aAAa,CAACjB,SAAS,CAAC;IAAA;IAAA,CAAA1N,aAAA,GAAAiC,CAAA,WAAI,CAAC,SAAS,CAAC;EAChD;EAEA;;;EAGQwM,8BAA8BA,CAACf,SAAiB;IAAA;IAAA1N,aAAA,GAAAkC,CAAA;IACtD,MAAM0M,WAAW;IAAA;IAAA,CAAA5O,aAAA,GAAAqB,CAAA,SAA2B;MAC1C;MACA,WAAW,EAAE,EAAE;MACf,OAAO,EAAE,EAAE;MAEX;MACA,kBAAkB,EAAE,EAAE;MACtB,kBAAkB,EAAE,EAAE;MACtB,cAAc,EAAE,EAAE;MAClB,SAAS,EAAE,EAAE;MAEb;MACA,QAAQ,EAAE,EAAE;MACZ,UAAU,EAAE,EAAE;MAEd;MACA,YAAY,EAAE,EAAE;MAChB,SAAS,EAAE,EAAE;MACb,uBAAuB,EAAE,EAAE;MAE3B;MACA,iBAAiB,EAAE;KACpB;IAAC;IAAArB,aAAA,GAAAqB,CAAA;IAEF,OAAO,2BAAArB,aAAA,GAAAiC,CAAA,WAAA2M,WAAW,CAAClB,SAAS,CAAC;IAAA;IAAA,CAAA1N,aAAA,GAAAiC,CAAA,WAAI,EAAE;EACrC;EAEA;;;;EAIQ,MAAMuG,oBAAoBA,CAChCzB,oBAA8B,EAC9B8H,QAAgB,EAChB9L,SAAA;EAAA;EAAA,CAAA/C,aAAA,GAAAiC,CAAA,WAAoB,CAAC;IAAA;IAAAjC,aAAA,GAAAkC,CAAA;IAErB;IACA,MAAM4M,eAAe;IAAA;IAAA,CAAA9O,aAAA,GAAAqB,CAAA,SAAG,MAAM,IAAI,CAACkM,kBAAkB,CAACxG,oBAAoB,EAAEhE,SAAS,CAAC;IAAC;IAAA/C,aAAA,GAAAqB,CAAA;IAEvF,IAAIyN,eAAe,CAAC3F,MAAM,IAAIpG,SAAS,EAAE;MAAA;MAAA/C,aAAA,GAAAiC,CAAA;MAAAjC,aAAA,GAAAqB,CAAA;MACvC;MACA,OAAOyN,eAAe,CAAC/E,GAAG,CAACgE,OAAO,IAAG;QAAA;QAAA/N,aAAA,GAAAkC,CAAA;QACnC,MAAM6M,WAAW;QAAA;QAAA,CAAA/O,aAAA,GAAAqB,CAAA,SAAG,IAAI,CAACS,SAAS,CAACuE,GAAG,CAAC0H,OAAO,CAAC;QAAC;QAAA/N,aAAA,GAAAqB,CAAA;QAChD,OAAO,2BAAArB,aAAA,GAAAiC,CAAA,WAAA8M,WAAW,EAAE5G,IAAI;QAAA;QAAA,CAAAnI,aAAA,GAAAiC,CAAA,WAAI,SAAS;MACvC,CAAC,CAAC;IACJ,CAAC;IAAA;IAAA;MAAAjC,aAAA,GAAAiC,CAAA;IAAA;IAED;IAAAjC,aAAA,GAAAqB,CAAA;IACA,OAAO,IAAI,CAAC2N,uBAAuB,CAACjI,oBAAoB,EAAE8H,QAAQ,EAAE9L,SAAS,CAAC;EAChF;EAEA;;;EAGQiM,uBAAuBA,CAC7BjI,oBAA8B,EAC9B8H,QAAgB,EAChB9L,SAAiB;IAAA;IAAA/C,aAAA,GAAAkC,CAAA;IAEjB;IACA,MAAM+M,cAAc;IAAA;IAAA,CAAAjP,aAAA,GAAAqB,CAAA,SAA6B;MAC/C,mBAAmB,EAAE,CAAC,kBAAkB,EAAE,kBAAkB,CAAC;MAC7D,eAAe,EAAE,CAAC,cAAc,EAAE,SAAS,CAAC;MAC5C,qBAAqB,EAAE,CAAC,WAAW,EAAE,OAAO,CAAC;MAC7C,aAAa,EAAE,CAAC,UAAU,EAAE,SAAS,CAAC;MACtC,UAAU,EAAE,CAAC,YAAY,EAAE,SAAS,CAAC;MACrC,eAAe,EAAE,CAAC,uBAAuB,EAAE,iBAAiB;KAC7D;IAED;IACA,MAAM6N,gBAAgB;IAAA;IAAA,CAAAlP,aAAA,GAAAqB,CAAA,SAA6B;MACjD,QAAQ,EAAE,CAAC,kBAAkB,EAAE,kBAAkB,CAAC;MAClD,cAAc,EAAE,CAAC,kBAAkB,EAAE,kBAAkB,CAAC;MACxD,qBAAqB,EAAE,CAAC,kBAAkB,CAAC;MAC3C,gBAAgB,EAAE,CAAC,WAAW,EAAE,OAAO,CAAC;MACxC,QAAQ,EAAE,CAAC,WAAW,EAAE,OAAO,CAAC;MAChC,SAAS,EAAE,CAAC,QAAQ,EAAE,WAAW,CAAC;MAClC,oBAAoB,EAAE,CAAC,cAAc,CAAC;MACtC,gBAAgB,EAAE,CAAC,cAAc,CAAC;MAClC,UAAU,EAAE,CAAC,cAAc,EAAE,SAAS,CAAC;MACvC,UAAU,EAAE,CAAC,SAAS,EAAE,YAAY,CAAC;MACrC,UAAU,EAAE,CAAC,YAAY,EAAE,SAAS,CAAC;MACrC,eAAe,EAAE,CAAC,uBAAuB,EAAE,iBAAiB,CAAC;MAC7D,aAAa,EAAE,CAAC,UAAU,EAAE,SAAS,CAAC;MACtC,mBAAmB,EAAE,CAAC,UAAU,EAAE,QAAQ;KAC3C;IAED;IACA,IAAI6L,UAAU;IAAA;IAAA,CAAAlN,aAAA,GAAAqB,CAAA;IAAG;IAAA,CAAArB,aAAA,GAAAiC,CAAA,WAAAgN,cAAc,CAACJ,QAAQ,CAAC;IAAA;IAAA,CAAA7O,aAAA,GAAAiC,CAAA,WAAI,EAAE;IAE/C;IAAA;IAAAjC,aAAA,GAAAqB,CAAA;IACA,IAAI6L,UAAU,CAAC/D,MAAM,KAAK,CAAC,EAAE;MAAA;MAAAnJ,aAAA,GAAAiC,CAAA;MAC3B,MAAMkN,OAAO;MAAA;MAAA,CAAAnP,aAAA,GAAAqB,CAAA,SAAG,IAAI+N,GAAG,EAAU;MAAC;MAAApP,aAAA,GAAAqB,CAAA;MAElC,KAAK,MAAMgO,UAAU,IAAItI,oBAAoB,EAAE;QAC7C,MAAMuI,aAAa;QAAA;QAAA,CAAAtP,aAAA,GAAAqB,CAAA;QAAG;QAAA,CAAArB,aAAA,GAAAiC,CAAA,WAAAiN,gBAAgB,CAACG,UAAU,CAAC;QAAA;QAAA,CAAArP,aAAA,GAAAiC,CAAA,WAAI,EAAE;QAAC;QAAAjC,aAAA,GAAAqB,CAAA;QACzDiO,aAAa,CAACC,OAAO,CAACpH,IAAI,IAAI;UAAA;UAAAnI,aAAA,GAAAkC,CAAA;UAAAlC,aAAA,GAAAqB,CAAA;UAAA,OAAA8N,OAAO,CAACK,GAAG,CAACrH,IAAI,CAAC;QAAD,CAAC,CAAC;MAClD;MAAC;MAAAnI,aAAA,GAAAqB,CAAA;MAED6L,UAAU,GAAGrD,KAAK,CAAC4F,IAAI,CAACN,OAAO,CAAC;IAClC,CAAC;IAAA;IAAA;MAAAnP,aAAA,GAAAiC,CAAA;IAAA;IAED;IAAAjC,aAAA,GAAAqB,CAAA;IACA,IAAI6L,UAAU,CAAC/D,MAAM,KAAK,CAAC,EAAE;MAAA;MAAAnJ,aAAA,GAAAiC,CAAA;MAAAjC,aAAA,GAAAqB,CAAA;MAC3B6L,UAAU,GAAG,CAAC,WAAW,EAAE,SAAS,CAAC,CAAC,CAAC;IACzC,CAAC;IAAA;IAAA;MAAAlN,aAAA,GAAAiC,CAAA;IAAA;IAED;IAAAjC,aAAA,GAAAqB,CAAA;IACA,OAAO6L,UAAU,CAACD,KAAK,CAAC,CAAC,EAAElK,SAAS,CAAC;EACvC;EAEA;;;EAGQ,MAAMwK,kBAAkBA,CAACxG,oBAA8B,EAAEhE,SAAiB;IAAA;IAAA/C,aAAA,GAAAkC,CAAA;IAChF,MAAMwN,cAAc;IAAA;IAAA,CAAA1P,aAAA,GAAAqB,CAAA,SAAa,EAAE;IAAC;IAAArB,aAAA,GAAAqB,CAAA;IAEpC,IAAI;MACF;MACA,IAAIsO,YAAY;MAAA;MAAA,CAAA3P,aAAA,GAAAqB,CAAA,SAAuB,IAAI;MAAC;MAAArB,aAAA,GAAAqB,CAAA;MAE5C,KAAK,MAAMgO,UAAU,IAAItI,oBAAoB,EAAE;QAC7C,MAAM6I,oBAAoB;QAAA;QAAA,CAAA5P,aAAA,GAAAqB,CAAA,SAAG,IAAI,CAACU,eAAe,CAACsE,GAAG,CAACgJ,UAAU,CAAC;QAAC;QAAArP,aAAA,GAAAqB,CAAA;QAElE;QAAI;QAAA,CAAArB,aAAA,GAAAiC,CAAA,YAAC2N,oBAAoB;QAAA;QAAA,CAAA5P,aAAA,GAAAiC,CAAA,WAAI2N,oBAAoB,CAACC,IAAI,KAAK,CAAC,GAAE;UAAA;UAAA7P,aAAA,GAAAiC,CAAA;UAAAjC,aAAA,GAAAqB,CAAA;UAC5D,SAAS,CAAC;QACZ,CAAC;QAAA;QAAA;UAAArB,aAAA,GAAAiC,CAAA;QAAA;QAAAjC,aAAA,GAAAqB,CAAA;QAED,IAAIsO,YAAY,KAAK,IAAI,EAAE;UAAA;UAAA3P,aAAA,GAAAiC,CAAA;UAAAjC,aAAA,GAAAqB,CAAA;UACzBsO,YAAY,GAAG,IAAIP,GAAG,CAACQ,oBAAoB,CAAC;QAC9C,CAAC,MAAM;UAAA;UAAA5P,aAAA,GAAAiC,CAAA;UACL;UACA,MAAM6N,YAAY;UAAA;UAAA,CAAA9P,aAAA,GAAAqB,CAAA,SAAG,IAAI+N,GAAG,EAAU;UAAC;UAAApP,aAAA,GAAAqB,CAAA;UACvCsO,YAAY,CAACJ,OAAO,CAACjI,EAAE,IAAG;YAAA;YAAAtH,aAAA,GAAAkC,CAAA;YAAAlC,aAAA,GAAAqB,CAAA;YACxB,IAAIuO,oBAAoB,CAACG,GAAG,CAACzI,EAAE,CAAC,EAAE;cAAA;cAAAtH,aAAA,GAAAiC,CAAA;cAAAjC,aAAA,GAAAqB,CAAA;cAChCyO,YAAY,CAACN,GAAG,CAAClI,EAAE,CAAC;YACtB,CAAC;YAAA;YAAA;cAAAtH,aAAA,GAAAiC,CAAA;YAAA;UACH,CAAC,CAAC;UAAC;UAAAjC,aAAA,GAAAqB,CAAA;UACHsO,YAAY,GAAGG,YAAY;QAC7B;MACF;MAEA;MAAA;MAAA9P,aAAA,GAAAqB,CAAA;MACA;MAAI;MAAA,CAAArB,aAAA,GAAAiC,CAAA,WAAA0N,YAAY;MAAA;MAAA,CAAA3P,aAAA,GAAAiC,CAAA,WAAI0N,YAAY,CAACE,IAAI,GAAG,CAAC,GAAE;QAAA;QAAA7P,aAAA,GAAAiC,CAAA;QAAAjC,aAAA,GAAAqB,CAAA;QACzC,KAAK,MAAM0M,OAAO,IAAI4B,YAAY,EAAE;UAAA;UAAA3P,aAAA,GAAAqB,CAAA;UAClC,IAAIqO,cAAc,CAACvG,MAAM,IAAIpG,SAAS,EAAE;YAAA;YAAA/C,aAAA,GAAAiC,CAAA;YAAAjC,aAAA,GAAAqB,CAAA;YAAA;UAAA,CAAM;UAAA;UAAA;YAAArB,aAAA,GAAAiC,CAAA;UAAA;UAE9C,MAAM8M,WAAW;UAAA;UAAA,CAAA/O,aAAA,GAAAqB,CAAA,SAAG,IAAI,CAACS,SAAS,CAACuE,GAAG,CAAC0H,OAAO,CAAC;UAAC;UAAA/N,aAAA,GAAAqB,CAAA;UAChD;UAAI;UAAA,CAAArB,aAAA,GAAAiC,CAAA,WAAA8M,WAAW;UAAA;UAAA,CAAA/O,aAAA,GAAAiC,CAAA,WAAI8M,WAAW,CAACzK,MAAM,KAAK,WAAW,GAAE;YAAA;YAAAtE,aAAA,GAAAiC,CAAA;YAAAjC,aAAA,GAAAqB,CAAA;YACrDqO,cAAc,CAACjJ,IAAI,CAACsH,OAAO,CAAC;UAC9B,CAAC;UAAA;UAAA;YAAA/N,aAAA,GAAAiC,CAAA;UAAA;QACH;MACF,CAAC;MAAA;MAAA;QAAAjC,aAAA,GAAAiC,CAAA;MAAA;MAAAjC,aAAA,GAAAqB,CAAA;MAED,IAAIqO,cAAc,CAACvG,MAAM,GAAG,CAAC,EAAE;QAAA;QAAAnJ,aAAA,GAAAiC,CAAA;QAAAjC,aAAA,GAAAqB,CAAA;QAC7B,IAAI,CAACN,MAAM,CAACyB,IAAI,CAAC,SAASkN,cAAc,CAACvG,MAAM,uCAAuCpC,oBAAoB,CAAC5G,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC;MAC3H,CAAC;MAAA;MAAA;QAAAH,aAAA,GAAAiC,CAAA;MAAA;IAEH,CAAC,CAAC,OAAOyB,KAAK,EAAE;MAAA;MAAA1D,aAAA,GAAAqB,CAAA;MACd,IAAI,CAACN,MAAM,CAACoF,IAAI,CAAC,kCAAkCzC,KAAK,YAAYC,KAAK;MAAA;MAAA,CAAA3D,aAAA,GAAAiC,CAAA,WAAGyB,KAAK,CAACE,OAAO;MAAA;MAAA,CAAA5D,aAAA,GAAAiC,CAAA,WAAG4B,MAAM,CAACH,KAAK,CAAC,GAAE,CAAC;IAC9G;IAAC;IAAA1D,aAAA,GAAAqB,CAAA;IAED,OAAOqO,cAAc;EACvB;EAEA;;;EAGQ,MAAMxB,cAAcA,CAACH,OAAe,EAAEL,SAAiB,EAAEP,YAAsB;IAAA;IAAAnN,aAAA,GAAAkC,CAAA;IAAAlC,aAAA,GAAAqB,CAAA;IACrF,IAAI;MACF,MAAM0N,WAAW;MAAA;MAAA,CAAA/O,aAAA,GAAAqB,CAAA,SAAgB;QAC/BiG,EAAE,EAAEyG,OAAO;QACX5F,IAAI,EAAEuF,SAAS;QACfP,YAAY,EAAEA,YAAY;QAC1B7I,MAAM,EAAE,WAAW;QACnB0L,QAAQ,EAAE,IAAIxL,IAAI,EAAE;QACpByL,UAAU,EAAE,CAAC;QACbC,SAAS,EAAE,IAAI1L,IAAI;OACpB;MAED;MAAA;MAAAxE,aAAA,GAAAqB,CAAA;MACA,IAAI,CAACS,SAAS,CAAC8C,GAAG,CAACmJ,OAAO,EAAEgB,WAAW,CAAC;MAExC;MAAA;MAAA/O,aAAA,GAAAqB,CAAA;MACA,KAAK,MAAMgO,UAAU,IAAIlC,YAAY,EAAE;QAAA;QAAAnN,aAAA,GAAAqB,CAAA;QACrC,IAAI,CAAC,IAAI,CAACU,eAAe,CAACgO,GAAG,CAACV,UAAU,CAAC,EAAE;UAAA;UAAArP,aAAA,GAAAiC,CAAA;UAAAjC,aAAA,GAAAqB,CAAA;UACzC,IAAI,CAACU,eAAe,CAAC6C,GAAG,CAACyK,UAAU,EAAE,IAAID,GAAG,EAAE,CAAC;QACjD,CAAC;QAAA;QAAA;UAAApP,aAAA,GAAAiC,CAAA;QAAA;QAAAjC,aAAA,GAAAqB,CAAA;QACD,IAAI,CAACU,eAAe,CAACsE,GAAG,CAACgJ,UAAU,CAAE,CAACG,GAAG,CAACzB,OAAO,CAAC;MACpD;MAAC;MAAA/N,aAAA,GAAAqB,CAAA;MAED,IAAI,CAACN,MAAM,CAACsI,KAAK,CAAC,eAAe0E,OAAO,KAAKL,SAAS,iCAAiCP,YAAY,CAAChN,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC;IAEpH,CAAC,CAAC,OAAOuD,KAAK,EAAE;MAAA;MAAA1D,aAAA,GAAAqB,CAAA;MACd,IAAI,CAACN,MAAM,CAACoF,IAAI,CAAC,uBAAuB4H,OAAO,aAAarK,KAAK,YAAYC,KAAK;MAAA;MAAA,CAAA3D,aAAA,GAAAiC,CAAA,WAAGyB,KAAK,CAACE,OAAO;MAAA;MAAA,CAAA5D,aAAA,GAAAiC,CAAA,WAAG4B,MAAM,CAACH,KAAK,CAAC,GAAE,CAAC;IACvH;EACF;EAEA;;;EAGQ,MAAMyK,gBAAgBA,CAACgC,QAAkB,EAAE9F,MAAc;IAAA;IAAArK,aAAA,GAAAkC,CAAA;IAAAlC,aAAA,GAAAqB,CAAA;IAC/D,KAAK,MAAM0M,OAAO,IAAIoC,QAAQ,EAAE;MAAA;MAAAnQ,aAAA,GAAAqB,CAAA;MAC9B,IAAI;QACF,MAAM0N,WAAW;QAAA;QAAA,CAAA/O,aAAA,GAAAqB,CAAA,SAAG,IAAI,CAACS,SAAS,CAACuE,GAAG,CAAC0H,OAAO,CAAC;QAAC;QAAA/N,aAAA,GAAAqB,CAAA;QAChD,IAAI0N,WAAW,EAAE;UAAA;UAAA/O,aAAA,GAAAiC,CAAA;UAAAjC,aAAA,GAAAqB,CAAA;UACf0N,WAAW,CAACzK,MAAM,GAAG,MAAM;UAAC;UAAAtE,aAAA,GAAAqB,CAAA;UAC5B0N,WAAW,CAACiB,QAAQ,GAAG,IAAIxL,IAAI,EAAE;UAAC;UAAAxE,aAAA,GAAAqB,CAAA;UAClC0N,WAAW,CAACkB,UAAU,EAAE;QAC1B,CAAC;QAAA;QAAA;UAAAjQ,aAAA,GAAAiC,CAAA;QAAA;MACH,CAAC,CAAC,OAAOyB,KAAK,EAAE;QAAA;QAAA1D,aAAA,GAAAqB,CAAA;QACd,IAAI,CAACN,MAAM,CAACoF,IAAI,CAAC,wBAAwB4H,OAAO,aAAarK,KAAK,YAAYC,KAAK;QAAA;QAAA,CAAA3D,aAAA,GAAAiC,CAAA,WAAGyB,KAAK,CAACE,OAAO;QAAA;QAAA,CAAA5D,aAAA,GAAAiC,CAAA,WAAG4B,MAAM,CAACH,KAAK,CAAC,GAAE,CAAC;MACxH;IACF;EACF;EAEA;;;EAGQ,MAAM4K,mBAAmBA,CAAC8B,SAAmB,EAAE/C,aAAuB;IAAA;IAAArN,aAAA,GAAAkC,CAAA;IAAAlC,aAAA,GAAAqB,CAAA;IAC5E,KAAK,MAAM0M,OAAO,IAAIqC,SAAS,EAAE;MAAA;MAAApQ,aAAA,GAAAqB,CAAA;MAC/B,IAAI;QACF,MAAM0N,WAAW;QAAA;QAAA,CAAA/O,aAAA,GAAAqB,CAAA,SAAG,IAAI,CAACS,SAAS,CAACuE,GAAG,CAAC0H,OAAO,CAAC;QAAC;QAAA/N,aAAA,GAAAqB,CAAA;QAEhD,IAAI0N,WAAW,EAAE;UAAA;UAAA/O,aAAA,GAAAiC,CAAA;UACf;UACA,MAAMoO,UAAU;UAAA;UAAA,CAAArQ,aAAA,GAAAqB,CAAA,SAAGgM,aAAa,CAAC9D,QAAQ,CAACwE,OAAO,CAAC;UAClD,MAAMuC,gBAAgB;UAAA;UAAA,CAAAtQ,aAAA,GAAAqB,CAAA;UAAG;UAAA,CAAArB,aAAA,GAAAiC,CAAA,YAACoO,UAAU;UAAA;UAAA,CAAArQ,aAAA,GAAAiC,CAAA,WAAI8M,WAAW,CAACkB,UAAU,GAAG,CAAC;UAAA;UAAA,CAAAjQ,aAAA,GAAAiC,CAAA,WAAI,IAAI,CAACsO,eAAe,CAACxB,WAAW,CAAC;UAAC;UAAA/O,aAAA,GAAAqB,CAAA;UAExG,IAAIiP,gBAAgB,EAAE;YAAA;YAAAtQ,aAAA,GAAAiC,CAAA;YAAAjC,aAAA,GAAAqB,CAAA;YACpB;YACA0N,WAAW,CAACzK,MAAM,GAAG,WAAW;YAAC;YAAAtE,aAAA,GAAAqB,CAAA;YACjC,IAAI,CAACN,MAAM,CAACsI,KAAK,CAAC,kBAAkB0E,OAAO,yBAAyBgB,WAAW,CAACkB,UAAU,GAAG,CAAC;UAChG,CAAC,MAAM;YAAA;YAAAjQ,aAAA,GAAAiC,CAAA;YAAAjC,aAAA,GAAAqB,CAAA;YACL;YACA,MAAM,IAAI,CAACmP,kBAAkB,CAACzC,OAAO,CAAC;UACxC;QACF,CAAC,MAAM;UAAA;UAAA/N,aAAA,GAAAiC,CAAA;UAAAjC,aAAA,GAAAqB,CAAA;UACL;UACA,MAAM,IAAI,CAACJ,YAAY,CAACwP,SAAS,CAAC1C,OAAO,CAAC;QAC5C;MAEF,CAAC,CAAC,OAAOrK,KAAK,EAAE;QAAA;QAAA1D,aAAA,GAAAqB,CAAA;QACd,IAAI,CAACN,MAAM,CAACoF,IAAI,CAAC,2BAA2B4H,OAAO,KAAKrK,KAAK,YAAYC,KAAK;QAAA;QAAA,CAAA3D,aAAA,GAAAiC,CAAA,WAAGyB,KAAK,CAACE,OAAO;QAAA;QAAA,CAAA5D,aAAA,GAAAiC,CAAA,WAAG4B,MAAM,CAACH,KAAK,CAAC,GAAE,CAAC;MACnH;IACF;EACF;EAEA;;;EAGQ6M,eAAeA,CAACxB,WAAwB;IAAA;IAAA/O,aAAA,GAAAkC,CAAA;IAC9C,MAAMwO,WAAW;IAAA;IAAA,CAAA1Q,aAAA,GAAAqB,CAAA,SAAG,EAAE,EAAC,CAAC;IACxB,MAAMsP,eAAe;IAAA;IAAA,CAAA3Q,aAAA,GAAAqB,CAAA,SAAGwI,KAAK,CAAC4F,IAAI,CAAC,IAAI,CAAC3N,SAAS,CAAC8O,MAAM,EAAE,CAAC,CAACnG,MAAM,CAACoG,CAAC,IAAI;MAAA;MAAA7Q,aAAA,GAAAkC,CAAA;MAAAlC,aAAA,GAAAqB,CAAA;MAAA,OAAAwP,CAAC,CAACvM,MAAM,KAAK,WAAW;IAAX,CAAW,CAAC,CAAC6E,MAAM;IAExG;IACA,MAAM2H,YAAY;IAAA;IAAA,CAAA9Q,aAAA,GAAAqB,CAAA,SAAGmD,IAAI,CAACY,GAAG,EAAE,GAAG2J,WAAW,CAACiB,QAAQ,CAACe,OAAO,EAAE,GAAG,OAAO,EAAC,CAAC;IAAA;IAAA/Q,aAAA,GAAAqB,CAAA;IAC5E,OAAO,2BAAArB,aAAA,GAAAiC,CAAA,WAAA0O,eAAe,GAAGD,WAAW;IAAK;IAAA,CAAA1Q,aAAA,GAAAiC,CAAA,WAAA6O,YAAY;IAAA;IAAA,CAAA9Q,aAAA,GAAAiC,CAAA,WAAI8M,WAAW,CAACkB,UAAU,GAAG,CAAC,EAAC;EACtF;EAEA;;;EAGQ,MAAMO,kBAAkBA,CAACzC,OAAe;IAAA;IAAA/N,aAAA,GAAAkC,CAAA;IAAAlC,aAAA,GAAAqB,CAAA;IAC9C,IAAI;MACF,MAAM0N,WAAW;MAAA;MAAA,CAAA/O,aAAA,GAAAqB,CAAA,SAAG,IAAI,CAACS,SAAS,CAACuE,GAAG,CAAC0H,OAAO,CAAC;MAE/C;MAAA;MAAA/N,aAAA,GAAAqB,CAAA;MACA,IAAI0N,WAAW,EAAE;QAAA;QAAA/O,aAAA,GAAAiC,CAAA;QAAAjC,aAAA,GAAAqB,CAAA;QACf,KAAK,MAAMgO,UAAU,IAAIN,WAAW,CAAC5B,YAAY,EAAE;UACjD,MAAM6D,aAAa;UAAA;UAAA,CAAAhR,aAAA,GAAAqB,CAAA,SAAG,IAAI,CAACU,eAAe,CAACsE,GAAG,CAACgJ,UAAU,CAAC;UAAC;UAAArP,aAAA,GAAAqB,CAAA;UAC3D,IAAI2P,aAAa,EAAE;YAAA;YAAAhR,aAAA,GAAAiC,CAAA;YAAAjC,aAAA,GAAAqB,CAAA;YACjB2P,aAAa,CAACC,MAAM,CAAClD,OAAO,CAAC;YAAC;YAAA/N,aAAA,GAAAqB,CAAA;YAC9B,IAAI2P,aAAa,CAACnB,IAAI,KAAK,CAAC,EAAE;cAAA;cAAA7P,aAAA,GAAAiC,CAAA;cAAAjC,aAAA,GAAAqB,CAAA;cAC5B,IAAI,CAACU,eAAe,CAACkP,MAAM,CAAC5B,UAAU,CAAC;YACzC,CAAC;YAAA;YAAA;cAAArP,aAAA,GAAAiC,CAAA;YAAA;UACH,CAAC;UAAA;UAAA;YAAAjC,aAAA,GAAAiC,CAAA;UAAA;QACH;MACF,CAAC;MAAA;MAAA;QAAAjC,aAAA,GAAAiC,CAAA;MAAA;MAED;MAAAjC,aAAA,GAAAqB,CAAA;MACA,IAAI,CAACS,SAAS,CAACmP,MAAM,CAAClD,OAAO,CAAC;MAE9B;MAAA;MAAA/N,aAAA,GAAAqB,CAAA;MACA,MAAM,IAAI,CAACJ,YAAY,CAACwP,SAAS,CAAC1C,OAAO,CAAC;MAAC;MAAA/N,aAAA,GAAAqB,CAAA;MAE3C,IAAI,CAACN,MAAM,CAACsI,KAAK,CAAC,oBAAoB0E,OAAO,wBAAwB,CAAC;IAExE,CAAC,CAAC,OAAOrK,KAAK,EAAE;MAAA;MAAA1D,aAAA,GAAAqB,CAAA;MACd,IAAI,CAACN,MAAM,CAACoF,IAAI,CAAC,kCAAkC4H,OAAO,KAAKrK,KAAK,YAAYC,KAAK;MAAA;MAAA,CAAA3D,aAAA,GAAAiC,CAAA,WAAGyB,KAAK,CAACE,OAAO;MAAA;MAAA,CAAA5D,aAAA,GAAAiC,CAAA,WAAG4B,MAAM,CAACH,KAAK,CAAC,GAAE,CAAC;IAC1H;EACF;EAEA;;;EAGQ,MAAMwN,oBAAoBA,CAACf,QAAkB;IAAA;IAAAnQ,aAAA,GAAAkC,CAAA;IAAAlC,aAAA,GAAAqB,CAAA;IACnD;IACA,KAAK,MAAM0M,OAAO,IAAIoC,QAAQ,EAAE;MAAA;MAAAnQ,aAAA,GAAAqB,CAAA;MAC9B,IAAI;QAAA;QAAArB,aAAA,GAAAqB,CAAA;QACF,MAAM,IAAI,CAACmP,kBAAkB,CAACzC,OAAO,CAAC;MACxC,CAAC,CAAC,OAAOrK,KAAK,EAAE;QAAA;QAAA1D,aAAA,GAAAqB,CAAA;QACd,IAAI,CAACN,MAAM,CAACoF,IAAI,CAAC,2BAA2B4H,OAAO,KAAKrK,KAAK,YAAYC,KAAK;QAAA;QAAA,CAAA3D,aAAA,GAAAiC,CAAA,WAAGyB,KAAK,CAACE,OAAO;QAAA;QAAA,CAAA5D,aAAA,GAAAiC,CAAA,WAAG4B,MAAM,CAACH,KAAK,CAAC,GAAE,CAAC;MACnH;IACF;EACF;EAEA;;;EAGQ,MAAMyN,iBAAiBA,CAAA;IAAA;IAAAnR,aAAA,GAAAkC,CAAA;IAAAlC,aAAA,GAAAqB,CAAA;IAC7B,IAAI,CAACN,MAAM,CAACyB,IAAI,CAAC,iCAAiC,IAAI,CAACV,SAAS,CAAC+N,IAAI,SAAS,CAAC;IAE/E,MAAMuB,WAAW;IAAA;IAAA,CAAApR,aAAA,GAAAqB,CAAA,SAAGwI,KAAK,CAAC4F,IAAI,CAAC,IAAI,CAAC3N,SAAS,CAACuP,IAAI,EAAE,CAAC;IAErD;IAAA;IAAArR,aAAA,GAAAqB,CAAA;IACA,KAAK,MAAM0M,OAAO,IAAIqD,WAAW,EAAE;MAAA;MAAApR,aAAA,GAAAqB,CAAA;MACjC,IAAI;QAAA;QAAArB,aAAA,GAAAqB,CAAA;QACF,MAAM,IAAI,CAACmP,kBAAkB,CAACzC,OAAO,CAAC;MACxC,CAAC,CAAC,OAAOrK,KAAK,EAAE;QAAA;QAAA1D,aAAA,GAAAqB,CAAA;QACd,IAAI,CAACN,MAAM,CAACoF,IAAI,CAAC,kCAAkC4H,OAAO,qBAAqBrK,KAAK,YAAYC,KAAK;QAAA;QAAA,CAAA3D,aAAA,GAAAiC,CAAA,WAAGyB,KAAK,CAACE,OAAO;QAAA;QAAA,CAAA5D,aAAA,GAAAiC,CAAA,WAAG4B,MAAM,CAACH,KAAK,CAAC,GAAE,CAAC;MAC1I;IACF;IAEA;IAAA;IAAA1D,aAAA,GAAAqB,CAAA;IACA,IAAI,CAACS,SAAS,CAACwP,KAAK,EAAE;IAAC;IAAAtR,aAAA,GAAAqB,CAAA;IACvB,IAAI,CAACU,eAAe,CAACuP,KAAK,EAAE;IAAC;IAAAtR,aAAA,GAAAqB,CAAA;IAE7B,IAAI,CAACN,MAAM,CAACyB,IAAI,CAAC,8BAA8B,CAAC;EAClD;EAEA;;;EAGA+O,iBAAiBA,CAAA;IAAA;IAAAvR,aAAA,GAAAkC,CAAA;IAQf,MAAMsP,MAAM;IAAA;IAAA,CAAAxR,aAAA,GAAAqB,CAAA,SAAGwI,KAAK,CAAC4F,IAAI,CAAC,IAAI,CAAC3N,SAAS,CAAC8O,MAAM,EAAE,CAAC;IAClD,MAAMa,WAAW;IAAA;IAAA,CAAAzR,aAAA,GAAAqB,CAAA,SAAGmQ,MAAM,CAACrI,MAAM;IAAC;IAAAnJ,aAAA,GAAAqB,CAAA;IAElC,IAAIoQ,WAAW,KAAK,CAAC,EAAE;MAAA;MAAAzR,aAAA,GAAAiC,CAAA;MAAAjC,aAAA,GAAAqB,CAAA;MACrB,OAAO;QACLoQ,WAAW,EAAE,CAAC;QACd3C,eAAe,EAAE,CAAC;QAClB4C,UAAU,EAAE,CAAC;QACbC,YAAY,EAAE,CAAC;QACfC,mBAAmB,EAAE,CAAC;QACtBC,SAAS,EAAE;OACZ;IACH,CAAC;IAAA;IAAA;MAAA7R,aAAA,GAAAiC,CAAA;IAAA;IAED,MAAM6M,eAAe;IAAA;IAAA,CAAA9O,aAAA,GAAAqB,CAAA,SAAGmQ,MAAM,CAAC/G,MAAM,CAACoG,CAAC,IAAI;MAAA;MAAA7Q,aAAA,GAAAkC,CAAA;MAAAlC,aAAA,GAAAqB,CAAA;MAAA,OAAAwP,CAAC,CAACvM,MAAM,KAAK,WAAW;IAAX,CAAW,CAAC,CAAC6E,MAAM;IAC3E,MAAMuI,UAAU;IAAA;IAAA,CAAA1R,aAAA,GAAAqB,CAAA,SAAGmQ,MAAM,CAAC/G,MAAM,CAACoG,CAAC,IAAI;MAAA;MAAA7Q,aAAA,GAAAkC,CAAA;MAAAlC,aAAA,GAAAqB,CAAA;MAAA,OAAAwP,CAAC,CAACvM,MAAM,KAAK,MAAM;IAAN,CAAM,CAAC,CAAC6E,MAAM;IACjE,MAAMwI,YAAY;IAAA;IAAA,CAAA3R,aAAA,GAAAqB,CAAA,SAAGmQ,MAAM,CAACM,MAAM,CAAC,CAACC,GAAG,EAAElB,CAAC,KAAK;MAAA;MAAA7Q,aAAA,GAAAkC,CAAA;MAAAlC,aAAA,GAAAqB,CAAA;MAAA,OAAA0Q,GAAG,GAAGlB,CAAC,CAACZ,UAAU;IAAV,CAAU,EAAE,CAAC,CAAC,GAAGwB,WAAW;IACnF,MAAMG,mBAAmB;IAAA;IAAA,CAAA5R,aAAA,GAAAqB,CAAA,SAAG,IAAI,CAACU,eAAe,CAAC8N,IAAI;IAErD;IACA,MAAMvC,YAAY;IAAA;IAAA,CAAAtN,aAAA,GAAAqB,CAAA,SAAGmQ,MAAM,CAAC/G,MAAM,CAACoG,CAAC,IAAI;MAAA;MAAA7Q,aAAA,GAAAkC,CAAA;MAAAlC,aAAA,GAAAqB,CAAA;MAAA,OAAAwP,CAAC,CAACZ,UAAU,GAAG,CAAC;IAAD,CAAC,CAAC,CAAC9G,MAAM;IAChE,MAAM0I,SAAS;IAAA;IAAA,CAAA7R,aAAA,GAAAqB,CAAA,SAAGoQ,WAAW,GAAG,CAAC;IAAA;IAAA,CAAAzR,aAAA,GAAAiC,CAAA,WAAGqL,YAAY,GAAGmE,WAAW;IAAA;IAAA,CAAAzR,aAAA,GAAAiC,CAAA,WAAG,CAAC;IAAC;IAAAjC,aAAA,GAAAqB,CAAA;IAEnE,OAAO;MACLoQ,WAAW;MACX3C,eAAe;MACf4C,UAAU;MACVC,YAAY;MACZC,mBAAmB;MACnBC;KACD;EACH;EAEA;;;EAGA,MAAM3F,kBAAkBA,CAACwB,SAAiB,EAAEsE,QAAiB;IAAA;IAAAhS,aAAA,GAAAkC,CAAA;IAC3D,IAAI+J,OAAO;IAAA;IAAA,CAAAjM,aAAA,GAAAqB,CAAA,SAAG,EAAE;IAChB,MAAM4Q,aAAa;IAAA;IAAA,CAAAjS,aAAA,GAAAqB,CAAA,SAAG,CAAC,YAAY,EAAE,SAAS,EAAE,cAAc,CAAC;IAAC;IAAArB,aAAA,GAAAqB,CAAA;IAEhE,KAAK,MAAM6Q,IAAI,IAAID,aAAa,EAAE;MAAA;MAAAjS,aAAA,GAAAqB,CAAA;MAChC,IAAI;QAAA;QAAArB,aAAA,GAAAqB,CAAA;QACF4K,OAAO,IAAI,OAAM7L,QAAQ,CAACD,IAAI,CAAC,IAAI,CAACqB,iBAAiB,EAAE0Q,IAAI,CAAC,EAAE,MAAM,CAAC,IAAG,aAAa;MACvF,CAAC,CAAC,OAAOxO,KAAK,EAAE;QAAA;QAAA1D,aAAA,GAAAqB,CAAA;QACd,IAAI,CAACN,MAAM,CAACoF,IAAI,CAAC,gCAAgC+L,IAAI,KAAKxO,KAAK,YAAYC,KAAK;QAAA;QAAA,CAAA3D,aAAA,GAAAiC,CAAA,WAAGyB,KAAK,CAACE,OAAO;QAAA;QAAA,CAAA5D,aAAA,GAAAiC,CAAA,WAAG4B,MAAM,CAACH,KAAK,CAAC,GAAE,CAAC;MACrH;IACF;IAAC;IAAA1D,aAAA,GAAAqB,CAAA;IAED,OAAO,2BAAArB,aAAA,GAAAiC,CAAA,WAAAgK,OAAO;IAAA;IAAA,CAAAjM,aAAA,GAAAiC,CAAA,WAAI,gCAAgC;EACpD;EAEA;;;EAGQ,MAAMK,sBAAsBA,CAAA;IAAA;IAAAtC,aAAA,GAAAkC,CAAA;IAAAlC,aAAA,GAAAqB,CAAA;IAClC,IAAI,CAAC,IAAI,CAACO,uBAAuB,EAAE;MAAA;MAAA5B,aAAA,GAAAiC,CAAA;MAAAjC,aAAA,GAAAqB,CAAA;MACjC,IAAI;QAAA;QAAArB,aAAA,GAAAqB,CAAA;QACF,MAAMZ,0BAA0B,EAAE;QAAC;QAAAT,aAAA,GAAAqB,CAAA;QACnC,IAAI,CAACO,uBAAuB,GAAG,IAAI;QAAC;QAAA5B,aAAA,GAAAqB,CAAA;QACpC,IAAI,CAACN,MAAM,CAACyB,IAAI,CAAC,8CAA8C,CAAC;QAEhE;QAAA;QAAAxC,aAAA,GAAAqB,CAAA;QACA,IAAI,CAAC8Q,oBAAoB,EAAE;MAC7B,CAAC,CAAC,OAAOzO,KAAK,EAAE;QAAA;QAAA1D,aAAA,GAAAqB,CAAA;QACd,IAAI,CAACN,MAAM,CAAC2C,KAAK,CAAC,qCAAqC,EAAEA,KAAK,CAAC;MACjE;IACF,CAAC;IAAA;IAAA;MAAA1D,aAAA,GAAAiC,CAAA;IAAA;EACH;EAEA;;;EAGQkQ,oBAAoBA,CAAA;IAAA;IAAAnS,aAAA,GAAAkC,CAAA;IAAAlC,aAAA,GAAAqB,CAAA;IAC1B;IACAb,kBAAkB,CAAC4R,QAAQ,CAAC;MAC1B9K,EAAE,EAAE,sBAAsB;MAC1Ba,IAAI,EAAE,gBAAgB;MACtBkK,OAAO,EAAE,MAAAA,CAAOC,OAAO,EAAErG,OAAO,KAAI;QAAA;QAAAjM,aAAA,GAAAkC,CAAA;QAAAlC,aAAA,GAAAqB,CAAA;QAClC,IAAI,CAACN,MAAM,CAACyB,IAAI,CAAC,sCAAsC,CAAC;QAAC;QAAAxC,aAAA,GAAAqB,CAAA;QACzD,OAAO;UAAEkR,QAAQ,EAAE;QAAI,CAAE;MAC3B,CAAC;MACD1L,QAAQ,EAAE;KACX,CAAC;IAAC;IAAA7G,aAAA,GAAAqB,CAAA;IAEHb,kBAAkB,CAAC4R,QAAQ,CAAC;MAC1B9K,EAAE,EAAE,wBAAwB;MAC5Ba,IAAI,EAAE,eAAe;MACrBkK,OAAO,EAAE,MAAAA,CAAOC,OAAO,EAAErG,OAAO,KAAI;QAAA;QAAAjM,aAAA,GAAAkC,CAAA;QAAAlC,aAAA,GAAAqB,CAAA;QAClC,IAAI,CAACN,MAAM,CAACyB,IAAI,CAAC,wCAAwC,CAAC;QAAC;QAAAxC,aAAA,GAAAqB,CAAA;QAC3D,OAAO;UAAEkR,QAAQ,EAAE;QAAI,CAAE;MAC3B,CAAC;MACD1L,QAAQ,EAAE;KACX,CAAC;IAAC;IAAA7G,aAAA,GAAAqB,CAAA;IAEH,IAAI,CAACN,MAAM,CAACyB,IAAI,CAAC,mCAAmC,CAAC;EACvD;EAEA;;;EAGQD,kBAAkBA,CAAA;IAAA;IAAAvC,aAAA,GAAAkC,CAAA;IAAAlC,aAAA,GAAAqB,CAAA;IACxB,IAAI,CAACP,QAAQ,CAAC0R,EAAE,CAAC,sBAAsB,EAAE,IAAI,CAACC,iBAAiB,CAACC,IAAI,CAAC,IAAI,CAAC,CAAC;IAAC;IAAA1S,aAAA,GAAAqB,CAAA;IAC5E,IAAI,CAACP,QAAQ,CAAC0R,EAAE,CAAC,wBAAwB,EAAE,IAAI,CAACG,mBAAmB,CAACD,IAAI,CAAC,IAAI,CAAC,CAAC;IAAC;IAAA1S,aAAA,GAAAqB,CAAA;IAChF,IAAI,CAACP,QAAQ,CAAC0R,EAAE,CAAC,0BAA0B,EAAE,IAAI,CAACI,qBAAqB,CAACF,IAAI,CAAC,IAAI,CAAC,CAAC;EACrF;EAEA;;;EAGQ,MAAMD,iBAAiBA,CAACI,IAAS;IAAA;IAAA7S,aAAA,GAAAkC,CAAA;IAAAlC,aAAA,GAAAqB,CAAA;IACvC,IAAI,CAACN,MAAM,CAACyB,IAAI,CAAC,uBAAuB0H,IAAI,CAACC,SAAS,CAAC0I,IAAI,CAAC,EAAE,CAAC;EACjE;EAEQ,MAAMF,mBAAmBA,CAACE,IAAS;IAAA;IAAA7S,aAAA,GAAAkC,CAAA;IAAAlC,aAAA,GAAAqB,CAAA;IACzC,IAAI,CAACN,MAAM,CAACyB,IAAI,CAAC,yBAAyB0H,IAAI,CAACC,SAAS,CAAC0I,IAAI,CAAC,EAAE,CAAC;EACnE;EAEQ,MAAMD,qBAAqBA,CAACC,IAAS;IAAA;IAAA7S,aAAA,GAAAkC,CAAA;IAAAlC,aAAA,GAAAqB,CAAA;IAC3C,IAAI,CAACN,MAAM,CAACyB,IAAI,CAAC,2BAA2B0H,IAAI,CAACC,SAAS,CAAC0I,IAAI,CAAC,EAAE,CAAC;EACrE;EAEA;;;EAGQ,MAAMxL,qBAAqBA,CAACgD,MAAc,EAAEyI,SAAA;EAAA;EAAA,CAAA9S,aAAA,GAAAiC,CAAA,WAAoB,MAAM;IAAA;IAAAjC,aAAA,GAAAkC,CAAA;IAAAlC,aAAA,GAAAqB,CAAA;IAC5E,OAAO,IAAI0R,OAAO,CAAC,CAACC,OAAO,EAAEC,MAAM,KAAI;MAAA;MAAAjT,aAAA,GAAAkC,CAAA;MACrC,MAAMgR,OAAO;MAAA;MAAA,CAAAlT,aAAA,GAAAqB,CAAA,SAAG8R,UAAU,CAAC,MAAK;QAAA;QAAAnT,aAAA,GAAAkC,CAAA;QAAAlC,aAAA,GAAAqB,CAAA;QAC9B4R,MAAM,CAAC,IAAItP,KAAK,CAAC,iBAAiB0G,MAAM,EAAE,CAAC,CAAC;MAC9C,CAAC,EAAEyI,SAAS,CAAC;MAEb,MAAMM,aAAa;MAAA;MAAA,CAAApT,aAAA,GAAAqB,CAAA,SAAGgS,WAAW,CAAC,YAAW;QAAA;QAAArT,aAAA,GAAAkC,CAAA;QAAAlC,aAAA,GAAAqB,CAAA;QAC3C,IAAI;UACF,MAAM6F,IAAI;UAAA;UAAA,CAAAlH,aAAA,GAAAqB,CAAA,SAAG,MAAM,IAAI,CAACI,QAAS,CAAC6R,OAAO,CAACjJ,MAAM,CAAC;UAAC;UAAArK,aAAA,GAAAqB,CAAA;UAElD,IAAI6F,IAAI,CAAC5C,MAAM,KAAK,WAAW,EAAE;YAAA;YAAAtE,aAAA,GAAAiC,CAAA;YAAAjC,aAAA,GAAAqB,CAAA;YAC/BkS,YAAY,CAACL,OAAO,CAAC;YAAC;YAAAlT,aAAA,GAAAqB,CAAA;YACtBmS,aAAa,CAACJ,aAAa,CAAC;YAAC;YAAApT,aAAA,GAAAqB,CAAA;YAC7B2R,OAAO,CAAC9L,IAAI,CAACE,MAAM;YAAA;YAAA,CAAApH,aAAA,GAAAiC,CAAA,WAAGiI,IAAI,CAACuJ,KAAK,CAACvM,IAAI,CAACE,MAAM,CAAC;YAAA;YAAA,CAAApH,aAAA,GAAAiC,CAAA,WAAG,EAAE,EAAC;UACrD,CAAC,MAAM;YAAA;YAAAjC,aAAA,GAAAiC,CAAA;YAAAjC,aAAA,GAAAqB,CAAA;YAAA,IAAI6F,IAAI,CAAC5C,MAAM,KAAK,QAAQ,EAAE;cAAA;cAAAtE,aAAA,GAAAiC,CAAA;cAAAjC,aAAA,GAAAqB,CAAA;cACnCkS,YAAY,CAACL,OAAO,CAAC;cAAC;cAAAlT,aAAA,GAAAqB,CAAA;cACtBmS,aAAa,CAACJ,aAAa,CAAC;cAAC;cAAApT,aAAA,GAAAqB,CAAA;cAC7B4R,MAAM,CAAC,IAAItP,KAAK,CAAC;cAAgB;cAAA,CAAA3D,aAAA,GAAAiC,CAAA,YAAAiF,IAAI,CAACxD,KAAK;cAAA;cAAA,CAAA1D,aAAA,GAAAiC,CAAA,YAAI,eAAe,GAAE,CAAC,CAAC;YACpE,CAAC;YAAA;YAAA;cAAAjC,aAAA,GAAAiC,CAAA;YAAA;UAAD;QACF,CAAC,CAAC,OAAOyB,KAAK,EAAE;UAAA;UAAA1D,aAAA,GAAAqB,CAAA;UACdkS,YAAY,CAACL,OAAO,CAAC;UAAC;UAAAlT,aAAA,GAAAqB,CAAA;UACtBmS,aAAa,CAACJ,aAAa,CAAC;UAAC;UAAApT,aAAA,GAAAqB,CAAA;UAC7B4R,MAAM,CAACvP,KAAK,CAAC;QACf;MACF,CAAC,EAAE,IAAI,CAAC;IACV,CAAC,CAAC;EACJ;EAEA;;;EAGQ,MAAMiI,sBAAsBA,CAACH,UAAkB,EAAEsH,SAAiB;IAAA;IAAA9S,aAAA,GAAAkC,CAAA;IAAAlC,aAAA,GAAAqB,CAAA;IACxE,OAAO,IAAI0R,OAAO,CAAC,CAACC,OAAO,EAAEC,MAAM,KAAI;MAAA;MAAAjT,aAAA,GAAAkC,CAAA;MACrC,MAAMgR,OAAO;MAAA;MAAA,CAAAlT,aAAA,GAAAqB,CAAA,SAAG8R,UAAU,CAAC,MAAK;QAAA;QAAAnT,aAAA,GAAAkC,CAAA;QAAAlC,aAAA,GAAAqB,CAAA;QAC9B4R,MAAM,CAAC,IAAItP,KAAK,CAAC,kCAAkC6H,UAAU,EAAE,CAAC,CAAC;MACnE,CAAC,EAAEsH,SAAS,CAAC;MAEb,MAAMM,aAAa;MAAA;MAAA,CAAApT,aAAA,GAAAqB,CAAA,SAAGgS,WAAW,CAAC,YAAW;QAAA;QAAArT,aAAA,GAAAkC,CAAA;QAAAlC,aAAA,GAAAqB,CAAA;QAC3C,IAAI;UACF,MAAMiD,MAAM;UAAA;UAAA,CAAAtE,aAAA,GAAAqB,CAAA,SAAG,MAAM,IAAI,CAACK,eAAgB,CAACgS,iBAAiB,CAAClI,UAAU,CAAC;UAAC;UAAAxL,aAAA,GAAAqB,CAAA;UAEzE,IAAIiD,MAAM,CAACA,MAAM,KAAK,UAAU,EAAE;YAAA;YAAAtE,aAAA,GAAAiC,CAAA;YAAAjC,aAAA,GAAAqB,CAAA;YAChCkS,YAAY,CAACL,OAAO,CAAC;YAAC;YAAAlT,aAAA,GAAAqB,CAAA;YACtBmS,aAAa,CAACJ,aAAa,CAAC;YAAC;YAAApT,aAAA,GAAAqB,CAAA;YAC7B2R,OAAO,CAAC;cACNpH,QAAQ,EAAE,IAAI;cACdE,UAAU,EAAExH,MAAM,CAACqP,YAAY;cAC/B9H,MAAM,EAAE;aACT,CAAC;UACJ,CAAC,MAAM;YAAA;YAAA7L,aAAA,GAAAiC,CAAA;YAAAjC,aAAA,GAAAqB,CAAA;YAAA,IAAIiD,MAAM,CAACA,MAAM,KAAK,QAAQ,EAAE;cAAA;cAAAtE,aAAA,GAAAiC,CAAA;cAAAjC,aAAA,GAAAqB,CAAA;cACrCkS,YAAY,CAACL,OAAO,CAAC;cAAC;cAAAlT,aAAA,GAAAqB,CAAA;cACtBmS,aAAa,CAACJ,aAAa,CAAC;cAAC;cAAApT,aAAA,GAAAqB,CAAA;cAC7B2R,OAAO,CAAC;gBACNpH,QAAQ,EAAE,KAAK;gBACfE,UAAU,EAAExH,MAAM,CAACqP,YAAY;gBAC/B9H,MAAM,EAAE;eACT,CAAC;YACJ,CAAC;YAAA;YAAA;cAAA7L,aAAA,GAAAiC,CAAA;YAAA;UAAD;QACF,CAAC,CAAC,OAAOyB,KAAK,EAAE;UAAA;UAAA1D,aAAA,GAAAqB,CAAA;UACdkS,YAAY,CAACL,OAAO,CAAC;UAAC;UAAAlT,aAAA,GAAAqB,CAAA;UACtBmS,aAAa,CAACJ,aAAa,CAAC;UAAC;UAAApT,aAAA,GAAAqB,CAAA;UAC7B4R,MAAM,CAACvP,KAAK,CAAC;QACf;MACF,CAAC,EAAE,IAAI,CAAC;IACV,CAAC,CAAC;EACJ;EAEA;;;EAGA,MAAMkQ,QAAQA,CAAA;IAAA;IAAA5T,aAAA,GAAAkC,CAAA;IAAAlC,aAAA,GAAAqB,CAAA;IACZ,IAAI,CAACN,MAAM,CAACyB,IAAI,CAAC,oCAAoC,CAAC;IAEtD;IAAA;IAAAxC,aAAA,GAAAqB,CAAA;IACA,KAAK,MAAM,CAAC0C,WAAW,EAAE8P,OAAO,CAAC,IAAI,IAAI,CAAChS,YAAY,EAAE;MAAA;MAAA7B,aAAA,GAAAqB,CAAA;MACtD,MAAMwS,OAAO,CAACC,KAAK,EAAE;MAAC;MAAA9T,aAAA,GAAAqB,CAAA;MACtB,IAAI,CAACN,MAAM,CAACyB,IAAI,CAAC,4BAA4BuB,WAAW,GAAG,CAAC;IAC9D;IAEA;IAAA;IAAA/D,aAAA,GAAAqB,CAAA;IACA,IAAI,IAAI,CAACO,uBAAuB,EAAE;MAAA;MAAA5B,aAAA,GAAAiC,CAAA;MAAAjC,aAAA,GAAAqB,CAAA;MAChC;MACA,IAAI;QAAA;QAAArB,aAAA,GAAAqB,CAAA;QACFb,kBAAkB,CAACuT,UAAU,CAAC,sBAAsB,CAAC;QAAC;QAAA/T,aAAA,GAAAqB,CAAA;QACtDb,kBAAkB,CAACuT,UAAU,CAAC,wBAAwB,CAAC;MACzD,CAAC,CAAC,OAAOrQ,KAAK,EAAE;QAAA;QAAA1D,aAAA,GAAAqB,CAAA;QACd,IAAI,CAACN,MAAM,CAACoF,IAAI,CAAC,qCAAqC,EAAEzC,KAAK,CAAC;MAChE;IACF,CAAC;IAAA;IAAA;MAAA1D,aAAA,GAAAiC,CAAA;IAAA;IAED;IAAAjC,aAAA,GAAAqB,CAAA;IACA,IAAI,IAAI,CAACI,QAAQ,EAAE;MAAA;MAAAzB,aAAA,GAAAiC,CAAA;MAAAjC,aAAA,GAAAqB,CAAA;MACjB,MAAM,IAAI,CAACI,QAAQ,CAACmS,QAAQ,EAAE;MAAC;MAAA5T,aAAA,GAAAqB,CAAA;MAC/B,IAAI,CAACN,MAAM,CAACyB,IAAI,CAAC,6BAA6B,CAAC;IACjD,CAAC;IAAA;IAAA;MAAAxC,aAAA,GAAAiC,CAAA;IAAA;IAED;IAAAjC,aAAA,GAAAqB,CAAA;IACA,MAAM,IAAI,CAAC8P,iBAAiB,EAAE;IAE9B;IAAA;IAAAnR,aAAA,GAAAqB,CAAA;IAEA,IAAI,CAACN,MAAM,CAACyB,IAAI,CAAC,wCAAwC,CAAC;EAC5D","ignoreList":[]}