e2a08c1e1f163f9d676fad20f5b82f5a
/* istanbul ignore next */
function cov_2rctqmnwfx() {
  var path = "/home/mhugo/code/claude-code-flow/src/__tests__/helpers/database-test-helper.ts";
  var hash = "f657326a1da5ced05e7b352d3dca564ac66776ac";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/home/mhugo/code/claude-code-flow/src/__tests__/helpers/database-test-helper.ts",
    statementMap: {
      "0": {
        start: {
          line: 11,
          column: 9
        },
        end: {
          line: 11,
          column: 13
        }
      },
      "1": {
        start: {
          line: 13,
          column: 8
        },
        end: {
          line: 13,
          column: 72
        }
      },
      "2": {
        start: {
          line: 16,
          column: 8
        },
        end: {
          line: 28,
          column: 9
        }
      },
      "3": {
        start: {
          line: 18,
          column: 41
        },
        end: {
          line: 18,
          column: 64
        }
      },
      "4": {
        start: {
          line: 19,
          column: 12
        },
        end: {
          line: 19,
          column: 56
        }
      },
      "5": {
        start: {
          line: 21,
          column: 12
        },
        end: {
          line: 21,
          column: 59
        }
      },
      "6": {
        start: {
          line: 23,
          column: 12
        },
        end: {
          line: 23,
          column: 45
        }
      },
      "7": {
        start: {
          line: 26,
          column: 12
        },
        end: {
          line: 26,
          column: 75
        }
      },
      "8": {
        start: {
          line: 27,
          column: 12
        },
        end: {
          line: 27,
          column: 43
        }
      },
      "9": {
        start: {
          line: 31,
          column: 8
        },
        end: {
          line: 34,
          column: 9
        }
      },
      "10": {
        start: {
          line: 32,
          column: 12
        },
        end: {
          line: 32,
          column: 36
        }
      },
      "11": {
        start: {
          line: 33,
          column: 12
        },
        end: {
          line: 33,
          column: 27
        }
      },
      "12": {
        start: {
          line: 35,
          column: 8
        },
        end: {
          line: 40,
          column: 9
        }
      },
      "13": {
        start: {
          line: 36,
          column: 12
        },
        end: {
          line: 36,
          column: 41
        }
      },
      "14": {
        start: {
          line: 43,
          column: 26
        },
        end: {
          line: 43,
          column: 37
        }
      },
      "15": {
        start: {
          line: 44,
          column: 8
        },
        end: {
          line: 44,
          column: 51
        }
      },
      "16": {
        start: {
          line: 47,
          column: 8
        },
        end: {
          line: 48,
          column: 19
        }
      },
      "17": {
        start: {
          line: 48,
          column: 12
        },
        end: {
          line: 48,
          column: 19
        }
      },
      "18": {
        start: {
          line: 50,
          column: 23
        },
        end: {
          line: 50,
          column: 121
        }
      },
      "19": {
        start: {
          line: 52,
          column: 8
        },
        end: {
          line: 54,
          column: 9
        }
      },
      "20": {
        start: {
          line: 53,
          column: 12
        },
        end: {
          line: 53,
          column: 49
        }
      },
      "21": {
        start: {
          line: 57,
          column: 21
        },
        end: {
          line: 57,
          column: 25
        }
      },
      "22": {
        start: {
          line: 58,
          column: 8
        },
        end: {
          line: 80,
          column: 10
        }
      },
      "23": {
        start: {
          line: 60,
          column: 16
        },
        end: {
          line: 60,
          column: 47
        }
      },
      "24": {
        start: {
          line: 63,
          column: 16
        },
        end: {
          line: 63,
          column: 49
        }
      },
      "25": {
        start: {
          line: 66,
          column: 16
        },
        end: {
          line: 66,
          column: 56
        }
      },
      "26": {
        start: {
          line: 67,
          column: 16
        },
        end: {
          line: 75,
          column: 17
        }
      },
      "27": {
        start: {
          line: 68,
          column: 35
        },
        end: {
          line: 68,
          column: 55
        }
      },
      "28": {
        start: {
          line: 69,
          column: 20
        },
        end: {
          line: 69,
          column: 49
        }
      },
      "29": {
        start: {
          line: 70,
          column: 20
        },
        end: {
          line: 70,
          column: 34
        }
      },
      "30": {
        start: {
          line: 73,
          column: 20
        },
        end: {
          line: 73,
          column: 51
        }
      },
      "31": {
        start: {
          line: 74,
          column: 20
        },
        end: {
          line: 74,
          column: 32
        }
      },
      "32": {
        start: {
          line: 78,
          column: 16
        },
        end: {
          line: 78,
          column: 38
        }
      },
      "33": {
        start: {
          line: 83,
          column: 27
        },
        end: {
          line: 83,
          column: 72
        }
      },
      "34": {
        start: {
          line: 83,
          column: 60
        },
        end: {
          line: 83,
          column: 71
        }
      },
      "35": {
        start: {
          line: 84,
          column: 8
        },
        end: {
          line: 88,
          column: 9
        }
      },
      "36": {
        start: {
          line: 85,
          column: 12
        },
        end: {
          line: 87,
          column: 13
        }
      },
      "37": {
        start: {
          line: 86,
          column: 16
        },
        end: {
          line: 86,
          column: 46
        }
      },
      "38": {
        start: {
          line: 91,
          column: 8
        },
        end: {
          line: 92,
          column: 19
        }
      },
      "39": {
        start: {
          line: 92,
          column: 12
        },
        end: {
          line: 92,
          column: 19
        }
      },
      "40": {
        start: {
          line: 93,
          column: 24
        },
        end: {
          line: 93,
          column: 44
        }
      },
      "41": {
        start: {
          line: 94,
          column: 29
        },
        end: {
          line: 94,
          column: 62
        }
      },
      "42": {
        start: {
          line: 94,
          column: 47
        },
        end: {
          line: 94,
          column: 50
        }
      },
      "43": {
        start: {
          line: 95,
          column: 20
        },
        end: {
          line: 95,
          column: 91
        }
      },
      "44": {
        start: {
          line: 96,
          column: 8
        },
        end: {
          line: 99,
          column: 9
        }
      },
      "45": {
        start: {
          line: 97,
          column: 27
        },
        end: {
          line: 97,
          column: 55
        }
      },
      "46": {
        start: {
          line: 97,
          column: 46
        },
        end: {
          line: 97,
          column: 54
        }
      },
      "47": {
        start: {
          line: 98,
          column: 12
        },
        end: {
          line: 98,
          column: 44
        }
      },
      "48": {
        start: {
          line: 102,
          column: 8
        },
        end: {
          line: 102,
          column: 51
        }
      },
      "49": {
        start: {
          line: 103,
          column: 8
        },
        end: {
          line: 103,
          column: 80
        }
      },
      "50": {
        start: {
          line: 107,
          column: 8
        },
        end: {
          line: 113,
          column: 7
        }
      },
      "51": {
        start: {
          line: 114,
          column: 8
        },
        end: {
          line: 122,
          column: 9
        }
      },
      "52": {
        start: {
          line: 115,
          column: 34
        },
        end: {
          line: 115,
          column: 82
        }
      },
      "53": {
        start: {
          line: 117,
          column: 29
        },
        end: {
          line: 117,
          column: 106
        }
      },
      "54": {
        start: {
          line: 118,
          column: 12
        },
        end: {
          line: 121,
          column: 13
        }
      },
      "55": {
        start: {
          line: 119,
          column: 16
        },
        end: {
          line: 119,
          column: 46
        }
      },
      "56": {
        start: {
          line: 120,
          column: 16
        },
        end: {
          line: 120,
          column: 96
        }
      },
      "57": {
        start: {
          line: 125,
          column: 8
        },
        end: {
          line: 126,
          column: 56
        }
      },
      "58": {
        start: {
          line: 126,
          column: 12
        },
        end: {
          line: 126,
          column: 56
        }
      },
      "59": {
        start: {
          line: 127,
          column: 8
        },
        end: {
          line: 134,
          column: 11
        }
      },
      "60": {
        start: {
          line: 128,
          column: 12
        },
        end: {
          line: 133,
          column: 15
        }
      },
      "61": {
        start: {
          line: 129,
          column: 16
        },
        end: {
          line: 132,
          column: 40
        }
      },
      "62": {
        start: {
          line: 130,
          column: 20
        },
        end: {
          line: 130,
          column: 32
        }
      },
      "63": {
        start: {
          line: 132,
          column: 20
        },
        end: {
          line: 132,
          column: 40
        }
      },
      "64": {
        start: {
          line: 137,
          column: 8
        },
        end: {
          line: 138,
          column: 56
        }
      },
      "65": {
        start: {
          line: 138,
          column: 12
        },
        end: {
          line: 138,
          column: 56
        }
      },
      "66": {
        start: {
          line: 139,
          column: 8
        },
        end: {
          line: 146,
          column: 11
        }
      },
      "67": {
        start: {
          line: 140,
          column: 12
        },
        end: {
          line: 145,
          column: 15
        }
      },
      "68": {
        start: {
          line: 141,
          column: 16
        },
        end: {
          line: 144,
          column: 30
        }
      },
      "69": {
        start: {
          line: 142,
          column: 20
        },
        end: {
          line: 142,
          column: 32
        }
      },
      "70": {
        start: {
          line: 144,
          column: 20
        },
        end: {
          line: 144,
          column: 30
        }
      },
      "71": {
        start: {
          line: 149,
          column: 23
        },
        end: {
          line: 178,
          column: 5
        }
      },
      "72": {
        start: {
          line: 179,
          column: 8
        },
        end: {
          line: 179,
          column: 40
        }
      },
      "73": {
        start: {
          line: 183,
          column: 14
        },
        end: {
          line: 183,
          column: 23
        }
      },
      "74": {
        start: {
          line: 184,
          column: 16
        },
        end: {
          line: 184,
          column: 25
        }
      },
      "75": {
        start: {
          line: 186,
          column: 8
        },
        end: {
          line: 186,
          column: 29
        }
      },
      "76": {
        start: {
          line: 187,
          column: 8
        },
        end: {
          line: 187,
          column: 31
        }
      },
      "77": {
        start: {
          line: 188,
          column: 8
        },
        end: {
          line: 188,
          column: 35
        }
      },
      "78": {
        start: {
          line: 191,
          column: 8
        },
        end: {
          line: 191,
          column: 29
        }
      },
      "79": {
        start: {
          line: 192,
          column: 8
        },
        end: {
          line: 192,
          column: 31
        }
      },
      "80": {
        start: {
          line: 195,
          column: 8
        },
        end: {
          line: 195,
          column: 53
        }
      },
      "81": {
        start: {
          line: 198,
          column: 8
        },
        end: {
          line: 198,
          column: 29
        }
      },
      "82": {
        start: {
          line: 199,
          column: 8
        },
        end: {
          line: 199,
          column: 31
        }
      },
      "83": {
        start: {
          line: 200,
          column: 8
        },
        end: {
          line: 200,
          column: 35
        }
      },
      "84": {
        start: {
          line: 203,
          column: 21
        },
        end: {
          line: 203,
          column: 25
        }
      },
      "85": {
        start: {
          line: 204,
          column: 8
        },
        end: {
          line: 218,
          column: 10
        }
      },
      "86": {
        start: {
          line: 206,
          column: 16
        },
        end: {
          line: 206,
          column: 47
        }
      },
      "87": {
        start: {
          line: 209,
          column: 16
        },
        end: {
          line: 209,
          column: 49
        }
      },
      "88": {
        start: {
          line: 213,
          column: 16
        },
        end: {
          line: 213,
          column: 38
        }
      },
      "89": {
        start: {
          line: 216,
          column: 16
        },
        end: {
          line: 216,
          column: 38
        }
      },
      "90": {
        start: {
          line: 222,
          column: 29
        },
        end: {
          line: 222,
          column: 88
        }
      },
      "91": {
        start: {
          line: 223,
          column: 8
        },
        end: {
          line: 231,
          column: 9
        }
      },
      "92": {
        start: {
          line: 224,
          column: 12
        },
        end: {
          line: 230,
          column: 13
        }
      },
      "93": {
        start: {
          line: 225,
          column: 34
        },
        end: {
          line: 225,
          column: 92
        }
      },
      "94": {
        start: {
          line: 226,
          column: 16
        },
        end: {
          line: 229,
          column: 17
        }
      },
      "95": {
        start: {
          line: 227,
          column: 20
        },
        end: {
          line: 227,
          column: 59
        }
      },
      "96": {
        start: {
          line: 228,
          column: 20
        },
        end: {
          line: 228,
          column: 53
        }
      },
      "97": {
        start: {
          line: 234,
          column: 8
        },
        end: {
          line: 237,
          column: 9
        }
      },
      "98": {
        start: {
          line: 235,
          column: 12
        },
        end: {
          line: 235,
          column: 47
        }
      },
      "99": {
        start: {
          line: 236,
          column: 12
        },
        end: {
          line: 236,
          column: 41
        }
      },
      "100": {
        start: {
          line: 238,
          column: 26
        },
        end: {
          line: 238,
          column: 49
        }
      },
      "101": {
        start: {
          line: 239,
          column: 8
        },
        end: {
          line: 243,
          column: 9
        }
      },
      "102": {
        start: {
          line: 240,
          column: 23
        },
        end: {
          line: 240,
          column: 44
        }
      },
      "103": {
        start: {
          line: 241,
          column: 27
        },
        end: {
          line: 241,
          column: 79
        }
      },
      "104": {
        start: {
          line: 242,
          column: 12
        },
        end: {
          line: 242,
          column: 49
        }
      },
      "105": {
        start: {
          line: 246,
          column: 8
        },
        end: {
          line: 249,
          column: 9
        }
      },
      "106": {
        start: {
          line: 247,
          column: 12
        },
        end: {
          line: 247,
          column: 44
        }
      },
      "107": {
        start: {
          line: 248,
          column: 12
        },
        end: {
          line: 248,
          column: 41
        }
      },
      "108": {
        start: {
          line: 253,
          column: 8
        },
        end: {
          line: 255,
          column: 9
        }
      },
      "109": {
        start: {
          line: 254,
          column: 12
        },
        end: {
          line: 254,
          column: 42
        }
      },
      "110": {
        start: {
          line: 259,
          column: 25
        },
        end: {
          line: 259,
          column: 49
        }
      },
      "111": {
        start: {
          line: 260,
          column: 8
        },
        end: {
          line: 262,
          column: 9
        }
      },
      "112": {
        start: {
          line: 261,
          column: 12
        },
        end: {
          line: 261,
          column: 50
        }
      },
      "113": {
        start: {
          line: 263,
          column: 8
        },
        end: {
          line: 263,
          column: 18
        }
      },
      "114": {
        start: {
          line: 266,
          column: 25
        },
        end: {
          line: 266,
          column: 49
        }
      },
      "115": {
        start: {
          line: 267,
          column: 8
        },
        end: {
          line: 278,
          column: 9
        }
      },
      "116": {
        start: {
          line: 268,
          column: 12
        },
        end: {
          line: 268,
          column: 43
        }
      },
      "117": {
        start: {
          line: 270,
          column: 13
        },
        end: {
          line: 278,
          column: 9
        }
      },
      "118": {
        start: {
          line: 271,
          column: 12
        },
        end: {
          line: 271,
          column: 43
        }
      },
      "119": {
        start: {
          line: 273,
          column: 13
        },
        end: {
          line: 278,
          column: 9
        }
      },
      "120": {
        start: {
          line: 274,
          column: 12
        },
        end: {
          line: 274,
          column: 43
        }
      },
      "121": {
        start: {
          line: 276,
          column: 13
        },
        end: {
          line: 278,
          column: 9
        }
      },
      "122": {
        start: {
          line: 277,
          column: 12
        },
        end: {
          line: 277,
          column: 40
        }
      },
      "123": {
        start: {
          line: 282,
          column: 27
        },
        end: {
          line: 282,
          column: 53
        }
      },
      "124": {
        start: {
          line: 283,
          column: 8
        },
        end: {
          line: 284,
          column: 22
        }
      },
      "125": {
        start: {
          line: 284,
          column: 12
        },
        end: {
          line: 284,
          column: 22
        }
      },
      "126": {
        start: {
          line: 285,
          column: 26
        },
        end: {
          line: 285,
          column: 39
        }
      },
      "127": {
        start: {
          line: 286,
          column: 26
        },
        end: {
          line: 286,
          column: 53
        }
      },
      "128": {
        start: {
          line: 287,
          column: 8
        },
        end: {
          line: 288,
          column: 22
        }
      },
      "129": {
        start: {
          line: 288,
          column: 12
        },
        end: {
          line: 288,
          column: 22
        }
      },
      "130": {
        start: {
          line: 289,
          column: 8
        },
        end: {
          line: 289,
          column: 46
        }
      },
      "131": {
        start: {
          line: 292,
          column: 27
        },
        end: {
          line: 292,
          column: 60
        }
      },
      "132": {
        start: {
          line: 293,
          column: 8
        },
        end: {
          line: 294,
          column: 19
        }
      },
      "133": {
        start: {
          line: 294,
          column: 12
        },
        end: {
          line: 294,
          column: 19
        }
      },
      "134": {
        start: {
          line: 295,
          column: 26
        },
        end: {
          line: 295,
          column: 39
        }
      },
      "135": {
        start: {
          line: 296,
          column: 8
        },
        end: {
          line: 299,
          column: 9
        }
      },
      "136": {
        start: {
          line: 297,
          column: 12
        },
        end: {
          line: 297,
          column: 51
        }
      },
      "137": {
        start: {
          line: 298,
          column: 12
        },
        end: {
          line: 298,
          column: 45
        }
      },
      "138": {
        start: {
          line: 300,
          column: 26
        },
        end: {
          line: 300,
          column: 53
        }
      },
      "139": {
        start: {
          line: 301,
          column: 19
        },
        end: {
          line: 301,
          column: 44
        }
      },
      "140": {
        start: {
          line: 303,
          column: 29
        },
        end: {
          line: 303,
          column: 53
        }
      },
      "141": {
        start: {
          line: 304,
          column: 8
        },
        end: {
          line: 314,
          column: 9
        }
      },
      "142": {
        start: {
          line: 305,
          column: 28
        },
        end: {
          line: 305,
          column: 77
        }
      },
      "143": {
        start: {
          line: 305,
          column: 66
        },
        end: {
          line: 305,
          column: 76
        }
      },
      "144": {
        start: {
          line: 306,
          column: 27
        },
        end: {
          line: 306,
          column: 33
        }
      },
      "145": {
        start: {
          line: 307,
          column: 12
        },
        end: {
          line: 311,
          column: 15
        }
      },
      "146": {
        start: {
          line: 308,
          column: 16
        },
        end: {
          line: 310,
          column: 17
        }
      },
      "147": {
        start: {
          line: 309,
          column: 20
        },
        end: {
          line: 309,
          column: 48
        }
      },
      "148": {
        start: {
          line: 312,
          column: 12
        },
        end: {
          line: 312,
          column: 57
        }
      },
      "149": {
        start: {
          line: 313,
          column: 12
        },
        end: {
          line: 313,
          column: 49
        }
      },
      "150": {
        start: {
          line: 318,
          column: 27
        },
        end: {
          line: 318,
          column: 55
        }
      },
      "151": {
        start: {
          line: 319,
          column: 8
        },
        end: {
          line: 320,
          column: 19
        }
      },
      "152": {
        start: {
          line: 320,
          column: 12
        },
        end: {
          line: 320,
          column: 19
        }
      },
      "153": {
        start: {
          line: 321,
          column: 26
        },
        end: {
          line: 321,
          column: 39
        }
      },
      "154": {
        start: {
          line: 322,
          column: 26
        },
        end: {
          line: 322,
          column: 53
        }
      },
      "155": {
        start: {
          line: 323,
          column: 8
        },
        end: {
          line: 324,
          column: 19
        }
      },
      "156": {
        start: {
          line: 324,
          column: 12
        },
        end: {
          line: 324,
          column: 19
        }
      },
      "157": {
        start: {
          line: 326,
          column: 8
        },
        end: {
          line: 329,
          column: 9
        }
      },
      "158": {
        start: {
          line: 327,
          column: 12
        },
        end: {
          line: 327,
          column: 57
        }
      },
      "159": {
        start: {
          line: 328,
          column: 12
        },
        end: {
          line: 328,
          column: 39
        }
      },
      "160": {
        start: {
          line: 332,
          column: 27
        },
        end: {
          line: 332,
          column: 60
        }
      },
      "161": {
        start: {
          line: 333,
          column: 8
        },
        end: {
          line: 334,
          column: 19
        }
      },
      "162": {
        start: {
          line: 334,
          column: 12
        },
        end: {
          line: 334,
          column: 19
        }
      },
      "163": {
        start: {
          line: 335,
          column: 26
        },
        end: {
          line: 335,
          column: 39
        }
      },
      "164": {
        start: {
          line: 336,
          column: 26
        },
        end: {
          line: 336,
          column: 53
        }
      },
      "165": {
        start: {
          line: 337,
          column: 8
        },
        end: {
          line: 339,
          column: 9
        }
      },
      "166": {
        start: {
          line: 338,
          column: 12
        },
        end: {
          line: 338,
          column: 30
        }
      },
      "167": {
        start: {
          line: 342,
          column: 27
        },
        end: {
          line: 342,
          column: 82
        }
      },
      "168": {
        start: {
          line: 343,
          column: 8
        },
        end: {
          line: 349,
          column: 9
        }
      },
      "169": {
        start: {
          line: 344,
          column: 30
        },
        end: {
          line: 344,
          column: 43
        }
      },
      "170": {
        start: {
          line: 345,
          column: 12
        },
        end: {
          line: 348,
          column: 13
        }
      },
      "171": {
        start: {
          line: 346,
          column: 16
        },
        end: {
          line: 346,
          column: 55
        }
      },
      "172": {
        start: {
          line: 347,
          column: 16
        },
        end: {
          line: 347,
          column: 49
        }
      },
      "173": {
        start: {
          line: 352,
          column: 23
        },
        end: {
          line: 352,
          column: 67
        }
      },
      "174": {
        start: {
          line: 353,
          column: 8
        },
        end: {
          line: 356,
          column: 9
        }
      },
      "175": {
        start: {
          line: 354,
          column: 12
        },
        end: {
          line: 354,
          column: 47
        }
      },
      "176": {
        start: {
          line: 355,
          column: 12
        },
        end: {
          line: 355,
          column: 41
        }
      },
      "177": {
        start: {
          line: 359,
          column: 24
        },
        end: {
          line: 359,
          column: 54
        }
      },
      "178": {
        start: {
          line: 360,
          column: 21
        },
        end: {
          line: 360,
          column: 32
        }
      },
      "179": {
        start: {
          line: 361,
          column: 8
        },
        end: {
          line: 361,
          column: 40
        }
      },
      "180": {
        start: {
          line: 362,
          column: 8
        },
        end: {
          line: 362,
          column: 20
        }
      },
      "181": {
        start: {
          line: 369,
          column: 8
        },
        end: {
          line: 369,
          column: 53
        }
      },
      "182": {
        start: {
          line: 370,
          column: 8
        },
        end: {
          line: 370,
          column: 28
        }
      },
      "183": {
        start: {
          line: 373,
          column: 8
        },
        end: {
          line: 375,
          column: 45
        }
      },
      "184": {
        start: {
          line: 374,
          column: 26
        },
        end: {
          line: 374,
          column: 46
        }
      },
      "185": {
        start: {
          line: 375,
          column: 26
        },
        end: {
          line: 375,
          column: 43
        }
      },
      "186": {
        start: {
          line: 378,
          column: 8
        },
        end: {
          line: 380,
          column: 41
        }
      },
      "187": {
        start: {
          line: 379,
          column: 24
        },
        end: {
          line: 379,
          column: 38
        }
      },
      "188": {
        start: {
          line: 380,
          column: 26
        },
        end: {
          line: 380,
          column: 39
        }
      },
      "189": {
        start: {
          line: 383,
          column: 8
        },
        end: {
          line: 383,
          column: 36
        }
      },
      "190": {
        start: {
          line: 388,
          column: 4
        },
        end: {
          line: 388,
          column: 48
        }
      },
      "191": {
        start: {
          line: 391,
          column: 4
        },
        end: {
          line: 391,
          column: 42
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 12,
            column: 4
          },
          end: {
            line: 12,
            column: 5
          }
        },
        loc: {
          start: {
            line: 12,
            column: 24
          },
          end: {
            line: 14,
            column: 5
          }
        },
        line: 12
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 15,
            column: 4
          },
          end: {
            line: 15,
            column: 5
          }
        },
        loc: {
          start: {
            line: 15,
            column: 18
          },
          end: {
            line: 29,
            column: 5
          }
        },
        line: 15
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 30,
            column: 4
          },
          end: {
            line: 30,
            column: 5
          }
        },
        loc: {
          start: {
            line: 30,
            column: 20
          },
          end: {
            line: 41,
            column: 5
          }
        },
        line: 30
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 42,
            column: 4
          },
          end: {
            line: 42,
            column: 5
          }
        },
        loc: {
          start: {
            line: 42,
            column: 21
          },
          end: {
            line: 45,
            column: 5
          }
        },
        line: 42
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 46,
            column: 4
          },
          end: {
            line: 46,
            column: 5
          }
        },
        loc: {
          start: {
            line: 46,
            column: 18
          },
          end: {
            line: 55,
            column: 5
          }
        },
        line: 46
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 56,
            column: 4
          },
          end: {
            line: 56,
            column: 5
          }
        },
        loc: {
          start: {
            line: 56,
            column: 20
          },
          end: {
            line: 81,
            column: 5
          }
        },
        line: 56
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 59,
            column: 12
          },
          end: {
            line: 59,
            column: 13
          }
        },
        loc: {
          start: {
            line: 59,
            column: 42
          },
          end: {
            line: 61,
            column: 13
          }
        },
        line: 59
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 62,
            column: 12
          },
          end: {
            line: 62,
            column: 13
          }
        },
        loc: {
          start: {
            line: 62,
            column: 44
          },
          end: {
            line: 64,
            column: 13
          }
        },
        line: 62
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 65,
            column: 12
          },
          end: {
            line: 65,
            column: 13
          }
        },
        loc: {
          start: {
            line: 65,
            column: 40
          },
          end: {
            line: 76,
            column: 13
          }
        },
        line: 65
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 77,
            column: 12
          },
          end: {
            line: 77,
            column: 13
          }
        },
        loc: {
          start: {
            line: 77,
            column: 26
          },
          end: {
            line: 79,
            column: 13
          }
        },
        line: 77
      },
      "10": {
        name: "(anonymous_10)",
        decl: {
          start: {
            line: 82,
            column: 4
          },
          end: {
            line: 82,
            column: 5
          }
        },
        loc: {
          start: {
            line: 82,
            column: 31
          },
          end: {
            line: 89,
            column: 5
          }
        },
        line: 82
      },
      "11": {
        name: "(anonymous_11)",
        decl: {
          start: {
            line: 83,
            column: 52
          },
          end: {
            line: 83,
            column: 53
          }
        },
        loc: {
          start: {
            line: 83,
            column: 60
          },
          end: {
            line: 83,
            column: 71
          }
        },
        line: 83
      },
      "12": {
        name: "(anonymous_12)",
        decl: {
          start: {
            line: 90,
            column: 4
          },
          end: {
            line: 90,
            column: 5
          }
        },
        loc: {
          start: {
            line: 90,
            column: 38
          },
          end: {
            line: 100,
            column: 5
          }
        },
        line: 90
      },
      "13": {
        name: "(anonymous_13)",
        decl: {
          start: {
            line: 94,
            column: 41
          },
          end: {
            line: 94,
            column: 42
          }
        },
        loc: {
          start: {
            line: 94,
            column: 47
          },
          end: {
            line: 94,
            column: 50
          }
        },
        line: 94
      },
      "14": {
        name: "(anonymous_14)",
        decl: {
          start: {
            line: 97,
            column: 39
          },
          end: {
            line: 97,
            column: 40
          }
        },
        loc: {
          start: {
            line: 97,
            column: 46
          },
          end: {
            line: 97,
            column: 54
          }
        },
        line: 97
      },
      "15": {
        name: "(anonymous_15)",
        decl: {
          start: {
            line: 101,
            column: 4
          },
          end: {
            line: 101,
            column: 5
          }
        },
        loc: {
          start: {
            line: 101,
            column: 31
          },
          end: {
            line: 104,
            column: 5
          }
        },
        line: 101
      },
      "16": {
        name: "(anonymous_16)",
        decl: {
          start: {
            line: 105,
            column: 4
          },
          end: {
            line: 105,
            column: 5
          }
        },
        loc: {
          start: {
            line: 105,
            column: 36
          },
          end: {
            line: 123,
            column: 5
          }
        },
        line: 105
      },
      "17": {
        name: "(anonymous_17)",
        decl: {
          start: {
            line: 124,
            column: 4
          },
          end: {
            line: 124,
            column: 5
          }
        },
        loc: {
          start: {
            line: 124,
            column: 34
          },
          end: {
            line: 135,
            column: 5
          }
        },
        line: 124
      },
      "18": {
        name: "(anonymous_18)",
        decl: {
          start: {
            line: 127,
            column: 27
          },
          end: {
            line: 127,
            column: 28
          }
        },
        loc: {
          start: {
            line: 127,
            column: 48
          },
          end: {
            line: 134,
            column: 9
          }
        },
        line: 127
      },
      "19": {
        name: "(anonymous_19)",
        decl: {
          start: {
            line: 128,
            column: 37
          },
          end: {
            line: 128,
            column: 38
          }
        },
        loc: {
          start: {
            line: 128,
            column: 52
          },
          end: {
            line: 133,
            column: 13
          }
        },
        line: 128
      },
      "20": {
        name: "(anonymous_20)",
        decl: {
          start: {
            line: 136,
            column: 4
          },
          end: {
            line: 136,
            column: 5
          }
        },
        loc: {
          start: {
            line: 136,
            column: 36
          },
          end: {
            line: 147,
            column: 5
          }
        },
        line: 136
      },
      "21": {
        name: "(anonymous_21)",
        decl: {
          start: {
            line: 139,
            column: 27
          },
          end: {
            line: 139,
            column: 28
          }
        },
        loc: {
          start: {
            line: 139,
            column: 48
          },
          end: {
            line: 146,
            column: 9
          }
        },
        line: 139
      },
      "22": {
        name: "(anonymous_22)",
        decl: {
          start: {
            line: 140,
            column: 37
          },
          end: {
            line: 140,
            column: 38
          }
        },
        loc: {
          start: {
            line: 140,
            column: 46
          },
          end: {
            line: 145,
            column: 13
          }
        },
        line: 140
      },
      "23": {
        name: "(anonymous_23)",
        decl: {
          start: {
            line: 148,
            column: 4
          },
          end: {
            line: 148,
            column: 5
          }
        },
        loc: {
          start: {
            line: 148,
            column: 32
          },
          end: {
            line: 180,
            column: 5
          }
        },
        line: 148
      },
      "24": {
        name: "(anonymous_24)",
        decl: {
          start: {
            line: 185,
            column: 4
          },
          end: {
            line: 185,
            column: 5
          }
        },
        loc: {
          start: {
            line: 185,
            column: 18
          },
          end: {
            line: 189,
            column: 5
          }
        },
        line: 185
      },
      "25": {
        name: "(anonymous_25)",
        decl: {
          start: {
            line: 190,
            column: 4
          },
          end: {
            line: 190,
            column: 5
          }
        },
        loc: {
          start: {
            line: 190,
            column: 20
          },
          end: {
            line: 193,
            column: 5
          }
        },
        line: 190
      },
      "26": {
        name: "(anonymous_26)",
        decl: {
          start: {
            line: 194,
            column: 4
          },
          end: {
            line: 194,
            column: 5
          }
        },
        loc: {
          start: {
            line: 194,
            column: 21
          },
          end: {
            line: 196,
            column: 5
          }
        },
        line: 194
      },
      "27": {
        name: "(anonymous_27)",
        decl: {
          start: {
            line: 197,
            column: 4
          },
          end: {
            line: 197,
            column: 5
          }
        },
        loc: {
          start: {
            line: 197,
            column: 18
          },
          end: {
            line: 201,
            column: 5
          }
        },
        line: 197
      },
      "28": {
        name: "(anonymous_28)",
        decl: {
          start: {
            line: 202,
            column: 4
          },
          end: {
            line: 202,
            column: 5
          }
        },
        loc: {
          start: {
            line: 202,
            column: 20
          },
          end: {
            line: 219,
            column: 5
          }
        },
        line: 202
      },
      "29": {
        name: "(anonymous_29)",
        decl: {
          start: {
            line: 205,
            column: 12
          },
          end: {
            line: 205,
            column: 13
          }
        },
        loc: {
          start: {
            line: 205,
            column: 42
          },
          end: {
            line: 207,
            column: 13
          }
        },
        line: 205
      },
      "30": {
        name: "(anonymous_30)",
        decl: {
          start: {
            line: 208,
            column: 12
          },
          end: {
            line: 208,
            column: 13
          }
        },
        loc: {
          start: {
            line: 208,
            column: 44
          },
          end: {
            line: 210,
            column: 13
          }
        },
        line: 208
      },
      "31": {
        name: "(anonymous_31)",
        decl: {
          start: {
            line: 211,
            column: 12
          },
          end: {
            line: 211,
            column: 13
          }
        },
        loc: {
          start: {
            line: 211,
            column: 40
          },
          end: {
            line: 214,
            column: 13
          }
        },
        line: 211
      },
      "32": {
        name: "(anonymous_32)",
        decl: {
          start: {
            line: 215,
            column: 12
          },
          end: {
            line: 215,
            column: 13
          }
        },
        loc: {
          start: {
            line: 215,
            column: 26
          },
          end: {
            line: 217,
            column: 13
          }
        },
        line: 215
      },
      "33": {
        name: "(anonymous_33)",
        decl: {
          start: {
            line: 220,
            column: 4
          },
          end: {
            line: 220,
            column: 5
          }
        },
        loc: {
          start: {
            line: 220,
            column: 31
          },
          end: {
            line: 232,
            column: 5
          }
        },
        line: 220
      },
      "34": {
        name: "(anonymous_34)",
        decl: {
          start: {
            line: 233,
            column: 4
          },
          end: {
            line: 233,
            column: 5
          }
        },
        loc: {
          start: {
            line: 233,
            column: 38
          },
          end: {
            line: 244,
            column: 5
          }
        },
        line: 233
      },
      "35": {
        name: "(anonymous_35)",
        decl: {
          start: {
            line: 245,
            column: 4
          },
          end: {
            line: 245,
            column: 5
          }
        },
        loc: {
          start: {
            line: 245,
            column: 31
          },
          end: {
            line: 250,
            column: 5
          }
        },
        line: 245
      },
      "36": {
        name: "(anonymous_36)",
        decl: {
          start: {
            line: 251,
            column: 4
          },
          end: {
            line: 251,
            column: 5
          }
        },
        loc: {
          start: {
            line: 251,
            column: 36
          },
          end: {
            line: 256,
            column: 5
          }
        },
        line: 251
      },
      "37": {
        name: "(anonymous_37)",
        decl: {
          start: {
            line: 257,
            column: 4
          },
          end: {
            line: 257,
            column: 5
          }
        },
        loc: {
          start: {
            line: 257,
            column: 34
          },
          end: {
            line: 264,
            column: 5
          }
        },
        line: 257
      },
      "38": {
        name: "(anonymous_38)",
        decl: {
          start: {
            line: 265,
            column: 4
          },
          end: {
            line: 265,
            column: 5
          }
        },
        loc: {
          start: {
            line: 265,
            column: 36
          },
          end: {
            line: 279,
            column: 5
          }
        },
        line: 265
      },
      "39": {
        name: "(anonymous_39)",
        decl: {
          start: {
            line: 280,
            column: 4
          },
          end: {
            line: 280,
            column: 5
          }
        },
        loc: {
          start: {
            line: 280,
            column: 30
          },
          end: {
            line: 290,
            column: 5
          }
        },
        line: 280
      },
      "40": {
        name: "(anonymous_40)",
        decl: {
          start: {
            line: 291,
            column: 4
          },
          end: {
            line: 291,
            column: 5
          }
        },
        loc: {
          start: {
            line: 291,
            column: 30
          },
          end: {
            line: 315,
            column: 5
          }
        },
        line: 291
      },
      "41": {
        name: "(anonymous_41)",
        decl: {
          start: {
            line: 305,
            column: 59
          },
          end: {
            line: 305,
            column: 60
          }
        },
        loc: {
          start: {
            line: 305,
            column: 66
          },
          end: {
            line: 305,
            column: 76
          }
        },
        line: 305
      },
      "42": {
        name: "(anonymous_42)",
        decl: {
          start: {
            line: 307,
            column: 28
          },
          end: {
            line: 307,
            column: 29
          }
        },
        loc: {
          start: {
            line: 307,
            column: 44
          },
          end: {
            line: 311,
            column: 13
          }
        },
        line: 307
      },
      "43": {
        name: "(anonymous_43)",
        decl: {
          start: {
            line: 316,
            column: 4
          },
          end: {
            line: 316,
            column: 5
          }
        },
        loc: {
          start: {
            line: 316,
            column: 30
          },
          end: {
            line: 330,
            column: 5
          }
        },
        line: 316
      },
      "44": {
        name: "(anonymous_44)",
        decl: {
          start: {
            line: 331,
            column: 4
          },
          end: {
            line: 331,
            column: 5
          }
        },
        loc: {
          start: {
            line: 331,
            column: 30
          },
          end: {
            line: 340,
            column: 5
          }
        },
        line: 331
      },
      "45": {
        name: "(anonymous_45)",
        decl: {
          start: {
            line: 341,
            column: 4
          },
          end: {
            line: 341,
            column: 5
          }
        },
        loc: {
          start: {
            line: 341,
            column: 27
          },
          end: {
            line: 350,
            column: 5
          }
        },
        line: 341
      },
      "46": {
        name: "(anonymous_46)",
        decl: {
          start: {
            line: 351,
            column: 4
          },
          end: {
            line: 351,
            column: 5
          }
        },
        loc: {
          start: {
            line: 351,
            column: 26
          },
          end: {
            line: 357,
            column: 5
          }
        },
        line: 351
      },
      "47": {
        name: "(anonymous_47)",
        decl: {
          start: {
            line: 358,
            column: 4
          },
          end: {
            line: 358,
            column: 5
          }
        },
        loc: {
          start: {
            line: 358,
            column: 21
          },
          end: {
            line: 363,
            column: 5
          }
        },
        line: 358
      },
      "48": {
        name: "(anonymous_48)",
        decl: {
          start: {
            line: 368,
            column: 4
          },
          end: {
            line: 368,
            column: 5
          }
        },
        loc: {
          start: {
            line: 368,
            column: 18
          },
          end: {
            line: 371,
            column: 5
          }
        },
        line: 368
      },
      "49": {
        name: "(anonymous_49)",
        decl: {
          start: {
            line: 372,
            column: 4
          },
          end: {
            line: 372,
            column: 5
          }
        },
        loc: {
          start: {
            line: 372,
            column: 31
          },
          end: {
            line: 376,
            column: 5
          }
        },
        line: 372
      },
      "50": {
        name: "(anonymous_50)",
        decl: {
          start: {
            line: 374,
            column: 18
          },
          end: {
            line: 374,
            column: 19
          }
        },
        loc: {
          start: {
            line: 374,
            column: 26
          },
          end: {
            line: 374,
            column: 46
          }
        },
        line: 374
      },
      "51": {
        name: "(anonymous_51)",
        decl: {
          start: {
            line: 375,
            column: 19
          },
          end: {
            line: 375,
            column: 20
          }
        },
        loc: {
          start: {
            line: 375,
            column: 26
          },
          end: {
            line: 375,
            column: 43
          }
        },
        line: 375
      },
      "52": {
        name: "(anonymous_52)",
        decl: {
          start: {
            line: 377,
            column: 4
          },
          end: {
            line: 377,
            column: 5
          }
        },
        loc: {
          start: {
            line: 377,
            column: 31
          },
          end: {
            line: 381,
            column: 5
          }
        },
        line: 377
      },
      "53": {
        name: "(anonymous_53)",
        decl: {
          start: {
            line: 379,
            column: 18
          },
          end: {
            line: 379,
            column: 19
          }
        },
        loc: {
          start: {
            line: 379,
            column: 24
          },
          end: {
            line: 379,
            column: 38
          }
        },
        line: 379
      },
      "54": {
        name: "(anonymous_54)",
        decl: {
          start: {
            line: 380,
            column: 19
          },
          end: {
            line: 380,
            column: 20
          }
        },
        loc: {
          start: {
            line: 380,
            column: 26
          },
          end: {
            line: 380,
            column: 39
          }
        },
        line: 380
      },
      "55": {
        name: "(anonymous_55)",
        decl: {
          start: {
            line: 382,
            column: 4
          },
          end: {
            line: 382,
            column: 5
          }
        },
        loc: {
          start: {
            line: 382,
            column: 18
          },
          end: {
            line: 384,
            column: 5
          }
        },
        line: 382
      },
      "56": {
        name: "createSQLiteTestHelper",
        decl: {
          start: {
            line: 387,
            column: 16
          },
          end: {
            line: 387,
            column: 38
          }
        },
        loc: {
          start: {
            line: 387,
            column: 47
          },
          end: {
            line: 389,
            column: 1
          }
        },
        line: 387
      },
      "57": {
        name: "createMemoryTestHelper",
        decl: {
          start: {
            line: 390,
            column: 16
          },
          end: {
            line: 390,
            column: 38
          }
        },
        loc: {
          start: {
            line: 390,
            column: 41
          },
          end: {
            line: 392,
            column: 1
          }
        },
        line: 390
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 13,
            column: 22
          },
          end: {
            line: 13,
            column: 71
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 13,
            column: 22
          },
          end: {
            line: 13,
            column: 28
          }
        }, {
          start: {
            line: 13,
            column: 32
          },
          end: {
            line: 13,
            column: 71
          }
        }],
        line: 13
      },
      "1": {
        loc: {
          start: {
            line: 31,
            column: 8
          },
          end: {
            line: 34,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 31,
            column: 8
          },
          end: {
            line: 34,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 31
      },
      "2": {
        loc: {
          start: {
            line: 47,
            column: 8
          },
          end: {
            line: 48,
            column: 19
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 47,
            column: 8
          },
          end: {
            line: 48,
            column: 19
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 47
      },
      "3": {
        loc: {
          start: {
            line: 59,
            column: 29
          },
          end: {
            line: 59,
            column: 40
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 59,
            column: 38
          },
          end: {
            line: 59,
            column: 40
          }
        }],
        line: 59
      },
      "4": {
        loc: {
          start: {
            line: 62,
            column: 31
          },
          end: {
            line: 62,
            column: 42
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 62,
            column: 40
          },
          end: {
            line: 62,
            column: 42
          }
        }],
        line: 62
      },
      "5": {
        loc: {
          start: {
            line: 85,
            column: 12
          },
          end: {
            line: 87,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 85,
            column: 12
          },
          end: {
            line: 87,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 85
      },
      "6": {
        loc: {
          start: {
            line: 91,
            column: 8
          },
          end: {
            line: 92,
            column: 19
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 91,
            column: 8
          },
          end: {
            line: 92,
            column: 19
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 91
      },
      "7": {
        loc: {
          start: {
            line: 118,
            column: 12
          },
          end: {
            line: 121,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 118,
            column: 12
          },
          end: {
            line: 121,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 118
      },
      "8": {
        loc: {
          start: {
            line: 124,
            column: 21
          },
          end: {
            line: 124,
            column: 32
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 124,
            column: 30
          },
          end: {
            line: 124,
            column: 32
          }
        }],
        line: 124
      },
      "9": {
        loc: {
          start: {
            line: 125,
            column: 8
          },
          end: {
            line: 126,
            column: 56
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 125,
            column: 8
          },
          end: {
            line: 126,
            column: 56
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 125
      },
      "10": {
        loc: {
          start: {
            line: 129,
            column: 16
          },
          end: {
            line: 132,
            column: 40
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 129,
            column: 16
          },
          end: {
            line: 132,
            column: 40
          }
        }, {
          start: {
            line: 132,
            column: 20
          },
          end: {
            line: 132,
            column: 40
          }
        }],
        line: 129
      },
      "11": {
        loc: {
          start: {
            line: 132,
            column: 28
          },
          end: {
            line: 132,
            column: 38
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 132,
            column: 28
          },
          end: {
            line: 132,
            column: 32
          }
        }, {
          start: {
            line: 132,
            column: 36
          },
          end: {
            line: 132,
            column: 38
          }
        }],
        line: 132
      },
      "12": {
        loc: {
          start: {
            line: 136,
            column: 23
          },
          end: {
            line: 136,
            column: 34
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 136,
            column: 32
          },
          end: {
            line: 136,
            column: 34
          }
        }],
        line: 136
      },
      "13": {
        loc: {
          start: {
            line: 137,
            column: 8
          },
          end: {
            line: 138,
            column: 56
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 137,
            column: 8
          },
          end: {
            line: 138,
            column: 56
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 137
      },
      "14": {
        loc: {
          start: {
            line: 141,
            column: 16
          },
          end: {
            line: 144,
            column: 30
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 141,
            column: 16
          },
          end: {
            line: 144,
            column: 30
          }
        }, {
          start: {
            line: 144,
            column: 20
          },
          end: {
            line: 144,
            column: 30
          }
        }],
        line: 141
      },
      "15": {
        loc: {
          start: {
            line: 205,
            column: 29
          },
          end: {
            line: 205,
            column: 40
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 205,
            column: 38
          },
          end: {
            line: 205,
            column: 40
          }
        }],
        line: 205
      },
      "16": {
        loc: {
          start: {
            line: 208,
            column: 31
          },
          end: {
            line: 208,
            column: 42
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 208,
            column: 40
          },
          end: {
            line: 208,
            column: 42
          }
        }],
        line: 208
      },
      "17": {
        loc: {
          start: {
            line: 223,
            column: 8
          },
          end: {
            line: 231,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 223,
            column: 8
          },
          end: {
            line: 231,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 223
      },
      "18": {
        loc: {
          start: {
            line: 226,
            column: 16
          },
          end: {
            line: 229,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 226,
            column: 16
          },
          end: {
            line: 229,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 226
      },
      "19": {
        loc: {
          start: {
            line: 234,
            column: 8
          },
          end: {
            line: 237,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 234,
            column: 8
          },
          end: {
            line: 237,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 234
      },
      "20": {
        loc: {
          start: {
            line: 246,
            column: 8
          },
          end: {
            line: 249,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 246,
            column: 8
          },
          end: {
            line: 249,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 246
      },
      "21": {
        loc: {
          start: {
            line: 257,
            column: 21
          },
          end: {
            line: 257,
            column: 32
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 257,
            column: 30
          },
          end: {
            line: 257,
            column: 32
          }
        }],
        line: 257
      },
      "22": {
        loc: {
          start: {
            line: 260,
            column: 8
          },
          end: {
            line: 262,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 260,
            column: 8
          },
          end: {
            line: 262,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 260
      },
      "23": {
        loc: {
          start: {
            line: 265,
            column: 23
          },
          end: {
            line: 265,
            column: 34
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 265,
            column: 32
          },
          end: {
            line: 265,
            column: 34
          }
        }],
        line: 265
      },
      "24": {
        loc: {
          start: {
            line: 267,
            column: 8
          },
          end: {
            line: 278,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 267,
            column: 8
          },
          end: {
            line: 278,
            column: 9
          }
        }, {
          start: {
            line: 270,
            column: 13
          },
          end: {
            line: 278,
            column: 9
          }
        }],
        line: 267
      },
      "25": {
        loc: {
          start: {
            line: 270,
            column: 13
          },
          end: {
            line: 278,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 270,
            column: 13
          },
          end: {
            line: 278,
            column: 9
          }
        }, {
          start: {
            line: 273,
            column: 13
          },
          end: {
            line: 278,
            column: 9
          }
        }],
        line: 270
      },
      "26": {
        loc: {
          start: {
            line: 273,
            column: 13
          },
          end: {
            line: 278,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 273,
            column: 13
          },
          end: {
            line: 278,
            column: 9
          }
        }, {
          start: {
            line: 276,
            column: 13
          },
          end: {
            line: 278,
            column: 9
          }
        }],
        line: 273
      },
      "27": {
        loc: {
          start: {
            line: 276,
            column: 13
          },
          end: {
            line: 278,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 276,
            column: 13
          },
          end: {
            line: 278,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 276
      },
      "28": {
        loc: {
          start: {
            line: 283,
            column: 8
          },
          end: {
            line: 284,
            column: 22
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 283,
            column: 8
          },
          end: {
            line: 284,
            column: 22
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 283
      },
      "29": {
        loc: {
          start: {
            line: 287,
            column: 8
          },
          end: {
            line: 288,
            column: 22
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 287,
            column: 8
          },
          end: {
            line: 288,
            column: 22
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 287
      },
      "30": {
        loc: {
          start: {
            line: 293,
            column: 8
          },
          end: {
            line: 294,
            column: 19
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 293,
            column: 8
          },
          end: {
            line: 294,
            column: 19
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 293
      },
      "31": {
        loc: {
          start: {
            line: 296,
            column: 8
          },
          end: {
            line: 299,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 296,
            column: 8
          },
          end: {
            line: 299,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 296
      },
      "32": {
        loc: {
          start: {
            line: 304,
            column: 8
          },
          end: {
            line: 314,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 304,
            column: 8
          },
          end: {
            line: 314,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 304
      },
      "33": {
        loc: {
          start: {
            line: 308,
            column: 16
          },
          end: {
            line: 310,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 308,
            column: 16
          },
          end: {
            line: 310,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 308
      },
      "34": {
        loc: {
          start: {
            line: 319,
            column: 8
          },
          end: {
            line: 320,
            column: 19
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 319,
            column: 8
          },
          end: {
            line: 320,
            column: 19
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 319
      },
      "35": {
        loc: {
          start: {
            line: 323,
            column: 8
          },
          end: {
            line: 324,
            column: 19
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 323,
            column: 8
          },
          end: {
            line: 324,
            column: 19
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 323
      },
      "36": {
        loc: {
          start: {
            line: 333,
            column: 8
          },
          end: {
            line: 334,
            column: 19
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 333,
            column: 8
          },
          end: {
            line: 334,
            column: 19
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 333
      },
      "37": {
        loc: {
          start: {
            line: 337,
            column: 8
          },
          end: {
            line: 339,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 337,
            column: 8
          },
          end: {
            line: 339,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 337
      },
      "38": {
        loc: {
          start: {
            line: 343,
            column: 8
          },
          end: {
            line: 349,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 343,
            column: 8
          },
          end: {
            line: 349,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 343
      },
      "39": {
        loc: {
          start: {
            line: 345,
            column: 12
          },
          end: {
            line: 348,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 345,
            column: 12
          },
          end: {
            line: 348,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 345
      },
      "40": {
        loc: {
          start: {
            line: 359,
            column: 24
          },
          end: {
            line: 359,
            column: 54
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 359,
            column: 24
          },
          end: {
            line: 359,
            column: 49
          }
        }, {
          start: {
            line: 359,
            column: 53
          },
          end: {
            line: 359,
            column: 54
          }
        }],
        line: 359
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0,
      "74": 0,
      "75": 0,
      "76": 0,
      "77": 0,
      "78": 0,
      "79": 0,
      "80": 0,
      "81": 0,
      "82": 0,
      "83": 0,
      "84": 0,
      "85": 0,
      "86": 0,
      "87": 0,
      "88": 0,
      "89": 0,
      "90": 0,
      "91": 0,
      "92": 0,
      "93": 0,
      "94": 0,
      "95": 0,
      "96": 0,
      "97": 0,
      "98": 0,
      "99": 0,
      "100": 0,
      "101": 0,
      "102": 0,
      "103": 0,
      "104": 0,
      "105": 0,
      "106": 0,
      "107": 0,
      "108": 0,
      "109": 0,
      "110": 0,
      "111": 0,
      "112": 0,
      "113": 0,
      "114": 0,
      "115": 0,
      "116": 0,
      "117": 0,
      "118": 0,
      "119": 0,
      "120": 0,
      "121": 0,
      "122": 0,
      "123": 0,
      "124": 0,
      "125": 0,
      "126": 0,
      "127": 0,
      "128": 0,
      "129": 0,
      "130": 0,
      "131": 0,
      "132": 0,
      "133": 0,
      "134": 0,
      "135": 0,
      "136": 0,
      "137": 0,
      "138": 0,
      "139": 0,
      "140": 0,
      "141": 0,
      "142": 0,
      "143": 0,
      "144": 0,
      "145": 0,
      "146": 0,
      "147": 0,
      "148": 0,
      "149": 0,
      "150": 0,
      "151": 0,
      "152": 0,
      "153": 0,
      "154": 0,
      "155": 0,
      "156": 0,
      "157": 0,
      "158": 0,
      "159": 0,
      "160": 0,
      "161": 0,
      "162": 0,
      "163": 0,
      "164": 0,
      "165": 0,
      "166": 0,
      "167": 0,
      "168": 0,
      "169": 0,
      "170": 0,
      "171": 0,
      "172": 0,
      "173": 0,
      "174": 0,
      "175": 0,
      "176": 0,
      "177": 0,
      "178": 0,
      "179": 0,
      "180": 0,
      "181": 0,
      "182": 0,
      "183": 0,
      "184": 0,
      "185": 0,
      "186": 0,
      "187": 0,
      "188": 0,
      "189": 0,
      "190": 0,
      "191": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0],
      "4": [0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0],
      "9": [0, 0],
      "10": [0, 0],
      "11": [0, 0],
      "12": [0],
      "13": [0, 0],
      "14": [0, 0],
      "15": [0],
      "16": [0],
      "17": [0, 0],
      "18": [0, 0],
      "19": [0, 0],
      "20": [0, 0],
      "21": [0],
      "22": [0, 0],
      "23": [0],
      "24": [0, 0],
      "25": [0, 0],
      "26": [0, 0],
      "27": [0, 0],
      "28": [0, 0],
      "29": [0, 0],
      "30": [0, 0],
      "31": [0, 0],
      "32": [0, 0],
      "33": [0, 0],
      "34": [0, 0],
      "35": [0, 0],
      "36": [0, 0],
      "37": [0, 0],
      "38": [0, 0],
      "39": [0, 0],
      "40": [0, 0]
    },
    inputSourceMap: {
      file: "/home/mhugo/code/claude-code-flow/src/__tests__/helpers/database-test-helper.ts",
      mappings: "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",
      names: [],
      sources: ["/home/mhugo/code/claude-code-flow/src/__tests__/helpers/database-test-helper.ts"],
      sourcesContent: ["/**\n * Database Test Helper - Database Testing Utilities\n * \n * Comprehensive database testing support for integration tests\n */\n\nimport { promises as fs } from 'fs';\nimport { join } from 'path';\nimport { tmpdir } from 'os';\n\nexport interface DatabaseConnection {\n  query(sql: string, params?: any[]): Promise<any>;\n  execute(sql: string, params?: any[]): Promise<void>;\n  transaction<T>(callback: (tx: DatabaseConnection) => Promise<T>): Promise<T>;\n  close(): Promise<void>;\n}\n\nexport interface DatabaseTestHelper {\n  setup(): Promise<void>;\n  cleanup(): Promise<void>;\n  seed(data: any[]): Promise<void>;\n  reset(): Promise<void>;\n  getConnection(): DatabaseConnection;\n  createSchema(schema: string): Promise<void>;\n  insertTestData(table: string, data: any[]): Promise<void>;\n  truncateTable(table: string): Promise<void>;\n  runMigrations(migrations: string[]): Promise<void>;\n}\n\nexport class SQLiteDatabaseTestHelper implements DatabaseTestHelper {\n  private dbPath: string;\n  private db: any = null;\n\n  constructor(dbPath?: string) {\n    this.dbPath = dbPath || join(tmpdir(), `test-${Date.now()}.db`);\n  }\n\n  async setup(): Promise<void> {\n    try {\n      // Try to import sqlite3\n      const { default: sqlite3 } = await import('sqlite3');\n      \n      this.db = new sqlite3.Database(this.dbPath);\n      \n      // Enable foreign keys\n      await this.execute('PRAGMA foreign_keys = ON');\n      \n      // Create basic test schema\n      await this.createDefaultSchema();\n    } catch (error) {\n      console.warn('SQLite not available, using in-memory fallback');\n      this.db = new MemoryDatabase();\n    }\n  }\n\n  async cleanup(): Promise<void> {\n    if (this.db) {\n      await this.db.close?.();\n      this.db = null;\n    }\n    \n    try {\n      await fs.unlink(this.dbPath);\n    } catch (error) {\n      // File might not exist\n    }\n  }\n\n  async seed(data: any[]): Promise<void> {\n    const tableName = 'test_data';\n    await this.insertTestData(tableName, data);\n  }\n\n  async reset(): Promise<void> {\n    if (!this.db) return;\n    \n    // Get all table names\n    const tables = await this.query(\n      \"SELECT name FROM sqlite_master WHERE type='table' AND name NOT LIKE 'sqlite_%'\"\n    );\n    \n    // Truncate all tables\n    for (const table of tables) {\n      await this.truncateTable(table.name);\n    }\n  }\n\n  getConnection(): DatabaseConnection {\n    const self = this;\n    \n    return {\n      async query(sql: string, params: any[] = []): Promise<any> {\n        return self.query(sql, params);\n      },\n      \n      async execute(sql: string, params: any[] = []): Promise<void> {\n        return self.execute(sql, params);\n      },\n      \n      async transaction<T>(callback: (tx: DatabaseConnection) => Promise<T>): Promise<T> {\n        await self.execute('BEGIN TRANSACTION');\n        try {\n          const result = await callback(this);\n          await self.execute('COMMIT');\n          return result;\n        } catch (error) {\n          await self.execute('ROLLBACK');\n          throw error;\n        }\n      },\n      \n      async close(): Promise<void> {\n        return self.cleanup();\n      }\n    };\n  }\n\n  async createSchema(schema: string): Promise<void> {\n    const statements = schema.split(';').filter(stmt => stmt.trim());\n    \n    for (const statement of statements) {\n      if (statement.trim()) {\n        await this.execute(statement);\n      }\n    }\n  }\n\n  async insertTestData(table: string, data: any[]): Promise<void> {\n    if (data.length === 0) return;\n    \n    const columns = Object.keys(data[0]);\n    const placeholders = columns.map(() => '?').join(', ');\n    const sql = `INSERT INTO ${table} (${columns.join(', ')}) VALUES (${placeholders})`;\n    \n    for (const row of data) {\n      const values = columns.map(col => row[col]);\n      await this.execute(sql, values);\n    }\n  }\n\n  async truncateTable(table: string): Promise<void> {\n    await this.execute(`DELETE FROM ${table}`);\n    await this.execute(`DELETE FROM sqlite_sequence WHERE name='${table}'`);\n  }\n\n  async runMigrations(migrations: string[]): Promise<void> {\n    // Create migrations table if it doesn't exist\n    await this.execute(`\n      CREATE TABLE IF NOT EXISTS migrations (\n        id INTEGER PRIMARY KEY AUTOINCREMENT,\n        name TEXT UNIQUE NOT NULL,\n        executed_at DATETIME DEFAULT CURRENT_TIMESTAMP\n      )\n    `);\n    \n    for (const [index, migration] of migrations.entries()) {\n      const migrationName = `migration_${index.toString().padStart(3, '0')}`;\n      \n      // Check if migration already executed\n      const existing = await this.query(\n        'SELECT id FROM migrations WHERE name = ?',\n        [migrationName]\n      );\n      \n      if (existing.length === 0) {\n        await this.execute(migration);\n        await this.execute(\n          'INSERT INTO migrations (name) VALUES (?)',\n          [migrationName]\n        );\n      }\n    }\n  }\n\n  private async query(sql: string, params: any[] = []): Promise<any[]> {\n    if (!this.db) throw new Error('Database not initialized');\n    \n    return new Promise((resolve, reject) => {\n      this.db.all(sql, params, (err: any, rows: any[]) => {\n        if (err) reject(err);\n        else resolve(rows || []);\n      });\n    });\n  }\n\n  private async execute(sql: string, params: any[] = []): Promise<void> {\n    if (!this.db) throw new Error('Database not initialized');\n    \n    return new Promise((resolve, reject) => {\n      this.db.run(sql, params, (err: any) => {\n        if (err) reject(err);\n        else resolve();\n      });\n    });\n  }\n\n  private async createDefaultSchema(): Promise<void> {\n    const schema = `\n      CREATE TABLE IF NOT EXISTS test_data (\n        id INTEGER PRIMARY KEY AUTOINCREMENT,\n        key TEXT UNIQUE NOT NULL,\n        value TEXT,\n        metadata TEXT,\n        created_at DATETIME DEFAULT CURRENT_TIMESTAMP,\n        updated_at DATETIME DEFAULT CURRENT_TIMESTAMP\n      );\n      \n      CREATE TABLE IF NOT EXISTS test_users (\n        id INTEGER PRIMARY KEY AUTOINCREMENT,\n        name TEXT NOT NULL,\n        email TEXT UNIQUE NOT NULL,\n        created_at DATETIME DEFAULT CURRENT_TIMESTAMP\n      );\n      \n      CREATE TABLE IF NOT EXISTS test_projects (\n        id INTEGER PRIMARY KEY AUTOINCREMENT,\n        name TEXT NOT NULL,\n        type TEXT NOT NULL,\n        owner_id INTEGER,\n        created_at DATETIME DEFAULT CURRENT_TIMESTAMP,\n        FOREIGN KEY (owner_id) REFERENCES test_users(id)\n      );\n      \n      CREATE INDEX IF NOT EXISTS idx_test_data_key ON test_data(key);\n      CREATE INDEX IF NOT EXISTS idx_test_users_email ON test_users(email);\n      CREATE INDEX IF NOT EXISTS idx_test_projects_owner ON test_projects(owner_id);\n    `;\n    \n    await this.createSchema(schema);\n  }\n}\n\nexport class MemoryDatabaseTestHelper implements DatabaseTestHelper {\n  private storage = new Map<string, Map<string, any>>();\n  private sequences = new Map<string, number>();\n\n  async setup(): Promise<void> {\n    this.storage.clear();\n    this.sequences.clear();\n    this.createDefaultTables();\n  }\n\n  async cleanup(): Promise<void> {\n    this.storage.clear();\n    this.sequences.clear();\n  }\n\n  async seed(data: any[]): Promise<void> {\n    await this.insertTestData('test_data', data);\n  }\n\n  async reset(): Promise<void> {\n    this.storage.clear();\n    this.sequences.clear();\n    this.createDefaultTables();\n  }\n\n  getConnection(): DatabaseConnection {\n    const self = this;\n    \n    return {\n      async query(sql: string, params: any[] = []): Promise<any> {\n        return self.query(sql, params);\n      },\n      \n      async execute(sql: string, params: any[] = []): Promise<void> {\n        return self.execute(sql, params);\n      },\n      \n      async transaction<T>(callback: (tx: DatabaseConnection) => Promise<T>): Promise<T> {\n        // Memory database doesn't need transactions for testing\n        return callback(this);\n      },\n      \n      async close(): Promise<void> {\n        return self.cleanup();\n      }\n    };\n  }\n\n  async createSchema(schema: string): Promise<void> {\n    // Parse basic CREATE TABLE statements\n    const tableMatches = schema.match(/CREATE TABLE(?:\\s+IF NOT EXISTS)?\\s+(\\w+)/gi);\n    if (tableMatches) {\n      for (const match of tableMatches) {\n        const tableName = match.replace(/CREATE TABLE(?:\\s+IF NOT EXISTS)?\\s+/i, '');\n        if (!this.storage.has(tableName)) {\n          this.storage.set(tableName, new Map());\n          this.sequences.set(tableName, 0);\n        }\n      }\n    }\n  }\n\n  async insertTestData(table: string, data: any[]): Promise<void> {\n    if (!this.storage.has(table)) {\n      this.storage.set(table, new Map());\n      this.sequences.set(table, 0);\n    }\n    \n    const tableData = this.storage.get(table)!;\n    \n    for (const row of data) {\n      const id = this.getNextId(table);\n      const record = { id, ...row, created_at: new Date().toISOString() };\n      tableData.set(id.toString(), record);\n    }\n  }\n\n  async truncateTable(table: string): Promise<void> {\n    if (this.storage.has(table)) {\n      this.storage.get(table)!.clear();\n      this.sequences.set(table, 0);\n    }\n  }\n\n  async runMigrations(migrations: string[]): Promise<void> {\n    // Simple migration runner for memory database\n    for (const migration of migrations) {\n      await this.execute(migration);\n    }\n  }\n\n  private async query(sql: string, params: any[] = []): Promise<any[]> {\n    // Simple SQL parser for memory database\n    const upperSql = sql.toUpperCase().trim();\n    \n    if (upperSql.startsWith('SELECT')) {\n      return this.handleSelect(sql, params);\n    }\n    \n    return [];\n  }\n\n  private async execute(sql: string, params: any[] = []): Promise<void> {\n    const upperSql = sql.toUpperCase().trim();\n    \n    if (upperSql.startsWith('INSERT')) {\n      this.handleInsert(sql, params);\n    } else if (upperSql.startsWith('UPDATE')) {\n      this.handleUpdate(sql, params);\n    } else if (upperSql.startsWith('DELETE')) {\n      this.handleDelete(sql, params);\n    } else if (upperSql.startsWith('CREATE TABLE')) {\n      this.handleCreateTable(sql);\n    }\n  }\n\n  private handleSelect(sql: string, params: any[]): any[] {\n    // Very basic SELECT implementation\n    const tableMatch = sql.match(/FROM\\s+(\\w+)/i);\n    if (!tableMatch) return [];\n    \n    const tableName = tableMatch[1];\n    const tableData = this.storage.get(tableName);\n    if (!tableData) return [];\n    \n    return Array.from(tableData.values());\n  }\n\n  private handleInsert(sql: string, params: any[]): void {\n    const tableMatch = sql.match(/INSERT INTO\\s+(\\w+)/i);\n    if (!tableMatch) return;\n    \n    const tableName = tableMatch[1];\n    if (!this.storage.has(tableName)) {\n      this.storage.set(tableName, new Map());\n      this.sequences.set(tableName, 0);\n    }\n    \n    const tableData = this.storage.get(tableName)!;\n    const id = this.getNextId(tableName);\n    \n    // Simple parameter binding\n    const columnsMatch = sql.match(/\\(([^)]+)\\)/);\n    if (columnsMatch) {\n      const columns = columnsMatch[1].split(',').map(col => col.trim());\n      const record: any = { id };\n      \n      columns.forEach((col, index) => {\n        if (params[index] !== undefined) {\n          record[col] = params[index];\n        }\n      });\n      \n      record.created_at = new Date().toISOString();\n      tableData.set(id.toString(), record);\n    }\n  }\n\n  private handleUpdate(sql: string, params: any[]): void {\n    // Basic UPDATE implementation\n    const tableMatch = sql.match(/UPDATE\\s+(\\w+)/i);\n    if (!tableMatch) return;\n    \n    const tableName = tableMatch[1];\n    const tableData = this.storage.get(tableName);\n    if (!tableData) return;\n    \n    // For simplicity, update all records\n    for (const [key, record] of tableData.entries()) {\n      record.updated_at = new Date().toISOString();\n      tableData.set(key, record);\n    }\n  }\n\n  private handleDelete(sql: string, params: any[]): void {\n    const tableMatch = sql.match(/DELETE FROM\\s+(\\w+)/i);\n    if (!tableMatch) return;\n    \n    const tableName = tableMatch[1];\n    const tableData = this.storage.get(tableName);\n    if (tableData) {\n      tableData.clear();\n    }\n  }\n\n  private handleCreateTable(sql: string): void {\n    const tableMatch = sql.match(/CREATE TABLE(?:\\s+IF NOT EXISTS)?\\s+(\\w+)/i);\n    if (tableMatch) {\n      const tableName = tableMatch[1];\n      if (!this.storage.has(tableName)) {\n        this.storage.set(tableName, new Map());\n        this.sequences.set(tableName, 0);\n      }\n    }\n  }\n\n  private createDefaultTables(): void {\n    const tables = ['test_data', 'test_users', 'test_projects'];\n    for (const table of tables) {\n      this.storage.set(table, new Map());\n      this.sequences.set(table, 0);\n    }\n  }\n\n  private getNextId(table: string): number {\n    const current = this.sequences.get(table) || 0;\n    const next = current + 1;\n    this.sequences.set(table, next);\n    return next;\n  }\n}\n\n// Memory database implementation for fallback\nclass MemoryDatabase {\n  private helper: MemoryDatabaseTestHelper;\n\n  constructor() {\n    this.helper = new MemoryDatabaseTestHelper();\n    this.helper.setup();\n  }\n\n  all(sql: string, params: any[], callback: (err: any, rows: any[]) => void): void {\n    this.helper.getConnection().query(sql, params)\n      .then(rows => callback(null, rows))\n      .catch(err => callback(err, []));\n  }\n\n  run(sql: string, params: any[], callback: (err: any) => void): void {\n    this.helper.getConnection().execute(sql, params)\n      .then(() => callback(null))\n      .catch(err => callback(err));\n  }\n\n  async close(): Promise<void> {\n    await this.helper.cleanup();\n  }\n}\n\n// Factory functions\nexport function createSQLiteTestHelper(dbPath?: string): DatabaseTestHelper {\n  return new SQLiteDatabaseTestHelper(dbPath);\n}\n\nexport function createMemoryTestHelper(): DatabaseTestHelper {\n  return new MemoryDatabaseTestHelper();\n}"],
      version: 3
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "f657326a1da5ced05e7b352d3dca564ac66776ac"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_2rctqmnwfx = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_2rctqmnwfx();
/**
 * Database Test Helper - Database Testing Utilities
 *
 * Comprehensive database testing support for integration tests
 */
import { promises as fs } from 'fs';
import { join } from 'path';
import { tmpdir } from 'os';
export class SQLiteDatabaseTestHelper {
  dbPath;
  db =
  /* istanbul ignore next */
  (cov_2rctqmnwfx().s[0]++, null);
  constructor(dbPath) {
    /* istanbul ignore next */
    cov_2rctqmnwfx().f[0]++;
    cov_2rctqmnwfx().s[1]++;
    this.dbPath =
    /* istanbul ignore next */
    (cov_2rctqmnwfx().b[0][0]++, dbPath) ||
    /* istanbul ignore next */
    (cov_2rctqmnwfx().b[0][1]++, join(tmpdir(), `test-${Date.now()}.db`));
  }
  async setup() {
    /* istanbul ignore next */
    cov_2rctqmnwfx().f[1]++;
    cov_2rctqmnwfx().s[2]++;
    try {
      // Try to import sqlite3
      const {
        default: sqlite3
      } =
      /* istanbul ignore next */
      (cov_2rctqmnwfx().s[3]++, await import('sqlite3'));
      /* istanbul ignore next */
      cov_2rctqmnwfx().s[4]++;
      this.db = new sqlite3.Database(this.dbPath);
      // Enable foreign keys
      /* istanbul ignore next */
      cov_2rctqmnwfx().s[5]++;
      await this.execute('PRAGMA foreign_keys = ON');
      // Create basic test schema
      /* istanbul ignore next */
      cov_2rctqmnwfx().s[6]++;
      await this.createDefaultSchema();
    } catch (error) {
      /* istanbul ignore next */
      cov_2rctqmnwfx().s[7]++;
      console.warn('SQLite not available, using in-memory fallback');
      /* istanbul ignore next */
      cov_2rctqmnwfx().s[8]++;
      this.db = new MemoryDatabase();
    }
  }
  async cleanup() {
    /* istanbul ignore next */
    cov_2rctqmnwfx().f[2]++;
    cov_2rctqmnwfx().s[9]++;
    if (this.db) {
      /* istanbul ignore next */
      cov_2rctqmnwfx().b[1][0]++;
      cov_2rctqmnwfx().s[10]++;
      await this.db.close?.();
      /* istanbul ignore next */
      cov_2rctqmnwfx().s[11]++;
      this.db = null;
    } else
    /* istanbul ignore next */
    {
      cov_2rctqmnwfx().b[1][1]++;
    }
    cov_2rctqmnwfx().s[12]++;
    try {
      /* istanbul ignore next */
      cov_2rctqmnwfx().s[13]++;
      await fs.unlink(this.dbPath);
    } catch (error) {
      // File might not exist
    }
  }
  async seed(data) {
    /* istanbul ignore next */
    cov_2rctqmnwfx().f[3]++;
    const tableName =
    /* istanbul ignore next */
    (cov_2rctqmnwfx().s[14]++, 'test_data');
    /* istanbul ignore next */
    cov_2rctqmnwfx().s[15]++;
    await this.insertTestData(tableName, data);
  }
  async reset() {
    /* istanbul ignore next */
    cov_2rctqmnwfx().f[4]++;
    cov_2rctqmnwfx().s[16]++;
    if (!this.db) {
      /* istanbul ignore next */
      cov_2rctqmnwfx().b[2][0]++;
      cov_2rctqmnwfx().s[17]++;
      return;
    } else
    /* istanbul ignore next */
    {
      cov_2rctqmnwfx().b[2][1]++;
    }
    // Get all table names
    const tables =
    /* istanbul ignore next */
    (cov_2rctqmnwfx().s[18]++, await this.query("SELECT name FROM sqlite_master WHERE type='table' AND name NOT LIKE 'sqlite_%'"));
    // Truncate all tables
    /* istanbul ignore next */
    cov_2rctqmnwfx().s[19]++;
    for (const table of tables) {
      /* istanbul ignore next */
      cov_2rctqmnwfx().s[20]++;
      await this.truncateTable(table.name);
    }
  }
  getConnection() {
    /* istanbul ignore next */
    cov_2rctqmnwfx().f[5]++;
    const self =
    /* istanbul ignore next */
    (cov_2rctqmnwfx().s[21]++, this);
    /* istanbul ignore next */
    cov_2rctqmnwfx().s[22]++;
    return {
      async query(sql, params =
      /* istanbul ignore next */
      (cov_2rctqmnwfx().b[3][0]++, [])) {
        /* istanbul ignore next */
        cov_2rctqmnwfx().f[6]++;
        cov_2rctqmnwfx().s[23]++;
        return self.query(sql, params);
      },
      async execute(sql, params =
      /* istanbul ignore next */
      (cov_2rctqmnwfx().b[4][0]++, [])) {
        /* istanbul ignore next */
        cov_2rctqmnwfx().f[7]++;
        cov_2rctqmnwfx().s[24]++;
        return self.execute(sql, params);
      },
      async transaction(callback) {
        /* istanbul ignore next */
        cov_2rctqmnwfx().f[8]++;
        cov_2rctqmnwfx().s[25]++;
        await self.execute('BEGIN TRANSACTION');
        /* istanbul ignore next */
        cov_2rctqmnwfx().s[26]++;
        try {
          const result =
          /* istanbul ignore next */
          (cov_2rctqmnwfx().s[27]++, await callback(this));
          /* istanbul ignore next */
          cov_2rctqmnwfx().s[28]++;
          await self.execute('COMMIT');
          /* istanbul ignore next */
          cov_2rctqmnwfx().s[29]++;
          return result;
        } catch (error) {
          /* istanbul ignore next */
          cov_2rctqmnwfx().s[30]++;
          await self.execute('ROLLBACK');
          /* istanbul ignore next */
          cov_2rctqmnwfx().s[31]++;
          throw error;
        }
      },
      async close() {
        /* istanbul ignore next */
        cov_2rctqmnwfx().f[9]++;
        cov_2rctqmnwfx().s[32]++;
        return self.cleanup();
      }
    };
  }
  async createSchema(schema) {
    /* istanbul ignore next */
    cov_2rctqmnwfx().f[10]++;
    const statements =
    /* istanbul ignore next */
    (cov_2rctqmnwfx().s[33]++, schema.split(';').filter(stmt => {
      /* istanbul ignore next */
      cov_2rctqmnwfx().f[11]++;
      cov_2rctqmnwfx().s[34]++;
      return stmt.trim();
    }));
    /* istanbul ignore next */
    cov_2rctqmnwfx().s[35]++;
    for (const statement of statements) {
      /* istanbul ignore next */
      cov_2rctqmnwfx().s[36]++;
      if (statement.trim()) {
        /* istanbul ignore next */
        cov_2rctqmnwfx().b[5][0]++;
        cov_2rctqmnwfx().s[37]++;
        await this.execute(statement);
      } else
      /* istanbul ignore next */
      {
        cov_2rctqmnwfx().b[5][1]++;
      }
    }
  }
  async insertTestData(table, data) {
    /* istanbul ignore next */
    cov_2rctqmnwfx().f[12]++;
    cov_2rctqmnwfx().s[38]++;
    if (data.length === 0) {
      /* istanbul ignore next */
      cov_2rctqmnwfx().b[6][0]++;
      cov_2rctqmnwfx().s[39]++;
      return;
    } else
    /* istanbul ignore next */
    {
      cov_2rctqmnwfx().b[6][1]++;
    }
    const columns =
    /* istanbul ignore next */
    (cov_2rctqmnwfx().s[40]++, Object.keys(data[0]));
    const placeholders =
    /* istanbul ignore next */
    (cov_2rctqmnwfx().s[41]++, columns.map(() => {
      /* istanbul ignore next */
      cov_2rctqmnwfx().f[13]++;
      cov_2rctqmnwfx().s[42]++;
      return '?';
    }).join(', '));
    const sql =
    /* istanbul ignore next */
    (cov_2rctqmnwfx().s[43]++, `INSERT INTO ${table} (${columns.join(', ')}) VALUES (${placeholders})`);
    /* istanbul ignore next */
    cov_2rctqmnwfx().s[44]++;
    for (const row of data) {
      const values =
      /* istanbul ignore next */
      (cov_2rctqmnwfx().s[45]++, columns.map(col => {
        /* istanbul ignore next */
        cov_2rctqmnwfx().f[14]++;
        cov_2rctqmnwfx().s[46]++;
        return row[col];
      }));
      /* istanbul ignore next */
      cov_2rctqmnwfx().s[47]++;
      await this.execute(sql, values);
    }
  }
  async truncateTable(table) {
    /* istanbul ignore next */
    cov_2rctqmnwfx().f[15]++;
    cov_2rctqmnwfx().s[48]++;
    await this.execute(`DELETE FROM ${table}`);
    /* istanbul ignore next */
    cov_2rctqmnwfx().s[49]++;
    await this.execute(`DELETE FROM sqlite_sequence WHERE name='${table}'`);
  }
  async runMigrations(migrations) {
    /* istanbul ignore next */
    cov_2rctqmnwfx().f[16]++;
    cov_2rctqmnwfx().s[50]++;
    // Create migrations table if it doesn't exist
    await this.execute(`
      CREATE TABLE IF NOT EXISTS migrations (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        name TEXT UNIQUE NOT NULL,
        executed_at DATETIME DEFAULT CURRENT_TIMESTAMP
      )
    `);
    /* istanbul ignore next */
    cov_2rctqmnwfx().s[51]++;
    for (const [index, migration] of migrations.entries()) {
      const migrationName =
      /* istanbul ignore next */
      (cov_2rctqmnwfx().s[52]++, `migration_${index.toString().padStart(3, '0')}`);
      // Check if migration already executed
      const existing =
      /* istanbul ignore next */
      (cov_2rctqmnwfx().s[53]++, await this.query('SELECT id FROM migrations WHERE name = ?', [migrationName]));
      /* istanbul ignore next */
      cov_2rctqmnwfx().s[54]++;
      if (existing.length === 0) {
        /* istanbul ignore next */
        cov_2rctqmnwfx().b[7][0]++;
        cov_2rctqmnwfx().s[55]++;
        await this.execute(migration);
        /* istanbul ignore next */
        cov_2rctqmnwfx().s[56]++;
        await this.execute('INSERT INTO migrations (name) VALUES (?)', [migrationName]);
      } else
      /* istanbul ignore next */
      {
        cov_2rctqmnwfx().b[7][1]++;
      }
    }
  }
  async query(sql, params =
  /* istanbul ignore next */
  (cov_2rctqmnwfx().b[8][0]++, [])) {
    /* istanbul ignore next */
    cov_2rctqmnwfx().f[17]++;
    cov_2rctqmnwfx().s[57]++;
    if (!this.db) {
      /* istanbul ignore next */
      cov_2rctqmnwfx().b[9][0]++;
      cov_2rctqmnwfx().s[58]++;
      throw new Error('Database not initialized');
    } else
    /* istanbul ignore next */
    {
      cov_2rctqmnwfx().b[9][1]++;
    }
    cov_2rctqmnwfx().s[59]++;
    return new Promise((resolve, reject) => {
      /* istanbul ignore next */
      cov_2rctqmnwfx().f[18]++;
      cov_2rctqmnwfx().s[60]++;
      this.db.all(sql, params, (err, rows) => {
        /* istanbul ignore next */
        cov_2rctqmnwfx().f[19]++;
        cov_2rctqmnwfx().s[61]++;
        if (err) {
          /* istanbul ignore next */
          cov_2rctqmnwfx().b[10][0]++;
          cov_2rctqmnwfx().s[62]++;
          reject(err);
        } else {
          /* istanbul ignore next */
          cov_2rctqmnwfx().b[10][1]++;
          cov_2rctqmnwfx().s[63]++;
          resolve(
          /* istanbul ignore next */
          (cov_2rctqmnwfx().b[11][0]++, rows) ||
          /* istanbul ignore next */
          (cov_2rctqmnwfx().b[11][1]++, []));
        }
      });
    });
  }
  async execute(sql, params =
  /* istanbul ignore next */
  (cov_2rctqmnwfx().b[12][0]++, [])) {
    /* istanbul ignore next */
    cov_2rctqmnwfx().f[20]++;
    cov_2rctqmnwfx().s[64]++;
    if (!this.db) {
      /* istanbul ignore next */
      cov_2rctqmnwfx().b[13][0]++;
      cov_2rctqmnwfx().s[65]++;
      throw new Error('Database not initialized');
    } else
    /* istanbul ignore next */
    {
      cov_2rctqmnwfx().b[13][1]++;
    }
    cov_2rctqmnwfx().s[66]++;
    return new Promise((resolve, reject) => {
      /* istanbul ignore next */
      cov_2rctqmnwfx().f[21]++;
      cov_2rctqmnwfx().s[67]++;
      this.db.run(sql, params, err => {
        /* istanbul ignore next */
        cov_2rctqmnwfx().f[22]++;
        cov_2rctqmnwfx().s[68]++;
        if (err) {
          /* istanbul ignore next */
          cov_2rctqmnwfx().b[14][0]++;
          cov_2rctqmnwfx().s[69]++;
          reject(err);
        } else {
          /* istanbul ignore next */
          cov_2rctqmnwfx().b[14][1]++;
          cov_2rctqmnwfx().s[70]++;
          resolve();
        }
      });
    });
  }
  async createDefaultSchema() {
    /* istanbul ignore next */
    cov_2rctqmnwfx().f[23]++;
    const schema =
    /* istanbul ignore next */
    (cov_2rctqmnwfx().s[71]++, `
      CREATE TABLE IF NOT EXISTS test_data (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        key TEXT UNIQUE NOT NULL,
        value TEXT,
        metadata TEXT,
        created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
        updated_at DATETIME DEFAULT CURRENT_TIMESTAMP
      );
      
      CREATE TABLE IF NOT EXISTS test_users (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        name TEXT NOT NULL,
        email TEXT UNIQUE NOT NULL,
        created_at DATETIME DEFAULT CURRENT_TIMESTAMP
      );
      
      CREATE TABLE IF NOT EXISTS test_projects (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        name TEXT NOT NULL,
        type TEXT NOT NULL,
        owner_id INTEGER,
        created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
        FOREIGN KEY (owner_id) REFERENCES test_users(id)
      );
      
      CREATE INDEX IF NOT EXISTS idx_test_data_key ON test_data(key);
      CREATE INDEX IF NOT EXISTS idx_test_users_email ON test_users(email);
      CREATE INDEX IF NOT EXISTS idx_test_projects_owner ON test_projects(owner_id);
    `);
    /* istanbul ignore next */
    cov_2rctqmnwfx().s[72]++;
    await this.createSchema(schema);
  }
}
export class MemoryDatabaseTestHelper {
  storage =
  /* istanbul ignore next */
  (cov_2rctqmnwfx().s[73]++, new Map());
  sequences =
  /* istanbul ignore next */
  (cov_2rctqmnwfx().s[74]++, new Map());
  async setup() {
    /* istanbul ignore next */
    cov_2rctqmnwfx().f[24]++;
    cov_2rctqmnwfx().s[75]++;
    this.storage.clear();
    /* istanbul ignore next */
    cov_2rctqmnwfx().s[76]++;
    this.sequences.clear();
    /* istanbul ignore next */
    cov_2rctqmnwfx().s[77]++;
    this.createDefaultTables();
  }
  async cleanup() {
    /* istanbul ignore next */
    cov_2rctqmnwfx().f[25]++;
    cov_2rctqmnwfx().s[78]++;
    this.storage.clear();
    /* istanbul ignore next */
    cov_2rctqmnwfx().s[79]++;
    this.sequences.clear();
  }
  async seed(data) {
    /* istanbul ignore next */
    cov_2rctqmnwfx().f[26]++;
    cov_2rctqmnwfx().s[80]++;
    await this.insertTestData('test_data', data);
  }
  async reset() {
    /* istanbul ignore next */
    cov_2rctqmnwfx().f[27]++;
    cov_2rctqmnwfx().s[81]++;
    this.storage.clear();
    /* istanbul ignore next */
    cov_2rctqmnwfx().s[82]++;
    this.sequences.clear();
    /* istanbul ignore next */
    cov_2rctqmnwfx().s[83]++;
    this.createDefaultTables();
  }
  getConnection() {
    /* istanbul ignore next */
    cov_2rctqmnwfx().f[28]++;
    const self =
    /* istanbul ignore next */
    (cov_2rctqmnwfx().s[84]++, this);
    /* istanbul ignore next */
    cov_2rctqmnwfx().s[85]++;
    return {
      async query(sql, params =
      /* istanbul ignore next */
      (cov_2rctqmnwfx().b[15][0]++, [])) {
        /* istanbul ignore next */
        cov_2rctqmnwfx().f[29]++;
        cov_2rctqmnwfx().s[86]++;
        return self.query(sql, params);
      },
      async execute(sql, params =
      /* istanbul ignore next */
      (cov_2rctqmnwfx().b[16][0]++, [])) {
        /* istanbul ignore next */
        cov_2rctqmnwfx().f[30]++;
        cov_2rctqmnwfx().s[87]++;
        return self.execute(sql, params);
      },
      async transaction(callback) {
        /* istanbul ignore next */
        cov_2rctqmnwfx().f[31]++;
        cov_2rctqmnwfx().s[88]++;
        // Memory database doesn't need transactions for testing
        return callback(this);
      },
      async close() {
        /* istanbul ignore next */
        cov_2rctqmnwfx().f[32]++;
        cov_2rctqmnwfx().s[89]++;
        return self.cleanup();
      }
    };
  }
  async createSchema(schema) {
    /* istanbul ignore next */
    cov_2rctqmnwfx().f[33]++;
    // Parse basic CREATE TABLE statements
    const tableMatches =
    /* istanbul ignore next */
    (cov_2rctqmnwfx().s[90]++, schema.match(/CREATE TABLE(?:\s+IF NOT EXISTS)?\s+(\w+)/gi));
    /* istanbul ignore next */
    cov_2rctqmnwfx().s[91]++;
    if (tableMatches) {
      /* istanbul ignore next */
      cov_2rctqmnwfx().b[17][0]++;
      cov_2rctqmnwfx().s[92]++;
      for (const match of tableMatches) {
        const tableName =
        /* istanbul ignore next */
        (cov_2rctqmnwfx().s[93]++, match.replace(/CREATE TABLE(?:\s+IF NOT EXISTS)?\s+/i, ''));
        /* istanbul ignore next */
        cov_2rctqmnwfx().s[94]++;
        if (!this.storage.has(tableName)) {
          /* istanbul ignore next */
          cov_2rctqmnwfx().b[18][0]++;
          cov_2rctqmnwfx().s[95]++;
          this.storage.set(tableName, new Map());
          /* istanbul ignore next */
          cov_2rctqmnwfx().s[96]++;
          this.sequences.set(tableName, 0);
        } else
        /* istanbul ignore next */
        {
          cov_2rctqmnwfx().b[18][1]++;
        }
      }
    } else
    /* istanbul ignore next */
    {
      cov_2rctqmnwfx().b[17][1]++;
    }
  }
  async insertTestData(table, data) {
    /* istanbul ignore next */
    cov_2rctqmnwfx().f[34]++;
    cov_2rctqmnwfx().s[97]++;
    if (!this.storage.has(table)) {
      /* istanbul ignore next */
      cov_2rctqmnwfx().b[19][0]++;
      cov_2rctqmnwfx().s[98]++;
      this.storage.set(table, new Map());
      /* istanbul ignore next */
      cov_2rctqmnwfx().s[99]++;
      this.sequences.set(table, 0);
    } else
    /* istanbul ignore next */
    {
      cov_2rctqmnwfx().b[19][1]++;
    }
    const tableData =
    /* istanbul ignore next */
    (cov_2rctqmnwfx().s[100]++, this.storage.get(table));
    /* istanbul ignore next */
    cov_2rctqmnwfx().s[101]++;
    for (const row of data) {
      const id =
      /* istanbul ignore next */
      (cov_2rctqmnwfx().s[102]++, this.getNextId(table));
      const record =
      /* istanbul ignore next */
      (cov_2rctqmnwfx().s[103]++, {
        id,
        ...row,
        created_at: new Date().toISOString()
      });
      /* istanbul ignore next */
      cov_2rctqmnwfx().s[104]++;
      tableData.set(id.toString(), record);
    }
  }
  async truncateTable(table) {
    /* istanbul ignore next */
    cov_2rctqmnwfx().f[35]++;
    cov_2rctqmnwfx().s[105]++;
    if (this.storage.has(table)) {
      /* istanbul ignore next */
      cov_2rctqmnwfx().b[20][0]++;
      cov_2rctqmnwfx().s[106]++;
      this.storage.get(table).clear();
      /* istanbul ignore next */
      cov_2rctqmnwfx().s[107]++;
      this.sequences.set(table, 0);
    } else
    /* istanbul ignore next */
    {
      cov_2rctqmnwfx().b[20][1]++;
    }
  }
  async runMigrations(migrations) {
    /* istanbul ignore next */
    cov_2rctqmnwfx().f[36]++;
    cov_2rctqmnwfx().s[108]++;
    // Simple migration runner for memory database
    for (const migration of migrations) {
      /* istanbul ignore next */
      cov_2rctqmnwfx().s[109]++;
      await this.execute(migration);
    }
  }
  async query(sql, params =
  /* istanbul ignore next */
  (cov_2rctqmnwfx().b[21][0]++, [])) {
    /* istanbul ignore next */
    cov_2rctqmnwfx().f[37]++;
    // Simple SQL parser for memory database
    const upperSql =
    /* istanbul ignore next */
    (cov_2rctqmnwfx().s[110]++, sql.toUpperCase().trim());
    /* istanbul ignore next */
    cov_2rctqmnwfx().s[111]++;
    if (upperSql.startsWith('SELECT')) {
      /* istanbul ignore next */
      cov_2rctqmnwfx().b[22][0]++;
      cov_2rctqmnwfx().s[112]++;
      return this.handleSelect(sql, params);
    } else
    /* istanbul ignore next */
    {
      cov_2rctqmnwfx().b[22][1]++;
    }
    cov_2rctqmnwfx().s[113]++;
    return [];
  }
  async execute(sql, params =
  /* istanbul ignore next */
  (cov_2rctqmnwfx().b[23][0]++, [])) {
    /* istanbul ignore next */
    cov_2rctqmnwfx().f[38]++;
    const upperSql =
    /* istanbul ignore next */
    (cov_2rctqmnwfx().s[114]++, sql.toUpperCase().trim());
    /* istanbul ignore next */
    cov_2rctqmnwfx().s[115]++;
    if (upperSql.startsWith('INSERT')) {
      /* istanbul ignore next */
      cov_2rctqmnwfx().b[24][0]++;
      cov_2rctqmnwfx().s[116]++;
      this.handleInsert(sql, params);
    } else {
      /* istanbul ignore next */
      cov_2rctqmnwfx().b[24][1]++;
      cov_2rctqmnwfx().s[117]++;
      if (upperSql.startsWith('UPDATE')) {
        /* istanbul ignore next */
        cov_2rctqmnwfx().b[25][0]++;
        cov_2rctqmnwfx().s[118]++;
        this.handleUpdate(sql, params);
      } else {
        /* istanbul ignore next */
        cov_2rctqmnwfx().b[25][1]++;
        cov_2rctqmnwfx().s[119]++;
        if (upperSql.startsWith('DELETE')) {
          /* istanbul ignore next */
          cov_2rctqmnwfx().b[26][0]++;
          cov_2rctqmnwfx().s[120]++;
          this.handleDelete(sql, params);
        } else {
          /* istanbul ignore next */
          cov_2rctqmnwfx().b[26][1]++;
          cov_2rctqmnwfx().s[121]++;
          if (upperSql.startsWith('CREATE TABLE')) {
            /* istanbul ignore next */
            cov_2rctqmnwfx().b[27][0]++;
            cov_2rctqmnwfx().s[122]++;
            this.handleCreateTable(sql);
          } else
          /* istanbul ignore next */
          {
            cov_2rctqmnwfx().b[27][1]++;
          }
        }
      }
    }
  }
  handleSelect(sql, params) {
    /* istanbul ignore next */
    cov_2rctqmnwfx().f[39]++;
    // Very basic SELECT implementation
    const tableMatch =
    /* istanbul ignore next */
    (cov_2rctqmnwfx().s[123]++, sql.match(/FROM\s+(\w+)/i));
    /* istanbul ignore next */
    cov_2rctqmnwfx().s[124]++;
    if (!tableMatch) {
      /* istanbul ignore next */
      cov_2rctqmnwfx().b[28][0]++;
      cov_2rctqmnwfx().s[125]++;
      return [];
    } else
    /* istanbul ignore next */
    {
      cov_2rctqmnwfx().b[28][1]++;
    }
    const tableName =
    /* istanbul ignore next */
    (cov_2rctqmnwfx().s[126]++, tableMatch[1]);
    const tableData =
    /* istanbul ignore next */
    (cov_2rctqmnwfx().s[127]++, this.storage.get(tableName));
    /* istanbul ignore next */
    cov_2rctqmnwfx().s[128]++;
    if (!tableData) {
      /* istanbul ignore next */
      cov_2rctqmnwfx().b[29][0]++;
      cov_2rctqmnwfx().s[129]++;
      return [];
    } else
    /* istanbul ignore next */
    {
      cov_2rctqmnwfx().b[29][1]++;
    }
    cov_2rctqmnwfx().s[130]++;
    return Array.from(tableData.values());
  }
  handleInsert(sql, params) {
    /* istanbul ignore next */
    cov_2rctqmnwfx().f[40]++;
    const tableMatch =
    /* istanbul ignore next */
    (cov_2rctqmnwfx().s[131]++, sql.match(/INSERT INTO\s+(\w+)/i));
    /* istanbul ignore next */
    cov_2rctqmnwfx().s[132]++;
    if (!tableMatch) {
      /* istanbul ignore next */
      cov_2rctqmnwfx().b[30][0]++;
      cov_2rctqmnwfx().s[133]++;
      return;
    } else
    /* istanbul ignore next */
    {
      cov_2rctqmnwfx().b[30][1]++;
    }
    const tableName =
    /* istanbul ignore next */
    (cov_2rctqmnwfx().s[134]++, tableMatch[1]);
    /* istanbul ignore next */
    cov_2rctqmnwfx().s[135]++;
    if (!this.storage.has(tableName)) {
      /* istanbul ignore next */
      cov_2rctqmnwfx().b[31][0]++;
      cov_2rctqmnwfx().s[136]++;
      this.storage.set(tableName, new Map());
      /* istanbul ignore next */
      cov_2rctqmnwfx().s[137]++;
      this.sequences.set(tableName, 0);
    } else
    /* istanbul ignore next */
    {
      cov_2rctqmnwfx().b[31][1]++;
    }
    const tableData =
    /* istanbul ignore next */
    (cov_2rctqmnwfx().s[138]++, this.storage.get(tableName));
    const id =
    /* istanbul ignore next */
    (cov_2rctqmnwfx().s[139]++, this.getNextId(tableName));
    // Simple parameter binding
    const columnsMatch =
    /* istanbul ignore next */
    (cov_2rctqmnwfx().s[140]++, sql.match(/\(([^)]+)\)/));
    /* istanbul ignore next */
    cov_2rctqmnwfx().s[141]++;
    if (columnsMatch) {
      /* istanbul ignore next */
      cov_2rctqmnwfx().b[32][0]++;
      const columns =
      /* istanbul ignore next */
      (cov_2rctqmnwfx().s[142]++, columnsMatch[1].split(',').map(col => {
        /* istanbul ignore next */
        cov_2rctqmnwfx().f[41]++;
        cov_2rctqmnwfx().s[143]++;
        return col.trim();
      }));
      const record =
      /* istanbul ignore next */
      (cov_2rctqmnwfx().s[144]++, {
        id
      });
      /* istanbul ignore next */
      cov_2rctqmnwfx().s[145]++;
      columns.forEach((col, index) => {
        /* istanbul ignore next */
        cov_2rctqmnwfx().f[42]++;
        cov_2rctqmnwfx().s[146]++;
        if (params[index] !== undefined) {
          /* istanbul ignore next */
          cov_2rctqmnwfx().b[33][0]++;
          cov_2rctqmnwfx().s[147]++;
          record[col] = params[index];
        } else
        /* istanbul ignore next */
        {
          cov_2rctqmnwfx().b[33][1]++;
        }
      });
      /* istanbul ignore next */
      cov_2rctqmnwfx().s[148]++;
      record.created_at = new Date().toISOString();
      /* istanbul ignore next */
      cov_2rctqmnwfx().s[149]++;
      tableData.set(id.toString(), record);
    } else
    /* istanbul ignore next */
    {
      cov_2rctqmnwfx().b[32][1]++;
    }
  }
  handleUpdate(sql, params) {
    /* istanbul ignore next */
    cov_2rctqmnwfx().f[43]++;
    // Basic UPDATE implementation
    const tableMatch =
    /* istanbul ignore next */
    (cov_2rctqmnwfx().s[150]++, sql.match(/UPDATE\s+(\w+)/i));
    /* istanbul ignore next */
    cov_2rctqmnwfx().s[151]++;
    if (!tableMatch) {
      /* istanbul ignore next */
      cov_2rctqmnwfx().b[34][0]++;
      cov_2rctqmnwfx().s[152]++;
      return;
    } else
    /* istanbul ignore next */
    {
      cov_2rctqmnwfx().b[34][1]++;
    }
    const tableName =
    /* istanbul ignore next */
    (cov_2rctqmnwfx().s[153]++, tableMatch[1]);
    const tableData =
    /* istanbul ignore next */
    (cov_2rctqmnwfx().s[154]++, this.storage.get(tableName));
    /* istanbul ignore next */
    cov_2rctqmnwfx().s[155]++;
    if (!tableData) {
      /* istanbul ignore next */
      cov_2rctqmnwfx().b[35][0]++;
      cov_2rctqmnwfx().s[156]++;
      return;
    } else
    /* istanbul ignore next */
    {
      cov_2rctqmnwfx().b[35][1]++;
    }
    // For simplicity, update all records
    cov_2rctqmnwfx().s[157]++;
    for (const [key, record] of tableData.entries()) {
      /* istanbul ignore next */
      cov_2rctqmnwfx().s[158]++;
      record.updated_at = new Date().toISOString();
      /* istanbul ignore next */
      cov_2rctqmnwfx().s[159]++;
      tableData.set(key, record);
    }
  }
  handleDelete(sql, params) {
    /* istanbul ignore next */
    cov_2rctqmnwfx().f[44]++;
    const tableMatch =
    /* istanbul ignore next */
    (cov_2rctqmnwfx().s[160]++, sql.match(/DELETE FROM\s+(\w+)/i));
    /* istanbul ignore next */
    cov_2rctqmnwfx().s[161]++;
    if (!tableMatch) {
      /* istanbul ignore next */
      cov_2rctqmnwfx().b[36][0]++;
      cov_2rctqmnwfx().s[162]++;
      return;
    } else
    /* istanbul ignore next */
    {
      cov_2rctqmnwfx().b[36][1]++;
    }
    const tableName =
    /* istanbul ignore next */
    (cov_2rctqmnwfx().s[163]++, tableMatch[1]);
    const tableData =
    /* istanbul ignore next */
    (cov_2rctqmnwfx().s[164]++, this.storage.get(tableName));
    /* istanbul ignore next */
    cov_2rctqmnwfx().s[165]++;
    if (tableData) {
      /* istanbul ignore next */
      cov_2rctqmnwfx().b[37][0]++;
      cov_2rctqmnwfx().s[166]++;
      tableData.clear();
    } else
    /* istanbul ignore next */
    {
      cov_2rctqmnwfx().b[37][1]++;
    }
  }
  handleCreateTable(sql) {
    /* istanbul ignore next */
    cov_2rctqmnwfx().f[45]++;
    const tableMatch =
    /* istanbul ignore next */
    (cov_2rctqmnwfx().s[167]++, sql.match(/CREATE TABLE(?:\s+IF NOT EXISTS)?\s+(\w+)/i));
    /* istanbul ignore next */
    cov_2rctqmnwfx().s[168]++;
    if (tableMatch) {
      /* istanbul ignore next */
      cov_2rctqmnwfx().b[38][0]++;
      const tableName =
      /* istanbul ignore next */
      (cov_2rctqmnwfx().s[169]++, tableMatch[1]);
      /* istanbul ignore next */
      cov_2rctqmnwfx().s[170]++;
      if (!this.storage.has(tableName)) {
        /* istanbul ignore next */
        cov_2rctqmnwfx().b[39][0]++;
        cov_2rctqmnwfx().s[171]++;
        this.storage.set(tableName, new Map());
        /* istanbul ignore next */
        cov_2rctqmnwfx().s[172]++;
        this.sequences.set(tableName, 0);
      } else
      /* istanbul ignore next */
      {
        cov_2rctqmnwfx().b[39][1]++;
      }
    } else
    /* istanbul ignore next */
    {
      cov_2rctqmnwfx().b[38][1]++;
    }
  }
  createDefaultTables() {
    /* istanbul ignore next */
    cov_2rctqmnwfx().f[46]++;
    const tables =
    /* istanbul ignore next */
    (cov_2rctqmnwfx().s[173]++, ['test_data', 'test_users', 'test_projects']);
    /* istanbul ignore next */
    cov_2rctqmnwfx().s[174]++;
    for (const table of tables) {
      /* istanbul ignore next */
      cov_2rctqmnwfx().s[175]++;
      this.storage.set(table, new Map());
      /* istanbul ignore next */
      cov_2rctqmnwfx().s[176]++;
      this.sequences.set(table, 0);
    }
  }
  getNextId(table) {
    /* istanbul ignore next */
    cov_2rctqmnwfx().f[47]++;
    const current =
    /* istanbul ignore next */
    (cov_2rctqmnwfx().s[177]++,
    /* istanbul ignore next */
    (cov_2rctqmnwfx().b[40][0]++, this.sequences.get(table)) ||
    /* istanbul ignore next */
    (cov_2rctqmnwfx().b[40][1]++, 0));
    const next =
    /* istanbul ignore next */
    (cov_2rctqmnwfx().s[178]++, current + 1);
    /* istanbul ignore next */
    cov_2rctqmnwfx().s[179]++;
    this.sequences.set(table, next);
    /* istanbul ignore next */
    cov_2rctqmnwfx().s[180]++;
    return next;
  }
}
// Memory database implementation for fallback
class MemoryDatabase {
  helper;
  constructor() {
    /* istanbul ignore next */
    cov_2rctqmnwfx().f[48]++;
    cov_2rctqmnwfx().s[181]++;
    this.helper = new MemoryDatabaseTestHelper();
    /* istanbul ignore next */
    cov_2rctqmnwfx().s[182]++;
    this.helper.setup();
  }
  all(sql, params, callback) {
    /* istanbul ignore next */
    cov_2rctqmnwfx().f[49]++;
    cov_2rctqmnwfx().s[183]++;
    this.helper.getConnection().query(sql, params).then(rows => {
      /* istanbul ignore next */
      cov_2rctqmnwfx().f[50]++;
      cov_2rctqmnwfx().s[184]++;
      return callback(null, rows);
    }).catch(err => {
      /* istanbul ignore next */
      cov_2rctqmnwfx().f[51]++;
      cov_2rctqmnwfx().s[185]++;
      return callback(err, []);
    });
  }
  run(sql, params, callback) {
    /* istanbul ignore next */
    cov_2rctqmnwfx().f[52]++;
    cov_2rctqmnwfx().s[186]++;
    this.helper.getConnection().execute(sql, params).then(() => {
      /* istanbul ignore next */
      cov_2rctqmnwfx().f[53]++;
      cov_2rctqmnwfx().s[187]++;
      return callback(null);
    }).catch(err => {
      /* istanbul ignore next */
      cov_2rctqmnwfx().f[54]++;
      cov_2rctqmnwfx().s[188]++;
      return callback(err);
    });
  }
  async close() {
    /* istanbul ignore next */
    cov_2rctqmnwfx().f[55]++;
    cov_2rctqmnwfx().s[189]++;
    await this.helper.cleanup();
  }
}
// Factory functions
export function createSQLiteTestHelper(dbPath) {
  /* istanbul ignore next */
  cov_2rctqmnwfx().f[56]++;
  cov_2rctqmnwfx().s[190]++;
  return new SQLiteDatabaseTestHelper(dbPath);
}
export function createMemoryTestHelper() {
  /* istanbul ignore next */
  cov_2rctqmnwfx().f[57]++;
  cov_2rctqmnwfx().s[191]++;
  return new MemoryDatabaseTestHelper();
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,