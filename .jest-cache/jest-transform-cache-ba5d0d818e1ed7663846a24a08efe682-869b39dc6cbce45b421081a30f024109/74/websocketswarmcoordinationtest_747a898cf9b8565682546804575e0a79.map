{"file":"/home/mhugo/code/claude-code-flow/src/__tests__/integration/websocket-swarm-coordination.test.ts","mappings":"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","names":[],"sources":["/home/mhugo/code/claude-code-flow/src/__tests__/integration/websocket-swarm-coordination.test.ts"],"sourcesContent":["/**\n * Hybrid Testing - WebSocket Swarm Coordination\n * \n * Combines TDD London (mocking protocols) with Classical TDD (testing latency/throughput)\n * Perfect for real-time distributed systems\n */\n\nimport { describe, it, expect, beforeEach, afterEach, jest } from '@jest/globals';\nimport { EventEmitter } from 'events';\n\n// Mock WebSocket for protocol testing (London)\nclass MockWebSocket extends EventEmitter {\n  readyState: number = 0; // CONNECTING\n  url: string;\n  \n  static CONNECTING = 0;\n  static OPEN = 1;\n  static CLOSING = 2;\n  static CLOSED = 3;\n\n  constructor(url: string) {\n    super();\n    this.url = url;\n    // Simulate connection\n    setTimeout(() => {\n      this.readyState = MockWebSocket.OPEN;\n      this.emit('open');\n    }, 10);\n  }\n\n  send = jest.fn((data: string) => {\n    if (this.readyState !== MockWebSocket.OPEN) {\n      throw new Error('WebSocket is not open');\n    }\n    // Simulate echo for testing\n    setTimeout(() => {\n      this.emit('message', { data });\n    }, 5);\n  });\n\n  close = jest.fn(() => {\n    this.readyState = MockWebSocket.CLOSING;\n    setTimeout(() => {\n      this.readyState = MockWebSocket.CLOSED;\n      this.emit('close');\n    }, 5);\n  });\n}\n\n// Swarm Coordinator that uses WebSocket\ninterface SwarmMessage {\n  type: 'init' | 'spawn' | 'task' | 'sync' | 'heartbeat';\n  agentId?: string;\n  payload?: any;\n  timestamp: number;\n}\n\nclass SwarmCoordinator {\n  private agents = new Map<string, { lastSeen: number; status: string }>();\n  private messageHandlers = new Map<string, (msg: SwarmMessage) => void>();\n  private metrics = {\n    messagesSent: 0,\n    messagesReceived: 0,\n    averageLatency: 0,\n    latencySamples: [] as number[]\n  };\n\n  constructor(\n    private websocket: MockWebSocket | WebSocket,\n    private protocol: { encode: Function; decode: Function }\n  ) {\n    this.setupWebSocketHandlers();\n  }\n\n  private setupWebSocketHandlers() {\n    this.websocket.addEventListener('open', () => {\n      console.log('WebSocket connected');\n    });\n\n    this.websocket.addEventListener('message', (event: any) => {\n      const message = this.protocol.decode(event.data);\n      this.handleMessage(message);\n    });\n\n    this.websocket.addEventListener('error', (error: any) => {\n      console.error('WebSocket error:', error);\n    });\n  }\n\n  async broadcastMessage(message: Omit<SwarmMessage, 'timestamp'>): Promise<void> {\n    const fullMessage: SwarmMessage = {\n      ...message,\n      timestamp: Date.now()\n    };\n\n    const encoded = this.protocol.encode(fullMessage);\n    this.websocket.send(encoded);\n    this.metrics.messagesSent++;\n  }\n\n  private handleMessage(message: SwarmMessage) {\n    this.metrics.messagesReceived++;\n    \n    // Calculate latency\n    const latency = Date.now() - message.timestamp;\n    this.metrics.latencySamples.push(latency);\n    this.metrics.averageLatency = \n      this.metrics.latencySamples.reduce((a, b) => a + b, 0) / this.metrics.latencySamples.length;\n\n    // Update agent status\n    if (message.agentId) {\n      this.agents.set(message.agentId, {\n        lastSeen: Date.now(),\n        status: 'active'\n      });\n    }\n\n    // Handle specific message types\n    const handler = this.messageHandlers.get(message.type);\n    if (handler) {\n      handler(message);\n    }\n  }\n\n  onMessage(type: string, handler: (msg: SwarmMessage) => void) {\n    this.messageHandlers.set(type, handler);\n  }\n\n  async coordinateAgents(agentIds: string[], task: any): Promise<void> {\n    // Broadcast task to all agents\n    const promises = agentIds.map(agentId => \n      this.broadcastMessage({\n        type: 'task',\n        agentId,\n        payload: task\n      })\n    );\n\n    await Promise.all(promises);\n  }\n\n  getMetrics() {\n    return { ...this.metrics };\n  }\n\n  getActiveAgents(): string[] {\n    const now = Date.now();\n    const activeAgents: string[] = [];\n    \n    this.agents.forEach((info, agentId) => {\n      if (now - info.lastSeen < 30000) { // 30 second timeout\n        activeAgents.push(agentId);\n      }\n    });\n\n    return activeAgents;\n  }\n\n  async measureRoundTripTime(): Promise<number> {\n    const startTime = Date.now();\n    \n    return new Promise((resolve) => {\n      const echoHandler = (msg: SwarmMessage) => {\n        if (msg.type === 'heartbeat') {\n          const rtt = Date.now() - startTime;\n          this.messageHandlers.delete('heartbeat');\n          resolve(rtt);\n        }\n      };\n\n      this.onMessage('heartbeat', echoHandler);\n      this.broadcastMessage({ type: 'heartbeat' });\n    });\n  }\n}\n\ndescribe('WebSocket Swarm Coordination - Hybrid Testing', () => {\n  let mockWebSocket: MockWebSocket;\n  let mockProtocol: { encode: jest.Mock; decode: jest.Mock };\n  let coordinator: SwarmCoordinator;\n\n  beforeEach(() => {\n    mockWebSocket = new MockWebSocket('ws://localhost:8080');\n    mockProtocol = {\n      encode: jest.fn((msg) => JSON.stringify(msg)),\n      decode: jest.fn((data) => JSON.parse(data))\n    };\n    coordinator = new SwarmCoordinator(mockWebSocket, mockProtocol);\n  });\n\n  afterEach(() => {\n    mockWebSocket.close();\n  });\n\n  describe('Protocol Behavior (TDD London)', () => {\n    it('should encode messages before sending', async () => {\n      await new Promise(resolve => mockWebSocket.once('open', resolve));\n      \n      await coordinator.broadcastMessage({ type: 'init' });\n\n      expect(mockProtocol.encode).toHaveBeenCalledWith({\n        type: 'init',\n        timestamp: expect.any(Number)\n      });\n      expect(mockWebSocket.send).toHaveBeenCalledWith(expect.any(String));\n    });\n\n    it('should decode received messages', async () => {\n      await new Promise(resolve => mockWebSocket.once('open', resolve));\n      \n      const testMessage = { type: 'sync', timestamp: Date.now() };\n      mockWebSocket.emit('message', { data: JSON.stringify(testMessage) });\n\n      expect(mockProtocol.decode).toHaveBeenCalledWith(JSON.stringify(testMessage));\n    });\n\n    it('should handle agent coordination workflow', async () => {\n      await new Promise(resolve => mockWebSocket.once('open', resolve));\n      \n      const agentIds = ['agent-1', 'agent-2', 'agent-3'];\n      const task = { type: 'analyze', data: 'test' };\n\n      await coordinator.coordinateAgents(agentIds, task);\n\n      expect(mockWebSocket.send).toHaveBeenCalledTimes(3);\n      agentIds.forEach(agentId => {\n        expect(mockProtocol.encode).toHaveBeenCalledWith(\n          expect.objectContaining({\n            type: 'task',\n            agentId,\n            payload: task\n          })\n        );\n      });\n    });\n  });\n\n  describe('Performance Characteristics (Classical TDD)', () => {\n    it('should maintain low latency for message round trips', async () => {\n      await new Promise(resolve => mockWebSocket.once('open', resolve));\n      \n      // Test actual round-trip time\n      const rtt = await coordinator.measureRoundTripTime();\n      \n      // Should be very fast for local mock\n      expect(rtt).toBeLessThan(50); // 50ms max for local\n    });\n\n    it('should track message metrics accurately', async () => {\n      await new Promise(resolve => mockWebSocket.once('open', resolve));\n      \n      // Send multiple messages\n      for (let i = 0; i < 10; i++) {\n        await coordinator.broadcastMessage({ type: 'sync' });\n      }\n\n      // Wait for echo responses\n      await new Promise(resolve => setTimeout(resolve, 100));\n\n      const metrics = coordinator.getMetrics();\n      expect(metrics.messagesSent).toBe(10);\n      expect(metrics.messagesReceived).toBe(10); // Due to echo\n      expect(metrics.averageLatency).toBeLessThan(20); // Should be fast\n    });\n\n    it('should handle high-throughput message bursts', async () => {\n      await new Promise(resolve => mockWebSocket.once('open', resolve));\n      \n      const messageCount = 1000;\n      const startTime = performance.now();\n\n      // Send burst of messages\n      const promises = [];\n      for (let i = 0; i < messageCount; i++) {\n        promises.push(coordinator.broadcastMessage({ \n          type: 'task',\n          agentId: `agent-${i % 10}`,\n          payload: { index: i }\n        }));\n      }\n\n      await Promise.all(promises);\n      const duration = performance.now() - startTime;\n\n      // Should handle 1000 messages quickly\n      expect(duration).toBeLessThan(1000); // < 1 second\n      \n      const throughput = messageCount / (duration / 1000);\n      expect(throughput).toBeGreaterThan(1000); // > 1000 msg/sec\n    });\n  });\n\n  describe('Agent Management (Hybrid)', () => {\n    it('should track active agents based on heartbeats', async () => {\n      await new Promise(resolve => mockWebSocket.once('open', resolve));\n      \n      // Mock behavior - agents sending heartbeats\n      const agents = ['agent-1', 'agent-2', 'agent-3'];\n      \n      for (const agentId of agents) {\n        mockWebSocket.emit('message', { \n          data: JSON.stringify({\n            type: 'heartbeat',\n            agentId,\n            timestamp: Date.now()\n          })\n        });\n      }\n\n      await new Promise(resolve => setTimeout(resolve, 10));\n\n      // Test actual state\n      const activeAgents = coordinator.getActiveAgents();\n      expect(activeAgents).toHaveLength(3);\n      expect(activeAgents).toEqual(expect.arrayContaining(agents));\n    });\n\n    it('should handle connection failures gracefully', async () => {\n      await new Promise(resolve => mockWebSocket.once('open', resolve));\n      \n      // Track errors\n      let errorCount = 0;\n      coordinator.onMessage('error', () => errorCount++);\n\n      // Simulate connection drop\n      mockWebSocket.readyState = MockWebSocket.CLOSED;\n      \n      // Try to send message\n      await expect(coordinator.broadcastMessage({ type: 'test' }))\n        .rejects.toThrow('WebSocket is not open');\n\n      // Verify protocol wasn't called for failed send\n      expect(mockProtocol.encode).toHaveBeenCalledTimes(0);\n    });\n  });\n\n  describe('Real-time Coordination (Hybrid)', () => {\n    it('should synchronize multiple agents within time window', async () => {\n      await new Promise(resolve => mockWebSocket.once('open', resolve));\n      \n      const syncWindow = 100; // 100ms sync window\n      const agentCount = 5;\n      const syncTimes: number[] = [];\n\n      // Set up sync handler\n      coordinator.onMessage('sync', (msg) => {\n        syncTimes.push(Date.now());\n      });\n\n      // Broadcast sync request\n      const startTime = Date.now();\n      await coordinator.broadcastMessage({ type: 'sync' });\n\n      // Simulate agents responding\n      for (let i = 0; i < agentCount; i++) {\n        setTimeout(() => {\n          mockWebSocket.emit('message', {\n            data: JSON.stringify({\n              type: 'sync',\n              agentId: `agent-${i}`,\n              timestamp: Date.now()\n            })\n          });\n        }, Math.random() * 50); // Random delay up to 50ms\n      }\n\n      // Wait for all responses\n      await new Promise(resolve => setTimeout(resolve, syncWindow));\n\n      // Verify all agents synced within window\n      expect(syncTimes).toHaveLength(agentCount);\n      \n      const maxTime = Math.max(...syncTimes);\n      const minTime = Math.min(...syncTimes);\n      expect(maxTime - minTime).toBeLessThan(syncWindow);\n    });\n  });\n});\n\n/**\n * Hybrid Testing Benefits:\n * \n * 1. Mock the protocol/transport layer (London)\n * 2. Test real performance metrics (Classical)\n * 3. Verify both interactions AND results\n * 4. Suitable for real-time systems\n * 5. Balance between isolation and integration\n * \n * Use this approach for:\n * - WebSocket communication\n * - Real-time coordination\n * - Network protocols\n * - Streaming systems\n * - Performance-critical integrations\n */"],"version":3}