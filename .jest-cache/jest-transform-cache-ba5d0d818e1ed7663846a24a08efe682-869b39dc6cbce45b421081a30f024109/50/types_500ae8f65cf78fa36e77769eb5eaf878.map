{"version":3,"names":[],"sources":["/home/mhugo/code/claude-code-flow/src/__tests__/helpers/types.ts"],"sourcesContent":["/**\n * Type definitions for test helper utilities\n */\n\nexport interface MockConfiguration {\n  /** Mock strategy: 'strict' for London School, 'minimal' for Classical */\n  strategy: 'strict' | 'minimal' | 'hybrid';\n  /** Auto-generate return values based on method signatures */\n  autoGenerate?: boolean;\n  /** Track all method calls for interaction verification */\n  trackInteractions?: boolean;\n  /** Reset mocks between tests automatically */\n  autoReset?: boolean;\n}\n\nexport interface TestDataOptions {\n  /** Seed for reproducible random data generation */\n  seed?: number;\n  /** Size constraints for generated data */\n  size?: {\n    min?: number;\n    max?: number;\n    default?: number;\n  };\n  /** Data validation rules */\n  validation?: {\n    required?: string[];\n    optional?: string[];\n    constraints?: Record<string, any>;\n  };\n}\n\nexport interface PerformanceTestOptions {\n  /** Number of iterations for performance tests */\n  iterations?: number;\n  /** Warm-up iterations before measurement */\n  warmup?: number;\n  /** Maximum acceptable execution time (ms) */\n  maxExecutionTime?: number;\n  /** Memory usage thresholds */\n  memoryThresholds?: {\n    heap?: number;\n    external?: number;\n  };\n  /** Statistical analysis options */\n  statistics?: {\n    percentiles?: number[];\n    includeVariance?: boolean;\n    includeDeviation?: boolean;\n  };\n}\n\nexport interface IntegrationTestConfig {\n  /** Test environment setup */\n  environment?: {\n    database?: 'memory' | 'sqlite' | 'postgres';\n    filesystem?: 'mock' | 'temp' | 'real';\n    network?: 'mock' | 'localhost' | 'integration';\n  };\n  /** Service dependencies to start */\n  services?: string[];\n  /** Cleanup strategy */\n  cleanup?: 'aggressive' | 'conservative' | 'manual';\n  /** Timeout for integration operations */\n  timeout?: number;\n}\n\nexport interface AssertionOptions {\n  /** Precision for floating point comparisons */\n  precision?: number;\n  /** Tolerance for performance assertions */\n  tolerance?: number;\n  /** Custom error messages */\n  messages?: Record<string, string>;\n  /** Retry configuration for flaky assertions */\n  retry?: {\n    attempts?: number;\n    delay?: number;\n    backoff?: 'linear' | 'exponential';\n  };\n}\n\n// Mock object types\nexport interface MockObject {\n  [key: string]: jest.Mock | MockObject;\n}\n\nexport interface MockBuilder {\n  create<T>(type: new (...args: any[]) => T, config?: MockConfiguration): T;\n  createPartial<T>(overrides: Partial<T>): T;\n  createSpy<T extends object>(obj: T, methods?: (keyof T)[]): T;\n}\n\n// Test data types\nexport interface UserTestData {\n  id: string;\n  name: string;\n  email: string;\n  preferences?: Record<string, any>;\n  metadata?: Record<string, any>;\n}\n\nexport interface ProjectTestData {\n  name: string;\n  path: string;\n  type: 'typescript' | 'javascript' | 'python' | 'rust';\n  structure: Record<string, any>;\n  dependencies?: string[];\n}\n\nexport interface SwarmTestData {\n  id: string;\n  topology: 'mesh' | 'hierarchical' | 'ring' | 'star';\n  agents: AgentTestData[];\n  configuration: Record<string, any>;\n}\n\nexport interface AgentTestData {\n  id: string;\n  type: 'researcher' | 'coder' | 'analyst' | 'tester' | 'coordinator';\n  capabilities: string[];\n  state: 'idle' | 'working' | 'error' | 'completed';\n}\n\n// Performance measurement types\nexport interface PerformanceMetrics {\n  executionTime: number;\n  memoryUsage: {\n    heap: number;\n    external: number;\n    total: number;\n  };\n  cpuUsage?: number;\n  throughput?: number;\n  statistics?: {\n    mean: number;\n    median: number;\n    p95: number;\n    p99: number;\n    variance: number;\n    standardDeviation: number;\n  };\n}\n\n// Integration test types\nexport interface DatabaseTestHelper {\n  setup(): Promise<void>;\n  cleanup(): Promise<void>;\n  seed(data: any[]): Promise<void>;\n  reset(): Promise<void>;\n  getConnection(): any;\n}\n\nexport interface FileSystemTestHelper {\n  createTempDir(): Promise<string>;\n  createFile(path: string, content: string): Promise<void>;\n  cleanup(): Promise<void>;\n  mockFileSystem(): void;\n  restoreFileSystem(): void;\n}\n\nexport interface NetworkTestHelper {\n  startMockServer(port?: number): Promise<void>;\n  stopMockServer(): Promise<void>;\n  mockRequest(path: string, response: any): void;\n  captureRequests(): any[];\n  clearRequests(): void;\n}"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA","ignoreList":[]}