2431c1190e1a0993c28d9f11b5168732
/**
 * SQLite Persistence Integration Tests
 *
 * Hybrid Testing Approach:
 * - London School: Mock connections and external dependencies
 * - Classical School: Test actual data operations and persistence
 */
import { Database } from 'sqlite3';
import { tmpdir } from 'os';
import { join } from 'path';
import { unlink, access } from 'fs/promises';
import { constants } from 'fs';
// SQLite Store Implementation to test
class SQLiteMemoryStore {
    db = null;
    dbPath;
    isInitialized = false;
    constructor(dbPath) {
        this.dbPath = dbPath;
    }
    async initialize() {
        return new Promise((resolve, reject) => {
            this.db = new Database(this.dbPath, (err) => {
                if (err) {
                    reject(err);
                    return;
                }
                this.isInitialized = true;
                this.createTables().then(resolve).catch(reject);
            });
        });
    }
    async createTables() {
        const queries = [
            `CREATE TABLE IF NOT EXISTS sessions (
        id TEXT PRIMARY KEY,
        data TEXT NOT NULL,
        metadata TEXT,
        created_at INTEGER NOT NULL,
        updated_at INTEGER NOT NULL
      )`,
            `CREATE INDEX IF NOT EXISTS idx_sessions_created ON sessions(created_at)`,
            `CREATE INDEX IF NOT EXISTS idx_sessions_updated ON sessions(updated_at)`
        ];
        for (const query of queries) {
            await this.run(query);
        }
    }
    async store(sessionId, data, metadata) {
        if (!this.isInitialized)
            throw new Error('Database not initialized');
        const now = Date.now();
        await this.run(`INSERT OR REPLACE INTO sessions (id, data, metadata, created_at, updated_at) 
       VALUES (?, ?, ?, ?, ?)`, [sessionId, JSON.stringify(data), JSON.stringify(metadata || {}), now, now]);
    }
    async retrieve(sessionId) {
        if (!this.isInitialized)
            throw new Error('Database not initialized');
        return this.get('SELECT data, metadata FROM sessions WHERE id = ?', [sessionId]);
    }
    async listSessions() {
        if (!this.isInitialized)
            throw new Error('Database not initialized');
        const rows = await this.all('SELECT id FROM sessions ORDER BY updated_at DESC');
        return rows.map((row) => row.id);
    }
    async deleteSession(sessionId) {
        if (!this.isInitialized)
            throw new Error('Database not initialized');
        const result = await this.run('DELETE FROM sessions WHERE id = ?', [sessionId]);
        return result.changes > 0;
    }
    async getStats() {
        if (!this.isInitialized)
            throw new Error('Database not initialized');
        const result = await this.get('SELECT COUNT(*) as count, SUM(LENGTH(data)) as size FROM sessions');
        return {
            totalSessions: result.count || 0,
            totalSize: result.size || 0
        };
    }
    run(query, params = []) {
        return new Promise((resolve, reject) => {
            this.db.run(query, params, function (err) {
                if (err)
                    reject(err);
                else
                    resolve({ changes: this.changes, lastID: this.lastID });
            });
        });
    }
    get(query, params = []) {
        return new Promise((resolve, reject) => {
            this.db.get(query, params, (err, row) => {
                if (err)
                    reject(err);
                else
                    resolve(row);
            });
        });
    }
    all(query, params = []) {
        return new Promise((resolve, reject) => {
            this.db.all(query, params, (err, rows) => {
                if (err)
                    reject(err);
                else
                    resolve(rows);
            });
        });
    }
    async close() {
        if (this.db) {
            return new Promise((resolve, reject) => {
                this.db.close((err) => {
                    if (err)
                        reject(err);
                    else {
                        this.isInitialized = false;
                        resolve();
                    }
                });
            });
        }
    }
}
describe('SQLite Persistence Integration Tests', () => {
    let store;
    let dbPath;
    let mockConnection;
    beforeEach(() => {
        // Create temporary database path for classical tests
        dbPath = join(tmpdir(), `test-sqlite-${Date.now()}.db`);
        // Create mock connection for London-style tests
        mockConnection = {
            isOpen: true,
            query: jest.fn(),
            run: jest.fn(),
            close: jest.fn(),
            beginTransaction: jest.fn(),
            commit: jest.fn(),
            rollback: jest.fn()
        };
    });
    afterEach(async () => {
        if (store) {
            await store.close();
        }
        // Clean up test database file
        try {
            await access(dbPath, constants.F_OK);
            await unlink(dbPath);
        }
        catch {
            // File doesn't exist, ignore
        }
    });
    describe('Connection Management (London School)', () => {
        it('should handle connection initialization gracefully', async () => {
            const mockDb = {
                connect: jest.fn().mockResolvedValue(mockConnection),
                close: jest.fn().mockResolvedValue(undefined)
            };
            mockConnection.run.mockResolvedValue({ changes: 0 });
            // Test the connection flow without actual database
            expect(mockDb.connect).toHaveBeenCalledTimes(0);
            await mockDb.connect();
            expect(mockDb.connect).toHaveBeenCalledTimes(1);
            expect(mockConnection.isOpen).toBe(true);
        });
        it('should handle connection failures appropriately', async () => {
            const mockDb = {
                connect: jest.fn().mockRejectedValue(new Error('Connection failed'))
            };
            await expect(mockDb.connect()).rejects.toThrow('Connection failed');
        });
        it('should mock query execution properly', async () => {
            mockConnection.query.mockResolvedValue([
                { id: 'session1', data: '{"test": true}' }
            ]);
            const result = await mockConnection.query('SELECT * FROM sessions');
            expect(result).toHaveLength(1);
            expect(result[0].id).toBe('session1');
            expect(mockConnection.query).toHaveBeenCalledWith('SELECT * FROM sessions');
        });
        it('should handle transaction mocking', async () => {
            mockConnection.beginTransaction.mockResolvedValue(undefined);
            mockConnection.commit.mockResolvedValue(undefined);
            mockConnection.rollback.mockResolvedValue(undefined);
            await mockConnection.beginTransaction();
            await mockConnection.commit();
            expect(mockConnection.beginTransaction).toHaveBeenCalledTimes(1);
            expect(mockConnection.commit).toHaveBeenCalledTimes(1);
            expect(mockConnection.rollback).toHaveBeenCalledTimes(0);
        });
    });
    describe('Data Operations (Classical School)', () => {
        beforeEach(async () => {
            store = new SQLiteMemoryStore(dbPath);
            await store.initialize();
        });
        it('should create tables on initialization', async () => {
            // This is tested implicitly by successful initialization
            const stats = await store.getStats();
            expect(stats.totalSessions).toBe(0);
            expect(stats.totalSize).toBe(0);
        });
        it('should store and retrieve session data', async () => {
            const sessionId = 'test-session-1';
            const testData = { message: 'Hello World', timestamp: Date.now() };
            const metadata = { source: 'test', version: '1.0' };
            await store.store(sessionId, testData, metadata);
            const retrieved = await store.retrieve(sessionId);
            expect(retrieved).toBeDefined();
            expect(JSON.parse(retrieved.data)).toEqual(testData);
            expect(JSON.parse(retrieved.metadata)).toEqual(metadata);
        });
        it('should handle complex data structures', async () => {
            const sessionId = 'complex-session';
            const complexData = {
                nested: {
                    array: [1, 2, 3, { deep: 'value' }],
                    map: new Map([['key1', 'value1'], ['key2', 'value2']]),
                    date: new Date().toISOString(),
                    buffer: Buffer.from('test data').toString('base64')
                },
                functions: null, // Functions can't be serialized
                undefined: null, // Undefined becomes null
                symbols: null // Symbols can't be serialized
            };
            await store.store(sessionId, complexData);
            const retrieved = await store.retrieve(sessionId);
            const parsedData = JSON.parse(retrieved.data);
            expect(parsedData.nested.array).toEqual([1, 2, 3, { deep: 'value' }]);
            expect(parsedData.nested.date).toBe(complexData.nested.date);
            expect(parsedData.nested.buffer).toBe(complexData.nested.buffer);
        });
        it('should list sessions in correct order', async () => {
            const sessions = ['session-1', 'session-2', 'session-3'];
            for (let i = 0; i < sessions.length; i++) {
                await store.store(sessions[i], { index: i });
                // Small delay to ensure different timestamps
                await new Promise(resolve => setTimeout(resolve, 10));
            }
            const listed = await store.listSessions();
            expect(listed).toHaveLength(3);
            // Should be in reverse order (most recent first)
            expect(listed).toEqual(['session-3', 'session-2', 'session-1']);
        });
        it('should delete sessions correctly', async () => {
            const sessionId = 'delete-test';
            await store.store(sessionId, { test: 'data' });
            const deleted = await store.deleteSession(sessionId);
            expect(deleted).toBe(true);
            const retrieved = await store.retrieve(sessionId);
            expect(retrieved).toBeUndefined();
            // Deleting non-existent session should return false
            const deletedAgain = await store.deleteSession(sessionId);
            expect(deletedAgain).toBe(false);
        });
        it('should calculate statistics accurately', async () => {
            const testData = { message: 'Test data for statistics' };
            await store.store('stats-1', testData);
            await store.store('stats-2', { ...testData, extra: 'more data' });
            const stats = await store.getStats();
            expect(stats.totalSessions).toBe(2);
            expect(stats.totalSize).toBeGreaterThan(0);
            // Size should be reasonable (JSON stringified data)
            expect(stats.totalSize).toBeLessThan(1000); // Sanity check
        });
        it('should handle large datasets efficiently', async () => {
            const startTime = Date.now();
            const largeDataSet = Array.from({ length: 1000 }, (_, i) => ({
                id: i,
                data: `Large data chunk ${i}`.repeat(10),
                timestamp: Date.now() + i
            }));
            for (let i = 0; i < 100; i++) {
                await store.store(`large-session-${i}`, largeDataSet);
            }
            const endTime = Date.now();
            const duration = endTime - startTime;
            // Should complete within reasonable time (adjust based on performance requirements)
            expect(duration).toBeLessThan(5000); // 5 seconds max
            const stats = await store.getStats();
            expect(stats.totalSessions).toBe(100);
        });
        it('should maintain data integrity across operations', async () => {
            const originalData = {
                critical: 'important data',
                timestamp: Date.now(),
                nested: { values: [1, 2, 3, 4, 5] }
            };
            await store.store('integrity-test', originalData);
            // Retrieve multiple times to ensure consistency
            for (let i = 0; i < 10; i++) {
                const retrieved = await store.retrieve('integrity-test');
                const parsed = JSON.parse(retrieved.data);
                expect(parsed).toEqual(originalData);
            }
        });
    });
    describe('Session Management', () => {
        beforeEach(async () => {
            store = new SQLiteMemoryStore(dbPath);
            await store.initialize();
        });
        it('should handle concurrent session operations', async () => {
            const concurrentOperations = Array.from({ length: 10 }, async (_, i) => {
                const sessionId = `concurrent-${i}`;
                const data = { index: i, timestamp: Date.now() };
                await store.store(sessionId, data);
                return store.retrieve(sessionId);
            });
            const results = await Promise.all(concurrentOperations);
            expect(results).toHaveLength(10);
            results.forEach((result, index) => {
                expect(result).toBeDefined();
                const parsed = JSON.parse(result.data);
                expect(parsed.index).toBe(index);
            });
        });
        it('should handle session updates correctly', async () => {
            const sessionId = 'update-test';
            const initialData = { version: 1, content: 'initial' };
            const updatedData = { version: 2, content: 'updated', extra: 'field' };
            await store.store(sessionId, initialData);
            await store.store(sessionId, updatedData);
            const retrieved = await store.retrieve(sessionId);
            const parsed = JSON.parse(retrieved.data);
            expect(parsed).toEqual(updatedData);
            expect(parsed.version).toBe(2);
            expect(parsed.extra).toBe('field');
        });
    });
    describe('Error Handling', () => {
        it('should throw error when not initialized', async () => {
            const uninitializedStore = new SQLiteMemoryStore(dbPath);
            await expect(uninitializedStore.store('test', {})).rejects.toThrow('Database not initialized');
            await expect(uninitializedStore.retrieve('test')).rejects.toThrow('Database not initialized');
            await expect(uninitializedStore.listSessions()).rejects.toThrow('Database not initialized');
        });
        it('should handle invalid database paths gracefully', async () => {
            const invalidStore = new SQLiteMemoryStore('/invalid/path/database.db');
            await expect(invalidStore.initialize()).rejects.toThrow();
        });
        it('should handle corrupted data gracefully', async () => {
            await store.initialize();
            // Store valid data first
            await store.store('test-session', { valid: 'data' });
            // The store should handle JSON parsing errors gracefully
            // This would require modifying the store to handle parse errors
            const retrieved = await store.retrieve('test-session');
            expect(retrieved).toBeDefined();
        });
    });
    describe('Performance Benchmarks', () => {
        beforeEach(async () => {
            store = new SQLiteMemoryStore(dbPath);
            await store.initialize();
        });
        it('should benchmark write operations', async () => {
            const iterations = 1000;
            const testData = { benchmark: 'write test', data: 'x'.repeat(1000) };
            const startTime = process.hrtime.bigint();
            for (let i = 0; i < iterations; i++) {
                await store.store(`benchmark-write-${i}`, testData);
            }
            const endTime = process.hrtime.bigint();
            const durationMs = Number(endTime - startTime) / 1_000_000;
            const operationsPerSecond = (iterations / durationMs) * 1000;
            console.log(`Write performance: ${operationsPerSecond.toFixed(0)} ops/sec`);
            // Should handle at least 100 writes per second
            expect(operationsPerSecond).toBeGreaterThan(100);
        });
        it('should benchmark read operations', async () => {
            const iterations = 100;
            const testData = { benchmark: 'read test', data: 'y'.repeat(1000) };
            // Pre-populate data
            for (let i = 0; i < iterations; i++) {
                await store.store(`benchmark-read-${i}`, testData);
            }
            const startTime = process.hrtime.bigint();
            for (let i = 0; i < iterations; i++) {
                await store.retrieve(`benchmark-read-${i}`);
            }
            const endTime = process.hrtime.bigint();
            const durationMs = Number(endTime - startTime) / 1_000_000;
            const operationsPerSecond = (iterations / durationMs) * 1000;
            console.log(`Read performance: ${operationsPerSecond.toFixed(0)} ops/sec`);
            // Should handle at least 200 reads per second
            expect(operationsPerSecond).toBeGreaterThan(200);
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,