{"file":"/home/mhugo/code/claude-code-flow/src/__tests__/unit/london/mcp-protocol/protocol-message-validation.test.ts","mappings":"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","names":[],"sources":["/home/mhugo/code/claude-code-flow/src/__tests__/unit/london/mcp-protocol/protocol-message-validation.test.ts"],"sourcesContent":["/**\n * MCP Protocol Message Validation - TDD London Style\n * \n * Tests protocol message validation using London School principles:\n * - Mock all dependencies to focus on interaction contracts\n * - Test behavior and communication patterns, not implementation\n * - Outside-in development from protocol requirements\n * - Verify the conversation between components\n */\n\nimport { jest, describe, it, expect, beforeEach, afterEach } from '@jest/globals';\nimport type {\n  MCPRequest,\n  MCPResponse,\n  MCPNotification,\n  MCPError,\n  MCPProtocolVersion,\n  MCPCapabilities\n} from '../../../../utils/types';\n\n// === MOCK DEPENDENCIES (London School Contract Definition) ===\n\nconst mockSchemaValidator = {\n  validateJsonRpc: jest.fn(),\n  validateMethod: jest.fn(),\n  validateParams: jest.fn(),\n  validateVersion: jest.fn(),\n  getSchemaForMethod: jest.fn()\n};\n\nconst mockLogger = {\n  debug: jest.fn(),\n  info: jest.fn(),\n  warn: jest.fn(),\n  error: jest.fn()\n};\n\nconst mockMetricsCollector = {\n  recordValidation: jest.fn(),\n  recordValidationError: jest.fn(),\n  incrementCounter: jest.fn()\n};\n\n// === CONTRACT INTERFACES ===\n\ninterface MessageValidatorContract {\n  validate(message: unknown): Promise<ValidationResult>;\n  validateRequest(request: MCPRequest): Promise<ValidationResult>;\n  validateResponse(response: MCPResponse): Promise<ValidationResult>;\n  validateNotification(notification: MCPNotification): Promise<ValidationResult>;\n}\n\ninterface ValidationResult {\n  valid: boolean;\n  errors: ValidationError[];\n  message?: string;\n}\n\ninterface ValidationError {\n  field: string;\n  code: string;\n  message: string;\n  expected?: unknown;\n  actual?: unknown;\n}\n\n// === MOCK IMPLEMENTATION ===\n\nclass MockMCPMessageValidator implements MessageValidatorContract {\n  constructor(\n    private schemaValidator = mockSchemaValidator,\n    private logger = mockLogger,\n    private metrics = mockMetricsCollector\n  ) {}\n\n  async validate(message: unknown): Promise<ValidationResult> {\n    this.logger.debug('Validating MCP message', { messageType: typeof message });\n    \n    const jsonRpcResult = this.schemaValidator.validateJsonRpc(message);\n    if (!jsonRpcResult.valid) {\n      this.metrics.recordValidationError('jsonrpc_invalid');\n      return { valid: false, errors: jsonRpcResult.errors };\n    }\n\n    const mcpMessage = message as MCPRequest | MCPResponse | MCPNotification;\n    \n    if ('id' in mcpMessage && 'method' in mcpMessage) {\n      return this.validateRequest(mcpMessage as MCPRequest);\n    } else if ('id' in mcpMessage && ('result' in mcpMessage || 'error' in mcpMessage)) {\n      return this.validateResponse(mcpMessage as MCPResponse);\n    } else if ('method' in mcpMessage && !('id' in mcpMessage)) {\n      return this.validateNotification(mcpMessage as MCPNotification);\n    }\n\n    return { valid: false, errors: [{ field: 'message', code: 'UNKNOWN_TYPE', message: 'Unknown message type' }] };\n  }\n\n  async validateRequest(request: MCPRequest): Promise<ValidationResult> {\n    this.logger.debug('Validating MCP request', { method: request.method });\n    \n    const methodResult = this.schemaValidator.validateMethod(request.method);\n    if (!methodResult.valid) {\n      this.metrics.recordValidationError('method_invalid');\n      return { valid: false, errors: methodResult.errors };\n    }\n\n    const schema = this.schemaValidator.getSchemaForMethod(request.method);\n    const paramsResult = this.schemaValidator.validateParams(request.params, schema);\n    \n    if (!paramsResult.valid) {\n      this.metrics.recordValidationError('params_invalid');\n      return { valid: false, errors: paramsResult.errors };\n    }\n\n    this.metrics.recordValidation('request_valid');\n    return { valid: true, errors: [] };\n  }\n\n  async validateResponse(response: MCPResponse): Promise<ValidationResult> {\n    this.logger.debug('Validating MCP response', { id: response.id });\n    \n    if (response.error) {\n      const errorValid = this.validateError(response.error);\n      if (!errorValid.valid) {\n        this.metrics.recordValidationError('error_invalid');\n        return errorValid;\n      }\n    }\n\n    this.metrics.recordValidation('response_valid');\n    return { valid: true, errors: [] };\n  }\n\n  async validateNotification(notification: MCPNotification): Promise<ValidationResult> {\n    this.logger.debug('Validating MCP notification', { method: notification.method });\n    \n    const methodResult = this.schemaValidator.validateMethod(notification.method);\n    if (!methodResult.valid) {\n      this.metrics.recordValidationError('notification_method_invalid');\n      return { valid: false, errors: methodResult.errors };\n    }\n\n    this.metrics.recordValidation('notification_valid');\n    return { valid: true, errors: [] };\n  }\n\n  private validateError(error: MCPError): ValidationResult {\n    const errors: ValidationError[] = [];\n    \n    if (typeof error.code !== 'number') {\n      errors.push({ field: 'error.code', code: 'INVALID_TYPE', message: 'Error code must be a number' });\n    }\n    \n    if (typeof error.message !== 'string') {\n      errors.push({ field: 'error.message', code: 'INVALID_TYPE', message: 'Error message must be a string' });\n    }\n\n    return { valid: errors.length === 0, errors };\n  }\n}\n\ndescribe('MCP Protocol Message Validation - London TDD', () => {\n  \n  describe('🎯 Acceptance Tests - Protocol Compliance', () => {\n    \n    describe('JSON-RPC 2.0 Base Protocol Validation', () => {\n      it('should validate required JSON-RPC 2.0 fields in requests', async () => {\n        // Arrange - Mock valid JSON-RPC validation\n        mockSchemaValidator.validateJsonRpc.mockReturnValue({ \n          valid: true, \n          errors: [] \n        });\n        mockSchemaValidator.validateMethod.mockReturnValue({ \n          valid: true, \n          errors: [] \n        });\n        mockSchemaValidator.getSchemaForMethod.mockReturnValue({ type: 'object' });\n        mockSchemaValidator.validateParams.mockReturnValue({ \n          valid: true, \n          errors: [] \n        });\n\n        const validator = new MockMCPMessageValidator();\n        \n        const validRequest: MCPRequest = {\n          jsonrpc: '2.0',\n          id: 'test-123',\n          method: 'tools/list',\n          params: {}\n        };\n\n        // Act - Validate the request\n        const result = await validator.validate(validRequest);\n\n        // Assert - Verify JSON-RPC validation conversation\n        expect(mockSchemaValidator.validateJsonRpc).toHaveBeenCalledWith(validRequest);\n        expect(mockSchemaValidator.validateMethod).toHaveBeenCalledWith('tools/list');\n        expect(mockSchemaValidator.validateParams).toHaveBeenCalledWith(\n          {}, \n          { type: 'object' }\n        );\n        expect(mockMetricsCollector.recordValidation).toHaveBeenCalledWith('request_valid');\n        expect(result.valid).toBe(true);\n      });\n\n      it('should reject messages with invalid JSON-RPC version', async () => {\n        // Arrange - Mock JSON-RPC validation failure\n        mockSchemaValidator.validateJsonRpc.mockReturnValue({ \n          valid: false, \n          errors: [{ \n            field: 'jsonrpc', \n            code: 'INVALID_VERSION', \n            message: 'JSON-RPC version must be \"2.0\"' \n          }] \n        });\n\n        const validator = new MockMCPMessageValidator();\n        \n        const invalidRequest = {\n          jsonrpc: '1.0', // Invalid version\n          id: 'test-123',\n          method: 'tools/list'\n        };\n\n        // Act - Validate invalid request\n        const result = await validator.validate(invalidRequest);\n\n        // Assert - Verify error handling conversation\n        expect(mockSchemaValidator.validateJsonRpc).toHaveBeenCalledWith(invalidRequest);\n        expect(mockMetricsCollector.recordValidationError).toHaveBeenCalledWith('jsonrpc_invalid');\n        expect(result.valid).toBe(false);\n        expect(result.errors).toHaveLength(1);\n        expect(result.errors[0].code).toBe('INVALID_VERSION');\n      });\n    });\n\n    describe('MCP Method Validation', () => {\n      it('should validate standard MCP methods', async () => {\n        // Arrange - Mock standard MCP method validation\n        mockSchemaValidator.validateJsonRpc.mockReturnValue({ valid: true, errors: [] });\n        mockSchemaValidator.validateMethod.mockReturnValue({ valid: true, errors: [] });\n        mockSchemaValidator.getSchemaForMethod.mockReturnValue({ type: 'object' });\n        mockSchemaValidator.validateParams.mockReturnValue({ valid: true, errors: [] });\n\n        const validator = new MockMCPMessageValidator();\n\n        const standardMethods = [\n          'initialize',\n          'tools/list',\n          'tools/call',\n          'resources/list',\n          'resources/read',\n          'prompts/list',\n          'prompts/get',\n          'logging/setLevel'\n        ];\n\n        // Act - Validate each standard method\n        for (const method of standardMethods) {\n          const request: MCPRequest = {\n            jsonrpc: '2.0',\n            id: `test-${method}`,\n            method,\n            params: {}\n          };\n\n          const result = await validator.validate(request);\n\n          // Assert - Verify method validation conversation\n          expect(mockSchemaValidator.validateMethod).toHaveBeenCalledWith(method);\n          expect(result.valid).toBe(true);\n        }\n\n        expect(mockSchemaValidator.validateMethod).toHaveBeenCalledTimes(standardMethods.length);\n      });\n\n      it('should reject unknown methods', async () => {\n        // Arrange - Mock unknown method rejection\n        mockSchemaValidator.validateJsonRpc.mockReturnValue({ valid: true, errors: [] });\n        mockSchemaValidator.validateMethod.mockReturnValue({ \n          valid: false, \n          errors: [{ \n            field: 'method', \n            code: 'UNKNOWN_METHOD', \n            message: 'Method not recognized' \n          }] \n        });\n\n        const validator = new MockMCPMessageValidator();\n        \n        const requestWithUnknownMethod: MCPRequest = {\n          jsonrpc: '2.0',\n          id: 'test-123',\n          method: 'unknown/method',\n          params: {}\n        };\n\n        // Act - Validate unknown method\n        const result = await validator.validate(requestWithUnknownMethod);\n\n        // Assert - Verify unknown method handling\n        expect(mockSchemaValidator.validateMethod).toHaveBeenCalledWith('unknown/method');\n        expect(mockMetricsCollector.recordValidationError).toHaveBeenCalledWith('method_invalid');\n        expect(result.valid).toBe(false);\n        expect(result.errors[0].code).toBe('UNKNOWN_METHOD');\n      });\n    });\n\n    describe('Parameter Validation', () => {\n      it('should validate parameters against method schemas', async () => {\n        // Arrange - Mock parameter validation\n        mockSchemaValidator.validateJsonRpc.mockReturnValue({ valid: true, errors: [] });\n        mockSchemaValidator.validateMethod.mockReturnValue({ valid: true, errors: [] });\n        \n        const toolCallSchema = {\n          type: 'object',\n          required: ['name'],\n          properties: {\n            name: { type: 'string' },\n            arguments: { type: 'object' }\n          }\n        };\n        \n        mockSchemaValidator.getSchemaForMethod.mockReturnValue(toolCallSchema);\n        mockSchemaValidator.validateParams.mockReturnValue({ valid: true, errors: [] });\n\n        const validator = new MockMCPMessageValidator();\n        \n        const toolCallRequest: MCPRequest = {\n          jsonrpc: '2.0',\n          id: 'tool-call-1',\n          method: 'tools/call',\n          params: {\n            name: 'analyze_code',\n            arguments: { \n              language: 'typescript',\n              file: 'src/main.ts' \n            }\n          }\n        };\n\n        // Act - Validate tool call with parameters\n        const result = await validator.validate(toolCallRequest);\n\n        // Assert - Verify parameter validation conversation\n        expect(mockSchemaValidator.getSchemaForMethod).toHaveBeenCalledWith('tools/call');\n        expect(mockSchemaValidator.validateParams).toHaveBeenCalledWith(\n          toolCallRequest.params,\n          toolCallSchema\n        );\n        expect(result.valid).toBe(true);\n      });\n\n      it('should reject invalid parameters', async () => {\n        // Arrange - Mock parameter validation failure\n        mockSchemaValidator.validateJsonRpc.mockReturnValue({ valid: true, errors: [] });\n        mockSchemaValidator.validateMethod.mockReturnValue({ valid: true, errors: [] });\n        mockSchemaValidator.getSchemaForMethod.mockReturnValue({ \n          type: 'object',\n          required: ['name'] \n        });\n        mockSchemaValidator.validateParams.mockReturnValue({ \n          valid: false, \n          errors: [{ \n            field: 'params.name', \n            code: 'MISSING_REQUIRED', \n            message: 'Required field \"name\" is missing' \n          }] \n        });\n\n        const validator = new MockMCPMessageValidator();\n        \n        const invalidToolCall: MCPRequest = {\n          jsonrpc: '2.0',\n          id: 'invalid-call',\n          method: 'tools/call',\n          params: {\n            // Missing required 'name' field\n            arguments: { file: 'test.ts' }\n          }\n        };\n\n        // Act - Validate invalid parameters\n        const result = await validator.validate(invalidToolCall);\n\n        // Assert - Verify parameter error handling\n        expect(mockSchemaValidator.validateParams).toHaveBeenCalled();\n        expect(mockMetricsCollector.recordValidationError).toHaveBeenCalledWith('params_invalid');\n        expect(result.valid).toBe(false);\n        expect(result.errors[0].code).toBe('MISSING_REQUIRED');\n      });\n    });\n  });\n\n  describe('🔗 Contract Verification - Response Validation', () => {\n    \n    describe('Success Response Validation', () => {\n      it('should validate successful response structure', async () => {\n        // Arrange - Mock successful response validation\n        const validator = new MockMCPMessageValidator();\n        \n        const successResponse: MCPResponse = {\n          jsonrpc: '2.0',\n          id: 'test-123',\n          result: {\n            tools: [\n              {\n                name: 'analyze_code',\n                description: 'Analyzes code structure and patterns',\n                inputSchema: { type: 'object' }\n              }\n            ]\n          }\n        };\n\n        // Act - Validate success response\n        const result = await validator.validateResponse(successResponse);\n\n        // Assert - Verify success response validation\n        expect(mockLogger.debug).toHaveBeenCalledWith(\n          'Validating MCP response', \n          { id: 'test-123' }\n        );\n        expect(mockMetricsCollector.recordValidation).toHaveBeenCalledWith('response_valid');\n        expect(result.valid).toBe(true);\n      });\n    });\n\n    describe('Error Response Validation', () => {\n      it('should validate error response structure', async () => {\n        // Arrange - Mock error response validation\n        const validator = new MockMCPMessageValidator();\n        \n        const errorResponse: MCPResponse = {\n          jsonrpc: '2.0',\n          id: 'error-test',\n          error: {\n            code: -32602,\n            message: 'Invalid params',\n            data: { \n              detail: 'Parameter \"name\" is required',\n              field: 'name' \n            }\n          }\n        };\n\n        // Act - Validate error response\n        const result = await validator.validateResponse(errorResponse);\n\n        // Assert - Verify error response validation\n        expect(result.valid).toBe(true);\n        expect(mockMetricsCollector.recordValidation).toHaveBeenCalledWith('response_valid');\n      });\n\n      it('should reject malformed error structures', async () => {\n        // Arrange - Mock malformed error validation\n        const validator = new MockMCPMessageValidator();\n        \n        const malformedErrorResponse: MCPResponse = {\n          jsonrpc: '2.0',\n          id: 'malformed-error',\n          error: {\n            code: 'not-a-number' as any, // Invalid: should be number\n            message: 123 as any // Invalid: should be string\n          }\n        };\n\n        // Act - Validate malformed error\n        const result = await validator.validateResponse(malformedErrorResponse);\n\n        // Assert - Verify malformed error handling\n        expect(mockMetricsCollector.recordValidationError).toHaveBeenCalledWith('error_invalid');\n        expect(result.valid).toBe(false);\n        expect(result.errors).toHaveLength(2);\n        expect(result.errors.some(e => e.field === 'error.code')).toBe(true);\n        expect(result.errors.some(e => e.field === 'error.message')).toBe(true);\n      });\n    });\n  });\n\n  describe('🧪 London School Patterns - Interaction Focus', () => {\n    \n    it('should demonstrate validation workflow coordination', async () => {\n      // Arrange - Mock complete validation workflow\n      const validator = new MockMCPMessageValidator();\n      \n      // Setup validation chain mocks\n      mockSchemaValidator.validateJsonRpc.mockReturnValue({ valid: true, errors: [] });\n      mockSchemaValidator.validateMethod.mockReturnValue({ valid: true, errors: [] });\n      mockSchemaValidator.getSchemaForMethod.mockReturnValue({ type: 'object' });\n      mockSchemaValidator.validateParams.mockReturnValue({ valid: true, errors: [] });\n\n      const complexRequest: MCPRequest = {\n        jsonrpc: '2.0',\n        id: 'complex-validation',\n        method: 'tools/call',\n        params: {\n          name: 'complex_analysis',\n          arguments: {\n            codebase: '/path/to/project',\n            options: {\n              depth: 3,\n              includeTests: true,\n              formats: ['typescript', 'javascript']\n            }\n          }\n        }\n      };\n\n      // Act - Validate complex request\n      const result = await validator.validate(complexRequest);\n\n      // Assert - Verify complete validation conversation (London School focus)\n      expect(mockLogger.debug).toHaveBeenCalledWith(\n        'Validating MCP message', \n        { messageType: 'object' }\n      );\n      expect(mockSchemaValidator.validateJsonRpc).toHaveBeenCalledWith(complexRequest);\n      expect(mockSchemaValidator.validateMethod).toHaveBeenCalledWith('tools/call');\n      expect(mockSchemaValidator.getSchemaForMethod).toHaveBeenCalledWith('tools/call');\n      expect(mockSchemaValidator.validateParams).toHaveBeenCalledWith(\n        complexRequest.params,\n        { type: 'object' }\n      );\n      expect(mockMetricsCollector.recordValidation).toHaveBeenCalledWith('request_valid');\n      \n      expect(result.valid).toBe(true);\n      expect(result.errors).toHaveLength(0);\n    });\n\n    it('should handle validation error cascade properly', async () => {\n      // Arrange - Mock validation error cascade\n      const validator = new MockMCPMessageValidator();\n      \n      // First validation passes, second fails\n      mockSchemaValidator.validateJsonRpc.mockReturnValue({ valid: true, errors: [] });\n      mockSchemaValidator.validateMethod.mockReturnValue({ \n        valid: false, \n        errors: [{ \n          field: 'method', \n          code: 'METHOD_NOT_FOUND', \n          message: 'Method does not exist' \n        }] \n      });\n\n      const invalidRequest: MCPRequest = {\n        jsonrpc: '2.0',\n        id: 'cascade-test',\n        method: 'nonexistent/method',\n        params: {}\n      };\n\n      // Act - Validate request with method error\n      const result = await validator.validate(invalidRequest);\n\n      // Assert - Verify error cascade conversation\n      expect(mockSchemaValidator.validateJsonRpc).toHaveBeenCalledWith(invalidRequest);\n      expect(mockSchemaValidator.validateMethod).toHaveBeenCalledWith('nonexistent/method');\n      \n      // Should stop at method validation, not proceed to params\n      expect(mockSchemaValidator.validateParams).not.toHaveBeenCalled();\n      \n      expect(mockMetricsCollector.recordValidationError).toHaveBeenCalledWith('method_invalid');\n      expect(result.valid).toBe(false);\n      expect(result.errors[0].code).toBe('METHOD_NOT_FOUND');\n    });\n  });\n\n  // Clean test isolation - London School principle\n  beforeEach(() => {\n    jest.clearAllMocks();\n  });\n  \n  afterEach(() => {\n    jest.restoreAllMocks();\n  });\n});"],"version":3}