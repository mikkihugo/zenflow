{"file":"/home/mhugo/code/claude-code-flow/src/__tests__/unit/london/mcp-protocol/request-response-handling.test.ts","mappings":"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","names":[],"sources":["/home/mhugo/code/claude-code-flow/src/__tests__/unit/london/mcp-protocol/request-response-handling.test.ts"],"sourcesContent":["/**\n * MCP Request/Response Handling - TDD London Style\n * \n * Tests request/response handling mechanisms using London School principles:\n * - Mock message routing and processing components\n * - Test request lifecycle and response generation\n * - Verify error handling and timeout scenarios\n * - Focus on interaction patterns and communication flow\n */\n\nimport { jest, describe, it, expect, beforeEach, afterEach } from '@jest/globals';\nimport type {\n  MCPRequest,\n  MCPResponse,\n  MCPNotification,\n  MCPError,\n  MCPToolCall,\n  MCPToolResult,\n  MCPContext\n} from '../../../../utils/types';\n\n// === MOCK DEPENDENCIES (London School Contract Definition) ===\n\nconst mockRequestRouter = {\n  route: jest.fn(),\n  addHandler: jest.fn(),\n  removeHandler: jest.fn(),\n  getHandler: jest.fn()\n};\n\nconst mockResponseBuilder = {\n  buildSuccessResponse: jest.fn(),\n  buildErrorResponse: jest.fn(),\n  buildNotificationResponse: jest.fn()\n};\n\nconst mockRequestValidator = {\n  validate: jest.fn(),\n  validateParams: jest.fn(),\n  validateMethod: jest.fn()\n};\n\nconst mockToolExecutor = {\n  execute: jest.fn(),\n  getExecutionContext: jest.fn(),\n  setExecutionTimeout: jest.fn()\n};\n\nconst mockLogger = {\n  debug: jest.fn(),\n  info: jest.fn(),\n  warn: jest.fn(),\n  error: jest.fn()\n};\n\nconst mockMetricsCollector = {\n  recordRequest: jest.fn(),\n  recordResponse: jest.fn(),\n  recordLatency: jest.fn(),\n  recordError: jest.fn()\n};\n\nconst mockSessionManager = {\n  getSession: jest.fn(),\n  createSession: jest.fn(),\n  updateActivity: jest.fn(),\n  isSessionActive: jest.fn()\n};\n\n// === CONTRACT INTERFACES ===\n\ninterface RequestHandlerContract {\n  handleRequest(request: MCPRequest, context: MCPContext): Promise<MCPResponse>;\n  handleNotification(notification: MCPNotification, context: MCPContext): Promise<void>;\n  setRequestTimeout(timeout: number): void;\n  getRequestMetrics(): RequestMetrics;\n}\n\ninterface RequestMetrics {\n  totalRequests: number;\n  successfulRequests: number;\n  failedRequests: number;\n  averageResponseTime: number;\n  timeouts: number;\n}\n\ninterface ResponseBuilderContract {\n  createSuccessResponse(id: string | number, result: unknown): MCPResponse;\n  createErrorResponse(id: string | number, error: MCPError): MCPResponse;\n  createNotificationAck(method: string): void;\n}\n\ninterface RoutingContract {\n  addRoute(method: string, handler: RequestHandler): void;\n  routeRequest(request: MCPRequest, context: MCPContext): Promise<MCPResponse>;\n  routeNotification(notification: MCPNotification, context: MCPContext): Promise<void>;\n}\n\ntype RequestHandler = (params: unknown, context: MCPContext) => Promise<unknown>;\n\n// === MOCK IMPLEMENTATION ===\n\nclass MockMCPRequestHandler implements RequestHandlerContract, ResponseBuilderContract, RoutingContract {\n  private requestTimeout = 30000; // 30 seconds\n  private metrics: RequestMetrics = {\n    totalRequests: 0,\n    successfulRequests: 0,\n    failedRequests: 0,\n    averageResponseTime: 0,\n    timeouts: 0\n  };\n\n  constructor(\n    private router = mockRequestRouter,\n    private responseBuilder = mockResponseBuilder,\n    private validator = mockRequestValidator,\n    private toolExecutor = mockToolExecutor,\n    private logger = mockLogger,\n    private metricsCollector = mockMetricsCollector,\n    private sessionManager = mockSessionManager\n  ) {}\n\n  async handleRequest(request: MCPRequest, context: MCPContext): Promise<MCPResponse> {\n    const startTime = Date.now();\n    this.logger.info('Handling MCP request', { \n      id: request.id, \n      method: request.method,\n      sessionId: context.sessionId \n    });\n\n    this.metricsCollector.recordRequest(request.method);\n    this.sessionManager.updateActivity(context.sessionId);\n\n    try {\n      // Validate request\n      const validation = this.validator.validate(request);\n      if (!validation.valid) {\n        const errorResponse = this.createErrorResponse(request.id, {\n          code: -32602,\n          message: 'Invalid params',\n          data: validation.errors\n        });\n        \n        this.recordRequestCompletion(startTime, false);\n        return errorResponse;\n      }\n\n      // Route and execute request\n      const response = await this.routeRequest(request, context);\n      \n      this.recordRequestCompletion(startTime, true);\n      this.logger.info('Request completed successfully', { \n        id: request.id, \n        duration: Date.now() - startTime \n      });\n      \n      return response;\n\n    } catch (error) {\n      this.logger.error('Request handling failed', { \n        id: request.id, \n        error: error.message \n      });\n      \n      const errorResponse = this.createErrorResponse(request.id, {\n        code: -32603,\n        message: 'Internal error',\n        data: { error: error.message }\n      });\n      \n      this.recordRequestCompletion(startTime, false);\n      return errorResponse;\n    }\n  }\n\n  async handleNotification(notification: MCPNotification, context: MCPContext): Promise<void> {\n    this.logger.debug('Handling MCP notification', { \n      method: notification.method,\n      sessionId: context.sessionId \n    });\n\n    this.sessionManager.updateActivity(context.sessionId);\n\n    try {\n      await this.routeNotification(notification, context);\n      this.logger.debug('Notification handled successfully', { method: notification.method });\n    } catch (error) {\n      this.logger.error('Notification handling failed', { \n        method: notification.method, \n        error: error.message \n      });\n    }\n  }\n\n  async routeRequest(request: MCPRequest, context: MCPContext): Promise<MCPResponse> {\n    const handler = this.router.getHandler(request.method);\n    if (!handler) {\n      throw new Error(`No handler found for method: ${request.method}`);\n    }\n\n    const result = await Promise.race([\n      handler(request.params, context),\n      this.createTimeoutPromise()\n    ]);\n\n    if (result === 'TIMEOUT') {\n      this.metrics.timeouts++;\n      throw new Error('Request timeout');\n    }\n\n    return this.createSuccessResponse(request.id, result);\n  }\n\n  async routeNotification(notification: MCPNotification, context: MCPContext): Promise<void> {\n    const handler = this.router.getHandler(notification.method);\n    if (handler) {\n      await handler(notification.params, context);\n    } else {\n      this.logger.warn('No handler for notification', { method: notification.method });\n    }\n  }\n\n  createSuccessResponse(id: string | number, result: unknown): MCPResponse {\n    return this.responseBuilder.buildSuccessResponse(id, result);\n  }\n\n  createErrorResponse(id: string | number, error: MCPError): MCPResponse {\n    return this.responseBuilder.buildErrorResponse(id, error);\n  }\n\n  createNotificationAck(method: string): void {\n    this.logger.debug('Notification acknowledged', { method });\n  }\n\n  addRoute(method: string, handler: RequestHandler): void {\n    this.router.addHandler(method, handler);\n    this.logger.debug('Route added', { method });\n  }\n\n  setRequestTimeout(timeout: number): void {\n    this.requestTimeout = timeout;\n  }\n\n  getRequestMetrics(): RequestMetrics {\n    return { ...this.metrics };\n  }\n\n  private createTimeoutPromise(): Promise<string> {\n    return new Promise(resolve => {\n      setTimeout(() => resolve('TIMEOUT'), this.requestTimeout);\n    });\n  }\n\n  private recordRequestCompletion(startTime: number, success: boolean): void {\n    const duration = Date.now() - startTime;\n    \n    this.metrics.totalRequests++;\n    if (success) {\n      this.metrics.successfulRequests++;\n    } else {\n      this.metrics.failedRequests++;\n    }\n    \n    // Update rolling average\n    const totalCompleted = this.metrics.successfulRequests + this.metrics.failedRequests;\n    this.metrics.averageResponseTime = \n      (this.metrics.averageResponseTime * (totalCompleted - 1) + duration) / totalCompleted;\n    \n    this.metricsCollector.recordLatency(duration);\n    if (!success) {\n      this.metricsCollector.recordError('request_failed');\n    }\n  }\n}\n\ndescribe('MCP Request/Response Handling - London TDD', () => {\n  \n  describe('🎯 Acceptance Tests - Request Processing', () => {\n    \n    describe('User Story: Handle Standard MCP Requests', () => {\n      it('should process tools/list request successfully', async () => {\n        // Arrange - Mock tools/list handling\n        mockRequestValidator.validate.mockReturnValue({ valid: true, errors: [] });\n        mockRequestRouter.getHandler.mockReturnValue(async () => {\n          return {\n            tools: [\n              {\n                name: 'test_tool',\n                description: 'Test tool',\n                inputSchema: { type: 'object' }\n              }\n            ]\n          };\n        });\n        mockResponseBuilder.buildSuccessResponse.mockReturnValue({\n          jsonrpc: '2.0',\n          id: 'tools-1',\n          result: {\n            tools: [{\n              name: 'test_tool',\n              description: 'Test tool',\n              inputSchema: { type: 'object' }\n            }]\n          }\n        });\n        mockSessionManager.updateActivity.mockReturnValue(undefined);\n\n        const handler = new MockMCPRequestHandler();\n        \n        const toolsListRequest: MCPRequest = {\n          jsonrpc: '2.0',\n          id: 'tools-1',\n          method: 'tools/list',\n          params: {}\n        };\n\n        const context: MCPContext = {\n          sessionId: 'session-123',\n          logger: mockLogger\n        };\n\n        // Act - Handle tools/list request\n        const response = await handler.handleRequest(toolsListRequest, context);\n\n        // Assert - Verify request processing conversation\n        expect(mockLogger.info).toHaveBeenCalledWith(\n          'Handling MCP request', \n          { \n            id: 'tools-1', \n            method: 'tools/list',\n            sessionId: 'session-123' \n          }\n        );\n        expect(mockRequestValidator.validate).toHaveBeenCalledWith(toolsListRequest);\n        expect(mockRequestRouter.getHandler).toHaveBeenCalledWith('tools/list');\n        expect(mockSessionManager.updateActivity).toHaveBeenCalledWith('session-123');\n        expect(mockMetricsCollector.recordRequest).toHaveBeenCalledWith('tools/list');\n        expect(mockResponseBuilder.buildSuccessResponse).toHaveBeenCalledWith(\n          'tools-1',\n          expect.objectContaining({ tools: expect.any(Array) })\n        );\n        \n        expect(response.jsonrpc).toBe('2.0');\n        expect(response.id).toBe('tools-1');\n        expect(response.result).toBeDefined();\n      });\n\n      it('should process tools/call request with proper execution context', async () => {\n        // Arrange - Mock tools/call handling\n        mockRequestValidator.validate.mockReturnValue({ valid: true, errors: [] });\n        mockRequestRouter.getHandler.mockReturnValue(async (params, context) => {\n          // Simulate tool execution\n          const toolResult = await mockToolExecutor.execute(params.name, params.arguments);\n          return toolResult;\n        });\n        mockToolExecutor.execute.mockResolvedValue({\n          content: [\n            {\n              type: 'text',\n              text: 'Analysis complete: Found 5 issues in codebase'\n            }\n          ]\n        });\n        mockResponseBuilder.buildSuccessResponse.mockReturnValue({\n          jsonrpc: '2.0',\n          id: 'tool-call-1',\n          result: {\n            content: [{\n              type: 'text',\n              text: 'Analysis complete: Found 5 issues in codebase'\n            }]\n          }\n        });\n\n        const handler = new MockMCPRequestHandler();\n        \n        const toolCallRequest: MCPRequest = {\n          jsonrpc: '2.0',\n          id: 'tool-call-1',\n          method: 'tools/call',\n          params: {\n            name: 'analyze_code',\n            arguments: {\n              codebase: '/path/to/project',\n              language: 'typescript'\n            }\n          }\n        };\n\n        const context: MCPContext = {\n          sessionId: 'session-456',\n          agentId: 'agent-789',\n          logger: mockLogger\n        };\n\n        // Act - Handle tool call\n        const response = await handler.handleRequest(toolCallRequest, context);\n\n        // Assert - Verify tool execution conversation\n        expect(mockRequestRouter.getHandler).toHaveBeenCalledWith('tools/call');\n        expect(mockToolExecutor.execute).toHaveBeenCalledWith(\n          'analyze_code',\n          {\n            codebase: '/path/to/project',\n            language: 'typescript'\n          }\n        );\n        expect(response.result).toBeDefined();\n        expect(response.result.content[0].text).toContain('Analysis complete');\n      });\n    });\n\n    describe('User Story: Handle Request Validation Errors', () => {\n      it('should return validation error for invalid request', async () => {\n        // Arrange - Mock validation failure\n        mockRequestValidator.validate.mockReturnValue({\n          valid: false,\n          errors: ['Method is required', 'Invalid JSON-RPC format']\n        });\n        mockResponseBuilder.buildErrorResponse.mockReturnValue({\n          jsonrpc: '2.0',\n          id: 'invalid-1',\n          error: {\n            code: -32602,\n            message: 'Invalid params',\n            data: ['Method is required', 'Invalid JSON-RPC format']\n          }\n        });\n\n        const handler = new MockMCPRequestHandler();\n        \n        const invalidRequest: MCPRequest = {\n          jsonrpc: '2.0',\n          id: 'invalid-1',\n          method: '', // Invalid: empty method\n          params: 'invalid-params' // Invalid: should be object\n        } as any;\n\n        const context: MCPContext = {\n          sessionId: 'session-error',\n          logger: mockLogger\n        };\n\n        // Act - Handle invalid request\n        const response = await handler.handleRequest(invalidRequest, context);\n\n        // Assert - Verify validation error handling\n        expect(mockRequestValidator.validate).toHaveBeenCalledWith(invalidRequest);\n        expect(mockResponseBuilder.buildErrorResponse).toHaveBeenCalledWith(\n          'invalid-1',\n          {\n            code: -32602,\n            message: 'Invalid params',\n            data: ['Method is required', 'Invalid JSON-RPC format']\n          }\n        );\n        expect(response.error).toBeDefined();\n        expect(response.error.code).toBe(-32602);\n      });\n\n      it('should handle method not found errors', async () => {\n        // Arrange - Mock method not found\n        mockRequestValidator.validate.mockReturnValue({ valid: true, errors: [] });\n        mockRequestRouter.getHandler.mockReturnValue(null); // No handler found\n        mockResponseBuilder.buildErrorResponse.mockReturnValue({\n          jsonrpc: '2.0',\n          id: 'not-found-1',\n          error: {\n            code: -32603,\n            message: 'Internal error',\n            data: { error: 'No handler found for method: unknown/method' }\n          }\n        });\n\n        const handler = new MockMCPRequestHandler();\n        \n        const unknownMethodRequest: MCPRequest = {\n          jsonrpc: '2.0',\n          id: 'not-found-1',\n          method: 'unknown/method',\n          params: {}\n        };\n\n        const context: MCPContext = {\n          sessionId: 'session-unknown',\n          logger: mockLogger\n        };\n\n        // Act - Handle unknown method request\n        const response = await handler.handleRequest(unknownMethodRequest, context);\n\n        // Assert - Verify method not found handling\n        expect(mockRequestRouter.getHandler).toHaveBeenCalledWith('unknown/method');\n        expect(mockLogger.error).toHaveBeenCalledWith(\n          'Request handling failed',\n          expect.objectContaining({\n            id: 'not-found-1',\n            error: expect.stringContaining('No handler found')\n          })\n        );\n        expect(response.error).toBeDefined();\n        expect(response.error.code).toBe(-32603);\n      });\n    });\n  });\n\n  describe('🔔 Acceptance Tests - Notification Handling', () => {\n    \n    describe('User Story: Process MCP Notifications', () => {\n      it('should handle notifications without response', async () => {\n        // Arrange - Mock notification handling\n        mockRequestRouter.getHandler.mockReturnValue(async (params, context) => {\n          // Simulate notification processing\n          mockLogger.info('Processing notification', { params, sessionId: context.sessionId });\n          return undefined; // Notifications don't return responses\n        });\n\n        const handler = new MockMCPRequestHandler();\n        \n        const logNotification: MCPNotification = {\n          jsonrpc: '2.0',\n          method: 'notifications/message',\n          params: {\n            level: 'info',\n            message: 'Task completed successfully',\n            logger: 'agent-executor'\n          }\n        };\n\n        const context: MCPContext = {\n          sessionId: 'session-notification',\n          logger: mockLogger\n        };\n\n        // Act - Handle notification\n        await handler.handleNotification(logNotification, context);\n\n        // Assert - Verify notification processing conversation\n        expect(mockLogger.debug).toHaveBeenCalledWith(\n          'Handling MCP notification',\n          { \n            method: 'notifications/message',\n            sessionId: 'session-notification' \n          }\n        );\n        expect(mockSessionManager.updateActivity).toHaveBeenCalledWith('session-notification');\n        expect(mockRequestRouter.getHandler).toHaveBeenCalledWith('notifications/message');\n        expect(mockLogger.debug).toHaveBeenCalledWith(\n          'Notification handled successfully',\n          { method: 'notifications/message' }\n        );\n      });\n\n      it('should handle notifications for unknown methods gracefully', async () => {\n        // Arrange - Mock unknown notification method\n        mockRequestRouter.getHandler.mockReturnValue(null); // No handler\n\n        const handler = new MockMCPRequestHandler();\n        \n        const unknownNotification: MCPNotification = {\n          jsonrpc: '2.0',\n          method: 'unknown/notification',\n          params: { data: 'test' }\n        };\n\n        const context: MCPContext = {\n          sessionId: 'session-unknown-notification',\n          logger: mockLogger\n        };\n\n        // Act - Handle unknown notification\n        await handler.handleNotification(unknownNotification, context);\n\n        // Assert - Verify graceful handling of unknown notifications\n        expect(mockRequestRouter.getHandler).toHaveBeenCalledWith('unknown/notification');\n        expect(mockLogger.warn).toHaveBeenCalledWith(\n          'No handler for notification',\n          { method: 'unknown/notification' }\n        );\n        // Should not throw error for unknown notifications\n      });\n    });\n  });\n\n  describe('⏱️ Acceptance Tests - Timeout Handling', () => {\n    \n    describe('User Story: Handle Request Timeouts', () => {\n      it('should timeout long-running requests', async () => {\n        // Arrange - Mock long-running request that times out\n        mockRequestValidator.validate.mockReturnValue({ valid: true, errors: [] });\n        mockRequestRouter.getHandler.mockReturnValue(async () => {\n          // Simulate long-running operation that exceeds timeout\n          await new Promise(resolve => setTimeout(resolve, 100)); // Short delay for test\n          return { result: 'completed' };\n        });\n        mockResponseBuilder.buildErrorResponse.mockReturnValue({\n          jsonrpc: '2.0',\n          id: 'timeout-1',\n          error: {\n            code: -32603,\n            message: 'Internal error',\n            data: { error: 'Request timeout' }\n          }\n        });\n\n        const handler = new MockMCPRequestHandler();\n        handler.setRequestTimeout(50); // Very short timeout for test\n        \n        const longRunningRequest: MCPRequest = {\n          jsonrpc: '2.0',\n          id: 'timeout-1',\n          method: 'long/operation',\n          params: { duration: 1000 }\n        };\n\n        const context: MCPContext = {\n          sessionId: 'session-timeout',\n          logger: mockLogger\n        };\n\n        // Act - Handle request that should timeout\n        const response = await handler.handleRequest(longRunningRequest, context);\n\n        // Assert - Verify timeout handling\n        expect(mockLogger.error).toHaveBeenCalledWith(\n          'Request handling failed',\n          expect.objectContaining({\n            id: 'timeout-1',\n            error: 'Request timeout'\n          })\n        );\n        expect(response.error).toBeDefined();\n        expect(response.error.data.error).toBe('Request timeout');\n        \n        const metrics = handler.getRequestMetrics();\n        expect(metrics.timeouts).toBe(1);\n      });\n    });\n  });\n\n  describe('🔗 Contract Verification - Response Building', () => {\n    \n    describe('Response Construction', () => {\n      it('should build proper success responses', async () => {\n        // Arrange - Mock response building\n        const expectedResult = { status: 'success', data: { count: 42 } };\n        mockResponseBuilder.buildSuccessResponse.mockReturnValue({\n          jsonrpc: '2.0',\n          id: 'success-1',\n          result: expectedResult\n        });\n\n        const handler = new MockMCPRequestHandler();\n\n        // Act - Build success response\n        const response = handler.createSuccessResponse('success-1', expectedResult);\n\n        // Assert - Verify success response construction\n        expect(mockResponseBuilder.buildSuccessResponse).toHaveBeenCalledWith(\n          'success-1',\n          expectedResult\n        );\n        expect(response.jsonrpc).toBe('2.0');\n        expect(response.id).toBe('success-1');\n        expect(response.result).toEqual(expectedResult);\n      });\n\n      it('should build proper error responses', async () => {\n        // Arrange - Mock error response building\n        const errorDetails: MCPError = {\n          code: -32000,\n          message: 'Server error',\n          data: { context: 'database connection failed' }\n        };\n        mockResponseBuilder.buildErrorResponse.mockReturnValue({\n          jsonrpc: '2.0',\n          id: 'error-1',\n          error: errorDetails\n        });\n\n        const handler = new MockMCPRequestHandler();\n\n        // Act - Build error response\n        const response = handler.createErrorResponse('error-1', errorDetails);\n\n        // Assert - Verify error response construction\n        expect(mockResponseBuilder.buildErrorResponse).toHaveBeenCalledWith(\n          'error-1',\n          errorDetails\n        );\n        expect(response.jsonrpc).toBe('2.0');\n        expect(response.id).toBe('error-1');\n        expect(response.error).toEqual(errorDetails);\n      });\n    });\n  });\n\n  describe('🧪 London School Patterns - Request Lifecycle', () => {\n    \n    it('should demonstrate complete request/response lifecycle', async () => {\n      // Arrange - Mock complete request lifecycle\n      mockRequestValidator.validate.mockReturnValue({ valid: true, errors: [] });\n      mockRequestRouter.getHandler.mockReturnValue(async (params, context) => {\n        return { processed: true, sessionId: context.sessionId };\n      });\n      mockResponseBuilder.buildSuccessResponse.mockReturnValue({\n        jsonrpc: '2.0',\n        id: 'lifecycle-1',\n        result: { processed: true, sessionId: 'session-lifecycle' }\n      });\n      mockSessionManager.updateActivity.mockReturnValue(undefined);\n\n      const handler = new MockMCPRequestHandler();\n      \n      const lifecycleRequest: MCPRequest = {\n        jsonrpc: '2.0',\n        id: 'lifecycle-1',\n        method: 'test/lifecycle',\n        params: { test: true }\n      };\n\n      const context: MCPContext = {\n        sessionId: 'session-lifecycle',\n        logger: mockLogger\n      };\n\n      // Act - Process complete request lifecycle\n      const response = await handler.handleRequest(lifecycleRequest, context);\n\n      // Assert - Verify complete lifecycle conversation (London School focus)\n      expect(mockLogger.info).toHaveBeenCalledWith(\n        'Handling MCP request',\n        expect.objectContaining({ id: 'lifecycle-1', method: 'test/lifecycle' })\n      );\n      expect(mockMetricsCollector.recordRequest).toHaveBeenCalledWith('test/lifecycle');\n      expect(mockSessionManager.updateActivity).toHaveBeenCalledWith('session-lifecycle');\n      expect(mockRequestValidator.validate).toHaveBeenCalledWith(lifecycleRequest);\n      expect(mockRequestRouter.getHandler).toHaveBeenCalledWith('test/lifecycle');\n      expect(mockResponseBuilder.buildSuccessResponse).toHaveBeenCalledWith(\n        'lifecycle-1',\n        expect.objectContaining({ processed: true })\n      );\n      expect(mockMetricsCollector.recordLatency).toHaveBeenCalledWith(expect.any(Number));\n      expect(mockLogger.info).toHaveBeenCalledWith(\n        'Request completed successfully',\n        expect.objectContaining({ id: 'lifecycle-1' })\n      );\n      \n      expect(response.result.processed).toBe(true);\n      \n      const metrics = handler.getRequestMetrics();\n      expect(metrics.totalRequests).toBe(1);\n      expect(metrics.successfulRequests).toBe(1);\n    });\n  });\n\n  // Clean test isolation - London School principle\n  beforeEach(() => {\n    jest.clearAllMocks();\n  });\n  \n  afterEach(() => {\n    jest.restoreAllMocks();\n  });\n});"],"version":3}