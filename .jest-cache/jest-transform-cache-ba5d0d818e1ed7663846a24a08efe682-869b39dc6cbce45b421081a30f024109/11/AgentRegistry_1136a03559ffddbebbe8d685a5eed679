6a971d449eea7872c15a83d986e74c97
/* istanbul ignore next */
function cov_e450g1g19() {
  var path = "/home/mhugo/code/claude-code-flow/src/maestro/agent-reuse/AgentRegistry.ts";
  var hash = "3c75f7d71f9199d1580bea35a680556c0e2845d4";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/home/mhugo/code/claude-code-flow/src/maestro/agent-reuse/AgentRegistry.ts",
    statementMap: {
      "0": {
        start: {
          line: 9,
          column: 21
        },
        end: {
          line: 9,
          column: 22
        }
      },
      "1": {
        start: {
          line: 10,
          column: 18
        },
        end: {
          line: 10,
          column: 19
        }
      },
      "2": {
        start: {
          line: 11,
          column: 22
        },
        end: {
          line: 11,
          column: 23
        }
      },
      "3": {
        start: {
          line: 12,
          column: 18
        },
        end: {
          line: 12,
          column: 21
        }
      },
      "4": {
        start: {
          line: 13,
          column: 20
        },
        end: {
          line: 13,
          column: 22
        }
      },
      "5": {
        start: {
          line: 14,
          column: 18
        },
        end: {
          line: 14,
          column: 28
        }
      },
      "6": {
        start: {
          line: 15,
          column: 16
        },
        end: {
          line: 15,
          column: 18
        }
      },
      "7": {
        start: {
          line: 16,
          column: 15
        },
        end: {
          line: 16,
          column: 17
        }
      },
      "8": {
        start: {
          line: 18,
          column: 8
        },
        end: {
          line: 18,
          column: 30
        }
      },
      "9": {
        start: {
          line: 19,
          column: 8
        },
        end: {
          line: 19,
          column: 38
        }
      },
      "10": {
        start: {
          line: 21,
          column: 8
        },
        end: {
          line: 23,
          column: 9
        }
      },
      "11": {
        start: {
          line: 22,
          column: 12
        },
        end: {
          line: 22,
          column: 56
        }
      },
      "12": {
        start: {
          line: 24,
          column: 8
        },
        end: {
          line: 24,
          column: 101
        }
      },
      "13": {
        start: {
          line: 24,
          column: 65
        },
        end: {
          line: 24,
          column: 72
        }
      },
      "14": {
        start: {
          line: 25,
          column: 8
        },
        end: {
          line: 25,
          column: 90
        }
      },
      "15": {
        start: {
          line: 26,
          column: 8
        },
        end: {
          line: 26,
          column: 38
        }
      },
      "16": {
        start: {
          line: 28,
          column: 25
        },
        end: {
          line: 28,
          column: 100
        }
      },
      "17": {
        start: {
          line: 29,
          column: 8
        },
        end: {
          line: 29,
          column: 61
        }
      },
      "18": {
        start: {
          line: 30,
          column: 8
        },
        end: {
          line: 32,
          column: 9
        }
      },
      "19": {
        start: {
          line: 31,
          column: 12
        },
        end: {
          line: 31,
          column: 63
        }
      },
      "20": {
        start: {
          line: 35,
          column: 8
        },
        end: {
          line: 35,
          column: 27
        }
      },
      "21": {
        start: {
          line: 36,
          column: 8
        },
        end: {
          line: 36,
          column: 35
        }
      },
      "22": {
        start: {
          line: 37,
          column: 8
        },
        end: {
          line: 39,
          column: 9
        }
      },
      "23": {
        start: {
          line: 38,
          column: 12
        },
        end: {
          line: 38,
          column: 53
        }
      },
      "24": {
        start: {
          line: 40,
          column: 8
        },
        end: {
          line: 40,
          column: 90
        }
      },
      "25": {
        start: {
          line: 41,
          column: 8
        },
        end: {
          line: 41,
          column: 35
        }
      },
      "26": {
        start: {
          line: 42,
          column: 8
        },
        end: {
          line: 42,
          column: 38
        }
      },
      "27": {
        start: {
          line: 45,
          column: 28
        },
        end: {
          line: 45,
          column: 84
        }
      },
      "28": {
        start: {
          line: 46,
          column: 8
        },
        end: {
          line: 47,
          column: 23
        }
      },
      "29": {
        start: {
          line: 47,
          column: 12
        },
        end: {
          line: 47,
          column: 23
        }
      },
      "30": {
        start: {
          line: 48,
          column: 31
        },
        end: {
          line: 48,
          column: 65
        }
      },
      "31": {
        start: {
          line: 49,
          column: 8
        },
        end: {
          line: 49,
          column: 73
        }
      },
      "32": {
        start: {
          line: 52,
          column: 8
        },
        end: {
          line: 53,
          column: 23
        }
      },
      "33": {
        start: {
          line: 53,
          column: 12
        },
        end: {
          line: 53,
          column: 23
        }
      },
      "34": {
        start: {
          line: 54,
          column: 29
        },
        end: {
          line: 54,
          column: 62
        }
      },
      "35": {
        start: {
          line: 55,
          column: 8
        },
        end: {
          line: 55,
          column: 89
        }
      },
      "36": {
        start: {
          line: 55,
          column: 51
        },
        end: {
          line: 55,
          column: 62
        }
      },
      "37": {
        start: {
          line: 63,
          column: 19
        },
        end: {
          line: 63,
          column: 28
        }
      },
      "38": {
        start: {
          line: 64,
          column: 22
        },
        end: {
          line: 64,
          column: 31
        }
      },
      "39": {
        start: {
          line: 65,
          column: 24
        },
        end: {
          line: 65,
          column: 33
        }
      },
      "40": {
        start: {
          line: 66,
          column: 21
        },
        end: {
          line: 66,
          column: 24
        }
      },
      "41": {
        start: {
          line: 68,
          column: 8
        },
        end: {
          line: 68,
          column: 29
        }
      },
      "42": {
        start: {
          line: 69,
          column: 8
        },
        end: {
          line: 69,
          column: 55
        }
      },
      "43": {
        start: {
          line: 75,
          column: 8
        },
        end: {
          line: 96,
          column: 9
        }
      },
      "44": {
        start: {
          line: 76,
          column: 36
        },
        end: {
          line: 86,
          column: 13
        }
      },
      "45": {
        start: {
          line: 87,
          column: 12
        },
        end: {
          line: 87,
          column: 60
        }
      },
      "46": {
        start: {
          line: 88,
          column: 12
        },
        end: {
          line: 88,
          column: 78
        }
      },
      "47": {
        start: {
          line: 89,
          column: 12
        },
        end: {
          line: 89,
          column: 124
        }
      },
      "48": {
        start: {
          line: 90,
          column: 12
        },
        end: {
          line: 90,
          column: 64
        }
      },
      "49": {
        start: {
          line: 91,
          column: 12
        },
        end: {
          line: 91,
          column: 40
        }
      },
      "50": {
        start: {
          line: 94,
          column: 12
        },
        end: {
          line: 94,
          column: 128
        }
      },
      "51": {
        start: {
          line: 95,
          column: 12
        },
        end: {
          line: 95,
          column: 24
        }
      },
      "52": {
        start: {
          line: 102,
          column: 8
        },
        end: {
          line: 119,
          column: 9
        }
      },
      "53": {
        start: {
          line: 103,
          column: 26
        },
        end: {
          line: 103,
          column: 56
        }
      },
      "54": {
        start: {
          line: 104,
          column: 12
        },
        end: {
          line: 107,
          column: 13
        }
      },
      "55": {
        start: {
          line: 105,
          column: 16
        },
        end: {
          line: 105,
          column: 91
        }
      },
      "56": {
        start: {
          line: 106,
          column: 16
        },
        end: {
          line: 106,
          column: 23
        }
      },
      "57": {
        start: {
          line: 109,
          column: 12
        },
        end: {
          line: 109,
          column: 72
        }
      },
      "58": {
        start: {
          line: 111,
          column: 12
        },
        end: {
          line: 111,
          column: 46
        }
      },
      "59": {
        start: {
          line: 112,
          column: 12
        },
        end: {
          line: 112,
          column: 63
        }
      },
      "60": {
        start: {
          line: 113,
          column: 12
        },
        end: {
          line: 113,
          column: 62
        }
      },
      "61": {
        start: {
          line: 114,
          column: 12
        },
        end: {
          line: 114,
          column: 40
        }
      },
      "62": {
        start: {
          line: 117,
          column: 12
        },
        end: {
          line: 117,
          column: 130
        }
      },
      "63": {
        start: {
          line: 118,
          column: 12
        },
        end: {
          line: 118,
          column: 24
        }
      },
      "64": {
        start: {
          line: 126,
          column: 8
        },
        end: {
          line: 128,
          column: 9
        }
      },
      "65": {
        start: {
          line: 127,
          column: 12
        },
        end: {
          line: 127,
          column: 58
        }
      },
      "66": {
        start: {
          line: 129,
          column: 27
        },
        end: {
          line: 129,
          column: 31
        }
      },
      "67": {
        start: {
          line: 131,
          column: 8
        },
        end: {
          line: 155,
          column: 9
        }
      },
      "68": {
        start: {
          line: 132,
          column: 41
        },
        end: {
          line: 132,
          column: 77
        }
      },
      "69": {
        start: {
          line: 133,
          column: 12
        },
        end: {
          line: 136,
          column: 13
        }
      },
      "70": {
        start: {
          line: 135,
          column: 16
        },
        end: {
          line: 135,
          column: 26
        }
      },
      "71": {
        start: {
          line: 137,
          column: 12
        },
        end: {
          line: 150,
          column: 13
        }
      },
      "72": {
        start: {
          line: 139,
          column: 16
        },
        end: {
          line: 139,
          column: 61
        }
      },
      "73": {
        start: {
          line: 143,
          column: 37
        },
        end: {
          line: 143,
          column: 46
        }
      },
      "74": {
        start: {
          line: 144,
          column: 16
        },
        end: {
          line: 148,
          column: 19
        }
      },
      "75": {
        start: {
          line: 145,
          column: 20
        },
        end: {
          line: 147,
          column: 21
        }
      },
      "76": {
        start: {
          line: 146,
          column: 24
        },
        end: {
          line: 146,
          column: 45
        }
      },
      "77": {
        start: {
          line: 149,
          column: 16
        },
        end: {
          line: 149,
          column: 44
        }
      },
      "78": {
        start: {
          line: 152,
          column: 12
        },
        end: {
          line: 154,
          column: 13
        }
      },
      "79": {
        start: {
          line: 153,
          column: 16
        },
        end: {
          line: 153,
          column: 26
        }
      },
      "80": {
        start: {
          line: 157,
          column: 30
        },
        end: {
          line: 159,
          column: 49
        }
      },
      "81": {
        start: {
          line: 158,
          column: 23
        },
        end: {
          line: 158,
          column: 48
        }
      },
      "82": {
        start: {
          line: 159,
          column: 29
        },
        end: {
          line: 159,
          column: 48
        }
      },
      "83": {
        start: {
          line: 160,
          column: 8
        },
        end: {
          line: 160,
          column: 122
        }
      },
      "84": {
        start: {
          line: 161,
          column: 8
        },
        end: {
          line: 161,
          column: 29
        }
      },
      "85": {
        start: {
          line: 167,
          column: 8
        },
        end: {
          line: 167,
          column: 46
        }
      },
      "86": {
        start: {
          line: 173,
          column: 22
        },
        end: {
          line: 173,
          column: 52
        }
      },
      "87": {
        start: {
          line: 174,
          column: 8
        },
        end: {
          line: 177,
          column: 9
        }
      },
      "88": {
        start: {
          line: 175,
          column: 12
        },
        end: {
          line: 175,
          column: 94
        }
      },
      "89": {
        start: {
          line: 176,
          column: 12
        },
        end: {
          line: 176,
          column: 19
        }
      },
      "90": {
        start: {
          line: 178,
          column: 31
        },
        end: {
          line: 178,
          column: 43
        }
      },
      "91": {
        start: {
          line: 179,
          column: 8
        },
        end: {
          line: 179,
          column: 30
        }
      },
      "92": {
        start: {
          line: 180,
          column: 8
        },
        end: {
          line: 180,
          column: 40
        }
      },
      "93": {
        start: {
          line: 181,
          column: 8
        },
        end: {
          line: 183,
          column: 9
        }
      },
      "94": {
        start: {
          line: 182,
          column: 12
        },
        end: {
          line: 182,
          column: 64
        }
      },
      "95": {
        start: {
          line: 184,
          column: 8
        },
        end: {
          line: 184,
          column: 93
        }
      },
      "96": {
        start: {
          line: 185,
          column: 8
        },
        end: {
          line: 185,
          column: 55
        }
      },
      "97": {
        start: {
          line: 186,
          column: 8
        },
        end: {
          line: 186,
          column: 36
        }
      },
      "98": {
        start: {
          line: 192,
          column: 22
        },
        end: {
          line: 192,
          column: 52
        }
      },
      "99": {
        start: {
          line: 193,
          column: 8
        },
        end: {
          line: 203,
          column: 9
        }
      },
      "100": {
        start: {
          line: 194,
          column: 12
        },
        end: {
          line: 194,
          column: 45
        }
      },
      "101": {
        start: {
          line: 195,
          column: 12
        },
        end: {
          line: 195,
          column: 44
        }
      },
      "102": {
        start: {
          line: 197,
          column: 12
        },
        end: {
          line: 202,
          column: 13
        }
      },
      "103": {
        start: {
          line: 198,
          column: 16
        },
        end: {
          line: 198,
          column: 62
        }
      },
      "104": {
        start: {
          line: 200,
          column: 17
        },
        end: {
          line: 202,
          column: 13
        }
      },
      "105": {
        start: {
          line: 201,
          column: 16
        },
        end: {
          line: 201,
          column: 67
        }
      },
      "106": {
        start: {
          line: 209,
          column: 8
        },
        end: {
          line: 209,
          column: 54
        }
      },
      "107": {
        start: {
          line: 215,
          column: 8
        },
        end: {
          line: 215,
          column: 95
        }
      },
      "108": {
        start: {
          line: 215,
          column: 70
        },
        end: {
          line: 215,
          column: 93
        }
      },
      "109": {
        start: {
          line: 221,
          column: 23
        },
        end: {
          line: 221,
          column: 61
        }
      },
      "110": {
        start: {
          line: 222,
          column: 28
        },
        end: {
          line: 222,
          column: 41
        }
      },
      "111": {
        start: {
          line: 223,
          column: 8
        },
        end: {
          line: 232,
          column: 9
        }
      },
      "112": {
        start: {
          line: 224,
          column: 12
        },
        end: {
          line: 231,
          column: 14
        }
      },
      "113": {
        start: {
          line: 233,
          column: 32
        },
        end: {
          line: 233,
          column: 83
        }
      },
      "114": {
        start: {
          line: 233,
          column: 51
        },
        end: {
          line: 233,
          column: 75
        }
      },
      "115": {
        start: {
          line: 234,
          column: 27
        },
        end: {
          line: 234,
          column: 73
        }
      },
      "116": {
        start: {
          line: 234,
          column: 46
        },
        end: {
          line: 234,
          column: 65
        }
      },
      "117": {
        start: {
          line: 235,
          column: 32
        },
        end: {
          line: 235,
          column: 99
        }
      },
      "118": {
        start: {
          line: 235,
          column: 58
        },
        end: {
          line: 235,
          column: 81
        }
      },
      "119": {
        start: {
          line: 236,
          column: 35
        },
        end: {
          line: 236,
          column: 60
        }
      },
      "120": {
        start: {
          line: 237,
          column: 8
        },
        end: {
          line: 244,
          column: 10
        }
      },
      "121": {
        start: {
          line: 250,
          column: 8
        },
        end: {
          line: 250,
          column: 47
        }
      },
      "122": {
        start: {
          line: 256,
          column: 8
        },
        end: {
          line: 256,
          column: 50
        }
      },
      "123": {
        start: {
          line: 262,
          column: 8
        },
        end: {
          line: 267,
          column: 9
        }
      },
      "124": {
        start: {
          line: 263,
          column: 12
        },
        end: {
          line: 265,
          column: 13
        }
      },
      "125": {
        start: {
          line: 264,
          column: 16
        },
        end: {
          line: 264,
          column: 64
        }
      },
      "126": {
        start: {
          line: 266,
          column: 12
        },
        end: {
          line: 266,
          column: 62
        }
      },
      "127": {
        start: {
          line: 273,
          column: 8
        },
        end: {
          line: 282,
          column: 9
        }
      },
      "128": {
        start: {
          line: 274,
          column: 29
        },
        end: {
          line: 274,
          column: 65
        }
      },
      "129": {
        start: {
          line: 275,
          column: 12
        },
        end: {
          line: 281,
          column: 13
        }
      },
      "130": {
        start: {
          line: 276,
          column: 16
        },
        end: {
          line: 276,
          column: 41
        }
      },
      "131": {
        start: {
          line: 278,
          column: 16
        },
        end: {
          line: 280,
          column: 17
        }
      },
      "132": {
        start: {
          line: 279,
          column: 20
        },
        end: {
          line: 279,
          column: 60
        }
      },
      "133": {
        start: {
          line: 288,
          column: 30
        },
        end: {
          line: 296,
          column: 10
        }
      },
      "134": {
        start: {
          line: 289,
          column: 12
        },
        end: {
          line: 295,
          column: 13
        }
      },
      "135": {
        start: {
          line: 290,
          column: 16
        },
        end: {
          line: 290,
          column: 71
        }
      },
      "136": {
        start: {
          line: 293,
          column: 16
        },
        end: {
          line: 293,
          column: 126
        }
      },
      "137": {
        start: {
          line: 294,
          column: 16
        },
        end: {
          line: 294,
          column: 41
        }
      },
      "138": {
        start: {
          line: 297,
          column: 8
        },
        end: {
          line: 297,
          column: 48
        }
      },
      "139": {
        start: {
          line: 303,
          column: 22
        },
        end: {
          line: 303,
          column: 45
        }
      },
      "140": {
        start: {
          line: 304,
          column: 8
        },
        end: {
          line: 307,
          column: 9
        }
      },
      "141": {
        start: {
          line: 305,
          column: 12
        },
        end: {
          line: 305,
          column: 38
        }
      },
      "142": {
        start: {
          line: 306,
          column: 12
        },
        end: {
          line: 306,
          column: 19
        }
      },
      "143": {
        start: {
          line: 312,
          column: 34
        },
        end: {
          line: 312,
          column: 75
        }
      },
      "144": {
        start: {
          line: 313,
          column: 31
        },
        end: {
          line: 313,
          column: 69
        }
      },
      "145": {
        start: {
          line: 314,
          column: 31
        },
        end: {
          line: 314,
          column: 73
        }
      },
      "146": {
        start: {
          line: 315,
          column: 8
        },
        end: {
          line: 315,
          column: 102
        }
      },
      "147": {
        start: {
          line: 321,
          column: 20
        },
        end: {
          line: 321,
          column: 30
        }
      },
      "148": {
        start: {
          line: 322,
          column: 28
        },
        end: {
          line: 322,
          column: 30
        }
      },
      "149": {
        start: {
          line: 323,
          column: 8
        },
        end: {
          line: 328,
          column: 9
        }
      },
      "150": {
        start: {
          line: 324,
          column: 33
        },
        end: {
          line: 324,
          column: 77
        }
      },
      "151": {
        start: {
          line: 325,
          column: 12
        },
        end: {
          line: 327,
          column: 13
        }
      },
      "152": {
        start: {
          line: 326,
          column: 16
        },
        end: {
          line: 326,
          column: 42
        }
      },
      "153": {
        start: {
          line: 330,
          column: 8
        },
        end: {
          line: 332,
          column: 9
        }
      },
      "154": {
        start: {
          line: 331,
          column: 12
        },
        end: {
          line: 331,
          column: 48
        }
      },
      "155": {
        start: {
          line: 333,
          column: 8
        },
        end: {
          line: 335,
          column: 9
        }
      },
      "156": {
        start: {
          line: 334,
          column: 12
        },
        end: {
          line: 334,
          column: 78
        }
      },
      "157": {
        start: {
          line: 336,
          column: 8
        },
        end: {
          line: 336,
          column: 27
        }
      },
      "158": {
        start: {
          line: 342,
          column: 39
        },
        end: {
          line: 342,
          column: 41
        }
      },
      "159": {
        start: {
          line: 344,
          column: 8
        },
        end: {
          line: 346,
          column: 9
        }
      },
      "160": {
        start: {
          line: 345,
          column: 12
        },
        end: {
          line: 345,
          column: 63
        }
      },
      "161": {
        start: {
          line: 348,
          column: 35
        },
        end: {
          line: 349,
          column: 42
        }
      },
      "162": {
        start: {
          line: 349,
          column: 36
        },
        end: {
          line: 349,
          column: 41
        }
      },
      "163": {
        start: {
          line: 350,
          column: 27
        },
        end: {
          line: 350,
          column: 77
        }
      },
      "164": {
        start: {
          line: 350,
          column: 73
        },
        end: {
          line: 350,
          column: 76
        }
      },
      "165": {
        start: {
          line: 351,
          column: 21
        },
        end: {
          line: 351,
          column: 69
        }
      },
      "166": {
        start: {
          line: 351,
          column: 65
        },
        end: {
          line: 351,
          column: 68
        }
      },
      "167": {
        start: {
          line: 352,
          column: 8
        },
        end: {
          line: 357,
          column: 10
        }
      },
      "168": {
        start: {
          line: 363,
          column: 8
        },
        end: {
          line: 363,
          column: 57
        }
      },
      "169": {
        start: {
          line: 365,
          column: 8
        },
        end: {
          line: 365,
          column: 34
        }
      },
      "170": {
        start: {
          line: 366,
          column: 8
        },
        end: {
          line: 366,
          column: 37
        }
      },
      "171": {
        start: {
          line: 367,
          column: 8
        },
        end: {
          line: 367,
          column: 39
        }
      },
      "172": {
        start: {
          line: 368,
          column: 8
        },
        end: {
          line: 368,
          column: 61
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 17,
            column: 4
          },
          end: {
            line: 17,
            column: 5
          }
        },
        loc: {
          start: {
            line: 17,
            column: 47
          },
          end: {
            line: 33,
            column: 5
          }
        },
        line: 17
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 24,
            column: 53
          },
          end: {
            line: 24,
            column: 54
          }
        },
        loc: {
          start: {
            line: 24,
            column: 65
          },
          end: {
            line: 24,
            column: 72
          }
        },
        line: 24
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 34,
            column: 4
          },
          end: {
            line: 34,
            column: 5
          }
        },
        loc: {
          start: {
            line: 34,
            column: 23
          },
          end: {
            line: 43,
            column: 5
          }
        },
        line: 34
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 44,
            column: 4
          },
          end: {
            line: 44,
            column: 5
          }
        },
        loc: {
          start: {
            line: 44,
            column: 38
          },
          end: {
            line: 50,
            column: 5
          }
        },
        line: 44
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 51,
            column: 4
          },
          end: {
            line: 51,
            column: 5
          }
        },
        loc: {
          start: {
            line: 51,
            column: 35
          },
          end: {
            line: 56,
            column: 5
          }
        },
        line: 51
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 55,
            column: 35
          },
          end: {
            line: 55,
            column: 36
          }
        },
        loc: {
          start: {
            line: 55,
            column: 51
          },
          end: {
            line: 55,
            column: 62
          }
        },
        line: 55
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 67,
            column: 4
          },
          end: {
            line: 67,
            column: 5
          }
        },
        loc: {
          start: {
            line: 67,
            column: 24
          },
          end: {
            line: 70,
            column: 5
          }
        },
        line: 67
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 74,
            column: 4
          },
          end: {
            line: 74,
            column: 5
          }
        },
        loc: {
          start: {
            line: 74,
            column: 42
          },
          end: {
            line: 97,
            column: 5
          }
        },
        line: 74
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 101,
            column: 4
          },
          end: {
            line: 101,
            column: 5
          }
        },
        loc: {
          start: {
            line: 101,
            column: 35
          },
          end: {
            line: 120,
            column: 5
          }
        },
        line: 101
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 125,
            column: 4
          },
          end: {
            line: 125,
            column: 5
          }
        },
        loc: {
          start: {
            line: 125,
            column: 50
          },
          end: {
            line: 162,
            column: 5
          }
        },
        line: 125
      },
      "10": {
        name: "(anonymous_10)",
        decl: {
          start: {
            line: 144,
            column: 37
          },
          end: {
            line: 144,
            column: 38
          }
        },
        loc: {
          start: {
            line: 144,
            column: 43
          },
          end: {
            line: 148,
            column: 17
          }
        },
        line: 144
      },
      "11": {
        name: "(anonymous_11)",
        decl: {
          start: {
            line: 158,
            column: 17
          },
          end: {
            line: 158,
            column: 18
          }
        },
        loc: {
          start: {
            line: 158,
            column: 23
          },
          end: {
            line: 158,
            column: 48
          }
        },
        line: 158
      },
      "12": {
        name: "(anonymous_12)",
        decl: {
          start: {
            line: 159,
            column: 20
          },
          end: {
            line: 159,
            column: 21
          }
        },
        loc: {
          start: {
            line: 159,
            column: 29
          },
          end: {
            line: 159,
            column: 48
          }
        },
        line: 159
      },
      "13": {
        name: "(anonymous_13)",
        decl: {
          start: {
            line: 166,
            column: 4
          },
          end: {
            line: 166,
            column: 5
          }
        },
        loc: {
          start: {
            line: 166,
            column: 28
          },
          end: {
            line: 168,
            column: 5
          }
        },
        line: 166
      },
      "14": {
        name: "(anonymous_14)",
        decl: {
          start: {
            line: 172,
            column: 4
          },
          end: {
            line: 172,
            column: 5
          }
        },
        loc: {
          start: {
            line: 172,
            column: 55
          },
          end: {
            line: 187,
            column: 5
          }
        },
        line: 172
      },
      "15": {
        name: "(anonymous_15)",
        decl: {
          start: {
            line: 191,
            column: 4
          },
          end: {
            line: 191,
            column: 5
          }
        },
        loc: {
          start: {
            line: 191,
            column: 49
          },
          end: {
            line: 204,
            column: 5
          }
        },
        line: 191
      },
      "16": {
        name: "(anonymous_16)",
        decl: {
          start: {
            line: 208,
            column: 4
          },
          end: {
            line: 208,
            column: 5
          }
        },
        loc: {
          start: {
            line: 208,
            column: 25
          },
          end: {
            line: 210,
            column: 5
          }
        },
        line: 208
      },
      "17": {
        name: "(anonymous_17)",
        decl: {
          start: {
            line: 214,
            column: 4
          },
          end: {
            line: 214,
            column: 5
          }
        },
        loc: {
          start: {
            line: 214,
            column: 30
          },
          end: {
            line: 216,
            column: 5
          }
        },
        line: 214
      },
      "18": {
        name: "(anonymous_18)",
        decl: {
          start: {
            line: 215,
            column: 61
          },
          end: {
            line: 215,
            column: 62
          }
        },
        loc: {
          start: {
            line: 215,
            column: 70
          },
          end: {
            line: 215,
            column: 93
          }
        },
        line: 215
      },
      "19": {
        name: "(anonymous_19)",
        decl: {
          start: {
            line: 220,
            column: 4
          },
          end: {
            line: 220,
            column: 5
          }
        },
        loc: {
          start: {
            line: 220,
            column: 23
          },
          end: {
            line: 245,
            column: 5
          }
        },
        line: 220
      },
      "20": {
        name: "(anonymous_20)",
        decl: {
          start: {
            line: 233,
            column: 46
          },
          end: {
            line: 233,
            column: 47
          }
        },
        loc: {
          start: {
            line: 233,
            column: 51
          },
          end: {
            line: 233,
            column: 75
          }
        },
        line: 233
      },
      "21": {
        name: "(anonymous_21)",
        decl: {
          start: {
            line: 234,
            column: 41
          },
          end: {
            line: 234,
            column: 42
          }
        },
        loc: {
          start: {
            line: 234,
            column: 46
          },
          end: {
            line: 234,
            column: 65
          }
        },
        line: 234
      },
      "22": {
        name: "(anonymous_22)",
        decl: {
          start: {
            line: 235,
            column: 46
          },
          end: {
            line: 235,
            column: 47
          }
        },
        loc: {
          start: {
            line: 235,
            column: 58
          },
          end: {
            line: 235,
            column: 81
          }
        },
        line: 235
      },
      "23": {
        name: "(anonymous_23)",
        decl: {
          start: {
            line: 249,
            column: 4
          },
          end: {
            line: 249,
            column: 5
          }
        },
        loc: {
          start: {
            line: 249,
            column: 41
          },
          end: {
            line: 251,
            column: 5
          }
        },
        line: 249
      },
      "24": {
        name: "(anonymous_24)",
        decl: {
          start: {
            line: 255,
            column: 4
          },
          end: {
            line: 255,
            column: 5
          }
        },
        loc: {
          start: {
            line: 255,
            column: 45
          },
          end: {
            line: 257,
            column: 5
          }
        },
        line: 255
      },
      "25": {
        name: "(anonymous_25)",
        decl: {
          start: {
            line: 261,
            column: 4
          },
          end: {
            line: 261,
            column: 5
          }
        },
        loc: {
          start: {
            line: 261,
            column: 49
          },
          end: {
            line: 268,
            column: 5
          }
        },
        line: 261
      },
      "26": {
        name: "(anonymous_26)",
        decl: {
          start: {
            line: 272,
            column: 4
          },
          end: {
            line: 272,
            column: 5
          }
        },
        loc: {
          start: {
            line: 272,
            column: 53
          },
          end: {
            line: 283,
            column: 5
          }
        },
        line: 272
      },
      "27": {
        name: "(anonymous_27)",
        decl: {
          start: {
            line: 287,
            column: 4
          },
          end: {
            line: 287,
            column: 5
          }
        },
        loc: {
          start: {
            line: 287,
            column: 46
          },
          end: {
            line: 298,
            column: 5
          }
        },
        line: 287
      },
      "28": {
        name: "(anonymous_28)",
        decl: {
          start: {
            line: 288,
            column: 69
          },
          end: {
            line: 288,
            column: 70
          }
        },
        loc: {
          start: {
            line: 288,
            column: 83
          },
          end: {
            line: 296,
            column: 9
          }
        },
        line: 288
      },
      "29": {
        name: "(anonymous_29)",
        decl: {
          start: {
            line: 302,
            column: 4
          },
          end: {
            line: 302,
            column: 5
          }
        },
        loc: {
          start: {
            line: 302,
            column: 27
          },
          end: {
            line: 316,
            column: 5
          }
        },
        line: 302
      },
      "30": {
        name: "(anonymous_30)",
        decl: {
          start: {
            line: 320,
            column: 4
          },
          end: {
            line: 320,
            column: 5
          }
        },
        loc: {
          start: {
            line: 320,
            column: 56
          },
          end: {
            line: 337,
            column: 5
          }
        },
        line: 320
      },
      "31": {
        name: "(anonymous_31)",
        decl: {
          start: {
            line: 341,
            column: 4
          },
          end: {
            line: 341,
            column: 5
          }
        },
        loc: {
          start: {
            line: 341,
            column: 28
          },
          end: {
            line: 358,
            column: 5
          }
        },
        line: 341
      },
      "32": {
        name: "(anonymous_32)",
        decl: {
          start: {
            line: 349,
            column: 18
          },
          end: {
            line: 349,
            column: 19
          }
        },
        loc: {
          start: {
            line: 349,
            column: 36
          },
          end: {
            line: 349,
            column: 41
          }
        },
        line: 349
      },
      "33": {
        name: "(anonymous_33)",
        decl: {
          start: {
            line: 350,
            column: 62
          },
          end: {
            line: 350,
            column: 63
          }
        },
        loc: {
          start: {
            line: 350,
            column: 73
          },
          end: {
            line: 350,
            column: 76
          }
        },
        line: 350
      },
      "34": {
        name: "(anonymous_34)",
        decl: {
          start: {
            line: 351,
            column: 54
          },
          end: {
            line: 351,
            column: 55
          }
        },
        loc: {
          start: {
            line: 351,
            column: 65
          },
          end: {
            line: 351,
            column: 68
          }
        },
        line: 351
      },
      "35": {
        name: "(anonymous_35)",
        decl: {
          start: {
            line: 362,
            column: 4
          },
          end: {
            line: 362,
            column: 5
          }
        },
        loc: {
          start: {
            line: 362,
            column: 21
          },
          end: {
            line: 369,
            column: 5
          }
        },
        line: 362
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 21,
            column: 8
          },
          end: {
            line: 23,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 21,
            column: 8
          },
          end: {
            line: 23,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 21
      },
      "1": {
        loc: {
          start: {
            line: 30,
            column: 8
          },
          end: {
            line: 32,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 30,
            column: 8
          },
          end: {
            line: 32,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 30
      },
      "2": {
        loc: {
          start: {
            line: 37,
            column: 8
          },
          end: {
            line: 39,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 37,
            column: 8
          },
          end: {
            line: 39,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 37
      },
      "3": {
        loc: {
          start: {
            line: 44,
            column: 25
          },
          end: {
            line: 44,
            column: 36
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 44,
            column: 34
          },
          end: {
            line: 44,
            column: 36
          }
        }],
        line: 44
      },
      "4": {
        loc: {
          start: {
            line: 46,
            column: 8
          },
          end: {
            line: 47,
            column: 23
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 46,
            column: 8
          },
          end: {
            line: 47,
            column: 23
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 46
      },
      "5": {
        loc: {
          start: {
            line: 51,
            column: 22
          },
          end: {
            line: 51,
            column: 33
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 51,
            column: 31
          },
          end: {
            line: 51,
            column: 33
          }
        }],
        line: 51
      },
      "6": {
        loc: {
          start: {
            line: 52,
            column: 8
          },
          end: {
            line: 53,
            column: 23
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 52,
            column: 8
          },
          end: {
            line: 53,
            column: 23
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 52
      },
      "7": {
        loc: {
          start: {
            line: 81,
            column: 30
          },
          end: {
            line: 81,
            column: 56
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 81,
            column: 30
          },
          end: {
            line: 81,
            column: 50
          }
        }, {
          start: {
            line: 81,
            column: 54
          },
          end: {
            line: 81,
            column: 56
          }
        }],
        line: 81
      },
      "8": {
        loc: {
          start: {
            line: 85,
            column: 26
          },
          end: {
            line: 85,
            column: 48
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 85,
            column: 26
          },
          end: {
            line: 85,
            column: 42
          }
        }, {
          start: {
            line: 85,
            column: 46
          },
          end: {
            line: 85,
            column: 48
          }
        }],
        line: 85
      },
      "9": {
        loc: {
          start: {
            line: 94,
            column: 70
          },
          end: {
            line: 94,
            column: 124
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 94,
            column: 95
          },
          end: {
            line: 94,
            column: 108
          }
        }, {
          start: {
            line: 94,
            column: 111
          },
          end: {
            line: 94,
            column: 124
          }
        }],
        line: 94
      },
      "10": {
        loc: {
          start: {
            line: 104,
            column: 12
          },
          end: {
            line: 107,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 104,
            column: 12
          },
          end: {
            line: 107,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 104
      },
      "11": {
        loc: {
          start: {
            line: 117,
            column: 72
          },
          end: {
            line: 117,
            column: 126
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 117,
            column: 97
          },
          end: {
            line: 117,
            column: 110
          }
        }, {
          start: {
            line: 117,
            column: 113
          },
          end: {
            line: 117,
            column: 126
          }
        }],
        line: 117
      },
      "12": {
        loc: {
          start: {
            line: 126,
            column: 8
          },
          end: {
            line: 128,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 126,
            column: 8
          },
          end: {
            line: 128,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 126
      },
      "13": {
        loc: {
          start: {
            line: 133,
            column: 12
          },
          end: {
            line: 136,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 133,
            column: 12
          },
          end: {
            line: 136,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 133
      },
      "14": {
        loc: {
          start: {
            line: 133,
            column: 16
          },
          end: {
            line: 133,
            column: 72
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 133,
            column: 16
          },
          end: {
            line: 133,
            column: 37
          }
        }, {
          start: {
            line: 133,
            column: 41
          },
          end: {
            line: 133,
            column: 72
          }
        }],
        line: 133
      },
      "15": {
        loc: {
          start: {
            line: 137,
            column: 12
          },
          end: {
            line: 150,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 137,
            column: 12
          },
          end: {
            line: 150,
            column: 13
          }
        }, {
          start: {
            line: 141,
            column: 17
          },
          end: {
            line: 150,
            column: 13
          }
        }],
        line: 137
      },
      "16": {
        loc: {
          start: {
            line: 145,
            column: 20
          },
          end: {
            line: 147,
            column: 21
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 145,
            column: 20
          },
          end: {
            line: 147,
            column: 21
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 145
      },
      "17": {
        loc: {
          start: {
            line: 152,
            column: 12
          },
          end: {
            line: 154,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 152,
            column: 12
          },
          end: {
            line: 154,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 152
      },
      "18": {
        loc: {
          start: {
            line: 157,
            column: 41
          },
          end: {
            line: 157,
            column: 59
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 157,
            column: 41
          },
          end: {
            line: 157,
            column: 53
          }
        }, {
          start: {
            line: 157,
            column: 57
          },
          end: {
            line: 157,
            column: 59
          }
        }],
        line: 157
      },
      "19": {
        loc: {
          start: {
            line: 174,
            column: 8
          },
          end: {
            line: 177,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 174,
            column: 8
          },
          end: {
            line: 177,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 174
      },
      "20": {
        loc: {
          start: {
            line: 181,
            column: 8
          },
          end: {
            line: 183,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 181,
            column: 8
          },
          end: {
            line: 183,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 181
      },
      "21": {
        loc: {
          start: {
            line: 193,
            column: 8
          },
          end: {
            line: 203,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 193,
            column: 8
          },
          end: {
            line: 203,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 193
      },
      "22": {
        loc: {
          start: {
            line: 197,
            column: 12
          },
          end: {
            line: 202,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 197,
            column: 12
          },
          end: {
            line: 202,
            column: 13
          }
        }, {
          start: {
            line: 200,
            column: 17
          },
          end: {
            line: 202,
            column: 13
          }
        }],
        line: 197
      },
      "23": {
        loc: {
          start: {
            line: 197,
            column: 16
          },
          end: {
            line: 197,
            column: 62
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 197,
            column: 16
          },
          end: {
            line: 197,
            column: 30
          }
        }, {
          start: {
            line: 197,
            column: 34
          },
          end: {
            line: 197,
            column: 62
          }
        }],
        line: 197
      },
      "24": {
        loc: {
          start: {
            line: 200,
            column: 17
          },
          end: {
            line: 202,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 200,
            column: 17
          },
          end: {
            line: 202,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 200
      },
      "25": {
        loc: {
          start: {
            line: 200,
            column: 21
          },
          end: {
            line: 200,
            column: 62
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 200,
            column: 21
          },
          end: {
            line: 200,
            column: 35
          }
        }, {
          start: {
            line: 200,
            column: 39
          },
          end: {
            line: 200,
            column: 62
          }
        }],
        line: 200
      },
      "26": {
        loc: {
          start: {
            line: 223,
            column: 8
          },
          end: {
            line: 232,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 223,
            column: 8
          },
          end: {
            line: 232,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 223
      },
      "27": {
        loc: {
          start: {
            line: 263,
            column: 12
          },
          end: {
            line: 265,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 263,
            column: 12
          },
          end: {
            line: 265,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 263
      },
      "28": {
        loc: {
          start: {
            line: 275,
            column: 12
          },
          end: {
            line: 281,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 275,
            column: 12
          },
          end: {
            line: 281,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 275
      },
      "29": {
        loc: {
          start: {
            line: 278,
            column: 16
          },
          end: {
            line: 280,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 278,
            column: 16
          },
          end: {
            line: 280,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 278
      },
      "30": {
        loc: {
          start: {
            line: 293,
            column: 68
          },
          end: {
            line: 293,
            column: 122
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 293,
            column: 93
          },
          end: {
            line: 293,
            column: 106
          }
        }, {
          start: {
            line: 293,
            column: 109
          },
          end: {
            line: 293,
            column: 122
          }
        }],
        line: 293
      },
      "31": {
        loc: {
          start: {
            line: 304,
            column: 8
          },
          end: {
            line: 307,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 304,
            column: 8
          },
          end: {
            line: 307,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 304
      },
      "32": {
        loc: {
          start: {
            line: 320,
            column: 29
          },
          end: {
            line: 320,
            column: 54
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 320,
            column: 47
          },
          end: {
            line: 320,
            column: 54
          }
        }],
        line: 320
      },
      "33": {
        loc: {
          start: {
            line: 325,
            column: 12
          },
          end: {
            line: 327,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 325,
            column: 12
          },
          end: {
            line: 327,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 325
      },
      "34": {
        loc: {
          start: {
            line: 325,
            column: 16
          },
          end: {
            line: 325,
            column: 73
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 325,
            column: 16
          },
          end: {
            line: 325,
            column: 46
          }
        }, {
          start: {
            line: 325,
            column: 50
          },
          end: {
            line: 325,
            column: 73
          }
        }],
        line: 325
      },
      "35": {
        loc: {
          start: {
            line: 333,
            column: 8
          },
          end: {
            line: 335,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 333,
            column: 8
          },
          end: {
            line: 335,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 333
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0,
      "74": 0,
      "75": 0,
      "76": 0,
      "77": 0,
      "78": 0,
      "79": 0,
      "80": 0,
      "81": 0,
      "82": 0,
      "83": 0,
      "84": 0,
      "85": 0,
      "86": 0,
      "87": 0,
      "88": 0,
      "89": 0,
      "90": 0,
      "91": 0,
      "92": 0,
      "93": 0,
      "94": 0,
      "95": 0,
      "96": 0,
      "97": 0,
      "98": 0,
      "99": 0,
      "100": 0,
      "101": 0,
      "102": 0,
      "103": 0,
      "104": 0,
      "105": 0,
      "106": 0,
      "107": 0,
      "108": 0,
      "109": 0,
      "110": 0,
      "111": 0,
      "112": 0,
      "113": 0,
      "114": 0,
      "115": 0,
      "116": 0,
      "117": 0,
      "118": 0,
      "119": 0,
      "120": 0,
      "121": 0,
      "122": 0,
      "123": 0,
      "124": 0,
      "125": 0,
      "126": 0,
      "127": 0,
      "128": 0,
      "129": 0,
      "130": 0,
      "131": 0,
      "132": 0,
      "133": 0,
      "134": 0,
      "135": 0,
      "136": 0,
      "137": 0,
      "138": 0,
      "139": 0,
      "140": 0,
      "141": 0,
      "142": 0,
      "143": 0,
      "144": 0,
      "145": 0,
      "146": 0,
      "147": 0,
      "148": 0,
      "149": 0,
      "150": 0,
      "151": 0,
      "152": 0,
      "153": 0,
      "154": 0,
      "155": 0,
      "156": 0,
      "157": 0,
      "158": 0,
      "159": 0,
      "160": 0,
      "161": 0,
      "162": 0,
      "163": 0,
      "164": 0,
      "165": 0,
      "166": 0,
      "167": 0,
      "168": 0,
      "169": 0,
      "170": 0,
      "171": 0,
      "172": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0],
      "4": [0, 0],
      "5": [0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0, 0],
      "10": [0, 0],
      "11": [0, 0],
      "12": [0, 0],
      "13": [0, 0],
      "14": [0, 0],
      "15": [0, 0],
      "16": [0, 0],
      "17": [0, 0],
      "18": [0, 0],
      "19": [0, 0],
      "20": [0, 0],
      "21": [0, 0],
      "22": [0, 0],
      "23": [0, 0],
      "24": [0, 0],
      "25": [0, 0],
      "26": [0, 0],
      "27": [0, 0],
      "28": [0, 0],
      "29": [0, 0],
      "30": [0, 0],
      "31": [0, 0],
      "32": [0],
      "33": [0, 0],
      "34": [0, 0],
      "35": [0, 0]
    },
    inputSourceMap: {
      file: "/home/mhugo/code/claude-code-flow/src/maestro/agent-reuse/AgentRegistry.ts",
      mappings: "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",
      names: [],
      sources: ["/home/mhugo/code/claude-code-flow/src/maestro/agent-reuse/AgentRegistry.ts"],
      sourcesContent: ["/**\n * Agent Registry - Centralized tracking of all agents and their capabilities\n * Implements Single Responsibility principle for agent state management\n */\n\nimport { ILogger } from '../../core/logger.js';\nimport {\n  RegisteredAgent,\n  AgentProfile,\n  AgentStatus,\n  RegistryStatistics,\n  AgentStatusSubscriber,\n  PerformanceHistory\n} from './types.js';\n\n/**\n * Implementation of PerformanceHistory for tracking agent performance\n */\nclass AgentPerformanceHistory implements PerformanceHistory {\n  tasksCompleted: number = 0;\n  tasksFailed: number = 0;\n  averageDuration: number = 0;\n  successRate: number = 1.0;\n  qualityScores: number[] = [];\n  lastUpdated: Date = new Date();\n  \n  private durations: number[] = [];\n  private failures: string[] = [];\n\n  addCompletion(duration: number, estimatedDuration: number): void {\n    this.tasksCompleted++;\n    this.durations.push(duration);\n    \n    // Keep only recent durations (last 100)\n    if (this.durations.length > 100) {\n      this.durations = this.durations.slice(-100);\n    }\n    \n    this.averageDuration = this.durations.reduce((sum, d) => sum + d, 0) / this.durations.length;\n    this.successRate = this.tasksCompleted / (this.tasksCompleted + this.tasksFailed);\n    this.lastUpdated = new Date();\n    \n    // Add quality score based on duration accuracy\n    const accuracy = Math.max(0, 1 - Math.abs(duration - estimatedDuration) / estimatedDuration);\n    this.qualityScores.push(Math.min(1, accuracy + 0.5));\n    \n    if (this.qualityScores.length > 50) {\n      this.qualityScores = this.qualityScores.slice(-50);\n    }\n  }\n\n  addFailure(reason: string): void {\n    this.tasksFailed++;\n    this.failures.push(reason);\n    \n    if (this.failures.length > 50) {\n      this.failures = this.failures.slice(-50);\n    }\n    \n    this.successRate = this.tasksCompleted / (this.tasksCompleted + this.tasksFailed);\n    this.qualityScores.push(0); // Failed tasks get 0 quality\n    this.lastUpdated = new Date();\n  }\n\n  getRecentSuccessRate(window: number = 10): number {\n    const recentTotal = Math.min(window, this.tasksCompleted + this.tasksFailed);\n    if (recentTotal === 0) return 1.0;\n    \n    const recentFailures = Math.min(window, this.tasksFailed);\n    return Math.max(0, (recentTotal - recentFailures) / recentTotal);\n  }\n\n  getAverageQuality(window: number = 20): number {\n    if (this.qualityScores.length === 0) return 0.8; // Default quality\n    \n    const recentScores = this.qualityScores.slice(-window);\n    return recentScores.reduce((sum, score) => sum + score, 0) / recentScores.length;\n  }\n}\n\n/**\n * Centralized registry for all active agents with efficient capability indexing\n */\nexport class AgentRegistry {\n  private activeAgents: Map<string, RegisteredAgent> = new Map();\n  private capabilityIndex: Map<string, Set<string>> = new Map();\n  private statusSubscribers: Set<AgentStatusSubscriber> = new Set();\n  private registryHealth: number = 1.0;\n\n  constructor(private logger: ILogger) {\n    this.logger.info('Agent Registry initialized');\n  }\n\n  /**\n   * Register new agent with comprehensive metadata\n   */\n  async registerAgent(agentId: string, profile: AgentProfile): Promise<void> {\n    try {\n      const registeredAgent: RegisteredAgent = {\n        id: agentId,\n        profile,\n        status: 'available',\n        currentWorkload: 0,\n        capabilities: profile.capabilities || [],\n        performanceHistory: new AgentPerformanceHistory(),\n        registeredAt: new Date(),\n        lastActivity: new Date(),\n        metadata: profile.metadata || {}\n      };\n\n      this.activeAgents.set(agentId, registeredAgent);\n      this.updateCapabilityIndex(agentId, registeredAgent.capabilities);\n      \n      this.logger.info(`Registered agent ${agentId} with capabilities: [${registeredAgent.capabilities.join(', ')}]`);\n      \n      await this.notifyStatusChange(agentId, 'available');\n      this.updateRegistryHealth();\n\n    } catch (error) {\n      this.logger.error(`Failed to register agent ${agentId}: ${error instanceof Error ? error.message : String(error)}`);\n      throw error;\n    }\n  }\n\n  /**\n   * Unregister agent and cleanup all references\n   */\n  async unregisterAgent(agentId: string): Promise<void> {\n    try {\n      const agent = this.activeAgents.get(agentId);\n      if (!agent) {\n        this.logger.warn(`Attempted to unregister non-existent agent: ${agentId}`);\n        return;\n      }\n\n      // Remove from capability index\n      this.removeFromCapabilityIndex(agentId, agent.capabilities);\n      \n      // Remove from active agents\n      this.activeAgents.delete(agentId);\n      \n      this.logger.info(`Unregistered agent: ${agentId}`);\n      \n      await this.notifyStatusChange(agentId, 'offline');\n      this.updateRegistryHealth();\n\n    } catch (error) {\n      this.logger.error(`Failed to unregister agent ${agentId}: ${error instanceof Error ? error.message : String(error)}`);\n      throw error;\n    }\n  }\n\n  /**\n   * Find agents with matching capabilities using efficient indexing\n   * Implements intersection algorithm for multiple capability requirements\n   */\n  async findCapableAgents(requiredCapabilities: string[]): Promise<RegisteredAgent[]> {\n    if (requiredCapabilities.length === 0) {\n      return Array.from(this.activeAgents.values());\n    }\n\n    let candidateIds: Set<string> | null = null;\n    \n    // Use capability index for efficient lookup\n    for (const capability of requiredCapabilities) {\n      const agentsWithCapability = this.capabilityIndex.get(capability);\n      \n      if (!agentsWithCapability || agentsWithCapability.size === 0) {\n        // If any required capability has no agents, return empty\n        return [];\n      }\n      \n      if (candidateIds === null) {\n        // First capability - initialize with all agents that have it\n        candidateIds = new Set(agentsWithCapability);\n      } else {\n        // Subsequent capabilities - intersection with existing candidates\n        const intersection = new Set<string>();\n        candidateIds.forEach(id => {\n          if (agentsWithCapability.has(id)) {\n            intersection.add(id);\n          }\n        });\n        candidateIds = intersection;\n      }\n      \n      // Early termination if no candidates remain\n      if (candidateIds.size === 0) {\n        return [];\n      }\n    }\n\n    // Convert IDs to registered agents and filter out any that no longer exist\n    const capableAgents = Array.from(candidateIds || [])\n      .map(id => this.activeAgents.get(id))\n      .filter(agent => agent !== undefined) as RegisteredAgent[];\n\n    this.logger.debug(`Found ${capableAgents.length} agents with capabilities: [${requiredCapabilities.join(', ')}]`);\n    \n    return capableAgents;\n  }\n\n  /**\n   * Get specific agent by ID\n   */\n  async getAgent(agentId: string): Promise<RegisteredAgent | undefined> {\n    return this.activeAgents.get(agentId);\n  }\n\n  /**\n   * Update agent status with event notification\n   */\n  async updateAgentStatus(agentId: string, status: AgentStatus, metadata?: any): Promise<void> {\n    const agent = this.activeAgents.get(agentId);\n    if (!agent) {\n      this.logger.warn(`Attempted to update status for non-existent agent: ${agentId}`);\n      return;\n    }\n\n    const previousStatus = agent.status;\n    agent.status = status;\n    agent.lastActivity = new Date();\n    \n    if (metadata) {\n      agent.metadata = { ...agent.metadata, ...metadata };\n    }\n\n    this.logger.debug(`Agent ${agentId} status changed: ${previousStatus} -> ${status}`);\n    \n    await this.notifyStatusChange(agentId, status);\n    this.updateRegistryHealth();\n  }\n\n  /**\n   * Update agent workload\n   */\n  async updateAgentWorkload(agentId: string, workload: number): Promise<void> {\n    const agent = this.activeAgents.get(agentId);\n    if (agent) {\n      agent.currentWorkload = workload;\n      agent.lastActivity = new Date();\n      \n      // Auto-update status based on workload\n      if (workload > 0.8 && agent.status === 'available') {\n        await this.updateAgentStatus(agentId, 'busy');\n      } else if (workload < 0.2 && agent.status === 'busy') {\n        await this.updateAgentStatus(agentId, 'available');\n      }\n    }\n  }\n\n  /**\n   * Get all active agents\n   */\n  getAllActiveAgents(): RegisteredAgent[] {\n    return Array.from(this.activeAgents.values());\n  }\n\n  /**\n   * Get agents by status\n   */\n  getAgentsByStatus(status: AgentStatus): RegisteredAgent[] {\n    return Array.from(this.activeAgents.values()).filter(agent => agent.status === status);\n  }\n\n  /**\n   * Get comprehensive agent statistics\n   */\n  getRegistryStats(): RegistryStatistics {\n    const agents = Array.from(this.activeAgents.values());\n    const totalAgents = agents.length;\n    \n    if (totalAgents === 0) {\n      return {\n        totalAgents: 0,\n        availableAgents: 0,\n        busyAgents: 0,\n        averageWorkload: 0,\n        capabilityCoverage: 0,\n        registryHealth: 1.0\n      };\n    }\n\n    const availableAgents = agents.filter(a => a.status === 'available').length;\n    const busyAgents = agents.filter(a => a.status === 'busy').length;\n    const averageWorkload = agents.reduce((sum, a) => sum + a.currentWorkload, 0) / totalAgents;\n    const capabilityCoverage = this.capabilityIndex.size;\n\n    return {\n      totalAgents,\n      availableAgents,\n      busyAgents,\n      averageWorkload,\n      capabilityCoverage,\n      registryHealth: this.registryHealth\n    };\n  }\n\n  /**\n   * Subscribe to agent status changes\n   */\n  subscribeToStatusChanges(subscriber: AgentStatusSubscriber): void {\n    this.statusSubscribers.add(subscriber);\n  }\n\n  /**\n   * Unsubscribe from agent status changes\n   */\n  unsubscribeFromStatusChanges(subscriber: AgentStatusSubscriber): void {\n    this.statusSubscribers.delete(subscriber);\n  }\n\n  /**\n   * Update capability index when agent is registered\n   */\n  private updateCapabilityIndex(agentId: string, capabilities: string[]): void {\n    for (const capability of capabilities) {\n      if (!this.capabilityIndex.has(capability)) {\n        this.capabilityIndex.set(capability, new Set());\n      }\n      this.capabilityIndex.get(capability)!.add(agentId);\n    }\n  }\n\n  /**\n   * Remove agent from capability index\n   */\n  private removeFromCapabilityIndex(agentId: string, capabilities: string[]): void {\n    for (const capability of capabilities) {\n      const agentSet = this.capabilityIndex.get(capability);\n      if (agentSet) {\n        agentSet.delete(agentId);\n        \n        // Clean up empty capability entries\n        if (agentSet.size === 0) {\n          this.capabilityIndex.delete(capability);\n        }\n      }\n    }\n  }\n\n  /**\n   * Notify all subscribers of status changes\n   */\n  private async notifyStatusChange(agentId: string, status: AgentStatus): Promise<void> {\n    const notifications = Array.from(this.statusSubscribers).map(subscriber => {\n      try {\n        return subscriber.onAgentStatusChange(agentId, status);\n      } catch (error) {\n        this.logger.warn(`Status change subscriber error: ${error instanceof Error ? error.message : String(error)}`);\n        return Promise.resolve();\n      }\n    });\n\n    await Promise.allSettled(notifications);\n  }\n\n  /**\n   * Calculate and update registry health score\n   */\n  private updateRegistryHealth(): void {\n    const stats = this.getRegistryStats();\n    \n    if (stats.totalAgents === 0) {\n      this.registryHealth = 1.0;\n      return;\n    }\n\n    // Health factors:\n    // - Availability ratio (available vs total)\n    // - Workload distribution (avoid overload)\n    // - Capability coverage\n    \n    const availabilityRatio = stats.availableAgents / stats.totalAgents;\n    const workloadHealth = Math.max(0, 1 - stats.averageWorkload);\n    const coverageHealth = Math.min(1, stats.capabilityCoverage / 10); // Assume 10 capabilities is good\n    \n    this.registryHealth = (availabilityRatio * 0.4 + workloadHealth * 0.4 + coverageHealth * 0.2);\n  }\n\n  /**\n   * Cleanup stale agents that haven't been active recently\n   */\n  async cleanupStaleAgents(maxInactiveTime: number = 3600000): Promise<string[]> {\n    const now = new Date();\n    const staleAgents: string[] = [];\n    \n    for (const [agentId, agent] of this.activeAgents) {\n      const inactiveTime = now.getTime() - agent.lastActivity.getTime();\n      \n      if (inactiveTime > maxInactiveTime && agent.status !== 'busy') {\n        staleAgents.push(agentId);\n      }\n    }\n\n    // Remove stale agents\n    for (const agentId of staleAgents) {\n      await this.unregisterAgent(agentId);\n    }\n\n    if (staleAgents.length > 0) {\n      this.logger.info(`Cleaned up ${staleAgents.length} stale agents`);\n    }\n\n    return staleAgents;\n  }\n\n  /**\n   * Get detailed capability analysis\n   */\n  getCapabilityAnalysis(): {\n    totalCapabilities: number;\n    capabilityDistribution: Record<string, number>;\n    mostCommonCapabilities: string[];\n    rareCapabilities: string[];\n  } {\n    const capabilityDistribution: Record<string, number> = {};\n    \n    // Count agents per capability\n    for (const [capability, agentSet] of this.capabilityIndex) {\n      capabilityDistribution[capability] = agentSet.size;\n    }\n\n    // Sort capabilities by frequency\n    const sortedCapabilities = Object.entries(capabilityDistribution)\n      .sort(([,a], [,b]) => b - a);\n\n    const mostCommon = sortedCapabilities.slice(0, 5).map(([cap]) => cap);\n    const rare = sortedCapabilities.slice(-5).map(([cap]) => cap);\n\n    return {\n      totalCapabilities: this.capabilityIndex.size,\n      capabilityDistribution,\n      mostCommonCapabilities: mostCommon,\n      rareCapabilities: rare\n    };\n  }\n\n  /**\n   * Shutdown registry and cleanup resources\n   */\n  async shutdown(): Promise<void> {\n    this.logger.info('Shutting down Agent Registry');\n    \n    // Clear all data structures\n    this.activeAgents.clear();\n    this.capabilityIndex.clear();\n    this.statusSubscribers.clear();\n    \n    this.logger.info('Agent Registry shutdown complete');\n  }\n}"],
      version: 3
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "3c75f7d71f9199d1580bea35a680556c0e2845d4"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_e450g1g19 = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_e450g1g19();
/**
 * Agent Registry - Centralized tracking of all agents and their capabilities
 * Implements Single Responsibility principle for agent state management
 */
/**
 * Implementation of PerformanceHistory for tracking agent performance
 */
class AgentPerformanceHistory {
  tasksCompleted =
  /* istanbul ignore next */
  (cov_e450g1g19().s[0]++, 0);
  tasksFailed =
  /* istanbul ignore next */
  (cov_e450g1g19().s[1]++, 0);
  averageDuration =
  /* istanbul ignore next */
  (cov_e450g1g19().s[2]++, 0);
  successRate =
  /* istanbul ignore next */
  (cov_e450g1g19().s[3]++, 1.0);
  qualityScores =
  /* istanbul ignore next */
  (cov_e450g1g19().s[4]++, []);
  lastUpdated =
  /* istanbul ignore next */
  (cov_e450g1g19().s[5]++, new Date());
  durations =
  /* istanbul ignore next */
  (cov_e450g1g19().s[6]++, []);
  failures =
  /* istanbul ignore next */
  (cov_e450g1g19().s[7]++, []);
  addCompletion(duration, estimatedDuration) {
    /* istanbul ignore next */
    cov_e450g1g19().f[0]++;
    cov_e450g1g19().s[8]++;
    this.tasksCompleted++;
    /* istanbul ignore next */
    cov_e450g1g19().s[9]++;
    this.durations.push(duration);
    // Keep only recent durations (last 100)
    /* istanbul ignore next */
    cov_e450g1g19().s[10]++;
    if (this.durations.length > 100) {
      /* istanbul ignore next */
      cov_e450g1g19().b[0][0]++;
      cov_e450g1g19().s[11]++;
      this.durations = this.durations.slice(-100);
    } else
    /* istanbul ignore next */
    {
      cov_e450g1g19().b[0][1]++;
    }
    cov_e450g1g19().s[12]++;
    this.averageDuration = this.durations.reduce((sum, d) => {
      /* istanbul ignore next */
      cov_e450g1g19().f[1]++;
      cov_e450g1g19().s[13]++;
      return sum + d;
    }, 0) / this.durations.length;
    /* istanbul ignore next */
    cov_e450g1g19().s[14]++;
    this.successRate = this.tasksCompleted / (this.tasksCompleted + this.tasksFailed);
    /* istanbul ignore next */
    cov_e450g1g19().s[15]++;
    this.lastUpdated = new Date();
    // Add quality score based on duration accuracy
    const accuracy =
    /* istanbul ignore next */
    (cov_e450g1g19().s[16]++, Math.max(0, 1 - Math.abs(duration - estimatedDuration) / estimatedDuration));
    /* istanbul ignore next */
    cov_e450g1g19().s[17]++;
    this.qualityScores.push(Math.min(1, accuracy + 0.5));
    /* istanbul ignore next */
    cov_e450g1g19().s[18]++;
    if (this.qualityScores.length > 50) {
      /* istanbul ignore next */
      cov_e450g1g19().b[1][0]++;
      cov_e450g1g19().s[19]++;
      this.qualityScores = this.qualityScores.slice(-50);
    } else
    /* istanbul ignore next */
    {
      cov_e450g1g19().b[1][1]++;
    }
  }
  addFailure(reason) {
    /* istanbul ignore next */
    cov_e450g1g19().f[2]++;
    cov_e450g1g19().s[20]++;
    this.tasksFailed++;
    /* istanbul ignore next */
    cov_e450g1g19().s[21]++;
    this.failures.push(reason);
    /* istanbul ignore next */
    cov_e450g1g19().s[22]++;
    if (this.failures.length > 50) {
      /* istanbul ignore next */
      cov_e450g1g19().b[2][0]++;
      cov_e450g1g19().s[23]++;
      this.failures = this.failures.slice(-50);
    } else
    /* istanbul ignore next */
    {
      cov_e450g1g19().b[2][1]++;
    }
    cov_e450g1g19().s[24]++;
    this.successRate = this.tasksCompleted / (this.tasksCompleted + this.tasksFailed);
    /* istanbul ignore next */
    cov_e450g1g19().s[25]++;
    this.qualityScores.push(0); // Failed tasks get 0 quality
    /* istanbul ignore next */
    cov_e450g1g19().s[26]++;
    this.lastUpdated = new Date();
  }
  getRecentSuccessRate(window =
  /* istanbul ignore next */
  (cov_e450g1g19().b[3][0]++, 10)) {
    /* istanbul ignore next */
    cov_e450g1g19().f[3]++;
    const recentTotal =
    /* istanbul ignore next */
    (cov_e450g1g19().s[27]++, Math.min(window, this.tasksCompleted + this.tasksFailed));
    /* istanbul ignore next */
    cov_e450g1g19().s[28]++;
    if (recentTotal === 0) {
      /* istanbul ignore next */
      cov_e450g1g19().b[4][0]++;
      cov_e450g1g19().s[29]++;
      return 1.0;
    } else
    /* istanbul ignore next */
    {
      cov_e450g1g19().b[4][1]++;
    }
    const recentFailures =
    /* istanbul ignore next */
    (cov_e450g1g19().s[30]++, Math.min(window, this.tasksFailed));
    /* istanbul ignore next */
    cov_e450g1g19().s[31]++;
    return Math.max(0, (recentTotal - recentFailures) / recentTotal);
  }
  getAverageQuality(window =
  /* istanbul ignore next */
  (cov_e450g1g19().b[5][0]++, 20)) {
    /* istanbul ignore next */
    cov_e450g1g19().f[4]++;
    cov_e450g1g19().s[32]++;
    if (this.qualityScores.length === 0) {
      /* istanbul ignore next */
      cov_e450g1g19().b[6][0]++;
      cov_e450g1g19().s[33]++;
      return 0.8;
    } else
    /* istanbul ignore next */
    {
      cov_e450g1g19().b[6][1]++;
    } // Default quality
    const recentScores =
    /* istanbul ignore next */
    (cov_e450g1g19().s[34]++, this.qualityScores.slice(-window));
    /* istanbul ignore next */
    cov_e450g1g19().s[35]++;
    return recentScores.reduce((sum, score) => {
      /* istanbul ignore next */
      cov_e450g1g19().f[5]++;
      cov_e450g1g19().s[36]++;
      return sum + score;
    }, 0) / recentScores.length;
  }
}
/**
 * Centralized registry for all active agents with efficient capability indexing
 */
export class AgentRegistry {
  logger;
  activeAgents =
  /* istanbul ignore next */
  (cov_e450g1g19().s[37]++, new Map());
  capabilityIndex =
  /* istanbul ignore next */
  (cov_e450g1g19().s[38]++, new Map());
  statusSubscribers =
  /* istanbul ignore next */
  (cov_e450g1g19().s[39]++, new Set());
  registryHealth =
  /* istanbul ignore next */
  (cov_e450g1g19().s[40]++, 1.0);
  constructor(logger) {
    /* istanbul ignore next */
    cov_e450g1g19().f[6]++;
    cov_e450g1g19().s[41]++;
    this.logger = logger;
    /* istanbul ignore next */
    cov_e450g1g19().s[42]++;
    this.logger.info('Agent Registry initialized');
  }
  /**
   * Register new agent with comprehensive metadata
   */
  async registerAgent(agentId, profile) {
    /* istanbul ignore next */
    cov_e450g1g19().f[7]++;
    cov_e450g1g19().s[43]++;
    try {
      const registeredAgent =
      /* istanbul ignore next */
      (cov_e450g1g19().s[44]++, {
        id: agentId,
        profile,
        status: 'available',
        currentWorkload: 0,
        capabilities:
        /* istanbul ignore next */
        (cov_e450g1g19().b[7][0]++, profile.capabilities) ||
        /* istanbul ignore next */
        (cov_e450g1g19().b[7][1]++, []),
        performanceHistory: new AgentPerformanceHistory(),
        registeredAt: new Date(),
        lastActivity: new Date(),
        metadata:
        /* istanbul ignore next */
        (cov_e450g1g19().b[8][0]++, profile.metadata) ||
        /* istanbul ignore next */
        (cov_e450g1g19().b[8][1]++, {})
      });
      /* istanbul ignore next */
      cov_e450g1g19().s[45]++;
      this.activeAgents.set(agentId, registeredAgent);
      /* istanbul ignore next */
      cov_e450g1g19().s[46]++;
      this.updateCapabilityIndex(agentId, registeredAgent.capabilities);
      /* istanbul ignore next */
      cov_e450g1g19().s[47]++;
      this.logger.info(`Registered agent ${agentId} with capabilities: [${registeredAgent.capabilities.join(', ')}]`);
      /* istanbul ignore next */
      cov_e450g1g19().s[48]++;
      await this.notifyStatusChange(agentId, 'available');
      /* istanbul ignore next */
      cov_e450g1g19().s[49]++;
      this.updateRegistryHealth();
    } catch (error) {
      /* istanbul ignore next */
      cov_e450g1g19().s[50]++;
      this.logger.error(`Failed to register agent ${agentId}: ${error instanceof Error ?
      /* istanbul ignore next */
      (cov_e450g1g19().b[9][0]++, error.message) :
      /* istanbul ignore next */
      (cov_e450g1g19().b[9][1]++, String(error))}`);
      /* istanbul ignore next */
      cov_e450g1g19().s[51]++;
      throw error;
    }
  }
  /**
   * Unregister agent and cleanup all references
   */
  async unregisterAgent(agentId) {
    /* istanbul ignore next */
    cov_e450g1g19().f[8]++;
    cov_e450g1g19().s[52]++;
    try {
      const agent =
      /* istanbul ignore next */
      (cov_e450g1g19().s[53]++, this.activeAgents.get(agentId));
      /* istanbul ignore next */
      cov_e450g1g19().s[54]++;
      if (!agent) {
        /* istanbul ignore next */
        cov_e450g1g19().b[10][0]++;
        cov_e450g1g19().s[55]++;
        this.logger.warn(`Attempted to unregister non-existent agent: ${agentId}`);
        /* istanbul ignore next */
        cov_e450g1g19().s[56]++;
        return;
      } else
      /* istanbul ignore next */
      {
        cov_e450g1g19().b[10][1]++;
      }
      // Remove from capability index
      cov_e450g1g19().s[57]++;
      this.removeFromCapabilityIndex(agentId, agent.capabilities);
      // Remove from active agents
      /* istanbul ignore next */
      cov_e450g1g19().s[58]++;
      this.activeAgents.delete(agentId);
      /* istanbul ignore next */
      cov_e450g1g19().s[59]++;
      this.logger.info(`Unregistered agent: ${agentId}`);
      /* istanbul ignore next */
      cov_e450g1g19().s[60]++;
      await this.notifyStatusChange(agentId, 'offline');
      /* istanbul ignore next */
      cov_e450g1g19().s[61]++;
      this.updateRegistryHealth();
    } catch (error) {
      /* istanbul ignore next */
      cov_e450g1g19().s[62]++;
      this.logger.error(`Failed to unregister agent ${agentId}: ${error instanceof Error ?
      /* istanbul ignore next */
      (cov_e450g1g19().b[11][0]++, error.message) :
      /* istanbul ignore next */
      (cov_e450g1g19().b[11][1]++, String(error))}`);
      /* istanbul ignore next */
      cov_e450g1g19().s[63]++;
      throw error;
    }
  }
  /**
   * Find agents with matching capabilities using efficient indexing
   * Implements intersection algorithm for multiple capability requirements
   */
  async findCapableAgents(requiredCapabilities) {
    /* istanbul ignore next */
    cov_e450g1g19().f[9]++;
    cov_e450g1g19().s[64]++;
    if (requiredCapabilities.length === 0) {
      /* istanbul ignore next */
      cov_e450g1g19().b[12][0]++;
      cov_e450g1g19().s[65]++;
      return Array.from(this.activeAgents.values());
    } else
    /* istanbul ignore next */
    {
      cov_e450g1g19().b[12][1]++;
    }
    let candidateIds =
    /* istanbul ignore next */
    (cov_e450g1g19().s[66]++, null);
    // Use capability index for efficient lookup
    /* istanbul ignore next */
    cov_e450g1g19().s[67]++;
    for (const capability of requiredCapabilities) {
      const agentsWithCapability =
      /* istanbul ignore next */
      (cov_e450g1g19().s[68]++, this.capabilityIndex.get(capability));
      /* istanbul ignore next */
      cov_e450g1g19().s[69]++;
      if (
      /* istanbul ignore next */
      (cov_e450g1g19().b[14][0]++, !agentsWithCapability) ||
      /* istanbul ignore next */
      (cov_e450g1g19().b[14][1]++, agentsWithCapability.size === 0)) {
        /* istanbul ignore next */
        cov_e450g1g19().b[13][0]++;
        cov_e450g1g19().s[70]++;
        // If any required capability has no agents, return empty
        return [];
      } else
      /* istanbul ignore next */
      {
        cov_e450g1g19().b[13][1]++;
      }
      cov_e450g1g19().s[71]++;
      if (candidateIds === null) {
        /* istanbul ignore next */
        cov_e450g1g19().b[15][0]++;
        cov_e450g1g19().s[72]++;
        // First capability - initialize with all agents that have it
        candidateIds = new Set(agentsWithCapability);
      } else {
        /* istanbul ignore next */
        cov_e450g1g19().b[15][1]++;
        // Subsequent capabilities - intersection with existing candidates
        const intersection =
        /* istanbul ignore next */
        (cov_e450g1g19().s[73]++, new Set());
        /* istanbul ignore next */
        cov_e450g1g19().s[74]++;
        candidateIds.forEach(id => {
          /* istanbul ignore next */
          cov_e450g1g19().f[10]++;
          cov_e450g1g19().s[75]++;
          if (agentsWithCapability.has(id)) {
            /* istanbul ignore next */
            cov_e450g1g19().b[16][0]++;
            cov_e450g1g19().s[76]++;
            intersection.add(id);
          } else
          /* istanbul ignore next */
          {
            cov_e450g1g19().b[16][1]++;
          }
        });
        /* istanbul ignore next */
        cov_e450g1g19().s[77]++;
        candidateIds = intersection;
      }
      // Early termination if no candidates remain
      /* istanbul ignore next */
      cov_e450g1g19().s[78]++;
      if (candidateIds.size === 0) {
        /* istanbul ignore next */
        cov_e450g1g19().b[17][0]++;
        cov_e450g1g19().s[79]++;
        return [];
      } else
      /* istanbul ignore next */
      {
        cov_e450g1g19().b[17][1]++;
      }
    }
    // Convert IDs to registered agents and filter out any that no longer exist
    const capableAgents =
    /* istanbul ignore next */
    (cov_e450g1g19().s[80]++, Array.from(
    /* istanbul ignore next */
    (cov_e450g1g19().b[18][0]++, candidateIds) ||
    /* istanbul ignore next */
    (cov_e450g1g19().b[18][1]++, [])).map(id => {
      /* istanbul ignore next */
      cov_e450g1g19().f[11]++;
      cov_e450g1g19().s[81]++;
      return this.activeAgents.get(id);
    }).filter(agent => {
      /* istanbul ignore next */
      cov_e450g1g19().f[12]++;
      cov_e450g1g19().s[82]++;
      return agent !== undefined;
    }));
    /* istanbul ignore next */
    cov_e450g1g19().s[83]++;
    this.logger.debug(`Found ${capableAgents.length} agents with capabilities: [${requiredCapabilities.join(', ')}]`);
    /* istanbul ignore next */
    cov_e450g1g19().s[84]++;
    return capableAgents;
  }
  /**
   * Get specific agent by ID
   */
  async getAgent(agentId) {
    /* istanbul ignore next */
    cov_e450g1g19().f[13]++;
    cov_e450g1g19().s[85]++;
    return this.activeAgents.get(agentId);
  }
  /**
   * Update agent status with event notification
   */
  async updateAgentStatus(agentId, status, metadata) {
    /* istanbul ignore next */
    cov_e450g1g19().f[14]++;
    const agent =
    /* istanbul ignore next */
    (cov_e450g1g19().s[86]++, this.activeAgents.get(agentId));
    /* istanbul ignore next */
    cov_e450g1g19().s[87]++;
    if (!agent) {
      /* istanbul ignore next */
      cov_e450g1g19().b[19][0]++;
      cov_e450g1g19().s[88]++;
      this.logger.warn(`Attempted to update status for non-existent agent: ${agentId}`);
      /* istanbul ignore next */
      cov_e450g1g19().s[89]++;
      return;
    } else
    /* istanbul ignore next */
    {
      cov_e450g1g19().b[19][1]++;
    }
    const previousStatus =
    /* istanbul ignore next */
    (cov_e450g1g19().s[90]++, agent.status);
    /* istanbul ignore next */
    cov_e450g1g19().s[91]++;
    agent.status = status;
    /* istanbul ignore next */
    cov_e450g1g19().s[92]++;
    agent.lastActivity = new Date();
    /* istanbul ignore next */
    cov_e450g1g19().s[93]++;
    if (metadata) {
      /* istanbul ignore next */
      cov_e450g1g19().b[20][0]++;
      cov_e450g1g19().s[94]++;
      agent.metadata = {
        ...agent.metadata,
        ...metadata
      };
    } else
    /* istanbul ignore next */
    {
      cov_e450g1g19().b[20][1]++;
    }
    cov_e450g1g19().s[95]++;
    this.logger.debug(`Agent ${agentId} status changed: ${previousStatus} -> ${status}`);
    /* istanbul ignore next */
    cov_e450g1g19().s[96]++;
    await this.notifyStatusChange(agentId, status);
    /* istanbul ignore next */
    cov_e450g1g19().s[97]++;
    this.updateRegistryHealth();
  }
  /**
   * Update agent workload
   */
  async updateAgentWorkload(agentId, workload) {
    /* istanbul ignore next */
    cov_e450g1g19().f[15]++;
    const agent =
    /* istanbul ignore next */
    (cov_e450g1g19().s[98]++, this.activeAgents.get(agentId));
    /* istanbul ignore next */
    cov_e450g1g19().s[99]++;
    if (agent) {
      /* istanbul ignore next */
      cov_e450g1g19().b[21][0]++;
      cov_e450g1g19().s[100]++;
      agent.currentWorkload = workload;
      /* istanbul ignore next */
      cov_e450g1g19().s[101]++;
      agent.lastActivity = new Date();
      // Auto-update status based on workload
      /* istanbul ignore next */
      cov_e450g1g19().s[102]++;
      if (
      /* istanbul ignore next */
      (cov_e450g1g19().b[23][0]++, workload > 0.8) &&
      /* istanbul ignore next */
      (cov_e450g1g19().b[23][1]++, agent.status === 'available')) {
        /* istanbul ignore next */
        cov_e450g1g19().b[22][0]++;
        cov_e450g1g19().s[103]++;
        await this.updateAgentStatus(agentId, 'busy');
      } else {
        /* istanbul ignore next */
        cov_e450g1g19().b[22][1]++;
        cov_e450g1g19().s[104]++;
        if (
        /* istanbul ignore next */
        (cov_e450g1g19().b[25][0]++, workload < 0.2) &&
        /* istanbul ignore next */
        (cov_e450g1g19().b[25][1]++, agent.status === 'busy')) {
          /* istanbul ignore next */
          cov_e450g1g19().b[24][0]++;
          cov_e450g1g19().s[105]++;
          await this.updateAgentStatus(agentId, 'available');
        } else
        /* istanbul ignore next */
        {
          cov_e450g1g19().b[24][1]++;
        }
      }
    } else
    /* istanbul ignore next */
    {
      cov_e450g1g19().b[21][1]++;
    }
  }
  /**
   * Get all active agents
   */
  getAllActiveAgents() {
    /* istanbul ignore next */
    cov_e450g1g19().f[16]++;
    cov_e450g1g19().s[106]++;
    return Array.from(this.activeAgents.values());
  }
  /**
   * Get agents by status
   */
  getAgentsByStatus(status) {
    /* istanbul ignore next */
    cov_e450g1g19().f[17]++;
    cov_e450g1g19().s[107]++;
    return Array.from(this.activeAgents.values()).filter(agent => {
      /* istanbul ignore next */
      cov_e450g1g19().f[18]++;
      cov_e450g1g19().s[108]++;
      return agent.status === status;
    });
  }
  /**
   * Get comprehensive agent statistics
   */
  getRegistryStats() {
    /* istanbul ignore next */
    cov_e450g1g19().f[19]++;
    const agents =
    /* istanbul ignore next */
    (cov_e450g1g19().s[109]++, Array.from(this.activeAgents.values()));
    const totalAgents =
    /* istanbul ignore next */
    (cov_e450g1g19().s[110]++, agents.length);
    /* istanbul ignore next */
    cov_e450g1g19().s[111]++;
    if (totalAgents === 0) {
      /* istanbul ignore next */
      cov_e450g1g19().b[26][0]++;
      cov_e450g1g19().s[112]++;
      return {
        totalAgents: 0,
        availableAgents: 0,
        busyAgents: 0,
        averageWorkload: 0,
        capabilityCoverage: 0,
        registryHealth: 1.0
      };
    } else
    /* istanbul ignore next */
    {
      cov_e450g1g19().b[26][1]++;
    }
    const availableAgents =
    /* istanbul ignore next */
    (cov_e450g1g19().s[113]++, agents.filter(a => {
      /* istanbul ignore next */
      cov_e450g1g19().f[20]++;
      cov_e450g1g19().s[114]++;
      return a.status === 'available';
    }).length);
    const busyAgents =
    /* istanbul ignore next */
    (cov_e450g1g19().s[115]++, agents.filter(a => {
      /* istanbul ignore next */
      cov_e450g1g19().f[21]++;
      cov_e450g1g19().s[116]++;
      return a.status === 'busy';
    }).length);
    const averageWorkload =
    /* istanbul ignore next */
    (cov_e450g1g19().s[117]++, agents.reduce((sum, a) => {
      /* istanbul ignore next */
      cov_e450g1g19().f[22]++;
      cov_e450g1g19().s[118]++;
      return sum + a.currentWorkload;
    }, 0) / totalAgents);
    const capabilityCoverage =
    /* istanbul ignore next */
    (cov_e450g1g19().s[119]++, this.capabilityIndex.size);
    /* istanbul ignore next */
    cov_e450g1g19().s[120]++;
    return {
      totalAgents,
      availableAgents,
      busyAgents,
      averageWorkload,
      capabilityCoverage,
      registryHealth: this.registryHealth
    };
  }
  /**
   * Subscribe to agent status changes
   */
  subscribeToStatusChanges(subscriber) {
    /* istanbul ignore next */
    cov_e450g1g19().f[23]++;
    cov_e450g1g19().s[121]++;
    this.statusSubscribers.add(subscriber);
  }
  /**
   * Unsubscribe from agent status changes
   */
  unsubscribeFromStatusChanges(subscriber) {
    /* istanbul ignore next */
    cov_e450g1g19().f[24]++;
    cov_e450g1g19().s[122]++;
    this.statusSubscribers.delete(subscriber);
  }
  /**
   * Update capability index when agent is registered
   */
  updateCapabilityIndex(agentId, capabilities) {
    /* istanbul ignore next */
    cov_e450g1g19().f[25]++;
    cov_e450g1g19().s[123]++;
    for (const capability of capabilities) {
      /* istanbul ignore next */
      cov_e450g1g19().s[124]++;
      if (!this.capabilityIndex.has(capability)) {
        /* istanbul ignore next */
        cov_e450g1g19().b[27][0]++;
        cov_e450g1g19().s[125]++;
        this.capabilityIndex.set(capability, new Set());
      } else
      /* istanbul ignore next */
      {
        cov_e450g1g19().b[27][1]++;
      }
      cov_e450g1g19().s[126]++;
      this.capabilityIndex.get(capability).add(agentId);
    }
  }
  /**
   * Remove agent from capability index
   */
  removeFromCapabilityIndex(agentId, capabilities) {
    /* istanbul ignore next */
    cov_e450g1g19().f[26]++;
    cov_e450g1g19().s[127]++;
    for (const capability of capabilities) {
      const agentSet =
      /* istanbul ignore next */
      (cov_e450g1g19().s[128]++, this.capabilityIndex.get(capability));
      /* istanbul ignore next */
      cov_e450g1g19().s[129]++;
      if (agentSet) {
        /* istanbul ignore next */
        cov_e450g1g19().b[28][0]++;
        cov_e450g1g19().s[130]++;
        agentSet.delete(agentId);
        // Clean up empty capability entries
        /* istanbul ignore next */
        cov_e450g1g19().s[131]++;
        if (agentSet.size === 0) {
          /* istanbul ignore next */
          cov_e450g1g19().b[29][0]++;
          cov_e450g1g19().s[132]++;
          this.capabilityIndex.delete(capability);
        } else
        /* istanbul ignore next */
        {
          cov_e450g1g19().b[29][1]++;
        }
      } else
      /* istanbul ignore next */
      {
        cov_e450g1g19().b[28][1]++;
      }
    }
  }
  /**
   * Notify all subscribers of status changes
   */
  async notifyStatusChange(agentId, status) {
    /* istanbul ignore next */
    cov_e450g1g19().f[27]++;
    const notifications =
    /* istanbul ignore next */
    (cov_e450g1g19().s[133]++, Array.from(this.statusSubscribers).map(subscriber => {
      /* istanbul ignore next */
      cov_e450g1g19().f[28]++;
      cov_e450g1g19().s[134]++;
      try {
        /* istanbul ignore next */
        cov_e450g1g19().s[135]++;
        return subscriber.onAgentStatusChange(agentId, status);
      } catch (error) {
        /* istanbul ignore next */
        cov_e450g1g19().s[136]++;
        this.logger.warn(`Status change subscriber error: ${error instanceof Error ?
        /* istanbul ignore next */
        (cov_e450g1g19().b[30][0]++, error.message) :
        /* istanbul ignore next */
        (cov_e450g1g19().b[30][1]++, String(error))}`);
        /* istanbul ignore next */
        cov_e450g1g19().s[137]++;
        return Promise.resolve();
      }
    }));
    /* istanbul ignore next */
    cov_e450g1g19().s[138]++;
    await Promise.allSettled(notifications);
  }
  /**
   * Calculate and update registry health score
   */
  updateRegistryHealth() {
    /* istanbul ignore next */
    cov_e450g1g19().f[29]++;
    const stats =
    /* istanbul ignore next */
    (cov_e450g1g19().s[139]++, this.getRegistryStats());
    /* istanbul ignore next */
    cov_e450g1g19().s[140]++;
    if (stats.totalAgents === 0) {
      /* istanbul ignore next */
      cov_e450g1g19().b[31][0]++;
      cov_e450g1g19().s[141]++;
      this.registryHealth = 1.0;
      /* istanbul ignore next */
      cov_e450g1g19().s[142]++;
      return;
    } else
    /* istanbul ignore next */
    {
      cov_e450g1g19().b[31][1]++;
    }
    // Health factors:
    // - Availability ratio (available vs total)
    // - Workload distribution (avoid overload)
    // - Capability coverage
    const availabilityRatio =
    /* istanbul ignore next */
    (cov_e450g1g19().s[143]++, stats.availableAgents / stats.totalAgents);
    const workloadHealth =
    /* istanbul ignore next */
    (cov_e450g1g19().s[144]++, Math.max(0, 1 - stats.averageWorkload));
    const coverageHealth =
    /* istanbul ignore next */
    (cov_e450g1g19().s[145]++, Math.min(1, stats.capabilityCoverage / 10)); // Assume 10 capabilities is good
    /* istanbul ignore next */
    cov_e450g1g19().s[146]++;
    this.registryHealth = availabilityRatio * 0.4 + workloadHealth * 0.4 + coverageHealth * 0.2;
  }
  /**
   * Cleanup stale agents that haven't been active recently
   */
  async cleanupStaleAgents(maxInactiveTime =
  /* istanbul ignore next */
  (cov_e450g1g19().b[32][0]++, 3600000)) {
    /* istanbul ignore next */
    cov_e450g1g19().f[30]++;
    const now =
    /* istanbul ignore next */
    (cov_e450g1g19().s[147]++, new Date());
    const staleAgents =
    /* istanbul ignore next */
    (cov_e450g1g19().s[148]++, []);
    /* istanbul ignore next */
    cov_e450g1g19().s[149]++;
    for (const [agentId, agent] of this.activeAgents) {
      const inactiveTime =
      /* istanbul ignore next */
      (cov_e450g1g19().s[150]++, now.getTime() - agent.lastActivity.getTime());
      /* istanbul ignore next */
      cov_e450g1g19().s[151]++;
      if (
      /* istanbul ignore next */
      (cov_e450g1g19().b[34][0]++, inactiveTime > maxInactiveTime) &&
      /* istanbul ignore next */
      (cov_e450g1g19().b[34][1]++, agent.status !== 'busy')) {
        /* istanbul ignore next */
        cov_e450g1g19().b[33][0]++;
        cov_e450g1g19().s[152]++;
        staleAgents.push(agentId);
      } else
      /* istanbul ignore next */
      {
        cov_e450g1g19().b[33][1]++;
      }
    }
    // Remove stale agents
    /* istanbul ignore next */
    cov_e450g1g19().s[153]++;
    for (const agentId of staleAgents) {
      /* istanbul ignore next */
      cov_e450g1g19().s[154]++;
      await this.unregisterAgent(agentId);
    }
    /* istanbul ignore next */
    cov_e450g1g19().s[155]++;
    if (staleAgents.length > 0) {
      /* istanbul ignore next */
      cov_e450g1g19().b[35][0]++;
      cov_e450g1g19().s[156]++;
      this.logger.info(`Cleaned up ${staleAgents.length} stale agents`);
    } else
    /* istanbul ignore next */
    {
      cov_e450g1g19().b[35][1]++;
    }
    cov_e450g1g19().s[157]++;
    return staleAgents;
  }
  /**
   * Get detailed capability analysis
   */
  getCapabilityAnalysis() {
    /* istanbul ignore next */
    cov_e450g1g19().f[31]++;
    const capabilityDistribution =
    /* istanbul ignore next */
    (cov_e450g1g19().s[158]++, {});
    // Count agents per capability
    /* istanbul ignore next */
    cov_e450g1g19().s[159]++;
    for (const [capability, agentSet] of this.capabilityIndex) {
      /* istanbul ignore next */
      cov_e450g1g19().s[160]++;
      capabilityDistribution[capability] = agentSet.size;
    }
    // Sort capabilities by frequency
    const sortedCapabilities =
    /* istanbul ignore next */
    (cov_e450g1g19().s[161]++, Object.entries(capabilityDistribution).sort(([, a], [, b]) => {
      /* istanbul ignore next */
      cov_e450g1g19().f[32]++;
      cov_e450g1g19().s[162]++;
      return b - a;
    }));
    const mostCommon =
    /* istanbul ignore next */
    (cov_e450g1g19().s[163]++, sortedCapabilities.slice(0, 5).map(([cap]) => {
      /* istanbul ignore next */
      cov_e450g1g19().f[33]++;
      cov_e450g1g19().s[164]++;
      return cap;
    }));
    const rare =
    /* istanbul ignore next */
    (cov_e450g1g19().s[165]++, sortedCapabilities.slice(-5).map(([cap]) => {
      /* istanbul ignore next */
      cov_e450g1g19().f[34]++;
      cov_e450g1g19().s[166]++;
      return cap;
    }));
    /* istanbul ignore next */
    cov_e450g1g19().s[167]++;
    return {
      totalCapabilities: this.capabilityIndex.size,
      capabilityDistribution,
      mostCommonCapabilities: mostCommon,
      rareCapabilities: rare
    };
  }
  /**
   * Shutdown registry and cleanup resources
   */
  async shutdown() {
    /* istanbul ignore next */
    cov_e450g1g19().f[35]++;
    cov_e450g1g19().s[168]++;
    this.logger.info('Shutting down Agent Registry');
    // Clear all data structures
    /* istanbul ignore next */
    cov_e450g1g19().s[169]++;
    this.activeAgents.clear();
    /* istanbul ignore next */
    cov_e450g1g19().s[170]++;
    this.capabilityIndex.clear();
    /* istanbul ignore next */
    cov_e450g1g19().s[171]++;
    this.statusSubscribers.clear();
    /* istanbul ignore next */
    cov_e450g1g19().s[172]++;
    this.logger.info('Agent Registry shutdown complete');
  }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,