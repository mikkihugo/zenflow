fdb0f956791fe20eecdc42654125b93d
/* istanbul ignore next */
function cov_2gapkjnzm4() {
  var path = "/home/mhugo/code/claude-code-flow/src/cli/services/config-service.ts";
  var hash = "6c62d2c826d2a91fb29936e00fdbbcb20fb964ec";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/home/mhugo/code/claude-code-flow/src/cli/services/config-service.ts",
    statementMap: {
      "0": {
        start: {
          line: 18,
          column: 23
        },
        end: {
          line: 71,
          column: 1
        }
      },
      "1": {
        start: {
          line: 75,
          column: 25
        },
        end: {
          line: 80,
          column: 1
        }
      },
      "2": {
        start: {
          line: 87,
          column: 17
        },
        end: {
          line: 87,
          column: 21
        }
      },
      "3": {
        start: {
          line: 88,
          column: 18
        },
        end: {
          line: 88,
          column: 23
        }
      },
      "4": {
        start: {
          line: 89,
          column: 15
        },
        end: {
          line: 89,
          column: 24
        }
      },
      "5": {
        start: {
          line: 91,
          column: 8
        },
        end: {
          line: 91,
          column: 16
        }
      },
      "6": {
        start: {
          line: 92,
          column: 8
        },
        end: {
          line: 92,
          column: 64
        }
      },
      "7": {
        start: {
          line: 93,
          column: 8
        },
        end: {
          line: 93,
          column: 44
        }
      },
      "8": {
        start: {
          line: 94,
          column: 8
        },
        end: {
          line: 96,
          column: 9
        }
      },
      "9": {
        start: {
          line: 95,
          column: 12
        },
        end: {
          line: 95,
          column: 48
        }
      },
      "10": {
        start: {
          line: 102,
          column: 8
        },
        end: {
          line: 104,
          column: 9
        }
      },
      "11": {
        start: {
          line: 103,
          column: 12
        },
        end: {
          line: 103,
          column: 19
        }
      },
      "12": {
        start: {
          line: 105,
          column: 8
        },
        end: {
          line: 113,
          column: 9
        }
      },
      "13": {
        start: {
          line: 106,
          column: 12
        },
        end: {
          line: 106,
          column: 44
        }
      },
      "14": {
        start: {
          line: 107,
          column: 12
        },
        end: {
          line: 107,
          column: 36
        }
      },
      "15": {
        start: {
          line: 108,
          column: 12
        },
        end: {
          line: 108,
          column: 66
        }
      },
      "16": {
        start: {
          line: 111,
          column: 12
        },
        end: {
          line: 111,
          column: 84
        }
      },
      "17": {
        start: {
          line: 112,
          column: 12
        },
        end: {
          line: 112,
          column: 24
        }
      },
      "18": {
        start: {
          line: 119,
          column: 8
        },
        end: {
          line: 121,
          column: 9
        }
      },
      "19": {
        start: {
          line: 120,
          column: 12
        },
        end: {
          line: 120,
          column: 19
        }
      },
      "20": {
        start: {
          line: 122,
          column: 8
        },
        end: {
          line: 135,
          column: 9
        }
      },
      "21": {
        start: {
          line: 124,
          column: 12
        },
        end: {
          line: 128,
          column: 13
        }
      },
      "22": {
        start: {
          line: 125,
          column: 16
        },
        end: {
          line: 127,
          column: 17
        }
      },
      "23": {
        start: {
          line: 126,
          column: 20
        },
        end: {
          line: 126,
          column: 36
        }
      },
      "24": {
        start: {
          line: 129,
          column: 12
        },
        end: {
          line: 129,
          column: 34
        }
      },
      "25": {
        start: {
          line: 130,
          column: 12
        },
        end: {
          line: 130,
          column: 37
        }
      },
      "26": {
        start: {
          line: 131,
          column: 12
        },
        end: {
          line: 131,
          column: 63
        }
      },
      "27": {
        start: {
          line: 134,
          column: 12
        },
        end: {
          line: 134,
          column: 79
        }
      },
      "28": {
        start: {
          line: 141,
          column: 8
        },
        end: {
          line: 166,
          column: 9
        }
      },
      "29": {
        start: {
          line: 142,
          column: 12
        },
        end: {
          line: 147,
          column: 13
        }
      },
      "30": {
        start: {
          line: 143,
          column: 16
        },
        end: {
          line: 146,
          column: 18
        }
      },
      "31": {
        start: {
          line: 149,
          column: 31
        },
        end: {
          line: 149,
          column: 63
        }
      },
      "32": {
        start: {
          line: 150,
          column: 12
        },
        end: {
          line: 155,
          column: 13
        }
      },
      "33": {
        start: {
          line: 151,
          column: 16
        },
        end: {
          line: 154,
          column: 18
        }
      },
      "34": {
        start: {
          line: 156,
          column: 12
        },
        end: {
          line: 159,
          column: 14
        }
      },
      "35": {
        start: {
          line: 162,
          column: 12
        },
        end: {
          line: 165,
          column: 14
        }
      },
      "36": {
        start: {
          line: 172,
          column: 8
        },
        end: {
          line: 218,
          column: 9
        }
      },
      "37": {
        start: {
          line: 174,
          column: 29
        },
        end: {
          line: 174,
          column: 50
        }
      },
      "38": {
        start: {
          line: 175,
          column: 12
        },
        end: {
          line: 199,
          column: 13
        }
      },
      "39": {
        start: {
          line: 177,
          column: 16
        },
        end: {
          line: 185,
          column: 17
        }
      },
      "40": {
        start: {
          line: 178,
          column: 33
        },
        end: {
          line: 178,
          column: 72
        }
      },
      "41": {
        start: {
          line: 179,
          column: 35
        },
        end: {
          line: 179,
          column: 51
        }
      },
      "42": {
        start: {
          line: 180,
          column: 20
        },
        end: {
          line: 180,
          column: 75
        }
      },
      "43": {
        start: {
          line: 181,
          column: 20
        },
        end: {
          line: 181,
          column: 86
        }
      },
      "44": {
        start: {
          line: 184,
          column: 20
        },
        end: {
          line: 184,
          column: 92
        }
      },
      "45": {
        start: {
          line: 189,
          column: 16
        },
        end: {
          line: 198,
          column: 17
        }
      },
      "46": {
        start: {
          line: 190,
          column: 20
        },
        end: {
          line: 197,
          column: 21
        }
      },
      "47": {
        start: {
          line: 191,
          column: 37
        },
        end: {
          line: 191,
          column: 69
        }
      },
      "48": {
        start: {
          line: 192,
          column: 39
        },
        end: {
          line: 192,
          column: 55
        }
      },
      "49": {
        start: {
          line: 193,
          column: 24
        },
        end: {
          line: 193,
          column: 79
        }
      },
      "50": {
        start: {
          line: 194,
          column: 24
        },
        end: {
          line: 194,
          column: 51
        }
      },
      "51": {
        start: {
          line: 195,
          column: 24
        },
        end: {
          line: 195,
          column: 83
        }
      },
      "52": {
        start: {
          line: 196,
          column: 24
        },
        end: {
          line: 196,
          column: 30
        }
      },
      "53": {
        start: {
          line: 201,
          column: 31
        },
        end: {
          line: 201,
          column: 62
        }
      },
      "54": {
        start: {
          line: 202,
          column: 12
        },
        end: {
          line: 207,
          column: 13
        }
      },
      "55": {
        start: {
          line: 203,
          column: 16
        },
        end: {
          line: 203,
          column: 88
        }
      },
      "56": {
        start: {
          line: 204,
          column: 16
        },
        end: {
          line: 206,
          column: 17
        }
      },
      "57": {
        start: {
          line: 205,
          column: 20
        },
        end: {
          line: 205,
          column: 85
        }
      },
      "58": {
        start: {
          line: 209,
          column: 12
        },
        end: {
          line: 211,
          column: 13
        }
      },
      "59": {
        start: {
          line: 210,
          column: 16
        },
        end: {
          line: 210,
          column: 60
        }
      },
      "60": {
        start: {
          line: 212,
          column: 12
        },
        end: {
          line: 212,
          column: 30
        }
      },
      "61": {
        start: {
          line: 215,
          column: 12
        },
        end: {
          line: 215,
          column: 70
        }
      },
      "62": {
        start: {
          line: 216,
          column: 12
        },
        end: {
          line: 216,
          column: 60
        }
      },
      "63": {
        start: {
          line: 217,
          column: 12
        },
        end: {
          line: 217,
          column: 41
        }
      },
      "64": {
        start: {
          line: 224,
          column: 8
        },
        end: {
          line: 248,
          column: 9
        }
      },
      "65": {
        start: {
          line: 226,
          column: 29
        },
        end: {
          line: 226,
          column: 67
        }
      },
      "66": {
        start: {
          line: 228,
          column: 12
        },
        end: {
          line: 228,
          column: 53
        }
      },
      "67": {
        start: {
          line: 230,
          column: 31
        },
        end: {
          line: 230,
          column: 58
        }
      },
      "68": {
        start: {
          line: 231,
          column: 12
        },
        end: {
          line: 233,
          column: 13
        }
      },
      "69": {
        start: {
          line: 232,
          column: 16
        },
        end: {
          line: 232,
          column: 101
        }
      },
      "70": {
        start: {
          line: 235,
          column: 12
        },
        end: {
          line: 237,
          column: 13
        }
      },
      "71": {
        start: {
          line: 236,
          column: 16
        },
        end: {
          line: 236,
          column: 50
        }
      },
      "72": {
        start: {
          line: 239,
          column: 12
        },
        end: {
          line: 239,
          column: 79
        }
      },
      "73": {
        start: {
          line: 240,
          column: 12
        },
        end: {
          line: 240,
          column: 33
        }
      },
      "74": {
        start: {
          line: 241,
          column: 12
        },
        end: {
          line: 241,
          column: 39
        }
      },
      "75": {
        start: {
          line: 242,
          column: 12
        },
        end: {
          line: 242,
          column: 68
        }
      },
      "76": {
        start: {
          line: 243,
          column: 12
        },
        end: {
          line: 243,
          column: 65
        }
      },
      "77": {
        start: {
          line: 246,
          column: 12
        },
        end: {
          line: 246,
          column: 70
        }
      },
      "78": {
        start: {
          line: 247,
          column: 12
        },
        end: {
          line: 247,
          column: 24
        }
      },
      "79": {
        start: {
          line: 254,
          column: 8
        },
        end: {
          line: 325,
          column: 9
        }
      },
      "80": {
        start: {
          line: 255,
          column: 28
        },
        end: {
          line: 255,
          column: 30
        }
      },
      "81": {
        start: {
          line: 257,
          column: 12
        },
        end: {
          line: 260,
          column: 16
        }
      },
      "82": {
        start: {
          line: 262,
          column: 12
        },
        end: {
          line: 284,
          column: 13
        }
      },
      "83": {
        start: {
          line: 263,
          column: 16
        },
        end: {
          line: 283,
          column: 20
        }
      },
      "84": {
        start: {
          line: 267,
          column: 28
        },
        end: {
          line: 279,
          column: 29
        }
      },
      "85": {
        start: {
          line: 268,
          column: 32
        },
        end: {
          line: 278,
          column: 34
        }
      },
      "86": {
        start: {
          line: 280,
          column: 28
        },
        end: {
          line: 280,
          column: 77
        }
      },
      "87": {
        start: {
          line: 286,
          column: 12
        },
        end: {
          line: 291,
          column: 13
        }
      },
      "88": {
        start: {
          line: 287,
          column: 16
        },
        end: {
          line: 290,
          column: 20
        }
      },
      "89": {
        start: {
          line: 293,
          column: 12
        },
        end: {
          line: 300,
          column: 13
        }
      },
      "90": {
        start: {
          line: 294,
          column: 16
        },
        end: {
          line: 299,
          column: 17
        }
      },
      "91": {
        start: {
          line: 295,
          column: 34
        },
        end: {
          line: 295,
          column: 66
        }
      },
      "92": {
        start: {
          line: 296,
          column: 20
        },
        end: {
          line: 298,
          column: 21
        }
      },
      "93": {
        start: {
          line: 297,
          column: 24
        },
        end: {
          line: 297,
          column: 55
        }
      },
      "94": {
        start: {
          line: 301,
          column: 29
        },
        end: {
          line: 301,
          column: 65
        }
      },
      "95": {
        start: {
          line: 303,
          column: 12
        },
        end: {
          line: 312,
          column: 13
        }
      },
      "96": {
        start: {
          line: 304,
          column: 16
        },
        end: {
          line: 304,
          column: 39
        }
      },
      "97": {
        start: {
          line: 305,
          column: 16
        },
        end: {
          line: 311,
          column: 21
        }
      },
      "98": {
        start: {
          line: 305,
          column: 74
        },
        end: {
          line: 311,
          column: 17
        }
      },
      "99": {
        start: {
          line: 313,
          column: 12
        },
        end: {
          line: 313,
          column: 28
        }
      },
      "100": {
        start: {
          line: 316,
          column: 12
        },
        end: {
          line: 324,
          column: 14
        }
      },
      "101": {
        start: {
          line: 331,
          column: 8
        },
        end: {
          line: 331,
          column: 53
        }
      },
      "102": {
        start: {
          line: 337,
          column: 8
        },
        end: {
          line: 355,
          column: 9
        }
      },
      "103": {
        start: {
          line: 338,
          column: 30
        },
        end: {
          line: 338,
          column: 48
        }
      },
      "104": {
        start: {
          line: 339,
          column: 12
        },
        end: {
          line: 339,
          column: 55
        }
      },
      "105": {
        start: {
          line: 341,
          column: 31
        },
        end: {
          line: 341,
          column: 61
        }
      },
      "106": {
        start: {
          line: 342,
          column: 12
        },
        end: {
          line: 344,
          column: 13
        }
      },
      "107": {
        start: {
          line: 343,
          column: 16
        },
        end: {
          line: 343,
          column: 101
        }
      },
      "108": {
        start: {
          line: 345,
          column: 12
        },
        end: {
          line: 345,
          column: 36
        }
      },
      "109": {
        start: {
          line: 347,
          column: 12
        },
        end: {
          line: 349,
          column: 13
        }
      },
      "110": {
        start: {
          line: 348,
          column: 16
        },
        end: {
          line: 348,
          column: 45
        }
      },
      "111": {
        start: {
          line: 350,
          column: 12
        },
        end: {
          line: 350,
          column: 76
        }
      },
      "112": {
        start: {
          line: 353,
          column: 12
        },
        end: {
          line: 353,
          column: 82
        }
      },
      "113": {
        start: {
          line: 354,
          column: 12
        },
        end: {
          line: 354,
          column: 24
        }
      },
      "114": {
        start: {
          line: 361,
          column: 8
        },
        end: {
          line: 372,
          column: 9
        }
      },
      "115": {
        start: {
          line: 362,
          column: 12
        },
        end: {
          line: 362,
          column: 48
        }
      },
      "116": {
        start: {
          line: 363,
          column: 12
        },
        end: {
          line: 365,
          column: 13
        }
      },
      "117": {
        start: {
          line: 364,
          column: 16
        },
        end: {
          line: 364,
          column: 45
        }
      },
      "118": {
        start: {
          line: 366,
          column: 12
        },
        end: {
          line: 366,
          column: 64
        }
      },
      "119": {
        start: {
          line: 367,
          column: 12
        },
        end: {
          line: 367,
          column: 62
        }
      },
      "120": {
        start: {
          line: 370,
          column: 12
        },
        end: {
          line: 370,
          column: 71
        }
      },
      "121": {
        start: {
          line: 371,
          column: 12
        },
        end: {
          line: 371,
          column: 24
        }
      },
      "122": {
        start: {
          line: 378,
          column: 8
        },
        end: {
          line: 395,
          column: 9
        }
      },
      "123": {
        start: {
          line: 379,
          column: 116
        },
        end: {
          line: 379,
          column: 123
        }
      },
      "124": {
        start: {
          line: 380,
          column: 12
        },
        end: {
          line: 380,
          column: 45
        }
      },
      "125": {
        start: {
          line: 381,
          column: 30
        },
        end: {
          line: 383,
          column: 20
        }
      },
      "126": {
        start: {
          line: 384,
          column: 31
        },
        end: {
          line: 384,
          column: 86
        }
      },
      "127": {
        start: {
          line: 385,
          column: 31
        },
        end: {
          line: 385,
          column: 58
        }
      },
      "128": {
        start: {
          line: 386,
          column: 12
        },
        end: {
          line: 386,
          column: 51
        }
      },
      "129": {
        start: {
          line: 388,
          column: 12
        },
        end: {
          line: 388,
          column: 64
        }
      },
      "130": {
        start: {
          line: 389,
          column: 12
        },
        end: {
          line: 389,
          column: 76
        }
      },
      "131": {
        start: {
          line: 390,
          column: 12
        },
        end: {
          line: 390,
          column: 30
        }
      },
      "132": {
        start: {
          line: 393,
          column: 12
        },
        end: {
          line: 393,
          column: 79
        }
      },
      "133": {
        start: {
          line: 394,
          column: 12
        },
        end: {
          line: 394,
          column: 24
        }
      },
      "134": {
        start: {
          line: 401,
          column: 8
        },
        end: {
          line: 449,
          column: 9
        }
      },
      "135": {
        start: {
          line: 402,
          column: 12
        },
        end: {
          line: 402,
          column: 92
        }
      },
      "136": {
        start: {
          line: 403,
          column: 28
        },
        end: {
          line: 403,
          column: 30
        }
      },
      "137": {
        start: {
          line: 406,
          column: 12
        },
        end: {
          line: 410,
          column: 13
        }
      },
      "138": {
        start: {
          line: 407,
          column: 16
        },
        end: {
          line: 409,
          column: 19
        }
      },
      "139": {
        start: {
          line: 412,
          column: 35
        },
        end: {
          line: 412,
          column: 107
        }
      },
      "140": {
        start: {
          line: 414,
          column: 12
        },
        end: {
          line: 414,
          column: 47
        }
      },
      "141": {
        start: {
          line: 415,
          column: 12
        },
        end: {
          line: 420,
          column: 15
        }
      },
      "142": {
        start: {
          line: 422,
          column: 31
        },
        end: {
          line: 422,
          column: 66
        }
      },
      "143": {
        start: {
          line: 423,
          column: 12
        },
        end: {
          line: 425,
          column: 13
        }
      },
      "144": {
        start: {
          line: 424,
          column: 16
        },
        end: {
          line: 424,
          column: 103
        }
      },
      "145": {
        start: {
          line: 427,
          column: 12
        },
        end: {
          line: 427,
          column: 44
        }
      },
      "146": {
        start: {
          line: 428,
          column: 27
        },
        end: {
          line: 435,
          column: 13
        }
      },
      "147": {
        start: {
          line: 436,
          column: 12
        },
        end: {
          line: 436,
          column: 48
        }
      },
      "148": {
        start: {
          line: 437,
          column: 12
        },
        end: {
          line: 437,
          column: 26
        }
      },
      "149": {
        start: {
          line: 440,
          column: 27
        },
        end: {
          line: 446,
          column: 13
        }
      },
      "150": {
        start: {
          line: 447,
          column: 12
        },
        end: {
          line: 447,
          column: 72
        }
      },
      "151": {
        start: {
          line: 448,
          column: 12
        },
        end: {
          line: 448,
          column: 26
        }
      },
      "152": {
        start: {
          line: 455,
          column: 8
        },
        end: {
          line: 481,
          column: 9
        }
      },
      "153": {
        start: {
          line: 457,
          column: 36
        },
        end: {
          line: 457,
          column: 65
        }
      },
      "154": {
        start: {
          line: 458,
          column: 12
        },
        end: {
          line: 460,
          column: 13
        }
      },
      "155": {
        start: {
          line: 459,
          column: 16
        },
        end: {
          line: 459,
          column: 40
        }
      },
      "156": {
        start: {
          line: 461,
          column: 30
        },
        end: {
          line: 461,
          column: 48
        }
      },
      "157": {
        start: {
          line: 462,
          column: 28
        },
        end: {
          line: 476,
          column: 14
        }
      },
      "158": {
        start: {
          line: 463,
          column: 16
        },
        end: {
          line: 475,
          column: 17
        }
      },
      "159": {
        start: {
          line: 464,
          column: 20
        },
        end: {
          line: 474,
          column: 21
        }
      },
      "160": {
        start: {
          line: 465,
          column: 24
        },
        end: {
          line: 465,
          column: 85
        }
      },
      "161": {
        start: {
          line: 466,
          column: 42
        },
        end: {
          line: 466,
          column: 59
        }
      },
      "162": {
        start: {
          line: 467,
          column: 24
        },
        end: {
          line: 470,
          column: 25
        }
      },
      "163": {
        start: {
          line: 468,
          column: 28
        },
        end: {
          line: 468,
          column: 52
        }
      },
      "164": {
        start: {
          line: 469,
          column: 28
        },
        end: {
          line: 469,
          column: 79
        }
      },
      "165": {
        start: {
          line: 473,
          column: 24
        },
        end: {
          line: 473,
          column: 84
        }
      },
      "166": {
        start: {
          line: 477,
          column: 12
        },
        end: {
          line: 477,
          column: 51
        }
      },
      "167": {
        start: {
          line: 480,
          column: 12
        },
        end: {
          line: 480,
          column: 77
        }
      },
      "168": {
        start: {
          line: 487,
          column: 23
        },
        end: {
          line: 487,
          column: 34
        }
      },
      "169": {
        start: {
          line: 488,
          column: 8
        },
        end: {
          line: 498,
          column: 9
        }
      },
      "170": {
        start: {
          line: 489,
          column: 12
        },
        end: {
          line: 497,
          column: 13
        }
      },
      "171": {
        start: {
          line: 490,
          column: 16
        },
        end: {
          line: 493,
          column: 18
        }
      },
      "172": {
        start: {
          line: 496,
          column: 16
        },
        end: {
          line: 496,
          column: 36
        }
      },
      "173": {
        start: {
          line: 499,
          column: 8
        },
        end: {
          line: 499,
          column: 22
        }
      },
      "174": {
        start: {
          line: 505,
          column: 8
        },
        end: {
          line: 507,
          column: 16
        }
      },
      "175": {
        start: {
          line: 506,
          column: 12
        },
        end: {
          line: 506,
          column: 85
        }
      },
      "176": {
        start: {
          line: 513,
          column: 21
        },
        end: {
          line: 513,
          column: 36
        }
      },
      "177": {
        start: {
          line: 514,
          column: 24
        },
        end: {
          line: 514,
          column: 34
        }
      },
      "178": {
        start: {
          line: 515,
          column: 23
        },
        end: {
          line: 520,
          column: 15
        }
      },
      "179": {
        start: {
          line: 516,
          column: 12
        },
        end: {
          line: 518,
          column: 13
        }
      },
      "180": {
        start: {
          line: 517,
          column: 16
        },
        end: {
          line: 517,
          column: 34
        }
      },
      "181": {
        start: {
          line: 519,
          column: 12
        },
        end: {
          line: 519,
          column: 32
        }
      },
      "182": {
        start: {
          line: 521,
          column: 8
        },
        end: {
          line: 521,
          column: 32
        }
      },
      "183": {
        start: {
          line: 527,
          column: 31
        },
        end: {
          line: 527,
          column: 44
        }
      },
      "184": {
        start: {
          line: 529,
          column: 8
        },
        end: {
          line: 549,
          column: 9
        }
      },
      "185": {
        start: {
          line: 531,
          column: 12
        },
        end: {
          line: 548,
          column: 13
        }
      },
      "186": {
        start: {
          line: 532,
          column: 16
        },
        end: {
          line: 535,
          column: 18
        }
      },
      "187": {
        start: {
          line: 536,
          column: 16
        },
        end: {
          line: 536,
          column: 52
        }
      },
      "188": {
        start: {
          line: 537,
          column: 16
        },
        end: {
          line: 542,
          column: 19
        }
      },
      "189": {
        start: {
          line: 543,
          column: 16
        },
        end: {
          line: 547,
          column: 19
        }
      },
      "190": {
        start: {
          line: 550,
          column: 8
        },
        end: {
          line: 550,
          column: 30
        }
      },
      "191": {
        start: {
          line: 556,
          column: 8
        },
        end: {
          line: 579,
          column: 9
        }
      },
      "192": {
        start: {
          line: 557,
          column: 12
        },
        end: {
          line: 559,
          column: 13
        }
      },
      "193": {
        start: {
          line: 558,
          column: 16
        },
        end: {
          line: 558,
          column: 23
        }
      },
      "194": {
        start: {
          line: 560,
          column: 23
        },
        end: {
          line: 560,
          column: 36
        }
      },
      "195": {
        start: {
          line: 561,
          column: 26
        },
        end: {
          line: 568,
          column: 82
        }
      },
      "196": {
        start: {
          line: 562,
          column: 31
        },
        end: {
          line: 562,
          column: 83
        }
      },
      "197": {
        start: {
          line: 563,
          column: 29
        },
        end: {
          line: 567,
          column: 13
        }
      },
      "198": {
        start: {
          line: 568,
          column: 32
        },
        end: {
          line: 568,
          column: 81
        }
      },
      "199": {
        start: {
          line: 569,
          column: 12
        },
        end: {
          line: 575,
          column: 13
        }
      },
      "200": {
        start: {
          line: 570,
          column: 38
        },
        end: {
          line: 570,
          column: 61
        }
      },
      "201": {
        start: {
          line: 571,
          column: 16
        },
        end: {
          line: 574,
          column: 17
        }
      },
      "202": {
        start: {
          line: 572,
          column: 20
        },
        end: {
          line: 572,
          column: 45
        }
      },
      "203": {
        start: {
          line: 573,
          column: 20
        },
        end: {
          line: 573,
          column: 74
        }
      },
      "204": {
        start: {
          line: 578,
          column: 12
        },
        end: {
          line: 578,
          column: 70
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 90,
            column: 4
          },
          end: {
            line: 90,
            column: 5
          }
        },
        loc: {
          start: {
            line: 90,
            column: 24
          },
          end: {
            line: 97,
            column: 5
          }
        },
        line: 90
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 101,
            column: 4
          },
          end: {
            line: 101,
            column: 5
          }
        },
        loc: {
          start: {
            line: 101,
            column: 17
          },
          end: {
            line: 114,
            column: 5
          }
        },
        line: 101
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 118,
            column: 4
          },
          end: {
            line: 118,
            column: 5
          }
        },
        loc: {
          start: {
            line: 118,
            column: 20
          },
          end: {
            line: 136,
            column: 5
          }
        },
        line: 118
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 140,
            column: 4
          },
          end: {
            line: 140,
            column: 5
          }
        },
        loc: {
          start: {
            line: 140,
            column: 24
          },
          end: {
            line: 167,
            column: 5
          }
        },
        line: 140
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 171,
            column: 4
          },
          end: {
            line: 171,
            column: 5
          }
        },
        loc: {
          start: {
            line: 171,
            column: 17
          },
          end: {
            line: 219,
            column: 5
          }
        },
        line: 171
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 223,
            column: 4
          },
          end: {
            line: 223,
            column: 5
          }
        },
        loc: {
          start: {
            line: 223,
            column: 23
          },
          end: {
            line: 249,
            column: 5
          }
        },
        line: 223
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 253,
            column: 4
          },
          end: {
            line: 253,
            column: 5
          }
        },
        loc: {
          start: {
            line: 253,
            column: 41
          },
          end: {
            line: 326,
            column: 5
          }
        },
        line: 253
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 266,
            column: 33
          },
          end: {
            line: 266,
            column: 34
          }
        },
        loc: {
          start: {
            line: 266,
            column: 44
          },
          end: {
            line: 281,
            column: 25
          }
        },
        line: 266
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 305,
            column: 62
          },
          end: {
            line: 305,
            column: 63
          }
        },
        loc: {
          start: {
            line: 305,
            column: 74
          },
          end: {
            line: 311,
            column: 17
          }
        },
        line: 305
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 330,
            column: 4
          },
          end: {
            line: 330,
            column: 5
          }
        },
        loc: {
          start: {
            line: 330,
            column: 13
          },
          end: {
            line: 332,
            column: 5
          }
        },
        line: 330
      },
      "10": {
        name: "(anonymous_10)",
        decl: {
          start: {
            line: 336,
            column: 4
          },
          end: {
            line: 336,
            column: 5
          }
        },
        loc: {
          start: {
            line: 336,
            column: 26
          },
          end: {
            line: 356,
            column: 5
          }
        },
        line: 336
      },
      "11": {
        name: "(anonymous_11)",
        decl: {
          start: {
            line: 360,
            column: 4
          },
          end: {
            line: 360,
            column: 5
          }
        },
        loc: {
          start: {
            line: 360,
            column: 18
          },
          end: {
            line: 373,
            column: 5
          }
        },
        line: 360
      },
      "12": {
        name: "(anonymous_12)",
        decl: {
          start: {
            line: 377,
            column: 4
          },
          end: {
            line: 377,
            column: 5
          }
        },
        loc: {
          start: {
            line: 377,
            column: 49
          },
          end: {
            line: 396,
            column: 5
          }
        },
        line: 377
      },
      "13": {
        name: "(anonymous_13)",
        decl: {
          start: {
            line: 400,
            column: 4
          },
          end: {
            line: 400,
            column: 5
          }
        },
        loc: {
          start: {
            line: 400,
            column: 42
          },
          end: {
            line: 450,
            column: 5
          }
        },
        line: 400
      },
      "14": {
        name: "(anonymous_14)",
        decl: {
          start: {
            line: 454,
            column: 4
          },
          end: {
            line: 454,
            column: 5
          }
        },
        loc: {
          start: {
            line: 454,
            column: 38
          },
          end: {
            line: 482,
            column: 5
          }
        },
        line: 454
      },
      "15": {
        name: "(anonymous_15)",
        decl: {
          start: {
            line: 462,
            column: 46
          },
          end: {
            line: 462,
            column: 47
          }
        },
        loc: {
          start: {
            line: 462,
            column: 67
          },
          end: {
            line: 476,
            column: 13
          }
        },
        line: 462
      },
      "16": {
        name: "(anonymous_16)",
        decl: {
          start: {
            line: 486,
            column: 4
          },
          end: {
            line: 486,
            column: 5
          }
        },
        loc: {
          start: {
            line: 486,
            column: 33
          },
          end: {
            line: 500,
            column: 5
          }
        },
        line: 486
      },
      "17": {
        name: "(anonymous_17)",
        decl: {
          start: {
            line: 504,
            column: 4
          },
          end: {
            line: 504,
            column: 5
          }
        },
        loc: {
          start: {
            line: 504,
            column: 30
          },
          end: {
            line: 508,
            column: 5
          }
        },
        line: 504
      },
      "18": {
        name: "(anonymous_18)",
        decl: {
          start: {
            line: 505,
            column: 38
          },
          end: {
            line: 505,
            column: 39
          }
        },
        loc: {
          start: {
            line: 505,
            column: 56
          },
          end: {
            line: 507,
            column: 9
          }
        },
        line: 505
      },
      "19": {
        name: "(anonymous_19)",
        decl: {
          start: {
            line: 512,
            column: 4
          },
          end: {
            line: 512,
            column: 5
          }
        },
        loc: {
          start: {
            line: 512,
            column: 37
          },
          end: {
            line: 522,
            column: 5
          }
        },
        line: 512
      },
      "20": {
        name: "(anonymous_20)",
        decl: {
          start: {
            line: 515,
            column: 35
          },
          end: {
            line: 515,
            column: 36
          }
        },
        loc: {
          start: {
            line: 515,
            column: 53
          },
          end: {
            line: 520,
            column: 9
          }
        },
        line: 515
      },
      "21": {
        name: "(anonymous_21)",
        decl: {
          start: {
            line: 526,
            column: 4
          },
          end: {
            line: 526,
            column: 5
          }
        },
        loc: {
          start: {
            line: 526,
            column: 67
          },
          end: {
            line: 551,
            column: 5
          }
        },
        line: 526
      },
      "22": {
        name: "(anonymous_22)",
        decl: {
          start: {
            line: 555,
            column: 4
          },
          end: {
            line: 555,
            column: 5
          }
        },
        loc: {
          start: {
            line: 555,
            column: 51
          },
          end: {
            line: 580,
            column: 5
          }
        },
        line: 555
      },
      "23": {
        name: "(anonymous_23)",
        decl: {
          start: {
            line: 562,
            column: 24
          },
          end: {
            line: 562,
            column: 25
          }
        },
        loc: {
          start: {
            line: 562,
            column: 31
          },
          end: {
            line: 562,
            column: 83
          }
        },
        line: 562
      },
      "24": {
        name: "(anonymous_24)",
        decl: {
          start: {
            line: 563,
            column: 21
          },
          end: {
            line: 563,
            column: 22
          }
        },
        loc: {
          start: {
            line: 563,
            column: 29
          },
          end: {
            line: 567,
            column: 13
          }
        },
        line: 563
      },
      "25": {
        name: "(anonymous_25)",
        decl: {
          start: {
            line: 568,
            column: 22
          },
          end: {
            line: 568,
            column: 23
          }
        },
        loc: {
          start: {
            line: 568,
            column: 32
          },
          end: {
            line: 568,
            column: 81
          }
        },
        line: 568
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 94,
            column: 8
          },
          end: {
            line: 96,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 94,
            column: 8
          },
          end: {
            line: 96,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 94
      },
      "1": {
        loc: {
          start: {
            line: 102,
            column: 8
          },
          end: {
            line: 104,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 102,
            column: 8
          },
          end: {
            line: 104,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 102
      },
      "2": {
        loc: {
          start: {
            line: 119,
            column: 8
          },
          end: {
            line: 121,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 119,
            column: 8
          },
          end: {
            line: 121,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 119
      },
      "3": {
        loc: {
          start: {
            line: 125,
            column: 16
          },
          end: {
            line: 127,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 125,
            column: 16
          },
          end: {
            line: 127,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 125
      },
      "4": {
        loc: {
          start: {
            line: 125,
            column: 20
          },
          end: {
            line: 125,
            column: 66
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 125,
            column: 20
          },
          end: {
            line: 125,
            column: 27
          }
        }, {
          start: {
            line: 125,
            column: 31
          },
          end: {
            line: 125,
            column: 66
          }
        }],
        line: 125
      },
      "5": {
        loc: {
          start: {
            line: 142,
            column: 12
          },
          end: {
            line: 147,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 142,
            column: 12
          },
          end: {
            line: 147,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 142
      },
      "6": {
        loc: {
          start: {
            line: 150,
            column: 12
          },
          end: {
            line: 155,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 150,
            column: 12
          },
          end: {
            line: 155,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 150
      },
      "7": {
        loc: {
          start: {
            line: 175,
            column: 12
          },
          end: {
            line: 199,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 175,
            column: 12
          },
          end: {
            line: 199,
            column: 13
          }
        }, {
          start: {
            line: 187,
            column: 17
          },
          end: {
            line: 199,
            column: 13
          }
        }],
        line: 175
      },
      "8": {
        loc: {
          start: {
            line: 177,
            column: 16
          },
          end: {
            line: 185,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 177,
            column: 16
          },
          end: {
            line: 185,
            column: 17
          }
        }, {
          start: {
            line: 183,
            column: 21
          },
          end: {
            line: 185,
            column: 17
          }
        }],
        line: 177
      },
      "9": {
        loc: {
          start: {
            line: 190,
            column: 20
          },
          end: {
            line: 197,
            column: 21
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 190,
            column: 20
          },
          end: {
            line: 197,
            column: 21
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 190
      },
      "10": {
        loc: {
          start: {
            line: 202,
            column: 12
          },
          end: {
            line: 207,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 202,
            column: 12
          },
          end: {
            line: 207,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 202
      },
      "11": {
        loc: {
          start: {
            line: 204,
            column: 16
          },
          end: {
            line: 206,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 204,
            column: 16
          },
          end: {
            line: 206,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 204
      },
      "12": {
        loc: {
          start: {
            line: 209,
            column: 12
          },
          end: {
            line: 211,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 209,
            column: 12
          },
          end: {
            line: 211,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 209
      },
      "13": {
        loc: {
          start: {
            line: 209,
            column: 16
          },
          end: {
            line: 209,
            column: 68
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 209,
            column: 16
          },
          end: {
            line: 209,
            column: 31
          }
        }, {
          start: {
            line: 209,
            column: 35
          },
          end: {
            line: 209,
            column: 68
          }
        }],
        line: 209
      },
      "14": {
        loc: {
          start: {
            line: 226,
            column: 29
          },
          end: {
            line: 226,
            column: 67
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 226,
            column: 29
          },
          end: {
            line: 226,
            column: 44
          }
        }, {
          start: {
            line: 226,
            column: 48
          },
          end: {
            line: 226,
            column: 67
          }
        }],
        line: 226
      },
      "15": {
        loc: {
          start: {
            line: 231,
            column: 12
          },
          end: {
            line: 233,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 231,
            column: 12
          },
          end: {
            line: 233,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 231
      },
      "16": {
        loc: {
          start: {
            line: 235,
            column: 12
          },
          end: {
            line: 237,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 235,
            column: 12
          },
          end: {
            line: 237,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 235
      },
      "17": {
        loc: {
          start: {
            line: 253,
            column: 27
          },
          end: {
            line: 253,
            column: 39
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 253,
            column: 37
          },
          end: {
            line: 253,
            column: 39
          }
        }],
        line: 253
      },
      "18": {
        loc: {
          start: {
            line: 262,
            column: 12
          },
          end: {
            line: 284,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 262,
            column: 12
          },
          end: {
            line: 284,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 262
      },
      "19": {
        loc: {
          start: {
            line: 267,
            column: 28
          },
          end: {
            line: 279,
            column: 29
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 267,
            column: 28
          },
          end: {
            line: 279,
            column: 29
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 267
      },
      "20": {
        loc: {
          start: {
            line: 286,
            column: 12
          },
          end: {
            line: 291,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 286,
            column: 12
          },
          end: {
            line: 291,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 286
      },
      "21": {
        loc: {
          start: {
            line: 293,
            column: 12
          },
          end: {
            line: 300,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 293,
            column: 12
          },
          end: {
            line: 300,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 293
      },
      "22": {
        loc: {
          start: {
            line: 296,
            column: 20
          },
          end: {
            line: 298,
            column: 21
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 296,
            column: 20
          },
          end: {
            line: 298,
            column: 21
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 296
      },
      "23": {
        loc: {
          start: {
            line: 303,
            column: 12
          },
          end: {
            line: 312,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 303,
            column: 12
          },
          end: {
            line: 312,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 303
      },
      "24": {
        loc: {
          start: {
            line: 303,
            column: 16
          },
          end: {
            line: 303,
            column: 62
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 303,
            column: 16
          },
          end: {
            line: 303,
            column: 30
          }
        }, {
          start: {
            line: 303,
            column: 34
          },
          end: {
            line: 303,
            column: 62
          }
        }],
        line: 303
      },
      "25": {
        loc: {
          start: {
            line: 342,
            column: 12
          },
          end: {
            line: 344,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 342,
            column: 12
          },
          end: {
            line: 344,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 342
      },
      "26": {
        loc: {
          start: {
            line: 347,
            column: 12
          },
          end: {
            line: 349,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 347,
            column: 12
          },
          end: {
            line: 349,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 347
      },
      "27": {
        loc: {
          start: {
            line: 363,
            column: 12
          },
          end: {
            line: 365,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 363,
            column: 12
          },
          end: {
            line: 365,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 363
      },
      "28": {
        loc: {
          start: {
            line: 377,
            column: 35
          },
          end: {
            line: 377,
            column: 47
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 377,
            column: 45
          },
          end: {
            line: 377,
            column: 47
          }
        }],
        line: 377
      },
      "29": {
        loc: {
          start: {
            line: 379,
            column: 20
          },
          end: {
            line: 379,
            column: 68
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 379,
            column: 32
          },
          end: {
            line: 379,
            column: 68
          }
        }],
        line: 379
      },
      "30": {
        loc: {
          start: {
            line: 379,
            column: 70
          },
          end: {
            line: 379,
            column: 93
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 379,
            column: 89
          },
          end: {
            line: 379,
            column: 93
          }
        }],
        line: 379
      },
      "31": {
        loc: {
          start: {
            line: 379,
            column: 95
          },
          end: {
            line: 379,
            column: 110
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 379,
            column: 108
          },
          end: {
            line: 379,
            column: 110
          }
        }],
        line: 379
      },
      "32": {
        loc: {
          start: {
            line: 381,
            column: 30
          },
          end: {
            line: 383,
            column: 20
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 382,
            column: 18
          },
          end: {
            line: 382,
            column: 64
          }
        }, {
          start: {
            line: 383,
            column: 18
          },
          end: {
            line: 383,
            column: 20
          }
        }],
        line: 381
      },
      "33": {
        loc: {
          start: {
            line: 384,
            column: 47
          },
          end: {
            line: 384,
            column: 79
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 384,
            column: 59
          },
          end: {
            line: 384,
            column: 74
          }
        }, {
          start: {
            line: 384,
            column: 77
          },
          end: {
            line: 384,
            column: 79
          }
        }],
        line: 384
      },
      "34": {
        loc: {
          start: {
            line: 406,
            column: 12
          },
          end: {
            line: 410,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 406,
            column: 12
          },
          end: {
            line: 410,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 406
      },
      "35": {
        loc: {
          start: {
            line: 406,
            column: 16
          },
          end: {
            line: 406,
            column: 68
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 406,
            column: 16
          },
          end: {
            line: 406,
            column: 31
          }
        }, {
          start: {
            line: 406,
            column: 35
          },
          end: {
            line: 406,
            column: 68
          }
        }],
        line: 406
      },
      "36": {
        loc: {
          start: {
            line: 423,
            column: 12
          },
          end: {
            line: 425,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 423,
            column: 12
          },
          end: {
            line: 425,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 423
      },
      "37": {
        loc: {
          start: {
            line: 458,
            column: 12
          },
          end: {
            line: 460,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 458,
            column: 12
          },
          end: {
            line: 460,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 458
      },
      "38": {
        loc: {
          start: {
            line: 463,
            column: 16
          },
          end: {
            line: 475,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 463,
            column: 16
          },
          end: {
            line: 475,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 463
      },
      "39": {
        loc: {
          start: {
            line: 467,
            column: 24
          },
          end: {
            line: 470,
            column: 25
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 467,
            column: 24
          },
          end: {
            line: 470,
            column: 25
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 467
      },
      "40": {
        loc: {
          start: {
            line: 489,
            column: 12
          },
          end: {
            line: 497,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 489,
            column: 12
          },
          end: {
            line: 497,
            column: 13
          }
        }, {
          start: {
            line: 495,
            column: 17
          },
          end: {
            line: 497,
            column: 13
          }
        }],
        line: 489
      },
      "41": {
        loc: {
          start: {
            line: 489,
            column: 16
          },
          end: {
            line: 489,
            column: 84
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 489,
            column: 16
          },
          end: {
            line: 489,
            column: 30
          }
        }, {
          start: {
            line: 489,
            column: 34
          },
          end: {
            line: 489,
            column: 59
          }
        }, {
          start: {
            line: 489,
            column: 63
          },
          end: {
            line: 489,
            column: 84
          }
        }],
        line: 489
      },
      "42": {
        loc: {
          start: {
            line: 506,
            column: 19
          },
          end: {
            line: 506,
            column: 84
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 506,
            column: 60
          },
          end: {
            line: 506,
            column: 72
          }
        }, {
          start: {
            line: 506,
            column: 75
          },
          end: {
            line: 506,
            column: 84
          }
        }],
        line: 506
      },
      "43": {
        loc: {
          start: {
            line: 506,
            column: 19
          },
          end: {
            line: 506,
            column: 57
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 506,
            column: 19
          },
          end: {
            line: 506,
            column: 26
          }
        }, {
          start: {
            line: 506,
            column: 30
          },
          end: {
            line: 506,
            column: 57
          }
        }],
        line: 506
      },
      "44": {
        loc: {
          start: {
            line: 516,
            column: 12
          },
          end: {
            line: 518,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 516,
            column: 12
          },
          end: {
            line: 518,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 516
      },
      "45": {
        loc: {
          start: {
            line: 516,
            column: 16
          },
          end: {
            line: 516,
            column: 65
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 516,
            column: 16
          },
          end: {
            line: 516,
            column: 29
          }
        }, {
          start: {
            line: 516,
            column: 33
          },
          end: {
            line: 516,
            column: 65
          }
        }],
        line: 516
      },
      "46": {
        loc: {
          start: {
            line: 529,
            column: 8
          },
          end: {
            line: 549,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 529,
            column: 8
          },
          end: {
            line: 549,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 529
      },
      "47": {
        loc: {
          start: {
            line: 529,
            column: 12
          },
          end: {
            line: 529,
            column: 60
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 529,
            column: 12
          },
          end: {
            line: 529,
            column: 35
          }
        }, {
          start: {
            line: 529,
            column: 39
          },
          end: {
            line: 529,
            column: 60
          }
        }],
        line: 529
      },
      "48": {
        loc: {
          start: {
            line: 531,
            column: 12
          },
          end: {
            line: 548,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 531,
            column: 12
          },
          end: {
            line: 548,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 531
      },
      "49": {
        loc: {
          start: {
            line: 557,
            column: 12
          },
          end: {
            line: 559,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 557,
            column: 12
          },
          end: {
            line: 559,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 557
      },
      "50": {
        loc: {
          start: {
            line: 562,
            column: 31
          },
          end: {
            line: 562,
            column: 83
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 562,
            column: 31
          },
          end: {
            line: 562,
            column: 60
          }
        }, {
          start: {
            line: 562,
            column: 64
          },
          end: {
            line: 562,
            column: 83
          }
        }],
        line: 562
      },
      "51": {
        loc: {
          start: {
            line: 569,
            column: 12
          },
          end: {
            line: 575,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 569,
            column: 12
          },
          end: {
            line: 575,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 569
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0,
      "74": 0,
      "75": 0,
      "76": 0,
      "77": 0,
      "78": 0,
      "79": 0,
      "80": 0,
      "81": 0,
      "82": 0,
      "83": 0,
      "84": 0,
      "85": 0,
      "86": 0,
      "87": 0,
      "88": 0,
      "89": 0,
      "90": 0,
      "91": 0,
      "92": 0,
      "93": 0,
      "94": 0,
      "95": 0,
      "96": 0,
      "97": 0,
      "98": 0,
      "99": 0,
      "100": 0,
      "101": 0,
      "102": 0,
      "103": 0,
      "104": 0,
      "105": 0,
      "106": 0,
      "107": 0,
      "108": 0,
      "109": 0,
      "110": 0,
      "111": 0,
      "112": 0,
      "113": 0,
      "114": 0,
      "115": 0,
      "116": 0,
      "117": 0,
      "118": 0,
      "119": 0,
      "120": 0,
      "121": 0,
      "122": 0,
      "123": 0,
      "124": 0,
      "125": 0,
      "126": 0,
      "127": 0,
      "128": 0,
      "129": 0,
      "130": 0,
      "131": 0,
      "132": 0,
      "133": 0,
      "134": 0,
      "135": 0,
      "136": 0,
      "137": 0,
      "138": 0,
      "139": 0,
      "140": 0,
      "141": 0,
      "142": 0,
      "143": 0,
      "144": 0,
      "145": 0,
      "146": 0,
      "147": 0,
      "148": 0,
      "149": 0,
      "150": 0,
      "151": 0,
      "152": 0,
      "153": 0,
      "154": 0,
      "155": 0,
      "156": 0,
      "157": 0,
      "158": 0,
      "159": 0,
      "160": 0,
      "161": 0,
      "162": 0,
      "163": 0,
      "164": 0,
      "165": 0,
      "166": 0,
      "167": 0,
      "168": 0,
      "169": 0,
      "170": 0,
      "171": 0,
      "172": 0,
      "173": 0,
      "174": 0,
      "175": 0,
      "176": 0,
      "177": 0,
      "178": 0,
      "179": 0,
      "180": 0,
      "181": 0,
      "182": 0,
      "183": 0,
      "184": 0,
      "185": 0,
      "186": 0,
      "187": 0,
      "188": 0,
      "189": 0,
      "190": 0,
      "191": 0,
      "192": 0,
      "193": 0,
      "194": 0,
      "195": 0,
      "196": 0,
      "197": 0,
      "198": 0,
      "199": 0,
      "200": 0,
      "201": 0,
      "202": 0,
      "203": 0,
      "204": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0, 0],
      "10": [0, 0],
      "11": [0, 0],
      "12": [0, 0],
      "13": [0, 0],
      "14": [0, 0],
      "15": [0, 0],
      "16": [0, 0],
      "17": [0],
      "18": [0, 0],
      "19": [0, 0],
      "20": [0, 0],
      "21": [0, 0],
      "22": [0, 0],
      "23": [0, 0],
      "24": [0, 0],
      "25": [0, 0],
      "26": [0, 0],
      "27": [0, 0],
      "28": [0],
      "29": [0],
      "30": [0],
      "31": [0],
      "32": [0, 0],
      "33": [0, 0],
      "34": [0, 0],
      "35": [0, 0],
      "36": [0, 0],
      "37": [0, 0],
      "38": [0, 0],
      "39": [0, 0],
      "40": [0, 0],
      "41": [0, 0, 0],
      "42": [0, 0],
      "43": [0, 0],
      "44": [0, 0],
      "45": [0, 0],
      "46": [0, 0],
      "47": [0, 0],
      "48": [0, 0],
      "49": [0, 0],
      "50": [0, 0],
      "51": [0, 0]
    },
    inputSourceMap: {
      file: "/home/mhugo/code/claude-code-flow/src/cli/services/config-service.ts",
      mappings: "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",
      names: [],
      sources: ["/home/mhugo/code/claude-code-flow/src/cli/services/config-service.ts"],
      sourcesContent: ["/**\n * Configuration Service\n * \n * Provides configuration management including loading, validation, migration, and backup.\n * Supports multiple configuration sources and formats with schema validation.\n */\n\nimport { readFile, writeFile, mkdir } from 'fs/promises';\nimport { existsSync } from 'fs';\nimport { join, dirname } from 'path';\nimport { homedir } from 'os';\nimport { EventEmitter } from 'events';\nimport { createLogger, type Logger } from '../utils/logger.js';\nimport { ensureDirectory, fileExists, copyFile } from '../utils/file-system.js';\nimport { validateObject, combineValidationResults } from '../utils/validation.js';\nimport type { CliConfig } from '../types/config.js';\nimport type { ValidationResult, Result } from '../types/index.js';\n\n/**\n * Configuration manager interface\n */\nexport interface ConfigManager {\n  /** Load configuration */\n  load(): Promise<CliConfig>;\n  \n  /** Save configuration */\n  save(config: CliConfig): Promise<void>;\n  \n  /** Validate configuration */\n  validate(config: CliConfig): Promise<ValidationResult>;\n  \n  /** Get configuration value */\n  get<T>(key: string): T | undefined;\n  \n  /** Set configuration value */\n  set(key: string, value: any): Promise<void>;\n  \n  /** Reset to defaults */\n  reset(): Promise<void>;\n}\n\n/**\n * Configuration validation options\n */\nexport interface ConfigValidationOptions {\n  /** Strict validation (fail on warnings) */\n  strict?: boolean;\n  \n  /** Schema version to validate against */\n  schemaVersion?: string;\n  \n  /** Allow unknown properties */\n  allowUnknown?: boolean;\n  \n  /** Custom validators */\n  customValidators?: Record<string, (value: any) => ValidationResult>;\n}\n\n/**\n * Configuration migration result\n */\nexport interface ConfigMigrationResult {\n  /** Migration success */\n  success: boolean;\n  \n  /** Migration message */\n  message: string;\n  \n  /** Source version */\n  fromVersion: string;\n  \n  /** Target version */\n  toVersion: string;\n  \n  /** Changes made */\n  changes: Array<{\n    type: 'added' | 'removed' | 'modified';\n    path: string;\n    oldValue?: any;\n    newValue?: any;\n  }>;\n  \n  /** Backup file path */\n  backupPath?: string;\n}\n\n/**\n * Configuration backup options\n */\nexport interface ConfigBackupOptions {\n  /** Backup directory */\n  backupDir?: string;\n  \n  /** Include timestamp in backup filename */\n  includeTimestamp?: boolean;\n  \n  /** Maximum number of backups to keep */\n  maxBackups?: number;\n  \n  /** Compress backup files */\n  compress?: boolean;\n}\n\n/**\n * Default CLI configuration\n */\nconst DEFAULT_CONFIG: CliConfig = {\n  version: '1.0.0',\n  plugins: {\n    enabled: true,\n    autoLoad: true,\n    loadTimeout: 10000,\n    registry: 'https://registry.npmjs.org',\n    directories: ['plugins', 'node_modules'],\n  },\n  swarm: {\n    defaultTopology: 'hierarchical',\n    maxAgents: 8,\n    strategy: 'balanced',\n    autoScale: false,\n    persistence: {\n      enabled: true,\n      type: 'file',\n    },\n  },\n  database: {\n    type: 'sqlite',\n    path: 'data/claude-flow.db',\n    ssl: {\n      enabled: false,\n    },\n    poolSize: 5,\n  },\n  ui: {\n    theme: 'dark',\n    animations: true,\n    colorSupport: true,\n  },\n  logging: {\n    level: 'info',\n    outputs: ['console'],\n    colors: true,\n    timestamps: true,\n  },\n  security: {\n    enableSandbox: true,\n    allowedHosts: ['localhost', '127.0.0.1'],\n    rateLimiting: {\n      enabled: true,\n      maxRequests: 100,\n      windowMs: 60000,\n    },\n  },\n  performance: {\n    maxMemoryUsage: 1024,\n    maxCpuUsage: 80,\n    cacheSize: 100,\n    enableProfiling: false,\n  },\n};\n\n/**\n * Configuration file locations\n */\nconst CONFIG_LOCATIONS = [\n  join(process.cwd(), 'claude-flow.config.json'),\n  join(process.cwd(), '.claude-flow.json'),\n  join(homedir(), '.config', 'claude-flow', 'config.json'),\n  join(homedir(), '.claude-flow.json'),\n];\n\n/**\n * Configuration service implementation\n */\nexport class ConfigService extends EventEmitter implements ConfigManager {\n  private logger: Logger;\n  private config: CliConfig;\n  private configPath: string | null = null;\n  private initialized = false;\n  private watchers = new Map<string, any>();\n  \n  constructor(config?: Record<string, any>) {\n    super();\n    this.logger = createLogger({ prefix: 'ConfigService' });\n    this.config = { ...DEFAULT_CONFIG };\n    \n    if (config?.configPath) {\n      this.configPath = config.configPath;\n    }\n  }\n  \n  /**\n   * Initialize the configuration service\n   */\n  async init(): Promise<void> {\n    if (this.initialized) {\n      return;\n    }\n    \n    try {\n      this.config = await this.load();\n      this.initialized = true;\n      this.logger.info('Configuration service initialized');\n    } catch (error) {\n      this.logger.error('Failed to initialize configuration service:', error);\n      throw error;\n    }\n  }\n  \n  /**\n   * Dispose the configuration service\n   */\n  async dispose(): Promise<void> {\n    if (!this.initialized) {\n      return;\n    }\n    \n    try {\n      // Stop all file watchers\n      for (const [path, watcher] of this.watchers) {\n        if (watcher && typeof watcher.close === 'function') {\n          watcher.close();\n        }\n      }\n      this.watchers.clear();\n      \n      this.initialized = false;\n      this.logger.info('Configuration service disposed');\n    } catch (error) {\n      this.logger.error('Error disposing configuration service:', error);\n    }\n  }\n  \n  /**\n   * Health check for the service\n   */\n  async healthCheck(): Promise<{ healthy: boolean; message?: string }> {\n    try {\n      if (!this.initialized) {\n        return {\n          healthy: false,\n          message: 'Service not initialized',\n        };\n      }\n      \n      // Validate current configuration\n      const validation = await this.validate(this.config);\n      if (!validation.valid) {\n        return {\n          healthy: false,\n          message: `Configuration validation failed: ${validation.errors[0]?.message}`,\n        };\n      }\n      \n      return {\n        healthy: true,\n        message: 'Configuration is valid',\n      };\n    } catch (error) {\n      return {\n        healthy: false,\n        message: (error as Error).message,\n      };\n    }\n  }\n  \n  /**\n   * Load configuration from file system\n   */\n  async load(): Promise<CliConfig> {\n    try {\n      // Find configuration file\n      let configData: CliConfig = { ...DEFAULT_CONFIG };\n      \n      if (this.configPath) {\n        // Use specified config path\n        if (await fileExists(this.configPath)) {\n          const data = await readFile(this.configPath, 'utf8');\n          const parsed = JSON.parse(data);\n          configData = this.mergeConfigs(DEFAULT_CONFIG, parsed);\n          this.logger.info(`Loaded configuration from: ${this.configPath}`);\n        } else {\n          this.logger.warn(`Specified config file not found: ${this.configPath}`);\n        }\n      } else {\n        // Search for config file in standard locations\n        for (const location of CONFIG_LOCATIONS) {\n          if (await fileExists(location)) {\n            const data = await readFile(location, 'utf8');\n            const parsed = JSON.parse(data);\n            configData = this.mergeConfigs(DEFAULT_CONFIG, parsed);\n            this.configPath = location;\n            this.logger.info(`Loaded configuration from: ${location}`);\n            break;\n          }\n        }\n      }\n      \n      // Validate configuration\n      const validation = await this.validate(configData);\n      if (!validation.valid) {\n        this.logger.warn('Configuration validation failed:', validation.errors);\n        if (validation.warnings.length > 0) {\n          this.logger.warn('Configuration warnings:', validation.warnings);\n        }\n      }\n      \n      // Set up file watching if config file exists\n      if (this.configPath && await fileExists(this.configPath)) {\n        await this.watchConfigFile(this.configPath);\n      }\n      \n      return configData;\n    } catch (error) {\n      this.logger.error('Failed to load configuration:', error);\n      this.logger.info('Using default configuration');\n      return { ...DEFAULT_CONFIG };\n    }\n  }\n  \n  /**\n   * Save configuration to file\n   */\n  async save(config: CliConfig): Promise<void> {\n    try {\n      // Use existing config path or default\n      const savePath = this.configPath || CONFIG_LOCATIONS[0];\n      \n      // Ensure directory exists\n      await ensureDirectory(dirname(savePath));\n      \n      // Validate before saving\n      const validation = await this.validate(config);\n      if (!validation.valid) {\n        throw new Error(`Configuration validation failed: ${validation.errors[0]?.message}`);\n      }\n      \n      // Create backup if file exists\n      if (await fileExists(savePath)) {\n        await this.createBackup(savePath);\n      }\n      \n      // Save configuration\n      await writeFile(savePath, JSON.stringify(config, null, 2), 'utf8');\n      \n      this.config = config;\n      this.configPath = savePath;\n      \n      this.logger.info(`Configuration saved to: ${savePath}`);\n      this.emit('configSaved', { path: savePath, config });\n    } catch (error) {\n      this.logger.error('Failed to save configuration:', error);\n      throw error;\n    }\n  }\n  \n  /**\n   * Validate configuration\n   */\n  async validate(\n    config: CliConfig,\n    options: ConfigValidationOptions = {}\n  ): Promise<ValidationResult> {\n    try {\n      const results: ValidationResult[] = [];\n      \n      // Basic structure validation\n      results.push(validateObject(config, {\n        fieldName: 'Configuration',\n        requiredKeys: ['version'],\n      }));\n      \n      // Plugin configuration validation\n      if (config.plugins) {\n        results.push(validateObject(config.plugins, {\n          fieldName: 'plugins',\n          schema: {\n            enabled: (value) => {\n              if (typeof value !== 'boolean') {\n                return {\n                  valid: false,\n                  errors: [{\n                    message: 'plugins.enabled must be a boolean',\n                    code: 'INVALID_TYPE',\n                    path: 'plugins.enabled',\n                    expected: 'boolean',\n                    actual: typeof value,\n                  }],\n                  warnings: [],\n                };\n              }\n              return { valid: true, errors: [], warnings: [] };\n            },\n          },\n        }));\n      }\n      \n      // Database configuration validation\n      if (config.database) {\n        results.push(validateObject(config.database, {\n          fieldName: 'database',\n          requiredKeys: ['type'],\n        }));\n      }\n      \n      // Apply custom validators\n      if (options.customValidators) {\n        for (const [key, validator] of Object.entries(options.customValidators)) {\n          const value = this.getNestedValue(config, key);\n          if (value !== undefined) {\n            results.push(validator(value));\n          }\n        }\n      }\n      \n      const combined = combineValidationResults(...results);\n      \n      // Check strictness\n      if (options.strict && combined.warnings.length > 0) {\n        combined.valid = false;\n        combined.errors.push(...combined.warnings.map(warning => ({\n          message: warning.message,\n          code: warning.code,\n          path: warning.path,\n          expected: 'no warnings in strict mode',\n          actual: 'warning present',\n        })));\n      }\n      \n      return combined;\n    } catch (error) {\n      return {\n        valid: false,\n        errors: [{\n          message: `Validation error: ${(error as Error).message}`,\n          code: 'VALIDATION_ERROR',\n          path: 'root',\n        }],\n        warnings: [],\n      };\n    }\n  }\n  \n  /**\n   * Get configuration value by key path\n   */\n  get<T>(key: string): T | undefined {\n    return this.getNestedValue(this.config, key) as T;\n  }\n  \n  /**\n   * Set configuration value by key path\n   */\n  async set(key: string, value: any): Promise<void> {\n    try {\n      const newConfig = { ...this.config };\n      this.setNestedValue(newConfig, key, value);\n      \n      // Validate the updated configuration\n      const validation = await this.validate(newConfig);\n      if (!validation.valid) {\n        throw new Error(`Configuration validation failed: ${validation.errors[0]?.message}`);\n      }\n      \n      this.config = newConfig;\n      \n      // Save if we have a config path\n      if (this.configPath) {\n        await this.save(this.config);\n      }\n      \n      this.emit('configChanged', { key, value, config: this.config });\n    } catch (error) {\n      this.logger.error(`Failed to set configuration value ${key}:`, error);\n      throw error;\n    }\n  }\n  \n  /**\n   * Reset configuration to defaults\n   */\n  async reset(): Promise<void> {\n    try {\n      this.config = { ...DEFAULT_CONFIG };\n      \n      if (this.configPath) {\n        await this.save(this.config);\n      }\n      \n      this.logger.info('Configuration reset to defaults');\n      this.emit('configReset', { config: this.config });\n    } catch (error) {\n      this.logger.error('Failed to reset configuration:', error);\n      throw error;\n    }\n  }\n  \n  /**\n   * Create configuration backup\n   */\n  async createBackup(\n    configPath: string,\n    options: ConfigBackupOptions = {}\n  ): Promise<string> {\n    try {\n      const {\n        backupDir = join(dirname(configPath), 'backups'),\n        includeTimestamp = true,\n        maxBackups = 10,\n      } = options;\n      \n      await ensureDirectory(backupDir);\n      \n      const timestamp = includeTimestamp \n        ? new Date().toISOString().replace(/[:.]/g, '-')\n        : '';\n      \n      const backupName = `config-backup${timestamp ? '-' + timestamp : ''}.json`;\n      const backupPath = join(backupDir, backupName);\n      \n      await copyFile(configPath, backupPath);\n      \n      // Clean up old backups\n      await this.cleanupOldBackups(backupDir, maxBackups);\n      \n      this.logger.info(`Configuration backup created: ${backupPath}`);\n      return backupPath;\n    } catch (error) {\n      this.logger.error('Failed to create configuration backup:', error);\n      throw error;\n    }\n  }\n  \n  /**\n   * Migrate configuration to newer version\n   */\n  async migrate(\n    fromVersion: string,\n    toVersion: string\n  ): Promise<ConfigMigrationResult> {\n    try {\n      this.logger.info(`Migrating configuration from ${fromVersion} to ${toVersion}`);\n      \n      const changes: ConfigMigrationResult['changes'] = [];\n      let backupPath: string | undefined;\n      \n      // Create backup before migration\n      if (this.configPath && await fileExists(this.configPath)) {\n        backupPath = await this.createBackup(this.configPath, {\n          includeTimestamp: true,\n        });\n      }\n      \n      // Apply migrations based on version changes\n      const migratedConfig = await this.applyMigrations(\n        this.config,\n        fromVersion,\n        toVersion,\n        changes\n      );\n      \n      // Update version\n      migratedConfig.version = toVersion;\n      changes.push({\n        type: 'modified',\n        path: 'version',\n        oldValue: fromVersion,\n        newValue: toVersion,\n      });\n      \n      // Validate migrated configuration\n      const validation = await this.validate(migratedConfig);\n      if (!validation.valid) {\n        throw new Error(`Migrated configuration is invalid: ${validation.errors[0]?.message}`);\n      }\n      \n      // Save migrated configuration\n      await this.save(migratedConfig);\n      \n      const result: ConfigMigrationResult = {\n        success: true,\n        message: `Successfully migrated configuration from ${fromVersion} to ${toVersion}`,\n        fromVersion,\n        toVersion,\n        changes,\n        backupPath,\n      };\n      \n      this.emit('configMigrated', result);\n      \n      return result;\n    } catch (error) {\n      const result: ConfigMigrationResult = {\n        success: false,\n        message: `Migration failed: ${(error as Error).message}`,\n        fromVersion,\n        toVersion,\n        changes: [],\n      };\n      \n      this.logger.error('Configuration migration failed:', error);\n      return result;\n    }\n  }\n  \n  /**\n   * Watch configuration file for changes\n   */\n  private async watchConfigFile(configPath: string): Promise<void> {\n    try {\n      // Remove existing watcher\n      const existingWatcher = this.watchers.get(configPath);\n      if (existingWatcher) {\n        existingWatcher.close();\n      }\n      \n      const { watch } = await import('fs');\n      const watcher = watch(configPath, async (eventType) => {\n        if (eventType === 'change') {\n          try {\n            this.logger.info('Configuration file changed, reloading...');\n            const newConfig = await this.load();\n            \n            if (JSON.stringify(newConfig) !== JSON.stringify(this.config)) {\n              this.config = newConfig;\n              this.emit('configReloaded', { config: newConfig });\n            }\n          } catch (error) {\n            this.logger.error('Failed to reload configuration:', error);\n          }\n        }\n      });\n      \n      this.watchers.set(configPath, watcher);\n    } catch (error) {\n      this.logger.warn('Failed to set up config file watcher:', error);\n    }\n  }\n  \n  /**\n   * Merge configuration objects\n   */\n  private mergeConfigs(base: CliConfig, override: Partial<CliConfig>): CliConfig {\n    const result = { ...base };\n    \n    for (const [key, value] of Object.entries(override)) {\n      if (value !== null && typeof value === 'object' && !Array.isArray(value)) {\n        result[key as keyof CliConfig] = {\n          ...(result[key as keyof CliConfig] as any),\n          ...value,\n        };\n      } else {\n        result[key as keyof CliConfig] = value as any;\n      }\n    }\n    \n    return result;\n  }\n  \n  /**\n   * Get nested value from object using dot notation\n   */\n  private getNestedValue(obj: any, path: string): any {\n    return path.split('.').reduce((current, key) => {\n      return current && typeof current === 'object' ? current[key] : undefined;\n    }, obj);\n  }\n  \n  /**\n   * Set nested value in object using dot notation\n   */\n  private setNestedValue(obj: any, path: string, value: any): void {\n    const keys = path.split('.');\n    const lastKey = keys.pop()!;\n    \n    const target = keys.reduce((current, key) => {\n      if (!current[key] || typeof current[key] !== 'object') {\n        current[key] = {};\n      }\n      return current[key];\n    }, obj);\n    \n    target[lastKey] = value;\n  }\n  \n  /**\n   * Apply configuration migrations\n   */\n  private async applyMigrations(\n    config: CliConfig,\n    fromVersion: string,\n    toVersion: string,\n    changes: ConfigMigrationResult['changes']\n  ): Promise<CliConfig> {\n    const migratedConfig = { ...config };\n    \n    // Example migration logic (would be expanded based on actual version changes)\n    if (fromVersion === '0.9.0' && toVersion === '1.0.0') {\n      // Migrate old plugin structure\n      if ('enablePlugins' in migratedConfig) {\n        migratedConfig.plugins = {\n          ...migratedConfig.plugins,\n          enabled: (migratedConfig as any).enablePlugins,\n        };\n        delete (migratedConfig as any).enablePlugins;\n        \n        changes.push({\n          type: 'modified',\n          path: 'plugins.enabled',\n          oldValue: (migratedConfig as any).enablePlugins,\n          newValue: migratedConfig.plugins.enabled,\n        });\n        \n        changes.push({\n          type: 'removed',\n          path: 'enablePlugins',\n          oldValue: (migratedConfig as any).enablePlugins,\n        });\n      }\n    }\n    \n    return migratedConfig;\n  }\n  \n  /**\n   * Clean up old backup files\n   */\n  private async cleanupOldBackups(backupDir: string, maxBackups: number): Promise<void> {\n    try {\n      if (!existsSync(backupDir)) {\n        return;\n      }\n      \n      const fs = require('fs');\n      const files = fs.readdirSync(backupDir)\n        .filter((f: string) => f.startsWith('config-backup') && f.endsWith('.json'))\n        .map((f: string) => ({\n          name: f,\n          path: join(backupDir, f),\n          stats: fs.statSync(join(backupDir, f)),\n        }))\n        .sort((a: any, b: any) => b.stats.mtime.getTime() - a.stats.mtime.getTime());\n      \n      if (files.length > maxBackups) {\n        const filesToDelete = files.slice(maxBackups);\n        \n        for (const file of filesToDelete) {\n          fs.unlinkSync(file.path);\n          this.logger.debug(`Deleted old backup: ${file.name}`);\n        }\n      }\n    } catch (error) {\n      this.logger.warn('Failed to cleanup old backups:', error);\n    }\n  }\n}\n"],
      version: 3
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "6c62d2c826d2a91fb29936e00fdbbcb20fb964ec"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_2gapkjnzm4 = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_2gapkjnzm4();
/**
 * Configuration Service
 *
 * Provides configuration management including loading, validation, migration, and backup.
 * Supports multiple configuration sources and formats with schema validation.
 */
import { readFile, writeFile } from 'fs/promises';
import { existsSync } from 'fs';
import { join, dirname } from 'path';
import { homedir } from 'os';
import { EventEmitter } from 'events';
import { createLogger } from '../utils/logger.js';
import { ensureDirectory, fileExists, copyFile } from '../utils/file-system.js';
import { validateObject, combineValidationResults } from '../utils/validation.js';
/**
 * Default CLI configuration
 */
const DEFAULT_CONFIG =
/* istanbul ignore next */
(cov_2gapkjnzm4().s[0]++, {
  version: '1.0.0',
  plugins: {
    enabled: true,
    autoLoad: true,
    loadTimeout: 10000,
    registry: 'https://registry.npmjs.org',
    directories: ['plugins', 'node_modules']
  },
  swarm: {
    defaultTopology: 'hierarchical',
    maxAgents: 8,
    strategy: 'balanced',
    autoScale: false,
    persistence: {
      enabled: true,
      type: 'file'
    }
  },
  database: {
    type: 'sqlite',
    path: 'data/claude-flow.db',
    ssl: {
      enabled: false
    },
    poolSize: 5
  },
  ui: {
    theme: 'dark',
    animations: true,
    colorSupport: true
  },
  logging: {
    level: 'info',
    outputs: ['console'],
    colors: true,
    timestamps: true
  },
  security: {
    enableSandbox: true,
    allowedHosts: ['localhost', '127.0.0.1'],
    rateLimiting: {
      enabled: true,
      maxRequests: 100,
      windowMs: 60000
    }
  },
  performance: {
    maxMemoryUsage: 1024,
    maxCpuUsage: 80,
    cacheSize: 100,
    enableProfiling: false
  }
});
/**
 * Configuration file locations
 */
const CONFIG_LOCATIONS =
/* istanbul ignore next */
(cov_2gapkjnzm4().s[1]++, [join(process.cwd(), 'claude-flow.config.json'), join(process.cwd(), '.claude-flow.json'), join(homedir(), '.config', 'claude-flow', 'config.json'), join(homedir(), '.claude-flow.json')]);
/**
 * Configuration service implementation
 */
export class ConfigService extends EventEmitter {
  logger;
  config;
  configPath =
  /* istanbul ignore next */
  (cov_2gapkjnzm4().s[2]++, null);
  initialized =
  /* istanbul ignore next */
  (cov_2gapkjnzm4().s[3]++, false);
  watchers =
  /* istanbul ignore next */
  (cov_2gapkjnzm4().s[4]++, new Map());
  constructor(config) {
    /* istanbul ignore next */
    cov_2gapkjnzm4().f[0]++;
    cov_2gapkjnzm4().s[5]++;
    super();
    /* istanbul ignore next */
    cov_2gapkjnzm4().s[6]++;
    this.logger = createLogger({
      prefix: 'ConfigService'
    });
    /* istanbul ignore next */
    cov_2gapkjnzm4().s[7]++;
    this.config = {
      ...DEFAULT_CONFIG
    };
    /* istanbul ignore next */
    cov_2gapkjnzm4().s[8]++;
    if (config?.configPath) {
      /* istanbul ignore next */
      cov_2gapkjnzm4().b[0][0]++;
      cov_2gapkjnzm4().s[9]++;
      this.configPath = config.configPath;
    } else
    /* istanbul ignore next */
    {
      cov_2gapkjnzm4().b[0][1]++;
    }
  }
  /**
   * Initialize the configuration service
   */
  async init() {
    /* istanbul ignore next */
    cov_2gapkjnzm4().f[1]++;
    cov_2gapkjnzm4().s[10]++;
    if (this.initialized) {
      /* istanbul ignore next */
      cov_2gapkjnzm4().b[1][0]++;
      cov_2gapkjnzm4().s[11]++;
      return;
    } else
    /* istanbul ignore next */
    {
      cov_2gapkjnzm4().b[1][1]++;
    }
    cov_2gapkjnzm4().s[12]++;
    try {
      /* istanbul ignore next */
      cov_2gapkjnzm4().s[13]++;
      this.config = await this.load();
      /* istanbul ignore next */
      cov_2gapkjnzm4().s[14]++;
      this.initialized = true;
      /* istanbul ignore next */
      cov_2gapkjnzm4().s[15]++;
      this.logger.info('Configuration service initialized');
    } catch (error) {
      /* istanbul ignore next */
      cov_2gapkjnzm4().s[16]++;
      this.logger.error('Failed to initialize configuration service:', error);
      /* istanbul ignore next */
      cov_2gapkjnzm4().s[17]++;
      throw error;
    }
  }
  /**
   * Dispose the configuration service
   */
  async dispose() {
    /* istanbul ignore next */
    cov_2gapkjnzm4().f[2]++;
    cov_2gapkjnzm4().s[18]++;
    if (!this.initialized) {
      /* istanbul ignore next */
      cov_2gapkjnzm4().b[2][0]++;
      cov_2gapkjnzm4().s[19]++;
      return;
    } else
    /* istanbul ignore next */
    {
      cov_2gapkjnzm4().b[2][1]++;
    }
    cov_2gapkjnzm4().s[20]++;
    try {
      /* istanbul ignore next */
      cov_2gapkjnzm4().s[21]++;
      // Stop all file watchers
      for (const [path, watcher] of this.watchers) {
        /* istanbul ignore next */
        cov_2gapkjnzm4().s[22]++;
        if (
        /* istanbul ignore next */
        (cov_2gapkjnzm4().b[4][0]++, watcher) &&
        /* istanbul ignore next */
        (cov_2gapkjnzm4().b[4][1]++, typeof watcher.close === 'function')) {
          /* istanbul ignore next */
          cov_2gapkjnzm4().b[3][0]++;
          cov_2gapkjnzm4().s[23]++;
          watcher.close();
        } else
        /* istanbul ignore next */
        {
          cov_2gapkjnzm4().b[3][1]++;
        }
      }
      /* istanbul ignore next */
      cov_2gapkjnzm4().s[24]++;
      this.watchers.clear();
      /* istanbul ignore next */
      cov_2gapkjnzm4().s[25]++;
      this.initialized = false;
      /* istanbul ignore next */
      cov_2gapkjnzm4().s[26]++;
      this.logger.info('Configuration service disposed');
    } catch (error) {
      /* istanbul ignore next */
      cov_2gapkjnzm4().s[27]++;
      this.logger.error('Error disposing configuration service:', error);
    }
  }
  /**
   * Health check for the service
   */
  async healthCheck() {
    /* istanbul ignore next */
    cov_2gapkjnzm4().f[3]++;
    cov_2gapkjnzm4().s[28]++;
    try {
      /* istanbul ignore next */
      cov_2gapkjnzm4().s[29]++;
      if (!this.initialized) {
        /* istanbul ignore next */
        cov_2gapkjnzm4().b[5][0]++;
        cov_2gapkjnzm4().s[30]++;
        return {
          healthy: false,
          message: 'Service not initialized'
        };
      } else
      /* istanbul ignore next */
      {
        cov_2gapkjnzm4().b[5][1]++;
      }
      // Validate current configuration
      const validation =
      /* istanbul ignore next */
      (cov_2gapkjnzm4().s[31]++, await this.validate(this.config));
      /* istanbul ignore next */
      cov_2gapkjnzm4().s[32]++;
      if (!validation.valid) {
        /* istanbul ignore next */
        cov_2gapkjnzm4().b[6][0]++;
        cov_2gapkjnzm4().s[33]++;
        return {
          healthy: false,
          message: `Configuration validation failed: ${validation.errors[0]?.message}`
        };
      } else
      /* istanbul ignore next */
      {
        cov_2gapkjnzm4().b[6][1]++;
      }
      cov_2gapkjnzm4().s[34]++;
      return {
        healthy: true,
        message: 'Configuration is valid'
      };
    } catch (error) {
      /* istanbul ignore next */
      cov_2gapkjnzm4().s[35]++;
      return {
        healthy: false,
        message: error.message
      };
    }
  }
  /**
   * Load configuration from file system
   */
  async load() {
    /* istanbul ignore next */
    cov_2gapkjnzm4().f[4]++;
    cov_2gapkjnzm4().s[36]++;
    try {
      // Find configuration file
      let configData =
      /* istanbul ignore next */
      (cov_2gapkjnzm4().s[37]++, {
        ...DEFAULT_CONFIG
      });
      /* istanbul ignore next */
      cov_2gapkjnzm4().s[38]++;
      if (this.configPath) {
        /* istanbul ignore next */
        cov_2gapkjnzm4().b[7][0]++;
        cov_2gapkjnzm4().s[39]++;
        // Use specified config path
        if (await fileExists(this.configPath)) {
          /* istanbul ignore next */
          cov_2gapkjnzm4().b[8][0]++;
          const data =
          /* istanbul ignore next */
          (cov_2gapkjnzm4().s[40]++, await readFile(this.configPath, 'utf8'));
          const parsed =
          /* istanbul ignore next */
          (cov_2gapkjnzm4().s[41]++, JSON.parse(data));
          /* istanbul ignore next */
          cov_2gapkjnzm4().s[42]++;
          configData = this.mergeConfigs(DEFAULT_CONFIG, parsed);
          /* istanbul ignore next */
          cov_2gapkjnzm4().s[43]++;
          this.logger.info(`Loaded configuration from: ${this.configPath}`);
        } else {
          /* istanbul ignore next */
          cov_2gapkjnzm4().b[8][1]++;
          cov_2gapkjnzm4().s[44]++;
          this.logger.warn(`Specified config file not found: ${this.configPath}`);
        }
      } else {
        /* istanbul ignore next */
        cov_2gapkjnzm4().b[7][1]++;
        cov_2gapkjnzm4().s[45]++;
        // Search for config file in standard locations
        for (const location of CONFIG_LOCATIONS) {
          /* istanbul ignore next */
          cov_2gapkjnzm4().s[46]++;
          if (await fileExists(location)) {
            /* istanbul ignore next */
            cov_2gapkjnzm4().b[9][0]++;
            const data =
            /* istanbul ignore next */
            (cov_2gapkjnzm4().s[47]++, await readFile(location, 'utf8'));
            const parsed =
            /* istanbul ignore next */
            (cov_2gapkjnzm4().s[48]++, JSON.parse(data));
            /* istanbul ignore next */
            cov_2gapkjnzm4().s[49]++;
            configData = this.mergeConfigs(DEFAULT_CONFIG, parsed);
            /* istanbul ignore next */
            cov_2gapkjnzm4().s[50]++;
            this.configPath = location;
            /* istanbul ignore next */
            cov_2gapkjnzm4().s[51]++;
            this.logger.info(`Loaded configuration from: ${location}`);
            /* istanbul ignore next */
            cov_2gapkjnzm4().s[52]++;
            break;
          } else
          /* istanbul ignore next */
          {
            cov_2gapkjnzm4().b[9][1]++;
          }
        }
      }
      // Validate configuration
      const validation =
      /* istanbul ignore next */
      (cov_2gapkjnzm4().s[53]++, await this.validate(configData));
      /* istanbul ignore next */
      cov_2gapkjnzm4().s[54]++;
      if (!validation.valid) {
        /* istanbul ignore next */
        cov_2gapkjnzm4().b[10][0]++;
        cov_2gapkjnzm4().s[55]++;
        this.logger.warn('Configuration validation failed:', validation.errors);
        /* istanbul ignore next */
        cov_2gapkjnzm4().s[56]++;
        if (validation.warnings.length > 0) {
          /* istanbul ignore next */
          cov_2gapkjnzm4().b[11][0]++;
          cov_2gapkjnzm4().s[57]++;
          this.logger.warn('Configuration warnings:', validation.warnings);
        } else
        /* istanbul ignore next */
        {
          cov_2gapkjnzm4().b[11][1]++;
        }
      } else
      /* istanbul ignore next */
      {
        cov_2gapkjnzm4().b[10][1]++;
      }
      // Set up file watching if config file exists
      cov_2gapkjnzm4().s[58]++;
      if (
      /* istanbul ignore next */
      (cov_2gapkjnzm4().b[13][0]++, this.configPath) &&
      /* istanbul ignore next */
      (cov_2gapkjnzm4().b[13][1]++, await fileExists(this.configPath))) {
        /* istanbul ignore next */
        cov_2gapkjnzm4().b[12][0]++;
        cov_2gapkjnzm4().s[59]++;
        await this.watchConfigFile(this.configPath);
      } else
      /* istanbul ignore next */
      {
        cov_2gapkjnzm4().b[12][1]++;
      }
      cov_2gapkjnzm4().s[60]++;
      return configData;
    } catch (error) {
      /* istanbul ignore next */
      cov_2gapkjnzm4().s[61]++;
      this.logger.error('Failed to load configuration:', error);
      /* istanbul ignore next */
      cov_2gapkjnzm4().s[62]++;
      this.logger.info('Using default configuration');
      /* istanbul ignore next */
      cov_2gapkjnzm4().s[63]++;
      return {
        ...DEFAULT_CONFIG
      };
    }
  }
  /**
   * Save configuration to file
   */
  async save(config) {
    /* istanbul ignore next */
    cov_2gapkjnzm4().f[5]++;
    cov_2gapkjnzm4().s[64]++;
    try {
      // Use existing config path or default
      const savePath =
      /* istanbul ignore next */
      (cov_2gapkjnzm4().s[65]++,
      /* istanbul ignore next */
      (cov_2gapkjnzm4().b[14][0]++, this.configPath) ||
      /* istanbul ignore next */
      (cov_2gapkjnzm4().b[14][1]++, CONFIG_LOCATIONS[0]));
      // Ensure directory exists
      /* istanbul ignore next */
      cov_2gapkjnzm4().s[66]++;
      await ensureDirectory(dirname(savePath));
      // Validate before saving
      const validation =
      /* istanbul ignore next */
      (cov_2gapkjnzm4().s[67]++, await this.validate(config));
      /* istanbul ignore next */
      cov_2gapkjnzm4().s[68]++;
      if (!validation.valid) {
        /* istanbul ignore next */
        cov_2gapkjnzm4().b[15][0]++;
        cov_2gapkjnzm4().s[69]++;
        throw new Error(`Configuration validation failed: ${validation.errors[0]?.message}`);
      } else
      /* istanbul ignore next */
      {
        cov_2gapkjnzm4().b[15][1]++;
      }
      // Create backup if file exists
      cov_2gapkjnzm4().s[70]++;
      if (await fileExists(savePath)) {
        /* istanbul ignore next */
        cov_2gapkjnzm4().b[16][0]++;
        cov_2gapkjnzm4().s[71]++;
        await this.createBackup(savePath);
      } else
      /* istanbul ignore next */
      {
        cov_2gapkjnzm4().b[16][1]++;
      }
      // Save configuration
      cov_2gapkjnzm4().s[72]++;
      await writeFile(savePath, JSON.stringify(config, null, 2), 'utf8');
      /* istanbul ignore next */
      cov_2gapkjnzm4().s[73]++;
      this.config = config;
      /* istanbul ignore next */
      cov_2gapkjnzm4().s[74]++;
      this.configPath = savePath;
      /* istanbul ignore next */
      cov_2gapkjnzm4().s[75]++;
      this.logger.info(`Configuration saved to: ${savePath}`);
      /* istanbul ignore next */
      cov_2gapkjnzm4().s[76]++;
      this.emit('configSaved', {
        path: savePath,
        config
      });
    } catch (error) {
      /* istanbul ignore next */
      cov_2gapkjnzm4().s[77]++;
      this.logger.error('Failed to save configuration:', error);
      /* istanbul ignore next */
      cov_2gapkjnzm4().s[78]++;
      throw error;
    }
  }
  /**
   * Validate configuration
   */
  async validate(config, options =
  /* istanbul ignore next */
  (cov_2gapkjnzm4().b[17][0]++, {})) {
    /* istanbul ignore next */
    cov_2gapkjnzm4().f[6]++;
    cov_2gapkjnzm4().s[79]++;
    try {
      const results =
      /* istanbul ignore next */
      (cov_2gapkjnzm4().s[80]++, []);
      // Basic structure validation
      /* istanbul ignore next */
      cov_2gapkjnzm4().s[81]++;
      results.push(validateObject(config, {
        fieldName: 'Configuration',
        requiredKeys: ['version']
      }));
      // Plugin configuration validation
      /* istanbul ignore next */
      cov_2gapkjnzm4().s[82]++;
      if (config.plugins) {
        /* istanbul ignore next */
        cov_2gapkjnzm4().b[18][0]++;
        cov_2gapkjnzm4().s[83]++;
        results.push(validateObject(config.plugins, {
          fieldName: 'plugins',
          schema: {
            enabled: value => {
              /* istanbul ignore next */
              cov_2gapkjnzm4().f[7]++;
              cov_2gapkjnzm4().s[84]++;
              if (typeof value !== 'boolean') {
                /* istanbul ignore next */
                cov_2gapkjnzm4().b[19][0]++;
                cov_2gapkjnzm4().s[85]++;
                return {
                  valid: false,
                  errors: [{
                    message: 'plugins.enabled must be a boolean',
                    code: 'INVALID_TYPE',
                    path: 'plugins.enabled',
                    expected: 'boolean',
                    actual: typeof value
                  }],
                  warnings: []
                };
              } else
              /* istanbul ignore next */
              {
                cov_2gapkjnzm4().b[19][1]++;
              }
              cov_2gapkjnzm4().s[86]++;
              return {
                valid: true,
                errors: [],
                warnings: []
              };
            }
          }
        }));
      } else
      /* istanbul ignore next */
      {
        cov_2gapkjnzm4().b[18][1]++;
      }
      // Database configuration validation
      cov_2gapkjnzm4().s[87]++;
      if (config.database) {
        /* istanbul ignore next */
        cov_2gapkjnzm4().b[20][0]++;
        cov_2gapkjnzm4().s[88]++;
        results.push(validateObject(config.database, {
          fieldName: 'database',
          requiredKeys: ['type']
        }));
      } else
      /* istanbul ignore next */
      {
        cov_2gapkjnzm4().b[20][1]++;
      }
      // Apply custom validators
      cov_2gapkjnzm4().s[89]++;
      if (options.customValidators) {
        /* istanbul ignore next */
        cov_2gapkjnzm4().b[21][0]++;
        cov_2gapkjnzm4().s[90]++;
        for (const [key, validator] of Object.entries(options.customValidators)) {
          const value =
          /* istanbul ignore next */
          (cov_2gapkjnzm4().s[91]++, this.getNestedValue(config, key));
          /* istanbul ignore next */
          cov_2gapkjnzm4().s[92]++;
          if (value !== undefined) {
            /* istanbul ignore next */
            cov_2gapkjnzm4().b[22][0]++;
            cov_2gapkjnzm4().s[93]++;
            results.push(validator(value));
          } else
          /* istanbul ignore next */
          {
            cov_2gapkjnzm4().b[22][1]++;
          }
        }
      } else
      /* istanbul ignore next */
      {
        cov_2gapkjnzm4().b[21][1]++;
      }
      const combined =
      /* istanbul ignore next */
      (cov_2gapkjnzm4().s[94]++, combineValidationResults(...results));
      // Check strictness
      /* istanbul ignore next */
      cov_2gapkjnzm4().s[95]++;
      if (
      /* istanbul ignore next */
      (cov_2gapkjnzm4().b[24][0]++, options.strict) &&
      /* istanbul ignore next */
      (cov_2gapkjnzm4().b[24][1]++, combined.warnings.length > 0)) {
        /* istanbul ignore next */
        cov_2gapkjnzm4().b[23][0]++;
        cov_2gapkjnzm4().s[96]++;
        combined.valid = false;
        /* istanbul ignore next */
        cov_2gapkjnzm4().s[97]++;
        combined.errors.push(...combined.warnings.map(warning => {
          /* istanbul ignore next */
          cov_2gapkjnzm4().f[8]++;
          cov_2gapkjnzm4().s[98]++;
          return {
            message: warning.message,
            code: warning.code,
            path: warning.path,
            expected: 'no warnings in strict mode',
            actual: 'warning present'
          };
        }));
      } else
      /* istanbul ignore next */
      {
        cov_2gapkjnzm4().b[23][1]++;
      }
      cov_2gapkjnzm4().s[99]++;
      return combined;
    } catch (error) {
      /* istanbul ignore next */
      cov_2gapkjnzm4().s[100]++;
      return {
        valid: false,
        errors: [{
          message: `Validation error: ${error.message}`,
          code: 'VALIDATION_ERROR',
          path: 'root'
        }],
        warnings: []
      };
    }
  }
  /**
   * Get configuration value by key path
   */
  get(key) {
    /* istanbul ignore next */
    cov_2gapkjnzm4().f[9]++;
    cov_2gapkjnzm4().s[101]++;
    return this.getNestedValue(this.config, key);
  }
  /**
   * Set configuration value by key path
   */
  async set(key, value) {
    /* istanbul ignore next */
    cov_2gapkjnzm4().f[10]++;
    cov_2gapkjnzm4().s[102]++;
    try {
      const newConfig =
      /* istanbul ignore next */
      (cov_2gapkjnzm4().s[103]++, {
        ...this.config
      });
      /* istanbul ignore next */
      cov_2gapkjnzm4().s[104]++;
      this.setNestedValue(newConfig, key, value);
      // Validate the updated configuration
      const validation =
      /* istanbul ignore next */
      (cov_2gapkjnzm4().s[105]++, await this.validate(newConfig));
      /* istanbul ignore next */
      cov_2gapkjnzm4().s[106]++;
      if (!validation.valid) {
        /* istanbul ignore next */
        cov_2gapkjnzm4().b[25][0]++;
        cov_2gapkjnzm4().s[107]++;
        throw new Error(`Configuration validation failed: ${validation.errors[0]?.message}`);
      } else
      /* istanbul ignore next */
      {
        cov_2gapkjnzm4().b[25][1]++;
      }
      cov_2gapkjnzm4().s[108]++;
      this.config = newConfig;
      // Save if we have a config path
      /* istanbul ignore next */
      cov_2gapkjnzm4().s[109]++;
      if (this.configPath) {
        /* istanbul ignore next */
        cov_2gapkjnzm4().b[26][0]++;
        cov_2gapkjnzm4().s[110]++;
        await this.save(this.config);
      } else
      /* istanbul ignore next */
      {
        cov_2gapkjnzm4().b[26][1]++;
      }
      cov_2gapkjnzm4().s[111]++;
      this.emit('configChanged', {
        key,
        value,
        config: this.config
      });
    } catch (error) {
      /* istanbul ignore next */
      cov_2gapkjnzm4().s[112]++;
      this.logger.error(`Failed to set configuration value ${key}:`, error);
      /* istanbul ignore next */
      cov_2gapkjnzm4().s[113]++;
      throw error;
    }
  }
  /**
   * Reset configuration to defaults
   */
  async reset() {
    /* istanbul ignore next */
    cov_2gapkjnzm4().f[11]++;
    cov_2gapkjnzm4().s[114]++;
    try {
      /* istanbul ignore next */
      cov_2gapkjnzm4().s[115]++;
      this.config = {
        ...DEFAULT_CONFIG
      };
      /* istanbul ignore next */
      cov_2gapkjnzm4().s[116]++;
      if (this.configPath) {
        /* istanbul ignore next */
        cov_2gapkjnzm4().b[27][0]++;
        cov_2gapkjnzm4().s[117]++;
        await this.save(this.config);
      } else
      /* istanbul ignore next */
      {
        cov_2gapkjnzm4().b[27][1]++;
      }
      cov_2gapkjnzm4().s[118]++;
      this.logger.info('Configuration reset to defaults');
      /* istanbul ignore next */
      cov_2gapkjnzm4().s[119]++;
      this.emit('configReset', {
        config: this.config
      });
    } catch (error) {
      /* istanbul ignore next */
      cov_2gapkjnzm4().s[120]++;
      this.logger.error('Failed to reset configuration:', error);
      /* istanbul ignore next */
      cov_2gapkjnzm4().s[121]++;
      throw error;
    }
  }
  /**
   * Create configuration backup
   */
  async createBackup(configPath, options =
  /* istanbul ignore next */
  (cov_2gapkjnzm4().b[28][0]++, {})) {
    /* istanbul ignore next */
    cov_2gapkjnzm4().f[12]++;
    cov_2gapkjnzm4().s[122]++;
    try {
      const {
        backupDir =
        /* istanbul ignore next */
        (cov_2gapkjnzm4().b[29][0]++, join(dirname(configPath), 'backups')),
        includeTimestamp =
        /* istanbul ignore next */
        (cov_2gapkjnzm4().b[30][0]++, true),
        maxBackups =
        /* istanbul ignore next */
        (cov_2gapkjnzm4().b[31][0]++, 10)
      } =
      /* istanbul ignore next */
      (cov_2gapkjnzm4().s[123]++, options);
      /* istanbul ignore next */
      cov_2gapkjnzm4().s[124]++;
      await ensureDirectory(backupDir);
      const timestamp =
      /* istanbul ignore next */
      (cov_2gapkjnzm4().s[125]++, includeTimestamp ?
      /* istanbul ignore next */
      (cov_2gapkjnzm4().b[32][0]++, new Date().toISOString().replace(/[:.]/g, '-')) :
      /* istanbul ignore next */
      (cov_2gapkjnzm4().b[32][1]++, ''));
      const backupName =
      /* istanbul ignore next */
      (cov_2gapkjnzm4().s[126]++, `config-backup${timestamp ?
      /* istanbul ignore next */
      (cov_2gapkjnzm4().b[33][0]++, '-' + timestamp) :
      /* istanbul ignore next */
      (cov_2gapkjnzm4().b[33][1]++, '')}.json`);
      const backupPath =
      /* istanbul ignore next */
      (cov_2gapkjnzm4().s[127]++, join(backupDir, backupName));
      /* istanbul ignore next */
      cov_2gapkjnzm4().s[128]++;
      await copyFile(configPath, backupPath);
      // Clean up old backups
      /* istanbul ignore next */
      cov_2gapkjnzm4().s[129]++;
      await this.cleanupOldBackups(backupDir, maxBackups);
      /* istanbul ignore next */
      cov_2gapkjnzm4().s[130]++;
      this.logger.info(`Configuration backup created: ${backupPath}`);
      /* istanbul ignore next */
      cov_2gapkjnzm4().s[131]++;
      return backupPath;
    } catch (error) {
      /* istanbul ignore next */
      cov_2gapkjnzm4().s[132]++;
      this.logger.error('Failed to create configuration backup:', error);
      /* istanbul ignore next */
      cov_2gapkjnzm4().s[133]++;
      throw error;
    }
  }
  /**
   * Migrate configuration to newer version
   */
  async migrate(fromVersion, toVersion) {
    /* istanbul ignore next */
    cov_2gapkjnzm4().f[13]++;
    cov_2gapkjnzm4().s[134]++;
    try {
      /* istanbul ignore next */
      cov_2gapkjnzm4().s[135]++;
      this.logger.info(`Migrating configuration from ${fromVersion} to ${toVersion}`);
      const changes =
      /* istanbul ignore next */
      (cov_2gapkjnzm4().s[136]++, []);
      let backupPath;
      // Create backup before migration
      /* istanbul ignore next */
      cov_2gapkjnzm4().s[137]++;
      if (
      /* istanbul ignore next */
      (cov_2gapkjnzm4().b[35][0]++, this.configPath) &&
      /* istanbul ignore next */
      (cov_2gapkjnzm4().b[35][1]++, await fileExists(this.configPath))) {
        /* istanbul ignore next */
        cov_2gapkjnzm4().b[34][0]++;
        cov_2gapkjnzm4().s[138]++;
        backupPath = await this.createBackup(this.configPath, {
          includeTimestamp: true
        });
      } else
      /* istanbul ignore next */
      {
        cov_2gapkjnzm4().b[34][1]++;
      }
      // Apply migrations based on version changes
      const migratedConfig =
      /* istanbul ignore next */
      (cov_2gapkjnzm4().s[139]++, await this.applyMigrations(this.config, fromVersion, toVersion, changes));
      // Update version
      /* istanbul ignore next */
      cov_2gapkjnzm4().s[140]++;
      migratedConfig.version = toVersion;
      /* istanbul ignore next */
      cov_2gapkjnzm4().s[141]++;
      changes.push({
        type: 'modified',
        path: 'version',
        oldValue: fromVersion,
        newValue: toVersion
      });
      // Validate migrated configuration
      const validation =
      /* istanbul ignore next */
      (cov_2gapkjnzm4().s[142]++, await this.validate(migratedConfig));
      /* istanbul ignore next */
      cov_2gapkjnzm4().s[143]++;
      if (!validation.valid) {
        /* istanbul ignore next */
        cov_2gapkjnzm4().b[36][0]++;
        cov_2gapkjnzm4().s[144]++;
        throw new Error(`Migrated configuration is invalid: ${validation.errors[0]?.message}`);
      } else
      /* istanbul ignore next */
      {
        cov_2gapkjnzm4().b[36][1]++;
      }
      // Save migrated configuration
      cov_2gapkjnzm4().s[145]++;
      await this.save(migratedConfig);
      const result =
      /* istanbul ignore next */
      (cov_2gapkjnzm4().s[146]++, {
        success: true,
        message: `Successfully migrated configuration from ${fromVersion} to ${toVersion}`,
        fromVersion,
        toVersion,
        changes,
        backupPath
      });
      /* istanbul ignore next */
      cov_2gapkjnzm4().s[147]++;
      this.emit('configMigrated', result);
      /* istanbul ignore next */
      cov_2gapkjnzm4().s[148]++;
      return result;
    } catch (error) {
      const result =
      /* istanbul ignore next */
      (cov_2gapkjnzm4().s[149]++, {
        success: false,
        message: `Migration failed: ${error.message}`,
        fromVersion,
        toVersion,
        changes: []
      });
      /* istanbul ignore next */
      cov_2gapkjnzm4().s[150]++;
      this.logger.error('Configuration migration failed:', error);
      /* istanbul ignore next */
      cov_2gapkjnzm4().s[151]++;
      return result;
    }
  }
  /**
   * Watch configuration file for changes
   */
  async watchConfigFile(configPath) {
    /* istanbul ignore next */
    cov_2gapkjnzm4().f[14]++;
    cov_2gapkjnzm4().s[152]++;
    try {
      // Remove existing watcher
      const existingWatcher =
      /* istanbul ignore next */
      (cov_2gapkjnzm4().s[153]++, this.watchers.get(configPath));
      /* istanbul ignore next */
      cov_2gapkjnzm4().s[154]++;
      if (existingWatcher) {
        /* istanbul ignore next */
        cov_2gapkjnzm4().b[37][0]++;
        cov_2gapkjnzm4().s[155]++;
        existingWatcher.close();
      } else
      /* istanbul ignore next */
      {
        cov_2gapkjnzm4().b[37][1]++;
      }
      const {
        watch
      } =
      /* istanbul ignore next */
      (cov_2gapkjnzm4().s[156]++, await import('fs'));
      const watcher =
      /* istanbul ignore next */
      (cov_2gapkjnzm4().s[157]++, watch(configPath, async eventType => {
        /* istanbul ignore next */
        cov_2gapkjnzm4().f[15]++;
        cov_2gapkjnzm4().s[158]++;
        if (eventType === 'change') {
          /* istanbul ignore next */
          cov_2gapkjnzm4().b[38][0]++;
          cov_2gapkjnzm4().s[159]++;
          try {
            /* istanbul ignore next */
            cov_2gapkjnzm4().s[160]++;
            this.logger.info('Configuration file changed, reloading...');
            const newConfig =
            /* istanbul ignore next */
            (cov_2gapkjnzm4().s[161]++, await this.load());
            /* istanbul ignore next */
            cov_2gapkjnzm4().s[162]++;
            if (JSON.stringify(newConfig) !== JSON.stringify(this.config)) {
              /* istanbul ignore next */
              cov_2gapkjnzm4().b[39][0]++;
              cov_2gapkjnzm4().s[163]++;
              this.config = newConfig;
              /* istanbul ignore next */
              cov_2gapkjnzm4().s[164]++;
              this.emit('configReloaded', {
                config: newConfig
              });
            } else
            /* istanbul ignore next */
            {
              cov_2gapkjnzm4().b[39][1]++;
            }
          } catch (error) {
            /* istanbul ignore next */
            cov_2gapkjnzm4().s[165]++;
            this.logger.error('Failed to reload configuration:', error);
          }
        } else
        /* istanbul ignore next */
        {
          cov_2gapkjnzm4().b[38][1]++;
        }
      }));
      /* istanbul ignore next */
      cov_2gapkjnzm4().s[166]++;
      this.watchers.set(configPath, watcher);
    } catch (error) {
      /* istanbul ignore next */
      cov_2gapkjnzm4().s[167]++;
      this.logger.warn('Failed to set up config file watcher:', error);
    }
  }
  /**
   * Merge configuration objects
   */
  mergeConfigs(base, override) {
    /* istanbul ignore next */
    cov_2gapkjnzm4().f[16]++;
    const result =
    /* istanbul ignore next */
    (cov_2gapkjnzm4().s[168]++, {
      ...base
    });
    /* istanbul ignore next */
    cov_2gapkjnzm4().s[169]++;
    for (const [key, value] of Object.entries(override)) {
      /* istanbul ignore next */
      cov_2gapkjnzm4().s[170]++;
      if (
      /* istanbul ignore next */
      (cov_2gapkjnzm4().b[41][0]++, value !== null) &&
      /* istanbul ignore next */
      (cov_2gapkjnzm4().b[41][1]++, typeof value === 'object') &&
      /* istanbul ignore next */
      (cov_2gapkjnzm4().b[41][2]++, !Array.isArray(value))) {
        /* istanbul ignore next */
        cov_2gapkjnzm4().b[40][0]++;
        cov_2gapkjnzm4().s[171]++;
        result[key] = {
          ...result[key],
          ...value
        };
      } else {
        /* istanbul ignore next */
        cov_2gapkjnzm4().b[40][1]++;
        cov_2gapkjnzm4().s[172]++;
        result[key] = value;
      }
    }
    /* istanbul ignore next */
    cov_2gapkjnzm4().s[173]++;
    return result;
  }
  /**
   * Get nested value from object using dot notation
   */
  getNestedValue(obj, path) {
    /* istanbul ignore next */
    cov_2gapkjnzm4().f[17]++;
    cov_2gapkjnzm4().s[174]++;
    return path.split('.').reduce((current, key) => {
      /* istanbul ignore next */
      cov_2gapkjnzm4().f[18]++;
      cov_2gapkjnzm4().s[175]++;
      return /* istanbul ignore next */(cov_2gapkjnzm4().b[43][0]++, current) &&
      /* istanbul ignore next */
      (cov_2gapkjnzm4().b[43][1]++, typeof current === 'object') ?
      /* istanbul ignore next */
      (cov_2gapkjnzm4().b[42][0]++, current[key]) :
      /* istanbul ignore next */
      (cov_2gapkjnzm4().b[42][1]++, undefined);
    }, obj);
  }
  /**
   * Set nested value in object using dot notation
   */
  setNestedValue(obj, path, value) {
    /* istanbul ignore next */
    cov_2gapkjnzm4().f[19]++;
    const keys =
    /* istanbul ignore next */
    (cov_2gapkjnzm4().s[176]++, path.split('.'));
    const lastKey =
    /* istanbul ignore next */
    (cov_2gapkjnzm4().s[177]++, keys.pop());
    const target =
    /* istanbul ignore next */
    (cov_2gapkjnzm4().s[178]++, keys.reduce((current, key) => {
      /* istanbul ignore next */
      cov_2gapkjnzm4().f[20]++;
      cov_2gapkjnzm4().s[179]++;
      if (
      /* istanbul ignore next */
      (cov_2gapkjnzm4().b[45][0]++, !current[key]) ||
      /* istanbul ignore next */
      (cov_2gapkjnzm4().b[45][1]++, typeof current[key] !== 'object')) {
        /* istanbul ignore next */
        cov_2gapkjnzm4().b[44][0]++;
        cov_2gapkjnzm4().s[180]++;
        current[key] = {};
      } else
      /* istanbul ignore next */
      {
        cov_2gapkjnzm4().b[44][1]++;
      }
      cov_2gapkjnzm4().s[181]++;
      return current[key];
    }, obj));
    /* istanbul ignore next */
    cov_2gapkjnzm4().s[182]++;
    target[lastKey] = value;
  }
  /**
   * Apply configuration migrations
   */
  async applyMigrations(config, fromVersion, toVersion, changes) {
    /* istanbul ignore next */
    cov_2gapkjnzm4().f[21]++;
    const migratedConfig =
    /* istanbul ignore next */
    (cov_2gapkjnzm4().s[183]++, {
      ...config
    });
    // Example migration logic (would be expanded based on actual version changes)
    /* istanbul ignore next */
    cov_2gapkjnzm4().s[184]++;
    if (
    /* istanbul ignore next */
    (cov_2gapkjnzm4().b[47][0]++, fromVersion === '0.9.0') &&
    /* istanbul ignore next */
    (cov_2gapkjnzm4().b[47][1]++, toVersion === '1.0.0')) {
      /* istanbul ignore next */
      cov_2gapkjnzm4().b[46][0]++;
      cov_2gapkjnzm4().s[185]++;
      // Migrate old plugin structure
      if ('enablePlugins' in migratedConfig) {
        /* istanbul ignore next */
        cov_2gapkjnzm4().b[48][0]++;
        cov_2gapkjnzm4().s[186]++;
        migratedConfig.plugins = {
          ...migratedConfig.plugins,
          enabled: migratedConfig.enablePlugins
        };
        /* istanbul ignore next */
        cov_2gapkjnzm4().s[187]++;
        delete migratedConfig.enablePlugins;
        /* istanbul ignore next */
        cov_2gapkjnzm4().s[188]++;
        changes.push({
          type: 'modified',
          path: 'plugins.enabled',
          oldValue: migratedConfig.enablePlugins,
          newValue: migratedConfig.plugins.enabled
        });
        /* istanbul ignore next */
        cov_2gapkjnzm4().s[189]++;
        changes.push({
          type: 'removed',
          path: 'enablePlugins',
          oldValue: migratedConfig.enablePlugins
        });
      } else
      /* istanbul ignore next */
      {
        cov_2gapkjnzm4().b[48][1]++;
      }
    } else
    /* istanbul ignore next */
    {
      cov_2gapkjnzm4().b[46][1]++;
    }
    cov_2gapkjnzm4().s[190]++;
    return migratedConfig;
  }
  /**
   * Clean up old backup files
   */
  async cleanupOldBackups(backupDir, maxBackups) {
    /* istanbul ignore next */
    cov_2gapkjnzm4().f[22]++;
    cov_2gapkjnzm4().s[191]++;
    try {
      /* istanbul ignore next */
      cov_2gapkjnzm4().s[192]++;
      if (!existsSync(backupDir)) {
        /* istanbul ignore next */
        cov_2gapkjnzm4().b[49][0]++;
        cov_2gapkjnzm4().s[193]++;
        return;
      } else
      /* istanbul ignore next */
      {
        cov_2gapkjnzm4().b[49][1]++;
      }
      const fs =
      /* istanbul ignore next */
      (cov_2gapkjnzm4().s[194]++, require('fs'));
      const files =
      /* istanbul ignore next */
      (cov_2gapkjnzm4().s[195]++, fs.readdirSync(backupDir).filter(f => {
        /* istanbul ignore next */
        cov_2gapkjnzm4().f[23]++;
        cov_2gapkjnzm4().s[196]++;
        return /* istanbul ignore next */(cov_2gapkjnzm4().b[50][0]++, f.startsWith('config-backup')) &&
        /* istanbul ignore next */
        (cov_2gapkjnzm4().b[50][1]++, f.endsWith('.json'));
      }).map(f => {
        /* istanbul ignore next */
        cov_2gapkjnzm4().f[24]++;
        cov_2gapkjnzm4().s[197]++;
        return {
          name: f,
          path: join(backupDir, f),
          stats: fs.statSync(join(backupDir, f))
        };
      }).sort((a, b) => {
        /* istanbul ignore next */
        cov_2gapkjnzm4().f[25]++;
        cov_2gapkjnzm4().s[198]++;
        return b.stats.mtime.getTime() - a.stats.mtime.getTime();
      }));
      /* istanbul ignore next */
      cov_2gapkjnzm4().s[199]++;
      if (files.length > maxBackups) {
        /* istanbul ignore next */
        cov_2gapkjnzm4().b[51][0]++;
        const filesToDelete =
        /* istanbul ignore next */
        (cov_2gapkjnzm4().s[200]++, files.slice(maxBackups));
        /* istanbul ignore next */
        cov_2gapkjnzm4().s[201]++;
        for (const file of filesToDelete) {
          /* istanbul ignore next */
          cov_2gapkjnzm4().s[202]++;
          fs.unlinkSync(file.path);
          /* istanbul ignore next */
          cov_2gapkjnzm4().s[203]++;
          this.logger.debug(`Deleted old backup: ${file.name}`);
        }
      } else
      /* istanbul ignore next */
      {
        cov_2gapkjnzm4().b[51][1]++;
      }
    } catch (error) {
      /* istanbul ignore next */
      cov_2gapkjnzm4().s[204]++;
      this.logger.warn('Failed to cleanup old backups:', error);
    }
  }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,