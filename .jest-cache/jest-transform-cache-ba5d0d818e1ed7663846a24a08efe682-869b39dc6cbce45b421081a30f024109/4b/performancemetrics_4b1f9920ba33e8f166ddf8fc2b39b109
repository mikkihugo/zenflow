349b69cda434903f8ceb1ea644a27d76
/* istanbul ignore next */
function cov_2r6qo9fkxg() {
  var path = "/home/mhugo/code/claude-code-flow/src/mcp/performance-metrics.ts";
  var hash = "8c8c389557d7f93d1c4cf973c46316f40fd0cbcf";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/home/mhugo/code/claude-code-flow/src/mcp/performance-metrics.ts",
    statementMap: {
      "0": {
        start: {
          line: 6,
          column: 14
        },
        end: {
          line: 6,
          column: 16
        }
      },
      "1": {
        start: {
          line: 7,
          column: 20
        },
        end: {
          line: 7,
          column: 22
        }
      },
      "2": {
        start: {
          line: 8,
          column: 20
        },
        end: {
          line: 8,
          column: 25
        }
      },
      "3": {
        start: {
          line: 10,
          column: 16
        },
        end: {
          line: 10,
          column: 25
        }
      },
      "4": {
        start: {
          line: 11,
          column: 24
        },
        end: {
          line: 11,
          column: 26
        }
      },
      "5": {
        start: {
          line: 13,
          column: 8
        },
        end: {
          line: 13,
          column: 16
        }
      },
      "6": {
        start: {
          line: 14,
          column: 8
        },
        end: {
          line: 14,
          column: 36
        }
      },
      "7": {
        start: {
          line: 15,
          column: 8
        },
        end: {
          line: 50,
          column: 10
        }
      },
      "8": {
        start: {
          line: 54,
          column: 22
        },
        end: {
          line: 60,
          column: 9
        }
      },
      "9": {
        start: {
          line: 61,
          column: 8
        },
        end: {
          line: 61,
          column: 33
        }
      },
      "10": {
        start: {
          line: 62,
          column: 8
        },
        end: {
          line: 62,
          column: 42
        }
      },
      "11": {
        start: {
          line: 64,
          column: 8
        },
        end: {
          line: 66,
          column: 9
        }
      },
      "12": {
        start: {
          line: 65,
          column: 12
        },
        end: {
          line: 65,
          column: 39
        }
      },
      "13": {
        start: {
          line: 68,
          column: 8
        },
        end: {
          line: 68,
          column: 38
        }
      },
      "14": {
        start: {
          line: 69,
          column: 8
        },
        end: {
          line: 74,
          column: 9
        }
      },
      "15": {
        start: {
          line: 70,
          column: 12
        },
        end: {
          line: 70,
          column: 47
        }
      },
      "16": {
        start: {
          line: 73,
          column: 12
        },
        end: {
          line: 73,
          column: 43
        }
      },
      "17": {
        start: {
          line: 75,
          column: 8
        },
        end: {
          line: 75,
          column: 36
        }
      },
      "18": {
        start: {
          line: 76,
          column: 8
        },
        end: {
          line: 76,
          column: 44
        }
      },
      "19": {
        start: {
          line: 80,
          column: 22
        },
        end: {
          line: 86,
          column: 9
        }
      },
      "20": {
        start: {
          line: 87,
          column: 8
        },
        end: {
          line: 87,
          column: 33
        }
      },
      "21": {
        start: {
          line: 89,
          column: 8
        },
        end: {
          line: 89,
          column: 78
        }
      },
      "22": {
        start: {
          line: 91,
          column: 8
        },
        end: {
          line: 91,
          column: 40
        }
      },
      "23": {
        start: {
          line: 92,
          column: 27
        },
        end: {
          line: 92,
          column: 66
        }
      },
      "24": {
        start: {
          line: 93,
          column: 22
        },
        end: {
          line: 93,
          column: 51
        }
      },
      "25": {
        start: {
          line: 94,
          column: 8
        },
        end: {
          line: 95,
          column: 58
        }
      },
      "26": {
        start: {
          line: 96,
          column: 8
        },
        end: {
          line: 103,
          column: 9
        }
      },
      "27": {
        start: {
          line: 97,
          column: 12
        },
        end: {
          line: 98,
          column: 84
        }
      },
      "28": {
        start: {
          line: 101,
          column: 12
        },
        end: {
          line: 102,
          column: 80
        }
      },
      "29": {
        start: {
          line: 104,
          column: 8
        },
        end: {
          line: 104,
          column: 35
        }
      },
      "30": {
        start: {
          line: 105,
          column: 8
        },
        end: {
          line: 105,
          column: 50
        }
      },
      "31": {
        start: {
          line: 109,
          column: 22
        },
        end: {
          line: 115,
          column: 9
        }
      },
      "32": {
        start: {
          line: 116,
          column: 8
        },
        end: {
          line: 116,
          column: 33
        }
      },
      "33": {
        start: {
          line: 117,
          column: 8
        },
        end: {
          line: 117,
          column: 46
        }
      },
      "34": {
        start: {
          line: 118,
          column: 8
        },
        end: {
          line: 122,
          column: 9
        }
      },
      "35": {
        start: {
          line: 119,
          column: 30
        },
        end: {
          line: 119,
          column: 97
        }
      },
      "36": {
        start: {
          line: 119,
          column: 55
        },
        end: {
          line: 119,
          column: 89
        }
      },
      "37": {
        start: {
          line: 120,
          column: 34
        },
        end: {
          line: 120,
          column: 97
        }
      },
      "38": {
        start: {
          line: 120,
          column: 59
        },
        end: {
          line: 120,
          column: 89
        }
      },
      "39": {
        start: {
          line: 121,
          column: 12
        },
        end: {
          line: 121,
          column: 73
        }
      },
      "40": {
        start: {
          line: 123,
          column: 8
        },
        end: {
          line: 129,
          column: 9
        }
      },
      "41": {
        start: {
          line: 124,
          column: 31
        },
        end: {
          line: 126,
          column: 77
        }
      },
      "42": {
        start: {
          line: 125,
          column: 29
        },
        end: {
          line: 125,
          column: 53
        }
      },
      "43": {
        start: {
          line: 126,
          column: 36
        },
        end: {
          line: 126,
          column: 73
        }
      },
      "44": {
        start: {
          line: 127,
          column: 30
        },
        end: {
          line: 127,
          column: 87
        }
      },
      "45": {
        start: {
          line: 127,
          column: 55
        },
        end: {
          line: 127,
          column: 79
        }
      },
      "46": {
        start: {
          line: 128,
          column: 12
        },
        end: {
          line: 128,
          column: 77
        }
      },
      "47": {
        start: {
          line: 130,
          column: 8
        },
        end: {
          line: 130,
          column: 52
        }
      },
      "48": {
        start: {
          line: 134,
          column: 22
        },
        end: {
          line: 140,
          column: 9
        }
      },
      "49": {
        start: {
          line: 141,
          column: 8
        },
        end: {
          line: 141,
          column: 33
        }
      },
      "50": {
        start: {
          line: 142,
          column: 8
        },
        end: {
          line: 142,
          column: 46
        }
      },
      "51": {
        start: {
          line: 143,
          column: 8
        },
        end: {
          line: 153,
          column: 9
        }
      },
      "52": {
        start: {
          line: 145,
          column: 16
        },
        end: {
          line: 145,
          column: 60
        }
      },
      "53": {
        start: {
          line: 146,
          column: 16
        },
        end: {
          line: 146,
          column: 22
        }
      },
      "54": {
        start: {
          line: 148,
          column: 16
        },
        end: {
          line: 148,
          column: 56
        }
      },
      "55": {
        start: {
          line: 149,
          column: 16
        },
        end: {
          line: 149,
          column: 22
        }
      },
      "56": {
        start: {
          line: 151,
          column: 16
        },
        end: {
          line: 151,
          column: 63
        }
      },
      "57": {
        start: {
          line: 152,
          column: 16
        },
        end: {
          line: 152,
          column: 22
        }
      },
      "58": {
        start: {
          line: 155,
          column: 32
        },
        end: {
          line: 156,
          column: 41
        }
      },
      "59": {
        start: {
          line: 155,
          column: 72
        },
        end: {
          line: 155,
          column: 77
        }
      },
      "60": {
        start: {
          line: 157,
          column: 8
        },
        end: {
          line: 157,
          column: 73
        }
      },
      "61": {
        start: {
          line: 158,
          column: 8
        },
        end: {
          line: 158,
          column: 58
        }
      },
      "62": {
        start: {
          line: 162,
          column: 22
        },
        end: {
          line: 168,
          column: 9
        }
      },
      "63": {
        start: {
          line: 169,
          column: 8
        },
        end: {
          line: 169,
          column: 33
        }
      },
      "64": {
        start: {
          line: 170,
          column: 8
        },
        end: {
          line: 190,
          column: 9
        }
      },
      "65": {
        start: {
          line: 172,
          column: 16
        },
        end: {
          line: 172,
          column: 50
        }
      },
      "66": {
        start: {
          line: 173,
          column: 16
        },
        end: {
          line: 178,
          column: 17
        }
      },
      "67": {
        start: {
          line: 174,
          column: 42
        },
        end: {
          line: 175,
          column: 61
        }
      },
      "68": {
        start: {
          line: 176,
          column: 20
        },
        end: {
          line: 177,
          column: 85
        }
      },
      "69": {
        start: {
          line: 179,
          column: 16
        },
        end: {
          line: 179,
          column: 22
        }
      },
      "70": {
        start: {
          line: 181,
          column: 16
        },
        end: {
          line: 181,
          column: 48
        }
      },
      "71": {
        start: {
          line: 182,
          column: 16
        },
        end: {
          line: 182,
          column: 22
        }
      },
      "72": {
        start: {
          line: 184,
          column: 16
        },
        end: {
          line: 184,
          column: 55
        }
      },
      "73": {
        start: {
          line: 185,
          column: 35
        },
        end: {
          line: 185,
          column: 72
        }
      },
      "74": {
        start: {
          line: 186,
          column: 30
        },
        end: {
          line: 186,
          column: 66
        }
      },
      "75": {
        start: {
          line: 187,
          column: 16
        },
        end: {
          line: 188,
          column: 66
        }
      },
      "76": {
        start: {
          line: 189,
          column: 16
        },
        end: {
          line: 189,
          column: 22
        }
      },
      "77": {
        start: {
          line: 191,
          column: 8
        },
        end: {
          line: 191,
          column: 52
        }
      },
      "78": {
        start: {
          line: 195,
          column: 8
        },
        end: {
          line: 195,
          column: 56
        }
      },
      "79": {
        start: {
          line: 199,
          column: 23
        },
        end: {
          line: 199,
          column: 50
        }
      },
      "80": {
        start: {
          line: 200,
          column: 32
        },
        end: {
          line: 200,
          column: 51
        }
      },
      "81": {
        start: {
          line: 201,
          column: 30
        },
        end: {
          line: 201,
          column: 72
        }
      },
      "82": {
        start: {
          line: 201,
          column: 55
        },
        end: {
          line: 201,
          column: 64
        }
      },
      "83": {
        start: {
          line: 202,
          column: 28
        },
        end: {
          line: 202,
          column: 85
        }
      },
      "84": {
        start: {
          line: 203,
          column: 31
        },
        end: {
          line: 204,
          column: 89
        }
      },
      "85": {
        start: {
          line: 204,
          column: 48
        },
        end: {
          line: 204,
          column: 53
        }
      },
      "86": {
        start: {
          line: 206,
          column: 31
        },
        end: {
          line: 206,
          column: 40
        }
      },
      "87": {
        start: {
          line: 207,
          column: 8
        },
        end: {
          line: 212,
          column: 9
        }
      },
      "88": {
        start: {
          line: 208,
          column: 28
        },
        end: {
          line: 208,
          column: 89
        }
      },
      "89": {
        start: {
          line: 209,
          column: 12
        },
        end: {
          line: 209,
          column: 44
        }
      },
      "90": {
        start: {
          line: 210,
          column: 12
        },
        end: {
          line: 210,
          column: 28
        }
      },
      "91": {
        start: {
          line: 211,
          column: 12
        },
        end: {
          line: 211,
          column: 57
        }
      },
      "92": {
        start: {
          line: 213,
          column: 31
        },
        end: {
          line: 220,
          column: 24
        }
      },
      "93": {
        start: {
          line: 214,
          column: 42
        },
        end: {
          line: 218,
          column: 9
        }
      },
      "94": {
        start: {
          line: 219,
          column: 28
        },
        end: {
          line: 219,
          column: 57
        }
      },
      "95": {
        start: {
          line: 221,
          column: 8
        },
        end: {
          line: 227,
          column: 10
        }
      },
      "96": {
        start: {
          line: 231,
          column: 32
        },
        end: {
          line: 231,
          column: 34
        }
      },
      "97": {
        start: {
          line: 233,
          column: 8
        },
        end: {
          line: 240,
          column: 9
        }
      },
      "98": {
        start: {
          line: 234,
          column: 12
        },
        end: {
          line: 239,
          column: 15
        }
      },
      "99": {
        start: {
          line: 242,
          column: 26
        },
        end: {
          line: 242,
          column: 84
        }
      },
      "100": {
        start: {
          line: 243,
          column: 8
        },
        end: {
          line: 250,
          column: 9
        }
      },
      "101": {
        start: {
          line: 244,
          column: 12
        },
        end: {
          line: 249,
          column: 15
        }
      },
      "102": {
        start: {
          line: 252,
          column: 8
        },
        end: {
          line: 259,
          column: 9
        }
      },
      "103": {
        start: {
          line: 253,
          column: 12
        },
        end: {
          line: 258,
          column: 15
        }
      },
      "104": {
        start: {
          line: 261,
          column: 8
        },
        end: {
          line: 268,
          column: 9
        }
      },
      "105": {
        start: {
          line: 262,
          column: 12
        },
        end: {
          line: 267,
          column: 15
        }
      },
      "106": {
        start: {
          line: 269,
          column: 8
        },
        end: {
          line: 269,
          column: 31
        }
      },
      "107": {
        start: {
          line: 273,
          column: 8
        },
        end: {
          line: 274,
          column: 19
        }
      },
      "108": {
        start: {
          line: 274,
          column: 12
        },
        end: {
          line: 274,
          column: 19
        }
      },
      "109": {
        start: {
          line: 275,
          column: 23
        },
        end: {
          line: 275,
          column: 68
        }
      },
      "110": {
        start: {
          line: 275,
          column: 62
        },
        end: {
          line: 275,
          column: 67
        }
      },
      "111": {
        start: {
          line: 276,
          column: 20
        },
        end: {
          line: 276,
          column: 33
        }
      },
      "112": {
        start: {
          line: 277,
          column: 8
        },
        end: {
          line: 278,
          column: 52
        }
      },
      "113": {
        start: {
          line: 278,
          column: 36
        },
        end: {
          line: 278,
          column: 41
        }
      },
      "114": {
        start: {
          line: 279,
          column: 8
        },
        end: {
          line: 280,
          column: 48
        }
      },
      "115": {
        start: {
          line: 281,
          column: 8
        },
        end: {
          line: 282,
          column: 48
        }
      },
      "116": {
        start: {
          line: 286,
          column: 28
        },
        end: {
          line: 289,
          column: 34
        }
      },
      "117": {
        start: {
          line: 287,
          column: 36
        },
        end: {
          line: 287,
          column: 41
        }
      },
      "118": {
        start: {
          line: 289,
          column: 29
        },
        end: {
          line: 289,
          column: 33
        }
      },
      "119": {
        start: {
          line: 290,
          column: 8
        },
        end: {
          line: 290,
          column: 50
        }
      },
      "120": {
        start: {
          line: 294,
          column: 8
        },
        end: {
          line: 299,
          column: 20
        }
      },
      "121": {
        start: {
          line: 303,
          column: 8
        },
        end: {
          line: 303,
          column: 26
        }
      },
      "122": {
        start: {
          line: 304,
          column: 8
        },
        end: {
          line: 304,
          column: 32
        }
      },
      "123": {
        start: {
          line: 305,
          column: 8
        },
        end: {
          line: 305,
          column: 36
        }
      },
      "124": {
        start: {
          line: 306,
          column: 8
        },
        end: {
          line: 306,
          column: 31
        }
      },
      "125": {
        start: {
          line: 307,
          column: 8
        },
        end: {
          line: 307,
          column: 36
        }
      },
      "126": {
        start: {
          line: 309,
          column: 8
        },
        end: {
          line: 344,
          column: 10
        }
      },
      "127": {
        start: {
          line: 345,
          column: 8
        },
        end: {
          line: 345,
          column: 34
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 12,
            column: 4
          },
          end: {
            line: 12,
            column: 5
          }
        },
        loc: {
          start: {
            line: 12,
            column: 18
          },
          end: {
            line: 51,
            column: 5
          }
        },
        line: 12
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 53,
            column: 4
          },
          end: {
            line: 53,
            column: 5
          }
        },
        loc: {
          start: {
            line: 53,
            column: 47
          },
          end: {
            line: 77,
            column: 5
          }
        },
        line: 53
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 79,
            column: 4
          },
          end: {
            line: 79,
            column: 5
          }
        },
        loc: {
          start: {
            line: 79,
            column: 63
          },
          end: {
            line: 106,
            column: 5
          }
        },
        line: 79
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 108,
            column: 4
          },
          end: {
            line: 108,
            column: 5
          }
        },
        loc: {
          start: {
            line: 108,
            column: 61
          },
          end: {
            line: 131,
            column: 5
          }
        },
        line: 108
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 119,
            column: 50
          },
          end: {
            line: 119,
            column: 51
          }
        },
        loc: {
          start: {
            line: 119,
            column: 55
          },
          end: {
            line: 119,
            column: 89
          }
        },
        line: 119
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 120,
            column: 54
          },
          end: {
            line: 120,
            column: 55
          }
        },
        loc: {
          start: {
            line: 120,
            column: 59
          },
          end: {
            line: 120,
            column: 89
          }
        },
        line: 120
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 125,
            column: 24
          },
          end: {
            line: 125,
            column: 25
          }
        },
        loc: {
          start: {
            line: 125,
            column: 29
          },
          end: {
            line: 125,
            column: 53
          }
        },
        line: 125
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 126,
            column: 24
          },
          end: {
            line: 126,
            column: 25
          }
        },
        loc: {
          start: {
            line: 126,
            column: 36
          },
          end: {
            line: 126,
            column: 73
          }
        },
        line: 126
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 127,
            column: 50
          },
          end: {
            line: 127,
            column: 51
          }
        },
        loc: {
          start: {
            line: 127,
            column: 55
          },
          end: {
            line: 127,
            column: 79
          }
        },
        line: 127
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 133,
            column: 4
          },
          end: {
            line: 133,
            column: 5
          }
        },
        loc: {
          start: {
            line: 133,
            column: 72
          },
          end: {
            line: 159,
            column: 5
          }
        },
        line: 133
      },
      "10": {
        name: "(anonymous_10)",
        decl: {
          start: {
            line: 155,
            column: 62
          },
          end: {
            line: 155,
            column: 63
          }
        },
        loc: {
          start: {
            line: 155,
            column: 72
          },
          end: {
            line: 155,
            column: 77
          }
        },
        line: 155
      },
      "11": {
        name: "(anonymous_11)",
        decl: {
          start: {
            line: 161,
            column: 4
          },
          end: {
            line: 161,
            column: 5
          }
        },
        loc: {
          start: {
            line: 161,
            column: 76
          },
          end: {
            line: 192,
            column: 5
          }
        },
        line: 161
      },
      "12": {
        name: "(anonymous_12)",
        decl: {
          start: {
            line: 194,
            column: 4
          },
          end: {
            line: 194,
            column: 5
          }
        },
        loc: {
          start: {
            line: 194,
            column: 17
          },
          end: {
            line: 196,
            column: 5
          }
        },
        line: 194
      },
      "13": {
        name: "(anonymous_13)",
        decl: {
          start: {
            line: 198,
            column: 4
          },
          end: {
            line: 198,
            column: 5
          }
        },
        loc: {
          start: {
            line: 198,
            column: 28
          },
          end: {
            line: 228,
            column: 5
          }
        },
        line: 198
      },
      "14": {
        name: "(anonymous_14)",
        decl: {
          start: {
            line: 201,
            column: 50
          },
          end: {
            line: 201,
            column: 51
          }
        },
        loc: {
          start: {
            line: 201,
            column: 55
          },
          end: {
            line: 201,
            column: 64
          }
        },
        line: 201
      },
      "15": {
        name: "(anonymous_15)",
        decl: {
          start: {
            line: 204,
            column: 38
          },
          end: {
            line: 204,
            column: 39
          }
        },
        loc: {
          start: {
            line: 204,
            column: 48
          },
          end: {
            line: 204,
            column: 53
          }
        },
        line: 204
      },
      "16": {
        name: "(anonymous_16)",
        decl: {
          start: {
            line: 214,
            column: 17
          },
          end: {
            line: 214,
            column: 18
          }
        },
        loc: {
          start: {
            line: 214,
            column: 42
          },
          end: {
            line: 218,
            column: 9
          }
        },
        line: 214
      },
      "17": {
        name: "(anonymous_17)",
        decl: {
          start: {
            line: 219,
            column: 18
          },
          end: {
            line: 219,
            column: 19
          }
        },
        loc: {
          start: {
            line: 219,
            column: 28
          },
          end: {
            line: 219,
            column: 57
          }
        },
        line: 219
      },
      "18": {
        name: "(anonymous_18)",
        decl: {
          start: {
            line: 230,
            column: 4
          },
          end: {
            line: 230,
            column: 5
          }
        },
        loc: {
          start: {
            line: 230,
            column: 37
          },
          end: {
            line: 270,
            column: 5
          }
        },
        line: 230
      },
      "19": {
        name: "(anonymous_19)",
        decl: {
          start: {
            line: 272,
            column: 4
          },
          end: {
            line: 272,
            column: 5
          }
        },
        loc: {
          start: {
            line: 272,
            column: 27
          },
          end: {
            line: 283,
            column: 5
          }
        },
        line: 272
      },
      "20": {
        name: "(anonymous_20)",
        decl: {
          start: {
            line: 275,
            column: 52
          },
          end: {
            line: 275,
            column: 53
          }
        },
        loc: {
          start: {
            line: 275,
            column: 62
          },
          end: {
            line: 275,
            column: 67
          }
        },
        line: 275
      },
      "21": {
        name: "(anonymous_21)",
        decl: {
          start: {
            line: 278,
            column: 26
          },
          end: {
            line: 278,
            column: 27
          }
        },
        loc: {
          start: {
            line: 278,
            column: 36
          },
          end: {
            line: 278,
            column: 41
          }
        },
        line: 278
      },
      "22": {
        name: "(anonymous_22)",
        decl: {
          start: {
            line: 285,
            column: 4
          },
          end: {
            line: 285,
            column: 5
          }
        },
        loc: {
          start: {
            line: 285,
            column: 26
          },
          end: {
            line: 291,
            column: 5
          }
        },
        line: 285
      },
      "23": {
        name: "(anonymous_23)",
        decl: {
          start: {
            line: 287,
            column: 18
          },
          end: {
            line: 287,
            column: 19
          }
        },
        loc: {
          start: {
            line: 287,
            column: 36
          },
          end: {
            line: 287,
            column: 41
          }
        },
        line: 287
      },
      "24": {
        name: "(anonymous_24)",
        decl: {
          start: {
            line: 289,
            column: 17
          },
          end: {
            line: 289,
            column: 18
          }
        },
        loc: {
          start: {
            line: 289,
            column: 29
          },
          end: {
            line: 289,
            column: 33
          }
        },
        line: 289
      },
      "25": {
        name: "(anonymous_25)",
        decl: {
          start: {
            line: 293,
            column: 4
          },
          end: {
            line: 293,
            column: 5
          }
        },
        loc: {
          start: {
            line: 293,
            column: 20
          },
          end: {
            line: 300,
            column: 5
          }
        },
        line: 293
      },
      "26": {
        name: "(anonymous_26)",
        decl: {
          start: {
            line: 302,
            column: 4
          },
          end: {
            line: 302,
            column: 5
          }
        },
        loc: {
          start: {
            line: 302,
            column: 12
          },
          end: {
            line: 346,
            column: 5
          }
        },
        line: 302
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 64,
            column: 8
          },
          end: {
            line: 66,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 64,
            column: 8
          },
          end: {
            line: 66,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 64
      },
      "1": {
        loc: {
          start: {
            line: 69,
            column: 8
          },
          end: {
            line: 74,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 69,
            column: 8
          },
          end: {
            line: 74,
            column: 9
          }
        }, {
          start: {
            line: 72,
            column: 13
          },
          end: {
            line: 74,
            column: 9
          }
        }],
        line: 69
      },
      "2": {
        loc: {
          start: {
            line: 89,
            column: 38
          },
          end: {
            line: 89,
            column: 71
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 89,
            column: 38
          },
          end: {
            line: 89,
            column: 66
          }
        }, {
          start: {
            line: 89,
            column: 70
          },
          end: {
            line: 89,
            column: 71
          }
        }],
        line: 89
      },
      "3": {
        loc: {
          start: {
            line: 96,
            column: 8
          },
          end: {
            line: 103,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 96,
            column: 8
          },
          end: {
            line: 103,
            column: 9
          }
        }, {
          start: {
            line: 100,
            column: 13
          },
          end: {
            line: 103,
            column: 9
          }
        }],
        line: 96
      },
      "4": {
        loc: {
          start: {
            line: 118,
            column: 8
          },
          end: {
            line: 122,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 118,
            column: 8
          },
          end: {
            line: 122,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 118
      },
      "5": {
        loc: {
          start: {
            line: 118,
            column: 12
          },
          end: {
            line: 118,
            column: 67
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 118,
            column: 12
          },
          end: {
            line: 118,
            column: 37
          }
        }, {
          start: {
            line: 118,
            column: 41
          },
          end: {
            line: 118,
            column: 67
          }
        }],
        line: 118
      },
      "6": {
        loc: {
          start: {
            line: 123,
            column: 8
          },
          end: {
            line: 129,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 123,
            column: 8
          },
          end: {
            line: 129,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 123
      },
      "7": {
        loc: {
          start: {
            line: 126,
            column: 43
          },
          end: {
            line: 126,
            column: 72
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 126,
            column: 43
          },
          end: {
            line: 126,
            column: 67
          }
        }, {
          start: {
            line: 126,
            column: 71
          },
          end: {
            line: 126,
            column: 72
          }
        }],
        line: 126
      },
      "8": {
        loc: {
          start: {
            line: 143,
            column: 8
          },
          end: {
            line: 153,
            column: 9
          }
        },
        type: "switch",
        locations: [{
          start: {
            line: 144,
            column: 12
          },
          end: {
            line: 146,
            column: 22
          }
        }, {
          start: {
            line: 147,
            column: 12
          },
          end: {
            line: 149,
            column: 22
          }
        }, {
          start: {
            line: 150,
            column: 12
          },
          end: {
            line: 152,
            column: 22
          }
        }],
        line: 143
      },
      "9": {
        loc: {
          start: {
            line: 170,
            column: 8
          },
          end: {
            line: 190,
            column: 9
          }
        },
        type: "switch",
        locations: [{
          start: {
            line: 171,
            column: 12
          },
          end: {
            line: 179,
            column: 22
          }
        }, {
          start: {
            line: 180,
            column: 12
          },
          end: {
            line: 182,
            column: 22
          }
        }, {
          start: {
            line: 183,
            column: 12
          },
          end: {
            line: 189,
            column: 22
          }
        }],
        line: 170
      },
      "10": {
        loc: {
          start: {
            line: 173,
            column: 16
          },
          end: {
            line: 178,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 173,
            column: 16
          },
          end: {
            line: 178,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 173
      },
      "11": {
        loc: {
          start: {
            line: 202,
            column: 28
          },
          end: {
            line: 202,
            column: 85
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 202,
            column: 50
          },
          end: {
            line: 202,
            column: 81
          }
        }, {
          start: {
            line: 202,
            column: 84
          },
          end: {
            line: 202,
            column: 85
          }
        }],
        line: 202
      },
      "12": {
        loc: {
          start: {
            line: 203,
            column: 31
          },
          end: {
            line: 204,
            column: 89
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 204,
            column: 12
          },
          end: {
            line: 204,
            column: 85
          }
        }, {
          start: {
            line: 204,
            column: 88
          },
          end: {
            line: 204,
            column: 89
          }
        }],
        line: 203
      },
      "13": {
        loc: {
          start: {
            line: 208,
            column: 28
          },
          end: {
            line: 208,
            column: 89
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 208,
            column: 28
          },
          end: {
            line: 208,
            column: 63
          }
        }, {
          start: {
            line: 208,
            column: 67
          },
          end: {
            line: 208,
            column: 89
          }
        }],
        line: 208
      },
      "14": {
        loc: {
          start: {
            line: 233,
            column: 8
          },
          end: {
            line: 240,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 233,
            column: 8
          },
          end: {
            line: 240,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 233
      },
      "15": {
        loc: {
          start: {
            line: 243,
            column: 8
          },
          end: {
            line: 250,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 243,
            column: 8
          },
          end: {
            line: 250,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 243
      },
      "16": {
        loc: {
          start: {
            line: 252,
            column: 8
          },
          end: {
            line: 259,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 252,
            column: 8
          },
          end: {
            line: 259,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 252
      },
      "17": {
        loc: {
          start: {
            line: 261,
            column: 8
          },
          end: {
            line: 268,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 261,
            column: 8
          },
          end: {
            line: 268,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 261
      },
      "18": {
        loc: {
          start: {
            line: 273,
            column: 8
          },
          end: {
            line: 274,
            column: 19
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 273,
            column: 8
          },
          end: {
            line: 274,
            column: 19
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 273
      },
      "19": {
        loc: {
          start: {
            line: 280,
            column: 12
          },
          end: {
            line: 280,
            column: 47
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 280,
            column: 12
          },
          end: {
            line: 280,
            column: 42
          }
        }, {
          start: {
            line: 280,
            column: 46
          },
          end: {
            line: 280,
            column: 47
          }
        }],
        line: 280
      },
      "20": {
        loc: {
          start: {
            line: 282,
            column: 12
          },
          end: {
            line: 282,
            column: 47
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 282,
            column: 12
          },
          end: {
            line: 282,
            column: 42
          }
        }, {
          start: {
            line: 282,
            column: 46
          },
          end: {
            line: 282,
            column: 47
          }
        }],
        line: 282
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0,
      "74": 0,
      "75": 0,
      "76": 0,
      "77": 0,
      "78": 0,
      "79": 0,
      "80": 0,
      "81": 0,
      "82": 0,
      "83": 0,
      "84": 0,
      "85": 0,
      "86": 0,
      "87": 0,
      "88": 0,
      "89": 0,
      "90": 0,
      "91": 0,
      "92": 0,
      "93": 0,
      "94": 0,
      "95": 0,
      "96": 0,
      "97": 0,
      "98": 0,
      "99": 0,
      "100": 0,
      "101": 0,
      "102": 0,
      "103": 0,
      "104": 0,
      "105": 0,
      "106": 0,
      "107": 0,
      "108": 0,
      "109": 0,
      "110": 0,
      "111": 0,
      "112": 0,
      "113": 0,
      "114": 0,
      "115": 0,
      "116": 0,
      "117": 0,
      "118": 0,
      "119": 0,
      "120": 0,
      "121": 0,
      "122": 0,
      "123": 0,
      "124": 0,
      "125": 0,
      "126": 0,
      "127": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0, 0],
      "9": [0, 0, 0],
      "10": [0, 0],
      "11": [0, 0],
      "12": [0, 0],
      "13": [0, 0],
      "14": [0, 0],
      "15": [0, 0],
      "16": [0, 0],
      "17": [0, 0],
      "18": [0, 0],
      "19": [0, 0],
      "20": [0, 0]
    },
    inputSourceMap: {
      file: "/home/mhugo/code/claude-code-flow/src/mcp/performance-metrics.ts",
      mappings: "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",
      names: [],
      sources: ["/home/mhugo/code/claude-code-flow/src/mcp/performance-metrics.ts"],
      sourcesContent: ["/** MCP Performance Metrics System */\n/** Advanced monitoring and optimization for Model Context Protocol operations */\n\nimport { EventEmitter } from 'node:events';\nimport { performance } from 'node:perf_hooks';\n\ninterface MCPMetrics {\n  requests: {\n    total: number;\n    successful: number;\n    failed: number;\n    averageLatency: number;\n    p95Latency: number;\n    p99Latency: number;\n  };\n  tools: {\n    executions: number;\n    averageExecutionTime: number;\n    successRate: number;\n    mostUsed: string[];\n    errorRate: number;\n  };\n  memory: {\n    totalOperations: number;\n    cacheHitRate: number;\n    averageResponseSize: number;\n    memoryUsage: number;\n  };\n  coordination: {\n    swarmOperations: number;\n    agentSpawns: number;\n    taskOrchestrations: number;\n    coordinationOverhead: number;\n  };\n  neural: {\n    predictions: number;\n    trainings: number;\n    accuracy: number;\n    searchOperations: number;\n    averageSearchTime: number;\n  };\n}\n\ninterface PerformanceEntry {\n  timestamp: number;\n  operation: string;\n  duration: number;\n  success: boolean;\n  metadata?: Record<string, any>;\n}\n\nexport class MCPPerformanceMetrics extends EventEmitter {\n  private metrics: MCPMetrics;\n  private entries: PerformanceEntry[] = [];\n  private latencyBuffer: number[] = [];\n  private readonly maxBufferSize = 10000;\n  private startTime: number;\n  private toolUsage = new Map<string, number>();\n  private coordinationTimes: number[] = [];\n\n  constructor() {\n    super();\n    \n    this.startTime = Date.now();\n    this.metrics = {\n      requests: {\n        total: 0,\n        successful: 0,\n        failed: 0,\n        averageLatency: 0,\n        p95Latency: 0,\n        p99Latency: 0\n      },\n      tools: {\n        executions: 0,\n        averageExecutionTime: 0,\n        successRate: 0,\n        mostUsed: [],\n        errorRate: 0\n      },\n      memory: {\n        totalOperations: 0,\n        cacheHitRate: 0,\n        averageResponseSize: 0,\n        memoryUsage: 0\n      },\n      coordination: {\n        swarmOperations: 0,\n        agentSpawns: 0,\n        taskOrchestrations: 0,\n        coordinationOverhead: 0\n      },\n      neural: {\n        predictions: 0,\n        trainings: 0,\n        accuracy: 0,\n        searchOperations: 0,\n        averageSearchTime: 0\n      }\n    };\n  }\n\n  /** Record an MCP request */\n  recordRequest(duration: number, success: boolean, metadata?: Record<string, any>): void {\n    const entry: PerformanceEntry = {\n      timestamp: Date.now(),\n      operation: 'mcp_request',\n      duration,\n      success,\n      metadata\n    };\n\n    this.entries.push(entry);\n    this.latencyBuffer.push(duration);\n\n    // Maintain buffer size\n    if (this.latencyBuffer.length > this.maxBufferSize) {\n      this.latencyBuffer.shift();\n    }\n\n    // Update metrics\n    this.metrics.requests.total++;\n    if (success) {\n      this.metrics.requests.successful++;\n    } else {\n      this.metrics.requests.failed++;\n    }\n\n    this.updateLatencyMetrics();\n    this.emit('requestRecorded', entry);\n  }\n\n  /** Record tool execution */\n  recordToolExecution(\n    toolName: string, \n    duration: number, \n    success: boolean, \n    metadata?: Record<string, any>\n  ): void {\n    const entry: PerformanceEntry = {\n      timestamp: Date.now(),\n      operation: `tool_${toolName}`,\n      duration,\n      success,\n      metadata: { toolName, ...metadata }\n    };\n\n    this.entries.push(entry);\n    \n    // Update tool usage tracking\n    this.toolUsage.set(toolName, (this.toolUsage.get(toolName) || 0) + 1);\n    \n    // Update tool metrics\n    this.metrics.tools.executions++;\n    const currentAvg = this.metrics.tools.averageExecutionTime;\n    const count = this.metrics.tools.executions;\n    this.metrics.tools.averageExecutionTime = \n      (currentAvg * (count - 1) + duration) / count;\n\n    if (success) {\n      this.metrics.tools.successRate = \n        (this.metrics.tools.successful + 1) / this.metrics.tools.executions;\n    } else {\n      this.metrics.tools.errorRate = \n        (this.metrics.tools.failed + 1) / this.metrics.tools.executions;\n    }\n\n    this.updateMostUsedTools();\n    this.emit('toolExecutionRecorded', entry);\n  }\n\n  /** Record memory operation */\n  recordMemoryOperation(\n    operation: 'read' | 'write' | 'cache_hit' | 'cache_miss',\n    duration: number,\n    responseSize?: number\n  ): void {\n    const entry: PerformanceEntry = {\n      timestamp: Date.now(),\n      operation: `memory_${operation}`,\n      duration,\n      success: true,\n      metadata: { responseSize }\n    };\n\n    this.entries.push(entry);\n    this.metrics.memory.totalOperations++;\n\n    if (operation === 'cache_hit' || operation === 'cache_miss') {\n      const cacheHits = this.entries.filter(e => \n        e.operation === 'memory_cache_hit'\n      ).length;\n      const totalCacheOps = this.entries.filter(e => \n        e.operation.includes('cache_')\n      ).length;\n      \n      this.metrics.memory.cacheHitRate = cacheHits / totalCacheOps;\n    }\n\n    if (responseSize) {\n      const totalSizes = this.entries\n        .filter(e => e.metadata?.responseSize)\n        .reduce((sum, e) => sum + (e.metadata?.responseSize || 0), 0);\n      const sizeCount = this.entries.filter(e => e.metadata?.responseSize).length;\n      \n      this.metrics.memory.averageResponseSize = totalSizes / sizeCount;\n    }\n\n    this.emit('memoryOperationRecorded', entry);\n  }\n\n  /** Record coordination operation */\n  recordCoordinationOperation(\n    operation: 'swarm_init' | 'agent_spawn' | 'task_orchestrate',\n    duration: number,\n    success: boolean,\n    metadata?: Record<string, any>\n  ): void {\n    const entry: PerformanceEntry = {\n      timestamp: Date.now(),\n      operation: `coordination_${operation}`,\n      duration,\n      success,\n      metadata\n    };\n\n    this.entries.push(entry);\n    this.coordinationTimes.push(duration);\n\n    switch (operation) {\n      case 'swarm_init':\n        this.metrics.coordination.swarmOperations++;\n        break;\n      case 'agent_spawn':\n        this.metrics.coordination.agentSpawns++;\n        break;\n      case 'task_orchestrate':\n        this.metrics.coordination.taskOrchestrations++;\n        break;\n    }\n\n    // Calculate coordination overhead\n    const avgCoordination = this.coordinationTimes.reduce((a, b) => a + b, 0) / \n      this.coordinationTimes.length;\n    this.metrics.coordination.coordinationOverhead = avgCoordination;\n\n    this.emit('coordinationOperationRecorded', entry);\n  }\n\n  /** Record neural operation */\n  recordNeuralOperation(\n    operation: 'prediction' | 'training' | 'search',\n    duration: number,\n    success: boolean,\n    accuracy?: number,\n    metadata?: Record<string, any>\n  ): void {\n    const entry: PerformanceEntry = {\n      timestamp: Date.now(),\n      operation: `neural_${operation}`,\n      duration,\n      success,\n      metadata: { accuracy, ...metadata }\n    };\n\n    this.entries.push(entry);\n\n    switch (operation) {\n      case 'prediction':\n        this.metrics.neural.predictions++;\n        if (accuracy !== undefined) {\n          const totalAccuracy = this.metrics.neural.accuracy * \n            (this.metrics.neural.predictions - 1);\n          this.metrics.neural.accuracy = \n            (totalAccuracy + accuracy) / this.metrics.neural.predictions;\n        }\n        break;\n      case 'training':\n        this.metrics.neural.trainings++;\n        break;\n      case 'search':\n        this.metrics.neural.searchOperations++;\n        const currentAvg = this.metrics.neural.averageSearchTime;\n        const count = this.metrics.neural.searchOperations;\n        this.metrics.neural.averageSearchTime = \n          (currentAvg * (count - 1) + duration) / count;\n        break;\n    }\n\n    this.emit('neuralOperationRecorded', entry);\n  }\n\n  /** Get current metrics snapshot */\n  getMetrics(): MCPMetrics {\n    return JSON.parse(JSON.stringify(this.metrics));\n  }\n\n  /** Get performance summary */\n  getPerformanceSummary(): {\n    uptime: number;\n    totalOperations: number;\n    averageLatency: number;\n    successRate: number;\n    topBottlenecks: Array<{ operation: string; averageTime: number; count: number }>;\n  } {\n    const uptime = Date.now() - this.startTime;\n    const totalOperations = this.entries.length;\n    const successfulOps = this.entries.filter(e => e.success).length;\n    const successRate = totalOperations > 0 ? successfulOps / totalOperations : 0;\n    \n    const averageLatency = this.latencyBuffer.length > 0 ?\n      this.latencyBuffer.reduce((a, b) => a + b, 0) / this.latencyBuffer.length : 0;\n\n    // Calculate bottlenecks\n    const operationStats = new Map<string, { total: number; count: number }>();\n    \n    for (const entry of this.entries) {\n      const current = operationStats.get(entry.operation) || { total: 0, count: 0 };\n      current.total += entry.duration;\n      current.count++;\n      operationStats.set(entry.operation, current);\n    }\n\n    const topBottlenecks = Array.from(operationStats.entries())\n      .map(([operation, stats]) => ({\n        operation,\n        averageTime: stats.total / stats.count,\n        count: stats.count\n      }))\n      .sort((a, b) => b.averageTime - a.averageTime)\n      .slice(0, 5);\n\n    return {\n      uptime,\n      totalOperations,\n      averageLatency,\n      successRate,\n      topBottlenecks\n    };\n  }\n\n  /** Get optimization recommendations */\n  getOptimizationRecommendations(): Array<{\n    category: string;\n    issue: string;\n    recommendation: string;\n    priority: 'high' | 'medium' | 'low';\n  }> {\n    const recommendations: Array<{\n      category: string;\n      issue: string;\n      recommendation: string;\n      priority: 'high' | 'medium' | 'low';\n    }> = [];\n\n    // Check latency issues\n    if (this.metrics.requests.averageLatency > 1000) {\n      recommendations.push({\n        category: 'Performance',\n        issue: 'High average request latency',\n        recommendation: 'Consider implementing request caching or optimizing tool execution',\n        priority: 'high'\n      });\n    }\n\n    // Check error rates\n    const errorRate = this.metrics.requests.failed / this.metrics.requests.total;\n    if (errorRate > 0.05) {\n      recommendations.push({\n        category: 'Reliability',\n        issue: 'High error rate detected',\n        recommendation: 'Review error logs and implement better error handling',\n        priority: 'high'\n      });\n    }\n\n    // Check memory efficiency\n    if (this.metrics.memory.cacheHitRate < 0.7) {\n      recommendations.push({\n        category: 'Memory',\n        issue: 'Low cache hit rate',\n        recommendation: 'Optimize caching strategy or increase cache size',\n        priority: 'medium'\n      });\n    }\n\n    // Check coordination overhead\n    if (this.metrics.coordination.coordinationOverhead > 500) {\n      recommendations.push({\n        category: 'Coordination',\n        issue: 'High coordination overhead',\n        recommendation: 'Consider batch operations or optimize agent communication',\n        priority: 'medium'\n      });\n    }\n\n    return recommendations;\n  }\n\n  /** Update latency percentiles */\n  private updateLatencyMetrics(): void {\n    if (this.latencyBuffer.length === 0) return;\n\n    const sorted = [...this.latencyBuffer].sort((a, b) => a - b);\n    const len = sorted.length;\n\n    this.metrics.requests.averageLatency = \n      sorted.reduce((a, b) => a + b, 0) / len;\n    \n    this.metrics.requests.p95Latency = \n      sorted[Math.floor(len * 0.95)] || 0;\n    \n    this.metrics.requests.p99Latency = \n      sorted[Math.floor(len * 0.99)] || 0;\n  }\n\n  /** Update most used tools */\n  private updateMostUsedTools(): void {\n    const sortedTools = Array.from(this.toolUsage.entries())\n      .sort(([,a], [,b]) => b - a)\n      .slice(0, 5)\n      .map(([tool]) => tool);\n    \n    this.metrics.tools.mostUsed = sortedTools;\n  }\n\n  /** Export metrics to JSON */\n  exportMetrics(): string {\n    return JSON.stringify({\n      timestamp: Date.now(),\n      metrics: this.getMetrics(),\n      summary: this.getPerformanceSummary(),\n      recommendations: this.getOptimizationRecommendations()\n    }, null, 2);\n  }\n\n  /** Reset all metrics */\n  reset(): void {\n    this.entries = [];\n    this.latencyBuffer = [];\n    this.coordinationTimes = [];\n    this.toolUsage.clear();\n    this.startTime = Date.now();\n    \n    // Reset metrics to initial state\n    this.metrics = {\n      requests: {\n        total: 0,\n        successful: 0,\n        failed: 0,\n        averageLatency: 0,\n        p95Latency: 0,\n        p99Latency: 0\n      },\n      tools: {\n        executions: 0,\n        averageExecutionTime: 0,\n        successRate: 0,\n        mostUsed: [],\n        errorRate: 0\n      },\n      memory: {\n        totalOperations: 0,\n        cacheHitRate: 0,\n        averageResponseSize: 0,\n        memoryUsage: 0\n      },\n      coordination: {\n        swarmOperations: 0,\n        agentSpawns: 0,\n        taskOrchestrations: 0,\n        coordinationOverhead: 0\n      },\n      neural: {\n        predictions: 0,\n        trainings: 0,\n        accuracy: 0,\n        searchOperations: 0,\n        averageSearchTime: 0\n      }\n    };\n\n    this.emit('metricsReset');\n  }\n}\n\nexport default MCPPerformanceMetrics;"],
      version: 3
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "8c8c389557d7f93d1c4cf973c46316f40fd0cbcf"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_2r6qo9fkxg = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_2r6qo9fkxg();
/** MCP Performance Metrics System */
/** Advanced monitoring and optimization for Model Context Protocol operations */
import { EventEmitter } from 'node:events';
export class MCPPerformanceMetrics extends EventEmitter {
  metrics;
  entries =
  /* istanbul ignore next */
  (cov_2r6qo9fkxg().s[0]++, []);
  latencyBuffer =
  /* istanbul ignore next */
  (cov_2r6qo9fkxg().s[1]++, []);
  maxBufferSize =
  /* istanbul ignore next */
  (cov_2r6qo9fkxg().s[2]++, 10000);
  startTime;
  toolUsage =
  /* istanbul ignore next */
  (cov_2r6qo9fkxg().s[3]++, new Map());
  coordinationTimes =
  /* istanbul ignore next */
  (cov_2r6qo9fkxg().s[4]++, []);
  constructor() {
    /* istanbul ignore next */
    cov_2r6qo9fkxg().f[0]++;
    cov_2r6qo9fkxg().s[5]++;
    super();
    /* istanbul ignore next */
    cov_2r6qo9fkxg().s[6]++;
    this.startTime = Date.now();
    /* istanbul ignore next */
    cov_2r6qo9fkxg().s[7]++;
    this.metrics = {
      requests: {
        total: 0,
        successful: 0,
        failed: 0,
        averageLatency: 0,
        p95Latency: 0,
        p99Latency: 0
      },
      tools: {
        executions: 0,
        averageExecutionTime: 0,
        successRate: 0,
        mostUsed: [],
        errorRate: 0
      },
      memory: {
        totalOperations: 0,
        cacheHitRate: 0,
        averageResponseSize: 0,
        memoryUsage: 0
      },
      coordination: {
        swarmOperations: 0,
        agentSpawns: 0,
        taskOrchestrations: 0,
        coordinationOverhead: 0
      },
      neural: {
        predictions: 0,
        trainings: 0,
        accuracy: 0,
        searchOperations: 0,
        averageSearchTime: 0
      }
    };
  }
  /** Record an MCP request */
  recordRequest(duration, success, metadata) {
    /* istanbul ignore next */
    cov_2r6qo9fkxg().f[1]++;
    const entry =
    /* istanbul ignore next */
    (cov_2r6qo9fkxg().s[8]++, {
      timestamp: Date.now(),
      operation: 'mcp_request',
      duration,
      success,
      metadata
    });
    /* istanbul ignore next */
    cov_2r6qo9fkxg().s[9]++;
    this.entries.push(entry);
    /* istanbul ignore next */
    cov_2r6qo9fkxg().s[10]++;
    this.latencyBuffer.push(duration);
    // Maintain buffer size
    /* istanbul ignore next */
    cov_2r6qo9fkxg().s[11]++;
    if (this.latencyBuffer.length > this.maxBufferSize) {
      /* istanbul ignore next */
      cov_2r6qo9fkxg().b[0][0]++;
      cov_2r6qo9fkxg().s[12]++;
      this.latencyBuffer.shift();
    } else
    /* istanbul ignore next */
    {
      cov_2r6qo9fkxg().b[0][1]++;
    }
    // Update metrics
    cov_2r6qo9fkxg().s[13]++;
    this.metrics.requests.total++;
    /* istanbul ignore next */
    cov_2r6qo9fkxg().s[14]++;
    if (success) {
      /* istanbul ignore next */
      cov_2r6qo9fkxg().b[1][0]++;
      cov_2r6qo9fkxg().s[15]++;
      this.metrics.requests.successful++;
    } else {
      /* istanbul ignore next */
      cov_2r6qo9fkxg().b[1][1]++;
      cov_2r6qo9fkxg().s[16]++;
      this.metrics.requests.failed++;
    }
    /* istanbul ignore next */
    cov_2r6qo9fkxg().s[17]++;
    this.updateLatencyMetrics();
    /* istanbul ignore next */
    cov_2r6qo9fkxg().s[18]++;
    this.emit('requestRecorded', entry);
  }
  /** Record tool execution */
  recordToolExecution(toolName, duration, success, metadata) {
    /* istanbul ignore next */
    cov_2r6qo9fkxg().f[2]++;
    const entry =
    /* istanbul ignore next */
    (cov_2r6qo9fkxg().s[19]++, {
      timestamp: Date.now(),
      operation: `tool_${toolName}`,
      duration,
      success,
      metadata: {
        toolName,
        ...metadata
      }
    });
    /* istanbul ignore next */
    cov_2r6qo9fkxg().s[20]++;
    this.entries.push(entry);
    // Update tool usage tracking
    /* istanbul ignore next */
    cov_2r6qo9fkxg().s[21]++;
    this.toolUsage.set(toolName, (
    /* istanbul ignore next */
    (cov_2r6qo9fkxg().b[2][0]++, this.toolUsage.get(toolName)) ||
    /* istanbul ignore next */
    (cov_2r6qo9fkxg().b[2][1]++, 0)) + 1);
    // Update tool metrics
    /* istanbul ignore next */
    cov_2r6qo9fkxg().s[22]++;
    this.metrics.tools.executions++;
    const currentAvg =
    /* istanbul ignore next */
    (cov_2r6qo9fkxg().s[23]++, this.metrics.tools.averageExecutionTime);
    const count =
    /* istanbul ignore next */
    (cov_2r6qo9fkxg().s[24]++, this.metrics.tools.executions);
    /* istanbul ignore next */
    cov_2r6qo9fkxg().s[25]++;
    this.metrics.tools.averageExecutionTime = (currentAvg * (count - 1) + duration) / count;
    /* istanbul ignore next */
    cov_2r6qo9fkxg().s[26]++;
    if (success) {
      /* istanbul ignore next */
      cov_2r6qo9fkxg().b[3][0]++;
      cov_2r6qo9fkxg().s[27]++;
      this.metrics.tools.successRate = (this.metrics.tools.successful + 1) / this.metrics.tools.executions;
    } else {
      /* istanbul ignore next */
      cov_2r6qo9fkxg().b[3][1]++;
      cov_2r6qo9fkxg().s[28]++;
      this.metrics.tools.errorRate = (this.metrics.tools.failed + 1) / this.metrics.tools.executions;
    }
    /* istanbul ignore next */
    cov_2r6qo9fkxg().s[29]++;
    this.updateMostUsedTools();
    /* istanbul ignore next */
    cov_2r6qo9fkxg().s[30]++;
    this.emit('toolExecutionRecorded', entry);
  }
  /** Record memory operation */
  recordMemoryOperation(operation, duration, responseSize) {
    /* istanbul ignore next */
    cov_2r6qo9fkxg().f[3]++;
    const entry =
    /* istanbul ignore next */
    (cov_2r6qo9fkxg().s[31]++, {
      timestamp: Date.now(),
      operation: `memory_${operation}`,
      duration,
      success: true,
      metadata: {
        responseSize
      }
    });
    /* istanbul ignore next */
    cov_2r6qo9fkxg().s[32]++;
    this.entries.push(entry);
    /* istanbul ignore next */
    cov_2r6qo9fkxg().s[33]++;
    this.metrics.memory.totalOperations++;
    /* istanbul ignore next */
    cov_2r6qo9fkxg().s[34]++;
    if (
    /* istanbul ignore next */
    (cov_2r6qo9fkxg().b[5][0]++, operation === 'cache_hit') ||
    /* istanbul ignore next */
    (cov_2r6qo9fkxg().b[5][1]++, operation === 'cache_miss')) {
      /* istanbul ignore next */
      cov_2r6qo9fkxg().b[4][0]++;
      const cacheHits =
      /* istanbul ignore next */
      (cov_2r6qo9fkxg().s[35]++, this.entries.filter(e => {
        /* istanbul ignore next */
        cov_2r6qo9fkxg().f[4]++;
        cov_2r6qo9fkxg().s[36]++;
        return e.operation === 'memory_cache_hit';
      }).length);
      const totalCacheOps =
      /* istanbul ignore next */
      (cov_2r6qo9fkxg().s[37]++, this.entries.filter(e => {
        /* istanbul ignore next */
        cov_2r6qo9fkxg().f[5]++;
        cov_2r6qo9fkxg().s[38]++;
        return e.operation.includes('cache_');
      }).length);
      /* istanbul ignore next */
      cov_2r6qo9fkxg().s[39]++;
      this.metrics.memory.cacheHitRate = cacheHits / totalCacheOps;
    } else
    /* istanbul ignore next */
    {
      cov_2r6qo9fkxg().b[4][1]++;
    }
    cov_2r6qo9fkxg().s[40]++;
    if (responseSize) {
      /* istanbul ignore next */
      cov_2r6qo9fkxg().b[6][0]++;
      const totalSizes =
      /* istanbul ignore next */
      (cov_2r6qo9fkxg().s[41]++, this.entries.filter(e => {
        /* istanbul ignore next */
        cov_2r6qo9fkxg().f[6]++;
        cov_2r6qo9fkxg().s[42]++;
        return e.metadata?.responseSize;
      }).reduce((sum, e) => {
        /* istanbul ignore next */
        cov_2r6qo9fkxg().f[7]++;
        cov_2r6qo9fkxg().s[43]++;
        return sum + (
        /* istanbul ignore next */
        (cov_2r6qo9fkxg().b[7][0]++, e.metadata?.responseSize) ||
        /* istanbul ignore next */
        (cov_2r6qo9fkxg().b[7][1]++, 0));
      }, 0));
      const sizeCount =
      /* istanbul ignore next */
      (cov_2r6qo9fkxg().s[44]++, this.entries.filter(e => {
        /* istanbul ignore next */
        cov_2r6qo9fkxg().f[8]++;
        cov_2r6qo9fkxg().s[45]++;
        return e.metadata?.responseSize;
      }).length);
      /* istanbul ignore next */
      cov_2r6qo9fkxg().s[46]++;
      this.metrics.memory.averageResponseSize = totalSizes / sizeCount;
    } else
    /* istanbul ignore next */
    {
      cov_2r6qo9fkxg().b[6][1]++;
    }
    cov_2r6qo9fkxg().s[47]++;
    this.emit('memoryOperationRecorded', entry);
  }
  /** Record coordination operation */
  recordCoordinationOperation(operation, duration, success, metadata) {
    /* istanbul ignore next */
    cov_2r6qo9fkxg().f[9]++;
    const entry =
    /* istanbul ignore next */
    (cov_2r6qo9fkxg().s[48]++, {
      timestamp: Date.now(),
      operation: `coordination_${operation}`,
      duration,
      success,
      metadata
    });
    /* istanbul ignore next */
    cov_2r6qo9fkxg().s[49]++;
    this.entries.push(entry);
    /* istanbul ignore next */
    cov_2r6qo9fkxg().s[50]++;
    this.coordinationTimes.push(duration);
    /* istanbul ignore next */
    cov_2r6qo9fkxg().s[51]++;
    switch (operation) {
      case 'swarm_init':
        /* istanbul ignore next */
        cov_2r6qo9fkxg().b[8][0]++;
        cov_2r6qo9fkxg().s[52]++;
        this.metrics.coordination.swarmOperations++;
        /* istanbul ignore next */
        cov_2r6qo9fkxg().s[53]++;
        break;
      case 'agent_spawn':
        /* istanbul ignore next */
        cov_2r6qo9fkxg().b[8][1]++;
        cov_2r6qo9fkxg().s[54]++;
        this.metrics.coordination.agentSpawns++;
        /* istanbul ignore next */
        cov_2r6qo9fkxg().s[55]++;
        break;
      case 'task_orchestrate':
        /* istanbul ignore next */
        cov_2r6qo9fkxg().b[8][2]++;
        cov_2r6qo9fkxg().s[56]++;
        this.metrics.coordination.taskOrchestrations++;
        /* istanbul ignore next */
        cov_2r6qo9fkxg().s[57]++;
        break;
    }
    // Calculate coordination overhead
    const avgCoordination =
    /* istanbul ignore next */
    (cov_2r6qo9fkxg().s[58]++, this.coordinationTimes.reduce((a, b) => {
      /* istanbul ignore next */
      cov_2r6qo9fkxg().f[10]++;
      cov_2r6qo9fkxg().s[59]++;
      return a + b;
    }, 0) / this.coordinationTimes.length);
    /* istanbul ignore next */
    cov_2r6qo9fkxg().s[60]++;
    this.metrics.coordination.coordinationOverhead = avgCoordination;
    /* istanbul ignore next */
    cov_2r6qo9fkxg().s[61]++;
    this.emit('coordinationOperationRecorded', entry);
  }
  /** Record neural operation */
  recordNeuralOperation(operation, duration, success, accuracy, metadata) {
    /* istanbul ignore next */
    cov_2r6qo9fkxg().f[11]++;
    const entry =
    /* istanbul ignore next */
    (cov_2r6qo9fkxg().s[62]++, {
      timestamp: Date.now(),
      operation: `neural_${operation}`,
      duration,
      success,
      metadata: {
        accuracy,
        ...metadata
      }
    });
    /* istanbul ignore next */
    cov_2r6qo9fkxg().s[63]++;
    this.entries.push(entry);
    /* istanbul ignore next */
    cov_2r6qo9fkxg().s[64]++;
    switch (operation) {
      case 'prediction':
        /* istanbul ignore next */
        cov_2r6qo9fkxg().b[9][0]++;
        cov_2r6qo9fkxg().s[65]++;
        this.metrics.neural.predictions++;
        /* istanbul ignore next */
        cov_2r6qo9fkxg().s[66]++;
        if (accuracy !== undefined) {
          /* istanbul ignore next */
          cov_2r6qo9fkxg().b[10][0]++;
          const totalAccuracy =
          /* istanbul ignore next */
          (cov_2r6qo9fkxg().s[67]++, this.metrics.neural.accuracy * (this.metrics.neural.predictions - 1));
          /* istanbul ignore next */
          cov_2r6qo9fkxg().s[68]++;
          this.metrics.neural.accuracy = (totalAccuracy + accuracy) / this.metrics.neural.predictions;
        } else
        /* istanbul ignore next */
        {
          cov_2r6qo9fkxg().b[10][1]++;
        }
        cov_2r6qo9fkxg().s[69]++;
        break;
      case 'training':
        /* istanbul ignore next */
        cov_2r6qo9fkxg().b[9][1]++;
        cov_2r6qo9fkxg().s[70]++;
        this.metrics.neural.trainings++;
        /* istanbul ignore next */
        cov_2r6qo9fkxg().s[71]++;
        break;
      case 'search':
        /* istanbul ignore next */
        cov_2r6qo9fkxg().b[9][2]++;
        cov_2r6qo9fkxg().s[72]++;
        this.metrics.neural.searchOperations++;
        const currentAvg =
        /* istanbul ignore next */
        (cov_2r6qo9fkxg().s[73]++, this.metrics.neural.averageSearchTime);
        const count =
        /* istanbul ignore next */
        (cov_2r6qo9fkxg().s[74]++, this.metrics.neural.searchOperations);
        /* istanbul ignore next */
        cov_2r6qo9fkxg().s[75]++;
        this.metrics.neural.averageSearchTime = (currentAvg * (count - 1) + duration) / count;
        /* istanbul ignore next */
        cov_2r6qo9fkxg().s[76]++;
        break;
    }
    /* istanbul ignore next */
    cov_2r6qo9fkxg().s[77]++;
    this.emit('neuralOperationRecorded', entry);
  }
  /** Get current metrics snapshot */
  getMetrics() {
    /* istanbul ignore next */
    cov_2r6qo9fkxg().f[12]++;
    cov_2r6qo9fkxg().s[78]++;
    return JSON.parse(JSON.stringify(this.metrics));
  }
  /** Get performance summary */
  getPerformanceSummary() {
    /* istanbul ignore next */
    cov_2r6qo9fkxg().f[13]++;
    const uptime =
    /* istanbul ignore next */
    (cov_2r6qo9fkxg().s[79]++, Date.now() - this.startTime);
    const totalOperations =
    /* istanbul ignore next */
    (cov_2r6qo9fkxg().s[80]++, this.entries.length);
    const successfulOps =
    /* istanbul ignore next */
    (cov_2r6qo9fkxg().s[81]++, this.entries.filter(e => {
      /* istanbul ignore next */
      cov_2r6qo9fkxg().f[14]++;
      cov_2r6qo9fkxg().s[82]++;
      return e.success;
    }).length);
    const successRate =
    /* istanbul ignore next */
    (cov_2r6qo9fkxg().s[83]++, totalOperations > 0 ?
    /* istanbul ignore next */
    (cov_2r6qo9fkxg().b[11][0]++, successfulOps / totalOperations) :
    /* istanbul ignore next */
    (cov_2r6qo9fkxg().b[11][1]++, 0));
    const averageLatency =
    /* istanbul ignore next */
    (cov_2r6qo9fkxg().s[84]++, this.latencyBuffer.length > 0 ?
    /* istanbul ignore next */
    (cov_2r6qo9fkxg().b[12][0]++, this.latencyBuffer.reduce((a, b) => {
      /* istanbul ignore next */
      cov_2r6qo9fkxg().f[15]++;
      cov_2r6qo9fkxg().s[85]++;
      return a + b;
    }, 0) / this.latencyBuffer.length) :
    /* istanbul ignore next */
    (cov_2r6qo9fkxg().b[12][1]++, 0));
    // Calculate bottlenecks
    const operationStats =
    /* istanbul ignore next */
    (cov_2r6qo9fkxg().s[86]++, new Map());
    /* istanbul ignore next */
    cov_2r6qo9fkxg().s[87]++;
    for (const entry of this.entries) {
      const current =
      /* istanbul ignore next */
      (cov_2r6qo9fkxg().s[88]++,
      /* istanbul ignore next */
      (cov_2r6qo9fkxg().b[13][0]++, operationStats.get(entry.operation)) ||
      /* istanbul ignore next */
      (cov_2r6qo9fkxg().b[13][1]++, {
        total: 0,
        count: 0
      }));
      /* istanbul ignore next */
      cov_2r6qo9fkxg().s[89]++;
      current.total += entry.duration;
      /* istanbul ignore next */
      cov_2r6qo9fkxg().s[90]++;
      current.count++;
      /* istanbul ignore next */
      cov_2r6qo9fkxg().s[91]++;
      operationStats.set(entry.operation, current);
    }
    const topBottlenecks =
    /* istanbul ignore next */
    (cov_2r6qo9fkxg().s[92]++, Array.from(operationStats.entries()).map(([operation, stats]) => {
      /* istanbul ignore next */
      cov_2r6qo9fkxg().f[16]++;
      cov_2r6qo9fkxg().s[93]++;
      return {
        operation,
        averageTime: stats.total / stats.count,
        count: stats.count
      };
    }).sort((a, b) => {
      /* istanbul ignore next */
      cov_2r6qo9fkxg().f[17]++;
      cov_2r6qo9fkxg().s[94]++;
      return b.averageTime - a.averageTime;
    }).slice(0, 5));
    /* istanbul ignore next */
    cov_2r6qo9fkxg().s[95]++;
    return {
      uptime,
      totalOperations,
      averageLatency,
      successRate,
      topBottlenecks
    };
  }
  /** Get optimization recommendations */
  getOptimizationRecommendations() {
    /* istanbul ignore next */
    cov_2r6qo9fkxg().f[18]++;
    const recommendations =
    /* istanbul ignore next */
    (cov_2r6qo9fkxg().s[96]++, []);
    // Check latency issues
    /* istanbul ignore next */
    cov_2r6qo9fkxg().s[97]++;
    if (this.metrics.requests.averageLatency > 1000) {
      /* istanbul ignore next */
      cov_2r6qo9fkxg().b[14][0]++;
      cov_2r6qo9fkxg().s[98]++;
      recommendations.push({
        category: 'Performance',
        issue: 'High average request latency',
        recommendation: 'Consider implementing request caching or optimizing tool execution',
        priority: 'high'
      });
    } else
    /* istanbul ignore next */
    {
      cov_2r6qo9fkxg().b[14][1]++;
    }
    // Check error rates
    const errorRate =
    /* istanbul ignore next */
    (cov_2r6qo9fkxg().s[99]++, this.metrics.requests.failed / this.metrics.requests.total);
    /* istanbul ignore next */
    cov_2r6qo9fkxg().s[100]++;
    if (errorRate > 0.05) {
      /* istanbul ignore next */
      cov_2r6qo9fkxg().b[15][0]++;
      cov_2r6qo9fkxg().s[101]++;
      recommendations.push({
        category: 'Reliability',
        issue: 'High error rate detected',
        recommendation: 'Review error logs and implement better error handling',
        priority: 'high'
      });
    } else
    /* istanbul ignore next */
    {
      cov_2r6qo9fkxg().b[15][1]++;
    }
    // Check memory efficiency
    cov_2r6qo9fkxg().s[102]++;
    if (this.metrics.memory.cacheHitRate < 0.7) {
      /* istanbul ignore next */
      cov_2r6qo9fkxg().b[16][0]++;
      cov_2r6qo9fkxg().s[103]++;
      recommendations.push({
        category: 'Memory',
        issue: 'Low cache hit rate',
        recommendation: 'Optimize caching strategy or increase cache size',
        priority: 'medium'
      });
    } else
    /* istanbul ignore next */
    {
      cov_2r6qo9fkxg().b[16][1]++;
    }
    // Check coordination overhead
    cov_2r6qo9fkxg().s[104]++;
    if (this.metrics.coordination.coordinationOverhead > 500) {
      /* istanbul ignore next */
      cov_2r6qo9fkxg().b[17][0]++;
      cov_2r6qo9fkxg().s[105]++;
      recommendations.push({
        category: 'Coordination',
        issue: 'High coordination overhead',
        recommendation: 'Consider batch operations or optimize agent communication',
        priority: 'medium'
      });
    } else
    /* istanbul ignore next */
    {
      cov_2r6qo9fkxg().b[17][1]++;
    }
    cov_2r6qo9fkxg().s[106]++;
    return recommendations;
  }
  /** Update latency percentiles */
  updateLatencyMetrics() {
    /* istanbul ignore next */
    cov_2r6qo9fkxg().f[19]++;
    cov_2r6qo9fkxg().s[107]++;
    if (this.latencyBuffer.length === 0) {
      /* istanbul ignore next */
      cov_2r6qo9fkxg().b[18][0]++;
      cov_2r6qo9fkxg().s[108]++;
      return;
    } else
    /* istanbul ignore next */
    {
      cov_2r6qo9fkxg().b[18][1]++;
    }
    const sorted =
    /* istanbul ignore next */
    (cov_2r6qo9fkxg().s[109]++, [...this.latencyBuffer].sort((a, b) => {
      /* istanbul ignore next */
      cov_2r6qo9fkxg().f[20]++;
      cov_2r6qo9fkxg().s[110]++;
      return a - b;
    }));
    const len =
    /* istanbul ignore next */
    (cov_2r6qo9fkxg().s[111]++, sorted.length);
    /* istanbul ignore next */
    cov_2r6qo9fkxg().s[112]++;
    this.metrics.requests.averageLatency = sorted.reduce((a, b) => {
      /* istanbul ignore next */
      cov_2r6qo9fkxg().f[21]++;
      cov_2r6qo9fkxg().s[113]++;
      return a + b;
    }, 0) / len;
    /* istanbul ignore next */
    cov_2r6qo9fkxg().s[114]++;
    this.metrics.requests.p95Latency =
    /* istanbul ignore next */
    (cov_2r6qo9fkxg().b[19][0]++, sorted[Math.floor(len * 0.95)]) ||
    /* istanbul ignore next */
    (cov_2r6qo9fkxg().b[19][1]++, 0);
    /* istanbul ignore next */
    cov_2r6qo9fkxg().s[115]++;
    this.metrics.requests.p99Latency =
    /* istanbul ignore next */
    (cov_2r6qo9fkxg().b[20][0]++, sorted[Math.floor(len * 0.99)]) ||
    /* istanbul ignore next */
    (cov_2r6qo9fkxg().b[20][1]++, 0);
  }
  /** Update most used tools */
  updateMostUsedTools() {
    /* istanbul ignore next */
    cov_2r6qo9fkxg().f[22]++;
    const sortedTools =
    /* istanbul ignore next */
    (cov_2r6qo9fkxg().s[116]++, Array.from(this.toolUsage.entries()).sort(([, a], [, b]) => {
      /* istanbul ignore next */
      cov_2r6qo9fkxg().f[23]++;
      cov_2r6qo9fkxg().s[117]++;
      return b - a;
    }).slice(0, 5).map(([tool]) => {
      /* istanbul ignore next */
      cov_2r6qo9fkxg().f[24]++;
      cov_2r6qo9fkxg().s[118]++;
      return tool;
    }));
    /* istanbul ignore next */
    cov_2r6qo9fkxg().s[119]++;
    this.metrics.tools.mostUsed = sortedTools;
  }
  /** Export metrics to JSON */
  exportMetrics() {
    /* istanbul ignore next */
    cov_2r6qo9fkxg().f[25]++;
    cov_2r6qo9fkxg().s[120]++;
    return JSON.stringify({
      timestamp: Date.now(),
      metrics: this.getMetrics(),
      summary: this.getPerformanceSummary(),
      recommendations: this.getOptimizationRecommendations()
    }, null, 2);
  }
  /** Reset all metrics */
  reset() {
    /* istanbul ignore next */
    cov_2r6qo9fkxg().f[26]++;
    cov_2r6qo9fkxg().s[121]++;
    this.entries = [];
    /* istanbul ignore next */
    cov_2r6qo9fkxg().s[122]++;
    this.latencyBuffer = [];
    /* istanbul ignore next */
    cov_2r6qo9fkxg().s[123]++;
    this.coordinationTimes = [];
    /* istanbul ignore next */
    cov_2r6qo9fkxg().s[124]++;
    this.toolUsage.clear();
    /* istanbul ignore next */
    cov_2r6qo9fkxg().s[125]++;
    this.startTime = Date.now();
    // Reset metrics to initial state
    /* istanbul ignore next */
    cov_2r6qo9fkxg().s[126]++;
    this.metrics = {
      requests: {
        total: 0,
        successful: 0,
        failed: 0,
        averageLatency: 0,
        p95Latency: 0,
        p99Latency: 0
      },
      tools: {
        executions: 0,
        averageExecutionTime: 0,
        successRate: 0,
        mostUsed: [],
        errorRate: 0
      },
      memory: {
        totalOperations: 0,
        cacheHitRate: 0,
        averageResponseSize: 0,
        memoryUsage: 0
      },
      coordination: {
        swarmOperations: 0,
        agentSpawns: 0,
        taskOrchestrations: 0,
        coordinationOverhead: 0
      },
      neural: {
        predictions: 0,
        trainings: 0,
        accuracy: 0,
        searchOperations: 0,
        averageSearchTime: 0
      }
    };
    /* istanbul ignore next */
    cov_2r6qo9fkxg().s[127]++;
    this.emit('metricsReset');
  }
}
export default MCPPerformanceMetrics;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,