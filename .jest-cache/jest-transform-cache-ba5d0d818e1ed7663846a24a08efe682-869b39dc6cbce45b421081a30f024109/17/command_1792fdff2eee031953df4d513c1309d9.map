{"version":3,"names":[],"sources":["/home/mhugo/code/claude-code-flow/src/cli/types/command.ts"],"sourcesContent":["/**\n * Command Type Definitions\n * \n * This module defines the core command interfaces for the CLI system,\n * providing type safety for command execution, configuration, and metadata.\n */\n\n/**\n * Configuration options for a CLI command\n */\nexport interface CommandConfig {\n  /** Command name (e.g., 'status', 'init') */\n  name: string;\n  \n  /** Short description of the command */\n  description: string;\n  \n  /** Detailed usage information */\n  usage?: string;\n  \n  /** Command examples */\n  examples?: string[];\n  \n  /** Command aliases */\n  aliases?: string[];\n  \n  /** Whether command requires plugin initialization */\n  requiresPlugins?: boolean;\n  \n  /** Whether command is deprecated */\n  deprecated?: boolean;\n  \n  /** Deprecation message if applicable */\n  deprecationMessage?: string;\n  \n  /** Command category for grouping in help */\n  category?: 'core' | 'swarm' | 'config' | 'utility' | 'experimental';\n  \n  /** Minimum required arguments */\n  minArgs?: number;\n  \n  /** Maximum allowed arguments */\n  maxArgs?: number;\n  \n  /** Command-specific flags configuration */\n  flags?: Record<string, CommandFlagConfig>;\n}\n\n/**\n * Configuration for individual command flags\n */\nexport interface CommandFlagConfig {\n  /** Flag type */\n  type: 'boolean' | 'string' | 'number';\n  \n  /** Flag description */\n  description: string;\n  \n  /** Default value */\n  default?: unknown;\n  \n  /** Whether flag is required */\n  required?: boolean;\n  \n  /** Flag aliases */\n  aliases?: string[];\n  \n  /** Validation function */\n  validator?: (value: unknown) => boolean | string;\n}\n\n/**\n * Runtime context passed to command handlers\n */\nexport interface CommandContext {\n  /** Parsed command-line arguments */\n  args: string[];\n  \n  /** Parsed command-line flags */\n  flags: CommandFlags;\n  \n  /** Original CLI input */\n  input: string[];\n  \n  /** Plugin manager instance */\n  pluginManager?: unknown;\n  \n  /** CLI package information */\n  pkg: {\n    name: string;\n    version: string;\n    description?: string;\n  };\n  \n  /** Working directory */\n  cwd: string;\n  \n  /** Environment variables */\n  env: Record<string, string | undefined>;\n  \n  /** Debug mode flag */\n  debug: boolean;\n  \n  /** Verbose output flag */\n  verbose: boolean;\n  \n  /** Configuration object */\n  config?: Record<string, unknown>;\n}\n\n/**\n * Command execution result\n */\nexport interface CommandResult {\n  /** Whether command executed successfully */\n  success: boolean;\n  \n  /** Exit code (0 for success, non-zero for failure) */\n  exitCode: number;\n  \n  /** Output message */\n  message?: string;\n  \n  /** Error message if execution failed */\n  error?: string;\n  \n  /** Additional data returned by command */\n  data?: unknown;\n  \n  /** Execution time in milliseconds */\n  executionTime?: number;\n  \n  /** Whether command was cancelled */\n  cancelled?: boolean;\n}\n\n/**\n * Generic command flags interface\n */\nexport interface CommandFlags {\n  /** Show help flag */\n  help?: boolean;\n  \n  /** Help flag alias */\n  h?: boolean;\n  \n  /** Show version flag */\n  version?: boolean;\n  \n  /** Version flag alias */\n  v?: boolean;\n  \n  /** Debug mode flag */\n  debug?: boolean;\n  \n  /** Verbose output flag */\n  verbose?: boolean;\n  \n  /** UI mode flag */\n  ui?: boolean;\n  \n  /** Force operation flag */\n  force?: boolean;\n  \n  /** Quiet mode flag */\n  quiet?: boolean;\n  \n  /** Configuration file path */\n  config?: string;\n  \n  /** Output format */\n  format?: 'json' | 'yaml' | 'table' | 'text';\n  \n  /** Additional dynamic flags */\n  [key: string]: unknown;\n}\n\n/**\n * Command metadata for registration and discovery\n */\nexport interface CommandMetadata {\n  /** Command configuration */\n  config: CommandConfig;\n  \n  /** Command handler function */\n  handler: CommandHandler;\n  \n  /** Registration timestamp */\n  registeredAt: Date;\n  \n  /** Plugin that registered this command */\n  plugin?: string;\n  \n  /** Command execution statistics */\n  stats?: CommandExecutionStats;\n  \n  /** Whether command is currently available */\n  available: boolean;\n  \n  /** Command dependencies */\n  dependencies?: string[];\n}\n\n/**\n * Command handler function signature\n */\nexport type CommandHandler = (\n  context: CommandContext\n) => Promise<CommandResult> | CommandResult;\n\n/**\n * Command execution statistics\n */\nexport interface CommandExecutionStats {\n  /** Total number of executions */\n  executionCount: number;\n  \n  /** Total execution time in milliseconds */\n  totalExecutionTime: number;\n  \n  /** Average execution time in milliseconds */\n  averageExecutionTime: number;\n  \n  /** Number of successful executions */\n  successCount: number;\n  \n  /** Number of failed executions */\n  failureCount: number;\n  \n  /** Last execution timestamp */\n  lastExecuted?: Date;\n  \n  /** Last execution result */\n  lastResult?: CommandResult;\n}\n\n/**\n * Command validation result\n */\nexport interface CommandValidationResult {\n  /** Whether validation passed */\n  valid: boolean;\n  \n  /** Validation errors */\n  errors: string[];\n  \n  /** Validation warnings */\n  warnings: string[];\n}\n\n/**\n * Command registry interface\n */\nexport interface CommandRegistry {\n  /** Register a new command */\n  register(metadata: CommandMetadata): void;\n  \n  /** Unregister a command */\n  unregister(name: string): boolean;\n  \n  /** Get command metadata */\n  get(name: string): CommandMetadata | undefined;\n  \n  /** Check if command exists */\n  has(name: string): boolean;\n  \n  /** List all registered commands */\n  list(): CommandMetadata[];\n  \n  /** Find commands by category */\n  findByCategory(category: string): CommandMetadata[];\n  \n  /** Execute a command */\n  execute(name: string, context: CommandContext): Promise<CommandResult>;\n}"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA","ignoreList":[]}