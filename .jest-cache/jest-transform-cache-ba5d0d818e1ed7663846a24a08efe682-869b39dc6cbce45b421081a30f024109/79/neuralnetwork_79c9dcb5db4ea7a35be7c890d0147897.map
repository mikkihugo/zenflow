{"file":"/home/mhugo/code/claude-code-flow/ruv-FANN-zen/ruv-swarm-zen/npm/src/neural-network.ts","mappings":"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","names":[],"sources":["/home/mhugo/code/claude-code-flow/ruv-FANN-zen/ruv-swarm-zen/npm/src/neural-network.ts"],"sourcesContent":["// neural-network.ts - TypeScript wrapper for WASM neural network functionality\n\nexport interface NetworkConfig {\n  inputSize: number;\n  hiddenLayers: LayerConfig[];\n  outputSize: number;\n  outputActivation: string;\n  connectionRate?: number;\n  randomSeed?: number;\n}\n\nexport interface LayerConfig {\n  size: number;\n  activation: string;\n  steepness?: number;\n}\n\nexport interface TrainingDataConfig {\n  inputs: number[][];\n  outputs: number[][];\n}\n\nexport interface TrainingConfig {\n  algorithm: 'incremental_backprop' | 'batch_backprop' | 'rprop' | 'quickprop' | 'sarprop';\n  learningRate?: number;\n  momentum?: number;\n  maxEpochs: number;\n  targetError: number;\n  validationSplit?: number;\n  earlyStopping?: boolean;\n}\n\nexport interface AgentNetworkConfig {\n  agentId: string;\n  agentType: string;\n  cognitivePattern: 'convergent' | 'divergent' | 'lateral' | 'systems' | 'critical' | 'abstract';\n  inputSize: number;\n  outputSize: number;\n  taskSpecialization?: string[];\n}\n\nexport interface CascadeConfig {\n  maxHiddenNeurons: number;\n  numCandidates: number;\n  outputMaxEpochs: number;\n  candidateMaxEpochs: number;\n  outputLearningRate: number;\n  candidateLearningRate: number;\n  outputTargetError: number;\n  candidateTargetCorrelation: number;\n  minCorrelationImprovement: number;\n  candidateWeightMin: number;\n  candidateWeightMax: number;\n  candidateActivations: string[];\n  verbose: boolean;\n}\n\nexport interface NetworkInfo {\n  numLayers: number;\n  numInputs: number;\n  numOutputs: number;\n  totalNeurons: number;\n  totalConnections: number;\n  metrics: {\n    trainingError: number;\n    validationError: number;\n    epochsTrained: number;\n    totalConnections: number;\n    memoryUsage: number;\n  };\n}\n\nexport interface TrainingResult {\n  converged: boolean;\n  finalError: number;\n  epochs: number;\n  targetError: number;\n}\n\nexport interface CognitiveState {\n  agentId: string;\n  cognitivePattern: any;\n  neuralArchitecture: {\n    layers: number;\n    neurons: number;\n    connections: number;\n  };\n  trainingProgress: {\n    epochsTrained: number;\n    currentLoss: number;\n    bestLoss: number;\n    isTraining: boolean;\n  };\n  performance: any;\n  adaptationHistoryLength: number;\n}\n\nlet wasmModule: any = null;\n\nexport async function initializeNeuralWasm() {\n  if (wasmModule) return wasmModule;\n  \n  try {\n    // Dynamic import of WASM module\n    const { default: init, ...exports } = await import('../wasm/ruv_swarm_wasm.js');\n    await init();\n    wasmModule = exports;\n    return wasmModule;\n  } catch (error) {\n    throw new Error(`Failed to initialize WASM neural module: ${error}`);\n  }\n}\n\nexport class NeuralNetwork {\n  private network: any;\n  \n  constructor(private wasm: any, config: NetworkConfig) {\n    this.network = new wasm.WasmNeuralNetwork(config);\n  }\n  \n  async run(inputs: number[]): Promise<number[]> {\n    return this.network.run(new Float32Array(inputs));\n  }\n  \n  getWeights(): Float32Array {\n    return this.network.get_weights();\n  }\n  \n  setWeights(weights: Float32Array): void {\n    this.network.set_weights(weights);\n  }\n  \n  getInfo(): NetworkInfo {\n    return this.network.get_network_info();\n  }\n  \n  setTrainingData(data: TrainingDataConfig): void {\n    this.network.set_training_data(data);\n  }\n  \n  // Getter method to access the internal network for training\n  getInternalNetwork(): any {\n    return this.network;\n  }\n}\n\nexport class NeuralTrainer {\n  private trainer: any;\n  \n  constructor(private wasm: any, config: TrainingConfig) {\n    this.trainer = new wasm.WasmTrainer(config);\n  }\n  \n  async trainEpoch(network: NeuralNetwork, data: TrainingDataConfig): Promise<number> {\n    return this.trainer.train_epoch(network.getInternalNetwork(), data);\n  }\n  \n  async trainUntilTarget(\n    network: NeuralNetwork,\n    data: TrainingDataConfig,\n    targetError: number,\n    maxEpochs: number,\n  ): Promise<TrainingResult> {\n    return this.trainer.train_until_target(network.getInternalNetwork(), data, targetError, maxEpochs);\n  }\n  \n  getTrainingHistory(): any[] {\n    return this.trainer.get_training_history();\n  }\n  \n  getAlgorithmInfo(): any {\n    return this.trainer.get_algorithm_info();\n  }\n}\n\nexport class AgentNeuralManager {\n  private manager: any;\n  \n  constructor(private wasm: any) {\n    this.manager = new wasm.AgentNeuralNetworkManager();\n  }\n  \n  async createAgentNetwork(config: AgentNetworkConfig): Promise<string> {\n    return this.manager.create_agent_network(config);\n  }\n  \n  async trainAgentNetwork(agentId: string, data: TrainingDataConfig): Promise<any> {\n    return this.manager.train_agent_network(agentId, data);\n  }\n  \n  async getAgentInference(agentId: string, inputs: number[]): Promise<number[]> {\n    return this.manager.get_agent_inference(agentId, new Float32Array(inputs));\n  }\n  \n  async getAgentCognitiveState(agentId: string): Promise<CognitiveState> {\n    return this.manager.get_agent_cognitive_state(agentId);\n  }\n  \n  async fineTuneDuringExecution(agentId: string, experienceData: any): Promise<any> {\n    return this.manager.fine_tune_during_execution(agentId, experienceData);\n  }\n}\n\nexport class ActivationFunctions {\n  static async getAll(wasm: any): Promise<[string, string][]> {\n    return wasm.ActivationFunctionManager.get_all_functions();\n  }\n  \n  static async test(wasm: any, name: string, input: number, steepness: number = 1.0): Promise<number> {\n    return wasm.ActivationFunctionManager.test_activation_function(name, input, steepness);\n  }\n  \n  static async compare(wasm: any, input: number): Promise<Record<string, number>> {\n    return wasm.ActivationFunctionManager.compare_functions(input);\n  }\n  \n  static async getProperties(wasm: any, name: string): Promise<any> {\n    return wasm.ActivationFunctionManager.get_function_properties(name);\n  }\n}\n\nexport class CascadeTrainer {\n  private trainer: any;\n  \n  constructor(private wasm: any, config: CascadeConfig | null, network: NeuralNetwork, data: TrainingDataConfig) {\n    this.trainer = new wasm.WasmCascadeTrainer(config || this.getDefaultConfig(), network.getInternalNetwork(), data);\n  }\n  \n  async train(): Promise<any> {\n    return this.trainer.train();\n  }\n  \n  getConfig(): any {\n    return this.trainer.get_config();\n  }\n  \n  static getDefaultConfig(wasm: any): CascadeConfig {\n    return wasm.WasmCascadeTrainer.create_default_config();\n  }\n  \n  private getDefaultConfig(): CascadeConfig {\n    return CascadeTrainer.getDefaultConfig(this.wasm);\n  }\n}\n\n// High-level helper functions\nexport async function createNeuralNetwork(config: NetworkConfig): Promise<NeuralNetwork> {\n  const wasm = await initializeNeuralWasm();\n  return new NeuralNetwork(wasm, config);\n}\n\nexport async function createTrainer(config: TrainingConfig): Promise<NeuralTrainer> {\n  const wasm = await initializeNeuralWasm();\n  return new NeuralTrainer(wasm, config);\n}\n\nexport async function createAgentNeuralManager(): Promise<AgentNeuralManager> {\n  const wasm = await initializeNeuralWasm();\n  return new AgentNeuralManager(wasm);\n}\n\n// Export activation function names for convenience\nexport const ACTIVATION_FUNCTIONS = {\n  LINEAR: 'linear',\n  SIGMOID: 'sigmoid',\n  SIGMOID_SYMMETRIC: 'sigmoid_symmetric',\n  TANH: 'tanh',\n  GAUSSIAN: 'gaussian',\n  GAUSSIAN_SYMMETRIC: 'gaussian_symmetric',\n  ELLIOT: 'elliot',\n  ELLIOT_SYMMETRIC: 'elliot_symmetric',\n  RELU: 'relu',\n  RELU_LEAKY: 'relu_leaky',\n  COS: 'cos',\n  COS_SYMMETRIC: 'cos_symmetric',\n  SIN: 'sin',\n  SIN_SYMMETRIC: 'sin_symmetric',\n  THRESHOLD: 'threshold',\n  THRESHOLD_SYMMETRIC: 'threshold_symmetric',\n  LINEAR_PIECE: 'linear_piece',\n  LINEAR_PIECE_SYMMETRIC: 'linear_piece_symmetric',\n} as const;\n\n// Export training algorithm names\nexport const TRAINING_ALGORITHMS = {\n  INCREMENTAL_BACKPROP: 'incremental_backprop',\n  BATCH_BACKPROP: 'batch_backprop',\n  RPROP: 'rprop',\n  QUICKPROP: 'quickprop',\n  SARPROP: 'sarprop',\n} as const;\n\n// Export cognitive patterns\nexport const COGNITIVE_PATTERNS = {\n  CONVERGENT: 'convergent',\n  DIVERGENT: 'divergent',\n  LATERAL: 'lateral',\n  SYSTEMS: 'systems',\n  CRITICAL: 'critical',\n  ABSTRACT: 'abstract',\n} as const;"],"version":3}