1982e8c5c5351f51cf08020ddd5075e5
/* istanbul ignore next */
function cov_z0kfhebga() {
  var path = "/home/mhugo/code/claude-code-flow/src/mcp/core/message-handler.ts";
  var hash = "fb33da55627d8a7401b7a8f7c2c7b0ff0388289f";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/home/mhugo/code/claude-code-flow/src/mcp/core/message-handler.ts",
    statementMap: {
      "0": {
        start: {
          line: 9,
          column: 8
        },
        end: {
          line: 9,
          column: 31
        }
      },
      "1": {
        start: {
          line: 13,
          column: 8
        },
        end: {
          line: 13,
          column: 56
        }
      },
      "2": {
        start: {
          line: 14,
          column: 8
        },
        end: {
          line: 14,
          column: 48
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 8,
            column: 4
          },
          end: {
            line: 8,
            column: 5
          }
        },
        loc: {
          start: {
            line: 8,
            column: 30
          },
          end: {
            line: 10,
            column: 5
          }
        },
        line: 8
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 12,
            column: 4
          },
          end: {
            line: 12,
            column: 5
          }
        },
        loc: {
          start: {
            line: 12,
            column: 27
          },
          end: {
            line: 15,
            column: 5
          }
        },
        line: 12
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 8,
            column: 16
          },
          end: {
            line: 8,
            column: 28
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 8,
            column: 26
          },
          end: {
            line: 8,
            column: 28
          }
        }],
        line: 8
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0
    },
    f: {
      "0": 0,
      "1": 0
    },
    b: {
      "0": [0]
    },
    inputSourceMap: {
      file: "/home/mhugo/code/claude-code-flow/src/mcp/core/message-handler.ts",
      mappings: "AAAA;;;;GAIG;AAEH,0DAA0D;AAC1D,MAAM,OAAO,iBAAiB;IAC5B,YAAY,OAAO,GAAG,EAAE;QACtB,IAAI,CAAC,OAAO,GAAG,OAAO,CAAC;IACzB,CAAC;IAED,kDAAkD;IAClD,aAAa,CAAC,OAAO;QACnB,OAAO,CAAC,GAAG,CAAC,yBAAyB,EAAE,OAAO,CAAC,CAAC;QAChD,OAAO,EAAE,OAAO,EAAE,IAAI,EAAE,IAAI,EAAE,OAAO,EAAE,CAAC;IAC1C,CAAC;CACF;AAED,eAAe,iBAAiB,CAAC",
      names: [],
      sources: ["/home/mhugo/code/claude-code-flow/src/mcp/core/message-handler.ts"],
      sourcesContent: ["/**\n * @fileoverview MCP Message Handler\n * Handles MCP protocol message routing and processing\n * @module MCPMessageHandler\n */\n\n/** Handles MCP protocol message routing and processing */\nexport class MCPMessageHandler {\n  constructor(options = {}) {\n    this.options = options;\n  }\n\n  // Placeholder for message handling implementation\n  handleMessage(message) {\n    console.log('Processing MCP message:', message);\n    return { success: true, data: message };\n  }\n}\n\nexport default MCPMessageHandler;"],
      version: 3
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "fb33da55627d8a7401b7a8f7c2c7b0ff0388289f"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_z0kfhebga = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_z0kfhebga();
/**
 * @fileoverview MCP Message Handler
 * Handles MCP protocol message routing and processing
 * @module MCPMessageHandler
 */
/** Handles MCP protocol message routing and processing */
export class MCPMessageHandler {
  constructor(options =
  /* istanbul ignore next */
  (cov_z0kfhebga().b[0][0]++, {})) {
    /* istanbul ignore next */
    cov_z0kfhebga().f[0]++;
    cov_z0kfhebga().s[0]++;
    this.options = options;
  }
  // Placeholder for message handling implementation
  handleMessage(message) {
    /* istanbul ignore next */
    cov_z0kfhebga().f[1]++;
    cov_z0kfhebga().s[1]++;
    console.log('Processing MCP message:', message);
    /* istanbul ignore next */
    cov_z0kfhebga().s[2]++;
    return {
      success: true,
      data: message
    };
  }
}
export default MCPMessageHandler;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJjb3ZfejBrZmhlYmdhIiwiYWN0dWFsQ292ZXJhZ2UiLCJNQ1BNZXNzYWdlSGFuZGxlciIsImNvbnN0cnVjdG9yIiwib3B0aW9ucyIsImIiLCJmIiwicyIsImhhbmRsZU1lc3NhZ2UiLCJtZXNzYWdlIiwiY29uc29sZSIsImxvZyIsInN1Y2Nlc3MiLCJkYXRhIl0sInNvdXJjZXMiOlsiL2hvbWUvbWh1Z28vY29kZS9jbGF1ZGUtY29kZS1mbG93L3NyYy9tY3AvY29yZS9tZXNzYWdlLWhhbmRsZXIudHMiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAZmlsZW92ZXJ2aWV3IE1DUCBNZXNzYWdlIEhhbmRsZXJcbiAqIEhhbmRsZXMgTUNQIHByb3RvY29sIG1lc3NhZ2Ugcm91dGluZyBhbmQgcHJvY2Vzc2luZ1xuICogQG1vZHVsZSBNQ1BNZXNzYWdlSGFuZGxlclxuICovXG5cbi8qKiBIYW5kbGVzIE1DUCBwcm90b2NvbCBtZXNzYWdlIHJvdXRpbmcgYW5kIHByb2Nlc3NpbmcgKi9cbmV4cG9ydCBjbGFzcyBNQ1BNZXNzYWdlSGFuZGxlciB7XG4gIGNvbnN0cnVjdG9yKG9wdGlvbnMgPSB7fSkge1xuICAgIHRoaXMub3B0aW9ucyA9IG9wdGlvbnM7XG4gIH1cblxuICAvLyBQbGFjZWhvbGRlciBmb3IgbWVzc2FnZSBoYW5kbGluZyBpbXBsZW1lbnRhdGlvblxuICBoYW5kbGVNZXNzYWdlKG1lc3NhZ2UpIHtcbiAgICBjb25zb2xlLmxvZygnUHJvY2Vzc2luZyBNQ1AgbWVzc2FnZTonLCBtZXNzYWdlKTtcbiAgICByZXR1cm4geyBzdWNjZXNzOiB0cnVlLCBkYXRhOiBtZXNzYWdlIH07XG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgTUNQTWVzc2FnZUhhbmRsZXI7Il0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0lBaUJDO0lBQUFBLGFBQUEsWUFBQUEsQ0FBQTtNQUFBLE9BQUFDLGNBQUE7SUFBQTtFQUFBO0VBQUEsT0FBQUEsY0FBQTtBQUFBO0FBQUFELGFBQUE7QUFqQkQ7Ozs7O0FBTUE7QUFDQSxPQUFNLE1BQU9FLGlCQUFpQjtFQUM1QkMsWUFBWUMsT0FBTztFQUFBO0VBQUEsQ0FBQUosYUFBQSxHQUFBSyxDQUFBLFVBQUcsRUFBRTtJQUFBO0lBQUFMLGFBQUEsR0FBQU0sQ0FBQTtJQUFBTixhQUFBLEdBQUFPLENBQUE7SUFDdEIsSUFBSSxDQUFDSCxPQUFPLEdBQUdBLE9BQU87RUFDeEI7RUFFQTtFQUNBSSxhQUFhQSxDQUFDQyxPQUFPO0lBQUE7SUFBQVQsYUFBQSxHQUFBTSxDQUFBO0lBQUFOLGFBQUEsR0FBQU8sQ0FBQTtJQUNuQkcsT0FBTyxDQUFDQyxHQUFHLENBQUMseUJBQXlCLEVBQUVGLE9BQU8sQ0FBQztJQUFDO0lBQUFULGFBQUEsR0FBQU8sQ0FBQTtJQUNoRCxPQUFPO01BQUVLLE9BQU8sRUFBRSxJQUFJO01BQUVDLElBQUksRUFBRUo7SUFBTyxDQUFFO0VBQ3pDOztBQUdGLGVBQWVQLGlCQUFpQiIsImlnbm9yZUxpc3QiOltdfQ==