{"file":"/home/mhugo/code/claude-code-flow/src/__tests__/unit/london/cli-commands/error-handler.test.ts","mappings":"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","names":[],"sources":["/home/mhugo/code/claude-code-flow/src/__tests__/unit/london/cli-commands/error-handler.test.ts"],"sourcesContent":["/**\n * Error Handler Tests - TDD London School\n * \n * Tests the behavior of error handling functionality using mocks\n * and interaction-based testing. Focuses on how the error handler\n * collaborates with logging, formatting, and recovery systems.\n */\n\nimport { jest } from '@jest/globals';\n\n// Mock error handler interface for testing interactions\ninterface ErrorHandler {\n  handle(error: Error, context?: ErrorContext): Promise<ErrorResult>;\n  register(type: string, handler: ErrorHandlerFunction): void;\n  setDefaults(defaults: ErrorHandlerDefaults): void;\n  addRecoveryStrategy(strategy: RecoveryStrategy): void;\n  getMetrics(): ErrorMetrics;\n}\n\ninterface ErrorContext {\n  command?: string;\n  args?: string[];\n  flags?: Record<string, unknown>;\n  user?: string;\n  session?: string;\n  timestamp?: Date;\n  severity?: 'low' | 'medium' | 'high' | 'critical';\n}\n\ninterface ErrorResult {\n  handled: boolean;\n  recovered: boolean;\n  exitCode: number;\n  message: string;\n  suggestion?: string;\n  retryable: boolean;\n  logged: boolean;\n}\n\ninterface ErrorHandlerDefaults {\n  exitOnError?: boolean;\n  logErrors?: boolean;\n  showStack?: boolean;\n  colorOutput?: boolean;\n  verboseErrors?: boolean;\n}\n\ninterface ErrorMetrics {\n  totalErrors: number;\n  errorsByType: Record<string, number>;\n  recoveredErrors: number;\n  fatalErrors: number;\n  averageHandlingTime: number;\n}\n\ntype ErrorHandlerFunction = (error: Error, context?: ErrorContext) => Promise<ErrorResult> | ErrorResult;\n\ninterface RecoveryStrategy {\n  name: string;\n  canRecover: (error: Error, context?: ErrorContext) => boolean;\n  recover: (error: Error, context?: ErrorContext) => Promise<boolean>;\n  priority: number;\n}\n\n// Mock logger interface\ninterface MockLogger {\n  error: jest.Mock;\n  warn: jest.Mock;\n  info: jest.Mock;\n  debug: jest.Mock;\n}\n\n// Mock implementation for testing\nclass MockErrorHandler implements ErrorHandler {\n  private handlers = new Map<string, ErrorHandlerFunction>();\n  private recoveryStrategies: RecoveryStrategy[] = [];\n  private defaults: ErrorHandlerDefaults = {};\n  private metrics: ErrorMetrics = {\n    totalErrors: 0,\n    errorsByType: {},\n    recoveredErrors: 0,\n    fatalErrors: 0,\n    averageHandlingTime: 0\n  };\n  private logger: MockLogger;\n  private handleFunction: jest.Mock;\n\n  constructor(handleFunction?: jest.Mock, logger?: MockLogger) {\n    this.handleFunction = handleFunction || jest.fn();\n    this.logger = logger || {\n      error: jest.fn(),\n      warn: jest.fn(),\n      info: jest.fn(),\n      debug: jest.fn()\n    };\n  }\n\n  async handle(error: Error, context?: ErrorContext): Promise<ErrorResult> {\n    const startTime = Date.now();\n    \n    // Update metrics\n    this.metrics.totalErrors++;\n    const errorType = error.constructor.name;\n    this.metrics.errorsByType[errorType] = (this.metrics.errorsByType[errorType] || 0) + 1;\n    \n    // Call mock function for testing\n    const result = await this.handleFunction(error, context);\n    \n    // Update timing metrics\n    const handlingTime = Date.now() - startTime;\n    this.metrics.averageHandlingTime = \n      (this.metrics.averageHandlingTime * (this.metrics.totalErrors - 1) + handlingTime) / this.metrics.totalErrors;\n    \n    if (result.recovered) {\n      this.metrics.recoveredErrors++;\n    } else if (result.exitCode !== 0) {\n      this.metrics.fatalErrors++;\n    }\n    \n    return result;\n  }\n\n  register(type: string, handler: ErrorHandlerFunction): void {\n    this.handlers.set(type, handler);\n  }\n\n  setDefaults(defaults: ErrorHandlerDefaults): void {\n    this.defaults = { ...this.defaults, ...defaults };\n  }\n\n  addRecoveryStrategy(strategy: RecoveryStrategy): void {\n    // Insert strategy in priority order\n    const index = this.recoveryStrategies.findIndex(s => s.priority < strategy.priority);\n    if (index === -1) {\n      this.recoveryStrategies.push(strategy);\n    } else {\n      this.recoveryStrategies.splice(index, 0, strategy);\n    }\n  }\n\n  getMetrics(): ErrorMetrics {\n    return { ...this.metrics };\n  }\n\n  // Test helpers\n  getHandler(type: string): ErrorHandlerFunction | undefined {\n    return this.handlers.get(type);\n  }\n\n  getDefaults(): ErrorHandlerDefaults {\n    return { ...this.defaults };\n  }\n\n  getRecoveryStrategies(): RecoveryStrategy[] {\n    return [...this.recoveryStrategies];\n  }\n\n  getLogger(): MockLogger {\n    return this.logger;\n  }\n}\n\n// Custom error types for testing\nclass ValidationError extends Error {\n  constructor(message: string, public field?: string) {\n    super(message);\n    this.name = 'ValidationError';\n  }\n}\n\nclass NetworkError extends Error {\n  constructor(message: string, public statusCode?: number) {\n    super(message);\n    this.name = 'NetworkError';\n  }\n}\n\nclass CommandNotFoundError extends Error {\n  constructor(command: string) {\n    super(`Command '${command}' not found`);\n    this.name = 'CommandNotFoundError';\n  }\n}\n\ndescribe('ErrorHandler - TDD London', () => {\n  let errorHandler: MockErrorHandler;\n  let mockHandleFunction: jest.Mock;\n  let mockLogger: MockLogger;\n\n  beforeEach(() => {\n    mockHandleFunction = jest.fn();\n    mockLogger = {\n      error: jest.fn(),\n      warn: jest.fn(),\n      info: jest.fn(),\n      debug: jest.fn()\n    };\n    errorHandler = new MockErrorHandler(mockHandleFunction, mockLogger);\n  });\n\n  describe('basic error handling behavior', () => {\n    it('should handle error and return result', async () => {\n      // Arrange\n      const error = new Error('Test error');\n      const context: ErrorContext = {\n        command: 'test-command',\n        severity: 'medium'\n      };\n      const expectedResult: ErrorResult = {\n        handled: true,\n        recovered: false,\n        exitCode: 1,\n        message: 'Test error handled',\n        retryable: false,\n        logged: true\n      };\n      mockHandleFunction.mockResolvedValue(expectedResult);\n\n      // Act\n      const result = await errorHandler.handle(error, context);\n\n      // Assert - verify error handling behavior\n      expect(mockHandleFunction).toHaveBeenCalledWith(error, context);\n      expect(result).toEqual(expectedResult);\n    });\n\n    it('should update metrics when handling errors', async () => {\n      // Arrange\n      const error1 = new ValidationError('Validation failed');\n      const error2 = new NetworkError('Network timeout');\n      const error3 = new ValidationError('Another validation error');\n\n      mockHandleFunction.mockImplementation(async () => {\n        // Add small delay to simulate processing time\n        await new Promise(resolve => setTimeout(resolve, 1));\n        return {\n          handled: true,\n          recovered: false,\n          exitCode: 1,\n          message: 'Error handled',\n          retryable: false,\n          logged: true\n        };\n      });\n\n      // Act\n      await errorHandler.handle(error1);\n      await errorHandler.handle(error2);\n      await errorHandler.handle(error3);\n\n      // Assert - verify metrics tracking behavior\n      const metrics = errorHandler.getMetrics();\n      expect(metrics.totalErrors).toBe(3);\n      expect(metrics.errorsByType.ValidationError).toBe(2);\n      expect(metrics.errorsByType.NetworkError).toBe(1);\n      expect(metrics.averageHandlingTime).toBeGreaterThan(0);\n    });\n\n    it('should track recovery metrics correctly', async () => {\n      // Arrange\n      const recoverableError = new NetworkError('Timeout');\n      const fatalError = new Error('Fatal error');\n\n      mockHandleFunction\n        .mockResolvedValueOnce({\n          handled: true,\n          recovered: true,\n          exitCode: 0,\n          message: 'Recovered from timeout',\n          retryable: true,\n          logged: true\n        })\n        .mockResolvedValueOnce({\n          handled: true,\n          recovered: false,\n          exitCode: 1,\n          message: 'Fatal error occurred',\n          retryable: false,\n          logged: true\n        });\n\n      // Act\n      await errorHandler.handle(recoverableError);\n      await errorHandler.handle(fatalError);\n\n      // Assert - verify recovery metrics\n      const metrics = errorHandler.getMetrics();\n      expect(metrics.recoveredErrors).toBe(1);\n      expect(metrics.fatalErrors).toBe(1);\n    });\n  });\n\n  describe('error handler registration behavior', () => {\n    it('should register custom error handlers for specific types', () => {\n      // Arrange\n      const validationHandler: ErrorHandlerFunction = jest.fn().mockReturnValue({\n        handled: true,\n        recovered: true,\n        exitCode: 0,\n        message: 'Validation error recovered',\n        retryable: true,\n        logged: false\n      });\n\n      // Act\n      errorHandler.register('ValidationError', validationHandler);\n\n      // Assert - verify handler registration\n      expect(errorHandler.getHandler('ValidationError')).toBe(validationHandler);\n    });\n\n    it('should allow multiple handlers for different error types', () => {\n      // Arrange\n      const validationHandler = jest.fn();\n      const networkHandler = jest.fn();\n      const genericHandler = jest.fn();\n\n      // Act\n      errorHandler.register('ValidationError', validationHandler);\n      errorHandler.register('NetworkError', networkHandler);\n      errorHandler.register('Error', genericHandler);\n\n      // Assert - verify multiple handler registration\n      expect(errorHandler.getHandler('ValidationError')).toBe(validationHandler);\n      expect(errorHandler.getHandler('NetworkError')).toBe(networkHandler);\n      expect(errorHandler.getHandler('Error')).toBe(genericHandler);\n    });\n  });\n\n  describe('defaults configuration behavior', () => {\n    it('should apply default error handling configuration', () => {\n      // Arrange\n      const defaults: ErrorHandlerDefaults = {\n        exitOnError: false,\n        logErrors: true,\n        showStack: true,\n        colorOutput: false,\n        verboseErrors: true\n      };\n\n      // Act\n      errorHandler.setDefaults(defaults);\n\n      // Assert - verify defaults application\n      expect(errorHandler.getDefaults()).toEqual(defaults);\n    });\n\n    it('should merge defaults with existing configuration', () => {\n      // Arrange\n      errorHandler.setDefaults({ logErrors: true, showStack: false });\n      errorHandler.setDefaults({ colorOutput: true }); // Additional defaults\n\n      // Act\n      const appliedDefaults = errorHandler.getDefaults();\n\n      // Assert - verify defaults merging\n      expect(appliedDefaults).toEqual({\n        logErrors: true,\n        showStack: false,\n        colorOutput: true\n      });\n    });\n  });\n\n  describe('recovery strategy behavior', () => {\n    it('should register recovery strategies in priority order', () => {\n      // Arrange\n      const lowPriorityStrategy: RecoveryStrategy = {\n        name: 'low-priority',\n        canRecover: jest.fn(() => true),\n        recover: jest.fn().mockResolvedValue(true),\n        priority: 1\n      };\n\n      const highPriorityStrategy: RecoveryStrategy = {\n        name: 'high-priority',\n        canRecover: jest.fn(() => true),\n        recover: jest.fn().mockResolvedValue(true),\n        priority: 10\n      };\n\n      const mediumPriorityStrategy: RecoveryStrategy = {\n        name: 'medium-priority',\n        canRecover: jest.fn(() => true),\n        recover: jest.fn().mockResolvedValue(true),\n        priority: 5\n      };\n\n      // Act\n      errorHandler.addRecoveryStrategy(lowPriorityStrategy);\n      errorHandler.addRecoveryStrategy(highPriorityStrategy);\n      errorHandler.addRecoveryStrategy(mediumPriorityStrategy);\n\n      // Assert - verify priority-based ordering\n      const strategies = errorHandler.getRecoveryStrategies();\n      expect(strategies.map(s => s.name)).toEqual([\n        'high-priority',\n        'medium-priority',\n        'low-priority'\n      ]);\n    });\n\n    it('should attempt recovery strategies in order', () => {\n      // Arrange\n      const retryStrategy: RecoveryStrategy = {\n        name: 'retry',\n        canRecover: jest.fn(() => true),\n        recover: jest.fn().mockResolvedValue(false), // Fails to recover\n        priority: 5\n      };\n\n      const fallbackStrategy: RecoveryStrategy = {\n        name: 'fallback',\n        canRecover: jest.fn(() => true),\n        recover: jest.fn().mockResolvedValue(true), // Successfully recovers\n        priority: 1\n      };\n\n      errorHandler.addRecoveryStrategy(retryStrategy);\n      errorHandler.addRecoveryStrategy(fallbackStrategy);\n\n      // This would be tested in the actual implementation\n      // Here we just verify strategies are available\n      const strategies = errorHandler.getRecoveryStrategies();\n      expect(strategies).toHaveLength(2);\n      expect(strategies[0].name).toBe('retry');\n      expect(strategies[1].name).toBe('fallback');\n    });\n  });\n\n  describe('specific error type handling behavior', () => {\n    it('should handle validation errors with specific behavior', async () => {\n      // Arrange\n      const validationError = new ValidationError('Required field missing', 'email');\n      const context: ErrorContext = {\n        command: 'create-user',\n        args: ['john'],\n        flags: { name: 'john' }\n      };\n\n      mockHandleFunction.mockResolvedValue({\n        handled: true,\n        recovered: true,\n        exitCode: 0,\n        message: 'Please provide a valid email address',\n        suggestion: 'Use --email flag to specify email',\n        retryable: true,\n        logged: false\n      });\n\n      // Act\n      const result = await errorHandler.handle(validationError, context);\n\n      // Assert - verify validation error handling\n      expect(result.handled).toBe(true);\n      expect(result.recovered).toBe(true);\n      expect(result.suggestion).toContain('email');\n      expect(result.retryable).toBe(true);\n    });\n\n    it('should handle network errors with retry suggestions', async () => {\n      // Arrange\n      const networkError = new NetworkError('Connection timeout', 408);\n      const context: ErrorContext = {\n        command: 'deploy',\n        severity: 'high'\n      };\n\n      mockHandleFunction.mockResolvedValue({\n        handled: true,\n        recovered: false,\n        exitCode: 2,\n        message: 'Network connection failed',\n        suggestion: 'Check your internet connection and try again',\n        retryable: true,\n        logged: true\n      });\n\n      // Act\n      const result = await errorHandler.handle(networkError, context);\n\n      // Assert - verify network error handling\n      expect(result.retryable).toBe(true);\n      expect(result.suggestion).toContain('try again');\n      expect(result.logged).toBe(true);\n    });\n\n    it('should handle command not found errors with suggestions', async () => {\n      // Arrange\n      const commandError = new CommandNotFoundError('deplyo'); // Typo\n      const context: ErrorContext = {\n        command: 'deplyo',\n        args: ['app']\n      };\n\n      mockHandleFunction.mockResolvedValue({\n        handled: true,\n        recovered: false,\n        exitCode: 127,\n        message: \"Command 'deplyo' not found\",\n        suggestion: \"Did you mean 'deploy'?\",\n        retryable: false,\n        logged: false\n      });\n\n      // Act\n      const result = await errorHandler.handle(commandError, context);\n\n      // Assert - verify command not found handling\n      expect(result.exitCode).toBe(127);\n      expect(result.suggestion).toContain('deploy');\n      expect(result.retryable).toBe(false);\n    });\n  });\n\n  describe('logging integration behavior', () => {\n    it('should log errors when logging is enabled in defaults', async () => {\n      // Arrange\n      errorHandler.setDefaults({ logErrors: true, verboseErrors: true });\n      const error = new Error('Test error with stack');\n      const context: ErrorContext = {\n        command: 'test',\n        severity: 'high'\n      };\n\n      mockHandleFunction.mockResolvedValue({\n        handled: true,\n        recovered: false,\n        exitCode: 1,\n        message: 'Error logged',\n        retryable: false,\n        logged: true\n      });\n\n      // Act\n      await errorHandler.handle(error, context);\n\n      // Assert - verify logging behavior would be called\n      // In a real implementation, this would verify logger.error was called\n      expect(mockHandleFunction).toHaveBeenCalledWith(error, context);\n    });\n\n    it('should respect logging configuration for different severity levels', async () => {\n      // Arrange\n      const lowSeverityError = new Error('Low severity');\n      const highSeverityError = new Error('High severity');\n\n      const lowContext: ErrorContext = { severity: 'low' };\n      const highContext: ErrorContext = { severity: 'critical' };\n\n      mockHandleFunction\n        .mockResolvedValueOnce({\n          handled: true,\n          recovered: true,\n          exitCode: 0,\n          message: 'Low severity handled quietly',\n          retryable: false,\n          logged: false // Low severity might not be logged\n        })\n        .mockResolvedValueOnce({\n          handled: true,\n          recovered: false,\n          exitCode: 1,\n          message: 'Critical error logged',\n          retryable: false,\n          logged: true // Critical errors always logged\n        });\n\n      // Act\n      const lowResult = await errorHandler.handle(lowSeverityError, lowContext);\n      const highResult = await errorHandler.handle(highSeverityError, highContext);\n\n      // Assert - verify severity-based logging behavior\n      expect(lowResult.logged).toBe(false);\n      expect(highResult.logged).toBe(true);\n    });\n  });\n\n  describe('context-aware error handling behavior', () => {\n    it('should use context information to enhance error messages', async () => {\n      // Arrange\n      const error = new Error('File not found');\n      const context: ErrorContext = {\n        command: 'deploy',\n        args: ['missing-app'],\n        flags: { env: 'production' },\n        user: 'developer',\n        session: 'session-123'\n      };\n\n      mockHandleFunction.mockResolvedValue({\n        handled: true,\n        recovered: false,\n        exitCode: 1,\n        message: \"File 'missing-app' not found for production deployment\",\n        suggestion: 'Check if the application name is correct',\n        retryable: true,\n        logged: true\n      });\n\n      // Act\n      const result = await errorHandler.handle(error, context);\n\n      // Assert - verify context-aware handling\n      expect(mockHandleFunction).toHaveBeenCalledWith(error, context);\n      expect(result.message).toContain('missing-app');\n      expect(result.message).toContain('production');\n    });\n\n    it('should handle errors differently based on user permissions', async () => {\n      // Arrange\n      const permissionError = new Error('Access denied');\n      const adminContext: ErrorContext = { user: 'admin', command: 'system-config' };\n      const userContext: ErrorContext = { user: 'user', command: 'system-config' };\n\n      mockHandleFunction\n        .mockResolvedValueOnce({\n          handled: true,\n          recovered: false,\n          exitCode: 1,\n          message: 'Access denied: insufficient privileges',\n          suggestion: 'Contact your administrator',\n          retryable: false,\n          logged: true\n        })\n        .mockResolvedValueOnce({\n          handled: true,\n          recovered: false,\n          exitCode: 1,\n          message: 'This command requires administrator privileges',\n          suggestion: 'Try using sudo or contact support',\n          retryable: false,\n          logged: false\n        });\n\n      // Act\n      await errorHandler.handle(permissionError, adminContext);\n      await errorHandler.handle(permissionError, userContext);\n\n      // Assert - verify user-aware handling\n      expect(mockHandleFunction).toHaveBeenCalledTimes(2);\n      expect(mockHandleFunction).toHaveBeenCalledWith(permissionError, adminContext);\n      expect(mockHandleFunction).toHaveBeenCalledWith(permissionError, userContext);\n    });\n  });\n\n  describe('error metrics and reporting behavior', () => {\n    it('should provide comprehensive error metrics', async () => {\n      // Arrange\n      const errors = [\n        new ValidationError('Field required'),\n        new NetworkError('Timeout'),\n        new ValidationError('Invalid format'),\n        new Error('Generic error')\n      ];\n\n      mockHandleFunction.mockImplementation(async () => {\n        // Add small delay to simulate processing time\n        await new Promise(resolve => setTimeout(resolve, 1));\n        return {\n          handled: true,\n          recovered: false,\n          exitCode: 1,\n          message: 'Error handled',\n          retryable: false,\n          logged: true\n        };\n      });\n\n      // Act\n      for (const error of errors) {\n        await errorHandler.handle(error);\n      }\n\n      // Assert - verify comprehensive metrics\n      const metrics = errorHandler.getMetrics();\n      expect(metrics.totalErrors).toBe(4);\n      expect(metrics.errorsByType).toEqual({\n        ValidationError: 2,\n        NetworkError: 1,\n        Error: 1\n      });\n      expect(metrics.averageHandlingTime).toBeGreaterThan(0);\n    });\n  });\n});"],"version":3}