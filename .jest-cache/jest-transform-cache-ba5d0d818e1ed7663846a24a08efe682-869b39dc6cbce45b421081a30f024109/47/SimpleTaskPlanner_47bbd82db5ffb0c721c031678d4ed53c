e99dcd79d9b6c81bbe072064111d6bf3
/* istanbul ignore next */
function cov_2ivmnq9li4() {
  var path = "/home/mhugo/code/claude-code-flow/src/maestro/services/SimpleTaskPlanner.ts";
  var hash = "f19154251dcc20fe178ad2b50154d31a2839aeb4";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/home/mhugo/code/claude-code-flow/src/maestro/services/SimpleTaskPlanner.ts",
    statementMap: {
      "0": {
        start: {
          line: 20,
          column: 8
        },
        end: {
          line: 20,
          column: 41
        }
      },
      "1": {
        start: {
          line: 21,
          column: 8
        },
        end: {
          line: 21,
          column: 29
        }
      },
      "2": {
        start: {
          line: 27,
          column: 8
        },
        end: {
          line: 27,
          column: 72
        }
      },
      "3": {
        start: {
          line: 28,
          column: 8
        },
        end: {
          line: 41,
          column: 9
        }
      },
      "4": {
        start: {
          line: 30,
          column: 32
        },
        end: {
          line: 30,
          column: 68
        }
      },
      "5": {
        start: {
          line: 31,
          column: 12
        },
        end: {
          line: 37,
          column: 13
        }
      },
      "6": {
        start: {
          line: 32,
          column: 16
        },
        end: {
          line: 36,
          column: 18
        }
      },
      "7": {
        start: {
          line: 40,
          column: 12
        },
        end: {
          line: 40,
          column: 113
        }
      },
      "8": {
        start: {
          line: 43,
          column: 8
        },
        end: {
          line: 47,
          column: 10
        }
      },
      "9": {
        start: {
          line: 53,
          column: 22
        },
        end: {
          line: 53,
          column: 26
        }
      },
      "10": {
        start: {
          line: 54,
          column: 8
        },
        end: {
          line: 94,
          column: 9
        }
      },
      "11": {
        start: {
          line: 56,
          column: 12
        },
        end: {
          line: 62,
          column: 15
        }
      },
      "12": {
        start: {
          line: 63,
          column: 12
        },
        end: {
          line: 64,
          column: 28
        }
      },
      "13": {
        start: {
          line: 64,
          column: 16
        },
        end: {
          line: 64,
          column: 28
        }
      },
      "14": {
        start: {
          line: 66,
          column: 12
        },
        end: {
          line: 66,
          column: 56
        }
      },
      "15": {
        start: {
          line: 68,
          column: 25
        },
        end: {
          line: 77,
          column: 13
        }
      },
      "16": {
        start: {
          line: 78,
          column: 27
        },
        end: {
          line: 78,
          column: 77
        }
      },
      "17": {
        start: {
          line: 79,
          column: 12
        },
        end: {
          line: 81,
          column: 13
        }
      },
      "18": {
        start: {
          line: 80,
          column: 16
        },
        end: {
          line: 80,
          column: 81
        }
      },
      "19": {
        start: {
          line: 82,
          column: 12
        },
        end: {
          line: 82,
          column: 24
        }
      },
      "20": {
        start: {
          line: 86,
          column: 12
        },
        end: {
          line: 93,
          column: 13
        }
      },
      "21": {
        start: {
          line: 87,
          column: 16
        },
        end: {
          line: 92,
          column: 17
        }
      },
      "22": {
        start: {
          line: 88,
          column: 20
        },
        end: {
          line: 88,
          column: 63
        }
      },
      "23": {
        start: {
          line: 91,
          column: 20
        },
        end: {
          line: 91,
          column: 134
        }
      },
      "24": {
        start: {
          line: 100,
          column: 8
        },
        end: {
          line: 107,
          column: 37
        }
      },
      "25": {
        start: {
          line: 113,
          column: 8
        },
        end: {
          line: 115,
          column: 9
        }
      },
      "26": {
        start: {
          line: 114,
          column: 12
        },
        end: {
          line: 114,
          column: 26
        }
      },
      "27": {
        start: {
          line: 117,
          column: 8
        },
        end: {
          line: 123,
          column: 9
        }
      },
      "28": {
        start: {
          line: 118,
          column: 12
        },
        end: {
          line: 122,
          column: 42
        }
      },
      "29": {
        start: {
          line: 124,
          column: 8
        },
        end: {
          line: 124,
          column: 74
        }
      },
      "30": {
        start: {
          line: 130,
          column: 8
        },
        end: {
          line: 154,
          column: 41
        }
      },
      "31": {
        start: {
          line: 160,
          column: 8
        },
        end: {
          line: 170,
          column: 9
        }
      },
      "32": {
        start: {
          line: 162,
          column: 36
        },
        end: {
          line: 162,
          column: 55
        }
      },
      "33": {
        start: {
          line: 163,
          column: 12
        },
        end: {
          line: 166,
          column: 14
        }
      },
      "34": {
        start: {
          line: 169,
          column: 12
        },
        end: {
          line: 169,
          column: 60
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 19,
            column: 4
          },
          end: {
            line: 19,
            column: 5
          }
        },
        loc: {
          start: {
            line: 19,
            column: 38
          },
          end: {
            line: 22,
            column: 5
          }
        },
        line: 19
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 26,
            column: 4
          },
          end: {
            line: 26,
            column: 5
          }
        },
        loc: {
          start: {
            line: 26,
            column: 36
          },
          end: {
            line: 48,
            column: 5
          }
        },
        line: 26
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 52,
            column: 4
          },
          end: {
            line: 52,
            column: 5
          }
        },
        loc: {
          start: {
            line: 52,
            column: 36
          },
          end: {
            line: 95,
            column: 5
          }
        },
        line: 52
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 99,
            column: 4
          },
          end: {
            line: 99,
            column: 5
          }
        },
        loc: {
          start: {
            line: 99,
            column: 32
          },
          end: {
            line: 108,
            column: 5
          }
        },
        line: 99
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 112,
            column: 4
          },
          end: {
            line: 112,
            column: 5
          }
        },
        loc: {
          start: {
            line: 112,
            column: 42
          },
          end: {
            line: 125,
            column: 5
          }
        },
        line: 112
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 129,
            column: 4
          },
          end: {
            line: 129,
            column: 5
          }
        },
        loc: {
          start: {
            line: 129,
            column: 32
          },
          end: {
            line: 155,
            column: 5
          }
        },
        line: 129
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 159,
            column: 4
          },
          end: {
            line: 159,
            column: 5
          }
        },
        loc: {
          start: {
            line: 159,
            column: 22
          },
          end: {
            line: 171,
            column: 5
          }
        },
        line: 159
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 31,
            column: 12
          },
          end: {
            line: 37,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 31,
            column: 12
          },
          end: {
            line: 37,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 31
      },
      "1": {
        loc: {
          start: {
            line: 40,
            column: 55
          },
          end: {
            line: 40,
            column: 109
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 40,
            column: 80
          },
          end: {
            line: 40,
            column: 93
          }
        }, {
          start: {
            line: 40,
            column: 96
          },
          end: {
            line: 40,
            column: 109
          }
        }],
        line: 40
      },
      "2": {
        loc: {
          start: {
            line: 63,
            column: 12
          },
          end: {
            line: 64,
            column: 28
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 63,
            column: 12
          },
          end: {
            line: 64,
            column: 28
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 63
      },
      "3": {
        loc: {
          start: {
            line: 79,
            column: 12
          },
          end: {
            line: 81,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 79,
            column: 12
          },
          end: {
            line: 81,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 79
      },
      "4": {
        loc: {
          start: {
            line: 86,
            column: 12
          },
          end: {
            line: 93,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 86,
            column: 12
          },
          end: {
            line: 93,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 86
      },
      "5": {
        loc: {
          start: {
            line: 91,
            column: 76
          },
          end: {
            line: 91,
            column: 130
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 91,
            column: 101
          },
          end: {
            line: 91,
            column: 114
          }
        }, {
          start: {
            line: 91,
            column: 117
          },
          end: {
            line: 91,
            column: 130
          }
        }],
        line: 91
      },
      "6": {
        loc: {
          start: {
            line: 105,
            column: 2
          },
          end: {
            line: 105,
            column: 71
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 105,
            column: 25
          },
          end: {
            line: 105,
            column: 66
          }
        }, {
          start: {
            line: 105,
            column: 69
          },
          end: {
            line: 105,
            column: 71
          }
        }],
        line: 105
      },
      "7": {
        loc: {
          start: {
            line: 113,
            column: 8
          },
          end: {
            line: 115,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 113,
            column: 8
          },
          end: {
            line: 115,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 113
      },
      "8": {
        loc: {
          start: {
            line: 113,
            column: 12
          },
          end: {
            line: 113,
            column: 83
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 113,
            column: 12
          },
          end: {
            line: 113,
            column: 38
          }
        }, {
          start: {
            line: 113,
            column: 42
          },
          end: {
            line: 113,
            column: 83
          }
        }],
        line: 113
      },
      "9": {
        loc: {
          start: {
            line: 117,
            column: 8
          },
          end: {
            line: 123,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 117,
            column: 8
          },
          end: {
            line: 123,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 117
      },
      "10": {
        loc: {
          start: {
            line: 117,
            column: 12
          },
          end: {
            line: 117,
            column: 48
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 117,
            column: 12
          },
          end: {
            line: 117,
            column: 18
          }
        }, {
          start: {
            line: 117,
            column: 22
          },
          end: {
            line: 117,
            column: 48
          }
        }],
        line: 117
      },
      "11": {
        loc: {
          start: {
            line: 124,
            column: 22
          },
          end: {
            line: 124,
            column: 72
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 124,
            column: 22
          },
          end: {
            line: 124,
            column: 28
          }
        }, {
          start: {
            line: 124,
            column: 32
          },
          end: {
            line: 124,
            column: 72
          }
        }],
        line: 124
      },
      "12": {
        loc: {
          start: {
            line: 165,
            column: 24
          },
          end: {
            line: 165,
            column: 62
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 165,
            column: 42
          },
          end: {
            line: 165,
            column: 49
          }
        }, {
          start: {
            line: 165,
            column: 52
          },
          end: {
            line: 165,
            column: 62
          }
        }],
        line: 165
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0, 0],
      "10": [0, 0],
      "11": [0, 0],
      "12": [0, 0]
    },
    inputSourceMap: {
      file: "/home/mhugo/code/claude-code-flow/src/maestro/services/SimpleTaskPlanner.ts",
      mappings: "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",
      names: [],
      sources: ["/home/mhugo/code/claude-code-flow/src/maestro/services/SimpleTaskPlanner.ts"],
      sourcesContent: ["/**\n * Simple Task Planner - Streamlined Integration\n * \n * Lightweight task planning service that directly leverages existing\n * AgentManager task-planner template with minimal overhead.\n * \n * Key Features:\n * - Direct AgentManager integration without dual-system complexity\n * - Simple interface following Single Responsibility\n * - Minimal dependencies and initialization overhead\n * - Fast fallback with basic task generation\n */\n\nimport { AgentManager } from '../../agents/agent-manager.js';\nimport { ILogger } from '../../core/logger.js';\n\nexport interface TaskPlannerRequest {\n  featureName: string;\n  designContent: string;\n  requirements?: string;\n}\n\nexport interface TaskPlannerResponse {\n  success: boolean;\n  taskMarkdown: string;\n  method: 'agent' | 'fallback';\n}\n\n/**\n * Streamlined task planner with minimal overhead\n */\nexport class SimpleTaskPlanner {\n  \n  constructor(\n    private agentManager: AgentManager,\n    private logger: ILogger\n  ) {}\n\n  /**\n   * Generate task plan using direct agent coordination\n   */\n  async generateTaskPlan(request: TaskPlannerRequest): Promise<TaskPlannerResponse> {\n    this.logger.info(`Generating tasks for ${request.featureName}`);\n\n    try {\n      // Try direct AgentManager approach\n      const agentResult = await this.tryAgentPlanning(request);\n      if (agentResult) {\n        return {\n          success: true,\n          taskMarkdown: agentResult,\n          method: 'agent'\n        };\n      }\n    } catch (error) {\n      this.logger.warn(`Agent planning failed: ${error instanceof Error ? error.message : String(error)}`);\n    }\n\n    // Fast fallback to basic task generation\n    return {\n      success: true,\n      taskMarkdown: this.generateBasicTasks(request),\n      method: 'fallback'\n    };\n  }\n\n  /**\n   * Try using AgentManager task-planner template directly\n   */\n  private async tryAgentPlanning(request: TaskPlannerRequest): Promise<string | null> {\n    let agentId: string | null = null;\n    \n    try {\n      // Create task-planner agent\n      agentId = await this.agentManager.createAgent('task-planner', {\n        name: `Task Planner - ${request.featureName}`,\n        type: 'task-planner',\n        capabilities: ['project-management', 'task-breakdown'],\n        maxConcurrentTasks: 1,\n        priority: 90\n      });\n\n      if (!agentId) return null;\n\n      // Start agent\n      await this.agentManager.startAgent(agentId);\n\n      // Execute planning task\n      const task = {\n        id: `plan-${request.featureName}-${Date.now()}`,\n        type: 'task-planning',\n        description: `Generate tasks for ${request.featureName}`,\n        input: {\n          prompt: this.createSimplePrompt(request)\n        },\n        priority: 90,\n        metadata: { featureName: request.featureName }\n      };\n\n      const result = await this.agentManager.executeTask(agentId, task);\n      \n      if (result?.output) {\n        return this.formatTaskOutput(result.output, request.featureName);\n      }\n\n      return null;\n\n    } finally {\n      // Always cleanup agent\n      if (agentId) {\n        try {\n          await this.agentManager.stopAgent(agentId);\n        } catch (error) {\n          this.logger.warn(`Failed to cleanup agent ${agentId}: ${error instanceof Error ? error.message : String(error)}`);\n        }\n      }\n    }\n  }\n\n  /**\n   * Create simple, focused planning prompt\n   */\n  private createSimplePrompt(request: TaskPlannerRequest): string {\n    return `Generate implementation tasks for: ${request.featureName}\n\nDesign:\n${request.designContent}\n\n${request.requirements ? `Requirements: ${request.requirements}\\n` : ''}\nCreate 5-8 specific, actionable tasks with acceptance criteria.\nFormat as markdown with checkboxes.`;\n  }\n\n  /**\n   * Format agent output to consistent markdown\n   */\n  private formatTaskOutput(output: any, featureName: string): string {\n    if (typeof output === 'string' && output.includes('# Implementation Tasks')) {\n      return output;\n    }\n\n    // Simple formatting if structured output\n    if (output && typeof output === 'object') {\n      return `# Implementation Tasks for ${featureName}\n\n${JSON.stringify(output, null, 2)}\n\n*Generated by AgentManager task-planner*`;\n    }\n\n    return String(output || this.generateBasicTasks({ featureName } as TaskPlannerRequest));\n  }\n\n  /**\n   * Generate basic task breakdown as fallback\n   */\n  private generateBasicTasks(request: TaskPlannerRequest): string {\n    return `# Implementation Tasks for ${request.featureName}\n\n## Task Breakdown\n\n1. **Setup & Architecture**\n   - [ ] Set up project structure and dependencies\n   - [ ] Define core interfaces and types\n\n2. **Core Implementation**\n   - [ ] Implement main functionality\n   - [ ] Add input validation and error handling\n\n3. **Integration**\n   - [ ] Integrate with existing systems  \n   - [ ] Add configuration and environment support\n\n4. **Quality Assurance**\n   - [ ] Write comprehensive tests\n   - [ ] Add logging and monitoring\n\n5. **Documentation & Deployment**\n   - [ ] Create user documentation\n   - [ ] Prepare for deployment\n\n*Generated by fallback task generation*`;\n  }\n\n  /**\n   * Get simple status information\n   */\n  async getStatus(): Promise<{ available: boolean; method: string }> {\n    try {\n      // Simple availability check\n      const hasAgentManager = !!this.agentManager;\n      return {\n        available: hasAgentManager,\n        method: hasAgentManager ? 'agent' : 'fallback'\n      };\n    } catch {\n      return { available: false, method: 'fallback' };\n    }\n  }\n}"],
      version: 3
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "f19154251dcc20fe178ad2b50154d31a2839aeb4"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_2ivmnq9li4 = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_2ivmnq9li4();
/**
 * Simple Task Planner - Streamlined Integration
 *
 * Lightweight task planning service that directly leverages existing
 * AgentManager task-planner template with minimal overhead.
 *
 * Key Features:
 * - Direct AgentManager integration without dual-system complexity
 * - Simple interface following Single Responsibility
 * - Minimal dependencies and initialization overhead
 * - Fast fallback with basic task generation
 */
/**
 * Streamlined task planner with minimal overhead
 */
export class SimpleTaskPlanner {
  agentManager;
  logger;
  constructor(agentManager, logger) {
    /* istanbul ignore next */
    cov_2ivmnq9li4().f[0]++;
    cov_2ivmnq9li4().s[0]++;
    this.agentManager = agentManager;
    /* istanbul ignore next */
    cov_2ivmnq9li4().s[1]++;
    this.logger = logger;
  }
  /**
   * Generate task plan using direct agent coordination
   */
  async generateTaskPlan(request) {
    /* istanbul ignore next */
    cov_2ivmnq9li4().f[1]++;
    cov_2ivmnq9li4().s[2]++;
    this.logger.info(`Generating tasks for ${request.featureName}`);
    /* istanbul ignore next */
    cov_2ivmnq9li4().s[3]++;
    try {
      // Try direct AgentManager approach
      const agentResult =
      /* istanbul ignore next */
      (cov_2ivmnq9li4().s[4]++, await this.tryAgentPlanning(request));
      /* istanbul ignore next */
      cov_2ivmnq9li4().s[5]++;
      if (agentResult) {
        /* istanbul ignore next */
        cov_2ivmnq9li4().b[0][0]++;
        cov_2ivmnq9li4().s[6]++;
        return {
          success: true,
          taskMarkdown: agentResult,
          method: 'agent'
        };
      } else
      /* istanbul ignore next */
      {
        cov_2ivmnq9li4().b[0][1]++;
      }
    } catch (error) {
      /* istanbul ignore next */
      cov_2ivmnq9li4().s[7]++;
      this.logger.warn(`Agent planning failed: ${error instanceof Error ?
      /* istanbul ignore next */
      (cov_2ivmnq9li4().b[1][0]++, error.message) :
      /* istanbul ignore next */
      (cov_2ivmnq9li4().b[1][1]++, String(error))}`);
    }
    // Fast fallback to basic task generation
    /* istanbul ignore next */
    cov_2ivmnq9li4().s[8]++;
    return {
      success: true,
      taskMarkdown: this.generateBasicTasks(request),
      method: 'fallback'
    };
  }
  /**
   * Try using AgentManager task-planner template directly
   */
  async tryAgentPlanning(request) {
    /* istanbul ignore next */
    cov_2ivmnq9li4().f[2]++;
    let agentId =
    /* istanbul ignore next */
    (cov_2ivmnq9li4().s[9]++, null);
    /* istanbul ignore next */
    cov_2ivmnq9li4().s[10]++;
    try {
      /* istanbul ignore next */
      cov_2ivmnq9li4().s[11]++;
      // Create task-planner agent
      agentId = await this.agentManager.createAgent('task-planner', {
        name: `Task Planner - ${request.featureName}`,
        type: 'task-planner',
        capabilities: ['project-management', 'task-breakdown'],
        maxConcurrentTasks: 1,
        priority: 90
      });
      /* istanbul ignore next */
      cov_2ivmnq9li4().s[12]++;
      if (!agentId) {
        /* istanbul ignore next */
        cov_2ivmnq9li4().b[2][0]++;
        cov_2ivmnq9li4().s[13]++;
        return null;
      } else
      /* istanbul ignore next */
      {
        cov_2ivmnq9li4().b[2][1]++;
      }
      // Start agent
      cov_2ivmnq9li4().s[14]++;
      await this.agentManager.startAgent(agentId);
      // Execute planning task
      const task =
      /* istanbul ignore next */
      (cov_2ivmnq9li4().s[15]++, {
        id: `plan-${request.featureName}-${Date.now()}`,
        type: 'task-planning',
        description: `Generate tasks for ${request.featureName}`,
        input: {
          prompt: this.createSimplePrompt(request)
        },
        priority: 90,
        metadata: {
          featureName: request.featureName
        }
      });
      const result =
      /* istanbul ignore next */
      (cov_2ivmnq9li4().s[16]++, await this.agentManager.executeTask(agentId, task));
      /* istanbul ignore next */
      cov_2ivmnq9li4().s[17]++;
      if (result?.output) {
        /* istanbul ignore next */
        cov_2ivmnq9li4().b[3][0]++;
        cov_2ivmnq9li4().s[18]++;
        return this.formatTaskOutput(result.output, request.featureName);
      } else
      /* istanbul ignore next */
      {
        cov_2ivmnq9li4().b[3][1]++;
      }
      cov_2ivmnq9li4().s[19]++;
      return null;
    } finally {
      /* istanbul ignore next */
      cov_2ivmnq9li4().s[20]++;
      // Always cleanup agent
      if (agentId) {
        /* istanbul ignore next */
        cov_2ivmnq9li4().b[4][0]++;
        cov_2ivmnq9li4().s[21]++;
        try {
          /* istanbul ignore next */
          cov_2ivmnq9li4().s[22]++;
          await this.agentManager.stopAgent(agentId);
        } catch (error) {
          /* istanbul ignore next */
          cov_2ivmnq9li4().s[23]++;
          this.logger.warn(`Failed to cleanup agent ${agentId}: ${error instanceof Error ?
          /* istanbul ignore next */
          (cov_2ivmnq9li4().b[5][0]++, error.message) :
          /* istanbul ignore next */
          (cov_2ivmnq9li4().b[5][1]++, String(error))}`);
        }
      } else
      /* istanbul ignore next */
      {
        cov_2ivmnq9li4().b[4][1]++;
      }
    }
  }
  /**
   * Create simple, focused planning prompt
   */
  createSimplePrompt(request) {
    /* istanbul ignore next */
    cov_2ivmnq9li4().f[3]++;
    cov_2ivmnq9li4().s[24]++;
    return `Generate implementation tasks for: ${request.featureName}

Design:
${request.designContent}

${request.requirements ?
    /* istanbul ignore next */
    (cov_2ivmnq9li4().b[6][0]++, `Requirements: ${request.requirements}\n`) :
    /* istanbul ignore next */
    (cov_2ivmnq9li4().b[6][1]++, '')}
Create 5-8 specific, actionable tasks with acceptance criteria.
Format as markdown with checkboxes.`;
  }
  /**
   * Format agent output to consistent markdown
   */
  formatTaskOutput(output, featureName) {
    /* istanbul ignore next */
    cov_2ivmnq9li4().f[4]++;
    cov_2ivmnq9li4().s[25]++;
    if (
    /* istanbul ignore next */
    (cov_2ivmnq9li4().b[8][0]++, typeof output === 'string') &&
    /* istanbul ignore next */
    (cov_2ivmnq9li4().b[8][1]++, output.includes('# Implementation Tasks'))) {
      /* istanbul ignore next */
      cov_2ivmnq9li4().b[7][0]++;
      cov_2ivmnq9li4().s[26]++;
      return output;
    } else
    /* istanbul ignore next */
    {
      cov_2ivmnq9li4().b[7][1]++;
    }
    // Simple formatting if structured output
    cov_2ivmnq9li4().s[27]++;
    if (
    /* istanbul ignore next */
    (cov_2ivmnq9li4().b[10][0]++, output) &&
    /* istanbul ignore next */
    (cov_2ivmnq9li4().b[10][1]++, typeof output === 'object')) {
      /* istanbul ignore next */
      cov_2ivmnq9li4().b[9][0]++;
      cov_2ivmnq9li4().s[28]++;
      return `# Implementation Tasks for ${featureName}

${JSON.stringify(output, null, 2)}

*Generated by AgentManager task-planner*`;
    } else
    /* istanbul ignore next */
    {
      cov_2ivmnq9li4().b[9][1]++;
    }
    cov_2ivmnq9li4().s[29]++;
    return String(
    /* istanbul ignore next */
    (cov_2ivmnq9li4().b[11][0]++, output) ||
    /* istanbul ignore next */
    (cov_2ivmnq9li4().b[11][1]++, this.generateBasicTasks({
      featureName
    })));
  }
  /**
   * Generate basic task breakdown as fallback
   */
  generateBasicTasks(request) {
    /* istanbul ignore next */
    cov_2ivmnq9li4().f[5]++;
    cov_2ivmnq9li4().s[30]++;
    return `# Implementation Tasks for ${request.featureName}

## Task Breakdown

1. **Setup & Architecture**
   - [ ] Set up project structure and dependencies
   - [ ] Define core interfaces and types

2. **Core Implementation**
   - [ ] Implement main functionality
   - [ ] Add input validation and error handling

3. **Integration**
   - [ ] Integrate with existing systems  
   - [ ] Add configuration and environment support

4. **Quality Assurance**
   - [ ] Write comprehensive tests
   - [ ] Add logging and monitoring

5. **Documentation & Deployment**
   - [ ] Create user documentation
   - [ ] Prepare for deployment

*Generated by fallback task generation*`;
  }
  /**
   * Get simple status information
   */
  async getStatus() {
    /* istanbul ignore next */
    cov_2ivmnq9li4().f[6]++;
    cov_2ivmnq9li4().s[31]++;
    try {
      // Simple availability check
      const hasAgentManager =
      /* istanbul ignore next */
      (cov_2ivmnq9li4().s[32]++, !!this.agentManager);
      /* istanbul ignore next */
      cov_2ivmnq9li4().s[33]++;
      return {
        available: hasAgentManager,
        method: hasAgentManager ?
        /* istanbul ignore next */
        (cov_2ivmnq9li4().b[12][0]++, 'agent') :
        /* istanbul ignore next */
        (cov_2ivmnq9li4().b[12][1]++, 'fallback')
      };
    } catch {
      /* istanbul ignore next */
      cov_2ivmnq9li4().s[34]++;
      return {
        available: false,
        method: 'fallback'
      };
    }
  }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,