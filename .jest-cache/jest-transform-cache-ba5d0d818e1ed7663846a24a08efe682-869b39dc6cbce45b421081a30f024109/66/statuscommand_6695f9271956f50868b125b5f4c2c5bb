e48f6d269a91ebadd60cd8969fe3285e
/* istanbul ignore next */
function cov_3hjoc1vel() {
  var path = "/home/mhugo/code/claude-code-flow/src/cli/commands/status/status-command.ts";
  var hash = "e9a8c801469766381faf88101b82061405ce43a0";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/home/mhugo/code/claude-code-flow/src/cli/commands/status/status-command.ts",
    statementMap: {
      "0": {
        start: {
          line: 9,
          column: 8
        },
        end: {
          line: 49,
          column: 11
        }
      },
      "1": {
        start: {
          line: 52,
          column: 8
        },
        end: {
          line: 76,
          column: 9
        }
      },
      "2": {
        start: {
          line: 53,
          column: 27
        },
        end: {
          line: 53,
          column: 58
        }
      },
      "3": {
        start: {
          line: 54,
          column: 29
        },
        end: {
          line: 54,
          column: 60
        }
      },
      "4": {
        start: {
          line: 55,
          column: 26
        },
        end: {
          line: 55,
          column: 54
        }
      },
      "5": {
        start: {
          line: 56,
          column: 31
        },
        end: {
          line: 56,
          column: 68
        }
      },
      "6": {
        start: {
          line: 57,
          column: 31
        },
        end: {
          line: 57,
          column: 68
        }
      },
      "7": {
        start: {
          line: 58,
          column: 12
        },
        end: {
          line: 60,
          column: 13
        }
      },
      "8": {
        start: {
          line: 59,
          column: 16
        },
        end: {
          line: 59,
          column: 88
        }
      },
      "9": {
        start: {
          line: 61,
          column: 27
        },
        end: {
          line: 61,
          column: 86
        }
      },
      "10": {
        start: {
          line: 62,
          column: 27
        },
        end: {
          line: 62,
          column: 60
        }
      },
      "11": {
        start: {
          line: 63,
          column: 12
        },
        end: {
          line: 68,
          column: 14
        }
      },
      "12": {
        start: {
          line: 71,
          column: 12
        },
        end: {
          line: 75,
          column: 14
        }
      },
      "13": {
        start: {
          line: 81,
          column: 27
        },
        end: {
          line: 128,
          column: 9
        }
      },
      "14": {
        start: {
          line: 129,
          column: 8
        },
        end: {
          line: 138,
          column: 9
        }
      },
      "15": {
        start: {
          line: 130,
          column: 12
        },
        end: {
          line: 137,
          column: 14
        }
      },
      "16": {
        start: {
          line: 139,
          column: 8
        },
        end: {
          line: 157,
          column: 9
        }
      },
      "17": {
        start: {
          line: 140,
          column: 12
        },
        end: {
          line: 156,
          column: 14
        }
      },
      "18": {
        start: {
          line: 158,
          column: 8
        },
        end: {
          line: 173,
          column: 9
        }
      },
      "19": {
        start: {
          line: 160,
          column: 12
        },
        end: {
          line: 172,
          column: 16
        }
      },
      "20": {
        start: {
          line: 160,
          column: 76
        },
        end: {
          line: 172,
          column: 13
        }
      },
      "21": {
        start: {
          line: 174,
          column: 8
        },
        end: {
          line: 174,
          column: 26
        }
      },
      "22": {
        start: {
          line: 177,
          column: 8
        },
        end: {
          line: 185,
          column: 9
        }
      },
      "23": {
        start: {
          line: 179,
          column: 16
        },
        end: {
          line: 179,
          column: 55
        }
      },
      "24": {
        start: {
          line: 181,
          column: 16
        },
        end: {
          line: 181,
          column: 43
        }
      },
      "25": {
        start: {
          line: 184,
          column: 16
        },
        end: {
          line: 184,
          column: 50
        }
      },
      "26": {
        start: {
          line: 188,
          column: 22
        },
        end: {
          line: 188,
          column: 24
        }
      },
      "27": {
        start: {
          line: 190,
          column: 8
        },
        end: {
          line: 190,
          column: 41
        }
      },
      "28": {
        start: {
          line: 191,
          column: 8
        },
        end: {
          line: 191,
          column: 35
        }
      },
      "29": {
        start: {
          line: 192,
          column: 8
        },
        end: {
          line: 192,
          column: 23
        }
      },
      "30": {
        start: {
          line: 194,
          column: 8
        },
        end: {
          line: 194,
          column: 30
        }
      },
      "31": {
        start: {
          line: 195,
          column: 8
        },
        end: {
          line: 195,
          column: 58
        }
      },
      "32": {
        start: {
          line: 196,
          column: 8
        },
        end: {
          line: 196,
          column: 90
        }
      },
      "33": {
        start: {
          line: 197,
          column: 8
        },
        end: {
          line: 197,
          column: 84
        }
      },
      "34": {
        start: {
          line: 198,
          column: 8
        },
        end: {
          line: 198,
          column: 62
        }
      },
      "35": {
        start: {
          line: 199,
          column: 8
        },
        end: {
          line: 199,
          column: 98
        }
      },
      "36": {
        start: {
          line: 200,
          column: 8
        },
        end: {
          line: 200,
          column: 23
        }
      },
      "37": {
        start: {
          line: 202,
          column: 8
        },
        end: {
          line: 202,
          column: 29
        }
      },
      "38": {
        start: {
          line: 203,
          column: 8
        },
        end: {
          line: 203,
          column: 85
        }
      },
      "39": {
        start: {
          line: 204,
          column: 8
        },
        end: {
          line: 204,
          column: 59
        }
      },
      "40": {
        start: {
          line: 205,
          column: 8
        },
        end: {
          line: 205,
          column: 69
        }
      },
      "41": {
        start: {
          line: 206,
          column: 8
        },
        end: {
          line: 206,
          column: 23
        }
      },
      "42": {
        start: {
          line: 208,
          column: 21
        },
        end: {
          line: 208,
          column: 45
        }
      },
      "43": {
        start: {
          line: 209,
          column: 8
        },
        end: {
          line: 209,
          column: 35
        }
      },
      "44": {
        start: {
          line: 210,
          column: 8
        },
        end: {
          line: 210,
          column: 56
        }
      },
      "45": {
        start: {
          line: 211,
          column: 8
        },
        end: {
          line: 211,
          column: 120
        }
      },
      "46": {
        start: {
          line: 212,
          column: 8
        },
        end: {
          line: 212,
          column: 52
        }
      },
      "47": {
        start: {
          line: 213,
          column: 8
        },
        end: {
          line: 213,
          column: 68
        }
      },
      "48": {
        start: {
          line: 214,
          column: 8
        },
        end: {
          line: 214,
          column: 77
        }
      },
      "49": {
        start: {
          line: 215,
          column: 8
        },
        end: {
          line: 215,
          column: 23
        }
      },
      "50": {
        start: {
          line: 217,
          column: 8
        },
        end: {
          line: 217,
          column: 37
        }
      },
      "51": {
        start: {
          line: 218,
          column: 8
        },
        end: {
          line: 218,
          column: 99
        }
      },
      "52": {
        start: {
          line: 219,
          column: 8
        },
        end: {
          line: 219,
          column: 99
        }
      },
      "53": {
        start: {
          line: 220,
          column: 8
        },
        end: {
          line: 220,
          column: 99
        }
      },
      "54": {
        start: {
          line: 221,
          column: 8
        },
        end: {
          line: 235,
          column: 9
        }
      },
      "55": {
        start: {
          line: 222,
          column: 32
        },
        end: {
          line: 227,
          column: 34
        }
      },
      "56": {
        start: {
          line: 228,
          column: 23
        },
        end: {
          line: 228,
          column: 42
        }
      },
      "57": {
        start: {
          line: 229,
          column: 25
        },
        end: {
          line: 229,
          column: 46
        }
      },
      "58": {
        start: {
          line: 230,
          column: 31
        },
        end: {
          line: 230,
          column: 73
        }
      },
      "59": {
        start: {
          line: 231,
          column: 26
        },
        end: {
          line: 231,
          column: 67
        }
      },
      "60": {
        start: {
          line: 232,
          column: 27
        },
        end: {
          line: 232,
          column: 71
        }
      },
      "61": {
        start: {
          line: 233,
          column: 31
        },
        end: {
          line: 233,
          column: 77
        }
      },
      "62": {
        start: {
          line: 234,
          column: 12
        },
        end: {
          line: 234,
          column: 101
        }
      },
      "63": {
        start: {
          line: 236,
          column: 8
        },
        end: {
          line: 236,
          column: 99
        }
      },
      "64": {
        start: {
          line: 238,
          column: 8
        },
        end: {
          line: 245,
          column: 9
        }
      },
      "65": {
        start: {
          line: 239,
          column: 12
        },
        end: {
          line: 239,
          column: 27
        }
      },
      "66": {
        start: {
          line: 240,
          column: 12
        },
        end: {
          line: 240,
          column: 34
        }
      },
      "67": {
        start: {
          line: 241,
          column: 12
        },
        end: {
          line: 241,
          column: 64
        }
      },
      "68": {
        start: {
          line: 242,
          column: 12
        },
        end: {
          line: 242,
          column: 100
        }
      },
      "69": {
        start: {
          line: 243,
          column: 12
        },
        end: {
          line: 243,
          column: 56
        }
      },
      "70": {
        start: {
          line: 244,
          column: 12
        },
        end: {
          line: 244,
          column: 62
        }
      },
      "71": {
        start: {
          line: 247,
          column: 8
        },
        end: {
          line: 254,
          column: 9
        }
      },
      "72": {
        start: {
          line: 248,
          column: 12
        },
        end: {
          line: 248,
          column: 27
        }
      },
      "73": {
        start: {
          line: 249,
          column: 12
        },
        end: {
          line: 249,
          column: 41
        }
      },
      "74": {
        start: {
          line: 250,
          column: 12
        },
        end: {
          line: 250,
          column: 83
        }
      },
      "75": {
        start: {
          line: 251,
          column: 12
        },
        end: {
          line: 251,
          column: 80
        }
      },
      "76": {
        start: {
          line: 252,
          column: 12
        },
        end: {
          line: 252,
          column: 92
        }
      },
      "77": {
        start: {
          line: 253,
          column: 12
        },
        end: {
          line: 253,
          column: 85
        }
      },
      "78": {
        start: {
          line: 255,
          column: 8
        },
        end: {
          line: 255,
          column: 32
        }
      },
      "79": {
        start: {
          line: 258,
          column: 8
        },
        end: {
          line: 258,
          column: 67
        }
      },
      "80": {
        start: {
          line: 259,
          column: 31
        },
        end: {
          line: 259,
          column: 35
        }
      },
      "81": {
        start: {
          line: 260,
          column: 22
        },
        end: {
          line: 260,
          column: 26
        }
      },
      "82": {
        start: {
          line: 262,
          column: 8
        },
        end: {
          line: 266,
          column: 11
        }
      },
      "83": {
        start: {
          line: 263,
          column: 12
        },
        end: {
          line: 263,
          column: 28
        }
      },
      "84": {
        start: {
          line: 264,
          column: 12
        },
        end: {
          line: 264,
          column: 54
        }
      },
      "85": {
        start: {
          line: 265,
          column: 12
        },
        end: {
          line: 265,
          column: 28
        }
      },
      "86": {
        start: {
          line: 267,
          column: 8
        },
        end: {
          line: 281,
          column: 9
        }
      },
      "87": {
        start: {
          line: 269,
          column: 12
        },
        end: {
          line: 269,
          column: 51
        }
      },
      "88": {
        start: {
          line: 270,
          column: 12
        },
        end: {
          line: 280,
          column: 13
        }
      },
      "89": {
        start: {
          line: 271,
          column: 31
        },
        end: {
          line: 271,
          column: 90
        }
      },
      "90": {
        start: {
          line: 272,
          column: 31
        },
        end: {
          line: 272,
          column: 64
        }
      },
      "91": {
        start: {
          line: 273,
          column: 16
        },
        end: {
          line: 273,
          column: 36
        }
      },
      "92": {
        start: {
          line: 274,
          column: 16
        },
        end: {
          line: 274,
          column: 82
        }
      },
      "93": {
        start: {
          line: 275,
          column: 16
        },
        end: {
          line: 275,
          column: 82
        }
      },
      "94": {
        start: {
          line: 275,
          column: 45
        },
        end: {
          line: 275,
          column: 80
        }
      },
      "95": {
        start: {
          line: 278,
          column: 16
        },
        end: {
          line: 278,
          column: 114
        }
      },
      "96": {
        start: {
          line: 279,
          column: 16
        },
        end: {
          line: 279,
          column: 82
        }
      },
      "97": {
        start: {
          line: 279,
          column: 45
        },
        end: {
          line: 279,
          column: 80
        }
      },
      "98": {
        start: {
          line: 282,
          column: 8
        },
        end: {
          line: 286,
          column: 10
        }
      },
      "99": {
        start: {
          line: 289,
          column: 23
        },
        end: {
          line: 289,
          column: 42
        }
      },
      "100": {
        start: {
          line: 290,
          column: 21
        },
        end: {
          line: 290,
          column: 23
        }
      },
      "101": {
        start: {
          line: 291,
          column: 8
        },
        end: {
          line: 311,
          column: 9
        }
      },
      "102": {
        start: {
          line: 292,
          column: 12
        },
        end: {
          line: 310,
          column: 13
        }
      },
      "103": {
        start: {
          line: 293,
          column: 16
        },
        end: {
          line: 293,
          column: 47
        }
      },
      "104": {
        start: {
          line: 294,
          column: 16
        },
        end: {
          line: 294,
          column: 57
        }
      },
      "105": {
        start: {
          line: 296,
          column: 17
        },
        end: {
          line: 310,
          column: 13
        }
      },
      "106": {
        start: {
          line: 297,
          column: 16
        },
        end: {
          line: 297,
          column: 47
        }
      },
      "107": {
        start: {
          line: 298,
          column: 16
        },
        end: {
          line: 306,
          column: 17
        }
      },
      "108": {
        start: {
          line: 299,
          column: 20
        },
        end: {
          line: 305,
          column: 21
        }
      },
      "109": {
        start: {
          line: 300,
          column: 24
        },
        end: {
          line: 300,
          column: 51
        }
      },
      "110": {
        start: {
          line: 301,
          column: 24
        },
        end: {
          line: 301,
          column: 64
        }
      },
      "111": {
        start: {
          line: 304,
          column: 24
        },
        end: {
          line: 304,
          column: 59
        }
      },
      "112": {
        start: {
          line: 309,
          column: 16
        },
        end: {
          line: 309,
          column: 56
        }
      },
      "113": {
        start: {
          line: 312,
          column: 8
        },
        end: {
          line: 312,
          column: 22
        }
      },
      "114": {
        start: {
          line: 315,
          column: 24
        },
        end: {
          line: 315,
          column: 45
        }
      },
      "115": {
        start: {
          line: 316,
          column: 24
        },
        end: {
          line: 316,
          column: 48
        }
      },
      "116": {
        start: {
          line: 317,
          column: 22
        },
        end: {
          line: 317,
          column: 46
        }
      },
      "117": {
        start: {
          line: 318,
          column: 8
        },
        end: {
          line: 326,
          column: 9
        }
      },
      "118": {
        start: {
          line: 319,
          column: 12
        },
        end: {
          line: 319,
          column: 48
        }
      },
      "119": {
        start: {
          line: 321,
          column: 13
        },
        end: {
          line: 326,
          column: 9
        }
      },
      "120": {
        start: {
          line: 322,
          column: 12
        },
        end: {
          line: 322,
          column: 50
        }
      },
      "121": {
        start: {
          line: 325,
          column: 12
        },
        end: {
          line: 325,
          column: 33
        }
      },
      "122": {
        start: {
          line: 329,
          column: 21
        },
        end: {
          line: 329,
          column: 40
        }
      },
      "123": {
        start: {
          line: 330,
          column: 20
        },
        end: {
          line: 330,
          column: 30
        }
      },
      "124": {
        start: {
          line: 331,
          column: 21
        },
        end: {
          line: 331,
          column: 51
        }
      },
      "125": {
        start: {
          line: 332,
          column: 8
        },
        end: {
          line: 340,
          column: 9
        }
      },
      "126": {
        start: {
          line: 333,
          column: 12
        },
        end: {
          line: 333,
          column: 30
        }
      },
      "127": {
        start: {
          line: 335,
          column: 13
        },
        end: {
          line: 340,
          column: 9
        }
      },
      "128": {
        start: {
          line: 336,
          column: 12
        },
        end: {
          line: 336,
          column: 54
        }
      },
      "129": {
        start: {
          line: 339,
          column: 12
        },
        end: {
          line: 339,
          column: 45
        }
      },
      "130": {
        start: {
          line: 343,
          column: 8
        },
        end: {
          line: 373,
          column: 2
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 8,
            column: 4
          },
          end: {
            line: 8,
            column: 5
          }
        },
        loc: {
          start: {
            line: 8,
            column: 18
          },
          end: {
            line: 50,
            column: 5
          }
        },
        line: 8
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 51,
            column: 4
          },
          end: {
            line: 51,
            column: 5
          }
        },
        loc: {
          start: {
            line: 51,
            column: 23
          },
          end: {
            line: 77,
            column: 5
          }
        },
        line: 51
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 78,
            column: 4
          },
          end: {
            line: 78,
            column: 5
          }
        },
        loc: {
          start: {
            line: 78,
            column: 59
          },
          end: {
            line: 175,
            column: 5
          }
        },
        line: 78
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 160,
            column: 66
          },
          end: {
            line: 160,
            column: 67
          }
        },
        loc: {
          start: {
            line: 160,
            column: 76
          },
          end: {
            line: 172,
            column: 13
          }
        },
        line: 160
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 176,
            column: 4
          },
          end: {
            line: 176,
            column: 5
          }
        },
        loc: {
          start: {
            line: 176,
            column: 33
          },
          end: {
            line: 186,
            column: 5
          }
        },
        line: 176
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 187,
            column: 4
          },
          end: {
            line: 187,
            column: 5
          }
        },
        loc: {
          start: {
            line: 187,
            column: 26
          },
          end: {
            line: 256,
            column: 5
          }
        },
        line: 187
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 257,
            column: 4
          },
          end: {
            line: 257,
            column: 5
          }
        },
        loc: {
          start: {
            line: 257,
            column: 64
          },
          end: {
            line: 287,
            column: 5
          }
        },
        line: 257
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 262,
            column: 29
          },
          end: {
            line: 262,
            column: 30
          }
        },
        loc: {
          start: {
            line: 262,
            column: 35
          },
          end: {
            line: 266,
            column: 9
          }
        },
        line: 262
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 275,
            column: 34
          },
          end: {
            line: 275,
            column: 35
          }
        },
        loc: {
          start: {
            line: 275,
            column: 45
          },
          end: {
            line: 275,
            column: 80
          }
        },
        line: 275
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 279,
            column: 34
          },
          end: {
            line: 279,
            column: 35
          }
        },
        loc: {
          start: {
            line: 279,
            column: 45
          },
          end: {
            line: 279,
            column: 80
          }
        },
        line: 279
      },
      "10": {
        name: "(anonymous_10)",
        decl: {
          start: {
            line: 288,
            column: 4
          },
          end: {
            line: 288,
            column: 5
          }
        },
        loc: {
          start: {
            line: 288,
            column: 28
          },
          end: {
            line: 313,
            column: 5
          }
        },
        line: 288
      },
      "11": {
        name: "(anonymous_11)",
        decl: {
          start: {
            line: 314,
            column: 4
          },
          end: {
            line: 314,
            column: 5
          }
        },
        loc: {
          start: {
            line: 314,
            column: 23
          },
          end: {
            line: 327,
            column: 5
          }
        },
        line: 314
      },
      "12": {
        name: "(anonymous_12)",
        decl: {
          start: {
            line: 328,
            column: 4
          },
          end: {
            line: 328,
            column: 5
          }
        },
        loc: {
          start: {
            line: 328,
            column: 26
          },
          end: {
            line: 341,
            column: 5
          }
        },
        line: 328
      },
      "13": {
        name: "(anonymous_13)",
        decl: {
          start: {
            line: 342,
            column: 4
          },
          end: {
            line: 342,
            column: 5
          }
        },
        loc: {
          start: {
            line: 342,
            column: 14
          },
          end: {
            line: 374,
            column: 5
          }
        },
        line: 342
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 53,
            column: 27
          },
          end: {
            line: 53,
            column: 58
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 53,
            column: 27
          },
          end: {
            line: 53,
            column: 47
          }
        }, {
          start: {
            line: 53,
            column: 51
          },
          end: {
            line: 53,
            column: 58
          }
        }],
        line: 53
      },
      "1": {
        loc: {
          start: {
            line: 54,
            column: 29
          },
          end: {
            line: 54,
            column: 60
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 54,
            column: 29
          },
          end: {
            line: 54,
            column: 51
          }
        }, {
          start: {
            line: 54,
            column: 55
          },
          end: {
            line: 54,
            column: 60
          }
        }],
        line: 54
      },
      "2": {
        loc: {
          start: {
            line: 55,
            column: 26
          },
          end: {
            line: 55,
            column: 54
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 55,
            column: 26
          },
          end: {
            line: 55,
            column: 45
          }
        }, {
          start: {
            line: 55,
            column: 49
          },
          end: {
            line: 55,
            column: 54
          }
        }],
        line: 55
      },
      "3": {
        loc: {
          start: {
            line: 56,
            column: 31
          },
          end: {
            line: 56,
            column: 68
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 56,
            column: 31
          },
          end: {
            line: 56,
            column: 59
          }
        }, {
          start: {
            line: 56,
            column: 63
          },
          end: {
            line: 56,
            column: 68
          }
        }],
        line: 56
      },
      "4": {
        loc: {
          start: {
            line: 57,
            column: 31
          },
          end: {
            line: 57,
            column: 68
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 57,
            column: 31
          },
          end: {
            line: 57,
            column: 59
          }
        }, {
          start: {
            line: 57,
            column: 63
          },
          end: {
            line: 57,
            column: 68
          }
        }],
        line: 57
      },
      "5": {
        loc: {
          start: {
            line: 58,
            column: 12
          },
          end: {
            line: 60,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 58,
            column: 12
          },
          end: {
            line: 60,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 58
      },
      "6": {
        loc: {
          start: {
            line: 73,
            column: 48
          },
          end: {
            line: 73,
            column: 102
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 73,
            column: 73
          },
          end: {
            line: 73,
            column: 86
          }
        }, {
          start: {
            line: 73,
            column: 89
          },
          end: {
            line: 73,
            column: 102
          }
        }],
        line: 73
      },
      "7": {
        loc: {
          start: {
            line: 129,
            column: 8
          },
          end: {
            line: 138,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 129,
            column: 8
          },
          end: {
            line: 138,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 129
      },
      "8": {
        loc: {
          start: {
            line: 139,
            column: 8
          },
          end: {
            line: 157,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 139,
            column: 8
          },
          end: {
            line: 157,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 139
      },
      "9": {
        loc: {
          start: {
            line: 158,
            column: 8
          },
          end: {
            line: 173,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 158,
            column: 8
          },
          end: {
            line: 173,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 158
      },
      "10": {
        loc: {
          start: {
            line: 169,
            column: 29
          },
          end: {
            line: 169,
            column: 60
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 169,
            column: 55
          },
          end: {
            line: 169,
            column: 56
          }
        }, {
          start: {
            line: 169,
            column: 59
          },
          end: {
            line: 169,
            column: 60
          }
        }],
        line: 169
      },
      "11": {
        loc: {
          start: {
            line: 177,
            column: 8
          },
          end: {
            line: 185,
            column: 9
          }
        },
        type: "switch",
        locations: [{
          start: {
            line: 178,
            column: 12
          },
          end: {
            line: 179,
            column: 55
          }
        }, {
          start: {
            line: 180,
            column: 12
          },
          end: {
            line: 181,
            column: 43
          }
        }, {
          start: {
            line: 182,
            column: 12
          },
          end: {
            line: 182,
            column: 25
          }
        }, {
          start: {
            line: 183,
            column: 12
          },
          end: {
            line: 184,
            column: 50
          }
        }],
        line: 177
      },
      "12": {
        loc: {
          start: {
            line: 203,
            column: 32
          },
          end: {
            line: 203,
            column: 81
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 203,
            column: 54
          },
          end: {
            line: 203,
            column: 65
          }
        }, {
          start: {
            line: 203,
            column: 68
          },
          end: {
            line: 203,
            column: 81
          }
        }],
        line: 203
      },
      "13": {
        loc: {
          start: {
            line: 222,
            column: 32
          },
          end: {
            line: 227,
            column: 34
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 222,
            column: 32
          },
          end: {
            line: 227,
            column: 27
          }
        }, {
          start: {
            line: 227,
            column: 31
          },
          end: {
            line: 227,
            column: 34
          }
        }],
        line: 222
      },
      "14": {
        loc: {
          start: {
            line: 238,
            column: 8
          },
          end: {
            line: 245,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 238,
            column: 8
          },
          end: {
            line: 245,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 238
      },
      "15": {
        loc: {
          start: {
            line: 242,
            column: 36
          },
          end: {
            line: 242,
            column: 96
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 242,
            column: 62
          },
          end: {
            line: 242,
            column: 76
          }
        }, {
          start: {
            line: 242,
            column: 79
          },
          end: {
            line: 242,
            column: 96
          }
        }],
        line: 242
      },
      "16": {
        loc: {
          start: {
            line: 247,
            column: 8
          },
          end: {
            line: 254,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 247,
            column: 8
          },
          end: {
            line: 254,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 247
      },
      "17": {
        loc: {
          start: {
            line: 278,
            column: 56
          },
          end: {
            line: 278,
            column: 110
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 278,
            column: 81
          },
          end: {
            line: 278,
            column: 94
          }
        }, {
          start: {
            line: 278,
            column: 97
          },
          end: {
            line: 278,
            column: 110
          }
        }],
        line: 278
      },
      "18": {
        loc: {
          start: {
            line: 288,
            column: 16
          },
          end: {
            line: 288,
            column: 26
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 288,
            column: 25
          },
          end: {
            line: 288,
            column: 26
          }
        }],
        line: 288
      },
      "19": {
        loc: {
          start: {
            line: 292,
            column: 12
          },
          end: {
            line: 310,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 292,
            column: 12
          },
          end: {
            line: 310,
            column: 13
          }
        }, {
          start: {
            line: 296,
            column: 17
          },
          end: {
            line: 310,
            column: 13
          }
        }],
        line: 292
      },
      "20": {
        loc: {
          start: {
            line: 292,
            column: 16
          },
          end: {
            line: 292,
            column: 84
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 292,
            column: 16
          },
          end: {
            line: 292,
            column: 41
          }
        }, {
          start: {
            line: 292,
            column: 45
          },
          end: {
            line: 292,
            column: 59
          }
        }, {
          start: {
            line: 292,
            column: 63
          },
          end: {
            line: 292,
            column: 84
          }
        }],
        line: 292
      },
      "21": {
        loc: {
          start: {
            line: 296,
            column: 17
          },
          end: {
            line: 310,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 296,
            column: 17
          },
          end: {
            line: 310,
            column: 13
          }
        }, {
          start: {
            line: 308,
            column: 17
          },
          end: {
            line: 310,
            column: 13
          }
        }],
        line: 296
      },
      "22": {
        loc: {
          start: {
            line: 299,
            column: 20
          },
          end: {
            line: 305,
            column: 21
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 299,
            column: 20
          },
          end: {
            line: 305,
            column: 21
          }
        }, {
          start: {
            line: 303,
            column: 25
          },
          end: {
            line: 305,
            column: 21
          }
        }],
        line: 299
      },
      "23": {
        loc: {
          start: {
            line: 318,
            column: 8
          },
          end: {
            line: 326,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 318,
            column: 8
          },
          end: {
            line: 326,
            column: 9
          }
        }, {
          start: {
            line: 321,
            column: 13
          },
          end: {
            line: 326,
            column: 9
          }
        }],
        line: 318
      },
      "24": {
        loc: {
          start: {
            line: 321,
            column: 13
          },
          end: {
            line: 326,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 321,
            column: 13
          },
          end: {
            line: 326,
            column: 9
          }
        }, {
          start: {
            line: 324,
            column: 13
          },
          end: {
            line: 326,
            column: 9
          }
        }],
        line: 321
      },
      "25": {
        loc: {
          start: {
            line: 332,
            column: 8
          },
          end: {
            line: 340,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 332,
            column: 8
          },
          end: {
            line: 340,
            column: 9
          }
        }, {
          start: {
            line: 335,
            column: 13
          },
          end: {
            line: 340,
            column: 9
          }
        }],
        line: 332
      },
      "26": {
        loc: {
          start: {
            line: 335,
            column: 13
          },
          end: {
            line: 340,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 335,
            column: 13
          },
          end: {
            line: 340,
            column: 9
          }
        }, {
          start: {
            line: 338,
            column: 13
          },
          end: {
            line: 340,
            column: 9
          }
        }],
        line: 335
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0,
      "74": 0,
      "75": 0,
      "76": 0,
      "77": 0,
      "78": 0,
      "79": 0,
      "80": 0,
      "81": 0,
      "82": 0,
      "83": 0,
      "84": 0,
      "85": 0,
      "86": 0,
      "87": 0,
      "88": 0,
      "89": 0,
      "90": 0,
      "91": 0,
      "92": 0,
      "93": 0,
      "94": 0,
      "95": 0,
      "96": 0,
      "97": 0,
      "98": 0,
      "99": 0,
      "100": 0,
      "101": 0,
      "102": 0,
      "103": 0,
      "104": 0,
      "105": 0,
      "106": 0,
      "107": 0,
      "108": 0,
      "109": 0,
      "110": 0,
      "111": 0,
      "112": 0,
      "113": 0,
      "114": 0,
      "115": 0,
      "116": 0,
      "117": 0,
      "118": 0,
      "119": 0,
      "120": 0,
      "121": 0,
      "122": 0,
      "123": 0,
      "124": 0,
      "125": 0,
      "126": 0,
      "127": 0,
      "128": 0,
      "129": 0,
      "130": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0, 0],
      "10": [0, 0],
      "11": [0, 0, 0, 0],
      "12": [0, 0],
      "13": [0, 0],
      "14": [0, 0],
      "15": [0, 0],
      "16": [0, 0],
      "17": [0, 0],
      "18": [0],
      "19": [0, 0],
      "20": [0, 0, 0],
      "21": [0, 0],
      "22": [0, 0],
      "23": [0, 0],
      "24": [0, 0],
      "25": [0, 0],
      "26": [0, 0]
    },
    inputSourceMap: {
      file: "/home/mhugo/code/claude-code-flow/src/cli/commands/status/status-command.ts",
      mappings: "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",
      names: [],
      sources: ["/home/mhugo/code/claude-code-flow/src/cli/commands/status/status-command.ts"],
      sourcesContent: ["/**\n * Status Command Implementation\n * \n * Shows swarm status, configuration, and active agents\n */\n\nimport { BaseCommand } from '../../core/base-command.js';\nimport type { CommandContext, CommandResult } from '../../types/index.js';\n\ninterface SwarmStatus {\n  active: boolean;\n  topology: string;\n  agents: AgentInfo[];\n  memory: MemoryInfo;\n  performance: PerformanceMetrics;\n}\n\ninterface AgentInfo {\n  id: string;\n  type: string;\n  status: 'active' | 'idle' | 'busy' | 'error';\n  uptime: number;\n  tasksCompleted: number;\n  lastActivity: string;\n}\n\ninterface MemoryInfo {\n  provider: string;\n  connected: boolean;\n  size: string;\n  entries: number;\n}\n\ninterface PerformanceMetrics {\n  totalTasks: number;\n  completedTasks: number;\n  failedTasks: number;\n  averageResponseTime: number;\n  currentLoad: number;\n}\n\nexport class StatusCommand extends BaseCommand {\n  constructor() {\n    super({\n      name: 'status',\n      description: 'Show swarm status, configuration, and active agents',\n      usage: 'claude-flow status [options]',\n      category: 'core',\n      minArgs: 0,\n      maxArgs: 0,\n      examples: [\n        'claude-flow status',\n        'claude-flow status --format json',\n        'claude-flow status --detailed',\n        'claude-flow status --watch'\n      ],\n      flags: {\n        format: {\n          type: 'string',\n          description: 'Output format (table, json, yaml)',\n          default: 'table'\n        },\n        detailed: {\n          type: 'boolean',\n          description: 'Show detailed status information',\n          default: false\n        },\n        watch: {\n          type: 'boolean',\n          description: 'Watch status changes in real-time',\n          default: false\n        },\n        'show-config': {\n          type: 'boolean',\n          description: 'Include configuration in output',\n          default: false\n        },\n        'show-memory': {\n          type: 'boolean',\n          description: 'Include memory statistics',\n          default: false\n        }\n      }\n    });\n  }\n\n  protected async run(context: CommandContext): Promise<CommandResult> {\n    try {\n      const format = context.flags.format as string || 'table';\n      const detailed = context.flags.detailed as boolean || false;\n      const watch = context.flags.watch as boolean || false;\n      const showConfig = context.flags['show-config'] as boolean || false;\n      const showMemory = context.flags['show-memory'] as boolean || false;\n\n      if (watch) {\n        return await this.watchStatus(format, detailed, showConfig, showMemory);\n      }\n\n      const status = await this.getSwarmStatus(detailed, showConfig, showMemory);\n      const output = this.formatOutput(status, format);\n\n      return {\n        success: true,\n        exitCode: 0,\n        message: output,\n        data: status\n      };\n    } catch (error) {\n      return {\n        success: false,\n        error: `Failed to get status: ${error instanceof Error ? error.message : String(error)}`,\n        exitCode: 1\n      };\n    }\n  }\n\n  private async getSwarmStatus(detailed: boolean, showConfig: boolean, showMemory: boolean): Promise<any> {\n    // This would integrate with the actual swarm system\n    // For now, we'll return mock data to demonstrate the structure\n    \n    const baseStatus = {\n      swarm: {\n        active: true,\n        topology: 'mesh',\n        agents: [\n          {\n            id: 'agent-001',\n            type: 'researcher',\n            status: 'active' as const,\n            uptime: 1800000, // 30 minutes in ms\n            tasksCompleted: 15,\n            lastActivity: new Date(Date.now() - 30000).toISOString()\n          },\n          {\n            id: 'agent-002',\n            type: 'analyst',\n            status: 'idle' as const,\n            uptime: 1680000, // 28 minutes in ms\n            tasksCompleted: 8,\n            lastActivity: new Date(Date.now() - 300000).toISOString()\n          },\n          {\n            id: 'agent-003',\n            type: 'coder',\n            status: 'busy' as const,\n            uptime: 900000, // 15 minutes in ms\n            tasksCompleted: 22,\n            lastActivity: new Date(Date.now() - 5000).toISOString()\n          }\n        ],\n        performance: {\n          totalTasks: 67,\n          completedTasks: 45,\n          failedTasks: 2,\n          averageResponseTime: 1250,\n          currentLoad: 0.65\n        }\n      },\n      system: {\n        version: '2.0.0',\n        uptime: Date.now() - 2100000, // 35 minutes ago\n        pid: process.pid,\n        nodeVersion: process.version,\n        platform: process.platform,\n        arch: process.arch,\n        memoryUsage: process.memoryUsage()\n      }\n    };\n\n    if (showMemory) {\n      baseStatus.memory = {\n        provider: 'sqlite',\n        connected: true,\n        size: '2.4 MB',\n        entries: 156,\n        connections: 3,\n        queries: 1247\n      };\n    }\n\n    if (showConfig) {\n      baseStatus.configuration = {\n        swarm: {\n          topology: 'mesh',\n          maxAgents: 8,\n          strategy: 'balanced'\n        },\n        neural: {\n          enabled: true,\n          models: ['claude-3-haiku', 'claude-3-sonnet'],\n          defaultModel: 'claude-3-haiku'\n        },\n        memory: {\n          provider: 'sqlite',\n          persistent: true,\n          maxSize: '100MB'\n        }\n      };\n    }\n\n    if (detailed) {\n      // Add detailed information for each agent\n      baseStatus.swarm.agents = baseStatus.swarm.agents.map(agent => ({\n        ...agent,\n        memory: {\n          heap: Math.floor(Math.random() * 50) + 10,\n          external: Math.floor(Math.random() * 20) + 5\n        },\n        cpu: Math.floor(Math.random() * 30) + 5,\n        tasks: {\n          queued: Math.floor(Math.random() * 5),\n          running: agent.status === 'busy' ? 1 : 0,\n          completed: agent.tasksCompleted\n        }\n      }));\n    }\n\n    return baseStatus;\n  }\n\n  private formatOutput(status: any, format: string): string {\n    switch (format.toLowerCase()) {\n      case 'json':\n        return JSON.stringify(status, null, 2);\n      \n      case 'yaml':\n        return this.toYaml(status);\n      \n      case 'table':\n      default:\n        return this.formatAsTable(status);\n    }\n  }\n\n  private formatAsTable(status: any): string {\n    const lines: string[] = [];\n    \n    // Header\n    lines.push('Claude Flow Status');\n    lines.push('='.repeat(50));\n    lines.push('');\n\n    // System information\n    lines.push('System:');\n    lines.push(`  Version: ${status.system.version}`);\n    lines.push(`  Uptime: ${this.formatDuration(Date.now() - status.system.uptime)}`);\n    lines.push(`  Platform: ${status.system.platform} (${status.system.arch})`);\n    lines.push(`  Node.js: ${status.system.nodeVersion}`);\n    lines.push(`  Memory: ${Math.round(status.system.memoryUsage.heapUsed / 1024 / 1024)}MB`);\n    lines.push('');\n\n    // Swarm information\n    lines.push('Swarm:');\n    lines.push(`  Status: ${status.swarm.active ? '\uD83D\uDFE2 Active' : '\uD83D\uDD34 Inactive'}`);\n    lines.push(`  Topology: ${status.swarm.topology}`);\n    lines.push(`  Agents: ${status.swarm.agents.length} active`);\n    lines.push('');\n\n    // Performance metrics\n    const perf = status.swarm.performance;\n    lines.push('Performance:');\n    lines.push(`  Total Tasks: ${perf.totalTasks}`);\n    lines.push(`  Completed: ${perf.completedTasks} (${Math.round(perf.completedTasks / perf.totalTasks * 100)}%)`);\n    lines.push(`  Failed: ${perf.failedTasks}`);\n    lines.push(`  Avg Response: ${perf.averageResponseTime}ms`);\n    lines.push(`  Current Load: ${Math.round(perf.currentLoad * 100)}%`);\n    lines.push('');\n\n    // Agents table\n    lines.push('Active Agents:');\n    lines.push('\u250C\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252C\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252C\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252C\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252C\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252C\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510');\n    lines.push('\u2502 Agent ID   \u2502 Type       \u2502 Status  \u2502 Tasks   \u2502 Uptime      \u2502 Last Active  \u2502');\n    lines.push('\u251C\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253C\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253C\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253C\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253C\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253C\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524');\n    \n    for (const agent of status.swarm.agents) {\n      const statusEmoji = {\n        active: '\uD83D\uDFE2',\n        idle: '\uD83D\uDFE1',\n        busy: '\uD83D\uDD35',\n        error: '\uD83D\uDD34'\n      }[agent.status] || '\u26AA';\n      \n      const id = agent.id.padEnd(10);\n      const type = agent.type.padEnd(10);\n      const statusText = `${statusEmoji} ${agent.status}`.padEnd(7);\n      const tasks = agent.tasksCompleted.toString().padEnd(7);\n      const uptime = this.formatDuration(agent.uptime).padEnd(11);\n      const lastActive = this.formatTime(agent.lastActivity).padEnd(12);\n      \n      lines.push(`\u2502 ${id} \u2502 ${type} \u2502 ${statusText} \u2502 ${tasks} \u2502 ${uptime} \u2502 ${lastActive} \u2502`);\n    }\n    \n    lines.push('\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518');\n\n    // Memory information (if requested)\n    if (status.memory) {\n      lines.push('');\n      lines.push('Memory:');\n      lines.push(`  Provider: ${status.memory.provider}`);\n      lines.push(`  Status: ${status.memory.connected ? '\uD83D\uDFE2 Connected' : '\uD83D\uDD34 Disconnected'}`);\n      lines.push(`  Size: ${status.memory.size}`);\n      lines.push(`  Entries: ${status.memory.entries}`);\n    }\n\n    // Configuration (if requested)\n    if (status.configuration) {\n      lines.push('');\n      lines.push('Configuration:');\n      lines.push(`  Swarm Topology: ${status.configuration.swarm.topology}`);\n      lines.push(`  Max Agents: ${status.configuration.swarm.maxAgents}`);\n      lines.push(`  Neural Models: ${status.configuration.neural.models.join(', ')}`);\n      lines.push(`  Memory Provider: ${status.configuration.memory.provider}`);\n    }\n\n    return lines.join('\\n');\n  }\n\n  private async watchStatus(format: string, detailed: boolean, showConfig: boolean, showMemory: boolean): Promise<CommandResult> {\n    console.log('Watching status (Press Ctrl+C to exit)...\\n');\n\n    const updateInterval = 2000; // 2 seconds\n    let running = true;\n\n    // Handle graceful shutdown\n    process.on('SIGINT', () => {\n      running = false;\n      console.log('\\nStatus watching stopped.');\n      process.exit(0);\n    });\n\n    while (running) {\n      // Clear console\n      process.stdout.write('\\x1B[2J\\x1B[0f');\n      \n      try {\n        const status = await this.getSwarmStatus(detailed, showConfig, showMemory);\n        const output = this.formatOutput(status, format);\n        \n        console.log(output);\n        console.log(`\\nLast updated: ${new Date().toLocaleTimeString()}`);\n        \n        await new Promise(resolve => setTimeout(resolve, updateInterval));\n      } catch (error) {\n        console.error(`Error updating status: ${error instanceof Error ? error.message : String(error)}`);\n        await new Promise(resolve => setTimeout(resolve, updateInterval));\n      }\n    }\n\n    return {\n      success: true,\n      exitCode: 0,\n      message: 'Status watching completed'\n    };\n  }\n\n  private toYaml(obj: any, indent = 0): string {\n    const spaces = '  '.repeat(indent);\n    let result = '';\n    \n    for (const [key, value] of Object.entries(obj)) {\n      if (typeof value === 'object' && value !== null && !Array.isArray(value)) {\n        result += `${spaces}${key}:\\n`;\n        result += this.toYaml(value, indent + 1);\n      } else if (Array.isArray(value)) {\n        result += `${spaces}${key}:\\n`;\n        for (const item of value) {\n          if (typeof item === 'object') {\n            result += `${spaces}  -\\n`;\n            result += this.toYaml(item, indent + 2);\n          } else {\n            result += `${spaces}  - ${item}\\n`;\n          }\n        }\n      } else {\n        result += `${spaces}${key}: ${value}\\n`;\n      }\n    }\n    \n    return result;\n  }\n\n  private formatDuration(ms: number): string {\n    const seconds = Math.floor(ms / 1000);\n    const minutes = Math.floor(seconds / 60);\n    const hours = Math.floor(minutes / 60);\n    \n    if (hours > 0) {\n      return `${hours}h ${minutes % 60}m`;\n    } else if (minutes > 0) {\n      return `${minutes}m ${seconds % 60}s`;\n    } else {\n      return `${seconds}s`;\n    }\n  }\n\n  private formatTime(timestamp: string): string {\n    const date = new Date(timestamp);\n    const now = new Date();\n    const diff = now.getTime() - date.getTime();\n    \n    if (diff < 60000) { // Less than 1 minute\n      return 'Just now';\n    } else if (diff < 3600000) { // Less than 1 hour\n      return `${Math.floor(diff / 60000)}m ago`;\n    } else {\n      return date.toLocaleTimeString();\n    }\n  }\n\n  getHelp(): string {\n    return `Show swarm status, configuration, and active agents\n\nUSAGE:\n  claude-flow status [options]\n\nOPTIONS:\n  --format <format>     Output format (table, json, yaml) [default: table]\n  --detailed           Show detailed status information\n  --watch              Watch status changes in real-time\n  --show-config        Include configuration in output\n  --show-memory        Include memory statistics\n  -h, --help           Show help\n\nEXAMPLES:\n  claude-flow status\n  claude-flow status --format json\n  claude-flow status --detailed\n  claude-flow status --watch\n  claude-flow status --show-config --show-memory\n\nThe status command shows:\n- System information (version, uptime, platform)\n- Swarm status and topology\n- Active agents and their status\n- Performance metrics\n- Memory usage (with --show-memory)\n- Configuration (with --show-config)\n\nUse --watch to monitor status changes in real-time.\nUse --detailed for comprehensive agent information.\n`;\n  }\n}"],
      version: 3
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "e9a8c801469766381faf88101b82061405ce43a0"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_3hjoc1vel = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_3hjoc1vel();
/**
 * Status Command Implementation
 *
 * Shows swarm status, configuration, and active agents
 */
import { BaseCommand } from '../../core/base-command.js';
export class StatusCommand extends BaseCommand {
  constructor() {
    /* istanbul ignore next */
    cov_3hjoc1vel().f[0]++;
    cov_3hjoc1vel().s[0]++;
    super({
      name: 'status',
      description: 'Show swarm status, configuration, and active agents',
      usage: 'claude-flow status [options]',
      category: 'core',
      minArgs: 0,
      maxArgs: 0,
      examples: ['claude-flow status', 'claude-flow status --format json', 'claude-flow status --detailed', 'claude-flow status --watch'],
      flags: {
        format: {
          type: 'string',
          description: 'Output format (table, json, yaml)',
          default: 'table'
        },
        detailed: {
          type: 'boolean',
          description: 'Show detailed status information',
          default: false
        },
        watch: {
          type: 'boolean',
          description: 'Watch status changes in real-time',
          default: false
        },
        'show-config': {
          type: 'boolean',
          description: 'Include configuration in output',
          default: false
        },
        'show-memory': {
          type: 'boolean',
          description: 'Include memory statistics',
          default: false
        }
      }
    });
  }
  async run(context) {
    /* istanbul ignore next */
    cov_3hjoc1vel().f[1]++;
    cov_3hjoc1vel().s[1]++;
    try {
      const format =
      /* istanbul ignore next */
      (cov_3hjoc1vel().s[2]++,
      /* istanbul ignore next */
      (cov_3hjoc1vel().b[0][0]++, context.flags.format) ||
      /* istanbul ignore next */
      (cov_3hjoc1vel().b[0][1]++, 'table'));
      const detailed =
      /* istanbul ignore next */
      (cov_3hjoc1vel().s[3]++,
      /* istanbul ignore next */
      (cov_3hjoc1vel().b[1][0]++, context.flags.detailed) ||
      /* istanbul ignore next */
      (cov_3hjoc1vel().b[1][1]++, false));
      const watch =
      /* istanbul ignore next */
      (cov_3hjoc1vel().s[4]++,
      /* istanbul ignore next */
      (cov_3hjoc1vel().b[2][0]++, context.flags.watch) ||
      /* istanbul ignore next */
      (cov_3hjoc1vel().b[2][1]++, false));
      const showConfig =
      /* istanbul ignore next */
      (cov_3hjoc1vel().s[5]++,
      /* istanbul ignore next */
      (cov_3hjoc1vel().b[3][0]++, context.flags['show-config']) ||
      /* istanbul ignore next */
      (cov_3hjoc1vel().b[3][1]++, false));
      const showMemory =
      /* istanbul ignore next */
      (cov_3hjoc1vel().s[6]++,
      /* istanbul ignore next */
      (cov_3hjoc1vel().b[4][0]++, context.flags['show-memory']) ||
      /* istanbul ignore next */
      (cov_3hjoc1vel().b[4][1]++, false));
      /* istanbul ignore next */
      cov_3hjoc1vel().s[7]++;
      if (watch) {
        /* istanbul ignore next */
        cov_3hjoc1vel().b[5][0]++;
        cov_3hjoc1vel().s[8]++;
        return await this.watchStatus(format, detailed, showConfig, showMemory);
      } else
      /* istanbul ignore next */
      {
        cov_3hjoc1vel().b[5][1]++;
      }
      const status =
      /* istanbul ignore next */
      (cov_3hjoc1vel().s[9]++, await this.getSwarmStatus(detailed, showConfig, showMemory));
      const output =
      /* istanbul ignore next */
      (cov_3hjoc1vel().s[10]++, this.formatOutput(status, format));
      /* istanbul ignore next */
      cov_3hjoc1vel().s[11]++;
      return {
        success: true,
        exitCode: 0,
        message: output,
        data: status
      };
    } catch (error) {
      /* istanbul ignore next */
      cov_3hjoc1vel().s[12]++;
      return {
        success: false,
        error: `Failed to get status: ${error instanceof Error ?
        /* istanbul ignore next */
        (cov_3hjoc1vel().b[6][0]++, error.message) :
        /* istanbul ignore next */
        (cov_3hjoc1vel().b[6][1]++, String(error))}`,
        exitCode: 1
      };
    }
  }
  async getSwarmStatus(detailed, showConfig, showMemory) {
    /* istanbul ignore next */
    cov_3hjoc1vel().f[2]++;
    // This would integrate with the actual swarm system
    // For now, we'll return mock data to demonstrate the structure
    const baseStatus =
    /* istanbul ignore next */
    (cov_3hjoc1vel().s[13]++, {
      swarm: {
        active: true,
        topology: 'mesh',
        agents: [{
          id: 'agent-001',
          type: 'researcher',
          status: 'active',
          uptime: 1800000,
          // 30 minutes in ms
          tasksCompleted: 15,
          lastActivity: new Date(Date.now() - 30000).toISOString()
        }, {
          id: 'agent-002',
          type: 'analyst',
          status: 'idle',
          uptime: 1680000,
          // 28 minutes in ms
          tasksCompleted: 8,
          lastActivity: new Date(Date.now() - 300000).toISOString()
        }, {
          id: 'agent-003',
          type: 'coder',
          status: 'busy',
          uptime: 900000,
          // 15 minutes in ms
          tasksCompleted: 22,
          lastActivity: new Date(Date.now() - 5000).toISOString()
        }],
        performance: {
          totalTasks: 67,
          completedTasks: 45,
          failedTasks: 2,
          averageResponseTime: 1250,
          currentLoad: 0.65
        }
      },
      system: {
        version: '2.0.0',
        uptime: Date.now() - 2100000,
        // 35 minutes ago
        pid: process.pid,
        nodeVersion: process.version,
        platform: process.platform,
        arch: process.arch,
        memoryUsage: process.memoryUsage()
      }
    });
    /* istanbul ignore next */
    cov_3hjoc1vel().s[14]++;
    if (showMemory) {
      /* istanbul ignore next */
      cov_3hjoc1vel().b[7][0]++;
      cov_3hjoc1vel().s[15]++;
      baseStatus.memory = {
        provider: 'sqlite',
        connected: true,
        size: '2.4 MB',
        entries: 156,
        connections: 3,
        queries: 1247
      };
    } else
    /* istanbul ignore next */
    {
      cov_3hjoc1vel().b[7][1]++;
    }
    cov_3hjoc1vel().s[16]++;
    if (showConfig) {
      /* istanbul ignore next */
      cov_3hjoc1vel().b[8][0]++;
      cov_3hjoc1vel().s[17]++;
      baseStatus.configuration = {
        swarm: {
          topology: 'mesh',
          maxAgents: 8,
          strategy: 'balanced'
        },
        neural: {
          enabled: true,
          models: ['claude-3-haiku', 'claude-3-sonnet'],
          defaultModel: 'claude-3-haiku'
        },
        memory: {
          provider: 'sqlite',
          persistent: true,
          maxSize: '100MB'
        }
      };
    } else
    /* istanbul ignore next */
    {
      cov_3hjoc1vel().b[8][1]++;
    }
    cov_3hjoc1vel().s[18]++;
    if (detailed) {
      /* istanbul ignore next */
      cov_3hjoc1vel().b[9][0]++;
      cov_3hjoc1vel().s[19]++;
      // Add detailed information for each agent
      baseStatus.swarm.agents = baseStatus.swarm.agents.map(agent => {
        /* istanbul ignore next */
        cov_3hjoc1vel().f[3]++;
        cov_3hjoc1vel().s[20]++;
        return {
          ...agent,
          memory: {
            heap: Math.floor(Math.random() * 50) + 10,
            external: Math.floor(Math.random() * 20) + 5
          },
          cpu: Math.floor(Math.random() * 30) + 5,
          tasks: {
            queued: Math.floor(Math.random() * 5),
            running: agent.status === 'busy' ?
            /* istanbul ignore next */
            (cov_3hjoc1vel().b[10][0]++, 1) :
            /* istanbul ignore next */
            (cov_3hjoc1vel().b[10][1]++, 0),
            completed: agent.tasksCompleted
          }
        };
      });
    } else
    /* istanbul ignore next */
    {
      cov_3hjoc1vel().b[9][1]++;
    }
    cov_3hjoc1vel().s[21]++;
    return baseStatus;
  }
  formatOutput(status, format) {
    /* istanbul ignore next */
    cov_3hjoc1vel().f[4]++;
    cov_3hjoc1vel().s[22]++;
    switch (format.toLowerCase()) {
      case 'json':
        /* istanbul ignore next */
        cov_3hjoc1vel().b[11][0]++;
        cov_3hjoc1vel().s[23]++;
        return JSON.stringify(status, null, 2);
      case 'yaml':
        /* istanbul ignore next */
        cov_3hjoc1vel().b[11][1]++;
        cov_3hjoc1vel().s[24]++;
        return this.toYaml(status);
      case 'table':
        /* istanbul ignore next */
        cov_3hjoc1vel().b[11][2]++;
      default:
        /* istanbul ignore next */
        cov_3hjoc1vel().b[11][3]++;
        cov_3hjoc1vel().s[25]++;
        return this.formatAsTable(status);
    }
  }
  formatAsTable(status) {
    /* istanbul ignore next */
    cov_3hjoc1vel().f[5]++;
    const lines =
    /* istanbul ignore next */
    (cov_3hjoc1vel().s[26]++, []);
    // Header
    /* istanbul ignore next */
    cov_3hjoc1vel().s[27]++;
    lines.push('Claude Flow Status');
    /* istanbul ignore next */
    cov_3hjoc1vel().s[28]++;
    lines.push('='.repeat(50));
    /* istanbul ignore next */
    cov_3hjoc1vel().s[29]++;
    lines.push('');
    // System information
    /* istanbul ignore next */
    cov_3hjoc1vel().s[30]++;
    lines.push('System:');
    /* istanbul ignore next */
    cov_3hjoc1vel().s[31]++;
    lines.push(`  Version: ${status.system.version}`);
    /* istanbul ignore next */
    cov_3hjoc1vel().s[32]++;
    lines.push(`  Uptime: ${this.formatDuration(Date.now() - status.system.uptime)}`);
    /* istanbul ignore next */
    cov_3hjoc1vel().s[33]++;
    lines.push(`  Platform: ${status.system.platform} (${status.system.arch})`);
    /* istanbul ignore next */
    cov_3hjoc1vel().s[34]++;
    lines.push(`  Node.js: ${status.system.nodeVersion}`);
    /* istanbul ignore next */
    cov_3hjoc1vel().s[35]++;
    lines.push(`  Memory: ${Math.round(status.system.memoryUsage.heapUsed / 1024 / 1024)}MB`);
    /* istanbul ignore next */
    cov_3hjoc1vel().s[36]++;
    lines.push('');
    // Swarm information
    /* istanbul ignore next */
    cov_3hjoc1vel().s[37]++;
    lines.push('Swarm:');
    /* istanbul ignore next */
    cov_3hjoc1vel().s[38]++;
    lines.push(`  Status: ${status.swarm.active ?
    /* istanbul ignore next */
    (cov_3hjoc1vel().b[12][0]++, '🟢 Active') :
    /* istanbul ignore next */
    (cov_3hjoc1vel().b[12][1]++, '🔴 Inactive')}`);
    /* istanbul ignore next */
    cov_3hjoc1vel().s[39]++;
    lines.push(`  Topology: ${status.swarm.topology}`);
    /* istanbul ignore next */
    cov_3hjoc1vel().s[40]++;
    lines.push(`  Agents: ${status.swarm.agents.length} active`);
    /* istanbul ignore next */
    cov_3hjoc1vel().s[41]++;
    lines.push('');
    // Performance metrics
    const perf =
    /* istanbul ignore next */
    (cov_3hjoc1vel().s[42]++, status.swarm.performance);
    /* istanbul ignore next */
    cov_3hjoc1vel().s[43]++;
    lines.push('Performance:');
    /* istanbul ignore next */
    cov_3hjoc1vel().s[44]++;
    lines.push(`  Total Tasks: ${perf.totalTasks}`);
    /* istanbul ignore next */
    cov_3hjoc1vel().s[45]++;
    lines.push(`  Completed: ${perf.completedTasks} (${Math.round(perf.completedTasks / perf.totalTasks * 100)}%)`);
    /* istanbul ignore next */
    cov_3hjoc1vel().s[46]++;
    lines.push(`  Failed: ${perf.failedTasks}`);
    /* istanbul ignore next */
    cov_3hjoc1vel().s[47]++;
    lines.push(`  Avg Response: ${perf.averageResponseTime}ms`);
    /* istanbul ignore next */
    cov_3hjoc1vel().s[48]++;
    lines.push(`  Current Load: ${Math.round(perf.currentLoad * 100)}%`);
    /* istanbul ignore next */
    cov_3hjoc1vel().s[49]++;
    lines.push('');
    // Agents table
    /* istanbul ignore next */
    cov_3hjoc1vel().s[50]++;
    lines.push('Active Agents:');
    /* istanbul ignore next */
    cov_3hjoc1vel().s[51]++;
    lines.push('┌────────────┬────────────┬─────────┬─────────┬─────────────┬──────────────┐');
    /* istanbul ignore next */
    cov_3hjoc1vel().s[52]++;
    lines.push('│ Agent ID   │ Type       │ Status  │ Tasks   │ Uptime      │ Last Active  │');
    /* istanbul ignore next */
    cov_3hjoc1vel().s[53]++;
    lines.push('├────────────┼────────────┼─────────┼─────────┼─────────────┼──────────────┤');
    /* istanbul ignore next */
    cov_3hjoc1vel().s[54]++;
    for (const agent of status.swarm.agents) {
      const statusEmoji =
      /* istanbul ignore next */
      (cov_3hjoc1vel().s[55]++,
      /* istanbul ignore next */
      (cov_3hjoc1vel().b[13][0]++, {
        active: '🟢',
        idle: '🟡',
        busy: '🔵',
        error: '🔴'
      }[agent.status]) ||
      /* istanbul ignore next */
      (cov_3hjoc1vel().b[13][1]++, '⚪'));
      const id =
      /* istanbul ignore next */
      (cov_3hjoc1vel().s[56]++, agent.id.padEnd(10));
      const type =
      /* istanbul ignore next */
      (cov_3hjoc1vel().s[57]++, agent.type.padEnd(10));
      const statusText =
      /* istanbul ignore next */
      (cov_3hjoc1vel().s[58]++, `${statusEmoji} ${agent.status}`.padEnd(7));
      const tasks =
      /* istanbul ignore next */
      (cov_3hjoc1vel().s[59]++, agent.tasksCompleted.toString().padEnd(7));
      const uptime =
      /* istanbul ignore next */
      (cov_3hjoc1vel().s[60]++, this.formatDuration(agent.uptime).padEnd(11));
      const lastActive =
      /* istanbul ignore next */
      (cov_3hjoc1vel().s[61]++, this.formatTime(agent.lastActivity).padEnd(12));
      /* istanbul ignore next */
      cov_3hjoc1vel().s[62]++;
      lines.push(`│ ${id} │ ${type} │ ${statusText} │ ${tasks} │ ${uptime} │ ${lastActive} │`);
    }
    /* istanbul ignore next */
    cov_3hjoc1vel().s[63]++;
    lines.push('└────────────┴────────────┴─────────┴─────────┴─────────────┴──────────────┘');
    // Memory information (if requested)
    /* istanbul ignore next */
    cov_3hjoc1vel().s[64]++;
    if (status.memory) {
      /* istanbul ignore next */
      cov_3hjoc1vel().b[14][0]++;
      cov_3hjoc1vel().s[65]++;
      lines.push('');
      /* istanbul ignore next */
      cov_3hjoc1vel().s[66]++;
      lines.push('Memory:');
      /* istanbul ignore next */
      cov_3hjoc1vel().s[67]++;
      lines.push(`  Provider: ${status.memory.provider}`);
      /* istanbul ignore next */
      cov_3hjoc1vel().s[68]++;
      lines.push(`  Status: ${status.memory.connected ?
      /* istanbul ignore next */
      (cov_3hjoc1vel().b[15][0]++, '🟢 Connected') :
      /* istanbul ignore next */
      (cov_3hjoc1vel().b[15][1]++, '🔴 Disconnected')}`);
      /* istanbul ignore next */
      cov_3hjoc1vel().s[69]++;
      lines.push(`  Size: ${status.memory.size}`);
      /* istanbul ignore next */
      cov_3hjoc1vel().s[70]++;
      lines.push(`  Entries: ${status.memory.entries}`);
    } else
    /* istanbul ignore next */
    {
      cov_3hjoc1vel().b[14][1]++;
    }
    // Configuration (if requested)
    cov_3hjoc1vel().s[71]++;
    if (status.configuration) {
      /* istanbul ignore next */
      cov_3hjoc1vel().b[16][0]++;
      cov_3hjoc1vel().s[72]++;
      lines.push('');
      /* istanbul ignore next */
      cov_3hjoc1vel().s[73]++;
      lines.push('Configuration:');
      /* istanbul ignore next */
      cov_3hjoc1vel().s[74]++;
      lines.push(`  Swarm Topology: ${status.configuration.swarm.topology}`);
      /* istanbul ignore next */
      cov_3hjoc1vel().s[75]++;
      lines.push(`  Max Agents: ${status.configuration.swarm.maxAgents}`);
      /* istanbul ignore next */
      cov_3hjoc1vel().s[76]++;
      lines.push(`  Neural Models: ${status.configuration.neural.models.join(', ')}`);
      /* istanbul ignore next */
      cov_3hjoc1vel().s[77]++;
      lines.push(`  Memory Provider: ${status.configuration.memory.provider}`);
    } else
    /* istanbul ignore next */
    {
      cov_3hjoc1vel().b[16][1]++;
    }
    cov_3hjoc1vel().s[78]++;
    return lines.join('\n');
  }
  async watchStatus(format, detailed, showConfig, showMemory) {
    /* istanbul ignore next */
    cov_3hjoc1vel().f[6]++;
    cov_3hjoc1vel().s[79]++;
    console.log('Watching status (Press Ctrl+C to exit)...\n');
    const updateInterval =
    /* istanbul ignore next */
    (cov_3hjoc1vel().s[80]++, 2000); // 2 seconds
    let running =
    /* istanbul ignore next */
    (cov_3hjoc1vel().s[81]++, true);
    // Handle graceful shutdown
    /* istanbul ignore next */
    cov_3hjoc1vel().s[82]++;
    process.on('SIGINT', () => {
      /* istanbul ignore next */
      cov_3hjoc1vel().f[7]++;
      cov_3hjoc1vel().s[83]++;
      running = false;
      /* istanbul ignore next */
      cov_3hjoc1vel().s[84]++;
      console.log('\nStatus watching stopped.');
      /* istanbul ignore next */
      cov_3hjoc1vel().s[85]++;
      process.exit(0);
    });
    /* istanbul ignore next */
    cov_3hjoc1vel().s[86]++;
    while (running) {
      /* istanbul ignore next */
      cov_3hjoc1vel().s[87]++;
      // Clear console
      process.stdout.write('\x1B[2J\x1B[0f');
      /* istanbul ignore next */
      cov_3hjoc1vel().s[88]++;
      try {
        const status =
        /* istanbul ignore next */
        (cov_3hjoc1vel().s[89]++, await this.getSwarmStatus(detailed, showConfig, showMemory));
        const output =
        /* istanbul ignore next */
        (cov_3hjoc1vel().s[90]++, this.formatOutput(status, format));
        /* istanbul ignore next */
        cov_3hjoc1vel().s[91]++;
        console.log(output);
        /* istanbul ignore next */
        cov_3hjoc1vel().s[92]++;
        console.log(`\nLast updated: ${new Date().toLocaleTimeString()}`);
        /* istanbul ignore next */
        cov_3hjoc1vel().s[93]++;
        await new Promise(resolve => {
          /* istanbul ignore next */
          cov_3hjoc1vel().f[8]++;
          cov_3hjoc1vel().s[94]++;
          return setTimeout(resolve, updateInterval);
        });
      } catch (error) {
        /* istanbul ignore next */
        cov_3hjoc1vel().s[95]++;
        console.error(`Error updating status: ${error instanceof Error ?
        /* istanbul ignore next */
        (cov_3hjoc1vel().b[17][0]++, error.message) :
        /* istanbul ignore next */
        (cov_3hjoc1vel().b[17][1]++, String(error))}`);
        /* istanbul ignore next */
        cov_3hjoc1vel().s[96]++;
        await new Promise(resolve => {
          /* istanbul ignore next */
          cov_3hjoc1vel().f[9]++;
          cov_3hjoc1vel().s[97]++;
          return setTimeout(resolve, updateInterval);
        });
      }
    }
    /* istanbul ignore next */
    cov_3hjoc1vel().s[98]++;
    return {
      success: true,
      exitCode: 0,
      message: 'Status watching completed'
    };
  }
  toYaml(obj, indent =
  /* istanbul ignore next */
  (cov_3hjoc1vel().b[18][0]++, 0)) {
    /* istanbul ignore next */
    cov_3hjoc1vel().f[10]++;
    const spaces =
    /* istanbul ignore next */
    (cov_3hjoc1vel().s[99]++, '  '.repeat(indent));
    let result =
    /* istanbul ignore next */
    (cov_3hjoc1vel().s[100]++, '');
    /* istanbul ignore next */
    cov_3hjoc1vel().s[101]++;
    for (const [key, value] of Object.entries(obj)) {
      /* istanbul ignore next */
      cov_3hjoc1vel().s[102]++;
      if (
      /* istanbul ignore next */
      (cov_3hjoc1vel().b[20][0]++, typeof value === 'object') &&
      /* istanbul ignore next */
      (cov_3hjoc1vel().b[20][1]++, value !== null) &&
      /* istanbul ignore next */
      (cov_3hjoc1vel().b[20][2]++, !Array.isArray(value))) {
        /* istanbul ignore next */
        cov_3hjoc1vel().b[19][0]++;
        cov_3hjoc1vel().s[103]++;
        result += `${spaces}${key}:\n`;
        /* istanbul ignore next */
        cov_3hjoc1vel().s[104]++;
        result += this.toYaml(value, indent + 1);
      } else {
        /* istanbul ignore next */
        cov_3hjoc1vel().b[19][1]++;
        cov_3hjoc1vel().s[105]++;
        if (Array.isArray(value)) {
          /* istanbul ignore next */
          cov_3hjoc1vel().b[21][0]++;
          cov_3hjoc1vel().s[106]++;
          result += `${spaces}${key}:\n`;
          /* istanbul ignore next */
          cov_3hjoc1vel().s[107]++;
          for (const item of value) {
            /* istanbul ignore next */
            cov_3hjoc1vel().s[108]++;
            if (typeof item === 'object') {
              /* istanbul ignore next */
              cov_3hjoc1vel().b[22][0]++;
              cov_3hjoc1vel().s[109]++;
              result += `${spaces}  -\n`;
              /* istanbul ignore next */
              cov_3hjoc1vel().s[110]++;
              result += this.toYaml(item, indent + 2);
            } else {
              /* istanbul ignore next */
              cov_3hjoc1vel().b[22][1]++;
              cov_3hjoc1vel().s[111]++;
              result += `${spaces}  - ${item}\n`;
            }
          }
        } else {
          /* istanbul ignore next */
          cov_3hjoc1vel().b[21][1]++;
          cov_3hjoc1vel().s[112]++;
          result += `${spaces}${key}: ${value}\n`;
        }
      }
    }
    /* istanbul ignore next */
    cov_3hjoc1vel().s[113]++;
    return result;
  }
  formatDuration(ms) {
    /* istanbul ignore next */
    cov_3hjoc1vel().f[11]++;
    const seconds =
    /* istanbul ignore next */
    (cov_3hjoc1vel().s[114]++, Math.floor(ms / 1000));
    const minutes =
    /* istanbul ignore next */
    (cov_3hjoc1vel().s[115]++, Math.floor(seconds / 60));
    const hours =
    /* istanbul ignore next */
    (cov_3hjoc1vel().s[116]++, Math.floor(minutes / 60));
    /* istanbul ignore next */
    cov_3hjoc1vel().s[117]++;
    if (hours > 0) {
      /* istanbul ignore next */
      cov_3hjoc1vel().b[23][0]++;
      cov_3hjoc1vel().s[118]++;
      return `${hours}h ${minutes % 60}m`;
    } else {
      /* istanbul ignore next */
      cov_3hjoc1vel().b[23][1]++;
      cov_3hjoc1vel().s[119]++;
      if (minutes > 0) {
        /* istanbul ignore next */
        cov_3hjoc1vel().b[24][0]++;
        cov_3hjoc1vel().s[120]++;
        return `${minutes}m ${seconds % 60}s`;
      } else {
        /* istanbul ignore next */
        cov_3hjoc1vel().b[24][1]++;
        cov_3hjoc1vel().s[121]++;
        return `${seconds}s`;
      }
    }
  }
  formatTime(timestamp) {
    /* istanbul ignore next */
    cov_3hjoc1vel().f[12]++;
    const date =
    /* istanbul ignore next */
    (cov_3hjoc1vel().s[122]++, new Date(timestamp));
    const now =
    /* istanbul ignore next */
    (cov_3hjoc1vel().s[123]++, new Date());
    const diff =
    /* istanbul ignore next */
    (cov_3hjoc1vel().s[124]++, now.getTime() - date.getTime());
    /* istanbul ignore next */
    cov_3hjoc1vel().s[125]++;
    if (diff < 60000) {
      /* istanbul ignore next */
      cov_3hjoc1vel().b[25][0]++;
      cov_3hjoc1vel().s[126]++;
      // Less than 1 minute
      return 'Just now';
    } else {
      /* istanbul ignore next */
      cov_3hjoc1vel().b[25][1]++;
      cov_3hjoc1vel().s[127]++;
      if (diff < 3600000) {
        /* istanbul ignore next */
        cov_3hjoc1vel().b[26][0]++;
        cov_3hjoc1vel().s[128]++;
        // Less than 1 hour
        return `${Math.floor(diff / 60000)}m ago`;
      } else {
        /* istanbul ignore next */
        cov_3hjoc1vel().b[26][1]++;
        cov_3hjoc1vel().s[129]++;
        return date.toLocaleTimeString();
      }
    }
  }
  getHelp() {
    /* istanbul ignore next */
    cov_3hjoc1vel().f[13]++;
    cov_3hjoc1vel().s[130]++;
    return `Show swarm status, configuration, and active agents

USAGE:
  claude-flow status [options]

OPTIONS:
  --format <format>     Output format (table, json, yaml) [default: table]
  --detailed           Show detailed status information
  --watch              Watch status changes in real-time
  --show-config        Include configuration in output
  --show-memory        Include memory statistics
  -h, --help           Show help

EXAMPLES:
  claude-flow status
  claude-flow status --format json
  claude-flow status --detailed
  claude-flow status --watch
  claude-flow status --show-config --show-memory

The status command shows:
- System information (version, uptime, platform)
- Swarm status and topology
- Active agents and their status
- Performance metrics
- Memory usage (with --show-memory)
- Configuration (with --show-config)

Use --watch to monitor status changes in real-time.
Use --detailed for comprehensive agent information.
`;
  }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,