02a051c759f43333b4d027fb1220eb0a
/**
 * Argument Parser Tests - TDD London School
 *
 * Tests the behavior of argument parsing functionality using mocks
 * and interaction-based testing. Focuses on how the parser collaborates
 * with other components rather than testing implementation details.
 */
import { jest } from '@jest/globals';
// Mock implementation for testing
class MockArgumentParser {
    options = {};
    commands = new Map();
    parseFunction;
    validateFunction;
    constructor(parseFunction, validateFunction) {
        this.parseFunction = parseFunction || jest.fn();
        this.validateFunction = validateFunction || jest.fn();
    }
    parse(args) {
        return this.parseFunction(args);
    }
    setOptions(options) {
        this.options = { ...this.options, ...options };
    }
    addCommand(config) {
        this.commands.set(config.name, config);
        config.aliases?.forEach(alias => {
            this.commands.set(alias, config);
        });
    }
    getHelp() {
        return 'Mock help text';
    }
    validate(result) {
        return this.validateFunction(result);
    }
    // Test helpers
    getOptions() {
        return { ...this.options };
    }
    hasCommand(name) {
        return this.commands.has(name);
    }
    getCommand(name) {
        return this.commands.get(name);
    }
}
describe('ArgumentParser - TDD London', () => {
    let parser;
    let mockParseFunction;
    let mockValidateFunction;
    beforeEach(() => {
        mockParseFunction = jest.fn();
        mockValidateFunction = jest.fn();
        parser = new MockArgumentParser(mockParseFunction, mockValidateFunction);
    });
    describe('parsing behavior', () => {
        it('should parse simple command with arguments', () => {
            // Arrange
            const args = ['status', 'arg1', 'arg2'];
            const expectedResult = {
                command: 'status',
                args: ['arg1', 'arg2'],
                flags: {},
                unknown: [],
                raw: args
            };
            mockParseFunction.mockReturnValue(expectedResult);
            // Act
            const result = parser.parse(args);
            // Assert - verify parser behavior through result
            expect(mockParseFunction).toHaveBeenCalledWith(args);
            expect(result).toEqual(expectedResult);
        });
        it('should parse command with flags', () => {
            // Arrange
            const args = ['deploy', '--verbose', '--env', 'production', 'app'];
            const expectedResult = {
                command: 'deploy',
                args: ['app'],
                flags: {
                    verbose: true,
                    env: 'production'
                },
                unknown: [],
                raw: args
            };
            mockParseFunction.mockReturnValue(expectedResult);
            // Act
            const result = parser.parse(args);
            // Assert - verify flag parsing behavior
            expect(result.flags).toEqual({
                verbose: true,
                env: 'production'
            });
            expect(result.args).toEqual(['app']);
        });
        it('should handle unknown flags based on options', () => {
            // Arrange
            parser.setOptions({ allowUnknownFlags: false });
            const args = ['command', '--unknown-flag', 'value'];
            const expectedResult = {
                command: 'command',
                args: [],
                flags: {},
                unknown: ['--unknown-flag', 'value'],
                raw: args
            };
            mockParseFunction.mockReturnValue(expectedResult);
            // Act
            const result = parser.parse(args);
            // Assert - verify unknown flag handling
            expect(result.unknown).toContain('--unknown-flag');
            expect(mockParseFunction).toHaveBeenCalledWith(args);
        });
        it('should handle boolean flags correctly', () => {
            // Arrange
            const args = ['test', '--debug', '--no-verbose'];
            const expectedResult = {
                command: 'test',
                args: [],
                flags: {
                    debug: true,
                    verbose: false
                },
                unknown: [],
                raw: args
            };
            mockParseFunction.mockReturnValue(expectedResult);
            // Act
            const result = parser.parse(args);
            // Assert - verify boolean flag behavior
            expect(result.flags.debug).toBe(true);
            expect(result.flags.verbose).toBe(false);
        });
        it('should parse array flags', () => {
            // Arrange
            const args = ['build', '--include', 'file1.js', '--include', 'file2.js'];
            const expectedResult = {
                command: 'build',
                args: [],
                flags: {
                    include: ['file1.js', 'file2.js']
                },
                unknown: [],
                raw: args
            };
            mockParseFunction.mockReturnValue(expectedResult);
            // Act
            const result = parser.parse(args);
            // Assert - verify array flag behavior
            expect(result.flags.include).toEqual(['file1.js', 'file2.js']);
        });
    });
    describe('command definition behavior', () => {
        it('should register command with configuration', () => {
            // Arrange
            const commandConfig = {
                name: 'deploy',
                description: 'Deploy application',
                aliases: ['d'],
                flags: [
                    {
                        name: 'env',
                        type: 'string',
                        description: 'Environment to deploy to',
                        required: true
                    },
                    {
                        name: 'verbose',
                        type: 'boolean',
                        description: 'Verbose output',
                        aliases: ['v']
                    }
                ],
                args: [
                    {
                        name: 'target',
                        description: 'Deployment target',
                        required: true
                    }
                ]
            };
            // Act
            parser.addCommand(commandConfig);
            // Assert - verify command registration behavior
            expect(parser.hasCommand('deploy')).toBe(true);
            expect(parser.hasCommand('d')).toBe(true); // alias
            expect(parser.getCommand('deploy')).toEqual(commandConfig);
        });
        it('should register multiple commands without conflicts', () => {
            // Arrange
            const cmd1 = { name: 'start', description: 'Start service' };
            const cmd2 = { name: 'stop', description: 'Stop service' };
            // Act
            parser.addCommand(cmd1);
            parser.addCommand(cmd2);
            // Assert - verify multiple command registration
            expect(parser.hasCommand('start')).toBe(true);
            expect(parser.hasCommand('stop')).toBe(true);
            expect(parser.getCommand('start')).toEqual(cmd1);
            expect(parser.getCommand('stop')).toEqual(cmd2);
        });
        it('should handle command aliases correctly', () => {
            // Arrange
            const commandConfig = {
                name: 'status',
                aliases: ['st', 'stat', 's']
            };
            // Act
            parser.addCommand(commandConfig);
            // Assert - verify alias behavior
            const aliases = ['st', 'stat', 's'];
            aliases.forEach(alias => {
                expect(parser.hasCommand(alias)).toBe(true);
                expect(parser.getCommand(alias)).toBe(commandConfig);
            });
        });
    });
    describe('validation behavior', () => {
        it('should validate parsed result and return validation errors', () => {
            // Arrange
            const parseResult = {
                command: 'deploy',
                args: [],
                flags: { env: 'production' },
                unknown: [],
                raw: ['deploy', '--env', 'production']
            };
            const validationResult = {
                valid: false,
                errors: ['Missing required argument: target'],
                warnings: []
            };
            mockValidateFunction.mockReturnValue(validationResult);
            // Act
            const result = parser.validate(parseResult);
            // Assert - verify validation behavior
            expect(mockValidateFunction).toHaveBeenCalledWith(parseResult);
            expect(result).toEqual(validationResult);
            expect(result.valid).toBe(false);
            expect(result.errors).toContain('Missing required argument: target');
        });
        it('should validate required flags', () => {
            // Arrange
            const parseResult = {
                command: 'deploy',
                args: ['app'],
                flags: {}, // Missing required --env flag
                unknown: [],
                raw: ['deploy', 'app']
            };
            const validationResult = {
                valid: false,
                errors: ['Required flag --env is missing'],
                warnings: []
            };
            mockValidateFunction.mockReturnValue(validationResult);
            // Act
            const result = parser.validate(parseResult);
            // Assert - verify required flag validation
            expect(result.valid).toBe(false);
            expect(result.errors).toContain('Required flag --env is missing');
        });
        it('should validate flag types', () => {
            // Arrange
            const parseResult = {
                command: 'config',
                args: [],
                flags: {
                    port: 'not-a-number' // Should be number
                },
                unknown: [],
                raw: ['config', '--port', 'not-a-number']
            };
            const validationResult = {
                valid: false,
                errors: ['Flag --port must be a number'],
                warnings: []
            };
            mockValidateFunction.mockReturnValue(validationResult);
            // Act
            const result = parser.validate(parseResult);
            // Assert - verify type validation behavior
            expect(result.valid).toBe(false);
            expect(result.errors).toContain('Flag --port must be a number');
        });
        it('should return warnings for deprecated flags', () => {
            // Arrange
            const parseResult = {
                command: 'build',
                args: [],
                flags: {
                    'old-flag': true
                },
                unknown: [],
                raw: ['build', '--old-flag']
            };
            const validationResult = {
                valid: true,
                errors: [],
                warnings: ['Flag --old-flag is deprecated, use --new-flag instead']
            };
            mockValidateFunction.mockReturnValue(validationResult);
            // Act
            const result = parser.validate(parseResult);
            // Assert - verify warning behavior
            expect(result.valid).toBe(true);
            expect(result.warnings).toContain('Flag --old-flag is deprecated, use --new-flag instead');
        });
    });
    describe('options configuration behavior', () => {
        it('should apply parser options correctly', () => {
            // Arrange
            const options = {
                allowUnknownFlags: true,
                allowUnknownCommands: false,
                stopAtFirstUnknown: true,
                flagPrefix: '--',
                helpFlag: ['help', 'h'],
                versionFlag: ['version', 'v']
            };
            // Act
            parser.setOptions(options);
            // Assert - verify options application
            const appliedOptions = parser.getOptions();
            expect(appliedOptions).toEqual(options);
        });
        it('should merge options with existing configuration', () => {
            // Arrange
            parser.setOptions({ allowUnknownFlags: true });
            parser.setOptions({ allowUnknownCommands: false });
            // Act
            const options = parser.getOptions();
            // Assert - verify option merging behavior
            expect(options.allowUnknownFlags).toBe(true);
            expect(options.allowUnknownCommands).toBe(false);
        });
    });
    describe('help generation behavior', () => {
        it('should generate help text', () => {
            // Act
            const help = parser.getHelp();
            // Assert - verify help generation
            expect(help).toBe('Mock help text');
        });
    });
    describe('edge case behavior', () => {
        it('should handle empty argument array', () => {
            // Arrange
            const expectedResult = {
                command: null,
                args: [],
                flags: {},
                unknown: [],
                raw: []
            };
            mockParseFunction.mockReturnValue(expectedResult);
            // Act
            const result = parser.parse([]);
            // Assert - verify empty args handling
            expect(mockParseFunction).toHaveBeenCalledWith([]);
            expect(result.command).toBeNull();
            expect(result.args).toEqual([]);
        });
        it('should handle flags without values', () => {
            // Arrange
            const args = ['command', '--flag-without-value'];
            const expectedResult = {
                command: 'command',
                args: [],
                flags: {
                    'flag-without-value': true // Boolean flag
                },
                unknown: [],
                raw: args
            };
            mockParseFunction.mockReturnValue(expectedResult);
            // Act
            const result = parser.parse(args);
            // Assert - verify flag without value handling
            expect(result.flags['flag-without-value']).toBe(true);
        });
        it('should handle special characters in arguments', () => {
            // Arrange
            const args = ['deploy', '--message', 'Deploy v1.0.0 with "quotes" and spaces'];
            const expectedResult = {
                command: 'deploy',
                args: [],
                flags: {
                    message: 'Deploy v1.0.0 with "quotes" and spaces'
                },
                unknown: [],
                raw: args
            };
            mockParseFunction.mockReturnValue(expectedResult);
            // Act
            const result = parser.parse(args);
            // Assert - verify special character handling
            expect(result.flags.message).toBe('Deploy v1.0.0 with "quotes" and spaces');
        });
        it('should handle variadic arguments', () => {
            // Arrange
            const args = ['process', 'file1.js', 'file2.js', 'file3.js'];
            const expectedResult = {
                command: 'process',
                args: ['file1.js', 'file2.js', 'file3.js'],
                flags: {},
                unknown: [],
                raw: args
            };
            mockParseFunction.mockReturnValue(expectedResult);
            // Act
            const result = parser.parse(args);
            // Assert - verify variadic argument handling
            expect(result.args).toEqual(['file1.js', 'file2.js', 'file3.js']);
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,