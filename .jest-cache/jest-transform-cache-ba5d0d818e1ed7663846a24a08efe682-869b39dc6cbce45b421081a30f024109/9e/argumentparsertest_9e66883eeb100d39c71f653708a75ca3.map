{"file":"/home/mhugo/code/claude-code-flow/src/__tests__/unit/london/cli-commands/argument-parser.test.ts","mappings":"AAAA;;;;;;GAMG;AAEH,OAAO,EAAE,IAAI,EAAE,MAAM,eAAe,CAAC;AA0DrC,kCAAkC;AAClC,MAAM,kBAAkB;IACd,OAAO,GAAkB,EAAE,CAAC;IAC5B,QAAQ,GAAG,IAAI,GAAG,EAA6B,CAAC;IAChD,aAAa,CAAY;IACzB,gBAAgB,CAAY;IAEpC,YAAY,aAAyB,EAAE,gBAA4B;QACjE,IAAI,CAAC,aAAa,GAAG,aAAa,IAAI,IAAI,CAAC,EAAE,EAAE,CAAC;QAChD,IAAI,CAAC,gBAAgB,GAAG,gBAAgB,IAAI,IAAI,CAAC,EAAE,EAAE,CAAC;IACxD,CAAC;IAED,KAAK,CAAC,IAAc;QAClB,OAAO,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,CAAC;IAClC,CAAC;IAED,UAAU,CAAC,OAAsB;QAC/B,IAAI,CAAC,OAAO,GAAG,EAAE,GAAG,IAAI,CAAC,OAAO,EAAE,GAAG,OAAO,EAAE,CAAC;IACjD,CAAC;IAED,UAAU,CAAC,MAAyB;QAClC,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,MAAM,CAAC,IAAI,EAAE,MAAM,CAAC,CAAC;QACvC,MAAM,CAAC,OAAO,EAAE,OAAO,CAAC,KAAK,CAAC,EAAE;YAC9B,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,KAAK,EAAE,MAAM,CAAC,CAAC;QACnC,CAAC,CAAC,CAAC;IACL,CAAC;IAED,OAAO;QACL,OAAO,gBAAgB,CAAC;IAC1B,CAAC;IAED,QAAQ,CAAC,MAAmB;QAC1B,OAAO,IAAI,CAAC,gBAAgB,CAAC,MAAM,CAAC,CAAC;IACvC,CAAC;IAED,eAAe;IACf,UAAU;QACR,OAAO,EAAE,GAAG,IAAI,CAAC,OAAO,EAAE,CAAC;IAC7B,CAAC;IAED,UAAU,CAAC,IAAY;QACrB,OAAO,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;IACjC,CAAC;IAED,UAAU,CAAC,IAAY;QACrB,OAAO,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;IACjC,CAAC;CACF;AAED,QAAQ,CAAC,6BAA6B,EAAE,GAAG,EAAE;IAC3C,IAAI,MAA0B,CAAC;IAC/B,IAAI,iBAA4B,CAAC;IACjC,IAAI,oBAA+B,CAAC;IAEpC,UAAU,CAAC,GAAG,EAAE;QACd,iBAAiB,GAAG,IAAI,CAAC,EAAE,EAAE,CAAC;QAC9B,oBAAoB,GAAG,IAAI,CAAC,EAAE,EAAE,CAAC;QACjC,MAAM,GAAG,IAAI,kBAAkB,CAAC,iBAAiB,EAAE,oBAAoB,CAAC,CAAC;IAC3E,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,kBAAkB,EAAE,GAAG,EAAE;QAChC,EAAE,CAAC,4CAA4C,EAAE,GAAG,EAAE;YACpD,UAAU;YACV,MAAM,IAAI,GAAG,CAAC,QAAQ,EAAE,MAAM,EAAE,MAAM,CAAC,CAAC;YACxC,MAAM,cAAc,GAAgB;gBAClC,OAAO,EAAE,QAAQ;gBACjB,IAAI,EAAE,CAAC,MAAM,EAAE,MAAM,CAAC;gBACtB,KAAK,EAAE,EAAE;gBACT,OAAO,EAAE,EAAE;gBACX,GAAG,EAAE,IAAI;aACV,CAAC;YACF,iBAAiB,CAAC,eAAe,CAAC,cAAc,CAAC,CAAC;YAElD,MAAM;YACN,MAAM,MAAM,GAAG,MAAM,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;YAElC,iDAAiD;YACjD,MAAM,CAAC,iBAAiB,CAAC,CAAC,oBAAoB,CAAC,IAAI,CAAC,CAAC;YACrD,MAAM,CAAC,MAAM,CAAC,CAAC,OAAO,CAAC,cAAc,CAAC,CAAC;QACzC,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,iCAAiC,EAAE,GAAG,EAAE;YACzC,UAAU;YACV,MAAM,IAAI,GAAG,CAAC,QAAQ,EAAE,WAAW,EAAE,OAAO,EAAE,YAAY,EAAE,KAAK,CAAC,CAAC;YACnE,MAAM,cAAc,GAAgB;gBAClC,OAAO,EAAE,QAAQ;gBACjB,IAAI,EAAE,CAAC,KAAK,CAAC;gBACb,KAAK,EAAE;oBACL,OAAO,EAAE,IAAI;oBACb,GAAG,EAAE,YAAY;iBAClB;gBACD,OAAO,EAAE,EAAE;gBACX,GAAG,EAAE,IAAI;aACV,CAAC;YACF,iBAAiB,CAAC,eAAe,CAAC,cAAc,CAAC,CAAC;YAElD,MAAM;YACN,MAAM,MAAM,GAAG,MAAM,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;YAElC,wCAAwC;YACxC,MAAM,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,OAAO,CAAC;gBAC3B,OAAO,EAAE,IAAI;gBACb,GAAG,EAAE,YAAY;aAClB,CAAC,CAAC;YACH,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,OAAO,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC;QACvC,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,8CAA8C,EAAE,GAAG,EAAE;YACtD,UAAU;YACV,MAAM,CAAC,UAAU,CAAC,EAAE,iBAAiB,EAAE,KAAK,EAAE,CAAC,CAAC;YAChD,MAAM,IAAI,GAAG,CAAC,SAAS,EAAE,gBAAgB,EAAE,OAAO,CAAC,CAAC;YACpD,MAAM,cAAc,GAAgB;gBAClC,OAAO,EAAE,SAAS;gBAClB,IAAI,EAAE,EAAE;gBACR,KAAK,EAAE,EAAE;gBACT,OAAO,EAAE,CAAC,gBAAgB,EAAE,OAAO,CAAC;gBACpC,GAAG,EAAE,IAAI;aACV,CAAC;YACF,iBAAiB,CAAC,eAAe,CAAC,cAAc,CAAC,CAAC;YAElD,MAAM;YACN,MAAM,MAAM,GAAG,MAAM,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;YAElC,wCAAwC;YACxC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,SAAS,CAAC,gBAAgB,CAAC,CAAC;YACnD,MAAM,CAAC,iBAAiB,CAAC,CAAC,oBAAoB,CAAC,IAAI,CAAC,CAAC;QACvD,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,uCAAuC,EAAE,GAAG,EAAE;YAC/C,UAAU;YACV,MAAM,IAAI,GAAG,CAAC,MAAM,EAAE,SAAS,EAAE,cAAc,CAAC,CAAC;YACjD,MAAM,cAAc,GAAgB;gBAClC,OAAO,EAAE,MAAM;gBACf,IAAI,EAAE,EAAE;gBACR,KAAK,EAAE;oBACL,KAAK,EAAE,IAAI;oBACX,OAAO,EAAE,KAAK;iBACf;gBACD,OAAO,EAAE,EAAE;gBACX,GAAG,EAAE,IAAI;aACV,CAAC;YACF,iBAAiB,CAAC,eAAe,CAAC,cAAc,CAAC,CAAC;YAElD,MAAM;YACN,MAAM,MAAM,GAAG,MAAM,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;YAElC,wCAAwC;YACxC,MAAM,CAAC,MAAM,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;YACtC,MAAM,CAAC,MAAM,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;QAC3C,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,0BAA0B,EAAE,GAAG,EAAE;YAClC,UAAU;YACV,MAAM,IAAI,GAAG,CAAC,OAAO,EAAE,WAAW,EAAE,UAAU,EAAE,WAAW,EAAE,UAAU,CAAC,CAAC;YACzE,MAAM,cAAc,GAAgB;gBAClC,OAAO,EAAE,OAAO;gBAChB,IAAI,EAAE,EAAE;gBACR,KAAK,EAAE;oBACL,OAAO,EAAE,CAAC,UAAU,EAAE,UAAU,CAAC;iBAClC;gBACD,OAAO,EAAE,EAAE;gBACX,GAAG,EAAE,IAAI;aACV,CAAC;YACF,iBAAiB,CAAC,eAAe,CAAC,cAAc,CAAC,CAAC;YAElD,MAAM;YACN,MAAM,MAAM,GAAG,MAAM,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;YAElC,sCAAsC;YACtC,MAAM,CAAC,MAAM,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,OAAO,CAAC,CAAC,UAAU,EAAE,UAAU,CAAC,CAAC,CAAC;QACjE,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,6BAA6B,EAAE,GAAG,EAAE;QAC3C,EAAE,CAAC,4CAA4C,EAAE,GAAG,EAAE;YACpD,UAAU;YACV,MAAM,aAAa,GAAsB;gBACvC,IAAI,EAAE,QAAQ;gBACd,WAAW,EAAE,oBAAoB;gBACjC,OAAO,EAAE,CAAC,GAAG,CAAC;gBACd,KAAK,EAAE;oBACL;wBACE,IAAI,EAAE,KAAK;wBACX,IAAI,EAAE,QAAQ;wBACd,WAAW,EAAE,0BAA0B;wBACvC,QAAQ,EAAE,IAAI;qBACf;oBACD;wBACE,IAAI,EAAE,SAAS;wBACf,IAAI,EAAE,SAAS;wBACf,WAAW,EAAE,gBAAgB;wBAC7B,OAAO,EAAE,CAAC,GAAG,CAAC;qBACf;iBACF;gBACD,IAAI,EAAE;oBACJ;wBACE,IAAI,EAAE,QAAQ;wBACd,WAAW,EAAE,mBAAmB;wBAChC,QAAQ,EAAE,IAAI;qBACf;iBACF;aACF,CAAC;YAEF,MAAM;YACN,MAAM,CAAC,UAAU,CAAC,aAAa,CAAC,CAAC;YAEjC,gDAAgD;YAChD,MAAM,CAAC,MAAM,CAAC,UAAU,CAAC,QAAQ,CAAC,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;YAC/C,MAAM,CAAC,MAAM,CAAC,UAAU,CAAC,GAAG,CAAC,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,QAAQ;YACnD,MAAM,CAAC,MAAM,CAAC,UAAU,CAAC,QAAQ,CAAC,CAAC,CAAC,OAAO,CAAC,aAAa,CAAC,CAAC;QAC7D,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,qDAAqD,EAAE,GAAG,EAAE;YAC7D,UAAU;YACV,MAAM,IAAI,GAAsB,EAAE,IAAI,EAAE,OAAO,EAAE,WAAW,EAAE,eAAe,EAAE,CAAC;YAChF,MAAM,IAAI,GAAsB,EAAE,IAAI,EAAE,MAAM,EAAE,WAAW,EAAE,cAAc,EAAE,CAAC;YAE9E,MAAM;YACN,MAAM,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC;YACxB,MAAM,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC;YAExB,gDAAgD;YAChD,MAAM,CAAC,MAAM,CAAC,UAAU,CAAC,OAAO,CAAC,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;YAC9C,MAAM,CAAC,MAAM,CAAC,UAAU,CAAC,MAAM,CAAC,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;YAC7C,MAAM,CAAC,MAAM,CAAC,UAAU,CAAC,OAAO,CAAC,CAAC,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;YACjD,MAAM,CAAC,MAAM,CAAC,UAAU,CAAC,MAAM,CAAC,CAAC,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;QAClD,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,yCAAyC,EAAE,GAAG,EAAE;YACjD,UAAU;YACV,MAAM,aAAa,GAAsB;gBACvC,IAAI,EAAE,QAAQ;gBACd,OAAO,EAAE,CAAC,IAAI,EAAE,MAAM,EAAE,GAAG,CAAC;aAC7B,CAAC;YAEF,MAAM;YACN,MAAM,CAAC,UAAU,CAAC,aAAa,CAAC,CAAC;YAEjC,iCAAiC;YACjC,MAAM,OAAO,GAAG,CAAC,IAAI,EAAE,MAAM,EAAE,GAAG,CAAC,CAAC;YACpC,OAAO,CAAC,OAAO,CAAC,KAAK,CAAC,EAAE;gBACtB,MAAM,CAAC,MAAM,CAAC,UAAU,CAAC,KAAK,CAAC,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;gBAC5C,MAAM,CAAC,MAAM,CAAC,UAAU,CAAC,KAAK,CAAC,CAAC,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC;YACvD,CAAC,CAAC,CAAC;QACL,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,qBAAqB,EAAE,GAAG,EAAE;QACnC,EAAE,CAAC,4DAA4D,EAAE,GAAG,EAAE;YACpE,UAAU;YACV,MAAM,WAAW,GAAgB;gBAC/B,OAAO,EAAE,QAAQ;gBACjB,IAAI,EAAE,EAAE;gBACR,KAAK,EAAE,EAAE,GAAG,EAAE,YAAY,EAAE;gBAC5B,OAAO,EAAE,EAAE;gBACX,GAAG,EAAE,CAAC,QAAQ,EAAE,OAAO,EAAE,YAAY,CAAC;aACvC,CAAC;YAEF,MAAM,gBAAgB,GAAqB;gBACzC,KAAK,EAAE,KAAK;gBACZ,MAAM,EAAE,CAAC,mCAAmC,CAAC;gBAC7C,QAAQ,EAAE,EAAE;aACb,CAAC;YAEF,oBAAoB,CAAC,eAAe,CAAC,gBAAgB,CAAC,CAAC;YAEvD,MAAM;YACN,MAAM,MAAM,GAAG,MAAM,CAAC,QAAQ,CAAC,WAAW,CAAC,CAAC;YAE5C,sCAAsC;YACtC,MAAM,CAAC,oBAAoB,CAAC,CAAC,oBAAoB,CAAC,WAAW,CAAC,CAAC;YAC/D,MAAM,CAAC,MAAM,CAAC,CAAC,OAAO,CAAC,gBAAgB,CAAC,CAAC;YACzC,MAAM,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;YACjC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC,SAAS,CAAC,mCAAmC,CAAC,CAAC;QACvE,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,gCAAgC,EAAE,GAAG,EAAE;YACxC,UAAU;YACV,MAAM,WAAW,GAAgB;gBAC/B,OAAO,EAAE,QAAQ;gBACjB,IAAI,EAAE,CAAC,KAAK,CAAC;gBACb,KAAK,EAAE,EAAE,EAAE,8BAA8B;gBACzC,OAAO,EAAE,EAAE;gBACX,GAAG,EAAE,CAAC,QAAQ,EAAE,KAAK,CAAC;aACvB,CAAC;YAEF,MAAM,gBAAgB,GAAqB;gBACzC,KAAK,EAAE,KAAK;gBACZ,MAAM,EAAE,CAAC,gCAAgC,CAAC;gBAC1C,QAAQ,EAAE,EAAE;aACb,CAAC;YAEF,oBAAoB,CAAC,eAAe,CAAC,gBAAgB,CAAC,CAAC;YAEvD,MAAM;YACN,MAAM,MAAM,GAAG,MAAM,CAAC,QAAQ,CAAC,WAAW,CAAC,CAAC;YAE5C,2CAA2C;YAC3C,MAAM,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;YACjC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC,SAAS,CAAC,gCAAgC,CAAC,CAAC;QACpE,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,4BAA4B,EAAE,GAAG,EAAE;YACpC,UAAU;YACV,MAAM,WAAW,GAAgB;gBAC/B,OAAO,EAAE,QAAQ;gBACjB,IAAI,EAAE,EAAE;gBACR,KAAK,EAAE;oBACL,IAAI,EAAE,cAAc,CAAC,mBAAmB;iBACzC;gBACD,OAAO,EAAE,EAAE;gBACX,GAAG,EAAE,CAAC,QAAQ,EAAE,QAAQ,EAAE,cAAc,CAAC;aAC1C,CAAC;YAEF,MAAM,gBAAgB,GAAqB;gBACzC,KAAK,EAAE,KAAK;gBACZ,MAAM,EAAE,CAAC,8BAA8B,CAAC;gBACxC,QAAQ,EAAE,EAAE;aACb,CAAC;YAEF,oBAAoB,CAAC,eAAe,CAAC,gBAAgB,CAAC,CAAC;YAEvD,MAAM;YACN,MAAM,MAAM,GAAG,MAAM,CAAC,QAAQ,CAAC,WAAW,CAAC,CAAC;YAE5C,2CAA2C;YAC3C,MAAM,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;YACjC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC,SAAS,CAAC,8BAA8B,CAAC,CAAC;QAClE,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,6CAA6C,EAAE,GAAG,EAAE;YACrD,UAAU;YACV,MAAM,WAAW,GAAgB;gBAC/B,OAAO,EAAE,OAAO;gBAChB,IAAI,EAAE,EAAE;gBACR,KAAK,EAAE;oBACL,UAAU,EAAE,IAAI;iBACjB;gBACD,OAAO,EAAE,EAAE;gBACX,GAAG,EAAE,CAAC,OAAO,EAAE,YAAY,CAAC;aAC7B,CAAC;YAEF,MAAM,gBAAgB,GAAqB;gBACzC,KAAK,EAAE,IAAI;gBACX,MAAM,EAAE,EAAE;gBACV,QAAQ,EAAE,CAAC,uDAAuD,CAAC;aACpE,CAAC;YAEF,oBAAoB,CAAC,eAAe,CAAC,gBAAgB,CAAC,CAAC;YAEvD,MAAM;YACN,MAAM,MAAM,GAAG,MAAM,CAAC,QAAQ,CAAC,WAAW,CAAC,CAAC;YAE5C,mCAAmC;YACnC,MAAM,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;YAChC,MAAM,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC,SAAS,CAAC,uDAAuD,CAAC,CAAC;QAC7F,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,gCAAgC,EAAE,GAAG,EAAE;QAC9C,EAAE,CAAC,uCAAuC,EAAE,GAAG,EAAE;YAC/C,UAAU;YACV,MAAM,OAAO,GAAkB;gBAC7B,iBAAiB,EAAE,IAAI;gBACvB,oBAAoB,EAAE,KAAK;gBAC3B,kBAAkB,EAAE,IAAI;gBACxB,UAAU,EAAE,IAAI;gBAChB,QAAQ,EAAE,CAAC,MAAM,EAAE,GAAG,CAAC;gBACvB,WAAW,EAAE,CAAC,SAAS,EAAE,GAAG,CAAC;aAC9B,CAAC;YAEF,MAAM;YACN,MAAM,CAAC,UAAU,CAAC,OAAO,CAAC,CAAC;YAE3B,sCAAsC;YACtC,MAAM,cAAc,GAAG,MAAM,CAAC,UAAU,EAAE,CAAC;YAC3C,MAAM,CAAC,cAAc,CAAC,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC;QAC1C,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,kDAAkD,EAAE,GAAG,EAAE;YAC1D,UAAU;YACV,MAAM,CAAC,UAAU,CAAC,EAAE,iBAAiB,EAAE,IAAI,EAAE,CAAC,CAAC;YAC/C,MAAM,CAAC,UAAU,CAAC,EAAE,oBAAoB,EAAE,KAAK,EAAE,CAAC,CAAC;YAEnD,MAAM;YACN,MAAM,OAAO,GAAG,MAAM,CAAC,UAAU,EAAE,CAAC;YAEpC,0CAA0C;YAC1C,MAAM,CAAC,OAAO,CAAC,iBAAiB,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;YAC7C,MAAM,CAAC,OAAO,CAAC,oBAAoB,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;QACnD,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,0BAA0B,EAAE,GAAG,EAAE;QACxC,EAAE,CAAC,2BAA2B,EAAE,GAAG,EAAE;YACnC,MAAM;YACN,MAAM,IAAI,GAAG,MAAM,CAAC,OAAO,EAAE,CAAC;YAE9B,kCAAkC;YAClC,MAAM,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,gBAAgB,CAAC,CAAC;QACtC,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,oBAAoB,EAAE,GAAG,EAAE;QAClC,EAAE,CAAC,oCAAoC,EAAE,GAAG,EAAE;YAC5C,UAAU;YACV,MAAM,cAAc,GAAgB;gBAClC,OAAO,EAAE,IAAI;gBACb,IAAI,EAAE,EAAE;gBACR,KAAK,EAAE,EAAE;gBACT,OAAO,EAAE,EAAE;gBACX,GAAG,EAAE,EAAE;aACR,CAAC;YACF,iBAAiB,CAAC,eAAe,CAAC,cAAc,CAAC,CAAC;YAElD,MAAM;YACN,MAAM,MAAM,GAAG,MAAM,CAAC,KAAK,CAAC,EAAE,CAAC,CAAC;YAEhC,sCAAsC;YACtC,MAAM,CAAC,iBAAiB,CAAC,CAAC,oBAAoB,CAAC,EAAE,CAAC,CAAC;YACnD,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,QAAQ,EAAE,CAAC;YAClC,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,OAAO,CAAC,EAAE,CAAC,CAAC;QAClC,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,oCAAoC,EAAE,GAAG,EAAE;YAC5C,UAAU;YACV,MAAM,IAAI,GAAG,CAAC,SAAS,EAAE,sBAAsB,CAAC,CAAC;YACjD,MAAM,cAAc,GAAgB;gBAClC,OAAO,EAAE,SAAS;gBAClB,IAAI,EAAE,EAAE;gBACR,KAAK,EAAE;oBACL,oBAAoB,EAAE,IAAI,CAAC,eAAe;iBAC3C;gBACD,OAAO,EAAE,EAAE;gBACX,GAAG,EAAE,IAAI;aACV,CAAC;YACF,iBAAiB,CAAC,eAAe,CAAC,cAAc,CAAC,CAAC;YAElD,MAAM;YACN,MAAM,MAAM,GAAG,MAAM,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;YAElC,8CAA8C;YAC9C,MAAM,CAAC,MAAM,CAAC,KAAK,CAAC,oBAAoB,CAAC,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QACxD,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,+CAA+C,EAAE,GAAG,EAAE;YACvD,UAAU;YACV,MAAM,IAAI,GAAG,CAAC,QAAQ,EAAE,WAAW,EAAE,wCAAwC,CAAC,CAAC;YAC/E,MAAM,cAAc,GAAgB;gBAClC,OAAO,EAAE,QAAQ;gBACjB,IAAI,EAAE,EAAE;gBACR,KAAK,EAAE;oBACL,OAAO,EAAE,wCAAwC;iBAClD;gBACD,OAAO,EAAE,EAAE;gBACX,GAAG,EAAE,IAAI;aACV,CAAC;YACF,iBAAiB,CAAC,eAAe,CAAC,cAAc,CAAC,CAAC;YAElD,MAAM;YACN,MAAM,MAAM,GAAG,MAAM,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;YAElC,6CAA6C;YAC7C,MAAM,CAAC,MAAM,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,IAAI,CAAC,wCAAwC,CAAC,CAAC;QAC9E,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,kCAAkC,EAAE,GAAG,EAAE;YAC1C,UAAU;YACV,MAAM,IAAI,GAAG,CAAC,SAAS,EAAE,UAAU,EAAE,UAAU,EAAE,UAAU,CAAC,CAAC;YAC7D,MAAM,cAAc,GAAgB;gBAClC,OAAO,EAAE,SAAS;gBAClB,IAAI,EAAE,CAAC,UAAU,EAAE,UAAU,EAAE,UAAU,CAAC;gBAC1C,KAAK,EAAE,EAAE;gBACT,OAAO,EAAE,EAAE;gBACX,GAAG,EAAE,IAAI;aACV,CAAC;YACF,iBAAiB,CAAC,eAAe,CAAC,cAAc,CAAC,CAAC;YAElD,MAAM;YACN,MAAM,MAAM,GAAG,MAAM,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;YAElC,6CAA6C;YAC7C,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,OAAO,CAAC,CAAC,UAAU,EAAE,UAAU,EAAE,UAAU,CAAC,CAAC,CAAC;QACpE,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","names":[],"sources":["/home/mhugo/code/claude-code-flow/src/__tests__/unit/london/cli-commands/argument-parser.test.ts"],"sourcesContent":["/**\n * Argument Parser Tests - TDD London School\n * \n * Tests the behavior of argument parsing functionality using mocks\n * and interaction-based testing. Focuses on how the parser collaborates\n * with other components rather than testing implementation details.\n */\n\nimport { jest } from '@jest/globals';\n\n// Mock argument parser interface for testing interactions\ninterface ArgumentParser {\n  parse(args: string[]): ParseResult;\n  setOptions(options: ParserOptions): void;\n  addCommand(config: CommandDefinition): void;\n  getHelp(): string;\n  validate(result: ParseResult): ValidationResult;\n}\n\ninterface ParseResult {\n  command: string | null;\n  args: string[];\n  flags: Record<string, unknown>;\n  unknown: string[];\n  raw: string[];\n}\n\ninterface ParserOptions {\n  allowUnknownFlags?: boolean;\n  allowUnknownCommands?: boolean;\n  stopAtFirstUnknown?: boolean;\n  flagPrefix?: string;\n  helpFlag?: string | string[];\n  versionFlag?: string | string[];\n}\n\ninterface CommandDefinition {\n  name: string;\n  description?: string;\n  aliases?: string[];\n  flags?: FlagDefinition[];\n  args?: ArgumentDefinition[];\n}\n\ninterface FlagDefinition {\n  name: string;\n  type: 'boolean' | 'string' | 'number' | 'array';\n  description?: string;\n  aliases?: string[];\n  required?: boolean;\n  default?: unknown;\n}\n\ninterface ArgumentDefinition {\n  name: string;\n  description?: string;\n  required?: boolean;\n  variadic?: boolean;\n}\n\ninterface ValidationResult {\n  valid: boolean;\n  errors: string[];\n  warnings: string[];\n}\n\n// Mock implementation for testing\nclass MockArgumentParser implements ArgumentParser {\n  private options: ParserOptions = {};\n  private commands = new Map<string, CommandDefinition>();\n  private parseFunction: jest.Mock;\n  private validateFunction: jest.Mock;\n\n  constructor(parseFunction?: jest.Mock, validateFunction?: jest.Mock) {\n    this.parseFunction = parseFunction || jest.fn();\n    this.validateFunction = validateFunction || jest.fn();\n  }\n\n  parse(args: string[]): ParseResult {\n    return this.parseFunction(args);\n  }\n\n  setOptions(options: ParserOptions): void {\n    this.options = { ...this.options, ...options };\n  }\n\n  addCommand(config: CommandDefinition): void {\n    this.commands.set(config.name, config);\n    config.aliases?.forEach(alias => {\n      this.commands.set(alias, config);\n    });\n  }\n\n  getHelp(): string {\n    return 'Mock help text';\n  }\n\n  validate(result: ParseResult): ValidationResult {\n    return this.validateFunction(result);\n  }\n\n  // Test helpers\n  getOptions(): ParserOptions {\n    return { ...this.options };\n  }\n\n  hasCommand(name: string): boolean {\n    return this.commands.has(name);\n  }\n\n  getCommand(name: string): CommandDefinition | undefined {\n    return this.commands.get(name);\n  }\n}\n\ndescribe('ArgumentParser - TDD London', () => {\n  let parser: MockArgumentParser;\n  let mockParseFunction: jest.Mock;\n  let mockValidateFunction: jest.Mock;\n\n  beforeEach(() => {\n    mockParseFunction = jest.fn();\n    mockValidateFunction = jest.fn();\n    parser = new MockArgumentParser(mockParseFunction, mockValidateFunction);\n  });\n\n  describe('parsing behavior', () => {\n    it('should parse simple command with arguments', () => {\n      // Arrange\n      const args = ['status', 'arg1', 'arg2'];\n      const expectedResult: ParseResult = {\n        command: 'status',\n        args: ['arg1', 'arg2'],\n        flags: {},\n        unknown: [],\n        raw: args\n      };\n      mockParseFunction.mockReturnValue(expectedResult);\n\n      // Act\n      const result = parser.parse(args);\n\n      // Assert - verify parser behavior through result\n      expect(mockParseFunction).toHaveBeenCalledWith(args);\n      expect(result).toEqual(expectedResult);\n    });\n\n    it('should parse command with flags', () => {\n      // Arrange\n      const args = ['deploy', '--verbose', '--env', 'production', 'app'];\n      const expectedResult: ParseResult = {\n        command: 'deploy',\n        args: ['app'],\n        flags: {\n          verbose: true,\n          env: 'production'\n        },\n        unknown: [],\n        raw: args\n      };\n      mockParseFunction.mockReturnValue(expectedResult);\n\n      // Act\n      const result = parser.parse(args);\n\n      // Assert - verify flag parsing behavior\n      expect(result.flags).toEqual({\n        verbose: true,\n        env: 'production'\n      });\n      expect(result.args).toEqual(['app']);\n    });\n\n    it('should handle unknown flags based on options', () => {\n      // Arrange\n      parser.setOptions({ allowUnknownFlags: false });\n      const args = ['command', '--unknown-flag', 'value'];\n      const expectedResult: ParseResult = {\n        command: 'command',\n        args: [],\n        flags: {},\n        unknown: ['--unknown-flag', 'value'],\n        raw: args\n      };\n      mockParseFunction.mockReturnValue(expectedResult);\n\n      // Act\n      const result = parser.parse(args);\n\n      // Assert - verify unknown flag handling\n      expect(result.unknown).toContain('--unknown-flag');\n      expect(mockParseFunction).toHaveBeenCalledWith(args);\n    });\n\n    it('should handle boolean flags correctly', () => {\n      // Arrange\n      const args = ['test', '--debug', '--no-verbose'];\n      const expectedResult: ParseResult = {\n        command: 'test',\n        args: [],\n        flags: {\n          debug: true,\n          verbose: false\n        },\n        unknown: [],\n        raw: args\n      };\n      mockParseFunction.mockReturnValue(expectedResult);\n\n      // Act\n      const result = parser.parse(args);\n\n      // Assert - verify boolean flag behavior\n      expect(result.flags.debug).toBe(true);\n      expect(result.flags.verbose).toBe(false);\n    });\n\n    it('should parse array flags', () => {\n      // Arrange\n      const args = ['build', '--include', 'file1.js', '--include', 'file2.js'];\n      const expectedResult: ParseResult = {\n        command: 'build',\n        args: [],\n        flags: {\n          include: ['file1.js', 'file2.js']\n        },\n        unknown: [],\n        raw: args\n      };\n      mockParseFunction.mockReturnValue(expectedResult);\n\n      // Act\n      const result = parser.parse(args);\n\n      // Assert - verify array flag behavior\n      expect(result.flags.include).toEqual(['file1.js', 'file2.js']);\n    });\n  });\n\n  describe('command definition behavior', () => {\n    it('should register command with configuration', () => {\n      // Arrange\n      const commandConfig: CommandDefinition = {\n        name: 'deploy',\n        description: 'Deploy application',\n        aliases: ['d'],\n        flags: [\n          {\n            name: 'env',\n            type: 'string',\n            description: 'Environment to deploy to',\n            required: true\n          },\n          {\n            name: 'verbose',\n            type: 'boolean',\n            description: 'Verbose output',\n            aliases: ['v']\n          }\n        ],\n        args: [\n          {\n            name: 'target',\n            description: 'Deployment target',\n            required: true\n          }\n        ]\n      };\n\n      // Act\n      parser.addCommand(commandConfig);\n\n      // Assert - verify command registration behavior\n      expect(parser.hasCommand('deploy')).toBe(true);\n      expect(parser.hasCommand('d')).toBe(true); // alias\n      expect(parser.getCommand('deploy')).toEqual(commandConfig);\n    });\n\n    it('should register multiple commands without conflicts', () => {\n      // Arrange\n      const cmd1: CommandDefinition = { name: 'start', description: 'Start service' };\n      const cmd2: CommandDefinition = { name: 'stop', description: 'Stop service' };\n\n      // Act\n      parser.addCommand(cmd1);\n      parser.addCommand(cmd2);\n\n      // Assert - verify multiple command registration\n      expect(parser.hasCommand('start')).toBe(true);\n      expect(parser.hasCommand('stop')).toBe(true);\n      expect(parser.getCommand('start')).toEqual(cmd1);\n      expect(parser.getCommand('stop')).toEqual(cmd2);\n    });\n\n    it('should handle command aliases correctly', () => {\n      // Arrange\n      const commandConfig: CommandDefinition = {\n        name: 'status',\n        aliases: ['st', 'stat', 's']\n      };\n\n      // Act\n      parser.addCommand(commandConfig);\n\n      // Assert - verify alias behavior\n      const aliases = ['st', 'stat', 's'];\n      aliases.forEach(alias => {\n        expect(parser.hasCommand(alias)).toBe(true);\n        expect(parser.getCommand(alias)).toBe(commandConfig);\n      });\n    });\n  });\n\n  describe('validation behavior', () => {\n    it('should validate parsed result and return validation errors', () => {\n      // Arrange\n      const parseResult: ParseResult = {\n        command: 'deploy',\n        args: [],\n        flags: { env: 'production' },\n        unknown: [],\n        raw: ['deploy', '--env', 'production']\n      };\n\n      const validationResult: ValidationResult = {\n        valid: false,\n        errors: ['Missing required argument: target'],\n        warnings: []\n      };\n\n      mockValidateFunction.mockReturnValue(validationResult);\n\n      // Act\n      const result = parser.validate(parseResult);\n\n      // Assert - verify validation behavior\n      expect(mockValidateFunction).toHaveBeenCalledWith(parseResult);\n      expect(result).toEqual(validationResult);\n      expect(result.valid).toBe(false);\n      expect(result.errors).toContain('Missing required argument: target');\n    });\n\n    it('should validate required flags', () => {\n      // Arrange\n      const parseResult: ParseResult = {\n        command: 'deploy',\n        args: ['app'],\n        flags: {}, // Missing required --env flag\n        unknown: [],\n        raw: ['deploy', 'app']\n      };\n\n      const validationResult: ValidationResult = {\n        valid: false,\n        errors: ['Required flag --env is missing'],\n        warnings: []\n      };\n\n      mockValidateFunction.mockReturnValue(validationResult);\n\n      // Act\n      const result = parser.validate(parseResult);\n\n      // Assert - verify required flag validation\n      expect(result.valid).toBe(false);\n      expect(result.errors).toContain('Required flag --env is missing');\n    });\n\n    it('should validate flag types', () => {\n      // Arrange\n      const parseResult: ParseResult = {\n        command: 'config',\n        args: [],\n        flags: {\n          port: 'not-a-number' // Should be number\n        },\n        unknown: [],\n        raw: ['config', '--port', 'not-a-number']\n      };\n\n      const validationResult: ValidationResult = {\n        valid: false,\n        errors: ['Flag --port must be a number'],\n        warnings: []\n      };\n\n      mockValidateFunction.mockReturnValue(validationResult);\n\n      // Act\n      const result = parser.validate(parseResult);\n\n      // Assert - verify type validation behavior\n      expect(result.valid).toBe(false);\n      expect(result.errors).toContain('Flag --port must be a number');\n    });\n\n    it('should return warnings for deprecated flags', () => {\n      // Arrange\n      const parseResult: ParseResult = {\n        command: 'build',\n        args: [],\n        flags: {\n          'old-flag': true\n        },\n        unknown: [],\n        raw: ['build', '--old-flag']\n      };\n\n      const validationResult: ValidationResult = {\n        valid: true,\n        errors: [],\n        warnings: ['Flag --old-flag is deprecated, use --new-flag instead']\n      };\n\n      mockValidateFunction.mockReturnValue(validationResult);\n\n      // Act\n      const result = parser.validate(parseResult);\n\n      // Assert - verify warning behavior\n      expect(result.valid).toBe(true);\n      expect(result.warnings).toContain('Flag --old-flag is deprecated, use --new-flag instead');\n    });\n  });\n\n  describe('options configuration behavior', () => {\n    it('should apply parser options correctly', () => {\n      // Arrange\n      const options: ParserOptions = {\n        allowUnknownFlags: true,\n        allowUnknownCommands: false,\n        stopAtFirstUnknown: true,\n        flagPrefix: '--',\n        helpFlag: ['help', 'h'],\n        versionFlag: ['version', 'v']\n      };\n\n      // Act\n      parser.setOptions(options);\n\n      // Assert - verify options application\n      const appliedOptions = parser.getOptions();\n      expect(appliedOptions).toEqual(options);\n    });\n\n    it('should merge options with existing configuration', () => {\n      // Arrange\n      parser.setOptions({ allowUnknownFlags: true });\n      parser.setOptions({ allowUnknownCommands: false });\n\n      // Act\n      const options = parser.getOptions();\n\n      // Assert - verify option merging behavior\n      expect(options.allowUnknownFlags).toBe(true);\n      expect(options.allowUnknownCommands).toBe(false);\n    });\n  });\n\n  describe('help generation behavior', () => {\n    it('should generate help text', () => {\n      // Act\n      const help = parser.getHelp();\n\n      // Assert - verify help generation\n      expect(help).toBe('Mock help text');\n    });\n  });\n\n  describe('edge case behavior', () => {\n    it('should handle empty argument array', () => {\n      // Arrange\n      const expectedResult: ParseResult = {\n        command: null,\n        args: [],\n        flags: {},\n        unknown: [],\n        raw: []\n      };\n      mockParseFunction.mockReturnValue(expectedResult);\n\n      // Act\n      const result = parser.parse([]);\n\n      // Assert - verify empty args handling\n      expect(mockParseFunction).toHaveBeenCalledWith([]);\n      expect(result.command).toBeNull();\n      expect(result.args).toEqual([]);\n    });\n\n    it('should handle flags without values', () => {\n      // Arrange\n      const args = ['command', '--flag-without-value'];\n      const expectedResult: ParseResult = {\n        command: 'command',\n        args: [],\n        flags: {\n          'flag-without-value': true // Boolean flag\n        },\n        unknown: [],\n        raw: args\n      };\n      mockParseFunction.mockReturnValue(expectedResult);\n\n      // Act\n      const result = parser.parse(args);\n\n      // Assert - verify flag without value handling\n      expect(result.flags['flag-without-value']).toBe(true);\n    });\n\n    it('should handle special characters in arguments', () => {\n      // Arrange\n      const args = ['deploy', '--message', 'Deploy v1.0.0 with \"quotes\" and spaces'];\n      const expectedResult: ParseResult = {\n        command: 'deploy',\n        args: [],\n        flags: {\n          message: 'Deploy v1.0.0 with \"quotes\" and spaces'\n        },\n        unknown: [],\n        raw: args\n      };\n      mockParseFunction.mockReturnValue(expectedResult);\n\n      // Act\n      const result = parser.parse(args);\n\n      // Assert - verify special character handling\n      expect(result.flags.message).toBe('Deploy v1.0.0 with \"quotes\" and spaces');\n    });\n\n    it('should handle variadic arguments', () => {\n      // Arrange\n      const args = ['process', 'file1.js', 'file2.js', 'file3.js'];\n      const expectedResult: ParseResult = {\n        command: 'process',\n        args: ['file1.js', 'file2.js', 'file3.js'],\n        flags: {},\n        unknown: [],\n        raw: args\n      };\n      mockParseFunction.mockReturnValue(expectedResult);\n\n      // Act\n      const result = parser.parse(args);\n\n      // Assert - verify variadic argument handling\n      expect(result.args).toEqual(['file1.js', 'file2.js', 'file3.js']);\n    });\n  });\n});"],"version":3}