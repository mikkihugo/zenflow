7ffb702b495fcef7abf9decc9e4774dd
/**
 * Claude-Zen WebSocket Client - London School TDD Tests
 *
 * Testing the Node.js 22 native WebSocket client using London School principles:
 * - Outside-in development from real-time communication requirements
 * - Mock-driven contracts for connection management
 * - Behavior verification for reconnection and error handling
 * - Focus on client-server interaction patterns
 */
import { jest, describe, it, expect, beforeEach, afterEach } from '@jest/globals';
// === MOCK DEPENDENCIES (London School Contract Definition) ===
// Mock Node.js WebSocket - Native WebSocket contract
const mockWebSocket = {
    connect: jest.fn(),
    send: jest.fn(),
    close: jest.fn(),
    on: jest.fn(),
    off: jest.fn(),
    readyState: 1, // OPEN
    CONNECTING: 0,
    OPEN: 1,
    CLOSING: 2,
    CLOSED: 3,
};
// Mock EventEmitter - Event handling contract
const mockEventEmitter = {
    emit: jest.fn(),
    on: jest.fn(),
    off: jest.fn(),
    removeAllListeners: jest.fn(),
};
// Mock Reconnection Manager - Connection resilience contract
const mockReconnectionManager = {
    shouldReconnect: jest.fn(),
    getReconnectDelay: jest.fn(),
    incrementAttempts: jest.fn(),
    resetAttempts: jest.fn(),
    isMaxAttemptsReached: jest.fn(),
};
// Mock Message Queue - Message buffering contract
const mockMessageQueue = {
    enqueue: jest.fn(),
    dequeue: jest.fn(),
    flush: jest.fn(),
    clear: jest.fn(),
    size: jest.fn(),
};
// Mock Heartbeat Manager - Connection health contract
const mockHeartbeatManager = {
    start: jest.fn(),
    stop: jest.fn(),
    ping: jest.fn(),
    onPong: jest.fn(),
    isHealthy: jest.fn(),
};
describe('Claude-Zen WebSocket Client - London School TDD', () => {
    // Mock WebSocket Client class (based on actual implementation structure)
    class MockWebSocketClient {
        ws;
        eventEmitter;
        reconnectionManager;
        messageQueue;
        heartbeatManager;
        url = '';
        options = {};
        constructor() {
            this.ws = null;
            this.eventEmitter = mockEventEmitter;
            this.reconnectionManager = mockReconnectionManager;
            this.messageQueue = mockMessageQueue;
            this.heartbeatManager = mockHeartbeatManager;
        }
        async connect(url, options = {}) {
            this.url = url;
            this.options = options;
            // Create WebSocket connection
            this.ws = mockWebSocket;
            await mockWebSocket.connect(url);
            // Setup event handlers
            mockWebSocket.on('open', this.handleOpen.bind(this));
            mockWebSocket.on('message', this.handleMessage.bind(this));
            mockWebSocket.on('close', this.handleClose.bind(this));
            mockWebSocket.on('error', this.handleError.bind(this));
            // Start heartbeat if enabled
            if (options.heartbeat) {
                mockHeartbeatManager.start();
            }
            return Promise.resolve();
        }
        async send(data) {
            if (this.isConnected()) {
                return mockWebSocket.send(JSON.stringify(data));
            }
            else {
                // Queue message for when connection is restored
                mockMessageQueue.enqueue(data);
                return Promise.resolve();
            }
        }
        isConnected() {
            return this.ws && mockWebSocket.readyState === mockWebSocket.OPEN;
        }
        handleOpen() {
            mockEventEmitter.emit('connected');
            mockReconnectionManager.resetAttempts();
            mockMessageQueue.flush();
        }
        handleMessage(data) {
            const parsed = JSON.parse(data);
            mockEventEmitter.emit('message', parsed);
        }
        handleClose(code, reason) {
            mockEventEmitter.emit('disconnected', { code, reason });
            mockHeartbeatManager.stop();
            if (mockReconnectionManager.shouldReconnect({ code, reason })) {
                this.attemptReconnection();
            }
        }
        handleError(error) {
            mockEventEmitter.emit('error', error);
        }
        async attemptReconnection() {
            if (!mockReconnectionManager.isMaxAttemptsReached()) {
                const delay = mockReconnectionManager.getReconnectDelay(1);
                mockReconnectionManager.incrementAttempts();
                setTimeout(() => {
                    this.connect(this.url, this.options);
                }, delay);
            }
        }
        on(event, handler) {
            mockEventEmitter.on(event, handler);
        }
    }
    describe('ðŸŽ¯ Acceptance Tests - Real-time Communication', () => {
        describe('User Story: WebSocket Connection Management', () => {
            it('should establish connection with proper event handling setup', async () => {
                // Arrange - Mock successful connection
                mockWebSocket.connect.mockResolvedValue(undefined);
                mockWebSocket.on.mockImplementation((event, handler) => {
                    // Simulate immediate connection success
                    if (event === 'open') {
                        setTimeout(() => handler(), 0);
                    }
                });
                mockHeartbeatManager.start.mockImplementation(() => { });
                const client = new MockWebSocketClient();
                const connectionHandler = jest.fn();
                client.on('connected', connectionHandler);
                // Act - Connect to WebSocket server
                await client.connect('ws://localhost:4000', {
                    heartbeat: true,
                    reconnect: true
                });
                // Assert - Verify connection establishment conversation
                expect(mockWebSocket.connect).toHaveBeenCalledWith('ws://localhost:4000');
                expect(mockWebSocket.on).toHaveBeenCalledWith('open', expect.any(Function));
                expect(mockWebSocket.on).toHaveBeenCalledWith('message', expect.any(Function));
                expect(mockWebSocket.on).toHaveBeenCalledWith('close', expect.any(Function));
                expect(mockWebSocket.on).toHaveBeenCalledWith('error', expect.any(Function));
                expect(mockHeartbeatManager.start).toHaveBeenCalled();
            });
        });
        describe('User Story: Message Transmission with Queuing', () => {
            it('should send messages immediately when connected, queue when disconnected', async () => {
                // Arrange - Mock connection states
                mockWebSocket.readyState = mockWebSocket.OPEN;
                mockWebSocket.send.mockResolvedValue(undefined);
                mockMessageQueue.enqueue.mockImplementation(() => { });
                const client = new MockWebSocketClient();
                client['ws'] = mockWebSocket; // Simulate connected state
                const connectedMessage = { type: 'task-update', data: { status: 'completed' } };
                const disconnectedMessage = { type: 'queen-status', data: { id: 'arch-001' } };
                // Act - Send message when connected
                await client.send(connectedMessage);
                // Simulate disconnection
                mockWebSocket.readyState = mockWebSocket.CLOSED;
                // Send message when disconnected
                await client.send(disconnectedMessage);
                // Assert - Verify message handling conversation
                expect(mockWebSocket.send).toHaveBeenCalledWith(JSON.stringify(connectedMessage));
                expect(mockMessageQueue.enqueue).toHaveBeenCalledWith(disconnectedMessage);
            });
        });
        describe('User Story: Automatic Reconnection with Backoff', () => {
            it('should handle connection loss with intelligent reconnection strategy', async () => {
                // Arrange - Mock reconnection logic
                mockReconnectionManager.shouldReconnect.mockReturnValue(true);
                mockReconnectionManager.isMaxAttemptsReached.mockReturnValue(false);
                mockReconnectionManager.getReconnectDelay.mockReturnValue(1000);
                mockReconnectionManager.incrementAttempts.mockImplementation(() => { });
                const client = new MockWebSocketClient();
                // Simulate connection established
                mockWebSocket.on.mockImplementation((event, handler) => {
                    if (event === 'close') {
                        // Store close handler for later invocation
                        setTimeout(() => handler(1006, 'Connection lost'), 0);
                    }
                });
                await client.connect('ws://localhost:4000', { reconnect: true });
                // Wait for close event to trigger reconnection logic
                await new Promise(resolve => setTimeout(resolve, 10));
                // Assert - Verify reconnection conversation
                expect(mockReconnectionManager.shouldReconnect).toHaveBeenCalledWith({
                    code: 1006,
                    reason: 'Connection lost'
                });
                expect(mockReconnectionManager.isMaxAttemptsReached).toHaveBeenCalled();
                expect(mockReconnectionManager.getReconnectDelay).toHaveBeenCalledWith(1);
                expect(mockReconnectionManager.incrementAttempts).toHaveBeenCalled();
            });
        });
    });
    describe('ðŸ”— Contract Verification - Component Integration', () => {
        describe('Heartbeat Integration', () => {
            it('should coordinate heartbeat with connection lifecycle', async () => {
                // Arrange - Mock heartbeat coordination
                mockHeartbeatManager.start.mockImplementation(() => { });
                mockHeartbeatManager.stop.mockImplementation(() => { });
                mockHeartbeatManager.ping.mockImplementation(() => { });
                mockHeartbeatManager.isHealthy.mockReturnValue(true);
                const client = new MockWebSocketClient();
                // Mock connection open/close events
                mockWebSocket.on.mockImplementation((event, handler) => {
                    if (event === 'open') {
                        setTimeout(() => handler(), 0);
                    }
                    else if (event === 'close') {
                        setTimeout(() => handler(1000, 'Normal closure'), 100);
                    }
                });
                // Act - Connect and then disconnect
                await client.connect('ws://localhost:4000', { heartbeat: true });
                // Simulate close event
                await new Promise(resolve => setTimeout(resolve, 150));
                // Assert - Verify heartbeat lifecycle conversation
                expect(mockHeartbeatManager.start).toHaveBeenCalled();
                expect(mockHeartbeatManager.stop).toHaveBeenCalled();
            });
        });
        describe('Message Queue Integration', () => {
            it('should flush queued messages upon reconnection', async () => {
                // Arrange - Mock queue flush on reconnection
                mockMessageQueue.flush.mockImplementation(() => { });
                mockMessageQueue.enqueue.mockImplementation(() => { });
                mockReconnectionManager.resetAttempts.mockImplementation(() => { });
                const client = new MockWebSocketClient();
                // Mock successful reconnection
                mockWebSocket.on.mockImplementation((event, handler) => {
                    if (event === 'open') {
                        setTimeout(() => handler(), 0);
                    }
                });
                // Act - Simulate reconnection
                await client.connect('ws://localhost:4000');
                // Wait for open event
                await new Promise(resolve => setTimeout(resolve, 10));
                // Assert - Verify message queue integration conversation
                expect(mockMessageQueue.flush).toHaveBeenCalled();
                expect(mockReconnectionManager.resetAttempts).toHaveBeenCalled();
            });
        });
    });
    describe('ðŸ§ª London School Patterns - WebSocket Communication', () => {
        it('should demonstrate event-driven interaction testing', () => {
            // London School: Test HOW events flow through the system
            const mockEventBus = {
                subscribe: jest.fn(),
                publish: jest.fn(),
                unsubscribe: jest.fn()
            };
            const eventDrivenClient = {
                setupEventHandlers: () => {
                    mockEventBus.subscribe('connection-status', (status) => {
                        if (status === 'connected') {
                            mockEventBus.publish('ready-for-messages', true);
                        }
                    });
                    mockEventBus.subscribe('message-received', (message) => {
                        mockEventBus.publish('message-processed', message.id);
                    });
                }
            };
            // Act - Setup event handling
            eventDrivenClient.setupEventHandlers();
            // Simulate events
            mockEventBus.subscribe.mock.calls[0][1]('connected');
            mockEventBus.subscribe.mock.calls[1][1]({ id: 'msg-123', data: 'test' });
            // Assert - Verify event interaction conversation
            expect(mockEventBus.subscribe).toHaveBeenCalledWith('connection-status', expect.any(Function));
            expect(mockEventBus.subscribe).toHaveBeenCalledWith('message-received', expect.any(Function));
            expect(mockEventBus.publish).toHaveBeenCalledWith('ready-for-messages', true);
            expect(mockEventBus.publish).toHaveBeenCalledWith('message-processed', 'msg-123');
        });
        it('should use mocks to drive connection resilience design', () => {
            // London School: Mocks help discover optimal resilience patterns
            const mockResilienceStrategy = {
                evaluateConnectionHealth: jest.fn(),
                determineReconnectionStrategy: jest.fn(),
                executeRecoveryPlan: jest.fn()
            };
            const resilientClient = {
                handleConnectionIssue: async (issue) => {
                    const health = mockResilienceStrategy.evaluateConnectionHealth(issue);
                    const strategy = mockResilienceStrategy.determineReconnectionStrategy(health);
                    return mockResilienceStrategy.executeRecoveryPlan(strategy);
                }
            };
            // Mock the resilience conversation
            mockResilienceStrategy.evaluateConnectionHealth.mockReturnValue({ severity: 'moderate' });
            mockResilienceStrategy.determineReconnectionStrategy.mockReturnValue({ type: 'exponential-backoff' });
            mockResilienceStrategy.executeRecoveryPlan.mockResolvedValue({ success: true });
            // Act - Test resilience design
            const connectionIssue = { type: 'timeout', duration: 5000 };
            resilientClient.handleConnectionIssue(connectionIssue);
            // Assert - Verify resilience interface exists and behaves correctly
            expect(mockResilienceStrategy.evaluateConnectionHealth).toHaveBeenCalledWith(connectionIssue);
            expect(mockResilienceStrategy.determineReconnectionStrategy).toHaveBeenCalledWith({ severity: 'moderate' });
            expect(mockResilienceStrategy.executeRecoveryPlan).toHaveBeenCalledWith({ type: 'exponential-backoff' });
        });
    });
    // Clean test isolation - London School principle
    beforeEach(() => {
        jest.clearAllMocks();
        // Reset WebSocket state
        mockWebSocket.readyState = mockWebSocket.CLOSED;
    });
    afterEach(() => {
        jest.restoreAllMocks();
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,