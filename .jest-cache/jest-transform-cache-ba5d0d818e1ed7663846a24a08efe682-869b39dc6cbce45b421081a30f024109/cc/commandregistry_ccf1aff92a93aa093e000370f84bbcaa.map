{"file":"/home/mhugo/code/claude-code-flow/src/cli/core/command-registry.ts","mappings":"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","names":[],"sources":["/home/mhugo/code/claude-code-flow/src/cli/core/command-registry.ts"],"sourcesContent":["/**\n * Command Registry\n * \n * Manages command registration, discovery, and execution.\n * Supports dynamic command loading and plugin architecture.\n */\n\nimport { EventEmitter } from 'events';\nimport { readdir, stat } from 'fs/promises';\nimport { join, extname } from 'path';\nimport type {\n  CommandConfig,\n  CommandContext,\n  CommandResult,\n  CommandRegistry as ICommandRegistry,\n  CommandMetadata,\n  AsyncResult\n} from '../types/index.js';\nimport { BaseCommand } from './base-command.js';\n\n/**\n * Command registration entry\n */\ninterface CommandEntry extends CommandMetadata {\n  command?: BaseCommand;\n  loadTime: number;\n  lastUsed?: number;\n  usageCount: number;\n}\n\n/**\n * Command loading statistics\n */\ninterface LoadingStats {\n  totalCommands: number;\n  loadedCommands: number;\n  failedCommands: number;\n  loadTime: number;\n  errors: Array<{ path: string; error: Error }>;\n}\n\n/**\n * Plugin interface for command extensions\n */\nexport interface CommandPlugin {\n  name: string;\n  version: string;\n  commands: CommandConfig[];\n  initialize?(): Promise<void> | void;\n  dispose?(): Promise<void> | void;\n}\n\n/**\n * Command registry implementation\n */\nexport class CommandRegistry extends EventEmitter implements ICommandRegistry {\n  private commands = new Map<string, CommandEntry>();\n  private aliases = new Map<string, string>();\n  private plugins = new Map<string, CommandPlugin>();\n  private loadingPaths: string[] = [];\n  private isInitialized = false;\n\n  /**\n   * Initialize the registry\n   */\n  async initialize(): Promise<void> {\n    if (this.isInitialized) {\n      return;\n    }\n\n    this.emit('initializing');\n    \n    try {\n      // Load plugins first\n      await this.loadPlugins();\n      \n      // Then load commands from configured paths\n      await this.loadCommands();\n      \n      this.isInitialized = true;\n      this.emit('initialized', {\n        commandCount: this.commands.size,\n        pluginCount: this.plugins.size\n      });\n    } catch (error) {\n      this.emit('initialization-error', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Register a command metadata\n   */\n  register(metadata: CommandMetadata): void {\n    if (this.commands.has(metadata.config.name)) {\n      throw new Error(`Command '${metadata.config.name}' is already registered`);\n    }\n\n    const entry: CommandEntry = {\n      ...metadata,\n      loadTime: Date.now(),\n      usageCount: 0\n    };\n\n    this.commands.set(metadata.config.name, entry);\n\n    // Register aliases\n    if (metadata.config.aliases) {\n      for (const alias of metadata.config.aliases) {\n        if (this.aliases.has(alias)) {\n          throw new Error(`Alias '${alias}' is already registered`);\n        }\n        this.aliases.set(alias, metadata.config.name);\n      }\n    }\n\n    this.emit('command-registered', { name: metadata.config.name, metadata });\n  }\n\n  /**\n   * Register a BaseCommand instance\n   */\n  registerCommand(command: BaseCommand): void {\n    this.register(command.metadata);\n    \n    // Store the command instance for execution\n    const entry = this.commands.get(command.metadata.config.name);\n    if (entry) {\n      entry.command = command;\n    }\n  }\n\n  /**\n   * Unregister a command\n   */\n  unregister(name: string): boolean {\n    const entry = this.commands.get(name);\n    if (!entry) {\n      return false;\n    }\n\n    // Remove aliases\n    if (entry.config.aliases) {\n      for (const alias of entry.config.aliases) {\n        this.aliases.delete(alias);\n      }\n    }\n\n    // Dispose of command resources if it's a BaseCommand\n    if (entry.command) {\n      entry.command.dispose();\n    }\n    \n    this.commands.delete(name);\n    this.emit('command-unregistered', { name });\n    \n    return true;\n  }\n\n  /**\n   * Get a command metadata by name or alias\n   */\n  get(name: string): CommandMetadata | undefined {\n    // Check direct name first\n    let entry = this.commands.get(name);\n    \n    // Check aliases if not found\n    if (!entry) {\n      const actualName = this.aliases.get(name);\n      if (actualName) {\n        entry = this.commands.get(actualName);\n      }\n    }\n\n    return entry;\n  }\n\n  /**\n   * Get a BaseCommand instance by name or alias\n   */\n  getCommand(name: string): BaseCommand | null {\n    const entry = this.get(name) as CommandEntry;\n    return entry?.command || null;\n  }\n\n  /**\n   * Check if a command exists\n   */\n  has(name: string): boolean {\n    return this.commands.has(name) || this.aliases.has(name);\n  }\n\n  /**\n   * Get all registered commands metadata\n   */\n  list(): CommandMetadata[] {\n    return Array.from(this.commands.values())\n      .sort((a, b) => a.config.name.localeCompare(b.config.name));\n  }\n\n  /**\n   * Get commands by category\n   */\n  findByCategory(category: string): CommandMetadata[] {\n    return this.list().filter(cmd => cmd.config.category === category);\n  }\n\n  /**\n   * Search commands by name, description, or category\n   */\n  search(query: string): CommandMetadata[] {\n    const lowerQuery = query.toLowerCase();\n    \n    return this.list().filter(cmd => {\n      return cmd.config.name.toLowerCase().includes(lowerQuery) ||\n             cmd.config.description.toLowerCase().includes(lowerQuery) ||\n             cmd.config.category?.toLowerCase().includes(lowerQuery);\n    });\n  }\n\n  /**\n   * Execute a command\n   */\n  async execute(name: string, context: CommandContext): Promise<CommandResult> {\n    const entry = this.get(name) as CommandEntry;\n    \n    if (!entry) {\n      return {\n        success: false,\n        error: `Command '${name}' not found`,\n        exitCode: 127,\n        executionTime: 0\n      };\n    }\n\n    // Update usage statistics\n    const actualName = this.aliases.get(name) || name;\n    const commandEntry = this.commands.get(actualName);\n    if (commandEntry) {\n      commandEntry.lastUsed = Date.now();\n      commandEntry.usageCount++;\n    }\n\n    this.emit('command-executing', { name, context });\n    \n    try {\n      let result: CommandResult;\n\n      // Execute using BaseCommand if available, otherwise use handler\n      if (entry.command) {\n        result = await entry.command.execute(context);\n      } else if (entry.handler) {\n        result = await entry.handler(context);\n      } else {\n        throw new Error(`No execution method available for command '${name}'`);\n      }\n\n      this.emit('command-executed', { name, result });\n      return result;\n    } catch (error) {\n      const commandError = error instanceof Error ? error : new Error(String(error));\n      this.emit('command-error', { name, error: commandError });\n      \n      return {\n        success: false,\n        error: commandError.message,\n        exitCode: 1,\n        executionTime: 0\n      };\n    }\n  }\n\n  /**\n   * Add command loading path\n   */\n  addLoadingPath(path: string): void {\n    if (!this.loadingPaths.includes(path)) {\n      this.loadingPaths.push(path);\n    }\n  }\n\n  /**\n   * Remove command loading path\n   */\n  removeLoadingPath(path: string): void {\n    const index = this.loadingPaths.indexOf(path);\n    if (index > -1) {\n      this.loadingPaths.splice(index, 1);\n    }\n  }\n\n  /**\n   * Load commands from configured paths\n   */\n  private async loadCommands(): Promise<LoadingStats> {\n    const startTime = Date.now();\n    const stats: LoadingStats = {\n      totalCommands: 0,\n      loadedCommands: 0,\n      failedCommands: 0,\n      loadTime: 0,\n      errors: []\n    };\n\n    for (const loadingPath of this.loadingPaths) {\n      try {\n        await this.loadCommandsFromPath(loadingPath, stats);\n      } catch (error) {\n        stats.errors.push({\n          path: loadingPath,\n          error: error instanceof Error ? error : new Error(String(error))\n        });\n        stats.failedCommands++;\n      }\n    }\n\n    stats.loadTime = Date.now() - startTime;\n    this.emit('commands-loaded', stats);\n    \n    return stats;\n  }\n\n  /**\n   * Load commands from a specific path\n   */\n  private async loadCommandsFromPath(path: string, stats: LoadingStats): Promise<void> {\n    try {\n      const pathStat = await stat(path);\n      \n      if (pathStat.isDirectory()) {\n        const files = await readdir(path);\n        \n        for (const file of files) {\n          const filePath = join(path, file);\n          const fileExt = extname(file);\n          \n          if (['.js', '.ts'].includes(fileExt)) {\n            await this.loadCommandFromFile(filePath, stats);\n          }\n        }\n      } else if (['.js', '.ts'].includes(extname(path))) {\n        await this.loadCommandFromFile(path, stats);\n      }\n    } catch (error) {\n      stats.errors.push({\n        path,\n        error: error instanceof Error ? error : new Error(String(error))\n      });\n      stats.failedCommands++;\n    }\n  }\n\n  /**\n   * Load a command from a file\n   */\n  private async loadCommandFromFile(filePath: string, stats: LoadingStats): Promise<void> {\n    try {\n      stats.totalCommands++;\n      \n      // Dynamic import with proper error handling\n      const module = await import(filePath);\n      \n      // Look for command exports\n      const commandClass = module.default || module.Command;\n      \n      if (commandClass && typeof commandClass === 'function') {\n        const command = new commandClass() as BaseCommand;\n        \n        if (command instanceof BaseCommand) {\n          this.registerCommand(command);\n          stats.loadedCommands++;\n          this.emit('command-loaded', { path: filePath, name: command.getConfig().name });\n        } else {\n          throw new Error('Exported class is not a BaseCommand instance');\n        }\n      } else {\n        throw new Error('No valid command export found');\n      }\n    } catch (error) {\n      stats.errors.push({\n        path: filePath,\n        error: error instanceof Error ? error : new Error(String(error))\n      });\n      stats.failedCommands++;\n      this.emit('command-load-error', { path: filePath, error });\n    }\n  }\n\n  /**\n   * Register a plugin\n   */\n  async registerPlugin(plugin: CommandPlugin): Promise<void> {\n    if (this.plugins.has(plugin.name)) {\n      throw new Error(`Plugin '${plugin.name}' is already registered`);\n    }\n\n    try {\n      // Initialize plugin if it has an initialize method\n      if (plugin.initialize) {\n        await plugin.initialize();\n      }\n\n      // Register plugin commands\n      for (const commandConfig of plugin.commands) {\n        // Create a dynamic command metadata from config\n        const metadata: CommandMetadata = {\n          config: commandConfig,\n          handler: async (context: CommandContext): Promise<CommandResult> => {\n            // This is a placeholder - real plugins would provide actual handlers\n            return {\n              success: true,\n              message: `Dynamic command '${commandConfig.name}' executed`,\n              exitCode: 0\n            };\n          },\n          registeredAt: new Date(),\n          available: true,\n          plugin: plugin.name\n        };\n        \n        this.register(metadata);\n      }\n\n      this.plugins.set(plugin.name, plugin);\n      this.emit('plugin-registered', { name: plugin.name, version: plugin.version });\n    } catch (error) {\n      this.emit('plugin-error', { name: plugin.name, error });\n      throw error;\n    }\n  }\n\n  /**\n   * Unregister a plugin\n   */\n  async unregisterPlugin(name: string): Promise<boolean> {\n    const plugin = this.plugins.get(name);\n    if (!plugin) {\n      return false;\n    }\n\n    try {\n      // Unregister plugin commands\n      for (const commandConfig of plugin.commands) {\n        this.unregister(commandConfig.name);\n      }\n\n      // Dispose plugin if it has a dispose method\n      if (plugin.dispose) {\n        await plugin.dispose();\n      }\n\n      this.plugins.delete(name);\n      this.emit('plugin-unregistered', { name });\n      \n      return true;\n    } catch (error) {\n      this.emit('plugin-error', { name, error });\n      throw error;\n    }\n  }\n\n  /**\n   * Load plugins from configuration\n   */\n  private async loadPlugins(): Promise<void> {\n    // This would load plugins from configuration files or plugin directories\n    // For now, this is a placeholder\n    this.emit('plugins-loaded', { count: 0 });\n  }\n\n  /**\n   * Get usage statistics\n   */\n  getUsageStats(): Array<{ name: string; usageCount: number; lastUsed?: number }> {\n    return Array.from(this.commands.entries()).map(([name, entry]) => ({\n      name,\n      usageCount: entry.usageCount,\n      lastUsed: entry.lastUsed\n    }));\n  }\n\n  /**\n   * Clear all commands and plugins\n   */\n  async clear(): Promise<void> {\n    // Unregister all plugins\n    for (const pluginName of this.plugins.keys()) {\n      await this.unregisterPlugin(pluginName);\n    }\n\n    // Unregister all commands\n    for (const commandName of this.commands.keys()) {\n      this.unregister(commandName);\n    }\n\n    this.aliases.clear();\n    this.isInitialized = false;\n    \n    this.emit('cleared');\n  }\n\n  /**\n   * Get registry status\n   */\n  getStatus(): {\n    initialized: boolean;\n    commandCount: number;\n    pluginCount: number;\n    aliasCount: number;\n    loadingPaths: string[];\n  } {\n    return {\n      initialized: this.isInitialized,\n      commandCount: this.commands.size,\n      pluginCount: this.plugins.size,\n      aliasCount: this.aliases.size,\n      loadingPaths: [...this.loadingPaths]\n    };\n  }\n\n  /**\n   * Dispose of registry resources\n   */\n  async dispose(): Promise<void> {\n    await this.clear();\n    this.removeAllListeners();\n    this.loadingPaths.length = 0;\n  }\n}"],"version":3}