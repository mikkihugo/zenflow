ce39fa26274298dfed61b14b56f3d5ad
/* istanbul ignore next */
function cov_279gmbe4qe() {
  var path = "/home/mhugo/code/claude-code-flow/src/maestro/agent-reuse/PerformanceScorer.ts";
  var hash = "52d6646fbb5925dfedcd225fc26135c9378e10f6";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/home/mhugo/code/claude-code-flow/src/maestro/agent-reuse/PerformanceScorer.ts",
    statementMap: {
      "0": {
        start: {
          line: 6,
          column: 25
        },
        end: {
          line: 6,
          column: 34
        }
      },
      "1": {
        start: {
          line: 9,
          column: 8
        },
        end: {
          line: 14,
          column: 10
        }
      },
      "2": {
        start: {
          line: 20,
          column: 22
        },
        end: {
          line: 20,
          column: 79
        }
      },
      "3": {
        start: {
          line: 21,
          column: 28
        },
        end: {
          line: 21,
          column: 138
        }
      },
      "4": {
        start: {
          line: 22,
          column: 35
        },
        end: {
          line: 22,
          column: 89
        }
      },
      "5": {
        start: {
          line: 23,
          column: 29
        },
        end: {
          line: 23,
          column: 80
        }
      },
      "6": {
        start: {
          line: 24,
          column: 25
        },
        end: {
          line: 27,
          column: 52
        }
      },
      "7": {
        start: {
          line: 28,
          column: 22
        },
        end: {
          line: 35,
          column: 9
        }
      },
      "8": {
        start: {
          line: 36,
          column: 8
        },
        end: {
          line: 36,
          column: 54
        }
      },
      "9": {
        start: {
          line: 37,
          column: 8
        },
        end: {
          line: 37,
          column: 21
        }
      },
      "10": {
        start: {
          line: 45,
          column: 33
        },
        end: {
          line: 45,
          column: 38
        }
      },
      "11": {
        start: {
          line: 46,
          column: 22
        },
        end: {
          line: 46,
          column: 86
        }
      },
      "12": {
        start: {
          line: 47,
          column: 8
        },
        end: {
          line: 47,
          column: 21
        }
      },
      "13": {
        start: {
          line: 53,
          column: 27
        },
        end: {
          line: 53,
          column: 55
        }
      },
      "14": {
        start: {
          line: 54,
          column: 8
        },
        end: {
          line: 55,
          column: 23
        }
      },
      "15": {
        start: {
          line: 55,
          column: 12
        },
        end: {
          line: 55,
          column: 23
        }
      },
      "16": {
        start: {
          line: 56,
          column: 28
        },
        end: {
          line: 56,
          column: 55
        }
      },
      "17": {
        start: {
          line: 57,
          column: 38
        },
        end: {
          line: 57,
          column: 64
        }
      },
      "18": {
        start: {
          line: 59,
          column: 8
        },
        end: {
          line: 59,
          column: 57
        }
      },
      "19": {
        start: {
          line: 66,
          column: 30
        },
        end: {
          line: 66,
          column: 63
        }
      },
      "20": {
        start: {
          line: 67,
          column: 33
        },
        end: {
          line: 67,
          column: 69
        }
      },
      "21": {
        start: {
          line: 69,
          column: 8
        },
        end: {
          line: 69,
          column: 62
        }
      },
      "22": {
        start: {
          line: 76,
          column: 8
        },
        end: {
          line: 76,
          column: 48
        }
      },
      "23": {
        start: {
          line: 82,
          column: 8
        },
        end: {
          line: 91,
          column: 9
        }
      },
      "24": {
        start: {
          line: 83,
          column: 12
        },
        end: {
          line: 90,
          column: 15
        }
      },
      "25": {
        start: {
          line: 92,
          column: 24
        },
        end: {
          line: 92,
          column: 60
        }
      },
      "26": {
        start: {
          line: 93,
          column: 8
        },
        end: {
          line: 93,
          column: 35
        }
      },
      "27": {
        start: {
          line: 94,
          column: 8
        },
        end: {
          line: 94,
          column: 82
        }
      },
      "28": {
        start: {
          line: 95,
          column: 8
        },
        end: {
          line: 95,
          column: 61
        }
      },
      "29": {
        start: {
          line: 96,
          column: 8
        },
        end: {
          line: 96,
          column: 70
        }
      },
      "30": {
        start: {
          line: 97,
          column: 8
        },
        end: {
          line: 97,
          column: 54
        }
      },
      "31": {
        start: {
          line: 99,
          column: 8
        },
        end: {
          line: 101,
          column: 9
        }
      },
      "32": {
        start: {
          line: 100,
          column: 12
        },
        end: {
          line: 100,
          column: 35
        }
      },
      "33": {
        start: {
          line: 107,
          column: 24
        },
        end: {
          line: 107,
          column: 60
        }
      },
      "34": {
        start: {
          line: 108,
          column: 8
        },
        end: {
          line: 110,
          column: 9
        }
      },
      "35": {
        start: {
          line: 109,
          column: 12
        },
        end: {
          line: 109,
          column: 24
        }
      },
      "36": {
        start: {
          line: 111,
          column: 8
        },
        end: {
          line: 111,
          column: 57
        }
      },
      "37": {
        start: {
          line: 117,
          column: 24
        },
        end: {
          line: 117,
          column: 60
        }
      },
      "38": {
        start: {
          line: 118,
          column: 8
        },
        end: {
          line: 120,
          column: 9
        }
      },
      "39": {
        start: {
          line: 119,
          column: 12
        },
        end: {
          line: 119,
          column: 24
        }
      },
      "40": {
        start: {
          line: 121,
          column: 29
        },
        end: {
          line: 121,
          column: 57
        }
      },
      "41": {
        start: {
          line: 122,
          column: 20
        },
        end: {
          line: 134,
          column: 10
        }
      },
      "42": {
        start: {
          line: 122,
          column: 57
        },
        end: {
          line: 128,
          column: 9
        }
      },
      "43": {
        start: {
          line: 135,
          column: 27
        },
        end: {
          line: 135,
          column: 46
        }
      },
      "44": {
        start: {
          line: 136,
          column: 8
        },
        end: {
          line: 143,
          column: 10
        }
      },
      "45": {
        start: {
          line: 149,
          column: 8
        },
        end: {
          line: 149,
          column: 60
        }
      },
      "46": {
        start: {
          line: 155,
          column: 25
        },
        end: {
          line: 163,
          column: 46
        }
      },
      "47": {
        start: {
          line: 157,
          column: 26
        },
        end: {
          line: 157,
          column: 55
        }
      },
      "48": {
        start: {
          line: 158,
          column: 12
        },
        end: {
          line: 161,
          column: 14
        }
      },
      "49": {
        start: {
          line: 163,
          column: 28
        },
        end: {
          line: 163,
          column: 45
        }
      },
      "50": {
        start: {
          line: 164,
          column: 8
        },
        end: {
          line: 164,
          column: 24
        }
      },
      "51": {
        start: {
          line: 170,
          column: 8
        },
        end: {
          line: 170,
          column: 48
        }
      },
      "52": {
        start: {
          line: 176,
          column: 8
        },
        end: {
          line: 176,
          column: 58
        }
      },
      "53": {
        start: {
          line: 182,
          column: 8
        },
        end: {
          line: 189,
          column: 45
        }
      },
      "54": {
        start: {
          line: 183,
          column: 28
        },
        end: {
          line: 183,
          column: 53
        }
      },
      "55": {
        start: {
          line: 184,
          column: 33
        },
        end: {
          line: 184,
          column: 62
        }
      },
      "56": {
        start: {
          line: 185,
          column: 12
        },
        end: {
          line: 188,
          column: 14
        }
      },
      "57": {
        start: {
          line: 189,
          column: 26
        },
        end: {
          line: 189,
          column: 43
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 8,
            column: 4
          },
          end: {
            line: 8,
            column: 5
          }
        },
        loc: {
          start: {
            line: 8,
            column: 30
          },
          end: {
            line: 15,
            column: 5
          }
        },
        line: 8
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 19,
            column: 4
          },
          end: {
            line: 19,
            column: 5
          }
        },
        loc: {
          start: {
            line: 19,
            column: 58
          },
          end: {
            line: 38,
            column: 5
          }
        },
        line: 19
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 42,
            column: 4
          },
          end: {
            line: 42,
            column: 5
          }
        },
        loc: {
          start: {
            line: 42,
            column: 45
          },
          end: {
            line: 48,
            column: 5
          }
        },
        line: 42
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 52,
            column: 4
          },
          end: {
            line: 52,
            column: 5
          }
        },
        loc: {
          start: {
            line: 52,
            column: 70
          },
          end: {
            line: 60,
            column: 5
          }
        },
        line: 52
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 64,
            column: 4
          },
          end: {
            line: 64,
            column: 5
          }
        },
        loc: {
          start: {
            line: 64,
            column: 46
          },
          end: {
            line: 70,
            column: 5
          }
        },
        line: 64
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 74,
            column: 4
          },
          end: {
            line: 74,
            column: 5
          }
        },
        loc: {
          start: {
            line: 74,
            column: 39
          },
          end: {
            line: 77,
            column: 5
          }
        },
        line: 74
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 81,
            column: 4
          },
          end: {
            line: 81,
            column: 5
          }
        },
        loc: {
          start: {
            line: 81,
            column: 45
          },
          end: {
            line: 102,
            column: 5
          }
        },
        line: 81
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 106,
            column: 4
          },
          end: {
            line: 106,
            column: 5
          }
        },
        loc: {
          start: {
            line: 106,
            column: 29
          },
          end: {
            line: 112,
            column: 5
          }
        },
        line: 106
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 116,
            column: 4
          },
          end: {
            line: 116,
            column: 5
          }
        },
        loc: {
          start: {
            line: 116,
            column: 41
          },
          end: {
            line: 144,
            column: 5
          }
        },
        line: 116
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 122,
            column: 40
          },
          end: {
            line: 122,
            column: 41
          }
        },
        loc: {
          start: {
            line: 122,
            column: 57
          },
          end: {
            line: 128,
            column: 9
          }
        },
        line: 122
      },
      "10": {
        name: "(anonymous_10)",
        decl: {
          start: {
            line: 148,
            column: 4
          },
          end: {
            line: 148,
            column: 5
          }
        },
        loc: {
          start: {
            line: 148,
            column: 35
          },
          end: {
            line: 150,
            column: 5
          }
        },
        line: 148
      },
      "11": {
        name: "(anonymous_11)",
        decl: {
          start: {
            line: 154,
            column: 4
          },
          end: {
            line: 154,
            column: 5
          }
        },
        loc: {
          start: {
            line: 154,
            column: 25
          },
          end: {
            line: 165,
            column: 5
          }
        },
        line: 154
      },
      "12": {
        name: "(anonymous_12)",
        decl: {
          start: {
            line: 156,
            column: 17
          },
          end: {
            line: 156,
            column: 18
          }
        },
        loc: {
          start: {
            line: 156,
            column: 28
          },
          end: {
            line: 162,
            column: 9
          }
        },
        line: 156
      },
      "13": {
        name: "(anonymous_13)",
        decl: {
          start: {
            line: 163,
            column: 18
          },
          end: {
            line: 163,
            column: 19
          }
        },
        loc: {
          start: {
            line: 163,
            column: 28
          },
          end: {
            line: 163,
            column: 45
          }
        },
        line: 163
      },
      "14": {
        name: "(anonymous_14)",
        decl: {
          start: {
            line: 169,
            column: 4
          },
          end: {
            line: 169,
            column: 5
          }
        },
        loc: {
          start: {
            line: 169,
            column: 26
          },
          end: {
            line: 171,
            column: 5
          }
        },
        line: 169
      },
      "15": {
        name: "(anonymous_15)",
        decl: {
          start: {
            line: 175,
            column: 4
          },
          end: {
            line: 175,
            column: 5
          }
        },
        loc: {
          start: {
            line: 175,
            column: 23
          },
          end: {
            line: 177,
            column: 5
          }
        },
        line: 175
      },
      "16": {
        name: "(anonymous_16)",
        decl: {
          start: {
            line: 181,
            column: 4
          },
          end: {
            line: 181,
            column: 5
          }
        },
        loc: {
          start: {
            line: 181,
            column: 69
          },
          end: {
            line: 190,
            column: 5
          }
        },
        line: 181
      },
      "17": {
        name: "(anonymous_17)",
        decl: {
          start: {
            line: 182,
            column: 30
          },
          end: {
            line: 182,
            column: 31
          }
        },
        loc: {
          start: {
            line: 182,
            column: 39
          },
          end: {
            line: 189,
            column: 9
          }
        },
        line: 182
      },
      "18": {
        name: "(anonymous_18)",
        decl: {
          start: {
            line: 189,
            column: 16
          },
          end: {
            line: 189,
            column: 17
          }
        },
        loc: {
          start: {
            line: 189,
            column: 26
          },
          end: {
            line: 189,
            column: 43
          }
        },
        line: 189
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 8,
            column: 16
          },
          end: {
            line: 8,
            column: 28
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 8,
            column: 26
          },
          end: {
            line: 8,
            column: 28
          }
        }],
        line: 8
      },
      "1": {
        loc: {
          start: {
            line: 10,
            column: 19
          },
          end: {
            line: 10,
            column: 39
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 10,
            column: 19
          },
          end: {
            line: 10,
            column: 32
          }
        }, {
          start: {
            line: 10,
            column: 36
          },
          end: {
            line: 10,
            column: 39
          }
        }],
        line: 10
      },
      "2": {
        loc: {
          start: {
            line: 11,
            column: 25
          },
          end: {
            line: 11,
            column: 51
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 11,
            column: 25
          },
          end: {
            line: 11,
            column: 44
          }
        }, {
          start: {
            line: 11,
            column: 48
          },
          end: {
            line: 11,
            column: 51
          }
        }],
        line: 11
      },
      "3": {
        loc: {
          start: {
            line: 12,
            column: 32
          },
          end: {
            line: 12,
            column: 65
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 12,
            column: 32
          },
          end: {
            line: 12,
            column: 58
          }
        }, {
          start: {
            line: 12,
            column: 62
          },
          end: {
            line: 12,
            column: 65
          }
        }],
        line: 12
      },
      "4": {
        loc: {
          start: {
            line: 13,
            column: 26
          },
          end: {
            line: 13,
            column: 53
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 13,
            column: 26
          },
          end: {
            line: 13,
            column: 46
          }
        }, {
          start: {
            line: 13,
            column: 50
          },
          end: {
            line: 13,
            column: 53
          }
        }],
        line: 13
      },
      "5": {
        loc: {
          start: {
            line: 54,
            column: 8
          },
          end: {
            line: 55,
            column: 23
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 54,
            column: 8
          },
          end: {
            line: 55,
            column: 23
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 54
      },
      "6": {
        loc: {
          start: {
            line: 82,
            column: 8
          },
          end: {
            line: 91,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 82,
            column: 8
          },
          end: {
            line: 91,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 82
      },
      "7": {
        loc: {
          start: {
            line: 99,
            column: 8
          },
          end: {
            line: 101,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 99,
            column: 8
          },
          end: {
            line: 101,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 99
      },
      "8": {
        loc: {
          start: {
            line: 108,
            column: 8
          },
          end: {
            line: 110,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 108,
            column: 8
          },
          end: {
            line: 110,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 108
      },
      "9": {
        loc: {
          start: {
            line: 108,
            column: 12
          },
          end: {
            line: 108,
            column: 51
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 108,
            column: 12
          },
          end: {
            line: 108,
            column: 20
          }
        }, {
          start: {
            line: 108,
            column: 24
          },
          end: {
            line: 108,
            column: 51
          }
        }],
        line: 108
      },
      "10": {
        loc: {
          start: {
            line: 116,
            column: 29
          },
          end: {
            line: 116,
            column: 39
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 116,
            column: 37
          },
          end: {
            line: 116,
            column: 39
          }
        }],
        line: 116
      },
      "11": {
        loc: {
          start: {
            line: 118,
            column: 8
          },
          end: {
            line: 120,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 118,
            column: 8
          },
          end: {
            line: 120,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 118
      },
      "12": {
        loc: {
          start: {
            line: 118,
            column: 12
          },
          end: {
            line: 118,
            column: 51
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 118,
            column: 12
          },
          end: {
            line: 118,
            column: 20
          }
        }, {
          start: {
            line: 118,
            column: 24
          },
          end: {
            line: 118,
            column: 51
          }
        }],
        line: 118
      },
      "13": {
        loc: {
          start: {
            line: 149,
            column: 15
          },
          end: {
            line: 149,
            column: 59
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 149,
            column: 15
          },
          end: {
            line: 149,
            column: 51
          }
        }, {
          start: {
            line: 149,
            column: 55
          },
          end: {
            line: 149,
            column: 59
          }
        }],
        line: 149
      },
      "14": {
        loc: {
          start: {
            line: 160,
            column: 23
          },
          end: {
            line: 160,
            column: 42
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 160,
            column: 23
          },
          end: {
            line: 160,
            column: 37
          }
        }, {
          start: {
            line: 160,
            column: 41
          },
          end: {
            line: 160,
            column: 42
          }
        }],
        line: 160
      },
      "15": {
        loc: {
          start: {
            line: 183,
            column: 28
          },
          end: {
            line: 183,
            column: 53
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 183,
            column: 28
          },
          end: {
            line: 183,
            column: 36
          }
        }, {
          start: {
            line: 183,
            column: 40
          },
          end: {
            line: 183,
            column: 53
          }
        }],
        line: 183
      },
      "16": {
        loc: {
          start: {
            line: 187,
            column: 23
          },
          end: {
            line: 187,
            column: 51
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 187,
            column: 23
          },
          end: {
            line: 187,
            column: 44
          }
        }, {
          start: {
            line: 187,
            column: 48
          },
          end: {
            line: 187,
            column: 51
          }
        }],
        line: 187
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0
    },
    b: {
      "0": [0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0, 0],
      "10": [0],
      "11": [0, 0],
      "12": [0, 0],
      "13": [0, 0],
      "14": [0, 0],
      "15": [0, 0],
      "16": [0, 0]
    },
    inputSourceMap: {
      file: "/home/mhugo/code/claude-code-flow/src/maestro/agent-reuse/PerformanceScorer.ts",
      mappings: "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",
      names: [],
      sources: ["/home/mhugo/code/claude-code-flow/src/maestro/agent-reuse/PerformanceScorer.ts"],
      sourcesContent: ["/**\n * Performance Scorer for Agent Selection\n * Calculates performance scores for agents based on various metrics\n */\n\nimport { WorkloadMetrics } from './WorkloadMonitor.js';\n\nexport interface PerformanceScore {\n  overall: number;\n  speed: number;\n  reliability: number;\n  resourceEfficiency: number;\n  availability: number;\n  timestamp: Date;\n}\n\nexport interface AgentPerformanceHistory {\n  agentId: string;\n  scores: PerformanceScore[];\n  totalTasks: number;\n  successfulTasks: number;\n  averageResponseTime: number;\n  uptimePercentage: number;\n}\n\nexport interface ScoringWeights {\n  speed: number;\n  reliability: number;\n  resourceEfficiency: number;\n  availability: number;\n}\n\nexport class PerformanceScorer {\n  private performanceHistory: Map<string, AgentPerformanceHistory> = new Map();\n  private weights: ScoringWeights;\n\n  constructor(weights: Partial<ScoringWeights> = {}) {\n    this.weights = {\n      speed: weights.speed || 0.3,\n      reliability: weights.reliability || 0.4,\n      resourceEfficiency: weights.resourceEfficiency || 0.2,\n      availability: weights.availability || 0.1\n    };\n  }\n\n  /**\n   * Calculate performance score for an agent\n   */\n  calculateScore(\n    agentId: string,\n    workloadMetrics: WorkloadMetrics,\n    taskHistory: {\n      completedTasks: number;\n      failedTasks: number;\n      averageTaskDuration: number;\n      uptime: number;\n    }\n  ): PerformanceScore {\n    const speed = this.calculateSpeedScore(taskHistory.averageTaskDuration);\n    const reliability = this.calculateReliabilityScore(\n      taskHistory.completedTasks,\n      taskHistory.failedTasks,\n      workloadMetrics.errorRate\n    );\n    const resourceEfficiency = this.calculateResourceEfficiencyScore(workloadMetrics);\n    const availability = this.calculateAvailabilityScore(taskHistory.uptime);\n\n    const overall = (\n      speed * this.weights.speed +\n      reliability * this.weights.reliability +\n      resourceEfficiency * this.weights.resourceEfficiency +\n      availability * this.weights.availability\n    );\n\n    const score: PerformanceScore = {\n      overall,\n      speed,\n      reliability,\n      resourceEfficiency,\n      availability,\n      timestamp: new Date()\n    };\n\n    this.recordScore(agentId, score, taskHistory);\n    return score;\n  }\n\n  /**\n   * Calculate speed score based on task completion time\n   */\n  private calculateSpeedScore(averageTaskDuration: number): number {\n    // Lower duration = higher score\n    // Normalize assuming 30 seconds is baseline (score = 0.5)\n    const baselineDuration = 30000; // 30 seconds in ms\n    const score = Math.max(0, Math.min(1, baselineDuration / averageTaskDuration));\n    return score;\n  }\n\n  /**\n   * Calculate reliability score based on success rate and error rate\n   */\n  private calculateReliabilityScore(\n    completedTasks: number,\n    failedTasks: number,\n    errorRate: number\n  ): number {\n    const totalTasks = completedTasks + failedTasks;\n    if (totalTasks === 0) return 0.5; // Default score for new agents\n\n    const successRate = completedTasks / totalTasks;\n    const reliabilityFromErrors = Math.max(0, 1 - errorRate);\n    \n    // Average of success rate and error-based reliability\n    return (successRate + reliabilityFromErrors) / 2;\n  }\n\n  /**\n   * Calculate resource efficiency score\n   */\n  private calculateResourceEfficiencyScore(metrics: WorkloadMetrics): number {\n    // Lower resource usage = higher efficiency\n    const cpuEfficiency = Math.max(0, 1 - metrics.cpuUsage);\n    const memoryEfficiency = Math.max(0, 1 - metrics.memoryUsage);\n    \n    // Weighted average (CPU is more important)\n    return (cpuEfficiency * 0.6 + memoryEfficiency * 0.4);\n  }\n\n  /**\n   * Calculate availability score based on uptime\n   */\n  private calculateAvailabilityScore(uptime: number): number {\n    // Uptime should be a percentage (0-1)\n    return Math.max(0, Math.min(1, uptime));\n  }\n\n  /**\n   * Record performance score for historical tracking\n   */\n  private recordScore(\n    agentId: string,\n    score: PerformanceScore,\n    taskHistory: {\n      completedTasks: number;\n      failedTasks: number;\n      averageTaskDuration: number;\n      uptime: number;\n    }\n  ): void {\n    if (!this.performanceHistory.has(agentId)) {\n      this.performanceHistory.set(agentId, {\n        agentId,\n        scores: [],\n        totalTasks: 0,\n        successfulTasks: 0,\n        averageResponseTime: 0,\n        uptimePercentage: 0\n      });\n    }\n\n    const history = this.performanceHistory.get(agentId)!;\n    history.scores.push(score);\n    history.totalTasks = taskHistory.completedTasks + taskHistory.failedTasks;\n    history.successfulTasks = taskHistory.completedTasks;\n    history.averageResponseTime = taskHistory.averageTaskDuration;\n    history.uptimePercentage = taskHistory.uptime;\n\n    // Keep only last 50 scores\n    if (history.scores.length > 50) {\n      history.scores.shift();\n    }\n  }\n\n  /**\n   * Get current performance score for an agent\n   */\n  getCurrentScore(agentId: string): PerformanceScore | null {\n    const history = this.performanceHistory.get(agentId);\n    if (!history || history.scores.length === 0) {\n      return null;\n    }\n    return history.scores[history.scores.length - 1];\n  }\n\n  /**\n   * Get average performance score over time\n   */\n  getAverageScore(agentId: string, count: number = 10): PerformanceScore | null {\n    const history = this.performanceHistory.get(agentId);\n    if (!history || history.scores.length === 0) {\n      return null;\n    }\n\n    const recentScores = history.scores.slice(-count);\n    const sum = recentScores.reduce((acc, score) => ({\n      overall: acc.overall + score.overall,\n      speed: acc.speed + score.speed,\n      reliability: acc.reliability + score.reliability,\n      resourceEfficiency: acc.resourceEfficiency + score.resourceEfficiency,\n      availability: acc.availability + score.availability\n    }), {\n      overall: 0,\n      speed: 0,\n      reliability: 0,\n      resourceEfficiency: 0,\n      availability: 0\n    });\n\n    const scoreCount = recentScores.length;\n    return {\n      overall: sum.overall / scoreCount,\n      speed: sum.speed / scoreCount,\n      reliability: sum.reliability / scoreCount,\n      resourceEfficiency: sum.resourceEfficiency / scoreCount,\n      availability: sum.availability / scoreCount,\n      timestamp: new Date()\n    };\n  }\n\n  /**\n   * Get performance history for an agent\n   */\n  getPerformanceHistory(agentId: string): AgentPerformanceHistory | null {\n    return this.performanceHistory.get(agentId) || null;\n  }\n\n  /**\n   * Compare agents and return sorted by performance\n   */\n  rankAgents(agentIds: string[]): Array<{ agentId: string; score: number }> {\n    const rankings = agentIds\n      .map(agentId => {\n        const score = this.getCurrentScore(agentId);\n        return {\n          agentId,\n          score: score?.overall || 0\n        };\n      })\n      .sort((a, b) => b.score - a.score);\n\n    return rankings;\n  }\n\n  /**\n   * Clear performance history for an agent\n   */\n  clearHistory(agentId: string): void {\n    this.performanceHistory.delete(agentId);\n  }\n\n  /**\n   * Get all tracked agents\n   */\n  getTrackedAgents(): string[] {\n    return Array.from(this.performanceHistory.keys());\n  }\n\n  /**\n   * Score multiple agents for task assignment\n   */\n  async scoreAgents(\n    candidates: any[],\n    requiredCapabilities: string[],\n    taskContext: any\n  ): Promise<Array<{ agent: any; score: number }>> {\n    return candidates.map(agent => {\n      const agentId = agent.id || agent.agentId;\n      const currentScore = this.getCurrentScore(agentId);\n      return {\n        agent,\n        score: currentScore?.overall || 0.5\n      };\n    }).sort((a, b) => b.score - a.score);\n  }\n}"],
      version: 3
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "52d6646fbb5925dfedcd225fc26135c9378e10f6"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_279gmbe4qe = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_279gmbe4qe();
/**
 * Performance Scorer for Agent Selection
 * Calculates performance scores for agents based on various metrics
 */
export class PerformanceScorer {
  performanceHistory =
  /* istanbul ignore next */
  (cov_279gmbe4qe().s[0]++, new Map());
  weights;
  constructor(weights =
  /* istanbul ignore next */
  (cov_279gmbe4qe().b[0][0]++, {})) {
    /* istanbul ignore next */
    cov_279gmbe4qe().f[0]++;
    cov_279gmbe4qe().s[1]++;
    this.weights = {
      speed:
      /* istanbul ignore next */
      (cov_279gmbe4qe().b[1][0]++, weights.speed) ||
      /* istanbul ignore next */
      (cov_279gmbe4qe().b[1][1]++, 0.3),
      reliability:
      /* istanbul ignore next */
      (cov_279gmbe4qe().b[2][0]++, weights.reliability) ||
      /* istanbul ignore next */
      (cov_279gmbe4qe().b[2][1]++, 0.4),
      resourceEfficiency:
      /* istanbul ignore next */
      (cov_279gmbe4qe().b[3][0]++, weights.resourceEfficiency) ||
      /* istanbul ignore next */
      (cov_279gmbe4qe().b[3][1]++, 0.2),
      availability:
      /* istanbul ignore next */
      (cov_279gmbe4qe().b[4][0]++, weights.availability) ||
      /* istanbul ignore next */
      (cov_279gmbe4qe().b[4][1]++, 0.1)
    };
  }
  /**
   * Calculate performance score for an agent
   */
  calculateScore(agentId, workloadMetrics, taskHistory) {
    /* istanbul ignore next */
    cov_279gmbe4qe().f[1]++;
    const speed =
    /* istanbul ignore next */
    (cov_279gmbe4qe().s[2]++, this.calculateSpeedScore(taskHistory.averageTaskDuration));
    const reliability =
    /* istanbul ignore next */
    (cov_279gmbe4qe().s[3]++, this.calculateReliabilityScore(taskHistory.completedTasks, taskHistory.failedTasks, workloadMetrics.errorRate));
    const resourceEfficiency =
    /* istanbul ignore next */
    (cov_279gmbe4qe().s[4]++, this.calculateResourceEfficiencyScore(workloadMetrics));
    const availability =
    /* istanbul ignore next */
    (cov_279gmbe4qe().s[5]++, this.calculateAvailabilityScore(taskHistory.uptime));
    const overall =
    /* istanbul ignore next */
    (cov_279gmbe4qe().s[6]++, speed * this.weights.speed + reliability * this.weights.reliability + resourceEfficiency * this.weights.resourceEfficiency + availability * this.weights.availability);
    const score =
    /* istanbul ignore next */
    (cov_279gmbe4qe().s[7]++, {
      overall,
      speed,
      reliability,
      resourceEfficiency,
      availability,
      timestamp: new Date()
    });
    /* istanbul ignore next */
    cov_279gmbe4qe().s[8]++;
    this.recordScore(agentId, score, taskHistory);
    /* istanbul ignore next */
    cov_279gmbe4qe().s[9]++;
    return score;
  }
  /**
   * Calculate speed score based on task completion time
   */
  calculateSpeedScore(averageTaskDuration) {
    /* istanbul ignore next */
    cov_279gmbe4qe().f[2]++;
    // Lower duration = higher score
    // Normalize assuming 30 seconds is baseline (score = 0.5)
    const baselineDuration =
    /* istanbul ignore next */
    (cov_279gmbe4qe().s[10]++, 30000); // 30 seconds in ms
    const score =
    /* istanbul ignore next */
    (cov_279gmbe4qe().s[11]++, Math.max(0, Math.min(1, baselineDuration / averageTaskDuration)));
    /* istanbul ignore next */
    cov_279gmbe4qe().s[12]++;
    return score;
  }
  /**
   * Calculate reliability score based on success rate and error rate
   */
  calculateReliabilityScore(completedTasks, failedTasks, errorRate) {
    /* istanbul ignore next */
    cov_279gmbe4qe().f[3]++;
    const totalTasks =
    /* istanbul ignore next */
    (cov_279gmbe4qe().s[13]++, completedTasks + failedTasks);
    /* istanbul ignore next */
    cov_279gmbe4qe().s[14]++;
    if (totalTasks === 0) {
      /* istanbul ignore next */
      cov_279gmbe4qe().b[5][0]++;
      cov_279gmbe4qe().s[15]++;
      return 0.5;
    } else
    /* istanbul ignore next */
    {
      cov_279gmbe4qe().b[5][1]++;
    } // Default score for new agents
    const successRate =
    /* istanbul ignore next */
    (cov_279gmbe4qe().s[16]++, completedTasks / totalTasks);
    const reliabilityFromErrors =
    /* istanbul ignore next */
    (cov_279gmbe4qe().s[17]++, Math.max(0, 1 - errorRate));
    // Average of success rate and error-based reliability
    /* istanbul ignore next */
    cov_279gmbe4qe().s[18]++;
    return (successRate + reliabilityFromErrors) / 2;
  }
  /**
   * Calculate resource efficiency score
   */
  calculateResourceEfficiencyScore(metrics) {
    /* istanbul ignore next */
    cov_279gmbe4qe().f[4]++;
    // Lower resource usage = higher efficiency
    const cpuEfficiency =
    /* istanbul ignore next */
    (cov_279gmbe4qe().s[19]++, Math.max(0, 1 - metrics.cpuUsage));
    const memoryEfficiency =
    /* istanbul ignore next */
    (cov_279gmbe4qe().s[20]++, Math.max(0, 1 - metrics.memoryUsage));
    // Weighted average (CPU is more important)
    /* istanbul ignore next */
    cov_279gmbe4qe().s[21]++;
    return cpuEfficiency * 0.6 + memoryEfficiency * 0.4;
  }
  /**
   * Calculate availability score based on uptime
   */
  calculateAvailabilityScore(uptime) {
    /* istanbul ignore next */
    cov_279gmbe4qe().f[5]++;
    cov_279gmbe4qe().s[22]++;
    // Uptime should be a percentage (0-1)
    return Math.max(0, Math.min(1, uptime));
  }
  /**
   * Record performance score for historical tracking
   */
  recordScore(agentId, score, taskHistory) {
    /* istanbul ignore next */
    cov_279gmbe4qe().f[6]++;
    cov_279gmbe4qe().s[23]++;
    if (!this.performanceHistory.has(agentId)) {
      /* istanbul ignore next */
      cov_279gmbe4qe().b[6][0]++;
      cov_279gmbe4qe().s[24]++;
      this.performanceHistory.set(agentId, {
        agentId,
        scores: [],
        totalTasks: 0,
        successfulTasks: 0,
        averageResponseTime: 0,
        uptimePercentage: 0
      });
    } else
    /* istanbul ignore next */
    {
      cov_279gmbe4qe().b[6][1]++;
    }
    const history =
    /* istanbul ignore next */
    (cov_279gmbe4qe().s[25]++, this.performanceHistory.get(agentId));
    /* istanbul ignore next */
    cov_279gmbe4qe().s[26]++;
    history.scores.push(score);
    /* istanbul ignore next */
    cov_279gmbe4qe().s[27]++;
    history.totalTasks = taskHistory.completedTasks + taskHistory.failedTasks;
    /* istanbul ignore next */
    cov_279gmbe4qe().s[28]++;
    history.successfulTasks = taskHistory.completedTasks;
    /* istanbul ignore next */
    cov_279gmbe4qe().s[29]++;
    history.averageResponseTime = taskHistory.averageTaskDuration;
    /* istanbul ignore next */
    cov_279gmbe4qe().s[30]++;
    history.uptimePercentage = taskHistory.uptime;
    // Keep only last 50 scores
    /* istanbul ignore next */
    cov_279gmbe4qe().s[31]++;
    if (history.scores.length > 50) {
      /* istanbul ignore next */
      cov_279gmbe4qe().b[7][0]++;
      cov_279gmbe4qe().s[32]++;
      history.scores.shift();
    } else
    /* istanbul ignore next */
    {
      cov_279gmbe4qe().b[7][1]++;
    }
  }
  /**
   * Get current performance score for an agent
   */
  getCurrentScore(agentId) {
    /* istanbul ignore next */
    cov_279gmbe4qe().f[7]++;
    const history =
    /* istanbul ignore next */
    (cov_279gmbe4qe().s[33]++, this.performanceHistory.get(agentId));
    /* istanbul ignore next */
    cov_279gmbe4qe().s[34]++;
    if (
    /* istanbul ignore next */
    (cov_279gmbe4qe().b[9][0]++, !history) ||
    /* istanbul ignore next */
    (cov_279gmbe4qe().b[9][1]++, history.scores.length === 0)) {
      /* istanbul ignore next */
      cov_279gmbe4qe().b[8][0]++;
      cov_279gmbe4qe().s[35]++;
      return null;
    } else
    /* istanbul ignore next */
    {
      cov_279gmbe4qe().b[8][1]++;
    }
    cov_279gmbe4qe().s[36]++;
    return history.scores[history.scores.length - 1];
  }
  /**
   * Get average performance score over time
   */
  getAverageScore(agentId, count =
  /* istanbul ignore next */
  (cov_279gmbe4qe().b[10][0]++, 10)) {
    /* istanbul ignore next */
    cov_279gmbe4qe().f[8]++;
    const history =
    /* istanbul ignore next */
    (cov_279gmbe4qe().s[37]++, this.performanceHistory.get(agentId));
    /* istanbul ignore next */
    cov_279gmbe4qe().s[38]++;
    if (
    /* istanbul ignore next */
    (cov_279gmbe4qe().b[12][0]++, !history) ||
    /* istanbul ignore next */
    (cov_279gmbe4qe().b[12][1]++, history.scores.length === 0)) {
      /* istanbul ignore next */
      cov_279gmbe4qe().b[11][0]++;
      cov_279gmbe4qe().s[39]++;
      return null;
    } else
    /* istanbul ignore next */
    {
      cov_279gmbe4qe().b[11][1]++;
    }
    const recentScores =
    /* istanbul ignore next */
    (cov_279gmbe4qe().s[40]++, history.scores.slice(-count));
    const sum =
    /* istanbul ignore next */
    (cov_279gmbe4qe().s[41]++, recentScores.reduce((acc, score) => {
      /* istanbul ignore next */
      cov_279gmbe4qe().f[9]++;
      cov_279gmbe4qe().s[42]++;
      return {
        overall: acc.overall + score.overall,
        speed: acc.speed + score.speed,
        reliability: acc.reliability + score.reliability,
        resourceEfficiency: acc.resourceEfficiency + score.resourceEfficiency,
        availability: acc.availability + score.availability
      };
    }, {
      overall: 0,
      speed: 0,
      reliability: 0,
      resourceEfficiency: 0,
      availability: 0
    }));
    const scoreCount =
    /* istanbul ignore next */
    (cov_279gmbe4qe().s[43]++, recentScores.length);
    /* istanbul ignore next */
    cov_279gmbe4qe().s[44]++;
    return {
      overall: sum.overall / scoreCount,
      speed: sum.speed / scoreCount,
      reliability: sum.reliability / scoreCount,
      resourceEfficiency: sum.resourceEfficiency / scoreCount,
      availability: sum.availability / scoreCount,
      timestamp: new Date()
    };
  }
  /**
   * Get performance history for an agent
   */
  getPerformanceHistory(agentId) {
    /* istanbul ignore next */
    cov_279gmbe4qe().f[10]++;
    cov_279gmbe4qe().s[45]++;
    return /* istanbul ignore next */(cov_279gmbe4qe().b[13][0]++, this.performanceHistory.get(agentId)) ||
    /* istanbul ignore next */
    (cov_279gmbe4qe().b[13][1]++, null);
  }
  /**
   * Compare agents and return sorted by performance
   */
  rankAgents(agentIds) {
    /* istanbul ignore next */
    cov_279gmbe4qe().f[11]++;
    const rankings =
    /* istanbul ignore next */
    (cov_279gmbe4qe().s[46]++, agentIds.map(agentId => {
      /* istanbul ignore next */
      cov_279gmbe4qe().f[12]++;
      const score =
      /* istanbul ignore next */
      (cov_279gmbe4qe().s[47]++, this.getCurrentScore(agentId));
      /* istanbul ignore next */
      cov_279gmbe4qe().s[48]++;
      return {
        agentId,
        score:
        /* istanbul ignore next */
        (cov_279gmbe4qe().b[14][0]++, score?.overall) ||
        /* istanbul ignore next */
        (cov_279gmbe4qe().b[14][1]++, 0)
      };
    }).sort((a, b) => {
      /* istanbul ignore next */
      cov_279gmbe4qe().f[13]++;
      cov_279gmbe4qe().s[49]++;
      return b.score - a.score;
    }));
    /* istanbul ignore next */
    cov_279gmbe4qe().s[50]++;
    return rankings;
  }
  /**
   * Clear performance history for an agent
   */
  clearHistory(agentId) {
    /* istanbul ignore next */
    cov_279gmbe4qe().f[14]++;
    cov_279gmbe4qe().s[51]++;
    this.performanceHistory.delete(agentId);
  }
  /**
   * Get all tracked agents
   */
  getTrackedAgents() {
    /* istanbul ignore next */
    cov_279gmbe4qe().f[15]++;
    cov_279gmbe4qe().s[52]++;
    return Array.from(this.performanceHistory.keys());
  }
  /**
   * Score multiple agents for task assignment
   */
  async scoreAgents(candidates, requiredCapabilities, taskContext) {
    /* istanbul ignore next */
    cov_279gmbe4qe().f[16]++;
    cov_279gmbe4qe().s[53]++;
    return candidates.map(agent => {
      /* istanbul ignore next */
      cov_279gmbe4qe().f[17]++;
      const agentId =
      /* istanbul ignore next */
      (cov_279gmbe4qe().s[54]++,
      /* istanbul ignore next */
      (cov_279gmbe4qe().b[15][0]++, agent.id) ||
      /* istanbul ignore next */
      (cov_279gmbe4qe().b[15][1]++, agent.agentId));
      const currentScore =
      /* istanbul ignore next */
      (cov_279gmbe4qe().s[55]++, this.getCurrentScore(agentId));
      /* istanbul ignore next */
      cov_279gmbe4qe().s[56]++;
      return {
        agent,
        score:
        /* istanbul ignore next */
        (cov_279gmbe4qe().b[16][0]++, currentScore?.overall) ||
        /* istanbul ignore next */
        (cov_279gmbe4qe().b[16][1]++, 0.5)
      };
    }).sort((a, b) => {
      /* istanbul ignore next */
      cov_279gmbe4qe().f[18]++;
      cov_279gmbe4qe().s[57]++;
      return b.score - a.score;
    });
  }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,