2a6bb913135f4caa38befcfbab82c2b6
/* istanbul ignore next */
function cov_2cr3owv9z0() {
  var path = "/home/mhugo/code/claude-code-flow/src/cli/commands/swarm/list-command.ts";
  var hash = "25b00ba3479c8d657b6b4fd1f42094424062e072";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/home/mhugo/code/claude-code-flow/src/cli/commands/swarm/list-command.ts",
    statementMap: {
      "0": {
        start: {
          line: 9,
          column: 8
        },
        end: {
          line: 52,
          column: 11
        }
      },
      "1": {
        start: {
          line: 55,
          column: 8
        },
        end: {
          line: 94,
          column: 9
        }
      },
      "2": {
        start: {
          line: 56,
          column: 27
        },
        end: {
          line: 56,
          column: 58
        }
      },
      "3": {
        start: {
          line: 57,
          column: 33
        },
        end: {
          line: 57,
          column: 53
        }
      },
      "4": {
        start: {
          line: 58,
          column: 29
        },
        end: {
          line: 58,
          column: 60
        }
      },
      "5": {
        start: {
          line: 59,
          column: 32
        },
        end: {
          line: 59,
          column: 70
        }
      },
      "6": {
        start: {
          line: 60,
          column: 27
        },
        end: {
          line: 60,
          column: 58
        }
      },
      "7": {
        start: {
          line: 61,
          column: 26
        },
        end: {
          line: 61,
          column: 45
        }
      },
      "8": {
        start: {
          line: 63,
          column: 25
        },
        end: {
          line: 63,
          column: 58
        }
      },
      "9": {
        start: {
          line: 65,
          column: 12
        },
        end: {
          line: 67,
          column: 13
        }
      },
      "10": {
        start: {
          line: 66,
          column: 16
        },
        end: {
          line: 66,
          column: 79
        }
      },
      "11": {
        start: {
          line: 66,
          column: 48
        },
        end: {
          line: 66,
          column: 77
        }
      },
      "12": {
        start: {
          line: 69,
          column: 12
        },
        end: {
          line: 69,
          column: 53
        }
      },
      "13": {
        start: {
          line: 71,
          column: 12
        },
        end: {
          line: 73,
          column: 13
        }
      },
      "14": {
        start: {
          line: 72,
          column: 16
        },
        end: {
          line: 72,
          column: 48
        }
      },
      "15": {
        start: {
          line: 75,
          column: 27
        },
        end: {
          line: 75,
          column: 70
        }
      },
      "16": {
        start: {
          line: 76,
          column: 12
        },
        end: {
          line: 86,
          column: 14
        }
      },
      "17": {
        start: {
          line: 89,
          column: 12
        },
        end: {
          line: 93,
          column: 14
        }
      },
      "18": {
        start: {
          line: 99,
          column: 27
        },
        end: {
          line: 159,
          column: 9
        }
      },
      "19": {
        start: {
          line: 160,
          column: 8
        },
        end: {
          line: 197,
          column: 9
        }
      },
      "20": {
        start: {
          line: 162,
          column: 12
        },
        end: {
          line: 196,
          column: 15
        }
      },
      "21": {
        start: {
          line: 198,
          column: 8
        },
        end: {
          line: 198,
          column: 26
        }
      },
      "22": {
        start: {
          line: 201,
          column: 8
        },
        end: {
          line: 214,
          column: 11
        }
      },
      "23": {
        start: {
          line: 202,
          column: 12
        },
        end: {
          line: 213,
          column: 13
        }
      },
      "24": {
        start: {
          line: 204,
          column: 20
        },
        end: {
          line: 204,
          column: 73
        }
      },
      "25": {
        start: {
          line: 206,
          column: 20
        },
        end: {
          line: 206,
          column: 60
        }
      },
      "26": {
        start: {
          line: 208,
          column: 20
        },
        end: {
          line: 208,
          column: 47
        }
      },
      "27": {
        start: {
          line: 210,
          column: 20
        },
        end: {
          line: 210,
          column: 57
        }
      },
      "28": {
        start: {
          line: 212,
          column: 20
        },
        end: {
          line: 212,
          column: 73
        }
      },
      "29": {
        start: {
          line: 217,
          column: 8
        },
        end: {
          line: 219,
          column: 9
        }
      },
      "30": {
        start: {
          line: 218,
          column: 12
        },
        end: {
          line: 218,
          column: 37
        }
      },
      "31": {
        start: {
          line: 220,
          column: 8
        },
        end: {
          line: 228,
          column: 9
        }
      },
      "32": {
        start: {
          line: 222,
          column: 16
        },
        end: {
          line: 222,
          column: 55
        }
      },
      "33": {
        start: {
          line: 224,
          column: 16
        },
        end: {
          line: 224,
          column: 43
        }
      },
      "34": {
        start: {
          line: 227,
          column: 16
        },
        end: {
          line: 227,
          column: 60
        }
      },
      "35": {
        start: {
          line: 231,
          column: 22
        },
        end: {
          line: 231,
          column: 24
        }
      },
      "36": {
        start: {
          line: 233,
          column: 8
        },
        end: {
          line: 233,
          column: 33
        }
      },
      "37": {
        start: {
          line: 234,
          column: 8
        },
        end: {
          line: 234,
          column: 35
        }
      },
      "38": {
        start: {
          line: 235,
          column: 8
        },
        end: {
          line: 235,
          column: 23
        }
      },
      "39": {
        start: {
          line: 236,
          column: 8
        },
        end: {
          line: 270,
          column: 9
        }
      },
      "40": {
        start: {
          line: 238,
          column: 12
        },
        end: {
          line: 253,
          column: 13
        }
      },
      "41": {
        start: {
          line: 239,
          column: 16
        },
        end: {
          line: 239,
          column: 49
        }
      },
      "42": {
        start: {
          line: 240,
          column: 16
        },
        end: {
          line: 240,
          column: 106
        }
      },
      "43": {
        start: {
          line: 241,
          column: 16
        },
        end: {
          line: 241,
          column: 60
        }
      },
      "44": {
        start: {
          line: 242,
          column: 16
        },
        end: {
          line: 242,
          column: 75
        }
      },
      "45": {
        start: {
          line: 243,
          column: 16
        },
        end: {
          line: 243,
          column: 77
        }
      },
      "46": {
        start: {
          line: 244,
          column: 16
        },
        end: {
          line: 246,
          column: 17
        }
      },
      "47": {
        start: {
          line: 245,
          column: 20
        },
        end: {
          line: 245,
          column: 81
        }
      },
      "48": {
        start: {
          line: 247,
          column: 16
        },
        end: {
          line: 249,
          column: 17
        }
      },
      "49": {
        start: {
          line: 248,
          column: 20
        },
        end: {
          line: 248,
          column: 56
        }
      },
      "50": {
        start: {
          line: 250,
          column: 16
        },
        end: {
          line: 250,
          column: 162
        }
      },
      "51": {
        start: {
          line: 251,
          column: 16
        },
        end: {
          line: 251,
          column: 96
        }
      },
      "52": {
        start: {
          line: 252,
          column: 16
        },
        end: {
          line: 252,
          column: 31
        }
      },
      "53": {
        start: {
          line: 257,
          column: 12
        },
        end: {
          line: 257,
          column: 123
        }
      },
      "54": {
        start: {
          line: 258,
          column: 12
        },
        end: {
          line: 258,
          column: 123
        }
      },
      "55": {
        start: {
          line: 259,
          column: 12
        },
        end: {
          line: 259,
          column: 123
        }
      },
      "56": {
        start: {
          line: 260,
          column: 12
        },
        end: {
          line: 268,
          column: 13
        }
      },
      "57": {
        start: {
          line: 261,
          column: 27
        },
        end: {
          line: 261,
          column: 105
        }
      },
      "58": {
        start: {
          line: 262,
          column: 31
        },
        end: {
          line: 262,
          column: 95
        }
      },
      "59": {
        start: {
          line: 263,
          column: 33
        },
        end: {
          line: 263,
          column: 58
        }
      },
      "60": {
        start: {
          line: 264,
          column: 31
        },
        end: {
          line: 264,
          column: 77
        }
      },
      "61": {
        start: {
          line: 265,
          column: 30
        },
        end: {
          line: 265,
          column: 87
        }
      },
      "62": {
        start: {
          line: 266,
          column: 32
        },
        end: {
          line: 266,
          column: 83
        }
      },
      "63": {
        start: {
          line: 267,
          column: 16
        },
        end: {
          line: 267,
          column: 102
        }
      },
      "64": {
        start: {
          line: 269,
          column: 12
        },
        end: {
          line: 269,
          column: 123
        }
      },
      "65": {
        start: {
          line: 272,
          column: 29
        },
        end: {
          line: 272,
          column: 78
        }
      },
      "66": {
        start: {
          line: 272,
          column: 48
        },
        end: {
          line: 272,
          column: 70
        }
      },
      "67": {
        start: {
          line: 273,
          column: 29
        },
        end: {
          line: 273,
          column: 78
        }
      },
      "68": {
        start: {
          line: 273,
          column: 48
        },
        end: {
          line: 273,
          column: 70
        }
      },
      "69": {
        start: {
          line: 274,
          column: 27
        },
        end: {
          line: 274,
          column: 74
        }
      },
      "70": {
        start: {
          line: 274,
          column: 46
        },
        end: {
          line: 274,
          column: 66
        }
      },
      "71": {
        start: {
          line: 275,
          column: 27
        },
        end: {
          line: 275,
          column: 83
        }
      },
      "72": {
        start: {
          line: 276,
          column: 8
        },
        end: {
          line: 276,
          column: 23
        }
      },
      "73": {
        start: {
          line: 277,
          column: 8
        },
        end: {
          line: 277,
          column: 31
        }
      },
      "74": {
        start: {
          line: 278,
          column: 8
        },
        end: {
          line: 278,
          column: 55
        }
      },
      "75": {
        start: {
          line: 279,
          column: 8
        },
        end: {
          line: 279,
          column: 49
        }
      },
      "76": {
        start: {
          line: 280,
          column: 8
        },
        end: {
          line: 281,
          column: 53
        }
      },
      "77": {
        start: {
          line: 281,
          column: 12
        },
        end: {
          line: 281,
          column: 53
        }
      },
      "78": {
        start: {
          line: 282,
          column: 8
        },
        end: {
          line: 283,
          column: 49
        }
      },
      "79": {
        start: {
          line: 283,
          column: 12
        },
        end: {
          line: 283,
          column: 49
        }
      },
      "80": {
        start: {
          line: 284,
          column: 8
        },
        end: {
          line: 285,
          column: 49
        }
      },
      "81": {
        start: {
          line: 285,
          column: 12
        },
        end: {
          line: 285,
          column: 49
        }
      },
      "82": {
        start: {
          line: 286,
          column: 8
        },
        end: {
          line: 286,
          column: 32
        }
      },
      "83": {
        start: {
          line: 289,
          column: 22
        },
        end: {
          line: 295,
          column: 9
        }
      },
      "84": {
        start: {
          line: 296,
          column: 8
        },
        end: {
          line: 296,
          column: 36
        }
      },
      "85": {
        start: {
          line: 299,
          column: 24
        },
        end: {
          line: 299,
          column: 45
        }
      },
      "86": {
        start: {
          line: 300,
          column: 24
        },
        end: {
          line: 300,
          column: 48
        }
      },
      "87": {
        start: {
          line: 301,
          column: 22
        },
        end: {
          line: 301,
          column: 46
        }
      },
      "88": {
        start: {
          line: 302,
          column: 8
        },
        end: {
          line: 310,
          column: 9
        }
      },
      "89": {
        start: {
          line: 303,
          column: 12
        },
        end: {
          line: 303,
          column: 48
        }
      },
      "90": {
        start: {
          line: 305,
          column: 13
        },
        end: {
          line: 310,
          column: 9
        }
      },
      "91": {
        start: {
          line: 306,
          column: 12
        },
        end: {
          line: 306,
          column: 50
        }
      },
      "92": {
        start: {
          line: 309,
          column: 12
        },
        end: {
          line: 309,
          column: 33
        }
      },
      "93": {
        start: {
          line: 313,
          column: 20
        },
        end: {
          line: 313,
          column: 30
        }
      },
      "94": {
        start: {
          line: 314,
          column: 21
        },
        end: {
          line: 314,
          column: 51
        }
      },
      "95": {
        start: {
          line: 315,
          column: 8
        },
        end: {
          line: 326,
          column: 9
        }
      },
      "96": {
        start: {
          line: 316,
          column: 12
        },
        end: {
          line: 316,
          column: 30
        }
      },
      "97": {
        start: {
          line: 318,
          column: 13
        },
        end: {
          line: 326,
          column: 9
        }
      },
      "98": {
        start: {
          line: 319,
          column: 12
        },
        end: {
          line: 319,
          column: 54
        }
      },
      "99": {
        start: {
          line: 321,
          column: 13
        },
        end: {
          line: 326,
          column: 9
        }
      },
      "100": {
        start: {
          line: 322,
          column: 12
        },
        end: {
          line: 322,
          column: 56
        }
      },
      "101": {
        start: {
          line: 325,
          column: 12
        },
        end: {
          line: 325,
          column: 45
        }
      },
      "102": {
        start: {
          line: 329,
          column: 21
        },
        end: {
          line: 329,
          column: 32
        }
      },
      "103": {
        start: {
          line: 330,
          column: 8
        },
        end: {
          line: 351,
          column: 9
        }
      },
      "104": {
        start: {
          line: 331,
          column: 12
        },
        end: {
          line: 331,
          column: 46
        }
      },
      "105": {
        start: {
          line: 332,
          column: 12
        },
        end: {
          line: 332,
          column: 54
        }
      },
      "106": {
        start: {
          line: 333,
          column: 12
        },
        end: {
          line: 333,
          column: 58
        }
      },
      "107": {
        start: {
          line: 334,
          column: 12
        },
        end: {
          line: 334,
          column: 54
        }
      },
      "108": {
        start: {
          line: 335,
          column: 12
        },
        end: {
          line: 335,
          column: 60
        }
      },
      "109": {
        start: {
          line: 336,
          column: 12
        },
        end: {
          line: 336,
          column: 74
        }
      },
      "110": {
        start: {
          line: 337,
          column: 12
        },
        end: {
          line: 339,
          column: 13
        }
      },
      "111": {
        start: {
          line: 338,
          column: 16
        },
        end: {
          line: 338,
          column: 58
        }
      },
      "112": {
        start: {
          line: 340,
          column: 12
        },
        end: {
          line: 342,
          column: 13
        }
      },
      "113": {
        start: {
          line: 341,
          column: 16
        },
        end: {
          line: 341,
          column: 54
        }
      },
      "114": {
        start: {
          line: 343,
          column: 12
        },
        end: {
          line: 343,
          column: 37
        }
      },
      "115": {
        start: {
          line: 344,
          column: 12
        },
        end: {
          line: 344,
          column: 60
        }
      },
      "116": {
        start: {
          line: 345,
          column: 12
        },
        end: {
          line: 345,
          column: 68
        }
      },
      "117": {
        start: {
          line: 346,
          column: 12
        },
        end: {
          line: 346,
          column: 62
        }
      },
      "118": {
        start: {
          line: 347,
          column: 12
        },
        end: {
          line: 347,
          column: 62
        }
      },
      "119": {
        start: {
          line: 348,
          column: 12
        },
        end: {
          line: 348,
          column: 38
        }
      },
      "120": {
        start: {
          line: 349,
          column: 12
        },
        end: {
          line: 349,
          column: 61
        }
      },
      "121": {
        start: {
          line: 350,
          column: 12
        },
        end: {
          line: 350,
          column: 65
        }
      },
      "122": {
        start: {
          line: 352,
          column: 8
        },
        end: {
          line: 352,
          column: 22
        }
      },
      "123": {
        start: {
          line: 355,
          column: 8
        },
        end: {
          line: 395,
          column: 2
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 8,
            column: 4
          },
          end: {
            line: 8,
            column: 5
          }
        },
        loc: {
          start: {
            line: 8,
            column: 18
          },
          end: {
            line: 53,
            column: 5
          }
        },
        line: 8
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 54,
            column: 4
          },
          end: {
            line: 54,
            column: 5
          }
        },
        loc: {
          start: {
            line: 54,
            column: 23
          },
          end: {
            line: 95,
            column: 5
          }
        },
        line: 54
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 66,
            column: 39
          },
          end: {
            line: 66,
            column: 40
          }
        },
        loc: {
          start: {
            line: 66,
            column: 48
          },
          end: {
            line: 66,
            column: 77
          }
        },
        line: 66
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 96,
            column: 4
          },
          end: {
            line: 96,
            column: 5
          }
        },
        loc: {
          start: {
            line: 96,
            column: 36
          },
          end: {
            line: 199,
            column: 5
          }
        },
        line: 96
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 200,
            column: 4
          },
          end: {
            line: 200,
            column: 5
          }
        },
        loc: {
          start: {
            line: 200,
            column: 31
          },
          end: {
            line: 215,
            column: 5
          }
        },
        line: 200
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 201,
            column: 32
          },
          end: {
            line: 201,
            column: 33
          }
        },
        loc: {
          start: {
            line: 201,
            column: 42
          },
          end: {
            line: 214,
            column: 9
          }
        },
        line: 201
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 216,
            column: 4
          },
          end: {
            line: 216,
            column: 5
          }
        },
        loc: {
          start: {
            line: 216,
            column: 43
          },
          end: {
            line: 229,
            column: 5
          }
        },
        line: 216
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 230,
            column: 4
          },
          end: {
            line: 230,
            column: 5
          }
        },
        loc: {
          start: {
            line: 230,
            column: 36
          },
          end: {
            line: 287,
            column: 5
          }
        },
        line: 230
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 272,
            column: 43
          },
          end: {
            line: 272,
            column: 44
          }
        },
        loc: {
          start: {
            line: 272,
            column: 48
          },
          end: {
            line: 272,
            column: 70
          }
        },
        line: 272
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 273,
            column: 43
          },
          end: {
            line: 273,
            column: 44
          }
        },
        loc: {
          start: {
            line: 273,
            column: 48
          },
          end: {
            line: 273,
            column: 70
          }
        },
        line: 273
      },
      "10": {
        name: "(anonymous_10)",
        decl: {
          start: {
            line: 274,
            column: 41
          },
          end: {
            line: 274,
            column: 42
          }
        },
        loc: {
          start: {
            line: 274,
            column: 46
          },
          end: {
            line: 274,
            column: 66
          }
        },
        line: 274
      },
      "11": {
        name: "(anonymous_11)",
        decl: {
          start: {
            line: 288,
            column: 4
          },
          end: {
            line: 288,
            column: 5
          }
        },
        loc: {
          start: {
            line: 288,
            column: 26
          },
          end: {
            line: 297,
            column: 5
          }
        },
        line: 288
      },
      "12": {
        name: "(anonymous_12)",
        decl: {
          start: {
            line: 298,
            column: 4
          },
          end: {
            line: 298,
            column: 5
          }
        },
        loc: {
          start: {
            line: 298,
            column: 23
          },
          end: {
            line: 311,
            column: 5
          }
        },
        line: 298
      },
      "13": {
        name: "(anonymous_13)",
        decl: {
          start: {
            line: 312,
            column: 4
          },
          end: {
            line: 312,
            column: 5
          }
        },
        loc: {
          start: {
            line: 312,
            column: 29
          },
          end: {
            line: 327,
            column: 5
          }
        },
        line: 312
      },
      "14": {
        name: "(anonymous_14)",
        decl: {
          start: {
            line: 328,
            column: 4
          },
          end: {
            line: 328,
            column: 5
          }
        },
        loc: {
          start: {
            line: 328,
            column: 19
          },
          end: {
            line: 353,
            column: 5
          }
        },
        line: 328
      },
      "15": {
        name: "(anonymous_15)",
        decl: {
          start: {
            line: 354,
            column: 4
          },
          end: {
            line: 354,
            column: 5
          }
        },
        loc: {
          start: {
            line: 354,
            column: 14
          },
          end: {
            line: 396,
            column: 5
          }
        },
        line: 354
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 56,
            column: 27
          },
          end: {
            line: 56,
            column: 58
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 56,
            column: 27
          },
          end: {
            line: 56,
            column: 47
          }
        }, {
          start: {
            line: 56,
            column: 51
          },
          end: {
            line: 56,
            column: 58
          }
        }],
        line: 56
      },
      "1": {
        loc: {
          start: {
            line: 58,
            column: 29
          },
          end: {
            line: 58,
            column: 60
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 58,
            column: 29
          },
          end: {
            line: 58,
            column: 51
          }
        }, {
          start: {
            line: 58,
            column: 55
          },
          end: {
            line: 58,
            column: 60
          }
        }],
        line: 58
      },
      "2": {
        loc: {
          start: {
            line: 59,
            column: 32
          },
          end: {
            line: 59,
            column: 70
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 59,
            column: 32
          },
          end: {
            line: 59,
            column: 61
          }
        }, {
          start: {
            line: 59,
            column: 65
          },
          end: {
            line: 59,
            column: 70
          }
        }],
        line: 59
      },
      "3": {
        loc: {
          start: {
            line: 60,
            column: 27
          },
          end: {
            line: 60,
            column: 58
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 60,
            column: 27
          },
          end: {
            line: 60,
            column: 45
          }
        }, {
          start: {
            line: 60,
            column: 49
          },
          end: {
            line: 60,
            column: 58
          }
        }],
        line: 60
      },
      "4": {
        loc: {
          start: {
            line: 65,
            column: 12
          },
          end: {
            line: 67,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 65,
            column: 12
          },
          end: {
            line: 67,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 65
      },
      "5": {
        loc: {
          start: {
            line: 71,
            column: 12
          },
          end: {
            line: 73,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 71,
            column: 12
          },
          end: {
            line: 73,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 71
      },
      "6": {
        loc: {
          start: {
            line: 71,
            column: 16
          },
          end: {
            line: 71,
            column: 34
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 71,
            column: 16
          },
          end: {
            line: 71,
            column: 21
          }
        }, {
          start: {
            line: 71,
            column: 25
          },
          end: {
            line: 71,
            column: 34
          }
        }],
        line: 71
      },
      "7": {
        loc: {
          start: {
            line: 91,
            column: 49
          },
          end: {
            line: 91,
            column: 103
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 91,
            column: 74
          },
          end: {
            line: 91,
            column: 87
          }
        }, {
          start: {
            line: 91,
            column: 90
          },
          end: {
            line: 91,
            column: 103
          }
        }],
        line: 91
      },
      "8": {
        loc: {
          start: {
            line: 160,
            column: 8
          },
          end: {
            line: 197,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 160,
            column: 8
          },
          end: {
            line: 197,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 160
      },
      "9": {
        loc: {
          start: {
            line: 202,
            column: 12
          },
          end: {
            line: 213,
            column: 13
          }
        },
        type: "switch",
        locations: [{
          start: {
            line: 203,
            column: 16
          },
          end: {
            line: 204,
            column: 73
          }
        }, {
          start: {
            line: 205,
            column: 16
          },
          end: {
            line: 206,
            column: 60
          }
        }, {
          start: {
            line: 207,
            column: 16
          },
          end: {
            line: 208,
            column: 47
          }
        }, {
          start: {
            line: 209,
            column: 16
          },
          end: {
            line: 210,
            column: 57
          }
        }, {
          start: {
            line: 211,
            column: 16
          },
          end: {
            line: 212,
            column: 73
          }
        }],
        line: 202
      },
      "10": {
        loc: {
          start: {
            line: 217,
            column: 8
          },
          end: {
            line: 219,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 217,
            column: 8
          },
          end: {
            line: 219,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 217
      },
      "11": {
        loc: {
          start: {
            line: 220,
            column: 8
          },
          end: {
            line: 228,
            column: 9
          }
        },
        type: "switch",
        locations: [{
          start: {
            line: 221,
            column: 12
          },
          end: {
            line: 222,
            column: 55
          }
        }, {
          start: {
            line: 223,
            column: 12
          },
          end: {
            line: 224,
            column: 43
          }
        }, {
          start: {
            line: 225,
            column: 12
          },
          end: {
            line: 225,
            column: 25
          }
        }, {
          start: {
            line: 226,
            column: 12
          },
          end: {
            line: 227,
            column: 60
          }
        }],
        line: 220
      },
      "12": {
        loc: {
          start: {
            line: 236,
            column: 8
          },
          end: {
            line: 270,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 236,
            column: 8
          },
          end: {
            line: 270,
            column: 9
          }
        }, {
          start: {
            line: 255,
            column: 13
          },
          end: {
            line: 270,
            column: 9
          }
        }],
        line: 236
      },
      "13": {
        loc: {
          start: {
            line: 244,
            column: 16
          },
          end: {
            line: 246,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 244,
            column: 16
          },
          end: {
            line: 246,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 244
      },
      "14": {
        loc: {
          start: {
            line: 247,
            column: 16
          },
          end: {
            line: 249,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 247,
            column: 16
          },
          end: {
            line: 249,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 247
      },
      "15": {
        loc: {
          start: {
            line: 261,
            column: 27
          },
          end: {
            line: 261,
            column: 105
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 261,
            column: 50
          },
          end: {
            line: 261,
            column: 83
          }
        }, {
          start: {
            line: 261,
            column: 86
          },
          end: {
            line: 261,
            column: 105
          }
        }],
        line: 261
      },
      "16": {
        loc: {
          start: {
            line: 280,
            column: 8
          },
          end: {
            line: 281,
            column: 53
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 280,
            column: 8
          },
          end: {
            line: 281,
            column: 53
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 280
      },
      "17": {
        loc: {
          start: {
            line: 282,
            column: 8
          },
          end: {
            line: 283,
            column: 49
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 282,
            column: 8
          },
          end: {
            line: 283,
            column: 49
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 282
      },
      "18": {
        loc: {
          start: {
            line: 284,
            column: 8
          },
          end: {
            line: 285,
            column: 49
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 284,
            column: 8
          },
          end: {
            line: 285,
            column: 49
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 284
      },
      "19": {
        loc: {
          start: {
            line: 296,
            column: 15
          },
          end: {
            line: 296,
            column: 35
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 296,
            column: 15
          },
          end: {
            line: 296,
            column: 28
          }
        }, {
          start: {
            line: 296,
            column: 32
          },
          end: {
            line: 296,
            column: 35
          }
        }],
        line: 296
      },
      "20": {
        loc: {
          start: {
            line: 302,
            column: 8
          },
          end: {
            line: 310,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 302,
            column: 8
          },
          end: {
            line: 310,
            column: 9
          }
        }, {
          start: {
            line: 305,
            column: 13
          },
          end: {
            line: 310,
            column: 9
          }
        }],
        line: 302
      },
      "21": {
        loc: {
          start: {
            line: 305,
            column: 13
          },
          end: {
            line: 310,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 305,
            column: 13
          },
          end: {
            line: 310,
            column: 9
          }
        }, {
          start: {
            line: 308,
            column: 13
          },
          end: {
            line: 310,
            column: 9
          }
        }],
        line: 305
      },
      "22": {
        loc: {
          start: {
            line: 315,
            column: 8
          },
          end: {
            line: 326,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 315,
            column: 8
          },
          end: {
            line: 326,
            column: 9
          }
        }, {
          start: {
            line: 318,
            column: 13
          },
          end: {
            line: 326,
            column: 9
          }
        }],
        line: 315
      },
      "23": {
        loc: {
          start: {
            line: 318,
            column: 13
          },
          end: {
            line: 326,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 318,
            column: 13
          },
          end: {
            line: 326,
            column: 9
          }
        }, {
          start: {
            line: 321,
            column: 13
          },
          end: {
            line: 326,
            column: 9
          }
        }],
        line: 318
      },
      "24": {
        loc: {
          start: {
            line: 321,
            column: 13
          },
          end: {
            line: 326,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 321,
            column: 13
          },
          end: {
            line: 326,
            column: 9
          }
        }, {
          start: {
            line: 324,
            column: 13
          },
          end: {
            line: 326,
            column: 9
          }
        }],
        line: 321
      },
      "25": {
        loc: {
          start: {
            line: 337,
            column: 12
          },
          end: {
            line: 339,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 337,
            column: 12
          },
          end: {
            line: 339,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 337
      },
      "26": {
        loc: {
          start: {
            line: 340,
            column: 12
          },
          end: {
            line: 342,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 340,
            column: 12
          },
          end: {
            line: 342,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 340
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0,
      "74": 0,
      "75": 0,
      "76": 0,
      "77": 0,
      "78": 0,
      "79": 0,
      "80": 0,
      "81": 0,
      "82": 0,
      "83": 0,
      "84": 0,
      "85": 0,
      "86": 0,
      "87": 0,
      "88": 0,
      "89": 0,
      "90": 0,
      "91": 0,
      "92": 0,
      "93": 0,
      "94": 0,
      "95": 0,
      "96": 0,
      "97": 0,
      "98": 0,
      "99": 0,
      "100": 0,
      "101": 0,
      "102": 0,
      "103": 0,
      "104": 0,
      "105": 0,
      "106": 0,
      "107": 0,
      "108": 0,
      "109": 0,
      "110": 0,
      "111": 0,
      "112": 0,
      "113": 0,
      "114": 0,
      "115": 0,
      "116": 0,
      "117": 0,
      "118": 0,
      "119": 0,
      "120": 0,
      "121": 0,
      "122": 0,
      "123": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0, 0, 0, 0, 0],
      "10": [0, 0],
      "11": [0, 0, 0, 0],
      "12": [0, 0],
      "13": [0, 0],
      "14": [0, 0],
      "15": [0, 0],
      "16": [0, 0],
      "17": [0, 0],
      "18": [0, 0],
      "19": [0, 0],
      "20": [0, 0],
      "21": [0, 0],
      "22": [0, 0],
      "23": [0, 0],
      "24": [0, 0],
      "25": [0, 0],
      "26": [0, 0]
    },
    inputSourceMap: {
      file: "/home/mhugo/code/claude-code-flow/src/cli/commands/swarm/list-command.ts",
      mappings: "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",
      names: [],
      sources: ["/home/mhugo/code/claude-code-flow/src/cli/commands/swarm/list-command.ts"],
      sourcesContent: ["/**\n * Swarm List Command Implementation\n * \n * Lists all swarms with their status and information\n */\n\nimport { BaseCommand } from '../../core/base-command.js';\nimport type { CommandContext, CommandResult } from '../../types/index.js';\n\ninterface SwarmInfo {\n  id: string;\n  status: 'running' | 'stopped' | 'error' | 'starting' | 'stopping';\n  topology: string;\n  agents: number;\n  maxAgents: number;\n  createdAt: Date;\n  uptime?: number;\n  port?: number;\n  tasks: {\n    total: number;\n    completed: number;\n    failed: number;\n    active: number;\n  };\n  memory: {\n    usage: string;\n    entries: number;\n  };\n}\n\nexport class SwarmListCommand extends BaseCommand {\n  constructor() {\n    super({\n      name: 'list',\n      description: 'List all swarms with their status and information',\n      usage: 'claude-flow swarm list [options]',\n      category: 'swarm',\n      minArgs: 0,\n      maxArgs: 0,\n      examples: [\n        'claude-flow swarm list',\n        'claude-flow swarm list --format json',\n        'claude-flow swarm list --status running',\n        'claude-flow swarm list --detailed'\n      ],\n      flags: {\n        format: {\n          type: 'string',\n          description: 'Output format (table, json, yaml)',\n          default: 'table'\n        },\n        status: {\n          type: 'string',\n          description: 'Filter by status (running, stopped, error, starting, stopping)'\n        },\n        detailed: {\n          type: 'boolean', \n          description: 'Show detailed information',\n          default: false\n        },\n        'show-history': {\n          type: 'boolean',\n          description: 'Include stopped swarms in results',\n          default: false\n        },\n        sort: {\n          type: 'string',\n          description: 'Sort by field (created, status, agents, tasks)',\n          default: 'created'\n        },\n        limit: {\n          type: 'number',\n          description: 'Limit number of results'\n        }\n      }\n    });\n  }\n\n  protected async run(context: CommandContext): Promise<CommandResult> {\n    try {\n      const format = context.flags.format as string || 'table';\n      const statusFilter = context.flags.status as string;\n      const detailed = context.flags.detailed as boolean || false;\n      const showHistory = context.flags['show-history'] as boolean || false;\n      const sortBy = context.flags.sort as string || 'created';\n      const limit = context.flags.limit as number;\n\n      // Get swarm list\n      let swarms = await this.getSwarms(showHistory);\n\n      // Apply filters\n      if (statusFilter) {\n        swarms = swarms.filter(swarm => swarm.status === statusFilter);\n      }\n\n      // Apply sorting\n      swarms = this.sortSwarms(swarms, sortBy);\n\n      // Apply limit\n      if (limit && limit > 0) {\n        swarms = swarms.slice(0, limit);\n      }\n\n      // Format output\n      const output = this.formatOutput(swarms, format, detailed);\n\n      return {\n        success: true,\n        exitCode: 0,\n        message: output,\n        data: {\n          swarms,\n          count: swarms.length,\n          filter: statusFilter,\n          showHistory\n        }\n      };\n    } catch (error) {\n      return {\n        success: false,\n        error: `Failed to list swarms: ${error instanceof Error ? error.message : String(error)}`,\n        exitCode: 1\n      };\n    }\n  }\n\n  private async getSwarms(includeHistory: boolean): Promise<SwarmInfo[]> {\n    // This would query the actual swarm registry\n    // For now, return mock data\n    const mockSwarms: SwarmInfo[] = [\n      {\n        id: 'swarm_1704067200_abc123def',\n        status: 'running',\n        topology: 'mesh',\n        agents: 5,\n        maxAgents: 8,\n        createdAt: new Date(Date.now() - 600000), // 10 minutes ago\n        uptime: 600000,\n        port: 3000,\n        tasks: {\n          total: 45,\n          completed: 38,\n          failed: 2,\n          active: 5\n        },\n        memory: {\n          usage: '1.2 MB',\n          entries: 234\n        }\n      },\n      {\n        id: 'swarm_1704063600_xyz789ghi',\n        status: 'running',\n        topology: 'hierarchical',\n        agents: 3,\n        maxAgents: 5,\n        createdAt: new Date(Date.now() - 1800000), // 30 minutes ago\n        uptime: 1800000,\n        port: 3001,\n        tasks: {\n          total: 23,\n          completed: 21,\n          failed: 0,\n          active: 2\n        },\n        memory: {\n          usage: '856 KB',\n          entries: 145\n        }\n      },\n      {\n        id: 'swarm_1704060000_def456jkl',\n        status: 'starting',\n        topology: 'star',\n        agents: 1,\n        maxAgents: 6,\n        createdAt: new Date(Date.now() - 30000), // 30 seconds ago\n        port: 3002,\n        tasks: {\n          total: 0,\n          completed: 0,\n          failed: 0,\n          active: 0\n        },\n        memory: {\n          usage: '124 KB',\n          entries: 12\n        }\n      }\n    ];\n\n    if (includeHistory) {\n      // Add some stopped swarms\n      mockSwarms.push(\n        {\n          id: 'swarm_1704000000_old123abc',\n          status: 'stopped',\n          topology: 'mesh',\n          agents: 0,\n          maxAgents: 4,\n          createdAt: new Date(Date.now() - 7200000), // 2 hours ago\n          tasks: {\n            total: 156,\n            completed: 152,\n            failed: 4,\n            active: 0\n          },\n          memory: {\n            usage: '2.8 MB',\n            entries: 567\n          }\n        },\n        {\n          id: 'swarm_1703996400_err789xyz',\n          status: 'error',\n          topology: 'ring',\n          agents: 0,\n          maxAgents: 3,\n          createdAt: new Date(Date.now() - 8100000), // 2.25 hours ago\n          tasks: {\n            total: 12,\n            completed: 8,\n            failed: 4,\n            active: 0\n          },\n          memory: {\n            usage: '445 KB',\n            entries: 89\n          }\n        }\n      );\n    }\n\n    return mockSwarms;\n  }\n\n  private sortSwarms(swarms: SwarmInfo[], sortBy: string): SwarmInfo[] {\n    return [...swarms].sort((a, b) => {\n      switch (sortBy) {\n        case 'created':\n          return b.createdAt.getTime() - a.createdAt.getTime(); // Newest first\n        case 'status':\n          return a.status.localeCompare(b.status);\n        case 'agents':\n          return b.agents - a.agents; // Most agents first\n        case 'tasks':\n          return b.tasks.total - a.tasks.total; // Most tasks first\n        default:\n          return b.createdAt.getTime() - a.createdAt.getTime();\n      }\n    });\n  }\n\n  private formatOutput(swarms: SwarmInfo[], format: string, detailed: boolean): string {\n    if (swarms.length === 0) {\n      return 'No swarms found';\n    }\n\n    switch (format.toLowerCase()) {\n      case 'json':\n        return JSON.stringify(swarms, null, 2);\n      \n      case 'yaml':\n        return this.toYaml(swarms);\n      \n      case 'table':\n      default:\n        return this.formatAsTable(swarms, detailed);\n    }\n  }\n\n  private formatAsTable(swarms: SwarmInfo[], detailed: boolean): string {\n    const lines: string[] = [];\n    \n    // Header\n    lines.push('Swarm List');\n    lines.push('='.repeat(80));\n    lines.push('');\n\n    if (detailed) {\n      // Detailed view - one swarm per section\n      for (const swarm of swarms) {\n        lines.push(`Swarm: ${swarm.id}`);\n        lines.push(`  Status: ${this.getStatusIcon(swarm.status)} ${swarm.status.toUpperCase()}`);\n        lines.push(`  Topology: ${swarm.topology}`);\n        lines.push(`  Agents: ${swarm.agents}/${swarm.maxAgents}`);\n        lines.push(`  Created: ${swarm.createdAt.toLocaleString()}`);\n        \n        if (swarm.uptime) {\n          lines.push(`  Uptime: ${this.formatDuration(swarm.uptime)}`);\n        }\n        \n        if (swarm.port) {\n          lines.push(`  Port: ${swarm.port}`);\n        }\n        \n        lines.push(`  Tasks: ${swarm.tasks.total} total, ${swarm.tasks.completed} completed, ${swarm.tasks.failed} failed, ${swarm.tasks.active} active`);\n        lines.push(`  Memory: ${swarm.memory.usage} (${swarm.memory.entries} entries)`);\n        lines.push('');\n      }\n    } else {\n      // Table view\n      lines.push('\u250C\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252C\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252C\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252C\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252C\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252C\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510');\n      lines.push('\u2502 Swarm ID                    \u2502 Status      \u2502 Topology    \u2502 Agents    \u2502 Tasks    \u2502 Created     \u2502');\n      lines.push('\u251C\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253C\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253C\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253C\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253C\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253C\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524');\n      \n      for (const swarm of swarms) {\n        const id = swarm.id.length > 27 ? swarm.id.substring(0, 24) + '...' : swarm.id.padEnd(27);\n        const status = `${this.getStatusIcon(swarm.status)} ${swarm.status}`.padEnd(11);\n        const topology = swarm.topology.padEnd(11);\n        const agents = `${swarm.agents}/${swarm.maxAgents}`.padEnd(9);\n        const tasks = `${swarm.tasks.completed}/${swarm.tasks.total}`.padEnd(8);\n        const created = this.formatRelativeTime(swarm.createdAt).padEnd(11);\n        \n        lines.push(`\u2502 ${id} \u2502 ${status} \u2502 ${topology} \u2502 ${agents} \u2502 ${tasks} \u2502 ${created} \u2502`);\n      }\n      \n      lines.push('\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518');\n    }\n\n    // Summary\n    const runningCount = swarms.filter(s => s.status === 'running').length;\n    const stoppedCount = swarms.filter(s => s.status === 'stopped').length;\n    const errorCount = swarms.filter(s => s.status === 'error').length;\n    const otherCount = swarms.length - runningCount - stoppedCount - errorCount;\n\n    lines.push('');\n    lines.push('Summary:');\n    lines.push(`  Total: ${swarms.length} swarms`);\n    lines.push(`  Running: ${runningCount}`);\n    if (stoppedCount > 0) lines.push(`  Stopped: ${stoppedCount}`);\n    if (errorCount > 0) lines.push(`  Error: ${errorCount}`);\n    if (otherCount > 0) lines.push(`  Other: ${otherCount}`);\n\n    return lines.join('\\n');\n  }\n\n  private getStatusIcon(status: string): string {\n    const icons = {\n      running: '\uD83D\uDFE2',\n      stopped: '\u26AA',\n      error: '\uD83D\uDD34',\n      starting: '\uD83D\uDFE1',\n      stopping: '\uD83D\uDFE0'\n    };\n    return icons[status as keyof typeof icons] || '\u26AB';\n  }\n\n  private formatDuration(ms: number): string {\n    const seconds = Math.floor(ms / 1000);\n    const minutes = Math.floor(seconds / 60);\n    const hours = Math.floor(minutes / 60);\n    \n    if (hours > 0) {\n      return `${hours}h ${minutes % 60}m`;\n    } else if (minutes > 0) {\n      return `${minutes}m ${seconds % 60}s`;\n    } else {\n      return `${seconds}s`;\n    }\n  }\n\n  private formatRelativeTime(date: Date): string {\n    const now = new Date();\n    const diff = now.getTime() - date.getTime();\n    \n    if (diff < 60000) { // Less than 1 minute\n      return 'Just now';\n    } else if (diff < 3600000) { // Less than 1 hour\n      return `${Math.floor(diff / 60000)}m ago`;\n    } else if (diff < 86400000) { // Less than 24 hours\n      return `${Math.floor(diff / 3600000)}h ago`;\n    } else {\n      return date.toLocaleDateString();\n    }\n  }\n\n  private toYaml(swarms: SwarmInfo[]): string {\n    let result = 'swarms:\\n';\n    \n    for (const swarm of swarms) {\n      result += `  - id: ${swarm.id}\\n`;\n      result += `    status: ${swarm.status}\\n`;\n      result += `    topology: ${swarm.topology}\\n`;\n      result += `    agents: ${swarm.agents}\\n`;\n      result += `    maxAgents: ${swarm.maxAgents}\\n`;\n      result += `    createdAt: ${swarm.createdAt.toISOString()}\\n`;\n      \n      if (swarm.uptime) {\n        result += `    uptime: ${swarm.uptime}\\n`;\n      }\n      \n      if (swarm.port) {\n        result += `    port: ${swarm.port}\\n`;\n      }\n      \n      result += `    tasks:\\n`;\n      result += `      total: ${swarm.tasks.total}\\n`;\n      result += `      completed: ${swarm.tasks.completed}\\n`;\n      result += `      failed: ${swarm.tasks.failed}\\n`;\n      result += `      active: ${swarm.tasks.active}\\n`;\n      \n      result += `    memory:\\n`;\n      result += `      usage: ${swarm.memory.usage}\\n`;\n      result += `      entries: ${swarm.memory.entries}\\n`;\n    }\n    \n    return result;\n  }\n\n  getHelp(): string {\n    return `List all swarms with their status and information\n\nUSAGE:\n  claude-flow swarm list [options]\n\nOPTIONS:\n  --format <format>     Output format (table, json, yaml) [default: table]\n  --status <status>     Filter by status (running, stopped, error, starting, stopping)\n  --detailed           Show detailed information for each swarm\n  --show-history       Include stopped swarms in results\n  --sort <field>        Sort by field (created, status, agents, tasks) [default: created]\n  --limit <number>      Limit number of results\n  -h, --help           Show help\n\nEXAMPLES:\n  claude-flow swarm list\n  claude-flow swarm list --format json\n  claude-flow swarm list --status running\n  claude-flow swarm list --detailed\n  claude-flow swarm list --show-history --sort agents\n  claude-flow swarm list --limit 5\n\nSTATUSES:\n  \uD83D\uDFE2 running     Swarm is active and processing tasks\n  \uD83D\uDFE1 starting    Swarm is initializing\n  \uD83D\uDFE0 stopping    Swarm is shutting down gracefully\n  \u26AA stopped     Swarm has been stopped\n  \uD83D\uDD34 error       Swarm encountered an error\n\nSORT OPTIONS:\n  created        Sort by creation time (newest first)\n  status         Sort alphabetically by status\n  agents         Sort by number of agents (most first)\n  tasks          Sort by total tasks (most first)\n\nThe list command shows all swarms by default. Use --show-history to include\nstopped swarms, or --status to filter by specific status.\n\nUse --detailed for comprehensive information about each swarm.\nUse --format json or --format yaml for programmatic consumption.\n`;\n  }\n}"],
      version: 3
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "25b00ba3479c8d657b6b4fd1f42094424062e072"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_2cr3owv9z0 = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_2cr3owv9z0();
/**
 * Swarm List Command Implementation
 *
 * Lists all swarms with their status and information
 */
import { BaseCommand } from '../../core/base-command.js';
export class SwarmListCommand extends BaseCommand {
  constructor() {
    /* istanbul ignore next */
    cov_2cr3owv9z0().f[0]++;
    cov_2cr3owv9z0().s[0]++;
    super({
      name: 'list',
      description: 'List all swarms with their status and information',
      usage: 'claude-flow swarm list [options]',
      category: 'swarm',
      minArgs: 0,
      maxArgs: 0,
      examples: ['claude-flow swarm list', 'claude-flow swarm list --format json', 'claude-flow swarm list --status running', 'claude-flow swarm list --detailed'],
      flags: {
        format: {
          type: 'string',
          description: 'Output format (table, json, yaml)',
          default: 'table'
        },
        status: {
          type: 'string',
          description: 'Filter by status (running, stopped, error, starting, stopping)'
        },
        detailed: {
          type: 'boolean',
          description: 'Show detailed information',
          default: false
        },
        'show-history': {
          type: 'boolean',
          description: 'Include stopped swarms in results',
          default: false
        },
        sort: {
          type: 'string',
          description: 'Sort by field (created, status, agents, tasks)',
          default: 'created'
        },
        limit: {
          type: 'number',
          description: 'Limit number of results'
        }
      }
    });
  }
  async run(context) {
    /* istanbul ignore next */
    cov_2cr3owv9z0().f[1]++;
    cov_2cr3owv9z0().s[1]++;
    try {
      const format =
      /* istanbul ignore next */
      (cov_2cr3owv9z0().s[2]++,
      /* istanbul ignore next */
      (cov_2cr3owv9z0().b[0][0]++, context.flags.format) ||
      /* istanbul ignore next */
      (cov_2cr3owv9z0().b[0][1]++, 'table'));
      const statusFilter =
      /* istanbul ignore next */
      (cov_2cr3owv9z0().s[3]++, context.flags.status);
      const detailed =
      /* istanbul ignore next */
      (cov_2cr3owv9z0().s[4]++,
      /* istanbul ignore next */
      (cov_2cr3owv9z0().b[1][0]++, context.flags.detailed) ||
      /* istanbul ignore next */
      (cov_2cr3owv9z0().b[1][1]++, false));
      const showHistory =
      /* istanbul ignore next */
      (cov_2cr3owv9z0().s[5]++,
      /* istanbul ignore next */
      (cov_2cr3owv9z0().b[2][0]++, context.flags['show-history']) ||
      /* istanbul ignore next */
      (cov_2cr3owv9z0().b[2][1]++, false));
      const sortBy =
      /* istanbul ignore next */
      (cov_2cr3owv9z0().s[6]++,
      /* istanbul ignore next */
      (cov_2cr3owv9z0().b[3][0]++, context.flags.sort) ||
      /* istanbul ignore next */
      (cov_2cr3owv9z0().b[3][1]++, 'created'));
      const limit =
      /* istanbul ignore next */
      (cov_2cr3owv9z0().s[7]++, context.flags.limit);
      // Get swarm list
      let swarms =
      /* istanbul ignore next */
      (cov_2cr3owv9z0().s[8]++, await this.getSwarms(showHistory));
      // Apply filters
      /* istanbul ignore next */
      cov_2cr3owv9z0().s[9]++;
      if (statusFilter) {
        /* istanbul ignore next */
        cov_2cr3owv9z0().b[4][0]++;
        cov_2cr3owv9z0().s[10]++;
        swarms = swarms.filter(swarm => {
          /* istanbul ignore next */
          cov_2cr3owv9z0().f[2]++;
          cov_2cr3owv9z0().s[11]++;
          return swarm.status === statusFilter;
        });
      } else
      /* istanbul ignore next */
      {
        cov_2cr3owv9z0().b[4][1]++;
      }
      // Apply sorting
      cov_2cr3owv9z0().s[12]++;
      swarms = this.sortSwarms(swarms, sortBy);
      // Apply limit
      /* istanbul ignore next */
      cov_2cr3owv9z0().s[13]++;
      if (
      /* istanbul ignore next */
      (cov_2cr3owv9z0().b[6][0]++, limit) &&
      /* istanbul ignore next */
      (cov_2cr3owv9z0().b[6][1]++, limit > 0)) {
        /* istanbul ignore next */
        cov_2cr3owv9z0().b[5][0]++;
        cov_2cr3owv9z0().s[14]++;
        swarms = swarms.slice(0, limit);
      } else
      /* istanbul ignore next */
      {
        cov_2cr3owv9z0().b[5][1]++;
      }
      // Format output
      const output =
      /* istanbul ignore next */
      (cov_2cr3owv9z0().s[15]++, this.formatOutput(swarms, format, detailed));
      /* istanbul ignore next */
      cov_2cr3owv9z0().s[16]++;
      return {
        success: true,
        exitCode: 0,
        message: output,
        data: {
          swarms,
          count: swarms.length,
          filter: statusFilter,
          showHistory
        }
      };
    } catch (error) {
      /* istanbul ignore next */
      cov_2cr3owv9z0().s[17]++;
      return {
        success: false,
        error: `Failed to list swarms: ${error instanceof Error ?
        /* istanbul ignore next */
        (cov_2cr3owv9z0().b[7][0]++, error.message) :
        /* istanbul ignore next */
        (cov_2cr3owv9z0().b[7][1]++, String(error))}`,
        exitCode: 1
      };
    }
  }
  async getSwarms(includeHistory) {
    /* istanbul ignore next */
    cov_2cr3owv9z0().f[3]++;
    // This would query the actual swarm registry
    // For now, return mock data
    const mockSwarms =
    /* istanbul ignore next */
    (cov_2cr3owv9z0().s[18]++, [{
      id: 'swarm_1704067200_abc123def',
      status: 'running',
      topology: 'mesh',
      agents: 5,
      maxAgents: 8,
      createdAt: new Date(Date.now() - 600000),
      // 10 minutes ago
      uptime: 600000,
      port: 3000,
      tasks: {
        total: 45,
        completed: 38,
        failed: 2,
        active: 5
      },
      memory: {
        usage: '1.2 MB',
        entries: 234
      }
    }, {
      id: 'swarm_1704063600_xyz789ghi',
      status: 'running',
      topology: 'hierarchical',
      agents: 3,
      maxAgents: 5,
      createdAt: new Date(Date.now() - 1800000),
      // 30 minutes ago
      uptime: 1800000,
      port: 3001,
      tasks: {
        total: 23,
        completed: 21,
        failed: 0,
        active: 2
      },
      memory: {
        usage: '856 KB',
        entries: 145
      }
    }, {
      id: 'swarm_1704060000_def456jkl',
      status: 'starting',
      topology: 'star',
      agents: 1,
      maxAgents: 6,
      createdAt: new Date(Date.now() - 30000),
      // 30 seconds ago
      port: 3002,
      tasks: {
        total: 0,
        completed: 0,
        failed: 0,
        active: 0
      },
      memory: {
        usage: '124 KB',
        entries: 12
      }
    }]);
    /* istanbul ignore next */
    cov_2cr3owv9z0().s[19]++;
    if (includeHistory) {
      /* istanbul ignore next */
      cov_2cr3owv9z0().b[8][0]++;
      cov_2cr3owv9z0().s[20]++;
      // Add some stopped swarms
      mockSwarms.push({
        id: 'swarm_1704000000_old123abc',
        status: 'stopped',
        topology: 'mesh',
        agents: 0,
        maxAgents: 4,
        createdAt: new Date(Date.now() - 7200000),
        // 2 hours ago
        tasks: {
          total: 156,
          completed: 152,
          failed: 4,
          active: 0
        },
        memory: {
          usage: '2.8 MB',
          entries: 567
        }
      }, {
        id: 'swarm_1703996400_err789xyz',
        status: 'error',
        topology: 'ring',
        agents: 0,
        maxAgents: 3,
        createdAt: new Date(Date.now() - 8100000),
        // 2.25 hours ago
        tasks: {
          total: 12,
          completed: 8,
          failed: 4,
          active: 0
        },
        memory: {
          usage: '445 KB',
          entries: 89
        }
      });
    } else
    /* istanbul ignore next */
    {
      cov_2cr3owv9z0().b[8][1]++;
    }
    cov_2cr3owv9z0().s[21]++;
    return mockSwarms;
  }
  sortSwarms(swarms, sortBy) {
    /* istanbul ignore next */
    cov_2cr3owv9z0().f[4]++;
    cov_2cr3owv9z0().s[22]++;
    return [...swarms].sort((a, b) => {
      /* istanbul ignore next */
      cov_2cr3owv9z0().f[5]++;
      cov_2cr3owv9z0().s[23]++;
      switch (sortBy) {
        case 'created':
          /* istanbul ignore next */
          cov_2cr3owv9z0().b[9][0]++;
          cov_2cr3owv9z0().s[24]++;
          return b.createdAt.getTime() - a.createdAt.getTime();
        // Newest first
        case 'status':
          /* istanbul ignore next */
          cov_2cr3owv9z0().b[9][1]++;
          cov_2cr3owv9z0().s[25]++;
          return a.status.localeCompare(b.status);
        case 'agents':
          /* istanbul ignore next */
          cov_2cr3owv9z0().b[9][2]++;
          cov_2cr3owv9z0().s[26]++;
          return b.agents - a.agents;
        // Most agents first
        case 'tasks':
          /* istanbul ignore next */
          cov_2cr3owv9z0().b[9][3]++;
          cov_2cr3owv9z0().s[27]++;
          return b.tasks.total - a.tasks.total;
        // Most tasks first
        default:
          /* istanbul ignore next */
          cov_2cr3owv9z0().b[9][4]++;
          cov_2cr3owv9z0().s[28]++;
          return b.createdAt.getTime() - a.createdAt.getTime();
      }
    });
  }
  formatOutput(swarms, format, detailed) {
    /* istanbul ignore next */
    cov_2cr3owv9z0().f[6]++;
    cov_2cr3owv9z0().s[29]++;
    if (swarms.length === 0) {
      /* istanbul ignore next */
      cov_2cr3owv9z0().b[10][0]++;
      cov_2cr3owv9z0().s[30]++;
      return 'No swarms found';
    } else
    /* istanbul ignore next */
    {
      cov_2cr3owv9z0().b[10][1]++;
    }
    cov_2cr3owv9z0().s[31]++;
    switch (format.toLowerCase()) {
      case 'json':
        /* istanbul ignore next */
        cov_2cr3owv9z0().b[11][0]++;
        cov_2cr3owv9z0().s[32]++;
        return JSON.stringify(swarms, null, 2);
      case 'yaml':
        /* istanbul ignore next */
        cov_2cr3owv9z0().b[11][1]++;
        cov_2cr3owv9z0().s[33]++;
        return this.toYaml(swarms);
      case 'table':
        /* istanbul ignore next */
        cov_2cr3owv9z0().b[11][2]++;
      default:
        /* istanbul ignore next */
        cov_2cr3owv9z0().b[11][3]++;
        cov_2cr3owv9z0().s[34]++;
        return this.formatAsTable(swarms, detailed);
    }
  }
  formatAsTable(swarms, detailed) {
    /* istanbul ignore next */
    cov_2cr3owv9z0().f[7]++;
    const lines =
    /* istanbul ignore next */
    (cov_2cr3owv9z0().s[35]++, []);
    // Header
    /* istanbul ignore next */
    cov_2cr3owv9z0().s[36]++;
    lines.push('Swarm List');
    /* istanbul ignore next */
    cov_2cr3owv9z0().s[37]++;
    lines.push('='.repeat(80));
    /* istanbul ignore next */
    cov_2cr3owv9z0().s[38]++;
    lines.push('');
    /* istanbul ignore next */
    cov_2cr3owv9z0().s[39]++;
    if (detailed) {
      /* istanbul ignore next */
      cov_2cr3owv9z0().b[12][0]++;
      cov_2cr3owv9z0().s[40]++;
      // Detailed view - one swarm per section
      for (const swarm of swarms) {
        /* istanbul ignore next */
        cov_2cr3owv9z0().s[41]++;
        lines.push(`Swarm: ${swarm.id}`);
        /* istanbul ignore next */
        cov_2cr3owv9z0().s[42]++;
        lines.push(`  Status: ${this.getStatusIcon(swarm.status)} ${swarm.status.toUpperCase()}`);
        /* istanbul ignore next */
        cov_2cr3owv9z0().s[43]++;
        lines.push(`  Topology: ${swarm.topology}`);
        /* istanbul ignore next */
        cov_2cr3owv9z0().s[44]++;
        lines.push(`  Agents: ${swarm.agents}/${swarm.maxAgents}`);
        /* istanbul ignore next */
        cov_2cr3owv9z0().s[45]++;
        lines.push(`  Created: ${swarm.createdAt.toLocaleString()}`);
        /* istanbul ignore next */
        cov_2cr3owv9z0().s[46]++;
        if (swarm.uptime) {
          /* istanbul ignore next */
          cov_2cr3owv9z0().b[13][0]++;
          cov_2cr3owv9z0().s[47]++;
          lines.push(`  Uptime: ${this.formatDuration(swarm.uptime)}`);
        } else
        /* istanbul ignore next */
        {
          cov_2cr3owv9z0().b[13][1]++;
        }
        cov_2cr3owv9z0().s[48]++;
        if (swarm.port) {
          /* istanbul ignore next */
          cov_2cr3owv9z0().b[14][0]++;
          cov_2cr3owv9z0().s[49]++;
          lines.push(`  Port: ${swarm.port}`);
        } else
        /* istanbul ignore next */
        {
          cov_2cr3owv9z0().b[14][1]++;
        }
        cov_2cr3owv9z0().s[50]++;
        lines.push(`  Tasks: ${swarm.tasks.total} total, ${swarm.tasks.completed} completed, ${swarm.tasks.failed} failed, ${swarm.tasks.active} active`);
        /* istanbul ignore next */
        cov_2cr3owv9z0().s[51]++;
        lines.push(`  Memory: ${swarm.memory.usage} (${swarm.memory.entries} entries)`);
        /* istanbul ignore next */
        cov_2cr3owv9z0().s[52]++;
        lines.push('');
      }
    } else {
      /* istanbul ignore next */
      cov_2cr3owv9z0().b[12][1]++;
      cov_2cr3owv9z0().s[53]++;
      // Table view
      lines.push('┌─────────────────────────────┬─────────────┬─────────────┬───────────┬──────────┬─────────────┐');
      /* istanbul ignore next */
      cov_2cr3owv9z0().s[54]++;
      lines.push('│ Swarm ID                    │ Status      │ Topology    │ Agents    │ Tasks    │ Created     │');
      /* istanbul ignore next */
      cov_2cr3owv9z0().s[55]++;
      lines.push('├─────────────────────────────┼─────────────┼─────────────┼───────────┼──────────┼─────────────┤');
      /* istanbul ignore next */
      cov_2cr3owv9z0().s[56]++;
      for (const swarm of swarms) {
        const id =
        /* istanbul ignore next */
        (cov_2cr3owv9z0().s[57]++, swarm.id.length > 27 ?
        /* istanbul ignore next */
        (cov_2cr3owv9z0().b[15][0]++, swarm.id.substring(0, 24) + '...') :
        /* istanbul ignore next */
        (cov_2cr3owv9z0().b[15][1]++, swarm.id.padEnd(27)));
        const status =
        /* istanbul ignore next */
        (cov_2cr3owv9z0().s[58]++, `${this.getStatusIcon(swarm.status)} ${swarm.status}`.padEnd(11));
        const topology =
        /* istanbul ignore next */
        (cov_2cr3owv9z0().s[59]++, swarm.topology.padEnd(11));
        const agents =
        /* istanbul ignore next */
        (cov_2cr3owv9z0().s[60]++, `${swarm.agents}/${swarm.maxAgents}`.padEnd(9));
        const tasks =
        /* istanbul ignore next */
        (cov_2cr3owv9z0().s[61]++, `${swarm.tasks.completed}/${swarm.tasks.total}`.padEnd(8));
        const created =
        /* istanbul ignore next */
        (cov_2cr3owv9z0().s[62]++, this.formatRelativeTime(swarm.createdAt).padEnd(11));
        /* istanbul ignore next */
        cov_2cr3owv9z0().s[63]++;
        lines.push(`│ ${id} │ ${status} │ ${topology} │ ${agents} │ ${tasks} │ ${created} │`);
      }
      /* istanbul ignore next */
      cov_2cr3owv9z0().s[64]++;
      lines.push('└─────────────────────────────┴─────────────┴─────────────┴───────────┴──────────┴─────────────┘');
    }
    // Summary
    const runningCount =
    /* istanbul ignore next */
    (cov_2cr3owv9z0().s[65]++, swarms.filter(s => {
      /* istanbul ignore next */
      cov_2cr3owv9z0().f[8]++;
      cov_2cr3owv9z0().s[66]++;
      return s.status === 'running';
    }).length);
    const stoppedCount =
    /* istanbul ignore next */
    (cov_2cr3owv9z0().s[67]++, swarms.filter(s => {
      /* istanbul ignore next */
      cov_2cr3owv9z0().f[9]++;
      cov_2cr3owv9z0().s[68]++;
      return s.status === 'stopped';
    }).length);
    const errorCount =
    /* istanbul ignore next */
    (cov_2cr3owv9z0().s[69]++, swarms.filter(s => {
      /* istanbul ignore next */
      cov_2cr3owv9z0().f[10]++;
      cov_2cr3owv9z0().s[70]++;
      return s.status === 'error';
    }).length);
    const otherCount =
    /* istanbul ignore next */
    (cov_2cr3owv9z0().s[71]++, swarms.length - runningCount - stoppedCount - errorCount);
    /* istanbul ignore next */
    cov_2cr3owv9z0().s[72]++;
    lines.push('');
    /* istanbul ignore next */
    cov_2cr3owv9z0().s[73]++;
    lines.push('Summary:');
    /* istanbul ignore next */
    cov_2cr3owv9z0().s[74]++;
    lines.push(`  Total: ${swarms.length} swarms`);
    /* istanbul ignore next */
    cov_2cr3owv9z0().s[75]++;
    lines.push(`  Running: ${runningCount}`);
    /* istanbul ignore next */
    cov_2cr3owv9z0().s[76]++;
    if (stoppedCount > 0) {
      /* istanbul ignore next */
      cov_2cr3owv9z0().b[16][0]++;
      cov_2cr3owv9z0().s[77]++;
      lines.push(`  Stopped: ${stoppedCount}`);
    } else
    /* istanbul ignore next */
    {
      cov_2cr3owv9z0().b[16][1]++;
    }
    cov_2cr3owv9z0().s[78]++;
    if (errorCount > 0) {
      /* istanbul ignore next */
      cov_2cr3owv9z0().b[17][0]++;
      cov_2cr3owv9z0().s[79]++;
      lines.push(`  Error: ${errorCount}`);
    } else
    /* istanbul ignore next */
    {
      cov_2cr3owv9z0().b[17][1]++;
    }
    cov_2cr3owv9z0().s[80]++;
    if (otherCount > 0) {
      /* istanbul ignore next */
      cov_2cr3owv9z0().b[18][0]++;
      cov_2cr3owv9z0().s[81]++;
      lines.push(`  Other: ${otherCount}`);
    } else
    /* istanbul ignore next */
    {
      cov_2cr3owv9z0().b[18][1]++;
    }
    cov_2cr3owv9z0().s[82]++;
    return lines.join('\n');
  }
  getStatusIcon(status) {
    /* istanbul ignore next */
    cov_2cr3owv9z0().f[11]++;
    const icons =
    /* istanbul ignore next */
    (cov_2cr3owv9z0().s[83]++, {
      running: '🟢',
      stopped: '⚪',
      error: '🔴',
      starting: '🟡',
      stopping: '🟠'
    });
    /* istanbul ignore next */
    cov_2cr3owv9z0().s[84]++;
    return /* istanbul ignore next */(cov_2cr3owv9z0().b[19][0]++, icons[status]) ||
    /* istanbul ignore next */
    (cov_2cr3owv9z0().b[19][1]++, '⚫');
  }
  formatDuration(ms) {
    /* istanbul ignore next */
    cov_2cr3owv9z0().f[12]++;
    const seconds =
    /* istanbul ignore next */
    (cov_2cr3owv9z0().s[85]++, Math.floor(ms / 1000));
    const minutes =
    /* istanbul ignore next */
    (cov_2cr3owv9z0().s[86]++, Math.floor(seconds / 60));
    const hours =
    /* istanbul ignore next */
    (cov_2cr3owv9z0().s[87]++, Math.floor(minutes / 60));
    /* istanbul ignore next */
    cov_2cr3owv9z0().s[88]++;
    if (hours > 0) {
      /* istanbul ignore next */
      cov_2cr3owv9z0().b[20][0]++;
      cov_2cr3owv9z0().s[89]++;
      return `${hours}h ${minutes % 60}m`;
    } else {
      /* istanbul ignore next */
      cov_2cr3owv9z0().b[20][1]++;
      cov_2cr3owv9z0().s[90]++;
      if (minutes > 0) {
        /* istanbul ignore next */
        cov_2cr3owv9z0().b[21][0]++;
        cov_2cr3owv9z0().s[91]++;
        return `${minutes}m ${seconds % 60}s`;
      } else {
        /* istanbul ignore next */
        cov_2cr3owv9z0().b[21][1]++;
        cov_2cr3owv9z0().s[92]++;
        return `${seconds}s`;
      }
    }
  }
  formatRelativeTime(date) {
    /* istanbul ignore next */
    cov_2cr3owv9z0().f[13]++;
    const now =
    /* istanbul ignore next */
    (cov_2cr3owv9z0().s[93]++, new Date());
    const diff =
    /* istanbul ignore next */
    (cov_2cr3owv9z0().s[94]++, now.getTime() - date.getTime());
    /* istanbul ignore next */
    cov_2cr3owv9z0().s[95]++;
    if (diff < 60000) {
      /* istanbul ignore next */
      cov_2cr3owv9z0().b[22][0]++;
      cov_2cr3owv9z0().s[96]++;
      // Less than 1 minute
      return 'Just now';
    } else {
      /* istanbul ignore next */
      cov_2cr3owv9z0().b[22][1]++;
      cov_2cr3owv9z0().s[97]++;
      if (diff < 3600000) {
        /* istanbul ignore next */
        cov_2cr3owv9z0().b[23][0]++;
        cov_2cr3owv9z0().s[98]++;
        // Less than 1 hour
        return `${Math.floor(diff / 60000)}m ago`;
      } else {
        /* istanbul ignore next */
        cov_2cr3owv9z0().b[23][1]++;
        cov_2cr3owv9z0().s[99]++;
        if (diff < 86400000) {
          /* istanbul ignore next */
          cov_2cr3owv9z0().b[24][0]++;
          cov_2cr3owv9z0().s[100]++;
          // Less than 24 hours
          return `${Math.floor(diff / 3600000)}h ago`;
        } else {
          /* istanbul ignore next */
          cov_2cr3owv9z0().b[24][1]++;
          cov_2cr3owv9z0().s[101]++;
          return date.toLocaleDateString();
        }
      }
    }
  }
  toYaml(swarms) {
    /* istanbul ignore next */
    cov_2cr3owv9z0().f[14]++;
    let result =
    /* istanbul ignore next */
    (cov_2cr3owv9z0().s[102]++, 'swarms:\n');
    /* istanbul ignore next */
    cov_2cr3owv9z0().s[103]++;
    for (const swarm of swarms) {
      /* istanbul ignore next */
      cov_2cr3owv9z0().s[104]++;
      result += `  - id: ${swarm.id}\n`;
      /* istanbul ignore next */
      cov_2cr3owv9z0().s[105]++;
      result += `    status: ${swarm.status}\n`;
      /* istanbul ignore next */
      cov_2cr3owv9z0().s[106]++;
      result += `    topology: ${swarm.topology}\n`;
      /* istanbul ignore next */
      cov_2cr3owv9z0().s[107]++;
      result += `    agents: ${swarm.agents}\n`;
      /* istanbul ignore next */
      cov_2cr3owv9z0().s[108]++;
      result += `    maxAgents: ${swarm.maxAgents}\n`;
      /* istanbul ignore next */
      cov_2cr3owv9z0().s[109]++;
      result += `    createdAt: ${swarm.createdAt.toISOString()}\n`;
      /* istanbul ignore next */
      cov_2cr3owv9z0().s[110]++;
      if (swarm.uptime) {
        /* istanbul ignore next */
        cov_2cr3owv9z0().b[25][0]++;
        cov_2cr3owv9z0().s[111]++;
        result += `    uptime: ${swarm.uptime}\n`;
      } else
      /* istanbul ignore next */
      {
        cov_2cr3owv9z0().b[25][1]++;
      }
      cov_2cr3owv9z0().s[112]++;
      if (swarm.port) {
        /* istanbul ignore next */
        cov_2cr3owv9z0().b[26][0]++;
        cov_2cr3owv9z0().s[113]++;
        result += `    port: ${swarm.port}\n`;
      } else
      /* istanbul ignore next */
      {
        cov_2cr3owv9z0().b[26][1]++;
      }
      cov_2cr3owv9z0().s[114]++;
      result += `    tasks:\n`;
      /* istanbul ignore next */
      cov_2cr3owv9z0().s[115]++;
      result += `      total: ${swarm.tasks.total}\n`;
      /* istanbul ignore next */
      cov_2cr3owv9z0().s[116]++;
      result += `      completed: ${swarm.tasks.completed}\n`;
      /* istanbul ignore next */
      cov_2cr3owv9z0().s[117]++;
      result += `      failed: ${swarm.tasks.failed}\n`;
      /* istanbul ignore next */
      cov_2cr3owv9z0().s[118]++;
      result += `      active: ${swarm.tasks.active}\n`;
      /* istanbul ignore next */
      cov_2cr3owv9z0().s[119]++;
      result += `    memory:\n`;
      /* istanbul ignore next */
      cov_2cr3owv9z0().s[120]++;
      result += `      usage: ${swarm.memory.usage}\n`;
      /* istanbul ignore next */
      cov_2cr3owv9z0().s[121]++;
      result += `      entries: ${swarm.memory.entries}\n`;
    }
    /* istanbul ignore next */
    cov_2cr3owv9z0().s[122]++;
    return result;
  }
  getHelp() {
    /* istanbul ignore next */
    cov_2cr3owv9z0().f[15]++;
    cov_2cr3owv9z0().s[123]++;
    return `List all swarms with their status and information

USAGE:
  claude-flow swarm list [options]

OPTIONS:
  --format <format>     Output format (table, json, yaml) [default: table]
  --status <status>     Filter by status (running, stopped, error, starting, stopping)
  --detailed           Show detailed information for each swarm
  --show-history       Include stopped swarms in results
  --sort <field>        Sort by field (created, status, agents, tasks) [default: created]
  --limit <number>      Limit number of results
  -h, --help           Show help

EXAMPLES:
  claude-flow swarm list
  claude-flow swarm list --format json
  claude-flow swarm list --status running
  claude-flow swarm list --detailed
  claude-flow swarm list --show-history --sort agents
  claude-flow swarm list --limit 5

STATUSES:
  🟢 running     Swarm is active and processing tasks
  🟡 starting    Swarm is initializing
  🟠 stopping    Swarm is shutting down gracefully
  ⚪ stopped     Swarm has been stopped
  🔴 error       Swarm encountered an error

SORT OPTIONS:
  created        Sort by creation time (newest first)
  status         Sort alphabetically by status
  agents         Sort by number of agents (most first)
  tasks          Sort by total tasks (most first)

The list command shows all swarms by default. Use --show-history to include
stopped swarms, or --status to filter by specific status.

Use --detailed for comprehensive information about each swarm.
Use --format json or --format yaml for programmatic consumption.
`;
  }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,