9e21bb943d60aa41665e81f9cbf02979
/* istanbul ignore next */
function cov_790gqlvqy() {
  var path = "/home/mhugo/code/claude-code-flow/src/__tests__/helpers/network-test-helper.ts";
  var hash = "d8a9271ec2d6cdbb48e57ec92366b6d51cb666ff";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/home/mhugo/code/claude-code-flow/src/__tests__/helpers/network-test-helper.ts",
    statementMap: {
      "0": {
        start: {
          line: 7,
          column: 13
        },
        end: {
          line: 7,
          column: 22
        }
      },
      "1": {
        start: {
          line: 8,
          column: 24
        },
        end: {
          line: 8,
          column: 33
        }
      },
      "2": {
        start: {
          line: 9,
          column: 15
        },
        end: {
          line: 9,
          column: 17
        }
      },
      "3": {
        start: {
          line: 10,
          column: 19
        },
        end: {
          line: 10,
          column: 20
        }
      },
      "4": {
        start: {
          line: 11,
          column: 19
        },
        end: {
          line: 11,
          column: 23
        }
      },
      "5": {
        start: {
          line: 12,
          column: 16
        },
        end: {
          line: 12,
          column: 21
        }
      },
      "6": {
        start: {
          line: 13,
          column: 11
        },
        end: {
          line: 13,
          column: 12
        }
      },
      "7": {
        start: {
          line: 15,
          column: 8
        },
        end: {
          line: 15,
          column: 49
        }
      },
      "8": {
        start: {
          line: 16,
          column: 8
        },
        end: {
          line: 16,
          column: 30
        }
      },
      "9": {
        start: {
          line: 17,
          column: 8
        },
        end: {
          line: 17,
          column: 25
        }
      },
      "10": {
        start: {
          line: 20,
          column: 8
        },
        end: {
          line: 20,
          column: 31
        }
      },
      "11": {
        start: {
          line: 21,
          column: 8
        },
        end: {
          line: 21,
          column: 28
        }
      },
      "12": {
        start: {
          line: 22,
          column: 8
        },
        end: {
          line: 22,
          column: 39
        }
      },
      "13": {
        start: {
          line: 23,
          column: 8
        },
        end: {
          line: 23,
          column: 27
        }
      },
      "14": {
        start: {
          line: 26,
          column: 20
        },
        end: {
          line: 26,
          column: 53
        }
      },
      "15": {
        start: {
          line: 27,
          column: 8
        },
        end: {
          line: 27,
          column: 39
        }
      },
      "16": {
        start: {
          line: 30,
          column: 8
        },
        end: {
          line: 30,
          column: 51
        }
      },
      "17": {
        start: {
          line: 33,
          column: 8
        },
        end: {
          line: 33,
          column: 34
        }
      },
      "18": {
        start: {
          line: 36,
          column: 8
        },
        end: {
          line: 36,
          column: 27
        }
      },
      "19": {
        start: {
          line: 39,
          column: 8
        },
        end: {
          line: 39,
          column: 36
        }
      },
      "20": {
        start: {
          line: 42,
          column: 8
        },
        end: {
          line: 42,
          column: 38
        }
      },
      "21": {
        start: {
          line: 45,
          column: 8
        },
        end: {
          line: 45,
          column: 30
        }
      },
      "22": {
        start: {
          line: 46,
          column: 8
        },
        end: {
          line: 46,
          column: 33
        }
      },
      "23": {
        start: {
          line: 49,
          column: 21
        },
        end: {
          line: 49,
          column: 25
        }
      },
      "24": {
        start: {
          line: 50,
          column: 20
        },
        end: {
          line: 50,
          column: 62
        }
      },
      "25": {
        start: {
          line: 51,
          column: 8
        },
        end: {
          line: 67,
          column: 10
        }
      },
      "26": {
        start: {
          line: 53,
          column: 16
        },
        end: {
          line: 53,
          column: 73
        }
      },
      "27": {
        start: {
          line: 56,
          column: 16
        },
        end: {
          line: 56,
          column: 69
        }
      },
      "28": {
        start: {
          line: 59,
          column: 16
        },
        end: {
          line: 59,
          column: 68
        }
      },
      "29": {
        start: {
          line: 62,
          column: 16
        },
        end: {
          line: 62,
          column: 76
        }
      },
      "30": {
        start: {
          line: 65,
          column: 16
        },
        end: {
          line: 65,
          column: 70
        }
      },
      "31": {
        start: {
          line: 70,
          column: 21
        },
        end: {
          line: 70,
          column: 25
        }
      },
      "32": {
        start: {
          line: 71,
          column: 21
        },
        end: {
          line: 71,
          column: 42
        }
      },
      "33": {
        start: {
          line: 72,
          column: 26
        },
        end: {
          line: 72,
          column: 31
        }
      },
      "34": {
        start: {
          line: 73,
          column: 33
        },
        end: {
          line: 73,
          column: 35
        }
      },
      "35": {
        start: {
          line: 74,
          column: 31
        },
        end: {
          line: 74,
          column: 33
        }
      },
      "36": {
        start: {
          line: 75,
          column: 33
        },
        end: {
          line: 75,
          column: 35
        }
      },
      "37": {
        start: {
          line: 76,
          column: 36
        },
        end: {
          line: 76,
          column: 38
        }
      },
      "38": {
        start: {
          line: 77,
          column: 8
        },
        end: {
          line: 127,
          column: 10
        }
      },
      "39": {
        start: {
          line: 79,
          column: 16
        },
        end: {
          line: 81,
          column: 17
        }
      },
      "40": {
        start: {
          line: 80,
          column: 20
        },
        end: {
          line: 80,
          column: 75
        }
      },
      "41": {
        start: {
          line: 82,
          column: 16
        },
        end: {
          line: 84,
          column: 17
        }
      },
      "42": {
        start: {
          line: 83,
          column: 20
        },
        end: {
          line: 83,
          column: 56
        }
      },
      "43": {
        start: {
          line: 85,
          column: 16
        },
        end: {
          line: 85,
          column: 35
        }
      },
      "44": {
        start: {
          line: 86,
          column: 33
        },
        end: {
          line: 86,
          column: 65
        }
      },
      "45": {
        start: {
          line: 87,
          column: 16
        },
        end: {
          line: 89,
          column: 17
        }
      },
      "46": {
        start: {
          line: 88,
          column: 20
        },
        end: {
          line: 88,
          column: 41
        }
      },
      "47": {
        start: {
          line: 90,
          column: 16
        },
        end: {
          line: 90,
          column: 65
        }
      },
      "48": {
        start: {
          line: 90,
          column: 53
        },
        end: {
          line: 90,
          column: 63
        }
      },
      "49": {
        start: {
          line: 93,
          column: 16
        },
        end: {
          line: 93,
          column: 36
        }
      },
      "50": {
        start: {
          line: 94,
          column: 33
        },
        end: {
          line: 94,
          column: 65
        }
      },
      "51": {
        start: {
          line: 95,
          column: 16
        },
        end: {
          line: 97,
          column: 17
        }
      },
      "52": {
        start: {
          line: 96,
          column: 20
        },
        end: {
          line: 96,
          column: 44
        }
      },
      "53": {
        start: {
          line: 98,
          column: 16
        },
        end: {
          line: 98,
          column: 68
        }
      },
      "54": {
        start: {
          line: 98,
          column: 56
        },
        end: {
          line: 98,
          column: 66
        }
      },
      "55": {
        start: {
          line: 101,
          column: 16
        },
        end: {
          line: 103,
          column: 17
        }
      },
      "56": {
        start: {
          line: 102,
          column: 20
        },
        end: {
          line: 102,
          column: 63
        }
      },
      "57": {
        start: {
          line: 104,
          column: 16
        },
        end: {
          line: 106,
          column: 17
        }
      },
      "58": {
        start: {
          line: 105,
          column: 20
        },
        end: {
          line: 105,
          column: 75
        }
      },
      "59": {
        start: {
          line: 107,
          column: 16
        },
        end: {
          line: 109,
          column: 17
        }
      },
      "60": {
        start: {
          line: 108,
          column: 20
        },
        end: {
          line: 108,
          column: 56
        }
      },
      "61": {
        start: {
          line: 110,
          column: 33
        },
        end: {
          line: 110,
          column: 65
        }
      },
      "62": {
        start: {
          line: 111,
          column: 16
        },
        end: {
          line: 113,
          column: 17
        }
      },
      "63": {
        start: {
          line: 112,
          column: 20
        },
        end: {
          line: 112,
          column: 48
        }
      },
      "64": {
        start: {
          line: 116,
          column: 16
        },
        end: {
          line: 116,
          column: 48
        }
      },
      "65": {
        start: {
          line: 119,
          column: 16
        },
        end: {
          line: 119,
          column: 46
        }
      },
      "66": {
        start: {
          line: 122,
          column: 16
        },
        end: {
          line: 122,
          column: 48
        }
      },
      "67": {
        start: {
          line: 125,
          column: 16
        },
        end: {
          line: 125,
          column: 51
        }
      },
      "68": {
        start: {
          line: 130,
          column: 8
        },
        end: {
          line: 132,
          column: 9
        }
      },
      "69": {
        start: {
          line: 131,
          column: 12
        },
        end: {
          line: 131,
          column: 55
        }
      },
      "70": {
        start: {
          line: 133,
          column: 8
        },
        end: {
          line: 135,
          column: 9
        }
      },
      "71": {
        start: {
          line: 134,
          column: 12
        },
        end: {
          line: 134,
          column: 67
        }
      },
      "72": {
        start: {
          line: 136,
          column: 8
        },
        end: {
          line: 138,
          column: 9
        }
      },
      "73": {
        start: {
          line: 137,
          column: 12
        },
        end: {
          line: 137,
          column: 48
        }
      },
      "74": {
        start: {
          line: 140,
          column: 24
        },
        end: {
          line: 146,
          column: 9
        }
      },
      "75": {
        start: {
          line: 147,
          column: 8
        },
        end: {
          line: 147,
          column: 36
        }
      },
      "76": {
        start: {
          line: 149,
          column: 20
        },
        end: {
          line: 149,
          column: 53
        }
      },
      "77": {
        start: {
          line: 150,
          column: 25
        },
        end: {
          line: 150,
          column: 45
        }
      },
      "78": {
        start: {
          line: 151,
          column: 8
        },
        end: {
          line: 153,
          column: 9
        }
      },
      "79": {
        start: {
          line: 152,
          column: 12
        },
        end: {
          line: 152,
          column: 28
        }
      },
      "80": {
        start: {
          line: 155,
          column: 8
        },
        end: {
          line: 159,
          column: 10
        }
      },
      "81": {
        start: {
          line: 162,
          column: 8
        },
        end: {
          line: 162,
          column: 63
        }
      },
      "82": {
        start: {
          line: 162,
          column: 38
        },
        end: {
          line: 162,
          column: 61
        }
      },
      "83": {
        start: {
          line: 165,
          column: 8
        },
        end: {
          line: 165,
          column: 65
        }
      },
      "84": {
        start: {
          line: 169,
          column: 13
        },
        end: {
          line: 169,
          column: 17
        }
      },
      "85": {
        start: {
          line: 170,
          column: 11
        },
        end: {
          line: 170,
          column: 12
        }
      },
      "86": {
        start: {
          line: 171,
          column: 13
        },
        end: {
          line: 171,
          column: 22
        }
      },
      "87": {
        start: {
          line: 172,
          column: 15
        },
        end: {
          line: 172,
          column: 17
        }
      },
      "88": {
        start: {
          line: 174,
          column: 8
        },
        end: {
          line: 193,
          column: 9
        }
      },
      "89": {
        start: {
          line: 175,
          column: 25
        },
        end: {
          line: 175,
          column: 45
        }
      },
      "90": {
        start: {
          line: 176,
          column: 12
        },
        end: {
          line: 178,
          column: 15
        }
      },
      "91": {
        start: {
          line: 177,
          column: 16
        },
        end: {
          line: 177,
          column: 45
        }
      },
      "92": {
        start: {
          line: 179,
          column: 12
        },
        end: {
          line: 179,
          column: 53
        }
      },
      "93": {
        start: {
          line: 180,
          column: 12
        },
        end: {
          line: 187,
          column: 15
        }
      },
      "94": {
        start: {
          line: 181,
          column: 16
        },
        end: {
          line: 186,
          column: 19
        }
      },
      "95": {
        start: {
          line: 182,
          column: 20
        },
        end: {
          line: 185,
          column: 34
        }
      },
      "96": {
        start: {
          line: 183,
          column: 24
        },
        end: {
          line: 183,
          column: 36
        }
      },
      "97": {
        start: {
          line: 185,
          column: 24
        },
        end: {
          line: 185,
          column: 34
        }
      },
      "98": {
        start: {
          line: 188,
          column: 12
        },
        end: {
          line: 188,
          column: 29
        }
      },
      "99": {
        start: {
          line: 191,
          column: 12
        },
        end: {
          line: 191,
          column: 71
        }
      },
      "100": {
        start: {
          line: 192,
          column: 12
        },
        end: {
          line: 192,
          column: 24
        }
      },
      "101": {
        start: {
          line: 196,
          column: 8
        },
        end: {
          line: 201,
          column: 9
        }
      },
      "102": {
        start: {
          line: 197,
          column: 12
        },
        end: {
          line: 199,
          column: 15
        }
      },
      "103": {
        start: {
          line: 198,
          column: 16
        },
        end: {
          line: 198,
          column: 51
        }
      },
      "104": {
        start: {
          line: 198,
          column: 40
        },
        end: {
          line: 198,
          column: 49
        }
      },
      "105": {
        start: {
          line: 200,
          column: 12
        },
        end: {
          line: 200,
          column: 31
        }
      },
      "106": {
        start: {
          line: 202,
          column: 8
        },
        end: {
          line: 202,
          column: 28
        }
      },
      "107": {
        start: {
          line: 203,
          column: 8
        },
        end: {
          line: 203,
          column: 27
        }
      },
      "108": {
        start: {
          line: 206,
          column: 20
        },
        end: {
          line: 206,
          column: 53
        }
      },
      "109": {
        start: {
          line: 207,
          column: 8
        },
        end: {
          line: 207,
          column: 39
        }
      },
      "110": {
        start: {
          line: 211,
          column: 8
        },
        end: {
          line: 211,
          column: 80
        }
      },
      "111": {
        start: {
          line: 214,
          column: 8
        },
        end: {
          line: 214,
          column: 34
        }
      },
      "112": {
        start: {
          line: 217,
          column: 8
        },
        end: {
          line: 217,
          column: 27
        }
      },
      "113": {
        start: {
          line: 221,
          column: 8
        },
        end: {
          line: 221,
          column: 79
        }
      },
      "114": {
        start: {
          line: 225,
          column: 8
        },
        end: {
          line: 225,
          column: 79
        }
      },
      "115": {
        start: {
          line: 231,
          column: 20
        },
        end: {
          line: 231,
          column: 62
        }
      },
      "116": {
        start: {
          line: 232,
          column: 8
        },
        end: {
          line: 248,
          column: 10
        }
      },
      "117": {
        start: {
          line: 234,
          column: 16
        },
        end: {
          line: 234,
          column: 88
        }
      },
      "118": {
        start: {
          line: 237,
          column: 16
        },
        end: {
          line: 237,
          column: 84
        }
      },
      "119": {
        start: {
          line: 240,
          column: 16
        },
        end: {
          line: 240,
          column: 83
        }
      },
      "120": {
        start: {
          line: 243,
          column: 16
        },
        end: {
          line: 243,
          column: 91
        }
      },
      "121": {
        start: {
          line: 246,
          column: 16
        },
        end: {
          line: 246,
          column: 85
        }
      },
      "122": {
        start: {
          line: 252,
          column: 8
        },
        end: {
          line: 252,
          column: 65
        }
      },
      "123": {
        start: {
          line: 256,
          column: 23
        },
        end: {
          line: 256,
          column: 25
        }
      },
      "124": {
        start: {
          line: 257,
          column: 8
        },
        end: {
          line: 259,
          column: 11
        }
      },
      "125": {
        start: {
          line: 258,
          column: 12
        },
        end: {
          line: 258,
          column: 31
        }
      },
      "126": {
        start: {
          line: 260,
          column: 8
        },
        end: {
          line: 282,
          column: 11
        }
      },
      "127": {
        start: {
          line: 261,
          column: 25
        },
        end: {
          line: 261,
          column: 89
        }
      },
      "128": {
        start: {
          line: 263,
          column: 28
        },
        end: {
          line: 269,
          column: 13
        }
      },
      "129": {
        start: {
          line: 270,
          column: 12
        },
        end: {
          line: 270,
          column: 40
        }
      },
      "130": {
        start: {
          line: 272,
          column: 24
        },
        end: {
          line: 272,
          column: 50
        }
      },
      "131": {
        start: {
          line: 273,
          column: 29
        },
        end: {
          line: 273,
          column: 49
        }
      },
      "132": {
        start: {
          line: 274,
          column: 12
        },
        end: {
          line: 281,
          column: 13
        }
      },
      "133": {
        start: {
          line: 275,
          column: 16
        },
        end: {
          line: 275,
          column: 65
        }
      },
      "134": {
        start: {
          line: 276,
          column: 16
        },
        end: {
          line: 276,
          column: 107
        }
      },
      "135": {
        start: {
          line: 279,
          column: 16
        },
        end: {
          line: 279,
          column: 75
        }
      },
      "136": {
        start: {
          line: 280,
          column: 16
        },
        end: {
          line: 280,
          column: 79
        }
      },
      "137": {
        start: {
          line: 285,
          column: 8
        },
        end: {
          line: 312,
          column: 9
        }
      },
      "138": {
        start: {
          line: 287,
          column: 12
        },
        end: {
          line: 308,
          column: 13
        }
      },
      "139": {
        start: {
          line: 288,
          column: 32
        },
        end: {
          line: 291,
          column: 17
        }
      },
      "140": {
        start: {
          line: 292,
          column: 16
        },
        end: {
          line: 297,
          column: 17
        }
      },
      "141": {
        start: {
          line: 293,
          column: 20
        },
        end: {
          line: 293,
          column: 90
        }
      },
      "142": {
        start: {
          line: 294,
          column: 20
        },
        end: {
          line: 296,
          column: 21
        }
      },
      "143": {
        start: {
          line: 295,
          column: 24
        },
        end: {
          line: 295,
          column: 69
        }
      },
      "144": {
        start: {
          line: 298,
          column: 33
        },
        end: {
          line: 298,
          column: 58
        }
      },
      "145": {
        start: {
          line: 299,
          column: 37
        },
        end: {
          line: 299,
          column: 58
        }
      },
      "146": {
        start: {
          line: 300,
          column: 16
        },
        end: {
          line: 304,
          column: 18
        }
      },
      "147": {
        start: {
          line: 307,
          column: 16
        },
        end: {
          line: 307,
          column: 55
        }
      },
      "148": {
        start: {
          line: 311,
          column: 12
        },
        end: {
          line: 311,
          column: 61
        }
      },
      "149": {
        start: {
          line: 315,
          column: 8
        },
        end: {
          line: 320,
          column: 9
        }
      },
      "150": {
        start: {
          line: 316,
          column: 12
        },
        end: {
          line: 316,
          column: 36
        }
      },
      "151": {
        start: {
          line: 319,
          column: 12
        },
        end: {
          line: 319,
          column: 24
        }
      },
      "152": {
        start: {
          line: 323,
          column: 8
        },
        end: {
          line: 323,
          column: 65
        }
      },
      "153": {
        start: {
          line: 328,
          column: 4
        },
        end: {
          line: 328,
          column: 39
        }
      },
      "154": {
        start: {
          line: 331,
          column: 4
        },
        end: {
          line: 331,
          column: 39
        }
      },
      "155": {
        start: {
          line: 335,
          column: 19
        },
        end: {
          line: 335,
          column: 44
        }
      },
      "156": {
        start: {
          line: 337,
          column: 4
        },
        end: {
          line: 355,
          column: 5
        }
      },
      "157": {
        start: {
          line: 339,
          column: 12
        },
        end: {
          line: 339,
          column: 46
        }
      },
      "158": {
        start: {
          line: 340,
          column: 12
        },
        end: {
          line: 340,
          column: 18
        }
      },
      "159": {
        start: {
          line: 342,
          column: 12
        },
        end: {
          line: 342,
          column: 60
        }
      },
      "160": {
        start: {
          line: 343,
          column: 12
        },
        end: {
          line: 343,
          column: 18
        }
      },
      "161": {
        start: {
          line: 345,
          column: 12
        },
        end: {
          line: 345,
          column: 59
        }
      },
      "162": {
        start: {
          line: 346,
          column: 12
        },
        end: {
          line: 346,
          column: 18
        }
      },
      "163": {
        start: {
          line: 348,
          column: 12
        },
        end: {
          line: 348,
          column: 49
        }
      },
      "164": {
        start: {
          line: 349,
          column: 12
        },
        end: {
          line: 349,
          column: 18
        }
      },
      "165": {
        start: {
          line: 351,
          column: 12
        },
        end: {
          line: 351,
          column: 61
        }
      },
      "166": {
        start: {
          line: 352,
          column: 12
        },
        end: {
          line: 352,
          column: 18
        }
      },
      "167": {
        start: {
          line: 354,
          column: 12
        },
        end: {
          line: 354,
          column: 66
        }
      },
      "168": {
        start: {
          line: 357,
          column: 4
        },
        end: {
          line: 361,
          column: 5
        }
      },
      "169": {
        start: {
          line: 358,
          column: 8
        },
        end: {
          line: 360,
          column: 9
        }
      },
      "170": {
        start: {
          line: 359,
          column: 12
        },
        end: {
          line: 359,
          column: 98
        }
      },
      "171": {
        start: {
          line: 362,
          column: 4
        },
        end: {
          line: 362,
          column: 20
        }
      },
      "172": {
        start: {
          line: 365,
          column: 4
        },
        end: {
          line: 365,
          column: 35
        }
      },
      "173": {
        start: {
          line: 366,
          column: 4
        },
        end: {
          line: 368,
          column: 5
        }
      },
      "174": {
        start: {
          line: 367,
          column: 8
        },
        end: {
          line: 367,
          column: 78
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 14,
            column: 4
          },
          end: {
            line: 14,
            column: 5
          }
        },
        loc: {
          start: {
            line: 14,
            column: 36
          },
          end: {
            line: 18,
            column: 5
          }
        },
        line: 14
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 19,
            column: 4
          },
          end: {
            line: 19,
            column: 5
          }
        },
        loc: {
          start: {
            line: 19,
            column: 27
          },
          end: {
            line: 24,
            column: 5
          }
        },
        line: 19
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 25,
            column: 4
          },
          end: {
            line: 25,
            column: 5
          }
        },
        loc: {
          start: {
            line: 25,
            column: 40
          },
          end: {
            line: 28,
            column: 5
          }
        },
        line: 25
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 29,
            column: 4
          },
          end: {
            line: 29,
            column: 5
          }
        },
        loc: {
          start: {
            line: 29,
            column: 34
          },
          end: {
            line: 31,
            column: 5
          }
        },
        line: 29
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 32,
            column: 4
          },
          end: {
            line: 32,
            column: 5
          }
        },
        loc: {
          start: {
            line: 32,
            column: 22
          },
          end: {
            line: 34,
            column: 5
          }
        },
        line: 32
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 35,
            column: 4
          },
          end: {
            line: 35,
            column: 5
          }
        },
        loc: {
          start: {
            line: 35,
            column: 20
          },
          end: {
            line: 37,
            column: 5
          }
        },
        line: 35
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 38,
            column: 4
          },
          end: {
            line: 38,
            column: 5
          }
        },
        loc: {
          start: {
            line: 38,
            column: 34
          },
          end: {
            line: 40,
            column: 5
          }
        },
        line: 38
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 41,
            column: 4
          },
          end: {
            line: 41,
            column: 5
          }
        },
        loc: {
          start: {
            line: 41,
            column: 36
          },
          end: {
            line: 43,
            column: 5
          }
        },
        line: 41
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 44,
            column: 4
          },
          end: {
            line: 44,
            column: 5
          }
        },
        loc: {
          start: {
            line: 44,
            column: 29
          },
          end: {
            line: 47,
            column: 5
          }
        },
        line: 44
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 48,
            column: 4
          },
          end: {
            line: 48,
            column: 5
          }
        },
        loc: {
          start: {
            line: 48,
            column: 30
          },
          end: {
            line: 68,
            column: 5
          }
        },
        line: 48
      },
      "10": {
        name: "(anonymous_10)",
        decl: {
          start: {
            line: 52,
            column: 12
          },
          end: {
            line: 52,
            column: 13
          }
        },
        loc: {
          start: {
            line: 52,
            column: 42
          },
          end: {
            line: 54,
            column: 13
          }
        },
        line: 52
      },
      "11": {
        name: "(anonymous_11)",
        decl: {
          start: {
            line: 55,
            column: 12
          },
          end: {
            line: 55,
            column: 13
          }
        },
        loc: {
          start: {
            line: 55,
            column: 49
          },
          end: {
            line: 57,
            column: 13
          }
        },
        line: 55
      },
      "12": {
        name: "(anonymous_12)",
        decl: {
          start: {
            line: 58,
            column: 12
          },
          end: {
            line: 58,
            column: 13
          }
        },
        loc: {
          start: {
            line: 58,
            column: 48
          },
          end: {
            line: 60,
            column: 13
          }
        },
        line: 58
      },
      "13": {
        name: "(anonymous_13)",
        decl: {
          start: {
            line: 61,
            column: 12
          },
          end: {
            line: 61,
            column: 13
          }
        },
        loc: {
          start: {
            line: 61,
            column: 45
          },
          end: {
            line: 63,
            column: 13
          }
        },
        line: 61
      },
      "14": {
        name: "(anonymous_14)",
        decl: {
          start: {
            line: 64,
            column: 12
          },
          end: {
            line: 64,
            column: 13
          }
        },
        loc: {
          start: {
            line: 64,
            column: 50
          },
          end: {
            line: 66,
            column: 13
          }
        },
        line: 64
      },
      "15": {
        name: "(anonymous_15)",
        decl: {
          start: {
            line: 69,
            column: 4
          },
          end: {
            line: 69,
            column: 5
          }
        },
        loc: {
          start: {
            line: 69,
            column: 31
          },
          end: {
            line: 128,
            column: 5
          }
        },
        line: 69
      },
      "16": {
        name: "(anonymous_16)",
        decl: {
          start: {
            line: 78,
            column: 12
          },
          end: {
            line: 78,
            column: 13
          }
        },
        loc: {
          start: {
            line: 78,
            column: 28
          },
          end: {
            line: 91,
            column: 13
          }
        },
        line: 78
      },
      "17": {
        name: "(anonymous_17)",
        decl: {
          start: {
            line: 90,
            column: 41
          },
          end: {
            line: 90,
            column: 42
          }
        },
        loc: {
          start: {
            line: 90,
            column: 53
          },
          end: {
            line: 90,
            column: 63
          }
        },
        line: 90
      },
      "18": {
        name: "(anonymous_18)",
        decl: {
          start: {
            line: 92,
            column: 12
          },
          end: {
            line: 92,
            column: 13
          }
        },
        loc: {
          start: {
            line: 92,
            column: 31
          },
          end: {
            line: 99,
            column: 13
          }
        },
        line: 92
      },
      "19": {
        name: "(anonymous_19)",
        decl: {
          start: {
            line: 98,
            column: 44
          },
          end: {
            line: 98,
            column: 45
          }
        },
        loc: {
          start: {
            line: 98,
            column: 56
          },
          end: {
            line: 98,
            column: 66
          }
        },
        line: 98
      },
      "20": {
        name: "(anonymous_20)",
        decl: {
          start: {
            line: 100,
            column: 12
          },
          end: {
            line: 100,
            column: 13
          }
        },
        loc: {
          start: {
            line: 100,
            column: 32
          },
          end: {
            line: 114,
            column: 13
          }
        },
        line: 100
      },
      "21": {
        name: "(anonymous_21)",
        decl: {
          start: {
            line: 115,
            column: 12
          },
          end: {
            line: 115,
            column: 13
          }
        },
        loc: {
          start: {
            line: 115,
            column: 32
          },
          end: {
            line: 117,
            column: 13
          }
        },
        line: 115
      },
      "22": {
        name: "(anonymous_22)",
        decl: {
          start: {
            line: 118,
            column: 12
          },
          end: {
            line: 118,
            column: 13
          }
        },
        loc: {
          start: {
            line: 118,
            column: 30
          },
          end: {
            line: 120,
            column: 13
          }
        },
        line: 118
      },
      "23": {
        name: "(anonymous_23)",
        decl: {
          start: {
            line: 121,
            column: 12
          },
          end: {
            line: 121,
            column: 13
          }
        },
        loc: {
          start: {
            line: 121,
            column: 32
          },
          end: {
            line: 123,
            column: 13
          }
        },
        line: 121
      },
      "24": {
        name: "(anonymous_24)",
        decl: {
          start: {
            line: 124,
            column: 12
          },
          end: {
            line: 124,
            column: 13
          }
        },
        loc: {
          start: {
            line: 124,
            column: 35
          },
          end: {
            line: 126,
            column: 13
          }
        },
        line: 124
      },
      "25": {
        name: "(anonymous_25)",
        decl: {
          start: {
            line: 129,
            column: 4
          },
          end: {
            line: 129,
            column: 5
          }
        },
        loc: {
          start: {
            line: 129,
            column: 56
          },
          end: {
            line: 160,
            column: 5
          }
        },
        line: 129
      },
      "26": {
        name: "(anonymous_26)",
        decl: {
          start: {
            line: 161,
            column: 4
          },
          end: {
            line: 161,
            column: 5
          }
        },
        loc: {
          start: {
            line: 161,
            column: 14
          },
          end: {
            line: 163,
            column: 5
          }
        },
        line: 161
      },
      "27": {
        name: "(anonymous_27)",
        decl: {
          start: {
            line: 162,
            column: 27
          },
          end: {
            line: 162,
            column: 28
          }
        },
        loc: {
          start: {
            line: 162,
            column: 38
          },
          end: {
            line: 162,
            column: 61
          }
        },
        line: 162
      },
      "28": {
        name: "(anonymous_28)",
        decl: {
          start: {
            line: 164,
            column: 4
          },
          end: {
            line: 164,
            column: 5
          }
        },
        loc: {
          start: {
            line: 164,
            column: 20
          },
          end: {
            line: 166,
            column: 5
          }
        },
        line: 164
      },
      "29": {
        name: "(anonymous_29)",
        decl: {
          start: {
            line: 173,
            column: 4
          },
          end: {
            line: 173,
            column: 5
          }
        },
        loc: {
          start: {
            line: 173,
            column: 36
          },
          end: {
            line: 194,
            column: 5
          }
        },
        line: 173
      },
      "30": {
        name: "(anonymous_30)",
        decl: {
          start: {
            line: 176,
            column: 44
          },
          end: {
            line: 176,
            column: 45
          }
        },
        loc: {
          start: {
            line: 176,
            column: 58
          },
          end: {
            line: 178,
            column: 13
          }
        },
        line: 176
      },
      "31": {
        name: "(anonymous_31)",
        decl: {
          start: {
            line: 180,
            column: 30
          },
          end: {
            line: 180,
            column: 31
          }
        },
        loc: {
          start: {
            line: 180,
            column: 51
          },
          end: {
            line: 187,
            column: 13
          }
        },
        line: 180
      },
      "32": {
        name: "(anonymous_32)",
        decl: {
          start: {
            line: 181,
            column: 46
          },
          end: {
            line: 181,
            column: 47
          }
        },
        loc: {
          start: {
            line: 181,
            column: 55
          },
          end: {
            line: 186,
            column: 17
          }
        },
        line: 181
      },
      "33": {
        name: "(anonymous_33)",
        decl: {
          start: {
            line: 195,
            column: 4
          },
          end: {
            line: 195,
            column: 5
          }
        },
        loc: {
          start: {
            line: 195,
            column: 27
          },
          end: {
            line: 204,
            column: 5
          }
        },
        line: 195
      },
      "34": {
        name: "(anonymous_34)",
        decl: {
          start: {
            line: 197,
            column: 30
          },
          end: {
            line: 197,
            column: 31
          }
        },
        loc: {
          start: {
            line: 197,
            column: 43
          },
          end: {
            line: 199,
            column: 13
          }
        },
        line: 197
      },
      "35": {
        name: "(anonymous_35)",
        decl: {
          start: {
            line: 198,
            column: 34
          },
          end: {
            line: 198,
            column: 35
          }
        },
        loc: {
          start: {
            line: 198,
            column: 40
          },
          end: {
            line: 198,
            column: 49
          }
        },
        line: 198
      },
      "36": {
        name: "(anonymous_36)",
        decl: {
          start: {
            line: 205,
            column: 4
          },
          end: {
            line: 205,
            column: 5
          }
        },
        loc: {
          start: {
            line: 205,
            column: 40
          },
          end: {
            line: 208,
            column: 5
          }
        },
        line: 205
      },
      "37": {
        name: "(anonymous_37)",
        decl: {
          start: {
            line: 209,
            column: 4
          },
          end: {
            line: 209,
            column: 5
          }
        },
        loc: {
          start: {
            line: 209,
            column: 34
          },
          end: {
            line: 212,
            column: 5
          }
        },
        line: 209
      },
      "38": {
        name: "(anonymous_38)",
        decl: {
          start: {
            line: 213,
            column: 4
          },
          end: {
            line: 213,
            column: 5
          }
        },
        loc: {
          start: {
            line: 213,
            column: 22
          },
          end: {
            line: 215,
            column: 5
          }
        },
        line: 213
      },
      "39": {
        name: "(anonymous_39)",
        decl: {
          start: {
            line: 216,
            column: 4
          },
          end: {
            line: 216,
            column: 5
          }
        },
        loc: {
          start: {
            line: 216,
            column: 20
          },
          end: {
            line: 218,
            column: 5
          }
        },
        line: 216
      },
      "40": {
        name: "(anonymous_40)",
        decl: {
          start: {
            line: 219,
            column: 4
          },
          end: {
            line: 219,
            column: 5
          }
        },
        loc: {
          start: {
            line: 219,
            column: 34
          },
          end: {
            line: 222,
            column: 5
          }
        },
        line: 219
      },
      "41": {
        name: "(anonymous_41)",
        decl: {
          start: {
            line: 223,
            column: 4
          },
          end: {
            line: 223,
            column: 5
          }
        },
        loc: {
          start: {
            line: 223,
            column: 36
          },
          end: {
            line: 226,
            column: 5
          }
        },
        line: 223
      },
      "42": {
        name: "(anonymous_42)",
        decl: {
          start: {
            line: 227,
            column: 4
          },
          end: {
            line: 227,
            column: 5
          }
        },
        loc: {
          start: {
            line: 227,
            column: 29
          },
          end: {
            line: 229,
            column: 5
          }
        },
        line: 227
      },
      "43": {
        name: "(anonymous_43)",
        decl: {
          start: {
            line: 230,
            column: 4
          },
          end: {
            line: 230,
            column: 5
          }
        },
        loc: {
          start: {
            line: 230,
            column: 30
          },
          end: {
            line: 249,
            column: 5
          }
        },
        line: 230
      },
      "44": {
        name: "(anonymous_44)",
        decl: {
          start: {
            line: 233,
            column: 12
          },
          end: {
            line: 233,
            column: 13
          }
        },
        loc: {
          start: {
            line: 233,
            column: 42
          },
          end: {
            line: 235,
            column: 13
          }
        },
        line: 233
      },
      "45": {
        name: "(anonymous_45)",
        decl: {
          start: {
            line: 236,
            column: 12
          },
          end: {
            line: 236,
            column: 13
          }
        },
        loc: {
          start: {
            line: 236,
            column: 49
          },
          end: {
            line: 238,
            column: 13
          }
        },
        line: 236
      },
      "46": {
        name: "(anonymous_46)",
        decl: {
          start: {
            line: 239,
            column: 12
          },
          end: {
            line: 239,
            column: 13
          }
        },
        loc: {
          start: {
            line: 239,
            column: 48
          },
          end: {
            line: 241,
            column: 13
          }
        },
        line: 239
      },
      "47": {
        name: "(anonymous_47)",
        decl: {
          start: {
            line: 242,
            column: 12
          },
          end: {
            line: 242,
            column: 13
          }
        },
        loc: {
          start: {
            line: 242,
            column: 45
          },
          end: {
            line: 244,
            column: 13
          }
        },
        line: 242
      },
      "48": {
        name: "(anonymous_48)",
        decl: {
          start: {
            line: 245,
            column: 12
          },
          end: {
            line: 245,
            column: 13
          }
        },
        loc: {
          start: {
            line: 245,
            column: 50
          },
          end: {
            line: 247,
            column: 13
          }
        },
        line: 245
      },
      "49": {
        name: "(anonymous_49)",
        decl: {
          start: {
            line: 250,
            column: 4
          },
          end: {
            line: 250,
            column: 5
          }
        },
        loc: {
          start: {
            line: 250,
            column: 31
          },
          end: {
            line: 253,
            column: 5
          }
        },
        line: 250
      },
      "50": {
        name: "(anonymous_50)",
        decl: {
          start: {
            line: 254,
            column: 4
          },
          end: {
            line: 254,
            column: 5
          }
        },
        loc: {
          start: {
            line: 254,
            column: 34
          },
          end: {
            line: 283,
            column: 5
          }
        },
        line: 254
      },
      "51": {
        name: "(anonymous_51)",
        decl: {
          start: {
            line: 257,
            column: 23
          },
          end: {
            line: 257,
            column: 24
          }
        },
        loc: {
          start: {
            line: 257,
            column: 34
          },
          end: {
            line: 259,
            column: 9
          }
        },
        line: 257
      },
      "52": {
        name: "(anonymous_52)",
        decl: {
          start: {
            line: 260,
            column: 22
          },
          end: {
            line: 260,
            column: 23
          }
        },
        loc: {
          start: {
            line: 260,
            column: 28
          },
          end: {
            line: 282,
            column: 9
          }
        },
        line: 260
      },
      "53": {
        name: "(anonymous_53)",
        decl: {
          start: {
            line: 284,
            column: 4
          },
          end: {
            line: 284,
            column: 5
          }
        },
        loc: {
          start: {
            line: 284,
            column: 59
          },
          end: {
            line: 313,
            column: 5
          }
        },
        line: 284
      },
      "54": {
        name: "(anonymous_54)",
        decl: {
          start: {
            line: 314,
            column: 4
          },
          end: {
            line: 314,
            column: 5
          }
        },
        loc: {
          start: {
            line: 314,
            column: 23
          },
          end: {
            line: 321,
            column: 5
          }
        },
        line: 314
      },
      "55": {
        name: "(anonymous_55)",
        decl: {
          start: {
            line: 322,
            column: 4
          },
          end: {
            line: 322,
            column: 5
          }
        },
        loc: {
          start: {
            line: 322,
            column: 20
          },
          end: {
            line: 324,
            column: 5
          }
        },
        line: 322
      },
      "56": {
        name: "createMockNetworkHelper",
        decl: {
          start: {
            line: 327,
            column: 16
          },
          end: {
            line: 327,
            column: 39
          }
        },
        loc: {
          start: {
            line: 327,
            column: 42
          },
          end: {
            line: 329,
            column: 1
          }
        },
        line: 327
      },
      "57": {
        name: "createRealNetworkHelper",
        decl: {
          start: {
            line: 330,
            column: 16
          },
          end: {
            line: 330,
            column: 39
          }
        },
        loc: {
          start: {
            line: 330,
            column: 42
          },
          end: {
            line: 332,
            column: 1
          }
        },
        line: 330
      },
      "58": {
        name: "testHttpEndpoint",
        decl: {
          start: {
            line: 334,
            column: 22
          },
          end: {
            line: 334,
            column: 38
          }
        },
        loc: {
          start: {
            line: 334,
            column: 92
          },
          end: {
            line: 363,
            column: 1
          }
        },
        line: 334
      },
      "59": {
        name: "setupRestApiMock",
        decl: {
          start: {
            line: 364,
            column: 22
          },
          end: {
            line: 364,
            column: 38
          }
        },
        loc: {
          start: {
            line: 364,
            column: 58
          },
          end: {
            line: 369,
            column: 1
          }
        },
        line: 364
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 14,
            column: 26
          },
          end: {
            line: 14,
            column: 34
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 14,
            column: 33
          },
          end: {
            line: 14,
            column: 34
          }
        }],
        line: 14
      },
      "1": {
        loc: {
          start: {
            line: 15,
            column: 20
          },
          end: {
            line: 15,
            column: 48
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 15,
            column: 20
          },
          end: {
            line: 15,
            column: 24
          }
        }, {
          start: {
            line: 15,
            column: 28
          },
          end: {
            line: 15,
            column: 48
          }
        }],
        line: 15
      },
      "2": {
        loc: {
          start: {
            line: 50,
            column: 20
          },
          end: {
            line: 50,
            column: 62
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 50,
            column: 20
          },
          end: {
            line: 50,
            column: 27
          }
        }, {
          start: {
            line: 50,
            column: 31
          },
          end: {
            line: 50,
            column: 62
          }
        }],
        line: 50
      },
      "3": {
        loc: {
          start: {
            line: 52,
            column: 28
          },
          end: {
            line: 52,
            column: 40
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 52,
            column: 38
          },
          end: {
            line: 52,
            column: 40
          }
        }],
        line: 52
      },
      "4": {
        loc: {
          start: {
            line: 55,
            column: 35
          },
          end: {
            line: 55,
            column: 47
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 55,
            column: 45
          },
          end: {
            line: 55,
            column: 47
          }
        }],
        line: 55
      },
      "5": {
        loc: {
          start: {
            line: 58,
            column: 34
          },
          end: {
            line: 58,
            column: 46
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 58,
            column: 44
          },
          end: {
            line: 58,
            column: 46
          }
        }],
        line: 58
      },
      "6": {
        loc: {
          start: {
            line: 61,
            column: 31
          },
          end: {
            line: 61,
            column: 43
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 61,
            column: 41
          },
          end: {
            line: 61,
            column: 43
          }
        }],
        line: 61
      },
      "7": {
        loc: {
          start: {
            line: 64,
            column: 36
          },
          end: {
            line: 64,
            column: 48
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 64,
            column: 46
          },
          end: {
            line: 64,
            column: 48
          }
        }],
        line: 64
      },
      "8": {
        loc: {
          start: {
            line: 79,
            column: 16
          },
          end: {
            line: 81,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 79,
            column: 16
          },
          end: {
            line: 81,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 79
      },
      "9": {
        loc: {
          start: {
            line: 82,
            column: 16
          },
          end: {
            line: 84,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 82,
            column: 16
          },
          end: {
            line: 84,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 82
      },
      "10": {
        loc: {
          start: {
            line: 87,
            column: 16
          },
          end: {
            line: 89,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 87,
            column: 16
          },
          end: {
            line: 89,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 87
      },
      "11": {
        loc: {
          start: {
            line: 95,
            column: 16
          },
          end: {
            line: 97,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 95,
            column: 16
          },
          end: {
            line: 97,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 95
      },
      "12": {
        loc: {
          start: {
            line: 101,
            column: 16
          },
          end: {
            line: 103,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 101,
            column: 16
          },
          end: {
            line: 103,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 101
      },
      "13": {
        loc: {
          start: {
            line: 104,
            column: 16
          },
          end: {
            line: 106,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 104,
            column: 16
          },
          end: {
            line: 106,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 104
      },
      "14": {
        loc: {
          start: {
            line: 107,
            column: 16
          },
          end: {
            line: 109,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 107,
            column: 16
          },
          end: {
            line: 109,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 107
      },
      "15": {
        loc: {
          start: {
            line: 111,
            column: 16
          },
          end: {
            line: 113,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 111,
            column: 16
          },
          end: {
            line: 113,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 111
      },
      "16": {
        loc: {
          start: {
            line: 129,
            column: 42
          },
          end: {
            line: 129,
            column: 54
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 129,
            column: 52
          },
          end: {
            line: 129,
            column: 54
          }
        }],
        line: 129
      },
      "17": {
        loc: {
          start: {
            line: 130,
            column: 8
          },
          end: {
            line: 132,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 130,
            column: 8
          },
          end: {
            line: 132,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 130
      },
      "18": {
        loc: {
          start: {
            line: 133,
            column: 8
          },
          end: {
            line: 135,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 133,
            column: 8
          },
          end: {
            line: 135,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 133
      },
      "19": {
        loc: {
          start: {
            line: 136,
            column: 8
          },
          end: {
            line: 138,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 136,
            column: 8
          },
          end: {
            line: 138,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 136
      },
      "20": {
        loc: {
          start: {
            line: 151,
            column: 8
          },
          end: {
            line: 153,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 151,
            column: 8
          },
          end: {
            line: 153,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 151
      },
      "21": {
        loc: {
          start: {
            line: 173,
            column: 26
          },
          end: {
            line: 173,
            column: 34
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 173,
            column: 33
          },
          end: {
            line: 173,
            column: 34
          }
        }],
        line: 173
      },
      "22": {
        loc: {
          start: {
            line: 179,
            column: 24
          },
          end: {
            line: 179,
            column: 52
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 179,
            column: 24
          },
          end: {
            line: 179,
            column: 28
          }
        }, {
          start: {
            line: 179,
            column: 32
          },
          end: {
            line: 179,
            column: 52
          }
        }],
        line: 179
      },
      "23": {
        loc: {
          start: {
            line: 182,
            column: 20
          },
          end: {
            line: 185,
            column: 34
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 182,
            column: 20
          },
          end: {
            line: 185,
            column: 34
          }
        }, {
          start: {
            line: 185,
            column: 24
          },
          end: {
            line: 185,
            column: 34
          }
        }],
        line: 182
      },
      "24": {
        loc: {
          start: {
            line: 196,
            column: 8
          },
          end: {
            line: 201,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 196,
            column: 8
          },
          end: {
            line: 201,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 196
      },
      "25": {
        loc: {
          start: {
            line: 231,
            column: 20
          },
          end: {
            line: 231,
            column: 62
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 231,
            column: 20
          },
          end: {
            line: 231,
            column: 27
          }
        }, {
          start: {
            line: 231,
            column: 31
          },
          end: {
            line: 231,
            column: 62
          }
        }],
        line: 231
      },
      "26": {
        loc: {
          start: {
            line: 233,
            column: 28
          },
          end: {
            line: 233,
            column: 40
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 233,
            column: 38
          },
          end: {
            line: 233,
            column: 40
          }
        }],
        line: 233
      },
      "27": {
        loc: {
          start: {
            line: 236,
            column: 35
          },
          end: {
            line: 236,
            column: 47
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 236,
            column: 45
          },
          end: {
            line: 236,
            column: 47
          }
        }],
        line: 236
      },
      "28": {
        loc: {
          start: {
            line: 239,
            column: 34
          },
          end: {
            line: 239,
            column: 46
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 239,
            column: 44
          },
          end: {
            line: 239,
            column: 46
          }
        }],
        line: 239
      },
      "29": {
        loc: {
          start: {
            line: 242,
            column: 31
          },
          end: {
            line: 242,
            column: 43
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 242,
            column: 41
          },
          end: {
            line: 242,
            column: 43
          }
        }],
        line: 242
      },
      "30": {
        loc: {
          start: {
            line: 245,
            column: 36
          },
          end: {
            line: 245,
            column: 48
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 245,
            column: 46
          },
          end: {
            line: 245,
            column: 48
          }
        }],
        line: 245
      },
      "31": {
        loc: {
          start: {
            line: 261,
            column: 25
          },
          end: {
            line: 261,
            column: 89
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 261,
            column: 45
          },
          end: {
            line: 261,
            column: 77
          }
        }, {
          start: {
            line: 261,
            column: 80
          },
          end: {
            line: 261,
            column: 89
          }
        }],
        line: 261
      },
      "32": {
        loc: {
          start: {
            line: 267,
            column: 22
          },
          end: {
            line: 267,
            column: 64
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 267,
            column: 29
          },
          end: {
            line: 267,
            column: 52
          }
        }, {
          start: {
            line: 267,
            column: 55
          },
          end: {
            line: 267,
            column: 64
          }
        }],
        line: 267
      },
      "33": {
        loc: {
          start: {
            line: 274,
            column: 12
          },
          end: {
            line: 281,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 274,
            column: 12
          },
          end: {
            line: 281,
            column: 13
          }
        }, {
          start: {
            line: 278,
            column: 17
          },
          end: {
            line: 281,
            column: 13
          }
        }],
        line: 274
      },
      "34": {
        loc: {
          start: {
            line: 276,
            column: 24
          },
          end: {
            line: 276,
            column: 105
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 276,
            column: 60
          },
          end: {
            line: 276,
            column: 73
          }
        }, {
          start: {
            line: 276,
            column: 76
          },
          end: {
            line: 276,
            column: 105
          }
        }],
        line: 276
      },
      "35": {
        loc: {
          start: {
            line: 284,
            column: 45
          },
          end: {
            line: 284,
            column: 57
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 284,
            column: 55
          },
          end: {
            line: 284,
            column: 57
          }
        }],
        line: 284
      },
      "36": {
        loc: {
          start: {
            line: 287,
            column: 12
          },
          end: {
            line: 308,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 287,
            column: 12
          },
          end: {
            line: 308,
            column: 13
          }
        }, {
          start: {
            line: 306,
            column: 17
          },
          end: {
            line: 308,
            column: 13
          }
        }],
        line: 287
      },
      "37": {
        loc: {
          start: {
            line: 292,
            column: 16
          },
          end: {
            line: 297,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 292,
            column: 16
          },
          end: {
            line: 297,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 292
      },
      "38": {
        loc: {
          start: {
            line: 293,
            column: 35
          },
          end: {
            line: 293,
            column: 89
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 293,
            column: 62
          },
          end: {
            line: 293,
            column: 66
          }
        }, {
          start: {
            line: 293,
            column: 69
          },
          end: {
            line: 293,
            column: 89
          }
        }],
        line: 293
      },
      "39": {
        loc: {
          start: {
            line: 294,
            column: 20
          },
          end: {
            line: 296,
            column: 21
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 294,
            column: 20
          },
          end: {
            line: 296,
            column: 21
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 294
      },
      "40": {
        loc: {
          start: {
            line: 337,
            column: 4
          },
          end: {
            line: 355,
            column: 5
          }
        },
        type: "switch",
        locations: [{
          start: {
            line: 338,
            column: 8
          },
          end: {
            line: 340,
            column: 18
          }
        }, {
          start: {
            line: 341,
            column: 8
          },
          end: {
            line: 343,
            column: 18
          }
        }, {
          start: {
            line: 344,
            column: 8
          },
          end: {
            line: 346,
            column: 18
          }
        }, {
          start: {
            line: 347,
            column: 8
          },
          end: {
            line: 349,
            column: 18
          }
        }, {
          start: {
            line: 350,
            column: 8
          },
          end: {
            line: 352,
            column: 18
          }
        }, {
          start: {
            line: 353,
            column: 8
          },
          end: {
            line: 354,
            column: 66
          }
        }],
        line: 337
      },
      "41": {
        loc: {
          start: {
            line: 357,
            column: 4
          },
          end: {
            line: 361,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 357,
            column: 4
          },
          end: {
            line: 361,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 357
      },
      "42": {
        loc: {
          start: {
            line: 358,
            column: 8
          },
          end: {
            line: 360,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 358,
            column: 8
          },
          end: {
            line: 360,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 358
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0,
      "74": 0,
      "75": 0,
      "76": 0,
      "77": 0,
      "78": 0,
      "79": 0,
      "80": 0,
      "81": 0,
      "82": 0,
      "83": 0,
      "84": 0,
      "85": 0,
      "86": 0,
      "87": 0,
      "88": 0,
      "89": 0,
      "90": 0,
      "91": 0,
      "92": 0,
      "93": 0,
      "94": 0,
      "95": 0,
      "96": 0,
      "97": 0,
      "98": 0,
      "99": 0,
      "100": 0,
      "101": 0,
      "102": 0,
      "103": 0,
      "104": 0,
      "105": 0,
      "106": 0,
      "107": 0,
      "108": 0,
      "109": 0,
      "110": 0,
      "111": 0,
      "112": 0,
      "113": 0,
      "114": 0,
      "115": 0,
      "116": 0,
      "117": 0,
      "118": 0,
      "119": 0,
      "120": 0,
      "121": 0,
      "122": 0,
      "123": 0,
      "124": 0,
      "125": 0,
      "126": 0,
      "127": 0,
      "128": 0,
      "129": 0,
      "130": 0,
      "131": 0,
      "132": 0,
      "133": 0,
      "134": 0,
      "135": 0,
      "136": 0,
      "137": 0,
      "138": 0,
      "139": 0,
      "140": 0,
      "141": 0,
      "142": 0,
      "143": 0,
      "144": 0,
      "145": 0,
      "146": 0,
      "147": 0,
      "148": 0,
      "149": 0,
      "150": 0,
      "151": 0,
      "152": 0,
      "153": 0,
      "154": 0,
      "155": 0,
      "156": 0,
      "157": 0,
      "158": 0,
      "159": 0,
      "160": 0,
      "161": 0,
      "162": 0,
      "163": 0,
      "164": 0,
      "165": 0,
      "166": 0,
      "167": 0,
      "168": 0,
      "169": 0,
      "170": 0,
      "171": 0,
      "172": 0,
      "173": 0,
      "174": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0
    },
    b: {
      "0": [0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0],
      "4": [0],
      "5": [0],
      "6": [0],
      "7": [0],
      "8": [0, 0],
      "9": [0, 0],
      "10": [0, 0],
      "11": [0, 0],
      "12": [0, 0],
      "13": [0, 0],
      "14": [0, 0],
      "15": [0, 0],
      "16": [0],
      "17": [0, 0],
      "18": [0, 0],
      "19": [0, 0],
      "20": [0, 0],
      "21": [0],
      "22": [0, 0],
      "23": [0, 0],
      "24": [0, 0],
      "25": [0, 0],
      "26": [0],
      "27": [0],
      "28": [0],
      "29": [0],
      "30": [0],
      "31": [0, 0],
      "32": [0, 0],
      "33": [0, 0],
      "34": [0, 0],
      "35": [0],
      "36": [0, 0],
      "37": [0, 0],
      "38": [0, 0],
      "39": [0, 0],
      "40": [0, 0, 0, 0, 0, 0],
      "41": [0, 0],
      "42": [0, 0]
    },
    inputSourceMap: {
      file: "/home/mhugo/code/claude-code-flow/src/__tests__/helpers/network-test-helper.ts",
      mappings: "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",
      names: [],
      sources: ["/home/mhugo/code/claude-code-flow/src/__tests__/helpers/network-test-helper.ts"],
      sourcesContent: ["/**\n * Network Test Helper - Network Testing Utilities\n * \n * Comprehensive network testing support for HTTP, WebSocket, and other protocols\n */\n\nexport interface HttpRequest {\n  method: string;\n  url: string;\n  headers: Record<string, string>;\n  body?: any;\n  timestamp: number;\n}\n\nexport interface HttpResponse {\n  status: number;\n  headers: Record<string, string>;\n  body: any;\n}\n\nexport interface NetworkTestHelper {\n  startMockServer(port?: number): Promise<number>;\n  stopMockServer(): Promise<void>;\n  mockRequest(method: string, path: string, response: HttpResponse): void;\n  mockWebSocket(path: string, handlers: WebSocketHandlers): void;\n  captureRequests(): HttpRequest[];\n  clearRequests(): void;\n  simulateNetworkDelay(delayMs: number): void;\n  simulateNetworkError(errorType: 'timeout' | 'connection' | 'dns'): void;\n  resetNetworkConditions(): void;\n  createHttpClient(baseUrl?: string): HttpClient;\n  createWebSocketClient(url: string): WebSocketClient;\n}\n\nexport interface WebSocketHandlers {\n  onConnect?: () => void;\n  onMessage?: (message: any) => void;\n  onDisconnect?: () => void;\n  onError?: (error: Error) => void;\n}\n\nexport interface HttpClient {\n  get(path: string, headers?: Record<string, string>): Promise<HttpResponse>;\n  post(path: string, body?: any, headers?: Record<string, string>): Promise<HttpResponse>;\n  put(path: string, body?: any, headers?: Record<string, string>): Promise<HttpResponse>;\n  delete(path: string, headers?: Record<string, string>): Promise<HttpResponse>;\n  patch(path: string, body?: any, headers?: Record<string, string>): Promise<HttpResponse>;\n}\n\nexport interface WebSocketClient {\n  connect(): Promise<void>;\n  disconnect(): Promise<void>;\n  send(message: any): Promise<void>;\n  onMessage(callback: (message: any) => void): void;\n  onError(callback: (error: Error) => void): void;\n  onConnect(callback: () => void): void;\n  onDisconnect(callback: () => void): void;\n}\n\nexport class MockNetworkTestHelper implements NetworkTestHelper {\n  private routes = new Map<string, HttpResponse>();\n  private webSocketHandlers = new Map<string, WebSocketHandlers>();\n  private requests: HttpRequest[] = [];\n  private networkDelay = 0;\n  private networkError: string | null = null;\n  private isRunning = false;\n  private port = 0;\n\n  async startMockServer(port: number = 0): Promise<number> {\n    this.port = port || this.getRandomPort();\n    this.isRunning = true;\n    return this.port;\n  }\n\n  async stopMockServer(): Promise<void> {\n    this.isRunning = false;\n    this.routes.clear();\n    this.webSocketHandlers.clear();\n    this.requests = [];\n  }\n\n  mockRequest(method: string, path: string, response: HttpResponse): void {\n    const key = `${method.toUpperCase()} ${path}`;\n    this.routes.set(key, response);\n  }\n\n  mockWebSocket(path: string, handlers: WebSocketHandlers): void {\n    this.webSocketHandlers.set(path, handlers);\n  }\n\n  captureRequests(): HttpRequest[] {\n    return [...this.requests];\n  }\n\n  clearRequests(): void {\n    this.requests = [];\n  }\n\n  simulateNetworkDelay(delayMs: number): void {\n    this.networkDelay = delayMs;\n  }\n\n  simulateNetworkError(errorType: 'timeout' | 'connection' | 'dns'): void {\n    this.networkError = errorType;\n  }\n\n  resetNetworkConditions(): void {\n    this.networkDelay = 0;\n    this.networkError = null;\n  }\n\n  createHttpClient(baseUrl?: string): HttpClient {\n    const self = this;\n    const url = baseUrl || `http://localhost:${this.port}`;\n\n    return {\n      async get(path: string, headers: Record<string, string> = {}): Promise<HttpResponse> {\n        return self.makeRequest('GET', path, undefined, headers);\n      },\n\n      async post(path: string, body?: any, headers: Record<string, string> = {}): Promise<HttpResponse> {\n        return self.makeRequest('POST', path, body, headers);\n      },\n\n      async put(path: string, body?: any, headers: Record<string, string> = {}): Promise<HttpResponse> {\n        return self.makeRequest('PUT', path, body, headers);\n      },\n\n      async delete(path: string, headers: Record<string, string> = {}): Promise<HttpResponse> {\n        return self.makeRequest('DELETE', path, undefined, headers);\n      },\n\n      async patch(path: string, body?: any, headers: Record<string, string> = {}): Promise<HttpResponse> {\n        return self.makeRequest('PATCH', path, body, headers);\n      }\n    };\n  }\n\n  createWebSocketClient(url: string): WebSocketClient {\n    const self = this;\n    const path = new URL(url).pathname;\n    let isConnected = false;\n    const messageCallbacks: Array<(message: any) => void> = [];\n    const errorCallbacks: Array<(error: Error) => void> = [];\n    const connectCallbacks: Array<() => void> = [];\n    const disconnectCallbacks: Array<() => void> = [];\n\n    return {\n      async connect(): Promise<void> {\n        if (self.networkError) {\n          throw new Error(`Network error: ${self.networkError}`);\n        }\n\n        if (self.networkDelay > 0) {\n          await self.delay(self.networkDelay);\n        }\n\n        isConnected = true;\n        const handlers = self.webSocketHandlers.get(path);\n        \n        if (handlers?.onConnect) {\n          handlers.onConnect();\n        }\n\n        connectCallbacks.forEach(callback => callback());\n      },\n\n      async disconnect(): Promise<void> {\n        isConnected = false;\n        const handlers = self.webSocketHandlers.get(path);\n        \n        if (handlers?.onDisconnect) {\n          handlers.onDisconnect();\n        }\n\n        disconnectCallbacks.forEach(callback => callback());\n      },\n\n      async send(message: any): Promise<void> {\n        if (!isConnected) {\n          throw new Error('WebSocket not connected');\n        }\n\n        if (self.networkError) {\n          throw new Error(`Network error: ${self.networkError}`);\n        }\n\n        if (self.networkDelay > 0) {\n          await self.delay(self.networkDelay);\n        }\n\n        const handlers = self.webSocketHandlers.get(path);\n        if (handlers?.onMessage) {\n          handlers.onMessage(message);\n        }\n      },\n\n      onMessage(callback: (message: any) => void): void {\n        messageCallbacks.push(callback);\n      },\n\n      onError(callback: (error: Error) => void): void {\n        errorCallbacks.push(callback);\n      },\n\n      onConnect(callback: () => void): void {\n        connectCallbacks.push(callback);\n      },\n\n      onDisconnect(callback: () => void): void {\n        disconnectCallbacks.push(callback);\n      }\n    };\n  }\n\n  private async makeRequest(\n    method: string,\n    path: string,\n    body?: any,\n    headers: Record<string, string> = {}\n  ): Promise<HttpResponse> {\n    if (!this.isRunning) {\n      throw new Error('Mock server not running');\n    }\n\n    if (this.networkError) {\n      throw new Error(`Network error: ${this.networkError}`);\n    }\n\n    if (this.networkDelay > 0) {\n      await this.delay(this.networkDelay);\n    }\n\n    // Record the request\n    const request: HttpRequest = {\n      method: method.toUpperCase(),\n      url: path,\n      headers,\n      body,\n      timestamp: Date.now()\n    };\n    this.requests.push(request);\n\n    // Find matching route\n    const key = `${method.toUpperCase()} ${path}`;\n    const response = this.routes.get(key);\n\n    if (response) {\n      return response;\n    }\n\n    // Default 404 response\n    return {\n      status: 404,\n      headers: { 'Content-Type': 'application/json' },\n      body: { error: 'Not Found', path }\n    };\n  }\n\n  private delay(ms: number): Promise<void> {\n    return new Promise(resolve => setTimeout(resolve, ms));\n  }\n\n  private getRandomPort(): number {\n    return Math.floor(Math.random() * (65535 - 3000) + 3000);\n  }\n}\n\nexport class RealNetworkTestHelper implements NetworkTestHelper {\n  private server: any = null;\n  private port = 0;\n  private routes = new Map<string, HttpResponse>();\n  private requests: HttpRequest[] = [];\n\n  async startMockServer(port: number = 0): Promise<number> {\n    try {\n      const http = await import('http');\n      \n      this.server = http.createServer((req, res) => {\n        this.handleRequest(req, res);\n      });\n\n      this.port = port || this.getRandomPort();\n\n      await new Promise<void>((resolve, reject) => {\n        this.server.listen(this.port, (err: any) => {\n          if (err) reject(err);\n          else resolve();\n        });\n      });\n\n      return this.port;\n    } catch (error) {\n      console.warn('Real HTTP server not available, using mock');\n      throw error;\n    }\n  }\n\n  async stopMockServer(): Promise<void> {\n    if (this.server) {\n      await new Promise<void>((resolve) => {\n        this.server.close(() => resolve());\n      });\n      this.server = null;\n    }\n    \n    this.routes.clear();\n    this.requests = [];\n  }\n\n  mockRequest(method: string, path: string, response: HttpResponse): void {\n    const key = `${method.toUpperCase()} ${path}`;\n    this.routes.set(key, response);\n  }\n\n  mockWebSocket(path: string, handlers: WebSocketHandlers): void {\n    // WebSocket support would require additional setup\n    console.warn('WebSocket mocking not fully implemented for real server');\n  }\n\n  captureRequests(): HttpRequest[] {\n    return [...this.requests];\n  }\n\n  clearRequests(): void {\n    this.requests = [];\n  }\n\n  simulateNetworkDelay(delayMs: number): void {\n    // Not applicable for real server\n    console.warn('Network delay simulation not supported for real server');\n  }\n\n  simulateNetworkError(errorType: 'timeout' | 'connection' | 'dns'): void {\n    // Not applicable for real server\n    console.warn('Network error simulation not supported for real server');\n  }\n\n  resetNetworkConditions(): void {\n    // Not applicable for real server\n  }\n\n  createHttpClient(baseUrl?: string): HttpClient {\n    const url = baseUrl || `http://localhost:${this.port}`;\n\n    return {\n      async get(path: string, headers: Record<string, string> = {}): Promise<HttpResponse> {\n        return this.makeRealRequest('GET', `${url}${path}`, undefined, headers);\n      },\n\n      async post(path: string, body?: any, headers: Record<string, string> = {}): Promise<HttpResponse> {\n        return this.makeRealRequest('POST', `${url}${path}`, body, headers);\n      },\n\n      async put(path: string, body?: any, headers: Record<string, string> = {}): Promise<HttpResponse> {\n        return this.makeRealRequest('PUT', `${url}${path}`, body, headers);\n      },\n\n      async delete(path: string, headers: Record<string, string> = {}): Promise<HttpResponse> {\n        return this.makeRealRequest('DELETE', `${url}${path}`, undefined, headers);\n      },\n\n      async patch(path: string, body?: any, headers: Record<string, string> = {}): Promise<HttpResponse> {\n        return this.makeRealRequest('PATCH', `${url}${path}`, body, headers);\n      }\n    };\n  }\n\n  createWebSocketClient(url: string): WebSocketClient {\n    // Real WebSocket implementation would go here\n    throw new Error('Real WebSocket client not implemented');\n  }\n\n  private async handleRequest(req: any, res: any): Promise<void> {\n    // Collect request body\n    const chunks: Buffer[] = [];\n    \n    req.on('data', (chunk: Buffer) => {\n      chunks.push(chunk);\n    });\n\n    req.on('end', () => {\n      const body = chunks.length > 0 ? Buffer.concat(chunks).toString() : undefined;\n      \n      // Record the request\n      const request: HttpRequest = {\n        method: req.method,\n        url: req.url,\n        headers: req.headers,\n        body: body ? this.tryParseJson(body) : undefined,\n        timestamp: Date.now()\n      };\n      this.requests.push(request);\n\n      // Find matching route\n      const key = `${req.method} ${req.url}`;\n      const response = this.routes.get(key);\n\n      if (response) {\n        res.writeHead(response.status, response.headers);\n        res.end(typeof response.body === 'string' ? response.body : JSON.stringify(response.body));\n      } else {\n        res.writeHead(404, { 'Content-Type': 'application/json' });\n        res.end(JSON.stringify({ error: 'Not Found', path: req.url }));\n      }\n    });\n  }\n\n  private async makeRealRequest(\n    method: string,\n    url: string,\n    body?: any,\n    headers: Record<string, string> = {}\n  ): Promise<HttpResponse> {\n    try {\n      // Use fetch if available, otherwise use http module\n      if (typeof fetch !== 'undefined') {\n        const options: RequestInit = {\n          method,\n          headers,\n        };\n\n        if (body) {\n          options.body = typeof body === 'string' ? body : JSON.stringify(body);\n          if (!headers['Content-Type']) {\n            headers['Content-Type'] = 'application/json';\n          }\n        }\n\n        const response = await fetch(url, options);\n        const responseBody = await response.text();\n\n        return {\n          status: response.status,\n          headers: Object.fromEntries(response.headers.entries()),\n          body: this.tryParseJson(responseBody)\n        };\n      } else {\n        throw new Error('fetch not available');\n      }\n    } catch (error) {\n      throw new Error(`HTTP request failed: ${error}`);\n    }\n  }\n\n  private tryParseJson(text: string): any {\n    try {\n      return JSON.parse(text);\n    } catch {\n      return text;\n    }\n  }\n\n  private getRandomPort(): number {\n    return Math.floor(Math.random() * (65535 - 3000) + 3000);\n  }\n}\n\n// Factory functions\nexport function createMockNetworkHelper(): NetworkTestHelper {\n  return new MockNetworkTestHelper();\n}\n\nexport function createRealNetworkHelper(): NetworkTestHelper {\n  return new RealNetworkTestHelper();\n}\n\n// Helper functions for common testing patterns\nexport async function testHttpEndpoint(\n  helper: NetworkTestHelper,\n  method: string,\n  path: string,\n  expectedResponse: Partial<HttpResponse>,\n  requestBody?: any\n): Promise<HttpResponse> {\n  const client = helper.createHttpClient();\n  \n  let response: HttpResponse;\n  \n  switch (method.toUpperCase()) {\n    case 'GET':\n      response = await client.get(path);\n      break;\n    case 'POST':\n      response = await client.post(path, requestBody);\n      break;\n    case 'PUT':\n      response = await client.put(path, requestBody);\n      break;\n    case 'DELETE':\n      response = await client.delete(path);\n      break;\n    case 'PATCH':\n      response = await client.patch(path, requestBody);\n      break;\n    default:\n      throw new Error(`Unsupported HTTP method: ${method}`);\n  }\n\n  // Verify expected response\n  if (expectedResponse.status !== undefined) {\n    if (response.status !== expectedResponse.status) {\n      throw new Error(`Expected status ${expectedResponse.status}, got ${response.status}`);\n    }\n  }\n\n  return response;\n}\n\nexport async function setupRestApiMock(\n  helper: NetworkTestHelper,\n  endpoints: Array<{\n    method: string;\n    path: string;\n    response: HttpResponse;\n  }>\n): Promise<void> {\n  await helper.startMockServer();\n  \n  for (const endpoint of endpoints) {\n    helper.mockRequest(endpoint.method, endpoint.path, endpoint.response);\n  }\n}"],
      version: 3
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "d8a9271ec2d6cdbb48e57ec92366b6d51cb666ff"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_790gqlvqy = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_790gqlvqy();
/**
 * Network Test Helper - Network Testing Utilities
 *
 * Comprehensive network testing support for HTTP, WebSocket, and other protocols
 */
export class MockNetworkTestHelper {
  routes =
  /* istanbul ignore next */
  (cov_790gqlvqy().s[0]++, new Map());
  webSocketHandlers =
  /* istanbul ignore next */
  (cov_790gqlvqy().s[1]++, new Map());
  requests =
  /* istanbul ignore next */
  (cov_790gqlvqy().s[2]++, []);
  networkDelay =
  /* istanbul ignore next */
  (cov_790gqlvqy().s[3]++, 0);
  networkError =
  /* istanbul ignore next */
  (cov_790gqlvqy().s[4]++, null);
  isRunning =
  /* istanbul ignore next */
  (cov_790gqlvqy().s[5]++, false);
  port =
  /* istanbul ignore next */
  (cov_790gqlvqy().s[6]++, 0);
  async startMockServer(port =
  /* istanbul ignore next */
  (cov_790gqlvqy().b[0][0]++, 0)) {
    /* istanbul ignore next */
    cov_790gqlvqy().f[0]++;
    cov_790gqlvqy().s[7]++;
    this.port =
    /* istanbul ignore next */
    (cov_790gqlvqy().b[1][0]++, port) ||
    /* istanbul ignore next */
    (cov_790gqlvqy().b[1][1]++, this.getRandomPort());
    /* istanbul ignore next */
    cov_790gqlvqy().s[8]++;
    this.isRunning = true;
    /* istanbul ignore next */
    cov_790gqlvqy().s[9]++;
    return this.port;
  }
  async stopMockServer() {
    /* istanbul ignore next */
    cov_790gqlvqy().f[1]++;
    cov_790gqlvqy().s[10]++;
    this.isRunning = false;
    /* istanbul ignore next */
    cov_790gqlvqy().s[11]++;
    this.routes.clear();
    /* istanbul ignore next */
    cov_790gqlvqy().s[12]++;
    this.webSocketHandlers.clear();
    /* istanbul ignore next */
    cov_790gqlvqy().s[13]++;
    this.requests = [];
  }
  mockRequest(method, path, response) {
    /* istanbul ignore next */
    cov_790gqlvqy().f[2]++;
    const key =
    /* istanbul ignore next */
    (cov_790gqlvqy().s[14]++, `${method.toUpperCase()} ${path}`);
    /* istanbul ignore next */
    cov_790gqlvqy().s[15]++;
    this.routes.set(key, response);
  }
  mockWebSocket(path, handlers) {
    /* istanbul ignore next */
    cov_790gqlvqy().f[3]++;
    cov_790gqlvqy().s[16]++;
    this.webSocketHandlers.set(path, handlers);
  }
  captureRequests() {
    /* istanbul ignore next */
    cov_790gqlvqy().f[4]++;
    cov_790gqlvqy().s[17]++;
    return [...this.requests];
  }
  clearRequests() {
    /* istanbul ignore next */
    cov_790gqlvqy().f[5]++;
    cov_790gqlvqy().s[18]++;
    this.requests = [];
  }
  simulateNetworkDelay(delayMs) {
    /* istanbul ignore next */
    cov_790gqlvqy().f[6]++;
    cov_790gqlvqy().s[19]++;
    this.networkDelay = delayMs;
  }
  simulateNetworkError(errorType) {
    /* istanbul ignore next */
    cov_790gqlvqy().f[7]++;
    cov_790gqlvqy().s[20]++;
    this.networkError = errorType;
  }
  resetNetworkConditions() {
    /* istanbul ignore next */
    cov_790gqlvqy().f[8]++;
    cov_790gqlvqy().s[21]++;
    this.networkDelay = 0;
    /* istanbul ignore next */
    cov_790gqlvqy().s[22]++;
    this.networkError = null;
  }
  createHttpClient(baseUrl) {
    /* istanbul ignore next */
    cov_790gqlvqy().f[9]++;
    const self =
    /* istanbul ignore next */
    (cov_790gqlvqy().s[23]++, this);
    const url =
    /* istanbul ignore next */
    (cov_790gqlvqy().s[24]++,
    /* istanbul ignore next */
    (cov_790gqlvqy().b[2][0]++, baseUrl) ||
    /* istanbul ignore next */
    (cov_790gqlvqy().b[2][1]++, `http://localhost:${this.port}`));
    /* istanbul ignore next */
    cov_790gqlvqy().s[25]++;
    return {
      async get(path, headers =
      /* istanbul ignore next */
      (cov_790gqlvqy().b[3][0]++, {})) {
        /* istanbul ignore next */
        cov_790gqlvqy().f[10]++;
        cov_790gqlvqy().s[26]++;
        return self.makeRequest('GET', path, undefined, headers);
      },
      async post(path, body, headers =
      /* istanbul ignore next */
      (cov_790gqlvqy().b[4][0]++, {})) {
        /* istanbul ignore next */
        cov_790gqlvqy().f[11]++;
        cov_790gqlvqy().s[27]++;
        return self.makeRequest('POST', path, body, headers);
      },
      async put(path, body, headers =
      /* istanbul ignore next */
      (cov_790gqlvqy().b[5][0]++, {})) {
        /* istanbul ignore next */
        cov_790gqlvqy().f[12]++;
        cov_790gqlvqy().s[28]++;
        return self.makeRequest('PUT', path, body, headers);
      },
      async delete(path, headers =
      /* istanbul ignore next */
      (cov_790gqlvqy().b[6][0]++, {})) {
        /* istanbul ignore next */
        cov_790gqlvqy().f[13]++;
        cov_790gqlvqy().s[29]++;
        return self.makeRequest('DELETE', path, undefined, headers);
      },
      async patch(path, body, headers =
      /* istanbul ignore next */
      (cov_790gqlvqy().b[7][0]++, {})) {
        /* istanbul ignore next */
        cov_790gqlvqy().f[14]++;
        cov_790gqlvqy().s[30]++;
        return self.makeRequest('PATCH', path, body, headers);
      }
    };
  }
  createWebSocketClient(url) {
    /* istanbul ignore next */
    cov_790gqlvqy().f[15]++;
    const self =
    /* istanbul ignore next */
    (cov_790gqlvqy().s[31]++, this);
    const path =
    /* istanbul ignore next */
    (cov_790gqlvqy().s[32]++, new URL(url).pathname);
    let isConnected =
    /* istanbul ignore next */
    (cov_790gqlvqy().s[33]++, false);
    const messageCallbacks =
    /* istanbul ignore next */
    (cov_790gqlvqy().s[34]++, []);
    const errorCallbacks =
    /* istanbul ignore next */
    (cov_790gqlvqy().s[35]++, []);
    const connectCallbacks =
    /* istanbul ignore next */
    (cov_790gqlvqy().s[36]++, []);
    const disconnectCallbacks =
    /* istanbul ignore next */
    (cov_790gqlvqy().s[37]++, []);
    /* istanbul ignore next */
    cov_790gqlvqy().s[38]++;
    return {
      async connect() {
        /* istanbul ignore next */
        cov_790gqlvqy().f[16]++;
        cov_790gqlvqy().s[39]++;
        if (self.networkError) {
          /* istanbul ignore next */
          cov_790gqlvqy().b[8][0]++;
          cov_790gqlvqy().s[40]++;
          throw new Error(`Network error: ${self.networkError}`);
        } else
        /* istanbul ignore next */
        {
          cov_790gqlvqy().b[8][1]++;
        }
        cov_790gqlvqy().s[41]++;
        if (self.networkDelay > 0) {
          /* istanbul ignore next */
          cov_790gqlvqy().b[9][0]++;
          cov_790gqlvqy().s[42]++;
          await self.delay(self.networkDelay);
        } else
        /* istanbul ignore next */
        {
          cov_790gqlvqy().b[9][1]++;
        }
        cov_790gqlvqy().s[43]++;
        isConnected = true;
        const handlers =
        /* istanbul ignore next */
        (cov_790gqlvqy().s[44]++, self.webSocketHandlers.get(path));
        /* istanbul ignore next */
        cov_790gqlvqy().s[45]++;
        if (handlers?.onConnect) {
          /* istanbul ignore next */
          cov_790gqlvqy().b[10][0]++;
          cov_790gqlvqy().s[46]++;
          handlers.onConnect();
        } else
        /* istanbul ignore next */
        {
          cov_790gqlvqy().b[10][1]++;
        }
        cov_790gqlvqy().s[47]++;
        connectCallbacks.forEach(callback => {
          /* istanbul ignore next */
          cov_790gqlvqy().f[17]++;
          cov_790gqlvqy().s[48]++;
          return callback();
        });
      },
      async disconnect() {
        /* istanbul ignore next */
        cov_790gqlvqy().f[18]++;
        cov_790gqlvqy().s[49]++;
        isConnected = false;
        const handlers =
        /* istanbul ignore next */
        (cov_790gqlvqy().s[50]++, self.webSocketHandlers.get(path));
        /* istanbul ignore next */
        cov_790gqlvqy().s[51]++;
        if (handlers?.onDisconnect) {
          /* istanbul ignore next */
          cov_790gqlvqy().b[11][0]++;
          cov_790gqlvqy().s[52]++;
          handlers.onDisconnect();
        } else
        /* istanbul ignore next */
        {
          cov_790gqlvqy().b[11][1]++;
        }
        cov_790gqlvqy().s[53]++;
        disconnectCallbacks.forEach(callback => {
          /* istanbul ignore next */
          cov_790gqlvqy().f[19]++;
          cov_790gqlvqy().s[54]++;
          return callback();
        });
      },
      async send(message) {
        /* istanbul ignore next */
        cov_790gqlvqy().f[20]++;
        cov_790gqlvqy().s[55]++;
        if (!isConnected) {
          /* istanbul ignore next */
          cov_790gqlvqy().b[12][0]++;
          cov_790gqlvqy().s[56]++;
          throw new Error('WebSocket not connected');
        } else
        /* istanbul ignore next */
        {
          cov_790gqlvqy().b[12][1]++;
        }
        cov_790gqlvqy().s[57]++;
        if (self.networkError) {
          /* istanbul ignore next */
          cov_790gqlvqy().b[13][0]++;
          cov_790gqlvqy().s[58]++;
          throw new Error(`Network error: ${self.networkError}`);
        } else
        /* istanbul ignore next */
        {
          cov_790gqlvqy().b[13][1]++;
        }
        cov_790gqlvqy().s[59]++;
        if (self.networkDelay > 0) {
          /* istanbul ignore next */
          cov_790gqlvqy().b[14][0]++;
          cov_790gqlvqy().s[60]++;
          await self.delay(self.networkDelay);
        } else
        /* istanbul ignore next */
        {
          cov_790gqlvqy().b[14][1]++;
        }
        const handlers =
        /* istanbul ignore next */
        (cov_790gqlvqy().s[61]++, self.webSocketHandlers.get(path));
        /* istanbul ignore next */
        cov_790gqlvqy().s[62]++;
        if (handlers?.onMessage) {
          /* istanbul ignore next */
          cov_790gqlvqy().b[15][0]++;
          cov_790gqlvqy().s[63]++;
          handlers.onMessage(message);
        } else
        /* istanbul ignore next */
        {
          cov_790gqlvqy().b[15][1]++;
        }
      },
      onMessage(callback) {
        /* istanbul ignore next */
        cov_790gqlvqy().f[21]++;
        cov_790gqlvqy().s[64]++;
        messageCallbacks.push(callback);
      },
      onError(callback) {
        /* istanbul ignore next */
        cov_790gqlvqy().f[22]++;
        cov_790gqlvqy().s[65]++;
        errorCallbacks.push(callback);
      },
      onConnect(callback) {
        /* istanbul ignore next */
        cov_790gqlvqy().f[23]++;
        cov_790gqlvqy().s[66]++;
        connectCallbacks.push(callback);
      },
      onDisconnect(callback) {
        /* istanbul ignore next */
        cov_790gqlvqy().f[24]++;
        cov_790gqlvqy().s[67]++;
        disconnectCallbacks.push(callback);
      }
    };
  }
  async makeRequest(method, path, body, headers =
  /* istanbul ignore next */
  (cov_790gqlvqy().b[16][0]++, {})) {
    /* istanbul ignore next */
    cov_790gqlvqy().f[25]++;
    cov_790gqlvqy().s[68]++;
    if (!this.isRunning) {
      /* istanbul ignore next */
      cov_790gqlvqy().b[17][0]++;
      cov_790gqlvqy().s[69]++;
      throw new Error('Mock server not running');
    } else
    /* istanbul ignore next */
    {
      cov_790gqlvqy().b[17][1]++;
    }
    cov_790gqlvqy().s[70]++;
    if (this.networkError) {
      /* istanbul ignore next */
      cov_790gqlvqy().b[18][0]++;
      cov_790gqlvqy().s[71]++;
      throw new Error(`Network error: ${this.networkError}`);
    } else
    /* istanbul ignore next */
    {
      cov_790gqlvqy().b[18][1]++;
    }
    cov_790gqlvqy().s[72]++;
    if (this.networkDelay > 0) {
      /* istanbul ignore next */
      cov_790gqlvqy().b[19][0]++;
      cov_790gqlvqy().s[73]++;
      await this.delay(this.networkDelay);
    } else
    /* istanbul ignore next */
    {
      cov_790gqlvqy().b[19][1]++;
    }
    // Record the request
    const request =
    /* istanbul ignore next */
    (cov_790gqlvqy().s[74]++, {
      method: method.toUpperCase(),
      url: path,
      headers,
      body,
      timestamp: Date.now()
    });
    /* istanbul ignore next */
    cov_790gqlvqy().s[75]++;
    this.requests.push(request);
    // Find matching route
    const key =
    /* istanbul ignore next */
    (cov_790gqlvqy().s[76]++, `${method.toUpperCase()} ${path}`);
    const response =
    /* istanbul ignore next */
    (cov_790gqlvqy().s[77]++, this.routes.get(key));
    /* istanbul ignore next */
    cov_790gqlvqy().s[78]++;
    if (response) {
      /* istanbul ignore next */
      cov_790gqlvqy().b[20][0]++;
      cov_790gqlvqy().s[79]++;
      return response;
    } else
    /* istanbul ignore next */
    {
      cov_790gqlvqy().b[20][1]++;
    }
    // Default 404 response
    cov_790gqlvqy().s[80]++;
    return {
      status: 404,
      headers: {
        'Content-Type': 'application/json'
      },
      body: {
        error: 'Not Found',
        path
      }
    };
  }
  delay(ms) {
    /* istanbul ignore next */
    cov_790gqlvqy().f[26]++;
    cov_790gqlvqy().s[81]++;
    return new Promise(resolve => {
      /* istanbul ignore next */
      cov_790gqlvqy().f[27]++;
      cov_790gqlvqy().s[82]++;
      return setTimeout(resolve, ms);
    });
  }
  getRandomPort() {
    /* istanbul ignore next */
    cov_790gqlvqy().f[28]++;
    cov_790gqlvqy().s[83]++;
    return Math.floor(Math.random() * (65535 - 3000) + 3000);
  }
}
export class RealNetworkTestHelper {
  server =
  /* istanbul ignore next */
  (cov_790gqlvqy().s[84]++, null);
  port =
  /* istanbul ignore next */
  (cov_790gqlvqy().s[85]++, 0);
  routes =
  /* istanbul ignore next */
  (cov_790gqlvqy().s[86]++, new Map());
  requests =
  /* istanbul ignore next */
  (cov_790gqlvqy().s[87]++, []);
  async startMockServer(port =
  /* istanbul ignore next */
  (cov_790gqlvqy().b[21][0]++, 0)) {
    /* istanbul ignore next */
    cov_790gqlvqy().f[29]++;
    cov_790gqlvqy().s[88]++;
    try {
      const http =
      /* istanbul ignore next */
      (cov_790gqlvqy().s[89]++, await import('http'));
      /* istanbul ignore next */
      cov_790gqlvqy().s[90]++;
      this.server = http.createServer((req, res) => {
        /* istanbul ignore next */
        cov_790gqlvqy().f[30]++;
        cov_790gqlvqy().s[91]++;
        this.handleRequest(req, res);
      });
      /* istanbul ignore next */
      cov_790gqlvqy().s[92]++;
      this.port =
      /* istanbul ignore next */
      (cov_790gqlvqy().b[22][0]++, port) ||
      /* istanbul ignore next */
      (cov_790gqlvqy().b[22][1]++, this.getRandomPort());
      /* istanbul ignore next */
      cov_790gqlvqy().s[93]++;
      await new Promise((resolve, reject) => {
        /* istanbul ignore next */
        cov_790gqlvqy().f[31]++;
        cov_790gqlvqy().s[94]++;
        this.server.listen(this.port, err => {
          /* istanbul ignore next */
          cov_790gqlvqy().f[32]++;
          cov_790gqlvqy().s[95]++;
          if (err) {
            /* istanbul ignore next */
            cov_790gqlvqy().b[23][0]++;
            cov_790gqlvqy().s[96]++;
            reject(err);
          } else {
            /* istanbul ignore next */
            cov_790gqlvqy().b[23][1]++;
            cov_790gqlvqy().s[97]++;
            resolve();
          }
        });
      });
      /* istanbul ignore next */
      cov_790gqlvqy().s[98]++;
      return this.port;
    } catch (error) {
      /* istanbul ignore next */
      cov_790gqlvqy().s[99]++;
      console.warn('Real HTTP server not available, using mock');
      /* istanbul ignore next */
      cov_790gqlvqy().s[100]++;
      throw error;
    }
  }
  async stopMockServer() {
    /* istanbul ignore next */
    cov_790gqlvqy().f[33]++;
    cov_790gqlvqy().s[101]++;
    if (this.server) {
      /* istanbul ignore next */
      cov_790gqlvqy().b[24][0]++;
      cov_790gqlvqy().s[102]++;
      await new Promise(resolve => {
        /* istanbul ignore next */
        cov_790gqlvqy().f[34]++;
        cov_790gqlvqy().s[103]++;
        this.server.close(() => {
          /* istanbul ignore next */
          cov_790gqlvqy().f[35]++;
          cov_790gqlvqy().s[104]++;
          return resolve();
        });
      });
      /* istanbul ignore next */
      cov_790gqlvqy().s[105]++;
      this.server = null;
    } else
    /* istanbul ignore next */
    {
      cov_790gqlvqy().b[24][1]++;
    }
    cov_790gqlvqy().s[106]++;
    this.routes.clear();
    /* istanbul ignore next */
    cov_790gqlvqy().s[107]++;
    this.requests = [];
  }
  mockRequest(method, path, response) {
    /* istanbul ignore next */
    cov_790gqlvqy().f[36]++;
    const key =
    /* istanbul ignore next */
    (cov_790gqlvqy().s[108]++, `${method.toUpperCase()} ${path}`);
    /* istanbul ignore next */
    cov_790gqlvqy().s[109]++;
    this.routes.set(key, response);
  }
  mockWebSocket(path, handlers) {
    /* istanbul ignore next */
    cov_790gqlvqy().f[37]++;
    cov_790gqlvqy().s[110]++;
    // WebSocket support would require additional setup
    console.warn('WebSocket mocking not fully implemented for real server');
  }
  captureRequests() {
    /* istanbul ignore next */
    cov_790gqlvqy().f[38]++;
    cov_790gqlvqy().s[111]++;
    return [...this.requests];
  }
  clearRequests() {
    /* istanbul ignore next */
    cov_790gqlvqy().f[39]++;
    cov_790gqlvqy().s[112]++;
    this.requests = [];
  }
  simulateNetworkDelay(delayMs) {
    /* istanbul ignore next */
    cov_790gqlvqy().f[40]++;
    cov_790gqlvqy().s[113]++;
    // Not applicable for real server
    console.warn('Network delay simulation not supported for real server');
  }
  simulateNetworkError(errorType) {
    /* istanbul ignore next */
    cov_790gqlvqy().f[41]++;
    cov_790gqlvqy().s[114]++;
    // Not applicable for real server
    console.warn('Network error simulation not supported for real server');
  }
  resetNetworkConditions() {
    /* istanbul ignore next */
    cov_790gqlvqy().f[42]++;
  } // Not applicable for real server
  createHttpClient(baseUrl) {
    /* istanbul ignore next */
    cov_790gqlvqy().f[43]++;
    const url =
    /* istanbul ignore next */
    (cov_790gqlvqy().s[115]++,
    /* istanbul ignore next */
    (cov_790gqlvqy().b[25][0]++, baseUrl) ||
    /* istanbul ignore next */
    (cov_790gqlvqy().b[25][1]++, `http://localhost:${this.port}`));
    /* istanbul ignore next */
    cov_790gqlvqy().s[116]++;
    return {
      async get(path, headers =
      /* istanbul ignore next */
      (cov_790gqlvqy().b[26][0]++, {})) {
        /* istanbul ignore next */
        cov_790gqlvqy().f[44]++;
        cov_790gqlvqy().s[117]++;
        return this.makeRealRequest('GET', `${url}${path}`, undefined, headers);
      },
      async post(path, body, headers =
      /* istanbul ignore next */
      (cov_790gqlvqy().b[27][0]++, {})) {
        /* istanbul ignore next */
        cov_790gqlvqy().f[45]++;
        cov_790gqlvqy().s[118]++;
        return this.makeRealRequest('POST', `${url}${path}`, body, headers);
      },
      async put(path, body, headers =
      /* istanbul ignore next */
      (cov_790gqlvqy().b[28][0]++, {})) {
        /* istanbul ignore next */
        cov_790gqlvqy().f[46]++;
        cov_790gqlvqy().s[119]++;
        return this.makeRealRequest('PUT', `${url}${path}`, body, headers);
      },
      async delete(path, headers =
      /* istanbul ignore next */
      (cov_790gqlvqy().b[29][0]++, {})) {
        /* istanbul ignore next */
        cov_790gqlvqy().f[47]++;
        cov_790gqlvqy().s[120]++;
        return this.makeRealRequest('DELETE', `${url}${path}`, undefined, headers);
      },
      async patch(path, body, headers =
      /* istanbul ignore next */
      (cov_790gqlvqy().b[30][0]++, {})) {
        /* istanbul ignore next */
        cov_790gqlvqy().f[48]++;
        cov_790gqlvqy().s[121]++;
        return this.makeRealRequest('PATCH', `${url}${path}`, body, headers);
      }
    };
  }
  createWebSocketClient(url) {
    /* istanbul ignore next */
    cov_790gqlvqy().f[49]++;
    cov_790gqlvqy().s[122]++;
    // Real WebSocket implementation would go here
    throw new Error('Real WebSocket client not implemented');
  }
  async handleRequest(req, res) {
    /* istanbul ignore next */
    cov_790gqlvqy().f[50]++;
    // Collect request body
    const chunks =
    /* istanbul ignore next */
    (cov_790gqlvqy().s[123]++, []);
    /* istanbul ignore next */
    cov_790gqlvqy().s[124]++;
    req.on('data', chunk => {
      /* istanbul ignore next */
      cov_790gqlvqy().f[51]++;
      cov_790gqlvqy().s[125]++;
      chunks.push(chunk);
    });
    /* istanbul ignore next */
    cov_790gqlvqy().s[126]++;
    req.on('end', () => {
      /* istanbul ignore next */
      cov_790gqlvqy().f[52]++;
      const body =
      /* istanbul ignore next */
      (cov_790gqlvqy().s[127]++, chunks.length > 0 ?
      /* istanbul ignore next */
      (cov_790gqlvqy().b[31][0]++, Buffer.concat(chunks).toString()) :
      /* istanbul ignore next */
      (cov_790gqlvqy().b[31][1]++, undefined));
      // Record the request
      const request =
      /* istanbul ignore next */
      (cov_790gqlvqy().s[128]++, {
        method: req.method,
        url: req.url,
        headers: req.headers,
        body: body ?
        /* istanbul ignore next */
        (cov_790gqlvqy().b[32][0]++, this.tryParseJson(body)) :
        /* istanbul ignore next */
        (cov_790gqlvqy().b[32][1]++, undefined),
        timestamp: Date.now()
      });
      /* istanbul ignore next */
      cov_790gqlvqy().s[129]++;
      this.requests.push(request);
      // Find matching route
      const key =
      /* istanbul ignore next */
      (cov_790gqlvqy().s[130]++, `${req.method} ${req.url}`);
      const response =
      /* istanbul ignore next */
      (cov_790gqlvqy().s[131]++, this.routes.get(key));
      /* istanbul ignore next */
      cov_790gqlvqy().s[132]++;
      if (response) {
        /* istanbul ignore next */
        cov_790gqlvqy().b[33][0]++;
        cov_790gqlvqy().s[133]++;
        res.writeHead(response.status, response.headers);
        /* istanbul ignore next */
        cov_790gqlvqy().s[134]++;
        res.end(typeof response.body === 'string' ?
        /* istanbul ignore next */
        (cov_790gqlvqy().b[34][0]++, response.body) :
        /* istanbul ignore next */
        (cov_790gqlvqy().b[34][1]++, JSON.stringify(response.body)));
      } else {
        /* istanbul ignore next */
        cov_790gqlvqy().b[33][1]++;
        cov_790gqlvqy().s[135]++;
        res.writeHead(404, {
          'Content-Type': 'application/json'
        });
        /* istanbul ignore next */
        cov_790gqlvqy().s[136]++;
        res.end(JSON.stringify({
          error: 'Not Found',
          path: req.url
        }));
      }
    });
  }
  async makeRealRequest(method, url, body, headers =
  /* istanbul ignore next */
  (cov_790gqlvqy().b[35][0]++, {})) {
    /* istanbul ignore next */
    cov_790gqlvqy().f[53]++;
    cov_790gqlvqy().s[137]++;
    try {
      /* istanbul ignore next */
      cov_790gqlvqy().s[138]++;
      // Use fetch if available, otherwise use http module
      if (typeof fetch !== 'undefined') {
        /* istanbul ignore next */
        cov_790gqlvqy().b[36][0]++;
        const options =
        /* istanbul ignore next */
        (cov_790gqlvqy().s[139]++, {
          method,
          headers
        });
        /* istanbul ignore next */
        cov_790gqlvqy().s[140]++;
        if (body) {
          /* istanbul ignore next */
          cov_790gqlvqy().b[37][0]++;
          cov_790gqlvqy().s[141]++;
          options.body = typeof body === 'string' ?
          /* istanbul ignore next */
          (cov_790gqlvqy().b[38][0]++, body) :
          /* istanbul ignore next */
          (cov_790gqlvqy().b[38][1]++, JSON.stringify(body));
          /* istanbul ignore next */
          cov_790gqlvqy().s[142]++;
          if (!headers['Content-Type']) {
            /* istanbul ignore next */
            cov_790gqlvqy().b[39][0]++;
            cov_790gqlvqy().s[143]++;
            headers['Content-Type'] = 'application/json';
          } else
          /* istanbul ignore next */
          {
            cov_790gqlvqy().b[39][1]++;
          }
        } else
        /* istanbul ignore next */
        {
          cov_790gqlvqy().b[37][1]++;
        }
        const response =
        /* istanbul ignore next */
        (cov_790gqlvqy().s[144]++, await fetch(url, options));
        const responseBody =
        /* istanbul ignore next */
        (cov_790gqlvqy().s[145]++, await response.text());
        /* istanbul ignore next */
        cov_790gqlvqy().s[146]++;
        return {
          status: response.status,
          headers: Object.fromEntries(response.headers.entries()),
          body: this.tryParseJson(responseBody)
        };
      } else {
        /* istanbul ignore next */
        cov_790gqlvqy().b[36][1]++;
        cov_790gqlvqy().s[147]++;
        throw new Error('fetch not available');
      }
    } catch (error) {
      /* istanbul ignore next */
      cov_790gqlvqy().s[148]++;
      throw new Error(`HTTP request failed: ${error}`);
    }
  }
  tryParseJson(text) {
    /* istanbul ignore next */
    cov_790gqlvqy().f[54]++;
    cov_790gqlvqy().s[149]++;
    try {
      /* istanbul ignore next */
      cov_790gqlvqy().s[150]++;
      return JSON.parse(text);
    } catch {
      /* istanbul ignore next */
      cov_790gqlvqy().s[151]++;
      return text;
    }
  }
  getRandomPort() {
    /* istanbul ignore next */
    cov_790gqlvqy().f[55]++;
    cov_790gqlvqy().s[152]++;
    return Math.floor(Math.random() * (65535 - 3000) + 3000);
  }
}
// Factory functions
export function createMockNetworkHelper() {
  /* istanbul ignore next */
  cov_790gqlvqy().f[56]++;
  cov_790gqlvqy().s[153]++;
  return new MockNetworkTestHelper();
}
export function createRealNetworkHelper() {
  /* istanbul ignore next */
  cov_790gqlvqy().f[57]++;
  cov_790gqlvqy().s[154]++;
  return new RealNetworkTestHelper();
}
// Helper functions for common testing patterns
export async function testHttpEndpoint(helper, method, path, expectedResponse, requestBody) {
  /* istanbul ignore next */
  cov_790gqlvqy().f[58]++;
  const client =
  /* istanbul ignore next */
  (cov_790gqlvqy().s[155]++, helper.createHttpClient());
  let response;
  /* istanbul ignore next */
  cov_790gqlvqy().s[156]++;
  switch (method.toUpperCase()) {
    case 'GET':
      /* istanbul ignore next */
      cov_790gqlvqy().b[40][0]++;
      cov_790gqlvqy().s[157]++;
      response = await client.get(path);
      /* istanbul ignore next */
      cov_790gqlvqy().s[158]++;
      break;
    case 'POST':
      /* istanbul ignore next */
      cov_790gqlvqy().b[40][1]++;
      cov_790gqlvqy().s[159]++;
      response = await client.post(path, requestBody);
      /* istanbul ignore next */
      cov_790gqlvqy().s[160]++;
      break;
    case 'PUT':
      /* istanbul ignore next */
      cov_790gqlvqy().b[40][2]++;
      cov_790gqlvqy().s[161]++;
      response = await client.put(path, requestBody);
      /* istanbul ignore next */
      cov_790gqlvqy().s[162]++;
      break;
    case 'DELETE':
      /* istanbul ignore next */
      cov_790gqlvqy().b[40][3]++;
      cov_790gqlvqy().s[163]++;
      response = await client.delete(path);
      /* istanbul ignore next */
      cov_790gqlvqy().s[164]++;
      break;
    case 'PATCH':
      /* istanbul ignore next */
      cov_790gqlvqy().b[40][4]++;
      cov_790gqlvqy().s[165]++;
      response = await client.patch(path, requestBody);
      /* istanbul ignore next */
      cov_790gqlvqy().s[166]++;
      break;
    default:
      /* istanbul ignore next */
      cov_790gqlvqy().b[40][5]++;
      cov_790gqlvqy().s[167]++;
      throw new Error(`Unsupported HTTP method: ${method}`);
  }
  // Verify expected response
  /* istanbul ignore next */
  cov_790gqlvqy().s[168]++;
  if (expectedResponse.status !== undefined) {
    /* istanbul ignore next */
    cov_790gqlvqy().b[41][0]++;
    cov_790gqlvqy().s[169]++;
    if (response.status !== expectedResponse.status) {
      /* istanbul ignore next */
      cov_790gqlvqy().b[42][0]++;
      cov_790gqlvqy().s[170]++;
      throw new Error(`Expected status ${expectedResponse.status}, got ${response.status}`);
    } else
    /* istanbul ignore next */
    {
      cov_790gqlvqy().b[42][1]++;
    }
  } else
  /* istanbul ignore next */
  {
    cov_790gqlvqy().b[41][1]++;
  }
  cov_790gqlvqy().s[171]++;
  return response;
}
export async function setupRestApiMock(helper, endpoints) {
  /* istanbul ignore next */
  cov_790gqlvqy().f[59]++;
  cov_790gqlvqy().s[172]++;
  await helper.startMockServer();
  /* istanbul ignore next */
  cov_790gqlvqy().s[173]++;
  for (const endpoint of endpoints) {
    /* istanbul ignore next */
    cov_790gqlvqy().s[174]++;
    helper.mockRequest(endpoint.method, endpoint.path, endpoint.response);
  }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,