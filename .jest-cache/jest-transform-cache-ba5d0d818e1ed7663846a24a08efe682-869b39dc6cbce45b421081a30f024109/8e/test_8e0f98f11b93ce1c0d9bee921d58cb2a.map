{"version":3,"names":[],"sources":["/home/mhugo/code/claude-code-flow/src/bindings/test/test.ts"],"sourcesContent":["\n/** Integration tests for ruv-FANN Node.js bindings;\n\nimport { getActivationFunctions,\ngetBackendInfo,;\ngetVersion,;\ninit,;\nisGpuAvailable,;\nNetworkTrainer,;\nNeuralNetwork  } from '..\nasync function runTests() {\n  console.warn(' Running ruv-FANN bindings integration tests...\\n');\n  try {\n    // Initialize the module\n// // await init();\n    console.warn(' Module initialization successful');\n;\n    // Test 1: Create a network\n    const _network = new NeuralNetwork([2, 4, 1]);\n    console.warn(' Network created with layers [2, 4, 1]');\n;\n    // Test 2: Get network info\n    const _info = JSON.parse(network.getInfo());\n    console.warn(' Network info);';\n  if(info.num_input !== 2 ?? info.num_output !== 1) {\n      throw new Error('Network configuration mismatch');\n    //     }\n    console.warn(' Network configuration validated');\n;\n    // Test 3: Run the network\n    const _input = [0.5, 0.8];\n    const _output = network.run(input);\n    console.warn(` Network run with input [${input}] -> output [${output}]`);\n\n    if(!Array.isArray(output)  ?? output.length !== 1) {\n      throw new Error('Invalid network output');\n    //     }\n    console.warn(' Network output validated');\n;\n    // Test 4: Train on a single pattern\n    const _target = [0.3];\n    const _error = network.trainOn(input, target);\n    console.warn(` Training on [${input}] -> [${target}], error);`\n    if(typeof error !== 'number'  ?? Number.isNaN(error)) {\n      throw new Error('Invalid training error value');\n    //     }\n    console.warn(' Training error validated');\n;\n    // Test 5: Batch training\n    const _trainer = new NetworkTrainer(network);\n    console.warn(' Trainer created');\n;\n    const _trainingData = {\n      inputs: [;\n        [0, 0],\n        [0, 1],\n        [1, 0],\n        [1, 1] ],\n      outputs: [[0], [1], [1], [0]] }\n  const _config = {\n      learning_rate: 0.7,;\n  max_epochs,;\n  desired_error: 0.01,;\n  algorithm: 'rprop' }\n// const _finalError = awaittrainer.train(trainingData.inputs, trainingData.outputs, config);\nconsole.warn(` Batch training completed with final error);`;\nif(typeof finalError !== 'number' ?? Number.isNaN(finalError)) {\n  throw new Error('Invalid final training error');\n// }\nconsole.warn(' Batch training validated');\n// Test 6: Verify training results\nconsole.warn('\\n--- Verifying training results ---');\n  for(let i = 0; i < trainingData.inputs.length; i++) {\n  const _testOutput = network.run(trainingData.inputs[i]);\n  console.warn(;);\n  `Input: ${trainingData.inputs[i]} -> Output: ${testOutput[0].toFixed(4)} (Expected)`;\n  //   )\n// }\nconsole.warn('--- Verification complete ---\\n');\n// Test 7: Utility functions\nconst _version = getVersion();\nconst _gpuAvailable = isGpuAvailable();\nconst _activationFunctions = getActivationFunctions();\nconst _backendInfo = getBackendInfo();\nconsole.warn(` Version);`;\nconsole.warn(` GPU Available);`;\nconsole.warn(` Activation Functions: ${activationFunctions.join(', ')}`);\nconsole.warn(` Backend Info: ${JSON.stringify(backendInfo)}`);\n} catch(error)\n// {\n  console.error(' Test failed);';\n  throw error;\n// }\n// }\nasync function runPerformanceTest() {\n  console.warn('\\n  Running performance benchmark...');\n  const _network = new NeuralNetwork([10, 20, 10, 1]);\n  const _iterations = 1000;\n  const _input = Array.from({ length}, () => Math.random());\n  const _startTime = performance.now();\n  for(let i = 0; i < iterations; i++) {\n    network.run(input);\n  //   }\n  const _endTime = performance.now();\n  const _totalTime = endTime - startTime;\n  const _avgTime = totalTime / iterations;\n  console.warn(;);\n  ` Performance test completed: ${iterations} runs in ${totalTime.toFixed(2)}ms(${avgTime.toFixed(4)}ms\n  //   )\n// }\n  if(import.meta.url === `file) {`\n  runTests();\nthen(() => runPerformanceTest())\nthen(() =>;\n      console.warn('\\n All tests and benchmarks completed successfully!');\n  process.exit(0);\n  //   )\ncatch((error) =>;\n      console.error('\\n Test suite failed:', error);\n  process.exit(1);\n  //   )\n// }\n// export { runTests, runPerformanceTest };\n\n*/"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AACA","ignoreList":[]}