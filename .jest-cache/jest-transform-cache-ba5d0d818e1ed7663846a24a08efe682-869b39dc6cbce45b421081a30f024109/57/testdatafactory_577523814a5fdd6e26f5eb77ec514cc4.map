{"file":"/home/mhugo/code/claude-code-flow/src/__tests__/helpers/test-data-factory.ts","mappings":"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","names":[],"sources":["/home/mhugo/code/claude-code-flow/src/__tests__/helpers/test-data-factory.ts"],"sourcesContent":["/**\n * Test Data Factory - Reproducible Test Data Generation\n * \n * Creates realistic test data for both London and Classical TDD approaches\n */\n\nimport type { \n  TestDataOptions, \n  UserTestData, \n  ProjectTestData, \n  SwarmTestData, \n  AgentTestData \n} from './types.js';\n\nexport class TestDataFactory {\n  private seed: number;\n  private options: TestDataOptions;\n\n  constructor(options: TestDataOptions = {}) {\n    this.seed = options.seed ?? Date.now();\n    this.options = options;\n    this.initializeRandom();\n  }\n\n  /**\n   * Create user test data\n   */\n  createUser(overrides: Partial<UserTestData> = {}): UserTestData {\n    const id = this.generateId();\n    const name = this.generateName();\n    const email = this.generateEmail(name);\n\n    return {\n      id,\n      name,\n      email,\n      preferences: {\n        theme: this.randomChoice(['light', 'dark', 'auto']),\n        language: this.randomChoice(['en', 'es', 'fr', 'de']),\n        notifications: this.randomBoolean()\n      },\n      metadata: {\n        createdAt: this.generateTimestamp(),\n        lastLogin: this.generateTimestamp(),\n        loginCount: this.randomInt(1, 100)\n      },\n      ...overrides\n    };\n  }\n\n  /**\n   * Create multiple users\n   */\n  createUsers(count: number, baseData: Partial<UserTestData> = {}): UserTestData[] {\n    return Array.from({ length: count }, (_, index) => \n      this.createUser({ ...baseData, id: `user-${index + 1}` })\n    );\n  }\n\n  /**\n   * Create project test data\n   */\n  createProject(overrides: Partial<ProjectTestData> = {}): ProjectTestData {\n    const name = this.generateProjectName();\n    const type = this.randomChoice(['typescript', 'javascript', 'python', 'rust'] as const);\n    \n    return {\n      name,\n      path: `/projects/${name}`,\n      type,\n      structure: this.generateProjectStructure(type),\n      dependencies: this.generateDependencies(type),\n      ...overrides\n    };\n  }\n\n  /**\n   * Create swarm test data\n   */\n  createSwarm(overrides: Partial<SwarmTestData> = {}): SwarmTestData {\n    const id = this.generateId();\n    const topology = this.randomChoice(['mesh', 'hierarchical', 'ring', 'star'] as const);\n    const agentCount = this.randomInt(3, 8);\n    \n    return {\n      id,\n      topology,\n      agents: this.createAgents(agentCount),\n      configuration: {\n        maxAgents: agentCount,\n        strategy: this.randomChoice(['balanced', 'specialized', 'adaptive']),\n        timeout: this.randomInt(30000, 120000)\n      },\n      ...overrides\n    };\n  }\n\n  /**\n   * Create agent test data\n   */\n  createAgent(overrides: Partial<AgentTestData> = {}): AgentTestData {\n    const type = this.randomChoice(['researcher', 'coder', 'analyst', 'tester', 'coordinator'] as const);\n    \n    return {\n      id: this.generateId(),\n      type,\n      capabilities: this.generateCapabilities(type),\n      state: this.randomChoice(['idle', 'working', 'error', 'completed'] as const),\n      ...overrides\n    };\n  }\n\n  /**\n   * Create multiple agents\n   */\n  createAgents(count: number, baseData: Partial<AgentTestData> = {}): AgentTestData[] {\n    return Array.from({ length: count }, (_, index) => \n      this.createAgent({ ...baseData, id: `agent-${index + 1}` })\n    );\n  }\n\n  /**\n   * Create MCP message test data\n   */\n  createMCPMessage(method: string = 'tools/call', params: any = {}) {\n    return {\n      jsonrpc: '2.0',\n      id: this.randomInt(1, 1000),\n      method,\n      params: {\n        name: this.randomChoice(['analyze', 'generate', 'optimize', 'test']),\n        arguments: {\n          input: this.generateText(),\n          options: { verbose: this.randomBoolean() },\n          ...params\n        }\n      }\n    };\n  }\n\n  /**\n   * Create neural network test data\n   */\n  createNeuralTrainingData(size: number = 100) {\n    return Array.from({ length: size }, () => ({\n      input: Array.from({ length: 3 }, () => this.randomFloat(-1, 1)),\n      output: Array.from({ length: 2 }, () => this.randomFloat(0, 1))\n    }));\n  }\n\n  /**\n   * Create performance test data\n   */\n  createPerformanceData(operations: number = 1000) {\n    return {\n      operations,\n      data: Array.from({ length: operations }, (_, i) => ({\n        id: i,\n        payload: this.generateText(100),\n        timestamp: Date.now() + i,\n        metadata: { index: i, type: 'test' }\n      }))\n    };\n  }\n\n  /**\n   * Create file system test structure\n   */\n  createFileSystemStructure() {\n    return {\n      'src/': {\n        'index.ts': 'export * from \"./lib\";',\n        'lib/': {\n          'core.ts': this.generateCode('typescript'),\n          'utils.ts': this.generateCode('typescript'),\n          'types.ts': 'export interface TestInterface {}'\n        }\n      },\n      'tests/': {\n        'unit/': {\n          'core.test.ts': this.generateTestCode('typescript')\n        },\n        'integration/': {\n          'api.test.ts': this.generateTestCode('typescript')\n        }\n      },\n      'package.json': JSON.stringify({\n        name: 'test-project',\n        version: '1.0.0',\n        scripts: {\n          test: 'jest',\n          build: 'tsc'\n        }\n      }, null, 2)\n    };\n  }\n\n  /**\n   * Create database seed data\n   */\n  createDatabaseSeed() {\n    return {\n      users: this.createUsers(10),\n      projects: Array.from({ length: 5 }, () => this.createProject()),\n      swarms: Array.from({ length: 3 }, () => this.createSwarm())\n    };\n  }\n\n  /**\n   * Reset the random seed for reproducible tests\n   */\n  resetSeed(newSeed?: number) {\n    this.seed = newSeed ?? this.options.seed ?? Date.now();\n    this.initializeRandom();\n  }\n\n  private initializeRandom() {\n    // Simple seeded random number generator (LCG)\n    let seed = this.seed;\n    Math.random = () => {\n      seed = (seed * 9301 + 49297) % 233280;\n      return seed / 233280;\n    };\n  }\n\n  private generateId(): string {\n    return `id-${this.randomInt(100000, 999999)}`;\n  }\n\n  private generateName(): string {\n    const firstNames = ['Alice', 'Bob', 'Carol', 'David', 'Eve', 'Frank', 'Grace', 'Henry'];\n    const lastNames = ['Smith', 'Johnson', 'Williams', 'Brown', 'Jones', 'Garcia', 'Miller', 'Davis'];\n    \n    return `${this.randomChoice(firstNames)} ${this.randomChoice(lastNames)}`;\n  }\n\n  private generateEmail(name: string): string {\n    const domain = this.randomChoice(['example.com', 'test.org', 'demo.net']);\n    const username = name.toLowerCase().replace(' ', '.');\n    return `${username}@${domain}`;\n  }\n\n  private generateProjectName(): string {\n    const adjectives = ['awesome', 'amazing', 'brilliant', 'creative', 'dynamic', 'elegant'];\n    const nouns = ['project', 'app', 'service', 'tool', 'platform', 'system'];\n    \n    return `${this.randomChoice(adjectives)}-${this.randomChoice(nouns)}`;\n  }\n\n  private generateProjectStructure(type: ProjectTestData['type']) {\n    const structures = {\n      typescript: {\n        'src/': { 'index.ts': '', 'types.ts': '', 'utils.ts': '' },\n        'tests/': { 'index.test.ts': '' },\n        'tsconfig.json': '',\n        'package.json': ''\n      },\n      javascript: {\n        'src/': { 'index.js': '', 'utils.js': '' },\n        'tests/': { 'index.test.js': '' },\n        'package.json': ''\n      },\n      python: {\n        'src/': { '__init__.py': '', 'main.py': '', 'utils.py': '' },\n        'tests/': { 'test_main.py': '' },\n        'requirements.txt': '',\n        'setup.py': ''\n      },\n      rust: {\n        'src/': { 'main.rs': '', 'lib.rs': '' },\n        'tests/': { 'integration_test.rs': '' },\n        'Cargo.toml': ''\n      }\n    };\n    \n    return structures[type];\n  }\n\n  private generateDependencies(type: ProjectTestData['type']): string[] {\n    const dependencies = {\n      typescript: ['@types/node', 'typescript', 'jest', '@jest/types'],\n      javascript: ['jest', 'lodash', 'axios'],\n      python: ['pytest', 'numpy', 'requests'],\n      rust: ['serde', 'tokio', 'clap']\n    };\n    \n    return dependencies[type];\n  }\n\n  private generateCapabilities(type: AgentTestData['type']): string[] {\n    const capabilities = {\n      researcher: ['web-search', 'document-analysis', 'data-extraction'],\n      coder: ['code-generation', 'refactoring', 'testing'],\n      analyst: ['data-analysis', 'pattern-recognition', 'reporting'],\n      tester: ['test-generation', 'quality-assurance', 'bug-detection'],\n      coordinator: ['task-management', 'workflow-optimization', 'team-coordination']\n    };\n    \n    return capabilities[type];\n  }\n\n  private generateText(length: number = 50): string {\n    const words = ['lorem', 'ipsum', 'dolor', 'sit', 'amet', 'consectetur', 'adipiscing', 'elit'];\n    const result = [];\n    \n    for (let i = 0; i < length; i++) {\n      result.push(this.randomChoice(words));\n    }\n    \n    return result.join(' ');\n  }\n\n  private generateCode(language: 'typescript' | 'javascript' | 'python' | 'rust'): string {\n    const templates = {\n      typescript: `\nexport function testFunction(input: string): string {\n  return input.toUpperCase();\n}\n\nexport class TestClass {\n  private value: number;\n  \n  constructor(value: number = 0) {\n    this.value = value;\n  }\n  \n  getValue(): number {\n    return this.value;\n  }\n}`,\n      javascript: `\nfunction testFunction(input) {\n  return input.toUpperCase();\n}\n\nclass TestClass {\n  constructor(value = 0) {\n    this.value = value;\n  }\n  \n  getValue() {\n    return this.value;\n  }\n}\n\nmodule.exports = { testFunction, TestClass };`,\n      python: `\ndef test_function(input_str):\n    return input_str.upper()\n\nclass TestClass:\n    def __init__(self, value=0):\n        self.value = value\n    \n    def get_value(self):\n        return self.value`,\n      rust: `\npub fn test_function(input: &str) -> String {\n    input.to_uppercase()\n}\n\npub struct TestStruct {\n    value: i32,\n}\n\nimpl TestStruct {\n    pub fn new(value: i32) -> Self {\n        Self { value }\n    }\n    \n    pub fn get_value(&self) -> i32 {\n        self.value\n    }\n}`\n    };\n    \n    return templates[language];\n  }\n\n  private generateTestCode(language: 'typescript' | 'javascript'): string {\n    const templates = {\n      typescript: `\nimport { testFunction, TestClass } from '../src/index';\n\ndescribe('Test Suite', () => {\n  it('should test function', () => {\n    expect(testFunction('hello')).toBe('HELLO');\n  });\n  \n  it('should test class', () => {\n    const instance = new TestClass(42);\n    expect(instance.getValue()).toBe(42);\n  });\n});`,\n      javascript: `\nconst { testFunction, TestClass } = require('../src/index');\n\ndescribe('Test Suite', () => {\n  it('should test function', () => {\n    expect(testFunction('hello')).toBe('HELLO');\n  });\n  \n  it('should test class', () => {\n    const instance = new TestClass(42);\n    expect(instance.getValue()).toBe(42);\n  });\n});`\n    };\n    \n    return templates[language];\n  }\n\n  private generateTimestamp(): number {\n    const now = Date.now();\n    const oneYear = 365 * 24 * 60 * 60 * 1000;\n    return now - this.randomInt(0, oneYear);\n  }\n\n  private randomInt(min: number, max: number): number {\n    return Math.floor(Math.random() * (max - min + 1)) + min;\n  }\n\n  private randomFloat(min: number, max: number): number {\n    return Math.random() * (max - min) + min;\n  }\n\n  private randomBoolean(): boolean {\n    return Math.random() < 0.5;\n  }\n\n  private randomChoice<T>(array: readonly T[]): T {\n    return array[Math.floor(Math.random() * array.length)];\n  }\n}\n\n// Convenience instance for easy use\nexport const testDataFactory = new TestDataFactory();"],"version":3}