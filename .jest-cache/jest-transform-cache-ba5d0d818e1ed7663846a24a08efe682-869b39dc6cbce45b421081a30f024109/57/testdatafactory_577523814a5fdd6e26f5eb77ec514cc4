730a094f43d7282cea2e88a8550f99ba
/**
 * Test Data Factory - Reproducible Test Data Generation
 *
 * Creates realistic test data for both London and Classical TDD approaches
 */
export class TestDataFactory {
    seed;
    options;
    constructor(options = {}) {
        this.seed = options.seed ?? Date.now();
        this.options = options;
        this.initializeRandom();
    }
    /**
     * Create user test data
     */
    createUser(overrides = {}) {
        const id = this.generateId();
        const name = this.generateName();
        const email = this.generateEmail(name);
        return {
            id,
            name,
            email,
            preferences: {
                theme: this.randomChoice(['light', 'dark', 'auto']),
                language: this.randomChoice(['en', 'es', 'fr', 'de']),
                notifications: this.randomBoolean()
            },
            metadata: {
                createdAt: this.generateTimestamp(),
                lastLogin: this.generateTimestamp(),
                loginCount: this.randomInt(1, 100)
            },
            ...overrides
        };
    }
    /**
     * Create multiple users
     */
    createUsers(count, baseData = {}) {
        return Array.from({ length: count }, (_, index) => this.createUser({ ...baseData, id: `user-${index + 1}` }));
    }
    /**
     * Create project test data
     */
    createProject(overrides = {}) {
        const name = this.generateProjectName();
        const type = this.randomChoice(['typescript', 'javascript', 'python', 'rust']);
        return {
            name,
            path: `/projects/${name}`,
            type,
            structure: this.generateProjectStructure(type),
            dependencies: this.generateDependencies(type),
            ...overrides
        };
    }
    /**
     * Create swarm test data
     */
    createSwarm(overrides = {}) {
        const id = this.generateId();
        const topology = this.randomChoice(['mesh', 'hierarchical', 'ring', 'star']);
        const agentCount = this.randomInt(3, 8);
        return {
            id,
            topology,
            agents: this.createAgents(agentCount),
            configuration: {
                maxAgents: agentCount,
                strategy: this.randomChoice(['balanced', 'specialized', 'adaptive']),
                timeout: this.randomInt(30000, 120000)
            },
            ...overrides
        };
    }
    /**
     * Create agent test data
     */
    createAgent(overrides = {}) {
        const type = this.randomChoice(['researcher', 'coder', 'analyst', 'tester', 'coordinator']);
        return {
            id: this.generateId(),
            type,
            capabilities: this.generateCapabilities(type),
            state: this.randomChoice(['idle', 'working', 'error', 'completed']),
            ...overrides
        };
    }
    /**
     * Create multiple agents
     */
    createAgents(count, baseData = {}) {
        return Array.from({ length: count }, (_, index) => this.createAgent({ ...baseData, id: `agent-${index + 1}` }));
    }
    /**
     * Create MCP message test data
     */
    createMCPMessage(method = 'tools/call', params = {}) {
        return {
            jsonrpc: '2.0',
            id: this.randomInt(1, 1000),
            method,
            params: {
                name: this.randomChoice(['analyze', 'generate', 'optimize', 'test']),
                arguments: {
                    input: this.generateText(),
                    options: { verbose: this.randomBoolean() },
                    ...params
                }
            }
        };
    }
    /**
     * Create neural network test data
     */
    createNeuralTrainingData(size = 100) {
        return Array.from({ length: size }, () => ({
            input: Array.from({ length: 3 }, () => this.randomFloat(-1, 1)),
            output: Array.from({ length: 2 }, () => this.randomFloat(0, 1))
        }));
    }
    /**
     * Create performance test data
     */
    createPerformanceData(operations = 1000) {
        return {
            operations,
            data: Array.from({ length: operations }, (_, i) => ({
                id: i,
                payload: this.generateText(100),
                timestamp: Date.now() + i,
                metadata: { index: i, type: 'test' }
            }))
        };
    }
    /**
     * Create file system test structure
     */
    createFileSystemStructure() {
        return {
            'src/': {
                'index.ts': 'export * from "./lib";',
                'lib/': {
                    'core.ts': this.generateCode('typescript'),
                    'utils.ts': this.generateCode('typescript'),
                    'types.ts': 'export interface TestInterface {}'
                }
            },
            'tests/': {
                'unit/': {
                    'core.test.ts': this.generateTestCode('typescript')
                },
                'integration/': {
                    'api.test.ts': this.generateTestCode('typescript')
                }
            },
            'package.json': JSON.stringify({
                name: 'test-project',
                version: '1.0.0',
                scripts: {
                    test: 'jest',
                    build: 'tsc'
                }
            }, null, 2)
        };
    }
    /**
     * Create database seed data
     */
    createDatabaseSeed() {
        return {
            users: this.createUsers(10),
            projects: Array.from({ length: 5 }, () => this.createProject()),
            swarms: Array.from({ length: 3 }, () => this.createSwarm())
        };
    }
    /**
     * Reset the random seed for reproducible tests
     */
    resetSeed(newSeed) {
        this.seed = newSeed ?? this.options.seed ?? Date.now();
        this.initializeRandom();
    }
    initializeRandom() {
        // Simple seeded random number generator (LCG)
        let seed = this.seed;
        Math.random = () => {
            seed = (seed * 9301 + 49297) % 233280;
            return seed / 233280;
        };
    }
    generateId() {
        return `id-${this.randomInt(100000, 999999)}`;
    }
    generateName() {
        const firstNames = ['Alice', 'Bob', 'Carol', 'David', 'Eve', 'Frank', 'Grace', 'Henry'];
        const lastNames = ['Smith', 'Johnson', 'Williams', 'Brown', 'Jones', 'Garcia', 'Miller', 'Davis'];
        return `${this.randomChoice(firstNames)} ${this.randomChoice(lastNames)}`;
    }
    generateEmail(name) {
        const domain = this.randomChoice(['example.com', 'test.org', 'demo.net']);
        const username = name.toLowerCase().replace(' ', '.');
        return `${username}@${domain}`;
    }
    generateProjectName() {
        const adjectives = ['awesome', 'amazing', 'brilliant', 'creative', 'dynamic', 'elegant'];
        const nouns = ['project', 'app', 'service', 'tool', 'platform', 'system'];
        return `${this.randomChoice(adjectives)}-${this.randomChoice(nouns)}`;
    }
    generateProjectStructure(type) {
        const structures = {
            typescript: {
                'src/': { 'index.ts': '', 'types.ts': '', 'utils.ts': '' },
                'tests/': { 'index.test.ts': '' },
                'tsconfig.json': '',
                'package.json': ''
            },
            javascript: {
                'src/': { 'index.js': '', 'utils.js': '' },
                'tests/': { 'index.test.js': '' },
                'package.json': ''
            },
            python: {
                'src/': { '__init__.py': '', 'main.py': '', 'utils.py': '' },
                'tests/': { 'test_main.py': '' },
                'requirements.txt': '',
                'setup.py': ''
            },
            rust: {
                'src/': { 'main.rs': '', 'lib.rs': '' },
                'tests/': { 'integration_test.rs': '' },
                'Cargo.toml': ''
            }
        };
        return structures[type];
    }
    generateDependencies(type) {
        const dependencies = {
            typescript: ['@types/node', 'typescript', 'jest', '@jest/types'],
            javascript: ['jest', 'lodash', 'axios'],
            python: ['pytest', 'numpy', 'requests'],
            rust: ['serde', 'tokio', 'clap']
        };
        return dependencies[type];
    }
    generateCapabilities(type) {
        const capabilities = {
            researcher: ['web-search', 'document-analysis', 'data-extraction'],
            coder: ['code-generation', 'refactoring', 'testing'],
            analyst: ['data-analysis', 'pattern-recognition', 'reporting'],
            tester: ['test-generation', 'quality-assurance', 'bug-detection'],
            coordinator: ['task-management', 'workflow-optimization', 'team-coordination']
        };
        return capabilities[type];
    }
    generateText(length = 50) {
        const words = ['lorem', 'ipsum', 'dolor', 'sit', 'amet', 'consectetur', 'adipiscing', 'elit'];
        const result = [];
        for (let i = 0; i < length; i++) {
            result.push(this.randomChoice(words));
        }
        return result.join(' ');
    }
    generateCode(language) {
        const templates = {
            typescript: `
export function testFunction(input: string): string {
  return input.toUpperCase();
}

export class TestClass {
  private value: number;
  
  constructor(value: number = 0) {
    this.value = value;
  }
  
  getValue(): number {
    return this.value;
  }
}`,
            javascript: `
function testFunction(input) {
  return input.toUpperCase();
}

class TestClass {
  constructor(value = 0) {
    this.value = value;
  }
  
  getValue() {
    return this.value;
  }
}

module.exports = { testFunction, TestClass };`,
            python: `
def test_function(input_str):
    return input_str.upper()

class TestClass:
    def __init__(self, value=0):
        self.value = value
    
    def get_value(self):
        return self.value`,
            rust: `
pub fn test_function(input: &str) -> String {
    input.to_uppercase()
}

pub struct TestStruct {
    value: i32,
}

impl TestStruct {
    pub fn new(value: i32) -> Self {
        Self { value }
    }
    
    pub fn get_value(&self) -> i32 {
        self.value
    }
}`
        };
        return templates[language];
    }
    generateTestCode(language) {
        const templates = {
            typescript: `
import { testFunction, TestClass } from '../src/index';

describe('Test Suite', () => {
  it('should test function', () => {
    expect(testFunction('hello')).toBe('HELLO');
  });
  
  it('should test class', () => {
    const instance = new TestClass(42);
    expect(instance.getValue()).toBe(42);
  });
});`,
            javascript: `
const { testFunction, TestClass } = require('../src/index');

describe('Test Suite', () => {
  it('should test function', () => {
    expect(testFunction('hello')).toBe('HELLO');
  });
  
  it('should test class', () => {
    const instance = new TestClass(42);
    expect(instance.getValue()).toBe(42);
  });
});`
        };
        return templates[language];
    }
    generateTimestamp() {
        const now = Date.now();
        const oneYear = 365 * 24 * 60 * 60 * 1000;
        return now - this.randomInt(0, oneYear);
    }
    randomInt(min, max) {
        return Math.floor(Math.random() * (max - min + 1)) + min;
    }
    randomFloat(min, max) {
        return Math.random() * (max - min) + min;
    }
    randomBoolean() {
        return Math.random() < 0.5;
    }
    randomChoice(array) {
        return array[Math.floor(Math.random() * array.length)];
    }
}
// Convenience instance for easy use
export const testDataFactory = new TestDataFactory();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,