70a4de59c448eefed6779e4a2f6f43d4
/**
 * File System Test Helper - File System Testing Utilities
 *
 * Comprehensive file system testing support for both mocked and real environments
 */
import { promises as fs } from 'fs';
import { join, dirname, resolve } from 'path';
import { tmpdir } from 'os';
export class RealFileSystemTestHelper {
    tempDirs = [];
    createdFiles = [];
    watchers = [];
    async createTempDir(prefix = 'test') {
        const tempPath = join(tmpdir(), `claude-test-${prefix}-${Date.now()}-${Math.random().toString(36).substring(2)}`);
        await fs.mkdir(tempPath, { recursive: true });
        this.tempDirs.push(tempPath);
        return tempPath;
    }
    async createFile(path, content) {
        const dir = dirname(path);
        await fs.mkdir(dir, { recursive: true });
        await fs.writeFile(path, content, 'utf8');
        this.createdFiles.push(path);
    }
    async createDirectory(path) {
        await fs.mkdir(path, { recursive: true });
        this.tempDirs.push(path);
    }
    async readFile(path) {
        return fs.readFile(path, 'utf8');
    }
    async fileExists(path) {
        try {
            await fs.access(path);
            return true;
        }
        catch {
            return false;
        }
    }
    async deleteFile(path) {
        try {
            await fs.unlink(path);
            const index = this.createdFiles.indexOf(path);
            if (index > -1) {
                this.createdFiles.splice(index, 1);
            }
        }
        catch (error) {
            // File might not exist
        }
    }
    async deleteDirectory(path) {
        try {
            await fs.rm(path, { recursive: true, force: true });
            const index = this.tempDirs.indexOf(path);
            if (index > -1) {
                this.tempDirs.splice(index, 1);
            }
        }
        catch (error) {
            // Directory might not exist
        }
    }
    async listFiles(path) {
        try {
            const entries = await fs.readdir(path, { withFileTypes: true });
            return entries
                .filter(entry => entry.isFile())
                .map(entry => join(path, entry.name));
        }
        catch {
            return [];
        }
    }
    async copyFile(src, dest) {
        const destDir = dirname(dest);
        await fs.mkdir(destDir, { recursive: true });
        await fs.copyFile(src, dest);
        this.createdFiles.push(dest);
    }
    async moveFile(src, dest) {
        const destDir = dirname(dest);
        await fs.mkdir(destDir, { recursive: true });
        await fs.rename(src, dest);
        const srcIndex = this.createdFiles.indexOf(src);
        if (srcIndex > -1) {
            this.createdFiles[srcIndex] = dest;
        }
        else {
            this.createdFiles.push(dest);
        }
    }
    async getFileStats(path) {
        const stats = await fs.stat(path);
        return {
            size: stats.size,
            mtime: stats.mtime,
            ctime: stats.ctime,
            isFile: stats.isFile(),
            isDirectory: stats.isDirectory(),
            mode: stats.mode
        };
    }
    watchFile(path, callback) {
        let watcher = null;
        const startWatching = async () => {
            try {
                const { watch } = await import('chokidar');
                watcher = watch(path);
                watcher.on('all', (event) => callback(event));
            }
            catch {
                // Fallback to basic fs.watch if chokidar not available
                try {
                    watcher = fs.watch(path, (event) => callback(event));
                }
                catch {
                    // File watching not available
                }
            }
        };
        startWatching();
        const stopWatching = () => {
            if (watcher) {
                if (typeof watcher.close === 'function') {
                    watcher.close();
                }
                else if (typeof watcher.unwatch === 'function') {
                    watcher.unwatch(path);
                }
            }
        };
        this.watchers.push(stopWatching);
        return stopWatching;
    }
    async createSymlink(target, link) {
        const linkDir = dirname(link);
        await fs.mkdir(linkDir, { recursive: true });
        await fs.symlink(target, link);
        this.createdFiles.push(link);
    }
    async cleanup() {
        // Stop all watchers
        this.watchers.forEach(stop => {
            try {
                stop();
            }
            catch {
                // Ignore errors when stopping watchers
            }
        });
        this.watchers = [];
        // Clean up created files
        await Promise.allSettled(this.createdFiles.map(file => this.deleteFile(file)));
        this.createdFiles = [];
        // Clean up temp directories
        await Promise.allSettled(this.tempDirs.map(dir => this.deleteDirectory(dir)));
        this.tempDirs = [];
    }
}
export class MockFileSystemTestHelper {
    files = new Map();
    directories = new Set();
    watchers = new Map();
    async createTempDir(prefix = 'test') {
        const tempPath = `/mock/temp/${prefix}-${Date.now()}`;
        this.directories.add(tempPath);
        return tempPath;
    }
    async createFile(path, content) {
        const normalizedPath = this.normalizePath(path);
        this.files.set(normalizedPath, content);
        // Ensure parent directories exist
        const dir = dirname(normalizedPath);
        if (dir !== normalizedPath) {
            this.directories.add(dir);
        }
        this.triggerWatchers(normalizedPath, 'add');
    }
    async createDirectory(path) {
        const normalizedPath = this.normalizePath(path);
        this.directories.add(normalizedPath);
    }
    async readFile(path) {
        const normalizedPath = this.normalizePath(path);
        const content = this.files.get(normalizedPath);
        if (content === undefined) {
            throw new Error(`ENOENT: no such file or directory, open '${path}'`);
        }
        return content;
    }
    async fileExists(path) {
        const normalizedPath = this.normalizePath(path);
        return this.files.has(normalizedPath) || this.directories.has(normalizedPath);
    }
    async deleteFile(path) {
        const normalizedPath = this.normalizePath(path);
        if (this.files.delete(normalizedPath)) {
            this.triggerWatchers(normalizedPath, 'unlink');
        }
    }
    async deleteDirectory(path) {
        const normalizedPath = this.normalizePath(path);
        // Remove the directory
        this.directories.delete(normalizedPath);
        // Remove all files and subdirectories under this path
        const pathPrefix = normalizedPath + '/';
        for (const filePath of this.files.keys()) {
            if (filePath.startsWith(pathPrefix)) {
                this.files.delete(filePath);
            }
        }
        for (const dirPath of this.directories) {
            if (dirPath.startsWith(pathPrefix)) {
                this.directories.delete(dirPath);
            }
        }
    }
    async listFiles(path) {
        const normalizedPath = this.normalizePath(path);
        const pathPrefix = normalizedPath === '/' ? '' : normalizedPath + '/';
        const files = [];
        for (const filePath of this.files.keys()) {
            if (filePath.startsWith(pathPrefix)) {
                const relativePath = filePath.substring(pathPrefix.length);
                if (relativePath && !relativePath.includes('/')) {
                    files.push(filePath);
                }
            }
        }
        return files.sort();
    }
    async copyFile(src, dest) {
        const content = await this.readFile(src);
        await this.createFile(dest, content);
    }
    async moveFile(src, dest) {
        const content = await this.readFile(src);
        await this.createFile(dest, content);
        await this.deleteFile(src);
    }
    async getFileStats(path) {
        const normalizedPath = this.normalizePath(path);
        if (!this.fileExists(normalizedPath)) {
            throw new Error(`ENOENT: no such file or directory, stat '${path}'`);
        }
        const isFile = this.files.has(normalizedPath);
        const isDirectory = this.directories.has(normalizedPath);
        const content = this.files.get(normalizedPath) || '';
        return {
            size: content.length,
            mtime: new Date(),
            ctime: new Date(),
            isFile,
            isDirectory,
            mode: isFile ? 0o644 : 0o755
        };
    }
    watchFile(path, callback) {
        const normalizedPath = this.normalizePath(path);
        if (!this.watchers.has(normalizedPath)) {
            this.watchers.set(normalizedPath, []);
        }
        this.watchers.get(normalizedPath).push(callback);
        return () => {
            const callbacks = this.watchers.get(normalizedPath);
            if (callbacks) {
                const index = callbacks.indexOf(callback);
                if (index > -1) {
                    callbacks.splice(index, 1);
                }
                if (callbacks.length === 0) {
                    this.watchers.delete(normalizedPath);
                }
            }
        };
    }
    async createSymlink(target, link) {
        // For mock filesystem, just create a file with special content
        await this.createFile(link, `__SYMLINK__:${target}`);
    }
    async cleanup() {
        this.files.clear();
        this.directories.clear();
        this.watchers.clear();
    }
    // Mock-specific methods
    /**
     * Get all files in the mock filesystem
     */
    getAllFiles() {
        const result = {};
        for (const [path, content] of this.files.entries()) {
            result[path] = content;
        }
        return result;
    }
    /**
     * Get all directories in the mock filesystem
     */
    getAllDirectories() {
        return Array.from(this.directories).sort();
    }
    /**
     * Simulate file system events
     */
    simulateFileEvent(path, event) {
        this.triggerWatchers(path, event);
    }
    normalizePath(path) {
        return resolve(path).replace(/\\/g, '/');
    }
    triggerWatchers(path, event) {
        const callbacks = this.watchers.get(path);
        if (callbacks) {
            callbacks.forEach(callback => {
                try {
                    callback(event);
                }
                catch (error) {
                    // Ignore callback errors
                }
            });
        }
    }
}
// Factory functions
export function createRealFileSystemHelper() {
    return new RealFileSystemTestHelper();
}
export function createMockFileSystemHelper() {
    return new MockFileSystemTestHelper();
}
// Helper functions for common patterns
export async function createTestProject(helper, projectName, files) {
    const projectDir = await helper.createTempDir(projectName);
    for (const [filePath, content] of Object.entries(files)) {
        const fullPath = join(projectDir, filePath);
        await helper.createFile(fullPath, content);
    }
    return projectDir;
}
export async function createTestWorkspace(helper, workspaceName) {
    const workspaceDir = await helper.createTempDir(workspaceName);
    const srcDir = join(workspaceDir, 'src');
    const testDir = join(workspaceDir, 'tests');
    const configDir = join(workspaceDir, 'config');
    await Promise.all([
        helper.createDirectory(srcDir),
        helper.createDirectory(testDir),
        helper.createDirectory(configDir)
    ]);
    return { workspaceDir, srcDir, testDir, configDir };
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,