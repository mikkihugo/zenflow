{"file":"/home/mhugo/code/claude-code-flow/src/__tests__/helpers/filesystem-test-helper.ts","mappings":"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","names":[],"sources":["/home/mhugo/code/claude-code-flow/src/__tests__/helpers/filesystem-test-helper.ts"],"sourcesContent":["/**\n * File System Test Helper - File System Testing Utilities\n * \n * Comprehensive file system testing support for both mocked and real environments\n */\n\nimport { promises as fs } from 'fs';\nimport { join, dirname, relative, resolve } from 'path';\nimport { tmpdir } from 'os';\n\nexport interface FileSystemTestHelper {\n  createTempDir(prefix?: string): Promise<string>;\n  createFile(path: string, content: string): Promise<void>;\n  createDirectory(path: string): Promise<void>;\n  readFile(path: string): Promise<string>;\n  fileExists(path: string): Promise<boolean>;\n  deleteFile(path: string): Promise<void>;\n  deleteDirectory(path: string): Promise<void>;\n  listFiles(path: string): Promise<string[]>;\n  copyFile(src: string, dest: string): Promise<void>;\n  moveFile(src: string, dest: string): Promise<void>;\n  getFileStats(path: string): Promise<any>;\n  watchFile(path: string, callback: (event: string) => void): () => void;\n  createSymlink(target: string, link: string): Promise<void>;\n  cleanup(): Promise<void>;\n}\n\nexport class RealFileSystemTestHelper implements FileSystemTestHelper {\n  private tempDirs: string[] = [];\n  private createdFiles: string[] = [];\n  private watchers: Array<() => void> = [];\n\n  async createTempDir(prefix: string = 'test'): Promise<string> {\n    const tempPath = join(\n      tmpdir(), \n      `claude-test-${prefix}-${Date.now()}-${Math.random().toString(36).substring(2)}`\n    );\n    \n    await fs.mkdir(tempPath, { recursive: true });\n    this.tempDirs.push(tempPath);\n    return tempPath;\n  }\n\n  async createFile(path: string, content: string): Promise<void> {\n    const dir = dirname(path);\n    await fs.mkdir(dir, { recursive: true });\n    await fs.writeFile(path, content, 'utf8');\n    this.createdFiles.push(path);\n  }\n\n  async createDirectory(path: string): Promise<void> {\n    await fs.mkdir(path, { recursive: true });\n    this.tempDirs.push(path);\n  }\n\n  async readFile(path: string): Promise<string> {\n    return fs.readFile(path, 'utf8');\n  }\n\n  async fileExists(path: string): Promise<boolean> {\n    try {\n      await fs.access(path);\n      return true;\n    } catch {\n      return false;\n    }\n  }\n\n  async deleteFile(path: string): Promise<void> {\n    try {\n      await fs.unlink(path);\n      const index = this.createdFiles.indexOf(path);\n      if (index > -1) {\n        this.createdFiles.splice(index, 1);\n      }\n    } catch (error) {\n      // File might not exist\n    }\n  }\n\n  async deleteDirectory(path: string): Promise<void> {\n    try {\n      await fs.rm(path, { recursive: true, force: true });\n      const index = this.tempDirs.indexOf(path);\n      if (index > -1) {\n        this.tempDirs.splice(index, 1);\n      }\n    } catch (error) {\n      // Directory might not exist\n    }\n  }\n\n  async listFiles(path: string): Promise<string[]> {\n    try {\n      const entries = await fs.readdir(path, { withFileTypes: true });\n      return entries\n        .filter(entry => entry.isFile())\n        .map(entry => join(path, entry.name));\n    } catch {\n      return [];\n    }\n  }\n\n  async copyFile(src: string, dest: string): Promise<void> {\n    const destDir = dirname(dest);\n    await fs.mkdir(destDir, { recursive: true });\n    await fs.copyFile(src, dest);\n    this.createdFiles.push(dest);\n  }\n\n  async moveFile(src: string, dest: string): Promise<void> {\n    const destDir = dirname(dest);\n    await fs.mkdir(destDir, { recursive: true });\n    await fs.rename(src, dest);\n    \n    const srcIndex = this.createdFiles.indexOf(src);\n    if (srcIndex > -1) {\n      this.createdFiles[srcIndex] = dest;\n    } else {\n      this.createdFiles.push(dest);\n    }\n  }\n\n  async getFileStats(path: string): Promise<any> {\n    const stats = await fs.stat(path);\n    return {\n      size: stats.size,\n      mtime: stats.mtime,\n      ctime: stats.ctime,\n      isFile: stats.isFile(),\n      isDirectory: stats.isDirectory(),\n      mode: stats.mode\n    };\n  }\n\n  watchFile(path: string, callback: (event: string) => void): () => void {\n    let watcher: any = null;\n    \n    const startWatching = async () => {\n      try {\n        const { watch } = await import('chokidar');\n        watcher = watch(path);\n        watcher.on('all', (event: string) => callback(event));\n      } catch {\n        // Fallback to basic fs.watch if chokidar not available\n        try {\n          watcher = fs.watch(path, (event) => callback(event));\n        } catch {\n          // File watching not available\n        }\n      }\n    };\n\n    startWatching();\n\n    const stopWatching = () => {\n      if (watcher) {\n        if (typeof watcher.close === 'function') {\n          watcher.close();\n        } else if (typeof watcher.unwatch === 'function') {\n          watcher.unwatch(path);\n        }\n      }\n    };\n\n    this.watchers.push(stopWatching);\n    return stopWatching;\n  }\n\n  async createSymlink(target: string, link: string): Promise<void> {\n    const linkDir = dirname(link);\n    await fs.mkdir(linkDir, { recursive: true });\n    await fs.symlink(target, link);\n    this.createdFiles.push(link);\n  }\n\n  async cleanup(): Promise<void> {\n    // Stop all watchers\n    this.watchers.forEach(stop => {\n      try {\n        stop();\n      } catch {\n        // Ignore errors when stopping watchers\n      }\n    });\n    this.watchers = [];\n\n    // Clean up created files\n    await Promise.allSettled(\n      this.createdFiles.map(file => this.deleteFile(file))\n    );\n    this.createdFiles = [];\n\n    // Clean up temp directories\n    await Promise.allSettled(\n      this.tempDirs.map(dir => this.deleteDirectory(dir))\n    );\n    this.tempDirs = [];\n  }\n}\n\nexport class MockFileSystemTestHelper implements FileSystemTestHelper {\n  private files = new Map<string, string>();\n  private directories = new Set<string>();\n  private watchers = new Map<string, Array<(event: string) => void>>();\n\n  async createTempDir(prefix: string = 'test'): Promise<string> {\n    const tempPath = `/mock/temp/${prefix}-${Date.now()}`;\n    this.directories.add(tempPath);\n    return tempPath;\n  }\n\n  async createFile(path: string, content: string): Promise<void> {\n    const normalizedPath = this.normalizePath(path);\n    this.files.set(normalizedPath, content);\n    \n    // Ensure parent directories exist\n    const dir = dirname(normalizedPath);\n    if (dir !== normalizedPath) {\n      this.directories.add(dir);\n    }\n\n    this.triggerWatchers(normalizedPath, 'add');\n  }\n\n  async createDirectory(path: string): Promise<void> {\n    const normalizedPath = this.normalizePath(path);\n    this.directories.add(normalizedPath);\n  }\n\n  async readFile(path: string): Promise<string> {\n    const normalizedPath = this.normalizePath(path);\n    const content = this.files.get(normalizedPath);\n    \n    if (content === undefined) {\n      throw new Error(`ENOENT: no such file or directory, open '${path}'`);\n    }\n    \n    return content;\n  }\n\n  async fileExists(path: string): Promise<boolean> {\n    const normalizedPath = this.normalizePath(path);\n    return this.files.has(normalizedPath) || this.directories.has(normalizedPath);\n  }\n\n  async deleteFile(path: string): Promise<void> {\n    const normalizedPath = this.normalizePath(path);\n    if (this.files.delete(normalizedPath)) {\n      this.triggerWatchers(normalizedPath, 'unlink');\n    }\n  }\n\n  async deleteDirectory(path: string): Promise<void> {\n    const normalizedPath = this.normalizePath(path);\n    \n    // Remove the directory\n    this.directories.delete(normalizedPath);\n    \n    // Remove all files and subdirectories under this path\n    const pathPrefix = normalizedPath + '/';\n    \n    for (const filePath of this.files.keys()) {\n      if (filePath.startsWith(pathPrefix)) {\n        this.files.delete(filePath);\n      }\n    }\n    \n    for (const dirPath of this.directories) {\n      if (dirPath.startsWith(pathPrefix)) {\n        this.directories.delete(dirPath);\n      }\n    }\n  }\n\n  async listFiles(path: string): Promise<string[]> {\n    const normalizedPath = this.normalizePath(path);\n    const pathPrefix = normalizedPath === '/' ? '' : normalizedPath + '/';\n    const files: string[] = [];\n    \n    for (const filePath of this.files.keys()) {\n      if (filePath.startsWith(pathPrefix)) {\n        const relativePath = filePath.substring(pathPrefix.length);\n        if (relativePath && !relativePath.includes('/')) {\n          files.push(filePath);\n        }\n      }\n    }\n    \n    return files.sort();\n  }\n\n  async copyFile(src: string, dest: string): Promise<void> {\n    const content = await this.readFile(src);\n    await this.createFile(dest, content);\n  }\n\n  async moveFile(src: string, dest: string): Promise<void> {\n    const content = await this.readFile(src);\n    await this.createFile(dest, content);\n    await this.deleteFile(src);\n  }\n\n  async getFileStats(path: string): Promise<any> {\n    const normalizedPath = this.normalizePath(path);\n    \n    if (!this.fileExists(normalizedPath)) {\n      throw new Error(`ENOENT: no such file or directory, stat '${path}'`);\n    }\n    \n    const isFile = this.files.has(normalizedPath);\n    const isDirectory = this.directories.has(normalizedPath);\n    const content = this.files.get(normalizedPath) || '';\n    \n    return {\n      size: content.length,\n      mtime: new Date(),\n      ctime: new Date(),\n      isFile,\n      isDirectory,\n      mode: isFile ? 0o644 : 0o755\n    };\n  }\n\n  watchFile(path: string, callback: (event: string) => void): () => void {\n    const normalizedPath = this.normalizePath(path);\n    \n    if (!this.watchers.has(normalizedPath)) {\n      this.watchers.set(normalizedPath, []);\n    }\n    \n    this.watchers.get(normalizedPath)!.push(callback);\n    \n    return () => {\n      const callbacks = this.watchers.get(normalizedPath);\n      if (callbacks) {\n        const index = callbacks.indexOf(callback);\n        if (index > -1) {\n          callbacks.splice(index, 1);\n        }\n        \n        if (callbacks.length === 0) {\n          this.watchers.delete(normalizedPath);\n        }\n      }\n    };\n  }\n\n  async createSymlink(target: string, link: string): Promise<void> {\n    // For mock filesystem, just create a file with special content\n    await this.createFile(link, `__SYMLINK__:${target}`);\n  }\n\n  async cleanup(): Promise<void> {\n    this.files.clear();\n    this.directories.clear();\n    this.watchers.clear();\n  }\n\n  // Mock-specific methods\n  \n  /**\n   * Get all files in the mock filesystem\n   */\n  getAllFiles(): Record<string, string> {\n    const result: Record<string, string> = {};\n    for (const [path, content] of this.files.entries()) {\n      result[path] = content;\n    }\n    return result;\n  }\n\n  /**\n   * Get all directories in the mock filesystem\n   */\n  getAllDirectories(): string[] {\n    return Array.from(this.directories).sort();\n  }\n\n  /**\n   * Simulate file system events\n   */\n  simulateFileEvent(path: string, event: string): void {\n    this.triggerWatchers(path, event);\n  }\n\n  private normalizePath(path: string): string {\n    return resolve(path).replace(/\\\\/g, '/');\n  }\n\n  private triggerWatchers(path: string, event: string): void {\n    const callbacks = this.watchers.get(path);\n    if (callbacks) {\n      callbacks.forEach(callback => {\n        try {\n          callback(event);\n        } catch (error) {\n          // Ignore callback errors\n        }\n      });\n    }\n  }\n}\n\n// Factory functions\nexport function createRealFileSystemHelper(): FileSystemTestHelper {\n  return new RealFileSystemTestHelper();\n}\n\nexport function createMockFileSystemHelper(): FileSystemTestHelper {\n  return new MockFileSystemTestHelper();\n}\n\n// Helper functions for common patterns\nexport async function createTestProject(\n  helper: FileSystemTestHelper,\n  projectName: string,\n  files: Record<string, string>\n): Promise<string> {\n  const projectDir = await helper.createTempDir(projectName);\n  \n  for (const [filePath, content] of Object.entries(files)) {\n    const fullPath = join(projectDir, filePath);\n    await helper.createFile(fullPath, content);\n  }\n  \n  return projectDir;\n}\n\nexport async function createTestWorkspace(\n  helper: FileSystemTestHelper,\n  workspaceName: string\n): Promise<{\n  workspaceDir: string;\n  srcDir: string;\n  testDir: string;\n  configDir: string;\n}> {\n  const workspaceDir = await helper.createTempDir(workspaceName);\n  const srcDir = join(workspaceDir, 'src');\n  const testDir = join(workspaceDir, 'tests');\n  const configDir = join(workspaceDir, 'config');\n  \n  await Promise.all([\n    helper.createDirectory(srcDir),\n    helper.createDirectory(testDir),\n    helper.createDirectory(configDir)\n  ]);\n  \n  return { workspaceDir, srcDir, testDir, configDir };\n}"],"version":3}