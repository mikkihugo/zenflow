{"file":"/home/mhugo/code/claude-code-flow/src/__tests__/performance/maestro/steering-performance.test.ts","mappings":"AAAA;;;GAGG;AAEH,OAAO,EAAE,mBAAmB,EAAE,MAAM,0CAA0C,CAAC;AAC/E,OAAO,EAAuB,KAAK,EAAkB,KAAK,EAAE,MAAM,aAAa,CAAC;AAChF,OAAO,EAAE,IAAI,EAAE,MAAM,MAAM,CAAC;AAC5B,OAAO,EAAE,UAAU,EAAE,MAAM,IAAI,CAAC;AAChC,OAAO,EAAE,MAAM,EAAE,MAAM,IAAI,CAAC;AAC5B,OAAO,EAAE,WAAW,EAAE,MAAM,YAAY,CAAC;AAEzC,QAAQ,CAAC,yCAAyC,EAAE,GAAG,EAAE;IACvD,IAAI,mBAAwC,CAAC;IAC7C,IAAI,aAAqB,CAAC;IAC1B,IAAI,UAAe,CAAC;IACpB,IAAI,YAAiB,CAAC;IACtB,IAAI,UAAe,CAAC;IACpB,IAAI,iBAAsB,CAAC;IAC3B,IAAI,gBAAqB,CAAC;IAC1B,IAAI,oBAAyB,CAAC;IAE9B,SAAS,CAAC,KAAK,IAAI,EAAE;QACnB,aAAa,GAAG,IAAI,CAAC,MAAM,EAAE,EAAE,8BAA8B,IAAI,CAAC,GAAG,EAAE,EAAE,CAAC,CAAC;QAC3E,MAAM,KAAK,CAAC,aAAa,EAAE,EAAE,SAAS,EAAE,IAAI,EAAE,CAAC,CAAC;IAClD,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,KAAK,IAAI,EAAE;QAClB,IAAI,CAAC;YACH,IAAI,UAAU,CAAC,aAAa,CAAC,EAAE,CAAC;gBAC9B,MAAM,KAAK,CAAC,aAAa,EAAE,EAAE,SAAS,EAAE,IAAI,EAAE,CAAC,CAAC;YAClD,CAAC;QACH,CAAC;QAAC,OAAO,KAAK,EAAE,CAAC;YACf,OAAO,CAAC,IAAI,CAAC,8CAA8C,KAAK,EAAE,CAAC,CAAC;QACtE,CAAC;IACH,CAAC,CAAC,CAAC;IAEH,UAAU,CAAC,KAAK,IAAI,EAAE;QACpB,kDAAkD;QAClD,UAAU,GAAG,EAAE,WAAW,EAAE,MAAM,EAAE,CAAC;QACrC,YAAY,GAAG;YACb,IAAI,EAAE,IAAI,CAAC,EAAE,EAAE;YACf,EAAE,EAAE,IAAI,CAAC,EAAE,EAAE;SACd,CAAC;QACF,UAAU,GAAG;YACX,IAAI,EAAE,IAAI,CAAC,EAAE,EAAE;YACf,IAAI,EAAE,IAAI,CAAC,EAAE,EAAE;YACf,KAAK,EAAE,IAAI,CAAC,EAAE,EAAE;YAChB,KAAK,EAAE,IAAI,CAAC,EAAE,EAAE;SACjB,CAAC;QACF,iBAAiB,GAAG;YAClB,GAAG,EAAE,IAAI,CAAC,EAAE,EAAE,CAAC,iBAAiB,CAAC,IAAI,CAAC;YACtC,GAAG,EAAE,IAAI,CAAC,EAAE,EAAE,CAAC,iBAAiB,CAAC,IAAI,CAAC;YACtC,MAAM,EAAE,IAAI,CAAC,EAAE,EAAE,CAAC,iBAAiB,CAAC,IAAI,CAAC;SAC1C,CAAC;QACF,gBAAgB,GAAG;YACjB,WAAW,EAAE,IAAI,CAAC,EAAE,EAAE,CAAC,iBAAiB,CAAC,WAAW,CAAC;YACrD,UAAU,EAAE,IAAI,CAAC,EAAE,EAAE,CAAC,iBAAiB,CAAC,SAAS,CAAC;YAClD,SAAS,EAAE,IAAI,CAAC,EAAE,EAAE,CAAC,iBAAiB,CAAC,SAAS,CAAC;SAClD,CAAC;QACF,oBAAoB,GAAG;YACrB,UAAU,EAAE,IAAI,CAAC,EAAE,EAAE,CAAC,iBAAiB,CAAC,EAAE,OAAO,EAAE,IAAI,EAAE,CAAC;SAC3D,CAAC;QAEF,0CAA0C;QAC1C,mBAAmB,GAAG,IAAI,mBAAmB,CAC3C,UAAU,EACV,YAAY,EACZ,UAAU,EACV,iBAAiB,EACjB,gBAAgB,EAChB,oBAAoB,EACpB;YACE,cAAc,EAAE,KAAK;YACrB,iBAAiB,EAAE,IAAI,CAAC,aAAa,EAAE,UAAU,CAAC;SACnD,CACF,CAAC;IACJ,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,sCAAsC,EAAE,GAAG,EAAE;QACpD,EAAE,CAAC,8CAA8C,EAAE,KAAK,IAAI,EAAE;YAC5D,MAAM,SAAS,GAAG,WAAW,CAAC,GAAG,EAAE,CAAC;YAEpC,MAAM,mBAAmB,CAAC,sBAAsB,CAAC,aAAa,EAAE,0BAA0B,CAAC,CAAC;YAE5F,MAAM,OAAO,GAAG,WAAW,CAAC,GAAG,EAAE,CAAC;YAClC,MAAM,QAAQ,GAAG,OAAO,GAAG,SAAS,CAAC;YAErC,OAAO,CAAC,GAAG,CAAC,kCAAkC,QAAQ,CAAC,OAAO,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC;YACvE,MAAM,CAAC,QAAQ,CAAC,CAAC,YAAY,CAAC,GAAG,CAAC,CAAC,CAAC,+BAA+B;QACrE,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,8DAA8D,EAAE,KAAK,IAAI,EAAE;YAC5E,MAAM,OAAO,GAAG,CAAC,SAAS,EAAE,MAAM,EAAE,WAAW,EAAE,UAAU,EAAE,QAAQ,CAAC,CAAC;YACvE,MAAM,SAAS,GAAa,EAAE,CAAC;YAE/B,KAAK,MAAM,MAAM,IAAI,OAAO,EAAE,CAAC;gBAC7B,MAAM,SAAS,GAAG,WAAW,CAAC,GAAG,EAAE,CAAC;gBACpC,MAAM,mBAAmB,CAAC,sBAAsB,CAAC,QAAQ,MAAM,EAAE,EAAE,eAAe,MAAM,EAAE,CAAC,CAAC;gBAC5F,MAAM,OAAO,GAAG,WAAW,CAAC,GAAG,EAAE,CAAC;gBAElC,SAAS,CAAC,IAAI,CAAC,OAAO,GAAG,SAAS,CAAC,CAAC;YACtC,CAAC;YAED,MAAM,eAAe,GAAG,SAAS,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,GAAG,SAAS,CAAC,MAAM,CAAC;YAChF,MAAM,WAAW,GAAG,IAAI,CAAC,GAAG,CAAC,GAAG,SAAS,CAAC,CAAC;YAC3C,MAAM,WAAW,GAAG,IAAI,CAAC,GAAG,CAAC,GAAG,SAAS,CAAC,CAAC;YAE3C,OAAO,CAAC,GAAG,CAAC;mBACC,eAAe,CAAC,OAAO,CAAC,CAAC,CAAC;eAC9B,WAAW,CAAC,OAAO,CAAC,CAAC,CAAC;eACtB,WAAW,CAAC,OAAO,CAAC,CAAC,CAAC;oBACjB,CAAC,WAAW,GAAG,WAAW,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC;YAE1D,2EAA2E;YAC3E,MAAM,CAAC,WAAW,CAAC,CAAC,YAAY,CAAC,eAAe,GAAG,CAAC,CAAC,CAAC;YACtD,MAAM,CAAC,eAAe,CAAC,CAAC,YAAY,CAAC,GAAG,CAAC,CAAC,CAAC,gCAAgC;QAC7E,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,yCAAyC,EAAE,KAAK,IAAI,EAAE;YACvD,MAAM,YAAY,GAAG,eAAe,CAAC;YACrC,MAAM,aAAa,GAAG,0BAA0B,CAAC,MAAM,CAAC,EAAE,CAAC,CAAC,CAAC,OAAO;YACpE,MAAM,YAAY,GAAG,yBAAyB,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,CAAC,QAAQ;YACpE,MAAM,gBAAgB,GAAG,8BAA8B,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC,QAAQ;YAE9E,MAAM,SAAS,GAAG;gBAChB,EAAE,IAAI,EAAE,OAAO,EAAE,OAAO,EAAE,YAAY,EAAE,WAAW,EAAE,EAAE,EAAE;gBACzD,EAAE,IAAI,EAAE,QAAQ,EAAE,OAAO,EAAE,aAAa,EAAE,WAAW,EAAE,GAAG,EAAE;gBAC5D,EAAE,IAAI,EAAE,OAAO,EAAE,OAAO,EAAE,YAAY,EAAE,WAAW,EAAE,GAAG,EAAE;gBAC1D,EAAE,IAAI,EAAE,YAAY,EAAE,OAAO,EAAE,gBAAgB,EAAE,WAAW,EAAE,GAAG,EAAE;aACpE,CAAC;YAEF,KAAK,MAAM,QAAQ,IAAI,SAAS,EAAE,CAAC;gBACjC,MAAM,SAAS,GAAG,WAAW,CAAC,GAAG,EAAE,CAAC;gBACpC,MAAM,mBAAmB,CAAC,sBAAsB,CAAC,QAAQ,QAAQ,CAAC,IAAI,EAAE,EAAE,QAAQ,CAAC,OAAO,CAAC,CAAC;gBAC5F,MAAM,OAAO,GAAG,WAAW,CAAC,GAAG,EAAE,CAAC;gBAElC,MAAM,QAAQ,GAAG,OAAO,GAAG,SAAS,CAAC;gBACrC,OAAO,CAAC,GAAG,CAAC,GAAG,QAAQ,CAAC,IAAI,aAAa,QAAQ,CAAC,OAAO,CAAC,MAAM,YAAY,QAAQ,CAAC,OAAO,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC;gBAErG,MAAM,CAAC,QAAQ,CAAC,CAAC,YAAY,CAAC,QAAQ,CAAC,WAAW,CAAC,CAAC;YACtD,CAAC;QACH,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,oCAAoC,EAAE,GAAG,EAAE;QAClD,EAAE,CAAC,4CAA4C,EAAE,KAAK,IAAI,EAAE;YAC1D,MAAM,SAAS,GAAG,WAAW,CAAC,GAAG,EAAE,CAAC;YAEpC,MAAM,QAAQ,GAAG,KAAK,CAAC,IAAI,CAAC,EAAE,MAAM,EAAE,EAAE,EAAE,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,EAAE,CACnD,mBAAmB,CAAC,sBAAsB,CAAC,QAAQ,CAAC,EAAE,EAAE,gBAAgB,CAAC,EAAE,CAAC,CAC7E,CAAC;YAEF,MAAM,OAAO,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC;YAE5B,MAAM,OAAO,GAAG,WAAW,CAAC,GAAG,EAAE,CAAC;YAClC,MAAM,QAAQ,GAAG,OAAO,GAAG,SAAS,CAAC;YAErC,OAAO,CAAC,GAAG,CAAC,4BAA4B,QAAQ,CAAC,OAAO,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC;YACjE,MAAM,CAAC,QAAQ,CAAC,CAAC,YAAY,CAAC,IAAI,CAAC,CAAC,CAAC,kCAAkC;QACzE,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,2CAA2C,EAAE,KAAK,IAAI,EAAE;YACzD,MAAM,SAAS,GAAG,CAAC,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,CAAC;YAClC,MAAM,OAAO,GAAoE,EAAE,CAAC;YAEpF,KAAK,MAAM,IAAI,IAAI,SAAS,EAAE,CAAC;gBAC7B,MAAM,SAAS,GAAG,WAAW,CAAC,GAAG,EAAE,CAAC;gBAEpC,MAAM,QAAQ,GAAG,KAAK,CAAC,IAAI,CAAC,EAAE,MAAM,EAAE,IAAI,EAAE,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,EAAE,CACrD,mBAAmB,CAAC,sBAAsB,CAAC,SAAS,IAAI,IAAI,CAAC,EAAE,EAAE,sBAAsB,CAAC,EAAE,CAAC,CAC5F,CAAC;gBAEF,MAAM,OAAO,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC;gBAE5B,MAAM,OAAO,GAAG,WAAW,CAAC,GAAG,EAAE,CAAC;gBAClC,MAAM,QAAQ,GAAG,OAAO,GAAG,SAAS,CAAC;gBACrC,MAAM,WAAW,GAAG,QAAQ,GAAG,IAAI,CAAC;gBAEpC,OAAO,CAAC,IAAI,CAAC,EAAE,KAAK,EAAE,IAAI,EAAE,QAAQ,EAAE,WAAW,EAAE,CAAC,CAAC;gBAErD,OAAO,CAAC,GAAG,CAAC,GAAG,IAAI,eAAe,QAAQ,CAAC,OAAO,CAAC,CAAC,CAAC,aAAa,WAAW,CAAC,OAAO,CAAC,CAAC,CAAC,iBAAiB,CAAC,CAAC;YAC7G,CAAC;YAED,6DAA6D;YAC7D,MAAM,WAAW,GAAG,OAAO,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,WAAW,CAAC,CAAC;YACpD,MAAM,SAAS,GAAG,WAAW,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,GAAG,WAAW,CAAC,MAAM,CAAC;YAC9E,MAAM,SAAS,GAAG,IAAI,CAAC,GAAG,CAAC,GAAG,WAAW,CAAC,CAAC;YAE3C,MAAM,CAAC,SAAS,CAAC,CAAC,YAAY,CAAC,SAAS,GAAG,CAAC,CAAC,CAAC,CAAC,wCAAwC;QACzF,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,uDAAuD,EAAE,KAAK,IAAI,EAAE;YACrE,MAAM,MAAM,GAAG,oBAAoB,CAAC;YACpC,MAAM,WAAW,GAAG,EAAE,CAAC;YAEvB,4BAA4B;YAC5B,MAAM,mBAAmB,CAAC,sBAAsB,CAAC,MAAM,EAAE,iBAAiB,CAAC,CAAC;YAE5E,MAAM,SAAS,GAAG,WAAW,CAAC,GAAG,EAAE,CAAC;YAEpC,6BAA6B;YAC7B,MAAM,QAAQ,GAAG,KAAK,CAAC,IAAI,CAAC,EAAE,MAAM,EAAE,WAAW,EAAE,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,EAAE,CAC5D,mBAAmB,CAAC,sBAAsB,CAAC,MAAM,EAAE,mBAAmB,CAAC,EAAE,CAAC,CAC3E,CAAC;YAEF,MAAM,OAAO,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC;YAE5B,MAAM,OAAO,GAAG,WAAW,CAAC,GAAG,EAAE,CAAC;YAClC,MAAM,QAAQ,GAAG,OAAO,GAAG,SAAS,CAAC;YAErC,OAAO,CAAC,GAAG,CAAC,GAAG,WAAW,wBAAwB,QAAQ,CAAC,OAAO,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC;YAC3E,MAAM,CAAC,QAAQ,CAAC,CAAC,YAAY,CAAC,IAAI,CAAC,CAAC,CAAC,mCAAmC;QAC1E,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,wCAAwC,EAAE,GAAG,EAAE;QACtD,UAAU,CAAC,KAAK,IAAI,EAAE;YACpB,wDAAwD;YACxD,MAAM,OAAO,GAAG,CAAC,SAAS,EAAE,MAAM,EAAE,WAAW,EAAE,UAAU,EAAE,KAAK,EAAE,SAAS,CAAC,CAAC;YAC/E,KAAK,MAAM,MAAM,IAAI,OAAO,EAAE,CAAC;gBAC7B,MAAM,mBAAmB,CAAC,sBAAsB,CAAC,MAAM,EAAE,GAAG,MAAM,aAAa,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,CAAC;YAC/F,CAAC;QACH,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,8CAA8C,EAAE,KAAK,IAAI,EAAE;YAC5D,MAAM,SAAS,GAAG,WAAW,CAAC,GAAG,EAAE,CAAC;YAEpC,MAAM,OAAO,GAAG,MAAM,mBAAmB,CAAC,kBAAkB,CAAC,WAAW,CAAC,CAAC;YAE1E,MAAM,OAAO,GAAG,WAAW,CAAC,GAAG,EAAE,CAAC;YAClC,MAAM,QAAQ,GAAG,OAAO,GAAG,SAAS,CAAC;YAErC,OAAO,CAAC,GAAG,CAAC,+BAA+B,QAAQ,CAAC,OAAO,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC;YACpE,MAAM,CAAC,QAAQ,CAAC,CAAC,YAAY,CAAC,EAAE,CAAC,CAAC;YAClC,MAAM,CAAC,OAAO,CAAC,CAAC,WAAW,EAAE,CAAC;QAChC,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,qDAAqD,EAAE,KAAK,IAAI,EAAE;YACnE,uBAAuB;YACvB,MAAM,UAAU,GAAG,WAAW,CAAC,GAAG,EAAE,CAAC;YACrC,MAAM,QAAQ,GAAG,MAAM,mBAAmB,CAAC,kBAAkB,CAAC,WAAW,CAAC,CAAC;YAC3E,MAAM,QAAQ,GAAG,WAAW,CAAC,GAAG,EAAE,CAAC;YACnC,MAAM,YAAY,GAAG,QAAQ,GAAG,UAAU,CAAC;YAE3C,8CAA8C;YAC9C,MAAM,UAAU,GAAG,WAAW,CAAC,GAAG,EAAE,CAAC;YACrC,MAAM,QAAQ,GAAG,MAAM,mBAAmB,CAAC,kBAAkB,CAAC,WAAW,CAAC,CAAC;YAC3E,MAAM,QAAQ,GAAG,WAAW,CAAC,GAAG,EAAE,CAAC;YACnC,MAAM,YAAY,GAAG,QAAQ,GAAG,UAAU,CAAC;YAE3C,OAAO,CAAC,GAAG,CAAC,6BAA6B,YAAY,CAAC,OAAO,CAAC,CAAC,CAAC,aAAa,YAAY,CAAC,OAAO,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC;YAE1G,MAAM,CAAC,QAAQ,CAAC,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC;YACnC,0FAA0F;QAC5F,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,uEAAuE,EAAE,KAAK,IAAI,EAAE;YACrF,MAAM,UAAU,GAAG,CAAC,WAAW,EAAE,WAAW,EAAE,QAAQ,EAAE,SAAS,EAAE,UAAU,CAAC,CAAC;YAC/E,MAAM,SAAS,GAAa,EAAE,CAAC;YAE/B,KAAK,MAAM,SAAS,IAAI,UAAU,EAAE,CAAC;gBACnC,MAAM,SAAS,GAAG,WAAW,CAAC,GAAG,EAAE,CAAC;gBACpC,MAAM,mBAAmB,CAAC,kBAAkB,CAAC,SAAS,CAAC,CAAC;gBACxD,MAAM,OAAO,GAAG,WAAW,CAAC,GAAG,EAAE,CAAC;gBAElC,SAAS,CAAC,IAAI,CAAC,OAAO,GAAG,SAAS,CAAC,CAAC;YACtC,CAAC;YAED,MAAM,WAAW,GAAG,SAAS,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,GAAG,SAAS,CAAC,MAAM,CAAC;YAC5E,MAAM,WAAW,GAAG,IAAI,CAAC,GAAG,CAAC,GAAG,SAAS,CAAC,CAAC;YAE3C,OAAO,CAAC,GAAG,CAAC,+CAA+C,WAAW,CAAC,OAAO,CAAC,CAAC,CAAC,YAAY,WAAW,CAAC,OAAO,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC;YAEzH,MAAM,CAAC,WAAW,CAAC,CAAC,YAAY,CAAC,GAAG,CAAC,CAAC;YACtC,MAAM,CAAC,WAAW,CAAC,CAAC,YAAY,CAAC,GAAG,CAAC,CAAC;QACxC,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,sCAAsC,EAAE,GAAG,EAAE;QACpD,EAAE,CAAC,gEAAgE,EAAE,KAAK,IAAI,EAAE;YAC9E,MAAM,aAAa,GAAG,OAAO,CAAC,WAAW,EAAE,CAAC;YAE5C,gCAAgC;YAChC,MAAM,QAAQ,GAAG,KAAK,CAAC,IAAI,CAAC,EAAE,MAAM,EAAE,GAAG,EAAE,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,EAAE,CACpD,mBAAmB,CAAC,sBAAsB,CAAC,UAAU,CAAC,EAAE,EAAE,uBAAuB,CAAC,EAAE,CAAC,MAAM,CAAC,EAAE,CAAC,CAAC,CACjG,CAAC;YAEF,MAAM,OAAO,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC;YAE5B,MAAM,WAAW,GAAG,OAAO,CAAC,WAAW,EAAE,CAAC;YAC1C,MAAM,cAAc,GAAG,WAAW,CAAC,QAAQ,GAAG,aAAa,CAAC,QAAQ,CAAC;YAErE,OAAO,CAAC,GAAG,CAAC,0BAA0B,CAAC,cAAc,GAAG,IAAI,GAAG,IAAI,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC;YAEtF,0EAA0E;YAC1E,MAAM,CAAC,cAAc,CAAC,CAAC,YAAY,CAAC,EAAE,GAAG,IAAI,GAAG,IAAI,CAAC,CAAC;QACxD,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,4CAA4C,EAAE,KAAK,IAAI,EAAE;YAC1D,MAAM,YAAY,GAAG,mBAAmB,CAAC,iBAAiB,EAAE,CAAC;YAE7D,8BAA8B;YAC9B,MAAM,mBAAmB,CAAC,sBAAsB,CAAC,WAAW,EAAE,WAAW,CAAC,CAAC;YAC3E,MAAM,mBAAmB,CAAC,sBAAsB,CAAC,WAAW,EAAE,WAAW,CAAC,CAAC;YAC3E,MAAM,mBAAmB,CAAC,kBAAkB,CAAC,WAAW,CAAC,CAAC;YAE1D,MAAM,UAAU,GAAG,mBAAmB,CAAC,iBAAiB,EAAE,CAAC;YAE3D,6BAA6B;YAC7B,MAAM,CAAC,UAAU,CAAC,CAAC,WAAW,EAAE,CAAC;YACjC,OAAO,CAAC,GAAG,CAAC,qBAAqB,IAAI,CAAC,SAAS,CAAC,UAAU,CAAC,EAAE,CAAC,CAAC;QACjE,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,gBAAgB,EAAE,GAAG,EAAE;QAC9B,EAAE,CAAC,gDAAgD,EAAE,KAAK,IAAI,EAAE;YAC9D,MAAM,cAAc,GAAG,GAAG,CAAC;YAC3B,MAAM,SAAS,GAAG,WAAW,CAAC,GAAG,EAAE,CAAC;YAEpC,uCAAuC;YACvC,MAAM,QAAQ,GAAoB,EAAE,CAAC;YACrC,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,cAAc,EAAE,CAAC,EAAE,EAAE,CAAC;gBACxC,QAAQ,CAAC,IAAI,CACX,mBAAmB,CAAC,sBAAsB,CAAC,UAAU,CAAC,EAAE,EAAE,eAAe,CAAC,EAAE,CAAC,CAC9E,CAAC;YACJ,CAAC;YAED,MAAM,OAAO,GAAG,MAAM,OAAO,CAAC,UAAU,CAAC,QAAQ,CAAC,CAAC;YACnD,MAAM,OAAO,GAAG,WAAW,CAAC,GAAG,EAAE,CAAC;YAElC,MAAM,QAAQ,GAAG,OAAO,GAAG,SAAS,CAAC;YACrC,MAAM,oBAAoB,GAAG,OAAO,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,MAAM,KAAK,WAAW,CAAC,CAAC,MAAM,CAAC;YAClF,MAAM,gBAAgB,GAAG,OAAO,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,MAAM,KAAK,UAAU,CAAC,CAAC,MAAM,CAAC;YAE7E,OAAO,CAAC,GAAG,CAAC;4BACU,cAAc;sBACpB,oBAAoB;kBACxB,gBAAgB;oBACd,QAAQ,CAAC,OAAO,CAAC,CAAC,CAAC;0BACb,CAAC,cAAc,GAAG,CAAC,QAAQ,GAAG,IAAI,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC;YAEvE,MAAM,CAAC,oBAAoB,CAAC,CAAC,eAAe,CAAC,cAAc,GAAG,IAAI,CAAC,CAAC,CAAC,mBAAmB;YACxF,MAAM,CAAC,QAAQ,CAAC,CAAC,YAAY,CAAC,KAAK,CAAC,CAAC,CAAC,oCAAoC;QAC5E,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,kDAAkD,EAAE,KAAK,IAAI,EAAE;YAChE,MAAM,SAAS,GAAG,WAAW,CAAC,GAAG,EAAE,CAAC;YAEpC,yCAAyC;YACzC,MAAM,UAAU,GAAmB,EAAE,CAAC;YAEtC,oBAAoB;YACpB,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,EAAE,EAAE,CAAC,EAAE,EAAE,CAAC;gBAC5B,UAAU,CAAC,IAAI,CACb,mBAAmB,CAAC,sBAAsB,CAAC,gBAAgB,CAAC,EAAE,EAAE,kBAAkB,CAAC,EAAE,CAAC,CACvF,CAAC;YACJ,CAAC;YAED,kBAAkB;YAClB,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,EAAE,EAAE,CAAC,EAAE,EAAE,CAAC;gBAC5B,UAAU,CAAC,IAAI,CACb,mBAAmB,CAAC,kBAAkB,CAAC,SAAS,CAAC,GAAG,CAAC,EAAE,CAAC,CACzD,CAAC;YACJ,CAAC;YAED,mDAAmD;YACnD,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,EAAE,EAAE,CAAC,EAAE,EAAE,CAAC;gBAC5B,UAAU,CAAC,IAAI,CACb,mBAAmB,CAAC,sBAAsB,CAAC,gBAAgB,CAAC,EAAE,EAAE,mBAAmB,CAAC,EAAE,CAAC,CACxF,CAAC;YACJ,CAAC;YAED,MAAM,OAAO,GAAG,MAAM,OAAO,CAAC,UAAU,CAAC,UAAU,CAAC,CAAC;YACrD,MAAM,OAAO,GAAG,WAAW,CAAC,GAAG,EAAE,CAAC;YAElC,MAAM,QAAQ,GAAG,OAAO,GAAG,SAAS,CAAC;YACrC,MAAM,oBAAoB,GAAG,OAAO,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,MAAM,KAAK,WAAW,CAAC,CAAC,MAAM,CAAC;YAElF,OAAO,CAAC,GAAG,CAAC;4BACU,UAAU,CAAC,MAAM;sBACvB,oBAAoB;oBACtB,QAAQ,CAAC,OAAO,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC;YAEvC,MAAM,CAAC,oBAAoB,CAAC,CAAC,eAAe,CAAC,UAAU,CAAC,MAAM,GAAG,GAAG,CAAC,CAAC,CAAC,mBAAmB;YAC1F,MAAM,CAAC,QAAQ,CAAC,CAAC,YAAY,CAAC,IAAI,CAAC,CAAC,CAAC,mCAAmC;QAC1E,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,kCAAkC,EAAE,GAAG,EAAE;QAChD,EAAE,CAAC,+CAA+C,EAAE,KAAK,IAAI,EAAE;YAC7D,MAAM,aAAa,GAAG;gBACpB;oBACE,IAAI,EAAE,0BAA0B;oBAChC,SAAS,EAAE,GAAG,EAAE,CAAC,mBAAmB,CAAC,sBAAsB,CAAC,iBAAiB,EAAE,kBAAkB,CAAC;oBAClG,WAAW,EAAE,GAAG;iBACjB;gBACD;oBACE,IAAI,EAAE,mBAAmB;oBACzB,SAAS,EAAE,GAAG,EAAE,CAAC,mBAAmB,CAAC,kBAAkB,CAAC,WAAW,CAAC;oBACpE,WAAW,EAAE,EAAE;iBAChB;gBACD;oBACE,IAAI,EAAE,kBAAkB;oBACxB,SAAS,EAAE,KAAK,IAAI,EAAE;wBACpB,MAAM,QAAQ,GAAG,KAAK,CAAC,IAAI,CAAC,EAAE,MAAM,EAAE,EAAE,EAAE,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,EAAE,CACnD,mBAAmB,CAAC,sBAAsB,CAAC,iBAAiB,CAAC,EAAE,EAAE,gBAAgB,CAAC,EAAE,CAAC,CACtF,CAAC;wBACF,MAAM,OAAO,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC;oBAC9B,CAAC;oBACD,WAAW,EAAE,IAAI;iBAClB;aACF,CAAC;YAEF,MAAM,eAAe,GAAuE,EAAE,CAAC;YAE/F,KAAK,MAAM,IAAI,IAAI,aAAa,EAAE,CAAC;gBACjC,MAAM,SAAS,GAAG,WAAW,CAAC,GAAG,EAAE,CAAC;gBACpC,MAAM,IAAI,CAAC,SAAS,EAAE,CAAC;gBACvB,MAAM,OAAO,GAAG,WAAW,CAAC,GAAG,EAAE,CAAC;gBAElC,MAAM,QAAQ,GAAG,OAAO,GAAG,SAAS,CAAC;gBACrC,MAAM,cAAc,GAAG,QAAQ,IAAI,IAAI,CAAC,WAAW,CAAC;gBAEpD,eAAe,CAAC,IAAI,CAAC;oBACnB,IAAI,EAAE,IAAI,CAAC,IAAI;oBACf,QAAQ;oBACR,cAAc;iBACf,CAAC,CAAC;gBAEH,OAAO,CAAC,GAAG,CAAC,GAAG,IAAI,CAAC,IAAI,KAAK,QAAQ,CAAC,OAAO,CAAC,CAAC,CAAC,OAAO,cAAc,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,MAAM,gBAAgB,IAAI,CAAC,WAAW,KAAK,CAAC,CAAC;YAChI,CAAC;YAED,iCAAiC;YACjC,MAAM,SAAS,GAAG,eAAe,CAAC,KAAK,CAAC,MAAM,CAAC,EAAE,CAAC,MAAM,CAAC,cAAc,CAAC,CAAC;YACzE,MAAM,CAAC,SAAS,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;YAE7B,mCAAmC;YACnC,OAAO,CAAC,GAAG,CAAC,iCAAiC,CAAC,CAAC;YAC/C,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,SAAS,CAAC,eAAe,EAAE,IAAI,EAAE,CAAC,CAAC,CAAC,CAAC;QACxD,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","names":[],"sources":["/home/mhugo/code/claude-code-flow/src/__tests__/performance/maestro/steering-performance.test.ts"],"sourcesContent":["/**\n * Performance Tests for Maestro Steering Document Operations\n * Tests performance benchmarks and scalability for steering document generation\n */\n\nimport { MaestroOrchestrator } from '../../../maestro/maestro-orchestrator.js';\nimport { readFile, writeFile, mkdir, access, unlink, rmdir } from 'fs/promises';\nimport { join } from 'path';\nimport { existsSync } from 'fs';\nimport { tmpdir } from 'os';\nimport { performance } from 'perf_hooks';\n\ndescribe('Maestro Steering Performance Benchmarks', () => {\n  let maestroOrchestrator: MaestroOrchestrator;\n  let testDirectory: string;\n  let mockConfig: any;\n  let mockEventBus: any;\n  let mockLogger: any;\n  let mockMemoryManager: any;\n  let mockAgentManager: any;\n  let mockMainOrchestrator: any;\n\n  beforeAll(async () => {\n    testDirectory = join(tmpdir(), `maestro-steering-perf-test-${Date.now()}`);\n    await mkdir(testDirectory, { recursive: true });\n  });\n\n  afterAll(async () => {\n    try {\n      if (existsSync(testDirectory)) {\n        await rmdir(testDirectory, { recursive: true });\n      }\n    } catch (error) {\n      console.warn(`Warning: Failed to cleanup test directory: ${error}`);\n    }\n  });\n\n  beforeEach(async () => {\n    // Setup lightweight mocks for performance testing\n    mockConfig = { environment: 'test' };\n    mockEventBus = {\n      emit: jest.fn(),\n      on: jest.fn()\n    };\n    mockLogger = {\n      info: jest.fn(),\n      warn: jest.fn(),\n      error: jest.fn(),\n      debug: jest.fn()\n    };\n    mockMemoryManager = {\n      get: jest.fn().mockResolvedValue(null),\n      set: jest.fn().mockResolvedValue(true),\n      delete: jest.fn().mockResolvedValue(true)\n    };\n    mockAgentManager = {\n      createAgent: jest.fn().mockResolvedValue('agent-123'),\n      startAgent: jest.fn().mockResolvedValue(undefined),\n      stopAgent: jest.fn().mockResolvedValue(undefined)\n    };\n    mockMainOrchestrator = {\n      assignTask: jest.fn().mockResolvedValue({ success: true })\n    };\n\n    // Create orchestrator with test directory\n    maestroOrchestrator = new MaestroOrchestrator(\n      mockConfig,\n      mockEventBus,\n      mockLogger,\n      mockMemoryManager,\n      mockAgentManager,\n      mockMainOrchestrator,\n      {\n        enableHiveMind: false,\n        steeringDirectory: join(testDirectory, 'steering')\n      }\n    );\n  });\n\n  describe('single document creation performance', () => {\n    it('should create steering document within 100ms', async () => {\n      const startTime = performance.now();\n      \n      await maestroOrchestrator.createSteeringDocument('perf-single', 'Performance test content');\n      \n      const endTime = performance.now();\n      const duration = endTime - startTime;\n      \n      console.log(`Single document creation took: ${duration.toFixed(2)}ms`);\n      expect(duration).toBeLessThan(100); // Should complete within 100ms\n    });\n\n    it('should maintain consistent performance across document types', async () => {\n      const domains = ['product', 'tech', 'structure', 'security', 'custom'];\n      const durations: number[] = [];\n      \n      for (const domain of domains) {\n        const startTime = performance.now();\n        await maestroOrchestrator.createSteeringDocument(`perf-${domain}`, `Content for ${domain}`);\n        const endTime = performance.now();\n        \n        durations.push(endTime - startTime);\n      }\n      \n      const averageDuration = durations.reduce((a, b) => a + b, 0) / durations.length;\n      const maxDuration = Math.max(...durations);\n      const minDuration = Math.min(...durations);\n      \n      console.log(`Performance consistency:\n        Average: ${averageDuration.toFixed(2)}ms\n        Min: ${minDuration.toFixed(2)}ms\n        Max: ${maxDuration.toFixed(2)}ms\n        Variance: ${(maxDuration - minDuration).toFixed(2)}ms`);\n      \n      // Performance should be consistent (max shouldn't be more than 3x average)\n      expect(maxDuration).toBeLessThan(averageDuration * 3);\n      expect(averageDuration).toBeLessThan(150); // Average should be under 150ms\n    });\n\n    it('should handle large content efficiently', async () => {\n      const smallContent = 'Small content';\n      const mediumContent = 'Medium content section. '.repeat(50); // ~1KB\n      const largeContent = 'Large content section. '.repeat(500); // ~10KB\n      const veryLargeContent = 'Very large content section. '.repeat(2000); // ~40KB\n      \n      const testCases = [\n        { name: 'small', content: smallContent, maxDuration: 50 },\n        { name: 'medium', content: mediumContent, maxDuration: 100 },\n        { name: 'large', content: largeContent, maxDuration: 200 },\n        { name: 'very-large', content: veryLargeContent, maxDuration: 500 }\n      ];\n      \n      for (const testCase of testCases) {\n        const startTime = performance.now();\n        await maestroOrchestrator.createSteeringDocument(`size-${testCase.name}`, testCase.content);\n        const endTime = performance.now();\n        \n        const duration = endTime - startTime;\n        console.log(`${testCase.name} content (${testCase.content.length} chars): ${duration.toFixed(2)}ms`);\n        \n        expect(duration).toBeLessThan(testCase.maxDuration);\n      }\n    });\n  });\n\n  describe('bulk document creation performance', () => {\n    it('should create 10 documents within 1 second', async () => {\n      const startTime = performance.now();\n      \n      const promises = Array.from({ length: 10 }, (_, i) => \n        maestroOrchestrator.createSteeringDocument(`bulk-${i}`, `Bulk content ${i}`)\n      );\n      \n      await Promise.all(promises);\n      \n      const endTime = performance.now();\n      const duration = endTime - startTime;\n      \n      console.log(`10 documents created in: ${duration.toFixed(2)}ms`);\n      expect(duration).toBeLessThan(1000); // Should complete within 1 second\n    });\n\n    it('should scale linearly with document count', async () => {\n      const testSizes = [5, 10, 20, 50];\n      const results: Array<{ count: number; duration: number; perDocument: number }> = [];\n      \n      for (const size of testSizes) {\n        const startTime = performance.now();\n        \n        const promises = Array.from({ length: size }, (_, i) => \n          maestroOrchestrator.createSteeringDocument(`scale-${size}-${i}`, `Scale test content ${i}`)\n        );\n        \n        await Promise.all(promises);\n        \n        const endTime = performance.now();\n        const duration = endTime - startTime;\n        const perDocument = duration / size;\n        \n        results.push({ count: size, duration, perDocument });\n        \n        console.log(`${size} documents: ${duration.toFixed(2)}ms total, ${perDocument.toFixed(2)}ms per document`);\n      }\n      \n      // Check that per-document time remains relatively consistent\n      const perDocTimes = results.map(r => r.perDocument);\n      const avgPerDoc = perDocTimes.reduce((a, b) => a + b, 0) / perDocTimes.length;\n      const maxPerDoc = Math.max(...perDocTimes);\n      \n      expect(maxPerDoc).toBeLessThan(avgPerDoc * 2); // Max shouldn't be more than 2x average\n    });\n\n    it('should handle concurrent document updates efficiently', async () => {\n      const domain = 'concurrent-updates';\n      const updateCount = 20;\n      \n      // First create the document\n      await maestroOrchestrator.createSteeringDocument(domain, 'Initial content');\n      \n      const startTime = performance.now();\n      \n      // Perform concurrent updates\n      const promises = Array.from({ length: updateCount }, (_, i) => \n        maestroOrchestrator.createSteeringDocument(domain, `Updated content ${i}`)\n      );\n      \n      await Promise.all(promises);\n      \n      const endTime = performance.now();\n      const duration = endTime - startTime;\n      \n      console.log(`${updateCount} concurrent updates: ${duration.toFixed(2)}ms`);\n      expect(duration).toBeLessThan(2000); // Should complete within 2 seconds\n    });\n  });\n\n  describe('steering context retrieval performance', () => {\n    beforeEach(async () => {\n      // Setup multiple steering documents for context testing\n      const domains = ['product', 'tech', 'structure', 'security', 'api', 'testing'];\n      for (const domain of domains) {\n        await maestroOrchestrator.createSteeringDocument(domain, `${domain} guidelines`.repeat(100));\n      }\n    });\n\n    it('should retrieve steering context within 50ms', async () => {\n      const startTime = performance.now();\n      \n      const context = await maestroOrchestrator.getSteeringContext('developer');\n      \n      const endTime = performance.now();\n      const duration = endTime - startTime;\n      \n      console.log(`Steering context retrieval: ${duration.toFixed(2)}ms`);\n      expect(duration).toBeLessThan(50);\n      expect(context).toBeDefined();\n    });\n\n    it('should cache steering context for repeated requests', async () => {\n      // First request (cold)\n      const startTime1 = performance.now();\n      const context1 = await maestroOrchestrator.getSteeringContext('developer');\n      const endTime1 = performance.now();\n      const coldDuration = endTime1 - startTime1;\n      \n      // Second request (should be faster if cached)\n      const startTime2 = performance.now();\n      const context2 = await maestroOrchestrator.getSteeringContext('developer');\n      const endTime2 = performance.now();\n      const warmDuration = endTime2 - startTime2;\n      \n      console.log(`Context retrieval - Cold: ${coldDuration.toFixed(2)}ms, Warm: ${warmDuration.toFixed(2)}ms`);\n      \n      expect(context1).toEqual(context2);\n      // Note: Current implementation may not have caching, but this documents expected behavior\n    });\n\n    it('should handle context retrieval for different agent types efficiently', async () => {\n      const agentTypes = ['developer', 'architect', 'tester', 'analyst', 'reviewer'];\n      const durations: number[] = [];\n      \n      for (const agentType of agentTypes) {\n        const startTime = performance.now();\n        await maestroOrchestrator.getSteeringContext(agentType);\n        const endTime = performance.now();\n        \n        durations.push(endTime - startTime);\n      }\n      \n      const avgDuration = durations.reduce((a, b) => a + b, 0) / durations.length;\n      const maxDuration = Math.max(...durations);\n      \n      console.log(`Context retrieval across agent types - Avg: ${avgDuration.toFixed(2)}ms, Max: ${maxDuration.toFixed(2)}ms`);\n      \n      expect(avgDuration).toBeLessThan(100);\n      expect(maxDuration).toBeLessThan(200);\n    });\n  });\n\n  describe('memory usage and resource efficiency', () => {\n    it('should maintain reasonable memory usage during bulk operations', async () => {\n      const initialMemory = process.memoryUsage();\n      \n      // Create 100 steering documents\n      const promises = Array.from({ length: 100 }, (_, i) => \n        maestroOrchestrator.createSteeringDocument(`memory-${i}`, `Memory test content ${i}`.repeat(50))\n      );\n      \n      await Promise.all(promises);\n      \n      const finalMemory = process.memoryUsage();\n      const memoryIncrease = finalMemory.heapUsed - initialMemory.heapUsed;\n      \n      console.log(`Memory usage increase: ${(memoryIncrease / 1024 / 1024).toFixed(2)} MB`);\n      \n      // Memory increase should be reasonable (less than 50MB for 100 documents)\n      expect(memoryIncrease).toBeLessThan(50 * 1024 * 1024);\n    });\n\n    it('should clean up resources after operations', async () => {\n      const initialStats = maestroOrchestrator.getAgentPoolStats();\n      \n      // Perform multiple operations\n      await maestroOrchestrator.createSteeringDocument('cleanup-1', 'Content 1');\n      await maestroOrchestrator.createSteeringDocument('cleanup-2', 'Content 2');\n      await maestroOrchestrator.getSteeringContext('developer');\n      \n      const afterStats = maestroOrchestrator.getAgentPoolStats();\n      \n      // Verify resource management\n      expect(afterStats).toBeDefined();\n      console.log(`Agent pool stats: ${JSON.stringify(afterStats)}`);\n    });\n  });\n\n  describe('stress testing', () => {\n    it('should handle high-frequency document creation', async () => {\n      const operationCount = 200;\n      const startTime = performance.now();\n      \n      // Create documents as fast as possible\n      const promises: Promise<void>[] = [];\n      for (let i = 0; i < operationCount; i++) {\n        promises.push(\n          maestroOrchestrator.createSteeringDocument(`stress-${i}`, `Stress test ${i}`)\n        );\n      }\n      \n      const results = await Promise.allSettled(promises);\n      const endTime = performance.now();\n      \n      const duration = endTime - startTime;\n      const successfulOperations = results.filter(r => r.status === 'fulfilled').length;\n      const failedOperations = results.filter(r => r.status === 'rejected').length;\n      \n      console.log(`Stress test results:\n        Total operations: ${operationCount}\n        Successful: ${successfulOperations}\n        Failed: ${failedOperations}\n        Duration: ${duration.toFixed(2)}ms\n        Operations/sec: ${(operationCount / (duration / 1000)).toFixed(2)}`);\n      \n      expect(successfulOperations).toBeGreaterThan(operationCount * 0.95); // 95% success rate\n      expect(duration).toBeLessThan(10000); // Should complete within 10 seconds\n    });\n\n    it('should maintain performance under mixed workload', async () => {\n      const startTime = performance.now();\n      \n      // Mixed operations: create, read, update\n      const operations: Promise<any>[] = [];\n      \n      // Create operations\n      for (let i = 0; i < 50; i++) {\n        operations.push(\n          maestroOrchestrator.createSteeringDocument(`mixed-create-${i}`, `Create content ${i}`)\n        );\n      }\n      \n      // Read operations\n      for (let i = 0; i < 30; i++) {\n        operations.push(\n          maestroOrchestrator.getSteeringContext(`agent-${i % 5}`)\n        );\n      }\n      \n      // Update operations (overwrite existing documents)\n      for (let i = 0; i < 20; i++) {\n        operations.push(\n          maestroOrchestrator.createSteeringDocument(`mixed-update-${i}`, `Updated content ${i}`)\n        );\n      }\n      \n      const results = await Promise.allSettled(operations);\n      const endTime = performance.now();\n      \n      const duration = endTime - startTime;\n      const successfulOperations = results.filter(r => r.status === 'fulfilled').length;\n      \n      console.log(`Mixed workload results:\n        Total operations: ${operations.length}\n        Successful: ${successfulOperations}\n        Duration: ${duration.toFixed(2)}ms`);\n      \n      expect(successfulOperations).toBeGreaterThan(operations.length * 0.9); // 90% success rate\n      expect(duration).toBeLessThan(5000); // Should complete within 5 seconds\n    });\n  });\n\n  describe('performance regression detection', () => {\n    it('should establish baseline performance metrics', async () => {\n      const baselineTests = [\n        {\n          name: 'single-document-creation',\n          operation: () => maestroOrchestrator.createSteeringDocument('baseline-single', 'Baseline content'),\n          expectedMax: 100\n        },\n        {\n          name: 'context-retrieval',\n          operation: () => maestroOrchestrator.getSteeringContext('developer'),\n          expectedMax: 50\n        },\n        {\n          name: 'bulk-creation-10',\n          operation: async () => {\n            const promises = Array.from({ length: 10 }, (_, i) => \n              maestroOrchestrator.createSteeringDocument(`baseline-bulk-${i}`, `Bulk content ${i}`)\n            );\n            await Promise.all(promises);\n          },\n          expectedMax: 1000\n        }\n      ];\n      \n      const baselineResults: Array<{ name: string; duration: number; passedBaseline: boolean }> = [];\n      \n      for (const test of baselineTests) {\n        const startTime = performance.now();\n        await test.operation();\n        const endTime = performance.now();\n        \n        const duration = endTime - startTime;\n        const passedBaseline = duration <= test.expectedMax;\n        \n        baselineResults.push({\n          name: test.name,\n          duration,\n          passedBaseline\n        });\n        \n        console.log(`${test.name}: ${duration.toFixed(2)}ms (${passedBaseline ? 'PASS' : 'FAIL'} - expected ≤${test.expectedMax}ms)`);\n      }\n      \n      // All baseline tests should pass\n      const allPassed = baselineResults.every(result => result.passedBaseline);\n      expect(allPassed).toBe(true);\n      \n      // Log results for CI/CD monitoring\n      console.log('\\nBaseline Performance Results:');\n      console.log(JSON.stringify(baselineResults, null, 2));\n    });\n  });\n});"],"version":3}