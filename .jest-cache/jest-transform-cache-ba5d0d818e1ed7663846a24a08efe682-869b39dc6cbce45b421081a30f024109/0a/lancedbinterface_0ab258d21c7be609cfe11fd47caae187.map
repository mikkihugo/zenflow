{"version":3,"names":["cov_vtfxrtuh5","actualCoverage","connect","EventEmitter","LanceDBInterface","database","s","tables","Map","indices","stats","config","isInitialized","maxCacheSize","constructor","b","f","dbPath","dbName","vectorDim","similarity","indexType","batchSize","cacheSize","initialize","createCoreTables","setupIndices","loadStatistics","tableNames","console","log","join","emit","status","error","coreSchemas","embeddings","id","vector","metadata","timestamp","source","type","documents","content","size","sessions","session_id","vectors","created","updated","tableName","schema","Object","entries","createTable","ensureInitialized","existingTables","includes","sampleData","generateSampleData","table","set","openTable","insertVectors","startTime","Date","now","errors","inserted","get","batches","createBatches","batch","add","length","push","duration","updateStats","searchSimilar","queryVector","limit","filter","query","search","key","value","where","results","toArray","searchResults","map","result","score","_distance","document","queryDim","getStats","totalVectors","count","countRows","warn","totalTables","averageSearchTime","indexedVectors","cacheHitRate","sampleRow","Array","fill","items","i","slice","metric","current","newAverage","Error","shutdown","clear"],"sources":["/home/mhugo/code/claude-code-flow/src/database/lancedb-interface.ts"],"sourcesContent":["/** LanceDB Vector Database Interface - Enhanced Edition TypeScript */\n/** ADVANCED VECTOR OPERATIONS WITH PRODUCTION-GRADE CAPABILITIES */\n/** Supports embeddings, similarity search, clustering, and analytics */\n\nimport { connect, Connection, Table } from '@lancedb/lancedb';\nimport { EventEmitter } from 'node:events';\n\ninterface LanceDBConfig {\n  dbPath?: string;\n  dbName?: string;\n  vectorDim?: number;\n  similarity?: 'cosine' | 'euclidean' | 'manhattan' | 'dot';\n  indexType?: 'IVF_PQ' | 'HNSW' | 'FLAT';\n  batchSize?: number;\n  cacheSize?: number;\n  [key: string]: any;\n}\n\ninterface VectorDocument {\n  id: string;\n  vector: number[];\n  metadata?: Record<string, any>;\n  timestamp?: number;\n}\n\ninterface SearchResult {\n  id: string;\n  score: number;\n  metadata?: Record<string, any>;\n  document?: VectorDocument;\n}\n\ninterface LanceDBStats {\n  totalVectors: number;\n  totalTables: number;\n  averageSearchTime: number;\n  indexedVectors: number;\n  cacheHitRate: number;\n}\n\nexport class LanceDBInterface extends EventEmitter {\n  private database: Connection | null = null;\n  private tables = new Map<string, Table>();\n  private indices = new Map<string, any>();\n  private stats = new Map<string, number>();\n  private config: Required<LanceDBConfig>;\n  private isInitialized = false;\n  private maxCacheSize: number;\n\n  constructor(config: LanceDBConfig = {}) {\n    super();\n    \n    this.config = {\n      dbPath: config.dbPath ?? './data/lancedb',\n      dbName: config.dbName ?? 'claude-flow-vectors',\n      vectorDim: config.vectorDim ?? 1536, // OpenAI embedding dimension\n      similarity: config.similarity ?? 'cosine',\n      indexType: config.indexType ?? 'HNSW',\n      batchSize: config.batchSize ?? 1000,\n      cacheSize: config.cacheSize ?? 10000,\n      ...config\n    };\n    \n    this.maxCacheSize = this.config.cacheSize;\n  }\n\n  /** Initialize LanceDB connection and create tables */\n  async initialize(): Promise<{ status: string; tables: string[] }> {\n    try {\n      this.database = await connect(this.config.dbPath);\n      \n      // Create core tables with optimized schemas\n      await this.createCoreTables();\n      \n      // Set up performance indices\n      await this.setupIndices();\n      \n      // Load existing statistics\n      await this.loadStatistics();\n      \n      this.isInitialized = true;\n      \n      const tableNames = await this.database.tableNames();\n      \n      console.log(`‚úÖ LanceDB initialized: ${this.config.dbName}`);\n      console.log(`üìÅ Database path: ${this.config.dbPath}`);\n      console.log(`üìä Tables: ${tableNames.join(', ')}`);\n      \n      this.emit('initialized', { tables: tableNames });\n      \n      return { status: 'initialized', tables: tableNames };\n      \n    } catch (error) {\n      console.error('‚ùå LanceDB initialization failed:', error);\n      throw error;\n    }\n  }\n\n  /** Create core tables with optimized schemas */\n  private async createCoreTables(): Promise<void> {\n    const coreSchemas = {\n      embeddings: {\n        id: 'string',\n        vector: `array<float>(${this.config.vectorDim})`,\n        metadata: 'map<string, string>',\n        timestamp: 'int64',\n        source: 'string',\n        type: 'string'\n      },\n      documents: {\n        id: 'string',\n        content: 'string',\n        vector: `array<float>(${this.config.vectorDim})`,\n        metadata: 'map<string, string>',\n        timestamp: 'int64',\n        size: 'int32'\n      },\n      sessions: {\n        session_id: 'string',\n        vectors: `array<array<float>(${this.config.vectorDim}))`,\n        metadata: 'map<string, string>',\n        created: 'int64',\n        updated: 'int64'\n      }\n    };\n\n    for (const [tableName, schema] of Object.entries(coreSchemas)) {\n      await this.createTable(tableName, schema);\n    }\n  }\n\n  /** Create a table with specified schema */\n  async createTable(tableName: string, schema: Record<string, any>): Promise<Table> {\n    this.ensureInitialized();\n    \n    try {\n      const existingTables = await this.database!.tableNames();\n      \n      if (!existingTables.includes(tableName)) {\n        // Create sample data for schema inference\n        const sampleData = this.generateSampleData(schema);\n        const table = await this.database!.createTable(tableName, sampleData);\n        \n        this.tables.set(tableName, table);\n        this.emit('tableCreated', { tableName, schema });\n        \n        console.log(`‚úÖ Created table: ${tableName}`);\n        return table;\n      } else {\n        const table = await this.database!.openTable(tableName);\n        this.tables.set(tableName, table);\n        \n        console.log(`üìÇ Opened existing table: ${tableName}`);\n        return table;\n      }\n      \n    } catch (error) {\n      console.error(`‚ùå Failed to create table ${tableName}:`, error);\n      throw error;\n    }\n  }\n\n  /** Insert vectors into a table */\n  async insertVectors(\n    tableName: string, \n    documents: VectorDocument[]\n  ): Promise<{ inserted: number; errors: any[] }> {\n    this.ensureInitialized();\n    \n    const startTime = Date.now();\n    const errors: any[] = [];\n    let inserted = 0;\n    \n    try {\n      const table = this.tables.get(tableName) || await this.database!.openTable(tableName);\n      \n      // Process in batches\n      const batches = this.createBatches(documents, this.config.batchSize);\n      \n      for (const batch of batches) {\n        try {\n          await table.add(batch);\n          inserted += batch.length;\n        } catch (error) {\n          errors.push({ batch: batch.length, error });\n        }\n      }\n      \n      const duration = Date.now() - startTime;\n      this.updateStats('insertTime', duration);\n      \n      this.emit('vectorsInserted', { tableName, inserted, errors: errors.length, duration });\n      \n      return { inserted, errors };\n      \n    } catch (error) {\n      console.error(`‚ùå Failed to insert vectors into ${tableName}:`, error);\n      throw error;\n    }\n  }\n\n  /** Search for similar vectors */\n  async searchSimilar(\n    tableName: string,\n    queryVector: number[],\n    limit: number = 10,\n    filter?: Record<string, any>\n  ): Promise<SearchResult[]> {\n    this.ensureInitialized();\n    \n    const startTime = Date.now();\n    \n    try {\n      const table = this.tables.get(tableName) || await this.database!.openTable(tableName);\n      \n      let query = table.search(queryVector).limit(limit);\n      \n      if (filter) {\n        // Apply filters based on metadata\n        for (const [key, value] of Object.entries(filter)) {\n          query = query.where(`metadata['${key}'] = '${value}'`);\n        }\n      }\n      \n      const results = await query.toArray();\n      \n      const searchResults: SearchResult[] = results.map((result: any) => ({\n        id: result.id,\n        score: result._distance || 0,\n        metadata: result.metadata,\n        document: result\n      }));\n      \n      const duration = Date.now() - startTime;\n      this.updateStats('searchTime', duration);\n      \n      this.emit('searchCompleted', { \n        tableName, \n        queryDim: queryVector.length, \n        results: searchResults.length, \n        duration \n      });\n      \n      return searchResults;\n      \n    } catch (error) {\n      console.error(`‚ùå Search failed in table ${tableName}:`, error);\n      throw error;\n    }\n  }\n\n  /** Get database statistics */\n  async getStats(): Promise<LanceDBStats> {\n    this.ensureInitialized();\n    \n    try {\n      const tableNames = await this.database!.tableNames();\n      let totalVectors = 0;\n      \n      for (const tableName of tableNames) {\n        try {\n          const table = await this.database!.openTable(tableName);\n          const count = await table.countRows();\n          totalVectors += count;\n        } catch (error) {\n          console.warn(`‚ö†Ô∏è Could not get count for table ${tableName}:`, error);\n        }\n      }\n      \n      return {\n        totalVectors,\n        totalTables: tableNames.length,\n        averageSearchTime: this.stats.get('averageSearchTime') || 0,\n        indexedVectors: totalVectors, // Assume all vectors are indexed\n        cacheHitRate: this.stats.get('cacheHitRate') || 0\n      };\n      \n    } catch (error) {\n      console.error('‚ùå Failed to get database stats:', error);\n      throw error;\n    }\n  }\n\n  /** Setup performance indices */\n  private async setupIndices(): Promise<void> {\n    // Index setup would depend on LanceDB's indexing capabilities\n    // This is a placeholder for future implementation\n    console.log('üîß Setting up performance indices...');\n  }\n\n  /** Load existing statistics */\n  private async loadStatistics(): Promise<void> {\n    // Initialize default stats\n    this.stats.set('totalSearches', 0);\n    this.stats.set('averageSearchTime', 0);\n    this.stats.set('cacheHitRate', 0);\n  }\n\n  /** Generate sample data for schema inference */\n  private generateSampleData(schema: Record<string, any>): any[] {\n    const sampleRow: any = {};\n    \n    for (const [key, type] of Object.entries(schema)) {\n      if (key === 'vector' || type.includes('array<float>')) {\n        sampleRow[key] = new Array(this.config.vectorDim).fill(0);\n      } else if (type === 'string') {\n        sampleRow[key] = 'sample';\n      } else if (type === 'int64' || type === 'int32') {\n        sampleRow[key] = 0;\n      } else if (type.includes('map')) {\n        sampleRow[key] = {};\n      } else {\n        sampleRow[key] = null;\n      }\n    }\n    \n    return [sampleRow];\n  }\n\n  /** Create batches from documents */\n  private createBatches<T>(items: T[], batchSize: number): T[][] {\n    const batches: T[][] = [];\n    \n    for (let i = 0; i < items.length; i += batchSize) {\n      batches.push(items.slice(i, i + batchSize));\n    }\n    \n    return batches;\n  }\n\n  /** Update internal statistics */\n  private updateStats(metric: string, value: number): void {\n    const current = this.stats.get(metric) || 0;\n    const count = this.stats.get(`${metric}Count`) || 0;\n    \n    // Calculate running average\n    const newAverage = (current * count + value) / (count + 1);\n    \n    this.stats.set(metric, newAverage);\n    this.stats.set(`${metric}Count`, count + 1);\n  }\n\n  /** Ensure database is initialized */\n  private ensureInitialized(): void {\n    if (!this.isInitialized || !this.database) {\n      throw new Error('LanceDB not initialized. Call initialize() first.');\n    }\n  }\n\n  /** Cleanup and shutdown */\n  async shutdown(): Promise<void> {\n    if (this.database) {\n      // LanceDB doesn't have explicit close method, just clear references\n      this.database = null;\n      this.tables.clear();\n      this.indices.clear();\n      \n      this.isInitialized = false;\n      this.emit('shutdown');\n      \n      console.log('‚úÖ LanceDB connection closed');\n    }\n  }\n}\n\nexport default LanceDBInterface;"],"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","ignoreList":[]}