49fe87cd5ca76a3b64cbd0294faf5b96
/**
 * Integration Test Setup - Environment Management
 *
 * Comprehensive setup and teardown for integration tests
 */
import { promises as fs } from 'fs';
import { join } from 'path';
import { tmpdir } from 'os';
export class IntegrationTestSetup {
    config;
    tempDirs = [];
    processes = [];
    cleanupCallbacks = [];
    constructor(config = {}) {
        this.config = {
            environment: {
                database: 'memory',
                filesystem: 'temp',
                network: 'mock'
            },
            services: [],
            cleanup: 'aggressive',
            timeout: 30000,
            ...config
        };
    }
    /**
     * Setup the complete test environment
     */
    async setup() {
        try {
            const database = await this.setupDatabase();
            const filesystem = await this.setupFileSystem();
            const network = await this.setupNetwork();
            // Start required services
            if (this.config.services && this.config.services.length > 0) {
                await this.startServices();
            }
            return { database, filesystem, network };
        }
        catch (error) {
            await this.cleanup();
            throw error;
        }
    }
    /**
     * Clean up the test environment
     */
    async cleanup() {
        const cleanupPromises = [
            ...this.cleanupCallbacks.map(callback => callback()),
            this.stopServices(),
            this.cleanupTempDirs()
        ];
        await Promise.allSettled(cleanupPromises);
        this.cleanupCallbacks = [];
        this.tempDirs = [];
        this.processes = [];
    }
    /**
     * Create isolated test environment
     */
    async createIsolatedEnvironment(testName) {
        const workDir = await this.createTempDir(`test-${testName}`);
        const configPath = join(workDir, 'test-config.json');
        const envVars = {
            NODE_ENV: 'test',
            TEST_WORK_DIR: workDir,
            TEST_CONFIG_PATH: configPath,
            TEST_NAME: testName
        };
        // Create basic test configuration
        const testConfig = {
            name: testName,
            workDir,
            database: {
                type: this.config.environment?.database || 'memory',
                path: this.config.environment?.database === 'sqlite' ? join(workDir, 'test.db') : ':memory:'
            },
            filesystem: {
                root: workDir,
                type: this.config.environment?.filesystem || 'temp'
            },
            network: {
                type: this.config.environment?.network || 'mock',
                port: this.getRandomPort()
            }
        };
        await fs.writeFile(configPath, JSON.stringify(testConfig, null, 2));
        this.addCleanupCallback(async () => {
            await this.removeDir(workDir);
        });
        return { workDir, configPath, envVars };
    }
    async setupDatabase() {
        const dbType = this.config.environment?.database || 'memory';
        switch (dbType) {
            case 'memory':
                return this.createMemoryDatabaseHelper();
            case 'sqlite':
                return await this.createSqliteDatabaseHelper();
            case 'postgres':
                return await this.createPostgresDatabaseHelper();
            default:
                throw new Error(`Unsupported database type: ${dbType}`);
        }
    }
    async setupFileSystem() {
        const fsType = this.config.environment?.filesystem || 'temp';
        switch (fsType) {
            case 'mock':
                return this.createMockFileSystemHelper();
            case 'temp':
                return await this.createTempFileSystemHelper();
            case 'real':
                return this.createRealFileSystemHelper();
            default:
                throw new Error(`Unsupported filesystem type: ${fsType}`);
        }
    }
    async setupNetwork() {
        const networkType = this.config.environment?.network || 'mock';
        switch (networkType) {
            case 'mock':
                return this.createMockNetworkHelper();
            case 'localhost':
                return await this.createLocalhostNetworkHelper();
            case 'integration':
                return await this.createIntegrationNetworkHelper();
            default:
                throw new Error(`Unsupported network type: ${networkType}`);
        }
    }
    createMemoryDatabaseHelper() {
        const memoryDb = new Map();
        return {
            async setup() {
                memoryDb.clear();
            },
            async cleanup() {
                memoryDb.clear();
            },
            async seed(data) {
                data.forEach((item, index) => {
                    memoryDb.set(`item-${index}`, item);
                });
            },
            async reset() {
                memoryDb.clear();
            },
            getConnection() {
                return {
                    get: (key) => memoryDb.get(key),
                    set: (key, value) => memoryDb.set(key, value),
                    delete: (key) => memoryDb.delete(key),
                    has: (key) => memoryDb.has(key),
                    clear: () => memoryDb.clear(),
                    size: () => memoryDb.size
                };
            }
        };
    }
    async createSqliteDatabaseHelper() {
        const dbPath = join(await this.createTempDir('db'), 'test.db');
        let db = null;
        return {
            async setup() {
                // Import sqlite3 dynamically
                try {
                    const sqlite3 = await import('sqlite3');
                    db = new sqlite3.Database(dbPath);
                    // Create basic tables
                    await new Promise((resolve, reject) => {
                        db.exec(`
              CREATE TABLE IF NOT EXISTS test_data (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                key TEXT UNIQUE,
                value TEXT,
                created_at DATETIME DEFAULT CURRENT_TIMESTAMP
              );
            `, (err) => {
                            if (err)
                                reject(err);
                            else
                                resolve();
                        });
                    });
                }
                catch (error) {
                    console.warn('SQLite not available, falling back to memory database');
                    return this.createMemoryDatabaseHelper().setup();
                }
            },
            async cleanup() {
                if (db) {
                    await new Promise((resolve) => {
                        db.close(() => resolve());
                    });
                }
                try {
                    await fs.unlink(dbPath);
                }
                catch (error) {
                    // File might not exist
                }
            },
            async seed(data) {
                if (!db)
                    return;
                const stmt = db.prepare('INSERT OR REPLACE INTO test_data (key, value) VALUES (?, ?)');
                for (const [index, item] of data.entries()) {
                    await new Promise((resolve, reject) => {
                        stmt.run(`item-${index}`, JSON.stringify(item), (err) => {
                            if (err)
                                reject(err);
                            else
                                resolve();
                        });
                    });
                }
                stmt.finalize();
            },
            async reset() {
                if (!db)
                    return;
                await new Promise((resolve, reject) => {
                    db.run('DELETE FROM test_data', (err) => {
                        if (err)
                            reject(err);
                        else
                            resolve();
                    });
                });
            },
            getConnection() {
                return db;
            }
        };
    }
    async createPostgresDatabaseHelper() {
        // This would require a PostgreSQL connection
        // For now, return a mock implementation
        console.warn('PostgreSQL integration not implemented, using memory database');
        return this.createMemoryDatabaseHelper();
    }
    createMockFileSystemHelper() {
        const mockFs = new Map();
        return {
            async createTempDir() {
                const tempPath = `/mock/temp/${Date.now()}`;
                mockFs.set(tempPath + '/', '');
                return tempPath;
            },
            async createFile(path, content) {
                mockFs.set(path, content);
            },
            async cleanup() {
                mockFs.clear();
            },
            mockFileSystem() {
                // Already mocked
            },
            restoreFileSystem() {
                // Nothing to restore
            }
        };
    }
    async createTempFileSystemHelper() {
        const tempPaths = [];
        return {
            async createTempDir() {
                const tempPath = await this.createTempDir('fs-helper');
                tempPaths.push(tempPath);
                return tempPath;
            },
            async createFile(path, content) {
                await fs.writeFile(path, content, 'utf8');
            },
            async cleanup() {
                await Promise.allSettled(tempPaths.map(path => this.removeDir(path)));
                tempPaths.length = 0;
            },
            mockFileSystem() {
                // Real filesystem, no mocking needed
            },
            restoreFileSystem() {
                // Real filesystem, no restoration needed
            }
        };
    }
    createRealFileSystemHelper() {
        return {
            async createTempDir() {
                return await this.createTempDir('real-fs');
            },
            async createFile(path, content) {
                await fs.writeFile(path, content, 'utf8');
            },
            async cleanup() {
                // Cleanup handled by main cleanup
            },
            mockFileSystem() {
                console.warn('Cannot mock real filesystem');
            },
            restoreFileSystem() {
                console.warn('Real filesystem, nothing to restore');
            }
        };
    }
    createMockNetworkHelper() {
        const mockRequests = [];
        const mockResponses = new Map();
        return {
            async startMockServer(port) {
                // Mock server is always "running"
            },
            async stopMockServer() {
                mockRequests.length = 0;
                mockResponses.clear();
            },
            mockRequest(path, response) {
                mockResponses.set(path, response);
            },
            captureRequests() {
                return [...mockRequests];
            },
            clearRequests() {
                mockRequests.length = 0;
            }
        };
    }
    async createLocalhostNetworkHelper() {
        let server = null;
        const requests = [];
        const routes = new Map();
        return {
            async startMockServer(port = this.getRandomPort()) {
                try {
                    const http = await import('http');
                    server = http.createServer((req, res) => {
                        const requestData = {
                            method: req.method,
                            url: req.url,
                            headers: req.headers,
                            timestamp: Date.now()
                        };
                        requests.push(requestData);
                        const response = routes.get(req.url || '/');
                        if (response) {
                            res.writeHead(200, { 'Content-Type': 'application/json' });
                            res.end(JSON.stringify(response));
                        }
                        else {
                            res.writeHead(404);
                            res.end('Not Found');
                        }
                    });
                    await new Promise((resolve, reject) => {
                        server.listen(port, (err) => {
                            if (err)
                                reject(err);
                            else
                                resolve();
                        });
                    });
                }
                catch (error) {
                    console.warn('HTTP server not available, using mock network');
                }
            },
            async stopMockServer() {
                if (server) {
                    await new Promise((resolve) => {
                        server.close(() => resolve());
                    });
                    server = null;
                }
            },
            mockRequest(path, response) {
                routes.set(path, response);
            },
            captureRequests() {
                return [...requests];
            },
            clearRequests() {
                requests.length = 0;
            }
        };
    }
    async createIntegrationNetworkHelper() {
        // For integration tests, we might want to test against real services
        console.warn('Integration network helper not fully implemented');
        return this.createMockNetworkHelper();
    }
    async startServices() {
        // Service startup logic would go here
        // This is a placeholder for starting required services like databases, message queues, etc.
    }
    async stopServices() {
        await Promise.allSettled(this.processes.map(process => this.stopProcess(process)));
        this.processes = [];
    }
    async stopProcess(process) {
        if (process && process.kill) {
            process.kill('SIGTERM');
            // Wait for graceful shutdown
            await new Promise((resolve) => {
                const timeout = setTimeout(() => {
                    if (process.kill) {
                        process.kill('SIGKILL');
                    }
                    resolve();
                }, 5000);
                process.on('exit', () => {
                    clearTimeout(timeout);
                    resolve();
                });
            });
        }
    }
    async createTempDir(prefix = 'test') {
        const tempPath = join(tmpdir(), `claude-code-flow-${prefix}-${Date.now()}-${Math.random().toString(36)}`);
        await fs.mkdir(tempPath, { recursive: true });
        this.tempDirs.push(tempPath);
        return tempPath;
    }
    async removeDir(path) {
        try {
            await fs.rm(path, { recursive: true, force: true });
        }
        catch (error) {
            console.warn(`Failed to remove directory ${path}:`, error);
        }
    }
    async cleanupTempDirs() {
        if (this.config.cleanup === 'manual') {
            return;
        }
        await Promise.allSettled(this.tempDirs.map(dir => this.removeDir(dir)));
        this.tempDirs.length = 0;
    }
    addCleanupCallback(callback) {
        this.cleanupCallbacks.push(callback);
    }
    getRandomPort() {
        return Math.floor(Math.random() * (65535 - 3000) + 3000);
    }
}
// Global integration test setup instance
export const integrationTestSetup = new IntegrationTestSetup();
// Convenience functions
export async function setupTestEnvironment(config) {
    const setup = new IntegrationTestSetup(config);
    return setup.setup();
}
export async function createTestWorkspace(testName, config) {
    const setup = new IntegrationTestSetup(config);
    return setup.createIsolatedEnvironment(testName);
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,