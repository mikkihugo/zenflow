{"file":"/home/mhugo/code/claude-code-flow/src/__tests__/helpers/integration-test-setup.ts","mappings":"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","names":[],"sources":["/home/mhugo/code/claude-code-flow/src/__tests__/helpers/integration-test-setup.ts"],"sourcesContent":["/**\n * Integration Test Setup - Environment Management\n * \n * Comprehensive setup and teardown for integration tests\n */\n\nimport { promises as fs } from 'fs';\nimport { join } from 'path';\nimport { tmpdir } from 'os';\nimport type { IntegrationTestConfig, DatabaseTestHelper, FileSystemTestHelper, NetworkTestHelper } from './types.js';\n\nexport class IntegrationTestSetup {\n  private config: IntegrationTestConfig;\n  private tempDirs: string[] = [];\n  private processes: any[] = [];\n  private cleanupCallbacks: Array<() => Promise<void>> = [];\n\n  constructor(config: IntegrationTestConfig = {}) {\n    this.config = {\n      environment: {\n        database: 'memory',\n        filesystem: 'temp',\n        network: 'mock'\n      },\n      services: [],\n      cleanup: 'aggressive',\n      timeout: 30000,\n      ...config\n    };\n  }\n\n  /**\n   * Setup the complete test environment\n   */\n  async setup(): Promise<{\n    database: DatabaseTestHelper;\n    filesystem: FileSystemTestHelper;\n    network: NetworkTestHelper;\n  }> {\n    try {\n      const database = await this.setupDatabase();\n      const filesystem = await this.setupFileSystem();\n      const network = await this.setupNetwork();\n\n      // Start required services\n      if (this.config.services && this.config.services.length > 0) {\n        await this.startServices();\n      }\n\n      return { database, filesystem, network };\n    } catch (error) {\n      await this.cleanup();\n      throw error;\n    }\n  }\n\n  /**\n   * Clean up the test environment\n   */\n  async cleanup(): Promise<void> {\n    const cleanupPromises = [\n      ...this.cleanupCallbacks.map(callback => callback()),\n      this.stopServices(),\n      this.cleanupTempDirs()\n    ];\n\n    await Promise.allSettled(cleanupPromises);\n    \n    this.cleanupCallbacks = [];\n    this.tempDirs = [];\n    this.processes = [];\n  }\n\n  /**\n   * Create isolated test environment\n   */\n  async createIsolatedEnvironment(testName: string): Promise<{\n    workDir: string;\n    configPath: string;\n    envVars: Record<string, string>;\n  }> {\n    const workDir = await this.createTempDir(`test-${testName}`);\n    const configPath = join(workDir, 'test-config.json');\n    \n    const envVars = {\n      NODE_ENV: 'test',\n      TEST_WORK_DIR: workDir,\n      TEST_CONFIG_PATH: configPath,\n      TEST_NAME: testName\n    };\n\n    // Create basic test configuration\n    const testConfig = {\n      name: testName,\n      workDir,\n      database: {\n        type: this.config.environment?.database || 'memory',\n        path: this.config.environment?.database === 'sqlite' ? join(workDir, 'test.db') : ':memory:'\n      },\n      filesystem: {\n        root: workDir,\n        type: this.config.environment?.filesystem || 'temp'\n      },\n      network: {\n        type: this.config.environment?.network || 'mock',\n        port: this.getRandomPort()\n      }\n    };\n\n    await fs.writeFile(configPath, JSON.stringify(testConfig, null, 2));\n\n    this.addCleanupCallback(async () => {\n      await this.removeDir(workDir);\n    });\n\n    return { workDir, configPath, envVars };\n  }\n\n  private async setupDatabase(): Promise<DatabaseTestHelper> {\n    const dbType = this.config.environment?.database || 'memory';\n\n    switch (dbType) {\n      case 'memory':\n        return this.createMemoryDatabaseHelper();\n      \n      case 'sqlite':\n        return await this.createSqliteDatabaseHelper();\n      \n      case 'postgres':\n        return await this.createPostgresDatabaseHelper();\n      \n      default:\n        throw new Error(`Unsupported database type: ${dbType}`);\n    }\n  }\n\n  private async setupFileSystem(): Promise<FileSystemTestHelper> {\n    const fsType = this.config.environment?.filesystem || 'temp';\n\n    switch (fsType) {\n      case 'mock':\n        return this.createMockFileSystemHelper();\n      \n      case 'temp':\n        return await this.createTempFileSystemHelper();\n      \n      case 'real':\n        return this.createRealFileSystemHelper();\n      \n      default:\n        throw new Error(`Unsupported filesystem type: ${fsType}`);\n    }\n  }\n\n  private async setupNetwork(): Promise<NetworkTestHelper> {\n    const networkType = this.config.environment?.network || 'mock';\n\n    switch (networkType) {\n      case 'mock':\n        return this.createMockNetworkHelper();\n      \n      case 'localhost':\n        return await this.createLocalhostNetworkHelper();\n      \n      case 'integration':\n        return await this.createIntegrationNetworkHelper();\n      \n      default:\n        throw new Error(`Unsupported network type: ${networkType}`);\n    }\n  }\n\n  private createMemoryDatabaseHelper(): DatabaseTestHelper {\n    const memoryDb = new Map<string, any>();\n\n    return {\n      async setup() {\n        memoryDb.clear();\n      },\n\n      async cleanup() {\n        memoryDb.clear();\n      },\n\n      async seed(data: any[]) {\n        data.forEach((item, index) => {\n          memoryDb.set(`item-${index}`, item);\n        });\n      },\n\n      async reset() {\n        memoryDb.clear();\n      },\n\n      getConnection() {\n        return {\n          get: (key: string) => memoryDb.get(key),\n          set: (key: string, value: any) => memoryDb.set(key, value),\n          delete: (key: string) => memoryDb.delete(key),\n          has: (key: string) => memoryDb.has(key),\n          clear: () => memoryDb.clear(),\n          size: () => memoryDb.size\n        };\n      }\n    };\n  }\n\n  private async createSqliteDatabaseHelper(): Promise<DatabaseTestHelper> {\n    const dbPath = join(await this.createTempDir('db'), 'test.db');\n    let db: any = null;\n\n    return {\n      async setup() {\n        // Import sqlite3 dynamically\n        try {\n          const sqlite3 = await import('sqlite3');\n          db = new sqlite3.Database(dbPath);\n          \n          // Create basic tables\n          await new Promise<void>((resolve, reject) => {\n            db.exec(`\n              CREATE TABLE IF NOT EXISTS test_data (\n                id INTEGER PRIMARY KEY AUTOINCREMENT,\n                key TEXT UNIQUE,\n                value TEXT,\n                created_at DATETIME DEFAULT CURRENT_TIMESTAMP\n              );\n            `, (err: any) => {\n              if (err) reject(err);\n              else resolve();\n            });\n          });\n        } catch (error) {\n          console.warn('SQLite not available, falling back to memory database');\n          return this.createMemoryDatabaseHelper().setup();\n        }\n      },\n\n      async cleanup() {\n        if (db) {\n          await new Promise<void>((resolve) => {\n            db.close(() => resolve());\n          });\n        }\n        try {\n          await fs.unlink(dbPath);\n        } catch (error) {\n          // File might not exist\n        }\n      },\n\n      async seed(data: any[]) {\n        if (!db) return;\n        \n        const stmt = db.prepare('INSERT OR REPLACE INTO test_data (key, value) VALUES (?, ?)');\n        \n        for (const [index, item] of data.entries()) {\n          await new Promise<void>((resolve, reject) => {\n            stmt.run(`item-${index}`, JSON.stringify(item), (err: any) => {\n              if (err) reject(err);\n              else resolve();\n            });\n          });\n        }\n        \n        stmt.finalize();\n      },\n\n      async reset() {\n        if (!db) return;\n        \n        await new Promise<void>((resolve, reject) => {\n          db.run('DELETE FROM test_data', (err: any) => {\n            if (err) reject(err);\n            else resolve();\n          });\n        });\n      },\n\n      getConnection() {\n        return db;\n      }\n    };\n  }\n\n  private async createPostgresDatabaseHelper(): Promise<DatabaseTestHelper> {\n    // This would require a PostgreSQL connection\n    // For now, return a mock implementation\n    console.warn('PostgreSQL integration not implemented, using memory database');\n    return this.createMemoryDatabaseHelper();\n  }\n\n  private createMockFileSystemHelper(): FileSystemTestHelper {\n    const mockFs = new Map<string, string>();\n\n    return {\n      async createTempDir(): Promise<string> {\n        const tempPath = `/mock/temp/${Date.now()}`;\n        mockFs.set(tempPath + '/', '');\n        return tempPath;\n      },\n\n      async createFile(path: string, content: string): Promise<void> {\n        mockFs.set(path, content);\n      },\n\n      async cleanup(): Promise<void> {\n        mockFs.clear();\n      },\n\n      mockFileSystem(): void {\n        // Already mocked\n      },\n\n      restoreFileSystem(): void {\n        // Nothing to restore\n      }\n    };\n  }\n\n  private async createTempFileSystemHelper(): Promise<FileSystemTestHelper> {\n    const tempPaths: string[] = [];\n\n    return {\n      async createTempDir(): Promise<string> {\n        const tempPath = await this.createTempDir('fs-helper');\n        tempPaths.push(tempPath);\n        return tempPath;\n      },\n\n      async createFile(path: string, content: string): Promise<void> {\n        await fs.writeFile(path, content, 'utf8');\n      },\n\n      async cleanup(): Promise<void> {\n        await Promise.allSettled(\n          tempPaths.map(path => this.removeDir(path))\n        );\n        tempPaths.length = 0;\n      },\n\n      mockFileSystem(): void {\n        // Real filesystem, no mocking needed\n      },\n\n      restoreFileSystem(): void {\n        // Real filesystem, no restoration needed\n      }\n    };\n  }\n\n  private createRealFileSystemHelper(): FileSystemTestHelper {\n    return {\n      async createTempDir(): Promise<string> {\n        return await this.createTempDir('real-fs');\n      },\n\n      async createFile(path: string, content: string): Promise<void> {\n        await fs.writeFile(path, content, 'utf8');\n      },\n\n      async cleanup(): Promise<void> {\n        // Cleanup handled by main cleanup\n      },\n\n      mockFileSystem(): void {\n        console.warn('Cannot mock real filesystem');\n      },\n\n      restoreFileSystem(): void {\n        console.warn('Real filesystem, nothing to restore');\n      }\n    };\n  }\n\n  private createMockNetworkHelper(): NetworkTestHelper {\n    const mockRequests: any[] = [];\n    const mockResponses = new Map<string, any>();\n\n    return {\n      async startMockServer(port?: number): Promise<void> {\n        // Mock server is always \"running\"\n      },\n\n      async stopMockServer(): Promise<void> {\n        mockRequests.length = 0;\n        mockResponses.clear();\n      },\n\n      mockRequest(path: string, response: any): void {\n        mockResponses.set(path, response);\n      },\n\n      captureRequests(): any[] {\n        return [...mockRequests];\n      },\n\n      clearRequests(): void {\n        mockRequests.length = 0;\n      }\n    };\n  }\n\n  private async createLocalhostNetworkHelper(): Promise<NetworkTestHelper> {\n    let server: any = null;\n    const requests: any[] = [];\n    const routes = new Map<string, any>();\n\n    return {\n      async startMockServer(port: number = this.getRandomPort()): Promise<void> {\n        try {\n          const http = await import('http');\n          \n          server = http.createServer((req, res) => {\n            const requestData = {\n              method: req.method,\n              url: req.url,\n              headers: req.headers,\n              timestamp: Date.now()\n            };\n            \n            requests.push(requestData);\n            \n            const response = routes.get(req.url || '/');\n            if (response) {\n              res.writeHead(200, { 'Content-Type': 'application/json' });\n              res.end(JSON.stringify(response));\n            } else {\n              res.writeHead(404);\n              res.end('Not Found');\n            }\n          });\n          \n          await new Promise<void>((resolve, reject) => {\n            server.listen(port, (err: any) => {\n              if (err) reject(err);\n              else resolve();\n            });\n          });\n        } catch (error) {\n          console.warn('HTTP server not available, using mock network');\n        }\n      },\n\n      async stopMockServer(): Promise<void> {\n        if (server) {\n          await new Promise<void>((resolve) => {\n            server.close(() => resolve());\n          });\n          server = null;\n        }\n      },\n\n      mockRequest(path: string, response: any): void {\n        routes.set(path, response);\n      },\n\n      captureRequests(): any[] {\n        return [...requests];\n      },\n\n      clearRequests(): void {\n        requests.length = 0;\n      }\n    };\n  }\n\n  private async createIntegrationNetworkHelper(): Promise<NetworkTestHelper> {\n    // For integration tests, we might want to test against real services\n    console.warn('Integration network helper not fully implemented');\n    return this.createMockNetworkHelper();\n  }\n\n  private async startServices(): Promise<void> {\n    // Service startup logic would go here\n    // This is a placeholder for starting required services like databases, message queues, etc.\n  }\n\n  private async stopServices(): Promise<void> {\n    await Promise.allSettled(\n      this.processes.map(process => this.stopProcess(process))\n    );\n    this.processes = [];\n  }\n\n  private async stopProcess(process: any): Promise<void> {\n    if (process && process.kill) {\n      process.kill('SIGTERM');\n      \n      // Wait for graceful shutdown\n      await new Promise<void>((resolve) => {\n        const timeout = setTimeout(() => {\n          if (process.kill) {\n            process.kill('SIGKILL');\n          }\n          resolve();\n        }, 5000);\n        \n        process.on('exit', () => {\n          clearTimeout(timeout);\n          resolve();\n        });\n      });\n    }\n  }\n\n  private async createTempDir(prefix: string = 'test'): Promise<string> {\n    const tempPath = join(tmpdir(), `claude-code-flow-${prefix}-${Date.now()}-${Math.random().toString(36)}`);\n    await fs.mkdir(tempPath, { recursive: true });\n    this.tempDirs.push(tempPath);\n    return tempPath;\n  }\n\n  private async removeDir(path: string): Promise<void> {\n    try {\n      await fs.rm(path, { recursive: true, force: true });\n    } catch (error) {\n      console.warn(`Failed to remove directory ${path}:`, error);\n    }\n  }\n\n  private async cleanupTempDirs(): Promise<void> {\n    if (this.config.cleanup === 'manual') {\n      return;\n    }\n\n    await Promise.allSettled(\n      this.tempDirs.map(dir => this.removeDir(dir))\n    );\n    \n    this.tempDirs.length = 0;\n  }\n\n  private addCleanupCallback(callback: () => Promise<void>): void {\n    this.cleanupCallbacks.push(callback);\n  }\n\n  private getRandomPort(): number {\n    return Math.floor(Math.random() * (65535 - 3000) + 3000);\n  }\n}\n\n// Global integration test setup instance\nexport const integrationTestSetup = new IntegrationTestSetup();\n\n// Convenience functions\nexport async function setupTestEnvironment(config?: IntegrationTestConfig) {\n  const setup = new IntegrationTestSetup(config);\n  return setup.setup();\n}\n\nexport async function createTestWorkspace(testName: string, config?: IntegrationTestConfig) {\n  const setup = new IntegrationTestSetup(config);\n  return setup.createIsolatedEnvironment(testName);\n}"],"version":3}