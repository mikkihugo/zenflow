{"version":3,"names":["cov_jl18tk9zx","actualCoverage","readFile","writeFile","readdir","stat","existsSync","join","dirname","extname","EventEmitter","createLogger","ensureDirectory","copyFile","findFiles","isDirectory","validateString","validateObject","SimpleTemplateEngine","name","s","render","content","context","f","result","key","value","Object","entries","variables","pattern","RegExp","replace","String","metadata","templateName","templateVersion","generatedAt","toISOString","generatedBy","helperName","helperFn","helpers","match","args","argList","split","map","arg","trim","error","shouldProcess","filePath","ext","toLowerCase","includes","getPatterns","DEFAULT_HELPERS","uppercase","str","toUpperCase","lowercase","capitalize","charAt","slice","camelCase","_","char","kebabCase","snakeCase","pascalCase","pluralize","endsWith","b","singularize","now","Date","timestamp","uuid","c","r","Math","random","v","toString","TemplateService","logger","templatesDir","engines","Map","templates","initialized","constructor","config","prefix","process","cwd","registerEngine","init","loadTemplates","info","dispose","clear","healthCheck","healthy","message","templateCount","size","engineCount","engine","set","debug","getTemplates","success","data","Array","from","values","getTemplate","template","get","Error","renderTemplate","outputDir","options","startTime","templateResult","validationResult","validateVariables","valid","errors","version","customHelpers","engineName","dryRun","generatedFiles","skippedFiles","duration","relativeFilePath","files","sourceFilePath","path","targetFilePath","shouldSkipFile","push","overwrite","renderedContent","file","postProcess","runPostProcessing","emit","createTemplate","sourceDir","templateDir","recursive","relativeFiles","relativePath","targetPath","templateConfig","description","author","license","tags","ignore","include","engineConfig","dependencies","configPath","JSON","stringify","createdAt","modifiedAt","withFileTypes","entry","configData","parse","filter","stats","birthtime","mtime","warn","templateVars","providedVars","warnings","templateVar","required","undefined","code","expected","type","actual","validation","validateVariable","length","fieldName","isArray","allowNull","allowedValues","regex","test","included","scripts","script","spawn","stdio","stdout","on","stderr","Promise","resolve","reject"],"sources":["/home/mhugo/code/claude-code-flow/src/cli/services/template-service.ts"],"sourcesContent":["/**\n * Template Service\n * \n * Provides template operations for project initialization and code generation.\n * Supports multiple template engines, variable substitution, and custom templates.\n */\n\nimport { readFile, writeFile, readdir, stat } from 'fs/promises';\nimport { existsSync } from 'fs';\nimport { join, dirname, basename, extname } from 'path';\nimport { EventEmitter } from 'events';\nimport { createLogger, type Logger } from '../utils/logger.js';\nimport { ensureDirectory, copyFile, findFiles, isDirectory } from '../utils/file-system.js';\nimport { validateString, validateObject } from '../utils/validation.js';\nimport type { Result, ValidationResult } from '../types/index.js';\n\n/**\n * Template variable definition\n */\nexport interface TemplateVariable {\n  /** Variable name */\n  name: string;\n  \n  /** Variable description */\n  description: string;\n  \n  /** Variable type */\n  type: 'string' | 'number' | 'boolean' | 'array' | 'object';\n  \n  /** Default value */\n  defaultValue?: any;\n  \n  /** Whether variable is required */\n  required?: boolean;\n  \n  /** Validation pattern (for strings) */\n  pattern?: string;\n  \n  /** Allowed values (enum) */\n  allowedValues?: any[];\n  \n  /** Prompt message for interactive input */\n  prompt?: string;\n}\n\n/**\n * Template context for rendering\n */\nexport interface TemplateContext {\n  /** Template variables */\n  variables: Record<string, any>;\n  \n  /** Template metadata */\n  metadata: {\n    templateName: string;\n    templateVersion: string;\n    generatedAt: Date;\n    generatedBy: string;\n  };\n  \n  /** Helper functions */\n  helpers: Record<string, (...args: any[]) => any>;\n}\n\n/**\n * Template configuration\n */\nexport interface TemplateConfig {\n  /** Template name */\n  name: string;\n  \n  /** Template version */\n  version: string;\n  \n  /** Template description */\n  description: string;\n  \n  /** Template author */\n  author?: string;\n  \n  /** Template license */\n  license?: string;\n  \n  /** Template tags */\n  tags?: string[];\n  \n  /** Template variables */\n  variables: TemplateVariable[];\n  \n  /** Files to ignore during template processing */\n  ignore?: string[];\n  \n  /** File patterns to process */\n  include?: string[];\n  \n  /** Template engine to use */\n  engine?: 'handlebars' | 'mustache' | 'simple' | 'custom';\n  \n  /** Custom template engine configuration */\n  engineConfig?: Record<string, any>;\n  \n  /** Post-processing scripts */\n  postProcess?: string[];\n  \n  /** Dependencies to install */\n  dependencies?: {\n    npm?: string[];\n    system?: string[];\n  };\n}\n\n/**\n * Project template definition\n */\nexport interface ProjectTemplate {\n  /** Template configuration */\n  config: TemplateConfig;\n  \n  /** Template directory path */\n  path: string;\n  \n  /** Template files */\n  files: string[];\n  \n  /** Template size in bytes */\n  size: number;\n  \n  /** Template creation date */\n  createdAt: Date;\n  \n  /** Template modification date */\n  modifiedAt: Date;\n}\n\n/**\n * Template render result\n */\nexport interface TemplateRenderResult {\n  /** Render success */\n  success: boolean;\n  \n  /** Render message */\n  message: string;\n  \n  /** Generated files */\n  generatedFiles: string[];\n  \n  /** Skipped files */\n  skippedFiles: string[];\n  \n  /** Errors encountered */\n  errors: Array<{\n    file: string;\n    error: string;\n  }>;\n  \n  /** Render duration */\n  duration: number;\n  \n  /** Output directory */\n  outputDir: string;\n}\n\n/**\n * Template engine interface\n */\nexport interface TemplateEngine {\n  /** Engine name */\n  name: string;\n  \n  /** Render template content */\n  render(content: string, context: TemplateContext): Promise<string>;\n  \n  /** Check if file should be processed */\n  shouldProcess(filePath: string): boolean;\n  \n  /** Get file patterns this engine handles */\n  getPatterns(): string[];\n}\n\n/**\n * Simple template engine implementation\n */\nclass SimpleTemplateEngine implements TemplateEngine {\n  name = 'simple';\n  \n  async render(content: string, context: TemplateContext): Promise<string> {\n    let result = content;\n    \n    // Replace variables using {{variable}} syntax\n    for (const [key, value] of Object.entries(context.variables)) {\n      const pattern = new RegExp(`\\\\{\\\\{\\\\s*${key}\\\\s*\\\\}\\\\}`, 'g');\n      result = result.replace(pattern, String(value));\n    }\n    \n    // Replace metadata variables\n    result = result.replace(/\\{\\{\\s*templateName\\s*\\}\\}/g, context.metadata.templateName);\n    result = result.replace(/\\{\\{\\s*templateVersion\\s*\\}\\}/g, context.metadata.templateVersion);\n    result = result.replace(/\\{\\{\\s*generatedAt\\s*\\}\\}/g, context.metadata.generatedAt.toISOString());\n    result = result.replace(/\\{\\{\\s*generatedBy\\s*\\}\\}/g, context.metadata.generatedBy);\n    \n    // Apply helper functions\n    for (const [helperName, helperFn] of Object.entries(context.helpers)) {\n      const pattern = new RegExp(`\\\\{\\\\{\\\\s*${helperName}\\\\s*\\\\(([^)]+)\\\\)\\\\s*\\\\}\\\\}`, 'g');\n      result = result.replace(pattern, (match, args) => {\n        try {\n          const argList = args.split(',').map((arg: string) => arg.trim().replace(/[\"']/g, ''));\n          return String(helperFn(...argList));\n        } catch (error) {\n          return match; // Keep original if helper fails\n        }\n      });\n    }\n    \n    return result;\n  }\n  \n  shouldProcess(filePath: string): boolean {\n    const ext = extname(filePath).toLowerCase();\n    return !['.jpg', '.jpeg', '.png', '.gif', '.bmp', '.ico', '.zip', '.tar', '.gz'].includes(ext);\n  }\n  \n  getPatterns(): string[] {\n    return ['**/*'];\n  }\n}\n\n/**\n * Default template helpers\n */\nconst DEFAULT_HELPERS = {\n  uppercase: (str: string) => str.toUpperCase(),\n  lowercase: (str: string) => str.toLowerCase(),\n  capitalize: (str: string) => str.charAt(0).toUpperCase() + str.slice(1),\n  camelCase: (str: string) => str.replace(/[-_\\s](.)/g, (_, char) => char.toUpperCase()),\n  kebabCase: (str: string) => str.replace(/[A-Z]/g, (char) => '-' + char.toLowerCase()).replace(/^-/, ''),\n  snakeCase: (str: string) => str.replace(/[A-Z]/g, (char) => '_' + char.toLowerCase()).replace(/^_/, ''),\n  pascalCase: (str: string) => str.charAt(0).toUpperCase() + str.slice(1).replace(/[-_\\s](.)/g, (_, char) => char.toUpperCase()),\n  pluralize: (str: string) => str.endsWith('s') ? str : str + 's',\n  singularize: (str: string) => str.endsWith('s') ? str.slice(0, -1) : str,\n  now: () => new Date().toISOString(),\n  timestamp: () => Date.now(),\n  uuid: () => 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, (c) => {\n    const r = Math.random() * 16 | 0;\n    const v = c === 'x' ? r : (r & 0x3 | 0x8);\n    return v.toString(16);\n  }),\n};\n\n/**\n * Template service implementation\n */\nexport class TemplateService extends EventEmitter {\n  private logger: Logger;\n  private templatesDir: string;\n  private engines = new Map<string, TemplateEngine>();\n  private templates = new Map<string, ProjectTemplate>();\n  private initialized = false;\n  \n  constructor(config?: Record<string, any>) {\n    super();\n    this.logger = createLogger({ prefix: 'TemplateService' });\n    this.templatesDir = config?.templatesDir || join(process.cwd(), 'templates');\n    \n    // Register default template engine\n    this.registerEngine(new SimpleTemplateEngine());\n  }\n  \n  /**\n   * Initialize the template service\n   */\n  async init(): Promise<void> {\n    if (this.initialized) {\n      return;\n    }\n    \n    try {\n      // Ensure templates directory exists\n      await ensureDirectory(this.templatesDir);\n      \n      // Load available templates\n      await this.loadTemplates();\n      \n      this.initialized = true;\n      this.logger.info('Template service initialized');\n    } catch (error) {\n      this.logger.error('Failed to initialize template service:', error);\n      throw error;\n    }\n  }\n  \n  /**\n   * Dispose the template service\n   */\n  async dispose(): Promise<void> {\n    if (!this.initialized) {\n      return;\n    }\n    \n    try {\n      this.templates.clear();\n      this.engines.clear();\n      this.initialized = false;\n      \n      this.logger.info('Template service disposed');\n    } catch (error) {\n      this.logger.error('Error disposing template service:', error);\n    }\n  }\n  \n  /**\n   * Health check for the service\n   */\n  async healthCheck(): Promise<{ healthy: boolean; message?: string }> {\n    try {\n      if (!this.initialized) {\n        return {\n          healthy: false,\n          message: 'Service not initialized',\n        };\n      }\n      \n      // Check if templates directory exists\n      if (!existsSync(this.templatesDir)) {\n        return {\n          healthy: false,\n          message: 'Templates directory not accessible',\n        };\n      }\n      \n      const templateCount = this.templates.size;\n      const engineCount = this.engines.size;\n      \n      return {\n        healthy: true,\n        message: `${templateCount} templates, ${engineCount} engines`,\n      };\n    } catch (error) {\n      return {\n        healthy: false,\n        message: (error as Error).message,\n      };\n    }\n  }\n  \n  /**\n   * Register a template engine\n   */\n  registerEngine(engine: TemplateEngine): void {\n    this.engines.set(engine.name, engine);\n    this.logger.debug(`Registered template engine: ${engine.name}`);\n  }\n  \n  /**\n   * Get available templates\n   */\n  async getTemplates(): Promise<Result<ProjectTemplate[]>> {\n    try {\n      await this.loadTemplates(); // Refresh templates\n      return {\n        success: true,\n        data: Array.from(this.templates.values()),\n      };\n    } catch (error) {\n      return {\n        success: false,\n        error: error as Error,\n      };\n    }\n  }\n  \n  /**\n   * Get a specific template\n   */\n  async getTemplate(name: string): Promise<Result<ProjectTemplate>> {\n    try {\n      const template = this.templates.get(name);\n      if (!template) {\n        return {\n          success: false,\n          error: new Error(`Template '${name}' not found`),\n        };\n      }\n      \n      return {\n        success: true,\n        data: template,\n      };\n    } catch (error) {\n      return {\n        success: false,\n        error: error as Error,\n      };\n    }\n  }\n  \n  /**\n   * Render a template to a target directory\n   */\n  async renderTemplate(\n    templateName: string,\n    outputDir: string,\n    variables: Record<string, any> = {},\n    options: {\n      overwrite?: boolean;\n      dryRun?: boolean;\n      customHelpers?: Record<string, (...args: any[]) => any>;\n    } = {}\n  ): Promise<Result<TemplateRenderResult>> {\n    const startTime = Date.now();\n    \n    try {\n      this.logger.info(`Rendering template '${templateName}' to '${outputDir}'`);\n      \n      // Get template\n      const templateResult = await this.getTemplate(templateName);\n      if (!templateResult.success) {\n        return templateResult as Result<TemplateRenderResult>;\n      }\n      \n      const template = templateResult.data;\n      \n      // Validate variables\n      const validationResult = await this.validateVariables(template.config.variables, variables);\n      if (!validationResult.valid) {\n        return {\n          success: false,\n          error: new Error(`Variable validation failed: ${validationResult.errors[0]?.message}`),\n        };\n      }\n      \n      // Prepare template context\n      const context: TemplateContext = {\n        variables,\n        metadata: {\n          templateName: template.config.name,\n          templateVersion: template.config.version,\n          generatedAt: new Date(),\n          generatedBy: 'claude-flow',\n        },\n        helpers: {\n          ...DEFAULT_HELPERS,\n          ...options.customHelpers,\n        },\n      };\n      \n      // Get template engine\n      const engineName = template.config.engine || 'simple';\n      const engine = this.engines.get(engineName);\n      if (!engine) {\n        return {\n          success: false,\n          error: new Error(`Template engine '${engineName}' not found`),\n        };\n      }\n      \n      // Ensure output directory exists (unless dry run)\n      if (!options.dryRun) {\n        await ensureDirectory(outputDir);\n      }\n      \n      const result: TemplateRenderResult = {\n        success: true,\n        message: 'Template rendered successfully',\n        generatedFiles: [],\n        skippedFiles: [],\n        errors: [],\n        duration: 0,\n        outputDir,\n      };\n      \n      // Process template files\n      for (const relativeFilePath of template.files) {\n        const sourceFilePath = join(template.path, relativeFilePath);\n        const targetFilePath = join(outputDir, relativeFilePath);\n        \n        try {\n          // Check if file should be skipped\n          if (this.shouldSkipFile(relativeFilePath, template.config)) {\n            result.skippedFiles.push(relativeFilePath);\n            continue;\n          }\n          \n          // Check if target exists and overwrite is disabled\n          if (!options.overwrite && existsSync(targetFilePath) && !options.dryRun) {\n            result.skippedFiles.push(relativeFilePath);\n            this.logger.debug(`Skipped existing file: ${relativeFilePath}`);\n            continue;\n          }\n          \n          // Process file\n          if (engine.shouldProcess(sourceFilePath)) {\n            // Read, render, and write template file\n            const content = await readFile(sourceFilePath, 'utf8');\n            const renderedContent = await engine.render(content, context);\n            \n            if (!options.dryRun) {\n              await ensureDirectory(dirname(targetFilePath));\n              await writeFile(targetFilePath, renderedContent, 'utf8');\n            }\n            \n            result.generatedFiles.push(relativeFilePath);\n            this.logger.debug(`Processed template file: ${relativeFilePath}`);\n          } else {\n            // Copy binary file as-is\n            if (!options.dryRun) {\n              await ensureDirectory(dirname(targetFilePath));\n              await copyFile(sourceFilePath, targetFilePath, { overwrite: options.overwrite });\n            }\n            \n            result.generatedFiles.push(relativeFilePath);\n            this.logger.debug(`Copied binary file: ${relativeFilePath}`);\n          }\n        } catch (error) {\n          result.errors.push({\n            file: relativeFilePath,\n            error: (error as Error).message,\n          });\n          this.logger.error(`Error processing file ${relativeFilePath}:`, error);\n        }\n      }\n      \n      result.duration = Date.now() - startTime;\n      \n      // Run post-processing scripts\n      if (template.config.postProcess && !options.dryRun) {\n        await this.runPostProcessing(template.config.postProcess, outputDir);\n      }\n      \n      this.emit('templateRendered', {\n        templateName,\n        outputDir,\n        result,\n      });\n      \n      return {\n        success: true,\n        data: result,\n      };\n    } catch (error) {\n      return {\n        success: false,\n        error: error as Error,\n      };\n    }\n  }\n  \n  /**\n   * Create a new template from a directory\n   */\n  async createTemplate(\n    sourceDir: string,\n    templateName: string,\n    config: Partial<TemplateConfig>\n  ): Promise<Result<ProjectTemplate>> {\n    try {\n      this.logger.info(`Creating template '${templateName}' from '${sourceDir}'`);\n      \n      // Validate source directory\n      if (!(await isDirectory(sourceDir))) {\n        return {\n          success: false,\n          error: new Error(`Source directory '${sourceDir}' does not exist`),\n        };\n      }\n      \n      // Create template directory\n      const templateDir = join(this.templatesDir, templateName);\n      await ensureDirectory(templateDir);\n      \n      // Copy source files to template directory\n      const files = await findFiles(sourceDir, '**/*', { recursive: true });\n      const relativeFiles: string[] = [];\n      \n      for (const file of files) {\n        const relativePath = file.replace(sourceDir, '').replace(/^[\\\\/]/, '');\n        const targetPath = join(templateDir, relativePath);\n        \n        await ensureDirectory(dirname(targetPath));\n        await copyFile(file, targetPath, { overwrite: true });\n        \n        relativeFiles.push(relativePath);\n      }\n      \n      // Create template configuration\n      const templateConfig: TemplateConfig = {\n        name: templateName,\n        version: '1.0.0',\n        description: config.description || `Template created from ${sourceDir}`,\n        author: config.author,\n        license: config.license,\n        tags: config.tags || [],\n        variables: config.variables || [],\n        ignore: config.ignore || ['node_modules/**', '.git/**', '**/*.log'],\n        include: config.include || ['**/*'],\n        engine: config.engine || 'simple',\n        engineConfig: config.engineConfig || {},\n        postProcess: config.postProcess || [],\n        dependencies: config.dependencies,\n      };\n      \n      // Save template configuration\n      const configPath = join(templateDir, 'template.json');\n      await writeFile(configPath, JSON.stringify(templateConfig, null, 2));\n      \n      // Create template object\n      const template: ProjectTemplate = {\n        config: templateConfig,\n        path: templateDir,\n        files: relativeFiles,\n        size: 0, // Would calculate actual size\n        createdAt: new Date(),\n        modifiedAt: new Date(),\n      };\n      \n      // Add to templates cache\n      this.templates.set(templateName, template);\n      \n      this.emit('templateCreated', { templateName, template });\n      \n      return {\n        success: true,\n        data: template,\n      };\n    } catch (error) {\n      return {\n        success: false,\n        error: error as Error,\n      };\n    }\n  }\n  \n  /**\n   * Load templates from the templates directory\n   */\n  private async loadTemplates(): Promise<void> {\n    try {\n      if (!existsSync(this.templatesDir)) {\n        return;\n      }\n      \n      const entries = await readdir(this.templatesDir, { withFileTypes: true });\n      \n      for (const entry of entries) {\n        if (entry.isDirectory()) {\n          const templateDir = join(this.templatesDir, entry.name);\n          const configPath = join(templateDir, 'template.json');\n          \n          if (existsSync(configPath)) {\n            try {\n              const configData = await readFile(configPath, 'utf8');\n              const config = JSON.parse(configData) as TemplateConfig;\n              \n              // Get template files\n              const files = await findFiles(templateDir, '**/*', { recursive: true });\n              const relativeFiles = files\n                .map(file => file.replace(templateDir, '').replace(/^[\\\\/]/, ''))\n                .filter(file => file !== 'template.json');\n              \n              // Get directory stats\n              const stats = await stat(templateDir);\n              \n              const template: ProjectTemplate = {\n                config,\n                path: templateDir,\n                files: relativeFiles,\n                size: 0, // Would calculate actual size\n                createdAt: stats.birthtime,\n                modifiedAt: stats.mtime,\n              };\n              \n              this.templates.set(config.name, template);\n              this.logger.debug(`Loaded template: ${config.name}`);\n            } catch (error) {\n              this.logger.warn(`Failed to load template from ${templateDir}:`, error);\n            }\n          }\n        }\n      }\n    } catch (error) {\n      this.logger.error('Failed to load templates:', error);\n    }\n  }\n  \n  /**\n   * Validate template variables\n   */\n  private async validateVariables(\n    templateVars: TemplateVariable[],\n    providedVars: Record<string, any>\n  ): Promise<ValidationResult> {\n    const errors: ValidationResult['errors'] = [];\n    const warnings: ValidationResult['warnings'] = [];\n    \n    for (const templateVar of templateVars) {\n      const value = providedVars[templateVar.name];\n      \n      // Check required variables\n      if (templateVar.required && (value === undefined || value === null)) {\n        errors.push({\n          message: `Required variable '${templateVar.name}' is missing`,\n          code: 'MISSING_REQUIRED_VARIABLE',\n          path: templateVar.name,\n          expected: templateVar.type,\n          actual: 'undefined',\n        });\n        continue;\n      }\n      \n      // Skip validation if variable is not provided and not required\n      if (value === undefined || value === null) {\n        continue;\n      }\n      \n      // Validate variable type and constraints\n      const validation = this.validateVariable(templateVar, value);\n      errors.push(...validation.errors);\n      warnings.push(...validation.warnings);\n    }\n    \n    return {\n      valid: errors.length === 0,\n      errors,\n      warnings,\n    };\n  }\n  \n  /**\n   * Validate a single template variable\n   */\n  private validateVariable(templateVar: TemplateVariable, value: any): ValidationResult {\n    switch (templateVar.type) {\n      case 'string':\n        return validateString(value, {\n          fieldName: templateVar.name,\n          pattern: templateVar.pattern ? new RegExp(templateVar.pattern) : undefined,\n        });\n      \n      case 'number':\n        if (typeof value !== 'number') {\n          return {\n            valid: false,\n            errors: [{\n              message: `Variable '${templateVar.name}' must be a number`,\n              code: 'INVALID_TYPE',\n              path: templateVar.name,\n              expected: 'number',\n              actual: typeof value,\n            }],\n            warnings: [],\n          };\n        }\n        break;\n      \n      case 'boolean':\n        if (typeof value !== 'boolean') {\n          return {\n            valid: false,\n            errors: [{\n              message: `Variable '${templateVar.name}' must be a boolean`,\n              code: 'INVALID_TYPE',\n              path: templateVar.name,\n              expected: 'boolean',\n              actual: typeof value,\n            }],\n            warnings: [],\n          };\n        }\n        break;\n      \n      case 'array':\n        if (!Array.isArray(value)) {\n          return {\n            valid: false,\n            errors: [{\n              message: `Variable '${templateVar.name}' must be an array`,\n              code: 'INVALID_TYPE',\n              path: templateVar.name,\n              expected: 'array',\n              actual: typeof value,\n            }],\n            warnings: [],\n          };\n        }\n        break;\n      \n      case 'object':\n        return validateObject(value, {\n          fieldName: templateVar.name,\n          allowNull: false,\n        });\n    }\n    \n    // Check allowed values\n    if (templateVar.allowedValues && !templateVar.allowedValues.includes(value)) {\n      return {\n        valid: false,\n        errors: [{\n          message: `Variable '${templateVar.name}' must be one of: ${templateVar.allowedValues.join(', ')}`,\n          code: 'INVALID_VALUE',\n          path: templateVar.name,\n          expected: templateVar.allowedValues.join(' | '),\n          actual: value,\n        }],\n        warnings: [],\n      };\n    }\n    \n    return { valid: true, errors: [], warnings: [] };\n  }\n  \n  /**\n   * Check if a file should be skipped during template processing\n   */\n  private shouldSkipFile(filePath: string, config: TemplateConfig): boolean {\n    // Check ignore patterns\n    if (config.ignore) {\n      for (const pattern of config.ignore) {\n        const regex = new RegExp(pattern.replace(/\\*/g, '.*'));\n        if (regex.test(filePath)) {\n          return true;\n        }\n      }\n    }\n    \n    // Check include patterns\n    if (config.include) {\n      let included = false;\n      for (const pattern of config.include) {\n        const regex = new RegExp(pattern.replace(/\\*/g, '.*'));\n        if (regex.test(filePath)) {\n          included = true;\n          break;\n        }\n      }\n      if (!included) {\n        return true;\n      }\n    }\n    \n    return false;\n  }\n  \n  /**\n   * Run post-processing scripts\n   */\n  private async runPostProcessing(scripts: string[], outputDir: string): Promise<void> {\n    for (const script of scripts) {\n      try {\n        this.logger.info(`Running post-processing script: ${script}`);\n        \n        const { spawn } = await import('child_process');\n        const process = spawn('sh', ['-c', script], {\n          cwd: outputDir,\n          stdio: ['ignore', 'pipe', 'pipe'],\n        });\n        \n        process.stdout?.on('data', (data) => {\n          this.logger.debug(`Script output: ${data.toString().trim()}`);\n        });\n        \n        process.stderr?.on('data', (data) => {\n          this.logger.warn(`Script error: ${data.toString().trim()}`);\n        });\n        \n        await new Promise<void>((resolve, reject) => {\n          process.on('exit', (code) => {\n            if (code === 0) {\n              resolve();\n            } else {\n              reject(new Error(`Post-processing script failed with code ${code}`));\n            }\n          });\n        });\n      } catch (error) {\n        this.logger.error(`Post-processing script failed: ${script}`, error);\n        throw error;\n      }\n    }\n  }\n}\n"],"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","ignoreList":[]}