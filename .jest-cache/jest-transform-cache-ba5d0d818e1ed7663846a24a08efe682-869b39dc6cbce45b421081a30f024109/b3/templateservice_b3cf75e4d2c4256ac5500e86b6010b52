ee7b5c410b5be50ac7c0fb865272a8bb
/* istanbul ignore next */
function cov_jl18tk9zx() {
  var path = "/home/mhugo/code/claude-code-flow/src/cli/services/template-service.ts";
  var hash = "e1a6ba4b618254c58f67ef7b1fe155c24f88fbea";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/home/mhugo/code/claude-code-flow/src/cli/services/template-service.ts",
    statementMap: {
      "0": {
        start: {
          line: 18,
          column: 11
        },
        end: {
          line: 18,
          column: 19
        }
      },
      "1": {
        start: {
          line: 20,
          column: 21
        },
        end: {
          line: 20,
          column: 28
        }
      },
      "2": {
        start: {
          line: 22,
          column: 8
        },
        end: {
          line: 25,
          column: 9
        }
      },
      "3": {
        start: {
          line: 23,
          column: 28
        },
        end: {
          line: 23,
          column: 73
        }
      },
      "4": {
        start: {
          line: 24,
          column: 12
        },
        end: {
          line: 24,
          column: 60
        }
      },
      "5": {
        start: {
          line: 27,
          column: 8
        },
        end: {
          line: 27,
          column: 94
        }
      },
      "6": {
        start: {
          line: 28,
          column: 8
        },
        end: {
          line: 28,
          column: 100
        }
      },
      "7": {
        start: {
          line: 29,
          column: 8
        },
        end: {
          line: 29,
          column: 106
        }
      },
      "8": {
        start: {
          line: 30,
          column: 8
        },
        end: {
          line: 30,
          column: 92
        }
      },
      "9": {
        start: {
          line: 32,
          column: 8
        },
        end: {
          line: 43,
          column: 9
        }
      },
      "10": {
        start: {
          line: 33,
          column: 28
        },
        end: {
          line: 33,
          column: 97
        }
      },
      "11": {
        start: {
          line: 34,
          column: 12
        },
        end: {
          line: 42,
          column: 15
        }
      },
      "12": {
        start: {
          line: 35,
          column: 16
        },
        end: {
          line: 41,
          column: 17
        }
      },
      "13": {
        start: {
          line: 36,
          column: 36
        },
        end: {
          line: 36,
          column: 97
        }
      },
      "14": {
        start: {
          line: 36,
          column: 65
        },
        end: {
          line: 36,
          column: 96
        }
      },
      "15": {
        start: {
          line: 37,
          column: 20
        },
        end: {
          line: 37,
          column: 56
        }
      },
      "16": {
        start: {
          line: 40,
          column: 20
        },
        end: {
          line: 40,
          column: 33
        }
      },
      "17": {
        start: {
          line: 44,
          column: 8
        },
        end: {
          line: 44,
          column: 22
        }
      },
      "18": {
        start: {
          line: 47,
          column: 20
        },
        end: {
          line: 47,
          column: 51
        }
      },
      "19": {
        start: {
          line: 48,
          column: 8
        },
        end: {
          line: 48,
          column: 103
        }
      },
      "20": {
        start: {
          line: 51,
          column: 8
        },
        end: {
          line: 51,
          column: 24
        }
      },
      "21": {
        start: {
          line: 57,
          column: 24
        },
        end: {
          line: 74,
          column: 1
        }
      },
      "22": {
        start: {
          line: 58,
          column: 24
        },
        end: {
          line: 58,
          column: 41
        }
      },
      "23": {
        start: {
          line: 59,
          column: 24
        },
        end: {
          line: 59,
          column: 41
        }
      },
      "24": {
        start: {
          line: 60,
          column: 25
        },
        end: {
          line: 60,
          column: 67
        }
      },
      "25": {
        start: {
          line: 61,
          column: 24
        },
        end: {
          line: 61,
          column: 82
        }
      },
      "26": {
        start: {
          line: 61,
          column: 63
        },
        end: {
          line: 61,
          column: 81
        }
      },
      "27": {
        start: {
          line: 62,
          column: 24
        },
        end: {
          line: 62,
          column: 99
        }
      },
      "28": {
        start: {
          line: 62,
          column: 56
        },
        end: {
          line: 62,
          column: 80
        }
      },
      "29": {
        start: {
          line: 63,
          column: 24
        },
        end: {
          line: 63,
          column: 99
        }
      },
      "30": {
        start: {
          line: 63,
          column: 56
        },
        end: {
          line: 63,
          column: 80
        }
      },
      "31": {
        start: {
          line: 64,
          column: 25
        },
        end: {
          line: 64,
          column: 122
        }
      },
      "32": {
        start: {
          line: 64,
          column: 103
        },
        end: {
          line: 64,
          column: 121
        }
      },
      "33": {
        start: {
          line: 65,
          column: 24
        },
        end: {
          line: 65,
          column: 59
        }
      },
      "34": {
        start: {
          line: 66,
          column: 26
        },
        end: {
          line: 66,
          column: 68
        }
      },
      "35": {
        start: {
          line: 67,
          column: 15
        },
        end: {
          line: 67,
          column: 39
        }
      },
      "36": {
        start: {
          line: 68,
          column: 21
        },
        end: {
          line: 68,
          column: 31
        }
      },
      "37": {
        start: {
          line: 69,
          column: 16
        },
        end: {
          line: 73,
          column: 6
        }
      },
      "38": {
        start: {
          line: 70,
          column: 18
        },
        end: {
          line: 70,
          column: 40
        }
      },
      "39": {
        start: {
          line: 71,
          column: 18
        },
        end: {
          line: 71,
          column: 49
        }
      },
      "40": {
        start: {
          line: 72,
          column: 8
        },
        end: {
          line: 72,
          column: 30
        }
      },
      "41": {
        start: {
          line: 81,
          column: 14
        },
        end: {
          line: 81,
          column: 23
        }
      },
      "42": {
        start: {
          line: 82,
          column: 16
        },
        end: {
          line: 82,
          column: 25
        }
      },
      "43": {
        start: {
          line: 83,
          column: 18
        },
        end: {
          line: 83,
          column: 23
        }
      },
      "44": {
        start: {
          line: 85,
          column: 8
        },
        end: {
          line: 85,
          column: 16
        }
      },
      "45": {
        start: {
          line: 86,
          column: 8
        },
        end: {
          line: 86,
          column: 66
        }
      },
      "46": {
        start: {
          line: 87,
          column: 8
        },
        end: {
          line: 87,
          column: 85
        }
      },
      "47": {
        start: {
          line: 89,
          column: 8
        },
        end: {
          line: 89,
          column: 56
        }
      },
      "48": {
        start: {
          line: 95,
          column: 8
        },
        end: {
          line: 97,
          column: 9
        }
      },
      "49": {
        start: {
          line: 96,
          column: 12
        },
        end: {
          line: 96,
          column: 19
        }
      },
      "50": {
        start: {
          line: 98,
          column: 8
        },
        end: {
          line: 109,
          column: 9
        }
      },
      "51": {
        start: {
          line: 100,
          column: 12
        },
        end: {
          line: 100,
          column: 53
        }
      },
      "52": {
        start: {
          line: 102,
          column: 12
        },
        end: {
          line: 102,
          column: 39
        }
      },
      "53": {
        start: {
          line: 103,
          column: 12
        },
        end: {
          line: 103,
          column: 36
        }
      },
      "54": {
        start: {
          line: 104,
          column: 12
        },
        end: {
          line: 104,
          column: 61
        }
      },
      "55": {
        start: {
          line: 107,
          column: 12
        },
        end: {
          line: 107,
          column: 79
        }
      },
      "56": {
        start: {
          line: 108,
          column: 12
        },
        end: {
          line: 108,
          column: 24
        }
      },
      "57": {
        start: {
          line: 115,
          column: 8
        },
        end: {
          line: 117,
          column: 9
        }
      },
      "58": {
        start: {
          line: 116,
          column: 12
        },
        end: {
          line: 116,
          column: 19
        }
      },
      "59": {
        start: {
          line: 118,
          column: 8
        },
        end: {
          line: 126,
          column: 9
        }
      },
      "60": {
        start: {
          line: 119,
          column: 12
        },
        end: {
          line: 119,
          column: 35
        }
      },
      "61": {
        start: {
          line: 120,
          column: 12
        },
        end: {
          line: 120,
          column: 33
        }
      },
      "62": {
        start: {
          line: 121,
          column: 12
        },
        end: {
          line: 121,
          column: 37
        }
      },
      "63": {
        start: {
          line: 122,
          column: 12
        },
        end: {
          line: 122,
          column: 58
        }
      },
      "64": {
        start: {
          line: 125,
          column: 12
        },
        end: {
          line: 125,
          column: 74
        }
      },
      "65": {
        start: {
          line: 132,
          column: 8
        },
        end: {
          line: 158,
          column: 9
        }
      },
      "66": {
        start: {
          line: 133,
          column: 12
        },
        end: {
          line: 138,
          column: 13
        }
      },
      "67": {
        start: {
          line: 134,
          column: 16
        },
        end: {
          line: 137,
          column: 18
        }
      },
      "68": {
        start: {
          line: 140,
          column: 12
        },
        end: {
          line: 145,
          column: 13
        }
      },
      "69": {
        start: {
          line: 141,
          column: 16
        },
        end: {
          line: 144,
          column: 18
        }
      },
      "70": {
        start: {
          line: 146,
          column: 34
        },
        end: {
          line: 146,
          column: 53
        }
      },
      "71": {
        start: {
          line: 147,
          column: 32
        },
        end: {
          line: 147,
          column: 49
        }
      },
      "72": {
        start: {
          line: 148,
          column: 12
        },
        end: {
          line: 151,
          column: 14
        }
      },
      "73": {
        start: {
          line: 154,
          column: 12
        },
        end: {
          line: 157,
          column: 14
        }
      },
      "74": {
        start: {
          line: 164,
          column: 8
        },
        end: {
          line: 164,
          column: 46
        }
      },
      "75": {
        start: {
          line: 165,
          column: 8
        },
        end: {
          line: 165,
          column: 72
        }
      },
      "76": {
        start: {
          line: 171,
          column: 8
        },
        end: {
          line: 183,
          column: 9
        }
      },
      "77": {
        start: {
          line: 172,
          column: 12
        },
        end: {
          line: 172,
          column: 39
        }
      },
      "78": {
        start: {
          line: 173,
          column: 12
        },
        end: {
          line: 176,
          column: 14
        }
      },
      "79": {
        start: {
          line: 179,
          column: 12
        },
        end: {
          line: 182,
          column: 14
        }
      },
      "80": {
        start: {
          line: 189,
          column: 8
        },
        end: {
          line: 207,
          column: 9
        }
      },
      "81": {
        start: {
          line: 190,
          column: 29
        },
        end: {
          line: 190,
          column: 53
        }
      },
      "82": {
        start: {
          line: 191,
          column: 12
        },
        end: {
          line: 196,
          column: 13
        }
      },
      "83": {
        start: {
          line: 192,
          column: 16
        },
        end: {
          line: 195,
          column: 18
        }
      },
      "84": {
        start: {
          line: 197,
          column: 12
        },
        end: {
          line: 200,
          column: 14
        }
      },
      "85": {
        start: {
          line: 203,
          column: 12
        },
        end: {
          line: 206,
          column: 14
        }
      },
      "86": {
        start: {
          line: 213,
          column: 26
        },
        end: {
          line: 213,
          column: 36
        }
      },
      "87": {
        start: {
          line: 214,
          column: 8
        },
        end: {
          line: 332,
          column: 9
        }
      },
      "88": {
        start: {
          line: 215,
          column: 12
        },
        end: {
          line: 215,
          column: 87
        }
      },
      "89": {
        start: {
          line: 217,
          column: 35
        },
        end: {
          line: 217,
          column: 71
        }
      },
      "90": {
        start: {
          line: 218,
          column: 12
        },
        end: {
          line: 220,
          column: 13
        }
      },
      "91": {
        start: {
          line: 219,
          column: 16
        },
        end: {
          line: 219,
          column: 38
        }
      },
      "92": {
        start: {
          line: 221,
          column: 29
        },
        end: {
          line: 221,
          column: 48
        }
      },
      "93": {
        start: {
          line: 223,
          column: 37
        },
        end: {
          line: 223,
          column: 103
        }
      },
      "94": {
        start: {
          line: 224,
          column: 12
        },
        end: {
          line: 229,
          column: 13
        }
      },
      "95": {
        start: {
          line: 225,
          column: 16
        },
        end: {
          line: 228,
          column: 18
        }
      },
      "96": {
        start: {
          line: 231,
          column: 28
        },
        end: {
          line: 243,
          column: 13
        }
      },
      "97": {
        start: {
          line: 245,
          column: 31
        },
        end: {
          line: 245,
          column: 65
        }
      },
      "98": {
        start: {
          line: 246,
          column: 27
        },
        end: {
          line: 246,
          column: 55
        }
      },
      "99": {
        start: {
          line: 247,
          column: 12
        },
        end: {
          line: 252,
          column: 13
        }
      },
      "100": {
        start: {
          line: 248,
          column: 16
        },
        end: {
          line: 251,
          column: 18
        }
      },
      "101": {
        start: {
          line: 254,
          column: 12
        },
        end: {
          line: 256,
          column: 13
        }
      },
      "102": {
        start: {
          line: 255,
          column: 16
        },
        end: {
          line: 255,
          column: 49
        }
      },
      "103": {
        start: {
          line: 257,
          column: 27
        },
        end: {
          line: 265,
          column: 13
        }
      },
      "104": {
        start: {
          line: 267,
          column: 12
        },
        end: {
          line: 311,
          column: 13
        }
      },
      "105": {
        start: {
          line: 268,
          column: 39
        },
        end: {
          line: 268,
          column: 76
        }
      },
      "106": {
        start: {
          line: 269,
          column: 39
        },
        end: {
          line: 269,
          column: 72
        }
      },
      "107": {
        start: {
          line: 270,
          column: 16
        },
        end: {
          line: 310,
          column: 17
        }
      },
      "108": {
        start: {
          line: 272,
          column: 20
        },
        end: {
          line: 275,
          column: 21
        }
      },
      "109": {
        start: {
          line: 273,
          column: 24
        },
        end: {
          line: 273,
          column: 67
        }
      },
      "110": {
        start: {
          line: 274,
          column: 24
        },
        end: {
          line: 274,
          column: 33
        }
      },
      "111": {
        start: {
          line: 277,
          column: 20
        },
        end: {
          line: 281,
          column: 21
        }
      },
      "112": {
        start: {
          line: 278,
          column: 24
        },
        end: {
          line: 278,
          column: 67
        }
      },
      "113": {
        start: {
          line: 279,
          column: 24
        },
        end: {
          line: 279,
          column: 88
        }
      },
      "114": {
        start: {
          line: 280,
          column: 24
        },
        end: {
          line: 280,
          column: 33
        }
      },
      "115": {
        start: {
          line: 283,
          column: 20
        },
        end: {
          line: 302,
          column: 21
        }
      },
      "116": {
        start: {
          line: 285,
          column: 40
        },
        end: {
          line: 285,
          column: 78
        }
      },
      "117": {
        start: {
          line: 286,
          column: 48
        },
        end: {
          line: 286,
          column: 85
        }
      },
      "118": {
        start: {
          line: 287,
          column: 24
        },
        end: {
          line: 290,
          column: 25
        }
      },
      "119": {
        start: {
          line: 288,
          column: 28
        },
        end: {
          line: 288,
          column: 75
        }
      },
      "120": {
        start: {
          line: 289,
          column: 28
        },
        end: {
          line: 289,
          column: 85
        }
      },
      "121": {
        start: {
          line: 291,
          column: 24
        },
        end: {
          line: 291,
          column: 69
        }
      },
      "122": {
        start: {
          line: 292,
          column: 24
        },
        end: {
          line: 292,
          column: 90
        }
      },
      "123": {
        start: {
          line: 296,
          column: 24
        },
        end: {
          line: 299,
          column: 25
        }
      },
      "124": {
        start: {
          line: 297,
          column: 28
        },
        end: {
          line: 297,
          column: 75
        }
      },
      "125": {
        start: {
          line: 298,
          column: 28
        },
        end: {
          line: 298,
          column: 109
        }
      },
      "126": {
        start: {
          line: 300,
          column: 24
        },
        end: {
          line: 300,
          column: 69
        }
      },
      "127": {
        start: {
          line: 301,
          column: 24
        },
        end: {
          line: 301,
          column: 85
        }
      },
      "128": {
        start: {
          line: 305,
          column: 20
        },
        end: {
          line: 308,
          column: 23
        }
      },
      "129": {
        start: {
          line: 309,
          column: 20
        },
        end: {
          line: 309,
          column: 91
        }
      },
      "130": {
        start: {
          line: 312,
          column: 12
        },
        end: {
          line: 312,
          column: 53
        }
      },
      "131": {
        start: {
          line: 314,
          column: 12
        },
        end: {
          line: 316,
          column: 13
        }
      },
      "132": {
        start: {
          line: 315,
          column: 16
        },
        end: {
          line: 315,
          column: 85
        }
      },
      "133": {
        start: {
          line: 317,
          column: 12
        },
        end: {
          line: 321,
          column: 15
        }
      },
      "134": {
        start: {
          line: 322,
          column: 12
        },
        end: {
          line: 325,
          column: 14
        }
      },
      "135": {
        start: {
          line: 328,
          column: 12
        },
        end: {
          line: 331,
          column: 14
        }
      },
      "136": {
        start: {
          line: 338,
          column: 8
        },
        end: {
          line: 401,
          column: 9
        }
      },
      "137": {
        start: {
          line: 339,
          column: 12
        },
        end: {
          line: 339,
          column: 88
        }
      },
      "138": {
        start: {
          line: 341,
          column: 12
        },
        end: {
          line: 346,
          column: 13
        }
      },
      "139": {
        start: {
          line: 342,
          column: 16
        },
        end: {
          line: 345,
          column: 18
        }
      },
      "140": {
        start: {
          line: 348,
          column: 32
        },
        end: {
          line: 348,
          column: 69
        }
      },
      "141": {
        start: {
          line: 349,
          column: 12
        },
        end: {
          line: 349,
          column: 47
        }
      },
      "142": {
        start: {
          line: 351,
          column: 26
        },
        end: {
          line: 351,
          column: 81
        }
      },
      "143": {
        start: {
          line: 352,
          column: 34
        },
        end: {
          line: 352,
          column: 36
        }
      },
      "144": {
        start: {
          line: 353,
          column: 12
        },
        end: {
          line: 359,
          column: 13
        }
      },
      "145": {
        start: {
          line: 354,
          column: 37
        },
        end: {
          line: 354,
          column: 86
        }
      },
      "146": {
        start: {
          line: 355,
          column: 35
        },
        end: {
          line: 355,
          column: 66
        }
      },
      "147": {
        start: {
          line: 356,
          column: 16
        },
        end: {
          line: 356,
          column: 59
        }
      },
      "148": {
        start: {
          line: 357,
          column: 16
        },
        end: {
          line: 357,
          column: 70
        }
      },
      "149": {
        start: {
          line: 358,
          column: 16
        },
        end: {
          line: 358,
          column: 49
        }
      },
      "150": {
        start: {
          line: 361,
          column: 35
        },
        end: {
          line: 375,
          column: 13
        }
      },
      "151": {
        start: {
          line: 377,
          column: 31
        },
        end: {
          line: 377,
          column: 65
        }
      },
      "152": {
        start: {
          line: 378,
          column: 12
        },
        end: {
          line: 378,
          column: 81
        }
      },
      "153": {
        start: {
          line: 380,
          column: 29
        },
        end: {
          line: 387,
          column: 13
        }
      },
      "154": {
        start: {
          line: 389,
          column: 12
        },
        end: {
          line: 389,
          column: 55
        }
      },
      "155": {
        start: {
          line: 390,
          column: 12
        },
        end: {
          line: 390,
          column: 69
        }
      },
      "156": {
        start: {
          line: 391,
          column: 12
        },
        end: {
          line: 394,
          column: 14
        }
      },
      "157": {
        start: {
          line: 397,
          column: 12
        },
        end: {
          line: 400,
          column: 14
        }
      },
      "158": {
        start: {
          line: 407,
          column: 8
        },
        end: {
          line: 447,
          column: 9
        }
      },
      "159": {
        start: {
          line: 408,
          column: 12
        },
        end: {
          line: 410,
          column: 13
        }
      },
      "160": {
        start: {
          line: 409,
          column: 16
        },
        end: {
          line: 409,
          column: 23
        }
      },
      "161": {
        start: {
          line: 411,
          column: 28
        },
        end: {
          line: 411,
          column: 85
        }
      },
      "162": {
        start: {
          line: 412,
          column: 12
        },
        end: {
          line: 443,
          column: 13
        }
      },
      "163": {
        start: {
          line: 413,
          column: 16
        },
        end: {
          line: 442,
          column: 17
        }
      },
      "164": {
        start: {
          line: 414,
          column: 40
        },
        end: {
          line: 414,
          column: 75
        }
      },
      "165": {
        start: {
          line: 415,
          column: 39
        },
        end: {
          line: 415,
          column: 73
        }
      },
      "166": {
        start: {
          line: 416,
          column: 20
        },
        end: {
          line: 441,
          column: 21
        }
      },
      "167": {
        start: {
          line: 417,
          column: 24
        },
        end: {
          line: 440,
          column: 25
        }
      },
      "168": {
        start: {
          line: 418,
          column: 47
        },
        end: {
          line: 418,
          column: 81
        }
      },
      "169": {
        start: {
          line: 419,
          column: 43
        },
        end: {
          line: 419,
          column: 65
        }
      },
      "170": {
        start: {
          line: 421,
          column: 42
        },
        end: {
          line: 421,
          column: 99
        }
      },
      "171": {
        start: {
          line: 422,
          column: 50
        },
        end: {
          line: 424,
          column: 73
        }
      },
      "172": {
        start: {
          line: 423,
          column: 45
        },
        end: {
          line: 423,
          column: 96
        }
      },
      "173": {
        start: {
          line: 424,
          column: 48
        },
        end: {
          line: 424,
          column: 72
        }
      },
      "174": {
        start: {
          line: 426,
          column: 42
        },
        end: {
          line: 426,
          column: 65
        }
      },
      "175": {
        start: {
          line: 427,
          column: 45
        },
        end: {
          line: 434,
          column: 29
        }
      },
      "176": {
        start: {
          line: 435,
          column: 28
        },
        end: {
          line: 435,
          column: 70
        }
      },
      "177": {
        start: {
          line: 436,
          column: 28
        },
        end: {
          line: 436,
          column: 81
        }
      },
      "178": {
        start: {
          line: 439,
          column: 28
        },
        end: {
          line: 439,
          column: 100
        }
      },
      "179": {
        start: {
          line: 446,
          column: 12
        },
        end: {
          line: 446,
          column: 66
        }
      },
      "180": {
        start: {
          line: 453,
          column: 23
        },
        end: {
          line: 453,
          column: 25
        }
      },
      "181": {
        start: {
          line: 454,
          column: 25
        },
        end: {
          line: 454,
          column: 27
        }
      },
      "182": {
        start: {
          line: 455,
          column: 8
        },
        end: {
          line: 476,
          column: 9
        }
      },
      "183": {
        start: {
          line: 456,
          column: 26
        },
        end: {
          line: 456,
          column: 56
        }
      },
      "184": {
        start: {
          line: 458,
          column: 12
        },
        end: {
          line: 467,
          column: 13
        }
      },
      "185": {
        start: {
          line: 459,
          column: 16
        },
        end: {
          line: 465,
          column: 19
        }
      },
      "186": {
        start: {
          line: 466,
          column: 16
        },
        end: {
          line: 466,
          column: 25
        }
      },
      "187": {
        start: {
          line: 469,
          column: 12
        },
        end: {
          line: 471,
          column: 13
        }
      },
      "188": {
        start: {
          line: 470,
          column: 16
        },
        end: {
          line: 470,
          column: 25
        }
      },
      "189": {
        start: {
          line: 473,
          column: 31
        },
        end: {
          line: 473,
          column: 72
        }
      },
      "190": {
        start: {
          line: 474,
          column: 12
        },
        end: {
          line: 474,
          column: 46
        }
      },
      "191": {
        start: {
          line: 475,
          column: 12
        },
        end: {
          line: 475,
          column: 50
        }
      },
      "192": {
        start: {
          line: 477,
          column: 8
        },
        end: {
          line: 481,
          column: 10
        }
      },
      "193": {
        start: {
          line: 487,
          column: 8
        },
        end: {
          line: 543,
          column: 9
        }
      },
      "194": {
        start: {
          line: 489,
          column: 16
        },
        end: {
          line: 492,
          column: 19
        }
      },
      "195": {
        start: {
          line: 494,
          column: 16
        },
        end: {
          line: 506,
          column: 17
        }
      },
      "196": {
        start: {
          line: 495,
          column: 20
        },
        end: {
          line: 505,
          column: 22
        }
      },
      "197": {
        start: {
          line: 507,
          column: 16
        },
        end: {
          line: 507,
          column: 22
        }
      },
      "198": {
        start: {
          line: 509,
          column: 16
        },
        end: {
          line: 521,
          column: 17
        }
      },
      "199": {
        start: {
          line: 510,
          column: 20
        },
        end: {
          line: 520,
          column: 22
        }
      },
      "200": {
        start: {
          line: 522,
          column: 16
        },
        end: {
          line: 522,
          column: 22
        }
      },
      "201": {
        start: {
          line: 524,
          column: 16
        },
        end: {
          line: 536,
          column: 17
        }
      },
      "202": {
        start: {
          line: 525,
          column: 20
        },
        end: {
          line: 535,
          column: 22
        }
      },
      "203": {
        start: {
          line: 537,
          column: 16
        },
        end: {
          line: 537,
          column: 22
        }
      },
      "204": {
        start: {
          line: 539,
          column: 16
        },
        end: {
          line: 542,
          column: 19
        }
      },
      "205": {
        start: {
          line: 545,
          column: 8
        },
        end: {
          line: 557,
          column: 9
        }
      },
      "206": {
        start: {
          line: 546,
          column: 12
        },
        end: {
          line: 556,
          column: 14
        }
      },
      "207": {
        start: {
          line: 558,
          column: 8
        },
        end: {
          line: 558,
          column: 57
        }
      },
      "208": {
        start: {
          line: 565,
          column: 8
        },
        end: {
          line: 572,
          column: 9
        }
      },
      "209": {
        start: {
          line: 566,
          column: 12
        },
        end: {
          line: 571,
          column: 13
        }
      },
      "210": {
        start: {
          line: 567,
          column: 30
        },
        end: {
          line: 567,
          column: 70
        }
      },
      "211": {
        start: {
          line: 568,
          column: 16
        },
        end: {
          line: 570,
          column: 17
        }
      },
      "212": {
        start: {
          line: 569,
          column: 20
        },
        end: {
          line: 569,
          column: 32
        }
      },
      "213": {
        start: {
          line: 574,
          column: 8
        },
        end: {
          line: 586,
          column: 9
        }
      },
      "214": {
        start: {
          line: 575,
          column: 27
        },
        end: {
          line: 575,
          column: 32
        }
      },
      "215": {
        start: {
          line: 576,
          column: 12
        },
        end: {
          line: 582,
          column: 13
        }
      },
      "216": {
        start: {
          line: 577,
          column: 30
        },
        end: {
          line: 577,
          column: 70
        }
      },
      "217": {
        start: {
          line: 578,
          column: 16
        },
        end: {
          line: 581,
          column: 17
        }
      },
      "218": {
        start: {
          line: 579,
          column: 20
        },
        end: {
          line: 579,
          column: 36
        }
      },
      "219": {
        start: {
          line: 580,
          column: 20
        },
        end: {
          line: 580,
          column: 26
        }
      },
      "220": {
        start: {
          line: 583,
          column: 12
        },
        end: {
          line: 585,
          column: 13
        }
      },
      "221": {
        start: {
          line: 584,
          column: 16
        },
        end: {
          line: 584,
          column: 28
        }
      },
      "222": {
        start: {
          line: 587,
          column: 8
        },
        end: {
          line: 587,
          column: 21
        }
      },
      "223": {
        start: {
          line: 593,
          column: 8
        },
        end: {
          line: 622,
          column: 9
        }
      },
      "224": {
        start: {
          line: 594,
          column: 12
        },
        end: {
          line: 621,
          column: 13
        }
      },
      "225": {
        start: {
          line: 595,
          column: 16
        },
        end: {
          line: 595,
          column: 78
        }
      },
      "226": {
        start: {
          line: 596,
          column: 34
        },
        end: {
          line: 596,
          column: 63
        }
      },
      "227": {
        start: {
          line: 597,
          column: 32
        },
        end: {
          line: 600,
          column: 18
        }
      },
      "228": {
        start: {
          line: 601,
          column: 16
        },
        end: {
          line: 603,
          column: 19
        }
      },
      "229": {
        start: {
          line: 602,
          column: 20
        },
        end: {
          line: 602,
          column: 82
        }
      },
      "230": {
        start: {
          line: 604,
          column: 16
        },
        end: {
          line: 606,
          column: 19
        }
      },
      "231": {
        start: {
          line: 605,
          column: 20
        },
        end: {
          line: 605,
          column: 80
        }
      },
      "232": {
        start: {
          line: 607,
          column: 16
        },
        end: {
          line: 616,
          column: 19
        }
      },
      "233": {
        start: {
          line: 608,
          column: 20
        },
        end: {
          line: 615,
          column: 23
        }
      },
      "234": {
        start: {
          line: 609,
          column: 24
        },
        end: {
          line: 614,
          column: 25
        }
      },
      "235": {
        start: {
          line: 610,
          column: 28
        },
        end: {
          line: 610,
          column: 38
        }
      },
      "236": {
        start: {
          line: 613,
          column: 28
        },
        end: {
          line: 613,
          column: 97
        }
      },
      "237": {
        start: {
          line: 619,
          column: 16
        },
        end: {
          line: 619,
          column: 85
        }
      },
      "238": {
        start: {
          line: 620,
          column: 16
        },
        end: {
          line: 620,
          column: 28
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 19,
            column: 4
          },
          end: {
            line: 19,
            column: 5
          }
        },
        loc: {
          start: {
            line: 19,
            column: 35
          },
          end: {
            line: 45,
            column: 5
          }
        },
        line: 19
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 34,
            column: 45
          },
          end: {
            line: 34,
            column: 46
          }
        },
        loc: {
          start: {
            line: 34,
            column: 62
          },
          end: {
            line: 42,
            column: 13
          }
        },
        line: 34
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 36,
            column: 56
          },
          end: {
            line: 36,
            column: 57
          }
        },
        loc: {
          start: {
            line: 36,
            column: 65
          },
          end: {
            line: 36,
            column: 96
          }
        },
        line: 36
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 46,
            column: 4
          },
          end: {
            line: 46,
            column: 5
          }
        },
        loc: {
          start: {
            line: 46,
            column: 28
          },
          end: {
            line: 49,
            column: 5
          }
        },
        line: 46
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 50,
            column: 4
          },
          end: {
            line: 50,
            column: 5
          }
        },
        loc: {
          start: {
            line: 50,
            column: 18
          },
          end: {
            line: 52,
            column: 5
          }
        },
        line: 50
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 58,
            column: 15
          },
          end: {
            line: 58,
            column: 16
          }
        },
        loc: {
          start: {
            line: 58,
            column: 24
          },
          end: {
            line: 58,
            column: 41
          }
        },
        line: 58
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 59,
            column: 15
          },
          end: {
            line: 59,
            column: 16
          }
        },
        loc: {
          start: {
            line: 59,
            column: 24
          },
          end: {
            line: 59,
            column: 41
          }
        },
        line: 59
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 60,
            column: 16
          },
          end: {
            line: 60,
            column: 17
          }
        },
        loc: {
          start: {
            line: 60,
            column: 25
          },
          end: {
            line: 60,
            column: 67
          }
        },
        line: 60
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 61,
            column: 15
          },
          end: {
            line: 61,
            column: 16
          }
        },
        loc: {
          start: {
            line: 61,
            column: 24
          },
          end: {
            line: 61,
            column: 82
          }
        },
        line: 61
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 61,
            column: 50
          },
          end: {
            line: 61,
            column: 51
          }
        },
        loc: {
          start: {
            line: 61,
            column: 63
          },
          end: {
            line: 61,
            column: 81
          }
        },
        line: 61
      },
      "10": {
        name: "(anonymous_10)",
        decl: {
          start: {
            line: 62,
            column: 15
          },
          end: {
            line: 62,
            column: 16
          }
        },
        loc: {
          start: {
            line: 62,
            column: 24
          },
          end: {
            line: 62,
            column: 99
          }
        },
        line: 62
      },
      "11": {
        name: "(anonymous_11)",
        decl: {
          start: {
            line: 62,
            column: 46
          },
          end: {
            line: 62,
            column: 47
          }
        },
        loc: {
          start: {
            line: 62,
            column: 56
          },
          end: {
            line: 62,
            column: 80
          }
        },
        line: 62
      },
      "12": {
        name: "(anonymous_12)",
        decl: {
          start: {
            line: 63,
            column: 15
          },
          end: {
            line: 63,
            column: 16
          }
        },
        loc: {
          start: {
            line: 63,
            column: 24
          },
          end: {
            line: 63,
            column: 99
          }
        },
        line: 63
      },
      "13": {
        name: "(anonymous_13)",
        decl: {
          start: {
            line: 63,
            column: 46
          },
          end: {
            line: 63,
            column: 47
          }
        },
        loc: {
          start: {
            line: 63,
            column: 56
          },
          end: {
            line: 63,
            column: 80
          }
        },
        line: 63
      },
      "14": {
        name: "(anonymous_14)",
        decl: {
          start: {
            line: 64,
            column: 16
          },
          end: {
            line: 64,
            column: 17
          }
        },
        loc: {
          start: {
            line: 64,
            column: 25
          },
          end: {
            line: 64,
            column: 122
          }
        },
        line: 64
      },
      "15": {
        name: "(anonymous_15)",
        decl: {
          start: {
            line: 64,
            column: 90
          },
          end: {
            line: 64,
            column: 91
          }
        },
        loc: {
          start: {
            line: 64,
            column: 103
          },
          end: {
            line: 64,
            column: 121
          }
        },
        line: 64
      },
      "16": {
        name: "(anonymous_16)",
        decl: {
          start: {
            line: 65,
            column: 15
          },
          end: {
            line: 65,
            column: 16
          }
        },
        loc: {
          start: {
            line: 65,
            column: 24
          },
          end: {
            line: 65,
            column: 59
          }
        },
        line: 65
      },
      "17": {
        name: "(anonymous_17)",
        decl: {
          start: {
            line: 66,
            column: 17
          },
          end: {
            line: 66,
            column: 18
          }
        },
        loc: {
          start: {
            line: 66,
            column: 26
          },
          end: {
            line: 66,
            column: 68
          }
        },
        line: 66
      },
      "18": {
        name: "(anonymous_18)",
        decl: {
          start: {
            line: 67,
            column: 9
          },
          end: {
            line: 67,
            column: 10
          }
        },
        loc: {
          start: {
            line: 67,
            column: 15
          },
          end: {
            line: 67,
            column: 39
          }
        },
        line: 67
      },
      "19": {
        name: "(anonymous_19)",
        decl: {
          start: {
            line: 68,
            column: 15
          },
          end: {
            line: 68,
            column: 16
          }
        },
        loc: {
          start: {
            line: 68,
            column: 21
          },
          end: {
            line: 68,
            column: 31
          }
        },
        line: 68
      },
      "20": {
        name: "(anonymous_20)",
        decl: {
          start: {
            line: 69,
            column: 10
          },
          end: {
            line: 69,
            column: 11
          }
        },
        loc: {
          start: {
            line: 69,
            column: 16
          },
          end: {
            line: 73,
            column: 6
          }
        },
        line: 69
      },
      "21": {
        name: "(anonymous_21)",
        decl: {
          start: {
            line: 69,
            column: 72
          },
          end: {
            line: 69,
            column: 73
          }
        },
        loc: {
          start: {
            line: 69,
            column: 79
          },
          end: {
            line: 73,
            column: 5
          }
        },
        line: 69
      },
      "22": {
        name: "(anonymous_22)",
        decl: {
          start: {
            line: 84,
            column: 4
          },
          end: {
            line: 84,
            column: 5
          }
        },
        loc: {
          start: {
            line: 84,
            column: 24
          },
          end: {
            line: 90,
            column: 5
          }
        },
        line: 84
      },
      "23": {
        name: "(anonymous_23)",
        decl: {
          start: {
            line: 94,
            column: 4
          },
          end: {
            line: 94,
            column: 5
          }
        },
        loc: {
          start: {
            line: 94,
            column: 17
          },
          end: {
            line: 110,
            column: 5
          }
        },
        line: 94
      },
      "24": {
        name: "(anonymous_24)",
        decl: {
          start: {
            line: 114,
            column: 4
          },
          end: {
            line: 114,
            column: 5
          }
        },
        loc: {
          start: {
            line: 114,
            column: 20
          },
          end: {
            line: 127,
            column: 5
          }
        },
        line: 114
      },
      "25": {
        name: "(anonymous_25)",
        decl: {
          start: {
            line: 131,
            column: 4
          },
          end: {
            line: 131,
            column: 5
          }
        },
        loc: {
          start: {
            line: 131,
            column: 24
          },
          end: {
            line: 159,
            column: 5
          }
        },
        line: 131
      },
      "26": {
        name: "(anonymous_26)",
        decl: {
          start: {
            line: 163,
            column: 4
          },
          end: {
            line: 163,
            column: 5
          }
        },
        loc: {
          start: {
            line: 163,
            column: 27
          },
          end: {
            line: 166,
            column: 5
          }
        },
        line: 163
      },
      "27": {
        name: "(anonymous_27)",
        decl: {
          start: {
            line: 170,
            column: 4
          },
          end: {
            line: 170,
            column: 5
          }
        },
        loc: {
          start: {
            line: 170,
            column: 25
          },
          end: {
            line: 184,
            column: 5
          }
        },
        line: 170
      },
      "28": {
        name: "(anonymous_28)",
        decl: {
          start: {
            line: 188,
            column: 4
          },
          end: {
            line: 188,
            column: 5
          }
        },
        loc: {
          start: {
            line: 188,
            column: 28
          },
          end: {
            line: 208,
            column: 5
          }
        },
        line: 188
      },
      "29": {
        name: "(anonymous_29)",
        decl: {
          start: {
            line: 212,
            column: 4
          },
          end: {
            line: 212,
            column: 5
          }
        },
        loc: {
          start: {
            line: 212,
            column: 80
          },
          end: {
            line: 333,
            column: 5
          }
        },
        line: 212
      },
      "30": {
        name: "(anonymous_30)",
        decl: {
          start: {
            line: 337,
            column: 4
          },
          end: {
            line: 337,
            column: 5
          }
        },
        loc: {
          start: {
            line: 337,
            column: 58
          },
          end: {
            line: 402,
            column: 5
          }
        },
        line: 337
      },
      "31": {
        name: "(anonymous_31)",
        decl: {
          start: {
            line: 406,
            column: 4
          },
          end: {
            line: 406,
            column: 5
          }
        },
        loc: {
          start: {
            line: 406,
            column: 26
          },
          end: {
            line: 448,
            column: 5
          }
        },
        line: 406
      },
      "32": {
        name: "(anonymous_32)",
        decl: {
          start: {
            line: 423,
            column: 37
          },
          end: {
            line: 423,
            column: 38
          }
        },
        loc: {
          start: {
            line: 423,
            column: 45
          },
          end: {
            line: 423,
            column: 96
          }
        },
        line: 423
      },
      "33": {
        name: "(anonymous_33)",
        decl: {
          start: {
            line: 424,
            column: 40
          },
          end: {
            line: 424,
            column: 41
          }
        },
        loc: {
          start: {
            line: 424,
            column: 48
          },
          end: {
            line: 424,
            column: 72
          }
        },
        line: 424
      },
      "34": {
        name: "(anonymous_34)",
        decl: {
          start: {
            line: 452,
            column: 4
          },
          end: {
            line: 452,
            column: 5
          }
        },
        loc: {
          start: {
            line: 452,
            column: 56
          },
          end: {
            line: 482,
            column: 5
          }
        },
        line: 452
      },
      "35": {
        name: "(anonymous_35)",
        decl: {
          start: {
            line: 486,
            column: 4
          },
          end: {
            line: 486,
            column: 5
          }
        },
        loc: {
          start: {
            line: 486,
            column: 41
          },
          end: {
            line: 559,
            column: 5
          }
        },
        line: 486
      },
      "36": {
        name: "(anonymous_36)",
        decl: {
          start: {
            line: 563,
            column: 4
          },
          end: {
            line: 563,
            column: 5
          }
        },
        loc: {
          start: {
            line: 563,
            column: 37
          },
          end: {
            line: 588,
            column: 5
          }
        },
        line: 563
      },
      "37": {
        name: "(anonymous_37)",
        decl: {
          start: {
            line: 592,
            column: 4
          },
          end: {
            line: 592,
            column: 5
          }
        },
        loc: {
          start: {
            line: 592,
            column: 48
          },
          end: {
            line: 623,
            column: 5
          }
        },
        line: 592
      },
      "38": {
        name: "(anonymous_38)",
        decl: {
          start: {
            line: 601,
            column: 43
          },
          end: {
            line: 601,
            column: 44
          }
        },
        loc: {
          start: {
            line: 601,
            column: 53
          },
          end: {
            line: 603,
            column: 17
          }
        },
        line: 601
      },
      "39": {
        name: "(anonymous_39)",
        decl: {
          start: {
            line: 604,
            column: 43
          },
          end: {
            line: 604,
            column: 44
          }
        },
        loc: {
          start: {
            line: 604,
            column: 53
          },
          end: {
            line: 606,
            column: 17
          }
        },
        line: 604
      },
      "40": {
        name: "(anonymous_40)",
        decl: {
          start: {
            line: 607,
            column: 34
          },
          end: {
            line: 607,
            column: 35
          }
        },
        loc: {
          start: {
            line: 607,
            column: 55
          },
          end: {
            line: 616,
            column: 17
          }
        },
        line: 607
      },
      "41": {
        name: "(anonymous_41)",
        decl: {
          start: {
            line: 608,
            column: 39
          },
          end: {
            line: 608,
            column: 40
          }
        },
        loc: {
          start: {
            line: 608,
            column: 49
          },
          end: {
            line: 615,
            column: 21
          }
        },
        line: 608
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 65,
            column: 24
          },
          end: {
            line: 65,
            column: 59
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 65,
            column: 44
          },
          end: {
            line: 65,
            column: 47
          }
        }, {
          start: {
            line: 65,
            column: 50
          },
          end: {
            line: 65,
            column: 59
          }
        }],
        line: 65
      },
      "1": {
        loc: {
          start: {
            line: 66,
            column: 26
          },
          end: {
            line: 66,
            column: 68
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 66,
            column: 46
          },
          end: {
            line: 66,
            column: 62
          }
        }, {
          start: {
            line: 66,
            column: 65
          },
          end: {
            line: 66,
            column: 68
          }
        }],
        line: 66
      },
      "2": {
        loc: {
          start: {
            line: 71,
            column: 18
          },
          end: {
            line: 71,
            column: 49
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 71,
            column: 30
          },
          end: {
            line: 71,
            column: 31
          }
        }, {
          start: {
            line: 71,
            column: 35
          },
          end: {
            line: 71,
            column: 48
          }
        }],
        line: 71
      },
      "3": {
        loc: {
          start: {
            line: 87,
            column: 28
          },
          end: {
            line: 87,
            column: 84
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 87,
            column: 28
          },
          end: {
            line: 87,
            column: 48
          }
        }, {
          start: {
            line: 87,
            column: 52
          },
          end: {
            line: 87,
            column: 84
          }
        }],
        line: 87
      },
      "4": {
        loc: {
          start: {
            line: 95,
            column: 8
          },
          end: {
            line: 97,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 95,
            column: 8
          },
          end: {
            line: 97,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 95
      },
      "5": {
        loc: {
          start: {
            line: 115,
            column: 8
          },
          end: {
            line: 117,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 115,
            column: 8
          },
          end: {
            line: 117,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 115
      },
      "6": {
        loc: {
          start: {
            line: 133,
            column: 12
          },
          end: {
            line: 138,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 133,
            column: 12
          },
          end: {
            line: 138,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 133
      },
      "7": {
        loc: {
          start: {
            line: 140,
            column: 12
          },
          end: {
            line: 145,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 140,
            column: 12
          },
          end: {
            line: 145,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 140
      },
      "8": {
        loc: {
          start: {
            line: 191,
            column: 12
          },
          end: {
            line: 196,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 191,
            column: 12
          },
          end: {
            line: 196,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 191
      },
      "9": {
        loc: {
          start: {
            line: 212,
            column: 50
          },
          end: {
            line: 212,
            column: 64
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 212,
            column: 62
          },
          end: {
            line: 212,
            column: 64
          }
        }],
        line: 212
      },
      "10": {
        loc: {
          start: {
            line: 212,
            column: 66
          },
          end: {
            line: 212,
            column: 78
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 212,
            column: 76
          },
          end: {
            line: 212,
            column: 78
          }
        }],
        line: 212
      },
      "11": {
        loc: {
          start: {
            line: 218,
            column: 12
          },
          end: {
            line: 220,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 218,
            column: 12
          },
          end: {
            line: 220,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 218
      },
      "12": {
        loc: {
          start: {
            line: 224,
            column: 12
          },
          end: {
            line: 229,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 224,
            column: 12
          },
          end: {
            line: 229,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 224
      },
      "13": {
        loc: {
          start: {
            line: 245,
            column: 31
          },
          end: {
            line: 245,
            column: 65
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 245,
            column: 31
          },
          end: {
            line: 245,
            column: 53
          }
        }, {
          start: {
            line: 245,
            column: 57
          },
          end: {
            line: 245,
            column: 65
          }
        }],
        line: 245
      },
      "14": {
        loc: {
          start: {
            line: 247,
            column: 12
          },
          end: {
            line: 252,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 247,
            column: 12
          },
          end: {
            line: 252,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 247
      },
      "15": {
        loc: {
          start: {
            line: 254,
            column: 12
          },
          end: {
            line: 256,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 254,
            column: 12
          },
          end: {
            line: 256,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 254
      },
      "16": {
        loc: {
          start: {
            line: 272,
            column: 20
          },
          end: {
            line: 275,
            column: 21
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 272,
            column: 20
          },
          end: {
            line: 275,
            column: 21
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 272
      },
      "17": {
        loc: {
          start: {
            line: 277,
            column: 20
          },
          end: {
            line: 281,
            column: 21
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 277,
            column: 20
          },
          end: {
            line: 281,
            column: 21
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 277
      },
      "18": {
        loc: {
          start: {
            line: 277,
            column: 24
          },
          end: {
            line: 277,
            column: 91
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 277,
            column: 24
          },
          end: {
            line: 277,
            column: 42
          }
        }, {
          start: {
            line: 277,
            column: 46
          },
          end: {
            line: 277,
            column: 72
          }
        }, {
          start: {
            line: 277,
            column: 76
          },
          end: {
            line: 277,
            column: 91
          }
        }],
        line: 277
      },
      "19": {
        loc: {
          start: {
            line: 283,
            column: 20
          },
          end: {
            line: 302,
            column: 21
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 283,
            column: 20
          },
          end: {
            line: 302,
            column: 21
          }
        }, {
          start: {
            line: 294,
            column: 25
          },
          end: {
            line: 302,
            column: 21
          }
        }],
        line: 283
      },
      "20": {
        loc: {
          start: {
            line: 287,
            column: 24
          },
          end: {
            line: 290,
            column: 25
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 287,
            column: 24
          },
          end: {
            line: 290,
            column: 25
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 287
      },
      "21": {
        loc: {
          start: {
            line: 296,
            column: 24
          },
          end: {
            line: 299,
            column: 25
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 296,
            column: 24
          },
          end: {
            line: 299,
            column: 25
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 296
      },
      "22": {
        loc: {
          start: {
            line: 314,
            column: 12
          },
          end: {
            line: 316,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 314,
            column: 12
          },
          end: {
            line: 316,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 314
      },
      "23": {
        loc: {
          start: {
            line: 314,
            column: 16
          },
          end: {
            line: 314,
            column: 62
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 314,
            column: 16
          },
          end: {
            line: 314,
            column: 43
          }
        }, {
          start: {
            line: 314,
            column: 47
          },
          end: {
            line: 314,
            column: 62
          }
        }],
        line: 314
      },
      "24": {
        loc: {
          start: {
            line: 341,
            column: 12
          },
          end: {
            line: 346,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 341,
            column: 12
          },
          end: {
            line: 346,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 341
      },
      "25": {
        loc: {
          start: {
            line: 364,
            column: 29
          },
          end: {
            line: 364,
            column: 87
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 364,
            column: 29
          },
          end: {
            line: 364,
            column: 47
          }
        }, {
          start: {
            line: 364,
            column: 51
          },
          end: {
            line: 364,
            column: 87
          }
        }],
        line: 364
      },
      "26": {
        loc: {
          start: {
            line: 367,
            column: 22
          },
          end: {
            line: 367,
            column: 39
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 367,
            column: 22
          },
          end: {
            line: 367,
            column: 33
          }
        }, {
          start: {
            line: 367,
            column: 37
          },
          end: {
            line: 367,
            column: 39
          }
        }],
        line: 367
      },
      "27": {
        loc: {
          start: {
            line: 368,
            column: 27
          },
          end: {
            line: 368,
            column: 49
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 368,
            column: 27
          },
          end: {
            line: 368,
            column: 43
          }
        }, {
          start: {
            line: 368,
            column: 47
          },
          end: {
            line: 368,
            column: 49
          }
        }],
        line: 368
      },
      "28": {
        loc: {
          start: {
            line: 369,
            column: 24
          },
          end: {
            line: 369,
            column: 83
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 369,
            column: 24
          },
          end: {
            line: 369,
            column: 37
          }
        }, {
          start: {
            line: 369,
            column: 41
          },
          end: {
            line: 369,
            column: 83
          }
        }],
        line: 369
      },
      "29": {
        loc: {
          start: {
            line: 370,
            column: 25
          },
          end: {
            line: 370,
            column: 51
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 370,
            column: 25
          },
          end: {
            line: 370,
            column: 39
          }
        }, {
          start: {
            line: 370,
            column: 43
          },
          end: {
            line: 370,
            column: 51
          }
        }],
        line: 370
      },
      "30": {
        loc: {
          start: {
            line: 371,
            column: 24
          },
          end: {
            line: 371,
            column: 49
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 371,
            column: 24
          },
          end: {
            line: 371,
            column: 37
          }
        }, {
          start: {
            line: 371,
            column: 41
          },
          end: {
            line: 371,
            column: 49
          }
        }],
        line: 371
      },
      "31": {
        loc: {
          start: {
            line: 372,
            column: 30
          },
          end: {
            line: 372,
            column: 55
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 372,
            column: 30
          },
          end: {
            line: 372,
            column: 49
          }
        }, {
          start: {
            line: 372,
            column: 53
          },
          end: {
            line: 372,
            column: 55
          }
        }],
        line: 372
      },
      "32": {
        loc: {
          start: {
            line: 373,
            column: 29
          },
          end: {
            line: 373,
            column: 53
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 373,
            column: 29
          },
          end: {
            line: 373,
            column: 47
          }
        }, {
          start: {
            line: 373,
            column: 51
          },
          end: {
            line: 373,
            column: 53
          }
        }],
        line: 373
      },
      "33": {
        loc: {
          start: {
            line: 408,
            column: 12
          },
          end: {
            line: 410,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 408,
            column: 12
          },
          end: {
            line: 410,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 408
      },
      "34": {
        loc: {
          start: {
            line: 413,
            column: 16
          },
          end: {
            line: 442,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 413,
            column: 16
          },
          end: {
            line: 442,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 413
      },
      "35": {
        loc: {
          start: {
            line: 416,
            column: 20
          },
          end: {
            line: 441,
            column: 21
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 416,
            column: 20
          },
          end: {
            line: 441,
            column: 21
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 416
      },
      "36": {
        loc: {
          start: {
            line: 458,
            column: 12
          },
          end: {
            line: 467,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 458,
            column: 12
          },
          end: {
            line: 467,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 458
      },
      "37": {
        loc: {
          start: {
            line: 458,
            column: 16
          },
          end: {
            line: 458,
            column: 79
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 458,
            column: 16
          },
          end: {
            line: 458,
            column: 36
          }
        }, {
          start: {
            line: 458,
            column: 41
          },
          end: {
            line: 458,
            column: 60
          }
        }, {
          start: {
            line: 458,
            column: 64
          },
          end: {
            line: 458,
            column: 78
          }
        }],
        line: 458
      },
      "38": {
        loc: {
          start: {
            line: 469,
            column: 12
          },
          end: {
            line: 471,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 469,
            column: 12
          },
          end: {
            line: 471,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 469
      },
      "39": {
        loc: {
          start: {
            line: 469,
            column: 16
          },
          end: {
            line: 469,
            column: 53
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 469,
            column: 16
          },
          end: {
            line: 469,
            column: 35
          }
        }, {
          start: {
            line: 469,
            column: 39
          },
          end: {
            line: 469,
            column: 53
          }
        }],
        line: 469
      },
      "40": {
        loc: {
          start: {
            line: 487,
            column: 8
          },
          end: {
            line: 543,
            column: 9
          }
        },
        type: "switch",
        locations: [{
          start: {
            line: 488,
            column: 12
          },
          end: {
            line: 492,
            column: 19
          }
        }, {
          start: {
            line: 493,
            column: 12
          },
          end: {
            line: 507,
            column: 22
          }
        }, {
          start: {
            line: 508,
            column: 12
          },
          end: {
            line: 522,
            column: 22
          }
        }, {
          start: {
            line: 523,
            column: 12
          },
          end: {
            line: 537,
            column: 22
          }
        }, {
          start: {
            line: 538,
            column: 12
          },
          end: {
            line: 542,
            column: 19
          }
        }],
        line: 487
      },
      "41": {
        loc: {
          start: {
            line: 491,
            column: 29
          },
          end: {
            line: 491,
            column: 94
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 491,
            column: 51
          },
          end: {
            line: 491,
            column: 82
          }
        }, {
          start: {
            line: 491,
            column: 85
          },
          end: {
            line: 491,
            column: 94
          }
        }],
        line: 491
      },
      "42": {
        loc: {
          start: {
            line: 494,
            column: 16
          },
          end: {
            line: 506,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 494,
            column: 16
          },
          end: {
            line: 506,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 494
      },
      "43": {
        loc: {
          start: {
            line: 509,
            column: 16
          },
          end: {
            line: 521,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 509,
            column: 16
          },
          end: {
            line: 521,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 509
      },
      "44": {
        loc: {
          start: {
            line: 524,
            column: 16
          },
          end: {
            line: 536,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 524,
            column: 16
          },
          end: {
            line: 536,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 524
      },
      "45": {
        loc: {
          start: {
            line: 545,
            column: 8
          },
          end: {
            line: 557,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 545,
            column: 8
          },
          end: {
            line: 557,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 545
      },
      "46": {
        loc: {
          start: {
            line: 545,
            column: 12
          },
          end: {
            line: 545,
            column: 83
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 545,
            column: 12
          },
          end: {
            line: 545,
            column: 37
          }
        }, {
          start: {
            line: 545,
            column: 41
          },
          end: {
            line: 545,
            column: 83
          }
        }],
        line: 545
      },
      "47": {
        loc: {
          start: {
            line: 565,
            column: 8
          },
          end: {
            line: 572,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 565,
            column: 8
          },
          end: {
            line: 572,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 565
      },
      "48": {
        loc: {
          start: {
            line: 568,
            column: 16
          },
          end: {
            line: 570,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 568,
            column: 16
          },
          end: {
            line: 570,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 568
      },
      "49": {
        loc: {
          start: {
            line: 574,
            column: 8
          },
          end: {
            line: 586,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 574,
            column: 8
          },
          end: {
            line: 586,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 574
      },
      "50": {
        loc: {
          start: {
            line: 578,
            column: 16
          },
          end: {
            line: 581,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 578,
            column: 16
          },
          end: {
            line: 581,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 578
      },
      "51": {
        loc: {
          start: {
            line: 583,
            column: 12
          },
          end: {
            line: 585,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 583,
            column: 12
          },
          end: {
            line: 585,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 583
      },
      "52": {
        loc: {
          start: {
            line: 609,
            column: 24
          },
          end: {
            line: 614,
            column: 25
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 609,
            column: 24
          },
          end: {
            line: 614,
            column: 25
          }
        }, {
          start: {
            line: 612,
            column: 29
          },
          end: {
            line: 614,
            column: 25
          }
        }],
        line: 609
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0,
      "74": 0,
      "75": 0,
      "76": 0,
      "77": 0,
      "78": 0,
      "79": 0,
      "80": 0,
      "81": 0,
      "82": 0,
      "83": 0,
      "84": 0,
      "85": 0,
      "86": 0,
      "87": 0,
      "88": 0,
      "89": 0,
      "90": 0,
      "91": 0,
      "92": 0,
      "93": 0,
      "94": 0,
      "95": 0,
      "96": 0,
      "97": 0,
      "98": 0,
      "99": 0,
      "100": 0,
      "101": 0,
      "102": 0,
      "103": 0,
      "104": 0,
      "105": 0,
      "106": 0,
      "107": 0,
      "108": 0,
      "109": 0,
      "110": 0,
      "111": 0,
      "112": 0,
      "113": 0,
      "114": 0,
      "115": 0,
      "116": 0,
      "117": 0,
      "118": 0,
      "119": 0,
      "120": 0,
      "121": 0,
      "122": 0,
      "123": 0,
      "124": 0,
      "125": 0,
      "126": 0,
      "127": 0,
      "128": 0,
      "129": 0,
      "130": 0,
      "131": 0,
      "132": 0,
      "133": 0,
      "134": 0,
      "135": 0,
      "136": 0,
      "137": 0,
      "138": 0,
      "139": 0,
      "140": 0,
      "141": 0,
      "142": 0,
      "143": 0,
      "144": 0,
      "145": 0,
      "146": 0,
      "147": 0,
      "148": 0,
      "149": 0,
      "150": 0,
      "151": 0,
      "152": 0,
      "153": 0,
      "154": 0,
      "155": 0,
      "156": 0,
      "157": 0,
      "158": 0,
      "159": 0,
      "160": 0,
      "161": 0,
      "162": 0,
      "163": 0,
      "164": 0,
      "165": 0,
      "166": 0,
      "167": 0,
      "168": 0,
      "169": 0,
      "170": 0,
      "171": 0,
      "172": 0,
      "173": 0,
      "174": 0,
      "175": 0,
      "176": 0,
      "177": 0,
      "178": 0,
      "179": 0,
      "180": 0,
      "181": 0,
      "182": 0,
      "183": 0,
      "184": 0,
      "185": 0,
      "186": 0,
      "187": 0,
      "188": 0,
      "189": 0,
      "190": 0,
      "191": 0,
      "192": 0,
      "193": 0,
      "194": 0,
      "195": 0,
      "196": 0,
      "197": 0,
      "198": 0,
      "199": 0,
      "200": 0,
      "201": 0,
      "202": 0,
      "203": 0,
      "204": 0,
      "205": 0,
      "206": 0,
      "207": 0,
      "208": 0,
      "209": 0,
      "210": 0,
      "211": 0,
      "212": 0,
      "213": 0,
      "214": 0,
      "215": 0,
      "216": 0,
      "217": 0,
      "218": 0,
      "219": 0,
      "220": 0,
      "221": 0,
      "222": 0,
      "223": 0,
      "224": 0,
      "225": 0,
      "226": 0,
      "227": 0,
      "228": 0,
      "229": 0,
      "230": 0,
      "231": 0,
      "232": 0,
      "233": 0,
      "234": 0,
      "235": 0,
      "236": 0,
      "237": 0,
      "238": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0],
      "10": [0],
      "11": [0, 0],
      "12": [0, 0],
      "13": [0, 0],
      "14": [0, 0],
      "15": [0, 0],
      "16": [0, 0],
      "17": [0, 0],
      "18": [0, 0, 0],
      "19": [0, 0],
      "20": [0, 0],
      "21": [0, 0],
      "22": [0, 0],
      "23": [0, 0],
      "24": [0, 0],
      "25": [0, 0],
      "26": [0, 0],
      "27": [0, 0],
      "28": [0, 0],
      "29": [0, 0],
      "30": [0, 0],
      "31": [0, 0],
      "32": [0, 0],
      "33": [0, 0],
      "34": [0, 0],
      "35": [0, 0],
      "36": [0, 0],
      "37": [0, 0, 0],
      "38": [0, 0],
      "39": [0, 0],
      "40": [0, 0, 0, 0, 0],
      "41": [0, 0],
      "42": [0, 0],
      "43": [0, 0],
      "44": [0, 0],
      "45": [0, 0],
      "46": [0, 0],
      "47": [0, 0],
      "48": [0, 0],
      "49": [0, 0],
      "50": [0, 0],
      "51": [0, 0],
      "52": [0, 0]
    },
    inputSourceMap: {
      file: "/home/mhugo/code/claude-code-flow/src/cli/services/template-service.ts",
      mappings: "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",
      names: [],
      sources: ["/home/mhugo/code/claude-code-flow/src/cli/services/template-service.ts"],
      sourcesContent: ["/**\n * Template Service\n * \n * Provides template operations for project initialization and code generation.\n * Supports multiple template engines, variable substitution, and custom templates.\n */\n\nimport { readFile, writeFile, readdir, stat } from 'fs/promises';\nimport { existsSync } from 'fs';\nimport { join, dirname, basename, extname } from 'path';\nimport { EventEmitter } from 'events';\nimport { createLogger, type Logger } from '../utils/logger.js';\nimport { ensureDirectory, copyFile, findFiles, isDirectory } from '../utils/file-system.js';\nimport { validateString, validateObject } from '../utils/validation.js';\nimport type { Result, ValidationResult } from '../types/index.js';\n\n/**\n * Template variable definition\n */\nexport interface TemplateVariable {\n  /** Variable name */\n  name: string;\n  \n  /** Variable description */\n  description: string;\n  \n  /** Variable type */\n  type: 'string' | 'number' | 'boolean' | 'array' | 'object';\n  \n  /** Default value */\n  defaultValue?: any;\n  \n  /** Whether variable is required */\n  required?: boolean;\n  \n  /** Validation pattern (for strings) */\n  pattern?: string;\n  \n  /** Allowed values (enum) */\n  allowedValues?: any[];\n  \n  /** Prompt message for interactive input */\n  prompt?: string;\n}\n\n/**\n * Template context for rendering\n */\nexport interface TemplateContext {\n  /** Template variables */\n  variables: Record<string, any>;\n  \n  /** Template metadata */\n  metadata: {\n    templateName: string;\n    templateVersion: string;\n    generatedAt: Date;\n    generatedBy: string;\n  };\n  \n  /** Helper functions */\n  helpers: Record<string, (...args: any[]) => any>;\n}\n\n/**\n * Template configuration\n */\nexport interface TemplateConfig {\n  /** Template name */\n  name: string;\n  \n  /** Template version */\n  version: string;\n  \n  /** Template description */\n  description: string;\n  \n  /** Template author */\n  author?: string;\n  \n  /** Template license */\n  license?: string;\n  \n  /** Template tags */\n  tags?: string[];\n  \n  /** Template variables */\n  variables: TemplateVariable[];\n  \n  /** Files to ignore during template processing */\n  ignore?: string[];\n  \n  /** File patterns to process */\n  include?: string[];\n  \n  /** Template engine to use */\n  engine?: 'handlebars' | 'mustache' | 'simple' | 'custom';\n  \n  /** Custom template engine configuration */\n  engineConfig?: Record<string, any>;\n  \n  /** Post-processing scripts */\n  postProcess?: string[];\n  \n  /** Dependencies to install */\n  dependencies?: {\n    npm?: string[];\n    system?: string[];\n  };\n}\n\n/**\n * Project template definition\n */\nexport interface ProjectTemplate {\n  /** Template configuration */\n  config: TemplateConfig;\n  \n  /** Template directory path */\n  path: string;\n  \n  /** Template files */\n  files: string[];\n  \n  /** Template size in bytes */\n  size: number;\n  \n  /** Template creation date */\n  createdAt: Date;\n  \n  /** Template modification date */\n  modifiedAt: Date;\n}\n\n/**\n * Template render result\n */\nexport interface TemplateRenderResult {\n  /** Render success */\n  success: boolean;\n  \n  /** Render message */\n  message: string;\n  \n  /** Generated files */\n  generatedFiles: string[];\n  \n  /** Skipped files */\n  skippedFiles: string[];\n  \n  /** Errors encountered */\n  errors: Array<{\n    file: string;\n    error: string;\n  }>;\n  \n  /** Render duration */\n  duration: number;\n  \n  /** Output directory */\n  outputDir: string;\n}\n\n/**\n * Template engine interface\n */\nexport interface TemplateEngine {\n  /** Engine name */\n  name: string;\n  \n  /** Render template content */\n  render(content: string, context: TemplateContext): Promise<string>;\n  \n  /** Check if file should be processed */\n  shouldProcess(filePath: string): boolean;\n  \n  /** Get file patterns this engine handles */\n  getPatterns(): string[];\n}\n\n/**\n * Simple template engine implementation\n */\nclass SimpleTemplateEngine implements TemplateEngine {\n  name = 'simple';\n  \n  async render(content: string, context: TemplateContext): Promise<string> {\n    let result = content;\n    \n    // Replace variables using {{variable}} syntax\n    for (const [key, value] of Object.entries(context.variables)) {\n      const pattern = new RegExp(`\\\\{\\\\{\\\\s*${key}\\\\s*\\\\}\\\\}`, 'g');\n      result = result.replace(pattern, String(value));\n    }\n    \n    // Replace metadata variables\n    result = result.replace(/\\{\\{\\s*templateName\\s*\\}\\}/g, context.metadata.templateName);\n    result = result.replace(/\\{\\{\\s*templateVersion\\s*\\}\\}/g, context.metadata.templateVersion);\n    result = result.replace(/\\{\\{\\s*generatedAt\\s*\\}\\}/g, context.metadata.generatedAt.toISOString());\n    result = result.replace(/\\{\\{\\s*generatedBy\\s*\\}\\}/g, context.metadata.generatedBy);\n    \n    // Apply helper functions\n    for (const [helperName, helperFn] of Object.entries(context.helpers)) {\n      const pattern = new RegExp(`\\\\{\\\\{\\\\s*${helperName}\\\\s*\\\\(([^)]+)\\\\)\\\\s*\\\\}\\\\}`, 'g');\n      result = result.replace(pattern, (match, args) => {\n        try {\n          const argList = args.split(',').map((arg: string) => arg.trim().replace(/[\"']/g, ''));\n          return String(helperFn(...argList));\n        } catch (error) {\n          return match; // Keep original if helper fails\n        }\n      });\n    }\n    \n    return result;\n  }\n  \n  shouldProcess(filePath: string): boolean {\n    const ext = extname(filePath).toLowerCase();\n    return !['.jpg', '.jpeg', '.png', '.gif', '.bmp', '.ico', '.zip', '.tar', '.gz'].includes(ext);\n  }\n  \n  getPatterns(): string[] {\n    return ['**/*'];\n  }\n}\n\n/**\n * Default template helpers\n */\nconst DEFAULT_HELPERS = {\n  uppercase: (str: string) => str.toUpperCase(),\n  lowercase: (str: string) => str.toLowerCase(),\n  capitalize: (str: string) => str.charAt(0).toUpperCase() + str.slice(1),\n  camelCase: (str: string) => str.replace(/[-_\\s](.)/g, (_, char) => char.toUpperCase()),\n  kebabCase: (str: string) => str.replace(/[A-Z]/g, (char) => '-' + char.toLowerCase()).replace(/^-/, ''),\n  snakeCase: (str: string) => str.replace(/[A-Z]/g, (char) => '_' + char.toLowerCase()).replace(/^_/, ''),\n  pascalCase: (str: string) => str.charAt(0).toUpperCase() + str.slice(1).replace(/[-_\\s](.)/g, (_, char) => char.toUpperCase()),\n  pluralize: (str: string) => str.endsWith('s') ? str : str + 's',\n  singularize: (str: string) => str.endsWith('s') ? str.slice(0, -1) : str,\n  now: () => new Date().toISOString(),\n  timestamp: () => Date.now(),\n  uuid: () => 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, (c) => {\n    const r = Math.random() * 16 | 0;\n    const v = c === 'x' ? r : (r & 0x3 | 0x8);\n    return v.toString(16);\n  }),\n};\n\n/**\n * Template service implementation\n */\nexport class TemplateService extends EventEmitter {\n  private logger: Logger;\n  private templatesDir: string;\n  private engines = new Map<string, TemplateEngine>();\n  private templates = new Map<string, ProjectTemplate>();\n  private initialized = false;\n  \n  constructor(config?: Record<string, any>) {\n    super();\n    this.logger = createLogger({ prefix: 'TemplateService' });\n    this.templatesDir = config?.templatesDir || join(process.cwd(), 'templates');\n    \n    // Register default template engine\n    this.registerEngine(new SimpleTemplateEngine());\n  }\n  \n  /**\n   * Initialize the template service\n   */\n  async init(): Promise<void> {\n    if (this.initialized) {\n      return;\n    }\n    \n    try {\n      // Ensure templates directory exists\n      await ensureDirectory(this.templatesDir);\n      \n      // Load available templates\n      await this.loadTemplates();\n      \n      this.initialized = true;\n      this.logger.info('Template service initialized');\n    } catch (error) {\n      this.logger.error('Failed to initialize template service:', error);\n      throw error;\n    }\n  }\n  \n  /**\n   * Dispose the template service\n   */\n  async dispose(): Promise<void> {\n    if (!this.initialized) {\n      return;\n    }\n    \n    try {\n      this.templates.clear();\n      this.engines.clear();\n      this.initialized = false;\n      \n      this.logger.info('Template service disposed');\n    } catch (error) {\n      this.logger.error('Error disposing template service:', error);\n    }\n  }\n  \n  /**\n   * Health check for the service\n   */\n  async healthCheck(): Promise<{ healthy: boolean; message?: string }> {\n    try {\n      if (!this.initialized) {\n        return {\n          healthy: false,\n          message: 'Service not initialized',\n        };\n      }\n      \n      // Check if templates directory exists\n      if (!existsSync(this.templatesDir)) {\n        return {\n          healthy: false,\n          message: 'Templates directory not accessible',\n        };\n      }\n      \n      const templateCount = this.templates.size;\n      const engineCount = this.engines.size;\n      \n      return {\n        healthy: true,\n        message: `${templateCount} templates, ${engineCount} engines`,\n      };\n    } catch (error) {\n      return {\n        healthy: false,\n        message: (error as Error).message,\n      };\n    }\n  }\n  \n  /**\n   * Register a template engine\n   */\n  registerEngine(engine: TemplateEngine): void {\n    this.engines.set(engine.name, engine);\n    this.logger.debug(`Registered template engine: ${engine.name}`);\n  }\n  \n  /**\n   * Get available templates\n   */\n  async getTemplates(): Promise<Result<ProjectTemplate[]>> {\n    try {\n      await this.loadTemplates(); // Refresh templates\n      return {\n        success: true,\n        data: Array.from(this.templates.values()),\n      };\n    } catch (error) {\n      return {\n        success: false,\n        error: error as Error,\n      };\n    }\n  }\n  \n  /**\n   * Get a specific template\n   */\n  async getTemplate(name: string): Promise<Result<ProjectTemplate>> {\n    try {\n      const template = this.templates.get(name);\n      if (!template) {\n        return {\n          success: false,\n          error: new Error(`Template '${name}' not found`),\n        };\n      }\n      \n      return {\n        success: true,\n        data: template,\n      };\n    } catch (error) {\n      return {\n        success: false,\n        error: error as Error,\n      };\n    }\n  }\n  \n  /**\n   * Render a template to a target directory\n   */\n  async renderTemplate(\n    templateName: string,\n    outputDir: string,\n    variables: Record<string, any> = {},\n    options: {\n      overwrite?: boolean;\n      dryRun?: boolean;\n      customHelpers?: Record<string, (...args: any[]) => any>;\n    } = {}\n  ): Promise<Result<TemplateRenderResult>> {\n    const startTime = Date.now();\n    \n    try {\n      this.logger.info(`Rendering template '${templateName}' to '${outputDir}'`);\n      \n      // Get template\n      const templateResult = await this.getTemplate(templateName);\n      if (!templateResult.success) {\n        return templateResult as Result<TemplateRenderResult>;\n      }\n      \n      const template = templateResult.data;\n      \n      // Validate variables\n      const validationResult = await this.validateVariables(template.config.variables, variables);\n      if (!validationResult.valid) {\n        return {\n          success: false,\n          error: new Error(`Variable validation failed: ${validationResult.errors[0]?.message}`),\n        };\n      }\n      \n      // Prepare template context\n      const context: TemplateContext = {\n        variables,\n        metadata: {\n          templateName: template.config.name,\n          templateVersion: template.config.version,\n          generatedAt: new Date(),\n          generatedBy: 'claude-flow',\n        },\n        helpers: {\n          ...DEFAULT_HELPERS,\n          ...options.customHelpers,\n        },\n      };\n      \n      // Get template engine\n      const engineName = template.config.engine || 'simple';\n      const engine = this.engines.get(engineName);\n      if (!engine) {\n        return {\n          success: false,\n          error: new Error(`Template engine '${engineName}' not found`),\n        };\n      }\n      \n      // Ensure output directory exists (unless dry run)\n      if (!options.dryRun) {\n        await ensureDirectory(outputDir);\n      }\n      \n      const result: TemplateRenderResult = {\n        success: true,\n        message: 'Template rendered successfully',\n        generatedFiles: [],\n        skippedFiles: [],\n        errors: [],\n        duration: 0,\n        outputDir,\n      };\n      \n      // Process template files\n      for (const relativeFilePath of template.files) {\n        const sourceFilePath = join(template.path, relativeFilePath);\n        const targetFilePath = join(outputDir, relativeFilePath);\n        \n        try {\n          // Check if file should be skipped\n          if (this.shouldSkipFile(relativeFilePath, template.config)) {\n            result.skippedFiles.push(relativeFilePath);\n            continue;\n          }\n          \n          // Check if target exists and overwrite is disabled\n          if (!options.overwrite && existsSync(targetFilePath) && !options.dryRun) {\n            result.skippedFiles.push(relativeFilePath);\n            this.logger.debug(`Skipped existing file: ${relativeFilePath}`);\n            continue;\n          }\n          \n          // Process file\n          if (engine.shouldProcess(sourceFilePath)) {\n            // Read, render, and write template file\n            const content = await readFile(sourceFilePath, 'utf8');\n            const renderedContent = await engine.render(content, context);\n            \n            if (!options.dryRun) {\n              await ensureDirectory(dirname(targetFilePath));\n              await writeFile(targetFilePath, renderedContent, 'utf8');\n            }\n            \n            result.generatedFiles.push(relativeFilePath);\n            this.logger.debug(`Processed template file: ${relativeFilePath}`);\n          } else {\n            // Copy binary file as-is\n            if (!options.dryRun) {\n              await ensureDirectory(dirname(targetFilePath));\n              await copyFile(sourceFilePath, targetFilePath, { overwrite: options.overwrite });\n            }\n            \n            result.generatedFiles.push(relativeFilePath);\n            this.logger.debug(`Copied binary file: ${relativeFilePath}`);\n          }\n        } catch (error) {\n          result.errors.push({\n            file: relativeFilePath,\n            error: (error as Error).message,\n          });\n          this.logger.error(`Error processing file ${relativeFilePath}:`, error);\n        }\n      }\n      \n      result.duration = Date.now() - startTime;\n      \n      // Run post-processing scripts\n      if (template.config.postProcess && !options.dryRun) {\n        await this.runPostProcessing(template.config.postProcess, outputDir);\n      }\n      \n      this.emit('templateRendered', {\n        templateName,\n        outputDir,\n        result,\n      });\n      \n      return {\n        success: true,\n        data: result,\n      };\n    } catch (error) {\n      return {\n        success: false,\n        error: error as Error,\n      };\n    }\n  }\n  \n  /**\n   * Create a new template from a directory\n   */\n  async createTemplate(\n    sourceDir: string,\n    templateName: string,\n    config: Partial<TemplateConfig>\n  ): Promise<Result<ProjectTemplate>> {\n    try {\n      this.logger.info(`Creating template '${templateName}' from '${sourceDir}'`);\n      \n      // Validate source directory\n      if (!(await isDirectory(sourceDir))) {\n        return {\n          success: false,\n          error: new Error(`Source directory '${sourceDir}' does not exist`),\n        };\n      }\n      \n      // Create template directory\n      const templateDir = join(this.templatesDir, templateName);\n      await ensureDirectory(templateDir);\n      \n      // Copy source files to template directory\n      const files = await findFiles(sourceDir, '**/*', { recursive: true });\n      const relativeFiles: string[] = [];\n      \n      for (const file of files) {\n        const relativePath = file.replace(sourceDir, '').replace(/^[\\\\/]/, '');\n        const targetPath = join(templateDir, relativePath);\n        \n        await ensureDirectory(dirname(targetPath));\n        await copyFile(file, targetPath, { overwrite: true });\n        \n        relativeFiles.push(relativePath);\n      }\n      \n      // Create template configuration\n      const templateConfig: TemplateConfig = {\n        name: templateName,\n        version: '1.0.0',\n        description: config.description || `Template created from ${sourceDir}`,\n        author: config.author,\n        license: config.license,\n        tags: config.tags || [],\n        variables: config.variables || [],\n        ignore: config.ignore || ['node_modules/**', '.git/**', '**/*.log'],\n        include: config.include || ['**/*'],\n        engine: config.engine || 'simple',\n        engineConfig: config.engineConfig || {},\n        postProcess: config.postProcess || [],\n        dependencies: config.dependencies,\n      };\n      \n      // Save template configuration\n      const configPath = join(templateDir, 'template.json');\n      await writeFile(configPath, JSON.stringify(templateConfig, null, 2));\n      \n      // Create template object\n      const template: ProjectTemplate = {\n        config: templateConfig,\n        path: templateDir,\n        files: relativeFiles,\n        size: 0, // Would calculate actual size\n        createdAt: new Date(),\n        modifiedAt: new Date(),\n      };\n      \n      // Add to templates cache\n      this.templates.set(templateName, template);\n      \n      this.emit('templateCreated', { templateName, template });\n      \n      return {\n        success: true,\n        data: template,\n      };\n    } catch (error) {\n      return {\n        success: false,\n        error: error as Error,\n      };\n    }\n  }\n  \n  /**\n   * Load templates from the templates directory\n   */\n  private async loadTemplates(): Promise<void> {\n    try {\n      if (!existsSync(this.templatesDir)) {\n        return;\n      }\n      \n      const entries = await readdir(this.templatesDir, { withFileTypes: true });\n      \n      for (const entry of entries) {\n        if (entry.isDirectory()) {\n          const templateDir = join(this.templatesDir, entry.name);\n          const configPath = join(templateDir, 'template.json');\n          \n          if (existsSync(configPath)) {\n            try {\n              const configData = await readFile(configPath, 'utf8');\n              const config = JSON.parse(configData) as TemplateConfig;\n              \n              // Get template files\n              const files = await findFiles(templateDir, '**/*', { recursive: true });\n              const relativeFiles = files\n                .map(file => file.replace(templateDir, '').replace(/^[\\\\/]/, ''))\n                .filter(file => file !== 'template.json');\n              \n              // Get directory stats\n              const stats = await stat(templateDir);\n              \n              const template: ProjectTemplate = {\n                config,\n                path: templateDir,\n                files: relativeFiles,\n                size: 0, // Would calculate actual size\n                createdAt: stats.birthtime,\n                modifiedAt: stats.mtime,\n              };\n              \n              this.templates.set(config.name, template);\n              this.logger.debug(`Loaded template: ${config.name}`);\n            } catch (error) {\n              this.logger.warn(`Failed to load template from ${templateDir}:`, error);\n            }\n          }\n        }\n      }\n    } catch (error) {\n      this.logger.error('Failed to load templates:', error);\n    }\n  }\n  \n  /**\n   * Validate template variables\n   */\n  private async validateVariables(\n    templateVars: TemplateVariable[],\n    providedVars: Record<string, any>\n  ): Promise<ValidationResult> {\n    const errors: ValidationResult['errors'] = [];\n    const warnings: ValidationResult['warnings'] = [];\n    \n    for (const templateVar of templateVars) {\n      const value = providedVars[templateVar.name];\n      \n      // Check required variables\n      if (templateVar.required && (value === undefined || value === null)) {\n        errors.push({\n          message: `Required variable '${templateVar.name}' is missing`,\n          code: 'MISSING_REQUIRED_VARIABLE',\n          path: templateVar.name,\n          expected: templateVar.type,\n          actual: 'undefined',\n        });\n        continue;\n      }\n      \n      // Skip validation if variable is not provided and not required\n      if (value === undefined || value === null) {\n        continue;\n      }\n      \n      // Validate variable type and constraints\n      const validation = this.validateVariable(templateVar, value);\n      errors.push(...validation.errors);\n      warnings.push(...validation.warnings);\n    }\n    \n    return {\n      valid: errors.length === 0,\n      errors,\n      warnings,\n    };\n  }\n  \n  /**\n   * Validate a single template variable\n   */\n  private validateVariable(templateVar: TemplateVariable, value: any): ValidationResult {\n    switch (templateVar.type) {\n      case 'string':\n        return validateString(value, {\n          fieldName: templateVar.name,\n          pattern: templateVar.pattern ? new RegExp(templateVar.pattern) : undefined,\n        });\n      \n      case 'number':\n        if (typeof value !== 'number') {\n          return {\n            valid: false,\n            errors: [{\n              message: `Variable '${templateVar.name}' must be a number`,\n              code: 'INVALID_TYPE',\n              path: templateVar.name,\n              expected: 'number',\n              actual: typeof value,\n            }],\n            warnings: [],\n          };\n        }\n        break;\n      \n      case 'boolean':\n        if (typeof value !== 'boolean') {\n          return {\n            valid: false,\n            errors: [{\n              message: `Variable '${templateVar.name}' must be a boolean`,\n              code: 'INVALID_TYPE',\n              path: templateVar.name,\n              expected: 'boolean',\n              actual: typeof value,\n            }],\n            warnings: [],\n          };\n        }\n        break;\n      \n      case 'array':\n        if (!Array.isArray(value)) {\n          return {\n            valid: false,\n            errors: [{\n              message: `Variable '${templateVar.name}' must be an array`,\n              code: 'INVALID_TYPE',\n              path: templateVar.name,\n              expected: 'array',\n              actual: typeof value,\n            }],\n            warnings: [],\n          };\n        }\n        break;\n      \n      case 'object':\n        return validateObject(value, {\n          fieldName: templateVar.name,\n          allowNull: false,\n        });\n    }\n    \n    // Check allowed values\n    if (templateVar.allowedValues && !templateVar.allowedValues.includes(value)) {\n      return {\n        valid: false,\n        errors: [{\n          message: `Variable '${templateVar.name}' must be one of: ${templateVar.allowedValues.join(', ')}`,\n          code: 'INVALID_VALUE',\n          path: templateVar.name,\n          expected: templateVar.allowedValues.join(' | '),\n          actual: value,\n        }],\n        warnings: [],\n      };\n    }\n    \n    return { valid: true, errors: [], warnings: [] };\n  }\n  \n  /**\n   * Check if a file should be skipped during template processing\n   */\n  private shouldSkipFile(filePath: string, config: TemplateConfig): boolean {\n    // Check ignore patterns\n    if (config.ignore) {\n      for (const pattern of config.ignore) {\n        const regex = new RegExp(pattern.replace(/\\*/g, '.*'));\n        if (regex.test(filePath)) {\n          return true;\n        }\n      }\n    }\n    \n    // Check include patterns\n    if (config.include) {\n      let included = false;\n      for (const pattern of config.include) {\n        const regex = new RegExp(pattern.replace(/\\*/g, '.*'));\n        if (regex.test(filePath)) {\n          included = true;\n          break;\n        }\n      }\n      if (!included) {\n        return true;\n      }\n    }\n    \n    return false;\n  }\n  \n  /**\n   * Run post-processing scripts\n   */\n  private async runPostProcessing(scripts: string[], outputDir: string): Promise<void> {\n    for (const script of scripts) {\n      try {\n        this.logger.info(`Running post-processing script: ${script}`);\n        \n        const { spawn } = await import('child_process');\n        const process = spawn('sh', ['-c', script], {\n          cwd: outputDir,\n          stdio: ['ignore', 'pipe', 'pipe'],\n        });\n        \n        process.stdout?.on('data', (data) => {\n          this.logger.debug(`Script output: ${data.toString().trim()}`);\n        });\n        \n        process.stderr?.on('data', (data) => {\n          this.logger.warn(`Script error: ${data.toString().trim()}`);\n        });\n        \n        await new Promise<void>((resolve, reject) => {\n          process.on('exit', (code) => {\n            if (code === 0) {\n              resolve();\n            } else {\n              reject(new Error(`Post-processing script failed with code ${code}`));\n            }\n          });\n        });\n      } catch (error) {\n        this.logger.error(`Post-processing script failed: ${script}`, error);\n        throw error;\n      }\n    }\n  }\n}\n"],
      version: 3
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "e1a6ba4b618254c58f67ef7b1fe155c24f88fbea"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_jl18tk9zx = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_jl18tk9zx();
/**
 * Template Service
 *
 * Provides template operations for project initialization and code generation.
 * Supports multiple template engines, variable substitution, and custom templates.
 */
import { readFile, writeFile, readdir, stat } from 'fs/promises';
import { existsSync } from 'fs';
import { join, dirname, extname } from 'path';
import { EventEmitter } from 'events';
import { createLogger } from '../utils/logger.js';
import { ensureDirectory, copyFile, findFiles, isDirectory } from '../utils/file-system.js';
import { validateString, validateObject } from '../utils/validation.js';
/**
 * Simple template engine implementation
 */
class SimpleTemplateEngine {
  name =
  /* istanbul ignore next */
  (cov_jl18tk9zx().s[0]++, 'simple');
  async render(content, context) {
    /* istanbul ignore next */
    cov_jl18tk9zx().f[0]++;
    let result =
    /* istanbul ignore next */
    (cov_jl18tk9zx().s[1]++, content);
    // Replace variables using {{variable}} syntax
    /* istanbul ignore next */
    cov_jl18tk9zx().s[2]++;
    for (const [key, value] of Object.entries(context.variables)) {
      const pattern =
      /* istanbul ignore next */
      (cov_jl18tk9zx().s[3]++, new RegExp(`\\{\\{\\s*${key}\\s*\\}\\}`, 'g'));
      /* istanbul ignore next */
      cov_jl18tk9zx().s[4]++;
      result = result.replace(pattern, String(value));
    }
    // Replace metadata variables
    /* istanbul ignore next */
    cov_jl18tk9zx().s[5]++;
    result = result.replace(/\{\{\s*templateName\s*\}\}/g, context.metadata.templateName);
    /* istanbul ignore next */
    cov_jl18tk9zx().s[6]++;
    result = result.replace(/\{\{\s*templateVersion\s*\}\}/g, context.metadata.templateVersion);
    /* istanbul ignore next */
    cov_jl18tk9zx().s[7]++;
    result = result.replace(/\{\{\s*generatedAt\s*\}\}/g, context.metadata.generatedAt.toISOString());
    /* istanbul ignore next */
    cov_jl18tk9zx().s[8]++;
    result = result.replace(/\{\{\s*generatedBy\s*\}\}/g, context.metadata.generatedBy);
    // Apply helper functions
    /* istanbul ignore next */
    cov_jl18tk9zx().s[9]++;
    for (const [helperName, helperFn] of Object.entries(context.helpers)) {
      const pattern =
      /* istanbul ignore next */
      (cov_jl18tk9zx().s[10]++, new RegExp(`\\{\\{\\s*${helperName}\\s*\\(([^)]+)\\)\\s*\\}\\}`, 'g'));
      /* istanbul ignore next */
      cov_jl18tk9zx().s[11]++;
      result = result.replace(pattern, (match, args) => {
        /* istanbul ignore next */
        cov_jl18tk9zx().f[1]++;
        cov_jl18tk9zx().s[12]++;
        try {
          const argList =
          /* istanbul ignore next */
          (cov_jl18tk9zx().s[13]++, args.split(',').map(arg => {
            /* istanbul ignore next */
            cov_jl18tk9zx().f[2]++;
            cov_jl18tk9zx().s[14]++;
            return arg.trim().replace(/["']/g, '');
          }));
          /* istanbul ignore next */
          cov_jl18tk9zx().s[15]++;
          return String(helperFn(...argList));
        } catch (error) {
          /* istanbul ignore next */
          cov_jl18tk9zx().s[16]++;
          return match; // Keep original if helper fails
        }
      });
    }
    /* istanbul ignore next */
    cov_jl18tk9zx().s[17]++;
    return result;
  }
  shouldProcess(filePath) {
    /* istanbul ignore next */
    cov_jl18tk9zx().f[3]++;
    const ext =
    /* istanbul ignore next */
    (cov_jl18tk9zx().s[18]++, extname(filePath).toLowerCase());
    /* istanbul ignore next */
    cov_jl18tk9zx().s[19]++;
    return !['.jpg', '.jpeg', '.png', '.gif', '.bmp', '.ico', '.zip', '.tar', '.gz'].includes(ext);
  }
  getPatterns() {
    /* istanbul ignore next */
    cov_jl18tk9zx().f[4]++;
    cov_jl18tk9zx().s[20]++;
    return ['**/*'];
  }
}
/**
 * Default template helpers
 */
const DEFAULT_HELPERS =
/* istanbul ignore next */
(cov_jl18tk9zx().s[21]++, {
  uppercase: str => {
    /* istanbul ignore next */
    cov_jl18tk9zx().f[5]++;
    cov_jl18tk9zx().s[22]++;
    return str.toUpperCase();
  },
  lowercase: str => {
    /* istanbul ignore next */
    cov_jl18tk9zx().f[6]++;
    cov_jl18tk9zx().s[23]++;
    return str.toLowerCase();
  },
  capitalize: str => {
    /* istanbul ignore next */
    cov_jl18tk9zx().f[7]++;
    cov_jl18tk9zx().s[24]++;
    return str.charAt(0).toUpperCase() + str.slice(1);
  },
  camelCase: str => {
    /* istanbul ignore next */
    cov_jl18tk9zx().f[8]++;
    cov_jl18tk9zx().s[25]++;
    return str.replace(/[-_\s](.)/g, (_, char) => {
      /* istanbul ignore next */
      cov_jl18tk9zx().f[9]++;
      cov_jl18tk9zx().s[26]++;
      return char.toUpperCase();
    });
  },
  kebabCase: str => {
    /* istanbul ignore next */
    cov_jl18tk9zx().f[10]++;
    cov_jl18tk9zx().s[27]++;
    return str.replace(/[A-Z]/g, char => {
      /* istanbul ignore next */
      cov_jl18tk9zx().f[11]++;
      cov_jl18tk9zx().s[28]++;
      return '-' + char.toLowerCase();
    }).replace(/^-/, '');
  },
  snakeCase: str => {
    /* istanbul ignore next */
    cov_jl18tk9zx().f[12]++;
    cov_jl18tk9zx().s[29]++;
    return str.replace(/[A-Z]/g, char => {
      /* istanbul ignore next */
      cov_jl18tk9zx().f[13]++;
      cov_jl18tk9zx().s[30]++;
      return '_' + char.toLowerCase();
    }).replace(/^_/, '');
  },
  pascalCase: str => {
    /* istanbul ignore next */
    cov_jl18tk9zx().f[14]++;
    cov_jl18tk9zx().s[31]++;
    return str.charAt(0).toUpperCase() + str.slice(1).replace(/[-_\s](.)/g, (_, char) => {
      /* istanbul ignore next */
      cov_jl18tk9zx().f[15]++;
      cov_jl18tk9zx().s[32]++;
      return char.toUpperCase();
    });
  },
  pluralize: str => {
    /* istanbul ignore next */
    cov_jl18tk9zx().f[16]++;
    cov_jl18tk9zx().s[33]++;
    return str.endsWith('s') ?
    /* istanbul ignore next */
    (cov_jl18tk9zx().b[0][0]++, str) :
    /* istanbul ignore next */
    (cov_jl18tk9zx().b[0][1]++, str + 's');
  },
  singularize: str => {
    /* istanbul ignore next */
    cov_jl18tk9zx().f[17]++;
    cov_jl18tk9zx().s[34]++;
    return str.endsWith('s') ?
    /* istanbul ignore next */
    (cov_jl18tk9zx().b[1][0]++, str.slice(0, -1)) :
    /* istanbul ignore next */
    (cov_jl18tk9zx().b[1][1]++, str);
  },
  now: () => {
    /* istanbul ignore next */
    cov_jl18tk9zx().f[18]++;
    cov_jl18tk9zx().s[35]++;
    return new Date().toISOString();
  },
  timestamp: () => {
    /* istanbul ignore next */
    cov_jl18tk9zx().f[19]++;
    cov_jl18tk9zx().s[36]++;
    return Date.now();
  },
  uuid: () => {
    /* istanbul ignore next */
    cov_jl18tk9zx().f[20]++;
    cov_jl18tk9zx().s[37]++;
    return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, c => {
      /* istanbul ignore next */
      cov_jl18tk9zx().f[21]++;
      const r =
      /* istanbul ignore next */
      (cov_jl18tk9zx().s[38]++, Math.random() * 16 | 0);
      const v =
      /* istanbul ignore next */
      (cov_jl18tk9zx().s[39]++, c === 'x' ?
      /* istanbul ignore next */
      (cov_jl18tk9zx().b[2][0]++, r) :
      /* istanbul ignore next */
      (cov_jl18tk9zx().b[2][1]++, r & 0x3 | 0x8));
      /* istanbul ignore next */
      cov_jl18tk9zx().s[40]++;
      return v.toString(16);
    });
  }
});
/**
 * Template service implementation
 */
export class TemplateService extends EventEmitter {
  logger;
  templatesDir;
  engines =
  /* istanbul ignore next */
  (cov_jl18tk9zx().s[41]++, new Map());
  templates =
  /* istanbul ignore next */
  (cov_jl18tk9zx().s[42]++, new Map());
  initialized =
  /* istanbul ignore next */
  (cov_jl18tk9zx().s[43]++, false);
  constructor(config) {
    /* istanbul ignore next */
    cov_jl18tk9zx().f[22]++;
    cov_jl18tk9zx().s[44]++;
    super();
    /* istanbul ignore next */
    cov_jl18tk9zx().s[45]++;
    this.logger = createLogger({
      prefix: 'TemplateService'
    });
    /* istanbul ignore next */
    cov_jl18tk9zx().s[46]++;
    this.templatesDir =
    /* istanbul ignore next */
    (cov_jl18tk9zx().b[3][0]++, config?.templatesDir) ||
    /* istanbul ignore next */
    (cov_jl18tk9zx().b[3][1]++, join(process.cwd(), 'templates'));
    // Register default template engine
    /* istanbul ignore next */
    cov_jl18tk9zx().s[47]++;
    this.registerEngine(new SimpleTemplateEngine());
  }
  /**
   * Initialize the template service
   */
  async init() {
    /* istanbul ignore next */
    cov_jl18tk9zx().f[23]++;
    cov_jl18tk9zx().s[48]++;
    if (this.initialized) {
      /* istanbul ignore next */
      cov_jl18tk9zx().b[4][0]++;
      cov_jl18tk9zx().s[49]++;
      return;
    } else
    /* istanbul ignore next */
    {
      cov_jl18tk9zx().b[4][1]++;
    }
    cov_jl18tk9zx().s[50]++;
    try {
      /* istanbul ignore next */
      cov_jl18tk9zx().s[51]++;
      // Ensure templates directory exists
      await ensureDirectory(this.templatesDir);
      // Load available templates
      /* istanbul ignore next */
      cov_jl18tk9zx().s[52]++;
      await this.loadTemplates();
      /* istanbul ignore next */
      cov_jl18tk9zx().s[53]++;
      this.initialized = true;
      /* istanbul ignore next */
      cov_jl18tk9zx().s[54]++;
      this.logger.info('Template service initialized');
    } catch (error) {
      /* istanbul ignore next */
      cov_jl18tk9zx().s[55]++;
      this.logger.error('Failed to initialize template service:', error);
      /* istanbul ignore next */
      cov_jl18tk9zx().s[56]++;
      throw error;
    }
  }
  /**
   * Dispose the template service
   */
  async dispose() {
    /* istanbul ignore next */
    cov_jl18tk9zx().f[24]++;
    cov_jl18tk9zx().s[57]++;
    if (!this.initialized) {
      /* istanbul ignore next */
      cov_jl18tk9zx().b[5][0]++;
      cov_jl18tk9zx().s[58]++;
      return;
    } else
    /* istanbul ignore next */
    {
      cov_jl18tk9zx().b[5][1]++;
    }
    cov_jl18tk9zx().s[59]++;
    try {
      /* istanbul ignore next */
      cov_jl18tk9zx().s[60]++;
      this.templates.clear();
      /* istanbul ignore next */
      cov_jl18tk9zx().s[61]++;
      this.engines.clear();
      /* istanbul ignore next */
      cov_jl18tk9zx().s[62]++;
      this.initialized = false;
      /* istanbul ignore next */
      cov_jl18tk9zx().s[63]++;
      this.logger.info('Template service disposed');
    } catch (error) {
      /* istanbul ignore next */
      cov_jl18tk9zx().s[64]++;
      this.logger.error('Error disposing template service:', error);
    }
  }
  /**
   * Health check for the service
   */
  async healthCheck() {
    /* istanbul ignore next */
    cov_jl18tk9zx().f[25]++;
    cov_jl18tk9zx().s[65]++;
    try {
      /* istanbul ignore next */
      cov_jl18tk9zx().s[66]++;
      if (!this.initialized) {
        /* istanbul ignore next */
        cov_jl18tk9zx().b[6][0]++;
        cov_jl18tk9zx().s[67]++;
        return {
          healthy: false,
          message: 'Service not initialized'
        };
      } else
      /* istanbul ignore next */
      {
        cov_jl18tk9zx().b[6][1]++;
      }
      // Check if templates directory exists
      cov_jl18tk9zx().s[68]++;
      if (!existsSync(this.templatesDir)) {
        /* istanbul ignore next */
        cov_jl18tk9zx().b[7][0]++;
        cov_jl18tk9zx().s[69]++;
        return {
          healthy: false,
          message: 'Templates directory not accessible'
        };
      } else
      /* istanbul ignore next */
      {
        cov_jl18tk9zx().b[7][1]++;
      }
      const templateCount =
      /* istanbul ignore next */
      (cov_jl18tk9zx().s[70]++, this.templates.size);
      const engineCount =
      /* istanbul ignore next */
      (cov_jl18tk9zx().s[71]++, this.engines.size);
      /* istanbul ignore next */
      cov_jl18tk9zx().s[72]++;
      return {
        healthy: true,
        message: `${templateCount} templates, ${engineCount} engines`
      };
    } catch (error) {
      /* istanbul ignore next */
      cov_jl18tk9zx().s[73]++;
      return {
        healthy: false,
        message: error.message
      };
    }
  }
  /**
   * Register a template engine
   */
  registerEngine(engine) {
    /* istanbul ignore next */
    cov_jl18tk9zx().f[26]++;
    cov_jl18tk9zx().s[74]++;
    this.engines.set(engine.name, engine);
    /* istanbul ignore next */
    cov_jl18tk9zx().s[75]++;
    this.logger.debug(`Registered template engine: ${engine.name}`);
  }
  /**
   * Get available templates
   */
  async getTemplates() {
    /* istanbul ignore next */
    cov_jl18tk9zx().f[27]++;
    cov_jl18tk9zx().s[76]++;
    try {
      /* istanbul ignore next */
      cov_jl18tk9zx().s[77]++;
      await this.loadTemplates(); // Refresh templates
      /* istanbul ignore next */
      cov_jl18tk9zx().s[78]++;
      return {
        success: true,
        data: Array.from(this.templates.values())
      };
    } catch (error) {
      /* istanbul ignore next */
      cov_jl18tk9zx().s[79]++;
      return {
        success: false,
        error: error
      };
    }
  }
  /**
   * Get a specific template
   */
  async getTemplate(name) {
    /* istanbul ignore next */
    cov_jl18tk9zx().f[28]++;
    cov_jl18tk9zx().s[80]++;
    try {
      const template =
      /* istanbul ignore next */
      (cov_jl18tk9zx().s[81]++, this.templates.get(name));
      /* istanbul ignore next */
      cov_jl18tk9zx().s[82]++;
      if (!template) {
        /* istanbul ignore next */
        cov_jl18tk9zx().b[8][0]++;
        cov_jl18tk9zx().s[83]++;
        return {
          success: false,
          error: new Error(`Template '${name}' not found`)
        };
      } else
      /* istanbul ignore next */
      {
        cov_jl18tk9zx().b[8][1]++;
      }
      cov_jl18tk9zx().s[84]++;
      return {
        success: true,
        data: template
      };
    } catch (error) {
      /* istanbul ignore next */
      cov_jl18tk9zx().s[85]++;
      return {
        success: false,
        error: error
      };
    }
  }
  /**
   * Render a template to a target directory
   */
  async renderTemplate(templateName, outputDir, variables =
  /* istanbul ignore next */
  (cov_jl18tk9zx().b[9][0]++, {}), options =
  /* istanbul ignore next */
  (cov_jl18tk9zx().b[10][0]++, {})) {
    /* istanbul ignore next */
    cov_jl18tk9zx().f[29]++;
    const startTime =
    /* istanbul ignore next */
    (cov_jl18tk9zx().s[86]++, Date.now());
    /* istanbul ignore next */
    cov_jl18tk9zx().s[87]++;
    try {
      /* istanbul ignore next */
      cov_jl18tk9zx().s[88]++;
      this.logger.info(`Rendering template '${templateName}' to '${outputDir}'`);
      // Get template
      const templateResult =
      /* istanbul ignore next */
      (cov_jl18tk9zx().s[89]++, await this.getTemplate(templateName));
      /* istanbul ignore next */
      cov_jl18tk9zx().s[90]++;
      if (!templateResult.success) {
        /* istanbul ignore next */
        cov_jl18tk9zx().b[11][0]++;
        cov_jl18tk9zx().s[91]++;
        return templateResult;
      } else
      /* istanbul ignore next */
      {
        cov_jl18tk9zx().b[11][1]++;
      }
      const template =
      /* istanbul ignore next */
      (cov_jl18tk9zx().s[92]++, templateResult.data);
      // Validate variables
      const validationResult =
      /* istanbul ignore next */
      (cov_jl18tk9zx().s[93]++, await this.validateVariables(template.config.variables, variables));
      /* istanbul ignore next */
      cov_jl18tk9zx().s[94]++;
      if (!validationResult.valid) {
        /* istanbul ignore next */
        cov_jl18tk9zx().b[12][0]++;
        cov_jl18tk9zx().s[95]++;
        return {
          success: false,
          error: new Error(`Variable validation failed: ${validationResult.errors[0]?.message}`)
        };
      } else
      /* istanbul ignore next */
      {
        cov_jl18tk9zx().b[12][1]++;
      }
      // Prepare template context
      const context =
      /* istanbul ignore next */
      (cov_jl18tk9zx().s[96]++, {
        variables,
        metadata: {
          templateName: template.config.name,
          templateVersion: template.config.version,
          generatedAt: new Date(),
          generatedBy: 'claude-flow'
        },
        helpers: {
          ...DEFAULT_HELPERS,
          ...options.customHelpers
        }
      });
      // Get template engine
      const engineName =
      /* istanbul ignore next */
      (cov_jl18tk9zx().s[97]++,
      /* istanbul ignore next */
      (cov_jl18tk9zx().b[13][0]++, template.config.engine) ||
      /* istanbul ignore next */
      (cov_jl18tk9zx().b[13][1]++, 'simple'));
      const engine =
      /* istanbul ignore next */
      (cov_jl18tk9zx().s[98]++, this.engines.get(engineName));
      /* istanbul ignore next */
      cov_jl18tk9zx().s[99]++;
      if (!engine) {
        /* istanbul ignore next */
        cov_jl18tk9zx().b[14][0]++;
        cov_jl18tk9zx().s[100]++;
        return {
          success: false,
          error: new Error(`Template engine '${engineName}' not found`)
        };
      } else
      /* istanbul ignore next */
      {
        cov_jl18tk9zx().b[14][1]++;
      }
      // Ensure output directory exists (unless dry run)
      cov_jl18tk9zx().s[101]++;
      if (!options.dryRun) {
        /* istanbul ignore next */
        cov_jl18tk9zx().b[15][0]++;
        cov_jl18tk9zx().s[102]++;
        await ensureDirectory(outputDir);
      } else
      /* istanbul ignore next */
      {
        cov_jl18tk9zx().b[15][1]++;
      }
      const result =
      /* istanbul ignore next */
      (cov_jl18tk9zx().s[103]++, {
        success: true,
        message: 'Template rendered successfully',
        generatedFiles: [],
        skippedFiles: [],
        errors: [],
        duration: 0,
        outputDir
      });
      // Process template files
      /* istanbul ignore next */
      cov_jl18tk9zx().s[104]++;
      for (const relativeFilePath of template.files) {
        const sourceFilePath =
        /* istanbul ignore next */
        (cov_jl18tk9zx().s[105]++, join(template.path, relativeFilePath));
        const targetFilePath =
        /* istanbul ignore next */
        (cov_jl18tk9zx().s[106]++, join(outputDir, relativeFilePath));
        /* istanbul ignore next */
        cov_jl18tk9zx().s[107]++;
        try {
          /* istanbul ignore next */
          cov_jl18tk9zx().s[108]++;
          // Check if file should be skipped
          if (this.shouldSkipFile(relativeFilePath, template.config)) {
            /* istanbul ignore next */
            cov_jl18tk9zx().b[16][0]++;
            cov_jl18tk9zx().s[109]++;
            result.skippedFiles.push(relativeFilePath);
            /* istanbul ignore next */
            cov_jl18tk9zx().s[110]++;
            continue;
          } else
          /* istanbul ignore next */
          {
            cov_jl18tk9zx().b[16][1]++;
          }
          // Check if target exists and overwrite is disabled
          cov_jl18tk9zx().s[111]++;
          if (
          /* istanbul ignore next */
          (cov_jl18tk9zx().b[18][0]++, !options.overwrite) &&
          /* istanbul ignore next */
          (cov_jl18tk9zx().b[18][1]++, existsSync(targetFilePath)) &&
          /* istanbul ignore next */
          (cov_jl18tk9zx().b[18][2]++, !options.dryRun)) {
            /* istanbul ignore next */
            cov_jl18tk9zx().b[17][0]++;
            cov_jl18tk9zx().s[112]++;
            result.skippedFiles.push(relativeFilePath);
            /* istanbul ignore next */
            cov_jl18tk9zx().s[113]++;
            this.logger.debug(`Skipped existing file: ${relativeFilePath}`);
            /* istanbul ignore next */
            cov_jl18tk9zx().s[114]++;
            continue;
          } else
          /* istanbul ignore next */
          {
            cov_jl18tk9zx().b[17][1]++;
          }
          // Process file
          cov_jl18tk9zx().s[115]++;
          if (engine.shouldProcess(sourceFilePath)) {
            /* istanbul ignore next */
            cov_jl18tk9zx().b[19][0]++;
            // Read, render, and write template file
            const content =
            /* istanbul ignore next */
            (cov_jl18tk9zx().s[116]++, await readFile(sourceFilePath, 'utf8'));
            const renderedContent =
            /* istanbul ignore next */
            (cov_jl18tk9zx().s[117]++, await engine.render(content, context));
            /* istanbul ignore next */
            cov_jl18tk9zx().s[118]++;
            if (!options.dryRun) {
              /* istanbul ignore next */
              cov_jl18tk9zx().b[20][0]++;
              cov_jl18tk9zx().s[119]++;
              await ensureDirectory(dirname(targetFilePath));
              /* istanbul ignore next */
              cov_jl18tk9zx().s[120]++;
              await writeFile(targetFilePath, renderedContent, 'utf8');
            } else
            /* istanbul ignore next */
            {
              cov_jl18tk9zx().b[20][1]++;
            }
            cov_jl18tk9zx().s[121]++;
            result.generatedFiles.push(relativeFilePath);
            /* istanbul ignore next */
            cov_jl18tk9zx().s[122]++;
            this.logger.debug(`Processed template file: ${relativeFilePath}`);
          } else {
            /* istanbul ignore next */
            cov_jl18tk9zx().b[19][1]++;
            cov_jl18tk9zx().s[123]++;
            // Copy binary file as-is
            if (!options.dryRun) {
              /* istanbul ignore next */
              cov_jl18tk9zx().b[21][0]++;
              cov_jl18tk9zx().s[124]++;
              await ensureDirectory(dirname(targetFilePath));
              /* istanbul ignore next */
              cov_jl18tk9zx().s[125]++;
              await copyFile(sourceFilePath, targetFilePath, {
                overwrite: options.overwrite
              });
            } else
            /* istanbul ignore next */
            {
              cov_jl18tk9zx().b[21][1]++;
            }
            cov_jl18tk9zx().s[126]++;
            result.generatedFiles.push(relativeFilePath);
            /* istanbul ignore next */
            cov_jl18tk9zx().s[127]++;
            this.logger.debug(`Copied binary file: ${relativeFilePath}`);
          }
        } catch (error) {
          /* istanbul ignore next */
          cov_jl18tk9zx().s[128]++;
          result.errors.push({
            file: relativeFilePath,
            error: error.message
          });
          /* istanbul ignore next */
          cov_jl18tk9zx().s[129]++;
          this.logger.error(`Error processing file ${relativeFilePath}:`, error);
        }
      }
      /* istanbul ignore next */
      cov_jl18tk9zx().s[130]++;
      result.duration = Date.now() - startTime;
      // Run post-processing scripts
      /* istanbul ignore next */
      cov_jl18tk9zx().s[131]++;
      if (
      /* istanbul ignore next */
      (cov_jl18tk9zx().b[23][0]++, template.config.postProcess) &&
      /* istanbul ignore next */
      (cov_jl18tk9zx().b[23][1]++, !options.dryRun)) {
        /* istanbul ignore next */
        cov_jl18tk9zx().b[22][0]++;
        cov_jl18tk9zx().s[132]++;
        await this.runPostProcessing(template.config.postProcess, outputDir);
      } else
      /* istanbul ignore next */
      {
        cov_jl18tk9zx().b[22][1]++;
      }
      cov_jl18tk9zx().s[133]++;
      this.emit('templateRendered', {
        templateName,
        outputDir,
        result
      });
      /* istanbul ignore next */
      cov_jl18tk9zx().s[134]++;
      return {
        success: true,
        data: result
      };
    } catch (error) {
      /* istanbul ignore next */
      cov_jl18tk9zx().s[135]++;
      return {
        success: false,
        error: error
      };
    }
  }
  /**
   * Create a new template from a directory
   */
  async createTemplate(sourceDir, templateName, config) {
    /* istanbul ignore next */
    cov_jl18tk9zx().f[30]++;
    cov_jl18tk9zx().s[136]++;
    try {
      /* istanbul ignore next */
      cov_jl18tk9zx().s[137]++;
      this.logger.info(`Creating template '${templateName}' from '${sourceDir}'`);
      // Validate source directory
      /* istanbul ignore next */
      cov_jl18tk9zx().s[138]++;
      if (!(await isDirectory(sourceDir))) {
        /* istanbul ignore next */
        cov_jl18tk9zx().b[24][0]++;
        cov_jl18tk9zx().s[139]++;
        return {
          success: false,
          error: new Error(`Source directory '${sourceDir}' does not exist`)
        };
      } else
      /* istanbul ignore next */
      {
        cov_jl18tk9zx().b[24][1]++;
      }
      // Create template directory
      const templateDir =
      /* istanbul ignore next */
      (cov_jl18tk9zx().s[140]++, join(this.templatesDir, templateName));
      /* istanbul ignore next */
      cov_jl18tk9zx().s[141]++;
      await ensureDirectory(templateDir);
      // Copy source files to template directory
      const files =
      /* istanbul ignore next */
      (cov_jl18tk9zx().s[142]++, await findFiles(sourceDir, '**/*', {
        recursive: true
      }));
      const relativeFiles =
      /* istanbul ignore next */
      (cov_jl18tk9zx().s[143]++, []);
      /* istanbul ignore next */
      cov_jl18tk9zx().s[144]++;
      for (const file of files) {
        const relativePath =
        /* istanbul ignore next */
        (cov_jl18tk9zx().s[145]++, file.replace(sourceDir, '').replace(/^[\\/]/, ''));
        const targetPath =
        /* istanbul ignore next */
        (cov_jl18tk9zx().s[146]++, join(templateDir, relativePath));
        /* istanbul ignore next */
        cov_jl18tk9zx().s[147]++;
        await ensureDirectory(dirname(targetPath));
        /* istanbul ignore next */
        cov_jl18tk9zx().s[148]++;
        await copyFile(file, targetPath, {
          overwrite: true
        });
        /* istanbul ignore next */
        cov_jl18tk9zx().s[149]++;
        relativeFiles.push(relativePath);
      }
      // Create template configuration
      const templateConfig =
      /* istanbul ignore next */
      (cov_jl18tk9zx().s[150]++, {
        name: templateName,
        version: '1.0.0',
        description:
        /* istanbul ignore next */
        (cov_jl18tk9zx().b[25][0]++, config.description) ||
        /* istanbul ignore next */
        (cov_jl18tk9zx().b[25][1]++, `Template created from ${sourceDir}`),
        author: config.author,
        license: config.license,
        tags:
        /* istanbul ignore next */
        (cov_jl18tk9zx().b[26][0]++, config.tags) ||
        /* istanbul ignore next */
        (cov_jl18tk9zx().b[26][1]++, []),
        variables:
        /* istanbul ignore next */
        (cov_jl18tk9zx().b[27][0]++, config.variables) ||
        /* istanbul ignore next */
        (cov_jl18tk9zx().b[27][1]++, []),
        ignore:
        /* istanbul ignore next */
        (cov_jl18tk9zx().b[28][0]++, config.ignore) ||
        /* istanbul ignore next */
        (cov_jl18tk9zx().b[28][1]++, ['node_modules/**', '.git/**', '**/*.log']),
        include:
        /* istanbul ignore next */
        (cov_jl18tk9zx().b[29][0]++, config.include) ||
        /* istanbul ignore next */
        (cov_jl18tk9zx().b[29][1]++, ['**/*']),
        engine:
        /* istanbul ignore next */
        (cov_jl18tk9zx().b[30][0]++, config.engine) ||
        /* istanbul ignore next */
        (cov_jl18tk9zx().b[30][1]++, 'simple'),
        engineConfig:
        /* istanbul ignore next */
        (cov_jl18tk9zx().b[31][0]++, config.engineConfig) ||
        /* istanbul ignore next */
        (cov_jl18tk9zx().b[31][1]++, {}),
        postProcess:
        /* istanbul ignore next */
        (cov_jl18tk9zx().b[32][0]++, config.postProcess) ||
        /* istanbul ignore next */
        (cov_jl18tk9zx().b[32][1]++, []),
        dependencies: config.dependencies
      });
      // Save template configuration
      const configPath =
      /* istanbul ignore next */
      (cov_jl18tk9zx().s[151]++, join(templateDir, 'template.json'));
      /* istanbul ignore next */
      cov_jl18tk9zx().s[152]++;
      await writeFile(configPath, JSON.stringify(templateConfig, null, 2));
      // Create template object
      const template =
      /* istanbul ignore next */
      (cov_jl18tk9zx().s[153]++, {
        config: templateConfig,
        path: templateDir,
        files: relativeFiles,
        size: 0,
        // Would calculate actual size
        createdAt: new Date(),
        modifiedAt: new Date()
      });
      // Add to templates cache
      /* istanbul ignore next */
      cov_jl18tk9zx().s[154]++;
      this.templates.set(templateName, template);
      /* istanbul ignore next */
      cov_jl18tk9zx().s[155]++;
      this.emit('templateCreated', {
        templateName,
        template
      });
      /* istanbul ignore next */
      cov_jl18tk9zx().s[156]++;
      return {
        success: true,
        data: template
      };
    } catch (error) {
      /* istanbul ignore next */
      cov_jl18tk9zx().s[157]++;
      return {
        success: false,
        error: error
      };
    }
  }
  /**
   * Load templates from the templates directory
   */
  async loadTemplates() {
    /* istanbul ignore next */
    cov_jl18tk9zx().f[31]++;
    cov_jl18tk9zx().s[158]++;
    try {
      /* istanbul ignore next */
      cov_jl18tk9zx().s[159]++;
      if (!existsSync(this.templatesDir)) {
        /* istanbul ignore next */
        cov_jl18tk9zx().b[33][0]++;
        cov_jl18tk9zx().s[160]++;
        return;
      } else
      /* istanbul ignore next */
      {
        cov_jl18tk9zx().b[33][1]++;
      }
      const entries =
      /* istanbul ignore next */
      (cov_jl18tk9zx().s[161]++, await readdir(this.templatesDir, {
        withFileTypes: true
      }));
      /* istanbul ignore next */
      cov_jl18tk9zx().s[162]++;
      for (const entry of entries) {
        /* istanbul ignore next */
        cov_jl18tk9zx().s[163]++;
        if (entry.isDirectory()) {
          /* istanbul ignore next */
          cov_jl18tk9zx().b[34][0]++;
          const templateDir =
          /* istanbul ignore next */
          (cov_jl18tk9zx().s[164]++, join(this.templatesDir, entry.name));
          const configPath =
          /* istanbul ignore next */
          (cov_jl18tk9zx().s[165]++, join(templateDir, 'template.json'));
          /* istanbul ignore next */
          cov_jl18tk9zx().s[166]++;
          if (existsSync(configPath)) {
            /* istanbul ignore next */
            cov_jl18tk9zx().b[35][0]++;
            cov_jl18tk9zx().s[167]++;
            try {
              const configData =
              /* istanbul ignore next */
              (cov_jl18tk9zx().s[168]++, await readFile(configPath, 'utf8'));
              const config =
              /* istanbul ignore next */
              (cov_jl18tk9zx().s[169]++, JSON.parse(configData));
              // Get template files
              const files =
              /* istanbul ignore next */
              (cov_jl18tk9zx().s[170]++, await findFiles(templateDir, '**/*', {
                recursive: true
              }));
              const relativeFiles =
              /* istanbul ignore next */
              (cov_jl18tk9zx().s[171]++, files.map(file => {
                /* istanbul ignore next */
                cov_jl18tk9zx().f[32]++;
                cov_jl18tk9zx().s[172]++;
                return file.replace(templateDir, '').replace(/^[\\/]/, '');
              }).filter(file => {
                /* istanbul ignore next */
                cov_jl18tk9zx().f[33]++;
                cov_jl18tk9zx().s[173]++;
                return file !== 'template.json';
              }));
              // Get directory stats
              const stats =
              /* istanbul ignore next */
              (cov_jl18tk9zx().s[174]++, await stat(templateDir));
              const template =
              /* istanbul ignore next */
              (cov_jl18tk9zx().s[175]++, {
                config,
                path: templateDir,
                files: relativeFiles,
                size: 0,
                // Would calculate actual size
                createdAt: stats.birthtime,
                modifiedAt: stats.mtime
              });
              /* istanbul ignore next */
              cov_jl18tk9zx().s[176]++;
              this.templates.set(config.name, template);
              /* istanbul ignore next */
              cov_jl18tk9zx().s[177]++;
              this.logger.debug(`Loaded template: ${config.name}`);
            } catch (error) {
              /* istanbul ignore next */
              cov_jl18tk9zx().s[178]++;
              this.logger.warn(`Failed to load template from ${templateDir}:`, error);
            }
          } else
          /* istanbul ignore next */
          {
            cov_jl18tk9zx().b[35][1]++;
          }
        } else
        /* istanbul ignore next */
        {
          cov_jl18tk9zx().b[34][1]++;
        }
      }
    } catch (error) {
      /* istanbul ignore next */
      cov_jl18tk9zx().s[179]++;
      this.logger.error('Failed to load templates:', error);
    }
  }
  /**
   * Validate template variables
   */
  async validateVariables(templateVars, providedVars) {
    /* istanbul ignore next */
    cov_jl18tk9zx().f[34]++;
    const errors =
    /* istanbul ignore next */
    (cov_jl18tk9zx().s[180]++, []);
    const warnings =
    /* istanbul ignore next */
    (cov_jl18tk9zx().s[181]++, []);
    /* istanbul ignore next */
    cov_jl18tk9zx().s[182]++;
    for (const templateVar of templateVars) {
      const value =
      /* istanbul ignore next */
      (cov_jl18tk9zx().s[183]++, providedVars[templateVar.name]);
      // Check required variables
      /* istanbul ignore next */
      cov_jl18tk9zx().s[184]++;
      if (
      /* istanbul ignore next */
      (cov_jl18tk9zx().b[37][0]++, templateVar.required) && (
      /* istanbul ignore next */
      (cov_jl18tk9zx().b[37][1]++, value === undefined) ||
      /* istanbul ignore next */
      (cov_jl18tk9zx().b[37][2]++, value === null))) {
        /* istanbul ignore next */
        cov_jl18tk9zx().b[36][0]++;
        cov_jl18tk9zx().s[185]++;
        errors.push({
          message: `Required variable '${templateVar.name}' is missing`,
          code: 'MISSING_REQUIRED_VARIABLE',
          path: templateVar.name,
          expected: templateVar.type,
          actual: 'undefined'
        });
        /* istanbul ignore next */
        cov_jl18tk9zx().s[186]++;
        continue;
      } else
      /* istanbul ignore next */
      {
        cov_jl18tk9zx().b[36][1]++;
      }
      // Skip validation if variable is not provided and not required
      cov_jl18tk9zx().s[187]++;
      if (
      /* istanbul ignore next */
      (cov_jl18tk9zx().b[39][0]++, value === undefined) ||
      /* istanbul ignore next */
      (cov_jl18tk9zx().b[39][1]++, value === null)) {
        /* istanbul ignore next */
        cov_jl18tk9zx().b[38][0]++;
        cov_jl18tk9zx().s[188]++;
        continue;
      } else
      /* istanbul ignore next */
      {
        cov_jl18tk9zx().b[38][1]++;
      }
      // Validate variable type and constraints
      const validation =
      /* istanbul ignore next */
      (cov_jl18tk9zx().s[189]++, this.validateVariable(templateVar, value));
      /* istanbul ignore next */
      cov_jl18tk9zx().s[190]++;
      errors.push(...validation.errors);
      /* istanbul ignore next */
      cov_jl18tk9zx().s[191]++;
      warnings.push(...validation.warnings);
    }
    /* istanbul ignore next */
    cov_jl18tk9zx().s[192]++;
    return {
      valid: errors.length === 0,
      errors,
      warnings
    };
  }
  /**
   * Validate a single template variable
   */
  validateVariable(templateVar, value) {
    /* istanbul ignore next */
    cov_jl18tk9zx().f[35]++;
    cov_jl18tk9zx().s[193]++;
    switch (templateVar.type) {
      case 'string':
        /* istanbul ignore next */
        cov_jl18tk9zx().b[40][0]++;
        cov_jl18tk9zx().s[194]++;
        return validateString(value, {
          fieldName: templateVar.name,
          pattern: templateVar.pattern ?
          /* istanbul ignore next */
          (cov_jl18tk9zx().b[41][0]++, new RegExp(templateVar.pattern)) :
          /* istanbul ignore next */
          (cov_jl18tk9zx().b[41][1]++, undefined)
        });
      case 'number':
        /* istanbul ignore next */
        cov_jl18tk9zx().b[40][1]++;
        cov_jl18tk9zx().s[195]++;
        if (typeof value !== 'number') {
          /* istanbul ignore next */
          cov_jl18tk9zx().b[42][0]++;
          cov_jl18tk9zx().s[196]++;
          return {
            valid: false,
            errors: [{
              message: `Variable '${templateVar.name}' must be a number`,
              code: 'INVALID_TYPE',
              path: templateVar.name,
              expected: 'number',
              actual: typeof value
            }],
            warnings: []
          };
        } else
        /* istanbul ignore next */
        {
          cov_jl18tk9zx().b[42][1]++;
        }
        cov_jl18tk9zx().s[197]++;
        break;
      case 'boolean':
        /* istanbul ignore next */
        cov_jl18tk9zx().b[40][2]++;
        cov_jl18tk9zx().s[198]++;
        if (typeof value !== 'boolean') {
          /* istanbul ignore next */
          cov_jl18tk9zx().b[43][0]++;
          cov_jl18tk9zx().s[199]++;
          return {
            valid: false,
            errors: [{
              message: `Variable '${templateVar.name}' must be a boolean`,
              code: 'INVALID_TYPE',
              path: templateVar.name,
              expected: 'boolean',
              actual: typeof value
            }],
            warnings: []
          };
        } else
        /* istanbul ignore next */
        {
          cov_jl18tk9zx().b[43][1]++;
        }
        cov_jl18tk9zx().s[200]++;
        break;
      case 'array':
        /* istanbul ignore next */
        cov_jl18tk9zx().b[40][3]++;
        cov_jl18tk9zx().s[201]++;
        if (!Array.isArray(value)) {
          /* istanbul ignore next */
          cov_jl18tk9zx().b[44][0]++;
          cov_jl18tk9zx().s[202]++;
          return {
            valid: false,
            errors: [{
              message: `Variable '${templateVar.name}' must be an array`,
              code: 'INVALID_TYPE',
              path: templateVar.name,
              expected: 'array',
              actual: typeof value
            }],
            warnings: []
          };
        } else
        /* istanbul ignore next */
        {
          cov_jl18tk9zx().b[44][1]++;
        }
        cov_jl18tk9zx().s[203]++;
        break;
      case 'object':
        /* istanbul ignore next */
        cov_jl18tk9zx().b[40][4]++;
        cov_jl18tk9zx().s[204]++;
        return validateObject(value, {
          fieldName: templateVar.name,
          allowNull: false
        });
    }
    // Check allowed values
    /* istanbul ignore next */
    cov_jl18tk9zx().s[205]++;
    if (
    /* istanbul ignore next */
    (cov_jl18tk9zx().b[46][0]++, templateVar.allowedValues) &&
    /* istanbul ignore next */
    (cov_jl18tk9zx().b[46][1]++, !templateVar.allowedValues.includes(value))) {
      /* istanbul ignore next */
      cov_jl18tk9zx().b[45][0]++;
      cov_jl18tk9zx().s[206]++;
      return {
        valid: false,
        errors: [{
          message: `Variable '${templateVar.name}' must be one of: ${templateVar.allowedValues.join(', ')}`,
          code: 'INVALID_VALUE',
          path: templateVar.name,
          expected: templateVar.allowedValues.join(' | '),
          actual: value
        }],
        warnings: []
      };
    } else
    /* istanbul ignore next */
    {
      cov_jl18tk9zx().b[45][1]++;
    }
    cov_jl18tk9zx().s[207]++;
    return {
      valid: true,
      errors: [],
      warnings: []
    };
  }
  /**
   * Check if a file should be skipped during template processing
   */
  shouldSkipFile(filePath, config) {
    /* istanbul ignore next */
    cov_jl18tk9zx().f[36]++;
    cov_jl18tk9zx().s[208]++;
    // Check ignore patterns
    if (config.ignore) {
      /* istanbul ignore next */
      cov_jl18tk9zx().b[47][0]++;
      cov_jl18tk9zx().s[209]++;
      for (const pattern of config.ignore) {
        const regex =
        /* istanbul ignore next */
        (cov_jl18tk9zx().s[210]++, new RegExp(pattern.replace(/\*/g, '.*')));
        /* istanbul ignore next */
        cov_jl18tk9zx().s[211]++;
        if (regex.test(filePath)) {
          /* istanbul ignore next */
          cov_jl18tk9zx().b[48][0]++;
          cov_jl18tk9zx().s[212]++;
          return true;
        } else
        /* istanbul ignore next */
        {
          cov_jl18tk9zx().b[48][1]++;
        }
      }
    } else
    /* istanbul ignore next */
    {
      cov_jl18tk9zx().b[47][1]++;
    }
    // Check include patterns
    cov_jl18tk9zx().s[213]++;
    if (config.include) {
      /* istanbul ignore next */
      cov_jl18tk9zx().b[49][0]++;
      let included =
      /* istanbul ignore next */
      (cov_jl18tk9zx().s[214]++, false);
      /* istanbul ignore next */
      cov_jl18tk9zx().s[215]++;
      for (const pattern of config.include) {
        const regex =
        /* istanbul ignore next */
        (cov_jl18tk9zx().s[216]++, new RegExp(pattern.replace(/\*/g, '.*')));
        /* istanbul ignore next */
        cov_jl18tk9zx().s[217]++;
        if (regex.test(filePath)) {
          /* istanbul ignore next */
          cov_jl18tk9zx().b[50][0]++;
          cov_jl18tk9zx().s[218]++;
          included = true;
          /* istanbul ignore next */
          cov_jl18tk9zx().s[219]++;
          break;
        } else
        /* istanbul ignore next */
        {
          cov_jl18tk9zx().b[50][1]++;
        }
      }
      /* istanbul ignore next */
      cov_jl18tk9zx().s[220]++;
      if (!included) {
        /* istanbul ignore next */
        cov_jl18tk9zx().b[51][0]++;
        cov_jl18tk9zx().s[221]++;
        return true;
      } else
      /* istanbul ignore next */
      {
        cov_jl18tk9zx().b[51][1]++;
      }
    } else
    /* istanbul ignore next */
    {
      cov_jl18tk9zx().b[49][1]++;
    }
    cov_jl18tk9zx().s[222]++;
    return false;
  }
  /**
   * Run post-processing scripts
   */
  async runPostProcessing(scripts, outputDir) {
    /* istanbul ignore next */
    cov_jl18tk9zx().f[37]++;
    cov_jl18tk9zx().s[223]++;
    for (const script of scripts) {
      /* istanbul ignore next */
      cov_jl18tk9zx().s[224]++;
      try {
        /* istanbul ignore next */
        cov_jl18tk9zx().s[225]++;
        this.logger.info(`Running post-processing script: ${script}`);
        const {
          spawn
        } =
        /* istanbul ignore next */
        (cov_jl18tk9zx().s[226]++, await import('child_process'));
        const process =
        /* istanbul ignore next */
        (cov_jl18tk9zx().s[227]++, spawn('sh', ['-c', script], {
          cwd: outputDir,
          stdio: ['ignore', 'pipe', 'pipe']
        }));
        /* istanbul ignore next */
        cov_jl18tk9zx().s[228]++;
        process.stdout?.on('data', data => {
          /* istanbul ignore next */
          cov_jl18tk9zx().f[38]++;
          cov_jl18tk9zx().s[229]++;
          this.logger.debug(`Script output: ${data.toString().trim()}`);
        });
        /* istanbul ignore next */
        cov_jl18tk9zx().s[230]++;
        process.stderr?.on('data', data => {
          /* istanbul ignore next */
          cov_jl18tk9zx().f[39]++;
          cov_jl18tk9zx().s[231]++;
          this.logger.warn(`Script error: ${data.toString().trim()}`);
        });
        /* istanbul ignore next */
        cov_jl18tk9zx().s[232]++;
        await new Promise((resolve, reject) => {
          /* istanbul ignore next */
          cov_jl18tk9zx().f[40]++;
          cov_jl18tk9zx().s[233]++;
          process.on('exit', code => {
            /* istanbul ignore next */
            cov_jl18tk9zx().f[41]++;
            cov_jl18tk9zx().s[234]++;
            if (code === 0) {
              /* istanbul ignore next */
              cov_jl18tk9zx().b[52][0]++;
              cov_jl18tk9zx().s[235]++;
              resolve();
            } else {
              /* istanbul ignore next */
              cov_jl18tk9zx().b[52][1]++;
              cov_jl18tk9zx().s[236]++;
              reject(new Error(`Post-processing script failed with code ${code}`));
            }
          });
        });
      } catch (error) {
        /* istanbul ignore next */
        cov_jl18tk9zx().s[237]++;
        this.logger.error(`Post-processing script failed: ${script}`, error);
        /* istanbul ignore next */
        cov_jl18tk9zx().s[238]++;
        throw error;
      }
    }
  }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,