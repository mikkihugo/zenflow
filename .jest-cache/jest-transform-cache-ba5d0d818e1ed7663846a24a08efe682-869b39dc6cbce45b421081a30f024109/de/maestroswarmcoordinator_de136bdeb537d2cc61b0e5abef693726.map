{"version":3,"names":["EventEmitter","join","readFile","writeFile","mkdir","HiveMind","SystemError","MaestroSwarmCoordinator","config","eventBus","logger","hiveMind","maestroState","cov_dx6ttxvus","s","Map","specsDirectory","steeringDirectory","constructor","f","b","process","cwd","setupEventHandlers","info","initialize","hiveMindConfig","name","topology","queenMode","maxAgents","consensusThreshold","memoryTTL","autoSpawn","enableConsensus","enableConsensusValidation","enableMemory","enableCommunication","swarmId","enableSteeringIntegration","initializeSteeringMemory","emit","error","Error","message","String","createSpec","featureName","initialRequest","featurePath","recursive","workflowState","currentPhase","currentTaskIndex","status","lastActivity","Date","history","phase","timestamp","set","requirementsTask","description","priority","strategy","requiredCapabilities","metadata","maestroFeature","maestroPhase","outputFile","task","submitTask","waitForTaskCompletion","id","generateDesign","state","get","requirementsPath","requirementsContent","designTask","requireConsensus","requirements","push","generateTasks","designPath","designContent","taskPlanningTask","implementTask","taskId","tasksPath","tasksContent","taskLines","split","filter","line","startsWith","length","taskDescription","substring","indexOf","trim","implementationTask","steeringContext","getSteeringContext","updatedTasksContent","replace","approvePhase","consensusProposal","now","proposal","action","details","requiredThreshold","deadline","type","consensusEngine","consensus","proposalId","createProposal","consensusResult","waitForConsensusResult","achieved","reason","phaseProgression","nextPhase","getWorkflowState","createSteeringDocument","domain","content","memory","store","lastUpdated","maintainer","communication","broadcast","steeringKeys","search","steeringDocs","Promise","all","map","key","retrieve","doc","warn","defaultSteering","Object","entries","timeoutMs","resolve","reject","timeout","setTimeout","checkInterval","setInterval","getTask","clearTimeout","clearInterval","result","JSON","parse","getProposalStatus","finalRatio","currentRatio","on","handleSpecCreated","bind","handlePhaseApproved","handleTaskImplemented","data","stringify","shutdown"],"sources":["/home/mhugo/code/claude-code-flow/src/maestro/maestro-swarm-coordinator.ts"],"sourcesContent":["/**\n * MaestroSwarmCoordinator - Native Hive Mind Implementation\n * \n * Replaces MaestroOrchestrator with native hive mind swarm coordination.\n * Uses specs-driven topology and SwarmOrchestrator for all task management.\n * Eliminates dual agent systems and leverages collective intelligence.\n */\n\nimport { EventEmitter } from 'events';\nimport { join } from 'path';\nimport { readFile, writeFile, mkdir } from 'fs/promises';\n\n// Native hive mind components\nimport { HiveMind } from '../hive-mind/core/HiveMind.js';\nimport { Agent } from '../hive-mind/core/Agent.js';\nimport { ConsensusEngine } from '../hive-mind/integration/ConsensusEngine.js';\nimport { SwarmOrchestrator } from '../hive-mind/integration/SwarmOrchestrator.js';\nimport {\n  HiveMindConfig,\n  TaskSubmitOptions,\n  AgentCapability,\n  Task,\n  ConsensusProposal\n} from '../hive-mind/types.js';\n\n// Core infrastructure\nimport { IEventBus } from '../core/event-bus.js';\nimport { ILogger } from '../core/logger.js';\nimport { SystemError } from '../utils/errors.js';\n\n// Maestro types\nimport {\n  MaestroWorkflowState,\n  WorkflowPhase,\n  MaestroSpec\n} from './maestro-types.js';\n\nexport interface MaestroSwarmConfig {\n  // Native hive mind configuration\n  hiveMindConfig: HiveMindConfig;\n  \n  // Maestro-specific features\n  enableConsensusValidation: boolean;\n  enableLivingDocumentation: boolean;\n  enableSteeringIntegration: boolean;\n  \n  // File system settings\n  specsDirectory: string;\n  steeringDirectory: string;\n}\n\n/**\n * Native Hive Mind Maestro Coordinator\n * Leverages specs-driven swarm topology for collective intelligence\n */\nexport class MaestroSwarmCoordinator extends EventEmitter {\n  private hiveMind: HiveMind;\n  private maestroState: Map<string, MaestroWorkflowState> = new Map();\n  private specsDirectory: string;\n  private steeringDirectory: string;\n  \n  constructor(\n    private config: MaestroSwarmConfig,\n    private eventBus: IEventBus,\n    private logger: ILogger\n  ) {\n    super();\n    \n    this.specsDirectory = config.specsDirectory || join(process.cwd(), '.claude', 'claude-flow', 'maestro', 'specs');\n    this.steeringDirectory = config.steeringDirectory || join(process.cwd(), '.claude', 'claude-flow', 'maestro', 'steering');\n    \n    this.setupEventHandlers();\n    this.logger.info('MaestroSwarmCoordinator initialized with native hive mind');\n  }\n  \n  /**\n   * Initialize the specs-driven hive mind swarm\n   */\n  async initialize(): Promise<string> {\n    try {\n      // Create specs-driven hive mind with native topology\n      const hiveMindConfig: HiveMindConfig = {\n        name: 'maestro-specs-driven-swarm',\n        topology: 'specs-driven',\n        queenMode: 'strategic',\n        maxAgents: 8,\n        consensusThreshold: 0.66,\n        memoryTTL: 86400000, // 24 hours\n        autoSpawn: true,  // Automatically spawn topology agents\n        enableConsensus: this.config.enableConsensusValidation,\n        enableMemory: true,\n        enableCommunication: true,\n        ...this.config.hiveMindConfig\n      };\n      \n      // Initialize native hive mind\n      this.hiveMind = new HiveMind(hiveMindConfig);\n      const swarmId = await this.hiveMind.initialize();\n      \n      // Initialize steering docs in swarm memory if enabled\n      if (this.config.enableSteeringIntegration) {\n        await this.initializeSteeringMemory();\n      }\n      \n      this.logger.info(`Maestro specs-driven swarm initialized: ${swarmId}`);\n      this.emit('initialized', { swarmId });\n      \n      return swarmId;\n      \n    } catch (error) {\n      this.logger.error(`Failed to initialize maestro swarm: ${error instanceof Error ? error.message : String(error)}`);\n      throw error;\n    }\n  }\n  \n  /**\n   * Create specification using native requirements_analyst agent\n   */\n  async createSpec(featureName: string, initialRequest: string): Promise<void> {\n    const featurePath = join(this.specsDirectory, featureName);\n    await mkdir(featurePath, { recursive: true });\n    \n    // Initialize workflow state\n    const workflowState: MaestroWorkflowState = {\n      featureName,\n      currentPhase: 'Requirements Clarification' as WorkflowPhase,\n      currentTaskIndex: 0,\n      status: 'running',\n      lastActivity: new Date(),\n      history: [{\n        phase: 'Requirements Clarification' as WorkflowPhase,\n        status: 'in-progress',\n        timestamp: new Date()\n      }]\n    };\n    \n    this.maestroState.set(featureName, workflowState);\n    \n    // Submit requirements analysis task to native swarm\n    const requirementsTask: TaskSubmitOptions = {\n      description: `Generate comprehensive requirements for feature: ${featureName}`,\n      priority: 'high',\n      strategy: 'sequential',\n      requiredCapabilities: ['requirements_analysis' as AgentCapability, 'user_story_creation' as AgentCapability, 'acceptance_criteria' as AgentCapability],\n      metadata: {\n        maestroFeature: featureName,\n        maestroPhase: 'Requirements Clarification',\n        initialRequest,\n        outputFile: join(featurePath, 'requirements.md')\n      }\n    };\n    \n    // Use native SwarmOrchestrator through HiveMind\n    const task = await this.hiveMind.submitTask(requirementsTask);\n    await this.waitForTaskCompletion(task.id, 120000); // 2 minutes\n    \n    this.logger.info(`Created specification for '${featureName}' using native swarm`);\n    this.eventBus.emit('maestro:spec_created', { featureName });\n  }\n  \n  /**\n   * Generate design using native design_architect agents with consensus\n   */\n  async generateDesign(featureName: string): Promise<void> {\n    const state = this.maestroState.get(featureName);\n    if (!state) {\n      throw new SystemError(`No workflow state found for '${featureName}'`);\n    }\n    \n    const featurePath = join(this.specsDirectory, featureName);\n    const requirementsPath = join(featurePath, 'requirements.md');\n    const requirementsContent = await readFile(requirementsPath, 'utf8');\n    \n    // Submit design generation task with consensus requirement\n    const designTask: TaskSubmitOptions = {\n      description: `Generate comprehensive technical design for ${featureName}`,\n      priority: 'high',\n      strategy: 'parallel',  // Multiple design_architect agents work in parallel\n      requiredCapabilities: ['system_design' as AgentCapability, 'architecture' as AgentCapability, 'specs_driven_design' as AgentCapability],\n      requireConsensus: this.config.enableConsensusValidation,\n      maxAgents: 2,  // Use both design_architect agents\n      metadata: {\n        maestroFeature: featureName,\n        maestroPhase: 'Research & Design',\n        requirements: requirementsContent,\n        outputFile: join(featurePath, 'design.md')\n      }\n    };\n    \n    // Native SwarmOrchestrator handles parallel execution and consensus\n    const task = await this.hiveMind.submitTask(designTask);\n    await this.waitForTaskCompletion(task.id, 300000); // 5 minutes\n    \n    // Update workflow state\n    state.currentPhase = 'Research & Design' as WorkflowPhase;\n    state.lastActivity = new Date();\n    state.history.push({\n      phase: 'Research & Design' as WorkflowPhase,\n      status: 'completed',\n      timestamp: new Date()\n    });\n    \n    this.logger.info(`Generated design for '${featureName}' using native swarm consensus`);\n    this.eventBus.emit('maestro:design_generated', { featureName });\n  }\n  \n  /**\n   * Generate tasks using native task_planner agent\n   */\n  async generateTasks(featureName: string): Promise<void> {\n    const state = this.maestroState.get(featureName);\n    if (!state) {\n      throw new SystemError(`No workflow state found for '${featureName}'`);\n    }\n    \n    const featurePath = join(this.specsDirectory, featureName);\n    const designPath = join(featurePath, 'design.md');\n    const designContent = await readFile(designPath, 'utf8');\n    \n    // Submit task planning to native task_planner agent\n    const taskPlanningTask: TaskSubmitOptions = {\n      description: `Generate implementation task breakdown for ${featureName}`,\n      priority: 'high',\n      strategy: 'sequential',\n      requiredCapabilities: ['task_management' as AgentCapability, 'workflow_orchestration' as AgentCapability],\n      metadata: {\n        maestroFeature: featureName,\n        maestroPhase: 'Implementation Planning',\n        designContent,\n        outputFile: join(featurePath, 'tasks.md')\n      }\n    };\n    \n    const task = await this.hiveMind.submitTask(taskPlanningTask);\n    await this.waitForTaskCompletion(task.id, 180000); // 3 minutes\n    \n    // Update workflow state\n    state.currentPhase = 'Implementation Planning' as WorkflowPhase;\n    state.lastActivity = new Date();\n    state.history.push({\n      phase: 'Implementation Planning' as WorkflowPhase,\n      status: 'completed',\n      timestamp: new Date()\n    });\n    \n    this.logger.info(`Generated tasks for '${featureName}' using native swarm planner`);\n    this.eventBus.emit('maestro:tasks_generated', { featureName });\n  }\n  \n  /**\n   * Implement task using native implementation_coder agents\n   */\n  async implementTask(featureName: string, taskId: number): Promise<void> {\n    const state = this.maestroState.get(featureName);\n    if (!state) {\n      throw new SystemError(`No workflow state found for '${featureName}'`);\n    }\n    \n    const featurePath = join(this.specsDirectory, featureName);\n    const tasksPath = join(featurePath, 'tasks.md');\n    const tasksContent = await readFile(tasksPath, 'utf8');\n    \n    // Parse task description\n    const taskLines = tasksContent.split('\\n').filter(line => line.startsWith('- [ ]') || line.startsWith('- [x]'));\n    if (taskId < 1 || taskId > taskLines.length) {\n      throw new SystemError(`Invalid task ID ${taskId} for feature '${featureName}'`);\n    }\n    \n    const taskDescription = taskLines[taskId - 1].substring(taskLines[taskId - 1].indexOf(']') + 2).trim();\n    \n    // Submit implementation task to native coders\n    const implementationTask: TaskSubmitOptions = {\n      description: `Implement task: ${taskDescription}`,\n      priority: 'high',\n      strategy: 'parallel',  // Multiple implementation_coder agents can work\n      requiredCapabilities: ['code_generation' as AgentCapability, 'implementation' as AgentCapability],\n      maxAgents: 2,\n      metadata: {\n        maestroFeature: featureName,\n        maestroPhase: 'Task Execution',\n        taskId,\n        taskDescription,\n        steeringContext: await this.getSteeringContext()\n      }\n    };\n    \n    const task = await this.hiveMind.submitTask(implementationTask);\n    await this.waitForTaskCompletion(task.id, 600000); // 10 minutes\n    \n    // Mark task as completed in tasks.md\n    const updatedTasksContent = tasksContent.replace(\n      taskLines[taskId - 1],\n      taskLines[taskId - 1].replace('- [ ]', '- [x]')\n    );\n    await writeFile(tasksPath, updatedTasksContent, 'utf8');\n    \n    // Update workflow state\n    state.currentPhase = 'Task Execution' as WorkflowPhase;\n    state.currentTaskIndex = taskId;\n    state.lastActivity = new Date();\n    \n    this.logger.info(`Implemented task ${taskId} for '${featureName}' using native swarm`);\n    this.eventBus.emit('maestro:task_implemented', { featureName, taskId, taskDescription });\n  }\n  \n  /**\n   * Approve workflow phase with optional consensus\n   */\n  async approvePhase(featureName: string): Promise<void> {\n    const state = this.maestroState.get(featureName);\n    if (!state) {\n      throw new SystemError(`No workflow state found for '${featureName}'`);\n    }\n    \n    // Use native consensus if enabled\n    if (this.config.enableConsensusValidation) {\n      const consensusProposal: ConsensusProposal = {\n        id: `maestro-phase-approval-${featureName}-${Date.now()}`,\n        swarmId: (this.hiveMind as any).id,\n        proposal: {\n          action: 'approve_phase',\n          featureName,\n          currentPhase: state.currentPhase,\n          details: `Approve completion of ${state.currentPhase} phase for ${featureName}`\n        },\n        requiredThreshold: 0.66,\n        deadline: new Date(Date.now() + 300000), // 5 minutes\n        taskId: `maestro-approval-${featureName}`,\n        metadata: {\n          type: 'phase_approval',\n          featureName,\n          phase: state.currentPhase\n        }\n      };\n      \n      // Submit for consensus validation\n      const consensusEngine = (this.hiveMind as any).consensus as ConsensusEngine;\n      const proposalId = await consensusEngine.createProposal(consensusProposal);\n      const consensusResult = await this.waitForConsensusResult(proposalId, 300000);\n      \n      if (!consensusResult.achieved) {\n        throw new SystemError(`Phase approval consensus failed: ${consensusResult.reason}`);\n      }\n    }\n    \n    // Progress to next phase\n    const phaseProgression: Record<string, string> = {\n      'Requirements Clarification': 'Research & Design',\n      'Research & Design': 'Implementation Planning',\n      'Implementation Planning': 'Task Execution',\n      'Task Execution': 'Completed'\n    };\n    \n    const nextPhase = phaseProgression[state.currentPhase];\n    if (nextPhase) {\n      state.currentPhase = nextPhase as WorkflowPhase;\n      state.lastActivity = new Date();\n      state.history.push({\n        phase: nextPhase as WorkflowPhase,\n        status: 'approved',\n        timestamp: new Date()\n      });\n    }\n    \n    this.logger.info(`Approved phase transition for '${featureName}': ${state.currentPhase} -> ${nextPhase}`);\n    this.eventBus.emit('maestro:phase_approved', { featureName, nextPhase });\n  }\n  \n  /**\n   * Get workflow state\n   */\n  getWorkflowState(featureName: string): MaestroWorkflowState | undefined {\n    return this.maestroState.get(featureName);\n  }\n  \n  /**\n   * Create steering document in native swarm memory\n   */\n  async createSteeringDocument(domain: string, content: string): Promise<void> {\n    if (!this.config.enableSteeringIntegration) {\n      throw new SystemError('Steering integration is disabled');\n    }\n    \n    // Store in native hive mind memory instead of files\n    await this.hiveMind.memory.store(`steering/${domain}`, {\n      content,\n      domain,\n      lastUpdated: new Date(),\n      maintainer: 'steering_documenter'\n    });\n    \n    // Notify all agents through native communication\n    await this.hiveMind.communication.broadcast({\n      type: 'steering_update',\n      domain,\n      content: content.substring(0, 200) + '...' // Summary for notification\n    });\n    \n    this.logger.info(`Created steering document for '${domain}' in swarm memory`);\n  }\n  \n  /**\n   * Get steering context from swarm memory\n   */\n  private async getSteeringContext(): Promise<string> {\n    if (!this.config.enableSteeringIntegration) {\n      return 'No steering context available.';\n    }\n    \n    try {\n      // Retrieve all steering documents from swarm memory\n      const steeringKeys = await this.hiveMind.memory.search('steering/*');\n      const steeringDocs = await Promise.all(\n        steeringKeys.map(key => this.hiveMind.memory.retrieve(key))\n      );\n      \n      return steeringDocs\n        .filter(doc => doc)\n        .map(doc => `## ${doc.domain}\\n${doc.content}`)\n        .join('\\n\\n---\\n\\n');\n        \n    } catch (error) {\n      this.logger.warn(`Failed to retrieve steering context: ${error instanceof Error ? error.message : String(error)}`);\n      return 'Steering context temporarily unavailable.';\n    }\n  }\n  \n  /**\n   * Initialize steering documents in swarm memory\n   */\n  private async initializeSteeringMemory(): Promise<void> {\n    // Initialize default steering documents in memory\n    const defaultSteering = {\n      'product': 'Focus on user value and clear requirements specification.',\n      'tech': 'Follow clean architecture patterns and maintainable code practices.',\n      'workflow': 'Use specs-driven development with clear phase progression.'\n    };\n    \n    for (const [domain, content] of Object.entries(defaultSteering)) {\n      await this.hiveMind.memory.store(`steering/${domain}`, {\n        content,\n        domain,\n        lastUpdated: new Date(),\n        maintainer: 'system'\n      });\n    }\n    \n    this.logger.info('Initialized default steering documents in swarm memory');\n  }\n  \n  /**\n   * Wait for task completion using native swarm tracking\n   */\n  private async waitForTaskCompletion(taskId: string, timeoutMs: number): Promise<any> {\n    return new Promise((resolve, reject) => {\n      const timeout = setTimeout(() => {\n        reject(new Error(`Task timeout: ${taskId}`));\n      }, timeoutMs);\n      \n      const checkInterval = setInterval(async () => {\n        try {\n          const task = await this.hiveMind.getTask(taskId);\n          \n          if (task.status === 'completed') {\n            clearTimeout(timeout);\n            clearInterval(checkInterval);\n            resolve(task.result ? JSON.parse(task.result) : {});\n          } else if (task.status === 'failed') {\n            clearTimeout(timeout);\n            clearInterval(checkInterval);\n            reject(new Error(`Task failed: ${task.error || 'Unknown error'}`));\n          }\n        } catch (error) {\n          clearTimeout(timeout);\n          clearInterval(checkInterval);\n          reject(error);\n        }\n      }, 2000);\n    });\n  }\n  \n  /**\n   * Wait for consensus result using native ConsensusEngine\n   */\n  private async waitForConsensusResult(proposalId: string, timeoutMs: number): Promise<any> {\n    return new Promise((resolve, reject) => {\n      const timeout = setTimeout(() => {\n        reject(new Error(`Consensus timeout for proposal ${proposalId}`));\n      }, timeoutMs);\n      \n      const checkInterval = setInterval(async () => {\n        try {\n          const consensusEngine = (this.hiveMind as any).consensus as ConsensusEngine;\n          const status = await consensusEngine.getProposalStatus(proposalId);\n          \n          if (status.status === 'achieved') {\n            clearTimeout(timeout);\n            clearInterval(checkInterval);\n            resolve({\n              achieved: true,\n              finalRatio: status.currentRatio,\n              reason: 'Consensus achieved'\n            });\n          } else if (status.status === 'failed') {\n            clearTimeout(timeout);\n            clearInterval(checkInterval);\n            resolve({\n              achieved: false,\n              finalRatio: status.currentRatio,\n              reason: 'Consensus failed'\n            });\n          }\n        } catch (error) {\n          clearTimeout(timeout);\n          clearInterval(checkInterval);\n          reject(error);\n        }\n      }, 1000);\n    });\n  }\n  \n  /**\n   * Setup event handlers\n   */\n  private setupEventHandlers(): void {\n    this.eventBus.on('maestro:spec_created', this.handleSpecCreated.bind(this));\n    this.eventBus.on('maestro:phase_approved', this.handlePhaseApproved.bind(this));\n    this.eventBus.on('maestro:task_implemented', this.handleTaskImplemented.bind(this));\n  }\n  \n  /**\n   * Event handlers\n   */\n  private async handleSpecCreated(data: any): Promise<void> {\n    this.logger.info(`Spec created via native swarm: ${JSON.stringify(data)}`);\n  }\n  \n  private async handlePhaseApproved(data: any): Promise<void> {\n    this.logger.info(`Phase approved via native consensus: ${JSON.stringify(data)}`);\n  }\n  \n  private async handleTaskImplemented(data: any): Promise<void> {\n    this.logger.info(`Task implemented via native swarm: ${JSON.stringify(data)}`);\n  }\n  \n  /**\n   * Shutdown coordinator and native swarm\n   */\n  async shutdown(): Promise<void> {\n    this.logger.info('Shutting down MaestroSwarmCoordinator');\n    \n    if (this.hiveMind) {\n      await this.hiveMind.shutdown();\n      this.logger.info('Native hive mind swarm shutdown complete');\n    }\n    \n    this.logger.info('MaestroSwarmCoordinator shutdown complete');\n  }\n}"],"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","ignoreList":[]}