b5aad16e881c10fdb4276f816e291a7f
/* istanbul ignore next */
function cov_dx6ttxvus() {
  var path = "/home/mhugo/code/claude-code-flow/src/maestro/maestro-swarm-coordinator.ts";
  var hash = "acdc7cb9379b405ba6d8760e0e75c14dfa81d8c9";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/home/mhugo/code/claude-code-flow/src/maestro/maestro-swarm-coordinator.ts",
    statementMap: {
      "0": {
        start: {
          line: 23,
          column: 19
        },
        end: {
          line: 23,
          column: 28
        }
      },
      "1": {
        start: {
          line: 27,
          column: 8
        },
        end: {
          line: 27,
          column: 16
        }
      },
      "2": {
        start: {
          line: 28,
          column: 8
        },
        end: {
          line: 28,
          column: 29
        }
      },
      "3": {
        start: {
          line: 29,
          column: 8
        },
        end: {
          line: 29,
          column: 33
        }
      },
      "4": {
        start: {
          line: 30,
          column: 8
        },
        end: {
          line: 30,
          column: 29
        }
      },
      "5": {
        start: {
          line: 31,
          column: 8
        },
        end: {
          line: 31,
          column: 121
        }
      },
      "6": {
        start: {
          line: 32,
          column: 8
        },
        end: {
          line: 32,
          column: 130
        }
      },
      "7": {
        start: {
          line: 33,
          column: 8
        },
        end: {
          line: 33,
          column: 34
        }
      },
      "8": {
        start: {
          line: 34,
          column: 8
        },
        end: {
          line: 34,
          column: 86
        }
      },
      "9": {
        start: {
          line: 40,
          column: 8
        },
        end: {
          line: 69,
          column: 9
        }
      },
      "10": {
        start: {
          line: 42,
          column: 35
        },
        end: {
          line: 54,
          column: 13
        }
      },
      "11": {
        start: {
          line: 56,
          column: 12
        },
        end: {
          line: 56,
          column: 57
        }
      },
      "12": {
        start: {
          line: 57,
          column: 28
        },
        end: {
          line: 57,
          column: 60
        }
      },
      "13": {
        start: {
          line: 59,
          column: 12
        },
        end: {
          line: 61,
          column: 13
        }
      },
      "14": {
        start: {
          line: 60,
          column: 16
        },
        end: {
          line: 60,
          column: 54
        }
      },
      "15": {
        start: {
          line: 62,
          column: 12
        },
        end: {
          line: 62,
          column: 83
        }
      },
      "16": {
        start: {
          line: 63,
          column: 12
        },
        end: {
          line: 63,
          column: 50
        }
      },
      "17": {
        start: {
          line: 64,
          column: 12
        },
        end: {
          line: 64,
          column: 27
        }
      },
      "18": {
        start: {
          line: 67,
          column: 12
        },
        end: {
          line: 67,
          column: 127
        }
      },
      "19": {
        start: {
          line: 68,
          column: 12
        },
        end: {
          line: 68,
          column: 24
        }
      },
      "20": {
        start: {
          line: 75,
          column: 28
        },
        end: {
          line: 75,
          column: 66
        }
      },
      "21": {
        start: {
          line: 76,
          column: 8
        },
        end: {
          line: 76,
          column: 54
        }
      },
      "22": {
        start: {
          line: 78,
          column: 30
        },
        end: {
          line: 89,
          column: 9
        }
      },
      "23": {
        start: {
          line: 90,
          column: 8
        },
        end: {
          line: 90,
          column: 58
        }
      },
      "24": {
        start: {
          line: 92,
          column: 33
        },
        end: {
          line: 103,
          column: 9
        }
      },
      "25": {
        start: {
          line: 105,
          column: 21
        },
        end: {
          line: 105,
          column: 69
        }
      },
      "26": {
        start: {
          line: 106,
          column: 8
        },
        end: {
          line: 106,
          column: 58
        }
      },
      "27": {
        start: {
          line: 107,
          column: 8
        },
        end: {
          line: 107,
          column: 90
        }
      },
      "28": {
        start: {
          line: 108,
          column: 8
        },
        end: {
          line: 108,
          column: 68
        }
      },
      "29": {
        start: {
          line: 114,
          column: 22
        },
        end: {
          line: 114,
          column: 56
        }
      },
      "30": {
        start: {
          line: 115,
          column: 8
        },
        end: {
          line: 117,
          column: 9
        }
      },
      "31": {
        start: {
          line: 116,
          column: 12
        },
        end: {
          line: 116,
          column: 82
        }
      },
      "32": {
        start: {
          line: 118,
          column: 28
        },
        end: {
          line: 118,
          column: 66
        }
      },
      "33": {
        start: {
          line: 119,
          column: 33
        },
        end: {
          line: 119,
          column: 69
        }
      },
      "34": {
        start: {
          line: 120,
          column: 36
        },
        end: {
          line: 120,
          column: 76
        }
      },
      "35": {
        start: {
          line: 122,
          column: 27
        },
        end: {
          line: 135,
          column: 9
        }
      },
      "36": {
        start: {
          line: 137,
          column: 21
        },
        end: {
          line: 137,
          column: 63
        }
      },
      "37": {
        start: {
          line: 138,
          column: 8
        },
        end: {
          line: 138,
          column: 58
        }
      },
      "38": {
        start: {
          line: 140,
          column: 8
        },
        end: {
          line: 140,
          column: 49
        }
      },
      "39": {
        start: {
          line: 141,
          column: 8
        },
        end: {
          line: 141,
          column: 40
        }
      },
      "40": {
        start: {
          line: 142,
          column: 8
        },
        end: {
          line: 146,
          column: 11
        }
      },
      "41": {
        start: {
          line: 147,
          column: 8
        },
        end: {
          line: 147,
          column: 95
        }
      },
      "42": {
        start: {
          line: 148,
          column: 8
        },
        end: {
          line: 148,
          column: 72
        }
      },
      "43": {
        start: {
          line: 154,
          column: 22
        },
        end: {
          line: 154,
          column: 56
        }
      },
      "44": {
        start: {
          line: 155,
          column: 8
        },
        end: {
          line: 157,
          column: 9
        }
      },
      "45": {
        start: {
          line: 156,
          column: 12
        },
        end: {
          line: 156,
          column: 82
        }
      },
      "46": {
        start: {
          line: 158,
          column: 28
        },
        end: {
          line: 158,
          column: 66
        }
      },
      "47": {
        start: {
          line: 159,
          column: 27
        },
        end: {
          line: 159,
          column: 57
        }
      },
      "48": {
        start: {
          line: 160,
          column: 30
        },
        end: {
          line: 160,
          column: 64
        }
      },
      "49": {
        start: {
          line: 162,
          column: 33
        },
        end: {
          line: 173,
          column: 9
        }
      },
      "50": {
        start: {
          line: 174,
          column: 21
        },
        end: {
          line: 174,
          column: 69
        }
      },
      "51": {
        start: {
          line: 175,
          column: 8
        },
        end: {
          line: 175,
          column: 58
        }
      },
      "52": {
        start: {
          line: 177,
          column: 8
        },
        end: {
          line: 177,
          column: 55
        }
      },
      "53": {
        start: {
          line: 178,
          column: 8
        },
        end: {
          line: 178,
          column: 40
        }
      },
      "54": {
        start: {
          line: 179,
          column: 8
        },
        end: {
          line: 183,
          column: 11
        }
      },
      "55": {
        start: {
          line: 184,
          column: 8
        },
        end: {
          line: 184,
          column: 92
        }
      },
      "56": {
        start: {
          line: 185,
          column: 8
        },
        end: {
          line: 185,
          column: 71
        }
      },
      "57": {
        start: {
          line: 191,
          column: 22
        },
        end: {
          line: 191,
          column: 56
        }
      },
      "58": {
        start: {
          line: 192,
          column: 8
        },
        end: {
          line: 194,
          column: 9
        }
      },
      "59": {
        start: {
          line: 193,
          column: 12
        },
        end: {
          line: 193,
          column: 82
        }
      },
      "60": {
        start: {
          line: 195,
          column: 28
        },
        end: {
          line: 195,
          column: 66
        }
      },
      "61": {
        start: {
          line: 196,
          column: 26
        },
        end: {
          line: 196,
          column: 55
        }
      },
      "62": {
        start: {
          line: 197,
          column: 29
        },
        end: {
          line: 197,
          column: 62
        }
      },
      "63": {
        start: {
          line: 199,
          column: 26
        },
        end: {
          line: 199,
          column: 119
        }
      },
      "64": {
        start: {
          line: 199,
          column: 66
        },
        end: {
          line: 199,
          column: 118
        }
      },
      "65": {
        start: {
          line: 200,
          column: 8
        },
        end: {
          line: 202,
          column: 9
        }
      },
      "66": {
        start: {
          line: 201,
          column: 12
        },
        end: {
          line: 201,
          column: 92
        }
      },
      "67": {
        start: {
          line: 203,
          column: 32
        },
        end: {
          line: 203,
          column: 110
        }
      },
      "68": {
        start: {
          line: 205,
          column: 35
        },
        end: {
          line: 218,
          column: 9
        }
      },
      "69": {
        start: {
          line: 219,
          column: 21
        },
        end: {
          line: 219,
          column: 71
        }
      },
      "70": {
        start: {
          line: 220,
          column: 8
        },
        end: {
          line: 220,
          column: 58
        }
      },
      "71": {
        start: {
          line: 222,
          column: 36
        },
        end: {
          line: 222,
          column: 128
        }
      },
      "72": {
        start: {
          line: 223,
          column: 8
        },
        end: {
          line: 223,
          column: 64
        }
      },
      "73": {
        start: {
          line: 225,
          column: 8
        },
        end: {
          line: 225,
          column: 46
        }
      },
      "74": {
        start: {
          line: 226,
          column: 8
        },
        end: {
          line: 226,
          column: 40
        }
      },
      "75": {
        start: {
          line: 227,
          column: 8
        },
        end: {
          line: 227,
          column: 40
        }
      },
      "76": {
        start: {
          line: 228,
          column: 8
        },
        end: {
          line: 228,
          column: 95
        }
      },
      "77": {
        start: {
          line: 229,
          column: 8
        },
        end: {
          line: 229,
          column: 97
        }
      },
      "78": {
        start: {
          line: 235,
          column: 22
        },
        end: {
          line: 235,
          column: 56
        }
      },
      "79": {
        start: {
          line: 236,
          column: 8
        },
        end: {
          line: 238,
          column: 9
        }
      },
      "80": {
        start: {
          line: 237,
          column: 12
        },
        end: {
          line: 237,
          column: 82
        }
      },
      "81": {
        start: {
          line: 240,
          column: 8
        },
        end: {
          line: 266,
          column: 9
        }
      },
      "82": {
        start: {
          line: 241,
          column: 38
        },
        end: {
          line: 258,
          column: 13
        }
      },
      "83": {
        start: {
          line: 260,
          column: 36
        },
        end: {
          line: 260,
          column: 59
        }
      },
      "84": {
        start: {
          line: 261,
          column: 31
        },
        end: {
          line: 261,
          column: 86
        }
      },
      "85": {
        start: {
          line: 262,
          column: 36
        },
        end: {
          line: 262,
          column: 89
        }
      },
      "86": {
        start: {
          line: 263,
          column: 12
        },
        end: {
          line: 265,
          column: 13
        }
      },
      "87": {
        start: {
          line: 264,
          column: 16
        },
        end: {
          line: 264,
          column: 100
        }
      },
      "88": {
        start: {
          line: 268,
          column: 33
        },
        end: {
          line: 273,
          column: 9
        }
      },
      "89": {
        start: {
          line: 274,
          column: 26
        },
        end: {
          line: 274,
          column: 62
        }
      },
      "90": {
        start: {
          line: 275,
          column: 8
        },
        end: {
          line: 283,
          column: 9
        }
      },
      "91": {
        start: {
          line: 276,
          column: 12
        },
        end: {
          line: 276,
          column: 43
        }
      },
      "92": {
        start: {
          line: 277,
          column: 12
        },
        end: {
          line: 277,
          column: 44
        }
      },
      "93": {
        start: {
          line: 278,
          column: 12
        },
        end: {
          line: 282,
          column: 15
        }
      },
      "94": {
        start: {
          line: 284,
          column: 8
        },
        end: {
          line: 284,
          column: 114
        }
      },
      "95": {
        start: {
          line: 285,
          column: 8
        },
        end: {
          line: 285,
          column: 81
        }
      },
      "96": {
        start: {
          line: 291,
          column: 8
        },
        end: {
          line: 291,
          column: 50
        }
      },
      "97": {
        start: {
          line: 297,
          column: 8
        },
        end: {
          line: 299,
          column: 9
        }
      },
      "98": {
        start: {
          line: 298,
          column: 12
        },
        end: {
          line: 298,
          column: 70
        }
      },
      "99": {
        start: {
          line: 301,
          column: 8
        },
        end: {
          line: 306,
          column: 11
        }
      },
      "100": {
        start: {
          line: 308,
          column: 8
        },
        end: {
          line: 312,
          column: 11
        }
      },
      "101": {
        start: {
          line: 313,
          column: 8
        },
        end: {
          line: 313,
          column: 86
        }
      },
      "102": {
        start: {
          line: 319,
          column: 8
        },
        end: {
          line: 321,
          column: 9
        }
      },
      "103": {
        start: {
          line: 320,
          column: 12
        },
        end: {
          line: 320,
          column: 52
        }
      },
      "104": {
        start: {
          line: 322,
          column: 8
        },
        end: {
          line: 334,
          column: 9
        }
      },
      "105": {
        start: {
          line: 324,
          column: 33
        },
        end: {
          line: 324,
          column: 80
        }
      },
      "106": {
        start: {
          line: 325,
          column: 33
        },
        end: {
          line: 325,
          column: 111
        }
      },
      "107": {
        start: {
          line: 325,
          column: 75
        },
        end: {
          line: 325,
          column: 109
        }
      },
      "108": {
        start: {
          line: 326,
          column: 12
        },
        end: {
          line: 329,
          column: 37
        }
      },
      "109": {
        start: {
          line: 327,
          column: 31
        },
        end: {
          line: 327,
          column: 34
        }
      },
      "110": {
        start: {
          line: 328,
          column: 28
        },
        end: {
          line: 328,
          column: 62
        }
      },
      "111": {
        start: {
          line: 332,
          column: 12
        },
        end: {
          line: 332,
          column: 127
        }
      },
      "112": {
        start: {
          line: 333,
          column: 12
        },
        end: {
          line: 333,
          column: 63
        }
      },
      "113": {
        start: {
          line: 341,
          column: 32
        },
        end: {
          line: 345,
          column: 9
        }
      },
      "114": {
        start: {
          line: 346,
          column: 8
        },
        end: {
          line: 353,
          column: 9
        }
      },
      "115": {
        start: {
          line: 347,
          column: 12
        },
        end: {
          line: 352,
          column: 15
        }
      },
      "116": {
        start: {
          line: 354,
          column: 8
        },
        end: {
          line: 354,
          column: 83
        }
      },
      "117": {
        start: {
          line: 360,
          column: 8
        },
        end: {
          line: 384,
          column: 11
        }
      },
      "118": {
        start: {
          line: 361,
          column: 28
        },
        end: {
          line: 363,
          column: 25
        }
      },
      "119": {
        start: {
          line: 362,
          column: 16
        },
        end: {
          line: 362,
          column: 61
        }
      },
      "120": {
        start: {
          line: 364,
          column: 34
        },
        end: {
          line: 383,
          column: 20
        }
      },
      "121": {
        start: {
          line: 365,
          column: 16
        },
        end: {
          line: 382,
          column: 17
        }
      },
      "122": {
        start: {
          line: 366,
          column: 33
        },
        end: {
          line: 366,
          column: 68
        }
      },
      "123": {
        start: {
          line: 367,
          column: 20
        },
        end: {
          line: 376,
          column: 21
        }
      },
      "124": {
        start: {
          line: 368,
          column: 24
        },
        end: {
          line: 368,
          column: 46
        }
      },
      "125": {
        start: {
          line: 369,
          column: 24
        },
        end: {
          line: 369,
          column: 53
        }
      },
      "126": {
        start: {
          line: 370,
          column: 24
        },
        end: {
          line: 370,
          column: 76
        }
      },
      "127": {
        start: {
          line: 372,
          column: 25
        },
        end: {
          line: 376,
          column: 21
        }
      },
      "128": {
        start: {
          line: 373,
          column: 24
        },
        end: {
          line: 373,
          column: 46
        }
      },
      "129": {
        start: {
          line: 374,
          column: 24
        },
        end: {
          line: 374,
          column: 53
        }
      },
      "130": {
        start: {
          line: 375,
          column: 24
        },
        end: {
          line: 375,
          column: 91
        }
      },
      "131": {
        start: {
          line: 379,
          column: 20
        },
        end: {
          line: 379,
          column: 42
        }
      },
      "132": {
        start: {
          line: 380,
          column: 20
        },
        end: {
          line: 380,
          column: 49
        }
      },
      "133": {
        start: {
          line: 381,
          column: 20
        },
        end: {
          line: 381,
          column: 34
        }
      },
      "134": {
        start: {
          line: 390,
          column: 8
        },
        end: {
          line: 423,
          column: 11
        }
      },
      "135": {
        start: {
          line: 391,
          column: 28
        },
        end: {
          line: 393,
          column: 25
        }
      },
      "136": {
        start: {
          line: 392,
          column: 16
        },
        end: {
          line: 392,
          column: 82
        }
      },
      "137": {
        start: {
          line: 394,
          column: 34
        },
        end: {
          line: 422,
          column: 20
        }
      },
      "138": {
        start: {
          line: 395,
          column: 16
        },
        end: {
          line: 421,
          column: 17
        }
      },
      "139": {
        start: {
          line: 396,
          column: 44
        },
        end: {
          line: 396,
          column: 67
        }
      },
      "140": {
        start: {
          line: 397,
          column: 35
        },
        end: {
          line: 397,
          column: 86
        }
      },
      "141": {
        start: {
          line: 398,
          column: 20
        },
        end: {
          line: 415,
          column: 21
        }
      },
      "142": {
        start: {
          line: 399,
          column: 24
        },
        end: {
          line: 399,
          column: 46
        }
      },
      "143": {
        start: {
          line: 400,
          column: 24
        },
        end: {
          line: 400,
          column: 53
        }
      },
      "144": {
        start: {
          line: 401,
          column: 24
        },
        end: {
          line: 405,
          column: 27
        }
      },
      "145": {
        start: {
          line: 407,
          column: 25
        },
        end: {
          line: 415,
          column: 21
        }
      },
      "146": {
        start: {
          line: 408,
          column: 24
        },
        end: {
          line: 408,
          column: 46
        }
      },
      "147": {
        start: {
          line: 409,
          column: 24
        },
        end: {
          line: 409,
          column: 53
        }
      },
      "148": {
        start: {
          line: 410,
          column: 24
        },
        end: {
          line: 414,
          column: 27
        }
      },
      "149": {
        start: {
          line: 418,
          column: 20
        },
        end: {
          line: 418,
          column: 42
        }
      },
      "150": {
        start: {
          line: 419,
          column: 20
        },
        end: {
          line: 419,
          column: 49
        }
      },
      "151": {
        start: {
          line: 420,
          column: 20
        },
        end: {
          line: 420,
          column: 34
        }
      },
      "152": {
        start: {
          line: 429,
          column: 8
        },
        end: {
          line: 429,
          column: 84
        }
      },
      "153": {
        start: {
          line: 430,
          column: 8
        },
        end: {
          line: 430,
          column: 88
        }
      },
      "154": {
        start: {
          line: 431,
          column: 8
        },
        end: {
          line: 431,
          column: 92
        }
      },
      "155": {
        start: {
          line: 437,
          column: 8
        },
        end: {
          line: 437,
          column: 83
        }
      },
      "156": {
        start: {
          line: 440,
          column: 8
        },
        end: {
          line: 440,
          column: 89
        }
      },
      "157": {
        start: {
          line: 443,
          column: 8
        },
        end: {
          line: 443,
          column: 87
        }
      },
      "158": {
        start: {
          line: 449,
          column: 8
        },
        end: {
          line: 449,
          column: 66
        }
      },
      "159": {
        start: {
          line: 450,
          column: 8
        },
        end: {
          line: 453,
          column: 9
        }
      },
      "160": {
        start: {
          line: 451,
          column: 12
        },
        end: {
          line: 451,
          column: 43
        }
      },
      "161": {
        start: {
          line: 452,
          column: 12
        },
        end: {
          line: 452,
          column: 73
        }
      },
      "162": {
        start: {
          line: 454,
          column: 8
        },
        end: {
          line: 454,
          column: 70
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 26,
            column: 4
          },
          end: {
            line: 26,
            column: 5
          }
        },
        loc: {
          start: {
            line: 26,
            column: 42
          },
          end: {
            line: 35,
            column: 5
          }
        },
        line: 26
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 39,
            column: 4
          },
          end: {
            line: 39,
            column: 5
          }
        },
        loc: {
          start: {
            line: 39,
            column: 23
          },
          end: {
            line: 70,
            column: 5
          }
        },
        line: 39
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 74,
            column: 4
          },
          end: {
            line: 74,
            column: 5
          }
        },
        loc: {
          start: {
            line: 74,
            column: 50
          },
          end: {
            line: 109,
            column: 5
          }
        },
        line: 74
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 113,
            column: 4
          },
          end: {
            line: 113,
            column: 5
          }
        },
        loc: {
          start: {
            line: 113,
            column: 38
          },
          end: {
            line: 149,
            column: 5
          }
        },
        line: 113
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 153,
            column: 4
          },
          end: {
            line: 153,
            column: 5
          }
        },
        loc: {
          start: {
            line: 153,
            column: 37
          },
          end: {
            line: 186,
            column: 5
          }
        },
        line: 153
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 190,
            column: 4
          },
          end: {
            line: 190,
            column: 5
          }
        },
        loc: {
          start: {
            line: 190,
            column: 45
          },
          end: {
            line: 230,
            column: 5
          }
        },
        line: 190
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 199,
            column: 58
          },
          end: {
            line: 199,
            column: 59
          }
        },
        loc: {
          start: {
            line: 199,
            column: 66
          },
          end: {
            line: 199,
            column: 118
          }
        },
        line: 199
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 234,
            column: 4
          },
          end: {
            line: 234,
            column: 5
          }
        },
        loc: {
          start: {
            line: 234,
            column: 36
          },
          end: {
            line: 286,
            column: 5
          }
        },
        line: 234
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 290,
            column: 4
          },
          end: {
            line: 290,
            column: 5
          }
        },
        loc: {
          start: {
            line: 290,
            column: 34
          },
          end: {
            line: 292,
            column: 5
          }
        },
        line: 290
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 296,
            column: 4
          },
          end: {
            line: 296,
            column: 5
          }
        },
        loc: {
          start: {
            line: 296,
            column: 50
          },
          end: {
            line: 314,
            column: 5
          }
        },
        line: 296
      },
      "10": {
        name: "(anonymous_10)",
        decl: {
          start: {
            line: 318,
            column: 4
          },
          end: {
            line: 318,
            column: 5
          }
        },
        loc: {
          start: {
            line: 318,
            column: 31
          },
          end: {
            line: 335,
            column: 5
          }
        },
        line: 318
      },
      "11": {
        name: "(anonymous_11)",
        decl: {
          start: {
            line: 325,
            column: 68
          },
          end: {
            line: 325,
            column: 69
          }
        },
        loc: {
          start: {
            line: 325,
            column: 75
          },
          end: {
            line: 325,
            column: 109
          }
        },
        line: 325
      },
      "12": {
        name: "(anonymous_12)",
        decl: {
          start: {
            line: 327,
            column: 24
          },
          end: {
            line: 327,
            column: 25
          }
        },
        loc: {
          start: {
            line: 327,
            column: 31
          },
          end: {
            line: 327,
            column: 34
          }
        },
        line: 327
      },
      "13": {
        name: "(anonymous_13)",
        decl: {
          start: {
            line: 328,
            column: 21
          },
          end: {
            line: 328,
            column: 22
          }
        },
        loc: {
          start: {
            line: 328,
            column: 28
          },
          end: {
            line: 328,
            column: 62
          }
        },
        line: 328
      },
      "14": {
        name: "(anonymous_14)",
        decl: {
          start: {
            line: 339,
            column: 4
          },
          end: {
            line: 339,
            column: 5
          }
        },
        loc: {
          start: {
            line: 339,
            column: 37
          },
          end: {
            line: 355,
            column: 5
          }
        },
        line: 339
      },
      "15": {
        name: "(anonymous_15)",
        decl: {
          start: {
            line: 359,
            column: 4
          },
          end: {
            line: 359,
            column: 5
          }
        },
        loc: {
          start: {
            line: 359,
            column: 51
          },
          end: {
            line: 385,
            column: 5
          }
        },
        line: 359
      },
      "16": {
        name: "(anonymous_16)",
        decl: {
          start: {
            line: 360,
            column: 27
          },
          end: {
            line: 360,
            column: 28
          }
        },
        loc: {
          start: {
            line: 360,
            column: 48
          },
          end: {
            line: 384,
            column: 9
          }
        },
        line: 360
      },
      "17": {
        name: "(anonymous_17)",
        decl: {
          start: {
            line: 361,
            column: 39
          },
          end: {
            line: 361,
            column: 40
          }
        },
        loc: {
          start: {
            line: 361,
            column: 45
          },
          end: {
            line: 363,
            column: 13
          }
        },
        line: 361
      },
      "18": {
        name: "(anonymous_18)",
        decl: {
          start: {
            line: 364,
            column: 46
          },
          end: {
            line: 364,
            column: 47
          }
        },
        loc: {
          start: {
            line: 364,
            column: 58
          },
          end: {
            line: 383,
            column: 13
          }
        },
        line: 364
      },
      "19": {
        name: "(anonymous_19)",
        decl: {
          start: {
            line: 389,
            column: 4
          },
          end: {
            line: 389,
            column: 5
          }
        },
        loc: {
          start: {
            line: 389,
            column: 56
          },
          end: {
            line: 424,
            column: 5
          }
        },
        line: 389
      },
      "20": {
        name: "(anonymous_20)",
        decl: {
          start: {
            line: 390,
            column: 27
          },
          end: {
            line: 390,
            column: 28
          }
        },
        loc: {
          start: {
            line: 390,
            column: 48
          },
          end: {
            line: 423,
            column: 9
          }
        },
        line: 390
      },
      "21": {
        name: "(anonymous_21)",
        decl: {
          start: {
            line: 391,
            column: 39
          },
          end: {
            line: 391,
            column: 40
          }
        },
        loc: {
          start: {
            line: 391,
            column: 45
          },
          end: {
            line: 393,
            column: 13
          }
        },
        line: 391
      },
      "22": {
        name: "(anonymous_22)",
        decl: {
          start: {
            line: 394,
            column: 46
          },
          end: {
            line: 394,
            column: 47
          }
        },
        loc: {
          start: {
            line: 394,
            column: 58
          },
          end: {
            line: 422,
            column: 13
          }
        },
        line: 394
      },
      "23": {
        name: "(anonymous_23)",
        decl: {
          start: {
            line: 428,
            column: 4
          },
          end: {
            line: 428,
            column: 5
          }
        },
        loc: {
          start: {
            line: 428,
            column: 25
          },
          end: {
            line: 432,
            column: 5
          }
        },
        line: 428
      },
      "24": {
        name: "(anonymous_24)",
        decl: {
          start: {
            line: 436,
            column: 4
          },
          end: {
            line: 436,
            column: 5
          }
        },
        loc: {
          start: {
            line: 436,
            column: 34
          },
          end: {
            line: 438,
            column: 5
          }
        },
        line: 436
      },
      "25": {
        name: "(anonymous_25)",
        decl: {
          start: {
            line: 439,
            column: 4
          },
          end: {
            line: 439,
            column: 5
          }
        },
        loc: {
          start: {
            line: 439,
            column: 36
          },
          end: {
            line: 441,
            column: 5
          }
        },
        line: 439
      },
      "26": {
        name: "(anonymous_26)",
        decl: {
          start: {
            line: 442,
            column: 4
          },
          end: {
            line: 442,
            column: 5
          }
        },
        loc: {
          start: {
            line: 442,
            column: 38
          },
          end: {
            line: 444,
            column: 5
          }
        },
        line: 442
      },
      "27": {
        name: "(anonymous_27)",
        decl: {
          start: {
            line: 448,
            column: 4
          },
          end: {
            line: 448,
            column: 5
          }
        },
        loc: {
          start: {
            line: 448,
            column: 21
          },
          end: {
            line: 455,
            column: 5
          }
        },
        line: 448
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 31,
            column: 30
          },
          end: {
            line: 31,
            column: 120
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 31,
            column: 30
          },
          end: {
            line: 31,
            column: 51
          }
        }, {
          start: {
            line: 31,
            column: 55
          },
          end: {
            line: 31,
            column: 120
          }
        }],
        line: 31
      },
      "1": {
        loc: {
          start: {
            line: 32,
            column: 33
          },
          end: {
            line: 32,
            column: 129
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 32,
            column: 33
          },
          end: {
            line: 32,
            column: 57
          }
        }, {
          start: {
            line: 32,
            column: 61
          },
          end: {
            line: 32,
            column: 129
          }
        }],
        line: 32
      },
      "2": {
        loc: {
          start: {
            line: 59,
            column: 12
          },
          end: {
            line: 61,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 59,
            column: 12
          },
          end: {
            line: 61,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 59
      },
      "3": {
        loc: {
          start: {
            line: 67,
            column: 69
          },
          end: {
            line: 67,
            column: 123
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 67,
            column: 94
          },
          end: {
            line: 67,
            column: 107
          }
        }, {
          start: {
            line: 67,
            column: 110
          },
          end: {
            line: 67,
            column: 123
          }
        }],
        line: 67
      },
      "4": {
        loc: {
          start: {
            line: 115,
            column: 8
          },
          end: {
            line: 117,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 115,
            column: 8
          },
          end: {
            line: 117,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 115
      },
      "5": {
        loc: {
          start: {
            line: 155,
            column: 8
          },
          end: {
            line: 157,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 155,
            column: 8
          },
          end: {
            line: 157,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 155
      },
      "6": {
        loc: {
          start: {
            line: 192,
            column: 8
          },
          end: {
            line: 194,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 192,
            column: 8
          },
          end: {
            line: 194,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 192
      },
      "7": {
        loc: {
          start: {
            line: 199,
            column: 66
          },
          end: {
            line: 199,
            column: 118
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 199,
            column: 66
          },
          end: {
            line: 199,
            column: 90
          }
        }, {
          start: {
            line: 199,
            column: 94
          },
          end: {
            line: 199,
            column: 118
          }
        }],
        line: 199
      },
      "8": {
        loc: {
          start: {
            line: 200,
            column: 8
          },
          end: {
            line: 202,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 200,
            column: 8
          },
          end: {
            line: 202,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 200
      },
      "9": {
        loc: {
          start: {
            line: 200,
            column: 12
          },
          end: {
            line: 200,
            column: 51
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 200,
            column: 12
          },
          end: {
            line: 200,
            column: 22
          }
        }, {
          start: {
            line: 200,
            column: 26
          },
          end: {
            line: 200,
            column: 51
          }
        }],
        line: 200
      },
      "10": {
        loc: {
          start: {
            line: 236,
            column: 8
          },
          end: {
            line: 238,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 236,
            column: 8
          },
          end: {
            line: 238,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 236
      },
      "11": {
        loc: {
          start: {
            line: 240,
            column: 8
          },
          end: {
            line: 266,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 240,
            column: 8
          },
          end: {
            line: 266,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 240
      },
      "12": {
        loc: {
          start: {
            line: 263,
            column: 12
          },
          end: {
            line: 265,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 263,
            column: 12
          },
          end: {
            line: 265,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 263
      },
      "13": {
        loc: {
          start: {
            line: 275,
            column: 8
          },
          end: {
            line: 283,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 275,
            column: 8
          },
          end: {
            line: 283,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 275
      },
      "14": {
        loc: {
          start: {
            line: 297,
            column: 8
          },
          end: {
            line: 299,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 297,
            column: 8
          },
          end: {
            line: 299,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 297
      },
      "15": {
        loc: {
          start: {
            line: 319,
            column: 8
          },
          end: {
            line: 321,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 319,
            column: 8
          },
          end: {
            line: 321,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 319
      },
      "16": {
        loc: {
          start: {
            line: 332,
            column: 69
          },
          end: {
            line: 332,
            column: 123
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 332,
            column: 94
          },
          end: {
            line: 332,
            column: 107
          }
        }, {
          start: {
            line: 332,
            column: 110
          },
          end: {
            line: 332,
            column: 123
          }
        }],
        line: 332
      },
      "17": {
        loc: {
          start: {
            line: 367,
            column: 20
          },
          end: {
            line: 376,
            column: 21
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 367,
            column: 20
          },
          end: {
            line: 376,
            column: 21
          }
        }, {
          start: {
            line: 372,
            column: 25
          },
          end: {
            line: 376,
            column: 21
          }
        }],
        line: 367
      },
      "18": {
        loc: {
          start: {
            line: 370,
            column: 32
          },
          end: {
            line: 370,
            column: 74
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 370,
            column: 46
          },
          end: {
            line: 370,
            column: 69
          }
        }, {
          start: {
            line: 370,
            column: 72
          },
          end: {
            line: 370,
            column: 74
          }
        }],
        line: 370
      },
      "19": {
        loc: {
          start: {
            line: 372,
            column: 25
          },
          end: {
            line: 376,
            column: 21
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 372,
            column: 25
          },
          end: {
            line: 376,
            column: 21
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 372
      },
      "20": {
        loc: {
          start: {
            line: 375,
            column: 57
          },
          end: {
            line: 375,
            column: 86
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 375,
            column: 57
          },
          end: {
            line: 375,
            column: 67
          }
        }, {
          start: {
            line: 375,
            column: 71
          },
          end: {
            line: 375,
            column: 86
          }
        }],
        line: 375
      },
      "21": {
        loc: {
          start: {
            line: 398,
            column: 20
          },
          end: {
            line: 415,
            column: 21
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 398,
            column: 20
          },
          end: {
            line: 415,
            column: 21
          }
        }, {
          start: {
            line: 407,
            column: 25
          },
          end: {
            line: 415,
            column: 21
          }
        }],
        line: 398
      },
      "22": {
        loc: {
          start: {
            line: 407,
            column: 25
          },
          end: {
            line: 415,
            column: 21
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 407,
            column: 25
          },
          end: {
            line: 415,
            column: 21
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 407
      },
      "23": {
        loc: {
          start: {
            line: 450,
            column: 8
          },
          end: {
            line: 453,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 450,
            column: 8
          },
          end: {
            line: 453,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 450
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0,
      "74": 0,
      "75": 0,
      "76": 0,
      "77": 0,
      "78": 0,
      "79": 0,
      "80": 0,
      "81": 0,
      "82": 0,
      "83": 0,
      "84": 0,
      "85": 0,
      "86": 0,
      "87": 0,
      "88": 0,
      "89": 0,
      "90": 0,
      "91": 0,
      "92": 0,
      "93": 0,
      "94": 0,
      "95": 0,
      "96": 0,
      "97": 0,
      "98": 0,
      "99": 0,
      "100": 0,
      "101": 0,
      "102": 0,
      "103": 0,
      "104": 0,
      "105": 0,
      "106": 0,
      "107": 0,
      "108": 0,
      "109": 0,
      "110": 0,
      "111": 0,
      "112": 0,
      "113": 0,
      "114": 0,
      "115": 0,
      "116": 0,
      "117": 0,
      "118": 0,
      "119": 0,
      "120": 0,
      "121": 0,
      "122": 0,
      "123": 0,
      "124": 0,
      "125": 0,
      "126": 0,
      "127": 0,
      "128": 0,
      "129": 0,
      "130": 0,
      "131": 0,
      "132": 0,
      "133": 0,
      "134": 0,
      "135": 0,
      "136": 0,
      "137": 0,
      "138": 0,
      "139": 0,
      "140": 0,
      "141": 0,
      "142": 0,
      "143": 0,
      "144": 0,
      "145": 0,
      "146": 0,
      "147": 0,
      "148": 0,
      "149": 0,
      "150": 0,
      "151": 0,
      "152": 0,
      "153": 0,
      "154": 0,
      "155": 0,
      "156": 0,
      "157": 0,
      "158": 0,
      "159": 0,
      "160": 0,
      "161": 0,
      "162": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0, 0],
      "10": [0, 0],
      "11": [0, 0],
      "12": [0, 0],
      "13": [0, 0],
      "14": [0, 0],
      "15": [0, 0],
      "16": [0, 0],
      "17": [0, 0],
      "18": [0, 0],
      "19": [0, 0],
      "20": [0, 0],
      "21": [0, 0],
      "22": [0, 0],
      "23": [0, 0]
    },
    inputSourceMap: {
      file: "/home/mhugo/code/claude-code-flow/src/maestro/maestro-swarm-coordinator.ts",
      mappings: "AAAA;;;;;;GAMG;AAEH,OAAO,EAAE,YAAY,EAAE,MAAM,QAAQ,CAAC;AACtC,OAAO,EAAE,IAAI,EAAE,MAAM,MAAM,CAAC;AAC5B,OAAO,EAAE,QAAQ,EAAE,SAAS,EAAE,KAAK,EAAE,MAAM,aAAa,CAAC;AAEzD,8BAA8B;AAC9B,OAAO,EAAE,QAAQ,EAAE,MAAM,+BAA+B,CAAC;AAezD,OAAO,EAAE,WAAW,EAAE,MAAM,oBAAoB,CAAC;AAuBjD;;;GAGG;AACH,MAAM,OAAO,uBAAwB,SAAQ,YAAY;IAO7C;IACA;IACA;IARF,QAAQ,CAAW;IACnB,YAAY,GAAsC,IAAI,GAAG,EAAE,CAAC;IAC5D,cAAc,CAAS;IACvB,iBAAiB,CAAS;IAElC,YACU,MAA0B,EAC1B,QAAmB,EACnB,MAAe;QAEvB,KAAK,EAAE,CAAC;QAJA,WAAM,GAAN,MAAM,CAAoB;QAC1B,aAAQ,GAAR,QAAQ,CAAW;QACnB,WAAM,GAAN,MAAM,CAAS;QAIvB,IAAI,CAAC,cAAc,GAAG,MAAM,CAAC,cAAc,IAAI,IAAI,CAAC,OAAO,CAAC,GAAG,EAAE,EAAE,SAAS,EAAE,aAAa,EAAE,SAAS,EAAE,OAAO,CAAC,CAAC;QACjH,IAAI,CAAC,iBAAiB,GAAG,MAAM,CAAC,iBAAiB,IAAI,IAAI,CAAC,OAAO,CAAC,GAAG,EAAE,EAAE,SAAS,EAAE,aAAa,EAAE,SAAS,EAAE,UAAU,CAAC,CAAC;QAE1H,IAAI,CAAC,kBAAkB,EAAE,CAAC;QAC1B,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,2DAA2D,CAAC,CAAC;IAChF,CAAC;IAED;;OAEG;IACH,KAAK,CAAC,UAAU;QACd,IAAI,CAAC;YACH,qDAAqD;YACrD,MAAM,cAAc,GAAmB;gBACrC,IAAI,EAAE,4BAA4B;gBAClC,QAAQ,EAAE,cAAc;gBACxB,SAAS,EAAE,WAAW;gBACtB,SAAS,EAAE,CAAC;gBACZ,kBAAkB,EAAE,IAAI;gBACxB,SAAS,EAAE,QAAQ,EAAE,WAAW;gBAChC,SAAS,EAAE,IAAI,EAAG,sCAAsC;gBACxD,eAAe,EAAE,IAAI,CAAC,MAAM,CAAC,yBAAyB;gBACtD,YAAY,EAAE,IAAI;gBAClB,mBAAmB,EAAE,IAAI;gBACzB,GAAG,IAAI,CAAC,MAAM,CAAC,cAAc;aAC9B,CAAC;YAEF,8BAA8B;YAC9B,IAAI,CAAC,QAAQ,GAAG,IAAI,QAAQ,CAAC,cAAc,CAAC,CAAC;YAC7C,MAAM,OAAO,GAAG,MAAM,IAAI,CAAC,QAAQ,CAAC,UAAU,EAAE,CAAC;YAEjD,sDAAsD;YACtD,IAAI,IAAI,CAAC,MAAM,CAAC,yBAAyB,EAAE,CAAC;gBAC1C,MAAM,IAAI,CAAC,wBAAwB,EAAE,CAAC;YACxC,CAAC;YAED,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,2CAA2C,OAAO,EAAE,CAAC,CAAC;YACvE,IAAI,CAAC,IAAI,CAAC,aAAa,EAAE,EAAE,OAAO,EAAE,CAAC,CAAC;YAEtC,OAAO,OAAO,CAAC;QAEjB,CAAC;QAAC,OAAO,KAAK,EAAE,CAAC;YACf,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,uCAAuC,KAAK,YAAY,KAAK,CAAC,CAAC,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,CAAC,MAAM,CAAC,KAAK,CAAC,EAAE,CAAC,CAAC;YACnH,MAAM,KAAK,CAAC;QACd,CAAC;IACH,CAAC;IAED;;OAEG;IACH,KAAK,CAAC,UAAU,CAAC,WAAmB,EAAE,cAAsB;QAC1D,MAAM,WAAW,GAAG,IAAI,CAAC,IAAI,CAAC,cAAc,EAAE,WAAW,CAAC,CAAC;QAC3D,MAAM,KAAK,CAAC,WAAW,EAAE,EAAE,SAAS,EAAE,IAAI,EAAE,CAAC,CAAC;QAE9C,4BAA4B;QAC5B,MAAM,aAAa,GAAyB;YAC1C,WAAW;YACX,YAAY,EAAE,4BAA6C;YAC3D,gBAAgB,EAAE,CAAC;YACnB,MAAM,EAAE,SAAS;YACjB,YAAY,EAAE,IAAI,IAAI,EAAE;YACxB,OAAO,EAAE,CAAC;oBACR,KAAK,EAAE,4BAA6C;oBACpD,MAAM,EAAE,aAAa;oBACrB,SAAS,EAAE,IAAI,IAAI,EAAE;iBACtB,CAAC;SACH,CAAC;QAEF,IAAI,CAAC,YAAY,CAAC,GAAG,CAAC,WAAW,EAAE,aAAa,CAAC,CAAC;QAElD,oDAAoD;QACpD,MAAM,gBAAgB,GAAsB;YAC1C,WAAW,EAAE,oDAAoD,WAAW,EAAE;YAC9E,QAAQ,EAAE,MAAM;YAChB,QAAQ,EAAE,YAAY;YACtB,oBAAoB,EAAE,CAAC,uBAA0C,EAAE,qBAAwC,EAAE,qBAAwC,CAAC;YACtJ,QAAQ,EAAE;gBACR,cAAc,EAAE,WAAW;gBAC3B,YAAY,EAAE,4BAA4B;gBAC1C,cAAc;gBACd,UAAU,EAAE,IAAI,CAAC,WAAW,EAAE,iBAAiB,CAAC;aACjD;SACF,CAAC;QAEF,gDAAgD;QAChD,MAAM,IAAI,GAAG,MAAM,IAAI,CAAC,QAAQ,CAAC,UAAU,CAAC,gBAAgB,CAAC,CAAC;QAC9D,MAAM,IAAI,CAAC,qBAAqB,CAAC,IAAI,CAAC,EAAE,EAAE,MAAM,CAAC,CAAC,CAAC,YAAY;QAE/D,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,8BAA8B,WAAW,sBAAsB,CAAC,CAAC;QAClF,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,sBAAsB,EAAE,EAAE,WAAW,EAAE,CAAC,CAAC;IAC9D,CAAC;IAED;;OAEG;IACH,KAAK,CAAC,cAAc,CAAC,WAAmB;QACtC,MAAM,KAAK,GAAG,IAAI,CAAC,YAAY,CAAC,GAAG,CAAC,WAAW,CAAC,CAAC;QACjD,IAAI,CAAC,KAAK,EAAE,CAAC;YACX,MAAM,IAAI,WAAW,CAAC,gCAAgC,WAAW,GAAG,CAAC,CAAC;QACxE,CAAC;QAED,MAAM,WAAW,GAAG,IAAI,CAAC,IAAI,CAAC,cAAc,EAAE,WAAW,CAAC,CAAC;QAC3D,MAAM,gBAAgB,GAAG,IAAI,CAAC,WAAW,EAAE,iBAAiB,CAAC,CAAC;QAC9D,MAAM,mBAAmB,GAAG,MAAM,QAAQ,CAAC,gBAAgB,EAAE,MAAM,CAAC,CAAC;QAErE,2DAA2D;QAC3D,MAAM,UAAU,GAAsB;YACpC,WAAW,EAAE,+CAA+C,WAAW,EAAE;YACzE,QAAQ,EAAE,MAAM;YAChB,QAAQ,EAAE,UAAU,EAAG,oDAAoD;YAC3E,oBAAoB,EAAE,CAAC,eAAkC,EAAE,cAAiC,EAAE,qBAAwC,CAAC;YACvI,gBAAgB,EAAE,IAAI,CAAC,MAAM,CAAC,yBAAyB;YACvD,SAAS,EAAE,CAAC,EAAG,mCAAmC;YAClD,QAAQ,EAAE;gBACR,cAAc,EAAE,WAAW;gBAC3B,YAAY,EAAE,mBAAmB;gBACjC,YAAY,EAAE,mBAAmB;gBACjC,UAAU,EAAE,IAAI,CAAC,WAAW,EAAE,WAAW,CAAC;aAC3C;SACF,CAAC;QAEF,oEAAoE;QACpE,MAAM,IAAI,GAAG,MAAM,IAAI,CAAC,QAAQ,CAAC,UAAU,CAAC,UAAU,CAAC,CAAC;QACxD,MAAM,IAAI,CAAC,qBAAqB,CAAC,IAAI,CAAC,EAAE,EAAE,MAAM,CAAC,CAAC,CAAC,YAAY;QAE/D,wBAAwB;QACxB,KAAK,CAAC,YAAY,GAAG,mBAAoC,CAAC;QAC1D,KAAK,CAAC,YAAY,GAAG,IAAI,IAAI,EAAE,CAAC;QAChC,KAAK,CAAC,OAAO,CAAC,IAAI,CAAC;YACjB,KAAK,EAAE,mBAAoC;YAC3C,MAAM,EAAE,WAAW;YACnB,SAAS,EAAE,IAAI,IAAI,EAAE;SACtB,CAAC,CAAC;QAEH,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,yBAAyB,WAAW,gCAAgC,CAAC,CAAC;QACvF,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,0BAA0B,EAAE,EAAE,WAAW,EAAE,CAAC,CAAC;IAClE,CAAC;IAED;;OAEG;IACH,KAAK,CAAC,aAAa,CAAC,WAAmB;QACrC,MAAM,KAAK,GAAG,IAAI,CAAC,YAAY,CAAC,GAAG,CAAC,WAAW,CAAC,CAAC;QACjD,IAAI,CAAC,KAAK,EAAE,CAAC;YACX,MAAM,IAAI,WAAW,CAAC,gCAAgC,WAAW,GAAG,CAAC,CAAC;QACxE,CAAC;QAED,MAAM,WAAW,GAAG,IAAI,CAAC,IAAI,CAAC,cAAc,EAAE,WAAW,CAAC,CAAC;QAC3D,MAAM,UAAU,GAAG,IAAI,CAAC,WAAW,EAAE,WAAW,CAAC,CAAC;QAClD,MAAM,aAAa,GAAG,MAAM,QAAQ,CAAC,UAAU,EAAE,MAAM,CAAC,CAAC;QAEzD,oDAAoD;QACpD,MAAM,gBAAgB,GAAsB;YAC1C,WAAW,EAAE,8CAA8C,WAAW,EAAE;YACxE,QAAQ,EAAE,MAAM;YAChB,QAAQ,EAAE,YAAY;YACtB,oBAAoB,EAAE,CAAC,iBAAoC,EAAE,wBAA2C,CAAC;YACzG,QAAQ,EAAE;gBACR,cAAc,EAAE,WAAW;gBAC3B,YAAY,EAAE,yBAAyB;gBACvC,aAAa;gBACb,UAAU,EAAE,IAAI,CAAC,WAAW,EAAE,UAAU,CAAC;aAC1C;SACF,CAAC;QAEF,MAAM,IAAI,GAAG,MAAM,IAAI,CAAC,QAAQ,CAAC,UAAU,CAAC,gBAAgB,CAAC,CAAC;QAC9D,MAAM,IAAI,CAAC,qBAAqB,CAAC,IAAI,CAAC,EAAE,EAAE,MAAM,CAAC,CAAC,CAAC,YAAY;QAE/D,wBAAwB;QACxB,KAAK,CAAC,YAAY,GAAG,yBAA0C,CAAC;QAChE,KAAK,CAAC,YAAY,GAAG,IAAI,IAAI,EAAE,CAAC;QAChC,KAAK,CAAC,OAAO,CAAC,IAAI,CAAC;YACjB,KAAK,EAAE,yBAA0C;YACjD,MAAM,EAAE,WAAW;YACnB,SAAS,EAAE,IAAI,IAAI,EAAE;SACtB,CAAC,CAAC;QAEH,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,wBAAwB,WAAW,8BAA8B,CAAC,CAAC;QACpF,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,yBAAyB,EAAE,EAAE,WAAW,EAAE,CAAC,CAAC;IACjE,CAAC;IAED;;OAEG;IACH,KAAK,CAAC,aAAa,CAAC,WAAmB,EAAE,MAAc;QACrD,MAAM,KAAK,GAAG,IAAI,CAAC,YAAY,CAAC,GAAG,CAAC,WAAW,CAAC,CAAC;QACjD,IAAI,CAAC,KAAK,EAAE,CAAC;YACX,MAAM,IAAI,WAAW,CAAC,gCAAgC,WAAW,GAAG,CAAC,CAAC;QACxE,CAAC;QAED,MAAM,WAAW,GAAG,IAAI,CAAC,IAAI,CAAC,cAAc,EAAE,WAAW,CAAC,CAAC;QAC3D,MAAM,SAAS,GAAG,IAAI,CAAC,WAAW,EAAE,UAAU,CAAC,CAAC;QAChD,MAAM,YAAY,GAAG,MAAM,QAAQ,CAAC,SAAS,EAAE,MAAM,CAAC,CAAC;QAEvD,yBAAyB;QACzB,MAAM,SAAS,GAAG,YAAY,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC,MAAM,CAAC,IAAI,CAAC,EAAE,CAAC,IAAI,CAAC,UAAU,CAAC,OAAO,CAAC,IAAI,IAAI,CAAC,UAAU,CAAC,OAAO,CAAC,CAAC,CAAC;QAChH,IAAI,MAAM,GAAG,CAAC,IAAI,MAAM,GAAG,SAAS,CAAC,MAAM,EAAE,CAAC;YAC5C,MAAM,IAAI,WAAW,CAAC,mBAAmB,MAAM,iBAAiB,WAAW,GAAG,CAAC,CAAC;QAClF,CAAC;QAED,MAAM,eAAe,GAAG,SAAS,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,SAAS,CAAC,SAAS,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,OAAO,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,IAAI,EAAE,CAAC;QAEvG,8CAA8C;QAC9C,MAAM,kBAAkB,GAAsB;YAC5C,WAAW,EAAE,mBAAmB,eAAe,EAAE;YACjD,QAAQ,EAAE,MAAM;YAChB,QAAQ,EAAE,UAAU,EAAG,gDAAgD;YACvE,oBAAoB,EAAE,CAAC,iBAAoC,EAAE,gBAAmC,CAAC;YACjG,SAAS,EAAE,CAAC;YACZ,QAAQ,EAAE;gBACR,cAAc,EAAE,WAAW;gBAC3B,YAAY,EAAE,gBAAgB;gBAC9B,MAAM;gBACN,eAAe;gBACf,eAAe,EAAE,MAAM,IAAI,CAAC,kBAAkB,EAAE;aACjD;SACF,CAAC;QAEF,MAAM,IAAI,GAAG,MAAM,IAAI,CAAC,QAAQ,CAAC,UAAU,CAAC,kBAAkB,CAAC,CAAC;QAChE,MAAM,IAAI,CAAC,qBAAqB,CAAC,IAAI,CAAC,EAAE,EAAE,MAAM,CAAC,CAAC,CAAC,aAAa;QAEhE,qCAAqC;QACrC,MAAM,mBAAmB,GAAG,YAAY,CAAC,OAAO,CAC9C,SAAS,CAAC,MAAM,GAAG,CAAC,CAAC,EACrB,SAAS,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,OAAO,CAAC,OAAO,EAAE,OAAO,CAAC,CAChD,CAAC;QACF,MAAM,SAAS,CAAC,SAAS,EAAE,mBAAmB,EAAE,MAAM,CAAC,CAAC;QAExD,wBAAwB;QACxB,KAAK,CAAC,YAAY,GAAG,gBAAiC,CAAC;QACvD,KAAK,CAAC,gBAAgB,GAAG,MAAM,CAAC;QAChC,KAAK,CAAC,YAAY,GAAG,IAAI,IAAI,EAAE,CAAC;QAEhC,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,oBAAoB,MAAM,SAAS,WAAW,sBAAsB,CAAC,CAAC;QACvF,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,0BAA0B,EAAE,EAAE,WAAW,EAAE,MAAM,EAAE,eAAe,EAAE,CAAC,CAAC;IAC3F,CAAC;IAED;;OAEG;IACH,KAAK,CAAC,YAAY,CAAC,WAAmB;QACpC,MAAM,KAAK,GAAG,IAAI,CAAC,YAAY,CAAC,GAAG,CAAC,WAAW,CAAC,CAAC;QACjD,IAAI,CAAC,KAAK,EAAE,CAAC;YACX,MAAM,IAAI,WAAW,CAAC,gCAAgC,WAAW,GAAG,CAAC,CAAC;QACxE,CAAC;QAED,kCAAkC;QAClC,IAAI,IAAI,CAAC,MAAM,CAAC,yBAAyB,EAAE,CAAC;YAC1C,MAAM,iBAAiB,GAAsB;gBAC3C,EAAE,EAAE,0BAA0B,WAAW,IAAI,IAAI,CAAC,GAAG,EAAE,EAAE;gBACzD,OAAO,EAAG,IAAI,CAAC,QAAgB,CAAC,EAAE;gBAClC,QAAQ,EAAE;oBACR,MAAM,EAAE,eAAe;oBACvB,WAAW;oBACX,YAAY,EAAE,KAAK,CAAC,YAAY;oBAChC,OAAO,EAAE,yBAAyB,KAAK,CAAC,YAAY,cAAc,WAAW,EAAE;iBAChF;gBACD,iBAAiB,EAAE,IAAI;gBACvB,QAAQ,EAAE,IAAI,IAAI,CAAC,IAAI,CAAC,GAAG,EAAE,GAAG,MAAM,CAAC,EAAE,YAAY;gBACrD,MAAM,EAAE,oBAAoB,WAAW,EAAE;gBACzC,QAAQ,EAAE;oBACR,IAAI,EAAE,gBAAgB;oBACtB,WAAW;oBACX,KAAK,EAAE,KAAK,CAAC,YAAY;iBAC1B;aACF,CAAC;YAEF,kCAAkC;YAClC,MAAM,eAAe,GAAI,IAAI,CAAC,QAAgB,CAAC,SAA4B,CAAC;YAC5E,MAAM,UAAU,GAAG,MAAM,eAAe,CAAC,cAAc,CAAC,iBAAiB,CAAC,CAAC;YAC3E,MAAM,eAAe,GAAG,MAAM,IAAI,CAAC,sBAAsB,CAAC,UAAU,EAAE,MAAM,CAAC,CAAC;YAE9E,IAAI,CAAC,eAAe,CAAC,QAAQ,EAAE,CAAC;gBAC9B,MAAM,IAAI,WAAW,CAAC,oCAAoC,eAAe,CAAC,MAAM,EAAE,CAAC,CAAC;YACtF,CAAC;QACH,CAAC;QAED,yBAAyB;QACzB,MAAM,gBAAgB,GAA2B;YAC/C,4BAA4B,EAAE,mBAAmB;YACjD,mBAAmB,EAAE,yBAAyB;YAC9C,yBAAyB,EAAE,gBAAgB;YAC3C,gBAAgB,EAAE,WAAW;SAC9B,CAAC;QAEF,MAAM,SAAS,GAAG,gBAAgB,CAAC,KAAK,CAAC,YAAY,CAAC,CAAC;QACvD,IAAI,SAAS,EAAE,CAAC;YACd,KAAK,CAAC,YAAY,GAAG,SAA0B,CAAC;YAChD,KAAK,CAAC,YAAY,GAAG,IAAI,IAAI,EAAE,CAAC;YAChC,KAAK,CAAC,OAAO,CAAC,IAAI,CAAC;gBACjB,KAAK,EAAE,SAA0B;gBACjC,MAAM,EAAE,UAAU;gBAClB,SAAS,EAAE,IAAI,IAAI,EAAE;aACtB,CAAC,CAAC;QACL,CAAC;QAED,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,kCAAkC,WAAW,MAAM,KAAK,CAAC,YAAY,OAAO,SAAS,EAAE,CAAC,CAAC;QAC1G,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,wBAAwB,EAAE,EAAE,WAAW,EAAE,SAAS,EAAE,CAAC,CAAC;IAC3E,CAAC;IAED;;OAEG;IACH,gBAAgB,CAAC,WAAmB;QAClC,OAAO,IAAI,CAAC,YAAY,CAAC,GAAG,CAAC,WAAW,CAAC,CAAC;IAC5C,CAAC;IAED;;OAEG;IACH,KAAK,CAAC,sBAAsB,CAAC,MAAc,EAAE,OAAe;QAC1D,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,yBAAyB,EAAE,CAAC;YAC3C,MAAM,IAAI,WAAW,CAAC,kCAAkC,CAAC,CAAC;QAC5D,CAAC;QAED,oDAAoD;QACpD,MAAM,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,KAAK,CAAC,YAAY,MAAM,EAAE,EAAE;YACrD,OAAO;YACP,MAAM;YACN,WAAW,EAAE,IAAI,IAAI,EAAE;YACvB,UAAU,EAAE,qBAAqB;SAClC,CAAC,CAAC;QAEH,iDAAiD;QACjD,MAAM,IAAI,CAAC,QAAQ,CAAC,aAAa,CAAC,SAAS,CAAC;YAC1C,IAAI,EAAE,iBAAiB;YACvB,MAAM;YACN,OAAO,EAAE,OAAO,CAAC,SAAS,CAAC,CAAC,EAAE,GAAG,CAAC,GAAG,KAAK,CAAC,2BAA2B;SACvE,CAAC,CAAC;QAEH,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,kCAAkC,MAAM,mBAAmB,CAAC,CAAC;IAChF,CAAC;IAED;;OAEG;IACK,KAAK,CAAC,kBAAkB;QAC9B,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,yBAAyB,EAAE,CAAC;YAC3C,OAAO,gCAAgC,CAAC;QAC1C,CAAC;QAED,IAAI,CAAC;YACH,oDAAoD;YACpD,MAAM,YAAY,GAAG,MAAM,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,MAAM,CAAC,YAAY,CAAC,CAAC;YACrE,MAAM,YAAY,GAAG,MAAM,OAAO,CAAC,GAAG,CACpC,YAAY,CAAC,GAAG,CAAC,GAAG,CAAC,EAAE,CAAC,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC,CAC5D,CAAC;YAEF,OAAO,YAAY;iBAChB,MAAM,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC;iBAClB,GAAG,CAAC,GAAG,CAAC,EAAE,CAAC,MAAM,GAAG,CAAC,MAAM,KAAK,GAAG,CAAC,OAAO,EAAE,CAAC;iBAC9C,IAAI,CAAC,aAAa,CAAC,CAAC;QAEzB,CAAC;QAAC,OAAO,KAAK,EAAE,CAAC;YACf,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,wCAAwC,KAAK,YAAY,KAAK,CAAC,CAAC,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,CAAC,MAAM,CAAC,KAAK,CAAC,EAAE,CAAC,CAAC;YACnH,OAAO,2CAA2C,CAAC;QACrD,CAAC;IACH,CAAC;IAED;;OAEG;IACK,KAAK,CAAC,wBAAwB;QACpC,kDAAkD;QAClD,MAAM,eAAe,GAAG;YACtB,SAAS,EAAE,2DAA2D;YACtE,MAAM,EAAE,qEAAqE;YAC7E,UAAU,EAAE,4DAA4D;SACzE,CAAC;QAEF,KAAK,MAAM,CAAC,MAAM,EAAE,OAAO,CAAC,IAAI,MAAM,CAAC,OAAO,CAAC,eAAe,CAAC,EAAE,CAAC;YAChE,MAAM,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,KAAK,CAAC,YAAY,MAAM,EAAE,EAAE;gBACrD,OAAO;gBACP,MAAM;gBACN,WAAW,EAAE,IAAI,IAAI,EAAE;gBACvB,UAAU,EAAE,QAAQ;aACrB,CAAC,CAAC;QACL,CAAC;QAED,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,wDAAwD,CAAC,CAAC;IAC7E,CAAC;IAED;;OAEG;IACK,KAAK,CAAC,qBAAqB,CAAC,MAAc,EAAE,SAAiB;QACnE,OAAO,IAAI,OAAO,CAAC,CAAC,OAAO,EAAE,MAAM,EAAE,EAAE;YACrC,MAAM,OAAO,GAAG,UAAU,CAAC,GAAG,EAAE;gBAC9B,MAAM,CAAC,IAAI,KAAK,CAAC,iBAAiB,MAAM,EAAE,CAAC,CAAC,CAAC;YAC/C,CAAC,EAAE,SAAS,CAAC,CAAC;YAEd,MAAM,aAAa,GAAG,WAAW,CAAC,KAAK,IAAI,EAAE;gBAC3C,IAAI,CAAC;oBACH,MAAM,IAAI,GAAG,MAAM,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC;oBAEjD,IAAI,IAAI,CAAC,MAAM,KAAK,WAAW,EAAE,CAAC;wBAChC,YAAY,CAAC,OAAO,CAAC,CAAC;wBACtB,aAAa,CAAC,aAAa,CAAC,CAAC;wBAC7B,OAAO,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC;oBACtD,CAAC;yBAAM,IAAI,IAAI,CAAC,MAAM,KAAK,QAAQ,EAAE,CAAC;wBACpC,YAAY,CAAC,OAAO,CAAC,CAAC;wBACtB,aAAa,CAAC,aAAa,CAAC,CAAC;wBAC7B,MAAM,CAAC,IAAI,KAAK,CAAC,gBAAgB,IAAI,CAAC,KAAK,IAAI,eAAe,EAAE,CAAC,CAAC,CAAC;oBACrE,CAAC;gBACH,CAAC;gBAAC,OAAO,KAAK,EAAE,CAAC;oBACf,YAAY,CAAC,OAAO,CAAC,CAAC;oBACtB,aAAa,CAAC,aAAa,CAAC,CAAC;oBAC7B,MAAM,CAAC,KAAK,CAAC,CAAC;gBAChB,CAAC;YACH,CAAC,EAAE,IAAI,CAAC,CAAC;QACX,CAAC,CAAC,CAAC;IACL,CAAC;IAED;;OAEG;IACK,KAAK,CAAC,sBAAsB,CAAC,UAAkB,EAAE,SAAiB;QACxE,OAAO,IAAI,OAAO,CAAC,CAAC,OAAO,EAAE,MAAM,EAAE,EAAE;YACrC,MAAM,OAAO,GAAG,UAAU,CAAC,GAAG,EAAE;gBAC9B,MAAM,CAAC,IAAI,KAAK,CAAC,kCAAkC,UAAU,EAAE,CAAC,CAAC,CAAC;YACpE,CAAC,EAAE,SAAS,CAAC,CAAC;YAEd,MAAM,aAAa,GAAG,WAAW,CAAC,KAAK,IAAI,EAAE;gBAC3C,IAAI,CAAC;oBACH,MAAM,eAAe,GAAI,IAAI,CAAC,QAAgB,CAAC,SAA4B,CAAC;oBAC5E,MAAM,MAAM,GAAG,MAAM,eAAe,CAAC,iBAAiB,CAAC,UAAU,CAAC,CAAC;oBAEnE,IAAI,MAAM,CAAC,MAAM,KAAK,UAAU,EAAE,CAAC;wBACjC,YAAY,CAAC,OAAO,CAAC,CAAC;wBACtB,aAAa,CAAC,aAAa,CAAC,CAAC;wBAC7B,OAAO,CAAC;4BACN,QAAQ,EAAE,IAAI;4BACd,UAAU,EAAE,MAAM,CAAC,YAAY;4BAC/B,MAAM,EAAE,oBAAoB;yBAC7B,CAAC,CAAC;oBACL,CAAC;yBAAM,IAAI,MAAM,CAAC,MAAM,KAAK,QAAQ,EAAE,CAAC;wBACtC,YAAY,CAAC,OAAO,CAAC,CAAC;wBACtB,aAAa,CAAC,aAAa,CAAC,CAAC;wBAC7B,OAAO,CAAC;4BACN,QAAQ,EAAE,KAAK;4BACf,UAAU,EAAE,MAAM,CAAC,YAAY;4BAC/B,MAAM,EAAE,kBAAkB;yBAC3B,CAAC,CAAC;oBACL,CAAC;gBACH,CAAC;gBAAC,OAAO,KAAK,EAAE,CAAC;oBACf,YAAY,CAAC,OAAO,CAAC,CAAC;oBACtB,aAAa,CAAC,aAAa,CAAC,CAAC;oBAC7B,MAAM,CAAC,KAAK,CAAC,CAAC;gBAChB,CAAC;YACH,CAAC,EAAE,IAAI,CAAC,CAAC;QACX,CAAC,CAAC,CAAC;IACL,CAAC;IAED;;OAEG;IACK,kBAAkB;QACxB,IAAI,CAAC,QAAQ,CAAC,EAAE,CAAC,sBAAsB,EAAE,IAAI,CAAC,iBAAiB,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC;QAC5E,IAAI,CAAC,QAAQ,CAAC,EAAE,CAAC,wBAAwB,EAAE,IAAI,CAAC,mBAAmB,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC;QAChF,IAAI,CAAC,QAAQ,CAAC,EAAE,CAAC,0BAA0B,EAAE,IAAI,CAAC,qBAAqB,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC;IACtF,CAAC;IAED;;OAEG;IACK,KAAK,CAAC,iBAAiB,CAAC,IAAS;QACvC,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,kCAAkC,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;IAC7E,CAAC;IAEO,KAAK,CAAC,mBAAmB,CAAC,IAAS;QACzC,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,wCAAwC,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;IACnF,CAAC;IAEO,KAAK,CAAC,qBAAqB,CAAC,IAAS;QAC3C,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,sCAAsC,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;IACjF,CAAC;IAED;;OAEG;IACH,KAAK,CAAC,QAAQ;QACZ,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,uCAAuC,CAAC,CAAC;QAE1D,IAAI,IAAI,CAAC,QAAQ,EAAE,CAAC;YAClB,MAAM,IAAI,CAAC,QAAQ,CAAC,QAAQ,EAAE,CAAC;YAC/B,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,0CAA0C,CAAC,CAAC;QAC/D,CAAC;QAED,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,2CAA2C,CAAC,CAAC;IAChE,CAAC;CACF",
      names: [],
      sources: ["/home/mhugo/code/claude-code-flow/src/maestro/maestro-swarm-coordinator.ts"],
      sourcesContent: ["/**\n * MaestroSwarmCoordinator - Native Hive Mind Implementation\n * \n * Replaces MaestroOrchestrator with native hive mind swarm coordination.\n * Uses specs-driven topology and SwarmOrchestrator for all task management.\n * Eliminates dual agent systems and leverages collective intelligence.\n */\n\nimport { EventEmitter } from 'events';\nimport { join } from 'path';\nimport { readFile, writeFile, mkdir } from 'fs/promises';\n\n// Native hive mind components\nimport { HiveMind } from '../hive-mind/core/HiveMind.js';\nimport { Agent } from '../hive-mind/core/Agent.js';\nimport { ConsensusEngine } from '../hive-mind/integration/ConsensusEngine.js';\nimport { SwarmOrchestrator } from '../hive-mind/integration/SwarmOrchestrator.js';\nimport {\n  HiveMindConfig,\n  TaskSubmitOptions,\n  AgentCapability,\n  Task,\n  ConsensusProposal\n} from '../hive-mind/types.js';\n\n// Core infrastructure\nimport { IEventBus } from '../core/event-bus.js';\nimport { ILogger } from '../core/logger.js';\nimport { SystemError } from '../utils/errors.js';\n\n// Maestro types\nimport {\n  MaestroWorkflowState,\n  WorkflowPhase,\n  MaestroSpec\n} from './maestro-types.js';\n\nexport interface MaestroSwarmConfig {\n  // Native hive mind configuration\n  hiveMindConfig: HiveMindConfig;\n  \n  // Maestro-specific features\n  enableConsensusValidation: boolean;\n  enableLivingDocumentation: boolean;\n  enableSteeringIntegration: boolean;\n  \n  // File system settings\n  specsDirectory: string;\n  steeringDirectory: string;\n}\n\n/**\n * Native Hive Mind Maestro Coordinator\n * Leverages specs-driven swarm topology for collective intelligence\n */\nexport class MaestroSwarmCoordinator extends EventEmitter {\n  private hiveMind: HiveMind;\n  private maestroState: Map<string, MaestroWorkflowState> = new Map();\n  private specsDirectory: string;\n  private steeringDirectory: string;\n  \n  constructor(\n    private config: MaestroSwarmConfig,\n    private eventBus: IEventBus,\n    private logger: ILogger\n  ) {\n    super();\n    \n    this.specsDirectory = config.specsDirectory || join(process.cwd(), '.claude', 'claude-flow', 'maestro', 'specs');\n    this.steeringDirectory = config.steeringDirectory || join(process.cwd(), '.claude', 'claude-flow', 'maestro', 'steering');\n    \n    this.setupEventHandlers();\n    this.logger.info('MaestroSwarmCoordinator initialized with native hive mind');\n  }\n  \n  /**\n   * Initialize the specs-driven hive mind swarm\n   */\n  async initialize(): Promise<string> {\n    try {\n      // Create specs-driven hive mind with native topology\n      const hiveMindConfig: HiveMindConfig = {\n        name: 'maestro-specs-driven-swarm',\n        topology: 'specs-driven',\n        queenMode: 'strategic',\n        maxAgents: 8,\n        consensusThreshold: 0.66,\n        memoryTTL: 86400000, // 24 hours\n        autoSpawn: true,  // Automatically spawn topology agents\n        enableConsensus: this.config.enableConsensusValidation,\n        enableMemory: true,\n        enableCommunication: true,\n        ...this.config.hiveMindConfig\n      };\n      \n      // Initialize native hive mind\n      this.hiveMind = new HiveMind(hiveMindConfig);\n      const swarmId = await this.hiveMind.initialize();\n      \n      // Initialize steering docs in swarm memory if enabled\n      if (this.config.enableSteeringIntegration) {\n        await this.initializeSteeringMemory();\n      }\n      \n      this.logger.info(`Maestro specs-driven swarm initialized: ${swarmId}`);\n      this.emit('initialized', { swarmId });\n      \n      return swarmId;\n      \n    } catch (error) {\n      this.logger.error(`Failed to initialize maestro swarm: ${error instanceof Error ? error.message : String(error)}`);\n      throw error;\n    }\n  }\n  \n  /**\n   * Create specification using native requirements_analyst agent\n   */\n  async createSpec(featureName: string, initialRequest: string): Promise<void> {\n    const featurePath = join(this.specsDirectory, featureName);\n    await mkdir(featurePath, { recursive: true });\n    \n    // Initialize workflow state\n    const workflowState: MaestroWorkflowState = {\n      featureName,\n      currentPhase: 'Requirements Clarification' as WorkflowPhase,\n      currentTaskIndex: 0,\n      status: 'running',\n      lastActivity: new Date(),\n      history: [{\n        phase: 'Requirements Clarification' as WorkflowPhase,\n        status: 'in-progress',\n        timestamp: new Date()\n      }]\n    };\n    \n    this.maestroState.set(featureName, workflowState);\n    \n    // Submit requirements analysis task to native swarm\n    const requirementsTask: TaskSubmitOptions = {\n      description: `Generate comprehensive requirements for feature: ${featureName}`,\n      priority: 'high',\n      strategy: 'sequential',\n      requiredCapabilities: ['requirements_analysis' as AgentCapability, 'user_story_creation' as AgentCapability, 'acceptance_criteria' as AgentCapability],\n      metadata: {\n        maestroFeature: featureName,\n        maestroPhase: 'Requirements Clarification',\n        initialRequest,\n        outputFile: join(featurePath, 'requirements.md')\n      }\n    };\n    \n    // Use native SwarmOrchestrator through HiveMind\n    const task = await this.hiveMind.submitTask(requirementsTask);\n    await this.waitForTaskCompletion(task.id, 120000); // 2 minutes\n    \n    this.logger.info(`Created specification for '${featureName}' using native swarm`);\n    this.eventBus.emit('maestro:spec_created', { featureName });\n  }\n  \n  /**\n   * Generate design using native design_architect agents with consensus\n   */\n  async generateDesign(featureName: string): Promise<void> {\n    const state = this.maestroState.get(featureName);\n    if (!state) {\n      throw new SystemError(`No workflow state found for '${featureName}'`);\n    }\n    \n    const featurePath = join(this.specsDirectory, featureName);\n    const requirementsPath = join(featurePath, 'requirements.md');\n    const requirementsContent = await readFile(requirementsPath, 'utf8');\n    \n    // Submit design generation task with consensus requirement\n    const designTask: TaskSubmitOptions = {\n      description: `Generate comprehensive technical design for ${featureName}`,\n      priority: 'high',\n      strategy: 'parallel',  // Multiple design_architect agents work in parallel\n      requiredCapabilities: ['system_design' as AgentCapability, 'architecture' as AgentCapability, 'specs_driven_design' as AgentCapability],\n      requireConsensus: this.config.enableConsensusValidation,\n      maxAgents: 2,  // Use both design_architect agents\n      metadata: {\n        maestroFeature: featureName,\n        maestroPhase: 'Research & Design',\n        requirements: requirementsContent,\n        outputFile: join(featurePath, 'design.md')\n      }\n    };\n    \n    // Native SwarmOrchestrator handles parallel execution and consensus\n    const task = await this.hiveMind.submitTask(designTask);\n    await this.waitForTaskCompletion(task.id, 300000); // 5 minutes\n    \n    // Update workflow state\n    state.currentPhase = 'Research & Design' as WorkflowPhase;\n    state.lastActivity = new Date();\n    state.history.push({\n      phase: 'Research & Design' as WorkflowPhase,\n      status: 'completed',\n      timestamp: new Date()\n    });\n    \n    this.logger.info(`Generated design for '${featureName}' using native swarm consensus`);\n    this.eventBus.emit('maestro:design_generated', { featureName });\n  }\n  \n  /**\n   * Generate tasks using native task_planner agent\n   */\n  async generateTasks(featureName: string): Promise<void> {\n    const state = this.maestroState.get(featureName);\n    if (!state) {\n      throw new SystemError(`No workflow state found for '${featureName}'`);\n    }\n    \n    const featurePath = join(this.specsDirectory, featureName);\n    const designPath = join(featurePath, 'design.md');\n    const designContent = await readFile(designPath, 'utf8');\n    \n    // Submit task planning to native task_planner agent\n    const taskPlanningTask: TaskSubmitOptions = {\n      description: `Generate implementation task breakdown for ${featureName}`,\n      priority: 'high',\n      strategy: 'sequential',\n      requiredCapabilities: ['task_management' as AgentCapability, 'workflow_orchestration' as AgentCapability],\n      metadata: {\n        maestroFeature: featureName,\n        maestroPhase: 'Implementation Planning',\n        designContent,\n        outputFile: join(featurePath, 'tasks.md')\n      }\n    };\n    \n    const task = await this.hiveMind.submitTask(taskPlanningTask);\n    await this.waitForTaskCompletion(task.id, 180000); // 3 minutes\n    \n    // Update workflow state\n    state.currentPhase = 'Implementation Planning' as WorkflowPhase;\n    state.lastActivity = new Date();\n    state.history.push({\n      phase: 'Implementation Planning' as WorkflowPhase,\n      status: 'completed',\n      timestamp: new Date()\n    });\n    \n    this.logger.info(`Generated tasks for '${featureName}' using native swarm planner`);\n    this.eventBus.emit('maestro:tasks_generated', { featureName });\n  }\n  \n  /**\n   * Implement task using native implementation_coder agents\n   */\n  async implementTask(featureName: string, taskId: number): Promise<void> {\n    const state = this.maestroState.get(featureName);\n    if (!state) {\n      throw new SystemError(`No workflow state found for '${featureName}'`);\n    }\n    \n    const featurePath = join(this.specsDirectory, featureName);\n    const tasksPath = join(featurePath, 'tasks.md');\n    const tasksContent = await readFile(tasksPath, 'utf8');\n    \n    // Parse task description\n    const taskLines = tasksContent.split('\\n').filter(line => line.startsWith('- [ ]') || line.startsWith('- [x]'));\n    if (taskId < 1 || taskId > taskLines.length) {\n      throw new SystemError(`Invalid task ID ${taskId} for feature '${featureName}'`);\n    }\n    \n    const taskDescription = taskLines[taskId - 1].substring(taskLines[taskId - 1].indexOf(']') + 2).trim();\n    \n    // Submit implementation task to native coders\n    const implementationTask: TaskSubmitOptions = {\n      description: `Implement task: ${taskDescription}`,\n      priority: 'high',\n      strategy: 'parallel',  // Multiple implementation_coder agents can work\n      requiredCapabilities: ['code_generation' as AgentCapability, 'implementation' as AgentCapability],\n      maxAgents: 2,\n      metadata: {\n        maestroFeature: featureName,\n        maestroPhase: 'Task Execution',\n        taskId,\n        taskDescription,\n        steeringContext: await this.getSteeringContext()\n      }\n    };\n    \n    const task = await this.hiveMind.submitTask(implementationTask);\n    await this.waitForTaskCompletion(task.id, 600000); // 10 minutes\n    \n    // Mark task as completed in tasks.md\n    const updatedTasksContent = tasksContent.replace(\n      taskLines[taskId - 1],\n      taskLines[taskId - 1].replace('- [ ]', '- [x]')\n    );\n    await writeFile(tasksPath, updatedTasksContent, 'utf8');\n    \n    // Update workflow state\n    state.currentPhase = 'Task Execution' as WorkflowPhase;\n    state.currentTaskIndex = taskId;\n    state.lastActivity = new Date();\n    \n    this.logger.info(`Implemented task ${taskId} for '${featureName}' using native swarm`);\n    this.eventBus.emit('maestro:task_implemented', { featureName, taskId, taskDescription });\n  }\n  \n  /**\n   * Approve workflow phase with optional consensus\n   */\n  async approvePhase(featureName: string): Promise<void> {\n    const state = this.maestroState.get(featureName);\n    if (!state) {\n      throw new SystemError(`No workflow state found for '${featureName}'`);\n    }\n    \n    // Use native consensus if enabled\n    if (this.config.enableConsensusValidation) {\n      const consensusProposal: ConsensusProposal = {\n        id: `maestro-phase-approval-${featureName}-${Date.now()}`,\n        swarmId: (this.hiveMind as any).id,\n        proposal: {\n          action: 'approve_phase',\n          featureName,\n          currentPhase: state.currentPhase,\n          details: `Approve completion of ${state.currentPhase} phase for ${featureName}`\n        },\n        requiredThreshold: 0.66,\n        deadline: new Date(Date.now() + 300000), // 5 minutes\n        taskId: `maestro-approval-${featureName}`,\n        metadata: {\n          type: 'phase_approval',\n          featureName,\n          phase: state.currentPhase\n        }\n      };\n      \n      // Submit for consensus validation\n      const consensusEngine = (this.hiveMind as any).consensus as ConsensusEngine;\n      const proposalId = await consensusEngine.createProposal(consensusProposal);\n      const consensusResult = await this.waitForConsensusResult(proposalId, 300000);\n      \n      if (!consensusResult.achieved) {\n        throw new SystemError(`Phase approval consensus failed: ${consensusResult.reason}`);\n      }\n    }\n    \n    // Progress to next phase\n    const phaseProgression: Record<string, string> = {\n      'Requirements Clarification': 'Research & Design',\n      'Research & Design': 'Implementation Planning',\n      'Implementation Planning': 'Task Execution',\n      'Task Execution': 'Completed'\n    };\n    \n    const nextPhase = phaseProgression[state.currentPhase];\n    if (nextPhase) {\n      state.currentPhase = nextPhase as WorkflowPhase;\n      state.lastActivity = new Date();\n      state.history.push({\n        phase: nextPhase as WorkflowPhase,\n        status: 'approved',\n        timestamp: new Date()\n      });\n    }\n    \n    this.logger.info(`Approved phase transition for '${featureName}': ${state.currentPhase} -> ${nextPhase}`);\n    this.eventBus.emit('maestro:phase_approved', { featureName, nextPhase });\n  }\n  \n  /**\n   * Get workflow state\n   */\n  getWorkflowState(featureName: string): MaestroWorkflowState | undefined {\n    return this.maestroState.get(featureName);\n  }\n  \n  /**\n   * Create steering document in native swarm memory\n   */\n  async createSteeringDocument(domain: string, content: string): Promise<void> {\n    if (!this.config.enableSteeringIntegration) {\n      throw new SystemError('Steering integration is disabled');\n    }\n    \n    // Store in native hive mind memory instead of files\n    await this.hiveMind.memory.store(`steering/${domain}`, {\n      content,\n      domain,\n      lastUpdated: new Date(),\n      maintainer: 'steering_documenter'\n    });\n    \n    // Notify all agents through native communication\n    await this.hiveMind.communication.broadcast({\n      type: 'steering_update',\n      domain,\n      content: content.substring(0, 200) + '...' // Summary for notification\n    });\n    \n    this.logger.info(`Created steering document for '${domain}' in swarm memory`);\n  }\n  \n  /**\n   * Get steering context from swarm memory\n   */\n  private async getSteeringContext(): Promise<string> {\n    if (!this.config.enableSteeringIntegration) {\n      return 'No steering context available.';\n    }\n    \n    try {\n      // Retrieve all steering documents from swarm memory\n      const steeringKeys = await this.hiveMind.memory.search('steering/*');\n      const steeringDocs = await Promise.all(\n        steeringKeys.map(key => this.hiveMind.memory.retrieve(key))\n      );\n      \n      return steeringDocs\n        .filter(doc => doc)\n        .map(doc => `## ${doc.domain}\\n${doc.content}`)\n        .join('\\n\\n---\\n\\n');\n        \n    } catch (error) {\n      this.logger.warn(`Failed to retrieve steering context: ${error instanceof Error ? error.message : String(error)}`);\n      return 'Steering context temporarily unavailable.';\n    }\n  }\n  \n  /**\n   * Initialize steering documents in swarm memory\n   */\n  private async initializeSteeringMemory(): Promise<void> {\n    // Initialize default steering documents in memory\n    const defaultSteering = {\n      'product': 'Focus on user value and clear requirements specification.',\n      'tech': 'Follow clean architecture patterns and maintainable code practices.',\n      'workflow': 'Use specs-driven development with clear phase progression.'\n    };\n    \n    for (const [domain, content] of Object.entries(defaultSteering)) {\n      await this.hiveMind.memory.store(`steering/${domain}`, {\n        content,\n        domain,\n        lastUpdated: new Date(),\n        maintainer: 'system'\n      });\n    }\n    \n    this.logger.info('Initialized default steering documents in swarm memory');\n  }\n  \n  /**\n   * Wait for task completion using native swarm tracking\n   */\n  private async waitForTaskCompletion(taskId: string, timeoutMs: number): Promise<any> {\n    return new Promise((resolve, reject) => {\n      const timeout = setTimeout(() => {\n        reject(new Error(`Task timeout: ${taskId}`));\n      }, timeoutMs);\n      \n      const checkInterval = setInterval(async () => {\n        try {\n          const task = await this.hiveMind.getTask(taskId);\n          \n          if (task.status === 'completed') {\n            clearTimeout(timeout);\n            clearInterval(checkInterval);\n            resolve(task.result ? JSON.parse(task.result) : {});\n          } else if (task.status === 'failed') {\n            clearTimeout(timeout);\n            clearInterval(checkInterval);\n            reject(new Error(`Task failed: ${task.error || 'Unknown error'}`));\n          }\n        } catch (error) {\n          clearTimeout(timeout);\n          clearInterval(checkInterval);\n          reject(error);\n        }\n      }, 2000);\n    });\n  }\n  \n  /**\n   * Wait for consensus result using native ConsensusEngine\n   */\n  private async waitForConsensusResult(proposalId: string, timeoutMs: number): Promise<any> {\n    return new Promise((resolve, reject) => {\n      const timeout = setTimeout(() => {\n        reject(new Error(`Consensus timeout for proposal ${proposalId}`));\n      }, timeoutMs);\n      \n      const checkInterval = setInterval(async () => {\n        try {\n          const consensusEngine = (this.hiveMind as any).consensus as ConsensusEngine;\n          const status = await consensusEngine.getProposalStatus(proposalId);\n          \n          if (status.status === 'achieved') {\n            clearTimeout(timeout);\n            clearInterval(checkInterval);\n            resolve({\n              achieved: true,\n              finalRatio: status.currentRatio,\n              reason: 'Consensus achieved'\n            });\n          } else if (status.status === 'failed') {\n            clearTimeout(timeout);\n            clearInterval(checkInterval);\n            resolve({\n              achieved: false,\n              finalRatio: status.currentRatio,\n              reason: 'Consensus failed'\n            });\n          }\n        } catch (error) {\n          clearTimeout(timeout);\n          clearInterval(checkInterval);\n          reject(error);\n        }\n      }, 1000);\n    });\n  }\n  \n  /**\n   * Setup event handlers\n   */\n  private setupEventHandlers(): void {\n    this.eventBus.on('maestro:spec_created', this.handleSpecCreated.bind(this));\n    this.eventBus.on('maestro:phase_approved', this.handlePhaseApproved.bind(this));\n    this.eventBus.on('maestro:task_implemented', this.handleTaskImplemented.bind(this));\n  }\n  \n  /**\n   * Event handlers\n   */\n  private async handleSpecCreated(data: any): Promise<void> {\n    this.logger.info(`Spec created via native swarm: ${JSON.stringify(data)}`);\n  }\n  \n  private async handlePhaseApproved(data: any): Promise<void> {\n    this.logger.info(`Phase approved via native consensus: ${JSON.stringify(data)}`);\n  }\n  \n  private async handleTaskImplemented(data: any): Promise<void> {\n    this.logger.info(`Task implemented via native swarm: ${JSON.stringify(data)}`);\n  }\n  \n  /**\n   * Shutdown coordinator and native swarm\n   */\n  async shutdown(): Promise<void> {\n    this.logger.info('Shutting down MaestroSwarmCoordinator');\n    \n    if (this.hiveMind) {\n      await this.hiveMind.shutdown();\n      this.logger.info('Native hive mind swarm shutdown complete');\n    }\n    \n    this.logger.info('MaestroSwarmCoordinator shutdown complete');\n  }\n}"],
      version: 3
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "acdc7cb9379b405ba6d8760e0e75c14dfa81d8c9"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_dx6ttxvus = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_dx6ttxvus();
/**
 * MaestroSwarmCoordinator - Native Hive Mind Implementation
 *
 * Replaces MaestroOrchestrator with native hive mind swarm coordination.
 * Uses specs-driven topology and SwarmOrchestrator for all task management.
 * Eliminates dual agent systems and leverages collective intelligence.
 */
import { EventEmitter } from 'events';
import { join } from 'path';
import { readFile, writeFile, mkdir } from 'fs/promises';
// Native hive mind components
import { HiveMind } from '../hive-mind/core/HiveMind.js';
import { SystemError } from '../utils/errors.js';
/**
 * Native Hive Mind Maestro Coordinator
 * Leverages specs-driven swarm topology for collective intelligence
 */
export class MaestroSwarmCoordinator extends EventEmitter {
  config;
  eventBus;
  logger;
  hiveMind;
  maestroState =
  /* istanbul ignore next */
  (cov_dx6ttxvus().s[0]++, new Map());
  specsDirectory;
  steeringDirectory;
  constructor(config, eventBus, logger) {
    /* istanbul ignore next */
    cov_dx6ttxvus().f[0]++;
    cov_dx6ttxvus().s[1]++;
    super();
    /* istanbul ignore next */
    cov_dx6ttxvus().s[2]++;
    this.config = config;
    /* istanbul ignore next */
    cov_dx6ttxvus().s[3]++;
    this.eventBus = eventBus;
    /* istanbul ignore next */
    cov_dx6ttxvus().s[4]++;
    this.logger = logger;
    /* istanbul ignore next */
    cov_dx6ttxvus().s[5]++;
    this.specsDirectory =
    /* istanbul ignore next */
    (cov_dx6ttxvus().b[0][0]++, config.specsDirectory) ||
    /* istanbul ignore next */
    (cov_dx6ttxvus().b[0][1]++, join(process.cwd(), '.claude', 'claude-flow', 'maestro', 'specs'));
    /* istanbul ignore next */
    cov_dx6ttxvus().s[6]++;
    this.steeringDirectory =
    /* istanbul ignore next */
    (cov_dx6ttxvus().b[1][0]++, config.steeringDirectory) ||
    /* istanbul ignore next */
    (cov_dx6ttxvus().b[1][1]++, join(process.cwd(), '.claude', 'claude-flow', 'maestro', 'steering'));
    /* istanbul ignore next */
    cov_dx6ttxvus().s[7]++;
    this.setupEventHandlers();
    /* istanbul ignore next */
    cov_dx6ttxvus().s[8]++;
    this.logger.info('MaestroSwarmCoordinator initialized with native hive mind');
  }
  /**
   * Initialize the specs-driven hive mind swarm
   */
  async initialize() {
    /* istanbul ignore next */
    cov_dx6ttxvus().f[1]++;
    cov_dx6ttxvus().s[9]++;
    try {
      // Create specs-driven hive mind with native topology
      const hiveMindConfig =
      /* istanbul ignore next */
      (cov_dx6ttxvus().s[10]++, {
        name: 'maestro-specs-driven-swarm',
        topology: 'specs-driven',
        queenMode: 'strategic',
        maxAgents: 8,
        consensusThreshold: 0.66,
        memoryTTL: 86400000,
        // 24 hours
        autoSpawn: true,
        // Automatically spawn topology agents
        enableConsensus: this.config.enableConsensusValidation,
        enableMemory: true,
        enableCommunication: true,
        ...this.config.hiveMindConfig
      });
      // Initialize native hive mind
      /* istanbul ignore next */
      cov_dx6ttxvus().s[11]++;
      this.hiveMind = new HiveMind(hiveMindConfig);
      const swarmId =
      /* istanbul ignore next */
      (cov_dx6ttxvus().s[12]++, await this.hiveMind.initialize());
      // Initialize steering docs in swarm memory if enabled
      /* istanbul ignore next */
      cov_dx6ttxvus().s[13]++;
      if (this.config.enableSteeringIntegration) {
        /* istanbul ignore next */
        cov_dx6ttxvus().b[2][0]++;
        cov_dx6ttxvus().s[14]++;
        await this.initializeSteeringMemory();
      } else
      /* istanbul ignore next */
      {
        cov_dx6ttxvus().b[2][1]++;
      }
      cov_dx6ttxvus().s[15]++;
      this.logger.info(`Maestro specs-driven swarm initialized: ${swarmId}`);
      /* istanbul ignore next */
      cov_dx6ttxvus().s[16]++;
      this.emit('initialized', {
        swarmId
      });
      /* istanbul ignore next */
      cov_dx6ttxvus().s[17]++;
      return swarmId;
    } catch (error) {
      /* istanbul ignore next */
      cov_dx6ttxvus().s[18]++;
      this.logger.error(`Failed to initialize maestro swarm: ${error instanceof Error ?
      /* istanbul ignore next */
      (cov_dx6ttxvus().b[3][0]++, error.message) :
      /* istanbul ignore next */
      (cov_dx6ttxvus().b[3][1]++, String(error))}`);
      /* istanbul ignore next */
      cov_dx6ttxvus().s[19]++;
      throw error;
    }
  }
  /**
   * Create specification using native requirements_analyst agent
   */
  async createSpec(featureName, initialRequest) {
    /* istanbul ignore next */
    cov_dx6ttxvus().f[2]++;
    const featurePath =
    /* istanbul ignore next */
    (cov_dx6ttxvus().s[20]++, join(this.specsDirectory, featureName));
    /* istanbul ignore next */
    cov_dx6ttxvus().s[21]++;
    await mkdir(featurePath, {
      recursive: true
    });
    // Initialize workflow state
    const workflowState =
    /* istanbul ignore next */
    (cov_dx6ttxvus().s[22]++, {
      featureName,
      currentPhase: 'Requirements Clarification',
      currentTaskIndex: 0,
      status: 'running',
      lastActivity: new Date(),
      history: [{
        phase: 'Requirements Clarification',
        status: 'in-progress',
        timestamp: new Date()
      }]
    });
    /* istanbul ignore next */
    cov_dx6ttxvus().s[23]++;
    this.maestroState.set(featureName, workflowState);
    // Submit requirements analysis task to native swarm
    const requirementsTask =
    /* istanbul ignore next */
    (cov_dx6ttxvus().s[24]++, {
      description: `Generate comprehensive requirements for feature: ${featureName}`,
      priority: 'high',
      strategy: 'sequential',
      requiredCapabilities: ['requirements_analysis', 'user_story_creation', 'acceptance_criteria'],
      metadata: {
        maestroFeature: featureName,
        maestroPhase: 'Requirements Clarification',
        initialRequest,
        outputFile: join(featurePath, 'requirements.md')
      }
    });
    // Use native SwarmOrchestrator through HiveMind
    const task =
    /* istanbul ignore next */
    (cov_dx6ttxvus().s[25]++, await this.hiveMind.submitTask(requirementsTask));
    /* istanbul ignore next */
    cov_dx6ttxvus().s[26]++;
    await this.waitForTaskCompletion(task.id, 120000); // 2 minutes
    /* istanbul ignore next */
    cov_dx6ttxvus().s[27]++;
    this.logger.info(`Created specification for '${featureName}' using native swarm`);
    /* istanbul ignore next */
    cov_dx6ttxvus().s[28]++;
    this.eventBus.emit('maestro:spec_created', {
      featureName
    });
  }
  /**
   * Generate design using native design_architect agents with consensus
   */
  async generateDesign(featureName) {
    /* istanbul ignore next */
    cov_dx6ttxvus().f[3]++;
    const state =
    /* istanbul ignore next */
    (cov_dx6ttxvus().s[29]++, this.maestroState.get(featureName));
    /* istanbul ignore next */
    cov_dx6ttxvus().s[30]++;
    if (!state) {
      /* istanbul ignore next */
      cov_dx6ttxvus().b[4][0]++;
      cov_dx6ttxvus().s[31]++;
      throw new SystemError(`No workflow state found for '${featureName}'`);
    } else
    /* istanbul ignore next */
    {
      cov_dx6ttxvus().b[4][1]++;
    }
    const featurePath =
    /* istanbul ignore next */
    (cov_dx6ttxvus().s[32]++, join(this.specsDirectory, featureName));
    const requirementsPath =
    /* istanbul ignore next */
    (cov_dx6ttxvus().s[33]++, join(featurePath, 'requirements.md'));
    const requirementsContent =
    /* istanbul ignore next */
    (cov_dx6ttxvus().s[34]++, await readFile(requirementsPath, 'utf8'));
    // Submit design generation task with consensus requirement
    const designTask =
    /* istanbul ignore next */
    (cov_dx6ttxvus().s[35]++, {
      description: `Generate comprehensive technical design for ${featureName}`,
      priority: 'high',
      strategy: 'parallel',
      // Multiple design_architect agents work in parallel
      requiredCapabilities: ['system_design', 'architecture', 'specs_driven_design'],
      requireConsensus: this.config.enableConsensusValidation,
      maxAgents: 2,
      // Use both design_architect agents
      metadata: {
        maestroFeature: featureName,
        maestroPhase: 'Research & Design',
        requirements: requirementsContent,
        outputFile: join(featurePath, 'design.md')
      }
    });
    // Native SwarmOrchestrator handles parallel execution and consensus
    const task =
    /* istanbul ignore next */
    (cov_dx6ttxvus().s[36]++, await this.hiveMind.submitTask(designTask));
    /* istanbul ignore next */
    cov_dx6ttxvus().s[37]++;
    await this.waitForTaskCompletion(task.id, 300000); // 5 minutes
    // Update workflow state
    /* istanbul ignore next */
    cov_dx6ttxvus().s[38]++;
    state.currentPhase = 'Research & Design';
    /* istanbul ignore next */
    cov_dx6ttxvus().s[39]++;
    state.lastActivity = new Date();
    /* istanbul ignore next */
    cov_dx6ttxvus().s[40]++;
    state.history.push({
      phase: 'Research & Design',
      status: 'completed',
      timestamp: new Date()
    });
    /* istanbul ignore next */
    cov_dx6ttxvus().s[41]++;
    this.logger.info(`Generated design for '${featureName}' using native swarm consensus`);
    /* istanbul ignore next */
    cov_dx6ttxvus().s[42]++;
    this.eventBus.emit('maestro:design_generated', {
      featureName
    });
  }
  /**
   * Generate tasks using native task_planner agent
   */
  async generateTasks(featureName) {
    /* istanbul ignore next */
    cov_dx6ttxvus().f[4]++;
    const state =
    /* istanbul ignore next */
    (cov_dx6ttxvus().s[43]++, this.maestroState.get(featureName));
    /* istanbul ignore next */
    cov_dx6ttxvus().s[44]++;
    if (!state) {
      /* istanbul ignore next */
      cov_dx6ttxvus().b[5][0]++;
      cov_dx6ttxvus().s[45]++;
      throw new SystemError(`No workflow state found for '${featureName}'`);
    } else
    /* istanbul ignore next */
    {
      cov_dx6ttxvus().b[5][1]++;
    }
    const featurePath =
    /* istanbul ignore next */
    (cov_dx6ttxvus().s[46]++, join(this.specsDirectory, featureName));
    const designPath =
    /* istanbul ignore next */
    (cov_dx6ttxvus().s[47]++, join(featurePath, 'design.md'));
    const designContent =
    /* istanbul ignore next */
    (cov_dx6ttxvus().s[48]++, await readFile(designPath, 'utf8'));
    // Submit task planning to native task_planner agent
    const taskPlanningTask =
    /* istanbul ignore next */
    (cov_dx6ttxvus().s[49]++, {
      description: `Generate implementation task breakdown for ${featureName}`,
      priority: 'high',
      strategy: 'sequential',
      requiredCapabilities: ['task_management', 'workflow_orchestration'],
      metadata: {
        maestroFeature: featureName,
        maestroPhase: 'Implementation Planning',
        designContent,
        outputFile: join(featurePath, 'tasks.md')
      }
    });
    const task =
    /* istanbul ignore next */
    (cov_dx6ttxvus().s[50]++, await this.hiveMind.submitTask(taskPlanningTask));
    /* istanbul ignore next */
    cov_dx6ttxvus().s[51]++;
    await this.waitForTaskCompletion(task.id, 180000); // 3 minutes
    // Update workflow state
    /* istanbul ignore next */
    cov_dx6ttxvus().s[52]++;
    state.currentPhase = 'Implementation Planning';
    /* istanbul ignore next */
    cov_dx6ttxvus().s[53]++;
    state.lastActivity = new Date();
    /* istanbul ignore next */
    cov_dx6ttxvus().s[54]++;
    state.history.push({
      phase: 'Implementation Planning',
      status: 'completed',
      timestamp: new Date()
    });
    /* istanbul ignore next */
    cov_dx6ttxvus().s[55]++;
    this.logger.info(`Generated tasks for '${featureName}' using native swarm planner`);
    /* istanbul ignore next */
    cov_dx6ttxvus().s[56]++;
    this.eventBus.emit('maestro:tasks_generated', {
      featureName
    });
  }
  /**
   * Implement task using native implementation_coder agents
   */
  async implementTask(featureName, taskId) {
    /* istanbul ignore next */
    cov_dx6ttxvus().f[5]++;
    const state =
    /* istanbul ignore next */
    (cov_dx6ttxvus().s[57]++, this.maestroState.get(featureName));
    /* istanbul ignore next */
    cov_dx6ttxvus().s[58]++;
    if (!state) {
      /* istanbul ignore next */
      cov_dx6ttxvus().b[6][0]++;
      cov_dx6ttxvus().s[59]++;
      throw new SystemError(`No workflow state found for '${featureName}'`);
    } else
    /* istanbul ignore next */
    {
      cov_dx6ttxvus().b[6][1]++;
    }
    const featurePath =
    /* istanbul ignore next */
    (cov_dx6ttxvus().s[60]++, join(this.specsDirectory, featureName));
    const tasksPath =
    /* istanbul ignore next */
    (cov_dx6ttxvus().s[61]++, join(featurePath, 'tasks.md'));
    const tasksContent =
    /* istanbul ignore next */
    (cov_dx6ttxvus().s[62]++, await readFile(tasksPath, 'utf8'));
    // Parse task description
    const taskLines =
    /* istanbul ignore next */
    (cov_dx6ttxvus().s[63]++, tasksContent.split('\n').filter(line => {
      /* istanbul ignore next */
      cov_dx6ttxvus().f[6]++;
      cov_dx6ttxvus().s[64]++;
      return /* istanbul ignore next */(cov_dx6ttxvus().b[7][0]++, line.startsWith('- [ ]')) ||
      /* istanbul ignore next */
      (cov_dx6ttxvus().b[7][1]++, line.startsWith('- [x]'));
    }));
    /* istanbul ignore next */
    cov_dx6ttxvus().s[65]++;
    if (
    /* istanbul ignore next */
    (cov_dx6ttxvus().b[9][0]++, taskId < 1) ||
    /* istanbul ignore next */
    (cov_dx6ttxvus().b[9][1]++, taskId > taskLines.length)) {
      /* istanbul ignore next */
      cov_dx6ttxvus().b[8][0]++;
      cov_dx6ttxvus().s[66]++;
      throw new SystemError(`Invalid task ID ${taskId} for feature '${featureName}'`);
    } else
    /* istanbul ignore next */
    {
      cov_dx6ttxvus().b[8][1]++;
    }
    const taskDescription =
    /* istanbul ignore next */
    (cov_dx6ttxvus().s[67]++, taskLines[taskId - 1].substring(taskLines[taskId - 1].indexOf(']') + 2).trim());
    // Submit implementation task to native coders
    const implementationTask =
    /* istanbul ignore next */
    (cov_dx6ttxvus().s[68]++, {
      description: `Implement task: ${taskDescription}`,
      priority: 'high',
      strategy: 'parallel',
      // Multiple implementation_coder agents can work
      requiredCapabilities: ['code_generation', 'implementation'],
      maxAgents: 2,
      metadata: {
        maestroFeature: featureName,
        maestroPhase: 'Task Execution',
        taskId,
        taskDescription,
        steeringContext: await this.getSteeringContext()
      }
    });
    const task =
    /* istanbul ignore next */
    (cov_dx6ttxvus().s[69]++, await this.hiveMind.submitTask(implementationTask));
    /* istanbul ignore next */
    cov_dx6ttxvus().s[70]++;
    await this.waitForTaskCompletion(task.id, 600000); // 10 minutes
    // Mark task as completed in tasks.md
    const updatedTasksContent =
    /* istanbul ignore next */
    (cov_dx6ttxvus().s[71]++, tasksContent.replace(taskLines[taskId - 1], taskLines[taskId - 1].replace('- [ ]', '- [x]')));
    /* istanbul ignore next */
    cov_dx6ttxvus().s[72]++;
    await writeFile(tasksPath, updatedTasksContent, 'utf8');
    // Update workflow state
    /* istanbul ignore next */
    cov_dx6ttxvus().s[73]++;
    state.currentPhase = 'Task Execution';
    /* istanbul ignore next */
    cov_dx6ttxvus().s[74]++;
    state.currentTaskIndex = taskId;
    /* istanbul ignore next */
    cov_dx6ttxvus().s[75]++;
    state.lastActivity = new Date();
    /* istanbul ignore next */
    cov_dx6ttxvus().s[76]++;
    this.logger.info(`Implemented task ${taskId} for '${featureName}' using native swarm`);
    /* istanbul ignore next */
    cov_dx6ttxvus().s[77]++;
    this.eventBus.emit('maestro:task_implemented', {
      featureName,
      taskId,
      taskDescription
    });
  }
  /**
   * Approve workflow phase with optional consensus
   */
  async approvePhase(featureName) {
    /* istanbul ignore next */
    cov_dx6ttxvus().f[7]++;
    const state =
    /* istanbul ignore next */
    (cov_dx6ttxvus().s[78]++, this.maestroState.get(featureName));
    /* istanbul ignore next */
    cov_dx6ttxvus().s[79]++;
    if (!state) {
      /* istanbul ignore next */
      cov_dx6ttxvus().b[10][0]++;
      cov_dx6ttxvus().s[80]++;
      throw new SystemError(`No workflow state found for '${featureName}'`);
    } else
    /* istanbul ignore next */
    {
      cov_dx6ttxvus().b[10][1]++;
    }
    // Use native consensus if enabled
    cov_dx6ttxvus().s[81]++;
    if (this.config.enableConsensusValidation) {
      /* istanbul ignore next */
      cov_dx6ttxvus().b[11][0]++;
      const consensusProposal =
      /* istanbul ignore next */
      (cov_dx6ttxvus().s[82]++, {
        id: `maestro-phase-approval-${featureName}-${Date.now()}`,
        swarmId: this.hiveMind.id,
        proposal: {
          action: 'approve_phase',
          featureName,
          currentPhase: state.currentPhase,
          details: `Approve completion of ${state.currentPhase} phase for ${featureName}`
        },
        requiredThreshold: 0.66,
        deadline: new Date(Date.now() + 300000),
        // 5 minutes
        taskId: `maestro-approval-${featureName}`,
        metadata: {
          type: 'phase_approval',
          featureName,
          phase: state.currentPhase
        }
      });
      // Submit for consensus validation
      const consensusEngine =
      /* istanbul ignore next */
      (cov_dx6ttxvus().s[83]++, this.hiveMind.consensus);
      const proposalId =
      /* istanbul ignore next */
      (cov_dx6ttxvus().s[84]++, await consensusEngine.createProposal(consensusProposal));
      const consensusResult =
      /* istanbul ignore next */
      (cov_dx6ttxvus().s[85]++, await this.waitForConsensusResult(proposalId, 300000));
      /* istanbul ignore next */
      cov_dx6ttxvus().s[86]++;
      if (!consensusResult.achieved) {
        /* istanbul ignore next */
        cov_dx6ttxvus().b[12][0]++;
        cov_dx6ttxvus().s[87]++;
        throw new SystemError(`Phase approval consensus failed: ${consensusResult.reason}`);
      } else
      /* istanbul ignore next */
      {
        cov_dx6ttxvus().b[12][1]++;
      }
    } else
    /* istanbul ignore next */
    {
      cov_dx6ttxvus().b[11][1]++;
    }
    // Progress to next phase
    const phaseProgression =
    /* istanbul ignore next */
    (cov_dx6ttxvus().s[88]++, {
      'Requirements Clarification': 'Research & Design',
      'Research & Design': 'Implementation Planning',
      'Implementation Planning': 'Task Execution',
      'Task Execution': 'Completed'
    });
    const nextPhase =
    /* istanbul ignore next */
    (cov_dx6ttxvus().s[89]++, phaseProgression[state.currentPhase]);
    /* istanbul ignore next */
    cov_dx6ttxvus().s[90]++;
    if (nextPhase) {
      /* istanbul ignore next */
      cov_dx6ttxvus().b[13][0]++;
      cov_dx6ttxvus().s[91]++;
      state.currentPhase = nextPhase;
      /* istanbul ignore next */
      cov_dx6ttxvus().s[92]++;
      state.lastActivity = new Date();
      /* istanbul ignore next */
      cov_dx6ttxvus().s[93]++;
      state.history.push({
        phase: nextPhase,
        status: 'approved',
        timestamp: new Date()
      });
    } else
    /* istanbul ignore next */
    {
      cov_dx6ttxvus().b[13][1]++;
    }
    cov_dx6ttxvus().s[94]++;
    this.logger.info(`Approved phase transition for '${featureName}': ${state.currentPhase} -> ${nextPhase}`);
    /* istanbul ignore next */
    cov_dx6ttxvus().s[95]++;
    this.eventBus.emit('maestro:phase_approved', {
      featureName,
      nextPhase
    });
  }
  /**
   * Get workflow state
   */
  getWorkflowState(featureName) {
    /* istanbul ignore next */
    cov_dx6ttxvus().f[8]++;
    cov_dx6ttxvus().s[96]++;
    return this.maestroState.get(featureName);
  }
  /**
   * Create steering document in native swarm memory
   */
  async createSteeringDocument(domain, content) {
    /* istanbul ignore next */
    cov_dx6ttxvus().f[9]++;
    cov_dx6ttxvus().s[97]++;
    if (!this.config.enableSteeringIntegration) {
      /* istanbul ignore next */
      cov_dx6ttxvus().b[14][0]++;
      cov_dx6ttxvus().s[98]++;
      throw new SystemError('Steering integration is disabled');
    } else
    /* istanbul ignore next */
    {
      cov_dx6ttxvus().b[14][1]++;
    }
    // Store in native hive mind memory instead of files
    cov_dx6ttxvus().s[99]++;
    await this.hiveMind.memory.store(`steering/${domain}`, {
      content,
      domain,
      lastUpdated: new Date(),
      maintainer: 'steering_documenter'
    });
    // Notify all agents through native communication
    /* istanbul ignore next */
    cov_dx6ttxvus().s[100]++;
    await this.hiveMind.communication.broadcast({
      type: 'steering_update',
      domain,
      content: content.substring(0, 200) + '...' // Summary for notification
    });
    /* istanbul ignore next */
    cov_dx6ttxvus().s[101]++;
    this.logger.info(`Created steering document for '${domain}' in swarm memory`);
  }
  /**
   * Get steering context from swarm memory
   */
  async getSteeringContext() {
    /* istanbul ignore next */
    cov_dx6ttxvus().f[10]++;
    cov_dx6ttxvus().s[102]++;
    if (!this.config.enableSteeringIntegration) {
      /* istanbul ignore next */
      cov_dx6ttxvus().b[15][0]++;
      cov_dx6ttxvus().s[103]++;
      return 'No steering context available.';
    } else
    /* istanbul ignore next */
    {
      cov_dx6ttxvus().b[15][1]++;
    }
    cov_dx6ttxvus().s[104]++;
    try {
      // Retrieve all steering documents from swarm memory
      const steeringKeys =
      /* istanbul ignore next */
      (cov_dx6ttxvus().s[105]++, await this.hiveMind.memory.search('steering/*'));
      const steeringDocs =
      /* istanbul ignore next */
      (cov_dx6ttxvus().s[106]++, await Promise.all(steeringKeys.map(key => {
        /* istanbul ignore next */
        cov_dx6ttxvus().f[11]++;
        cov_dx6ttxvus().s[107]++;
        return this.hiveMind.memory.retrieve(key);
      })));
      /* istanbul ignore next */
      cov_dx6ttxvus().s[108]++;
      return steeringDocs.filter(doc => {
        /* istanbul ignore next */
        cov_dx6ttxvus().f[12]++;
        cov_dx6ttxvus().s[109]++;
        return doc;
      }).map(doc => {
        /* istanbul ignore next */
        cov_dx6ttxvus().f[13]++;
        cov_dx6ttxvus().s[110]++;
        return `## ${doc.domain}\n${doc.content}`;
      }).join('\n\n---\n\n');
    } catch (error) {
      /* istanbul ignore next */
      cov_dx6ttxvus().s[111]++;
      this.logger.warn(`Failed to retrieve steering context: ${error instanceof Error ?
      /* istanbul ignore next */
      (cov_dx6ttxvus().b[16][0]++, error.message) :
      /* istanbul ignore next */
      (cov_dx6ttxvus().b[16][1]++, String(error))}`);
      /* istanbul ignore next */
      cov_dx6ttxvus().s[112]++;
      return 'Steering context temporarily unavailable.';
    }
  }
  /**
   * Initialize steering documents in swarm memory
   */
  async initializeSteeringMemory() {
    /* istanbul ignore next */
    cov_dx6ttxvus().f[14]++;
    // Initialize default steering documents in memory
    const defaultSteering =
    /* istanbul ignore next */
    (cov_dx6ttxvus().s[113]++, {
      'product': 'Focus on user value and clear requirements specification.',
      'tech': 'Follow clean architecture patterns and maintainable code practices.',
      'workflow': 'Use specs-driven development with clear phase progression.'
    });
    /* istanbul ignore next */
    cov_dx6ttxvus().s[114]++;
    for (const [domain, content] of Object.entries(defaultSteering)) {
      /* istanbul ignore next */
      cov_dx6ttxvus().s[115]++;
      await this.hiveMind.memory.store(`steering/${domain}`, {
        content,
        domain,
        lastUpdated: new Date(),
        maintainer: 'system'
      });
    }
    /* istanbul ignore next */
    cov_dx6ttxvus().s[116]++;
    this.logger.info('Initialized default steering documents in swarm memory');
  }
  /**
   * Wait for task completion using native swarm tracking
   */
  async waitForTaskCompletion(taskId, timeoutMs) {
    /* istanbul ignore next */
    cov_dx6ttxvus().f[15]++;
    cov_dx6ttxvus().s[117]++;
    return new Promise((resolve, reject) => {
      /* istanbul ignore next */
      cov_dx6ttxvus().f[16]++;
      const timeout =
      /* istanbul ignore next */
      (cov_dx6ttxvus().s[118]++, setTimeout(() => {
        /* istanbul ignore next */
        cov_dx6ttxvus().f[17]++;
        cov_dx6ttxvus().s[119]++;
        reject(new Error(`Task timeout: ${taskId}`));
      }, timeoutMs));
      const checkInterval =
      /* istanbul ignore next */
      (cov_dx6ttxvus().s[120]++, setInterval(async () => {
        /* istanbul ignore next */
        cov_dx6ttxvus().f[18]++;
        cov_dx6ttxvus().s[121]++;
        try {
          const task =
          /* istanbul ignore next */
          (cov_dx6ttxvus().s[122]++, await this.hiveMind.getTask(taskId));
          /* istanbul ignore next */
          cov_dx6ttxvus().s[123]++;
          if (task.status === 'completed') {
            /* istanbul ignore next */
            cov_dx6ttxvus().b[17][0]++;
            cov_dx6ttxvus().s[124]++;
            clearTimeout(timeout);
            /* istanbul ignore next */
            cov_dx6ttxvus().s[125]++;
            clearInterval(checkInterval);
            /* istanbul ignore next */
            cov_dx6ttxvus().s[126]++;
            resolve(task.result ?
            /* istanbul ignore next */
            (cov_dx6ttxvus().b[18][0]++, JSON.parse(task.result)) :
            /* istanbul ignore next */
            (cov_dx6ttxvus().b[18][1]++, {}));
          } else {
            /* istanbul ignore next */
            cov_dx6ttxvus().b[17][1]++;
            cov_dx6ttxvus().s[127]++;
            if (task.status === 'failed') {
              /* istanbul ignore next */
              cov_dx6ttxvus().b[19][0]++;
              cov_dx6ttxvus().s[128]++;
              clearTimeout(timeout);
              /* istanbul ignore next */
              cov_dx6ttxvus().s[129]++;
              clearInterval(checkInterval);
              /* istanbul ignore next */
              cov_dx6ttxvus().s[130]++;
              reject(new Error(`Task failed: ${
              /* istanbul ignore next */
              (cov_dx6ttxvus().b[20][0]++, task.error) ||
              /* istanbul ignore next */
              (cov_dx6ttxvus().b[20][1]++, 'Unknown error')}`));
            } else
            /* istanbul ignore next */
            {
              cov_dx6ttxvus().b[19][1]++;
            }
          }
        } catch (error) {
          /* istanbul ignore next */
          cov_dx6ttxvus().s[131]++;
          clearTimeout(timeout);
          /* istanbul ignore next */
          cov_dx6ttxvus().s[132]++;
          clearInterval(checkInterval);
          /* istanbul ignore next */
          cov_dx6ttxvus().s[133]++;
          reject(error);
        }
      }, 2000));
    });
  }
  /**
   * Wait for consensus result using native ConsensusEngine
   */
  async waitForConsensusResult(proposalId, timeoutMs) {
    /* istanbul ignore next */
    cov_dx6ttxvus().f[19]++;
    cov_dx6ttxvus().s[134]++;
    return new Promise((resolve, reject) => {
      /* istanbul ignore next */
      cov_dx6ttxvus().f[20]++;
      const timeout =
      /* istanbul ignore next */
      (cov_dx6ttxvus().s[135]++, setTimeout(() => {
        /* istanbul ignore next */
        cov_dx6ttxvus().f[21]++;
        cov_dx6ttxvus().s[136]++;
        reject(new Error(`Consensus timeout for proposal ${proposalId}`));
      }, timeoutMs));
      const checkInterval =
      /* istanbul ignore next */
      (cov_dx6ttxvus().s[137]++, setInterval(async () => {
        /* istanbul ignore next */
        cov_dx6ttxvus().f[22]++;
        cov_dx6ttxvus().s[138]++;
        try {
          const consensusEngine =
          /* istanbul ignore next */
          (cov_dx6ttxvus().s[139]++, this.hiveMind.consensus);
          const status =
          /* istanbul ignore next */
          (cov_dx6ttxvus().s[140]++, await consensusEngine.getProposalStatus(proposalId));
          /* istanbul ignore next */
          cov_dx6ttxvus().s[141]++;
          if (status.status === 'achieved') {
            /* istanbul ignore next */
            cov_dx6ttxvus().b[21][0]++;
            cov_dx6ttxvus().s[142]++;
            clearTimeout(timeout);
            /* istanbul ignore next */
            cov_dx6ttxvus().s[143]++;
            clearInterval(checkInterval);
            /* istanbul ignore next */
            cov_dx6ttxvus().s[144]++;
            resolve({
              achieved: true,
              finalRatio: status.currentRatio,
              reason: 'Consensus achieved'
            });
          } else {
            /* istanbul ignore next */
            cov_dx6ttxvus().b[21][1]++;
            cov_dx6ttxvus().s[145]++;
            if (status.status === 'failed') {
              /* istanbul ignore next */
              cov_dx6ttxvus().b[22][0]++;
              cov_dx6ttxvus().s[146]++;
              clearTimeout(timeout);
              /* istanbul ignore next */
              cov_dx6ttxvus().s[147]++;
              clearInterval(checkInterval);
              /* istanbul ignore next */
              cov_dx6ttxvus().s[148]++;
              resolve({
                achieved: false,
                finalRatio: status.currentRatio,
                reason: 'Consensus failed'
              });
            } else
            /* istanbul ignore next */
            {
              cov_dx6ttxvus().b[22][1]++;
            }
          }
        } catch (error) {
          /* istanbul ignore next */
          cov_dx6ttxvus().s[149]++;
          clearTimeout(timeout);
          /* istanbul ignore next */
          cov_dx6ttxvus().s[150]++;
          clearInterval(checkInterval);
          /* istanbul ignore next */
          cov_dx6ttxvus().s[151]++;
          reject(error);
        }
      }, 1000));
    });
  }
  /**
   * Setup event handlers
   */
  setupEventHandlers() {
    /* istanbul ignore next */
    cov_dx6ttxvus().f[23]++;
    cov_dx6ttxvus().s[152]++;
    this.eventBus.on('maestro:spec_created', this.handleSpecCreated.bind(this));
    /* istanbul ignore next */
    cov_dx6ttxvus().s[153]++;
    this.eventBus.on('maestro:phase_approved', this.handlePhaseApproved.bind(this));
    /* istanbul ignore next */
    cov_dx6ttxvus().s[154]++;
    this.eventBus.on('maestro:task_implemented', this.handleTaskImplemented.bind(this));
  }
  /**
   * Event handlers
   */
  async handleSpecCreated(data) {
    /* istanbul ignore next */
    cov_dx6ttxvus().f[24]++;
    cov_dx6ttxvus().s[155]++;
    this.logger.info(`Spec created via native swarm: ${JSON.stringify(data)}`);
  }
  async handlePhaseApproved(data) {
    /* istanbul ignore next */
    cov_dx6ttxvus().f[25]++;
    cov_dx6ttxvus().s[156]++;
    this.logger.info(`Phase approved via native consensus: ${JSON.stringify(data)}`);
  }
  async handleTaskImplemented(data) {
    /* istanbul ignore next */
    cov_dx6ttxvus().f[26]++;
    cov_dx6ttxvus().s[157]++;
    this.logger.info(`Task implemented via native swarm: ${JSON.stringify(data)}`);
  }
  /**
   * Shutdown coordinator and native swarm
   */
  async shutdown() {
    /* istanbul ignore next */
    cov_dx6ttxvus().f[27]++;
    cov_dx6ttxvus().s[158]++;
    this.logger.info('Shutting down MaestroSwarmCoordinator');
    /* istanbul ignore next */
    cov_dx6ttxvus().s[159]++;
    if (this.hiveMind) {
      /* istanbul ignore next */
      cov_dx6ttxvus().b[23][0]++;
      cov_dx6ttxvus().s[160]++;
      await this.hiveMind.shutdown();
      /* istanbul ignore next */
      cov_dx6ttxvus().s[161]++;
      this.logger.info('Native hive mind swarm shutdown complete');
    } else
    /* istanbul ignore next */
    {
      cov_dx6ttxvus().b[23][1]++;
    }
    cov_dx6ttxvus().s[162]++;
    this.logger.info('MaestroSwarmCoordinator shutdown complete');
  }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJFdmVudEVtaXR0ZXIiLCJqb2luIiwicmVhZEZpbGUiLCJ3cml0ZUZpbGUiLCJta2RpciIsIkhpdmVNaW5kIiwiU3lzdGVtRXJyb3IiLCJNYWVzdHJvU3dhcm1Db29yZGluYXRvciIsImNvbmZpZyIsImV2ZW50QnVzIiwibG9nZ2VyIiwiaGl2ZU1pbmQiLCJtYWVzdHJvU3RhdGUiLCJjb3ZfZHg2dHR4dnVzIiwicyIsIk1hcCIsInNwZWNzRGlyZWN0b3J5Iiwic3RlZXJpbmdEaXJlY3RvcnkiLCJjb25zdHJ1Y3RvciIsImYiLCJiIiwicHJvY2VzcyIsImN3ZCIsInNldHVwRXZlbnRIYW5kbGVycyIsImluZm8iLCJpbml0aWFsaXplIiwiaGl2ZU1pbmRDb25maWciLCJuYW1lIiwidG9wb2xvZ3kiLCJxdWVlbk1vZGUiLCJtYXhBZ2VudHMiLCJjb25zZW5zdXNUaHJlc2hvbGQiLCJtZW1vcnlUVEwiLCJhdXRvU3Bhd24iLCJlbmFibGVDb25zZW5zdXMiLCJlbmFibGVDb25zZW5zdXNWYWxpZGF0aW9uIiwiZW5hYmxlTWVtb3J5IiwiZW5hYmxlQ29tbXVuaWNhdGlvbiIsInN3YXJtSWQiLCJlbmFibGVTdGVlcmluZ0ludGVncmF0aW9uIiwiaW5pdGlhbGl6ZVN0ZWVyaW5nTWVtb3J5IiwiZW1pdCIsImVycm9yIiwiRXJyb3IiLCJtZXNzYWdlIiwiU3RyaW5nIiwiY3JlYXRlU3BlYyIsImZlYXR1cmVOYW1lIiwiaW5pdGlhbFJlcXVlc3QiLCJmZWF0dXJlUGF0aCIsInJlY3Vyc2l2ZSIsIndvcmtmbG93U3RhdGUiLCJjdXJyZW50UGhhc2UiLCJjdXJyZW50VGFza0luZGV4Iiwic3RhdHVzIiwibGFzdEFjdGl2aXR5IiwiRGF0ZSIsImhpc3RvcnkiLCJwaGFzZSIsInRpbWVzdGFtcCIsInNldCIsInJlcXVpcmVtZW50c1Rhc2siLCJkZXNjcmlwdGlvbiIsInByaW9yaXR5Iiwic3RyYXRlZ3kiLCJyZXF1aXJlZENhcGFiaWxpdGllcyIsIm1ldGFkYXRhIiwibWFlc3Ryb0ZlYXR1cmUiLCJtYWVzdHJvUGhhc2UiLCJvdXRwdXRGaWxlIiwidGFzayIsInN1Ym1pdFRhc2siLCJ3YWl0Rm9yVGFza0NvbXBsZXRpb24iLCJpZCIsImdlbmVyYXRlRGVzaWduIiwic3RhdGUiLCJnZXQiLCJyZXF1aXJlbWVudHNQYXRoIiwicmVxdWlyZW1lbnRzQ29udGVudCIsImRlc2lnblRhc2siLCJyZXF1aXJlQ29uc2Vuc3VzIiwicmVxdWlyZW1lbnRzIiwicHVzaCIsImdlbmVyYXRlVGFza3MiLCJkZXNpZ25QYXRoIiwiZGVzaWduQ29udGVudCIsInRhc2tQbGFubmluZ1Rhc2siLCJpbXBsZW1lbnRUYXNrIiwidGFza0lkIiwidGFza3NQYXRoIiwidGFza3NDb250ZW50IiwidGFza0xpbmVzIiwic3BsaXQiLCJmaWx0ZXIiLCJsaW5lIiwic3RhcnRzV2l0aCIsImxlbmd0aCIsInRhc2tEZXNjcmlwdGlvbiIsInN1YnN0cmluZyIsImluZGV4T2YiLCJ0cmltIiwiaW1wbGVtZW50YXRpb25UYXNrIiwic3RlZXJpbmdDb250ZXh0IiwiZ2V0U3RlZXJpbmdDb250ZXh0IiwidXBkYXRlZFRhc2tzQ29udGVudCIsInJlcGxhY2UiLCJhcHByb3ZlUGhhc2UiLCJjb25zZW5zdXNQcm9wb3NhbCIsIm5vdyIsInByb3Bvc2FsIiwiYWN0aW9uIiwiZGV0YWlscyIsInJlcXVpcmVkVGhyZXNob2xkIiwiZGVhZGxpbmUiLCJ0eXBlIiwiY29uc2Vuc3VzRW5naW5lIiwiY29uc2Vuc3VzIiwicHJvcG9zYWxJZCIsImNyZWF0ZVByb3Bvc2FsIiwiY29uc2Vuc3VzUmVzdWx0Iiwid2FpdEZvckNvbnNlbnN1c1Jlc3VsdCIsImFjaGlldmVkIiwicmVhc29uIiwicGhhc2VQcm9ncmVzc2lvbiIsIm5leHRQaGFzZSIsImdldFdvcmtmbG93U3RhdGUiLCJjcmVhdGVTdGVlcmluZ0RvY3VtZW50IiwiZG9tYWluIiwiY29udGVudCIsIm1lbW9yeSIsInN0b3JlIiwibGFzdFVwZGF0ZWQiLCJtYWludGFpbmVyIiwiY29tbXVuaWNhdGlvbiIsImJyb2FkY2FzdCIsInN0ZWVyaW5nS2V5cyIsInNlYXJjaCIsInN0ZWVyaW5nRG9jcyIsIlByb21pc2UiLCJhbGwiLCJtYXAiLCJrZXkiLCJyZXRyaWV2ZSIsImRvYyIsIndhcm4iLCJkZWZhdWx0U3RlZXJpbmciLCJPYmplY3QiLCJlbnRyaWVzIiwidGltZW91dE1zIiwicmVzb2x2ZSIsInJlamVjdCIsInRpbWVvdXQiLCJzZXRUaW1lb3V0IiwiY2hlY2tJbnRlcnZhbCIsInNldEludGVydmFsIiwiZ2V0VGFzayIsImNsZWFyVGltZW91dCIsImNsZWFySW50ZXJ2YWwiLCJyZXN1bHQiLCJKU09OIiwicGFyc2UiLCJnZXRQcm9wb3NhbFN0YXR1cyIsImZpbmFsUmF0aW8iLCJjdXJyZW50UmF0aW8iLCJvbiIsImhhbmRsZVNwZWNDcmVhdGVkIiwiYmluZCIsImhhbmRsZVBoYXNlQXBwcm92ZWQiLCJoYW5kbGVUYXNrSW1wbGVtZW50ZWQiLCJkYXRhIiwic3RyaW5naWZ5Iiwic2h1dGRvd24iXSwic291cmNlcyI6WyIvaG9tZS9taHVnby9jb2RlL2NsYXVkZS1jb2RlLWZsb3cvc3JjL21hZXN0cm8vbWFlc3Ryby1zd2FybS1jb29yZGluYXRvci50cyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIE1hZXN0cm9Td2FybUNvb3JkaW5hdG9yIC0gTmF0aXZlIEhpdmUgTWluZCBJbXBsZW1lbnRhdGlvblxuICogXG4gKiBSZXBsYWNlcyBNYWVzdHJvT3JjaGVzdHJhdG9yIHdpdGggbmF0aXZlIGhpdmUgbWluZCBzd2FybSBjb29yZGluYXRpb24uXG4gKiBVc2VzIHNwZWNzLWRyaXZlbiB0b3BvbG9neSBhbmQgU3dhcm1PcmNoZXN0cmF0b3IgZm9yIGFsbCB0YXNrIG1hbmFnZW1lbnQuXG4gKiBFbGltaW5hdGVzIGR1YWwgYWdlbnQgc3lzdGVtcyBhbmQgbGV2ZXJhZ2VzIGNvbGxlY3RpdmUgaW50ZWxsaWdlbmNlLlxuICovXG5cbmltcG9ydCB7IEV2ZW50RW1pdHRlciB9IGZyb20gJ2V2ZW50cyc7XG5pbXBvcnQgeyBqb2luIH0gZnJvbSAncGF0aCc7XG5pbXBvcnQgeyByZWFkRmlsZSwgd3JpdGVGaWxlLCBta2RpciB9IGZyb20gJ2ZzL3Byb21pc2VzJztcblxuLy8gTmF0aXZlIGhpdmUgbWluZCBjb21wb25lbnRzXG5pbXBvcnQgeyBIaXZlTWluZCB9IGZyb20gJy4uL2hpdmUtbWluZC9jb3JlL0hpdmVNaW5kLmpzJztcbmltcG9ydCB7IEFnZW50IH0gZnJvbSAnLi4vaGl2ZS1taW5kL2NvcmUvQWdlbnQuanMnO1xuaW1wb3J0IHsgQ29uc2Vuc3VzRW5naW5lIH0gZnJvbSAnLi4vaGl2ZS1taW5kL2ludGVncmF0aW9uL0NvbnNlbnN1c0VuZ2luZS5qcyc7XG5pbXBvcnQgeyBTd2FybU9yY2hlc3RyYXRvciB9IGZyb20gJy4uL2hpdmUtbWluZC9pbnRlZ3JhdGlvbi9Td2FybU9yY2hlc3RyYXRvci5qcyc7XG5pbXBvcnQge1xuICBIaXZlTWluZENvbmZpZyxcbiAgVGFza1N1Ym1pdE9wdGlvbnMsXG4gIEFnZW50Q2FwYWJpbGl0eSxcbiAgVGFzayxcbiAgQ29uc2Vuc3VzUHJvcG9zYWxcbn0gZnJvbSAnLi4vaGl2ZS1taW5kL3R5cGVzLmpzJztcblxuLy8gQ29yZSBpbmZyYXN0cnVjdHVyZVxuaW1wb3J0IHsgSUV2ZW50QnVzIH0gZnJvbSAnLi4vY29yZS9ldmVudC1idXMuanMnO1xuaW1wb3J0IHsgSUxvZ2dlciB9IGZyb20gJy4uL2NvcmUvbG9nZ2VyLmpzJztcbmltcG9ydCB7IFN5c3RlbUVycm9yIH0gZnJvbSAnLi4vdXRpbHMvZXJyb3JzLmpzJztcblxuLy8gTWFlc3RybyB0eXBlc1xuaW1wb3J0IHtcbiAgTWFlc3Ryb1dvcmtmbG93U3RhdGUsXG4gIFdvcmtmbG93UGhhc2UsXG4gIE1hZXN0cm9TcGVjXG59IGZyb20gJy4vbWFlc3Ryby10eXBlcy5qcyc7XG5cbmV4cG9ydCBpbnRlcmZhY2UgTWFlc3Ryb1N3YXJtQ29uZmlnIHtcbiAgLy8gTmF0aXZlIGhpdmUgbWluZCBjb25maWd1cmF0aW9uXG4gIGhpdmVNaW5kQ29uZmlnOiBIaXZlTWluZENvbmZpZztcbiAgXG4gIC8vIE1hZXN0cm8tc3BlY2lmaWMgZmVhdHVyZXNcbiAgZW5hYmxlQ29uc2Vuc3VzVmFsaWRhdGlvbjogYm9vbGVhbjtcbiAgZW5hYmxlTGl2aW5nRG9jdW1lbnRhdGlvbjogYm9vbGVhbjtcbiAgZW5hYmxlU3RlZXJpbmdJbnRlZ3JhdGlvbjogYm9vbGVhbjtcbiAgXG4gIC8vIEZpbGUgc3lzdGVtIHNldHRpbmdzXG4gIHNwZWNzRGlyZWN0b3J5OiBzdHJpbmc7XG4gIHN0ZWVyaW5nRGlyZWN0b3J5OiBzdHJpbmc7XG59XG5cbi8qKlxuICogTmF0aXZlIEhpdmUgTWluZCBNYWVzdHJvIENvb3JkaW5hdG9yXG4gKiBMZXZlcmFnZXMgc3BlY3MtZHJpdmVuIHN3YXJtIHRvcG9sb2d5IGZvciBjb2xsZWN0aXZlIGludGVsbGlnZW5jZVxuICovXG5leHBvcnQgY2xhc3MgTWFlc3Ryb1N3YXJtQ29vcmRpbmF0b3IgZXh0ZW5kcyBFdmVudEVtaXR0ZXIge1xuICBwcml2YXRlIGhpdmVNaW5kOiBIaXZlTWluZDtcbiAgcHJpdmF0ZSBtYWVzdHJvU3RhdGU6IE1hcDxzdHJpbmcsIE1hZXN0cm9Xb3JrZmxvd1N0YXRlPiA9IG5ldyBNYXAoKTtcbiAgcHJpdmF0ZSBzcGVjc0RpcmVjdG9yeTogc3RyaW5nO1xuICBwcml2YXRlIHN0ZWVyaW5nRGlyZWN0b3J5OiBzdHJpbmc7XG4gIFxuICBjb25zdHJ1Y3RvcihcbiAgICBwcml2YXRlIGNvbmZpZzogTWFlc3Ryb1N3YXJtQ29uZmlnLFxuICAgIHByaXZhdGUgZXZlbnRCdXM6IElFdmVudEJ1cyxcbiAgICBwcml2YXRlIGxvZ2dlcjogSUxvZ2dlclxuICApIHtcbiAgICBzdXBlcigpO1xuICAgIFxuICAgIHRoaXMuc3BlY3NEaXJlY3RvcnkgPSBjb25maWcuc3BlY3NEaXJlY3RvcnkgfHwgam9pbihwcm9jZXNzLmN3ZCgpLCAnLmNsYXVkZScsICdjbGF1ZGUtZmxvdycsICdtYWVzdHJvJywgJ3NwZWNzJyk7XG4gICAgdGhpcy5zdGVlcmluZ0RpcmVjdG9yeSA9IGNvbmZpZy5zdGVlcmluZ0RpcmVjdG9yeSB8fCBqb2luKHByb2Nlc3MuY3dkKCksICcuY2xhdWRlJywgJ2NsYXVkZS1mbG93JywgJ21hZXN0cm8nLCAnc3RlZXJpbmcnKTtcbiAgICBcbiAgICB0aGlzLnNldHVwRXZlbnRIYW5kbGVycygpO1xuICAgIHRoaXMubG9nZ2VyLmluZm8oJ01hZXN0cm9Td2FybUNvb3JkaW5hdG9yIGluaXRpYWxpemVkIHdpdGggbmF0aXZlIGhpdmUgbWluZCcpO1xuICB9XG4gIFxuICAvKipcbiAgICogSW5pdGlhbGl6ZSB0aGUgc3BlY3MtZHJpdmVuIGhpdmUgbWluZCBzd2FybVxuICAgKi9cbiAgYXN5bmMgaW5pdGlhbGl6ZSgpOiBQcm9taXNlPHN0cmluZz4ge1xuICAgIHRyeSB7XG4gICAgICAvLyBDcmVhdGUgc3BlY3MtZHJpdmVuIGhpdmUgbWluZCB3aXRoIG5hdGl2ZSB0b3BvbG9neVxuICAgICAgY29uc3QgaGl2ZU1pbmRDb25maWc6IEhpdmVNaW5kQ29uZmlnID0ge1xuICAgICAgICBuYW1lOiAnbWFlc3Ryby1zcGVjcy1kcml2ZW4tc3dhcm0nLFxuICAgICAgICB0b3BvbG9neTogJ3NwZWNzLWRyaXZlbicsXG4gICAgICAgIHF1ZWVuTW9kZTogJ3N0cmF0ZWdpYycsXG4gICAgICAgIG1heEFnZW50czogOCxcbiAgICAgICAgY29uc2Vuc3VzVGhyZXNob2xkOiAwLjY2LFxuICAgICAgICBtZW1vcnlUVEw6IDg2NDAwMDAwLCAvLyAyNCBob3Vyc1xuICAgICAgICBhdXRvU3Bhd246IHRydWUsICAvLyBBdXRvbWF0aWNhbGx5IHNwYXduIHRvcG9sb2d5IGFnZW50c1xuICAgICAgICBlbmFibGVDb25zZW5zdXM6IHRoaXMuY29uZmlnLmVuYWJsZUNvbnNlbnN1c1ZhbGlkYXRpb24sXG4gICAgICAgIGVuYWJsZU1lbW9yeTogdHJ1ZSxcbiAgICAgICAgZW5hYmxlQ29tbXVuaWNhdGlvbjogdHJ1ZSxcbiAgICAgICAgLi4udGhpcy5jb25maWcuaGl2ZU1pbmRDb25maWdcbiAgICAgIH07XG4gICAgICBcbiAgICAgIC8vIEluaXRpYWxpemUgbmF0aXZlIGhpdmUgbWluZFxuICAgICAgdGhpcy5oaXZlTWluZCA9IG5ldyBIaXZlTWluZChoaXZlTWluZENvbmZpZyk7XG4gICAgICBjb25zdCBzd2FybUlkID0gYXdhaXQgdGhpcy5oaXZlTWluZC5pbml0aWFsaXplKCk7XG4gICAgICBcbiAgICAgIC8vIEluaXRpYWxpemUgc3RlZXJpbmcgZG9jcyBpbiBzd2FybSBtZW1vcnkgaWYgZW5hYmxlZFxuICAgICAgaWYgKHRoaXMuY29uZmlnLmVuYWJsZVN0ZWVyaW5nSW50ZWdyYXRpb24pIHtcbiAgICAgICAgYXdhaXQgdGhpcy5pbml0aWFsaXplU3RlZXJpbmdNZW1vcnkoKTtcbiAgICAgIH1cbiAgICAgIFxuICAgICAgdGhpcy5sb2dnZXIuaW5mbyhgTWFlc3RybyBzcGVjcy1kcml2ZW4gc3dhcm0gaW5pdGlhbGl6ZWQ6ICR7c3dhcm1JZH1gKTtcbiAgICAgIHRoaXMuZW1pdCgnaW5pdGlhbGl6ZWQnLCB7IHN3YXJtSWQgfSk7XG4gICAgICBcbiAgICAgIHJldHVybiBzd2FybUlkO1xuICAgICAgXG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIHRoaXMubG9nZ2VyLmVycm9yKGBGYWlsZWQgdG8gaW5pdGlhbGl6ZSBtYWVzdHJvIHN3YXJtOiAke2Vycm9yIGluc3RhbmNlb2YgRXJyb3IgPyBlcnJvci5tZXNzYWdlIDogU3RyaW5nKGVycm9yKX1gKTtcbiAgICAgIHRocm93IGVycm9yO1xuICAgIH1cbiAgfVxuICBcbiAgLyoqXG4gICAqIENyZWF0ZSBzcGVjaWZpY2F0aW9uIHVzaW5nIG5hdGl2ZSByZXF1aXJlbWVudHNfYW5hbHlzdCBhZ2VudFxuICAgKi9cbiAgYXN5bmMgY3JlYXRlU3BlYyhmZWF0dXJlTmFtZTogc3RyaW5nLCBpbml0aWFsUmVxdWVzdDogc3RyaW5nKTogUHJvbWlzZTx2b2lkPiB7XG4gICAgY29uc3QgZmVhdHVyZVBhdGggPSBqb2luKHRoaXMuc3BlY3NEaXJlY3RvcnksIGZlYXR1cmVOYW1lKTtcbiAgICBhd2FpdCBta2RpcihmZWF0dXJlUGF0aCwgeyByZWN1cnNpdmU6IHRydWUgfSk7XG4gICAgXG4gICAgLy8gSW5pdGlhbGl6ZSB3b3JrZmxvdyBzdGF0ZVxuICAgIGNvbnN0IHdvcmtmbG93U3RhdGU6IE1hZXN0cm9Xb3JrZmxvd1N0YXRlID0ge1xuICAgICAgZmVhdHVyZU5hbWUsXG4gICAgICBjdXJyZW50UGhhc2U6ICdSZXF1aXJlbWVudHMgQ2xhcmlmaWNhdGlvbicgYXMgV29ya2Zsb3dQaGFzZSxcbiAgICAgIGN1cnJlbnRUYXNrSW5kZXg6IDAsXG4gICAgICBzdGF0dXM6ICdydW5uaW5nJyxcbiAgICAgIGxhc3RBY3Rpdml0eTogbmV3IERhdGUoKSxcbiAgICAgIGhpc3Rvcnk6IFt7XG4gICAgICAgIHBoYXNlOiAnUmVxdWlyZW1lbnRzIENsYXJpZmljYXRpb24nIGFzIFdvcmtmbG93UGhhc2UsXG4gICAgICAgIHN0YXR1czogJ2luLXByb2dyZXNzJyxcbiAgICAgICAgdGltZXN0YW1wOiBuZXcgRGF0ZSgpXG4gICAgICB9XVxuICAgIH07XG4gICAgXG4gICAgdGhpcy5tYWVzdHJvU3RhdGUuc2V0KGZlYXR1cmVOYW1lLCB3b3JrZmxvd1N0YXRlKTtcbiAgICBcbiAgICAvLyBTdWJtaXQgcmVxdWlyZW1lbnRzIGFuYWx5c2lzIHRhc2sgdG8gbmF0aXZlIHN3YXJtXG4gICAgY29uc3QgcmVxdWlyZW1lbnRzVGFzazogVGFza1N1Ym1pdE9wdGlvbnMgPSB7XG4gICAgICBkZXNjcmlwdGlvbjogYEdlbmVyYXRlIGNvbXByZWhlbnNpdmUgcmVxdWlyZW1lbnRzIGZvciBmZWF0dXJlOiAke2ZlYXR1cmVOYW1lfWAsXG4gICAgICBwcmlvcml0eTogJ2hpZ2gnLFxuICAgICAgc3RyYXRlZ3k6ICdzZXF1ZW50aWFsJyxcbiAgICAgIHJlcXVpcmVkQ2FwYWJpbGl0aWVzOiBbJ3JlcXVpcmVtZW50c19hbmFseXNpcycgYXMgQWdlbnRDYXBhYmlsaXR5LCAndXNlcl9zdG9yeV9jcmVhdGlvbicgYXMgQWdlbnRDYXBhYmlsaXR5LCAnYWNjZXB0YW5jZV9jcml0ZXJpYScgYXMgQWdlbnRDYXBhYmlsaXR5XSxcbiAgICAgIG1ldGFkYXRhOiB7XG4gICAgICAgIG1hZXN0cm9GZWF0dXJlOiBmZWF0dXJlTmFtZSxcbiAgICAgICAgbWFlc3Ryb1BoYXNlOiAnUmVxdWlyZW1lbnRzIENsYXJpZmljYXRpb24nLFxuICAgICAgICBpbml0aWFsUmVxdWVzdCxcbiAgICAgICAgb3V0cHV0RmlsZTogam9pbihmZWF0dXJlUGF0aCwgJ3JlcXVpcmVtZW50cy5tZCcpXG4gICAgICB9XG4gICAgfTtcbiAgICBcbiAgICAvLyBVc2UgbmF0aXZlIFN3YXJtT3JjaGVzdHJhdG9yIHRocm91Z2ggSGl2ZU1pbmRcbiAgICBjb25zdCB0YXNrID0gYXdhaXQgdGhpcy5oaXZlTWluZC5zdWJtaXRUYXNrKHJlcXVpcmVtZW50c1Rhc2spO1xuICAgIGF3YWl0IHRoaXMud2FpdEZvclRhc2tDb21wbGV0aW9uKHRhc2suaWQsIDEyMDAwMCk7IC8vIDIgbWludXRlc1xuICAgIFxuICAgIHRoaXMubG9nZ2VyLmluZm8oYENyZWF0ZWQgc3BlY2lmaWNhdGlvbiBmb3IgJyR7ZmVhdHVyZU5hbWV9JyB1c2luZyBuYXRpdmUgc3dhcm1gKTtcbiAgICB0aGlzLmV2ZW50QnVzLmVtaXQoJ21hZXN0cm86c3BlY19jcmVhdGVkJywgeyBmZWF0dXJlTmFtZSB9KTtcbiAgfVxuICBcbiAgLyoqXG4gICAqIEdlbmVyYXRlIGRlc2lnbiB1c2luZyBuYXRpdmUgZGVzaWduX2FyY2hpdGVjdCBhZ2VudHMgd2l0aCBjb25zZW5zdXNcbiAgICovXG4gIGFzeW5jIGdlbmVyYXRlRGVzaWduKGZlYXR1cmVOYW1lOiBzdHJpbmcpOiBQcm9taXNlPHZvaWQ+IHtcbiAgICBjb25zdCBzdGF0ZSA9IHRoaXMubWFlc3Ryb1N0YXRlLmdldChmZWF0dXJlTmFtZSk7XG4gICAgaWYgKCFzdGF0ZSkge1xuICAgICAgdGhyb3cgbmV3IFN5c3RlbUVycm9yKGBObyB3b3JrZmxvdyBzdGF0ZSBmb3VuZCBmb3IgJyR7ZmVhdHVyZU5hbWV9J2ApO1xuICAgIH1cbiAgICBcbiAgICBjb25zdCBmZWF0dXJlUGF0aCA9IGpvaW4odGhpcy5zcGVjc0RpcmVjdG9yeSwgZmVhdHVyZU5hbWUpO1xuICAgIGNvbnN0IHJlcXVpcmVtZW50c1BhdGggPSBqb2luKGZlYXR1cmVQYXRoLCAncmVxdWlyZW1lbnRzLm1kJyk7XG4gICAgY29uc3QgcmVxdWlyZW1lbnRzQ29udGVudCA9IGF3YWl0IHJlYWRGaWxlKHJlcXVpcmVtZW50c1BhdGgsICd1dGY4Jyk7XG4gICAgXG4gICAgLy8gU3VibWl0IGRlc2lnbiBnZW5lcmF0aW9uIHRhc2sgd2l0aCBjb25zZW5zdXMgcmVxdWlyZW1lbnRcbiAgICBjb25zdCBkZXNpZ25UYXNrOiBUYXNrU3VibWl0T3B0aW9ucyA9IHtcbiAgICAgIGRlc2NyaXB0aW9uOiBgR2VuZXJhdGUgY29tcHJlaGVuc2l2ZSB0ZWNobmljYWwgZGVzaWduIGZvciAke2ZlYXR1cmVOYW1lfWAsXG4gICAgICBwcmlvcml0eTogJ2hpZ2gnLFxuICAgICAgc3RyYXRlZ3k6ICdwYXJhbGxlbCcsICAvLyBNdWx0aXBsZSBkZXNpZ25fYXJjaGl0ZWN0IGFnZW50cyB3b3JrIGluIHBhcmFsbGVsXG4gICAgICByZXF1aXJlZENhcGFiaWxpdGllczogWydzeXN0ZW1fZGVzaWduJyBhcyBBZ2VudENhcGFiaWxpdHksICdhcmNoaXRlY3R1cmUnIGFzIEFnZW50Q2FwYWJpbGl0eSwgJ3NwZWNzX2RyaXZlbl9kZXNpZ24nIGFzIEFnZW50Q2FwYWJpbGl0eV0sXG4gICAgICByZXF1aXJlQ29uc2Vuc3VzOiB0aGlzLmNvbmZpZy5lbmFibGVDb25zZW5zdXNWYWxpZGF0aW9uLFxuICAgICAgbWF4QWdlbnRzOiAyLCAgLy8gVXNlIGJvdGggZGVzaWduX2FyY2hpdGVjdCBhZ2VudHNcbiAgICAgIG1ldGFkYXRhOiB7XG4gICAgICAgIG1hZXN0cm9GZWF0dXJlOiBmZWF0dXJlTmFtZSxcbiAgICAgICAgbWFlc3Ryb1BoYXNlOiAnUmVzZWFyY2ggJiBEZXNpZ24nLFxuICAgICAgICByZXF1aXJlbWVudHM6IHJlcXVpcmVtZW50c0NvbnRlbnQsXG4gICAgICAgIG91dHB1dEZpbGU6IGpvaW4oZmVhdHVyZVBhdGgsICdkZXNpZ24ubWQnKVxuICAgICAgfVxuICAgIH07XG4gICAgXG4gICAgLy8gTmF0aXZlIFN3YXJtT3JjaGVzdHJhdG9yIGhhbmRsZXMgcGFyYWxsZWwgZXhlY3V0aW9uIGFuZCBjb25zZW5zdXNcbiAgICBjb25zdCB0YXNrID0gYXdhaXQgdGhpcy5oaXZlTWluZC5zdWJtaXRUYXNrKGRlc2lnblRhc2spO1xuICAgIGF3YWl0IHRoaXMud2FpdEZvclRhc2tDb21wbGV0aW9uKHRhc2suaWQsIDMwMDAwMCk7IC8vIDUgbWludXRlc1xuICAgIFxuICAgIC8vIFVwZGF0ZSB3b3JrZmxvdyBzdGF0ZVxuICAgIHN0YXRlLmN1cnJlbnRQaGFzZSA9ICdSZXNlYXJjaCAmIERlc2lnbicgYXMgV29ya2Zsb3dQaGFzZTtcbiAgICBzdGF0ZS5sYXN0QWN0aXZpdHkgPSBuZXcgRGF0ZSgpO1xuICAgIHN0YXRlLmhpc3RvcnkucHVzaCh7XG4gICAgICBwaGFzZTogJ1Jlc2VhcmNoICYgRGVzaWduJyBhcyBXb3JrZmxvd1BoYXNlLFxuICAgICAgc3RhdHVzOiAnY29tcGxldGVkJyxcbiAgICAgIHRpbWVzdGFtcDogbmV3IERhdGUoKVxuICAgIH0pO1xuICAgIFxuICAgIHRoaXMubG9nZ2VyLmluZm8oYEdlbmVyYXRlZCBkZXNpZ24gZm9yICcke2ZlYXR1cmVOYW1lfScgdXNpbmcgbmF0aXZlIHN3YXJtIGNvbnNlbnN1c2ApO1xuICAgIHRoaXMuZXZlbnRCdXMuZW1pdCgnbWFlc3RybzpkZXNpZ25fZ2VuZXJhdGVkJywgeyBmZWF0dXJlTmFtZSB9KTtcbiAgfVxuICBcbiAgLyoqXG4gICAqIEdlbmVyYXRlIHRhc2tzIHVzaW5nIG5hdGl2ZSB0YXNrX3BsYW5uZXIgYWdlbnRcbiAgICovXG4gIGFzeW5jIGdlbmVyYXRlVGFza3MoZmVhdHVyZU5hbWU6IHN0cmluZyk6IFByb21pc2U8dm9pZD4ge1xuICAgIGNvbnN0IHN0YXRlID0gdGhpcy5tYWVzdHJvU3RhdGUuZ2V0KGZlYXR1cmVOYW1lKTtcbiAgICBpZiAoIXN0YXRlKSB7XG4gICAgICB0aHJvdyBuZXcgU3lzdGVtRXJyb3IoYE5vIHdvcmtmbG93IHN0YXRlIGZvdW5kIGZvciAnJHtmZWF0dXJlTmFtZX0nYCk7XG4gICAgfVxuICAgIFxuICAgIGNvbnN0IGZlYXR1cmVQYXRoID0gam9pbih0aGlzLnNwZWNzRGlyZWN0b3J5LCBmZWF0dXJlTmFtZSk7XG4gICAgY29uc3QgZGVzaWduUGF0aCA9IGpvaW4oZmVhdHVyZVBhdGgsICdkZXNpZ24ubWQnKTtcbiAgICBjb25zdCBkZXNpZ25Db250ZW50ID0gYXdhaXQgcmVhZEZpbGUoZGVzaWduUGF0aCwgJ3V0ZjgnKTtcbiAgICBcbiAgICAvLyBTdWJtaXQgdGFzayBwbGFubmluZyB0byBuYXRpdmUgdGFza19wbGFubmVyIGFnZW50XG4gICAgY29uc3QgdGFza1BsYW5uaW5nVGFzazogVGFza1N1Ym1pdE9wdGlvbnMgPSB7XG4gICAgICBkZXNjcmlwdGlvbjogYEdlbmVyYXRlIGltcGxlbWVudGF0aW9uIHRhc2sgYnJlYWtkb3duIGZvciAke2ZlYXR1cmVOYW1lfWAsXG4gICAgICBwcmlvcml0eTogJ2hpZ2gnLFxuICAgICAgc3RyYXRlZ3k6ICdzZXF1ZW50aWFsJyxcbiAgICAgIHJlcXVpcmVkQ2FwYWJpbGl0aWVzOiBbJ3Rhc2tfbWFuYWdlbWVudCcgYXMgQWdlbnRDYXBhYmlsaXR5LCAnd29ya2Zsb3dfb3JjaGVzdHJhdGlvbicgYXMgQWdlbnRDYXBhYmlsaXR5XSxcbiAgICAgIG1ldGFkYXRhOiB7XG4gICAgICAgIG1hZXN0cm9GZWF0dXJlOiBmZWF0dXJlTmFtZSxcbiAgICAgICAgbWFlc3Ryb1BoYXNlOiAnSW1wbGVtZW50YXRpb24gUGxhbm5pbmcnLFxuICAgICAgICBkZXNpZ25Db250ZW50LFxuICAgICAgICBvdXRwdXRGaWxlOiBqb2luKGZlYXR1cmVQYXRoLCAndGFza3MubWQnKVxuICAgICAgfVxuICAgIH07XG4gICAgXG4gICAgY29uc3QgdGFzayA9IGF3YWl0IHRoaXMuaGl2ZU1pbmQuc3VibWl0VGFzayh0YXNrUGxhbm5pbmdUYXNrKTtcbiAgICBhd2FpdCB0aGlzLndhaXRGb3JUYXNrQ29tcGxldGlvbih0YXNrLmlkLCAxODAwMDApOyAvLyAzIG1pbnV0ZXNcbiAgICBcbiAgICAvLyBVcGRhdGUgd29ya2Zsb3cgc3RhdGVcbiAgICBzdGF0ZS5jdXJyZW50UGhhc2UgPSAnSW1wbGVtZW50YXRpb24gUGxhbm5pbmcnIGFzIFdvcmtmbG93UGhhc2U7XG4gICAgc3RhdGUubGFzdEFjdGl2aXR5ID0gbmV3IERhdGUoKTtcbiAgICBzdGF0ZS5oaXN0b3J5LnB1c2goe1xuICAgICAgcGhhc2U6ICdJbXBsZW1lbnRhdGlvbiBQbGFubmluZycgYXMgV29ya2Zsb3dQaGFzZSxcbiAgICAgIHN0YXR1czogJ2NvbXBsZXRlZCcsXG4gICAgICB0aW1lc3RhbXA6IG5ldyBEYXRlKClcbiAgICB9KTtcbiAgICBcbiAgICB0aGlzLmxvZ2dlci5pbmZvKGBHZW5lcmF0ZWQgdGFza3MgZm9yICcke2ZlYXR1cmVOYW1lfScgdXNpbmcgbmF0aXZlIHN3YXJtIHBsYW5uZXJgKTtcbiAgICB0aGlzLmV2ZW50QnVzLmVtaXQoJ21hZXN0cm86dGFza3NfZ2VuZXJhdGVkJywgeyBmZWF0dXJlTmFtZSB9KTtcbiAgfVxuICBcbiAgLyoqXG4gICAqIEltcGxlbWVudCB0YXNrIHVzaW5nIG5hdGl2ZSBpbXBsZW1lbnRhdGlvbl9jb2RlciBhZ2VudHNcbiAgICovXG4gIGFzeW5jIGltcGxlbWVudFRhc2soZmVhdHVyZU5hbWU6IHN0cmluZywgdGFza0lkOiBudW1iZXIpOiBQcm9taXNlPHZvaWQ+IHtcbiAgICBjb25zdCBzdGF0ZSA9IHRoaXMubWFlc3Ryb1N0YXRlLmdldChmZWF0dXJlTmFtZSk7XG4gICAgaWYgKCFzdGF0ZSkge1xuICAgICAgdGhyb3cgbmV3IFN5c3RlbUVycm9yKGBObyB3b3JrZmxvdyBzdGF0ZSBmb3VuZCBmb3IgJyR7ZmVhdHVyZU5hbWV9J2ApO1xuICAgIH1cbiAgICBcbiAgICBjb25zdCBmZWF0dXJlUGF0aCA9IGpvaW4odGhpcy5zcGVjc0RpcmVjdG9yeSwgZmVhdHVyZU5hbWUpO1xuICAgIGNvbnN0IHRhc2tzUGF0aCA9IGpvaW4oZmVhdHVyZVBhdGgsICd0YXNrcy5tZCcpO1xuICAgIGNvbnN0IHRhc2tzQ29udGVudCA9IGF3YWl0IHJlYWRGaWxlKHRhc2tzUGF0aCwgJ3V0ZjgnKTtcbiAgICBcbiAgICAvLyBQYXJzZSB0YXNrIGRlc2NyaXB0aW9uXG4gICAgY29uc3QgdGFza0xpbmVzID0gdGFza3NDb250ZW50LnNwbGl0KCdcXG4nKS5maWx0ZXIobGluZSA9PiBsaW5lLnN0YXJ0c1dpdGgoJy0gWyBdJykgfHwgbGluZS5zdGFydHNXaXRoKCctIFt4XScpKTtcbiAgICBpZiAodGFza0lkIDwgMSB8fCB0YXNrSWQgPiB0YXNrTGluZXMubGVuZ3RoKSB7XG4gICAgICB0aHJvdyBuZXcgU3lzdGVtRXJyb3IoYEludmFsaWQgdGFzayBJRCAke3Rhc2tJZH0gZm9yIGZlYXR1cmUgJyR7ZmVhdHVyZU5hbWV9J2ApO1xuICAgIH1cbiAgICBcbiAgICBjb25zdCB0YXNrRGVzY3JpcHRpb24gPSB0YXNrTGluZXNbdGFza0lkIC0gMV0uc3Vic3RyaW5nKHRhc2tMaW5lc1t0YXNrSWQgLSAxXS5pbmRleE9mKCddJykgKyAyKS50cmltKCk7XG4gICAgXG4gICAgLy8gU3VibWl0IGltcGxlbWVudGF0aW9uIHRhc2sgdG8gbmF0aXZlIGNvZGVyc1xuICAgIGNvbnN0IGltcGxlbWVudGF0aW9uVGFzazogVGFza1N1Ym1pdE9wdGlvbnMgPSB7XG4gICAgICBkZXNjcmlwdGlvbjogYEltcGxlbWVudCB0YXNrOiAke3Rhc2tEZXNjcmlwdGlvbn1gLFxuICAgICAgcHJpb3JpdHk6ICdoaWdoJyxcbiAgICAgIHN0cmF0ZWd5OiAncGFyYWxsZWwnLCAgLy8gTXVsdGlwbGUgaW1wbGVtZW50YXRpb25fY29kZXIgYWdlbnRzIGNhbiB3b3JrXG4gICAgICByZXF1aXJlZENhcGFiaWxpdGllczogWydjb2RlX2dlbmVyYXRpb24nIGFzIEFnZW50Q2FwYWJpbGl0eSwgJ2ltcGxlbWVudGF0aW9uJyBhcyBBZ2VudENhcGFiaWxpdHldLFxuICAgICAgbWF4QWdlbnRzOiAyLFxuICAgICAgbWV0YWRhdGE6IHtcbiAgICAgICAgbWFlc3Ryb0ZlYXR1cmU6IGZlYXR1cmVOYW1lLFxuICAgICAgICBtYWVzdHJvUGhhc2U6ICdUYXNrIEV4ZWN1dGlvbicsXG4gICAgICAgIHRhc2tJZCxcbiAgICAgICAgdGFza0Rlc2NyaXB0aW9uLFxuICAgICAgICBzdGVlcmluZ0NvbnRleHQ6IGF3YWl0IHRoaXMuZ2V0U3RlZXJpbmdDb250ZXh0KClcbiAgICAgIH1cbiAgICB9O1xuICAgIFxuICAgIGNvbnN0IHRhc2sgPSBhd2FpdCB0aGlzLmhpdmVNaW5kLnN1Ym1pdFRhc2soaW1wbGVtZW50YXRpb25UYXNrKTtcbiAgICBhd2FpdCB0aGlzLndhaXRGb3JUYXNrQ29tcGxldGlvbih0YXNrLmlkLCA2MDAwMDApOyAvLyAxMCBtaW51dGVzXG4gICAgXG4gICAgLy8gTWFyayB0YXNrIGFzIGNvbXBsZXRlZCBpbiB0YXNrcy5tZFxuICAgIGNvbnN0IHVwZGF0ZWRUYXNrc0NvbnRlbnQgPSB0YXNrc0NvbnRlbnQucmVwbGFjZShcbiAgICAgIHRhc2tMaW5lc1t0YXNrSWQgLSAxXSxcbiAgICAgIHRhc2tMaW5lc1t0YXNrSWQgLSAxXS5yZXBsYWNlKCctIFsgXScsICctIFt4XScpXG4gICAgKTtcbiAgICBhd2FpdCB3cml0ZUZpbGUodGFza3NQYXRoLCB1cGRhdGVkVGFza3NDb250ZW50LCAndXRmOCcpO1xuICAgIFxuICAgIC8vIFVwZGF0ZSB3b3JrZmxvdyBzdGF0ZVxuICAgIHN0YXRlLmN1cnJlbnRQaGFzZSA9ICdUYXNrIEV4ZWN1dGlvbicgYXMgV29ya2Zsb3dQaGFzZTtcbiAgICBzdGF0ZS5jdXJyZW50VGFza0luZGV4ID0gdGFza0lkO1xuICAgIHN0YXRlLmxhc3RBY3Rpdml0eSA9IG5ldyBEYXRlKCk7XG4gICAgXG4gICAgdGhpcy5sb2dnZXIuaW5mbyhgSW1wbGVtZW50ZWQgdGFzayAke3Rhc2tJZH0gZm9yICcke2ZlYXR1cmVOYW1lfScgdXNpbmcgbmF0aXZlIHN3YXJtYCk7XG4gICAgdGhpcy5ldmVudEJ1cy5lbWl0KCdtYWVzdHJvOnRhc2tfaW1wbGVtZW50ZWQnLCB7IGZlYXR1cmVOYW1lLCB0YXNrSWQsIHRhc2tEZXNjcmlwdGlvbiB9KTtcbiAgfVxuICBcbiAgLyoqXG4gICAqIEFwcHJvdmUgd29ya2Zsb3cgcGhhc2Ugd2l0aCBvcHRpb25hbCBjb25zZW5zdXNcbiAgICovXG4gIGFzeW5jIGFwcHJvdmVQaGFzZShmZWF0dXJlTmFtZTogc3RyaW5nKTogUHJvbWlzZTx2b2lkPiB7XG4gICAgY29uc3Qgc3RhdGUgPSB0aGlzLm1hZXN0cm9TdGF0ZS5nZXQoZmVhdHVyZU5hbWUpO1xuICAgIGlmICghc3RhdGUpIHtcbiAgICAgIHRocm93IG5ldyBTeXN0ZW1FcnJvcihgTm8gd29ya2Zsb3cgc3RhdGUgZm91bmQgZm9yICcke2ZlYXR1cmVOYW1lfSdgKTtcbiAgICB9XG4gICAgXG4gICAgLy8gVXNlIG5hdGl2ZSBjb25zZW5zdXMgaWYgZW5hYmxlZFxuICAgIGlmICh0aGlzLmNvbmZpZy5lbmFibGVDb25zZW5zdXNWYWxpZGF0aW9uKSB7XG4gICAgICBjb25zdCBjb25zZW5zdXNQcm9wb3NhbDogQ29uc2Vuc3VzUHJvcG9zYWwgPSB7XG4gICAgICAgIGlkOiBgbWFlc3Ryby1waGFzZS1hcHByb3ZhbC0ke2ZlYXR1cmVOYW1lfS0ke0RhdGUubm93KCl9YCxcbiAgICAgICAgc3dhcm1JZDogKHRoaXMuaGl2ZU1pbmQgYXMgYW55KS5pZCxcbiAgICAgICAgcHJvcG9zYWw6IHtcbiAgICAgICAgICBhY3Rpb246ICdhcHByb3ZlX3BoYXNlJyxcbiAgICAgICAgICBmZWF0dXJlTmFtZSxcbiAgICAgICAgICBjdXJyZW50UGhhc2U6IHN0YXRlLmN1cnJlbnRQaGFzZSxcbiAgICAgICAgICBkZXRhaWxzOiBgQXBwcm92ZSBjb21wbGV0aW9uIG9mICR7c3RhdGUuY3VycmVudFBoYXNlfSBwaGFzZSBmb3IgJHtmZWF0dXJlTmFtZX1gXG4gICAgICAgIH0sXG4gICAgICAgIHJlcXVpcmVkVGhyZXNob2xkOiAwLjY2LFxuICAgICAgICBkZWFkbGluZTogbmV3IERhdGUoRGF0ZS5ub3coKSArIDMwMDAwMCksIC8vIDUgbWludXRlc1xuICAgICAgICB0YXNrSWQ6IGBtYWVzdHJvLWFwcHJvdmFsLSR7ZmVhdHVyZU5hbWV9YCxcbiAgICAgICAgbWV0YWRhdGE6IHtcbiAgICAgICAgICB0eXBlOiAncGhhc2VfYXBwcm92YWwnLFxuICAgICAgICAgIGZlYXR1cmVOYW1lLFxuICAgICAgICAgIHBoYXNlOiBzdGF0ZS5jdXJyZW50UGhhc2VcbiAgICAgICAgfVxuICAgICAgfTtcbiAgICAgIFxuICAgICAgLy8gU3VibWl0IGZvciBjb25zZW5zdXMgdmFsaWRhdGlvblxuICAgICAgY29uc3QgY29uc2Vuc3VzRW5naW5lID0gKHRoaXMuaGl2ZU1pbmQgYXMgYW55KS5jb25zZW5zdXMgYXMgQ29uc2Vuc3VzRW5naW5lO1xuICAgICAgY29uc3QgcHJvcG9zYWxJZCA9IGF3YWl0IGNvbnNlbnN1c0VuZ2luZS5jcmVhdGVQcm9wb3NhbChjb25zZW5zdXNQcm9wb3NhbCk7XG4gICAgICBjb25zdCBjb25zZW5zdXNSZXN1bHQgPSBhd2FpdCB0aGlzLndhaXRGb3JDb25zZW5zdXNSZXN1bHQocHJvcG9zYWxJZCwgMzAwMDAwKTtcbiAgICAgIFxuICAgICAgaWYgKCFjb25zZW5zdXNSZXN1bHQuYWNoaWV2ZWQpIHtcbiAgICAgICAgdGhyb3cgbmV3IFN5c3RlbUVycm9yKGBQaGFzZSBhcHByb3ZhbCBjb25zZW5zdXMgZmFpbGVkOiAke2NvbnNlbnN1c1Jlc3VsdC5yZWFzb259YCk7XG4gICAgICB9XG4gICAgfVxuICAgIFxuICAgIC8vIFByb2dyZXNzIHRvIG5leHQgcGhhc2VcbiAgICBjb25zdCBwaGFzZVByb2dyZXNzaW9uOiBSZWNvcmQ8c3RyaW5nLCBzdHJpbmc+ID0ge1xuICAgICAgJ1JlcXVpcmVtZW50cyBDbGFyaWZpY2F0aW9uJzogJ1Jlc2VhcmNoICYgRGVzaWduJyxcbiAgICAgICdSZXNlYXJjaCAmIERlc2lnbic6ICdJbXBsZW1lbnRhdGlvbiBQbGFubmluZycsXG4gICAgICAnSW1wbGVtZW50YXRpb24gUGxhbm5pbmcnOiAnVGFzayBFeGVjdXRpb24nLFxuICAgICAgJ1Rhc2sgRXhlY3V0aW9uJzogJ0NvbXBsZXRlZCdcbiAgICB9O1xuICAgIFxuICAgIGNvbnN0IG5leHRQaGFzZSA9IHBoYXNlUHJvZ3Jlc3Npb25bc3RhdGUuY3VycmVudFBoYXNlXTtcbiAgICBpZiAobmV4dFBoYXNlKSB7XG4gICAgICBzdGF0ZS5jdXJyZW50UGhhc2UgPSBuZXh0UGhhc2UgYXMgV29ya2Zsb3dQaGFzZTtcbiAgICAgIHN0YXRlLmxhc3RBY3Rpdml0eSA9IG5ldyBEYXRlKCk7XG4gICAgICBzdGF0ZS5oaXN0b3J5LnB1c2goe1xuICAgICAgICBwaGFzZTogbmV4dFBoYXNlIGFzIFdvcmtmbG93UGhhc2UsXG4gICAgICAgIHN0YXR1czogJ2FwcHJvdmVkJyxcbiAgICAgICAgdGltZXN0YW1wOiBuZXcgRGF0ZSgpXG4gICAgICB9KTtcbiAgICB9XG4gICAgXG4gICAgdGhpcy5sb2dnZXIuaW5mbyhgQXBwcm92ZWQgcGhhc2UgdHJhbnNpdGlvbiBmb3IgJyR7ZmVhdHVyZU5hbWV9JzogJHtzdGF0ZS5jdXJyZW50UGhhc2V9IC0+ICR7bmV4dFBoYXNlfWApO1xuICAgIHRoaXMuZXZlbnRCdXMuZW1pdCgnbWFlc3RybzpwaGFzZV9hcHByb3ZlZCcsIHsgZmVhdHVyZU5hbWUsIG5leHRQaGFzZSB9KTtcbiAgfVxuICBcbiAgLyoqXG4gICAqIEdldCB3b3JrZmxvdyBzdGF0ZVxuICAgKi9cbiAgZ2V0V29ya2Zsb3dTdGF0ZShmZWF0dXJlTmFtZTogc3RyaW5nKTogTWFlc3Ryb1dvcmtmbG93U3RhdGUgfCB1bmRlZmluZWQge1xuICAgIHJldHVybiB0aGlzLm1hZXN0cm9TdGF0ZS5nZXQoZmVhdHVyZU5hbWUpO1xuICB9XG4gIFxuICAvKipcbiAgICogQ3JlYXRlIHN0ZWVyaW5nIGRvY3VtZW50IGluIG5hdGl2ZSBzd2FybSBtZW1vcnlcbiAgICovXG4gIGFzeW5jIGNyZWF0ZVN0ZWVyaW5nRG9jdW1lbnQoZG9tYWluOiBzdHJpbmcsIGNvbnRlbnQ6IHN0cmluZyk6IFByb21pc2U8dm9pZD4ge1xuICAgIGlmICghdGhpcy5jb25maWcuZW5hYmxlU3RlZXJpbmdJbnRlZ3JhdGlvbikge1xuICAgICAgdGhyb3cgbmV3IFN5c3RlbUVycm9yKCdTdGVlcmluZyBpbnRlZ3JhdGlvbiBpcyBkaXNhYmxlZCcpO1xuICAgIH1cbiAgICBcbiAgICAvLyBTdG9yZSBpbiBuYXRpdmUgaGl2ZSBtaW5kIG1lbW9yeSBpbnN0ZWFkIG9mIGZpbGVzXG4gICAgYXdhaXQgdGhpcy5oaXZlTWluZC5tZW1vcnkuc3RvcmUoYHN0ZWVyaW5nLyR7ZG9tYWlufWAsIHtcbiAgICAgIGNvbnRlbnQsXG4gICAgICBkb21haW4sXG4gICAgICBsYXN0VXBkYXRlZDogbmV3IERhdGUoKSxcbiAgICAgIG1haW50YWluZXI6ICdzdGVlcmluZ19kb2N1bWVudGVyJ1xuICAgIH0pO1xuICAgIFxuICAgIC8vIE5vdGlmeSBhbGwgYWdlbnRzIHRocm91Z2ggbmF0aXZlIGNvbW11bmljYXRpb25cbiAgICBhd2FpdCB0aGlzLmhpdmVNaW5kLmNvbW11bmljYXRpb24uYnJvYWRjYXN0KHtcbiAgICAgIHR5cGU6ICdzdGVlcmluZ191cGRhdGUnLFxuICAgICAgZG9tYWluLFxuICAgICAgY29udGVudDogY29udGVudC5zdWJzdHJpbmcoMCwgMjAwKSArICcuLi4nIC8vIFN1bW1hcnkgZm9yIG5vdGlmaWNhdGlvblxuICAgIH0pO1xuICAgIFxuICAgIHRoaXMubG9nZ2VyLmluZm8oYENyZWF0ZWQgc3RlZXJpbmcgZG9jdW1lbnQgZm9yICcke2RvbWFpbn0nIGluIHN3YXJtIG1lbW9yeWApO1xuICB9XG4gIFxuICAvKipcbiAgICogR2V0IHN0ZWVyaW5nIGNvbnRleHQgZnJvbSBzd2FybSBtZW1vcnlcbiAgICovXG4gIHByaXZhdGUgYXN5bmMgZ2V0U3RlZXJpbmdDb250ZXh0KCk6IFByb21pc2U8c3RyaW5nPiB7XG4gICAgaWYgKCF0aGlzLmNvbmZpZy5lbmFibGVTdGVlcmluZ0ludGVncmF0aW9uKSB7XG4gICAgICByZXR1cm4gJ05vIHN0ZWVyaW5nIGNvbnRleHQgYXZhaWxhYmxlLic7XG4gICAgfVxuICAgIFxuICAgIHRyeSB7XG4gICAgICAvLyBSZXRyaWV2ZSBhbGwgc3RlZXJpbmcgZG9jdW1lbnRzIGZyb20gc3dhcm0gbWVtb3J5XG4gICAgICBjb25zdCBzdGVlcmluZ0tleXMgPSBhd2FpdCB0aGlzLmhpdmVNaW5kLm1lbW9yeS5zZWFyY2goJ3N0ZWVyaW5nLyonKTtcbiAgICAgIGNvbnN0IHN0ZWVyaW5nRG9jcyA9IGF3YWl0IFByb21pc2UuYWxsKFxuICAgICAgICBzdGVlcmluZ0tleXMubWFwKGtleSA9PiB0aGlzLmhpdmVNaW5kLm1lbW9yeS5yZXRyaWV2ZShrZXkpKVxuICAgICAgKTtcbiAgICAgIFxuICAgICAgcmV0dXJuIHN0ZWVyaW5nRG9jc1xuICAgICAgICAuZmlsdGVyKGRvYyA9PiBkb2MpXG4gICAgICAgIC5tYXAoZG9jID0+IGAjIyAke2RvYy5kb21haW59XFxuJHtkb2MuY29udGVudH1gKVxuICAgICAgICAuam9pbignXFxuXFxuLS0tXFxuXFxuJyk7XG4gICAgICAgIFxuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICB0aGlzLmxvZ2dlci53YXJuKGBGYWlsZWQgdG8gcmV0cmlldmUgc3RlZXJpbmcgY29udGV4dDogJHtlcnJvciBpbnN0YW5jZW9mIEVycm9yID8gZXJyb3IubWVzc2FnZSA6IFN0cmluZyhlcnJvcil9YCk7XG4gICAgICByZXR1cm4gJ1N0ZWVyaW5nIGNvbnRleHQgdGVtcG9yYXJpbHkgdW5hdmFpbGFibGUuJztcbiAgICB9XG4gIH1cbiAgXG4gIC8qKlxuICAgKiBJbml0aWFsaXplIHN0ZWVyaW5nIGRvY3VtZW50cyBpbiBzd2FybSBtZW1vcnlcbiAgICovXG4gIHByaXZhdGUgYXN5bmMgaW5pdGlhbGl6ZVN0ZWVyaW5nTWVtb3J5KCk6IFByb21pc2U8dm9pZD4ge1xuICAgIC8vIEluaXRpYWxpemUgZGVmYXVsdCBzdGVlcmluZyBkb2N1bWVudHMgaW4gbWVtb3J5XG4gICAgY29uc3QgZGVmYXVsdFN0ZWVyaW5nID0ge1xuICAgICAgJ3Byb2R1Y3QnOiAnRm9jdXMgb24gdXNlciB2YWx1ZSBhbmQgY2xlYXIgcmVxdWlyZW1lbnRzIHNwZWNpZmljYXRpb24uJyxcbiAgICAgICd0ZWNoJzogJ0ZvbGxvdyBjbGVhbiBhcmNoaXRlY3R1cmUgcGF0dGVybnMgYW5kIG1haW50YWluYWJsZSBjb2RlIHByYWN0aWNlcy4nLFxuICAgICAgJ3dvcmtmbG93JzogJ1VzZSBzcGVjcy1kcml2ZW4gZGV2ZWxvcG1lbnQgd2l0aCBjbGVhciBwaGFzZSBwcm9ncmVzc2lvbi4nXG4gICAgfTtcbiAgICBcbiAgICBmb3IgKGNvbnN0IFtkb21haW4sIGNvbnRlbnRdIG9mIE9iamVjdC5lbnRyaWVzKGRlZmF1bHRTdGVlcmluZykpIHtcbiAgICAgIGF3YWl0IHRoaXMuaGl2ZU1pbmQubWVtb3J5LnN0b3JlKGBzdGVlcmluZy8ke2RvbWFpbn1gLCB7XG4gICAgICAgIGNvbnRlbnQsXG4gICAgICAgIGRvbWFpbixcbiAgICAgICAgbGFzdFVwZGF0ZWQ6IG5ldyBEYXRlKCksXG4gICAgICAgIG1haW50YWluZXI6ICdzeXN0ZW0nXG4gICAgICB9KTtcbiAgICB9XG4gICAgXG4gICAgdGhpcy5sb2dnZXIuaW5mbygnSW5pdGlhbGl6ZWQgZGVmYXVsdCBzdGVlcmluZyBkb2N1bWVudHMgaW4gc3dhcm0gbWVtb3J5Jyk7XG4gIH1cbiAgXG4gIC8qKlxuICAgKiBXYWl0IGZvciB0YXNrIGNvbXBsZXRpb24gdXNpbmcgbmF0aXZlIHN3YXJtIHRyYWNraW5nXG4gICAqL1xuICBwcml2YXRlIGFzeW5jIHdhaXRGb3JUYXNrQ29tcGxldGlvbih0YXNrSWQ6IHN0cmluZywgdGltZW91dE1zOiBudW1iZXIpOiBQcm9taXNlPGFueT4ge1xuICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICBjb25zdCB0aW1lb3V0ID0gc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAgIHJlamVjdChuZXcgRXJyb3IoYFRhc2sgdGltZW91dDogJHt0YXNrSWR9YCkpO1xuICAgICAgfSwgdGltZW91dE1zKTtcbiAgICAgIFxuICAgICAgY29uc3QgY2hlY2tJbnRlcnZhbCA9IHNldEludGVydmFsKGFzeW5jICgpID0+IHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICBjb25zdCB0YXNrID0gYXdhaXQgdGhpcy5oaXZlTWluZC5nZXRUYXNrKHRhc2tJZCk7XG4gICAgICAgICAgXG4gICAgICAgICAgaWYgKHRhc2suc3RhdHVzID09PSAnY29tcGxldGVkJykge1xuICAgICAgICAgICAgY2xlYXJUaW1lb3V0KHRpbWVvdXQpO1xuICAgICAgICAgICAgY2xlYXJJbnRlcnZhbChjaGVja0ludGVydmFsKTtcbiAgICAgICAgICAgIHJlc29sdmUodGFzay5yZXN1bHQgPyBKU09OLnBhcnNlKHRhc2sucmVzdWx0KSA6IHt9KTtcbiAgICAgICAgICB9IGVsc2UgaWYgKHRhc2suc3RhdHVzID09PSAnZmFpbGVkJykge1xuICAgICAgICAgICAgY2xlYXJUaW1lb3V0KHRpbWVvdXQpO1xuICAgICAgICAgICAgY2xlYXJJbnRlcnZhbChjaGVja0ludGVydmFsKTtcbiAgICAgICAgICAgIHJlamVjdChuZXcgRXJyb3IoYFRhc2sgZmFpbGVkOiAke3Rhc2suZXJyb3IgfHwgJ1Vua25vd24gZXJyb3InfWApKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgY2xlYXJUaW1lb3V0KHRpbWVvdXQpO1xuICAgICAgICAgIGNsZWFySW50ZXJ2YWwoY2hlY2tJbnRlcnZhbCk7XG4gICAgICAgICAgcmVqZWN0KGVycm9yKTtcbiAgICAgICAgfVxuICAgICAgfSwgMjAwMCk7XG4gICAgfSk7XG4gIH1cbiAgXG4gIC8qKlxuICAgKiBXYWl0IGZvciBjb25zZW5zdXMgcmVzdWx0IHVzaW5nIG5hdGl2ZSBDb25zZW5zdXNFbmdpbmVcbiAgICovXG4gIHByaXZhdGUgYXN5bmMgd2FpdEZvckNvbnNlbnN1c1Jlc3VsdChwcm9wb3NhbElkOiBzdHJpbmcsIHRpbWVvdXRNczogbnVtYmVyKTogUHJvbWlzZTxhbnk+IHtcbiAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgY29uc3QgdGltZW91dCA9IHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICByZWplY3QobmV3IEVycm9yKGBDb25zZW5zdXMgdGltZW91dCBmb3IgcHJvcG9zYWwgJHtwcm9wb3NhbElkfWApKTtcbiAgICAgIH0sIHRpbWVvdXRNcyk7XG4gICAgICBcbiAgICAgIGNvbnN0IGNoZWNrSW50ZXJ2YWwgPSBzZXRJbnRlcnZhbChhc3luYyAoKSA9PiB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgY29uc3QgY29uc2Vuc3VzRW5naW5lID0gKHRoaXMuaGl2ZU1pbmQgYXMgYW55KS5jb25zZW5zdXMgYXMgQ29uc2Vuc3VzRW5naW5lO1xuICAgICAgICAgIGNvbnN0IHN0YXR1cyA9IGF3YWl0IGNvbnNlbnN1c0VuZ2luZS5nZXRQcm9wb3NhbFN0YXR1cyhwcm9wb3NhbElkKTtcbiAgICAgICAgICBcbiAgICAgICAgICBpZiAoc3RhdHVzLnN0YXR1cyA9PT0gJ2FjaGlldmVkJykge1xuICAgICAgICAgICAgY2xlYXJUaW1lb3V0KHRpbWVvdXQpO1xuICAgICAgICAgICAgY2xlYXJJbnRlcnZhbChjaGVja0ludGVydmFsKTtcbiAgICAgICAgICAgIHJlc29sdmUoe1xuICAgICAgICAgICAgICBhY2hpZXZlZDogdHJ1ZSxcbiAgICAgICAgICAgICAgZmluYWxSYXRpbzogc3RhdHVzLmN1cnJlbnRSYXRpbyxcbiAgICAgICAgICAgICAgcmVhc29uOiAnQ29uc2Vuc3VzIGFjaGlldmVkJ1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfSBlbHNlIGlmIChzdGF0dXMuc3RhdHVzID09PSAnZmFpbGVkJykge1xuICAgICAgICAgICAgY2xlYXJUaW1lb3V0KHRpbWVvdXQpO1xuICAgICAgICAgICAgY2xlYXJJbnRlcnZhbChjaGVja0ludGVydmFsKTtcbiAgICAgICAgICAgIHJlc29sdmUoe1xuICAgICAgICAgICAgICBhY2hpZXZlZDogZmFsc2UsXG4gICAgICAgICAgICAgIGZpbmFsUmF0aW86IHN0YXR1cy5jdXJyZW50UmF0aW8sXG4gICAgICAgICAgICAgIHJlYXNvbjogJ0NvbnNlbnN1cyBmYWlsZWQnXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9XG4gICAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgY2xlYXJUaW1lb3V0KHRpbWVvdXQpO1xuICAgICAgICAgIGNsZWFySW50ZXJ2YWwoY2hlY2tJbnRlcnZhbCk7XG4gICAgICAgICAgcmVqZWN0KGVycm9yKTtcbiAgICAgICAgfVxuICAgICAgfSwgMTAwMCk7XG4gICAgfSk7XG4gIH1cbiAgXG4gIC8qKlxuICAgKiBTZXR1cCBldmVudCBoYW5kbGVyc1xuICAgKi9cbiAgcHJpdmF0ZSBzZXR1cEV2ZW50SGFuZGxlcnMoKTogdm9pZCB7XG4gICAgdGhpcy5ldmVudEJ1cy5vbignbWFlc3RybzpzcGVjX2NyZWF0ZWQnLCB0aGlzLmhhbmRsZVNwZWNDcmVhdGVkLmJpbmQodGhpcykpO1xuICAgIHRoaXMuZXZlbnRCdXMub24oJ21hZXN0cm86cGhhc2VfYXBwcm92ZWQnLCB0aGlzLmhhbmRsZVBoYXNlQXBwcm92ZWQuYmluZCh0aGlzKSk7XG4gICAgdGhpcy5ldmVudEJ1cy5vbignbWFlc3Rybzp0YXNrX2ltcGxlbWVudGVkJywgdGhpcy5oYW5kbGVUYXNrSW1wbGVtZW50ZWQuYmluZCh0aGlzKSk7XG4gIH1cbiAgXG4gIC8qKlxuICAgKiBFdmVudCBoYW5kbGVyc1xuICAgKi9cbiAgcHJpdmF0ZSBhc3luYyBoYW5kbGVTcGVjQ3JlYXRlZChkYXRhOiBhbnkpOiBQcm9taXNlPHZvaWQ+IHtcbiAgICB0aGlzLmxvZ2dlci5pbmZvKGBTcGVjIGNyZWF0ZWQgdmlhIG5hdGl2ZSBzd2FybTogJHtKU09OLnN0cmluZ2lmeShkYXRhKX1gKTtcbiAgfVxuICBcbiAgcHJpdmF0ZSBhc3luYyBoYW5kbGVQaGFzZUFwcHJvdmVkKGRhdGE6IGFueSk6IFByb21pc2U8dm9pZD4ge1xuICAgIHRoaXMubG9nZ2VyLmluZm8oYFBoYXNlIGFwcHJvdmVkIHZpYSBuYXRpdmUgY29uc2Vuc3VzOiAke0pTT04uc3RyaW5naWZ5KGRhdGEpfWApO1xuICB9XG4gIFxuICBwcml2YXRlIGFzeW5jIGhhbmRsZVRhc2tJbXBsZW1lbnRlZChkYXRhOiBhbnkpOiBQcm9taXNlPHZvaWQ+IHtcbiAgICB0aGlzLmxvZ2dlci5pbmZvKGBUYXNrIGltcGxlbWVudGVkIHZpYSBuYXRpdmUgc3dhcm06ICR7SlNPTi5zdHJpbmdpZnkoZGF0YSl9YCk7XG4gIH1cbiAgXG4gIC8qKlxuICAgKiBTaHV0ZG93biBjb29yZGluYXRvciBhbmQgbmF0aXZlIHN3YXJtXG4gICAqL1xuICBhc3luYyBzaHV0ZG93bigpOiBQcm9taXNlPHZvaWQ+IHtcbiAgICB0aGlzLmxvZ2dlci5pbmZvKCdTaHV0dGluZyBkb3duIE1hZXN0cm9Td2FybUNvb3JkaW5hdG9yJyk7XG4gICAgXG4gICAgaWYgKHRoaXMuaGl2ZU1pbmQpIHtcbiAgICAgIGF3YWl0IHRoaXMuaGl2ZU1pbmQuc2h1dGRvd24oKTtcbiAgICAgIHRoaXMubG9nZ2VyLmluZm8oJ05hdGl2ZSBoaXZlIG1pbmQgc3dhcm0gc2h1dGRvd24gY29tcGxldGUnKTtcbiAgICB9XG4gICAgXG4gICAgdGhpcy5sb2dnZXIuaW5mbygnTWFlc3Ryb1N3YXJtQ29vcmRpbmF0b3Igc2h1dGRvd24gY29tcGxldGUnKTtcbiAgfVxufSJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQUE7Ozs7Ozs7QUFRQSxTQUFTQSxZQUFZLFFBQVEsUUFBUTtBQUNyQyxTQUFTQyxJQUFJLFFBQVEs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