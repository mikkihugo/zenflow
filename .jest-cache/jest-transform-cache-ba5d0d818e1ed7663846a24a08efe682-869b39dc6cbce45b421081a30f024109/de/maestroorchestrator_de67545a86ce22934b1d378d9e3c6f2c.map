{"file":"/home/mhugo/code/claude-code-flow/src/maestro/maestro-orchestrator.ts","mappings":"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","names":[],"sources":["/home/mhugo/code/claude-code-flow/src/maestro/maestro-orchestrator.ts"],"sourcesContent":["/**\n * Maestro Orchestrator - Refactored and Cleaned Up\n * \n * A specifications-driven development orchestrator that integrates seamlessly\n * with the existing claude-flow hive mind infrastructure for collective intelligence,\n * consensus-based decision making, and advanced workflow automation.\n * \n * This refactored version eliminates duplicate implementations and leverages\n * the proven hive mind system for enhanced reliability and performance.\n */\n\nimport { EventEmitter } from 'events';\nimport { join } from 'path';\nimport { readFile, writeFile, mkdir, access } from 'fs/promises';\n// Import agentic-flow hooks system\nimport { agenticHookManager, initializeAgenticFlowHooks, type AgenticHookContext } from '../services/agentic-flow-hooks/index.js';\n\n// Core claude-flow infrastructure\nimport { IEventBus } from '../core/event-bus.js';\nimport { ILogger } from '../core/logger.js';\nimport { IMemoryManager } from '../memory/manager.js';\nimport { AgentManager } from '../agents/agent-manager.js';\nimport { Orchestrator } from '../core/orchestrator.js';\nimport { Config } from '../utils/types.js';\nimport { SystemError } from '../utils/errors.js';\n\n// Existing hive mind infrastructure (proven and robust)\nimport { HiveMind } from '../hive-mind/core/HiveMind.js';\nimport { ConsensusEngine } from '../hive-mind/integration/ConsensusEngine.js';\nimport { SwarmOrchestrator } from '../hive-mind/integration/SwarmOrchestrator.js';\n\n// Types for maestro system\nimport {\n  MaestroSpec,\n  MaestroWorkflowState,\n  WorkflowPhase,\n  TaskItem,\n  AgentProfile,\n  SteeringContext\n} from './maestro-types.js';\n\n// Simple interface for agent pool (minimal-change enhancement)\ninterface PooledAgent {\n  id: string;\n  type: string;\n  capabilities: string[];\n  status: 'available' | 'busy' | 'maintenance';\n  lastUsed: Date;\n  usageCount: number;\n  createdAt: Date;\n}\n\n// Remove SimpleTaskPlanner dependency - using direct agent management\nimport {\n  HiveMindConfig,\n  ConsensusProposal,\n  TaskSubmitOptions,\n  AgentSpawnOptions,\n  QueenMode,\n  AgentCapability\n} from '../hive-mind/types.js';\n\nexport interface MaestroConfig {\n  // Integration with hive mind\n  enableHiveMind: boolean;\n  consensusThreshold: number;\n  maxAgents: number;\n  \n  // Maestro-specific features\n  enableLivingDocumentation: boolean;\n  enableAgentHooks: boolean;\n  enablePatternLearning: boolean;\n  \n  // File system settings\n  specsDirectory: string;\n  steeringDirectory: string;\n}\n\n/**\n * Main Maestro Orchestrator class\n * Integrates with existing hive mind infrastructure instead of duplicating it\n */\nexport class MaestroOrchestrator extends EventEmitter {\n  private maestroState: Map<string, MaestroWorkflowState> = new Map();\n  private specsDirectory: string;\n  private steeringDirectory: string;\n  \n  // Hive mind integration (leveraging existing robust systems)\n  private hiveMind?: HiveMind;\n  private consensusEngine?: ConsensusEngine;\n  private swarmOrchestrator?: SwarmOrchestrator;\n  \n  // Removed SimpleTaskPlanner - using direct agent management\n  \n  private agenticHooksInitialized: boolean = false;\n  \n  // File watchers for living documentation\n  private fileWatchers: Map<string, any> = new Map();\n  \n  // Simple agent pool for reuse (minimal-change enhancement)\n  private agentPool: Map<string, PooledAgent> = new Map();\n  private capabilityIndex: Map<string, Set<string>> = new Map();\n  \n  constructor(\n    private config: Config,\n    private eventBus: IEventBus,\n    private logger: ILogger,\n    private memoryManager: IMemoryManager,\n    private agentManager: AgentManager,\n    private mainOrchestrator: Orchestrator,\n    private maestroConfig: Partial<MaestroConfig> = {}\n  ) {\n    super();\n    \n    this.specsDirectory = join(process.cwd(), '.claude', 'claude-flow', 'maestro', 'specs');\n    this.steeringDirectory = join(process.cwd(), '.claude', 'claude-flow', 'maestro', 'steering');\n\n    // Initialize agentic-flow hooks if enabled\n    if (this.maestroConfig.enableAgentHooks) {\n      this.initializeAgenticHooks();\n    }\n    \n    this.setupEventHandlers();\n    this.logger.info('Maestro Orchestrator initialized');\n  }\n  \n  /**\n   * Initialize hive mind integration for advanced features\n   */\n  async initializeHiveMind(): Promise<string | null> {\n    if (!this.maestroConfig.enableHiveMind) {\n      this.logger.info('Hive mind integration disabled');\n      return null;\n    }\n    \n    try {\n      // Configure hive mind for Maestro workflows\n      const hiveMindConfig: HiveMindConfig = {\n        name: 'maestro-collective',\n        topology: 'hierarchical',\n        queenMode: 'strategic' as QueenMode,\n        maxAgents: this.maestroConfig.maxAgents || 8,\n        consensusThreshold: this.maestroConfig.consensusThreshold || 0.66,\n        memoryTTL: 86400000, // 24 hours\n        autoSpawn: true,\n        enableConsensus: true,\n        enableMemory: true,\n        enableCommunication: true\n      };\n      \n      // Initialize hive mind with existing infrastructure\n      this.hiveMind = new HiveMind(hiveMindConfig);\n      const swarmId = await this.hiveMind.initialize();\n      \n      // Get access to integrated subsystems\n      this.consensusEngine = (this.hiveMind as any).consensus;\n      this.swarmOrchestrator = (this.hiveMind as any).orchestrator;\n      \n      this.logger.info(`Maestro hive mind initialized: ${swarmId}`);\n      return swarmId;\n      \n    } catch (error) {\n      this.logger.error(`Failed to initialize hive mind: ${error instanceof Error ? error.message : String(error)}`);\n      throw error;\n    }\n  }\n  \n  /**\n   * Create a new specification using the 3-file system\n   */\n  async createSpec(featureName: string, initialRequest: string): Promise<void> {\n    const featurePath = join(this.specsDirectory, featureName);\n    await mkdir(featurePath, { recursive: true });\n    \n    // Initialize workflow state\n    const workflowState: MaestroWorkflowState = {\n      featureName,\n      currentPhase: 'Requirements Clarification' as WorkflowPhase,\n      currentTaskIndex: 0,\n      status: 'paused',\n      lastActivity: new Date(),\n      history: [{\n        phase: 'Requirements Clarification' as WorkflowPhase,\n        status: 'in-progress' as 'completed' | 'failed' | 'in-progress' | 'approved',\n        timestamp: new Date()\n      }]\n    };\n    \n    this.maestroState.set(featureName, workflowState);\n    \n    // Create requirements.md\n    const requirementsContent = `# Requirements for ${featureName}\n\n## High-Level Request\n\n${initialRequest}\n\n## User Stories\n\n- As a user, I want ${initialRequest.toLowerCase()}, so that I can achieve my goals\n\n## Acceptance Criteria\n\n- [ ] Feature functions as described\n- [ ] Code is well-tested\n- [ ] Documentation is complete\n- [ ] Performance requirements are met\n\n## Technical Requirements\n\n- [ ] Integration with existing systems\n- [ ] Error handling and validation\n- [ ] Security considerations\n- [ ] Scalability considerations\n\n*Generated by Maestro Orchestrator*\n`;\n    \n    await writeFile(join(featurePath, 'requirements.md'), requirementsContent, 'utf8');\n    \n    this.logger.info(`Created specification for '${featureName}'`);\n    this.eventBus.emit('maestro:spec_created', { featureName });\n    \n    // Trigger agentic hooks for spec creation\n    if (this.agenticHooksInitialized) {\n      try {\n        await agenticHookManager.executeHooks('workflow-start', {\n          workflowId: `maestro-${featureName}`,\n          state: { featureName, phase: 'spec-creation' }\n        } as any, {\n          sessionId: `maestro-session-${Date.now()}`,\n          timestamp: Date.now(),\n          correlationId: `maestro-${featureName}`,\n          metadata: { featureName },\n          memory: { namespace: 'maestro', provider: 'memory', cache: new Map() },\n          neural: { modelId: 'default', patterns: null as any, training: null as any },\n          performance: { metrics: new Map(), bottlenecks: [], optimizations: [] }\n        } as AgenticHookContext);\n      } catch (error) {\n        this.logger.warn('Failed to execute agentic hooks:', error);\n      }\n    }\n  }\n  \n  /**\n   * Generate design using hive mind collective intelligence\n   */\n  async generateDesign(featureName: string): Promise<void> {\n    const state = this.maestroState.get(featureName);\n    if (!state) {\n      throw new SystemError(`No workflow state found for '${featureName}'`);\n    }\n    \n    const featurePath = join(this.specsDirectory, featureName);\n    const requirementsPath = join(featurePath, 'requirements.md');\n    \n    try {\n      await access(requirementsPath);\n    } catch {\n      throw new SystemError(`Requirements file not found for '${featureName}'. Run create-spec first.`);\n    }\n    \n    const requirementsContent = await readFile(requirementsPath, 'utf8');\n    \n    // Use hive mind for collective design generation if available\n    if (this.hiveMind && this.swarmOrchestrator) {\n      await this.generateDesignWithHiveMind(featureName, requirementsContent);\n    } else {\n      await this.generateDesignWithAgentManager(featureName, requirementsContent);\n    }\n    \n    // Update workflow state\n    state.currentPhase = 'Research & Design' as WorkflowPhase;\n    state.lastActivity = new Date();\n    state.history.push({\n      phase: 'Research & Design' as WorkflowPhase,\n      status: 'completed',\n      timestamp: new Date()\n    });\n    \n    this.logger.info(`Generated design for '${featureName}'`);\n    this.eventBus.emit('maestro:design_generated', { featureName });\n  }\n  \n  /**\n   * Generate design using hive mind collective intelligence\n   */\n  private async generateDesignWithHiveMind(featureName: string, requirements: string): Promise<void> {\n    const taskOptions: TaskSubmitOptions = {\n      description: `Generate comprehensive design for ${featureName}`,\n      priority: 'high',\n      strategy: 'adaptive',\n      requiredCapabilities: ['system_design' as AgentCapability, 'architecture' as AgentCapability, 'technical_writing' as AgentCapability],\n      metadata: {\n        maestroFeature: featureName,\n        maestroPhase: 'Research & Design',\n        requirements\n      }\n    };\n    \n    // Submit to hive mind orchestrator\n    const task = await this.hiveMind!.submitTask(taskOptions);\n    \n    // Wait for completion with timeout\n    const result = await this.waitForTaskCompletion(task.id, 300000); // 5 minutes\n    \n    // Create design.md with hive mind results\n    const designContent = `# Design for ${featureName}\n\n## Architecture Overview\n\n${result.architectureOverview || 'System architecture designed by hive mind collective intelligence.'}\n\n## Component Design\n\n${result.componentDesign || 'Detailed component breakdown generated through collaborative analysis.'}\n\n## API Design\n\n${result.apiDesign || 'RESTful API endpoints and data structures designed for optimal integration.'}\n\n## Database Schema\n\n${result.databaseSchema || 'Database schema optimized for performance and scalability.'}\n\n## Security Considerations\n\n${result.securityConsiderations || 'Security measures and access controls implemented throughout the system.'}\n\n## Performance Requirements\n\n${result.performanceRequirements || 'Performance benchmarks and optimization strategies defined.'}\n\n## Implementation Strategy\n\n${result.implementationStrategy || 'Step-by-step implementation approach with risk mitigation.'}\n\n*Generated by Maestro with Hive Mind Collective Intelligence*\n*Agents involved: ${result.agentCount || 'Multiple'} specialized agents*\n*Quality score: ${result.qualityScore ? (result.qualityScore * 100).toFixed(1) + '%' : 'High'}*\n`;\n    \n    const featurePath = join(this.specsDirectory, featureName);\n    await writeFile(join(featurePath, 'design.md'), designContent, 'utf8');\n  }\n  \n  /**\n   * Generate design using consistent agent management\n   */\n  private async generateDesignWithAgentManager(featureName: string, requirements: string): Promise<void> {\n    const designTask = {\n      id: `design-task-${featureName}-${Date.now()}`,\n      type: 'design-generation',\n      description: `Generate comprehensive design for feature '${featureName}'`,\n      input: {\n        featureName,\n        requirementsPath: join(this.specsDirectory, featureName, 'requirements.md'),\n        outputPath: join(this.specsDirectory, featureName, 'design.md'),\n        instructions: [\n          'Create comprehensive system architecture',\n          'Define API endpoints and data structures', \n          'Include security and performance considerations',\n          'Provide implementation strategy'\n        ]\n      },\n      priority: 80,\n      metadata: { \n        featureName, \n        maestroPhase: 'Research & Design',\n        outputPath: join(this.specsDirectory, featureName, 'design.md')\n      },\n    };\n\n    // Execute with configurable agent selection (minimal-change enhancement)\n    const optimalAgentTypes = await this.getOptimalAgentTypes(\n      ['design', 'architecture', 'analysis'],\n      'design-generation',\n      2\n    );\n    await this.executeTaskWithManagedAgent(\n      optimalAgentTypes,\n      designTask,\n      ['design', 'architecture', 'analysis']\n    );\n  }\n  \n  /**\n   * Generate tasks from design using intelligent decomposition\n   */\n  async generateTasks(featureName: string): Promise<void> {\n    const state = this.maestroState.get(featureName);\n    if (!state) {\n      throw new SystemError(`No workflow state found for '${featureName}'`);\n    }\n    \n    const featurePath = join(this.specsDirectory, featureName);\n    const designPath = join(featurePath, 'design.md');\n    \n    try {\n      await access(designPath);\n    } catch {\n      throw new SystemError(`Design file not found for '${featureName}'. Run generate-design first.`);\n    }\n    \n    const designContent = await readFile(designPath, 'utf8');\n    \n    // Generate tasks using simple task planner\n    const tasksContent = await this.generateTasksWithSimplePlanner(featureName, designContent);\n    await writeFile(join(featurePath, 'tasks.md'), tasksContent, 'utf8');\n    \n    // Update workflow state\n    state.currentPhase = 'Implementation Planning' as WorkflowPhase;\n    state.lastActivity = new Date();\n    state.history.push({\n      phase: 'Implementation Planning' as WorkflowPhase,\n      status: 'completed',\n      timestamp: new Date()\n    });\n    \n    this.logger.info(`Generated tasks for '${featureName}'`);\n    this.eventBus.emit('maestro:tasks_generated', { featureName });\n  }\n  \n  /**\n   * Generate tasks using consistent agent management pattern\n   */\n  private async generateTasksWithSimplePlanner(featureName: string, designContent: string): Promise<string> {\n    // Create task planning task with consistent structure\n    const taskPlanningTask = {\n      id: `task-planning-${featureName}-${Date.now()}`,\n      type: 'task-planning',\n      description: `Generate implementation tasks for feature '${featureName}'`,\n      input: {\n        featureName,\n        designContent,\n        requirementsPath: join(this.specsDirectory, featureName, 'requirements.md'),\n        outputPath: join(this.specsDirectory, featureName, 'tasks.md'),\n        instructions: [\n          'Analyze design content for implementation tasks',\n          'Create 5-8 specific, actionable tasks with acceptance criteria',\n          'Organize tasks by logical implementation sequence',\n          'Include dependency relationships between tasks',\n          'Format as markdown with checkboxes'\n        ]\n      },\n      priority: 85,\n      metadata: {\n        featureName,\n        maestroPhase: 'Implementation Planning',\n        outputPath: join(this.specsDirectory, featureName, 'tasks.md')\n      },\n    };\n\n    try {\n      this.logger.info(`Generating tasks for ${featureName} using consistent agent management`);\n      \n      // Execute with consistent agent management pattern\n      const result = await this.executeTaskPlanningWithManagedAgent(taskPlanningTask);\n      \n      this.logger.info(`Task plan generated successfully for ${featureName}`);\n      return result;\n      \n    } catch (error) {\n      this.logger.warn(`Agent-based task planning failed: ${error instanceof Error ? error.message : String(error)}, falling back to basic generation`);\n      return this.generateBasicTasksFromDesign(featureName, designContent);\n    }\n  }\n\n  /**\n   * Execute task planning with consistent agent management\n   */\n  private async executeTaskPlanningWithManagedAgent(taskPlanningTask: any): Promise<string> {\n    // Execute with configurable agent selection (minimal-change enhancement)\n    const optimalPlannerTypes = await this.getOptimalAgentTypes(\n      ['project-management', 'task-breakdown', 'planning'],\n      'task-planning',\n      1\n    );\n    await this.executeTaskWithManagedAgent(\n      optimalPlannerTypes, \n      taskPlanningTask,\n      ['project-management', 'task-breakdown', 'planning']\n    );\n    \n    // Try to read the generated output file\n    try {\n      const outputPath = taskPlanningTask.metadata.outputPath;\n      const generatedContent = await readFile(outputPath, 'utf8');\n      \n      // If content was generated, format and return it\n      if (generatedContent && generatedContent.length > 0) {\n        return this.formatTaskPlanningOutput(generatedContent, taskPlanningTask.input.featureName);\n      }\n    } catch (error) {\n      this.logger.debug(`Could not read task planning output: ${error instanceof Error ? error.message : String(error)}`);\n    }\n    \n    // Fallback to basic task generation\n    return this.generateBasicTasksFromDesign(taskPlanningTask.input.featureName, taskPlanningTask.input.designContent);\n  }\n\n  /**\n   * Format task planning output to consistent markdown\n   */\n  private formatTaskPlanningOutput(output: any, featureName: string): string {\n    if (typeof output === 'string' && output.includes('# Implementation Tasks')) {\n      return output;\n    }\n\n    // Handle structured output from agent\n    if (output && typeof output === 'object') {\n      const tasks = output.tasks || output.taskList || [];\n      const dependencies = output.dependencies || '';\n      const notes = output.notes || output.implementationNotes || '';\n      \n      if (Array.isArray(tasks) && tasks.length > 0) {\n        return `# Implementation Tasks for ${featureName}\n\n## Task Breakdown\n\n${tasks.map((task: any, index: number) => {\n  if (typeof task === 'string') {\n    return task.startsWith('- [ ]') ? task : `- [ ] ${task}`;\n  }\n  return `- [ ] ${task.description || task.name || `Task ${index + 1}`}`;\n}).join('\\n')}\n\n${dependencies ? `## Dependencies\\n${dependencies}\\n` : ''}\n${notes ? `## Implementation Notes\\n${notes}\\n` : ''}\n\n*Generated by Maestro Agent-Based Task Planning*`;\n      }\n    }\n\n    // Convert string output to proper format\n    if (typeof output === 'string') {\n      return `# Implementation Tasks for ${featureName}\n\n## Task Breakdown\n\n${output}\n\n*Generated by Maestro Agent-Based Task Planning*`;\n    }\n\n    return `# Implementation Tasks for ${featureName}\n\n## Task Breakdown\n\n${JSON.stringify(output, null, 2)}\n\n*Generated by Maestro Agent-Based Task Planning*`;\n  }\n\n  /**\n   * Fallback: Generate basic tasks from design content\n   */\n  private async generateBasicTasksFromDesign(featureName: string, designContent: string): Promise<string> {\n    // Extract key components from design for task generation\n    const tasks = [\n      '- [ ] Set up project structure and dependencies',\n      '- [ ] Implement core data models',\n      '- [ ] Create API endpoints',\n      '- [ ] Implement business logic',\n      '- [ ] Add input validation and error handling',\n      '- [ ] Implement security measures',\n      '- [ ] Add comprehensive tests',\n      '- [ ] Create documentation',\n      '- [ ] Performance optimization',\n      '- [ ] Integration testing'\n    ];\n    \n    return `# Implementation Tasks for ${featureName}\n\n## Task List\n\n${tasks.join('\\n')}\n\n## Notes\n\n- Tasks are ordered by dependency and logical implementation sequence\n- Each task should be completed and tested before moving to the next\n- Use \\`npx claude-flow maestro implement-task ${featureName} <task-number>\\` to implement each task\n\n*Generated by Maestro Basic Task Generation (Fallback)*\n`;\n  }\n  \n  /**\n   * Implement a specific task with optional consensus validation\n   */\n  async implementTask(featureName: string, taskId: number): Promise<void> {\n    const state = this.maestroState.get(featureName);\n    if (!state) {\n      throw new SystemError(`No workflow state found for '${featureName}'`);\n    }\n    \n    const featurePath = join(this.specsDirectory, featureName);\n    const tasksPath = join(featurePath, 'tasks.md');\n    \n    // Read and validate task\n    const tasksContent = await readFile(tasksPath, 'utf8');\n    const taskLines = tasksContent.split('\\n').filter(line => line.startsWith('- [ ]') || line.startsWith('- [x]'));\n    \n    if (taskId < 1 || taskId > taskLines.length) {\n      throw new SystemError(`Invalid task ID ${taskId} for feature '${featureName}'. Valid range: 1-${taskLines.length}`);\n    }\n    \n    const taskDescription = taskLines[taskId - 1].substring(taskLines[taskId - 1].indexOf(']') + 2).trim();\n    \n    // Use consensus validation if hive mind is available and enabled\n    if (this.consensusEngine && this.maestroConfig.enableHiveMind) {\n      await this.implementTaskWithConsensus(featureName, taskId, taskDescription);\n    } else {\n      await this.implementTaskDirect(featureName, taskId, taskDescription);\n    }\n    \n    // Mark task as completed\n    const updatedTasksContent = tasksContent.replace(\n      taskLines[taskId - 1],\n      taskLines[taskId - 1].replace('- [ ]', '- [x]')\n    );\n    await writeFile(tasksPath, updatedTasksContent, 'utf8');\n    \n    // Update workflow state\n    state.currentPhase = 'Task Execution' as WorkflowPhase;\n    state.currentTaskIndex = taskId;\n    state.lastActivity = new Date();\n    \n    this.logger.info(`Implemented task ${taskId} for '${featureName}': ${taskDescription}`);\n    this.eventBus.emit('maestro:task_implemented', { featureName, taskId, taskDescription });\n  }\n  \n  /**\n   * Implement task with hive mind consensus validation\n   */\n  private async implementTaskWithConsensus(featureName: string, taskId: number, taskDescription: string): Promise<void> {\n    // Create consensus proposal for task implementation\n    const proposal: ConsensusProposal = {\n      id: `maestro-task-${featureName}-${taskId}-${Date.now()}`,\n      swarmId: (this.hiveMind as any).id,\n      proposal: {\n        action: 'implement_task',\n        featureName,\n        taskId,\n        taskDescription,\n        details: `Implement task: ${taskDescription}`\n      },\n      requiredThreshold: this.maestroConfig.consensusThreshold || 0.66,\n      deadline: new Date(Date.now() + 300000), // 5 minutes\n      // creator: 'maestro-orchestrator', // Remove unsupported property\n      taskId: `maestro-task-${featureName}-${taskId}`,\n      metadata: {\n        type: 'task_implementation',\n        featureName,\n        taskId,\n        taskDescription\n      }\n    };\n    \n    // Submit proposal and wait for consensus\n    const proposalId = await this.consensusEngine!.createProposal(proposal);\n    const consensusResult = await this.waitForConsensusResult(proposalId, 300000);\n    \n    if (!consensusResult.achieved) {\n      throw new SystemError(`Consensus failed for task ${taskId}: ${consensusResult.reason || 'Insufficient votes'}`);\n    }\n    \n    this.logger.info(`Consensus achieved for task ${taskId}: ${consensusResult.finalRatio}`);\n    \n    // Proceed with implementation\n    await this.implementTaskDirect(featureName, taskId, taskDescription);\n  }\n  \n  /**\n   * Direct task implementation using consistent agent management\n   */\n  private async implementTaskDirect(featureName: string, taskId: number, taskDescription: string): Promise<void> {\n    const requirementsPath = join(this.specsDirectory, featureName, 'requirements.md');\n    const designPath = join(this.specsDirectory, featureName, 'design.md');\n    \n    const requirementsContent = await readFile(requirementsPath, 'utf8');\n    const designContent = await readFile(designPath, 'utf8');\n    \n    // Create implementation task with consistent structure\n    const implementationTask = {\n      id: `impl-task-${featureName}-${taskId}-${Date.now()}`,\n      type: 'task-implementation',\n      description: `Implement: ${taskDescription}`,\n      input: {\n        featureName,\n        taskId,\n        taskDescription,\n        requirements: requirementsContent,\n        design: designContent,\n        context: await this.getSteeringContext('developer')\n      },\n      priority: 90,\n      metadata: { \n        featureName, \n        taskId,\n        maestroPhase: 'Task Execution' \n      },\n    };\n\n    // Execute with configurable agent selection (minimal-change enhancement)\n    const optimalDeveloperTypes = await this.getOptimalAgentTypes(\n      ['implementation', 'coding', 'testing'],\n      'task-implementation',\n      2\n    );\n    await this.executeTaskWithManagedAgent(\n      optimalDeveloperTypes, \n      implementationTask,\n      ['implementation', 'coding', 'testing']\n    );\n  }\n  \n  /**\n   * Approve a workflow phase with optional consensus\n   */\n  async approvePhase(featureName: string): Promise<void> {\n    const state = this.maestroState.get(featureName);\n    if (!state) {\n      throw new SystemError(`No workflow state found for '${featureName}'`);\n    }\n    \n    const currentPhase = state.currentPhase;\n    \n    // Phase progression logic\n    const phaseProgression: Record<string, string> = {\n      'Requirements Clarification': 'Research & Design',\n      'Research & Design': 'Implementation Planning', \n      'Implementation Planning': 'Task Execution',\n      'Task Execution': 'Completed'\n    };\n    \n    const nextPhase = phaseProgression[currentPhase];\n    if (!nextPhase) {\n      throw new SystemError(`Cannot progress from phase '${currentPhase}'`);\n    }\n    \n    // Update state\n    state.currentPhase = nextPhase as WorkflowPhase;\n    state.lastActivity = new Date();\n    state.history.push({\n      phase: nextPhase as WorkflowPhase,\n      status: 'approved' as 'completed' | 'failed' | 'in-progress' | 'approved',\n      timestamp: new Date()\n    });\n    \n    this.logger.info(`Approved phase transition for '${featureName}': ${currentPhase} -> ${nextPhase}`);\n    this.eventBus.emit('maestro:phase_approved', { featureName, fromPhase: currentPhase, toPhase: nextPhase });\n  }\n  \n  /**\n   * Get current workflow state\n   */\n  getWorkflowState(featureName: string): MaestroWorkflowState | undefined {\n    return this.maestroState.get(featureName);\n  }\n  \n  /**\n   * Create steering document for project context\n   */\n  async createSteeringDocument(domain: string, content: string): Promise<void> {\n    await mkdir(this.steeringDirectory, { recursive: true });\n    const steeringPath = join(this.steeringDirectory, `${domain}.md`);\n    \n    const steeringContent = `# ${domain.charAt(0).toUpperCase() + domain.slice(1)} Steering Document\n\n${content}\n\n## Guidelines\n\n[Provide specific guidelines for the '${domain}' domain. E.g., API design, testing, security, coding style.]\n`;\n    \n    await writeFile(steeringPath, steeringContent, 'utf8');\n    this.logger.info(`Created steering document for '${domain}' at '${steeringPath}'`);\n  }\n  \n  /**\n   * Enhanced agent management with reuse-first strategy (minimal-change improvement)\n   * Single Responsibility: Manages agent lifecycle for any task type\n   * Open/Closed: Extensible for new agent types without modification\n   * Dependency Inversion: Depends on abstractions, not concrete implementations\n   */\n  private async executeTaskWithManagedAgent(\n    agentTypes: string[], \n    task: any, \n    capabilities: string[]\n  ): Promise<void> {\n    const acquiredAgents: string[] = [];\n    const spawnedAgents: string[] = [];\n    \n    try {\n      // Step 1: Try to reuse existing agents first (minimal-change enhancement)\n      const reusedAgents = await this.findReusableAgents(capabilities, agentTypes.length);\n      acquiredAgents.push(...reusedAgents);\n      \n      // Step 2: Spawn additional agents only if needed\n      const needed = agentTypes.length - reusedAgents.length;\n      if (needed > 0) {\n        const typesToSpawn = agentTypes.slice(0, needed);\n        \n        for (const agentType of typesToSpawn) {\n          try {\n            const agentProfile = this.createStandardAgentProfile(agentType, task.metadata?.featureName, capabilities);\n            const resolvedType = this.getAgentTemplate(agentType);\n            const agentId = await this.agentManager.createAgent(resolvedType, agentProfile);\n            await this.agentManager.startAgent(agentId);\n            \n            // Add to pool for future reuse\n            await this.addAgentToPool(agentId, resolvedType, capabilities);\n            \n            spawnedAgents.push(agentId);\n            acquiredAgents.push(agentId);\n          } catch (error) {\n            this.logger.warn(`Failed to spawn ${agentType} (resolved to ${this.getAgentTemplate(agentType)}): ${error instanceof Error ? error.message : String(error)}`);\n          }\n        }\n      }\n      \n      // Step 3: Mark reused agents as busy\n      await this.markAgentsAsBusy(reusedAgents, task.id);\n      \n      // Assign task to first available agent (fallback to default)\n      const assignedAgent = acquiredAgents[0] || 'default';\n      task.assignedAgent = assignedAgent;\n      \n      // Execute task through main orchestrator\n      await this.mainOrchestrator.assignTask(task);\n      \n      this.logger.info(`Task ${task.id} executed with ${reusedAgents.length} reused + ${spawnedAgents.length} spawned agents`);\n      \n    } finally {\n      // Step 4: Release agents back to pool (enhanced cleanup)\n      await this.releaseAgentsToPool(acquiredAgents, spawnedAgents);\n    }\n  }\n\n  /**\n   * Create standardized agent profile (KISS + SOLID principles + alias support)\n   */\n  private createStandardAgentProfile(agentType: string, featureName?: string, capabilities?: string[]): AgentProfile {\n    // Resolve agent type aliases\n    const resolvedType = this.getAgentTemplate(agentType);\n    \n    return {\n      id: `${agentType}-${featureName || 'default'}-${Date.now()}`,\n      name: `${agentType}${featureName ? ` for ${featureName}` : ''}`,\n      type: resolvedType, // Use resolved type for actual agent creation\n      capabilities: capabilities || this.getDefaultCapabilitiesForAgentType(agentType),\n      maxConcurrentTasks: 1,\n      priority: this.getDefaultPriorityForAgentType(agentType)\n    };\n  }\n\n  /**\n   * Agent alias mapping for backward compatibility (SOLID: Open/Closed)\n   */\n  private getAgentTemplate(agentType: string): string {\n    const aliasMap: Record<string, string> = {\n      'planner': 'task-planner',\n      'coder': 'developer'\n    };\n    return aliasMap[agentType] || agentType;\n  }\n\n  /**\n   * Get default capabilities based on agent type (KISS principle + comprehensive coverage)\n   */\n  private getDefaultCapabilitiesForAgentType(agentType: string): string[] {\n    const capabilityMap: Record<string, string[]> = {\n      // Core Architecture & Design\n      'design-architect': ['design', 'architecture', 'analysis'],\n      'system-architect': ['system-architecture', 'scalability', 'performance', 'distributed-systems'],\n      \n      // Development & Implementation\n      'developer': ['implementation', 'coding', 'testing'],\n      'coder': ['implementation', 'coding', 'testing'],\n      \n      // Project Management & Planning\n      'task-planner': ['project-management', 'task-breakdown', 'planning'],\n      'planner': ['project-management', 'task-breakdown', 'planning'],\n      \n      // Quality Assurance & Testing\n      'tester': ['testing', 'quality-assurance', 'test-automation'],\n      'reviewer': ['code-review', 'quality-assurance', 'analysis'],\n      \n      // Research & Analysis (previously unused templates now integrated)\n      'researcher': ['research', 'analysis', 'documentation'],\n      'analyst': ['analysis', 'data-processing', 'visualization'],\n      'requirements-engineer': ['requirements', 'documentation', 'analysis'],\n      'steering-author': ['documentation', 'governance', 'content-creation']\n    };\n    \n    return capabilityMap[agentType] || ['general'];\n  }\n\n  /**\n   * Get default priority based on agent type (KISS principle + comprehensive coverage)\n   */\n  private getDefaultPriorityForAgentType(agentType: string): number {\n    const priorityMap: Record<string, number> = {\n      // Critical Implementation (Highest Priority)\n      'developer': 90,\n      'coder': 90,\n      \n      // Architecture & Planning (High Priority)  \n      'design-architect': 85,\n      'system-architect': 85,\n      'task-planner': 85,\n      'planner': 85,\n      \n      // Quality Assurance (Medium-High Priority)\n      'tester': 80,\n      'reviewer': 75,\n      \n      // Research & Analysis (Medium Priority)\n      'researcher': 70,\n      'analyst': 70,\n      'requirements-engineer': 75,\n      \n      // Documentation & Governance (Lower Priority)\n      'steering-author': 65\n    };\n    \n    return priorityMap[agentType] || 70;\n  }\n\n  /**\n   * Get optimal agent types for task based on capabilities and availability (minimal-change enhancement)\n   * Replaces hardcoded agent arrays with intelligent selection\n   */\n  private async getOptimalAgentTypes(\n    requiredCapabilities: string[], \n    taskType: string,\n    maxAgents: number = 2\n  ): Promise<string[]> {\n    // Check for available agents with matching capabilities first\n    const availableAgents = await this.findReusableAgents(requiredCapabilities, maxAgents);\n    \n    if (availableAgents.length >= maxAgents) {\n      // Use existing agents if available\n      return availableAgents.map(agentId => {\n        const pooledAgent = this.agentPool.get(agentId);\n        return pooledAgent?.type || 'general';\n      });\n    }\n    \n    // Fallback to configured agent types based on capabilities and task type\n    return this.getConfiguredAgentTypes(requiredCapabilities, taskType, maxAgents);\n  }\n\n  /**\n   * Get configured agent types based on task requirements (replaces hardcoded arrays)\n   */\n  private getConfiguredAgentTypes(\n    requiredCapabilities: string[], \n    taskType: string,\n    maxAgents: number\n  ): string[] {\n    // Smart mapping based on task type and capabilities\n    const taskTypeAgents: Record<string, string[]> = {\n      'design-generation': ['design-architect', 'system-architect'],\n      'task-planning': ['task-planner', 'planner'],\n      'task-implementation': ['developer', 'coder'],\n      'code-review': ['reviewer', 'analyst'],\n      'research': ['researcher', 'analyst'],\n      'documentation': ['requirements-engineer', 'steering-author']\n    };\n\n    // Capability-based fallback mapping\n    const capabilityAgents: Record<string, string[]> = {\n      'design': ['design-architect', 'system-architect'],\n      'architecture': ['system-architect', 'design-architect'],\n      'system-architecture': ['system-architect'],\n      'implementation': ['developer', 'coder'],\n      'coding': ['developer', 'coder'],\n      'testing': ['tester', 'developer'],\n      'project-management': ['task-planner'],\n      'task-breakdown': ['task-planner'],\n      'planning': ['task-planner', 'planner'],\n      'analysis': ['analyst', 'researcher'],\n      'research': ['researcher', 'analyst'],\n      'documentation': ['requirements-engineer', 'steering-author'],\n      'code-review': ['reviewer', 'analyst'],\n      'quality-assurance': ['reviewer', 'tester']\n    };\n\n    // Try task type first\n    let agentTypes = taskTypeAgents[taskType] || [];\n\n    // If no direct task type match, build from capabilities\n    if (agentTypes.length === 0) {\n      const typeSet = new Set<string>();\n      \n      for (const capability of requiredCapabilities) {\n        const possibleTypes = capabilityAgents[capability] || [];\n        possibleTypes.forEach(type => typeSet.add(type));\n      }\n      \n      agentTypes = Array.from(typeSet);\n    }\n\n    // Fallback to general agent types\n    if (agentTypes.length === 0) {\n      agentTypes = ['developer', 'analyst']; // Safe defaults\n    }\n\n    // Limit to maxAgents\n    return agentTypes.slice(0, maxAgents);\n  }\n\n  /**\n   * Find reusable agents with matching capabilities (minimal-change enhancement)\n   */\n  private async findReusableAgents(requiredCapabilities: string[], maxAgents: number): Promise<string[]> {\n    const reusableAgents: string[] = [];\n    \n    try {\n      // Find agents with matching capabilities using capability index\n      let candidateIds: Set<string> | null = null;\n      \n      for (const capability of requiredCapabilities) {\n        const agentsWithCapability = this.capabilityIndex.get(capability);\n        \n        if (!agentsWithCapability || agentsWithCapability.size === 0) {\n          continue; // Skip if no agents have this capability\n        }\n        \n        if (candidateIds === null) {\n          candidateIds = new Set(agentsWithCapability);\n        } else {\n          // Find intersection - agents with ALL required capabilities\n          const intersection = new Set<string>();\n          candidateIds.forEach(id => {\n            if (agentsWithCapability.has(id)) {\n              intersection.add(id);\n            }\n          });\n          candidateIds = intersection;\n        }\n      }\n      \n      // Get available agents from candidates\n      if (candidateIds && candidateIds.size > 0) {\n        for (const agentId of candidateIds) {\n          if (reusableAgents.length >= maxAgents) break;\n          \n          const pooledAgent = this.agentPool.get(agentId);\n          if (pooledAgent && pooledAgent.status === 'available') {\n            reusableAgents.push(agentId);\n          }\n        }\n      }\n      \n      if (reusableAgents.length > 0) {\n        this.logger.info(`Found ${reusableAgents.length} reusable agents for capabilities: [${requiredCapabilities.join(', ')}]`);\n      }\n      \n    } catch (error) {\n      this.logger.warn(`Error finding reusable agents: ${error instanceof Error ? error.message : String(error)}`);\n    }\n    \n    return reusableAgents;\n  }\n\n  /**\n   * Add agent to pool for future reuse (minimal-change enhancement)\n   */\n  private async addAgentToPool(agentId: string, agentType: string, capabilities: string[]): Promise<void> {\n    try {\n      const pooledAgent: PooledAgent = {\n        id: agentId,\n        type: agentType,\n        capabilities: capabilities,\n        status: 'available',\n        lastUsed: new Date(),\n        usageCount: 0,\n        createdAt: new Date()\n      };\n      \n      // Add to main pool\n      this.agentPool.set(agentId, pooledAgent);\n      \n      // Update capability index for efficient lookup\n      for (const capability of capabilities) {\n        if (!this.capabilityIndex.has(capability)) {\n          this.capabilityIndex.set(capability, new Set());\n        }\n        this.capabilityIndex.get(capability)!.add(agentId);\n      }\n      \n      this.logger.debug(`Added agent ${agentId} (${agentType}) to pool with capabilities: [${capabilities.join(', ')}]`);\n      \n    } catch (error) {\n      this.logger.warn(`Failed to add agent ${agentId} to pool: ${error instanceof Error ? error.message : String(error)}`);\n    }\n  }\n\n  /**\n   * Mark agents as busy when assigned to tasks (minimal-change enhancement)\n   */\n  private async markAgentsAsBusy(agentIds: string[], taskId: string): Promise<void> {\n    for (const agentId of agentIds) {\n      try {\n        const pooledAgent = this.agentPool.get(agentId);\n        if (pooledAgent) {\n          pooledAgent.status = 'busy';\n          pooledAgent.lastUsed = new Date();\n          pooledAgent.usageCount++;\n        }\n      } catch (error) {\n        this.logger.warn(`Failed to mark agent ${agentId} as busy: ${error instanceof Error ? error.message : String(error)}`);\n      }\n    }\n  }\n\n  /**\n   * Enhanced agent cleanup with pool management (minimal-change enhancement)\n   */\n  private async releaseAgentsToPool(allAgents: string[], spawnedAgents: string[]): Promise<void> {\n    for (const agentId of allAgents) {\n      try {\n        const pooledAgent = this.agentPool.get(agentId);\n        \n        if (pooledAgent) {\n          // If agent was spawned for this task and has low usage, consider cleanup\n          const wasSpawned = spawnedAgents.includes(agentId);\n          const shouldKeepInPool = !wasSpawned || pooledAgent.usageCount > 1 || this.shouldKeepAgent(pooledAgent);\n          \n          if (shouldKeepInPool) {\n            // Return to pool as available\n            pooledAgent.status = 'available';\n            this.logger.debug(`Released agent ${agentId} back to pool (usage: ${pooledAgent.usageCount})`);\n          } else {\n            // Cleanup agent and remove from pool\n            await this.cleanupPooledAgent(agentId);\n          }\n        } else {\n          // Agent not in pool, cleanup immediately\n          await this.agentManager.stopAgent(agentId);\n        }\n        \n      } catch (error) {\n        this.logger.warn(`Failed to release agent ${agentId}: ${error instanceof Error ? error.message : String(error)}`);\n      }\n    }\n  }\n\n  /**\n   * Determine if agent should be kept in pool (simple heuristic)\n   */\n  private shouldKeepAgent(pooledAgent: PooledAgent): boolean {\n    const maxPoolSize = 10; // Simple pool size limit\n    const currentPoolSize = Array.from(this.agentPool.values()).filter(a => a.status === 'available').length;\n    \n    // Keep if under pool limit and recently used\n    const recentlyUsed = Date.now() - pooledAgent.lastUsed.getTime() < 1800000; // 30 minutes\n    return currentPoolSize < maxPoolSize && (recentlyUsed || pooledAgent.usageCount > 2);\n  }\n\n  /**\n   * Cleanup agent and remove from pool\n   */\n  private async cleanupPooledAgent(agentId: string): Promise<void> {\n    try {\n      const pooledAgent = this.agentPool.get(agentId);\n      \n      // Remove from capability index\n      if (pooledAgent) {\n        for (const capability of pooledAgent.capabilities) {\n          const capabilitySet = this.capabilityIndex.get(capability);\n          if (capabilitySet) {\n            capabilitySet.delete(agentId);\n            if (capabilitySet.size === 0) {\n              this.capabilityIndex.delete(capability);\n            }\n          }\n        }\n      }\n      \n      // Remove from pool\n      this.agentPool.delete(agentId);\n      \n      // Stop the actual agent\n      await this.agentManager.stopAgent(agentId);\n      \n      this.logger.debug(`Cleaned up agent ${agentId} and removed from pool`);\n      \n    } catch (error) {\n      this.logger.warn(`Failed to cleanup pooled agent ${agentId}: ${error instanceof Error ? error.message : String(error)}`);\n    }\n  }\n\n  /**\n   * Legacy cleanup method - now delegates to enhanced pool management\n   */\n  private async cleanupManagedAgents(agentIds: string[]): Promise<void> {\n    // For backward compatibility - cleanup all specified agents\n    for (const agentId of agentIds) {\n      try {\n        await this.cleanupPooledAgent(agentId);\n      } catch (error) {\n        this.logger.warn(`Failed to cleanup agent ${agentId}: ${error instanceof Error ? error.message : String(error)}`);\n      }\n    }\n  }\n\n  /**\n   * Shutdown agent pool and cleanup all agents (minimal-change enhancement)\n   */\n  private async shutdownAgentPool(): Promise<void> {\n    this.logger.info(`Shutting down agent pool with ${this.agentPool.size} agents`);\n    \n    const allAgentIds = Array.from(this.agentPool.keys());\n    \n    // Cleanup all pooled agents\n    for (const agentId of allAgentIds) {\n      try {\n        await this.cleanupPooledAgent(agentId);\n      } catch (error) {\n        this.logger.warn(`Failed to cleanup pooled agent ${agentId} during shutdown: ${error instanceof Error ? error.message : String(error)}`);\n      }\n    }\n    \n    // Clear data structures\n    this.agentPool.clear();\n    this.capabilityIndex.clear();\n    \n    this.logger.info('Agent pool shutdown complete');\n  }\n\n  /**\n   * Get agent pool statistics (useful for monitoring and debugging)\n   */\n  getAgentPoolStats(): {\n    totalAgents: number;\n    availableAgents: number;\n    busyAgents: number;\n    averageUsage: number;\n    capabilitiesCovered: number;\n    reuseRate: number;\n  } {\n    const agents = Array.from(this.agentPool.values());\n    const totalAgents = agents.length;\n    \n    if (totalAgents === 0) {\n      return {\n        totalAgents: 0,\n        availableAgents: 0,\n        busyAgents: 0,\n        averageUsage: 0,\n        capabilitiesCovered: 0,\n        reuseRate: 0\n      };\n    }\n    \n    const availableAgents = agents.filter(a => a.status === 'available').length;\n    const busyAgents = agents.filter(a => a.status === 'busy').length;\n    const averageUsage = agents.reduce((sum, a) => sum + a.usageCount, 0) / totalAgents;\n    const capabilitiesCovered = this.capabilityIndex.size;\n    \n    // Calculate reuse rate (agents with usage > 1)\n    const reusedAgents = agents.filter(a => a.usageCount > 1).length;\n    const reuseRate = totalAgents > 0 ? reusedAgents / totalAgents : 0;\n    \n    return {\n      totalAgents,\n      availableAgents,\n      busyAgents,\n      averageUsage,\n      capabilitiesCovered,\n      reuseRate\n    };\n  }\n\n  /**\n   * Get steering context for agent types\n   */\n  async getSteeringContext(agentType: string, filePath?: string): Promise<string> {\n    let context = '';\n    const steeringFiles = ['product.md', 'tech.md', 'structure.md'];\n    \n    for (const file of steeringFiles) {\n      try {\n        context += await readFile(join(this.steeringDirectory, file), 'utf8') + '\\n\\n---\\n\\n';\n      } catch (error) {\n        this.logger.warn(`Could not read steering file ${file}: ${error instanceof Error ? error.message : String(error)}`);\n      }\n    }\n    \n    return context || 'No steering context available.';\n  }\n  \n  /**\n   * Initialize agentic hooks system\n   */\n  private async initializeAgenticHooks(): Promise<void> {\n    if (!this.agenticHooksInitialized) {\n      try {\n        await initializeAgenticFlowHooks();\n        this.agenticHooksInitialized = true;\n        this.logger.info('Agentic hooks system initialized for Maestro');\n        \n        // Register Maestro-specific hooks\n        this.registerMaestroHooks();\n      } catch (error) {\n        this.logger.error('Failed to initialize agentic hooks:', error);\n      }\n    }\n  }\n  \n  /**\n   * Register Maestro-specific hooks\n   */\n  private registerMaestroHooks(): void {\n    // Register workflow hooks\n    agenticHookManager.register({\n      id: 'maestro-spec-created',\n      type: 'workflow-start',\n      handler: async (payload, context) => {\n        this.logger.info('Maestro spec creation hook triggered');\n        return { continue: true };\n      },\n      priority: 50\n    });\n    \n    agenticHookManager.register({\n      id: 'maestro-task-completed', \n      type: 'workflow-step',\n      handler: async (payload, context) => {\n        this.logger.info('Maestro task completion hook triggered');\n        return { continue: true };\n      },\n      priority: 50\n    });\n    \n    this.logger.info('Maestro-specific hooks registered');\n  }\n  \n  /**\n   * Setup event handlers\n   */\n  private setupEventHandlers(): void {\n    this.eventBus.on('maestro:spec_created', this.handleSpecCreated.bind(this));\n    this.eventBus.on('maestro:phase_approved', this.handlePhaseApproved.bind(this));\n    this.eventBus.on('maestro:task_implemented', this.handleTaskImplemented.bind(this));\n  }\n  \n  /**\n   * Event handlers\n   */\n  private async handleSpecCreated(data: any): Promise<void> {\n    this.logger.info(`Spec created event: ${JSON.stringify(data)}`);\n  }\n  \n  private async handlePhaseApproved(data: any): Promise<void> {\n    this.logger.info(`Phase approved event: ${JSON.stringify(data)}`);\n  }\n  \n  private async handleTaskImplemented(data: any): Promise<void> {\n    this.logger.info(`Task implemented event: ${JSON.stringify(data)}`);\n  }\n  \n  /**\n   * Utility: Wait for task completion in hive mind\n   */\n  private async waitForTaskCompletion(taskId: string, timeoutMs: number = 300000): Promise<any> {\n    return new Promise((resolve, reject) => {\n      const timeout = setTimeout(() => {\n        reject(new Error(`Task timeout: ${taskId}`));\n      }, timeoutMs);\n      \n      const checkInterval = setInterval(async () => {\n        try {\n          const task = await this.hiveMind!.getTask(taskId);\n          \n          if (task.status === 'completed') {\n            clearTimeout(timeout);\n            clearInterval(checkInterval);\n            resolve(task.result ? JSON.parse(task.result) : {});\n          } else if (task.status === 'failed') {\n            clearTimeout(timeout);\n            clearInterval(checkInterval);\n            reject(new Error(`Task failed: ${task.error || 'Unknown error'}`));\n          }\n        } catch (error) {\n          clearTimeout(timeout);\n          clearInterval(checkInterval);\n          reject(error);\n        }\n      }, 2000);\n    });\n  }\n  \n  /**\n   * Utility: Wait for consensus result\n   */\n  private async waitForConsensusResult(proposalId: string, timeoutMs: number): Promise<any> {\n    return new Promise((resolve, reject) => {\n      const timeout = setTimeout(() => {\n        reject(new Error(`Consensus timeout for proposal ${proposalId}`));\n      }, timeoutMs);\n      \n      const checkInterval = setInterval(async () => {\n        try {\n          const status = await this.consensusEngine!.getProposalStatus(proposalId);\n          \n          if (status.status === 'achieved') {\n            clearTimeout(timeout);\n            clearInterval(checkInterval);\n            resolve({\n              achieved: true,\n              finalRatio: status.currentRatio,\n              reason: 'Consensus achieved'\n            });\n          } else if (status.status === 'failed') {\n            clearTimeout(timeout);\n            clearInterval(checkInterval);\n            resolve({\n              achieved: false,\n              finalRatio: status.currentRatio,\n              reason: 'Consensus failed'\n            });\n          }\n        } catch (error) {\n          clearTimeout(timeout);\n          clearInterval(checkInterval);\n          reject(error);\n        }\n      }, 1000);\n    });\n  }\n  \n  /**\n   * Shutdown orchestrator and cleanup resources\n   */\n  async shutdown(): Promise<void> {\n    this.logger.info('Shutting down Maestro Orchestrator');\n    \n    // Close file watchers\n    for (const [featureName, watcher] of this.fileWatchers) {\n      await watcher.close();\n      this.logger.info(`Closed file watcher for '${featureName}'`);\n    }\n    \n    // Shutdown agentic hooks if initialized\n    if (this.agenticHooksInitialized) {\n      // Unregister Maestro hooks\n      try {\n        agenticHookManager.unregister('maestro-spec-created');\n        agenticHookManager.unregister('maestro-task-completed');\n      } catch (error) {\n        this.logger.warn('Failed to unregister Maestro hooks:', error);\n      }\n    }\n\n    // Shutdown hive mind if initialized\n    if (this.hiveMind) {\n      await this.hiveMind.shutdown();\n      this.logger.info('Hive mind shutdown complete');\n    }\n    \n    // Cleanup agent pool (minimal-change enhancement)\n    await this.shutdownAgentPool();\n    \n    // Task planner removed - using direct agent management\n    \n    this.logger.info('Maestro Orchestrator shutdown complete');\n  }\n}"],"version":3}