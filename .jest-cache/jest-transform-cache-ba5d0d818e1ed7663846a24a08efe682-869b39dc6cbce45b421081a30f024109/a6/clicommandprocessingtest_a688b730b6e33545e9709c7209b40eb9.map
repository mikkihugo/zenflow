{"file":"/home/mhugo/code/claude-code-flow/src/__tests__/unit/london/cli-commands/cli-command-processing.test.ts","mappings":"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","names":[],"sources":["/home/mhugo/code/claude-code-flow/src/__tests__/unit/london/cli-commands/cli-command-processing.test.ts"],"sourcesContent":["/**\n * CLI Command Processing Tests - TDD London School\n * \n * Comprehensive tests for CLI command processing behavior using London TDD approach.\n * Tests focus on interactions and behavior verification rather than state testing.\n */\n\nimport { jest, describe, it, expect, beforeEach, afterEach } from '@jest/globals';\n\n// Mock types for testing CLI command processing\ninterface MockCommandRegistry {\n  register: jest.Mock;\n  unregister: jest.Mock;\n  execute: jest.Mock;\n  has: jest.Mock;\n  list: jest.Mock;\n}\n\ninterface MockCommandContext {\n  args: string[];\n  flags: Record<string, unknown>;\n  command: string;\n}\n\ninterface MockCommandResult {\n  success: boolean;\n  exitCode: number;\n  message?: string;\n  data?: unknown;\n}\n\ninterface MockArgumentParser {\n  parse: jest.Mock;\n  validate: jest.Mock;\n}\n\ninterface MockOutputFormatter {\n  format: jest.Mock;\n  setDefaults: jest.Mock;\n}\n\ninterface MockErrorHandler {\n  handle: jest.Mock;\n  register: jest.Mock;\n}\n\ndescribe('CLI Command Processing - TDD London', () => {\n  let mockRegistry: MockCommandRegistry;\n  let mockParser: MockArgumentParser;\n  let mockFormatter: MockOutputFormatter;\n  let mockErrorHandler: MockErrorHandler;\n\n  beforeEach(() => {\n    // Setup mocks for all CLI components\n    mockRegistry = {\n      register: jest.fn(),\n      unregister: jest.fn(),\n      execute: jest.fn(),\n      has: jest.fn(),\n      list: jest.fn()\n    };\n\n    mockParser = {\n      parse: jest.fn(),\n      validate: jest.fn()\n    };\n\n    mockFormatter = {\n      format: jest.fn(),\n      setDefaults: jest.fn()\n    };\n\n    mockErrorHandler = {\n      handle: jest.fn(),\n      register: jest.fn()\n    };\n  });\n\n  describe('command registration behavior', () => {\n    it('should register command and verify registration call', () => {\n      // Arrange\n      const commandConfig = {\n        name: 'test-command',\n        description: 'Test command',\n        handler: jest.fn()\n      };\n\n      // Act\n      mockRegistry.register(commandConfig);\n\n      // Assert - verify interaction\n      expect(mockRegistry.register).toHaveBeenCalledWith(commandConfig);\n      expect(mockRegistry.register).toHaveBeenCalledTimes(1);\n    });\n\n    it('should check command existence through registry', () => {\n      // Arrange\n      const commandName = 'status';\n      mockRegistry.has.mockReturnValue(true);\n\n      // Act\n      const exists = mockRegistry.has(commandName);\n\n      // Assert - verify behavior\n      expect(mockRegistry.has).toHaveBeenCalledWith(commandName);\n      expect(exists).toBe(true);\n    });\n\n    it('should list registered commands', () => {\n      // Arrange\n      const expectedCommands = [\n        { name: 'status', description: 'Show status' },\n        { name: 'init', description: 'Initialize project' }\n      ];\n      mockRegistry.list.mockReturnValue(expectedCommands);\n\n      // Act\n      const commands = mockRegistry.list();\n\n      // Assert - verify interaction and result\n      expect(mockRegistry.list).toHaveBeenCalled();\n      expect(commands).toEqual(expectedCommands);\n    });\n\n    it('should unregister command and confirm removal', () => {\n      // Arrange\n      const commandName = 'old-command';\n      mockRegistry.unregister.mockReturnValue(true);\n\n      // Act\n      const removed = mockRegistry.unregister(commandName);\n\n      // Assert - verify unregistration behavior\n      expect(mockRegistry.unregister).toHaveBeenCalledWith(commandName);\n      expect(removed).toBe(true);\n    });\n  });\n\n  describe('argument parsing behavior', () => {\n    it('should parse command line arguments correctly', () => {\n      // Arrange\n      const args = ['deploy', 'app', '--env', 'production', '--verbose'];\n      const expectedResult = {\n        command: 'deploy',\n        args: ['app'],\n        flags: { env: 'production', verbose: true }\n      };\n      mockParser.parse.mockReturnValue(expectedResult);\n\n      // Act\n      const result = mockParser.parse(args);\n\n      // Assert - verify parsing interaction\n      expect(mockParser.parse).toHaveBeenCalledWith(args);\n      expect(result).toEqual(expectedResult);\n    });\n\n    it('should validate parsed arguments', () => {\n      // Arrange\n      const parseResult = {\n        command: 'deploy',\n        args: ['app'],\n        flags: { env: 'production' }\n      };\n      const validationResult = {\n        valid: true,\n        errors: [],\n        warnings: []\n      };\n      mockParser.validate.mockReturnValue(validationResult);\n\n      // Act\n      const result = mockParser.validate(parseResult);\n\n      // Assert - verify validation behavior\n      expect(mockParser.validate).toHaveBeenCalledWith(parseResult);\n      expect(result.valid).toBe(true);\n    });\n\n    it('should handle parsing errors gracefully', () => {\n      // Arrange\n      const invalidArgs = ['--invalid-flag-without-command'];\n      const errorResult = {\n        command: null,\n        args: [],\n        flags: {},\n        errors: ['No command specified']\n      };\n      mockParser.parse.mockReturnValue(errorResult);\n\n      // Act\n      const result = mockParser.parse(invalidArgs);\n\n      // Assert - verify error handling behavior\n      expect(mockParser.parse).toHaveBeenCalledWith(invalidArgs);\n      expect(result.command).toBeNull();\n      expect(result.errors).toContain('No command specified');\n    });\n  });\n\n  describe('command execution behavior', () => {\n    it('should execute command with proper context', async () => {\n      // Arrange\n      const context: MockCommandContext = {\n        args: ['app'],\n        flags: { env: 'production', verbose: true },\n        command: 'deploy'\n      };\n      const expectedResult: MockCommandResult = {\n        success: true,\n        exitCode: 0,\n        message: 'Deployment successful',\n        data: { deployed: true }\n      };\n      mockRegistry.execute.mockResolvedValue(expectedResult);\n\n      // Act\n      const result = await mockRegistry.execute('deploy', context);\n\n      // Assert - verify execution behavior\n      expect(mockRegistry.execute).toHaveBeenCalledWith('deploy', context);\n      expect(result).toEqual(expectedResult);\n    });\n\n    it('should handle command execution failure', async () => {\n      // Arrange\n      const context: MockCommandContext = {\n        args: [],\n        flags: {},\n        command: 'failing-command'\n      };\n      const errorResult: MockCommandResult = {\n        success: false,\n        exitCode: 1,\n        message: 'Command execution failed'\n      };\n      mockRegistry.execute.mockResolvedValue(errorResult);\n\n      // Act\n      const result = await mockRegistry.execute('failing-command', context);\n\n      // Assert - verify failure handling\n      expect(mockRegistry.execute).toHaveBeenCalledWith('failing-command', context);\n      expect(result.success).toBe(false);\n      expect(result.exitCode).toBe(1);\n    });\n\n    it('should handle command not found scenario', async () => {\n      // Arrange\n      const context: MockCommandContext = {\n        args: [],\n        flags: {},\n        command: 'unknown-command'\n      };\n      const notFoundResult: MockCommandResult = {\n        success: false,\n        exitCode: 127,\n        message: 'Command not found'\n      };\n      mockRegistry.execute.mockResolvedValue(notFoundResult);\n\n      // Act\n      const result = await mockRegistry.execute('unknown-command', context);\n\n      // Assert - verify not found behavior\n      expect(result.exitCode).toBe(127);\n      expect(result.message).toContain('Command not found');\n    });\n  });\n\n  describe('output formatting behavior', () => {\n    it('should format command output in specified format', () => {\n      // Arrange\n      const data = { status: 'running', agents: 3, tasks: 15 };\n      const options = { format: 'json', indent: 2 };\n      const expectedOutput = JSON.stringify(data, null, 2);\n      mockFormatter.format.mockReturnValue(expectedOutput);\n\n      // Act\n      const result = mockFormatter.format(data, options);\n\n      // Assert - verify formatting interaction\n      expect(mockFormatter.format).toHaveBeenCalledWith(data, options);\n      expect(result).toBe(expectedOutput);\n    });\n\n    it('should apply default formatting options', () => {\n      // Arrange\n      const defaults = { format: 'table', colors: true };\n      \n      // Act\n      mockFormatter.setDefaults(defaults);\n\n      // Assert - verify defaults application\n      expect(mockFormatter.setDefaults).toHaveBeenCalledWith(defaults);\n    });\n\n    it('should handle different output formats', () => {\n      // Arrange\n      const testData = { message: 'test output' };\n      const formats = ['json', 'yaml', 'table', 'text'];\n      const expectedOutputs = {\n        json: '{\"message\": \"test output\"}',\n        yaml: 'message: test output',\n        table: '| message      | \\n| test output  |',\n        text: 'message: test output'\n      };\n\n      // Act & Assert for each format\n      formats.forEach(format => {\n        mockFormatter.format.mockReturnValue(expectedOutputs[format]);\n        const result = mockFormatter.format(testData, { format });\n        \n        expect(mockFormatter.format).toHaveBeenCalledWith(testData, { format });\n        expect(result).toBe(expectedOutputs[format]);\n      });\n    });\n  });\n\n  describe('error handling behavior', () => {\n    it('should handle errors and return error result', async () => {\n      // Arrange\n      const error = new Error('Test error');\n      const context = { command: 'test-command', args: [], flags: {} };\n      const errorResult = {\n        handled: true,\n        exitCode: 1,\n        message: 'Test error handled',\n        recovered: false\n      };\n      mockErrorHandler.handle.mockResolvedValue(errorResult);\n\n      // Act\n      const result = await mockErrorHandler.handle(error, context);\n\n      // Assert - verify error handling behavior\n      expect(mockErrorHandler.handle).toHaveBeenCalledWith(error, context);\n      expect(result.handled).toBe(true);\n      expect(result.exitCode).toBe(1);\n    });\n\n    it('should register error handlers for specific error types', () => {\n      // Arrange\n      const errorType = 'ValidationError';\n      const handler = jest.fn();\n\n      // Act\n      mockErrorHandler.register(errorType, handler);\n\n      // Assert - verify handler registration\n      expect(mockErrorHandler.register).toHaveBeenCalledWith(errorType, handler);\n    });\n\n    it('should handle different error severity levels', async () => {\n      // Arrange\n      const criticalError = new Error('Critical system failure');\n      const warningError = new Error('Non-critical warning');\n      \n      const criticalResult = {\n        handled: true,\n        exitCode: 2,\n        message: 'Critical error handled',\n        severity: 'critical'\n      };\n      \n      const warningResult = {\n        handled: true,\n        exitCode: 0,\n        message: 'Warning handled',\n        severity: 'warning'\n      };\n\n      mockErrorHandler.handle\n        .mockResolvedValueOnce(criticalResult)\n        .mockResolvedValueOnce(warningResult);\n\n      // Act\n      const criticalHandling = await mockErrorHandler.handle(criticalError);\n      const warningHandling = await mockErrorHandler.handle(warningError);\n\n      // Assert - verify severity-based handling\n      expect(criticalHandling.exitCode).toBe(2);\n      expect(warningHandling.exitCode).toBe(0);\n      expect(mockErrorHandler.handle).toHaveBeenCalledTimes(2);\n    });\n  });\n\n  describe('integration behavior', () => {\n    it('should coordinate between all components for successful command execution', async () => {\n      // Arrange - Setup the complete flow\n      const input = ['status', '--format', 'json'];\n      const parseResult = {\n        command: 'status',\n        args: [],\n        flags: { format: 'json' }\n      };\n      const executionResult: MockCommandResult = {\n        success: true,\n        exitCode: 0,\n        data: { active: true, agents: 2 }\n      };\n      const formattedOutput = '{\"active\": true, \"agents\": 2}';\n\n      // Setup mock interactions\n      mockParser.parse.mockReturnValue(parseResult);\n      mockRegistry.execute.mockResolvedValue(executionResult);\n      mockFormatter.format.mockReturnValue(formattedOutput);\n\n      // Act - Simulate the complete flow\n      const parsed = mockParser.parse(input);\n      const executed = await mockRegistry.execute(parsed.command, {\n        args: parsed.args,\n        flags: parsed.flags,\n        command: parsed.command\n      });\n      const formatted = mockFormatter.format(executed.data, parsed.flags);\n\n      // Assert - Verify complete interaction chain\n      expect(mockParser.parse).toHaveBeenCalledWith(input);\n      expect(mockRegistry.execute).toHaveBeenCalledWith('status', expect.any(Object));\n      expect(mockFormatter.format).toHaveBeenCalledWith(executionResult.data, parseResult.flags);\n      expect(formatted).toBe(formattedOutput);\n    });\n\n    it('should handle errors throughout the execution chain', async () => {\n      // Arrange - Setup error scenario\n      const input = ['invalid-command'];\n      const parseResult = {\n        command: 'invalid-command',\n        args: [],\n        flags: {}\n      };\n      const executionError = new Error('Command not found');\n      const errorResult = {\n        handled: true,\n        exitCode: 127,\n        message: 'Command not found'\n      };\n\n      // Setup mock interactions\n      mockParser.parse.mockReturnValue(parseResult);\n      mockRegistry.execute.mockRejectedValue(executionError);\n      mockErrorHandler.handle.mockResolvedValue(errorResult);\n\n      // Act - Simulate error flow\n      const parsed = mockParser.parse(input);\n      \n      try {\n        await mockRegistry.execute(parsed.command, {\n          args: parsed.args,\n          flags: parsed.flags,\n          command: parsed.command\n        });\n      } catch (error) {\n        await mockErrorHandler.handle(error, { command: parsed.command });\n      }\n\n      // Assert - Verify error handling chain\n      expect(mockParser.parse).toHaveBeenCalledWith(input);\n      expect(mockRegistry.execute).toHaveBeenCalledWith('invalid-command', expect.any(Object));\n      expect(mockErrorHandler.handle).toHaveBeenCalledWith(executionError, expect.any(Object));\n    });\n\n    it('should validate arguments before command execution', () => {\n      // Arrange\n      const parseResult = {\n        command: 'deploy',\n        args: [],\n        flags: { env: 'production' }\n      };\n      const validationResult = {\n        valid: false,\n        errors: ['Missing required argument: target'],\n        warnings: []\n      };\n\n      mockParser.validate.mockReturnValue(validationResult);\n\n      // Act\n      const validation = mockParser.validate(parseResult);\n\n      // Assert - Verify validation step\n      expect(mockParser.validate).toHaveBeenCalledWith(parseResult);\n      expect(validation.valid).toBe(false);\n      expect(validation.errors).toContain('Missing required argument: target');\n    });\n  });\n\n  describe('command lifecycle behavior', () => {\n    it('should handle command initialization and cleanup', async () => {\n      // Arrange\n      const initFunction = jest.fn().mockResolvedValue(undefined);\n      const cleanupFunction = jest.fn().mockResolvedValue(undefined);\n      \n      // Act - Simulate lifecycle\n      await initFunction();\n      // ... command execution would happen here\n      await cleanupFunction();\n\n      // Assert - Verify lifecycle calls\n      expect(initFunction).toHaveBeenCalled();\n      expect(cleanupFunction).toHaveBeenCalled();\n    });\n\n    it('should track command execution metrics', async () => {\n      // Arrange\n      const metricsTracker = {\n        recordExecution: jest.fn(),\n        recordSuccess: jest.fn(),\n        recordFailure: jest.fn()\n      };\n\n      const context: MockCommandContext = {\n        args: [],\n        flags: {},\n        command: 'status'\n      };\n\n      // Act - Simulate execution with metrics\n      metricsTracker.recordExecution('status');\n      \n      const result = await mockRegistry.execute('status', context);\n      \n      if (result && result.success) {\n        metricsTracker.recordSuccess('status');\n      } else {\n        metricsTracker.recordFailure('status');\n      }\n\n      // Assert - Verify metrics tracking\n      expect(metricsTracker.recordExecution).toHaveBeenCalledWith('status');\n      // The success/failure call depends on the mock setup\n    });\n  });\n});"],"version":3}