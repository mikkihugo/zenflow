{"file":"/home/mhugo/code/claude-code-flow/src/__tests__/integration/memory-stores/cache-performance.test.ts","mappings":"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","names":[],"sources":["/home/mhugo/code/claude-code-flow/src/__tests__/integration/memory-stores/cache-performance.test.ts"],"sourcesContent":["/**\n * Cache Performance Integration Tests\n * \n * Hybrid Testing Approach:\n * - London School: Mock cache implementations and external dependencies\n * - Classical School: Test actual cache algorithms and performance characteristics\n */\n\nimport { EventEmitter } from 'events';\n\n// Cache Interface and Implementations\ninterface CacheEntry<T> {\n  key: string;\n  value: T;\n  timestamp: number;\n  accessCount: number;\n  lastAccessed: number;\n  size: number;\n  ttl?: number;\n}\n\ninterface CacheMetrics {\n  hits: number;\n  misses: number;\n  evictions: number;\n  totalRequests: number;\n  hitRate: number;\n  avgAccessTime: number;\n  memoryUsage: number;\n}\n\ninterface CacheStrategy<T> {\n  name: string;\n  shouldEvict(entries: Map<string, CacheEntry<T>>, maxSize: number): string | null;\n  onAccess(entry: CacheEntry<T>): void;\n}\n\n// LRU (Least Recently Used) Strategy\nclass LRUStrategy<T> implements CacheStrategy<T> {\n  name = 'LRU';\n\n  shouldEvict(entries: Map<string, CacheEntry<T>>, maxSize: number): string | null {\n    if (entries.size < maxSize) return null;\n    \n    let oldestKey: string | null = null;\n    let oldestTime = Infinity;\n    \n    for (const [key, entry] of entries) {\n      if (entry.lastAccessed < oldestTime) {\n        oldestTime = entry.lastAccessed;\n        oldestKey = key;\n      }\n    }\n    \n    return oldestKey;\n  }\n\n  onAccess(entry: CacheEntry<T>): void {\n    entry.lastAccessed = Date.now();\n    entry.accessCount++;\n  }\n}\n\n// LFU (Least Frequently Used) Strategy\nclass LFUStrategy<T> implements CacheStrategy<T> {\n  name = 'LFU';\n\n  shouldEvict(entries: Map<string, CacheEntry<T>>, maxSize: number): string | null {\n    if (entries.size < maxSize) return null;\n    \n    let leastUsedKey: string | null = null;\n    let leastCount = Infinity;\n    \n    for (const [key, entry] of entries) {\n      if (entry.accessCount < leastCount) {\n        leastCount = entry.accessCount;\n        leastUsedKey = key;\n      }\n    }\n    \n    return leastUsedKey;\n  }\n\n  onAccess(entry: CacheEntry<T>): void {\n    entry.lastAccessed = Date.now();\n    entry.accessCount++;\n  }\n}\n\n// TTL (Time To Live) Strategy\nclass TTLStrategy<T> implements CacheStrategy<T> {\n  name = 'TTL';\n\n  shouldEvict(entries: Map<string, CacheEntry<T>>, maxSize: number): string | null {\n    const now = Date.now();\n    \n    // First, evict expired entries\n    for (const [key, entry] of entries) {\n      if (entry.ttl && now > entry.ttl) {\n        return key;\n      }\n    }\n    \n    // If no expired entries and over capacity, use LRU\n    if (entries.size >= maxSize) {\n      let oldestKey: string | null = null;\n      let oldestTime = Infinity;\n      \n      for (const [key, entry] of entries) {\n        if (entry.lastAccessed < oldestTime) {\n          oldestTime = entry.lastAccessed;\n          oldestKey = key;\n        }\n      }\n      \n      return oldestKey;\n    }\n    \n    return null;\n  }\n\n  onAccess(entry: CacheEntry<T>): void {\n    entry.lastAccessed = Date.now();\n    entry.accessCount++;\n  }\n}\n\n// High-Performance Cache Implementation\nclass PerformanceCache<T> extends EventEmitter {\n  private entries = new Map<string, CacheEntry<T>>();\n  private strategy: CacheStrategy<T>;\n  private maxSize: number;\n  private metrics: CacheMetrics;\n  private readonly defaultTTL?: number;\n\n  constructor(\n    maxSize: number = 1000,\n    strategy: CacheStrategy<T> = new LRUStrategy<T>(),\n    defaultTTL?: number\n  ) {\n    super();\n    this.maxSize = maxSize;\n    this.strategy = strategy;\n    this.defaultTTL = defaultTTL;\n    this.metrics = {\n      hits: 0,\n      misses: 0,\n      evictions: 0,\n      totalRequests: 0,\n      hitRate: 0,\n      avgAccessTime: 0,\n      memoryUsage: 0\n    };\n  }\n\n  async get(key: string): Promise<T | null> {\n    const startTime = process.hrtime.bigint();\n    this.metrics.totalRequests++;\n\n    const entry = this.entries.get(key);\n    \n    if (!entry) {\n      this.metrics.misses++;\n      this.updateMetrics(startTime);\n      this.emit('miss', { key });\n      return null;\n    }\n\n    // Check TTL\n    if (entry.ttl && Date.now() > entry.ttl) {\n      this.entries.delete(key);\n      this.metrics.misses++;\n      this.metrics.evictions++;\n      this.updateMetrics(startTime);\n      this.emit('expired', { key });\n      return null;\n    }\n\n    this.strategy.onAccess(entry);\n    this.metrics.hits++;\n    this.updateMetrics(startTime);\n    this.emit('hit', { key, accessCount: entry.accessCount });\n    \n    return entry.value;\n  }\n\n  async set(key: string, value: T, ttl?: number): Promise<void> {\n    const startTime = process.hrtime.bigint();\n    \n    // Calculate size (rough approximation)\n    const size = this.calculateSize(value);\n    const now = Date.now();\n    \n    const entry: CacheEntry<T> = {\n      key,\n      value,\n      timestamp: now,\n      accessCount: 0,\n      lastAccessed: now,\n      size,\n      ttl: ttl ? now + ttl : (this.defaultTTL ? now + this.defaultTTL : undefined)\n    };\n\n    // Check if eviction is needed\n    const evictKey = this.strategy.shouldEvict(this.entries, this.maxSize);\n    if (evictKey) {\n      const evicted = this.entries.get(evictKey);\n      this.entries.delete(evictKey);\n      this.metrics.evictions++;\n      this.emit('evicted', { key: evictKey, strategy: this.strategy.name, evicted });\n    }\n\n    this.entries.set(key, entry);\n    this.updateMetrics(startTime);\n    this.emit('set', { key, size, ttl });\n  }\n\n  async delete(key: string): Promise<boolean> {\n    const deleted = this.entries.delete(key);\n    if (deleted) {\n      this.emit('deleted', { key });\n    }\n    return deleted;\n  }\n\n  async clear(): Promise<void> {\n    const count = this.entries.size;\n    this.entries.clear();\n    this.metrics = {\n      ...this.metrics,\n      memoryUsage: 0\n    };\n    this.emit('cleared', { count });\n  }\n\n  async has(key: string): Promise<boolean> {\n    const entry = this.entries.get(key);\n    if (!entry) return false;\n    \n    // Check TTL\n    if (entry.ttl && Date.now() > entry.ttl) {\n      this.entries.delete(key);\n      this.metrics.evictions++;\n      return false;\n    }\n    \n    return true;\n  }\n\n  getMetrics(): CacheMetrics {\n    this.calculateMemoryUsage();\n    this.metrics.hitRate = this.metrics.totalRequests > 0 \n      ? this.metrics.hits / this.metrics.totalRequests \n      : 0;\n    return { ...this.metrics };\n  }\n\n  getSize(): number {\n    return this.entries.size;\n  }\n\n  getKeys(): string[] {\n    return Array.from(this.entries.keys());\n  }\n\n  async cleanup(): Promise<number> {\n    const now = Date.now();\n    let cleanedCount = 0;\n    \n    for (const [key, entry] of this.entries) {\n      if (entry.ttl && now > entry.ttl) {\n        this.entries.delete(key);\n        cleanedCount++;\n      }\n    }\n    \n    if (cleanedCount > 0) {\n      this.emit('cleanup', { cleaned: cleanedCount });\n    }\n    \n    return cleanedCount;\n  }\n\n  private calculateSize(value: T): number {\n    try {\n      return JSON.stringify(value).length;\n    } catch {\n      return 0;\n    }\n  }\n\n  private calculateMemoryUsage(): void {\n    let totalSize = 0;\n    for (const entry of this.entries.values()) {\n      totalSize += entry.size;\n    }\n    this.metrics.memoryUsage = totalSize;\n  }\n\n  private updateMetrics(startTime: bigint): void {\n    const endTime = process.hrtime.bigint();\n    const duration = Number(endTime - startTime) / 1_000_000; // Convert to milliseconds\n    \n    // Update rolling average\n    const totalOps = this.metrics.hits + this.metrics.misses;\n    this.metrics.avgAccessTime = totalOps > 1 \n      ? (this.metrics.avgAccessTime * (totalOps - 1) + duration) / totalOps\n      : duration;\n  }\n}\n\n// Mock Cache for London-style tests\nclass MockCache<T> {\n  private mockData = new Map<string, T>();\n  public operations: string[] = [];\n  public metrics = {\n    hits: 0,\n    misses: 0,\n    evictions: 0,\n    totalRequests: 0\n  };\n\n  async get(key: string): Promise<T | null> {\n    this.operations.push(`get:${key}`);\n    this.metrics.totalRequests++;\n    \n    if (this.mockData.has(key)) {\n      this.metrics.hits++;\n      return this.mockData.get(key)!;\n    } else {\n      this.metrics.misses++;\n      return null;\n    }\n  }\n\n  async set(key: string, value: T): Promise<void> {\n    this.operations.push(`set:${key}`);\n    this.mockData.set(key, value);\n  }\n\n  async delete(key: string): Promise<boolean> {\n    this.operations.push(`delete:${key}`);\n    return this.mockData.delete(key);\n  }\n\n  async clear(): Promise<void> {\n    this.operations.push('clear');\n    this.mockData.clear();\n  }\n\n  getMetrics() {\n    return { ...this.metrics };\n  }\n}\n\ndescribe('Cache Performance Integration Tests', () => {\n  describe('Cache Strategies (London School)', () => {\n    let mockCache: MockCache<any>;\n\n    beforeEach(() => {\n      mockCache = new MockCache();\n    });\n\n    it('should mock cache operations correctly', async () => {\n      await mockCache.set('key1', 'value1');\n      await mockCache.set('key2', 'value2');\n      \n      const value1 = await mockCache.get('key1');\n      const value2 = await mockCache.get('nonexistent');\n      \n      expect(value1).toBe('value1');\n      expect(value2).toBeNull();\n      expect(mockCache.operations).toContain('set:key1');\n      expect(mockCache.operations).toContain('set:key2');\n      expect(mockCache.operations).toContain('get:key1');\n      expect(mockCache.operations).toContain('get:nonexistent');\n    });\n\n    it('should track metrics properly', async () => {\n      await mockCache.get('miss1');\n      await mockCache.set('hit1', 'value');\n      await mockCache.get('hit1');\n      await mockCache.get('miss2');\n      \n      const metrics = mockCache.getMetrics();\n      expect(metrics.hits).toBe(1);\n      expect(metrics.misses).toBe(2);\n      expect(metrics.totalRequests).toBe(3);\n    });\n\n    it('should handle cache strategy mocking', () => {\n      const mockStrategy = {\n        name: 'Mock',\n        shouldEvict: jest.fn().mockReturnValue('evict-key'),\n        onAccess: jest.fn()\n      };\n\n      const entries = new Map([\n        ['key1', { lastAccessed: 1000 } as any],\n        ['key2', { lastAccessed: 2000 } as any]\n      ]);\n\n      const evictKey = mockStrategy.shouldEvict(entries, 1);\n      expect(evictKey).toBe('evict-key');\n      expect(mockStrategy.shouldEvict).toHaveBeenCalledWith(entries, 1);\n    });\n  });\n\n  describe('LRU Cache Implementation (Classical School)', () => {\n    let cache: PerformanceCache<string>;\n\n    beforeEach(() => {\n      cache = new PerformanceCache<string>(3, new LRUStrategy());\n    });\n\n    afterEach(async () => {\n      await cache.clear();\n    });\n\n    it('should implement LRU eviction correctly', async () => {\n      await cache.set('a', 'value-a');\n      await cache.set('b', 'value-b');\n      await cache.set('c', 'value-c');\n      \n      // Access 'a' to make it most recently used\n      await cache.get('a');\n      \n      // Add 'd' which should evict 'b' (least recently used)\n      await cache.set('d', 'value-d');\n      \n      expect(await cache.has('a')).toBe(true);  // Recently accessed\n      expect(await cache.has('b')).toBe(false); // Should be evicted\n      expect(await cache.has('c')).toBe(true);  // Still there\n      expect(await cache.has('d')).toBe(true);  // Just added\n    });\n\n    it('should update access patterns correctly', async () => {\n      await cache.set('test', 'value');\n      \n      // Access multiple times\n      await cache.get('test');\n      await cache.get('test');\n      await cache.get('test');\n      \n      const metrics = cache.getMetrics();\n      expect(metrics.hits).toBe(3);\n      expect(metrics.misses).toBe(0);\n      expect(metrics.hitRate).toBe(1.0);\n    });\n\n    it('should handle cache misses', async () => {\n      const result = await cache.get('nonexistent');\n      expect(result).toBeNull();\n      \n      const metrics = cache.getMetrics();\n      expect(metrics.misses).toBe(1);\n      expect(metrics.hits).toBe(0);\n      expect(metrics.hitRate).toBe(0);\n    });\n  });\n\n  describe('LFU Cache Implementation (Classical School)', () => {\n    let cache: PerformanceCache<string>;\n\n    beforeEach(() => {\n      cache = new PerformanceCache<string>(3, new LFUStrategy());\n    });\n\n    afterEach(async () => {\n      await cache.clear();\n    });\n\n    it('should implement LFU eviction correctly', async () => {\n      await cache.set('a', 'value-a');\n      await cache.set('b', 'value-b');\n      await cache.set('c', 'value-c');\n      \n      // Access 'a' and 'c' multiple times\n      await cache.get('a');\n      await cache.get('a');\n      await cache.get('c');\n      \n      // 'b' has been accessed least (only on set), should be evicted\n      await cache.set('d', 'value-d');\n      \n      expect(await cache.has('a')).toBe(true);  // Frequently accessed\n      expect(await cache.has('b')).toBe(false); // Least frequently used\n      expect(await cache.has('c')).toBe(true);  // Accessed\n      expect(await cache.has('d')).toBe(true);  // Just added\n    });\n\n    it('should track access frequency accurately', async () => {\n      await cache.set('frequent', 'value');\n      \n      // Access many times\n      for (let i = 0; i < 10; i++) {\n        await cache.get('frequent');\n      }\n      \n      const metrics = cache.getMetrics();\n      expect(metrics.hits).toBe(10);\n      expect(metrics.totalRequests).toBe(10);\n    });\n  });\n\n  describe('TTL Cache Implementation (Classical School)', () => {\n    let cache: PerformanceCache<string>;\n\n    beforeEach(() => {\n      cache = new PerformanceCache<string>(10, new TTLStrategy(), 100); // 100ms default TTL\n    });\n\n    afterEach(async () => {\n      await cache.clear();\n    });\n\n    it('should expire entries based on TTL', async () => {\n      await cache.set('short-lived', 'value', 50); // 50ms TTL\n      \n      expect(await cache.has('short-lived')).toBe(true);\n      \n      // Wait for expiration\n      await new Promise(resolve => setTimeout(resolve, 60));\n      \n      expect(await cache.has('short-lived')).toBe(false);\n      expect(await cache.get('short-lived')).toBeNull();\n    });\n\n    it('should use default TTL when not specified', async () => {\n      await cache.set('default-ttl', 'value');\n      \n      expect(await cache.has('default-ttl')).toBe(true);\n      \n      // Wait for default TTL to expire\n      await new Promise(resolve => setTimeout(resolve, 110));\n      \n      expect(await cache.has('default-ttl')).toBe(false);\n    });\n\n    it('should cleanup expired entries', async () => {\n      await cache.set('expire1', 'value1', 30);\n      await cache.set('expire2', 'value2', 30);\n      await cache.set('persist', 'value3', 1000);\n      \n      expect(cache.getSize()).toBe(3);\n      \n      // Wait for some to expire\n      await new Promise(resolve => setTimeout(resolve, 40));\n      \n      const cleaned = await cache.cleanup();\n      expect(cleaned).toBe(2);\n      expect(cache.getSize()).toBe(1);\n      expect(await cache.has('persist')).toBe(true);\n    });\n  });\n\n  describe('Performance Benchmarks (Classical School)', () => {\n    let cache: PerformanceCache<any>;\n\n    beforeEach(() => {\n      cache = new PerformanceCache<any>(10000, new LRUStrategy());\n    });\n\n    afterEach(async () => {\n      await cache.clear();\n    });\n\n    it('should benchmark write performance', async () => {\n      const iterations = 10000;\n      const testData = { message: 'benchmark data', timestamp: Date.now() };\n      \n      const startTime = process.hrtime.bigint();\n      \n      for (let i = 0; i < iterations; i++) {\n        await cache.set(`bench-write-${i}`, testData);\n      }\n      \n      const endTime = process.hrtime.bigint();\n      const durationMs = Number(endTime - startTime) / 1_000_000;\n      const operationsPerSecond = (iterations / durationMs) * 1000;\n      \n      console.log(`Cache write performance: ${operationsPerSecond.toFixed(0)} ops/sec`);\n      \n      expect(operationsPerSecond).toBeGreaterThan(10000); // Should be very fast for memory operations\n      expect(cache.getSize()).toBe(iterations);\n    });\n\n    it('should benchmark read performance', async () => {\n      const iterations = 1000;\n      const testData = { benchmark: 'read test data' };\n      \n      // Pre-populate cache\n      for (let i = 0; i < iterations; i++) {\n        await cache.set(`bench-read-${i}`, testData);\n      }\n      \n      const startTime = process.hrtime.bigint();\n      \n      for (let i = 0; i < iterations; i++) {\n        await cache.get(`bench-read-${i}`);\n      }\n      \n      const endTime = process.hrtime.bigint();\n      const durationMs = Number(endTime - startTime) / 1_000_000;\n      const operationsPerSecond = (iterations / durationMs) * 1000;\n      \n      console.log(`Cache read performance: ${operationsPerSecond.toFixed(0)} ops/sec`);\n      \n      expect(operationsPerSecond).toBeGreaterThan(50000); // Memory reads should be very fast\n      \n      const metrics = cache.getMetrics();\n      expect(metrics.hits).toBe(iterations);\n      expect(metrics.hitRate).toBe(1.0);\n    });\n\n    it('should benchmark mixed workload performance', async () => {\n      const operations = 5000;\n      const cacheSize = 1000;\n      \n      // Create a realistic mixed workload\n      const startTime = process.hrtime.bigint();\n      \n      for (let i = 0; i < operations; i++) {\n        const operation = Math.random();\n        const key = `mixed-${i % cacheSize}`;\n        \n        if (operation < 0.7) {\n          // 70% reads\n          await cache.get(key);\n        } else if (operation < 0.95) {\n          // 25% writes\n          await cache.set(key, { data: `value-${i}`, timestamp: Date.now() });\n        } else {\n          // 5% deletes\n          await cache.delete(key);\n        }\n      }\n      \n      const endTime = process.hrtime.bigint();\n      const durationMs = Number(endTime - startTime) / 1_000_000;\n      const operationsPerSecond = (operations / durationMs) * 1000;\n      \n      console.log(`Mixed workload performance: ${operationsPerSecond.toFixed(0)} ops/sec`);\n      \n      const metrics = cache.getMetrics();\n      console.log(`Hit rate: ${(metrics.hitRate * 100).toFixed(1)}%`);\n      console.log(`Average access time: ${metrics.avgAccessTime.toFixed(3)}ms`);\n      \n      expect(operationsPerSecond).toBeGreaterThan(5000);\n      expect(metrics.hitRate).toBeGreaterThan(0.1); // Some hits expected\n    });\n\n    it('should measure memory usage accurately', async () => {\n      const largeData = { content: 'x'.repeat(10000) };\n      \n      for (let i = 0; i < 100; i++) {\n        await cache.set(`memory-${i}`, largeData);\n      }\n      \n      const metrics = cache.getMetrics();\n      expect(metrics.memoryUsage).toBeGreaterThan(1000000); // > 1MB\n      \n      // Clear half the cache\n      for (let i = 0; i < 50; i++) {\n        await cache.delete(`memory-${i}`);\n      }\n      \n      const metricsAfter = cache.getMetrics();\n      expect(metricsAfter.memoryUsage).toBeLessThan(metrics.memoryUsage);\n    });\n  });\n\n  describe('Event Handling and Monitoring', () => {\n    let cache: PerformanceCache<string>;\n    let events: Array<{ type: string; data: any }>;\n\n    beforeEach(() => {\n      cache = new PerformanceCache<string>(3, new LRUStrategy());\n      events = [];\n      \n      cache.on('hit', (data) => events.push({ type: 'hit', data }));\n      cache.on('miss', (data) => events.push({ type: 'miss', data }));\n      cache.on('set', (data) => events.push({ type: 'set', data }));\n      cache.on('evicted', (data) => events.push({ type: 'evicted', data }));\n      cache.on('expired', (data) => events.push({ type: 'expired', data }));\n    });\n\n    afterEach(async () => {\n      await cache.clear();\n    });\n\n    it('should emit events for cache operations', async () => {\n      await cache.set('test', 'value');\n      await cache.get('test');\n      await cache.get('missing');\n      \n      expect(events.some(e => e.type === 'set')).toBe(true);\n      expect(events.some(e => e.type === 'hit')).toBe(true);\n      expect(events.some(e => e.type === 'miss')).toBe(true);\n      \n      const hitEvent = events.find(e => e.type === 'hit');\n      expect(hitEvent?.data.key).toBe('test');\n    });\n\n    it('should emit eviction events', async () => {\n      await cache.set('a', 'value-a');\n      await cache.set('b', 'value-b');\n      await cache.set('c', 'value-c');\n      await cache.set('d', 'value-d'); // Should trigger eviction\n      \n      const evictionEvents = events.filter(e => e.type === 'evicted');\n      expect(evictionEvents).toHaveLength(1);\n      expect(evictionEvents[0].data.strategy).toBe('LRU');\n    });\n\n    it('should emit expiration events', async () => {\n      const ttlCache = new PerformanceCache<string>(10, new TTLStrategy());\n      const expiredEvents: any[] = [];\n      \n      ttlCache.on('expired', (data) => expiredEvents.push(data));\n      \n      await ttlCache.set('expire-test', 'value', 50);\n      \n      // Try to access after expiration\n      await new Promise(resolve => setTimeout(resolve, 60));\n      await ttlCache.get('expire-test');\n      \n      expect(expiredEvents).toHaveLength(1);\n      expect(expiredEvents[0].key).toBe('expire-test');\n    });\n  });\n\n  describe('Concurrent Access Patterns', () => {\n    let cache: PerformanceCache<any>;\n\n    beforeEach(() => {\n      cache = new PerformanceCache<any>(1000, new LRUStrategy());\n    });\n\n    afterEach(async () => {\n      await cache.clear();\n    });\n\n    it('should handle concurrent reads and writes', async () => {\n      const concurrentOps = 100;\n      \n      const operations = Array.from({ length: concurrentOps }, async (_, i) => {\n        const key = `concurrent-${i % 10}`;\n        \n        if (i % 2 === 0) {\n          return cache.set(key, { value: i, timestamp: Date.now() });\n        } else {\n          return cache.get(key);\n        }\n      });\n      \n      const results = await Promise.all(operations);\n      expect(results).toHaveLength(concurrentOps);\n      \n      const metrics = cache.getMetrics();\n      expect(metrics.totalRequests).toBeGreaterThan(0);\n    });\n\n    it('should maintain consistency under concurrent access', async () => {\n      const key = 'shared-key';\n      const initialValue = { counter: 0 };\n      \n      await cache.set(key, initialValue);\n      \n      // Multiple concurrent reads\n      const readPromises = Array.from({ length: 20 }, () => cache.get(key));\n      const results = await Promise.all(readPromises);\n      \n      // All reads should return the same value\n      results.forEach(result => {\n        expect(result).toEqual(initialValue);\n      });\n      \n      const metrics = cache.getMetrics();\n      expect(metrics.hits).toBe(20);\n    });\n  });\n\n  describe('Cache Strategy Comparison', () => {\n    const strategies = [\n      { name: 'LRU', strategy: new LRUStrategy<string>() },\n      { name: 'LFU', strategy: new LFUStrategy<string>() },\n      { name: 'TTL', strategy: new TTLStrategy<string>() }\n    ];\n\n    it('should compare eviction behavior across strategies', async () => {\n      const cacheSize = 5;\n      const results: Record<string, any> = {};\n      \n      for (const { name, strategy } of strategies) {\n        const cache = new PerformanceCache<string>(cacheSize, strategy);\n        \n        // Fill cache\n        for (let i = 0; i < cacheSize; i++) {\n          await cache.set(`item-${i}`, `value-${i}`);\n        }\n        \n        // Create different access patterns\n        await cache.get('item-0'); // Make item-0 recently/frequently used\n        await cache.get('item-0');\n        await cache.get('item-1');\n        \n        // Add new item to trigger eviction\n        await cache.set('new-item', 'new-value');\n        \n        results[name] = {\n          size: cache.getSize(),\n          hasItem0: await cache.has('item-0'),\n          hasItem1: await cache.has('item-1'),\n          hasItem2: await cache.has('item-2'),\n          hasNewItem: await cache.has('new-item')\n        };\n        \n        await cache.clear();\n      }\n      \n      // Verify different strategies behave differently\n      expect(results.LRU).toBeDefined();\n      expect(results.LFU).toBeDefined();\n      expect(results.TTL).toBeDefined();\n      \n      // All should maintain cache size limit\n      expect(results.LRU.size).toBeLessThanOrEqual(cacheSize);\n      expect(results.LFU.size).toBeLessThanOrEqual(cacheSize);\n      expect(results.TTL.size).toBeLessThanOrEqual(cacheSize);\n    });\n  });\n});"],"version":3}