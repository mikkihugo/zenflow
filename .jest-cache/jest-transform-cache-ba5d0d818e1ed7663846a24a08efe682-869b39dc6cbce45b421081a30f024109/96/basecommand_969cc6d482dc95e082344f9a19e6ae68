b020c1435c3a6fab9384b12575d5deaa
/**
 * Base Command Abstract Class
 *
 * Provides common functionality for all CLI commands including validation,
 * error handling, hooks, and lifecycle management.
 */
import { EventEmitter } from 'events';
/**
 * Abstract base class for all CLI commands
 */
export class BaseCommand extends EventEmitter {
    config;
    hooks = {};
    isExecuting = false;
    constructor(config) {
        super();
        this.config = config;
    }
    /**
     * Get command metadata
     */
    get metadata() {
        return {
            config: this.config,
            handler: this.run.bind(this),
            registeredAt: new Date(),
            available: true
        };
    }
    /**
     * Check if command is currently executing
     */
    get executing() {
        return this.isExecuting;
    }
    /**
     * Register lifecycle hooks
     */
    registerHooks(hooks) {
        Object.assign(this.hooks, hooks);
    }
    /**
     * Validate command context and arguments
     */
    async validateContext(context) {
        const errors = [];
        const warnings = [];
        try {
            // Run pre-validation hook
            await this.hooks.beforeValidation?.(context);
            // Validate required flags
            if (this.config.flags) {
                for (const [flagName, flagConfig] of Object.entries(this.config.flags)) {
                    if (flagConfig.required && context.flags[flagName] === undefined) {
                        errors.push(`Required flag --${flagName} is missing`);
                    }
                    // Type validation
                    if (context.flags[flagName] !== undefined) {
                        const value = context.flags[flagName];
                        const expectedType = flagConfig.type || 'string';
                        if (!this.validateFlagType(value, expectedType)) {
                            errors.push(`Flag --${flagName} expected ${expectedType} but got ${typeof value}`);
                        }
                    }
                }
            }
            // Validate arguments count
            const minArgs = this.config.minArgs || 0;
            const maxArgs = this.config.maxArgs;
            if (context.args.length < minArgs) {
                errors.push(`Expected at least ${minArgs} arguments, got ${context.args.length}`);
            }
            if (maxArgs !== undefined && context.args.length > maxArgs) {
                errors.push(`Expected at most ${maxArgs} arguments, got ${context.args.length}`);
            }
            // Custom validation
            const customValidation = await this.validate(context);
            if (customValidation) {
                errors.push(...customValidation.errors);
                warnings.push(...customValidation.warnings);
            }
            const result = {
                valid: errors.length === 0,
                errors,
                warnings
            };
            // Run post-validation hook
            await this.hooks.afterValidation?.(context, result);
            return result;
        }
        catch (error) {
            errors.push(`Validation failed: ${error instanceof Error ? error.message : String(error)}`);
            return {
                valid: false,
                errors,
                warnings
            };
        }
    }
    /**
     * Validate flag type
     */
    validateFlagType(value, expectedType) {
        switch (expectedType) {
            case 'string':
                return typeof value === 'string';
            case 'boolean':
                return typeof value === 'boolean';
            case 'number':
                return typeof value === 'number' && !isNaN(value);
            case 'array':
                return Array.isArray(value);
            default:
                return true; // Unknown types pass validation
        }
    }
    /**
     * Execute the command with full lifecycle management
     */
    async execute(context) {
        if (this.isExecuting) {
            return {
                success: false,
                error: 'Command is already executing',
                exitCode: 1,
                executionTime: 0
            };
        }
        const startTime = Date.now();
        this.isExecuting = true;
        try {
            this.emit('start', context);
            // Validate context
            const validation = await this.validateContext(context);
            if (!validation.valid) {
                const errorMsg = `Validation failed: ${validation.errors.join(', ')}`;
                this.emit('validation-error', validation);
                return {
                    success: false,
                    error: errorMsg,
                    exitCode: 1,
                    executionTime: Date.now() - startTime
                };
            }
            if (validation.warnings.length > 0) {
                this.emit('validation-warning', validation.warnings);
            }
            // Run pre-execution hook
            await this.hooks.beforeExecution?.(context);
            this.emit('before-execution', context);
            // Execute the command
            const result = await this.run(context);
            // Calculate duration and add metadata
            const finalResult = {
                ...result,
                executionTime: Date.now() - startTime
            };
            // Run post-execution hook
            await this.hooks.afterExecution?.(context, finalResult);
            this.emit('after-execution', finalResult);
            this.emit('complete', finalResult);
            return finalResult;
        }
        catch (error) {
            const commandError = error instanceof Error ? error : new Error(String(error));
            // Run error hook
            await this.hooks.onError?.(context, commandError);
            this.emit('error', commandError);
            const result = {
                success: false,
                error: commandError.message,
                exitCode: 1,
                executionTime: Date.now() - startTime
            };
            this.emit('complete', result);
            return result;
        }
        finally {
            this.isExecuting = false;
        }
    }
    /**
     * Abstract methods to be implemented by concrete commands
     */
    /**
     * Custom validation logic - override in subclasses
     */
    async validate(context) {
        return null;
    }
    /**
     * Get usage examples
     */
    getExamples() {
        return this.config.examples || [];
    }
    /**
     * Get command configuration
     */
    getConfig() {
        return { ...this.config };
    }
    /**
     * Dispose of resources
     */
    dispose() {
        this.removeAllListeners();
    }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,