{"file":"/home/mhugo/code/claude-code-flow/src/maestro/tests/native-hive-mind-integration.test.ts","mappings":"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","names":[],"sources":["/home/mhugo/code/claude-code-flow/src/maestro/tests/native-hive-mind-integration.test.ts"],"sourcesContent":["/**\n * Native Hive Mind Integration Tests\n * \n * Comprehensive testing of the MaestroSwarmCoordinator and specs-driven\n * swarm topology to ensure proper integration with native hive mind.\n */\n\nimport { describe, beforeAll, afterAll, beforeEach, afterEach, it, expect, jest } from '@jest/globals';\nimport { EventBus } from '../../core/event-bus.js';\nimport { Logger } from '../../core/logger.js';\nimport { MaestroSwarmCoordinator, MaestroSwarmConfig } from '../maestro-swarm-coordinator.js';\nimport { HiveMindConfig } from '../../hive-mind/types.js';\nimport { join } from 'path';\nimport { tmpdir } from 'os';\nimport { mkdtemp, rm, access } from 'fs/promises';\n\ndescribe('Native Hive Mind Integration Tests', () => {\n  let swarmCoordinator: MaestroSwarmCoordinator;\n  let eventBus: EventBus;\n  let logger: Logger;\n  let tempDir: string;\n  let config: MaestroSwarmConfig;\n\n  beforeAll(async () => {\n    // Setup test environment\n    tempDir = await mkdtemp(join(tmpdir(), 'maestro-test-'));\n    \n    // Initialize core components\n    eventBus = new EventBus();\n    logger = new Logger({ level: 'debug' });\n    \n    // Configure test swarm\n    config = {\n      hiveMindConfig: {\n        name: 'test-maestro-specs-swarm',\n        topology: 'specs-driven',\n        queenMode: 'strategic',\n        maxAgents: 8,\n        consensusThreshold: 0.66,\n        memoryTTL: 60000, // 1 minute for testing\n        autoSpawn: true,\n        enableConsensus: true,\n        enableMemory: true,\n        enableCommunication: true\n      },\n      enableConsensusValidation: true,\n      enableLivingDocumentation: true,\n      enableSteeringIntegration: true,\n      specsDirectory: join(tempDir, 'specs'),\n      steeringDirectory: join(tempDir, 'steering')\n    };\n  });\n\n  afterAll(async () => {\n    // Cleanup\n    if (swarmCoordinator) {\n      await swarmCoordinator.shutdown();\n    }\n    await rm(tempDir, { recursive: true, force: true });\n  });\n\n  beforeEach(async () => {\n    // Create fresh coordinator for each test\n    swarmCoordinator = new MaestroSwarmCoordinator(config, eventBus, logger);\n  });\n\n  afterEach(async () => {\n    if (swarmCoordinator) {\n      await swarmCoordinator.shutdown();\n    }\n  });\n\n  describe('Swarm Initialization', () => {\n    it('should initialize native hive mind with specs-driven topology', async () => {\n      const swarmId = await swarmCoordinator.initialize();\n      \n      expect(swarmId).toBeDefined();\n      expect(typeof swarmId).toBe('string');\n      expect(swarmId).toMatch(/^swarm_/);\n    });\n\n    it('should spawn 8 specialized agents with correct types', async () => {\n      await swarmCoordinator.initialize();\n      \n      // Verify swarm status contains all expected agent types\n      const hiveMind = (swarmCoordinator as any).hiveMind;\n      const agents = hiveMind.agents;\n      \n      expect(agents.size).toBe(8);\n      \n      // Check for specs-driven agent types\n      const agentTypes = Array.from(agents.values()).map((agent: any) => agent.type);\n      expect(agentTypes).toContain('requirements_analyst');\n      expect(agentTypes).toContain('design_architect');\n      expect(agentTypes).toContain('task_planner');\n      expect(agentTypes).toContain('implementation_coder');\n      expect(agentTypes).toContain('quality_reviewer');\n      expect(agentTypes).toContain('steering_documenter');\n      \n      // Check agent counts\n      expect(agentTypes.filter(t => t === 'requirements_analyst')).toHaveLength(1);\n      expect(agentTypes.filter(t => t === 'design_architect')).toHaveLength(2);\n      expect(agentTypes.filter(t => t === 'task_planner')).toHaveLength(1);\n      expect(agentTypes.filter(t => t === 'implementation_coder')).toHaveLength(2);\n      expect(agentTypes.filter(t => t === 'quality_reviewer')).toHaveLength(1);\n      expect(agentTypes.filter(t => t === 'steering_documenter')).toHaveLength(1);\n    });\n\n    it('should initialize steering documents in swarm memory', async () => {\n      await swarmCoordinator.initialize();\n      \n      const hiveMind = (swarmCoordinator as any).hiveMind;\n      \n      // Check that default steering documents are initialized\n      const productSteering = await hiveMind.memory.retrieve('steering/product');\n      const techSteering = await hiveMind.memory.retrieve('steering/tech');\n      const workflowSteering = await hiveMind.memory.retrieve('steering/workflow');\n      \n      expect(productSteering).toBeDefined();\n      expect(productSteering.domain).toBe('product');\n      expect(techSteering).toBeDefined();\n      expect(techSteering.domain).toBe('tech');\n      expect(workflowSteering).toBeDefined();\n      expect(workflowSteering.domain).toBe('workflow');\n    });\n  });\n\n  describe('Specs-Driven Workflow', () => {\n    beforeEach(async () => {\n      await swarmCoordinator.initialize();\n    });\n\n    it('should create specification using requirements_analyst agent', async () => {\n      const featureName = 'test-auth-feature';\n      const initialRequest = 'Create user authentication system with JWT tokens';\n      \n      await swarmCoordinator.createSpec(featureName, initialRequest);\n      \n      // Verify workflow state\n      const workflowState = swarmCoordinator.getWorkflowState(featureName);\n      expect(workflowState).toBeDefined();\n      expect(workflowState!.featureName).toBe(featureName);\n      expect(workflowState!.currentPhase).toBe('Requirements Clarification');\n      expect(workflowState!.status).toBe('running');\n      \n      // Verify requirements file was created\n      const requirementsPath = join(config.specsDirectory, featureName, 'requirements.md');\n      await expect(access(requirementsPath)).resolves.not.toThrow();\n    }, 30000);\n\n    it('should generate design using parallel design_architect agents with consensus', async () => {\n      const featureName = 'test-design-feature';\n      \n      // First create spec\n      await swarmCoordinator.createSpec(featureName, 'Test feature for design generation');\n      \n      // Then generate design\n      await swarmCoordinator.generateDesign(featureName);\n      \n      // Verify workflow progression\n      const workflowState = swarmCoordinator.getWorkflowState(featureName);\n      expect(workflowState!.currentPhase).toBe('Research & Design');\n      expect(workflowState!.history).toHaveLength(2);\n      expect(workflowState!.history[1].phase).toBe('Research & Design');\n      expect(workflowState!.history[1].status).toBe('completed');\n      \n      // Verify design file was created\n      const designPath = join(config.specsDirectory, featureName, 'design.md');\n      await expect(access(designPath)).resolves.not.toThrow();\n    }, 60000);\n\n    it('should generate tasks using task_planner agent', async () => {\n      const featureName = 'test-tasks-feature';\n      \n      // Setup: create spec and design\n      await swarmCoordinator.createSpec(featureName, 'Test feature for task generation');\n      await swarmCoordinator.generateDesign(featureName);\n      \n      // Generate tasks\n      await swarmCoordinator.generateTasks(featureName);\n      \n      // Verify workflow progression\n      const workflowState = swarmCoordinator.getWorkflowState(featureName);\n      expect(workflowState!.currentPhase).toBe('Implementation Planning');\n      \n      // Verify tasks file was created\n      const tasksPath = join(config.specsDirectory, featureName, 'tasks.md');\n      await expect(access(tasksPath)).resolves.not.toThrow();\n    }, 90000);\n\n    it('should implement tasks using implementation_coder agents', async () => {\n      const featureName = 'test-implementation-feature';\n      \n      // Setup complete workflow\n      await swarmCoordinator.createSpec(featureName, 'Test feature for implementation');\n      await swarmCoordinator.generateDesign(featureName);\n      await swarmCoordinator.generateTasks(featureName);\n      \n      // Implement first task\n      await swarmCoordinator.implementTask(featureName, 1);\n      \n      // Verify workflow state\n      const workflowState = swarmCoordinator.getWorkflowState(featureName);\n      expect(workflowState!.currentPhase).toBe('Task Execution');\n      expect(workflowState!.currentTaskIndex).toBe(1);\n    }, 120000);\n  });\n\n  describe('Consensus Validation', () => {\n    beforeEach(async () => {\n      await swarmCoordinator.initialize();\n    });\n\n    it('should use consensus for phase approval when enabled', async () => {\n      const featureName = 'test-consensus-feature';\n      \n      await swarmCoordinator.createSpec(featureName, 'Test consensus validation');\n      \n      // Mock consensus engine for testing\n      const hiveMind = (swarmCoordinator as any).hiveMind;\n      const consensusEngine = hiveMind.consensus;\n      \n      jest.spyOn(consensusEngine, 'createProposal').mockResolvedValue('test-proposal-id');\n      jest.spyOn(consensusEngine, 'getProposalStatus').mockResolvedValue({\n        status: 'achieved',\n        currentRatio: 0.75\n      });\n      \n      await swarmCoordinator.approvePhase(featureName);\n      \n      expect(consensusEngine.createProposal).toHaveBeenCalled();\n      expect(consensusEngine.getProposalStatus).toHaveBeenCalled();\n    });\n\n    it('should handle consensus failure gracefully', async () => {\n      const featureName = 'test-consensus-failure';\n      \n      await swarmCoordinator.createSpec(featureName, 'Test consensus failure handling');\n      \n      // Mock consensus failure\n      const hiveMind = (swarmCoordinator as any).hiveMind;\n      const consensusEngine = hiveMind.consensus;\n      \n      jest.spyOn(consensusEngine, 'createProposal').mockResolvedValue('test-proposal-id');\n      jest.spyOn(consensusEngine, 'getProposalStatus').mockResolvedValue({\n        status: 'failed',\n        currentRatio: 0.4\n      });\n      \n      await expect(swarmCoordinator.approvePhase(featureName))\n        .rejects.toThrow('Phase approval consensus failed');\n    });\n  });\n\n  describe('Steering Integration', () => {\n    beforeEach(async () => {\n      await swarmCoordinator.initialize();\n    });\n\n    it('should create steering documents in swarm memory', async () => {\n      const domain = 'custom-steering';\n      const content = 'Custom steering guidelines for testing';\n      \n      await swarmCoordinator.createSteeringDocument(domain, content);\n      \n      const hiveMind = (swarmCoordinator as any).hiveMind;\n      const storedDoc = await hiveMind.memory.retrieve(`steering/${domain}`);\n      \n      expect(storedDoc).toBeDefined();\n      expect(storedDoc.content).toBe(content);\n      expect(storedDoc.domain).toBe(domain);\n      expect(storedDoc.maintainer).toBe('steering_documenter');\n    });\n\n    it('should broadcast steering updates to all agents', async () => {\n      const domain = 'broadcast-test';\n      const content = 'Test broadcast content';\n      \n      const hiveMind = (swarmCoordinator as any).hiveMind;\n      const broadcastSpy = jest.spyOn(hiveMind.communication, 'broadcast');\n      \n      await swarmCoordinator.createSteeringDocument(domain, content);\n      \n      expect(broadcastSpy).toHaveBeenCalledWith({\n        type: 'steering_update',\n        domain,\n        content: expect.stringContaining('Test broadcast content')\n      });\n    });\n\n    it('should retrieve steering context for agents', async () => {\n      await swarmCoordinator.createSteeringDocument('test-context', 'Context for testing');\n      \n      const steeringContext = await (swarmCoordinator as any).getSteeringContext();\n      \n      expect(steeringContext).toContain('test-context');\n      expect(steeringContext).toContain('Context for testing');\n    });\n  });\n\n  describe('Performance and Error Handling', () => {\n    beforeEach(async () => {\n      await swarmCoordinator.initialize();\n    });\n\n    it('should handle agent spawning limits gracefully', async () => {\n      // Test with reduced agent limit\n      const limitedConfig = {\n        ...config,\n        hiveMindConfig: {\n          ...config.hiveMindConfig,\n          maxAgents: 4\n        }\n      };\n      \n      const limitedCoordinator = new MaestroSwarmCoordinator(limitedConfig, eventBus, logger);\n      await limitedCoordinator.initialize();\n      \n      const hiveMind = (limitedCoordinator as any).hiveMind;\n      expect(hiveMind.agents.size).toBeLessThanOrEqual(4);\n      \n      await limitedCoordinator.shutdown();\n    });\n\n    it('should timeout on task completion properly', async () => {\n      const featureName = 'timeout-test';\n      \n      // Mock task that never completes\n      const hiveMind = (swarmCoordinator as any).hiveMind;\n      jest.spyOn(hiveMind, 'getTask').mockResolvedValue({\n        id: 'test-task',\n        status: 'in_progress',\n        result: null\n      });\n      \n      await expect(\n        (swarmCoordinator as any).waitForTaskCompletion('test-task', 1000)\n      ).rejects.toThrow('Task timeout');\n    });\n\n    it('should handle swarm shutdown gracefully', async () => {\n      const hiveMind = (swarmCoordinator as any).hiveMind;\n      const shutdownSpy = jest.spyOn(hiveMind, 'shutdown');\n      \n      await swarmCoordinator.shutdown();\n      \n      expect(shutdownSpy).toHaveBeenCalled();\n    });\n  });\n\n  describe('Event Integration', () => {\n    beforeEach(async () => {\n      await swarmCoordinator.initialize();\n    });\n\n    it('should emit maestro events through event bus', async () => {\n      const specCreatedSpy = jest.fn();\n      eventBus.on('maestro:spec_created', specCreatedSpy);\n      \n      await swarmCoordinator.createSpec('event-test', 'Test event emission');\n      \n      expect(specCreatedSpy).toHaveBeenCalledWith({\n        featureName: 'event-test'\n      });\n    });\n\n    it('should handle event-driven workflow progression', async () => {\n      const phaseApprovedSpy = jest.fn();\n      eventBus.on('maestro:phase_approved', phaseApprovedSpy);\n      \n      const featureName = 'workflow-events';\n      await swarmCoordinator.createSpec(featureName, 'Test workflow events');\n      \n      // Mock consensus for approval\n      const hiveMind = (swarmCoordinator as any).hiveMind;\n      const consensusEngine = hiveMind.consensus;\n      jest.spyOn(consensusEngine, 'createProposal').mockResolvedValue('test-proposal');\n      jest.spyOn(consensusEngine, 'getProposalStatus').mockResolvedValue({\n        status: 'achieved',\n        currentRatio: 0.8\n      });\n      \n      await swarmCoordinator.approvePhase(featureName);\n      \n      expect(phaseApprovedSpy).toHaveBeenCalledWith({\n        featureName,\n        nextPhase: 'Research & Design'\n      });\n    });\n  });\n});\n\n/**\n * Performance Benchmarks\n * \n * These tests measure performance improvements from native hive mind integration\n */\ndescribe('Performance Benchmarks', () => {\n  let coordinator: MaestroSwarmCoordinator;\n  let eventBus: EventBus;\n  let logger: Logger;\n  let tempDir: string;\n\n  beforeAll(async () => {\n    tempDir = await mkdtemp(join(tmpdir(), 'maestro-perf-'));\n    eventBus = new EventBus();\n    logger = new Logger({ level: 'warn' }); // Reduce logging for performance tests\n    \n    const config: MaestroSwarmConfig = {\n      hiveMindConfig: {\n        name: 'perf-test-swarm',\n        topology: 'specs-driven',\n        queenMode: 'strategic',\n        maxAgents: 8,\n        consensusThreshold: 0.66,\n        memoryTTL: 300000,\n        autoSpawn: true,\n        enableConsensus: false, // Disable for pure performance testing\n        enableMemory: true,\n        enableCommunication: true\n      },\n      enableConsensusValidation: false,\n      enableLivingDocumentation: true,\n      enableSteeringIntegration: true,\n      specsDirectory: join(tempDir, 'specs'),\n      steeringDirectory: join(tempDir, 'steering')\n    };\n    \n    coordinator = new MaestroSwarmCoordinator(config, eventBus, logger);\n    await coordinator.initialize();\n  });\n\n  afterAll(async () => {\n    await coordinator.shutdown();\n    await rm(tempDir, { recursive: true, force: true });\n  });\n\n  it('should initialize swarm within performance target (< 5 seconds)', async () => {\n    const startTime = Date.now();\n    \n    const testCoordinator = new MaestroSwarmCoordinator(\n      (coordinator as any).config,\n      eventBus,\n      logger\n    );\n    \n    await testCoordinator.initialize();\n    const duration = Date.now() - startTime;\n    \n    expect(duration).toBeLessThan(5000);\n    \n    await testCoordinator.shutdown();\n  });\n\n  it('should create specs within performance target (< 2 minutes)', async () => {\n    const startTime = Date.now();\n    \n    await coordinator.createSpec('perf-test-spec', 'Performance test specification');\n    \n    const duration = Date.now() - startTime;\n    expect(duration).toBeLessThan(120000); // 2 minutes\n  });\n\n  it('should handle multiple concurrent spec creations efficiently', async () => {\n    const startTime = Date.now();\n    const concurrentSpecs = 3;\n    \n    const promises = Array.from({ length: concurrentSpecs }, (_, i) =>\n      coordinator.createSpec(`concurrent-spec-${i}`, `Concurrent test spec ${i}`)\n    );\n    \n    await Promise.all(promises);\n    \n    const duration = Date.now() - startTime;\n    const avgTimePerSpec = duration / concurrentSpecs;\n    \n    // Should be more efficient than sequential execution\n    expect(avgTimePerSpec).toBeLessThan(90000); // < 1.5 minutes per spec on average\n  }, 300000);\n});"],"version":3}