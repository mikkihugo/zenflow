bf36ad25352cc5bd79a16bc4c74eab4b
/* istanbul ignore next */
function cov_1223uig3n8() {
  var path = "/home/mhugo/code/claude-code-flow/src/maestro/agent-reuse/AgentPoolManager.ts";
  var hash = "40509c8c3335d6c0f2b79921ec4e258642fe67b5";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/home/mhugo/code/claude-code-flow/src/maestro/agent-reuse/AgentPoolManager.ts",
    statementMap: {
      "0": {
        start: {
          line: 14,
          column: 8
        },
        end: {
          line: 14,
          column: 33
        }
      },
      "1": {
        start: {
          line: 15,
          column: 8
        },
        end: {
          line: 15,
          column: 29
        }
      },
      "2": {
        start: {
          line: 16,
          column: 8
        },
        end: {
          line: 16,
          column: 29
        }
      },
      "3": {
        start: {
          line: 19,
          column: 30
        },
        end: {
          line: 19,
          column: 89
        }
      },
      "4": {
        start: {
          line: 20,
          column: 32
        },
        end: {
          line: 22,
          column: 9
        }
      },
      "5": {
        start: {
          line: 20,
          column: 62
        },
        end: {
          line: 21,
          column: 39
        }
      },
      "6": {
        start: {
          line: 24,
          column: 8
        },
        end: {
          line: 24,
          column: 78
        }
      },
      "7": {
        start: {
          line: 24,
          column: 39
        },
        end: {
          line: 24,
          column: 76
        }
      },
      "8": {
        start: {
          line: 25,
          column: 31
        },
        end: {
          line: 25,
          column: 33
        }
      },
      "9": {
        start: {
          line: 26,
          column: 30
        },
        end: {
          line: 26,
          column: 65
        }
      },
      "10": {
        start: {
          line: 27,
          column: 8
        },
        end: {
          line: 36,
          column: 9
        }
      },
      "11": {
        start: {
          line: 28,
          column: 12
        },
        end: {
          line: 35,
          column: 15
        }
      },
      "12": {
        start: {
          line: 37,
          column: 8
        },
        end: {
          line: 37,
          column: 95
        }
      },
      "13": {
        start: {
          line: 38,
          column: 8
        },
        end: {
          line: 38,
          column: 30
        }
      },
      "14": {
        start: {
          line: 49,
          column: 8
        },
        end: {
          line: 49,
          column: 33
        }
      },
      "15": {
        start: {
          line: 50,
          column: 8
        },
        end: {
          line: 50,
          column: 29
        }
      },
      "16": {
        start: {
          line: 51,
          column: 8
        },
        end: {
          line: 51,
          column: 29
        }
      },
      "17": {
        start: {
          line: 56,
          column: 35
        },
        end: {
          line: 56,
          column: 84
        }
      },
      "18": {
        start: {
          line: 57,
          column: 29
        },
        end: {
          line: 57,
          column: 31
        }
      },
      "19": {
        start: {
          line: 59,
          column: 36
        },
        end: {
          line: 72,
          column: 9
        }
      },
      "20": {
        start: {
          line: 74,
          column: 27
        },
        end: {
          line: 74,
          column: 29
        }
      },
      "21": {
        start: {
          line: 75,
          column: 8
        },
        end: {
          line: 80,
          column: 9
        }
      },
      "22": {
        start: {
          line: 76,
          column: 34
        },
        end: {
          line: 76,
          column: 80
        }
      },
      "23": {
        start: {
          line: 77,
          column: 12
        },
        end: {
          line: 79,
          column: 13
        }
      },
      "24": {
        start: {
          line: 78,
          column: 16
        },
        end: {
          line: 78,
          column: 63
        }
      },
      "25": {
        start: {
          line: 82,
          column: 28
        },
        end: {
          line: 84,
          column: 34
        }
      },
      "26": {
        start: {
          line: 83,
          column: 36
        },
        end: {
          line: 83,
          column: 41
        }
      },
      "27": {
        start: {
          line: 84,
          column: 29
        },
        end: {
          line: 84,
          column: 33
        }
      },
      "28": {
        start: {
          line: 85,
          column: 8
        },
        end: {
          line: 85,
          column: 43
        }
      },
      "29": {
        start: {
          line: 88,
          column: 22
        },
        end: {
          line: 88,
          column: 59
        }
      },
      "30": {
        start: {
          line: 89,
          column: 8
        },
        end: {
          line: 90,
          column: 24
        }
      },
      "31": {
        start: {
          line: 90,
          column: 12
        },
        end: {
          line: 90,
          column: 24
        }
      },
      "32": {
        start: {
          line: 91,
          column: 22
        },
        end: {
          line: 91,
          column: 54
        }
      },
      "33": {
        start: {
          line: 93,
          column: 8
        },
        end: {
          line: 94,
          column: 25
        }
      },
      "34": {
        start: {
          line: 94,
          column: 12
        },
        end: {
          line: 94,
          column: 25
        }
      },
      "35": {
        start: {
          line: 96,
          column: 25
        },
        end: {
          line: 96,
          column: 66
        }
      },
      "36": {
        start: {
          line: 97,
          column: 23
        },
        end: {
          line: 97,
          column: 40
        }
      },
      "37": {
        start: {
          line: 98,
          column: 34
        },
        end: {
          line: 98,
          column: 81
        }
      },
      "38": {
        start: {
          line: 99,
          column: 8
        },
        end: {
          line: 99,
          column: 99
        }
      },
      "39": {
        start: {
          line: 102,
          column: 32
        },
        end: {
          line: 102,
          column: 34
        }
      },
      "40": {
        start: {
          line: 104,
          column: 8
        },
        end: {
          line: 111,
          column: 9
        }
      },
      "41": {
        start: {
          line: 105,
          column: 12
        },
        end: {
          line: 110,
          column: 15
        }
      },
      "42": {
        start: {
          line: 113,
          column: 8
        },
        end: {
          line: 120,
          column: 9
        }
      },
      "43": {
        start: {
          line: 114,
          column: 12
        },
        end: {
          line: 119,
          column: 15
        }
      },
      "44": {
        start: {
          line: 122,
          column: 23
        },
        end: {
          line: 122,
          column: 57
        }
      },
      "45": {
        start: {
          line: 123,
          column: 33
        },
        end: {
          line: 123,
          column: 71
        }
      },
      "46": {
        start: {
          line: 124,
          column: 8
        },
        end: {
          line: 131,
          column: 9
        }
      },
      "47": {
        start: {
          line: 125,
          column: 12
        },
        end: {
          line: 130,
          column: 15
        }
      },
      "48": {
        start: {
          line: 132,
          column: 8
        },
        end: {
          line: 132,
          column: 31
        }
      },
      "49": {
        start: {
          line: 135,
          column: 24
        },
        end: {
          line: 135,
          column: 26
        }
      },
      "50": {
        start: {
          line: 136,
          column: 8
        },
        end: {
          line: 162,
          column: 9
        }
      },
      "51": {
        start: {
          line: 137,
          column: 12
        },
        end: {
          line: 161,
          column: 13
        }
      },
      "52": {
        start: {
          line: 138,
          column: 30
        },
        end: {
          line: 138,
          column: 35
        }
      },
      "53": {
        start: {
          line: 139,
          column: 16
        },
        end: {
          line: 148,
          column: 17
        }
      },
      "54": {
        start: {
          line: 141,
          column: 24
        },
        end: {
          line: 141,
          column: 62
        }
      },
      "55": {
        start: {
          line: 142,
          column: 24
        },
        end: {
          line: 142,
          column: 30
        }
      },
      "56": {
        start: {
          line: 144,
          column: 24
        },
        end: {
          line: 144,
          column: 64
        }
      },
      "57": {
        start: {
          line: 145,
          column: 24
        },
        end: {
          line: 145,
          column: 30
        }
      },
      "58": {
        start: {
          line: 147,
          column: 24
        },
        end: {
          line: 147,
          column: 98
        }
      },
      "59": {
        start: {
          line: 149,
          column: 16
        },
        end: {
          line: 153,
          column: 19
        }
      },
      "60": {
        start: {
          line: 156,
          column: 16
        },
        end: {
          line: 160,
          column: 19
        }
      },
      "61": {
        start: {
          line: 163,
          column: 8
        },
        end: {
          line: 163,
          column: 23
        }
      },
      "62": {
        start: {
          line: 166,
          column: 25
        },
        end: {
          line: 166,
          column: 27
        }
      },
      "63": {
        start: {
          line: 167,
          column: 8
        },
        end: {
          line: 169,
          column: 11
        }
      },
      "64": {
        start: {
          line: 168,
          column: 12
        },
        end: {
          line: 168,
          column: 56
        }
      },
      "65": {
        start: {
          line: 170,
          column: 8
        },
        end: {
          line: 170,
          column: 24
        }
      },
      "66": {
        start: {
          line: 173,
          column: 8
        },
        end: {
          line: 174,
          column: 21
        }
      },
      "67": {
        start: {
          line: 174,
          column: 12
        },
        end: {
          line: 174,
          column: 21
        }
      },
      "68": {
        start: {
          line: 175,
          column: 26
        },
        end: {
          line: 175,
          column: 60
        }
      },
      "69": {
        start: {
          line: 175,
          column: 42
        },
        end: {
          line: 175,
          column: 59
        }
      },
      "70": {
        start: {
          line: 176,
          column: 21
        },
        end: {
          line: 176,
          column: 80
        }
      },
      "71": {
        start: {
          line: 176,
          column: 50
        },
        end: {
          line: 176,
          column: 57
        }
      },
      "72": {
        start: {
          line: 177,
          column: 25
        },
        end: {
          line: 177,
          column: 104
        }
      },
      "73": {
        start: {
          line: 177,
          column: 54
        },
        end: {
          line: 177,
          column: 81
        }
      },
      "74": {
        start: {
          line: 178,
          column: 8
        },
        end: {
          line: 178,
          column: 35
        }
      },
      "75": {
        start: {
          line: 181,
          column: 28
        },
        end: {
          line: 181,
          column: 68
        }
      },
      "76": {
        start: {
          line: 182,
          column: 8
        },
        end: {
          line: 182,
          column: 38
        }
      },
      "77": {
        start: {
          line: 186,
          column: 8
        },
        end: {
          line: 186,
          column: 60
        }
      },
      "78": {
        start: {
          line: 187,
          column: 8
        },
        end: {
          line: 187,
          column: 20
        }
      },
      "79": {
        start: {
          line: 199,
          column: 8
        },
        end: {
          line: 199,
          column: 41
        }
      },
      "80": {
        start: {
          line: 200,
          column: 8
        },
        end: {
          line: 200,
          column: 33
        }
      },
      "81": {
        start: {
          line: 201,
          column: 8
        },
        end: {
          line: 201,
          column: 29
        }
      },
      "82": {
        start: {
          line: 202,
          column: 8
        },
        end: {
          line: 202,
          column: 29
        }
      },
      "83": {
        start: {
          line: 205,
          column: 8
        },
        end: {
          line: 212,
          column: 9
        }
      },
      "84": {
        start: {
          line: 206,
          column: 12
        },
        end: {
          line: 206,
          column: 55
        }
      },
      "85": {
        start: {
          line: 207,
          column: 12
        },
        end: {
          line: 207,
          column: 57
        }
      },
      "86": {
        start: {
          line: 208,
          column: 12
        },
        end: {
          line: 208,
          column: 61
        }
      },
      "87": {
        start: {
          line: 211,
          column: 12
        },
        end: {
          line: 211,
          column: 127
        }
      },
      "88": {
        start: {
          line: 215,
          column: 8
        },
        end: {
          line: 223,
          column: 9
        }
      },
      "89": {
        start: {
          line: 217,
          column: 12
        },
        end: {
          line: 219,
          column: 15
        }
      },
      "90": {
        start: {
          line: 222,
          column: 12
        },
        end: {
          line: 222,
          column: 127
        }
      },
      "91": {
        start: {
          line: 238,
          column: 8
        },
        end: {
          line: 238,
          column: 41
        }
      },
      "92": {
        start: {
          line: 239,
          column: 8
        },
        end: {
          line: 239,
          column: 33
        }
      },
      "93": {
        start: {
          line: 240,
          column: 8
        },
        end: {
          line: 240,
          column: 29
        }
      },
      "94": {
        start: {
          line: 241,
          column: 8
        },
        end: {
          line: 241,
          column: 68
        }
      },
      "95": {
        start: {
          line: 242,
          column: 8
        },
        end: {
          line: 242,
          column: 94
        }
      },
      "96": {
        start: {
          line: 243,
          column: 8
        },
        end: {
          line: 243,
          column: 118
        }
      },
      "97": {
        start: {
          line: 244,
          column: 8
        },
        end: {
          line: 244,
          column: 95
        }
      },
      "98": {
        start: {
          line: 245,
          column: 8
        },
        end: {
          line: 245,
          column: 59
        }
      },
      "99": {
        start: {
          line: 251,
          column: 8
        },
        end: {
          line: 251,
          column: 124
        }
      },
      "100": {
        start: {
          line: 252,
          column: 31
        },
        end: {
          line: 252,
          column: 33
        }
      },
      "101": {
        start: {
          line: 253,
          column: 8
        },
        end: {
          line: 271,
          column: 9
        }
      },
      "102": {
        start: {
          line: 255,
          column: 35
        },
        end: {
          line: 255,
          column: 124
        }
      },
      "103": {
        start: {
          line: 256,
          column: 12
        },
        end: {
          line: 256,
          column: 51
        }
      },
      "104": {
        start: {
          line: 258,
          column: 27
        },
        end: {
          line: 258,
          column: 60
        }
      },
      "105": {
        start: {
          line: 259,
          column: 12
        },
        end: {
          line: 262,
          column: 13
        }
      },
      "106": {
        start: {
          line: 260,
          column: 34
        },
        end: {
          line: 260,
          column: 106
        }
      },
      "107": {
        start: {
          line: 261,
          column: 16
        },
        end: {
          line: 261,
          column: 50
        }
      },
      "108": {
        start: {
          line: 264,
          column: 12
        },
        end: {
          line: 264,
          column: 71
        }
      },
      "109": {
        start: {
          line: 265,
          column: 12
        },
        end: {
          line: 265,
          column: 192
        }
      },
      "110": {
        start: {
          line: 266,
          column: 12
        },
        end: {
          line: 266,
          column: 34
        }
      },
      "111": {
        start: {
          line: 269,
          column: 12
        },
        end: {
          line: 269,
          column: 144
        }
      },
      "112": {
        start: {
          line: 270,
          column: 12
        },
        end: {
          line: 270,
          column: 24
        }
      },
      "113": {
        start: {
          line: 277,
          column: 30
        },
        end: {
          line: 277,
          column: 32
        }
      },
      "114": {
        start: {
          line: 278,
          column: 8
        },
        end: {
          line: 307,
          column: 9
        }
      },
      "115": {
        start: {
          line: 280,
          column: 33
        },
        end: {
          line: 280,
          column: 129
        }
      },
      "116": {
        start: {
          line: 281,
          column: 12
        },
        end: {
          line: 301,
          column: 13
        }
      },
      "117": {
        start: {
          line: 282,
          column: 16
        },
        end: {
          line: 300,
          column: 17
        }
      },
      "118": {
        start: {
          line: 283,
          column: 36
        },
        end: {
          line: 283,
          column: 107
        }
      },
      "119": {
        start: {
          line: 284,
          column: 36
        },
        end: {
          line: 284,
          column: 91
        }
      },
      "120": {
        start: {
          line: 285,
          column: 20
        },
        end: {
          line: 285,
          column: 64
        }
      },
      "121": {
        start: {
          line: 286,
          column: 42
        },
        end: {
          line: 293,
          column: 21
        }
      },
      "122": {
        start: {
          line: 294,
          column: 20
        },
        end: {
          line: 294,
          column: 54
        }
      },
      "123": {
        start: {
          line: 295,
          column: 20
        },
        end: {
          line: 295,
          column: 72
        }
      },
      "124": {
        start: {
          line: 296,
          column: 20
        },
        end: {
          line: 296,
          column: 85
        }
      },
      "125": {
        start: {
          line: 299,
          column: 20
        },
        end: {
          line: 299,
          column: 128
        }
      },
      "126": {
        start: {
          line: 302,
          column: 12
        },
        end: {
          line: 302,
          column: 33
        }
      },
      "127": {
        start: {
          line: 305,
          column: 12
        },
        end: {
          line: 305,
          column: 115
        }
      },
      "128": {
        start: {
          line: 306,
          column: 12
        },
        end: {
          line: 306,
          column: 33
        }
      },
      "129": {
        start: {
          line: 313,
          column: 8
        },
        end: {
          line: 324,
          column: 10
        }
      },
      "130": {
        start: {
          line: 330,
          column: 8
        },
        end: {
          line: 340,
          column: 9
        }
      },
      "131": {
        start: {
          line: 331,
          column: 12
        },
        end: {
          line: 339,
          column: 13
        }
      },
      "132": {
        start: {
          line: 332,
          column: 16
        },
        end: {
          line: 335,
          column: 19
        }
      },
      "133": {
        start: {
          line: 338,
          column: 16
        },
        end: {
          line: 338,
          column: 156
        }
      },
      "134": {
        start: {
          line: 346,
          column: 8
        },
        end: {
          line: 346,
          column: 92
        }
      },
      "135": {
        start: {
          line: 347,
          column: 8
        },
        end: {
          line: 368,
          column: 9
        }
      },
      "136": {
        start: {
          line: 348,
          column: 12
        },
        end: {
          line: 367,
          column: 13
        }
      },
      "137": {
        start: {
          line: 350,
          column: 16
        },
        end: {
          line: 353,
          column: 19
        }
      },
      "138": {
        start: {
          line: 355,
          column: 38
        },
        end: {
          line: 355,
          column: 103
        }
      },
      "139": {
        start: {
          line: 356,
          column: 16
        },
        end: {
          line: 363,
          column: 17
        }
      },
      "140": {
        start: {
          line: 357,
          column: 20
        },
        end: {
          line: 357,
          column: 70
        }
      },
      "141": {
        start: {
          line: 358,
          column: 20
        },
        end: {
          line: 358,
          column: 90
        }
      },
      "142": {
        start: {
          line: 362,
          column: 20
        },
        end: {
          line: 362,
          column: 71
        }
      },
      "143": {
        start: {
          line: 366,
          column: 16
        },
        end: {
          line: 366,
          column: 130
        }
      },
      "144": {
        start: {
          line: 374,
          column: 8
        },
        end: {
          line: 374,
          column: 55
        }
      },
      "145": {
        start: {
          line: 375,
          column: 22
        },
        end: {
          line: 375,
          column: 54
        }
      },
      "146": {
        start: {
          line: 377,
          column: 32
        },
        end: {
          line: 377,
          column: 81
        }
      },
      "147": {
        start: {
          line: 379,
          column: 24
        },
        end: {
          line: 379,
          column: 84
        }
      },
      "148": {
        start: {
          line: 380,
          column: 35
        },
        end: {
          line: 385,
          column: 9
        }
      },
      "149": {
        start: {
          line: 386,
          column: 8
        },
        end: {
          line: 386,
          column: 97
        }
      },
      "150": {
        start: {
          line: 387,
          column: 8
        },
        end: {
          line: 387,
          column: 34
        }
      },
      "151": {
        start: {
          line: 394,
          column: 8
        },
        end: {
          line: 400,
          column: 10
        }
      },
      "152": {
        start: {
          line: 407,
          column: 23
        },
        end: {
          line: 407,
          column: 49
        }
      },
      "153": {
        start: {
          line: 409,
          column: 8
        },
        end: {
          line: 410,
          column: 27
        }
      },
      "154": {
        start: {
          line: 410,
          column: 12
        },
        end: {
          line: 410,
          column: 27
        }
      },
      "155": {
        start: {
          line: 411,
          column: 8
        },
        end: {
          line: 412,
          column: 26
        }
      },
      "156": {
        start: {
          line: 412,
          column: 12
        },
        end: {
          line: 412,
          column: 26
        }
      },
      "157": {
        start: {
          line: 414,
          column: 8
        },
        end: {
          line: 414,
          column: 53
        }
      },
      "158": {
        start: {
          line: 420,
          column: 8
        },
        end: {
          line: 420,
          column: 61
        }
      },
      "159": {
        start: {
          line: 422,
          column: 26
        },
        end: {
          line: 422,
          column: 60
        }
      },
      "160": {
        start: {
          line: 423,
          column: 25
        },
        end: {
          line: 423,
          column: 57
        }
      },
      "161": {
        start: {
          line: 423,
          column: 48
        },
        end: {
          line: 423,
          column: 56
        }
      },
      "162": {
        start: {
          line: 424,
          column: 8
        },
        end: {
          line: 431,
          column: 9
        }
      },
      "163": {
        start: {
          line: 425,
          column: 12
        },
        end: {
          line: 430,
          column: 13
        }
      },
      "164": {
        start: {
          line: 426,
          column: 16
        },
        end: {
          line: 426,
          column: 66
        }
      },
      "165": {
        start: {
          line: 429,
          column: 16
        },
        end: {
          line: 429,
          column: 146
        }
      },
      "166": {
        start: {
          line: 432,
          column: 8
        },
        end: {
          line: 432,
          column: 65
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 13,
            column: 4
          },
          end: {
            line: 13,
            column: 5
          }
        },
        loc: {
          start: {
            line: 13,
            column: 42
          },
          end: {
            line: 17,
            column: 5
          }
        },
        line: 13
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 18,
            column: 4
          },
          end: {
            line: 18,
            column: 5
          }
        },
        loc: {
          start: {
            line: 18,
            column: 75
          },
          end: {
            line: 39,
            column: 5
          }
        },
        line: 18
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 20,
            column: 53
          },
          end: {
            line: 20,
            column: 54
          }
        },
        loc: {
          start: {
            line: 20,
            column: 62
          },
          end: {
            line: 21,
            column: 39
          }
        },
        line: 20
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 24,
            column: 29
          },
          end: {
            line: 24,
            column: 30
          }
        },
        loc: {
          start: {
            line: 24,
            column: 39
          },
          end: {
            line: 24,
            column: 76
          }
        },
        line: 24
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 48,
            column: 4
          },
          end: {
            line: 48,
            column: 5
          }
        },
        loc: {
          start: {
            line: 48,
            column: 42
          },
          end: {
            line: 52,
            column: 5
          }
        },
        line: 48
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 53,
            column: 4
          },
          end: {
            line: 53,
            column: 5
          }
        },
        loc: {
          start: {
            line: 53,
            column: 82
          },
          end: {
            line: 86,
            column: 5
          }
        },
        line: 53
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 83,
            column: 18
          },
          end: {
            line: 83,
            column: 19
          }
        },
        loc: {
          start: {
            line: 83,
            column: 36
          },
          end: {
            line: 83,
            column: 41
          }
        },
        line: 83
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 84,
            column: 17
          },
          end: {
            line: 84,
            column: 18
          }
        },
        loc: {
          start: {
            line: 84,
            column: 29
          },
          end: {
            line: 84,
            column: 33
          }
        },
        line: 84
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 87,
            column: 4
          },
          end: {
            line: 87,
            column: 5
          }
        },
        loc: {
          start: {
            line: 87,
            column: 51
          },
          end: {
            line: 100,
            column: 5
          }
        },
        line: 87
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 101,
            column: 4
          },
          end: {
            line: 101,
            column: 5
          }
        },
        loc: {
          start: {
            line: 101,
            column: 35
          },
          end: {
            line: 133,
            column: 5
          }
        },
        line: 101
      },
      "10": {
        name: "(anonymous_10)",
        decl: {
          start: {
            line: 134,
            column: 4
          },
          end: {
            line: 134,
            column: 5
          }
        },
        loc: {
          start: {
            line: 134,
            column: 46
          },
          end: {
            line: 164,
            column: 5
          }
        },
        line: 134
      },
      "11": {
        name: "(anonymous_11)",
        decl: {
          start: {
            line: 165,
            column: 4
          },
          end: {
            line: 165,
            column: 5
          }
        },
        loc: {
          start: {
            line: 165,
            column: 41
          },
          end: {
            line: 171,
            column: 5
          }
        },
        line: 165
      },
      "12": {
        name: "(anonymous_12)",
        decl: {
          start: {
            line: 167,
            column: 29
          },
          end: {
            line: 167,
            column: 30
          }
        },
        loc: {
          start: {
            line: 167,
            column: 45
          },
          end: {
            line: 169,
            column: 9
          }
        },
        line: 167
      },
      "13": {
        name: "(anonymous_13)",
        decl: {
          start: {
            line: 172,
            column: 4
          },
          end: {
            line: 172,
            column: 5
          }
        },
        loc: {
          start: {
            line: 172,
            column: 38
          },
          end: {
            line: 179,
            column: 5
          }
        },
        line: 172
      },
      "14": {
        name: "(anonymous_14)",
        decl: {
          start: {
            line: 175,
            column: 37
          },
          end: {
            line: 175,
            column: 38
          }
        },
        loc: {
          start: {
            line: 175,
            column: 42
          },
          end: {
            line: 175,
            column: 59
          }
        },
        line: 175
      },
      "15": {
        name: "(anonymous_15)",
        decl: {
          start: {
            line: 176,
            column: 38
          },
          end: {
            line: 176,
            column: 39
          }
        },
        loc: {
          start: {
            line: 176,
            column: 50
          },
          end: {
            line: 176,
            column: 57
          }
        },
        line: 176
      },
      "16": {
        name: "(anonymous_16)",
        decl: {
          start: {
            line: 177,
            column: 42
          },
          end: {
            line: 177,
            column: 43
          }
        },
        loc: {
          start: {
            line: 177,
            column: 54
          },
          end: {
            line: 177,
            column: 81
          }
        },
        line: 177
      },
      "17": {
        name: "(anonymous_17)",
        decl: {
          start: {
            line: 180,
            column: 4
          },
          end: {
            line: 180,
            column: 5
          }
        },
        loc: {
          start: {
            line: 180,
            column: 27
          },
          end: {
            line: 183,
            column: 5
          }
        },
        line: 180
      },
      "18": {
        name: "(anonymous_18)",
        decl: {
          start: {
            line: 184,
            column: 4
          },
          end: {
            line: 184,
            column: 5
          }
        },
        loc: {
          start: {
            line: 184,
            column: 29
          },
          end: {
            line: 188,
            column: 5
          }
        },
        line: 184
      },
      "19": {
        name: "(anonymous_19)",
        decl: {
          start: {
            line: 198,
            column: 4
          },
          end: {
            line: 198,
            column: 5
          }
        },
        loc: {
          start: {
            line: 198,
            column: 56
          },
          end: {
            line: 203,
            column: 5
          }
        },
        line: 198
      },
      "20": {
        name: "(anonymous_20)",
        decl: {
          start: {
            line: 204,
            column: 4
          },
          end: {
            line: 204,
            column: 5
          }
        },
        loc: {
          start: {
            line: 204,
            column: 32
          },
          end: {
            line: 213,
            column: 5
          }
        },
        line: 204
      },
      "21": {
        name: "(anonymous_21)",
        decl: {
          start: {
            line: 214,
            column: 4
          },
          end: {
            line: 214,
            column: 5
          }
        },
        loc: {
          start: {
            line: 214,
            column: 33
          },
          end: {
            line: 224,
            column: 5
          }
        },
        line: 214
      },
      "22": {
        name: "(anonymous_22)",
        decl: {
          start: {
            line: 237,
            column: 4
          },
          end: {
            line: 237,
            column: 5
          }
        },
        loc: {
          start: {
            line: 237,
            column: 61
          },
          end: {
            line: 246,
            column: 5
          }
        },
        line: 237
      },
      "23": {
        name: "(anonymous_23)",
        decl: {
          start: {
            line: 250,
            column: 4
          },
          end: {
            line: 250,
            column: 5
          }
        },
        loc: {
          start: {
            line: 250,
            column: 74
          },
          end: {
            line: 272,
            column: 5
          }
        },
        line: 250
      },
      "24": {
        name: "(anonymous_24)",
        decl: {
          start: {
            line: 276,
            column: 4
          },
          end: {
            line: 276,
            column: 5
          }
        },
        loc: {
          start: {
            line: 276,
            column: 71
          },
          end: {
            line: 308,
            column: 5
          }
        },
        line: 276
      },
      "25": {
        name: "(anonymous_25)",
        decl: {
          start: {
            line: 312,
            column: 4
          },
          end: {
            line: 312,
            column: 5
          }
        },
        loc: {
          start: {
            line: 312,
            column: 71
          },
          end: {
            line: 325,
            column: 5
          }
        },
        line: 312
      },
      "26": {
        name: "(anonymous_26)",
        decl: {
          start: {
            line: 329,
            column: 4
          },
          end: {
            line: 329,
            column: 5
          }
        },
        loc: {
          start: {
            line: 329,
            column: 50
          },
          end: {
            line: 341,
            column: 5
          }
        },
        line: 329
      },
      "27": {
        name: "(anonymous_27)",
        decl: {
          start: {
            line: 345,
            column: 4
          },
          end: {
            line: 345,
            column: 5
          }
        },
        loc: {
          start: {
            line: 345,
            column: 47
          },
          end: {
            line: 369,
            column: 5
          }
        },
        line: 345
      },
      "28": {
        name: "(anonymous_28)",
        decl: {
          start: {
            line: 373,
            column: 4
          },
          end: {
            line: 373,
            column: 5
          }
        },
        loc: {
          start: {
            line: 373,
            column: 25
          },
          end: {
            line: 388,
            column: 5
          }
        },
        line: 373
      },
      "29": {
        name: "(anonymous_29)",
        decl: {
          start: {
            line: 392,
            column: 4
          },
          end: {
            line: 392,
            column: 5
          }
        },
        loc: {
          start: {
            line: 392,
            column: 30
          },
          end: {
            line: 401,
            column: 5
          }
        },
        line: 392
      },
      "30": {
        name: "(anonymous_30)",
        decl: {
          start: {
            line: 405,
            column: 4
          },
          end: {
            line: 405,
            column: 5
          }
        },
        loc: {
          start: {
            line: 405,
            column: 45
          },
          end: {
            line: 415,
            column: 5
          }
        },
        line: 405
      },
      "31": {
        name: "(anonymous_31)",
        decl: {
          start: {
            line: 419,
            column: 4
          },
          end: {
            line: 419,
            column: 5
          }
        },
        loc: {
          start: {
            line: 419,
            column: 21
          },
          end: {
            line: 433,
            column: 5
          }
        },
        line: 419
      },
      "32": {
        name: "(anonymous_32)",
        decl: {
          start: {
            line: 423,
            column: 39
          },
          end: {
            line: 423,
            column: 40
          }
        },
        loc: {
          start: {
            line: 423,
            column: 48
          },
          end: {
            line: 423,
            column: 56
          }
        },
        line: 423
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 20,
            column: 62
          },
          end: {
            line: 21,
            column: 39
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 20,
            column: 62
          },
          end: {
            line: 20,
            column: 90
          }
        }, {
          start: {
            line: 21,
            column: 12
          },
          end: {
            line: 21,
            column: 39
          }
        }],
        line: 20
      },
      "1": {
        loc: {
          start: {
            line: 76,
            column: 34
          },
          end: {
            line: 76,
            column: 80
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 76,
            column: 34
          },
          end: {
            line: 76,
            column: 65
          }
        }, {
          start: {
            line: 76,
            column: 69
          },
          end: {
            line: 76,
            column: 80
          }
        }],
        line: 76
      },
      "2": {
        loc: {
          start: {
            line: 78,
            column: 36
          },
          end: {
            line: 78,
            column: 57
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 78,
            column: 36
          },
          end: {
            line: 78,
            column: 52
          }
        }, {
          start: {
            line: 78,
            column: 56
          },
          end: {
            line: 78,
            column: 57
          }
        }],
        line: 78
      },
      "3": {
        loc: {
          start: {
            line: 89,
            column: 8
          },
          end: {
            line: 90,
            column: 24
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 89,
            column: 8
          },
          end: {
            line: 90,
            column: 24
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 89
      },
      "4": {
        loc: {
          start: {
            line: 93,
            column: 8
          },
          end: {
            line: 94,
            column: 25
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 93,
            column: 8
          },
          end: {
            line: 94,
            column: 25
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 93
      },
      "5": {
        loc: {
          start: {
            line: 99,
            column: 15
          },
          end: {
            line: 99,
            column: 98
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 99,
            column: 15
          },
          end: {
            line: 99,
            column: 21
          }
        }, {
          start: {
            line: 99,
            column: 25
          },
          end: {
            line: 99,
            column: 42
          }
        }, {
          start: {
            line: 99,
            column: 46
          },
          end: {
            line: 99,
            column: 98
          }
        }],
        line: 99
      },
      "6": {
        loc: {
          start: {
            line: 104,
            column: 8
          },
          end: {
            line: 111,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 104,
            column: 8
          },
          end: {
            line: 111,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 104
      },
      "7": {
        loc: {
          start: {
            line: 113,
            column: 8
          },
          end: {
            line: 120,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 113,
            column: 8
          },
          end: {
            line: 120,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 113
      },
      "8": {
        loc: {
          start: {
            line: 113,
            column: 12
          },
          end: {
            line: 113,
            column: 64
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 113,
            column: 12
          },
          end: {
            line: 113,
            column: 39
          }
        }, {
          start: {
            line: 113,
            column: 43
          },
          end: {
            line: 113,
            column: 64
          }
        }],
        line: 113
      },
      "9": {
        loc: {
          start: {
            line: 124,
            column: 8
          },
          end: {
            line: 131,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 124,
            column: 8
          },
          end: {
            line: 131,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 124
      },
      "10": {
        loc: {
          start: {
            line: 139,
            column: 16
          },
          end: {
            line: 148,
            column: 17
          }
        },
        type: "switch",
        locations: [{
          start: {
            line: 140,
            column: 20
          },
          end: {
            line: 142,
            column: 30
          }
        }, {
          start: {
            line: 143,
            column: 20
          },
          end: {
            line: 145,
            column: 30
          }
        }, {
          start: {
            line: 146,
            column: 20
          },
          end: {
            line: 147,
            column: 98
          }
        }],
        line: 139
      },
      "11": {
        loc: {
          start: {
            line: 152,
            column: 34
          },
          end: {
            line: 152,
            column: 77
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 152,
            column: 44
          },
          end: {
            line: 152,
            column: 73
          }
        }, {
          start: {
            line: 152,
            column: 76
          },
          end: {
            line: 152,
            column: 77
          }
        }],
        line: 152
      },
      "12": {
        loc: {
          start: {
            line: 159,
            column: 27
          },
          end: {
            line: 159,
            column: 81
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 159,
            column: 52
          },
          end: {
            line: 159,
            column: 65
          }
        }, {
          start: {
            line: 159,
            column: 68
          },
          end: {
            line: 159,
            column: 81
          }
        }],
        line: 159
      },
      "13": {
        loc: {
          start: {
            line: 173,
            column: 8
          },
          end: {
            line: 174,
            column: 21
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 173,
            column: 8
          },
          end: {
            line: 174,
            column: 21
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 173
      },
      "14": {
        loc: {
          start: {
            line: 211,
            column: 69
          },
          end: {
            line: 211,
            column: 123
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 211,
            column: 94
          },
          end: {
            line: 211,
            column: 107
          }
        }, {
          start: {
            line: 211,
            column: 110
          },
          end: {
            line: 211,
            column: 123
          }
        }],
        line: 211
      },
      "15": {
        loc: {
          start: {
            line: 222,
            column: 69
          },
          end: {
            line: 222,
            column: 123
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 222,
            column: 94
          },
          end: {
            line: 222,
            column: 107
          }
        }, {
          start: {
            line: 222,
            column: 110
          },
          end: {
            line: 222,
            column: 123
          }
        }],
        line: 222
      },
      "16": {
        loc: {
          start: {
            line: 237,
            column: 48
          },
          end: {
            line: 237,
            column: 59
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 237,
            column: 57
          },
          end: {
            line: 237,
            column: 59
          }
        }],
        line: 237
      },
      "17": {
        loc: {
          start: {
            line: 250,
            column: 59
          },
          end: {
            line: 250,
            column: 72
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 250,
            column: 71
          },
          end: {
            line: 250,
            column: 72
          }
        }],
        line: 250
      },
      "18": {
        loc: {
          start: {
            line: 259,
            column: 12
          },
          end: {
            line: 262,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 259,
            column: 12
          },
          end: {
            line: 262,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 259
      },
      "19": {
        loc: {
          start: {
            line: 269,
            column: 86
          },
          end: {
            line: 269,
            column: 140
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 269,
            column: 111
          },
          end: {
            line: 269,
            column: 124
          }
        }, {
          start: {
            line: 269,
            column: 127
          },
          end: {
            line: 269,
            column: 140
          }
        }],
        line: 269
      },
      "20": {
        loc: {
          start: {
            line: 289,
            column: 38
          },
          end: {
            line: 289,
            column: 64
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 289,
            column: 38
          },
          end: {
            line: 289,
            column: 58
          }
        }, {
          start: {
            line: 289,
            column: 62
          },
          end: {
            line: 289,
            column: 64
          }
        }],
        line: 289
      },
      "21": {
        loc: {
          start: {
            line: 299,
            column: 70
          },
          end: {
            line: 299,
            column: 124
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 299,
            column: 95
          },
          end: {
            line: 299,
            column: 108
          }
        }, {
          start: {
            line: 299,
            column: 111
          },
          end: {
            line: 299,
            column: 124
          }
        }],
        line: 299
      },
      "22": {
        loc: {
          start: {
            line: 305,
            column: 57
          },
          end: {
            line: 305,
            column: 111
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 305,
            column: 82
          },
          end: {
            line: 305,
            column: 95
          }
        }, {
          start: {
            line: 305,
            column: 98
          },
          end: {
            line: 305,
            column: 111
          }
        }],
        line: 305
      },
      "23": {
        loc: {
          start: {
            line: 315,
            column: 38
          },
          end: {
            line: 315,
            column: 79
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 315,
            column: 38
          },
          end: {
            line: 315,
            column: 61
          }
        }, {
          start: {
            line: 315,
            column: 65
          },
          end: {
            line: 315,
            column: 79
          }
        }],
        line: 315
      },
      "24": {
        loc: {
          start: {
            line: 338,
            column: 98
          },
          end: {
            line: 338,
            column: 152
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 338,
            column: 123
          },
          end: {
            line: 338,
            column: 136
          }
        }, {
          start: {
            line: 338,
            column: 139
          },
          end: {
            line: 338,
            column: 152
          }
        }],
        line: 338
      },
      "25": {
        loc: {
          start: {
            line: 356,
            column: 16
          },
          end: {
            line: 363,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 356,
            column: 16
          },
          end: {
            line: 363,
            column: 17
          }
        }, {
          start: {
            line: 360,
            column: 21
          },
          end: {
            line: 363,
            column: 17
          }
        }],
        line: 356
      },
      "26": {
        loc: {
          start: {
            line: 366,
            column: 72
          },
          end: {
            line: 366,
            column: 126
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 366,
            column: 97
          },
          end: {
            line: 366,
            column: 110
          }
        }, {
          start: {
            line: 366,
            column: 113
          },
          end: {
            line: 366,
            column: 126
          }
        }],
        line: 366
      },
      "27": {
        loc: {
          start: {
            line: 407,
            column: 23
          },
          end: {
            line: 407,
            column: 49
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 407,
            column: 23
          },
          end: {
            line: 407,
            column: 43
          }
        }, {
          start: {
            line: 407,
            column: 47
          },
          end: {
            line: 407,
            column: 49
          }
        }],
        line: 407
      },
      "28": {
        loc: {
          start: {
            line: 409,
            column: 8
          },
          end: {
            line: 410,
            column: 27
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 409,
            column: 8
          },
          end: {
            line: 410,
            column: 27
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 409
      },
      "29": {
        loc: {
          start: {
            line: 411,
            column: 8
          },
          end: {
            line: 412,
            column: 26
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 411,
            column: 8
          },
          end: {
            line: 412,
            column: 26
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 411
      },
      "30": {
        loc: {
          start: {
            line: 429,
            column: 88
          },
          end: {
            line: 429,
            column: 142
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 429,
            column: 113
          },
          end: {
            line: 429,
            column: 126
          }
        }, {
          start: {
            line: 429,
            column: 129
          },
          end: {
            line: 429,
            column: 142
          }
        }],
        line: 429
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0,
      "74": 0,
      "75": 0,
      "76": 0,
      "77": 0,
      "78": 0,
      "79": 0,
      "80": 0,
      "81": 0,
      "82": 0,
      "83": 0,
      "84": 0,
      "85": 0,
      "86": 0,
      "87": 0,
      "88": 0,
      "89": 0,
      "90": 0,
      "91": 0,
      "92": 0,
      "93": 0,
      "94": 0,
      "95": 0,
      "96": 0,
      "97": 0,
      "98": 0,
      "99": 0,
      "100": 0,
      "101": 0,
      "102": 0,
      "103": 0,
      "104": 0,
      "105": 0,
      "106": 0,
      "107": 0,
      "108": 0,
      "109": 0,
      "110": 0,
      "111": 0,
      "112": 0,
      "113": 0,
      "114": 0,
      "115": 0,
      "116": 0,
      "117": 0,
      "118": 0,
      "119": 0,
      "120": 0,
      "121": 0,
      "122": 0,
      "123": 0,
      "124": 0,
      "125": 0,
      "126": 0,
      "127": 0,
      "128": 0,
      "129": 0,
      "130": 0,
      "131": 0,
      "132": 0,
      "133": 0,
      "134": 0,
      "135": 0,
      "136": 0,
      "137": 0,
      "138": 0,
      "139": 0,
      "140": 0,
      "141": 0,
      "142": 0,
      "143": 0,
      "144": 0,
      "145": 0,
      "146": 0,
      "147": 0,
      "148": 0,
      "149": 0,
      "150": 0,
      "151": 0,
      "152": 0,
      "153": 0,
      "154": 0,
      "155": 0,
      "156": 0,
      "157": 0,
      "158": 0,
      "159": 0,
      "160": 0,
      "161": 0,
      "162": 0,
      "163": 0,
      "164": 0,
      "165": 0,
      "166": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0, 0],
      "10": [0, 0, 0],
      "11": [0, 0],
      "12": [0, 0],
      "13": [0, 0],
      "14": [0, 0],
      "15": [0, 0],
      "16": [0],
      "17": [0],
      "18": [0, 0],
      "19": [0, 0],
      "20": [0, 0],
      "21": [0, 0],
      "22": [0, 0],
      "23": [0, 0],
      "24": [0, 0],
      "25": [0, 0],
      "26": [0, 0],
      "27": [0, 0],
      "28": [0, 0],
      "29": [0, 0],
      "30": [0, 0]
    },
    inputSourceMap: {
      file: "/home/mhugo/code/claude-code-flow/src/maestro/agent-reuse/AgentPoolManager.ts",
      mappings: "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",
      names: [],
      sources: ["/home/mhugo/code/claude-code-flow/src/maestro/agent-reuse/AgentPoolManager.ts"],
      sourcesContent: ["/**\n * Agent Pool Manager - Optimizes agent lifecycle and reuse patterns\n * Implements Open/Closed principle for extensible pool strategies\n */\n\nimport { ILogger } from '../../core/logger.js';\nimport { AgentManager } from '../../agents/agent-manager.js';\nimport {\n  AcquiredAgent,\n  TaskContext,\n  AgentProfile,\n  PoolManagerConfig,\n  PoolOptimizationResult,\n  OptimizationRecommendation,\n  OptimizationResult,\n  DEFAULT_POOL_MANAGER_CONFIG\n} from './types.js';\nimport { AgentRegistry } from './AgentRegistry.js';\n\n/**\n * Reuse strategy interface for different reuse approaches\n */\ninterface ReuseStrategy {\n  findReusableAgents(\n    requiredCapabilities: string[],\n    taskContext: TaskContext,\n    maxAgents: number\n  ): Promise<AcquiredAgent[]>;\n}\n\n/**\n * Greedy reuse strategy - prioritizes any available agent with matching capabilities\n */\nclass GreedyReuseStrategy implements ReuseStrategy {\n  constructor(\n    private registry: AgentRegistry,\n    private config: PoolManagerConfig,\n    private logger: ILogger\n  ) {}\n\n  async findReusableAgents(\n    requiredCapabilities: string[],\n    taskContext: TaskContext,\n    maxAgents: number\n  ): Promise<AcquiredAgent[]> {\n    const capableAgents = await this.registry.findCapableAgents(requiredCapabilities);\n    const availableAgents = capableAgents.filter(agent => \n      agent.status === 'available' && \n      agent.currentWorkload < 0.8 // Don't reuse overloaded agents\n    );\n\n    // Sort by workload (prefer less busy agents)\n    availableAgents.sort((a, b) => a.currentWorkload - b.currentWorkload);\n\n    const reusableAgents: AcquiredAgent[] = [];\n    const agentsToReuse = availableAgents.slice(0, maxAgents);\n\n    for (const agent of agentsToReuse) {\n      reusableAgents.push({\n        id: agent.id,\n        type: agent.profile.type,\n        capabilities: agent.capabilities,\n        source: 'reused',\n        reusedAt: new Date(),\n        assignedTaskId: taskContext.id\n      });\n    }\n\n    this.logger.info(`Reusing ${reusableAgents.length} agents for task ${taskContext.id}`);\n    return reusableAgents;\n  }\n}\n\n/**\n * Pool optimizer for dynamic pool sizing and health management\n */\nclass DynamicPoolOptimizer {\n  constructor(\n    private registry: AgentRegistry,\n    private config: PoolManagerConfig,\n    private logger: ILogger\n  ) {}\n\n  async selectOptimalTypesForSpawning(\n    requiredCapabilities: string[],\n    taskContext: TaskContext,\n    count: number\n  ): Promise<string[]> {\n    // Simple strategy: prefer agents that match the most capabilities\n    // In production, this would use more sophisticated optimization\n    \n    const capabilityPriority = this.analyzeCapabilityNeeds(requiredCapabilities);\n    const optimalTypes: string[] = [];\n\n    // Map capabilities to agent types (simplified mapping)\n    const capabilityToTypeMap: Record<string, string[]> = {\n      'design': ['design-architect'],\n      'architecture': ['design-architect', 'system-architect'],\n      'system-architecture': ['system-architect'],\n      'implementation': ['developer'],\n      'coding': ['developer', 'coder'],\n      'testing': ['tester', 'developer'],\n      'project-management': ['task-planner'],\n      'task-breakdown': ['task-planner'],\n      'planning': ['task-planner'],\n      'analysis': ['analyst', 'researcher'],\n      'research': ['researcher'],\n      'documentation': ['requirements-engineer', 'steering-author']\n    };\n\n    // Select types based on required capabilities\n    const typeScores: Record<string, number> = {};\n    \n    for (const capability of requiredCapabilities) {\n      const possibleTypes = capabilityToTypeMap[capability] || ['general'];\n      for (const type of possibleTypes) {\n        typeScores[type] = (typeScores[type] || 0) + 1;\n      }\n    }\n\n    // Sort by score and select top types\n    const sortedTypes = Object.entries(typeScores)\n      .sort(([,a], [,b]) => b - a)\n      .map(([type]) => type);\n\n    return sortedTypes.slice(0, count);\n  }\n\n  async shouldCleanupAgent(agentId: string, taskContext: TaskContext): Promise<boolean> {\n    const agent = await this.registry.getAgent(agentId);\n    if (!agent) return true; // Clean up non-existent agents\n\n    const stats = this.registry.getRegistryStats();\n    \n    // Don't cleanup if we're below minimum pool size\n    if (stats.totalAgents <= 3) return false;\n\n    // Cleanup if agent has been idle and we have excess capacity\n    const idleTime = Date.now() - agent.lastActivity.getTime();\n    const isIdle = idleTime > 300000; // 5 minutes\n    const hasExcessCapacity = stats.availableAgents > stats.totalAgents * 0.6;\n\n    return isIdle && hasExcessCapacity && agent.currentWorkload < this.config.cleanupThreshold;\n  }\n\n  async analyzePoolHealth(stats: any): Promise<OptimizationRecommendation[]> {\n    const recommendations: OptimizationRecommendation[] = [];\n\n    // Check if we need more agents\n    if (stats.availableAgents < stats.totalAgents * 0.3) {\n      recommendations.push({\n        type: 'spawn',\n        reason: 'Low availability ratio - need more agents',\n        expectedImpact: 0.3,\n        priority: 'high'\n      });\n    }\n\n    // Check if we have too many idle agents\n    if (stats.averageWorkload < 0.2 && stats.totalAgents > 5) {\n      recommendations.push({\n        type: 'cleanup',\n        reason: 'High number of idle agents - cleanup needed',\n        expectedImpact: 0.2,\n        priority: 'medium'\n      });\n    }\n\n    // Check workload balance\n    const agents = this.registry.getAllActiveAgents();\n    const workloadVariance = this.calculateWorkloadVariance(agents);\n    if (workloadVariance > 0.3) {\n      recommendations.push({\n        type: 'rebalance',\n        reason: 'High workload variance - rebalancing needed',\n        expectedImpact: 0.25,\n        priority: 'medium'\n      });\n    }\n\n    return recommendations;\n  }\n\n  async applyOptimizations(recommendations: OptimizationRecommendation[]): Promise<OptimizationResult[]> {\n    const results: OptimizationResult[] = [];\n\n    for (const recommendation of recommendations) {\n      try {\n        let applied = false;\n        \n        switch (recommendation.type) {\n          case 'cleanup':\n            applied = await this.performCleanup();\n            break;\n          case 'rebalance':\n            applied = await this.performRebalance();\n            break;\n          default:\n            this.logger.warn(`Unsupported optimization type: ${recommendation.type}`);\n        }\n\n        results.push({\n          recommendation,\n          applied,\n          actualImpact: applied ? recommendation.expectedImpact : 0\n        });\n\n      } catch (error) {\n        results.push({\n          recommendation,\n          applied: false,\n          error: error instanceof Error ? error.message : String(error)\n        });\n      }\n    }\n\n    return results;\n  }\n\n  private analyzeCapabilityNeeds(capabilities: string[]): Record<string, number> {\n    const priority: Record<string, number> = {};\n    capabilities.forEach((cap, index) => {\n      priority[cap] = capabilities.length - index; // Higher priority for earlier capabilities\n    });\n    return priority;\n  }\n\n  private calculateWorkloadVariance(agents: any[]): number {\n    if (agents.length === 0) return 0;\n    \n    const workloads = agents.map(a => a.currentWorkload);\n    const mean = workloads.reduce((sum, w) => sum + w, 0) / workloads.length;\n    const variance = workloads.reduce((sum, w) => sum + Math.pow(w - mean, 2), 0) / workloads.length;\n    \n    return Math.sqrt(variance);\n  }\n\n  private async performCleanup(): Promise<boolean> {\n    const staleAgents = await this.registry.cleanupStaleAgents();\n    return staleAgents.length > 0;\n  }\n\n  private async performRebalance(): Promise<boolean> {\n    // Simple rebalancing - in production this would redistribute tasks\n    this.logger.info('Performing workload rebalancing');\n    return true;\n  }\n}\n\n/**\n * Agent lifecycle manager for proper agent creation and cleanup\n */\nclass AgentLifecycleManager {\n  constructor(\n    private agentManager: AgentManager,\n    private registry: AgentRegistry,\n    private config: PoolManagerConfig,\n    private logger: ILogger\n  ) {}\n\n  async cleanupAgent(agentId: string): Promise<void> {\n    try {\n      await this.agentManager.stopAgent(agentId);\n      await this.registry.unregisterAgent(agentId);\n      this.logger.info(`Cleaned up agent: ${agentId}`);\n    } catch (error) {\n      this.logger.error(`Failed to cleanup agent ${agentId}: ${error instanceof Error ? error.message : String(error)}`);\n    }\n  }\n\n  async maintainAgent(agentId: string): Promise<void> {\n    try {\n      // Basic maintenance - update last activity\n      await this.registry.updateAgentStatus(agentId, 'available', {\n        maintainedAt: new Date()\n      });\n    } catch (error) {\n      this.logger.warn(`Failed to maintain agent ${agentId}: ${error instanceof Error ? error.message : String(error)}`);\n    }\n  }\n}\n\n/**\n * Main Agent Pool Manager class\n */\nexport class AgentPoolManager {\n  private reuseStrategy: ReuseStrategy;\n  private lifecycleManager: AgentLifecycleManager;\n  private poolOptimizer: DynamicPoolOptimizer;\n  private config: PoolManagerConfig;\n\n  constructor(\n    private agentManager: AgentManager,\n    private registry: AgentRegistry,\n    private logger: ILogger,\n    config: Partial<PoolManagerConfig> = {}\n  ) {\n    this.config = { ...DEFAULT_POOL_MANAGER_CONFIG, ...config };\n    \n    this.reuseStrategy = new GreedyReuseStrategy(this.registry, this.config, this.logger);\n    this.lifecycleManager = new AgentLifecycleManager(this.agentManager, this.registry, this.config, this.logger);\n    this.poolOptimizer = new DynamicPoolOptimizer(this.registry, this.config, this.logger);\n\n    this.logger.info('Agent Pool Manager initialized');\n  }\n\n  /**\n   * Primary agent acquisition method - reuse first, spawn if needed\n   */\n  async acquireAgents(\n    requiredCapabilities: string[],\n    taskContext: TaskContext,\n    maxAgents: number = 2\n  ): Promise<AcquiredAgent[]> {\n    this.logger.info(`Acquiring agents for task ${taskContext.id}, capabilities: [${requiredCapabilities.join(', ')}]`);\n\n    const acquiredAgents: AcquiredAgent[] = [];\n\n    try {\n      // Step 1: Try to reuse existing agents\n      const reusableAgents = await this.reuseStrategy.findReusableAgents(\n        requiredCapabilities,\n        taskContext,\n        maxAgents\n      );\n\n      acquiredAgents.push(...reusableAgents);\n\n      // Step 2: Spawn additional agents if needed\n      const needed = maxAgents - reusableAgents.length;\n      if (needed > 0) {\n        const newAgents = await this.spawnOptimalAgents(\n          requiredCapabilities,\n          taskContext,\n          needed\n        );\n        acquiredAgents.push(...newAgents);\n      }\n\n      // Step 3: Mark agents as assigned\n      await this.assignAgentsToTask(acquiredAgents, taskContext);\n\n      this.logger.info(`Acquired ${acquiredAgents.length} agents for task ${taskContext.id} (${reusableAgents.length} reused, ${acquiredAgents.length - reusableAgents.length} spawned)`);\n\n      return acquiredAgents;\n\n    } catch (error) {\n      this.logger.error(`Failed to acquire agents for task ${taskContext.id}: ${error instanceof Error ? error.message : String(error)}`);\n      throw error;\n    }\n  }\n\n  /**\n   * Intelligent agent spawning when reuse is not possible\n   */\n  private async spawnOptimalAgents(\n    requiredCapabilities: string[],\n    taskContext: TaskContext,\n    count: number\n  ): Promise<AcquiredAgent[]> {\n    const spawnedAgents: AcquiredAgent[] = [];\n    \n    try {\n      // Use pool optimizer to determine optimal agent types\n      const optimalTypes = await this.poolOptimizer.selectOptimalTypesForSpawning(\n        requiredCapabilities,\n        taskContext,\n        count\n      );\n\n      for (const agentType of optimalTypes) {\n        try {\n          const profile = this.createOptimalProfile(agentType, requiredCapabilities, taskContext);\n          const agentId = await this.agentManager.createAgent(agentType, profile);\n          await this.agentManager.startAgent(agentId);\n          \n          const acquiredAgent: AcquiredAgent = {\n            id: agentId,\n            type: agentType,\n            capabilities: profile.capabilities || [],\n            source: 'spawned',\n            spawnedAt: new Date(),\n            assignedTaskId: taskContext.id\n          };\n\n          spawnedAgents.push(acquiredAgent);\n          await this.registry.registerAgent(agentId, profile);\n          \n          this.logger.info(`Spawned new agent: ${agentId} (${agentType})`);\n          \n        } catch (error) {\n          this.logger.warn(`Failed to spawn ${agentType}: ${error instanceof Error ? error.message : String(error)}`);\n        }\n      }\n\n      return spawnedAgents;\n\n    } catch (error) {\n      this.logger.error(`Failed to spawn agents: ${error instanceof Error ? error.message : String(error)}`);\n      return spawnedAgents; // Return whatever we managed to spawn\n    }\n  }\n\n  /**\n   * Create optimal agent profile based on requirements\n   */\n  private createOptimalProfile(\n    agentType: string,\n    requiredCapabilities: string[],\n    taskContext: TaskContext\n  ): AgentProfile {\n    return {\n      id: `${agentType}-${taskContext.id}-${Date.now()}`,\n      name: `${agentType} for ${taskContext.featureName || taskContext.id}`,\n      type: agentType,\n      capabilities: requiredCapabilities,\n      maxConcurrentTasks: 1,\n      priority: this.determinePriorityForContext(taskContext),\n      metadata: {\n        createdFor: taskContext.id,\n        requiredCapabilities\n      }\n    };\n  }\n\n  /**\n   * Assign acquired agents to the specific task\n   */\n  private async assignAgentsToTask(agents: AcquiredAgent[], taskContext: TaskContext): Promise<void> {\n    for (const agent of agents) {\n      try {\n        await this.registry.updateAgentStatus(agent.id, 'busy', {\n          assignedTask: taskContext.id,\n          assignedAt: new Date()\n        });\n      } catch (error) {\n        this.logger.warn(`Failed to assign agent ${agent.id} to task ${taskContext.id}: ${error instanceof Error ? error.message : String(error)}`);\n      }\n    }\n  }\n\n  /**\n   * Release agents back to pool with intelligent cleanup decisions\n   */\n  async releaseAgents(agentIds: string[], taskContext: TaskContext): Promise<void> {\n    this.logger.info(`Releasing ${agentIds.length} agents from task ${taskContext.id}`);\n\n    for (const agentId of agentIds) {\n      try {\n        // Update agent status to available\n        await this.registry.updateAgentStatus(agentId, 'available', {\n          lastTask: taskContext.id,\n          releasedAt: new Date()\n        });\n        \n        // Decide whether to keep or cleanup based on pool optimization\n        const shouldCleanup = await this.poolOptimizer.shouldCleanupAgent(agentId, taskContext);\n        \n        if (shouldCleanup) {\n          await this.lifecycleManager.cleanupAgent(agentId);\n          this.logger.info(`Cleaned up agent ${agentId} after task completion`);\n        } else {\n          // Keep agent in pool for reuse\n          await this.lifecycleManager.maintainAgent(agentId);\n        }\n      } catch (error) {\n        this.logger.warn(`Failed to release agent ${agentId}: ${error instanceof Error ? error.message : String(error)}`);\n      }\n    }\n  }\n\n  /**\n   * Pool health monitoring and optimization\n   */\n  async optimizePool(): Promise<PoolOptimizationResult> {\n    this.logger.info('Starting pool optimization');\n    \n    const stats = this.registry.getRegistryStats();\n    \n    // Identify optimization opportunities\n    const recommendations = await this.poolOptimizer.analyzePoolHealth(stats);\n    \n    // Apply optimizations\n    const results = await this.poolOptimizer.applyOptimizations(recommendations);\n    \n    const optimizationResult: PoolOptimizationResult = {\n      initialStats: stats,\n      recommendations,\n      results,\n      optimizedAt: new Date()\n    };\n\n    this.logger.info(`Pool optimization completed: ${results.length} optimizations applied`);\n    \n    return optimizationResult;\n  }\n\n  /**\n   * Get pool statistics\n   */\n  async getPoolStatistics(): Promise<{\n    totalSpawned: number;\n    totalReused: number;\n    reuseRate: number;\n    averagePoolSize: number;\n    cleanupRate: number;\n  }> {\n    // In production, these would be tracked metrics\n    return {\n      totalSpawned: 25,\n      totalReused: 75,\n      reuseRate: 0.75,\n      averagePoolSize: 8,\n      cleanupRate: 0.15\n    };\n  }\n\n  /**\n   * Determine priority based on task context\n   */\n  private determinePriorityForContext(taskContext: TaskContext): number {\n    // Base priority from task\n    let priority = taskContext.priority || 70;\n    \n    // Adjust based on complexity\n    if (taskContext.complexity === 'high') priority += 10;\n    if (taskContext.complexity === 'low') priority -= 5;\n    \n    // Ensure within valid range\n    return Math.max(50, Math.min(100, priority));\n  }\n\n  /**\n   * Shutdown pool manager and cleanup all agents\n   */\n  async shutdown(): Promise<void> {\n    this.logger.info('Shutting down Agent Pool Manager');\n    \n    // Release all active agents\n    const allAgents = this.registry.getAllActiveAgents();\n    const agentIds = allAgents.map(agent => agent.id);\n    \n    for (const agentId of agentIds) {\n      try {\n        await this.lifecycleManager.cleanupAgent(agentId);\n      } catch (error) {\n        this.logger.warn(`Failed to cleanup agent ${agentId} during shutdown: ${error instanceof Error ? error.message : String(error)}`);\n      }\n    }\n    \n    this.logger.info('Agent Pool Manager shutdown complete');\n  }\n}"],
      version: 3
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "40509c8c3335d6c0f2b79921ec4e258642fe67b5"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_1223uig3n8 = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_1223uig3n8();
/**
 * Agent Pool Manager - Optimizes agent lifecycle and reuse patterns
 * Implements Open/Closed principle for extensible pool strategies
 */
import { DEFAULT_POOL_MANAGER_CONFIG } from './types.js';
/**
 * Greedy reuse strategy - prioritizes any available agent with matching capabilities
 */
class GreedyReuseStrategy {
  registry;
  config;
  logger;
  constructor(registry, config, logger) {
    /* istanbul ignore next */
    cov_1223uig3n8().f[0]++;
    cov_1223uig3n8().s[0]++;
    this.registry = registry;
    /* istanbul ignore next */
    cov_1223uig3n8().s[1]++;
    this.config = config;
    /* istanbul ignore next */
    cov_1223uig3n8().s[2]++;
    this.logger = logger;
  }
  async findReusableAgents(requiredCapabilities, taskContext, maxAgents) {
    /* istanbul ignore next */
    cov_1223uig3n8().f[1]++;
    const capableAgents =
    /* istanbul ignore next */
    (cov_1223uig3n8().s[3]++, await this.registry.findCapableAgents(requiredCapabilities));
    const availableAgents =
    /* istanbul ignore next */
    (cov_1223uig3n8().s[4]++, capableAgents.filter(agent => {
      /* istanbul ignore next */
      cov_1223uig3n8().f[2]++;
      cov_1223uig3n8().s[5]++;
      return /* istanbul ignore next */(cov_1223uig3n8().b[0][0]++, agent.status === 'available') &&
      /* istanbul ignore next */
      (cov_1223uig3n8().b[0][1]++, agent.currentWorkload < 0.8);
    } // Don't reuse overloaded agents
    ));
    // Sort by workload (prefer less busy agents)
    /* istanbul ignore next */
    cov_1223uig3n8().s[6]++;
    availableAgents.sort((a, b) => {
      /* istanbul ignore next */
      cov_1223uig3n8().f[3]++;
      cov_1223uig3n8().s[7]++;
      return a.currentWorkload - b.currentWorkload;
    });
    const reusableAgents =
    /* istanbul ignore next */
    (cov_1223uig3n8().s[8]++, []);
    const agentsToReuse =
    /* istanbul ignore next */
    (cov_1223uig3n8().s[9]++, availableAgents.slice(0, maxAgents));
    /* istanbul ignore next */
    cov_1223uig3n8().s[10]++;
    for (const agent of agentsToReuse) {
      /* istanbul ignore next */
      cov_1223uig3n8().s[11]++;
      reusableAgents.push({
        id: agent.id,
        type: agent.profile.type,
        capabilities: agent.capabilities,
        source: 'reused',
        reusedAt: new Date(),
        assignedTaskId: taskContext.id
      });
    }
    /* istanbul ignore next */
    cov_1223uig3n8().s[12]++;
    this.logger.info(`Reusing ${reusableAgents.length} agents for task ${taskContext.id}`);
    /* istanbul ignore next */
    cov_1223uig3n8().s[13]++;
    return reusableAgents;
  }
}
/**
 * Pool optimizer for dynamic pool sizing and health management
 */
class DynamicPoolOptimizer {
  registry;
  config;
  logger;
  constructor(registry, config, logger) {
    /* istanbul ignore next */
    cov_1223uig3n8().f[4]++;
    cov_1223uig3n8().s[14]++;
    this.registry = registry;
    /* istanbul ignore next */
    cov_1223uig3n8().s[15]++;
    this.config = config;
    /* istanbul ignore next */
    cov_1223uig3n8().s[16]++;
    this.logger = logger;
  }
  async selectOptimalTypesForSpawning(requiredCapabilities, taskContext, count) {
    /* istanbul ignore next */
    cov_1223uig3n8().f[5]++;
    // Simple strategy: prefer agents that match the most capabilities
    // In production, this would use more sophisticated optimization
    const capabilityPriority =
    /* istanbul ignore next */
    (cov_1223uig3n8().s[17]++, this.analyzeCapabilityNeeds(requiredCapabilities));
    const optimalTypes =
    /* istanbul ignore next */
    (cov_1223uig3n8().s[18]++, []);
    // Map capabilities to agent types (simplified mapping)
    const capabilityToTypeMap =
    /* istanbul ignore next */
    (cov_1223uig3n8().s[19]++, {
      'design': ['design-architect'],
      'architecture': ['design-architect', 'system-architect'],
      'system-architecture': ['system-architect'],
      'implementation': ['developer'],
      'coding': ['developer', 'coder'],
      'testing': ['tester', 'developer'],
      'project-management': ['task-planner'],
      'task-breakdown': ['task-planner'],
      'planning': ['task-planner'],
      'analysis': ['analyst', 'researcher'],
      'research': ['researcher'],
      'documentation': ['requirements-engineer', 'steering-author']
    });
    // Select types based on required capabilities
    const typeScores =
    /* istanbul ignore next */
    (cov_1223uig3n8().s[20]++, {});
    /* istanbul ignore next */
    cov_1223uig3n8().s[21]++;
    for (const capability of requiredCapabilities) {
      const possibleTypes =
      /* istanbul ignore next */
      (cov_1223uig3n8().s[22]++,
      /* istanbul ignore next */
      (cov_1223uig3n8().b[1][0]++, capabilityToTypeMap[capability]) ||
      /* istanbul ignore next */
      (cov_1223uig3n8().b[1][1]++, ['general']));
      /* istanbul ignore next */
      cov_1223uig3n8().s[23]++;
      for (const type of possibleTypes) {
        /* istanbul ignore next */
        cov_1223uig3n8().s[24]++;
        typeScores[type] = (
        /* istanbul ignore next */
        (cov_1223uig3n8().b[2][0]++, typeScores[type]) ||
        /* istanbul ignore next */
        (cov_1223uig3n8().b[2][1]++, 0)) + 1;
      }
    }
    // Sort by score and select top types
    const sortedTypes =
    /* istanbul ignore next */
    (cov_1223uig3n8().s[25]++, Object.entries(typeScores).sort(([, a], [, b]) => {
      /* istanbul ignore next */
      cov_1223uig3n8().f[6]++;
      cov_1223uig3n8().s[26]++;
      return b - a;
    }).map(([type]) => {
      /* istanbul ignore next */
      cov_1223uig3n8().f[7]++;
      cov_1223uig3n8().s[27]++;
      return type;
    }));
    /* istanbul ignore next */
    cov_1223uig3n8().s[28]++;
    return sortedTypes.slice(0, count);
  }
  async shouldCleanupAgent(agentId, taskContext) {
    /* istanbul ignore next */
    cov_1223uig3n8().f[8]++;
    const agent =
    /* istanbul ignore next */
    (cov_1223uig3n8().s[29]++, await this.registry.getAgent(agentId));
    /* istanbul ignore next */
    cov_1223uig3n8().s[30]++;
    if (!agent) {
      /* istanbul ignore next */
      cov_1223uig3n8().b[3][0]++;
      cov_1223uig3n8().s[31]++;
      return true;
    } else
    /* istanbul ignore next */
    {
      cov_1223uig3n8().b[3][1]++;
    } // Clean up non-existent agents
    const stats =
    /* istanbul ignore next */
    (cov_1223uig3n8().s[32]++, this.registry.getRegistryStats());
    // Don't cleanup if we're below minimum pool size
    /* istanbul ignore next */
    cov_1223uig3n8().s[33]++;
    if (stats.totalAgents <= 3) {
      /* istanbul ignore next */
      cov_1223uig3n8().b[4][0]++;
      cov_1223uig3n8().s[34]++;
      return false;
    } else
    /* istanbul ignore next */
    {
      cov_1223uig3n8().b[4][1]++;
    }
    // Cleanup if agent has been idle and we have excess capacity
    const idleTime =
    /* istanbul ignore next */
    (cov_1223uig3n8().s[35]++, Date.now() - agent.lastActivity.getTime());
    const isIdle =
    /* istanbul ignore next */
    (cov_1223uig3n8().s[36]++, idleTime > 300000); // 5 minutes
    const hasExcessCapacity =
    /* istanbul ignore next */
    (cov_1223uig3n8().s[37]++, stats.availableAgents > stats.totalAgents * 0.6);
    /* istanbul ignore next */
    cov_1223uig3n8().s[38]++;
    return /* istanbul ignore next */(cov_1223uig3n8().b[5][0]++, isIdle) &&
    /* istanbul ignore next */
    (cov_1223uig3n8().b[5][1]++, hasExcessCapacity) &&
    /* istanbul ignore next */
    (cov_1223uig3n8().b[5][2]++, agent.currentWorkload < this.config.cleanupThreshold);
  }
  async analyzePoolHealth(stats) {
    /* istanbul ignore next */
    cov_1223uig3n8().f[9]++;
    const recommendations =
    /* istanbul ignore next */
    (cov_1223uig3n8().s[39]++, []);
    // Check if we need more agents
    /* istanbul ignore next */
    cov_1223uig3n8().s[40]++;
    if (stats.availableAgents < stats.totalAgents * 0.3) {
      /* istanbul ignore next */
      cov_1223uig3n8().b[6][0]++;
      cov_1223uig3n8().s[41]++;
      recommendations.push({
        type: 'spawn',
        reason: 'Low availability ratio - need more agents',
        expectedImpact: 0.3,
        priority: 'high'
      });
    } else
    /* istanbul ignore next */
    {
      cov_1223uig3n8().b[6][1]++;
    }
    // Check if we have too many idle agents
    cov_1223uig3n8().s[42]++;
    if (
    /* istanbul ignore next */
    (cov_1223uig3n8().b[8][0]++, stats.averageWorkload < 0.2) &&
    /* istanbul ignore next */
    (cov_1223uig3n8().b[8][1]++, stats.totalAgents > 5)) {
      /* istanbul ignore next */
      cov_1223uig3n8().b[7][0]++;
      cov_1223uig3n8().s[43]++;
      recommendations.push({
        type: 'cleanup',
        reason: 'High number of idle agents - cleanup needed',
        expectedImpact: 0.2,
        priority: 'medium'
      });
    } else
    /* istanbul ignore next */
    {
      cov_1223uig3n8().b[7][1]++;
    }
    // Check workload balance
    const agents =
    /* istanbul ignore next */
    (cov_1223uig3n8().s[44]++, this.registry.getAllActiveAgents());
    const workloadVariance =
    /* istanbul ignore next */
    (cov_1223uig3n8().s[45]++, this.calculateWorkloadVariance(agents));
    /* istanbul ignore next */
    cov_1223uig3n8().s[46]++;
    if (workloadVariance > 0.3) {
      /* istanbul ignore next */
      cov_1223uig3n8().b[9][0]++;
      cov_1223uig3n8().s[47]++;
      recommendations.push({
        type: 'rebalance',
        reason: 'High workload variance - rebalancing needed',
        expectedImpact: 0.25,
        priority: 'medium'
      });
    } else
    /* istanbul ignore next */
    {
      cov_1223uig3n8().b[9][1]++;
    }
    cov_1223uig3n8().s[48]++;
    return recommendations;
  }
  async applyOptimizations(recommendations) {
    /* istanbul ignore next */
    cov_1223uig3n8().f[10]++;
    const results =
    /* istanbul ignore next */
    (cov_1223uig3n8().s[49]++, []);
    /* istanbul ignore next */
    cov_1223uig3n8().s[50]++;
    for (const recommendation of recommendations) {
      /* istanbul ignore next */
      cov_1223uig3n8().s[51]++;
      try {
        let applied =
        /* istanbul ignore next */
        (cov_1223uig3n8().s[52]++, false);
        /* istanbul ignore next */
        cov_1223uig3n8().s[53]++;
        switch (recommendation.type) {
          case 'cleanup':
            /* istanbul ignore next */
            cov_1223uig3n8().b[10][0]++;
            cov_1223uig3n8().s[54]++;
            applied = await this.performCleanup();
            /* istanbul ignore next */
            cov_1223uig3n8().s[55]++;
            break;
          case 'rebalance':
            /* istanbul ignore next */
            cov_1223uig3n8().b[10][1]++;
            cov_1223uig3n8().s[56]++;
            applied = await this.performRebalance();
            /* istanbul ignore next */
            cov_1223uig3n8().s[57]++;
            break;
          default:
            /* istanbul ignore next */
            cov_1223uig3n8().b[10][2]++;
            cov_1223uig3n8().s[58]++;
            this.logger.warn(`Unsupported optimization type: ${recommendation.type}`);
        }
        /* istanbul ignore next */
        cov_1223uig3n8().s[59]++;
        results.push({
          recommendation,
          applied,
          actualImpact: applied ?
          /* istanbul ignore next */
          (cov_1223uig3n8().b[11][0]++, recommendation.expectedImpact) :
          /* istanbul ignore next */
          (cov_1223uig3n8().b[11][1]++, 0)
        });
      } catch (error) {
        /* istanbul ignore next */
        cov_1223uig3n8().s[60]++;
        results.push({
          recommendation,
          applied: false,
          error: error instanceof Error ?
          /* istanbul ignore next */
          (cov_1223uig3n8().b[12][0]++, error.message) :
          /* istanbul ignore next */
          (cov_1223uig3n8().b[12][1]++, String(error))
        });
      }
    }
    /* istanbul ignore next */
    cov_1223uig3n8().s[61]++;
    return results;
  }
  analyzeCapabilityNeeds(capabilities) {
    /* istanbul ignore next */
    cov_1223uig3n8().f[11]++;
    const priority =
    /* istanbul ignore next */
    (cov_1223uig3n8().s[62]++, {});
    /* istanbul ignore next */
    cov_1223uig3n8().s[63]++;
    capabilities.forEach((cap, index) => {
      /* istanbul ignore next */
      cov_1223uig3n8().f[12]++;
      cov_1223uig3n8().s[64]++;
      priority[cap] = capabilities.length - index; // Higher priority for earlier capabilities
    });
    /* istanbul ignore next */
    cov_1223uig3n8().s[65]++;
    return priority;
  }
  calculateWorkloadVariance(agents) {
    /* istanbul ignore next */
    cov_1223uig3n8().f[13]++;
    cov_1223uig3n8().s[66]++;
    if (agents.length === 0) {
      /* istanbul ignore next */
      cov_1223uig3n8().b[13][0]++;
      cov_1223uig3n8().s[67]++;
      return 0;
    } else
    /* istanbul ignore next */
    {
      cov_1223uig3n8().b[13][1]++;
    }
    const workloads =
    /* istanbul ignore next */
    (cov_1223uig3n8().s[68]++, agents.map(a => {
      /* istanbul ignore next */
      cov_1223uig3n8().f[14]++;
      cov_1223uig3n8().s[69]++;
      return a.currentWorkload;
    }));
    const mean =
    /* istanbul ignore next */
    (cov_1223uig3n8().s[70]++, workloads.reduce((sum, w) => {
      /* istanbul ignore next */
      cov_1223uig3n8().f[15]++;
      cov_1223uig3n8().s[71]++;
      return sum + w;
    }, 0) / workloads.length);
    const variance =
    /* istanbul ignore next */
    (cov_1223uig3n8().s[72]++, workloads.reduce((sum, w) => {
      /* istanbul ignore next */
      cov_1223uig3n8().f[16]++;
      cov_1223uig3n8().s[73]++;
      return sum + Math.pow(w - mean, 2);
    }, 0) / workloads.length);
    /* istanbul ignore next */
    cov_1223uig3n8().s[74]++;
    return Math.sqrt(variance);
  }
  async performCleanup() {
    /* istanbul ignore next */
    cov_1223uig3n8().f[17]++;
    const staleAgents =
    /* istanbul ignore next */
    (cov_1223uig3n8().s[75]++, await this.registry.cleanupStaleAgents());
    /* istanbul ignore next */
    cov_1223uig3n8().s[76]++;
    return staleAgents.length > 0;
  }
  async performRebalance() {
    /* istanbul ignore next */
    cov_1223uig3n8().f[18]++;
    cov_1223uig3n8().s[77]++;
    // Simple rebalancing - in production this would redistribute tasks
    this.logger.info('Performing workload rebalancing');
    /* istanbul ignore next */
    cov_1223uig3n8().s[78]++;
    return true;
  }
}
/**
 * Agent lifecycle manager for proper agent creation and cleanup
 */
class AgentLifecycleManager {
  agentManager;
  registry;
  config;
  logger;
  constructor(agentManager, registry, config, logger) {
    /* istanbul ignore next */
    cov_1223uig3n8().f[19]++;
    cov_1223uig3n8().s[79]++;
    this.agentManager = agentManager;
    /* istanbul ignore next */
    cov_1223uig3n8().s[80]++;
    this.registry = registry;
    /* istanbul ignore next */
    cov_1223uig3n8().s[81]++;
    this.config = config;
    /* istanbul ignore next */
    cov_1223uig3n8().s[82]++;
    this.logger = logger;
  }
  async cleanupAgent(agentId) {
    /* istanbul ignore next */
    cov_1223uig3n8().f[20]++;
    cov_1223uig3n8().s[83]++;
    try {
      /* istanbul ignore next */
      cov_1223uig3n8().s[84]++;
      await this.agentManager.stopAgent(agentId);
      /* istanbul ignore next */
      cov_1223uig3n8().s[85]++;
      await this.registry.unregisterAgent(agentId);
      /* istanbul ignore next */
      cov_1223uig3n8().s[86]++;
      this.logger.info(`Cleaned up agent: ${agentId}`);
    } catch (error) {
      /* istanbul ignore next */
      cov_1223uig3n8().s[87]++;
      this.logger.error(`Failed to cleanup agent ${agentId}: ${error instanceof Error ?
      /* istanbul ignore next */
      (cov_1223uig3n8().b[14][0]++, error.message) :
      /* istanbul ignore next */
      (cov_1223uig3n8().b[14][1]++, String(error))}`);
    }
  }
  async maintainAgent(agentId) {
    /* istanbul ignore next */
    cov_1223uig3n8().f[21]++;
    cov_1223uig3n8().s[88]++;
    try {
      /* istanbul ignore next */
      cov_1223uig3n8().s[89]++;
      // Basic maintenance - update last activity
      await this.registry.updateAgentStatus(agentId, 'available', {
        maintainedAt: new Date()
      });
    } catch (error) {
      /* istanbul ignore next */
      cov_1223uig3n8().s[90]++;
      this.logger.warn(`Failed to maintain agent ${agentId}: ${error instanceof Error ?
      /* istanbul ignore next */
      (cov_1223uig3n8().b[15][0]++, error.message) :
      /* istanbul ignore next */
      (cov_1223uig3n8().b[15][1]++, String(error))}`);
    }
  }
}
/**
 * Main Agent Pool Manager class
 */
export class AgentPoolManager {
  agentManager;
  registry;
  logger;
  reuseStrategy;
  lifecycleManager;
  poolOptimizer;
  config;
  constructor(agentManager, registry, logger, config =
  /* istanbul ignore next */
  (cov_1223uig3n8().b[16][0]++, {})) {
    /* istanbul ignore next */
    cov_1223uig3n8().f[22]++;
    cov_1223uig3n8().s[91]++;
    this.agentManager = agentManager;
    /* istanbul ignore next */
    cov_1223uig3n8().s[92]++;
    this.registry = registry;
    /* istanbul ignore next */
    cov_1223uig3n8().s[93]++;
    this.logger = logger;
    /* istanbul ignore next */
    cov_1223uig3n8().s[94]++;
    this.config = {
      ...DEFAULT_POOL_MANAGER_CONFIG,
      ...config
    };
    /* istanbul ignore next */
    cov_1223uig3n8().s[95]++;
    this.reuseStrategy = new GreedyReuseStrategy(this.registry, this.config, this.logger);
    /* istanbul ignore next */
    cov_1223uig3n8().s[96]++;
    this.lifecycleManager = new AgentLifecycleManager(this.agentManager, this.registry, this.config, this.logger);
    /* istanbul ignore next */
    cov_1223uig3n8().s[97]++;
    this.poolOptimizer = new DynamicPoolOptimizer(this.registry, this.config, this.logger);
    /* istanbul ignore next */
    cov_1223uig3n8().s[98]++;
    this.logger.info('Agent Pool Manager initialized');
  }
  /**
   * Primary agent acquisition method - reuse first, spawn if needed
   */
  async acquireAgents(requiredCapabilities, taskContext, maxAgents =
  /* istanbul ignore next */
  (cov_1223uig3n8().b[17][0]++, 2)) {
    /* istanbul ignore next */
    cov_1223uig3n8().f[23]++;
    cov_1223uig3n8().s[99]++;
    this.logger.info(`Acquiring agents for task ${taskContext.id}, capabilities: [${requiredCapabilities.join(', ')}]`);
    const acquiredAgents =
    /* istanbul ignore next */
    (cov_1223uig3n8().s[100]++, []);
    /* istanbul ignore next */
    cov_1223uig3n8().s[101]++;
    try {
      // Step 1: Try to reuse existing agents
      const reusableAgents =
      /* istanbul ignore next */
      (cov_1223uig3n8().s[102]++, await this.reuseStrategy.findReusableAgents(requiredCapabilities, taskContext, maxAgents));
      /* istanbul ignore next */
      cov_1223uig3n8().s[103]++;
      acquiredAgents.push(...reusableAgents);
      // Step 2: Spawn additional agents if needed
      const needed =
      /* istanbul ignore next */
      (cov_1223uig3n8().s[104]++, maxAgents - reusableAgents.length);
      /* istanbul ignore next */
      cov_1223uig3n8().s[105]++;
      if (needed > 0) {
        /* istanbul ignore next */
        cov_1223uig3n8().b[18][0]++;
        const newAgents =
        /* istanbul ignore next */
        (cov_1223uig3n8().s[106]++, await this.spawnOptimalAgents(requiredCapabilities, taskContext, needed));
        /* istanbul ignore next */
        cov_1223uig3n8().s[107]++;
        acquiredAgents.push(...newAgents);
      } else
      /* istanbul ignore next */
      {
        cov_1223uig3n8().b[18][1]++;
      }
      // Step 3: Mark agents as assigned
      cov_1223uig3n8().s[108]++;
      await this.assignAgentsToTask(acquiredAgents, taskContext);
      /* istanbul ignore next */
      cov_1223uig3n8().s[109]++;
      this.logger.info(`Acquired ${acquiredAgents.length} agents for task ${taskContext.id} (${reusableAgents.length} reused, ${acquiredAgents.length - reusableAgents.length} spawned)`);
      /* istanbul ignore next */
      cov_1223uig3n8().s[110]++;
      return acquiredAgents;
    } catch (error) {
      /* istanbul ignore next */
      cov_1223uig3n8().s[111]++;
      this.logger.error(`Failed to acquire agents for task ${taskContext.id}: ${error instanceof Error ?
      /* istanbul ignore next */
      (cov_1223uig3n8().b[19][0]++, error.message) :
      /* istanbul ignore next */
      (cov_1223uig3n8().b[19][1]++, String(error))}`);
      /* istanbul ignore next */
      cov_1223uig3n8().s[112]++;
      throw error;
    }
  }
  /**
   * Intelligent agent spawning when reuse is not possible
   */
  async spawnOptimalAgents(requiredCapabilities, taskContext, count) {
    /* istanbul ignore next */
    cov_1223uig3n8().f[24]++;
    const spawnedAgents =
    /* istanbul ignore next */
    (cov_1223uig3n8().s[113]++, []);
    /* istanbul ignore next */
    cov_1223uig3n8().s[114]++;
    try {
      // Use pool optimizer to determine optimal agent types
      const optimalTypes =
      /* istanbul ignore next */
      (cov_1223uig3n8().s[115]++, await this.poolOptimizer.selectOptimalTypesForSpawning(requiredCapabilities, taskContext, count));
      /* istanbul ignore next */
      cov_1223uig3n8().s[116]++;
      for (const agentType of optimalTypes) {
        /* istanbul ignore next */
        cov_1223uig3n8().s[117]++;
        try {
          const profile =
          /* istanbul ignore next */
          (cov_1223uig3n8().s[118]++, this.createOptimalProfile(agentType, requiredCapabilities, taskContext));
          const agentId =
          /* istanbul ignore next */
          (cov_1223uig3n8().s[119]++, await this.agentManager.createAgent(agentType, profile));
          /* istanbul ignore next */
          cov_1223uig3n8().s[120]++;
          await this.agentManager.startAgent(agentId);
          const acquiredAgent =
          /* istanbul ignore next */
          (cov_1223uig3n8().s[121]++, {
            id: agentId,
            type: agentType,
            capabilities:
            /* istanbul ignore next */
            (cov_1223uig3n8().b[20][0]++, profile.capabilities) ||
            /* istanbul ignore next */
            (cov_1223uig3n8().b[20][1]++, []),
            source: 'spawned',
            spawnedAt: new Date(),
            assignedTaskId: taskContext.id
          });
          /* istanbul ignore next */
          cov_1223uig3n8().s[122]++;
          spawnedAgents.push(acquiredAgent);
          /* istanbul ignore next */
          cov_1223uig3n8().s[123]++;
          await this.registry.registerAgent(agentId, profile);
          /* istanbul ignore next */
          cov_1223uig3n8().s[124]++;
          this.logger.info(`Spawned new agent: ${agentId} (${agentType})`);
        } catch (error) {
          /* istanbul ignore next */
          cov_1223uig3n8().s[125]++;
          this.logger.warn(`Failed to spawn ${agentType}: ${error instanceof Error ?
          /* istanbul ignore next */
          (cov_1223uig3n8().b[21][0]++, error.message) :
          /* istanbul ignore next */
          (cov_1223uig3n8().b[21][1]++, String(error))}`);
        }
      }
      /* istanbul ignore next */
      cov_1223uig3n8().s[126]++;
      return spawnedAgents;
    } catch (error) {
      /* istanbul ignore next */
      cov_1223uig3n8().s[127]++;
      this.logger.error(`Failed to spawn agents: ${error instanceof Error ?
      /* istanbul ignore next */
      (cov_1223uig3n8().b[22][0]++, error.message) :
      /* istanbul ignore next */
      (cov_1223uig3n8().b[22][1]++, String(error))}`);
      /* istanbul ignore next */
      cov_1223uig3n8().s[128]++;
      return spawnedAgents; // Return whatever we managed to spawn
    }
  }
  /**
   * Create optimal agent profile based on requirements
   */
  createOptimalProfile(agentType, requiredCapabilities, taskContext) {
    /* istanbul ignore next */
    cov_1223uig3n8().f[25]++;
    cov_1223uig3n8().s[129]++;
    return {
      id: `${agentType}-${taskContext.id}-${Date.now()}`,
      name: `${agentType} for ${
      /* istanbul ignore next */
      (cov_1223uig3n8().b[23][0]++, taskContext.featureName) ||
      /* istanbul ignore next */
      (cov_1223uig3n8().b[23][1]++, taskContext.id)}`,
      type: agentType,
      capabilities: requiredCapabilities,
      maxConcurrentTasks: 1,
      priority: this.determinePriorityForContext(taskContext),
      metadata: {
        createdFor: taskContext.id,
        requiredCapabilities
      }
    };
  }
  /**
   * Assign acquired agents to the specific task
   */
  async assignAgentsToTask(agents, taskContext) {
    /* istanbul ignore next */
    cov_1223uig3n8().f[26]++;
    cov_1223uig3n8().s[130]++;
    for (const agent of agents) {
      /* istanbul ignore next */
      cov_1223uig3n8().s[131]++;
      try {
        /* istanbul ignore next */
        cov_1223uig3n8().s[132]++;
        await this.registry.updateAgentStatus(agent.id, 'busy', {
          assignedTask: taskContext.id,
          assignedAt: new Date()
        });
      } catch (error) {
        /* istanbul ignore next */
        cov_1223uig3n8().s[133]++;
        this.logger.warn(`Failed to assign agent ${agent.id} to task ${taskContext.id}: ${error instanceof Error ?
        /* istanbul ignore next */
        (cov_1223uig3n8().b[24][0]++, error.message) :
        /* istanbul ignore next */
        (cov_1223uig3n8().b[24][1]++, String(error))}`);
      }
    }
  }
  /**
   * Release agents back to pool with intelligent cleanup decisions
   */
  async releaseAgents(agentIds, taskContext) {
    /* istanbul ignore next */
    cov_1223uig3n8().f[27]++;
    cov_1223uig3n8().s[134]++;
    this.logger.info(`Releasing ${agentIds.length} agents from task ${taskContext.id}`);
    /* istanbul ignore next */
    cov_1223uig3n8().s[135]++;
    for (const agentId of agentIds) {
      /* istanbul ignore next */
      cov_1223uig3n8().s[136]++;
      try {
        /* istanbul ignore next */
        cov_1223uig3n8().s[137]++;
        // Update agent status to available
        await this.registry.updateAgentStatus(agentId, 'available', {
          lastTask: taskContext.id,
          releasedAt: new Date()
        });
        // Decide whether to keep or cleanup based on pool optimization
        const shouldCleanup =
        /* istanbul ignore next */
        (cov_1223uig3n8().s[138]++, await this.poolOptimizer.shouldCleanupAgent(agentId, taskContext));
        /* istanbul ignore next */
        cov_1223uig3n8().s[139]++;
        if (shouldCleanup) {
          /* istanbul ignore next */
          cov_1223uig3n8().b[25][0]++;
          cov_1223uig3n8().s[140]++;
          await this.lifecycleManager.cleanupAgent(agentId);
          /* istanbul ignore next */
          cov_1223uig3n8().s[141]++;
          this.logger.info(`Cleaned up agent ${agentId} after task completion`);
        } else {
          /* istanbul ignore next */
          cov_1223uig3n8().b[25][1]++;
          cov_1223uig3n8().s[142]++;
          // Keep agent in pool for reuse
          await this.lifecycleManager.maintainAgent(agentId);
        }
      } catch (error) {
        /* istanbul ignore next */
        cov_1223uig3n8().s[143]++;
        this.logger.warn(`Failed to release agent ${agentId}: ${error instanceof Error ?
        /* istanbul ignore next */
        (cov_1223uig3n8().b[26][0]++, error.message) :
        /* istanbul ignore next */
        (cov_1223uig3n8().b[26][1]++, String(error))}`);
      }
    }
  }
  /**
   * Pool health monitoring and optimization
   */
  async optimizePool() {
    /* istanbul ignore next */
    cov_1223uig3n8().f[28]++;
    cov_1223uig3n8().s[144]++;
    this.logger.info('Starting pool optimization');
    const stats =
    /* istanbul ignore next */
    (cov_1223uig3n8().s[145]++, this.registry.getRegistryStats());
    // Identify optimization opportunities
    const recommendations =
    /* istanbul ignore next */
    (cov_1223uig3n8().s[146]++, await this.poolOptimizer.analyzePoolHealth(stats));
    // Apply optimizations
    const results =
    /* istanbul ignore next */
    (cov_1223uig3n8().s[147]++, await this.poolOptimizer.applyOptimizations(recommendations));
    const optimizationResult =
    /* istanbul ignore next */
    (cov_1223uig3n8().s[148]++, {
      initialStats: stats,
      recommendations,
      results,
      optimizedAt: new Date()
    });
    /* istanbul ignore next */
    cov_1223uig3n8().s[149]++;
    this.logger.info(`Pool optimization completed: ${results.length} optimizations applied`);
    /* istanbul ignore next */
    cov_1223uig3n8().s[150]++;
    return optimizationResult;
  }
  /**
   * Get pool statistics
   */
  async getPoolStatistics() {
    /* istanbul ignore next */
    cov_1223uig3n8().f[29]++;
    cov_1223uig3n8().s[151]++;
    // In production, these would be tracked metrics
    return {
      totalSpawned: 25,
      totalReused: 75,
      reuseRate: 0.75,
      averagePoolSize: 8,
      cleanupRate: 0.15
    };
  }
  /**
   * Determine priority based on task context
   */
  determinePriorityForContext(taskContext) {
    /* istanbul ignore next */
    cov_1223uig3n8().f[30]++;
    // Base priority from task
    let priority =
    /* istanbul ignore next */
    (cov_1223uig3n8().s[152]++,
    /* istanbul ignore next */
    (cov_1223uig3n8().b[27][0]++, taskContext.priority) ||
    /* istanbul ignore next */
    (cov_1223uig3n8().b[27][1]++, 70));
    // Adjust based on complexity
    /* istanbul ignore next */
    cov_1223uig3n8().s[153]++;
    if (taskContext.complexity === 'high') {
      /* istanbul ignore next */
      cov_1223uig3n8().b[28][0]++;
      cov_1223uig3n8().s[154]++;
      priority += 10;
    } else
    /* istanbul ignore next */
    {
      cov_1223uig3n8().b[28][1]++;
    }
    cov_1223uig3n8().s[155]++;
    if (taskContext.complexity === 'low') {
      /* istanbul ignore next */
      cov_1223uig3n8().b[29][0]++;
      cov_1223uig3n8().s[156]++;
      priority -= 5;
    } else
    /* istanbul ignore next */
    {
      cov_1223uig3n8().b[29][1]++;
    }
    // Ensure within valid range
    cov_1223uig3n8().s[157]++;
    return Math.max(50, Math.min(100, priority));
  }
  /**
   * Shutdown pool manager and cleanup all agents
   */
  async shutdown() {
    /* istanbul ignore next */
    cov_1223uig3n8().f[31]++;
    cov_1223uig3n8().s[158]++;
    this.logger.info('Shutting down Agent Pool Manager');
    // Release all active agents
    const allAgents =
    /* istanbul ignore next */
    (cov_1223uig3n8().s[159]++, this.registry.getAllActiveAgents());
    const agentIds =
    /* istanbul ignore next */
    (cov_1223uig3n8().s[160]++, allAgents.map(agent => {
      /* istanbul ignore next */
      cov_1223uig3n8().f[32]++;
      cov_1223uig3n8().s[161]++;
      return agent.id;
    }));
    /* istanbul ignore next */
    cov_1223uig3n8().s[162]++;
    for (const agentId of agentIds) {
      /* istanbul ignore next */
      cov_1223uig3n8().s[163]++;
      try {
        /* istanbul ignore next */
        cov_1223uig3n8().s[164]++;
        await this.lifecycleManager.cleanupAgent(agentId);
      } catch (error) {
        /* istanbul ignore next */
        cov_1223uig3n8().s[165]++;
        this.logger.warn(`Failed to cleanup agent ${agentId} during shutdown: ${error instanceof Error ?
        /* istanbul ignore next */
        (cov_1223uig3n8().b[30][0]++, error.message) :
        /* istanbul ignore next */
        (cov_1223uig3n8().b[30][1]++, String(error))}`);
      }
    }
    /* istanbul ignore next */
    cov_1223uig3n8().s[166]++;
    this.logger.info('Agent Pool Manager shutdown complete');
  }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,