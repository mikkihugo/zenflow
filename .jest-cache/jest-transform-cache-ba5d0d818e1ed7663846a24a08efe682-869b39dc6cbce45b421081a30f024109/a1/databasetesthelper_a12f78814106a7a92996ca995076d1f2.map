{"file":"/home/mhugo/code/claude-code-flow/src/__tests__/helpers/database-test-helper.ts","mappings":"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","names":[],"sources":["/home/mhugo/code/claude-code-flow/src/__tests__/helpers/database-test-helper.ts"],"sourcesContent":["/**\n * Database Test Helper - Database Testing Utilities\n * \n * Comprehensive database testing support for integration tests\n */\n\nimport { promises as fs } from 'fs';\nimport { join } from 'path';\nimport { tmpdir } from 'os';\n\nexport interface DatabaseConnection {\n  query(sql: string, params?: any[]): Promise<any>;\n  execute(sql: string, params?: any[]): Promise<void>;\n  transaction<T>(callback: (tx: DatabaseConnection) => Promise<T>): Promise<T>;\n  close(): Promise<void>;\n}\n\nexport interface DatabaseTestHelper {\n  setup(): Promise<void>;\n  cleanup(): Promise<void>;\n  seed(data: any[]): Promise<void>;\n  reset(): Promise<void>;\n  getConnection(): DatabaseConnection;\n  createSchema(schema: string): Promise<void>;\n  insertTestData(table: string, data: any[]): Promise<void>;\n  truncateTable(table: string): Promise<void>;\n  runMigrations(migrations: string[]): Promise<void>;\n}\n\nexport class SQLiteDatabaseTestHelper implements DatabaseTestHelper {\n  private dbPath: string;\n  private db: any = null;\n\n  constructor(dbPath?: string) {\n    this.dbPath = dbPath || join(tmpdir(), `test-${Date.now()}.db`);\n  }\n\n  async setup(): Promise<void> {\n    try {\n      // Try to import sqlite3\n      const { default: sqlite3 } = await import('sqlite3');\n      \n      this.db = new sqlite3.Database(this.dbPath);\n      \n      // Enable foreign keys\n      await this.execute('PRAGMA foreign_keys = ON');\n      \n      // Create basic test schema\n      await this.createDefaultSchema();\n    } catch (error) {\n      console.warn('SQLite not available, using in-memory fallback');\n      this.db = new MemoryDatabase();\n    }\n  }\n\n  async cleanup(): Promise<void> {\n    if (this.db) {\n      await this.db.close?.();\n      this.db = null;\n    }\n    \n    try {\n      await fs.unlink(this.dbPath);\n    } catch (error) {\n      // File might not exist\n    }\n  }\n\n  async seed(data: any[]): Promise<void> {\n    const tableName = 'test_data';\n    await this.insertTestData(tableName, data);\n  }\n\n  async reset(): Promise<void> {\n    if (!this.db) return;\n    \n    // Get all table names\n    const tables = await this.query(\n      \"SELECT name FROM sqlite_master WHERE type='table' AND name NOT LIKE 'sqlite_%'\"\n    );\n    \n    // Truncate all tables\n    for (const table of tables) {\n      await this.truncateTable(table.name);\n    }\n  }\n\n  getConnection(): DatabaseConnection {\n    const self = this;\n    \n    return {\n      async query(sql: string, params: any[] = []): Promise<any> {\n        return self.query(sql, params);\n      },\n      \n      async execute(sql: string, params: any[] = []): Promise<void> {\n        return self.execute(sql, params);\n      },\n      \n      async transaction<T>(callback: (tx: DatabaseConnection) => Promise<T>): Promise<T> {\n        await self.execute('BEGIN TRANSACTION');\n        try {\n          const result = await callback(this);\n          await self.execute('COMMIT');\n          return result;\n        } catch (error) {\n          await self.execute('ROLLBACK');\n          throw error;\n        }\n      },\n      \n      async close(): Promise<void> {\n        return self.cleanup();\n      }\n    };\n  }\n\n  async createSchema(schema: string): Promise<void> {\n    const statements = schema.split(';').filter(stmt => stmt.trim());\n    \n    for (const statement of statements) {\n      if (statement.trim()) {\n        await this.execute(statement);\n      }\n    }\n  }\n\n  async insertTestData(table: string, data: any[]): Promise<void> {\n    if (data.length === 0) return;\n    \n    const columns = Object.keys(data[0]);\n    const placeholders = columns.map(() => '?').join(', ');\n    const sql = `INSERT INTO ${table} (${columns.join(', ')}) VALUES (${placeholders})`;\n    \n    for (const row of data) {\n      const values = columns.map(col => row[col]);\n      await this.execute(sql, values);\n    }\n  }\n\n  async truncateTable(table: string): Promise<void> {\n    await this.execute(`DELETE FROM ${table}`);\n    await this.execute(`DELETE FROM sqlite_sequence WHERE name='${table}'`);\n  }\n\n  async runMigrations(migrations: string[]): Promise<void> {\n    // Create migrations table if it doesn't exist\n    await this.execute(`\n      CREATE TABLE IF NOT EXISTS migrations (\n        id INTEGER PRIMARY KEY AUTOINCREMENT,\n        name TEXT UNIQUE NOT NULL,\n        executed_at DATETIME DEFAULT CURRENT_TIMESTAMP\n      )\n    `);\n    \n    for (const [index, migration] of migrations.entries()) {\n      const migrationName = `migration_${index.toString().padStart(3, '0')}`;\n      \n      // Check if migration already executed\n      const existing = await this.query(\n        'SELECT id FROM migrations WHERE name = ?',\n        [migrationName]\n      );\n      \n      if (existing.length === 0) {\n        await this.execute(migration);\n        await this.execute(\n          'INSERT INTO migrations (name) VALUES (?)',\n          [migrationName]\n        );\n      }\n    }\n  }\n\n  private async query(sql: string, params: any[] = []): Promise<any[]> {\n    if (!this.db) throw new Error('Database not initialized');\n    \n    return new Promise((resolve, reject) => {\n      this.db.all(sql, params, (err: any, rows: any[]) => {\n        if (err) reject(err);\n        else resolve(rows || []);\n      });\n    });\n  }\n\n  private async execute(sql: string, params: any[] = []): Promise<void> {\n    if (!this.db) throw new Error('Database not initialized');\n    \n    return new Promise((resolve, reject) => {\n      this.db.run(sql, params, (err: any) => {\n        if (err) reject(err);\n        else resolve();\n      });\n    });\n  }\n\n  private async createDefaultSchema(): Promise<void> {\n    const schema = `\n      CREATE TABLE IF NOT EXISTS test_data (\n        id INTEGER PRIMARY KEY AUTOINCREMENT,\n        key TEXT UNIQUE NOT NULL,\n        value TEXT,\n        metadata TEXT,\n        created_at DATETIME DEFAULT CURRENT_TIMESTAMP,\n        updated_at DATETIME DEFAULT CURRENT_TIMESTAMP\n      );\n      \n      CREATE TABLE IF NOT EXISTS test_users (\n        id INTEGER PRIMARY KEY AUTOINCREMENT,\n        name TEXT NOT NULL,\n        email TEXT UNIQUE NOT NULL,\n        created_at DATETIME DEFAULT CURRENT_TIMESTAMP\n      );\n      \n      CREATE TABLE IF NOT EXISTS test_projects (\n        id INTEGER PRIMARY KEY AUTOINCREMENT,\n        name TEXT NOT NULL,\n        type TEXT NOT NULL,\n        owner_id INTEGER,\n        created_at DATETIME DEFAULT CURRENT_TIMESTAMP,\n        FOREIGN KEY (owner_id) REFERENCES test_users(id)\n      );\n      \n      CREATE INDEX IF NOT EXISTS idx_test_data_key ON test_data(key);\n      CREATE INDEX IF NOT EXISTS idx_test_users_email ON test_users(email);\n      CREATE INDEX IF NOT EXISTS idx_test_projects_owner ON test_projects(owner_id);\n    `;\n    \n    await this.createSchema(schema);\n  }\n}\n\nexport class MemoryDatabaseTestHelper implements DatabaseTestHelper {\n  private storage = new Map<string, Map<string, any>>();\n  private sequences = new Map<string, number>();\n\n  async setup(): Promise<void> {\n    this.storage.clear();\n    this.sequences.clear();\n    this.createDefaultTables();\n  }\n\n  async cleanup(): Promise<void> {\n    this.storage.clear();\n    this.sequences.clear();\n  }\n\n  async seed(data: any[]): Promise<void> {\n    await this.insertTestData('test_data', data);\n  }\n\n  async reset(): Promise<void> {\n    this.storage.clear();\n    this.sequences.clear();\n    this.createDefaultTables();\n  }\n\n  getConnection(): DatabaseConnection {\n    const self = this;\n    \n    return {\n      async query(sql: string, params: any[] = []): Promise<any> {\n        return self.query(sql, params);\n      },\n      \n      async execute(sql: string, params: any[] = []): Promise<void> {\n        return self.execute(sql, params);\n      },\n      \n      async transaction<T>(callback: (tx: DatabaseConnection) => Promise<T>): Promise<T> {\n        // Memory database doesn't need transactions for testing\n        return callback(this);\n      },\n      \n      async close(): Promise<void> {\n        return self.cleanup();\n      }\n    };\n  }\n\n  async createSchema(schema: string): Promise<void> {\n    // Parse basic CREATE TABLE statements\n    const tableMatches = schema.match(/CREATE TABLE(?:\\s+IF NOT EXISTS)?\\s+(\\w+)/gi);\n    if (tableMatches) {\n      for (const match of tableMatches) {\n        const tableName = match.replace(/CREATE TABLE(?:\\s+IF NOT EXISTS)?\\s+/i, '');\n        if (!this.storage.has(tableName)) {\n          this.storage.set(tableName, new Map());\n          this.sequences.set(tableName, 0);\n        }\n      }\n    }\n  }\n\n  async insertTestData(table: string, data: any[]): Promise<void> {\n    if (!this.storage.has(table)) {\n      this.storage.set(table, new Map());\n      this.sequences.set(table, 0);\n    }\n    \n    const tableData = this.storage.get(table)!;\n    \n    for (const row of data) {\n      const id = this.getNextId(table);\n      const record = { id, ...row, created_at: new Date().toISOString() };\n      tableData.set(id.toString(), record);\n    }\n  }\n\n  async truncateTable(table: string): Promise<void> {\n    if (this.storage.has(table)) {\n      this.storage.get(table)!.clear();\n      this.sequences.set(table, 0);\n    }\n  }\n\n  async runMigrations(migrations: string[]): Promise<void> {\n    // Simple migration runner for memory database\n    for (const migration of migrations) {\n      await this.execute(migration);\n    }\n  }\n\n  private async query(sql: string, params: any[] = []): Promise<any[]> {\n    // Simple SQL parser for memory database\n    const upperSql = sql.toUpperCase().trim();\n    \n    if (upperSql.startsWith('SELECT')) {\n      return this.handleSelect(sql, params);\n    }\n    \n    return [];\n  }\n\n  private async execute(sql: string, params: any[] = []): Promise<void> {\n    const upperSql = sql.toUpperCase().trim();\n    \n    if (upperSql.startsWith('INSERT')) {\n      this.handleInsert(sql, params);\n    } else if (upperSql.startsWith('UPDATE')) {\n      this.handleUpdate(sql, params);\n    } else if (upperSql.startsWith('DELETE')) {\n      this.handleDelete(sql, params);\n    } else if (upperSql.startsWith('CREATE TABLE')) {\n      this.handleCreateTable(sql);\n    }\n  }\n\n  private handleSelect(sql: string, params: any[]): any[] {\n    // Very basic SELECT implementation\n    const tableMatch = sql.match(/FROM\\s+(\\w+)/i);\n    if (!tableMatch) return [];\n    \n    const tableName = tableMatch[1];\n    const tableData = this.storage.get(tableName);\n    if (!tableData) return [];\n    \n    return Array.from(tableData.values());\n  }\n\n  private handleInsert(sql: string, params: any[]): void {\n    const tableMatch = sql.match(/INSERT INTO\\s+(\\w+)/i);\n    if (!tableMatch) return;\n    \n    const tableName = tableMatch[1];\n    if (!this.storage.has(tableName)) {\n      this.storage.set(tableName, new Map());\n      this.sequences.set(tableName, 0);\n    }\n    \n    const tableData = this.storage.get(tableName)!;\n    const id = this.getNextId(tableName);\n    \n    // Simple parameter binding\n    const columnsMatch = sql.match(/\\(([^)]+)\\)/);\n    if (columnsMatch) {\n      const columns = columnsMatch[1].split(',').map(col => col.trim());\n      const record: any = { id };\n      \n      columns.forEach((col, index) => {\n        if (params[index] !== undefined) {\n          record[col] = params[index];\n        }\n      });\n      \n      record.created_at = new Date().toISOString();\n      tableData.set(id.toString(), record);\n    }\n  }\n\n  private handleUpdate(sql: string, params: any[]): void {\n    // Basic UPDATE implementation\n    const tableMatch = sql.match(/UPDATE\\s+(\\w+)/i);\n    if (!tableMatch) return;\n    \n    const tableName = tableMatch[1];\n    const tableData = this.storage.get(tableName);\n    if (!tableData) return;\n    \n    // For simplicity, update all records\n    for (const [key, record] of tableData.entries()) {\n      record.updated_at = new Date().toISOString();\n      tableData.set(key, record);\n    }\n  }\n\n  private handleDelete(sql: string, params: any[]): void {\n    const tableMatch = sql.match(/DELETE FROM\\s+(\\w+)/i);\n    if (!tableMatch) return;\n    \n    const tableName = tableMatch[1];\n    const tableData = this.storage.get(tableName);\n    if (tableData) {\n      tableData.clear();\n    }\n  }\n\n  private handleCreateTable(sql: string): void {\n    const tableMatch = sql.match(/CREATE TABLE(?:\\s+IF NOT EXISTS)?\\s+(\\w+)/i);\n    if (tableMatch) {\n      const tableName = tableMatch[1];\n      if (!this.storage.has(tableName)) {\n        this.storage.set(tableName, new Map());\n        this.sequences.set(tableName, 0);\n      }\n    }\n  }\n\n  private createDefaultTables(): void {\n    const tables = ['test_data', 'test_users', 'test_projects'];\n    for (const table of tables) {\n      this.storage.set(table, new Map());\n      this.sequences.set(table, 0);\n    }\n  }\n\n  private getNextId(table: string): number {\n    const current = this.sequences.get(table) || 0;\n    const next = current + 1;\n    this.sequences.set(table, next);\n    return next;\n  }\n}\n\n// Memory database implementation for fallback\nclass MemoryDatabase {\n  private helper: MemoryDatabaseTestHelper;\n\n  constructor() {\n    this.helper = new MemoryDatabaseTestHelper();\n    this.helper.setup();\n  }\n\n  all(sql: string, params: any[], callback: (err: any, rows: any[]) => void): void {\n    this.helper.getConnection().query(sql, params)\n      .then(rows => callback(null, rows))\n      .catch(err => callback(err, []));\n  }\n\n  run(sql: string, params: any[], callback: (err: any) => void): void {\n    this.helper.getConnection().execute(sql, params)\n      .then(() => callback(null))\n      .catch(err => callback(err));\n  }\n\n  async close(): Promise<void> {\n    await this.helper.cleanup();\n  }\n}\n\n// Factory functions\nexport function createSQLiteTestHelper(dbPath?: string): DatabaseTestHelper {\n  return new SQLiteDatabaseTestHelper(dbPath);\n}\n\nexport function createMemoryTestHelper(): DatabaseTestHelper {\n  return new MemoryDatabaseTestHelper();\n}"],"version":3}