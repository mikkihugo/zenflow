{"file":"/home/mhugo/code/claude-code-flow/src/__tests__/unit/classical/wasm-computations/matrix-operations.test.ts","mappings":"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","names":[],"sources":["/home/mhugo/code/claude-code-flow/src/__tests__/unit/classical/wasm-computations/matrix-operations.test.ts"],"sourcesContent":["/**\n * Classical TDD - WASM Matrix Operations Tests\n * \n * Test actual computational results from WASM modules\n * Focus on numerical accuracy and performance\n */\n\nimport { describe, it, expect, beforeAll } from '@jest/globals';\n\n// Simulated WASM matrix operations (would be actual WASM in production)\nclass WASMMatrixOps {\n  private memory: Float32Array;\n  private memorySize: number;\n\n  constructor(memorySize: number = 1024 * 1024) { // 1MB\n    this.memorySize = memorySize;\n    this.memory = new Float32Array(memorySize / 4); // 4 bytes per float\n  }\n\n  // Simulate WASM matrix multiplication\n  matrixMultiply(\n    a: number[], aRows: number, aCols: number,\n    b: number[], bRows: number, bCols: number\n  ): number[] {\n    if (aCols !== bRows) {\n      throw new Error('Invalid matrix dimensions for multiplication');\n    }\n\n    const result = new Array(aRows * bCols);\n    \n    // Optimized multiplication (would be SIMD in real WASM)\n    for (let i = 0; i < aRows; i++) {\n      for (let j = 0; j < bCols; j++) {\n        let sum = 0;\n        for (let k = 0; k < aCols; k++) {\n          sum += a[i * aCols + k] * b[k * bCols + j];\n        }\n        result[i * bCols + j] = sum;\n      }\n    }\n\n    return result;\n  }\n\n  // Simulate WASM matrix transpose\n  transpose(matrix: number[], rows: number, cols: number): number[] {\n    const result = new Array(rows * cols);\n    \n    for (let i = 0; i < rows; i++) {\n      for (let j = 0; j < cols; j++) {\n        result[j * rows + i] = matrix[i * cols + j];\n      }\n    }\n\n    return result;\n  }\n\n  // Simulate WASM convolution (for neural networks)\n  convolve2D(\n    input: number[], inputWidth: number, inputHeight: number,\n    kernel: number[], kernelSize: number,\n    stride: number = 1\n  ): number[] {\n    const outputWidth = Math.floor((inputWidth - kernelSize) / stride) + 1;\n    const outputHeight = Math.floor((inputHeight - kernelSize) / stride) + 1;\n    const output = new Array(outputWidth * outputHeight);\n\n    for (let y = 0; y < outputHeight; y++) {\n      for (let x = 0; x < outputWidth; x++) {\n        let sum = 0;\n        \n        for (let ky = 0; ky < kernelSize; ky++) {\n          for (let kx = 0; kx < kernelSize; kx++) {\n            const inputY = y * stride + ky;\n            const inputX = x * stride + kx;\n            const inputIdx = inputY * inputWidth + inputX;\n            const kernelIdx = ky * kernelSize + kx;\n            \n            sum += input[inputIdx] * kernel[kernelIdx];\n          }\n        }\n        \n        output[y * outputWidth + x] = sum;\n      }\n    }\n\n    return output;\n  }\n\n  // Simulate WASM vector operations\n  dotProduct(a: number[], b: number[]): number {\n    if (a.length !== b.length) {\n      throw new Error('Vectors must have same length');\n    }\n\n    let sum = 0;\n    // Would use SIMD instructions in real WASM\n    for (let i = 0; i < a.length; i++) {\n      sum += a[i] * b[i];\n    }\n\n    return sum;\n  }\n\n  // Batch matrix multiplication for neural networks\n  batchMatMul(\n    batchA: number[], batchB: number[],\n    batchSize: number, m: number, n: number, k: number\n  ): number[] {\n    const result = new Array(batchSize * m * k);\n    \n    for (let batch = 0; batch < batchSize; batch++) {\n      const aOffset = batch * m * n;\n      const bOffset = batch * n * k;\n      const resultOffset = batch * m * k;\n      \n      for (let i = 0; i < m; i++) {\n        for (let j = 0; j < k; j++) {\n          let sum = 0;\n          for (let l = 0; l < n; l++) {\n            sum += batchA[aOffset + i * n + l] * batchB[bOffset + l * k + j];\n          }\n          result[resultOffset + i * k + j] = sum;\n        }\n      }\n    }\n    \n    return result;\n  }\n}\n\ndescribe('WASM Matrix Operations - Classical TDD', () => {\n  let wasmOps: WASMMatrixOps;\n\n  beforeAll(() => {\n    wasmOps = new WASMMatrixOps();\n  });\n\n  describe('Matrix Multiplication', () => {\n    it('should multiply 2x3 and 3x2 matrices correctly', () => {\n      const a = [\n        1, 2, 3,\n        4, 5, 6\n      ];\n      const b = [\n        7, 8,\n        9, 10,\n        11, 12\n      ];\n\n      const result = wasmOps.matrixMultiply(a, 2, 3, b, 3, 2);\n\n      // Expected: [[1*7+2*9+3*11, 1*8+2*10+3*12], [4*7+5*9+6*11, 4*8+5*10+6*12]]\n      //         = [[58, 64], [139, 154]]\n      expect(result).toEqual([58, 64, 139, 154]);\n    });\n\n    it('should handle identity matrix multiplication', () => {\n      const matrix = [1, 2, 3, 4];\n      const identity = [1, 0, 0, 1];\n\n      const result = wasmOps.matrixMultiply(matrix, 2, 2, identity, 2, 2);\n\n      expect(result).toEqual(matrix);\n    });\n\n    it('should throw error for incompatible dimensions', () => {\n      const a = [1, 2, 3, 4]; // 2x2\n      const b = [5, 6, 7]; // 3x1\n\n      expect(() => {\n        wasmOps.matrixMultiply(a, 2, 2, b, 3, 1);\n      }).toThrow('Invalid matrix dimensions');\n    });\n  });\n\n  describe('Matrix Transpose', () => {\n    it('should transpose a 3x2 matrix correctly', () => {\n      const matrix = [\n        1, 2,\n        3, 4,\n        5, 6\n      ];\n\n      const result = wasmOps.transpose(matrix, 3, 2);\n\n      expect(result).toEqual([\n        1, 3, 5,\n        2, 4, 6\n      ]);\n    });\n\n    it('should handle square matrix transpose', () => {\n      const matrix = [\n        1, 2, 3,\n        4, 5, 6,\n        7, 8, 9\n      ];\n\n      const result = wasmOps.transpose(matrix, 3, 3);\n\n      expect(result).toEqual([\n        1, 4, 7,\n        2, 5, 8,\n        3, 6, 9\n      ]);\n    });\n  });\n\n  describe('2D Convolution', () => {\n    it('should perform 2D convolution with 3x3 kernel', () => {\n      const input = [\n        1, 2, 3, 4,\n        5, 6, 7, 8,\n        9, 10, 11, 12,\n        13, 14, 15, 16\n      ];\n      const kernel = [\n        1, 0, -1,\n        2, 0, -2,\n        1, 0, -1\n      ]; // Sobel X filter\n\n      const result = wasmOps.convolve2D(input, 4, 4, kernel, 3);\n\n      // Sobel edge detection in X direction\n      expect(result.length).toBe(4); // 2x2 output\n      expect(result[0]).toBe(-8); // Top-left\n      expect(result[1]).toBe(-8); // Top-right\n    });\n\n    it('should handle stride in convolution', () => {\n      const input = [\n        1, 2, 3, 4,\n        5, 6, 7, 8,\n        9, 10, 11, 12,\n        13, 14, 15, 16\n      ];\n      const kernel = [\n        1, 1,\n        1, 1\n      ]; // Simple averaging kernel\n\n      const result = wasmOps.convolve2D(input, 4, 4, kernel, 2, 2);\n\n      // With stride 2, output should be 2x2\n      expect(result.length).toBe(4);\n      expect(result[0]).toBe(14); // 1+2+5+6\n      expect(result[1]).toBe(22); // 3+4+7+8\n    });\n  });\n\n  describe('Vector Operations', () => {\n    it('should calculate dot product correctly', () => {\n      const a = [1, 2, 3];\n      const b = [4, 5, 6];\n\n      const result = wasmOps.dotProduct(a, b);\n\n      expect(result).toBe(32); // 1*4 + 2*5 + 3*6\n    });\n\n    it('should handle zero vectors', () => {\n      const a = [1, 2, 3];\n      const b = [0, 0, 0];\n\n      const result = wasmOps.dotProduct(a, b);\n\n      expect(result).toBe(0);\n    });\n\n    it('should throw for mismatched vector lengths', () => {\n      const a = [1, 2, 3];\n      const b = [4, 5];\n\n      expect(() => {\n        wasmOps.dotProduct(a, b);\n      }).toThrow('same length');\n    });\n  });\n\n  describe('Batch Operations', () => {\n    it('should perform batch matrix multiplication', () => {\n      // 2 batches of 2x2 matrices\n      const batchA = [\n        1, 2, 3, 4,  // First 2x2\n        5, 6, 7, 8   // Second 2x2\n      ];\n      const batchB = [\n        1, 0, 0, 1,  // Identity\n        2, 0, 0, 2   // 2*Identity\n      ];\n\n      const result = wasmOps.batchMatMul(batchA, batchB, 2, 2, 2, 2);\n\n      // First batch: A * I = A\n      expect(result.slice(0, 4)).toEqual([1, 2, 3, 4]);\n      \n      // Second batch: A * 2I = 2A\n      expect(result.slice(4, 8)).toEqual([10, 12, 14, 16]);\n    });\n  });\n\n  describe('Performance Characteristics', () => {\n    it('should handle large matrix multiplication efficiently', () => {\n      const size = 100;\n      const a = new Array(size * size).fill(1);\n      const b = new Array(size * size).fill(2);\n\n      const startTime = performance.now();\n      const result = wasmOps.matrixMultiply(a, size, size, b, size, size);\n      const duration = performance.now() - startTime;\n\n      // All elements should be size * 2 (sum of row * column)\n      expect(result[0]).toBe(size * 2);\n      expect(result[result.length - 1]).toBe(size * 2);\n      \n      // Performance assertion (adjust based on actual WASM performance)\n      expect(duration).toBeLessThan(100); // Should complete in < 100ms\n    });\n  });\n});\n\n/**\n * Classical TDD Benefits for WASM:\n * \n * 1. Tests actual computation results, not mocks\n * 2. Verifies numerical accuracy\n * 3. Can benchmark performance\n * 4. Tests edge cases in algorithms\n * 5. Ensures mathematical correctness\n * \n * Perfect for:\n * - WASM computational kernels\n * - SIMD operations\n * - Neural network primitives\n * - Image/signal processing\n * - Scientific computing\n */"],"version":3}