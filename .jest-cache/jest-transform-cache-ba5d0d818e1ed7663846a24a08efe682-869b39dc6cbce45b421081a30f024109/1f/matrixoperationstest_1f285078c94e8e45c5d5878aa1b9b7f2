b8314e0a92dbbf3ddf548225975fdbbe
/**
 * Classical TDD - WASM Matrix Operations Tests
 *
 * Test actual computational results from WASM modules
 * Focus on numerical accuracy and performance
 */
import { describe, it, expect, beforeAll } from '@jest/globals';
// Simulated WASM matrix operations (would be actual WASM in production)
class WASMMatrixOps {
    memory;
    memorySize;
    constructor(memorySize = 1024 * 1024) {
        this.memorySize = memorySize;
        this.memory = new Float32Array(memorySize / 4); // 4 bytes per float
    }
    // Simulate WASM matrix multiplication
    matrixMultiply(a, aRows, aCols, b, bRows, bCols) {
        if (aCols !== bRows) {
            throw new Error('Invalid matrix dimensions for multiplication');
        }
        const result = new Array(aRows * bCols);
        // Optimized multiplication (would be SIMD in real WASM)
        for (let i = 0; i < aRows; i++) {
            for (let j = 0; j < bCols; j++) {
                let sum = 0;
                for (let k = 0; k < aCols; k++) {
                    sum += a[i * aCols + k] * b[k * bCols + j];
                }
                result[i * bCols + j] = sum;
            }
        }
        return result;
    }
    // Simulate WASM matrix transpose
    transpose(matrix, rows, cols) {
        const result = new Array(rows * cols);
        for (let i = 0; i < rows; i++) {
            for (let j = 0; j < cols; j++) {
                result[j * rows + i] = matrix[i * cols + j];
            }
        }
        return result;
    }
    // Simulate WASM convolution (for neural networks)
    convolve2D(input, inputWidth, inputHeight, kernel, kernelSize, stride = 1) {
        const outputWidth = Math.floor((inputWidth - kernelSize) / stride) + 1;
        const outputHeight = Math.floor((inputHeight - kernelSize) / stride) + 1;
        const output = new Array(outputWidth * outputHeight);
        for (let y = 0; y < outputHeight; y++) {
            for (let x = 0; x < outputWidth; x++) {
                let sum = 0;
                for (let ky = 0; ky < kernelSize; ky++) {
                    for (let kx = 0; kx < kernelSize; kx++) {
                        const inputY = y * stride + ky;
                        const inputX = x * stride + kx;
                        const inputIdx = inputY * inputWidth + inputX;
                        const kernelIdx = ky * kernelSize + kx;
                        sum += input[inputIdx] * kernel[kernelIdx];
                    }
                }
                output[y * outputWidth + x] = sum;
            }
        }
        return output;
    }
    // Simulate WASM vector operations
    dotProduct(a, b) {
        if (a.length !== b.length) {
            throw new Error('Vectors must have same length');
        }
        let sum = 0;
        // Would use SIMD instructions in real WASM
        for (let i = 0; i < a.length; i++) {
            sum += a[i] * b[i];
        }
        return sum;
    }
    // Batch matrix multiplication for neural networks
    batchMatMul(batchA, batchB, batchSize, m, n, k) {
        const result = new Array(batchSize * m * k);
        for (let batch = 0; batch < batchSize; batch++) {
            const aOffset = batch * m * n;
            const bOffset = batch * n * k;
            const resultOffset = batch * m * k;
            for (let i = 0; i < m; i++) {
                for (let j = 0; j < k; j++) {
                    let sum = 0;
                    for (let l = 0; l < n; l++) {
                        sum += batchA[aOffset + i * n + l] * batchB[bOffset + l * k + j];
                    }
                    result[resultOffset + i * k + j] = sum;
                }
            }
        }
        return result;
    }
}
describe('WASM Matrix Operations - Classical TDD', () => {
    let wasmOps;
    beforeAll(() => {
        wasmOps = new WASMMatrixOps();
    });
    describe('Matrix Multiplication', () => {
        it('should multiply 2x3 and 3x2 matrices correctly', () => {
            const a = [
                1, 2, 3,
                4, 5, 6
            ];
            const b = [
                7, 8,
                9, 10,
                11, 12
            ];
            const result = wasmOps.matrixMultiply(a, 2, 3, b, 3, 2);
            // Expected: [[1*7+2*9+3*11, 1*8+2*10+3*12], [4*7+5*9+6*11, 4*8+5*10+6*12]]
            //         = [[58, 64], [139, 154]]
            expect(result).toEqual([58, 64, 139, 154]);
        });
        it('should handle identity matrix multiplication', () => {
            const matrix = [1, 2, 3, 4];
            const identity = [1, 0, 0, 1];
            const result = wasmOps.matrixMultiply(matrix, 2, 2, identity, 2, 2);
            expect(result).toEqual(matrix);
        });
        it('should throw error for incompatible dimensions', () => {
            const a = [1, 2, 3, 4]; // 2x2
            const b = [5, 6, 7]; // 3x1
            expect(() => {
                wasmOps.matrixMultiply(a, 2, 2, b, 3, 1);
            }).toThrow('Invalid matrix dimensions');
        });
    });
    describe('Matrix Transpose', () => {
        it('should transpose a 3x2 matrix correctly', () => {
            const matrix = [
                1, 2,
                3, 4,
                5, 6
            ];
            const result = wasmOps.transpose(matrix, 3, 2);
            expect(result).toEqual([
                1, 3, 5,
                2, 4, 6
            ]);
        });
        it('should handle square matrix transpose', () => {
            const matrix = [
                1, 2, 3,
                4, 5, 6,
                7, 8, 9
            ];
            const result = wasmOps.transpose(matrix, 3, 3);
            expect(result).toEqual([
                1, 4, 7,
                2, 5, 8,
                3, 6, 9
            ]);
        });
    });
    describe('2D Convolution', () => {
        it('should perform 2D convolution with 3x3 kernel', () => {
            const input = [
                1, 2, 3, 4,
                5, 6, 7, 8,
                9, 10, 11, 12,
                13, 14, 15, 16
            ];
            const kernel = [
                1, 0, -1,
                2, 0, -2,
                1, 0, -1
            ]; // Sobel X filter
            const result = wasmOps.convolve2D(input, 4, 4, kernel, 3);
            // Sobel edge detection in X direction
            expect(result.length).toBe(4); // 2x2 output
            expect(result[0]).toBe(-8); // Top-left
            expect(result[1]).toBe(-8); // Top-right
        });
        it('should handle stride in convolution', () => {
            const input = [
                1, 2, 3, 4,
                5, 6, 7, 8,
                9, 10, 11, 12,
                13, 14, 15, 16
            ];
            const kernel = [
                1, 1,
                1, 1
            ]; // Simple averaging kernel
            const result = wasmOps.convolve2D(input, 4, 4, kernel, 2, 2);
            // With stride 2, output should be 2x2
            expect(result.length).toBe(4);
            expect(result[0]).toBe(14); // 1+2+5+6
            expect(result[1]).toBe(22); // 3+4+7+8
        });
    });
    describe('Vector Operations', () => {
        it('should calculate dot product correctly', () => {
            const a = [1, 2, 3];
            const b = [4, 5, 6];
            const result = wasmOps.dotProduct(a, b);
            expect(result).toBe(32); // 1*4 + 2*5 + 3*6
        });
        it('should handle zero vectors', () => {
            const a = [1, 2, 3];
            const b = [0, 0, 0];
            const result = wasmOps.dotProduct(a, b);
            expect(result).toBe(0);
        });
        it('should throw for mismatched vector lengths', () => {
            const a = [1, 2, 3];
            const b = [4, 5];
            expect(() => {
                wasmOps.dotProduct(a, b);
            }).toThrow('same length');
        });
    });
    describe('Batch Operations', () => {
        it('should perform batch matrix multiplication', () => {
            // 2 batches of 2x2 matrices
            const batchA = [
                1, 2, 3, 4, // First 2x2
                5, 6, 7, 8 // Second 2x2
            ];
            const batchB = [
                1, 0, 0, 1, // Identity
                2, 0, 0, 2 // 2*Identity
            ];
            const result = wasmOps.batchMatMul(batchA, batchB, 2, 2, 2, 2);
            // First batch: A * I = A
            expect(result.slice(0, 4)).toEqual([1, 2, 3, 4]);
            // Second batch: A * 2I = 2A
            expect(result.slice(4, 8)).toEqual([10, 12, 14, 16]);
        });
    });
    describe('Performance Characteristics', () => {
        it('should handle large matrix multiplication efficiently', () => {
            const size = 100;
            const a = new Array(size * size).fill(1);
            const b = new Array(size * size).fill(2);
            const startTime = performance.now();
            const result = wasmOps.matrixMultiply(a, size, size, b, size, size);
            const duration = performance.now() - startTime;
            // All elements should be size * 2 (sum of row * column)
            expect(result[0]).toBe(size * 2);
            expect(result[result.length - 1]).toBe(size * 2);
            // Performance assertion (adjust based on actual WASM performance)
            expect(duration).toBeLessThan(100); // Should complete in < 100ms
        });
    });
});
/**
 * Classical TDD Benefits for WASM:
 *
 * 1. Tests actual computation results, not mocks
 * 2. Verifies numerical accuracy
 * 3. Can benchmark performance
 * 4. Tests edge cases in algorithms
 * 5. Ensures mathematical correctness
 *
 * Perfect for:
 * - WASM computational kernels
 * - SIMD operations
 * - Neural network primitives
 * - Image/signal processing
 * - Scientific computing
 */ 
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL2hvbWUvbWh1Z28vY29kZS9jbGF1ZGUtY29kZS1mbG93L3NyYy9fX3Rlc3RzX18vdW5pdC9jbGFzc2ljYWwvd2FzbS1jb21wdXRhdGlvbnMvbWF0cml4LW9wZXJhdGlvbnMudGVzdC50cyIsIm1hcHBpbmdzIjoiQUFBQTs7Ozs7R0FLRztBQUVILE9BQU8sRUFBRSxRQUFRLEVBQUUsRUFBRSxFQUFFLE1BQU0sRUFBRSxTQUFTLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFFaEUsd0VBQXdFO0FBQ3hFLE1BQU0sYUFBYTtJQUNULE1BQU0sQ0FBZTtJQUNyQixVQUFVLENBQVM7SUFFM0IsWUFBWSxhQUFxQixJQUFJLEdBQUcsSUFBSTtRQUMxQyxJQUFJLENBQUMsVUFBVSxHQUFHLFVBQVUsQ0FBQztRQUM3QixJQUFJLENBQUMsTUFBTSxHQUFHLElBQUksWUFBWSxDQUFDLFVBQVUsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLG9CQUFvQjtJQUN0RSxDQUFDO0lBRUQsc0NBQXNDO0lBQ3RDLGNBQWMsQ0FDWixDQUFXLEVBQUUsS0FBYSxFQUFFLEtBQWEsRUFDekMsQ0FBVyxFQUFFLEtBQWEsRUFBRSxLQUFhO1FBRXpDLElBQUksS0FBSyxLQUFLLEtBQUssRUFBRSxDQUFDO1lBQ3BCLE1BQU0sSUFBSSxLQUFLLENBQUMsOENBQThDLENBQUMsQ0FBQztRQUNsRSxDQUFDO1FBRUQsTUFBTSxNQUFNLEdBQUcsSUFBSSxLQUFLLENBQUMsS0FBSyxHQUFHLEtBQUssQ0FBQyxDQUFDO1FBRXhDLHdEQUF3RDtRQUN4RCxLQUFLLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsS0FBSyxFQUFFLENBQUMsRUFBRSxFQUFFLENBQUM7WUFDL0IsS0FBSyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLEtBQUssRUFBRSxDQUFDLEVBQUUsRUFBRSxDQUFDO2dCQUMvQixJQUFJLEdBQUcsR0FBRyxDQUFDLENBQUM7Z0JBQ1osS0FBSyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FB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QUFVLENBQUMsQ0FBVyxFQUFFLENBQVc7UUFDakMsSUFBSSxDQUFDLENBQUMsTUFBTSxLQUFLLENBQUMsQ0FBQyxNQUFNLEVBQUUsQ0FBQztZQUMxQixNQUFNLElBQUksS0FBSyxDQUFDLCtCQUErQixDQUFDLENBQUM7UUFDbkQsQ0FBQztRQUVELElBQUksR0FBRyxHQUFHLENBQUMsQ0FBQztRQUNaLDJDQUEyQztRQUMzQyxLQUFLLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsQ0FBQyxDQUFDLE1BQU0sRUFBRSxDQUFDLEVBQUUsRUFBRSxDQUFDO1lBQ2xDLEdBQUcsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ3JCLENBQUM7UUFFRCxPQUFPLEdBQUcsQ0FBQztJQUNiLENBQUM7SUFFRCxrREFBa0Q7SUFDbEQsV0FBVyxDQUNULE1BQWdCLEVBQUUsTUFBZ0IsRUFDbEMsU0FBaUIsRUFBRSxDQUFTLEVBQUUsQ0FBUyxFQUFFLENBQVM7UUFFbEQsTUFBTSxNQUFNLEdBQUcsSUFBSSxLQUFLLENBQUMsU0FBUyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQztRQUU1QyxLQUFLLElBQUksS0FBSyxHQUFHLENBQUMsRUFBRSxLQUFLLEdBQUcsU0FBUyxFQUFFLEtBQUssRUFBRSxFQUFFLENBQUM7WUFDL0MsTUFBTSxPQUFPLEdBQUcsS0FBSyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUM7WUFDOUIsTUFBTSxPQUFPLEdBQUcsS0FBSyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUM7WUFDOUIsTUFBTSxZQUFZLEdBQUcsS0FBSyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUM7WUFFbkMsS0FBSyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEVBQUUsRUFBRSxDQUFDO2dCQUMzQixLQUFLLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsRUFBRSxF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O1lBQ3BFLE1BQU0sUUFBUSxHQUFHLFdBQVcsQ0FBQyxHQUFHLEVBQUUsR0FBRyxTQUFTLENBQUM7WUFFL0Msd0RBQXdEO1lBQ3hELE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsSUFBSSxHQUFHLENBQUMsQ0FBQyxDQUFDO1lBQ2pDLE1BQU0sQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLE1BQU0sR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxJQUFJLEdBQUcsQ0FBQyxDQUFDLENBQUM7WUFFakQsa0VBQWtFO1lBQ2xFLE1BQU0sQ0FBQyxRQUFRLENBQUMsQ0FBQyxZQUFZLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyw2QkFBNkI7UUFDbkUsQ0FBQyxDQUFDLENBQUM7SUFDTCxDQUFDLENBQUMsQ0FBQztBQUNMLENBQUMsQ0FBQyxDQUFDO0FBRUg7Ozs7Ozs7Ozs7Ozs7OztHQWVHIiwibmFtZXMiOltdLCJzb3VyY2VzIjpbIi9ob21lL21odWdvL2NvZGUvY2xhdWRlLWNvZGUtZmxvdy9zcmMvX190ZXN0c19fL3VuaXQvY2xhc3NpY2FsL3dhc20tY29tcHV0YXRpb25zL21hdHJpeC1vcGVyYXRpb25zLnRlc3QudHMiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBDbGFzc2ljYWwgVEREIC0gV0FTTSBNYXRyaXggT3BlcmF0aW9ucyBUZXN0c1xuICogXG4gKiBUZXN0IGFjdHVhbCBjb21wdXRhdGlvbmFsIHJlc3VsdHMgZnJvbSBXQVNNIG1vZHVsZXNcbiAqIEZvY3VzIG9uIG51bWVyaWNhbCBhY2N1cmFjeSBhbmQgcGVyZm9ybWFuY2VcbiAqL1xuXG5pbXBvcnQgeyBkZXNjcmliZSwgaXQsIGV4cGVjdCwgYmVmb3JlQWxsIH0gZnJvbSAnQGplc3QvZ2xvYmFscyc7XG5cbi8vIFNpbXVsYXRlZCBXQVNNIG1hdHJpeCBvcGVyYXRpb25zICh3b3VsZCBiZSBhY3R1YWwgV0FTTSBpbiBwcm9kdWN0aW9uKVxuY2xhc3MgV0FTTU1hdHJpeE9wcyB7XG4gIHByaXZhdGUgbWVtb3J5OiBGbG9hdDMyQXJyYXk7XG4gIHByaXZhdGUgbWVtb3J5U2l6ZTogbnVtYmVyO1xuXG4gIGNvbnN0cnVjdG9yKG1lbW9yeVNpemU6IG51bWJlciA9IDEwMjQgKiAxMDI0KSB7IC8vIDFNQlxuICAgIHRoaXMubWVtb3J5U2l6ZSA9IG1lbW9yeVNpemU7XG4gICAgdGhpcy5tZW1vcnkgPSBuZXcgRmxvYXQzMkFycmF5KG1lbW9yeVNpemUgLyA0KTsgLy8gNCBieXRlcyBwZXIgZmxvYXRcbiAgfVxuXG4gIC8vIFNpbXVsYXRlIFdBU00gbWF0cml4IG11bHRpcGxpY2F0aW9uXG4gIG1hdHJpeE11bHRpcGx5KFxuICAgIGE6IG51bWJlcltdLCBhUm93czogbnVtYmVyLCBhQ29sczogbnVtYmVyLFxuICAgIGI6IG51bWJlcltdLCBiUm93czogbnVtYmVyLCBiQ29sczogbnVtYmVyXG4gICk6IG51bWJlcltdIHtcbiAgICBpZiAoYUNvbHMgIT09IGJSb3dzKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ0ludmFsaWQgbWF0cml4IGRpbWVuc2lvbnMgZm9yIG11bHRpcGxpY2F0aW9uJyk7XG4gICAgfVxuXG4gICAgY29uc3QgcmVzdWx0ID0gbmV3IEFycmF5KGFSb3dzICogYkNvbHMpO1xuICAgIFxuICAgIC8vIE9wdGltaXplZCBtdWx0aXBsaWNhdGlvbiAod291bGQgYmUgU0lNRCBpbiByZWFsIFdBU00pXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBhUm93czsgaSsrKSB7XG4gICAgICBmb3IgKGxldCBqID0gMDsgaiA8IGJDb2xzOyBqKyspIHtcbiAgICAgICAgbGV0IHN1bSA9IDA7XG4gICAgICAgIGZvciAobGV0IGsgPSAwOyBrIDwgYUNvbHM7IGsrKykge1xuICAgICAgICAgIHN1bSArPSBhW2kgKiBhQ29scyArIGtdICogYltrICogYkNvbHMgKyBqXTtcbiAgICAgICAgfVxuICAgICAgICByZXN1bHRbaSAqIGJDb2xzICsgal0gPSBzdW07XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuXG4gIC8vIFNpbXVsYXRlIFdBU00gbWF0cml4IHRyYW5zcG9zZVxuICB0cmFuc3Bvc2UobWF0cml4OiBudW1iZXJbXSwgcm93czogbnVtYmVyLCBjb2xzOiBudW1iZXIpOiBudW1iZXJbXSB7XG4gICAgY29uc3QgcmVzdWx0ID0gbmV3IEFycmF5KHJvd3MgKiBjb2xzKTtcbiAgICBcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHJvd3M7IGkrKykge1xuICAgICAgZm9yIChsZXQgaiA9IDA7IGogPCBjb2xzOyBqKyspIHtcbiAgICAgICAgcmVzdWx0W2ogKiByb3dzICsgaV0gPSBtYXRyaXhbaSAqIGNvbHMgKyBqXTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG5cbiAgLy8gU2ltdWxhdGUgV0FTTSBjb252b2x1dGlvbiAoZm9yIG5ldXJhbCBuZXR3b3JrcylcbiAgY29udm9sdmUyRChcbiAgICBpbnB1dDogbnVtYmVyW10sIGlucHV0V2lkdGg6IG51bWJlciwgaW5wdXRIZWlnaHQ6IG51bWJlcixcbiAgICBrZXJuZWw6IG51bWJlcltdLCBrZXJuZWxTaXplOiBudW1iZXIsXG4gICAgc3RyaWRlOiBudW1iZXIgPSAxXG4gICk6IG51bWJlcltdIHtcbiAgICBjb25zdCBvdXRwdXRXaWR0aCA9IE1hdGguZmxvb3IoKGlucHV0V2lkdGggLSBrZXJuZWxTaXplKSAvIHN0cmlkZSkgKyAxO1xuICAgIGNvbnN0IG91dHB1dEhlaWdodCA9IE1hdGguZmxvb3IoKGlucHV0SGVpZ2h0IC0ga2VybmVsU2l6ZSkgLyBzdHJpZGUpICsgMTtcbiAgICBjb25zdCBvdXRwdXQgPSBuZXcgQXJyYXkob3V0cHV0V2lkdGggKiBvdXRwdXRIZWlnaHQpO1xuXG4gICAgZm9yIChsZXQgeSA9IDA7IHkgPCBvdXRwdXRIZWlnaHQ7IHkrKykge1xuICAgICAgZm9yIChsZXQgeCA9IDA7IHggPCBvdXRwdXRXaWR0aDsgeCsrKSB7XG4gICAgICAgIGxldCBzdW0gPSAwO1xuICAgICAgICBcbiAgICAgICAgZm9yIChsZXQga3kgPSAwOyBreSA8IGtlcm5lbFNpemU7IGt5KyspIHtcbiAgICAgICAgICBmb3IgKGxldCBreCA9IDA7IGt4IDwga2VybmVsU2l6ZTsga3grKykge1xuICAgICAgICAgICAgY29uc3QgaW5wdXRZID0geSAqIHN0cmlkZSArIGt5O1xuICAgICAgICAgICAgY29uc3QgaW5wdXRYID0geCAqIHN0cmlkZSArIGt4O1xuICAgICAgICAgICAgY29uc3QgaW5wdXRJZHggPSBpbnB1dFkgKiBpbnB1dFdpZHRoICsgaW5wdXRYO1xuICAgICAgICAgICAgY29uc3Qga2VybmVsSWR4ID0ga3kgKiBrZXJuZWxTaXplICsga3g7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIHN1bSArPSBpbnB1dFtpbnB1dElkeF0gKiBrZXJuZWxba2VybmVsSWR4XTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgIG91dHB1dFt5ICogb3V0cHV0V2lkdGggKyB4XSA9IHN1bTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gb3V0cHV0O1xuICB9XG5cbiAgLy8gU2ltdWxhdGUgV0FTTSB2ZWN0b3Igb3BlcmF0aW9uc1xuICBkb3RQcm9kdWN0KGE6IG51bWJlcltdLCBiOiBudW1iZXJbXSk6IG51bWJlciB7XG4gICAgaWYgKGEubGVuZ3RoICE9PSBiLmxlbmd0aCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdWZWN0b3JzIG11c3QgaGF2ZSBzYW1lIGxlbmd0aCcpO1xuICAgIH1cblxuICAgIGxldCBzdW0gPSAwO1xuICAgIC8vIFdvdWxkIHVzZSBTSU1EIGluc3RydWN0aW9ucyBpbiByZWFsIFdBU01cbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGEubGVuZ3RoOyBpKyspIHtcbiAgICAgIHN1bSArPSBhW2ldICogYltpXTtcbiAgICB9XG5cbiAgICByZXR1cm4gc3VtO1xuICB9XG5cbiAgLy8gQmF0Y2ggbWF0cml4IG11bHRpcGxpY2F0aW9uIGZvciBuZXVyYWwgbmV0d29ya3NcbiAgYmF0Y2hNYXRNdWwoXG4gICAgYmF0Y2hBOiBudW1iZXJbXSwgYmF0Y2hCOiBudW1iZXJbXSxcbiAgICBiYXRjaFNpemU6IG51bWJlciwgbTogbnVtYmVyLCBuOiBudW1iZXIsIGs6IG51bWJlclxuICApOiBudW1iZXJbXSB7XG4gICAgY29uc3QgcmVzdWx0ID0gbmV3IEFycmF5KGJhdGNoU2l6ZSAqIG0gKiBrKTtcbiAgICBcbiAgICBmb3IgKGxldCBiYXRjaCA9IDA7IGJhdGNoIDwgYmF0Y2hTaXplOyBiYXRjaCsrKSB7XG4gICAgICBjb25zdCBhT2Zmc2V0ID0gYmF0Y2ggKiBtICogbjtcbiAgICAgIGNvbnN0IGJPZmZzZXQgPSBiYXRjaCAqIG4gKiBrO1xuICAgICAgY29uc3QgcmVzdWx0T2Zmc2V0ID0gYmF0Y2ggKiBtICogaztcbiAgICAgIFxuICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBtOyBpKyspIHtcbiAgICAgICAgZm9yIChsZXQgaiA9IDA7IGogPCBrOyBqKyspIHtcbiAgICAgICAgICBsZXQgc3VtID0gMDtcbiAgICAgICAgICBmb3IgKGxldCBsID0gMDsgbCA8IG47IGwrKykge1xuICAgICAgICAgICAgc3VtICs9IGJhdGNoQVthT2Zmc2V0ICsgaSAqIG4gKyBsXSAqIGJhdGNoQltiT2Zmc2V0ICsgbCAqIGsgKyBqXTtcbiAgICAgICAgICB9XG4gICAgICAgICAgcmVzdWx0W3Jlc3VsdE9mZnNldCArIGkgKiBrICsgal0gPSBzdW07XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgXG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxufVxuXG5kZXNjcmliZSgnV0FTTSBNYXRyaXggT3BlcmF0aW9ucyAtIENsYXNzaWNhbCBUREQnLCAoKSA9PiB7XG4gIGxldCB3YXNtT3BzOiBXQVNNTWF0cml4T3BzO1xuXG4gIGJlZm9yZUFsbCgoKSA9PiB7XG4gICAgd2FzbU9wcyA9IG5ldyBXQVNNTWF0cml4T3BzKCk7XG4gIH0pO1xuXG4gIGRlc2NyaWJlKCdNYXRyaXggTXVsdGlwbGljYXRpb24nLCAoKSA9PiB7XG4gICAgaXQoJ3Nob3VsZCBtdWx0aXBseSAyeDMgYW5kIDN4MiBtYXRyaWNlcyBjb3JyZWN0bHknLCAoKSA9PiB7XG4gICAgICBjb25zdCBhID0gW1xuICAgICAgICAxLCAyLCAzLFxuICAgICAgICA0LCA1LCA2XG4gICAgICBdO1xuICAgICAgY29uc3QgYiA9IFtcbiAgICAgICAgNywgOCxcbiAgICAgICAgOSwgMTAsXG4gICAgICAgIDExLCAxMlxuICAgICAgXTtcblxuICAgICAgY29uc3QgcmVzdWx0ID0gd2FzbU9wcy5tYXRyaXhNdWx0aXBseShhLCAyLCAzLCBiLCAzLCAyKTtcblxuICAgICAgLy8gRXhwZWN0ZWQ6IFtbMSo3KzIqOSszKjExLCAxKjgrMioxMCszKjEyXSwgWzQqNys1KjkrNioxMSwgNCo4KzUqMTArNioxMl1dXG4gICAgICAvLyAgICAgICAgID0gW1s1OCwgNjRdLCBbMTM5LCAxNTRdXVxuICAgICAgZXhwZWN0KHJlc3VsdCkudG9FcXVhbChbNTgsIDY0LCAxMzksIDE1NF0pO1xuICAgIH0pO1xuXG4gICAgaXQoJ3Nob3VsZCBoYW5kbGUgaWRlbnRpdHkgbWF0cml4IG11bHRpcGxpY2F0aW9uJywgKCkgPT4ge1xuICAgICAgY29uc3QgbWF0cml4ID0gWzEsIDIsIDMsIDRdO1xuICAgICAgY29uc3QgaWRlbnRpdHkgPSBbMSwgMCwgMCwgMV07XG5cbiAgICAgIGNvbnN0IHJlc3VsdCA9IHdhc21PcHMubWF0cml4TXVsdGlwbHkobWF0cml4LCAyLCAyLCBpZGVudGl0eSwgMiwgMik7XG5cbiAgICAgIGV4cGVjdChyZXN1bHQpLnRvRXF1YWwobWF0cml4KTtcbiAgICB9KTtcblxuICAgIGl0KCdzaG91bGQgdGhyb3cgZXJyb3IgZm9yIGluY29tcGF0aWJsZSBkaW1lbnNpb25zJywgKCkgPT4ge1xuICAgICAgY29uc3QgYSA9IFsxLCAyLCAzLCA0XTsgLy8gMngyXG4gICAgICBjb25zdCBiID0gWzUsIDYsIDddOyAvLyAzeDFcblxuICAgICAgZXhwZWN0KCgpID0+IHtcbiAgICAgICAgd2FzbU9wcy5tYXRyaXhNdWx0aXBseShhLCAyLCAyLCBiLCAzLCAxKTtcbiAgICAgIH0pLnRvVGhyb3coJ0ludmFsaWQgbWF0cml4IGRpbWVuc2lvbnMnKTtcbiAgICB9KTtcbiAgfSk7XG5cbiAgZGVzY3JpYmUoJ01hdHJpeCBUcmFuc3Bvc2UnLCAoKSA9PiB7XG4gICAgaXQoJ3Nob3VsZCB0cmFuc3Bvc2UgYSAzeDIgbWF0cml4IGNvcnJlY3RseScsICgpID0+IHtcbiAgICAgIGNvbnN0IG1hdHJpeCA9IFtcbiAgICAgICAgMSwgMixcbiAgICAgICAgMywgNCxcbiAgICAgICAgNSwgNlxuICAgICAgXTtcblxuICAgICAgY29uc3QgcmVzdWx0ID0gd2FzbU9wcy50cmFuc3Bvc2UobWF0cml4LCAzLCAyKTtcblxuICAgICAgZXhwZWN0KHJlc3VsdCkudG9FcXVhbChbXG4gICAgICAgIDEsIDMsIDUsXG4gICAgICAgIDIsIDQsIDZcbiAgICAgIF0pO1xuICAgIH0pO1xuXG4gICAgaXQoJ3Nob3VsZCBoYW5kbGUgc3F1YXJlIG1hdHJpeCB0cmFuc3Bvc2UnLCAoKSA9PiB7XG4gICAgICBjb25zdCBtYXRyaXggPSBbXG4gICAgICAgIDEsIDIsIDMsXG4gICAgICAgIDQsIDUsIDYsXG4gICAgICAgIDcsIDgsIDlcbiAgICAgIF07XG5cbiAgICAgIGNvbnN0IHJlc3VsdCA9IHdhc21PcHMudHJhbnNwb3NlKG1hdHJpeCwgMywgMyk7XG5cbiAgICAgIGV4cGVjdChyZXN1bHQpLnRvRXF1YWwoW1xuICAgICAgICAxLCA0LCA3LFxuICAgICAgICAyLCA1LCA4LFxuICAgICAgICAzLCA2LCA5XG4gICAgICBdKTtcbiAgICB9KTtcbiAgfSk7XG5cbiAgZGVzY3JpYmUoJzJEIENvbnZvbHV0aW9uJywgKCkgPT4ge1xuICAgIGl0KCdzaG91bGQgcGVyZm9ybSAyRCBjb252b2x1dGlvbiB3aXRoIDN4MyBrZXJuZWwnLCAoKSA9PiB7XG4gICAgICBjb25zdCBpbnB1dCA9IFtcbiAgICAgICAgMSwgMiwgMywgNCxcbiAgICAgICAgNSwgNiwgNywgOCxcbiAgICAgICAgOSwgMTAsIDExLCAxMixcbiAgICAgICAgMTMsIDE0LCAxNSwgMTZcbiAgICAgIF07XG4gICAgICBjb25zdCBrZXJuZWwgPSBbXG4gICAgICAgIDEsIDAsIC0xLFxuICAgICAgICAyLCAwLCAtMixcbiAgICAgICAgMSwgMCwgLTFcbiAgICAgIF07IC8vIFNvYmVsIFggZmlsdGVyXG5cbiAgICAgIGNvbnN0IHJlc3VsdCA9IHdhc21PcHMuY29udm9sdmUyRChpbnB1dCwgNCwgNCwga2VybmVsLCAzKTtcblxuICAgICAgLy8gU29iZWwgZWRnZSBkZXRlY3Rpb24gaW4gWCBkaXJlY3Rpb25cbiAgICAgIGV4cGVjdChyZXN1bHQubGVuZ3RoKS50b0JlKDQpOyAvLyAyeDIgb3V0cHV0XG4gICAgICBleHBlY3QocmVzdWx0WzBdKS50b0JlKC04KTsgLy8gVG9wLWxlZnRcbiAgICAgIGV4cGVjdChyZXN1bHRbMV0pLnRvQmUoLTgpOyAvLyBUb3AtcmlnaHRcbiAgICB9KTtcblxuICAgIGl0KCdzaG91bGQgaGFuZGxlIHN0cmlkZSBpbiBjb252b2x1dGlvbicsICgpID0+IHtcbiAgICAgIGNvbnN0IGlucHV0ID0gW1xuICAgICAgICAxLCAyLCAzLCA0LFxuICAgICAgICA1LCA2LCA3LCA4LFxuICAgICAgICA5LCAxMCwgMTEsIDEyLFxuICAgICAgICAxMywgMTQsIDE1LCAxNlxuICAgICAgXTtcbiAgICAgIGNvbnN0IGtlcm5lbCA9IFtcbiAgICAgICAgMSwgMSxcbiAgICAgICAgMSwgMVxuICAgICAgXTsgLy8gU2ltcGxlIGF2ZXJhZ2luZyBrZXJuZWxcblxuICAgICAgY29uc3QgcmVzdWx0ID0gd2FzbU9wcy5jb252b2x2ZTJEKGlucHV0LCA0LCA0LCBrZXJuZWwsIDIsIDIpO1xuXG4gICAgICAvLyBXaXRoIHN0cmlkZSAyLCBvdXRwdXQgc2hvdWxkIGJlIDJ4MlxuICAgICAgZXhwZWN0KHJlc3VsdC5sZW5ndGgpLnRvQmUoNCk7XG4gICAgICBleHBlY3QocmVzdWx0WzBdKS50b0JlKDE0KTsgLy8gMSsyKzUrNlxuICAgICAgZXhwZWN0KHJlc3VsdFsxXSkudG9CZSgyMik7IC8vIDMrNCs3KzhcbiAgICB9KTtcbiAgfSk7XG5cbiAgZGVzY3JpYmUoJ1ZlY3RvciBPcGVyYXRpb25zJywgKCkgPT4ge1xuICAgIGl0KCdzaG91bGQgY2FsY3VsYXRlIGRvdCBwcm9kdWN0IGNvcnJlY3RseScsICgpID0+IHtcbiAgICAgIGNvbnN0IGEgPSBbMSwgMiwgM107XG4gICAgICBjb25zdCBiID0gWzQsIDUsIDZdO1xuXG4gICAgICBjb25zdCByZXN1bHQgPSB3YXNtT3BzLmRvdFByb2R1Y3QoYSwgYik7XG5cbiAgICAgIGV4cGVjdChyZXN1bHQpLnRvQmUoMzIpOyAvLyAxKjQgKyAyKjUgKyAzKjZcbiAgICB9KTtcblxuICAgIGl0KCdzaG91bGQgaGFuZGxlIHplcm8gdmVjdG9ycycsICgpID0+IHtcbiAgICAgIGNvbnN0IGEgPSBbMSwgMiwgM107XG4gICAgICBjb25zdCBiID0gWzAsIDAsIDBdO1xuXG4gICAgICBjb25zdCByZXN1bHQgPSB3YXNtT3BzLmRvdFByb2R1Y3QoYSwgYik7XG5cbiAgICAgIGV4cGVjdChyZXN1bHQpLnRvQmUoMCk7XG4gICAgfSk7XG5cbiAgICBpdCgnc2hvdWxkIHRocm93IGZvciBtaXNtYXRjaGVkIHZlY3RvciBsZW5ndGhzJywgKCkgPT4ge1xuICAgICAgY29uc3QgYSA9IFsxLCAyLCAzXTtcbiAgICAgIGNvbnN0IGIgPSBbNCwgNV07XG5cbiAgICAgIGV4cGVjdCgoKSA9PiB7XG4gICAgICAgIHdhc21PcHMuZG90UHJvZHVjdChhLCBiKTtcbiAgICAgIH0pLnRvVGhyb3coJ3NhbWUgbGVuZ3RoJyk7XG4gICAgfSk7XG4gIH0pO1xuXG4gIGRlc2NyaWJlKCdCYXRjaCBPcGVyYXRpb25zJywgKCkgPT4ge1xuICAgIGl0KCdzaG91bGQgcGVyZm9ybSBiYXRjaCBtYXRyaXggbXVsdGlwbGljYXRpb24nLCAoKSA9PiB7XG4gICAgICAvLyAyIGJhdGNoZXMgb2YgMngyIG1hdHJpY2VzXG4gICAgICBjb25zdCBiYXRjaEEgPSBbXG4gICAgICAgIDEsIDIsIDMsIDQsICAvLyBGaXJzdCAyeDJcbiAgICAgICAgNSwgNiwgNywgOCAgIC8vIFNlY29uZCAyeDJcbiAgICAgIF07XG4gICAgICBjb25zdCBiYXRjaEIgPSBbXG4gICAgICAgIDEsIDAsIDAsIDEsICAvLyBJZGVudGl0eVxuICAgICAgICAyLCAwLCAwLCAyICAgLy8gMipJZGVudGl0eVxuICAgICAgXTtcblxuICAgICAgY29uc3QgcmVzdWx0ID0gd2FzbU9wcy5iYXRjaE1hdE11bChiYXRjaEEsIGJhdGNoQiwgMiwgMiwgMiwgMik7XG5cbiAgICAgIC8vIEZpcnN0IGJhdGNoOiBBICogSSA9IEFcbiAgICAgIGV4cGVjdChyZXN1bHQuc2xpY2UoMCwgNCkpLnRvRXF1YWwoWzEsIDIsIDMsIDRdKTtcbiAgICAgIFxuICAgICAgLy8gU2Vjb25kIGJhdGNoOiBBICogMkkgPSAyQVxuICAgICAgZXhwZWN0KHJlc3VsdC5zbGljZSg0LCA4KSkudG9FcXVhbChbMTAsIDEyLCAxNCwgMTZdKTtcbiAgICB9KTtcbiAgfSk7XG5cbiAgZGVzY3JpYmUoJ1BlcmZvcm1hbmNlIENoYXJhY3RlcmlzdGljcycsICgpID0+IHtcbiAgICBpdCgnc2hvdWxkIGhhbmRsZSBsYXJnZSBtYXRyaXggbXVsdGlwbGljYXRpb24gZWZmaWNpZW50bHknLCAoKSA9PiB7XG4gICAgICBjb25zdCBzaXplID0gMTAwO1xuICAgICAgY29uc3QgYSA9IG5ldyBBcnJheShzaXplICogc2l6ZSkuZmlsbCgxKTtcbiAgICAgIGNvbnN0IGIgPSBuZXcgQXJyYXkoc2l6ZSAqIHNpemUpLmZpbGwoMik7XG5cbiAgICAgIGNvbnN0IHN0YXJ0VGltZSA9IHBlcmZvcm1hbmNlLm5vdygpO1xuICAgICAgY29uc3QgcmVzdWx0ID0gd2FzbU9wcy5tYXRyaXhNdWx0aXBseShhLCBzaXplLCBzaXplLCBiLCBzaXplLCBzaXplKTtcbiAgICAgIGNvbnN0IGR1cmF0aW9uID0gcGVyZm9ybWFuY2Uubm93KCkgLSBzdGFydFRpbWU7XG5cbiAgICAgIC8vIEFsbCBlbGVtZW50cyBzaG91bGQgYmUgc2l6ZSAqIDIgKHN1bSBvZiByb3cgKiBjb2x1bW4pXG4gICAgICBleHBlY3QocmVzdWx0WzBdKS50b0JlKHNpemUgKiAyKTtcbiAgICAgIGV4cGVjdChyZXN1bHRbcmVzdWx0Lmxlbmd0aCAtIDFdKS50b0JlKHNpemUgKiAyKTtcbiAgICAgIFxuICAgICAgLy8gUGVyZm9ybWFuY2UgYXNzZXJ0aW9uIChhZGp1c3QgYmFzZWQgb24gYWN0dWFsIFdBU00gcGVyZm9ybWFuY2UpXG4gICAgICBleHBlY3QoZHVyYXRpb24pLnRvQmVMZXNzVGhhbigxMDApOyAvLyBTaG91bGQgY29tcGxldGUgaW4gPCAxMDBtc1xuICAgIH0pO1xuICB9KTtcbn0pO1xuXG4vKipcbiAqIENsYXNzaWNhbCBUREQgQmVuZWZpdHMgZm9yIFdBU006XG4gKiBcbiAqIDEuIFRlc3RzIGFjdHVhbCBjb21wdXRhdGlvbiByZXN1bHRzLCBub3QgbW9ja3NcbiAqIDIuIFZlcmlmaWVzIG51bWVyaWNhbCBhY2N1cmFjeVxuICogMy4gQ2FuIGJlbmNobWFyayBwZXJmb3JtYW5jZVxuICogNC4gVGVzdHMgZWRnZSBjYXNlcyBpbiBhbGdvcml0aG1zXG4gKiA1LiBFbnN1cmVzIG1hdGhlbWF0aWNhbCBjb3JyZWN0bmVzc1xuICogXG4gKiBQZXJmZWN0IGZvcjpcbiAqIC0gV0FTTSBjb21wdXRhdGlvbmFsIGtlcm5lbHNcbiAqIC0gU0lNRCBvcGVyYXRpb25zXG4gKiAtIE5ldXJhbCBuZXR3b3JrIHByaW1pdGl2ZXNcbiAqIC0gSW1hZ2Uvc2lnbmFsIHByb2Nlc3NpbmdcbiAqIC0gU2NpZW50aWZpYyBjb21wdXRpbmdcbiAqLyJdLCJ2ZXJzaW9uIjozfQ==