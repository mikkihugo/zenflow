cd490ac6c25e95e9ba4e185b70d53866
/* istanbul ignore next */
function cov_1sgkm3h42x() {
  var path = "/home/mhugo/code/claude-code-flow/src/maestro/agent-reuse/types.ts";
  var hash = "d3793a50ce28ab908c4d48b68173007f12cdfc1b";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/home/mhugo/code/claude-code-flow/src/maestro/agent-reuse/types.ts",
    statementMap: {
      "0": {
        start: {
          line: 6,
          column: 42
        },
        end: {
          line: 23,
          column: 1
        }
      },
      "1": {
        start: {
          line: 24,
          column: 43
        },
        end: {
          line: 30,
          column: 1
        }
      },
      "2": {
        start: {
          line: 31,
          column: 47
        },
        end: {
          line: 36,
          column: 1
        }
      },
      "3": {
        start: {
          line: 37,
          column: 49
        },
        end: {
          line: 48,
          column: 1
        }
      }
    },
    fnMap: {},
    branchMap: {},
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0
    },
    f: {},
    b: {},
    inputSourceMap: {
      file: "/home/mhugo/code/claude-code-flow/src/maestro/agent-reuse/types.ts",
      mappings: "AAAA;;;GAGG;AAgTH,yBAAyB;AACzB,MAAM,CAAC,MAAM,0BAA0B,GAAqB;IAC1D,cAAc,EAAE,GAAG;IACnB,WAAW,EAAE,EAAE;IACf,gBAAgB,EAAE,GAAG;IACrB,gBAAgB,EAAE,EAAE;IACpB,kBAAkB,EAAE,IAAI;IACxB,qBAAqB,EAAE,MAAM;IAC7B,cAAc,EAAE;QACd,UAAU,EAAE,GAAG;QACf,WAAW,EAAE,GAAG;QAChB,YAAY,EAAE,GAAG;QACjB,OAAO,EAAE,IAAI;QACb,QAAQ,EAAE,IAAI;KACf;IACD,iBAAiB,EAAE,UAAU;IAC7B,aAAa,EAAE,QAAQ;IACvB,YAAY,EAAE,SAAS;CACxB,CAAC;AAEF,MAAM,CAAC,MAAM,2BAA2B,GAAsB;IAC5D,WAAW,EAAE,EAAE;IACf,gBAAgB,EAAE,GAAG;IACrB,mBAAmB,EAAE,KAAK;IAC1B,gBAAgB,EAAE,UAAU;IAC5B,eAAe,EAAE,GAAG;CACrB,CAAC;AAEF,MAAM,CAAC,MAAM,+BAA+B,GAA0B;IACpE,cAAc,EAAE,IAAI;IACpB,iBAAiB,EAAE,GAAG;IACtB,aAAa,EAAE,GAAG;IAClB,aAAa,EAAE,OAAO,CAAC,SAAS;CACjC,CAAC;AAEF,MAAM,CAAC,MAAM,iCAAiC,GAA4B;IACxE,cAAc,EAAE;QACd,UAAU,EAAE,GAAG;QACf,WAAW,EAAE,GAAG;QAChB,YAAY,EAAE,GAAG;QACjB,OAAO,EAAE,IAAI;QACb,QAAQ,EAAE,IAAI;KACf;IACD,iBAAiB,EAAE,OAAO,EAAE,aAAa;IACzC,iBAAiB,EAAE,CAAC;IACpB,mBAAmB,EAAE,GAAG;CACzB,CAAC",
      names: [],
      sources: ["/home/mhugo/code/claude-code-flow/src/maestro/agent-reuse/types.ts"],
      sourcesContent: ["/**\n * Types and interfaces for intelligent agent reuse system\n * Following SOLID principles with clear interface segregation\n */\n\nexport interface TaskContext {\n  id: string;\n  type: string;\n  featureName?: string;\n  priority: number;\n  estimatedDuration?: number;\n  complexity: 'low' | 'medium' | 'high';\n  metadata?: Record<string, any>;\n}\n\nexport interface SelectionOptions {\n  maxAgents?: number;\n  preferReuse?: boolean;\n  qualityThreshold?: number;\n  performanceWeight?: number;\n  workloadBalance?: boolean;\n  priorityBonus?: boolean;\n  taskType?: string;\n  preferExperienced?: boolean;\n}\n\nexport interface ExecutionOptions extends SelectionOptions {\n  timeout?: number;\n  retryCount?: number;\n  failureStrategy?: 'abort' | 'retry' | 'fallback';\n}\n\nexport interface RegisteredAgent {\n  id: string;\n  profile: AgentProfile;\n  status: AgentStatus;\n  currentWorkload: number;\n  capabilities: string[];\n  performanceHistory: PerformanceHistory;\n  registeredAt: Date;\n  lastActivity: Date;\n  metadata?: Record<string, any>;\n}\n\nexport interface AvailableAgent extends RegisteredAgent {\n  estimatedCapacity: number;\n  availabilityScore: number;\n}\n\nexport interface ScoredAgent extends AvailableAgent {\n  score: AgentScore;\n  scoreBreakdown: ScoreBreakdown;\n}\n\nexport interface AcquiredAgent {\n  id: string;\n  type: string;\n  capabilities: string[];\n  source: 'reused' | 'spawned';\n  spawnedAt?: Date;\n  reusedAt?: Date;\n  assignedTaskId?: string;\n}\n\nexport interface AgentScore {\n  total: number;\n  breakdown: ScoreBreakdown;\n}\n\nexport interface ScoreBreakdown {\n  capability: number;\n  performance: number;\n  availability: number;\n  success: number;\n  priority: number;\n}\n\nexport interface AgentSelection {\n  selectedAgents: ScoredAgent[];\n  alternativeAgents: ScoredAgent[];\n  selectionReason: string;\n  confidence: number;\n  estimatedSuccess: number;\n}\n\nexport interface TaskResult {\n  success: boolean;\n  output?: any;\n  duration: number;\n  agentMetrics: AgentMetrics[];\n  error?: Error;\n}\n\nexport interface AgentMetrics {\n  agentId: string;\n  taskDuration: number;\n  cpuUsage: number;\n  memoryUsage: number;\n  successRate: number;\n  qualityScore: number;\n}\n\nexport interface PerformanceHistory {\n  tasksCompleted: number;\n  tasksFailed: number;\n  averageDuration: number;\n  successRate: number;\n  qualityScores: number[];\n  lastUpdated: Date;\n  \n  addCompletion(duration: number, estimatedDuration: number): void;\n  addFailure(reason: string): void;\n  getRecentSuccessRate(window?: number): number;\n  getAverageQuality(window?: number): number;\n}\n\nexport interface WorkloadData {\n  agentId: string;\n  currentLoad: number;\n  estimatedCapacity: number;\n  activeTasks: Map<string, ActiveTask>;\n  performanceHistory: PerformanceHistory;\n  lastUpdated: Date;\n}\n\nexport interface ActiveTask {\n  taskId: string;\n  startTime: Date;\n  estimatedDuration: number;\n  status: 'running' | 'paused' | 'completing';\n}\n\nexport interface RegistryStatistics {\n  totalAgents: number;\n  availableAgents: number;\n  busyAgents: number;\n  averageWorkload: number;\n  capabilityCoverage: number;\n  registryHealth: number;\n}\n\nexport interface WorkloadStatistics {\n  totalAgents: number;\n  averageLoad: number;\n  overloadedAgents: number;\n  idleAgents: number;\n  totalActiveTasks: number;\n  loadDistribution: LoadDistribution;\n}\n\nexport interface LoadDistribution {\n  low: number;    // 0-0.3 load\n  medium: number; // 0.3-0.7 load\n  high: number;   // 0.7-1.0 load\n  overload: number; // >1.0 load\n}\n\nexport interface LoadBalancingResult {\n  assignments: TaskAssignment[];\n  balanceScore: number;\n  estimatedCompletion: Date;\n  recommendations: string[];\n}\n\nexport interface TaskAssignment {\n  taskId: string;\n  agentId: string;\n  estimatedStartTime: Date;\n  estimatedDuration: number;\n  confidence: number;\n}\n\nexport interface PoolOptimizationResult {\n  initialStats: RegistryStatistics;\n  recommendations: OptimizationRecommendation[];\n  results: OptimizationResult[];\n  optimizedAt: Date;\n}\n\nexport interface OptimizationRecommendation {\n  type: 'spawn' | 'cleanup' | 'rebalance' | 'upgrade';\n  reason: string;\n  expectedImpact: number;\n  priority: 'high' | 'medium' | 'low';\n  agentId?: string;\n  agentType?: string;\n}\n\nexport interface OptimizationResult {\n  recommendation: OptimizationRecommendation;\n  applied: boolean;\n  actualImpact?: number;\n  error?: string;\n}\n\nexport type AgentStatus = \n  | 'available'    // Ready for new tasks\n  | 'busy'         // Currently executing tasks\n  | 'overloaded'   // Above capacity threshold\n  | 'maintenance'  // Undergoing maintenance\n  | 'error'        // In error state\n  | 'offline';     // Not responding\n\nexport interface AgentProfile {\n  id: string;\n  name: string;\n  type: string;\n  capabilities?: string[];\n  maxConcurrentTasks: number;\n  priority: number;\n  metadata?: Record<string, any>;\n}\n\nexport interface TaskDefinition {\n  id: string;\n  type: string;\n  description: string;\n  input: any;\n  priority: number;\n  metadata?: Record<string, any>;\n}\n\nexport interface TaskRequirements {\n  capabilities: string[];\n  estimatedDuration?: number;\n  maxDuration?: number;\n  qualityThreshold?: number;\n  specialRequirements?: string[];\n}\n\n// Strategy pattern interfaces\nexport interface SelectionStrategy {\n  selectAgents(scoredAgents: ScoredAgent[], options: SelectionOptions): AgentSelection;\n}\n\nexport interface ReuseStrategy {\n  findReusableAgents(\n    requiredCapabilities: string[],\n    taskContext: TaskContext,\n    maxAgents: number\n  ): Promise<AcquiredAgent[]>;\n}\n\nexport interface ScoringStrategy {\n  getWeights(taskContext: TaskContext): ScoringWeights;\n}\n\nexport interface ScoringWeights {\n  capability: number;\n  performance: number;\n  availability: number;\n  success: number;\n  priority: number;\n}\n\n// Configuration interfaces\nexport interface AgentReuseConfig {\n  // Selection preferences\n  reuseThreshold: number;\n  maxPoolSize: number;\n  cleanupThreshold: number;\n  \n  // Performance tuning\n  selectionTimeout: number;\n  monitoringInterval: number;\n  optimizationFrequency: number;\n  \n  // Scoring weights\n  scoringWeights: ScoringWeights;\n  \n  // Strategy selection\n  selectionStrategy: 'balanced' | 'performance' | 'efficiency' | 'custom';\n  reuseStrategy: 'greedy' | 'conservative' | 'adaptive';\n  poolStrategy: 'static' | 'dynamic' | 'predictive';\n}\n\nexport interface PoolManagerConfig {\n  maxPoolSize: number;\n  cleanupThreshold: number;\n  maintenanceInterval: number;\n  spawningStrategy: 'conservative' | 'aggressive' | 'adaptive';\n  reusePreference: number; // 0-1, higher values prefer reuse more\n}\n\nexport interface WorkloadMonitorConfig {\n  updateInterval: number;\n  overloadThreshold: number;\n  idleThreshold: number;\n  historyWindow: number;\n}\n\nexport interface PerformanceScorerConfig {\n  defaultWeights: ScoringWeights;\n  performanceWindow: number;\n  minimumSampleSize: number;\n  confidenceThreshold: number;\n}\n\n// Subscriber interfaces for Observer pattern\nexport interface AgentStatusSubscriber {\n  onAgentStatusChange(agentId: string, status: AgentStatus, metadata?: any): void;\n}\n\nexport interface WorkloadSubscriber {\n  onWorkloadChange(agentId: string, workload: WorkloadData): void;\n}\n\n// Default configurations\nexport const DEFAULT_AGENT_REUSE_CONFIG: AgentReuseConfig = {\n  reuseThreshold: 0.7,\n  maxPoolSize: 20,\n  cleanupThreshold: 0.1,\n  selectionTimeout: 50,\n  monitoringInterval: 5000,\n  optimizationFrequency: 300000,\n  scoringWeights: {\n    capability: 0.4,\n    performance: 0.3,\n    availability: 0.2,\n    success: 0.08,\n    priority: 0.02\n  },\n  selectionStrategy: 'balanced',\n  reuseStrategy: 'greedy',\n  poolStrategy: 'dynamic'\n};\n\nexport const DEFAULT_POOL_MANAGER_CONFIG: PoolManagerConfig = {\n  maxPoolSize: 20,\n  cleanupThreshold: 0.1,\n  maintenanceInterval: 60000,\n  spawningStrategy: 'adaptive',\n  reusePreference: 0.8\n};\n\nexport const DEFAULT_WORKLOAD_MONITOR_CONFIG: WorkloadMonitorConfig = {\n  updateInterval: 5000,\n  overloadThreshold: 0.8,\n  idleThreshold: 0.1,\n  historyWindow: 3600000 // 1 hour\n};\n\nexport const DEFAULT_PERFORMANCE_SCORER_CONFIG: PerformanceScorerConfig = {\n  defaultWeights: {\n    capability: 0.4,\n    performance: 0.3,\n    availability: 0.2,\n    success: 0.08,\n    priority: 0.02\n  },\n  performanceWindow: 1800000, // 30 minutes\n  minimumSampleSize: 3,\n  confidenceThreshold: 0.6\n};"],
      version: 3
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "d3793a50ce28ab908c4d48b68173007f12cdfc1b"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_1sgkm3h42x = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_1sgkm3h42x();
/**
 * Types and interfaces for intelligent agent reuse system
 * Following SOLID principles with clear interface segregation
 */
// Default configurations
export const DEFAULT_AGENT_REUSE_CONFIG =
/* istanbul ignore next */
(cov_1sgkm3h42x().s[0]++, {
  reuseThreshold: 0.7,
  maxPoolSize: 20,
  cleanupThreshold: 0.1,
  selectionTimeout: 50,
  monitoringInterval: 5000,
  optimizationFrequency: 300000,
  scoringWeights: {
    capability: 0.4,
    performance: 0.3,
    availability: 0.2,
    success: 0.08,
    priority: 0.02
  },
  selectionStrategy: 'balanced',
  reuseStrategy: 'greedy',
  poolStrategy: 'dynamic'
});
export const DEFAULT_POOL_MANAGER_CONFIG =
/* istanbul ignore next */
(cov_1sgkm3h42x().s[1]++, {
  maxPoolSize: 20,
  cleanupThreshold: 0.1,
  maintenanceInterval: 60000,
  spawningStrategy: 'adaptive',
  reusePreference: 0.8
});
export const DEFAULT_WORKLOAD_MONITOR_CONFIG =
/* istanbul ignore next */
(cov_1sgkm3h42x().s[2]++, {
  updateInterval: 5000,
  overloadThreshold: 0.8,
  idleThreshold: 0.1,
  historyWindow: 3600000 // 1 hour
});
export const DEFAULT_PERFORMANCE_SCORER_CONFIG =
/* istanbul ignore next */
(cov_1sgkm3h42x().s[3]++, {
  defaultWeights: {
    capability: 0.4,
    performance: 0.3,
    availability: 0.2,
    success: 0.08,
    priority: 0.02
  },
  performanceWindow: 1800000,
  // 30 minutes
  minimumSampleSize: 3,
  confidenceThreshold: 0.6
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,