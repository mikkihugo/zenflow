84604cf7e3dff1bd79f3a5e485bc196b
/* istanbul ignore next */
function cov_m7wz7znsj() {
  var path = "/home/mhugo/code/claude-code-flow/src/mcp/core/agui-tool-executor.ts";
  var hash = "08af53111bcd9113d08a8c79c925b05a008436e1";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/home/mhugo/code/claude-code-flow/src/mcp/core/agui-tool-executor.ts",
    statementMap: {},
    fnMap: {},
    branchMap: {},
    s: {},
    f: {},
    b: {},
    inputSourceMap: {
      file: "/home/mhugo/code/claude-code-flow/src/mcp/core/agui-tool-executor.ts",
      mappings: ";AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;iBAoIiB",
      names: [],
      sources: ["/home/mhugo/code/claude-code-flow/src/mcp/core/agui-tool-executor.ts"],
      sourcesContent: ["\n/**  AG-UI Enhanced MCP Tool Executor\n\n/** Extends the existing MCP tool executor with AG-UI protocol events\n/** Provides real-time tool execution updates via standardized AG-UI events\n\n * @module AGUIMCPToolExecutor\n\nimport { AGUIAdapter  } from '../ai/agui-adapter.js';\nimport { MCPToolExecutor  } from '.';\n\n/** AG-UI Enhanced Tool Executor\n/** Wraps MCP tool execution with AG-UI event emission\n\n// export class AGUIMCPToolExecutor extends MCPToolExecutor {\n  constructor(server = {}) {\n    super(server);\n;\n    // Create AG-UI adapter for tool execution events\n    this.aguiAdapter = new AGUIAdapter({ sessionId = {emitToolEvents = {toolCallsWithEvents = {  }) {\n    const { parentMessageId } = context;\n    const _toolCallId = null;\n;\n    try {\n      // Emit AG-UI tool call start event\n  if(this.options.emitToolEvents) {\n        toolCallId = this.aguiAdapter.startToolCall(name, null, parentMessageId);\n;\n        // Emit arguments if enabled\n  if(this.options.includeArgs && args) {\n          this.aguiAdapter.addToolCallArgs(JSON.stringify(args), toolCallId);\n        //         }\n\n        this.aguiStats.toolCallsWithEvents++;\n      //       }\n\n      // Emit progress event\n  if(this.options.emitProgressEvents) {\n        this.aguiAdapter.emitCustomEvent('tool_execution_started', {toolName = // // await super.executeTool(name, args);'\n\n      // Emit AG-UI tool call completion events\n  if(this.options.emitToolEvents && toolCallId) {\n        this.aguiAdapter.endToolCall(toolCallId);\n;\n        // Emit result if enabled\n  if(this.options.includeResults) {\n          this.aguiAdapter.emitToolCallResult(result, toolCallId);\n        //         }\n      //       }\n\n      // Emit progress completion event\n  if(this.options.emitProgressEvents) {\n        this.aguiAdapter.emitCustomEvent('tool_execution_completed', {')\n          toolName = {name = {name = {}) {\n    const _chainId = `chain-${Date.now()}`;`\n\n    this.aguiAdapter.emitCustomEvent('tool_chain_started', {')\n      chainId,tools = > t.name),timestamp = // // await this.executeTool(name, args, {\n..context,\n          chainId,);\n          stepIndex = {}) {\n    const _toolCallId = this.aguiAdapter.startToolCall(name, null, context.parentMessageId);\n      // Create a progress callback for streaming updates\n\n      // return result;\n    //   // LINT: unreachable code removed}\n\n/** Get AG-UI adapter for external event emission\n\n  getAGUIAdapter() ;\n    // return this.aguiAdapter;\n    // ; // LINT: unreachable code removed\n\n/** Get enhanced statistics including AG-UI metrics\n\n  getEnhancedStats() ;\n    // return {\n..this.getExecutionStats(),\n    // agui = { ...this.options, ...options  // LINT: unreachable code removed};\n    // return this;\n    // ; // LINT: unreachable code removed\n\n/** Reset AG-UI adapter state\n\n  resetAGUIState() ;\n    this.aguiAdapter.reset();\n    this.aguiStats = {toolCallsWithEvents = {}) {\n  // return new AGUIMCPToolExecutor(server, options);\n    // ; // LINT: unreachable code removed\n\n/** Middleware to wrap existing tool executor with AG-UI capabilities\n\n// export function _enhanceToolExecutorWithAGUI(existingExecutor = {}) {\n  const _aguiAdapter = new AGUIAdapter({ sessionId = existingExecutor.executeTool.bind(existingExecutor);\n\n  existingExecutor.executeTool = async(name, args, context = {  }) => {\n    const _toolCallId = null;\n;\n    try {\n      // Start AG-UI tool call\n      toolCallId = aguiAdapter.startToolCall(name, null, context.parentMessageId);\n  if(options.includeArgs !== false && args) {\n        aguiAdapter.addToolCallArgs(JSON.stringify(args), toolCallId);\n      //       }\n\n      // Execute original tool\n// const _result = awaitoriginalExecuteTool(name, args, context);\n\n      // Complete AG-UI tool call\n      aguiAdapter.endToolCall(toolCallId);\n  if(options.includeResults !== false) {\n        aguiAdapter.emitToolCallResult(result, toolCallId);\n      //       }\n\n      // return result;\n    // ; // LINT: unreachable code removed\n    } catch(_error) {\n      if(toolCallId) {\n        aguiAdapter.endToolCall(toolCallId);\n      }\n        aguiAdapter.emitToolCallResult('Error occurred');\n  existingExecutor.connectToAGUIBus = () => {\n    aguiAdapter.connectGlobalEmitter(eventBus);\n    return existingExecutor;\n    //   // LINT: unreachable code removed};\n\n  return existingExecutor;\n// }\n\n// export default AGUIMCPToolExecutor;\n\n}}}}}}}}}}}}}}}}}}}}}}}))\n\n/* End of file */"],
      version: 3
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "08af53111bcd9113d08a8c79c925b05a008436e1"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_m7wz7znsj = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_m7wz7znsj();
export {};
/**  AG-UI Enhanced MCP Tool Executor

/** Extends the existing MCP tool executor with AG-UI protocol events
/** Provides real-time tool execution updates via standardized AG-UI events

 * @module AGUIMCPToolExecutor

import { AGUIAdapter  } from '../ai/agui-adapter.js';
import { MCPToolExecutor  } from '.';

/** AG-UI Enhanced Tool Executor
/** Wraps MCP tool execution with AG-UI event emission

// export class AGUIMCPToolExecutor extends MCPToolExecutor {
  constructor(server = {}) {
    super(server);
;
    // Create AG-UI adapter for tool execution events
    this.aguiAdapter = new AGUIAdapter({ sessionId = {emitToolEvents = {toolCallsWithEvents = {  }) {
    const { parentMessageId } = context;
    const _toolCallId = null;
;
    try {
      // Emit AG-UI tool call start event
  if(this.options.emitToolEvents) {
        toolCallId = this.aguiAdapter.startToolCall(name, null, parentMessageId);
;
        // Emit arguments if enabled
  if(this.options.includeArgs && args) {
          this.aguiAdapter.addToolCallArgs(JSON.stringify(args), toolCallId);
        //         }

        this.aguiStats.toolCallsWithEvents++;
      //       }

      // Emit progress event
  if(this.options.emitProgressEvents) {
        this.aguiAdapter.emitCustomEvent('tool_execution_started', {toolName = // // await super.executeTool(name, args);'

      // Emit AG-UI tool call completion events
  if(this.options.emitToolEvents && toolCallId) {
        this.aguiAdapter.endToolCall(toolCallId);
;
        // Emit result if enabled
  if(this.options.includeResults) {
          this.aguiAdapter.emitToolCallResult(result, toolCallId);
        //         }
      //       }

      // Emit progress completion event
  if(this.options.emitProgressEvents) {
        this.aguiAdapter.emitCustomEvent('tool_execution_completed', {')
          toolName = {name = {name = {}) {
    const _chainId = `chain-${Date.now()}`;`

    this.aguiAdapter.emitCustomEvent('tool_chain_started', {')
      chainId,tools = > t.name),timestamp = // // await this.executeTool(name, args, {
..context,
          chainId,);
          stepIndex = {}) {
    const _toolCallId = this.aguiAdapter.startToolCall(name, null, context.parentMessageId);
      // Create a progress callback for streaming updates

      // return result;
    //   // LINT: unreachable code removed}

/** Get AG-UI adapter for external event emission

  getAGUIAdapter() ;
    // return this.aguiAdapter;
    // ; // LINT: unreachable code removed

/** Get enhanced statistics including AG-UI metrics

  getEnhancedStats() ;
    // return {
..this.getExecutionStats(),
    // agui = { ...this.options, ...options  // LINT: unreachable code removed};
    // return this;
    // ; // LINT: unreachable code removed

/** Reset AG-UI adapter state

  resetAGUIState() ;
    this.aguiAdapter.reset();
    this.aguiStats = {toolCallsWithEvents = {}) {
  // return new AGUIMCPToolExecutor(server, options);
    // ; // LINT: unreachable code removed

/** Middleware to wrap existing tool executor with AG-UI capabilities

// export function _enhanceToolExecutorWithAGUI(existingExecutor = {}) {
  const _aguiAdapter = new AGUIAdapter({ sessionId = existingExecutor.executeTool.bind(existingExecutor);

  existingExecutor.executeTool = async(name, args, context = {  }) => {
    const _toolCallId = null;
;
    try {
      // Start AG-UI tool call
      toolCallId = aguiAdapter.startToolCall(name, null, context.parentMessageId);
  if(options.includeArgs !== false && args) {
        aguiAdapter.addToolCallArgs(JSON.stringify(args), toolCallId);
      //       }

      // Execute original tool
// const _result = awaitoriginalExecuteTool(name, args, context);

      // Complete AG-UI tool call
      aguiAdapter.endToolCall(toolCallId);
  if(options.includeResults !== false) {
        aguiAdapter.emitToolCallResult(result, toolCallId);
      //       }

      // return result;
    // ; // LINT: unreachable code removed
    } catch(_error) {
      if(toolCallId) {
        aguiAdapter.endToolCall(toolCallId);
      }
        aguiAdapter.emitToolCallResult('Error occurred');
  existingExecutor.connectToAGUIBus = () => {
    aguiAdapter.connectGlobalEmitter(eventBus);
    return existingExecutor;
    //   // LINT: unreachable code removed};

  return existingExecutor;
// }

// export default AGUIMCPToolExecutor;

}}}}}}}}}}}}}}}}}}}}}}}))

/* End of file */
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6W10sInNvdXJjZXMiOlsiL2hvbWUvbWh1Z28vY29kZS9jbGF1ZGUtY29kZS1mbG93L3NyYy9tY3AvY29yZS9hZ3VpLXRvb2wtZXhlY3V0b3IudHMiXSwic291cmNlc0NvbnRlbnQiOlsiXG4vKiogIEFHLVVJIEVuaGFuY2VkIE1DUCBUb29sIEV4ZWN1dG9yXG5cbi8qKiBFeHRlbmRzIHRoZSBleGlzdGluZyBNQ1AgdG9vbCBleGVjdXRvciB3aXRoIEFHLVVJIHByb3RvY29sIGV2ZW50c1xuLyoqIFByb3ZpZGVzIHJlYWwtdGltZSB0b29sIGV4ZWN1dGlvbiB1cGRhdGVzIHZpYSBzdGFuZGFyZGl6ZWQgQUctVUkgZXZlbnRzXG5cbiAqIEBtb2R1bGUgQUdVSU1DUFRvb2xFeGVjdXRvclxuXG5pbXBvcnQgeyBBR1VJQWRhcHRlciAgfSBmcm9tICcuLi9haS9hZ3VpLWFkYXB0ZXIuanMnO1xuaW1wb3J0IHsgTUNQVG9vbEV4ZWN1dG9yICB9IGZyb20gJy4nO1xuXG4vKiogQUctVUkgRW5oYW5jZWQgVG9vbCBFeGVjdXRvclxuLyoqIFdyYXBzIE1DUCB0b29sIGV4ZWN1dGlvbiB3aXRoIEFHLVVJIGV2ZW50IGVtaXNzaW9uXG5cbi8vIGV4cG9ydCBjbGFzcyBBR1VJTUNQVG9vbEV4ZWN1dG9yIGV4dGVuZHMgTUNQVG9vbEV4ZWN1dG9yIHtcbiAgY29uc3RydWN0b3Ioc2VydmVyID0ge30pIHtcbiAgICBzdXBlcihzZXJ2ZXIpO1xuO1xuICAgIC8vIENyZWF0ZSBBRy1VSSBhZGFwdGVyIGZvciB0b29sIGV4ZWN1dGlvbiBldmVudHNcbiAgICB0aGlzLmFndWlBZGFwdGVyID0gbmV3IEFHVUlBZGFwdGVyKHsgc2Vzc2lvbklkID0ge2VtaXRUb29sRXZlbnRzID0ge3Rvb2xDYWxsc1dpdGhFdmVudHMgPSB7ICB9KSB7XG4gICAgY29uc3QgeyBwYXJlbnRNZXNzYWdlSWQgfSA9IGNvbnRleHQ7XG4gICAgY29uc3QgX3Rvb2xDYWxsSWQgPSBudWxsO1xuO1xuICAgIHRyeSB7XG4gICAgICAvLyBFbWl0IEFHLVVJIHRvb2wgY2FsbCBzdGFydCBldmVudFxuICBpZih0aGlzLm9wdGlvbnMuZW1pdFRvb2xFdmVudHMpIHtcbiAgICAgICAgdG9vbENhbGxJZCA9IHRoaXMuYWd1aUFkYXB0ZXIuc3RhcnRUb29sQ2FsbChuYW1lLCBudWxsLCBwYXJlbnRNZXNzYWdlSWQpO1xuO1xuICAgICAgICAvLyBFbWl0IGFyZ3VtZW50cyBpZiBlbmFibGVkXG4gIGlmKHRoaXMub3B0aW9ucy5pbmNsdWRlQXJncyAmJiBhcmdzKSB7XG4gICAgICAgICAgdGhpcy5hZ3VpQWRhcHRlci5hZGRUb29sQ2FsbEFyZ3MoSlNPTi5zdHJpbmdpZnkoYXJncyksIHRvb2xDYWxsSWQpO1xuICAgICAgICAvLyAgICAgICAgIH1cblxuICAgICAgICB0aGlzLmFndWlTdGF0cy50b29sQ2FsbHNXaXRoRXZlbnRzKys7XG4gICAgICAvLyAgICAgICB9XG5cbiAgICAgIC8vIEVtaXQgcHJvZ3Jlc3MgZXZlbnRcbiAgaWYodGhpcy5vcHRpb25zLmVtaXRQcm9ncmVzc0V2ZW50cykge1xuICAgICAgICB0aGlzLmFndWlBZGFwdGVyLmVtaXRDdXN0b21FdmVudCgndG9vbF9leGVjdXRpb25fc3RhcnRlZCcsIHt0b29sTmFtZSA9IC8vIC8vIGF3YWl0IHN1cGVyLmV4ZWN1dGVUb29sKG5hbWUsIGFyZ3MpOydcblxuICAgICAgLy8gRW1pdCBBRy1VSSB0b29sIGNhbGwgY29tcGxldGlvbiBldmVudHNcbiAgaWYodGhpcy5vcHRpb25zLmVtaXRUb29sRXZlbnRzICYmIHRvb2xDYWxsSWQpIHtcbiAgICAgICAgdGhpcy5hZ3VpQWRhcHRlci5lbmRUb29sQ2FsbCh0b29sQ2FsbElkKTtcbjtcbiAgICAgICAgLy8gRW1pdCByZXN1bHQgaWYgZW5hYmxlZFxuICBpZih0aGlzLm9wdGlvbnMuaW5jbHVkZVJlc3VsdHMpIHtcbiAgICAgICAgICB0aGlzLmFndWlBZGFwdGVyLmVtaXRUb29sQ2FsbFJlc3VsdChyZXN1bHQsIHRvb2xDYWxsSWQpO1xuICAgICAgICAvLyAgICAgICAgIH1cbiAgICAgIC8vICAgICAgIH1cblxuICAgICAgLy8gRW1pdCBwcm9ncmVzcyBjb21wbGV0aW9uIGV2ZW50XG4gIGlmKHRoaXMub3B0aW9ucy5lbWl0UHJvZ3Jlc3NFdmVudHMpIHtcbiAgICAgICAgdGhpcy5hZ3VpQWRhcHRlci5lbWl0Q3VzdG9tRXZlbnQoJ3Rvb2xfZXhlY3V0aW9uX2NvbXBsZXRlZCcsIHsnKVxuICAgICAgICAgIHRvb2xOYW1lID0ge25hbWUgPSB7bmFtZSA9IHt9KSB7XG4gICAgY29uc3QgX2NoYWluSWQgPSBgY2hhaW4tJHtEYXRlLm5vdygpfWA7YFxuXG4gICAgdGhpcy5hZ3VpQWRhcHRlci5lbWl0Q3VzdG9tRXZlbnQoJ3Rvb2xfY2hhaW5fc3RhcnRlZCcsIHsnKVxuICAgICAgY2hhaW5JZCx0b29scyA9ID4gdC5uYW1lKSx0aW1lc3RhbXAgPSAvLyAvLyBhd2FpdCB0aGlzLmV4ZWN1dGVUb29sKG5hbWUsIGFyZ3MsIHtcbi4uY29udGV4dCxcbiAgICAgICAgICBjaGFpbklkLCk7XG4gICAgICAgICAgc3RlcEluZGV4ID0ge30pIHtcbiAgICBjb25zdCBfdG9vbENhbGxJZCA9IHRoaXMuYWd1aUFkYXB0ZXIuc3RhcnRUb29sQ2FsbChuYW1lLCBudWxsLCBjb250ZXh0LnBhcmVudE1lc3NhZ2VJZCk7XG4gICAgICAvLyBDcmVhdGUgYSBwcm9ncmVzcyBjYWxsYmFjayBmb3Igc3RyZWFtaW5nIHVwZGF0ZXNcblxuICAgICAgLy8gcmV0dXJuIHJlc3VsdDtcbiAgICAvLyAgIC8vIExJTlQ6IHVucmVhY2hhYmxlIGNvZGUgcmVtb3ZlZH1cblxuLyoqIEdldCBBRy1VSSBhZGFwdGVyIGZvciBleHRlcm5hbCBldmVudCBlbWlzc2lvblxuXG4gIGdldEFHVUlBZGFwdGVyKCkgO1xuICAgIC8vIHJldHVybiB0aGlzLmFndWlBZGFwdGVyO1xuICAgIC8vIDsgLy8gTElOVDogdW5yZWFjaGFibGUgY29kZSByZW1vdmVkXG5cbi8qKiBHZXQgZW5oYW5jZWQgc3RhdGlzdGljcyBpbmNsdWRpbmcgQUctVUkgbWV0cmljc1xuXG4gIGdldEVuaGFuY2VkU3RhdHMoKSA7XG4gICAgLy8gcmV0dXJuIHtcbi4udGhpcy5nZXRFeGVjdXRpb25TdGF0cygpLFxuICAgIC8vIGFndWkgPSB7IC4uLnRoaXMub3B0aW9ucywgLi4ub3B0aW9ucyAgLy8gTElOVDogdW5yZWFjaGFibGUgY29kZSByZW1vdmVkfTtcbiAgICAvLyByZXR1cm4gdGhpcztcbiAgICAvLyA7IC8vIExJTlQ6IHVucmVhY2hhYmxlIGNvZGUgcmVtb3ZlZFxuXG4vKiogUmVzZXQgQUctVUkgYWRhcHRlciBzdGF0ZVxuXG4gIHJlc2V0QUdVSVN0YXRlKCkgO1xuICAgIHRoaXMuYWd1aUFkYXB0ZXIucmVzZXQoKTtcbiAgICB0aGlzLmFndWlTdGF0cyA9IHt0b29sQ2FsbHNXaXRoRXZlbnRzID0ge30pIHtcbiAgLy8gcmV0dXJuIG5ldyBBR1VJTUNQVG9vbEV4ZWN1dG9yKHNlcnZlciwgb3B0aW9ucyk7XG4gICAgLy8gOyAvLyBMSU5UOiB1bnJlYWNoYWJsZSBjb2RlIHJlbW92ZWRcblxuLyoqIE1pZGRsZXdhcmUgdG8gd3JhcCBleGlzdGluZyB0b29sIGV4ZWN1dG9yIHdpdGggQUctVUkgY2FwYWJpbGl0aWVzXG5cbi8vIGV4cG9ydCBmdW5jdGlvbiBfZW5oYW5jZVRvb2xFeGVjdXRvcldpdGhBR1VJKGV4aXN0aW5nRXhlY3V0b3IgPSB7fSkge1xuICBjb25zdCBfYWd1aUFkYXB0ZXIgPSBuZXcgQUdVSUFkYXB0ZXIoeyBzZXNzaW9uSWQgPSBleGlzdGluZ0V4ZWN1dG9yLmV4ZWN1dGVUb29sLmJpbmQoZXhpc3RpbmdFeGVjdXRvcik7XG5cbiAgZXhpc3RpbmdFeGVjdXRvci5leGVjdXRlVG9vbCA9IGFzeW5jKG5hbWUsIGFyZ3MsIGNvbnRleHQgPSB7ICB9KSA9PiB7XG4gICAgY29uc3QgX3Rvb2xDYWxsSWQgPSBudWxsO1xuO1xuICAgIHRyeSB7XG4gICAgICAvLyBTdGFydCBBRy1VSSB0b29sIGNhbGxcbiAgICAgIHRvb2xDYWxsSWQgPSBhZ3VpQWRhcHRlci5zdGFydFRvb2xDYWxsKG5hbWUsIG51bGwsIGNvbnRleHQucGFyZW50TWVzc2FnZUlkKTtcbiAgaWYob3B0aW9ucy5pbmNsdWRlQXJncyAhPT0gZmFsc2UgJiYgYXJncykge1xuICAgICAgICBhZ3VpQWRhcHRlci5hZGRUb29sQ2FsbEFyZ3MoSlNPTi5zdHJpbmdpZnkoYXJncyksIHRvb2xDYWxsSWQpO1xuICAgICAgLy8gICAgICAgfVxuXG4gICAgICAvLyBFeGVjdXRlIG9yaWdpbmFsIHRvb2xcbi8vIGNvbnN0IF9yZXN1bHQgPSBhd2FpdG9yaWdpbmFsRXhlY3V0ZVRvb2wobmFtZSwgYXJncywgY29udGV4dCk7XG5cbiAgICAgIC8vIENvbXBsZXRlIEFHLVVJIHRvb2wgY2FsbFxuICAgICAgYWd1aUFkYXB0ZXIuZW5kVG9vbENhbGwodG9vbENhbGxJZCk7XG4gIGlmKG9wdGlvbnMuaW5jbHVkZVJlc3VsdHMgIT09IGZhbHNlKSB7XG4gICAgICAgIGFndWlBZGFwdGVyLmVtaXRUb29sQ2FsbFJlc3VsdChyZXN1bHQsIHRvb2xDYWxsSWQpO1xuICAgICAgLy8gICAgICAgfVxuXG4gICAgICAvLyByZXR1cm4gcmVzdWx0O1xuICAgIC8vIDsgLy8gTElOVDogdW5yZWFjaGFibGUgY29kZSByZW1vdmVkXG4gICAgfSBjYXRjaChfZXJyb3IpIHtcbiAgICAgIGlmKHRvb2xDYWxsSWQpIHtcbiAgICAgICAgYWd1aUFkYXB0ZXIuZW5kVG9vbENhbGwodG9vbENhbGxJZCk7XG4gICAgICB9XG4gICAgICAgIGFndWlBZGFwdGVyLmVtaXRUb29sQ2FsbFJlc3VsdCgnRXJyb3Igb2NjdXJyZWQnKTtcbiAgZXhpc3RpbmdFeGVjdXRvci5jb25uZWN0VG9BR1VJQnVzID0gKCkgPT4ge1xuICAgIGFndWlBZGFwdGVyLmNvbm5lY3RHbG9iYWxFbWl0dGVyKGV2ZW50QnVzKTtcbiAgICByZXR1cm4gZXhpc3RpbmdFeGVjdXRvcjtcbiAgICAvLyAgIC8vIExJTlQ6IHVucmVhY2hhYmxlIGNvZGUgcmVtb3ZlZH07XG5cbiAgcmV0dXJuIGV4aXN0aW5nRXhlY3V0b3I7XG4vLyB9XG5cbi8vIGV4cG9ydCBkZWZhdWx0IEFHVUlNQ1BUb29sRXhlY3V0b3I7XG5cbn19fX19fX19fX19fX19fX19fX19fX19KSlcblxuLyogRW5kIG9mIGZpbGUgKi8iXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFDQSIsImlnbm9yZUxpc3QiOltdfQ==