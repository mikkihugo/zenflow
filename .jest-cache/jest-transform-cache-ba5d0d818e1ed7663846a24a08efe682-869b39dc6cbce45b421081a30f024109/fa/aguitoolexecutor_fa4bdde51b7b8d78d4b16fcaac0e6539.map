{"version":3,"names":[],"sources":["/home/mhugo/code/claude-code-flow/src/mcp/core/agui-tool-executor.ts"],"sourcesContent":["\n/**  AG-UI Enhanced MCP Tool Executor\n\n/** Extends the existing MCP tool executor with AG-UI protocol events\n/** Provides real-time tool execution updates via standardized AG-UI events\n\n * @module AGUIMCPToolExecutor\n\nimport { AGUIAdapter  } from '../ai/agui-adapter.js';\nimport { MCPToolExecutor  } from '.';\n\n/** AG-UI Enhanced Tool Executor\n/** Wraps MCP tool execution with AG-UI event emission\n\n// export class AGUIMCPToolExecutor extends MCPToolExecutor {\n  constructor(server = {}) {\n    super(server);\n;\n    // Create AG-UI adapter for tool execution events\n    this.aguiAdapter = new AGUIAdapter({ sessionId = {emitToolEvents = {toolCallsWithEvents = {  }) {\n    const { parentMessageId } = context;\n    const _toolCallId = null;\n;\n    try {\n      // Emit AG-UI tool call start event\n  if(this.options.emitToolEvents) {\n        toolCallId = this.aguiAdapter.startToolCall(name, null, parentMessageId);\n;\n        // Emit arguments if enabled\n  if(this.options.includeArgs && args) {\n          this.aguiAdapter.addToolCallArgs(JSON.stringify(args), toolCallId);\n        //         }\n\n        this.aguiStats.toolCallsWithEvents++;\n      //       }\n\n      // Emit progress event\n  if(this.options.emitProgressEvents) {\n        this.aguiAdapter.emitCustomEvent('tool_execution_started', {toolName = // // await super.executeTool(name, args);'\n\n      // Emit AG-UI tool call completion events\n  if(this.options.emitToolEvents && toolCallId) {\n        this.aguiAdapter.endToolCall(toolCallId);\n;\n        // Emit result if enabled\n  if(this.options.includeResults) {\n          this.aguiAdapter.emitToolCallResult(result, toolCallId);\n        //         }\n      //       }\n\n      // Emit progress completion event\n  if(this.options.emitProgressEvents) {\n        this.aguiAdapter.emitCustomEvent('tool_execution_completed', {')\n          toolName = {name = {name = {}) {\n    const _chainId = `chain-${Date.now()}`;`\n\n    this.aguiAdapter.emitCustomEvent('tool_chain_started', {')\n      chainId,tools = > t.name),timestamp = // // await this.executeTool(name, args, {\n..context,\n          chainId,);\n          stepIndex = {}) {\n    const _toolCallId = this.aguiAdapter.startToolCall(name, null, context.parentMessageId);\n      // Create a progress callback for streaming updates\n\n      // return result;\n    //   // LINT: unreachable code removed}\n\n/** Get AG-UI adapter for external event emission\n\n  getAGUIAdapter() ;\n    // return this.aguiAdapter;\n    // ; // LINT: unreachable code removed\n\n/** Get enhanced statistics including AG-UI metrics\n\n  getEnhancedStats() ;\n    // return {\n..this.getExecutionStats(),\n    // agui = { ...this.options, ...options  // LINT: unreachable code removed};\n    // return this;\n    // ; // LINT: unreachable code removed\n\n/** Reset AG-UI adapter state\n\n  resetAGUIState() ;\n    this.aguiAdapter.reset();\n    this.aguiStats = {toolCallsWithEvents = {}) {\n  // return new AGUIMCPToolExecutor(server, options);\n    // ; // LINT: unreachable code removed\n\n/** Middleware to wrap existing tool executor with AG-UI capabilities\n\n// export function _enhanceToolExecutorWithAGUI(existingExecutor = {}) {\n  const _aguiAdapter = new AGUIAdapter({ sessionId = existingExecutor.executeTool.bind(existingExecutor);\n\n  existingExecutor.executeTool = async(name, args, context = {  }) => {\n    const _toolCallId = null;\n;\n    try {\n      // Start AG-UI tool call\n      toolCallId = aguiAdapter.startToolCall(name, null, context.parentMessageId);\n  if(options.includeArgs !== false && args) {\n        aguiAdapter.addToolCallArgs(JSON.stringify(args), toolCallId);\n      //       }\n\n      // Execute original tool\n// const _result = awaitoriginalExecuteTool(name, args, context);\n\n      // Complete AG-UI tool call\n      aguiAdapter.endToolCall(toolCallId);\n  if(options.includeResults !== false) {\n        aguiAdapter.emitToolCallResult(result, toolCallId);\n      //       }\n\n      // return result;\n    // ; // LINT: unreachable code removed\n    } catch(_error) {\n      if(toolCallId) {\n        aguiAdapter.endToolCall(toolCallId);\n      }\n        aguiAdapter.emitToolCallResult('Error occurred');\n  existingExecutor.connectToAGUIBus = () => {\n    aguiAdapter.connectGlobalEmitter(eventBus);\n    return existingExecutor;\n    //   // LINT: unreachable code removed};\n\n  return existingExecutor;\n// }\n\n// export default AGUIMCPToolExecutor;\n\n}}}}}}}}}}}}}}}}}}}}}}}))\n\n/* End of file */"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AACA","ignoreList":[]}