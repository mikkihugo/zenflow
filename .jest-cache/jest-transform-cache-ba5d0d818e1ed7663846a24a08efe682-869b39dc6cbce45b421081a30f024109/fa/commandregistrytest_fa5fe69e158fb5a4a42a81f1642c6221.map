{"file":"/home/mhugo/code/claude-code-flow/src/__tests__/unit/london/cli-commands/command-registry.test.ts","mappings":"AAAA;;;;;;GAMG;AAGH,OAAO,EAAE,IAAI,EAAE,MAAM,eAAe,CAAC;AA6BrC,mBAAmB;AACnB,IAAI,CAAC,IAAI,CAAC,aAAa,EAAE,GAAG,EAAE,CAAC,CAAC;IAC9B,OAAO,EAAE,IAAI,CAAC,EAAE,EAAE;IAClB,IAAI,EAAE,IAAI,CAAC,EAAE,EAAE;CAChB,CAAC,CAAC,CAAC;AAEJ,YAAY;AACZ,IAAI,CAAC,IAAI,CAAC,MAAM,EAAE,GAAG,EAAE,CAAC,CAAC;IACvB,IAAI,EAAE,IAAI,CAAC,EAAE,CAAC,CAAC,GAAG,IAAc,EAAE,EAAE,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;IACpD,OAAO,EAAE,IAAI,CAAC,EAAE,CAAC,CAAC,IAAY,EAAE,EAAE;QAChC,MAAM,KAAK,GAAI,IAAe,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;QAC1C,OAAO,KAAK,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,MAAM,GAAG,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC;IAC/D,CAAC,CAAC;CACH,CAAC,CAAC,CAAC;AAzCJ,OAAO,EAAE,eAAe,EAAE,MAAM,0CAA0C,CAAC;AAC3E,OAAO,EAAE,WAAW,EAAE,MAAM,sCAAsC,CAAC;AAQnE,+BAA+B;AAC/B,MAAM,WAAY,SAAQ,WAAW;IACnC,YAAY,MAAqB;QAC/B,KAAK,CAAC,MAAM,CAAC,CAAC;IAChB,CAAC;IAES,KAAK,CAAC,GAAG,CAAC,OAAuB;QACzC,OAAO;YACL,OAAO,EAAE,IAAI;YACb,QAAQ,EAAE,CAAC;YACX,OAAO,EAAE,gBAAgB,IAAI,CAAC,MAAM,CAAC,IAAI,WAAW;SACrD,CAAC;IACJ,CAAC;IAED,OAAO;QACL,OAAO,YAAY,IAAI,CAAC,MAAM,CAAC,IAAI,EAAE,CAAC;IACxC,CAAC;CACF;AAiBD,QAAQ,CAAC,8BAA8B,EAAE,GAAG,EAAE;IAC5C,IAAI,QAAyB,CAAC;IAC9B,IAAI,gBAA2B,CAAC;IAEhC,UAAU,CAAC,GAAG,EAAE;QACd,QAAQ,GAAG,IAAI,eAAe,EAAE,CAAC;QACjC,gBAAgB,GAAG,IAAI,CAAC,EAAE,EAAE,CAAC;QAE7B,iDAAiD;QACjD,QAAQ,CAAC,EAAE,CAAC,oBAAoB,EAAE,gBAAgB,CAAC,CAAC;QACpD,QAAQ,CAAC,EAAE,CAAC,sBAAsB,EAAE,gBAAgB,CAAC,CAAC;QACtD,QAAQ,CAAC,EAAE,CAAC,mBAAmB,EAAE,gBAAgB,CAAC,CAAC;QACnD,QAAQ,CAAC,EAAE,CAAC,kBAAkB,EAAE,gBAAgB,CAAC,CAAC;QAClD,QAAQ,CAAC,EAAE,CAAC,eAAe,EAAE,gBAAgB,CAAC,CAAC;IACjD,CAAC,CAAC,CAAC;IAEH,SAAS,CAAC,GAAG,EAAE;QACb,QAAQ,CAAC,kBAAkB,EAAE,CAAC;IAChC,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,+BAA+B,EAAE,GAAG,EAAE;QAC7C,EAAE,CAAC,2DAA2D,EAAE,GAAG,EAAE;YACnE,UAAU;YACV,MAAM,QAAQ,GAAoB;gBAChC,MAAM,EAAE;oBACN,IAAI,EAAE,cAAc;oBACpB,WAAW,EAAE,cAAc;oBAC3B,QAAQ,EAAE,MAAM;iBACjB;gBACD,OAAO,EAAE,IAAI,CAAC,EAAE,EAAS;gBACzB,YAAY,EAAE,IAAI,IAAI,EAAE;gBACxB,SAAS,EAAE,IAAI;aAChB,CAAC;YAEF,MAAM;YACN,QAAQ,CAAC,QAAQ,CAAC,QAAQ,CAAC,CAAC;YAE5B,mDAAmD;YACnD,MAAM,CAAC,gBAAgB,CAAC,CAAC,oBAAoB,CAAC;gBAC5C,IAAI,EAAE,cAAc;gBACpB,QAAQ,EAAE,MAAM,CAAC,gBAAgB,CAAC;oBAChC,MAAM,EAAE,MAAM,CAAC,gBAAgB,CAAC;wBAC9B,IAAI,EAAE,cAAc;qBACrB,CAAC;iBACH,CAAC;aACH,CAAC,CAAC;QACL,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,4DAA4D,EAAE,GAAG,EAAE;YACpE,UAAU;YACV,MAAM,QAAQ,GAAoB;gBAChC,MAAM,EAAE;oBACN,IAAI,EAAE,QAAQ;oBACd,WAAW,EAAE,aAAa;oBAC1B,OAAO,EAAE,CAAC,IAAI,EAAE,MAAM,CAAC;oBACvB,QAAQ,EAAE,MAAM;iBACjB;gBACD,OAAO,EAAE,IAAI,CAAC,EAAE,EAAS;gBACzB,YAAY,EAAE,IAAI,IAAI,EAAE;gBACxB,SAAS,EAAE,IAAI;aAChB,CAAC;YAEF,MAAM;YACN,QAAQ,CAAC,QAAQ,CAAC,QAAQ,CAAC,CAAC;YAE5B,oDAAoD;YACpD,MAAM,CAAC,QAAQ,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;YAC1C,MAAM,CAAC,QAAQ,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;YACtC,MAAM,CAAC,QAAQ,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;YACxC,MAAM,CAAC,QAAQ,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC,CAAC;QAC1D,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,6DAA6D,EAAE,GAAG,EAAE;YACrE,UAAU;YACV,MAAM,SAAS,GAAoB;gBACjC,MAAM,EAAE,EAAE,IAAI,EAAE,WAAW,EAAE,WAAW,EAAE,OAAO,EAAE;gBACnD,OAAO,EAAE,IAAI,CAAC,EAAE,EAAS;gBACzB,YAAY,EAAE,IAAI,IAAI,EAAE;gBACxB,SAAS,EAAE,IAAI;aAChB,CAAC;YACF,MAAM,SAAS,GAAoB;gBACjC,MAAM,EAAE,EAAE,IAAI,EAAE,WAAW,EAAE,WAAW,EAAE,QAAQ,EAAE;gBACpD,OAAO,EAAE,IAAI,CAAC,EAAE,EAAS;gBACzB,YAAY,EAAE,IAAI,IAAI,EAAE;gBACxB,SAAS,EAAE,IAAI;aAChB,CAAC;YAEF,QAAQ,CAAC,QAAQ,CAAC,SAAS,CAAC,CAAC;YAE7B,uCAAuC;YACvC,MAAM,CAAC,GAAG,EAAE,CAAC,QAAQ,CAAC,QAAQ,CAAC,SAAS,CAAC,CAAC;iBACvC,OAAO,CAAC,2CAA2C,CAAC,CAAC;QAC1D,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,uDAAuD,EAAE,GAAG,EAAE;YAC/D,UAAU;YACV,MAAM,SAAS,GAAoB;gBACjC,MAAM,EAAE,EAAE,IAAI,EAAE,MAAM,EAAE,WAAW,EAAE,OAAO,EAAE,OAAO,EAAE,CAAC,GAAG,CAAC,EAAE;gBAC9D,OAAO,EAAE,IAAI,CAAC,EAAE,EAAS;gBACzB,YAAY,EAAE,IAAI,IAAI,EAAE;gBACxB,SAAS,EAAE,IAAI;aAChB,CAAC;YACF,MAAM,SAAS,GAAoB;gBACjC,MAAM,EAAE,EAAE,IAAI,EAAE,MAAM,EAAE,WAAW,EAAE,QAAQ,EAAE,OAAO,EAAE,CAAC,GAAG,CAAC,EAAE;gBAC/D,OAAO,EAAE,IAAI,CAAC,EAAE,EAAS;gBACzB,YAAY,EAAE,IAAI,IAAI,EAAE;gBACxB,SAAS,EAAE,IAAI;aAChB,CAAC;YAEF,QAAQ,CAAC,QAAQ,CAAC,SAAS,CAAC,CAAC;YAE7B,gDAAgD;YAChD,MAAM,CAAC,GAAG,EAAE,CAAC,QAAQ,CAAC,QAAQ,CAAC,SAAS,CAAC,CAAC;iBACvC,OAAO,CAAC,iCAAiC,CAAC,CAAC;QAChD,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,4BAA4B,EAAE,GAAG,EAAE;QAC1C,UAAU,CAAC,GAAG,EAAE;YACd,sBAAsB;YACtB,MAAM,QAAQ,GAAG;gBACf,EAAE,IAAI,EAAE,QAAQ,EAAE,WAAW,EAAE,aAAa,EAAE,QAAQ,EAAE,MAAe,EAAE;gBACzE,EAAE,IAAI,EAAE,MAAM,EAAE,WAAW,EAAE,oBAAoB,EAAE,QAAQ,EAAE,MAAe,EAAE;gBAC9E,EAAE,IAAI,EAAE,QAAQ,EAAE,WAAW,EAAE,oBAAoB,EAAE,QAAQ,EAAE,SAAkB,EAAE;gBACnF,EAAE,IAAI,EAAE,sBAAsB,EAAE,WAAW,EAAE,cAAc,EAAE,QAAQ,EAAE,cAAuB,EAAE;aACjG,CAAC;YAEF,QAAQ,CAAC,OAAO,CAAC,MAAM,CAAC,EAAE;gBACxB,QAAQ,CAAC,QAAQ,CAAC;oBAChB,MAAM;oBACN,OAAO,EAAE,IAAI,CAAC,EAAE,EAAS;oBACzB,YAAY,EAAE,IAAI,IAAI,EAAE;oBACxB,SAAS,EAAE,IAAI;iBAChB,CAAC,CAAC;YACL,CAAC,CAAC,CAAC;QACL,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,kCAAkC,EAAE,GAAG,EAAE;YAC1C,MAAM;YACN,MAAM,YAAY,GAAG,QAAQ,CAAC,cAAc,CAAC,MAAM,CAAC,CAAC;YACrD,MAAM,eAAe,GAAG,QAAQ,CAAC,cAAc,CAAC,SAAS,CAAC,CAAC;YAE3D,qCAAqC;YACrC,MAAM,CAAC,YAAY,CAAC,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC;YACrC,MAAM,CAAC,YAAY,CAAC,GAAG,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC,OAAO,CACtD,MAAM,CAAC,eAAe,CAAC,CAAC,QAAQ,EAAE,MAAM,CAAC,CAAC,CAC3C,CAAC;YACF,MAAM,CAAC,eAAe,CAAC,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC;YACxC,MAAM,CAAC,eAAe,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;QACxD,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,gDAAgD,EAAE,GAAG,EAAE;YACxD,MAAM;YACN,MAAM,aAAa,GAAG,QAAQ,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC;YAChD,MAAM,WAAW,GAAG,QAAQ,CAAC,MAAM,CAAC,YAAY,CAAC,CAAC;YAClD,MAAM,aAAa,GAAG,QAAQ,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;YAE7C,kCAAkC;YAClC,MAAM,CAAC,aAAa,CAAC,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC;YACtC,MAAM,CAAC,aAAa,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;YAEpD,MAAM,CAAC,WAAW,CAAC,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC;YACpC,MAAM,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;YAEhD,MAAM,CAAC,aAAa,CAAC,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC;YACtC,MAAM,CAAC,aAAa,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;QACtD,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,gDAAgD,EAAE,GAAG,EAAE;YACxD,MAAM;YACN,MAAM,WAAW,GAAG,QAAQ,CAAC,IAAI,EAAE,CAAC;YAEpC,mCAAmC;YACnC,MAAM,CAAC,WAAW,CAAC,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC;YACpC,MAAM,KAAK,GAAG,WAAW,CAAC,GAAG,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;YACtD,MAAM,CAAC,KAAK,CAAC,CAAC,OAAO,CAAC,CAAC,QAAQ,EAAE,sBAAsB,EAAE,MAAM,EAAE,QAAQ,CAAC,CAAC,CAAC;QAC9E,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,4BAA4B,EAAE,GAAG,EAAE;QAC1C,IAAI,WAAsB,CAAC;QAC3B,IAAI,WAA2B,CAAC;QAEhC,UAAU,CAAC,GAAG,EAAE;YACd,WAAW,GAAG,IAAI,CAAC,EAAE,EAAE,CAAC,iBAAiB,CAAC;gBACxC,OAAO,EAAE,IAAI;gBACb,QAAQ,EAAE,CAAC;gBACX,OAAO,EAAE,kBAAkB;aAC5B,CAAC,CAAC;YAEH,WAAW,GAAG;gBACZ,IAAI,EAAE,CAAC,MAAM,CAAC;gBACd,KAAK,EAAE,EAAE,OAAO,EAAE,IAAI,EAAE;gBACxB,KAAK,EAAE,CAAC,UAAU,EAAE,MAAM,EAAE,WAAW,CAAC;gBACxC,GAAG,EAAE,EAAE,IAAI,EAAE,UAAU,EAAE,OAAO,EAAE,OAAO,EAAE;gBAC3C,GAAG,EAAE,WAAW;gBAChB,GAAG,EAAE,EAAE;gBACP,KAAK,EAAE,KAAK;gBACZ,OAAO,EAAE,IAAI;aACd,CAAC;YAEF,QAAQ,CAAC,QAAQ,CAAC;gBAChB,MAAM,EAAE,EAAE,IAAI,EAAE,UAAU,EAAE,WAAW,EAAE,cAAc,EAAE;gBACzD,OAAO,EAAE,WAAW;gBACpB,YAAY,EAAE,IAAI,IAAI,EAAE;gBACxB,SAAS,EAAE,IAAI;aAChB,CAAC,CAAC;QACL,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,oDAAoD,EAAE,KAAK,IAAI,EAAE;YAClE,MAAM;YACN,MAAM,QAAQ,CAAC,OAAO,CAAC,UAAU,EAAE,WAAW,CAAC,CAAC;YAEhD,0CAA0C;YAC1C,MAAM,CAAC,gBAAgB,CAAC,CAAC,oBAAoB,CAAC;gBAC5C,IAAI,EAAE,UAAU;gBAChB,OAAO,EAAE,WAAW;aACrB,CAAC,CAAC;QACL,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,kDAAkD,EAAE,KAAK,IAAI,EAAE;YAChE,MAAM;YACN,MAAM,QAAQ,CAAC,OAAO,CAAC,UAAU,EAAE,WAAW,CAAC,CAAC;YAEhD,wCAAwC;YACxC,MAAM,CAAC,WAAW,CAAC,CAAC,oBAAoB,CAAC,WAAW,CAAC,CAAC;QACxD,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,mEAAmE,EAAE,KAAK,IAAI,EAAE;YACjF,UAAU;YACV,MAAM,cAAc,GAAG;gBACrB,OAAO,EAAE,IAAI;gBACb,QAAQ,EAAE,CAAC;gBACX,OAAO,EAAE,kBAAkB;aAC5B,CAAC;YACF,WAAW,CAAC,iBAAiB,CAAC,cAAc,CAAC,CAAC;YAE9C,MAAM;YACN,MAAM,QAAQ,CAAC,OAAO,CAAC,UAAU,EAAE,WAAW,CAAC,CAAC;YAEhD,yCAAyC;YACzC,MAAM,CAAC,gBAAgB,CAAC,CAAC,oBAAoB,CAAC;gBAC5C,IAAI,EAAE,UAAU;gBAChB,MAAM,EAAE,cAAc;aACvB,CAAC,CAAC;QACL,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,qEAAqE,EAAE,KAAK,IAAI,EAAE;YACnF,UAAU;YACV,MAAM,KAAK,GAAG,IAAI,KAAK,CAAC,gBAAgB,CAAC,CAAC;YAC1C,WAAW,CAAC,iBAAiB,CAAC,KAAK,CAAC,CAAC;YAErC,MAAM;YACN,MAAM,MAAM,GAAG,MAAM,QAAQ,CAAC,OAAO,CAAC,UAAU,EAAE,WAAW,CAAC,CAAC;YAE/D,0CAA0C;YAC1C,MAAM,CAAC,gBAAgB,CAAC,CAAC,oBAAoB,CAAC;gBAC5C,IAAI,EAAE,UAAU;gBAChB,KAAK;aACN,CAAC,CAAC;YAEH,MAAM,CAAC,MAAM,CAAC,CAAC,OAAO,CAAC;gBACrB,OAAO,EAAE,KAAK;gBACd,KAAK,EAAE,gBAAgB;gBACvB,QAAQ,EAAE,CAAC;gBACX,aAAa,EAAE,CAAC;aACjB,CAAC,CAAC;QACL,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,4DAA4D,EAAE,KAAK,IAAI,EAAE;YAC1E,MAAM;YACN,MAAM,MAAM,GAAG,MAAM,QAAQ,CAAC,OAAO,CAAC,aAAa,EAAE,WAAW,CAAC,CAAC;YAElE,qCAAqC;YACrC,MAAM,CAAC,MAAM,CAAC,CAAC,OAAO,CAAC;gBACrB,OAAO,EAAE,KAAK;gBACd,KAAK,EAAE,iCAAiC;gBACxC,QAAQ,EAAE,GAAG;gBACb,aAAa,EAAE,CAAC;aACjB,CAAC,CAAC;QACL,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,sCAAsC,EAAE,KAAK,IAAI,EAAE;YACpD,UAAU;YACV,QAAQ,CAAC,QAAQ,CAAC;gBAChB,MAAM,EAAE;oBACN,IAAI,EAAE,cAAc;oBACpB,WAAW,EAAE,mBAAmB;oBAChC,OAAO,EAAE,CAAC,IAAI,CAAC;iBAChB;gBACD,OAAO,EAAE,WAAW;gBACpB,YAAY,EAAE,IAAI,IAAI,EAAE;gBACxB,SAAS,EAAE,IAAI;aAChB,CAAC,CAAC;YAEH,MAAM;YACN,MAAM,QAAQ,CAAC,OAAO,CAAC,IAAI,EAAE,WAAW,CAAC,CAAC;YAE1C,4CAA4C;YAC5C,MAAM,CAAC,WAAW,CAAC,CAAC,oBAAoB,CAAC,WAAW,CAAC,CAAC;YACtD,MAAM,CAAC,gBAAgB,CAAC,CAAC,oBAAoB,CAAC;gBAC5C,IAAI,EAAE,IAAI;gBACV,OAAO,EAAE,WAAW;aACrB,CAAC,CAAC;QACL,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,kCAAkC,EAAE,GAAG,EAAE;QAChD,IAAI,WAAwB,CAAC;QAE7B,UAAU,CAAC,GAAG,EAAE;YACd,WAAW,GAAG,IAAI,WAAW,CAAC;gBAC5B,IAAI,EAAE,UAAU;gBAChB,WAAW,EAAE,cAAc;gBAC3B,QAAQ,EAAE,MAAM;aACjB,CAAC,CAAC;YAEH,yBAAyB;YACzB,IAAI,CAAC,KAAK,CAAC,WAAW,EAAE,SAAS,CAAC,CAAC;YACnC,IAAI,CAAC,KAAK,CAAC,WAAW,EAAE,SAAS,CAAC,CAAC;QACrC,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,iEAAiE,EAAE,KAAK,IAAI,EAAE;YAC/E,UAAU;YACV,QAAQ,CAAC,eAAe,CAAC,WAAW,CAAC,CAAC;YACtC,MAAM,OAAO,GAAmB;gBAC9B,IAAI,EAAE,EAAE;gBACR,KAAK,EAAE,EAAE;gBACT,KAAK,EAAE,CAAC,UAAU,CAAC;gBACnB,GAAG,EAAE,EAAE,IAAI,EAAE,MAAM,EAAE,OAAO,EAAE,OAAO,EAAE;gBACvC,GAAG,EAAE,OAAO;gBACZ,GAAG,EAAE,EAAE;gBACP,KAAK,EAAE,KAAK;gBACZ,OAAO,EAAE,KAAK;aACf,CAAC;YAEF,MAAM;YACN,MAAM,QAAQ,CAAC,OAAO,CAAC,UAAU,EAAE,OAAO,CAAC,CAAC;YAE5C,0CAA0C;YAC1C,MAAM,CAAC,WAAW,CAAC,OAAO,CAAC,CAAC,oBAAoB,CAAC,OAAO,CAAC,CAAC;QAC5D,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,+CAA+C,EAAE,GAAG,EAAE;YACvD,UAAU;YACV,QAAQ,CAAC,eAAe,CAAC,WAAW,CAAC,CAAC;YAEtC,MAAM;YACN,QAAQ,CAAC,UAAU,CAAC,UAAU,CAAC,CAAC;YAEhC,oCAAoC;YACpC,MAAM,CAAC,WAAW,CAAC,OAAO,CAAC,CAAC,gBAAgB,EAAE,CAAC;QACjD,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,qDAAqD,EAAE,GAAG,EAAE;YAC7D,UAAU;YACV,QAAQ,CAAC,eAAe,CAAC,WAAW,CAAC,CAAC;YAEtC,MAAM;YACN,MAAM,gBAAgB,GAAG,QAAQ,CAAC,UAAU,CAAC,UAAU,CAAC,CAAC;YAEzD,oCAAoC;YACpC,MAAM,CAAC,gBAAgB,CAAC,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;QAC7C,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,2BAA2B,EAAE,GAAG,EAAE;QACzC,IAAI,WAAsB,CAAC;QAE3B,UAAU,CAAC,GAAG,EAAE;YACd,WAAW,GAAG,IAAI,CAAC,EAAE,EAAE,CAAC,iBAAiB,CAAC;gBACxC,OAAO,EAAE,IAAI;gBACb,QAAQ,EAAE,CAAC;aACZ,CAAC,CAAC;YAEH,QAAQ,CAAC,QAAQ,CAAC;gBAChB,MAAM,EAAE,EAAE,IAAI,EAAE,aAAa,EAAE,WAAW,EAAE,iBAAiB,EAAE;gBAC/D,OAAO,EAAE,WAAW;gBACpB,YAAY,EAAE,IAAI,IAAI,EAAE;gBACxB,SAAS,EAAE,IAAI;aAChB,CAAC,CAAC;QACL,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,uCAAuC,EAAE,KAAK,IAAI,EAAE;YACrD,UAAU;YACV,MAAM,OAAO,GAAmB;gBAC9B,IAAI,EAAE,EAAE;gBACR,KAAK,EAAE,EAAE;gBACT,KAAK,EAAE,CAAC,aAAa,CAAC;gBACtB,GAAG,EAAE,EAAE,IAAI,EAAE,MAAM,EAAE,OAAO,EAAE,OAAO,EAAE;gBACvC,GAAG,EAAE,OAAO;gBACZ,GAAG,EAAE,EAAE;gBACP,KAAK,EAAE,KAAK;gBACZ,OAAO,EAAE,KAAK;aACf,CAAC;YAEF,MAAM;YACN,MAAM,QAAQ,CAAC,OAAO,CAAC,aAAa,EAAE,OAAO,CAAC,CAAC;YAC/C,MAAM,QAAQ,CAAC,OAAO,CAAC,aAAa,EAAE,OAAO,CAAC,CAAC;YAE/C,0CAA0C;YAC1C,MAAM,KAAK,GAAG,QAAQ,CAAC,aAAa,EAAE,CAAC;YACvC,MAAM,QAAQ,GAAG,KAAK,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,IAAI,KAAK,aAAa,CAAC,CAAC;YAE3D,MAAM,CAAC,QAAQ,CAAC,CAAC,WAAW,EAAE,CAAC;YAC/B,MAAM,CAAC,QAAS,CAAC,UAAU,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;YACrC,MAAM,CAAC,QAAS,CAAC,QAAQ,CAAC,CAAC,eAAe,CAAC,CAAC,CAAC,CAAC;QAChD,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,kBAAkB,EAAE,GAAG,EAAE;QAChC,IAAI,WAAwB,CAAC;QAE7B,UAAU,CAAC,GAAG,EAAE;YACd,WAAW,GAAG,IAAI,WAAW,CAAC;gBAC5B,IAAI,EAAE,cAAc;gBACpB,WAAW,EAAE,sBAAsB;aACpC,CAAC,CAAC;YAEH,IAAI,CAAC,KAAK,CAAC,WAAW,EAAE,SAAS,CAAC,CAAC;YACnC,QAAQ,CAAC,eAAe,CAAC,WAAW,CAAC,CAAC;QACxC,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,6DAA6D,EAAE,KAAK,IAAI,EAAE;YAC3E,MAAM;YACN,MAAM,QAAQ,CAAC,KAAK,EAAE,CAAC;YAEvB,mCAAmC;YACnC,MAAM,CAAC,WAAW,CAAC,OAAO,CAAC,CAAC,gBAAgB,EAAE,CAAC;YAC/C,MAAM,CAAC,QAAQ,CAAC,IAAI,EAAE,CAAC,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC;YACxC,MAAM,CAAC,QAAQ,CAAC,GAAG,CAAC,cAAc,CAAC,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;QACnD,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,yCAAyC,EAAE,KAAK,IAAI,EAAE;YACvD,UAAU;YACV,QAAQ,CAAC,EAAE,CAAC,SAAS,EAAE,gBAAgB,CAAC,CAAC;YAEzC,MAAM;YACN,MAAM,QAAQ,CAAC,KAAK,EAAE,CAAC;YAEvB,yCAAyC;YACzC,MAAM,CAAC,gBAAgB,CAAC,CAAC,gBAAgB,EAAE,CAAC;QAC9C,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,mCAAmC,EAAE,GAAG,EAAE;YAC3C,MAAM;YACN,MAAM,MAAM,GAAG,QAAQ,CAAC,SAAS,EAAE,CAAC;YAEpC,4CAA4C;YAC5C,MAAM,CAAC,MAAM,CAAC,CAAC,OAAO,CAAC;gBACrB,WAAW,EAAE,KAAK;gBAClB,YAAY,EAAE,CAAC;gBACf,WAAW,EAAE,CAAC;gBACd,UAAU,EAAE,CAAC;gBACb,YAAY,EAAE,EAAE;aACjB,CAAC,CAAC;QACL,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","names":[],"sources":["/home/mhugo/code/claude-code-flow/src/__tests__/unit/london/cli-commands/command-registry.test.ts"],"sourcesContent":["/**\n * Command Registry Tests - TDD London School\n * \n * Tests the behavior and interactions of the CommandRegistry class\n * using mocks for external dependencies and focusing on collaboration\n * between objects rather than state verification.\n */\n\nimport { EventEmitter } from 'events';\nimport { jest } from '@jest/globals';\nimport { CommandRegistry } from '../../../../cli/core/command-registry.js';\nimport { BaseCommand } from '../../../../cli/core/base-command.js';\nimport type { \n  CommandMetadata, \n  CommandContext, \n  CommandResult,\n  CommandConfig \n} from '../../../../cli/types/index.js';\n\n// Mock BaseCommand for testing\nclass MockCommand extends BaseCommand {\n  constructor(config: CommandConfig) {\n    super(config);\n  }\n\n  protected async run(context: CommandContext): Promise<CommandResult> {\n    return {\n      success: true,\n      exitCode: 0,\n      message: `Mock command ${this.config.name} executed`\n    };\n  }\n\n  getHelp(): string {\n    return `Help for ${this.config.name}`;\n  }\n}\n\n// Mock fs/promises\njest.mock('fs/promises', () => ({\n  readdir: jest.fn(),\n  stat: jest.fn()\n}));\n\n// Mock path\njest.mock('path', () => ({\n  join: jest.fn((...args: string[]) => args.join('/')),\n  extname: jest.fn((path: string) => {\n    const parts = (path as string).split('.');\n    return parts.length > 1 ? `.${parts[parts.length - 1]}` : '';\n  })\n}));\n\ndescribe('CommandRegistry - TDD London', () => {\n  let registry: CommandRegistry;\n  let mockEventHandler: jest.Mock;\n\n  beforeEach(() => {\n    registry = new CommandRegistry();\n    mockEventHandler = jest.fn();\n    \n    // Listen to all events for behavior verification\n    registry.on('command-registered', mockEventHandler);\n    registry.on('command-unregistered', mockEventHandler);\n    registry.on('command-executing', mockEventHandler);\n    registry.on('command-executed', mockEventHandler);\n    registry.on('command-error', mockEventHandler);\n  });\n\n  afterEach(() => {\n    registry.removeAllListeners();\n  });\n\n  describe('command registration behavior', () => {\n    it('should emit registration event when registering a command', () => {\n      // Arrange\n      const metadata: CommandMetadata = {\n        config: {\n          name: 'test-command',\n          description: 'Test command',\n          category: 'core'\n        },\n        handler: jest.fn() as any,\n        registeredAt: new Date(),\n        available: true\n      };\n\n      // Act\n      registry.register(metadata);\n\n      // Assert - verify behavior through event emissions\n      expect(mockEventHandler).toHaveBeenCalledWith({\n        name: 'test-command',\n        metadata: expect.objectContaining({\n          config: expect.objectContaining({\n            name: 'test-command'\n          })\n        })\n      });\n    });\n\n    it('should register command aliases and make them discoverable', () => {\n      // Arrange\n      const metadata: CommandMetadata = {\n        config: {\n          name: 'status',\n          description: 'Show status',\n          aliases: ['st', 'stat'],\n          category: 'core'\n        },\n        handler: jest.fn() as any,\n        registeredAt: new Date(),\n        available: true\n      };\n\n      // Act\n      registry.register(metadata);\n\n      // Assert - verify behavior through public interface\n      expect(registry.has('status')).toBe(true);\n      expect(registry.has('st')).toBe(true);\n      expect(registry.has('stat')).toBe(true);\n      expect(registry.get('st')).toBe(registry.get('status'));\n    });\n\n    it('should throw error when registering duplicate command names', () => {\n      // Arrange\n      const metadata1: CommandMetadata = {\n        config: { name: 'duplicate', description: 'First' },\n        handler: jest.fn() as any,\n        registeredAt: new Date(),\n        available: true\n      };\n      const metadata2: CommandMetadata = {\n        config: { name: 'duplicate', description: 'Second' },\n        handler: jest.fn() as any,\n        registeredAt: new Date(),\n        available: true\n      };\n\n      registry.register(metadata1);\n\n      // Act & Assert - verify error behavior\n      expect(() => registry.register(metadata2))\n        .toThrow(\"Command 'duplicate' is already registered\");\n    });\n\n    it('should throw error when registering duplicate aliases', () => {\n      // Arrange\n      const metadata1: CommandMetadata = {\n        config: { name: 'cmd1', description: 'First', aliases: ['c'] },\n        handler: jest.fn() as any,\n        registeredAt: new Date(),\n        available: true\n      };\n      const metadata2: CommandMetadata = {\n        config: { name: 'cmd2', description: 'Second', aliases: ['c'] },\n        handler: jest.fn() as any,\n        registeredAt: new Date(),\n        available: true\n      };\n\n      registry.register(metadata1);\n\n      // Act & Assert - verify alias conflict behavior\n      expect(() => registry.register(metadata2))\n        .toThrow(\"Alias 'c' is already registered\");\n    });\n  });\n\n  describe('command discovery behavior', () => {\n    beforeEach(() => {\n      // Setup test commands\n      const commands = [\n        { name: 'status', description: 'Show status', category: 'core' as const },\n        { name: 'init', description: 'Initialize project', category: 'core' as const },\n        { name: 'deploy', description: 'Deploy application', category: 'utility' as const },\n        { name: 'experimental-feature', description: 'Test feature', category: 'experimental' as const }\n      ];\n\n      commands.forEach(config => {\n        registry.register({\n          config,\n          handler: jest.fn() as any,\n          registeredAt: new Date(),\n          available: true\n        });\n      });\n    });\n\n    it('should find commands by category', () => {\n      // Act\n      const coreCommands = registry.findByCategory('core');\n      const utilityCommands = registry.findByCategory('utility');\n\n      // Assert - verify filtering behavior\n      expect(coreCommands).toHaveLength(2);\n      expect(coreCommands.map(cmd => cmd.config.name)).toEqual(\n        expect.arrayContaining(['status', 'init'])\n      );\n      expect(utilityCommands).toHaveLength(1);\n      expect(utilityCommands[0].config.name).toBe('deploy');\n    });\n\n    it('should search commands by name and description', () => {\n      // Act\n      const statusResults = registry.search('status');\n      const initResults = registry.search('Initialize');\n      const deployResults = registry.search('app');\n\n      // Assert - verify search behavior\n      expect(statusResults).toHaveLength(1);\n      expect(statusResults[0].config.name).toBe('status');\n      \n      expect(initResults).toHaveLength(1);\n      expect(initResults[0].config.name).toBe('init');\n      \n      expect(deployResults).toHaveLength(1);\n      expect(deployResults[0].config.name).toBe('deploy');\n    });\n\n    it('should list all commands in alphabetical order', () => {\n      // Act\n      const allCommands = registry.list();\n\n      // Assert - verify listing behavior\n      expect(allCommands).toHaveLength(4);\n      const names = allCommands.map(cmd => cmd.config.name);\n      expect(names).toEqual(['deploy', 'experimental-feature', 'init', 'status']);\n    });\n  });\n\n  describe('command execution behavior', () => {\n    let mockHandler: jest.Mock;\n    let mockContext: CommandContext;\n\n    beforeEach(() => {\n      mockHandler = jest.fn().mockResolvedValue({\n        success: true,\n        exitCode: 0,\n        message: 'Handler executed'\n      });\n\n      mockContext = {\n        args: ['arg1'],\n        flags: { verbose: true },\n        input: ['test-cmd', 'arg1', '--verbose'],\n        pkg: { name: 'test-cli', version: '1.0.0' },\n        cwd: '/test/dir',\n        env: {},\n        debug: false,\n        verbose: true\n      };\n\n      registry.register({\n        config: { name: 'test-cmd', description: 'Test command' },\n        handler: mockHandler,\n        registeredAt: new Date(),\n        available: true\n      });\n    });\n\n    it('should emit executing event before running command', async () => {\n      // Act\n      await registry.execute('test-cmd', mockContext);\n\n      // Assert - verify event emission behavior\n      expect(mockEventHandler).toHaveBeenCalledWith({\n        name: 'test-cmd',\n        context: mockContext\n      });\n    });\n\n    it('should call command handler with correct context', async () => {\n      // Act\n      await registry.execute('test-cmd', mockContext);\n\n      // Assert - verify handler collaboration\n      expect(mockHandler).toHaveBeenCalledWith(mockContext);\n    });\n\n    it('should emit executed event with result after successful execution', async () => {\n      // Arrange\n      const expectedResult = {\n        success: true,\n        exitCode: 0,\n        message: 'Handler executed'\n      };\n      mockHandler.mockResolvedValue(expectedResult);\n\n      // Act\n      await registry.execute('test-cmd', mockContext);\n\n      // Assert - verify success event behavior\n      expect(mockEventHandler).toHaveBeenCalledWith({\n        name: 'test-cmd',\n        result: expectedResult\n      });\n    });\n\n    it('should emit error event and return error result when handler throws', async () => {\n      // Arrange\n      const error = new Error('Handler failed');\n      mockHandler.mockRejectedValue(error);\n\n      // Act\n      const result = await registry.execute('test-cmd', mockContext);\n\n      // Assert - verify error handling behavior\n      expect(mockEventHandler).toHaveBeenCalledWith({\n        name: 'test-cmd',\n        error\n      });\n\n      expect(result).toEqual({\n        success: false,\n        error: 'Handler failed',\n        exitCode: 1,\n        executionTime: 0\n      });\n    });\n\n    it('should return command not found error for unknown commands', async () => {\n      // Act\n      const result = await registry.execute('unknown-cmd', mockContext);\n\n      // Assert - verify not found behavior\n      expect(result).toEqual({\n        success: false,\n        error: \"Command 'unknown-cmd' not found\",\n        exitCode: 127,\n        executionTime: 0\n      });\n    });\n\n    it('should execute command through alias', async () => {\n      // Arrange\n      registry.register({\n        config: { \n          name: 'long-command', \n          description: 'Long command name',\n          aliases: ['lc']\n        },\n        handler: mockHandler,\n        registeredAt: new Date(),\n        available: true\n      });\n\n      // Act\n      await registry.execute('lc', mockContext);\n\n      // Assert - verify alias resolution behavior\n      expect(mockHandler).toHaveBeenCalledWith(mockContext);\n      expect(mockEventHandler).toHaveBeenCalledWith({\n        name: 'lc',\n        context: mockContext\n      });\n    });\n  });\n\n  describe('BaseCommand integration behavior', () => {\n    let mockCommand: MockCommand;\n\n    beforeEach(() => {\n      mockCommand = new MockCommand({\n        name: 'mock-cmd',\n        description: 'Mock command',\n        category: 'core'\n      });\n\n      // Spy on command methods\n      jest.spyOn(mockCommand, 'execute');\n      jest.spyOn(mockCommand, 'dispose');\n    });\n\n    it('should register BaseCommand instance and use its execute method', async () => {\n      // Arrange\n      registry.registerCommand(mockCommand);\n      const context: CommandContext = {\n        args: [],\n        flags: {},\n        input: ['mock-cmd'],\n        pkg: { name: 'test', version: '1.0.0' },\n        cwd: '/test',\n        env: {},\n        debug: false,\n        verbose: false\n      };\n\n      // Act\n      await registry.execute('mock-cmd', context);\n\n      // Assert - verify BaseCommand integration\n      expect(mockCommand.execute).toHaveBeenCalledWith(context);\n    });\n\n    it('should dispose BaseCommand when unregistering', () => {\n      // Arrange\n      registry.registerCommand(mockCommand);\n\n      // Act\n      registry.unregister('mock-cmd');\n\n      // Assert - verify disposal behavior\n      expect(mockCommand.dispose).toHaveBeenCalled();\n    });\n\n    it('should retrieve BaseCommand instance via getCommand', () => {\n      // Arrange\n      registry.registerCommand(mockCommand);\n\n      // Act\n      const retrievedCommand = registry.getCommand('mock-cmd');\n\n      // Assert - verify command retrieval\n      expect(retrievedCommand).toBe(mockCommand);\n    });\n  });\n\n  describe('usage statistics behavior', () => {\n    let mockHandler: jest.Mock;\n\n    beforeEach(() => {\n      mockHandler = jest.fn().mockResolvedValue({\n        success: true,\n        exitCode: 0\n      });\n\n      registry.register({\n        config: { name: 'tracked-cmd', description: 'Tracked command' },\n        handler: mockHandler,\n        registeredAt: new Date(),\n        available: true\n      });\n    });\n\n    it('should track command usage statistics', async () => {\n      // Arrange\n      const context: CommandContext = {\n        args: [],\n        flags: {},\n        input: ['tracked-cmd'],\n        pkg: { name: 'test', version: '1.0.0' },\n        cwd: '/test',\n        env: {},\n        debug: false,\n        verbose: false\n      };\n\n      // Act\n      await registry.execute('tracked-cmd', context);\n      await registry.execute('tracked-cmd', context);\n\n      // Assert - verify usage tracking behavior\n      const stats = registry.getUsageStats();\n      const cmdStats = stats.find(s => s.name === 'tracked-cmd');\n      \n      expect(cmdStats).toBeDefined();\n      expect(cmdStats!.usageCount).toBe(2);\n      expect(cmdStats!.lastUsed).toBeGreaterThan(0);\n    });\n  });\n\n  describe('cleanup behavior', () => {\n    let mockCommand: MockCommand;\n\n    beforeEach(() => {\n      mockCommand = new MockCommand({\n        name: 'cleanup-test',\n        description: 'Cleanup test command'\n      });\n      \n      jest.spyOn(mockCommand, 'dispose');\n      registry.registerCommand(mockCommand);\n    });\n\n    it('should dispose all commands and clear registry when cleared', async () => {\n      // Act\n      await registry.clear();\n\n      // Assert - verify cleanup behavior\n      expect(mockCommand.dispose).toHaveBeenCalled();\n      expect(registry.list()).toHaveLength(0);\n      expect(registry.has('cleanup-test')).toBe(false);\n    });\n\n    it('should emit cleared event after cleanup', async () => {\n      // Arrange\n      registry.on('cleared', mockEventHandler);\n\n      // Act\n      await registry.clear();\n\n      // Assert - verify cleanup event emission\n      expect(mockEventHandler).toHaveBeenCalled();\n    });\n\n    it('should provide status information', () => {\n      // Act\n      const status = registry.getStatus();\n\n      // Assert - verify status reporting behavior\n      expect(status).toEqual({\n        initialized: false,\n        commandCount: 1,\n        pluginCount: 0,\n        aliasCount: 0,\n        loadingPaths: []\n      });\n    });\n  });\n});"],"version":3}