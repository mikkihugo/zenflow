{"file":"/home/mhugo/code/claude-code-flow/src/__tests__/unit/london/mcp-protocol/error-scenarios.test.ts","mappings":"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","names":[],"sources":["/home/mhugo/code/claude-code-flow/src/__tests__/unit/london/mcp-protocol/error-scenarios.test.ts"],"sourcesContent":["/**\n * MCP Error Scenarios - TDD London Style\n * \n * Tests error handling scenarios using London School principles:\n * - Mock error conditions and failure modes\n * - Test error propagation and recovery mechanisms\n * - Verify error response formats and codes\n * - Focus on error handling interactions and contracts\n */\n\nimport { jest, describe, it, expect, beforeEach, afterEach } from '@jest/globals';\nimport type {\n  MCPRequest,\n  MCPResponse,\n  MCPError,\n  MCPContext\n} from '../../../../utils/types';\n\n// === MOCK DEPENDENCIES (London School Contract Definition) ===\n\nconst mockErrorHandler = {\n  classifyError: jest.fn(),\n  createErrorResponse: jest.fn(),\n  logError: jest.fn(),\n  shouldRetry: jest.fn(),\n  handleRecovery: jest.fn()\n};\n\nconst mockCircuitBreaker = {\n  isOpen: jest.fn(),\n  recordSuccess: jest.fn(),\n  recordFailure: jest.fn(),\n  getState: jest.fn()\n};\n\nconst mockRetryManager = {\n  shouldRetry: jest.fn(),\n  getRetryDelay: jest.fn(),\n  recordAttempt: jest.fn(),\n  resetRetries: jest.fn()\n};\n\nconst mockLogger = {\n  debug: jest.fn(),\n  info: jest.fn(),\n  warn: jest.fn(),\n  error: jest.fn()\n};\n\nconst mockMetricsCollector = {\n  recordError: jest.fn(),\n  recordRetry: jest.fn(),\n  recordCircuitBreakerTrip: jest.fn(),\n  incrementErrorCounter: jest.fn()\n};\n\nconst mockAlertManager = {\n  sendAlert: jest.fn(),\n  isAlertThresholdReached: jest.fn(),\n  recordErrorOccurrence: jest.fn()\n};\n\n// === CONTRACT INTERFACES ===\n\ninterface ErrorHandlerContract {\n  handleError(error: Error, context: ErrorContext): Promise<MCPResponse>;\n  classifyError(error: Error): ErrorClassification;\n  createRecoveryPlan(error: Error, context: ErrorContext): RecoveryPlan;\n  executeRecovery(plan: RecoveryPlan): Promise<boolean>;\n}\n\ninterface ErrorContext {\n  requestId: string | number;\n  method: string;\n  sessionId: string;\n  attemptNumber: number;\n  originalRequest: MCPRequest;\n}\n\ninterface ErrorClassification {\n  type: 'validation' | 'timeout' | 'resource' | 'internal' | 'network' | 'authentication';\n  severity: 'low' | 'medium' | 'high' | 'critical';\n  recoverable: boolean;\n  retryable: boolean;\n  code: number;\n  category: string;\n}\n\ninterface RecoveryPlan {\n  strategy: 'retry' | 'fallback' | 'circuit-break' | 'escalate';\n  maxAttempts: number;\n  backoffMs: number;\n  fallbackHandler?: () => Promise<unknown>;\n  alertRequired: boolean;\n}\n\n// === MOCK IMPLEMENTATION ===\n\nclass MockMCPErrorHandler implements ErrorHandlerContract {\n  constructor(\n    private errorHandler = mockErrorHandler,\n    private circuitBreaker = mockCircuitBreaker,\n    private retryManager = mockRetryManager,\n    private logger = mockLogger,\n    private metrics = mockMetricsCollector,\n    private alertManager = mockAlertManager\n  ) {}\n\n  async handleError(error: Error, context: ErrorContext): Promise<MCPResponse> {\n    this.logger.error('Handling MCP error', { \n      error: error.message, \n      requestId: context.requestId,\n      method: context.method,\n      attempt: context.attemptNumber \n    });\n\n    // Classify the error\n    const classification = this.classifyError(error);\n    this.metrics.recordError(classification.type, classification.severity);\n\n    // Check circuit breaker\n    if (this.circuitBreaker.isOpen()) {\n      this.logger.warn('Circuit breaker is open, failing fast', { \n        requestId: context.requestId \n      });\n      return this.createCircuitBreakerErrorResponse(context);\n    }\n\n    // Create recovery plan\n    const recoveryPlan = this.createRecoveryPlan(error, context);\n    \n    // Check if we should alert\n    if (recoveryPlan.alertRequired) {\n      this.alertManager.recordErrorOccurrence(classification.type);\n      if (this.alertManager.isAlertThresholdReached(classification.type)) {\n        this.alertManager.sendAlert({\n          type: classification.type,\n          severity: classification.severity,\n          context: context\n        });\n      }\n    }\n\n    // Attempt recovery if error is recoverable\n    if (classification.recoverable && context.attemptNumber < recoveryPlan.maxAttempts) {\n      return this.attemptRecovery(error, context, recoveryPlan);\n    }\n\n    // Create final error response\n    return this.createFinalErrorResponse(error, context, classification);\n  }\n\n  classifyError(error: Error): ErrorClassification {\n    return this.errorHandler.classifyError(error);\n  }\n\n  createRecoveryPlan(error: Error, context: ErrorContext): RecoveryPlan {\n    const classification = this.classifyError(error);\n    \n    switch (classification.type) {\n      case 'timeout':\n        return {\n          strategy: 'retry',\n          maxAttempts: 3,\n          backoffMs: 1000,\n          alertRequired: classification.severity === 'high'\n        };\n      case 'resource':\n        return {\n          strategy: 'circuit-break',\n          maxAttempts: 1,\n          backoffMs: 0,\n          alertRequired: true\n        };\n      case 'network':\n        return {\n          strategy: 'retry',\n          maxAttempts: 5,\n          backoffMs: 2000,\n          alertRequired: classification.severity !== 'low'\n        };\n      default:\n        return {\n          strategy: 'escalate',\n          maxAttempts: 1,\n          backoffMs: 0,\n          alertRequired: classification.severity === 'critical'\n        };\n    }\n  }\n\n  async executeRecovery(plan: RecoveryPlan): Promise<boolean> {\n    switch (plan.strategy) {\n      case 'retry':\n        return this.retryManager.shouldRetry();\n      case 'fallback':\n        return plan.fallbackHandler ? await plan.fallbackHandler().then(() => true) : false;\n      case 'circuit-break':\n        this.circuitBreaker.recordFailure();\n        return false;\n      default:\n        return false;\n    }\n  }\n\n  private async attemptRecovery(\n    error: Error, \n    context: ErrorContext, \n    plan: RecoveryPlan\n  ): Promise<MCPResponse> {\n    this.logger.info('Attempting error recovery', { \n      strategy: plan.strategy,\n      attempt: context.attemptNumber,\n      requestId: context.requestId \n    });\n\n    const recoverySuccessful = await this.executeRecovery(plan);\n    \n    if (recoverySuccessful) {\n      this.metrics.recordRetry(context.method, context.attemptNumber);\n      // In real implementation, would re-execute the original request\n      return {\n        jsonrpc: '2.0',\n        id: context.requestId,\n        result: { recovered: true, strategy: plan.strategy }\n      };\n    }\n\n    return this.createFinalErrorResponse(error, context, this.classifyError(error));\n  }\n\n  private createCircuitBreakerErrorResponse(context: ErrorContext): MCPResponse {\n    this.metrics.recordCircuitBreakerTrip();\n    return {\n      jsonrpc: '2.0',\n      id: context.requestId,\n      error: {\n        code: -32000,\n        message: 'Service temporarily unavailable',\n        data: { \n          reason: 'circuit_breaker_open',\n          retryAfter: 30000 \n        }\n      }\n    };\n  }\n\n  private createFinalErrorResponse(\n    error: Error, \n    context: ErrorContext, \n    classification: ErrorClassification\n  ): MCPResponse {\n    return this.errorHandler.createErrorResponse(context.requestId, {\n      code: classification.code,\n      message: error.message,\n      data: {\n        type: classification.type,\n        severity: classification.severity,\n        requestId: context.requestId,\n        method: context.method,\n        attempts: context.attemptNumber\n      }\n    });\n  }\n}\n\ndescribe('MCP Error Scenarios - London TDD', () => {\n  \n  describe('🎯 Acceptance Tests - Error Classification', () => {\n    \n    describe('User Story: Classify Different Error Types', () => {\n      it('should classify validation errors correctly', async () => {\n        // Arrange - Mock validation error classification\n        const validationError = new Error('Invalid parameter: name is required');\n        mockErrorHandler.classifyError.mockReturnValue({\n          type: 'validation',\n          severity: 'medium',\n          recoverable: false,\n          retryable: false,\n          code: -32602,\n          category: 'client_error'\n        });\n\n        const errorHandler = new MockMCPErrorHandler();\n        \n        // Act - Classify validation error\n        const classification = errorHandler.classifyError(validationError);\n\n        // Assert - Verify validation error classification\n        expect(mockErrorHandler.classifyError).toHaveBeenCalledWith(validationError);\n        expect(classification.type).toBe('validation');\n        expect(classification.severity).toBe('medium');\n        expect(classification.recoverable).toBe(false);\n        expect(classification.retryable).toBe(false);\n        expect(classification.code).toBe(-32602);\n      });\n\n      it('should classify timeout errors correctly', async () => {\n        // Arrange - Mock timeout error classification\n        const timeoutError = new Error('Request timeout after 30000ms');\n        mockErrorHandler.classifyError.mockReturnValue({\n          type: 'timeout',\n          severity: 'high',\n          recoverable: true,\n          retryable: true,\n          code: -32000,\n          category: 'server_error'\n        });\n\n        const errorHandler = new MockMCPErrorHandler();\n        \n        // Act - Classify timeout error\n        const classification = errorHandler.classifyError(timeoutError);\n\n        // Assert - Verify timeout error classification\n        expect(classification.type).toBe('timeout');\n        expect(classification.severity).toBe('high');\n        expect(classification.recoverable).toBe(true);\n        expect(classification.retryable).toBe(true);\n        expect(classification.code).toBe(-32000);\n      });\n\n      it('should classify resource exhaustion errors correctly', async () => {\n        // Arrange - Mock resource error classification\n        const resourceError = new Error('Connection pool exhausted');\n        mockErrorHandler.classifyError.mockReturnValue({\n          type: 'resource',\n          severity: 'critical',\n          recoverable: true,\n          retryable: false,\n          code: -32001,\n          category: 'server_error'\n        });\n\n        const errorHandler = new MockMCPErrorHandler();\n        \n        // Act - Classify resource error\n        const classification = errorHandler.classifyError(resourceError);\n\n        // Assert - Verify resource error classification\n        expect(classification.type).toBe('resource');\n        expect(classification.severity).toBe('critical');\n        expect(classification.recoverable).toBe(true);\n        expect(classification.retryable).toBe(false);\n        expect(classification.code).toBe(-32001);\n      });\n    });\n  });\n\n  describe('🔄 Acceptance Tests - Error Recovery', () => {\n    \n    describe('User Story: Retry Transient Errors', () => {\n      it('should retry timeout errors with exponential backoff', async () => {\n        // Arrange - Mock timeout error retry scenario\n        const timeoutError = new Error('Connection timeout');\n        mockErrorHandler.classifyError.mockReturnValue({\n          type: 'timeout',\n          severity: 'high',\n          recoverable: true,\n          retryable: true,\n          code: -32000,\n          category: 'server_error'\n        });\n        mockCircuitBreaker.isOpen.mockReturnValue(false);\n        mockRetryManager.shouldRetry.mockReturnValue(true);\n        mockAlertManager.isAlertThresholdReached.mockReturnValue(false);\n\n        const errorHandler = new MockMCPErrorHandler();\n        \n        const errorContext: ErrorContext = {\n          requestId: 'retry-test-1',\n          method: 'tools/call',\n          sessionId: 'session-retry',\n          attemptNumber: 1,\n          originalRequest: {\n            jsonrpc: '2.0',\n            id: 'retry-test-1',\n            method: 'tools/call',\n            params: { name: 'test_tool' }\n          }\n        };\n\n        // Act - Handle timeout error\n        const response = await errorHandler.handleError(timeoutError, errorContext);\n\n        // Assert - Verify retry attempt conversation\n        expect(mockErrorHandler.classifyError).toHaveBeenCalledWith(timeoutError);\n        expect(mockCircuitBreaker.isOpen).toHaveBeenCalled();\n        expect(mockLogger.info).toHaveBeenCalledWith(\n          'Attempting error recovery',\n          expect.objectContaining({\n            strategy: 'retry',\n            attempt: 1,\n            requestId: 'retry-test-1'\n          })\n        );\n        expect(mockRetryManager.shouldRetry).toHaveBeenCalled();\n        expect(mockMetricsCollector.recordRetry).toHaveBeenCalledWith('tools/call', 1);\n        \n        expect(response.result).toBeDefined();\n        expect(response.result.recovered).toBe(true);\n        expect(response.result.strategy).toBe('retry');\n      });\n\n      it('should stop retrying after max attempts exceeded', async () => {\n        // Arrange - Mock max retries exceeded\n        const persistentError = new Error('Persistent failure');\n        mockErrorHandler.classifyError.mockReturnValue({\n          type: 'network',\n          severity: 'medium',\n          recoverable: true,\n          retryable: true,\n          code: -32003,\n          category: 'network_error'\n        });\n        mockCircuitBreaker.isOpen.mockReturnValue(false);\n        mockErrorHandler.createErrorResponse.mockReturnValue({\n          jsonrpc: '2.0',\n          id: 'max-retries-1',\n          error: {\n            code: -32003,\n            message: 'Persistent failure',\n            data: {\n              type: 'network',\n              severity: 'medium',\n              requestId: 'max-retries-1',\n              method: 'tools/call',\n              attempts: 5\n            }\n          }\n        });\n\n        const errorHandler = new MockMCPErrorHandler();\n        \n        const errorContext: ErrorContext = {\n          requestId: 'max-retries-1',\n          method: 'tools/call',\n          sessionId: 'session-max-retries',\n          attemptNumber: 5, // Exceeds max attempts\n          originalRequest: {\n            jsonrpc: '2.0',\n            id: 'max-retries-1',\n            method: 'tools/call',\n            params: { name: 'failing_tool' }\n          }\n        };\n\n        // Act - Handle error with max retries exceeded\n        const response = await errorHandler.handleError(persistentError, errorContext);\n\n        // Assert - Verify max retries handling\n        expect(mockErrorHandler.createErrorResponse).toHaveBeenCalledWith(\n          'max-retries-1',\n          expect.objectContaining({\n            code: -32003,\n            message: 'Persistent failure',\n            data: expect.objectContaining({\n              attempts: 5\n            })\n          })\n        );\n        expect(response.error).toBeDefined();\n        expect(response.error.data.attempts).toBe(5);\n      });\n    });\n\n    describe('User Story: Circuit Breaker Protection', () => {\n      it('should fail fast when circuit breaker is open', async () => {\n        // Arrange - Mock circuit breaker open\n        const serviceError = new Error('Service unavailable');\n        mockCircuitBreaker.isOpen.mockReturnValue(true);\n        mockMetricsCollector.recordCircuitBreakerTrip.mockReturnValue(undefined);\n\n        const errorHandler = new MockMCPErrorHandler();\n        \n        const errorContext: ErrorContext = {\n          requestId: 'circuit-break-1',\n          method: 'tools/call',\n          sessionId: 'session-circuit',\n          attemptNumber: 1,\n          originalRequest: {\n            jsonrpc: '2.0',\n            id: 'circuit-break-1',\n            method: 'tools/call',\n            params: { name: 'unstable_tool' }\n          }\n        };\n\n        // Act - Handle error with circuit breaker open\n        const response = await errorHandler.handleError(serviceError, errorContext);\n\n        // Assert - Verify circuit breaker fail-fast\n        expect(mockCircuitBreaker.isOpen).toHaveBeenCalled();\n        expect(mockLogger.warn).toHaveBeenCalledWith(\n          'Circuit breaker is open, failing fast',\n          { requestId: 'circuit-break-1' }\n        );\n        expect(mockMetricsCollector.recordCircuitBreakerTrip).toHaveBeenCalled();\n        \n        expect(response.error).toBeDefined();\n        expect(response.error.code).toBe(-32000);\n        expect(response.error.message).toBe('Service temporarily unavailable');\n        expect(response.error.data.reason).toBe('circuit_breaker_open');\n        expect(response.error.data.retryAfter).toBe(30000);\n      });\n\n      it('should record failures and potentially trip circuit breaker', async () => {\n        // Arrange - Mock resource error that should trip circuit breaker\n        const resourceError = new Error('Database connection failed');\n        mockErrorHandler.classifyError.mockReturnValue({\n          type: 'resource',\n          severity: 'critical',\n          recoverable: true,\n          retryable: false,\n          code: -32001,\n          category: 'resource_error'\n        });\n        mockCircuitBreaker.isOpen.mockReturnValue(false);\n        mockCircuitBreaker.recordFailure.mockReturnValue(undefined);\n        mockErrorHandler.createErrorResponse.mockReturnValue({\n          jsonrpc: '2.0',\n          id: 'resource-fail-1',\n          error: {\n            code: -32001,\n            message: 'Database connection failed',\n            data: {\n              type: 'resource',\n              severity: 'critical'\n            }\n          }\n        });\n\n        const errorHandler = new MockMCPErrorHandler();\n        \n        const errorContext: ErrorContext = {\n          requestId: 'resource-fail-1',\n          method: 'data/query',\n          sessionId: 'session-resource',\n          attemptNumber: 0, // First attempt, within max attempts for recovery\n          originalRequest: {\n            jsonrpc: '2.0',\n            id: 'resource-fail-1',\n            method: 'data/query',\n            params: { query: 'SELECT * FROM users' }\n          }\n        };\n\n        // Act - Handle resource error\n        const response = await errorHandler.handleError(resourceError, errorContext);\n\n        // Assert - Verify circuit breaker failure recording\n        expect(mockCircuitBreaker.recordFailure).toHaveBeenCalled();\n        expect(response.error.code).toBe(-32001);\n        expect(response.error.data.type).toBe('resource');\n        expect(response.error.data.severity).toBe('critical');\n      });\n    });\n  });\n\n  describe('🚨 Acceptance Tests - Alert Management', () => {\n    \n    describe('User Story: Error Alerting', () => {\n      it('should send alerts for critical errors', async () => {\n        // Arrange - Mock critical error alerting\n        const criticalError = new Error('System failure detected');\n        mockErrorHandler.classifyError.mockReturnValue({\n          type: 'internal',\n          severity: 'critical',\n          recoverable: false,\n          retryable: false,\n          code: -32603,\n          category: 'system_error'\n        });\n        mockCircuitBreaker.isOpen.mockReturnValue(false);\n        mockAlertManager.recordErrorOccurrence.mockReturnValue(undefined);\n        mockAlertManager.isAlertThresholdReached.mockReturnValue(true);\n        mockAlertManager.sendAlert.mockReturnValue(Promise.resolve());\n        mockErrorHandler.createErrorResponse.mockReturnValue({\n          jsonrpc: '2.0',\n          id: 'critical-1',\n          error: {\n            code: -32603,\n            message: 'System failure detected',\n            data: { type: 'internal', severity: 'critical' }\n          }\n        });\n\n        const errorHandler = new MockMCPErrorHandler();\n        \n        const errorContext: ErrorContext = {\n          requestId: 'critical-1',\n          method: 'system/status',\n          sessionId: 'session-critical',\n          attemptNumber: 1,\n          originalRequest: {\n            jsonrpc: '2.0',\n            id: 'critical-1',\n            method: 'system/status',\n            params: {}\n          }\n        };\n\n        // Act - Handle critical error\n        const response = await errorHandler.handleError(criticalError, errorContext);\n\n        // Assert - Verify alert sending conversation\n        expect(mockAlertManager.recordErrorOccurrence).toHaveBeenCalledWith('internal');\n        expect(mockAlertManager.isAlertThresholdReached).toHaveBeenCalledWith('internal');\n        expect(mockAlertManager.sendAlert).toHaveBeenCalledWith({\n          type: 'internal',\n          severity: 'critical',\n          context: errorContext\n        });\n        expect(response.error.data.severity).toBe('critical');\n      });\n\n      it('should not alert for low-severity errors below threshold', async () => {\n        // Arrange - Mock low-severity error\n        const minorError = new Error('Validation warning');\n        mockErrorHandler.classifyError.mockReturnValue({\n          type: 'validation',\n          severity: 'low',\n          recoverable: false,\n          retryable: false,\n          code: -32602,\n          category: 'client_error'\n        });\n        mockCircuitBreaker.isOpen.mockReturnValue(false);\n        mockAlertManager.recordErrorOccurrence.mockReturnValue(undefined);\n        mockAlertManager.isAlertThresholdReached.mockReturnValue(false);\n\n        const errorHandler = new MockMCPErrorHandler();\n        \n        const errorContext: ErrorContext = {\n          requestId: 'minor-1',\n          method: 'tools/validate',\n          sessionId: 'session-minor',\n          attemptNumber: 1,\n          originalRequest: {\n            jsonrpc: '2.0',\n            id: 'minor-1',\n            method: 'tools/validate',\n            params: { name: '' }\n          }\n        };\n\n        // Act - Handle minor error\n        await errorHandler.handleError(minorError, errorContext);\n\n        // Assert - Verify no alert sent for minor errors\n        expect(mockAlertManager.recordErrorOccurrence).not.toHaveBeenCalled();\n        expect(mockAlertManager.sendAlert).not.toHaveBeenCalled();\n      });\n    });\n  });\n\n  describe('🔗 Contract Verification - Error Response Format', () => {\n    \n    describe('Error Response Standards', () => {\n      it('should format error responses according to JSON-RPC 2.0 spec', async () => {\n        // Arrange - Mock standard error response formatting\n        const standardError = new Error('Method not found');\n        mockErrorHandler.classifyError.mockReturnValue({\n          type: 'validation',\n          severity: 'medium',\n          recoverable: false,\n          retryable: false,\n          code: -32601,\n          category: 'client_error'\n        });\n        mockCircuitBreaker.isOpen.mockReturnValue(false);\n        mockErrorHandler.createErrorResponse.mockReturnValue({\n          jsonrpc: '2.0',\n          id: 'format-test-1',\n          error: {\n            code: -32601,\n            message: 'Method not found',\n            data: {\n              type: 'validation',\n              severity: 'medium',\n              requestId: 'format-test-1',\n              method: 'unknown/method',\n              attempts: 1\n            }\n          }\n        });\n\n        const errorHandler = new MockMCPErrorHandler();\n        \n        const errorContext: ErrorContext = {\n          requestId: 'format-test-1',\n          method: 'unknown/method',\n          sessionId: 'session-format',\n          attemptNumber: 1,\n          originalRequest: {\n            jsonrpc: '2.0',\n            id: 'format-test-1',\n            method: 'unknown/method',\n            params: {}\n          }\n        };\n\n        // Act - Handle error for response formatting\n        const response = await errorHandler.handleError(standardError, errorContext);\n\n        // Assert - Verify JSON-RPC 2.0 error response format\n        expect(response.jsonrpc).toBe('2.0');\n        expect(response.id).toBe('format-test-1');\n        expect(response.error).toBeDefined();\n        expect(response.error.code).toBe(-32601);\n        expect(response.error.message).toBe('Method not found');\n        expect(response.error.data).toEqual(\n          expect.objectContaining({\n            type: 'validation',\n            severity: 'medium',\n            requestId: 'format-test-1',\n            method: 'unknown/method',\n            attempts: 1\n          })\n        );\n        expect(response.result).toBeUndefined(); // Error responses should not have result\n      });\n    });\n  });\n\n  describe('🧪 London School Patterns - Error Interaction Flow', () => {\n    \n    it('should demonstrate complete error handling workflow', async () => {\n      // Arrange - Mock complete error workflow\n      const workflowError = new Error('Complex system error');\n      mockErrorHandler.classifyError.mockReturnValue({\n        type: 'network',\n        severity: 'high',\n        recoverable: true,\n        retryable: true,\n        code: -32003,\n        category: 'network_error'\n      });\n      mockCircuitBreaker.isOpen.mockReturnValue(false);\n      mockRetryManager.shouldRetry.mockReturnValue(false); // Recovery fails\n      mockAlertManager.recordErrorOccurrence.mockReturnValue(undefined);\n      mockAlertManager.isAlertThresholdReached.mockReturnValue(true);\n      mockAlertManager.sendAlert.mockReturnValue(Promise.resolve());\n      mockErrorHandler.createErrorResponse.mockReturnValue({\n        jsonrpc: '2.0',\n        id: 'workflow-1',\n        error: {\n          code: -32003,\n          message: 'Complex system error',\n          data: { type: 'network', severity: 'high' }\n        }\n      });\n\n      const errorHandler = new MockMCPErrorHandler();\n      \n      const errorContext: ErrorContext = {\n        requestId: 'workflow-1',\n        method: 'complex/operation',\n        sessionId: 'session-workflow',\n        attemptNumber: 2,\n        originalRequest: {\n          jsonrpc: '2.0',\n          id: 'workflow-1',\n          method: 'complex/operation',\n          params: { complex: true }\n        }\n      };\n\n      // Act - Handle complex error workflow\n      const response = await errorHandler.handleError(workflowError, errorContext);\n\n      // Assert - Verify complete error handling conversation (London School focus)\n      expect(mockLogger.error).toHaveBeenCalledWith(\n        'Handling MCP error',\n        expect.objectContaining({\n          error: 'Complex system error',\n          requestId: 'workflow-1',\n          method: 'complex/operation',\n          attempt: 2\n        })\n      );\n      expect(mockErrorHandler.classifyError).toHaveBeenCalledWith(workflowError);\n      expect(mockMetricsCollector.recordError).toHaveBeenCalledWith('network', 'high');\n      expect(mockCircuitBreaker.isOpen).toHaveBeenCalled();\n      expect(mockLogger.info).toHaveBeenCalledWith(\n        'Attempting error recovery',\n        expect.objectContaining({ strategy: 'retry' })\n      );\n      expect(mockRetryManager.shouldRetry).toHaveBeenCalled();\n      expect(mockAlertManager.recordErrorOccurrence).toHaveBeenCalledWith('network');\n      expect(mockAlertManager.isAlertThresholdReached).toHaveBeenCalledWith('network');\n      expect(mockAlertManager.sendAlert).toHaveBeenCalled();\n      expect(mockErrorHandler.createErrorResponse).toHaveBeenCalled();\n      \n      expect(response.error).toBeDefined();\n      expect(response.error.code).toBe(-32003);\n    });\n  });\n\n  // Clean test isolation - London School principle\n  beforeEach(() => {\n    jest.clearAllMocks();\n  });\n  \n  afterEach(() => {\n    jest.restoreAllMocks();\n  });\n});"],"version":3}