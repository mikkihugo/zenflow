{"file":"/home/mhugo/code/claude-code-flow/src/__tests__/helpers/performance-measurement.ts","mappings":"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","names":[],"sources":["/home/mhugo/code/claude-code-flow/src/__tests__/helpers/performance-measurement.ts"],"sourcesContent":["/**\n * Performance Measurement Utilities\n * \n * Comprehensive performance testing for both London and Classical TDD\n */\n\nimport type { PerformanceTestOptions, PerformanceMetrics } from './types.js';\n\nexport class PerformanceMeasurement {\n  private options: PerformanceTestOptions;\n  private measurements: Array<{\n    name: string;\n    metrics: PerformanceMetrics;\n    timestamp: number;\n  }> = [];\n\n  constructor(options: PerformanceTestOptions = {}) {\n    this.options = {\n      iterations: 100,\n      warmup: 10,\n      maxExecutionTime: 1000,\n      memoryThresholds: {\n        heap: 50 * 1024 * 1024, // 50MB\n        external: 10 * 1024 * 1024 // 10MB\n      },\n      statistics: {\n        percentiles: [50, 95, 99],\n        includeVariance: true,\n        includeDeviation: true\n      },\n      ...options\n    };\n  }\n\n  /**\n   * Measure performance of a synchronous function\n   */\n  measureSync<T>(\n    name: string,\n    fn: () => T,\n    options: Partial<PerformanceTestOptions> = {}\n  ): PerformanceMetrics {\n    const config = { ...this.options, ...options };\n    const measurements: number[] = [];\n    const memoryMeasurements: Array<{ heap: number; external: number; total: number }> = [];\n\n    // Warmup\n    for (let i = 0; i < config.warmup!; i++) {\n      fn();\n    }\n\n    // Force garbage collection if available\n    if (global.gc) {\n      global.gc();\n    }\n\n    const initialMemory = process.memoryUsage();\n\n    // Actual measurements\n    for (let i = 0; i < config.iterations!; i++) {\n      const startTime = performance.now();\n      const startMemory = process.memoryUsage();\n\n      fn();\n\n      const endTime = performance.now();\n      const endMemory = process.memoryUsage();\n\n      measurements.push(endTime - startTime);\n      memoryMeasurements.push({\n        heap: endMemory.heapUsed - startMemory.heapUsed,\n        external: endMemory.external - startMemory.external,\n        total: (endMemory.heapUsed + endMemory.external) - (startMemory.heapUsed + startMemory.external)\n      });\n    }\n\n    const metrics = this.calculateMetrics(measurements, memoryMeasurements);\n    this.measurements.push({ name, metrics, timestamp: Date.now() });\n\n    return metrics;\n  }\n\n  /**\n   * Measure performance of an asynchronous function\n   */\n  async measureAsync<T>(\n    name: string,\n    fn: () => Promise<T>,\n    options: Partial<PerformanceTestOptions> = {}\n  ): Promise<PerformanceMetrics> {\n    const config = { ...this.options, ...options };\n    const measurements: number[] = [];\n    const memoryMeasurements: Array<{ heap: number; external: number; total: number }> = [];\n\n    // Warmup\n    for (let i = 0; i < config.warmup!; i++) {\n      await fn();\n    }\n\n    // Force garbage collection if available\n    if (global.gc) {\n      global.gc();\n    }\n\n    // Actual measurements\n    for (let i = 0; i < config.iterations!; i++) {\n      const startTime = performance.now();\n      const startMemory = process.memoryUsage();\n\n      await fn();\n\n      const endTime = performance.now();\n      const endMemory = process.memoryUsage();\n\n      measurements.push(endTime - startTime);\n      memoryMeasurements.push({\n        heap: endMemory.heapUsed - startMemory.heapUsed,\n        external: endMemory.external - startMemory.external,\n        total: (endMemory.heapUsed + endMemory.external) - (startMemory.heapUsed + startMemory.external)\n      });\n    }\n\n    const metrics = this.calculateMetrics(measurements, memoryMeasurements);\n    this.measurements.push({ name, metrics, timestamp: Date.now() });\n\n    return metrics;\n  }\n\n  /**\n   * Measure throughput (operations per second)\n   */\n  async measureThroughput<T>(\n    name: string,\n    fn: () => T | Promise<T>,\n    duration: number = 5000\n  ): Promise<PerformanceMetrics> {\n    const operations: number[] = [];\n    const startTime = Date.now();\n    let operationCount = 0;\n\n    while (Date.now() - startTime < duration) {\n      const opStart = performance.now();\n      await fn();\n      const opEnd = performance.now();\n      \n      operations.push(opEnd - opStart);\n      operationCount++;\n    }\n\n    const totalTime = Date.now() - startTime;\n    const throughput = (operationCount / totalTime) * 1000; // ops per second\n\n    const metrics: PerformanceMetrics = {\n      executionTime: totalTime,\n      memoryUsage: {\n        heap: 0,\n        external: 0,\n        total: 0\n      },\n      throughput,\n      statistics: this.calculateStatistics(operations)\n    };\n\n    this.measurements.push({ name, metrics, timestamp: Date.now() });\n    return metrics;\n  }\n\n  /**\n   * Benchmark comparison between multiple functions\n   */\n  async benchmarkComparison<T>(\n    benchmarks: Array<{ name: string; fn: () => T | Promise<T> }>,\n    options: Partial<PerformanceTestOptions> = {}\n  ): Promise<Array<{ name: string; metrics: PerformanceMetrics; ranking: number }>> {\n    const results: Array<{ name: string; metrics: PerformanceMetrics }> = [];\n\n    for (const benchmark of benchmarks) {\n      const isAsync = benchmark.fn.constructor.name === 'AsyncFunction';\n      const metrics = isAsync \n        ? await this.measureAsync(benchmark.name, benchmark.fn as () => Promise<T>, options)\n        : this.measureSync(benchmark.name, benchmark.fn as () => T, options);\n      \n      results.push({ name: benchmark.name, metrics });\n    }\n\n    // Rank by execution time (lower is better)\n    const ranked = results\n      .sort((a, b) => (a.metrics.statistics?.mean || a.metrics.executionTime) - \n                      (b.metrics.statistics?.mean || b.metrics.executionTime))\n      .map((result, index) => ({ ...result, ranking: index + 1 }));\n\n    return ranked;\n  }\n\n  /**\n   * Load testing with concurrent operations\n   */\n  async loadTest<T>(\n    name: string,\n    fn: () => Promise<T>,\n    concurrency: number = 10,\n    duration: number = 10000\n  ): Promise<PerformanceMetrics> {\n    const startTime = Date.now();\n    const operations: Array<{ duration: number; success: boolean; error?: string }> = [];\n    const promises: Promise<void>[] = [];\n\n    for (let i = 0; i < concurrency; i++) {\n      promises.push(this.runConcurrentTest(fn, operations, startTime + duration));\n    }\n\n    await Promise.all(promises);\n\n    const successfulOps = operations.filter(op => op.success);\n    const failedOps = operations.filter(op => !op.success);\n    const durations = successfulOps.map(op => op.duration);\n\n    const metrics: PerformanceMetrics = {\n      executionTime: Date.now() - startTime,\n      memoryUsage: {\n        heap: 0,\n        external: 0,\n        total: 0\n      },\n      throughput: (successfulOps.length / ((Date.now() - startTime) / 1000)),\n      statistics: {\n        ...this.calculateStatistics(durations),\n        successRate: successfulOps.length / operations.length,\n        errorRate: failedOps.length / operations.length,\n        totalOperations: operations.length\n      } as any\n    };\n\n    this.measurements.push({ name, metrics, timestamp: Date.now() });\n    return metrics;\n  }\n\n  /**\n   * Memory leak detection\n   */\n  async detectMemoryLeaks<T>(\n    name: string,\n    fn: () => T | Promise<T>,\n    iterations: number = 100\n  ): Promise<{ hasLeak: boolean; memoryGrowth: number; measurements: number[] }> {\n    const memoryMeasurements: number[] = [];\n    \n    // Force initial garbage collection\n    if (global.gc) {\n      global.gc();\n    }\n\n    for (let i = 0; i < iterations; i++) {\n      await fn();\n      \n      // Force garbage collection every 10 iterations\n      if (i % 10 === 0 && global.gc) {\n        global.gc();\n      }\n      \n      const memory = process.memoryUsage();\n      memoryMeasurements.push(memory.heapUsed + memory.external);\n    }\n\n    // Calculate memory growth trend\n    const firstQuarter = memoryMeasurements.slice(0, Math.floor(iterations / 4));\n    const lastQuarter = memoryMeasurements.slice(-Math.floor(iterations / 4));\n    \n    const firstAverage = firstQuarter.reduce((a, b) => a + b, 0) / firstQuarter.length;\n    const lastAverage = lastQuarter.reduce((a, b) => a + b, 0) / lastQuarter.length;\n    \n    const memoryGrowth = lastAverage - firstAverage;\n    const hasLeak = memoryGrowth > (firstAverage * 0.1); // 10% growth threshold\n\n    return {\n      hasLeak,\n      memoryGrowth,\n      measurements: memoryMeasurements\n    };\n  }\n\n  /**\n   * Get all recorded measurements\n   */\n  getAllMeasurements(): Array<{ name: string; metrics: PerformanceMetrics; timestamp: number }> {\n    return [...this.measurements];\n  }\n\n  /**\n   * Clear all measurements\n   */\n  clearMeasurements(): void {\n    this.measurements = [];\n  }\n\n  /**\n   * Generate performance report\n   */\n  generateReport(): string {\n    if (this.measurements.length === 0) {\n      return 'No performance measurements recorded';\n    }\n\n    let report = '=== Performance Report ===\\n\\n';\n\n    for (const measurement of this.measurements) {\n      report += `Test: ${measurement.name}\\n`;\n      report += `Execution Time: ${measurement.metrics.executionTime.toFixed(2)}ms\\n`;\n      \n      if (measurement.metrics.throughput) {\n        report += `Throughput: ${measurement.metrics.throughput.toFixed(2)} ops/sec\\n`;\n      }\n      \n      if (measurement.metrics.statistics) {\n        const stats = measurement.metrics.statistics;\n        report += `Statistics:\\n`;\n        report += `  Mean: ${stats.mean.toFixed(2)}ms\\n`;\n        report += `  Median: ${stats.median.toFixed(2)}ms\\n`;\n        report += `  P95: ${stats.p95.toFixed(2)}ms\\n`;\n        report += `  P99: ${stats.p99.toFixed(2)}ms\\n`;\n        \n        if (stats.variance) {\n          report += `  Variance: ${stats.variance.toFixed(2)}\\n`;\n        }\n        \n        if (stats.standardDeviation) {\n          report += `  Std Dev: ${stats.standardDeviation.toFixed(2)}\\n`;\n        }\n      }\n      \n      report += `Memory Usage:\\n`;\n      report += `  Heap: ${(measurement.metrics.memoryUsage.heap / 1024 / 1024).toFixed(2)}MB\\n`;\n      report += `  External: ${(measurement.metrics.memoryUsage.external / 1024 / 1024).toFixed(2)}MB\\n`;\n      report += `  Total: ${(measurement.metrics.memoryUsage.total / 1024 / 1024).toFixed(2)}MB\\n`;\n      report += '\\n';\n    }\n\n    return report;\n  }\n\n  private calculateMetrics(\n    timeMeasurements: number[],\n    memoryMeasurements: Array<{ heap: number; external: number; total: number }>\n  ): PerformanceMetrics {\n    const executionTime = timeMeasurements.reduce((a, b) => a + b, 0) / timeMeasurements.length;\n    \n    const avgMemory = {\n      heap: memoryMeasurements.reduce((sum, m) => sum + m.heap, 0) / memoryMeasurements.length,\n      external: memoryMeasurements.reduce((sum, m) => sum + m.external, 0) / memoryMeasurements.length,\n      total: memoryMeasurements.reduce((sum, m) => sum + m.total, 0) / memoryMeasurements.length\n    };\n\n    return {\n      executionTime,\n      memoryUsage: avgMemory,\n      statistics: this.calculateStatistics(timeMeasurements)\n    };\n  }\n\n  private calculateStatistics(measurements: number[]) {\n    const sorted = [...measurements].sort((a, b) => a - b);\n    const sum = measurements.reduce((a, b) => a + b, 0);\n    const mean = sum / measurements.length;\n    \n    const median = sorted.length % 2 === 0\n      ? (sorted[sorted.length / 2 - 1] + sorted[sorted.length / 2]) / 2\n      : sorted[Math.floor(sorted.length / 2)];\n\n    const p95Index = Math.floor(sorted.length * 0.95);\n    const p99Index = Math.floor(sorted.length * 0.99);\n    \n    const p95 = sorted[p95Index];\n    const p99 = sorted[p99Index];\n    \n    const variance = measurements.reduce((sum, val) => sum + Math.pow(val - mean, 2), 0) / measurements.length;\n    const standardDeviation = Math.sqrt(variance);\n\n    return {\n      mean,\n      median,\n      p95,\n      p99,\n      variance,\n      standardDeviation\n    };\n  }\n\n  private async runConcurrentTest<T>(\n    fn: () => Promise<T>,\n    operations: Array<{ duration: number; success: boolean; error?: string }>,\n    endTime: number\n  ): Promise<void> {\n    while (Date.now() < endTime) {\n      const start = performance.now();\n      try {\n        await fn();\n        operations.push({\n          duration: performance.now() - start,\n          success: true\n        });\n      } catch (error) {\n        operations.push({\n          duration: performance.now() - start,\n          success: false,\n          error: error instanceof Error ? error.message : String(error)\n        });\n      }\n    }\n  }\n}\n\n// Global performance measurement instance\nexport const performanceMeasurement = new PerformanceMeasurement();\n\n// Convenience functions\nexport function measurePerformance<T>(\n  name: string,\n  fn: () => T,\n  options?: Partial<PerformanceTestOptions>\n): PerformanceMetrics {\n  return performanceMeasurement.measureSync(name, fn, options);\n}\n\nexport async function measureAsyncPerformance<T>(\n  name: string,\n  fn: () => Promise<T>,\n  options?: Partial<PerformanceTestOptions>\n): Promise<PerformanceMetrics> {\n  return performanceMeasurement.measureAsync(name, fn, options);\n}\n\nexport async function benchmarkFunctions<T>(\n  benchmarks: Array<{ name: string; fn: () => T | Promise<T> }>,\n  options?: Partial<PerformanceTestOptions>\n): Promise<Array<{ name: string; metrics: PerformanceMetrics; ranking: number }>> {\n  return performanceMeasurement.benchmarkComparison(benchmarks, options);\n}"],"version":3}