23597a4b073789233df00f819061cb11
/**
 * Performance Measurement Utilities
 *
 * Comprehensive performance testing for both London and Classical TDD
 */
export class PerformanceMeasurement {
    options;
    measurements = [];
    constructor(options = {}) {
        this.options = {
            iterations: 100,
            warmup: 10,
            maxExecutionTime: 1000,
            memoryThresholds: {
                heap: 50 * 1024 * 1024, // 50MB
                external: 10 * 1024 * 1024 // 10MB
            },
            statistics: {
                percentiles: [50, 95, 99],
                includeVariance: true,
                includeDeviation: true
            },
            ...options
        };
    }
    /**
     * Measure performance of a synchronous function
     */
    measureSync(name, fn, options = {}) {
        const config = { ...this.options, ...options };
        const measurements = [];
        const memoryMeasurements = [];
        // Warmup
        for (let i = 0; i < config.warmup; i++) {
            fn();
        }
        // Force garbage collection if available
        if (global.gc) {
            global.gc();
        }
        const initialMemory = process.memoryUsage();
        // Actual measurements
        for (let i = 0; i < config.iterations; i++) {
            const startTime = performance.now();
            const startMemory = process.memoryUsage();
            fn();
            const endTime = performance.now();
            const endMemory = process.memoryUsage();
            measurements.push(endTime - startTime);
            memoryMeasurements.push({
                heap: endMemory.heapUsed - startMemory.heapUsed,
                external: endMemory.external - startMemory.external,
                total: (endMemory.heapUsed + endMemory.external) - (startMemory.heapUsed + startMemory.external)
            });
        }
        const metrics = this.calculateMetrics(measurements, memoryMeasurements);
        this.measurements.push({ name, metrics, timestamp: Date.now() });
        return metrics;
    }
    /**
     * Measure performance of an asynchronous function
     */
    async measureAsync(name, fn, options = {}) {
        const config = { ...this.options, ...options };
        const measurements = [];
        const memoryMeasurements = [];
        // Warmup
        for (let i = 0; i < config.warmup; i++) {
            await fn();
        }
        // Force garbage collection if available
        if (global.gc) {
            global.gc();
        }
        // Actual measurements
        for (let i = 0; i < config.iterations; i++) {
            const startTime = performance.now();
            const startMemory = process.memoryUsage();
            await fn();
            const endTime = performance.now();
            const endMemory = process.memoryUsage();
            measurements.push(endTime - startTime);
            memoryMeasurements.push({
                heap: endMemory.heapUsed - startMemory.heapUsed,
                external: endMemory.external - startMemory.external,
                total: (endMemory.heapUsed + endMemory.external) - (startMemory.heapUsed + startMemory.external)
            });
        }
        const metrics = this.calculateMetrics(measurements, memoryMeasurements);
        this.measurements.push({ name, metrics, timestamp: Date.now() });
        return metrics;
    }
    /**
     * Measure throughput (operations per second)
     */
    async measureThroughput(name, fn, duration = 5000) {
        const operations = [];
        const startTime = Date.now();
        let operationCount = 0;
        while (Date.now() - startTime < duration) {
            const opStart = performance.now();
            await fn();
            const opEnd = performance.now();
            operations.push(opEnd - opStart);
            operationCount++;
        }
        const totalTime = Date.now() - startTime;
        const throughput = (operationCount / totalTime) * 1000; // ops per second
        const metrics = {
            executionTime: totalTime,
            memoryUsage: {
                heap: 0,
                external: 0,
                total: 0
            },
            throughput,
            statistics: this.calculateStatistics(operations)
        };
        this.measurements.push({ name, metrics, timestamp: Date.now() });
        return metrics;
    }
    /**
     * Benchmark comparison between multiple functions
     */
    async benchmarkComparison(benchmarks, options = {}) {
        const results = [];
        for (const benchmark of benchmarks) {
            const isAsync = benchmark.fn.constructor.name === 'AsyncFunction';
            const metrics = isAsync
                ? await this.measureAsync(benchmark.name, benchmark.fn, options)
                : this.measureSync(benchmark.name, benchmark.fn, options);
            results.push({ name: benchmark.name, metrics });
        }
        // Rank by execution time (lower is better)
        const ranked = results
            .sort((a, b) => (a.metrics.statistics?.mean || a.metrics.executionTime) -
            (b.metrics.statistics?.mean || b.metrics.executionTime))
            .map((result, index) => ({ ...result, ranking: index + 1 }));
        return ranked;
    }
    /**
     * Load testing with concurrent operations
     */
    async loadTest(name, fn, concurrency = 10, duration = 10000) {
        const startTime = Date.now();
        const operations = [];
        const promises = [];
        for (let i = 0; i < concurrency; i++) {
            promises.push(this.runConcurrentTest(fn, operations, startTime + duration));
        }
        await Promise.all(promises);
        const successfulOps = operations.filter(op => op.success);
        const failedOps = operations.filter(op => !op.success);
        const durations = successfulOps.map(op => op.duration);
        const metrics = {
            executionTime: Date.now() - startTime,
            memoryUsage: {
                heap: 0,
                external: 0,
                total: 0
            },
            throughput: (successfulOps.length / ((Date.now() - startTime) / 1000)),
            statistics: {
                ...this.calculateStatistics(durations),
                successRate: successfulOps.length / operations.length,
                errorRate: failedOps.length / operations.length,
                totalOperations: operations.length
            }
        };
        this.measurements.push({ name, metrics, timestamp: Date.now() });
        return metrics;
    }
    /**
     * Memory leak detection
     */
    async detectMemoryLeaks(name, fn, iterations = 100) {
        const memoryMeasurements = [];
        // Force initial garbage collection
        if (global.gc) {
            global.gc();
        }
        for (let i = 0; i < iterations; i++) {
            await fn();
            // Force garbage collection every 10 iterations
            if (i % 10 === 0 && global.gc) {
                global.gc();
            }
            const memory = process.memoryUsage();
            memoryMeasurements.push(memory.heapUsed + memory.external);
        }
        // Calculate memory growth trend
        const firstQuarter = memoryMeasurements.slice(0, Math.floor(iterations / 4));
        const lastQuarter = memoryMeasurements.slice(-Math.floor(iterations / 4));
        const firstAverage = firstQuarter.reduce((a, b) => a + b, 0) / firstQuarter.length;
        const lastAverage = lastQuarter.reduce((a, b) => a + b, 0) / lastQuarter.length;
        const memoryGrowth = lastAverage - firstAverage;
        const hasLeak = memoryGrowth > (firstAverage * 0.1); // 10% growth threshold
        return {
            hasLeak,
            memoryGrowth,
            measurements: memoryMeasurements
        };
    }
    /**
     * Get all recorded measurements
     */
    getAllMeasurements() {
        return [...this.measurements];
    }
    /**
     * Clear all measurements
     */
    clearMeasurements() {
        this.measurements = [];
    }
    /**
     * Generate performance report
     */
    generateReport() {
        if (this.measurements.length === 0) {
            return 'No performance measurements recorded';
        }
        let report = '=== Performance Report ===\n\n';
        for (const measurement of this.measurements) {
            report += `Test: ${measurement.name}\n`;
            report += `Execution Time: ${measurement.metrics.executionTime.toFixed(2)}ms\n`;
            if (measurement.metrics.throughput) {
                report += `Throughput: ${measurement.metrics.throughput.toFixed(2)} ops/sec\n`;
            }
            if (measurement.metrics.statistics) {
                const stats = measurement.metrics.statistics;
                report += `Statistics:\n`;
                report += `  Mean: ${stats.mean.toFixed(2)}ms\n`;
                report += `  Median: ${stats.median.toFixed(2)}ms\n`;
                report += `  P95: ${stats.p95.toFixed(2)}ms\n`;
                report += `  P99: ${stats.p99.toFixed(2)}ms\n`;
                if (stats.variance) {
                    report += `  Variance: ${stats.variance.toFixed(2)}\n`;
                }
                if (stats.standardDeviation) {
                    report += `  Std Dev: ${stats.standardDeviation.toFixed(2)}\n`;
                }
            }
            report += `Memory Usage:\n`;
            report += `  Heap: ${(measurement.metrics.memoryUsage.heap / 1024 / 1024).toFixed(2)}MB\n`;
            report += `  External: ${(measurement.metrics.memoryUsage.external / 1024 / 1024).toFixed(2)}MB\n`;
            report += `  Total: ${(measurement.metrics.memoryUsage.total / 1024 / 1024).toFixed(2)}MB\n`;
            report += '\n';
        }
        return report;
    }
    calculateMetrics(timeMeasurements, memoryMeasurements) {
        const executionTime = timeMeasurements.reduce((a, b) => a + b, 0) / timeMeasurements.length;
        const avgMemory = {
            heap: memoryMeasurements.reduce((sum, m) => sum + m.heap, 0) / memoryMeasurements.length,
            external: memoryMeasurements.reduce((sum, m) => sum + m.external, 0) / memoryMeasurements.length,
            total: memoryMeasurements.reduce((sum, m) => sum + m.total, 0) / memoryMeasurements.length
        };
        return {
            executionTime,
            memoryUsage: avgMemory,
            statistics: this.calculateStatistics(timeMeasurements)
        };
    }
    calculateStatistics(measurements) {
        const sorted = [...measurements].sort((a, b) => a - b);
        const sum = measurements.reduce((a, b) => a + b, 0);
        const mean = sum / measurements.length;
        const median = sorted.length % 2 === 0
            ? (sorted[sorted.length / 2 - 1] + sorted[sorted.length / 2]) / 2
            : sorted[Math.floor(sorted.length / 2)];
        const p95Index = Math.floor(sorted.length * 0.95);
        const p99Index = Math.floor(sorted.length * 0.99);
        const p95 = sorted[p95Index];
        const p99 = sorted[p99Index];
        const variance = measurements.reduce((sum, val) => sum + Math.pow(val - mean, 2), 0) / measurements.length;
        const standardDeviation = Math.sqrt(variance);
        return {
            mean,
            median,
            p95,
            p99,
            variance,
            standardDeviation
        };
    }
    async runConcurrentTest(fn, operations, endTime) {
        while (Date.now() < endTime) {
            const start = performance.now();
            try {
                await fn();
                operations.push({
                    duration: performance.now() - start,
                    success: true
                });
            }
            catch (error) {
                operations.push({
                    duration: performance.now() - start,
                    success: false,
                    error: error instanceof Error ? error.message : String(error)
                });
            }
        }
    }
}
// Global performance measurement instance
export const performanceMeasurement = new PerformanceMeasurement();
// Convenience functions
export function measurePerformance(name, fn, options) {
    return performanceMeasurement.measureSync(name, fn, options);
}
export async function measureAsyncPerformance(name, fn, options) {
    return performanceMeasurement.measureAsync(name, fn, options);
}
export async function benchmarkFunctions(benchmarks, options) {
    return performanceMeasurement.benchmarkComparison(benchmarks, options);
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL2hvbWUvbWh1Z28vY29kZS9jbGF1ZGUtY29kZS1mbG93L3NyYy9fX3Rlc3RzX18vaGVscGVycy9wZXJmb3JtYW5jZS1tZWFzdXJlbWVudC50cyIsIm1hcHBpbmdzIjoiQUFBQTs7OztHQUlHO0FBSUgsTUFBTSxPQUFPLHNCQUFzQjtJQUN6QixPQUFPLENBQXlCO0lBQ2hDLFlBQVksR0FJZixFQUFFLENBQUM7SUFFUixZQUFZLFVBQWtDLEVBQUU7UUFDOUMsSUFBSSxDQUFDLE9BQU8sR0FBRztZQUNiLFVBQVUsRUFBRSxHQUFHO1lBQ2YsTUFBTSxFQUFFLEVBQUU7WUFDVixnQkFBZ0IsRUFBRSxJQUFJO1lBQ3RCLGdCQUFnQixFQUFFO2dCQUNoQixJQUFJLEVBQUUsRUFBRSxHQUFHLElBQUksR0FBRyxJQUFJLEVBQUUsT0FBTztnQkFDL0IsUUFBUSxFQUFFLEVBQUUsR0FBRyxJQUFJLEdBQUcsSUFBSSxDQUFDLE9BQU87YUFDbkM7WUFDRCxVQUFVLEVBQUU7Z0JBQ1YsV0FBVyxFQUFFLENBQUMsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLENBQUM7Z0JBQ3pCLGVBQWUsRUFBRSxJQUFJO2dCQUNyQixnQkFBZ0IsRUFBRSxJQUFJO2FBQ3ZCO1lBQ0QsR0FBRyxPQUFPO1NBQ1gsQ0FBQztJQUNKLENBQUM7SUFFRDs7T0FFRztJQUNILFdBQVcsQ0FDVCxJQUFZLEVBQ1osRUFBVyxFQUNYLFVBQTJDLEVBQUU7UUFFN0MsTUFBTSxNQUFNLEdBQUcsRUFBRSxHQUFHLElBQUksQ0FBQyxPQUFPLEVBQUUsR0FBRyxPQUFPLEVBQUUsQ0FBQztRQUMvQyxNQUFNLFlBQVksR0FBYSxFQUFFLENBQUM7UUFDbEMsTUFBTSxrQkFBa0IsR0FBNkQsRUFBRSxDQUFDO1FBRXhGLFNBQVM7UUFDVCxLQUFLLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsTUFBTSxDQUFDLE1BQU8sRUFBRSxDQUFDLEVBQUUsRUFBRSxDQUFDO1lBQ3hDLEVBQUUsRUFBRSxDQUFDO1FBQ1AsQ0FBQztRQUVELHdD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Q0FBQyxZQUFzQjtRQUNoRCxNQUFNLE1BQU0sR0FBRyxDQUFDLEdBQUcsWUFBWSxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO1FBQ3ZELE1BQU0sR0FBRyxHQUFHLFlBQVksQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDO1FBQ3BELE1BQU0sSUFBSSxHQUFHLEdBQUcsR0FBRyxZQUFZLENBQUMsTUFBTSxDQUFDO1FBRXZDLE1BQU0sTUFBTSxHQUFHLE1BQU0sQ0FBQyxNQUFNLEdBQUcsQ0FBQyxLQUFLLENBQUM7WUFDcEMsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxNQUFNLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQyxHQUFHLE1BQU0sQ0FBQyxNQUFNLENBQUMsTUFBTSxHQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQztZQUNqRSxDQUFDLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxDQUFDLE1BQU0sR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBRTFDLE1BQU0sUUFBUSxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxDQUFDLE1BQU0sR0FBRyxJQUFJLENBQUMsQ0FBQztRQUNsRCxNQUFNLFFBQVEsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxNQUFNLEdBQUcsSUFBSSxDQUFDLENBQUM7UUFFbEQsTUFBTSxHQUFHLEdBQUcsTUFBTSxDQUFDLFFBQVEsQ0FBQyxDQUFDO1FBQzdCLE1BQU0sR0FBRyxHQUFHLE1BQU0sQ0FBQyxRQUFRLENBQUMsQ0FBQztRQUU3QixNQUFNLFFBQVEsR0FBRyxZQUFZLENBQUMsTUFBTSxDQUFDLENBQUMsR0FBRyxFQUFFLEdBQUcsRUFBRSxFQUFFLENBQUMsR0FBRyxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsR0FBRyxHQUFHLElBQUksRUFBRSxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsR0FBRyxZQUFZLENBQUMsTUFBTSxDQUFDO1FBQzNHLE1BQU0saUJBQWlCLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQztRQUU5QyxPQUFPO1lBQ0wsSUFBSTtZQUNKLE1BQU07WUFDTixHQUFHO1lBQ0gsR0FBRztZQUNILFFBQVE7WUFDUixpQkFBaUI7U0FDbEIsQ0FBQztJQUNKLENBQUM7SUFFTyxLQUFLLENBQUMsaUJBQWlCLENBQzdCLEVBQW9CLEVBQ3BCLFVBQXlFLEVBQ3pFLE9BQWU7UUFFZixPQUFPLElBQUksQ0FBQyxHQUFHLEVBQUUsR0FBRyxPQUFPLEVBQUUsQ0FBQztZQUM1QixNQUFNLEtBQUssR0FBRyxXQUFXLENBQUMsR0FBRyxFQUFFLENBQUM7WUFDaEMsSUFBSSxDQUFDO2dCQUNILE1BQU0sRUFBRSxFQUFFLENBQUM7Z0JBQ1gsVUFBVSxDQUFDLElBQUksQ0FBQztvQkFDZCxRQUFRLEVBQUUsV0FBVyxDQUFDLEdBQUcsRUFBRSxHQUFHLEtBQUs7b0JBQ25DLE9BQU8sRUFBRSxJQUFJO2lCQUNkLENBQUMsQ0FBQztZQUNMLENBQUM7WUFBQyxPQUFPLEtBQUssRUFBRSxDQUFDO2dCQUNmLFVBQVUsQ0FBQyxJQUFJLENBQUM7b0JBQ2QsUUFBUSxFQUFFLFdBQVcsQ0FBQyxHQUFHLEVBQUUsR0FBRyxLQUFLO29CQUNuQyxPQUFPLEVBQUUsS0FBSztvQkFDZCxLQUFLLEVBQUUsS0FBSyxZQUFZLEtBQUssQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQztpQkFDOUQsQ0FBQyxDQUFDO1lBQ0wsQ0FBQztRQUNILENBQUM7SUFDSCxDQUFDO0NBQ0Y7QUFFRCwwQ0FBMEM7QUFDMUMsTUFBTSxDQUFDLE1BQU0sc0JBQXNCLEdBQUcsSUFBSSxzQkFBc0IsRUFBRSxDQUFDO0FBRW5FLHdCQUF3QjtBQUN4QixNQUFNLFVBQVUsa0JBQWtCLENBQ2hDLElBQVksRUFDWixFQUFXLEVBQ1gsT0FBeUM7SUFFekMsT0FBTyxzQkFBc0IsQ0FBQyxXQUFXLENBQUMsSUFBSSxFQUFFLEVBQUUsRUFBRSxPQUFPLENBQUMsQ0FBQztBQUMvRCxDQUFDO0FBRUQsTUFBTSxDQUFDLEtBQUssVUFBVSx1QkFBdUIsQ0FDM0MsSUFBWSxFQUNaLEVBQW9CLEVBQ3BCLE9BQXlDO0lBRXpDLE9BQU8sc0JBQXNCLENBQUMsWUFBWSxDQUFDLElBQUksRUFBRSxFQUFFLEVBQUUsT0FBTyxDQUFDLENBQUM7QUFDaEUsQ0FBQztBQUVELE1BQU0sQ0FBQyxLQUFLLFVBQVUsa0JBQWtCLENBQ3RDLFVBQTZELEVBQzdELE9BQXlDO0lBRXpDLE9BQU8sc0JBQXNCLENBQUMsbUJBQW1CLENBQUMsVUFBVSxFQUFFLE9BQU8sQ0FBQyxDQUFDO0FBQ3pFLENBQUMiLCJuYW1lcyI6W10sInNvdXJjZXMiOlsiL2hvbWUvbWh1Z28vY29kZS9jbGF1ZGUtY29kZS1mbG93L3NyYy9fX3Rlc3RzX18vaGVscGVycy9wZXJmb3JtYW5jZS1tZWFzdXJlbWVudC50cyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIFBlcmZvcm1hbmNlIE1lYXN1cmVtZW50IFV0aWxpdGllc1xuICogXG4gKiBDb21wcmVoZW5zaXZlIHBlcmZvcm1hbmNlIHRlc3RpbmcgZm9yIGJvdGggTG9uZG9uIGFuZCBDbGFzc2ljYWwgVEREXG4gKi9cblxuaW1wb3J0IHR5cGUgeyBQZXJmb3JtYW5jZVRlc3RPcHRpb25zLCBQZXJmb3JtYW5jZU1ldHJpY3MgfSBmcm9tICcuL3R5cGVzLmpzJztcblxuZXhwb3J0IGNsYXNzIFBlcmZvcm1hbmNlTWVhc3VyZW1lbnQge1xuICBwcml2YXRlIG9wdGlvbnM6IFBlcmZvcm1hbmNlVGVzdE9wdGlvbnM7XG4gIHByaXZhdGUgbWVhc3VyZW1lbnRzOiBBcnJheTx7XG4gICAgbmFtZTogc3RyaW5nO1xuICAgIG1ldHJpY3M6IFBlcmZvcm1hbmNlTWV0cmljcztcbiAgICB0aW1lc3RhbXA6IG51bWJlcjtcbiAgfT4gPSBbXTtcblxuICBjb25zdHJ1Y3RvcihvcHRpb25zOiBQZXJmb3JtYW5jZVRlc3RPcHRpb25zID0ge30pIHtcbiAgICB0aGlzLm9wdGlvbnMgPSB7XG4gICAgICBpdGVyYXRpb25zOiAxMDAsXG4gICAgICB3YXJtdXA6IDEwLFxuICAgICAgbWF4RXhlY3V0aW9uVGltZTogMTAwMCxcbiAgICAgIG1lbW9yeVRocmVzaG9sZHM6IHtcbiAgICAgICAgaGVhcDogNTAgKiAxMDI0ICogMTAyNCwgLy8gNTBNQlxuICAgICAgICBleHRlcm5hbDogMTAgKiAxMDI0ICogMTAyNCAvLyAxME1CXG4gICAgICB9LFxuICAgICAgc3RhdGlzdGljczoge1xuICAgICAgICBwZXJjZW50aWxlczogWzUwLCA5NSwgOTldLFxuICAgICAgICBpbmNsdWRlVmFyaWFuY2U6IHRydWUsXG4gICAgICAgIGluY2x1ZGVEZXZpYXRpb246IHRydWVcbiAgICAgIH0sXG4gICAgICAuLi5vcHRpb25zXG4gICAgfTtcbiAgfVxuXG4gIC8qKlxuICAgKiBNZWFzdXJlIHBlcmZvcm1hbmNlIG9mIGEgc3luY2hyb25vdXMgZnVuY3Rpb25cbiAgICovXG4gIG1lYXN1cmVTeW5jPFQ+KFxuICAgIG5hbWU6IHN0cmluZyxcbiAgICBmbjogKCkgPT4gVCxcbiAgICBvcHRpb25zOiBQYXJ0aWFsPFBlcmZvcm1hbmNlVGVzdE9wdGlvbnM+ID0ge31cbiAgKTogUGVyZm9ybWFuY2VNZXRyaWNzIHtcbiAgICBjb25zdCBjb25maWcgPSB7IC4uLnRoaXMub3B0aW9ucywgLi4ub3B0aW9ucyB9O1xuICAgIGNvbnN0IG1lYXN1cmVtZW50czogbnVtYmVyW10gPSBbXTtcbiAgICBjb25zdCBtZW1vcnlNZWFzdXJlbWVudHM6IEFycmF5PHsgaGVhcDogbnVtYmVyOyBleHRlcm5hbDogbnVtYmVyOyB0b3RhbDogbnVtYmVyIH0+ID0gW107XG5cbiAgICAvLyBXYXJtdXBcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGNvbmZpZy53YXJtdXAhOyBpKyspIHtcbiAgICAgIGZuKCk7XG4gICAgfVxuXG4gICAgLy8gRm9yY2UgZ2FyYmFnZSBjb2xsZWN0aW9uIGlmIGF2YWlsYWJsZVxuICAgIGlmIChnbG9iYWwuZ2MpIHtcbiAgICAgIGdsb2JhbC5nYygpO1xuICAgIH1cblxuICAgIGNvbnN0IGluaXRpYWxNZW1vcnkgPSBwcm9jZXNzLm1lbW9yeVVzYWdlKCk7XG5cbiAgICAvLyBBY3R1YWwgbWVhc3VyZW1lbnRzXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBjb25maWcuaXRlcmF0aW9ucyE7IGkrKykge1xuICAgICAgY29uc3Qgc3RhcnRUaW1lID0gcGVyZm9ybWFuY2Uubm93KCk7XG4gICAgICBjb25zdCBzdGFydE1lbW9yeSA9IHByb2Nlc3MubWVtb3J5VXNhZ2UoKTtcblxuICAgICAgZm4oKTtcblxuICAgICAgY29uc3QgZW5kVGltZSA9IHBlcmZvcm1hbmNlLm5vdygpO1xuICAgICAgY29uc3QgZW5kTWVtb3J5ID0gcHJvY2Vzcy5tZW1vcnlVc2FnZSgpO1xuXG4gICAgICBtZWFzdXJlbWVudHMucHVzaChlbmRUaW1lIC0gc3RhcnRUaW1lKTtcbiAgICAgIG1lbW9yeU1lYXN1cmVtZW50cy5wdXNoKHtcbiAgICAgICAgaGVhcDogZW5kTWVtb3J5LmhlYXBVc2VkIC0gc3RhcnRNZW1vcnkuaGVhcFVzZWQsXG4gICAgICAgIGV4dGVybmFsOiBlbmRNZW1vcnkuZXh0ZXJuYWwgLSBzdGFydE1lbW9yeS5leHRlcm5hbCxcbiAgICAgICAgdG90YWw6IChlbmRNZW1vcnkuaGVhcFVzZWQgKyBlbmRNZW1vcnkuZXh0ZXJuYWwpIC0gKHN0YXJ0TWVtb3J5LmhlYXBVc2VkICsgc3RhcnRNZW1vcnkuZXh0ZXJuYWwpXG4gICAgICB9KTtcbiAgICB9XG5cbiAgICBjb25zdCBtZXRyaWNzID0gdGhpcy5jYWxjdWxhdGVNZXRyaWNzKG1lYXN1cmVtZW50cywgbWVtb3J5TWVhc3VyZW1lbnRzKTtcbiAgICB0aGlzLm1lYXN1cmVtZW50cy5wdXNoKHsgbmFtZSwgbWV0cmljcywgdGltZXN0YW1wOiBEYXRlLm5vdygpIH0pO1xuXG4gICAgcmV0dXJuIG1ldHJpY3M7XG4gIH1cblxuICAvKipcbiAgICogTWVhc3VyZSBwZXJmb3JtYW5jZSBvZiBhbiBhc3luY2hyb25vdXMgZnVuY3Rpb25cbiAgICovXG4gIGFzeW5jIG1lYXN1cmVBc3luYzxUPihcbiAgICBuYW1lOiBzdHJpbmcsXG4gICAgZm46ICgpID0+IFByb21pc2U8VD4sXG4gICAgb3B0aW9uczogUGFydGlhbDxQZXJmb3JtYW5jZVRlc3RPcHRpb25zPiA9IHt9XG4gICk6IFByb21pc2U8UGVyZm9ybWFuY2VNZXRyaWNzPiB7XG4gICAgY29uc3QgY29uZmlnID0geyAuLi50aGlzLm9wdGlvbnMsIC4uLm9wdGlvbnMgfTtcbiAgICBjb25zdCBtZWFzdXJlbWVudHM6IG51bWJlcltdID0gW107XG4gICAgY29uc3QgbWVtb3J5TWVhc3VyZW1lbnRzOiBBcnJheTx7IGhlYXA6IG51bWJlcjsgZXh0ZXJuYWw6IG51bWJlcjsgdG90YWw6IG51bWJlciB9PiA9IFtdO1xuXG4gICAgLy8gV2FybXVwXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBjb25maWcud2FybXVwITsgaSsrKSB7XG4gICAgICBhd2FpdCBmbigpO1xuICAgIH1cblxuICAgIC8vIEZvcmNlIGdhcmJhZ2UgY29sbGVjdGlvbiBpZiBhdmFpbGFibGVcbiAgICBpZiAoZ2xvYmFsLmdjKSB7XG4gICAgICBnbG9iYWwuZ2MoKTtcbiAgICB9XG5cbiAgICAvLyBBY3R1YWwgbWVhc3VyZW1lbnRzXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBjb25maWcuaXRlcmF0aW9ucyE7IGkrKykge1xuICAgICAgY29uc3Qgc3RhcnRUaW1lID0gcGVyZm9ybWFuY2Uubm93KCk7XG4gICAgICBjb25zdCBzdGFydE1lbW9yeSA9IHByb2Nlc3MubWVtb3J5VXNhZ2UoKTtcblxuICAgICAgYXdhaXQgZm4oKTtcblxuICAgICAgY29uc3QgZW5kVGltZSA9IHBlcmZvcm1hbmNlLm5vdygpO1xuICAgICAgY29uc3QgZW5kTWVtb3J5ID0gcHJvY2Vzcy5tZW1vcnlVc2FnZSgpO1xuXG4gICAgICBtZWFzdXJlbWVudHMucHVzaChlbmRUaW1lIC0gc3RhcnRUaW1lKTtcbiAgICAgIG1lbW9yeU1lYXN1cmVtZW50cy5wdXNoKHtcbiAgICAgICAgaGVhcDogZW5kTWVtb3J5LmhlYXBVc2VkIC0gc3RhcnRNZW1vcnkuaGVhcFVzZWQsXG4gICAgICAgIGV4dGVybmFsOiBlbmRNZW1vcnkuZXh0ZXJuYWwgLSBzdGFydE1lbW9yeS5leHRlcm5hbCxcbiAgICAgICAgdG90YWw6IChlbmRNZW1vcnkuaGVhcFVzZWQgKyBlbmRNZW1vcnkuZXh0ZXJuYWwpIC0gKHN0YXJ0TWVtb3J5LmhlYXBVc2VkICsgc3RhcnRNZW1vcnkuZXh0ZXJuYWwpXG4gICAgICB9KTtcbiAgICB9XG5cbiAgICBjb25zdCBtZXRyaWNzID0gdGhpcy5jYWxjdWxhdGVNZXRyaWNzKG1lYXN1cmVtZW50cywgbWVtb3J5TWVhc3VyZW1lbnRzKTtcbiAgICB0aGlzLm1lYXN1cmVtZW50cy5wdXNoKHsgbmFtZSwgbWV0cmljcywgdGltZXN0YW1wOiBEYXRlLm5vdygpIH0pO1xuXG4gICAgcmV0dXJuIG1ldHJpY3M7XG4gIH1cblxuICAvKipcbiAgICogTWVhc3VyZSB0aHJvdWdocHV0IChvcGVyYXRpb25zIHBlciBzZWNvbmQpXG4gICAqL1xuICBhc3luYyBtZWFzdXJlVGhyb3VnaHB1dDxUPihcbiAgICBuYW1lOiBzdHJpbmcsXG4gICAgZm46ICgpID0+IFQgfCBQcm9taXNlPFQ+LFxuICAgIGR1cmF0aW9uOiBudW1iZXIgPSA1MDAwXG4gICk6IFByb21pc2U8UGVyZm9ybWFuY2VNZXRyaWNzPiB7XG4gICAgY29uc3Qgb3BlcmF0aW9uczogbnVtYmVyW10gPSBbXTtcbiAgICBjb25zdCBzdGFydFRpbWUgPSBEYXRlLm5vdygpO1xuICAgIGxldCBvcGVyYXRpb25Db3VudCA9IDA7XG5cbiAgICB3aGlsZSAoRGF0ZS5ub3coKSAtIHN0YXJ0VGltZSA8IGR1cmF0aW9uKSB7XG4gICAgICBjb25zdCBvcFN0YXJ0ID0gcGVyZm9ybWFuY2Uubm93KCk7XG4gICAgICBhd2FpdCBmbigpO1xuICAgICAgY29uc3Qgb3BFbmQgPSBwZXJmb3JtYW5jZS5ub3coKTtcbiAgICAgIFxuICAgICAgb3BlcmF0aW9ucy5wdXNoKG9wRW5kIC0gb3BTdGFydCk7XG4gICAgICBvcGVyYXRpb25Db3VudCsrO1xuICAgIH1cblxuICAgIGNvbnN0IHRvdGFsVGltZSA9IERhdGUubm93KCkgLSBzdGFydFRpbWU7XG4gICAgY29uc3QgdGhyb3VnaHB1dCA9IChvcGVyYXRpb25Db3VudCAvIHRvdGFsVGltZSkgKiAxMDAwOyAvLyBvcHMgcGVyIHNlY29uZFxuXG4gICAgY29uc3QgbWV0cmljczogUGVyZm9ybWFuY2VNZXRyaWNzID0ge1xuICAgICAgZXhlY3V0aW9uVGltZTogdG90YWxUaW1lLFxuICAgICAgbWVtb3J5VXNhZ2U6IHtcbiAgICAgICAgaGVhcDogMCxcbiAgICAgICAgZXh0ZXJuYWw6IDAsXG4gICAgICAgIHRvdGFsOiAwXG4gICAgICB9LFxuICAgICAgdGhyb3VnaHB1dCxcbiAgICAgIHN0YXRpc3RpY3M6IHRoaXMuY2FsY3VsYXRlU3RhdGlzdGljcyhvcGVyYXRpb25zKVxuICAgIH07XG5cbiAgICB0aGlzLm1lYXN1cmVtZW50cy5wdXNoKHsgbmFtZSwgbWV0cmljcywgdGltZXN0YW1wOiBEYXRlLm5vdygpIH0pO1xuICAgIHJldHVybiBtZXRyaWNzO1xuICB9XG5cbiAgLyoqXG4gICAqIEJlbmNobWFyayBjb21wYXJpc29uIGJldHdlZW4gbXVsdGlwbGUgZnVuY3Rpb25zXG4gICAqL1xuICBhc3luYyBiZW5jaG1hcmtDb21wYXJpc29uPFQ+KFxuICAgIGJlbmNobWFya3M6IEFycmF5PHsgbmFtZTogc3RyaW5nOyBmbjogKCkgPT4gVCB8IFByb21pc2U8VD4gfT4sXG4gICAgb3B0aW9uczogUGFydGlhbDxQZXJmb3JtYW5jZVRlc3RPcHRpb25zPiA9IHt9XG4gICk6IFByb21pc2U8QXJyYXk8eyBuYW1lOiBzdHJpbmc7IG1ldHJpY3M6IFBlcmZvcm1hbmNlTWV0cmljczsgcmFua2luZzogbnVtYmVyIH0+PiB7XG4gICAgY29uc3QgcmVzdWx0czogQXJyYXk8eyBuYW1lOiBzdHJpbmc7IG1ldHJpY3M6IFBlcmZvcm1hbmNlTWV0cmljcyB9PiA9IFtdO1xuXG4gICAgZm9yIChjb25zdCBiZW5jaG1hcmsgb2YgYmVuY2htYXJrcykge1xuICAgICAgY29uc3QgaXNBc3luYyA9IGJlbmNobWFyay5mbi5jb25zdHJ1Y3Rvci5uYW1lID09PSAnQXN5bmNGdW5jdGlvbic7XG4gICAgICBjb25zdCBtZXRyaWNzID0gaXNBc3luYyBcbiAgICAgICAgPyBhd2FpdCB0aGlzLm1lYXN1cmVBc3luYyhiZW5jaG1hcmsubmFtZSwgYmVuY2htYXJrLmZuIGFzICgpID0+IFByb21pc2U8VD4sIG9wdGlvbnMpXG4gICAgICAgIDogdGhpcy5tZWFzdXJlU3luYyhiZW5jaG1hcmsubmFtZSwgYmVuY2htYXJrLmZuIGFzICgpID0+IFQsIG9wdGlvbnMpO1xuICAgICAgXG4gICAgICByZXN1bHRzLnB1c2goeyBuYW1lOiBiZW5jaG1hcmsubmFtZSwgbWV0cmljcyB9KTtcbiAgICB9XG5cbiAgICAvLyBSYW5rIGJ5IGV4ZWN1dGlvbiB0aW1lIChsb3dlciBpcyBiZXR0ZXIpXG4gICAgY29uc3QgcmFua2VkID0gcmVzdWx0c1xuICAgICAgLnNvcnQoKGEsIGIpID0+IChhLm1ldHJpY3Muc3RhdGlzdGljcz8ubWVhbiB8fCBhLm1ldHJpY3MuZXhlY3V0aW9uVGltZSkgLSBcbiAgICAgICAgICAgICAgICAgICAgICAoYi5tZXRyaWNzLnN0YXRpc3RpY3M/Lm1lYW4gfHwgYi5tZXRyaWNzLmV4ZWN1dGlvblRpbWUpKVxuICAgICAgLm1hcCgocmVzdWx0LCBpbmRleCkgPT4gKHsgLi4ucmVzdWx0LCByYW5raW5nOiBpbmRleCArIDEgfSkpO1xuXG4gICAgcmV0dXJuIHJhbmtlZDtcbiAgfVxuXG4gIC8qKlxuICAgKiBMb2FkIHRlc3Rpbmcgd2l0aCBjb25jdXJyZW50IG9wZXJhdGlvbnNcbiAgICovXG4gIGFzeW5jIGxvYWRUZXN0PFQ+KFxuICAgIG5hbWU6IHN0cmluZyxcbiAgICBmbjogKCkgPT4gUHJvbWlzZTxUPixcbiAgICBjb25jdXJyZW5jeTogbnVtYmVyID0gMTAsXG4gICAgZHVyYXRpb246IG51bWJlciA9IDEwMDAwXG4gICk6IFByb21pc2U8UGVyZm9ybWFuY2VNZXRyaWNzPiB7XG4gICAgY29uc3Qgc3RhcnRUaW1lID0gRGF0ZS5ub3coKTtcbiAgICBjb25zdCBvcGVyYXRpb25zOiBBcnJheTx7IGR1cmF0aW9uOiBudW1iZXI7IHN1Y2Nlc3M6IGJvb2xlYW47IGVycm9yPzogc3RyaW5nIH0+ID0gW107XG4gICAgY29uc3QgcHJvbWlzZXM6IFByb21pc2U8dm9pZD5bXSA9IFtdO1xuXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBjb25jdXJyZW5jeTsgaSsrKSB7XG4gICAgICBwcm9taXNlcy5wdXNoKHRoaXMucnVuQ29uY3VycmVudFRlc3QoZm4sIG9wZXJhdGlvbnMsIHN0YXJ0VGltZSArIGR1cmF0aW9uKSk7XG4gICAgfVxuXG4gICAgYXdhaXQgUHJvbWlzZS5hbGwocHJvbWlzZXMpO1xuXG4gICAgY29uc3Qgc3VjY2Vzc2Z1bE9wcyA9IG9wZXJhdGlvbnMuZmlsdGVyKG9wID0+IG9wLnN1Y2Nlc3MpO1xuICAgIGNvbnN0IGZhaWxlZE9wcyA9IG9wZXJhdGlvbnMuZmlsdGVyKG9wID0+ICFvcC5zdWNjZXNzKTtcbiAgICBjb25zdCBkdXJhdGlvbnMgPSBzdWNjZXNzZnVsT3BzLm1hcChvcCA9PiBvcC5kdXJhdGlvbik7XG5cbiAgICBjb25zdCBtZXRyaWNzOiBQZXJmb3JtYW5jZU1ldHJpY3MgPSB7XG4gICAgICBleGVjdXRpb25UaW1lOiBEYXRlLm5vdygpIC0gc3RhcnRUaW1lLFxuICAgICAgbWVtb3J5VXNhZ2U6IHtcbiAgICAgICAgaGVhcDogMCxcbiAgICAgICAgZXh0ZXJuYWw6IDAsXG4gICAgICAgIHRvdGFsOiAwXG4gICAgICB9LFxuICAgICAgdGhyb3VnaHB1dDogKHN1Y2Nlc3NmdWxPcHMubGVuZ3RoIC8gKChEYXRlLm5vdygpIC0gc3RhcnRUaW1lKSAvIDEwMDApKSxcbiAgICAgIHN0YXRpc3RpY3M6IHtcbiAgICAgICAgLi4udGhpcy5jYWxjdWxhdGVTdGF0aXN0aWNzKGR1cmF0aW9ucyksXG4gICAgICAgIHN1Y2Nlc3NSYXRlOiBzdWNjZXNzZnVsT3BzLmxlbmd0aCAvIG9wZXJhdGlvbnMubGVuZ3RoLFxuICAgICAgICBlcnJvclJhdGU6IGZhaWxlZE9wcy5sZW5ndGggLyBvcGVyYXRpb25zLmxlbmd0aCxcbiAgICAgICAgdG90YWxPcGVyYXRpb25zOiBvcGVyYXRpb25zLmxlbmd0aFxuICAgICAgfSBhcyBhbnlcbiAgICB9O1xuXG4gICAgdGhpcy5tZWFzdXJlbWVudHMucHVzaCh7IG5hbWUsIG1ldHJpY3MsIHRpbWVzdGFtcDogRGF0ZS5ub3coKSB9KTtcbiAgICByZXR1cm4gbWV0cmljcztcbiAgfVxuXG4gIC8qKlxuICAgKiBNZW1vcnkgbGVhayBkZXRlY3Rpb25cbiAgICovXG4gIGFzeW5jIGRldGVjdE1lbW9yeUxlYWtzPFQ+KFxuICAgIG5hbWU6IHN0cmluZyxcbiAgICBmbjogKCkgPT4gVCB8IFByb21pc2U8VD4sXG4gICAgaXRlcmF0aW9uczogbnVtYmVyID0gMTAwXG4gICk6IFByb21pc2U8eyBoYXNMZWFrOiBib29sZWFuOyBtZW1vcnlHcm93dGg6IG51bWJlcjsgbWVhc3VyZW1lbnRzOiBudW1iZXJbXSB9PiB7XG4gICAgY29uc3QgbWVtb3J5TWVhc3VyZW1lbnRzOiBudW1iZXJbXSA9IFtdO1xuICAgIFxuICAgIC8vIEZvcmNlIGluaXRpYWwgZ2FyYmFnZSBjb2xsZWN0aW9uXG4gICAgaWYgKGdsb2JhbC5nYykge1xuICAgICAgZ2xvYmFsLmdjKCk7XG4gICAgfVxuXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBpdGVyYXRpb25zOyBpKyspIHtcbiAgICAgIGF3YWl0IGZuKCk7XG4gICAgICBcbiAgICAgIC8vIEZvcmNlIGdhcmJhZ2UgY29sbGVjdGlvbiBldmVyeSAxMCBpdGVyYXRpb25zXG4gICAgICBpZiAoaSAlIDEwID09PSAwICYmIGdsb2JhbC5nYykge1xuICAgICAgICBnbG9iYWwuZ2MoKTtcbiAgICAgIH1cbiAgICAgIFxuICAgICAgY29uc3QgbWVtb3J5ID0gcHJvY2Vzcy5tZW1vcnlVc2FnZSgpO1xuICAgICAgbWVtb3J5TWVhc3VyZW1lbnRzLnB1c2gobWVtb3J5LmhlYXBVc2VkICsgbWVtb3J5LmV4dGVybmFsKTtcbiAgICB9XG5cbiAgICAvLyBDYWxjdWxhdGUgbWVtb3J5IGdyb3d0aCB0cmVuZFxuICAgIGNvbnN0IGZpcnN0UXVhcnRlciA9IG1lbW9yeU1lYXN1cmVtZW50cy5zbGljZSgwLCBNYXRoLmZsb29yKGl0ZXJhdGlvbnMgLyA0KSk7XG4gICAgY29uc3QgbGFzdFF1YXJ0ZXIgPSBtZW1vcnlNZWFzdXJlbWVudHMuc2xpY2UoLU1hdGguZmxvb3IoaXRlcmF0aW9ucyAvIDQpKTtcbiAgICBcbiAgICBjb25zdCBmaXJzdEF2ZXJhZ2UgPSBmaXJzdFF1YXJ0ZXIucmVkdWNlKChhLCBiKSA9PiBhICsgYiwgMCkgLyBmaXJzdFF1YXJ0ZXIubGVuZ3RoO1xuICAgIGNvbnN0IGxhc3RBdmVyYWdlID0gbGFzdFF1YXJ0ZXIucmVkdWNlKChhLCBiKSA9PiBhICsgYiwgMCkgLyBsYXN0UXVhcnRlci5sZW5ndGg7XG4gICAgXG4gICAgY29uc3QgbWVtb3J5R3Jvd3RoID0gbGFzdEF2ZXJhZ2UgLSBmaXJzdEF2ZXJhZ2U7XG4gICAgY29uc3QgaGFzTGVhayA9IG1lbW9yeUdyb3d0aCA+IChmaXJzdEF2ZXJhZ2UgKiAwLjEpOyAvLyAxMCUgZ3Jvd3RoIHRocmVzaG9sZFxuXG4gICAgcmV0dXJuIHtcbiAgICAgIGhhc0xlYWssXG4gICAgICBtZW1vcnlHcm93dGgsXG4gICAgICBtZWFzdXJlbWVudHM6IG1lbW9yeU1lYXN1cmVtZW50c1xuICAgIH07XG4gIH1cblxuICAvKipcbiAgICogR2V0IGFsbCByZWNvcmRlZCBtZWFzdXJlbWVudHNcbiAgICovXG4gIGdldEFsbE1lYXN1cmVtZW50cygpOiBBcnJheTx7IG5hbWU6IHN0cmluZzsgbWV0cmljczogUGVyZm9ybWFuY2VNZXRyaWNzOyB0aW1lc3RhbXA6IG51bWJlciB9PiB7XG4gICAgcmV0dXJuIFsuLi50aGlzLm1lYXN1cmVtZW50c107XG4gIH1cblxuICAvKipcbiAgICogQ2xlYXIgYWxsIG1lYXN1cmVtZW50c1xuICAgKi9cbiAgY2xlYXJNZWFzdXJlbWVudHMoKTogdm9pZCB7XG4gICAgdGhpcy5tZWFzdXJlbWVudHMgPSBbXTtcbiAgfVxuXG4gIC8qKlxuICAgKiBHZW5lcmF0ZSBwZXJmb3JtYW5jZSByZXBvcnRcbiAgICovXG4gIGdlbmVyYXRlUmVwb3J0KCk6IHN0cmluZyB7XG4gICAgaWYgKHRoaXMubWVhc3VyZW1lbnRzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgcmV0dXJuICdObyBwZXJmb3JtYW5jZSBtZWFzdXJlbWVudHMgcmVjb3JkZWQnO1xuICAgIH1cblxuICAgIGxldCByZXBvcnQgPSAnPT09IFBlcmZvcm1hbmNlIFJlcG9ydCA9PT1cXG5cXG4nO1xuXG4gICAgZm9yIChjb25zdCBtZWFzdXJlbWVudCBvZiB0aGlzLm1lYXN1cmVtZW50cykge1xuICAgICAgcmVwb3J0ICs9IGBUZXN0OiAke21lYXN1cmVtZW50Lm5hbWV9XFxuYDtcbiAgICAgIHJlcG9ydCArPSBgRXhlY3V0aW9uIFRpbWU6ICR7bWVhc3VyZW1lbnQubWV0cmljcy5leGVjdXRpb25UaW1lLnRvRml4ZWQoMil9bXNcXG5gO1xuICAgICAgXG4gICAgICBpZiAobWVhc3VyZW1lbnQubWV0cmljcy50aHJvdWdocHV0KSB7XG4gICAgICAgIHJlcG9ydCArPSBgVGhyb3VnaHB1dDogJHttZWFzdXJlbWVudC5tZXRyaWNzLnRocm91Z2hwdXQudG9GaXhlZCgyKX0gb3BzL3NlY1xcbmA7XG4gICAgICB9XG4gICAgICBcbiAgICAgIGlmIChtZWFzdXJlbWVudC5tZXRyaWNzLnN0YXRpc3RpY3MpIHtcbiAgICAgICAgY29uc3Qgc3RhdHMgPSBtZWFzdXJlbWVudC5tZXRyaWNzLnN0YXRpc3RpY3M7XG4gICAgICAgIHJlcG9ydCArPSBgU3RhdGlzdGljczpcXG5gO1xuICAgICAgICByZXBvcnQgKz0gYCAgTWVhbjogJHtzdGF0cy5tZWFuLnRvRml4ZWQoMil9bXNcXG5gO1xuICAgICAgICByZXBvcnQgKz0gYCAgTWVkaWFuOiAke3N0YXRzLm1lZGlhbi50b0ZpeGVkKDIpfW1zXFxuYDtcbiAgICAgICAgcmVwb3J0ICs9IGAgIFA5NTogJHtzdGF0cy5wOTUudG9GaXhlZCgyKX1tc1xcbmA7XG4gICAgICAgIHJlcG9ydCArPSBgICBQOTk6ICR7c3RhdHMucDk5LnRvRml4ZWQoMil9bXNcXG5gO1xuICAgICAgICBcbiAgICAgICAgaWYgKHN0YXRzLnZhcmlhbmNlKSB7XG4gICAgICAgICAgcmVwb3J0ICs9IGAgIFZhcmlhbmNlOiAke3N0YXRzLnZhcmlhbmNlLnRvRml4ZWQoMil9XFxuYDtcbiAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgaWYgKHN0YXRzLnN0YW5kYXJkRGV2aWF0aW9uKSB7XG4gICAgICAgICAgcmVwb3J0ICs9IGAgIFN0ZCBEZXY6ICR7c3RhdHMuc3RhbmRhcmREZXZpYXRpb24udG9GaXhlZCgyKX1cXG5gO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBcbiAgICAgIHJlcG9ydCArPSBgTWVtb3J5IFVzYWdlOlxcbmA7XG4gICAgICByZXBvcnQgKz0gYCAgSGVhcDogJHsobWVhc3VyZW1lbnQubWV0cmljcy5tZW1vcnlVc2FnZS5oZWFwIC8gMTAyNCAvIDEwMjQpLnRvRml4ZWQoMil9TUJcXG5gO1xuICAgICAgcmVwb3J0ICs9IGAgIEV4dGVybmFsOiAkeyhtZWFzdXJlbWVudC5tZXRyaWNzLm1lbW9yeVVzYWdlLmV4dGVybmFsIC8gMTAyNCAvIDEwMjQpLnRvRml4ZWQoMil9TUJcXG5gO1xuICAgICAgcmVwb3J0ICs9IGAgIFRvdGFsOiAkeyhtZWFzdXJlbWVudC5tZXRyaWNzLm1lbW9yeVVzYWdlLnRvdGFsIC8gMTAyNCAvIDEwMjQpLnRvRml4ZWQoMil9TUJcXG5gO1xuICAgICAgcmVwb3J0ICs9ICdcXG4nO1xuICAgIH1cblxuICAgIHJldHVybiByZXBvcnQ7XG4gIH1cblxuICBwcml2YXRlIGNhbGN1bGF0ZU1ldHJpY3MoXG4gICAgdGltZU1lYXN1cmVtZW50czogbnVtYmVyW10sXG4gICAgbWVtb3J5TWVhc3VyZW1lbnRzOiBBcnJheTx7IGhlYXA6IG51bWJlcjsgZXh0ZXJuYWw6IG51bWJlcjsgdG90YWw6IG51bWJlciB9PlxuICApOiBQZXJmb3JtYW5jZU1ldHJpY3Mge1xuICAgIGNvbnN0IGV4ZWN1dGlvblRpbWUgPSB0aW1lTWVhc3VyZW1lbnRzLnJlZHVjZSgoYSwgYikgPT4gYSArIGIsIDApIC8gdGltZU1lYXN1cmVtZW50cy5sZW5ndGg7XG4gICAgXG4gICAgY29uc3QgYXZnTWVtb3J5ID0ge1xuICAgICAgaGVhcDogbWVtb3J5TWVhc3VyZW1lbnRzLnJlZHVjZSgoc3VtLCBtKSA9PiBzdW0gKyBtLmhlYXAsIDApIC8gbWVtb3J5TWVhc3VyZW1lbnRzLmxlbmd0aCxcbiAgICAgIGV4dGVybmFsOiBtZW1vcnlNZWFzdXJlbWVudHMucmVkdWNlKChzdW0sIG0pID0+IHN1bSArIG0uZXh0ZXJuYWwsIDApIC8gbWVtb3J5TWVhc3VyZW1lbnRzLmxlbmd0aCxcbiAgICAgIHRvdGFsOiBtZW1vcnlNZWFzdXJlbWVudHMucmVkdWNlKChzdW0sIG0pID0+IHN1bSArIG0udG90YWwsIDApIC8gbWVtb3J5TWVhc3VyZW1lbnRzLmxlbmd0aFxuICAgIH07XG5cbiAgICByZXR1cm4ge1xuICAgICAgZXhlY3V0aW9uVGltZSxcbiAgICAgIG1lbW9yeVVzYWdlOiBhdmdNZW1vcnksXG4gICAgICBzdGF0aXN0aWNzOiB0aGlzLmNhbGN1bGF0ZVN0YXRpc3RpY3ModGltZU1lYXN1cmVtZW50cylcbiAgICB9O1xuICB9XG5cbiAgcHJpdmF0ZSBjYWxjdWxhdGVTdGF0aXN0aWNzKG1lYXN1cmVtZW50czogbnVtYmVyW10pIHtcbiAgICBjb25zdCBzb3J0ZWQgPSBbLi4ubWVhc3VyZW1lbnRzXS5zb3J0KChhLCBiKSA9PiBhIC0gYik7XG4gICAgY29uc3Qgc3VtID0gbWVhc3VyZW1lbnRzLnJlZHVjZSgoYSwgYikgPT4gYSArIGIsIDApO1xuICAgIGNvbnN0IG1lYW4gPSBzdW0gLyBtZWFzdXJlbWVudHMubGVuZ3RoO1xuICAgIFxuICAgIGNvbnN0IG1lZGlhbiA9IHNvcnRlZC5sZW5ndGggJSAyID09PSAwXG4gICAgICA/IChzb3J0ZWRbc29ydGVkLmxlbmd0aCAvIDIgLSAxXSArIHNvcnRlZFtzb3J0ZWQubGVuZ3RoIC8gMl0pIC8gMlxuICAgICAgOiBzb3J0ZWRbTWF0aC5mbG9vcihzb3J0ZWQubGVuZ3RoIC8gMildO1xuXG4gICAgY29uc3QgcDk1SW5kZXggPSBNYXRoLmZsb29yKHNvcnRlZC5sZW5ndGggKiAwLjk1KTtcbiAgICBjb25zdCBwOTlJbmRleCA9IE1hdGguZmxvb3Ioc29ydGVkLmxlbmd0aCAqIDAuOTkpO1xuICAgIFxuICAgIGNvbnN0IHA5NSA9IHNvcnRlZFtwOTVJbmRleF07XG4gICAgY29uc3QgcDk5ID0gc29ydGVkW3A5OUluZGV4XTtcbiAgICBcbiAgICBjb25zdCB2YXJpYW5jZSA9IG1lYXN1cmVtZW50cy5yZWR1Y2UoKHN1bSwgdmFsKSA9PiBzdW0gKyBNYXRoLnBvdyh2YWwgLSBtZWFuLCAyKSwgMCkgLyBtZWFzdXJlbWVudHMubGVuZ3RoO1xuICAgIGNvbnN0IHN0YW5kYXJkRGV2aWF0aW9uID0gTWF0aC5zcXJ0KHZhcmlhbmNlKTtcblxuICAgIHJldHVybiB7XG4gICAgICBtZWFuLFxuICAgICAgbWVkaWFuLFxuICAgICAgcDk1LFxuICAgICAgcDk5LFxuICAgICAgdmFyaWFuY2UsXG4gICAgICBzdGFuZGFyZERldmlhdGlvblxuICAgIH07XG4gIH1cblxuICBwcml2YXRlIGFzeW5jIHJ1bkNvbmN1cnJlbnRUZXN0PFQ+KFxuICAgIGZuOiAoKSA9PiBQcm9taXNlPFQ+LFxuICAgIG9wZXJhdGlvbnM6IEFycmF5PHsgZHVyYXRpb246IG51bWJlcjsgc3VjY2VzczogYm9vbGVhbjsgZXJyb3I/OiBzdHJpbmcgfT4sXG4gICAgZW5kVGltZTogbnVtYmVyXG4gICk6IFByb21pc2U8dm9pZD4ge1xuICAgIHdoaWxlIChEYXRlLm5vdygpIDwgZW5kVGltZSkge1xuICAgICAgY29uc3Qgc3RhcnQgPSBwZXJmb3JtYW5jZS5ub3coKTtcbiAgICAgIHRyeSB7XG4gICAgICAgIGF3YWl0IGZuKCk7XG4gICAgICAgIG9wZXJhdGlvbnMucHVzaCh7XG4gICAgICAgICAgZHVyYXRpb246IHBlcmZvcm1hbmNlLm5vdygpIC0gc3RhcnQsXG4gICAgICAgICAgc3VjY2VzczogdHJ1ZVxuICAgICAgICB9KTtcbiAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgIG9wZXJhdGlvbnMucHVzaCh7XG4gICAgICAgICAgZHVyYXRpb246IHBlcmZvcm1hbmNlLm5vdygpIC0gc3RhcnQsXG4gICAgICAgICAgc3VjY2VzczogZmFsc2UsXG4gICAgICAgICAgZXJyb3I6IGVycm9yIGluc3RhbmNlb2YgRXJyb3IgPyBlcnJvci5tZXNzYWdlIDogU3RyaW5nKGVycm9yKVxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbn1cblxuLy8gR2xvYmFsIHBlcmZvcm1hbmNlIG1lYXN1cmVtZW50IGluc3RhbmNlXG5leHBvcnQgY29uc3QgcGVyZm9ybWFuY2VNZWFzdXJlbWVudCA9IG5ldyBQZXJmb3JtYW5jZU1lYXN1cmVtZW50KCk7XG5cbi8vIENvbnZlbmllbmNlIGZ1bmN0aW9uc1xuZXhwb3J0IGZ1bmN0aW9uIG1lYXN1cmVQZXJmb3JtYW5jZTxUPihcbiAgbmFtZTogc3RyaW5nLFxuICBmbjogKCkgPT4gVCxcbiAgb3B0aW9ucz86IFBhcnRpYWw8UGVyZm9ybWFuY2VUZXN0T3B0aW9ucz5cbik6IFBlcmZvcm1hbmNlTWV0cmljcyB7XG4gIHJldHVybiBwZXJmb3JtYW5jZU1lYXN1cmVtZW50Lm1lYXN1cmVTeW5jKG5hbWUsIGZuLCBvcHRpb25zKTtcbn1cblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1lYXN1cmVBc3luY1BlcmZvcm1hbmNlPFQ+KFxuICBuYW1lOiBzdHJpbmcsXG4gIGZuOiAoKSA9PiBQcm9taXNlPFQ+LFxuICBvcHRpb25zPzogUGFydGlhbDxQZXJmb3JtYW5jZVRlc3RPcHRpb25zPlxuKTogUHJvbWlzZTxQZXJmb3JtYW5jZU1ldHJpY3M+IHtcbiAgcmV0dXJuIHBlcmZvcm1hbmNlTWVhc3VyZW1lbnQubWVhc3VyZUFzeW5jKG5hbWUsIGZuLCBvcHRpb25zKTtcbn1cblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGJlbmNobWFya0Z1bmN0aW9uczxUPihcbiAgYmVuY2htYXJrczogQXJyYXk8eyBuYW1lOiBzdHJpbmc7IGZuOiAoKSA9PiBUIHwgUHJvbWlzZTxUPiB9PixcbiAgb3B0aW9ucz86IFBhcnRpYWw8UGVyZm9ybWFuY2VUZXN0T3B0aW9ucz5cbik6IFByb21pc2U8QXJyYXk8eyBuYW1lOiBzdHJpbmc7IG1ldHJpY3M6IFBlcmZvcm1hbmNlTWV0cmljczsgcmFua2luZzogbnVtYmVyIH0+PiB7XG4gIHJldHVybiBwZXJmb3JtYW5jZU1lYXN1cmVtZW50LmJlbmNobWFya0NvbXBhcmlzb24oYmVuY2htYXJrcywgb3B0aW9ucyk7XG59Il0sInZlcnNpb24iOjN9