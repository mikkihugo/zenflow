ef67b660c41d044ac642cd31e2bebdc0
/**
 * Assertion Helpers - Enhanced Testing Assertions
 *
 * Custom assertions for both London and Classical TDD approaches
 */
import { expect } from '@jest/globals';
export class AssertionHelpers {
    options;
    constructor(options = {}) {
        this.options = {
            precision: 2,
            tolerance: 0.05,
            messages: {},
            retry: {
                attempts: 3,
                delay: 100,
                backoff: 'linear'
            },
            ...options
        };
    }
    /**
     * Assert that a value is approximately equal (for floating point comparisons)
     */
    toBeApproximately(actual, expected, precision) {
        const actualPrecision = precision ?? this.options.precision;
        const message = this.options.messages?.approximately ||
            `Expected ${actual} to be approximately ${expected} within ${actualPrecision} decimal places`;
        expect(actual).toBeCloseTo(expected, actualPrecision);
    }
    /**
     * Assert performance characteristics
     */
    toMeetPerformanceThreshold(metrics, thresholds) {
        if (thresholds.executionTime !== undefined) {
            const message = `Execution time ${metrics.executionTime}ms exceeded threshold ${thresholds.executionTime}ms`;
            expect(metrics.executionTime).toBeLessThanOrEqual(thresholds.executionTime);
        }
        if (thresholds.memoryUsage?.heap !== undefined) {
            const message = `Heap usage ${metrics.memoryUsage.heap} exceeded threshold ${thresholds.memoryUsage.heap}`;
            expect(metrics.memoryUsage.heap).toBeLessThanOrEqual(thresholds.memoryUsage.heap);
        }
        if (thresholds.memoryUsage?.total !== undefined) {
            const message = `Total memory ${metrics.memoryUsage.total} exceeded threshold ${thresholds.memoryUsage.total}`;
            expect(metrics.memoryUsage.total).toBeLessThanOrEqual(thresholds.memoryUsage.total);
        }
        if (thresholds.throughput !== undefined) {
            const message = `Throughput ${metrics.throughput} below threshold ${thresholds.throughput}`;
            expect(metrics.throughput).toBeGreaterThanOrEqual(thresholds.throughput);
        }
    }
    /**
     * Assert that a promise resolves within a time limit
     */
    async toResolveWithin(promise, timeoutMs) {
        const timeout = new Promise((_, reject) => {
            setTimeout(() => reject(new Error(`Promise did not resolve within ${timeoutMs}ms`)), timeoutMs);
        });
        return Promise.race([promise, timeout]);
    }
    /**
     * Assert that a function eventually becomes true (with retries)
     */
    async toEventuallyBeTrue(predicate, options = {}) {
        const timeout = options.timeout || 5000;
        const interval = options.interval || 100;
        const startTime = Date.now();
        while (Date.now() - startTime < timeout) {
            try {
                const result = await predicate();
                if (result) {
                    return;
                }
            }
            catch (error) {
                // Continue trying
            }
            await this.sleep(interval);
        }
        throw new Error(`Predicate did not become true within ${timeout}ms`);
    }
    /**
     * Assert array contains elements in any order
     */
    toContainElementsInAnyOrder(actual, expected) {
        expect(actual).toHaveLength(expected.length);
        for (const element of expected) {
            expect(actual).toContain(element);
        }
    }
    /**
     * Assert deep equality with custom comparison
     */
    toDeepEqualWith(actual, expected, customComparator) {
        if (customComparator) {
            const isEqual = this.deepEqualWithCustom(actual, expected, customComparator);
            expect(isEqual).toBe(true);
        }
        else {
            expect(actual).toEqual(expected);
        }
    }
    /**
     * Assert that an object matches a partial structure
     */
    toMatchPartialStructure(actual, expected) {
        expect(actual).toMatchObject(expected);
    }
    /**
     * Assert that a string matches a pattern (with custom error message)
     */
    toMatchPattern(actual, pattern, customMessage) {
        const message = customMessage || `Expected "${actual}" to match pattern ${pattern}`;
        expect(actual).toMatch(pattern);
    }
    /**
     * Assert that an error has specific properties
     */
    toBeErrorWithProperties(actual, expectedProperties) {
        expect(actual).toBeInstanceOf(Error);
        if (expectedProperties.message) {
            expect(actual.message).toBe(expectedProperties.message);
        }
        if (expectedProperties.code) {
            expect(actual.code).toBe(expectedProperties.code);
        }
        if (expectedProperties.type) {
            expect(actual.constructor.name).toBe(expectedProperties.type);
        }
    }
    /**
     * Assert that an async operation throws with specific error
     */
    async toThrowAsyncError(operation, expectedError) {
        try {
            await operation();
            throw new Error('Expected operation to throw, but it succeeded');
        }
        catch (error) {
            if (expectedError) {
                if (typeof expectedError === 'string') {
                    expect(error.message).toBe(expectedError);
                }
                else if (expectedError instanceof RegExp) {
                    expect(error.message).toMatch(expectedError);
                }
                else if (expectedError instanceof Error) {
                    expect(error).toEqual(expectedError);
                }
            }
        }
    }
    /**
     * Assert HTTP response characteristics
     */
    toBeHttpResponse(response, expectedStatus, expectedHeaders) {
        expect(response.status).toBe(expectedStatus);
        if (expectedHeaders) {
            Object.entries(expectedHeaders).forEach(([header, value]) => {
                expect(response.headers[header.toLowerCase()]).toBe(value);
            });
        }
    }
    /**
     * Assert neural network training convergence
     */
    toConvergeToTarget(trainingResults, targetError, maxEpochs) {
        const finalResult = trainingResults[trainingResults.length - 1];
        if (maxEpochs) {
            expect(finalResult.epoch).toBeLessThanOrEqual(maxEpochs);
        }
        expect(finalResult.error).toBeLessThan(targetError);
        // Check that error generally decreases over time
        const errorReductions = trainingResults.slice(1).filter((result, index) => result.error < trainingResults[index].error);
        const reductionRatio = errorReductions.length / (trainingResults.length - 1);
        expect(reductionRatio).toBeGreaterThan(0.7); // 70% of epochs should show improvement
    }
    /**
     * Assert swarm coordination patterns
     */
    toHaveSwarmCoordination(swarmMetrics, expectedPatterns) {
        if (expectedPatterns.agentCount !== undefined) {
            expect(swarmMetrics.activeAgents).toBe(expectedPatterns.agentCount);
        }
        if (expectedPatterns.topology) {
            expect(swarmMetrics.topology).toBe(expectedPatterns.topology);
        }
        if (expectedPatterns.efficiency !== undefined) {
            expect(swarmMetrics.efficiency).toBeGreaterThanOrEqual(expectedPatterns.efficiency);
        }
        if (expectedPatterns.completion !== undefined) {
            expect(swarmMetrics.completionRate).toBeGreaterThanOrEqual(expectedPatterns.completion);
        }
    }
    /**
     * London School: Assert interaction sequence
     */
    toHaveInteractionSequence(mock, expectedSequence) {
        const interactions = mock.__interactions || [];
        expect(interactions).toHaveLength(expectedSequence.length);
        expectedSequence.forEach((expected, index) => {
            const interaction = interactions[index];
            expect(interaction.method).toBe(expected.method);
            if (expected.args) {
                expect(interaction.args).toEqual(expected.args);
            }
        });
    }
    /**
     * Classical School: Assert mathematical properties
     */
    toSatisfyMathematicalProperty(values, property) {
        switch (property) {
            case 'monotonic-increasing':
                for (let i = 1; i < values.length; i++) {
                    expect(values[i]).toBeGreaterThanOrEqual(values[i - 1]);
                }
                break;
            case 'monotonic-decreasing':
                for (let i = 1; i < values.length; i++) {
                    expect(values[i]).toBeLessThanOrEqual(values[i - 1]);
                }
                break;
            case 'convex':
                // Check second derivative > 0 (simplified)
                for (let i = 2; i < values.length; i++) {
                    const secondDerivative = values[i] - 2 * values[i - 1] + values[i - 2];
                    expect(secondDerivative).toBeGreaterThanOrEqual(0);
                }
                break;
            case 'concave':
                // Check second derivative < 0 (simplified)
                for (let i = 2; i < values.length; i++) {
                    const secondDerivative = values[i] - 2 * values[i - 1] + values[i - 2];
                    expect(secondDerivative).toBeLessThanOrEqual(0);
                }
                break;
        }
    }
    deepEqualWithCustom(a, b, customComparator, path = '') {
        if (customComparator(a, b, path)) {
            return true;
        }
        if (a === b)
            return true;
        if (a == null || b == null)
            return false;
        if (typeof a !== typeof b)
            return false;
        if (typeof a === 'object') {
            const keysA = Object.keys(a);
            const keysB = Object.keys(b);
            if (keysA.length !== keysB.length)
                return false;
            for (const key of keysA) {
                if (!keysB.includes(key))
                    return false;
                if (!this.deepEqualWithCustom(a[key], b[key], customComparator, `${path}.${key}`)) {
                    return false;
                }
            }
            return true;
        }
        return false;
    }
    sleep(ms) {
        return new Promise(resolve => setTimeout(resolve, ms));
    }
}
// Global assertion helpers instance
export const assertionHelpers = new AssertionHelpers();
// Convenience functions for common assertions
export function expectApproximately(actual, expected, precision) {
    assertionHelpers.toBeApproximately(actual, expected, precision);
}
export function expectPerformance(metrics, thresholds) {
    assertionHelpers.toMeetPerformanceThreshold(metrics, thresholds);
}
export async function expectEventually(predicate, options) {
    return assertionHelpers.toEventuallyBeTrue(predicate, options);
}
export function expectInteractionSequence(mock, sequence) {
    assertionHelpers.toHaveInteractionSequence(mock, sequence);
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,