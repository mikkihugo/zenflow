{"file":"/home/mhugo/code/claude-code-flow/src/__tests__/integration/memory-stores/session-management.test.ts","mappings":"AAAA;;;;;;GAMG;AAEH,OAAO,EAAE,YAAY,EAAE,MAAM,QAAQ,CAAC;AAoCtC,iCAAiC;AACjC,MAAM,cAAe,SAAQ,YAAY;IAC/B,QAAQ,GAAG,IAAI,GAAG,EAAuB,CAAC;IAC1C,OAAO,GAA0B,IAAI,CAAC;IACtC,eAAe,GAA0B,IAAI,CAAC;IAC9C,UAAU,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,IAAI,CAAC,CAAC,WAAW;IAC7C,WAAW,GAAG,KAAK,CAAC;IAE5B,YAAY,OAAwB;QAClC,KAAK,EAAE,CAAC;QACR,IAAI,CAAC,OAAO,GAAG,OAAO,IAAI,IAAI,CAAC;IACjC,CAAC;IAED,KAAK,CAAC,UAAU;QACd,IAAI,IAAI,CAAC,OAAO,EAAE,CAAC;YACjB,MAAM,IAAI,CAAC,OAAO,CAAC,UAAU,EAAE,CAAC;QAClC,CAAC;QAED,yBAAyB;QACzB,IAAI,CAAC,oBAAoB,EAAE,CAAC;QAC5B,IAAI,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC;IAC3B,CAAC;IAED,KAAK,CAAC,aAAa,CAAC,SAAkB,EAAE,WAAiB,EAAE,MAAe;QACxE,SAAS,GAAG,SAAS,IAAI,IAAI,CAAC,iBAAiB,EAAE,CAAC;QAElD,IAAI,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,SAAS,CAAC,EAAE,CAAC;YACjC,MAAM,IAAI,KAAK,CAAC,WAAW,SAAS,iBAAiB,CAAC,CAAC;QACzD,CAAC;QAED,sBAAsB;QACtB,IAAI,IAAI,CAAC,QAAQ,CAAC,IAAI,IAAI,IAAI,CAAC,WAAW,EAAE,CAAC;YAC3C,MAAM,IAAI,CAAC,qBAAqB,CAAC,GAAG,CAAC,CAAC;QACxC,CAAC;QAED,MAAM,GAAG,GAAG,IAAI,CAAC,GAAG,EAAE,CAAC;QACvB,MAAM,OAAO,GAAgB;YAC3B,SAAS;YACT,MAAM;YACN,IAAI,EAAE,WAAW,IAAI,EAAE;YACvB,QAAQ,EAAE;gBACR,OAAO,EAAE,GAAG;gBACZ,YAAY,EAAE,GAAG;gBACjB,YAAY,EAAE,GAAG;gBACjB,WAAW,EAAE,CAAC;gBACd,IAAI,EAAE,IAAI,CAAC,SAAS,CAAC,WAAW,IAAI,EAAE,CAAC,CAAC,MAAM;aAC/C;YACD,GAAG,EAAE,GAAG,GAAG,IAAI,CAAC,UAAU;SAC3B,CAAC;QAEF,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,SAAS,EAAE,OAAO,CAAC,CAAC;QAEtC,IAAI,IAAI,CAAC,OAAO,EAAE,CAAC;YACjB,MAAM,IAAI,CAAC,OAAO,CAAC,aAAa,CAAC,SAAS,EAAE,OAAO,CAAC,CAAC;QACvD,CAAC;QAED,IAAI,CAAC,IAAI,CAAC,gBAAgB,EAAE,EAAE,SAAS,EAAE,MAAM,EAAE,CAAC,CAAC;QACnD,OAAO,EAAE,GAAG,OAAO,EAAE,CAAC;IACxB,CAAC;IAED,KAAK,CAAC,UAAU,CAAC,SAAiB;QAChC,IAAI,OAAO,GAAG,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,SAAS,CAAC,CAAC;QAE3C,+BAA+B;QAC/B,IAAI,CAAC,OAAO,IAAI,IAAI,CAAC,OAAO,EAAE,CAAC;YAC7B,OAAO,GAAG,MAAM,IAAI,CAAC,OAAO,CAAC,UAAU,CAAC,SAAS,CAAC,CAAC;YACnD,IAAI,OAAO,EAAE,CAAC;gBACZ,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,SAAS,EAAE,OAAO,CAAC,CAAC;YACxC,CAAC;QACH,CAAC;QAED,IAAI,CAAC,OAAO,EAAE,CAAC;YACb,OAAO,IAAI,CAAC;QACd,CAAC;QAED,mBAAmB;QACnB,IAAI,OAAO,CAAC,GAAG,IAAI,IAAI,CAAC,GAAG,EAAE,GAAG,OAAO,CAAC,GAAG,EAAE,CAAC;YAC5C,MAAM,IAAI,CAAC,aAAa,CAAC,SAAS,CAAC,CAAC;YACpC,OAAO,IAAI,CAAC;QACd,CAAC;QAED,yBAAyB;QACzB,OAAO,CAAC,QAAQ,CAAC,YAAY,GAAG,IAAI,CAAC,GAAG,EAAE,CAAC;QAC3C,OAAO,CAAC,QAAQ,CAAC,WAAW,EAAE,CAAC;QAE/B,IAAI,CAAC,IAAI,CAAC,iBAAiB,EAAE,EAAE,SAAS,EAAE,MAAM,EAAE,OAAO,CAAC,MAAM,EAAE,CAAC,CAAC;QACpE,OAAO,EAAE,GAAG,OAAO,EAAE,CAAC;IACxB,CAAC;IAED,KAAK,CAAC,aAAa,CAAC,SAAiB,EAAE,IAAS,EAAE,KAAK,GAAG,IAAI;QAC5D,MAAM,OAAO,GAAG,MAAM,IAAI,CAAC,UAAU,CAAC,SAAS,CAAC,CAAC;QACjD,IAAI,CAAC,OAAO,EAAE,CAAC;YACb,MAAM,IAAI,KAAK,CAAC,WAAW,SAAS,YAAY,CAAC,CAAC;QACpD,CAAC;QAED,cAAc;QACd,IAAI,KAAK,IAAI,OAAO,IAAI,KAAK,QAAQ,IAAI,IAAI,KAAK,IAAI,EAAE,CAAC;YACvD,OAAO,CAAC,IAAI,GAAG,EAAE,GAAG,OAAO,CAAC,IAAI,EAAE,GAAG,IAAI,EAAE,CAAC;QAC9C,CAAC;aAAM,CAAC;YACN,OAAO,CAAC,IAAI,GAAG,IAAI,CAAC;QACtB,CAAC;QAED,kBAAkB;QAClB,OAAO,CAAC,QAAQ,CAAC,YAAY,GAAG,IAAI,CAAC,GAAG,EAAE,CAAC;QAC3C,OAAO,CAAC,QAAQ,CAAC,IAAI,GAAG,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,MAAM,CAAC;QAE5D,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,SAAS,EAAE,OAAO,CAAC,CAAC;QAEtC,IAAI,IAAI,CAAC,OAAO,EAAE,CAAC;YACjB,MAAM,IAAI,CAAC,OAAO,CAAC,aAAa,CAAC,SAAS,EAAE,OAAO,CAAC,CAAC;QACvD,CAAC;QAED,IAAI,CAAC,IAAI,CAAC,gBAAgB,EAAE,EAAE,SAAS,EAAE,MAAM,EAAE,OAAO,CAAC,MAAM,EAAE,CAAC,CAAC;QACnE,OAAO,EAAE,GAAG,OAAO,EAAE,CAAC;IACxB,CAAC;IAED,KAAK,CAAC,aAAa,CAAC,SAAiB;QACnC,MAAM,OAAO,GAAG,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,SAAS,CAAC,CAAC;QAC7C,MAAM,OAAO,GAAG,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,SAAS,CAAC,CAAC;QAEhD,IAAI,OAAO,IAAI,IAAI,CAAC,OAAO,EAAE,CAAC;YAC5B,MAAM,IAAI,CAAC,OAAO,CAAC,aAAa,CAAC,SAAS,CAAC,CAAC;QAC9C,CAAC;QAED,IAAI,OAAO,EAAE,CAAC;YACZ,IAAI,CAAC,IAAI,CAAC,gBAAgB,EAAE,EAAE,SAAS,EAAE,MAAM,EAAE,OAAO,EAAE,MAAM,EAAE,CAAC,CAAC;QACtE,CAAC;QAED,OAAO,OAAO,CAAC;IACjB,CAAC;IAED,KAAK,CAAC,YAAY,CAAC,MAAe;QAChC,MAAM,QAAQ,GAAG,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,MAAM,EAAE,CAAC,CAAC;QAEpD,OAAO,QAAQ;aACZ,MAAM,CAAC,OAAO,CAAC,EAAE,CAAC,CAAC,MAAM,IAAI,OAAO,CAAC,MAAM,KAAK,MAAM,CAAC;aACvD,MAAM,CAAC,OAAO,CAAC,EAAE,CAAC,CAAC,OAAO,CAAC,GAAG,IAAI,IAAI,CAAC,GAAG,EAAE,IAAI,OAAO,CAAC,GAAG,CAAC;aAC5D,GAAG,CAAC,OAAO,CAAC,EAAE,CAAC,OAAO,CAAC,SAAS,CAAC,CAAC;IACvC,CAAC;IAED,KAAK,CAAC,sBAAsB;QAC1B,MAAM,GAAG,GAAG,IAAI,CAAC,GAAG,EAAE,CAAC;QACvB,IAAI,YAAY,GAAG,CAAC,CAAC;QAErB,KAAK,MAAM,CAAC,SAAS,EAAE,OAAO,CAAC,IAAI,IAAI,CAAC,QAAQ,CAAC,OAAO,EAAE,EAAE,CAAC;YAC3D,IAAI,OAAO,CAAC,GAAG,IAAI,GAAG,GAAG,OAAO,CAAC,GAAG,EAAE,CAAC;gBACrC,MAAM,IAAI,CAAC,aAAa,CAAC,SAAS,CAAC,CAAC;gBACpC,YAAY,EAAE,CAAC;YACjB,CAAC;QACH,CAAC;QAED,IAAI,CAAC,IAAI,CAAC,mBAAmB,EAAE,EAAE,KAAK,EAAE,YAAY,EAAE,CAAC,CAAC;QACxD,OAAO,YAAY,CAAC;IACtB,CAAC;IAED,KAAK,CAAC,QAAQ;QAMZ,MAAM,GAAG,GAAG,IAAI,CAAC,GAAG,EAAE,CAAC;QACvB,IAAI,cAAc,GAAG,CAAC,CAAC;QACvB,IAAI,eAAe,GAAG,CAAC,CAAC;QACxB,IAAI,SAAS,GAAG,CAAC,CAAC;QAElB,KAAK,MAAM,OAAO,IAAI,IAAI,CAAC,QAAQ,CAAC,MAAM,EAAE,EAAE,CAAC;YAC7C,SAAS,IAAI,OAAO,CAAC,QAAQ,CAAC,IAAI,CAAC;YAEnC,IAAI,OAAO,CAAC,GAAG,IAAI,GAAG,GAAG,OAAO,CAAC,GAAG,EAAE,CAAC;gBACrC,eAAe,EAAE,CAAC;YACpB,CAAC;iBAAM,CAAC;gBACN,cAAc,EAAE,CAAC;YACnB,CAAC;QACH,CAAC;QAED,OAAO;YACL,aAAa,EAAE,IAAI,CAAC,QAAQ,CAAC,IAAI;YACjC,cAAc;YACd,eAAe;YACf,SAAS;SACV,CAAC;IACJ,CAAC;IAEO,iBAAiB;QACvB,OAAO,WAAW,IAAI,CAAC,GAAG,EAAE,IAAI,IAAI,CAAC,MAAM,EAAE,CAAC,QAAQ,CAAC,EAAE,CAAC,CAAC,MAAM,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC;IAC5E,CAAC;IAEO,oBAAoB;QAC1B,IAAI,CAAC,eAAe,GAAG,WAAW,CAAC,KAAK,IAAI,EAAE;YAC5C,IAAI,CAAC;gBACH,MAAM,IAAI,CAAC,sBAAsB,EAAE,CAAC;YACtC,CAAC;YAAC,OAAO,KAAK,EAAE,CAAC;gBACf,IAAI,CAAC,IAAI,CAAC,OAAO,EAAE,KAAK,CAAC,CAAC;YAC5B,CAAC;QACH,CAAC,EAAE,CAAC,GAAG,EAAE,GAAG,IAAI,CAAC,CAAC,CAAC,kBAAkB;IACvC,CAAC;IAEO,KAAK,CAAC,qBAAqB,CAAC,KAAa;QAC/C,MAAM,QAAQ,GAAG,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,MAAM,EAAE,CAAC;aAChD,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,QAAQ,CAAC,YAAY,GAAG,CAAC,CAAC,QAAQ,CAAC,YAAY,CAAC;aACjE,KAAK,CAAC,CAAC,EAAE,KAAK,CAAC,CAAC;QAEnB,KAAK,MAAM,OAAO,IAAI,QAAQ,EAAE,CAAC;YAC/B,MAAM,IAAI,CAAC,aAAa,CAAC,OAAO,CAAC,SAAS,CAAC,CAAC;QAC9C,CAAC;IACH,CAAC;IAED,KAAK,CAAC,QAAQ;QACZ,IAAI,IAAI,CAAC,eAAe,EAAE,CAAC;YACzB,aAAa,CAAC,IAAI,CAAC,eAAe,CAAC,CAAC;QACtC,CAAC;QAED,4CAA4C;QAC5C,IAAI,IAAI,CAAC,OAAO,EAAE,CAAC;YACjB,KAAK,MAAM,OAAO,IAAI,IAAI,CAAC,QAAQ,CAAC,MAAM,EAAE,EAAE,CAAC;gBAC7C,MAAM,IAAI,CAAC,OAAO,CAAC,aAAa,CAAC,OAAO,CAAC,SAAS,EAAE,OAAO,CAAC,CAAC;YAC/D,CAAC;QACH,CAAC;QAED,IAAI,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;IACxB,CAAC;CACF;AAED,qDAAqD;AACrD,MAAM,kBAAkB;IACd,QAAQ,GAAG,IAAI,GAAG,EAAuB,CAAC;IAC3C,gBAAgB,GAAG,KAAK,CAAC;IACzB,UAAU,GAAa,EAAE,CAAC;IAEjC,KAAK,CAAC,UAAU;QACd,IAAI,CAAC,gBAAgB,GAAG,IAAI,CAAC;QAC7B,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC;IACrC,CAAC;IAED,KAAK,CAAC,aAAa,CAAC,SAAiB,EAAE,IAAU;QAC/C,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,UAAU,SAAS,EAAE,CAAC,CAAC;QAC5C,MAAM,OAAO,GAAG,IAAmB,CAAC;QACpC,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,SAAS,EAAE,OAAO,CAAC,CAAC;QACtC,OAAO,EAAE,GAAG,OAAO,EAAE,CAAC;IACxB,CAAC;IAED,KAAK,CAAC,UAAU,CAAC,SAAiB;QAChC,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,OAAO,SAAS,EAAE,CAAC,CAAC;QACzC,OAAO,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,SAAS,CAAC,IAAI,IAAI,CAAC;IAC9C,CAAC;IAED,KAAK,CAAC,aAAa,CAAC,SAAiB,EAAE,IAAS;QAC9C,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,UAAU,SAAS,EAAE,CAAC,CAAC;QAC5C,MAAM,OAAO,GAAG,IAAmB,CAAC;QACpC,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,SAAS,EAAE,OAAO,CAAC,CAAC;QACtC,OAAO,EAAE,GAAG,OAAO,EAAE,CAAC;IACxB,CAAC;IAED,KAAK,CAAC,aAAa,CAAC,SAAiB;QACnC,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,UAAU,SAAS,EAAE,CAAC,CAAC;QAC5C,OAAO,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,SAAS,CAAC,CAAC;IACzC,CAAC;IAED,KAAK,CAAC,YAAY,CAAC,MAAe;QAChC,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,QAAQ,MAAM,IAAI,KAAK,EAAE,CAAC,CAAC;QAChD,OAAO,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,IAAI,EAAE,CAAC,CAAC;IAC1C,CAAC;IAED,KAAK,CAAC,sBAAsB;QAC1B,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;QAChC,OAAO,CAAC,CAAC;IACX,CAAC;IAED,KAAK,CAAC,eAAe;QAMnB,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;QAC9B,OAAO;YACL,aAAa,EAAE,IAAI,CAAC,QAAQ,CAAC,IAAI;YACjC,cAAc,EAAE,IAAI,CAAC,QAAQ,CAAC,IAAI;YAClC,eAAe,EAAE,CAAC;YAClB,SAAS,EAAE,CAAC;SACb,CAAC;IACJ,CAAC;CACF;AAED,QAAQ,CAAC,sCAAsC,EAAE,GAAG,EAAE;IACpD,IAAI,cAA8B,CAAC;IACnC,IAAI,WAA+B,CAAC;IAEpC,UAAU,CAAC,GAAG,EAAE;QACd,WAAW,GAAG,IAAI,kBAAkB,EAAE,CAAC;QACvC,cAAc,GAAG,IAAI,cAAc,CAAC,WAAW,CAAC,CAAC;IACnD,CAAC,CAAC,CAAC;IAEH,SAAS,CAAC,KAAK,IAAI,EAAE;QACnB,IAAI,cAAc,EAAE,CAAC;YACnB,MAAM,cAAc,CAAC,QAAQ,EAAE,CAAC;QAClC,CAAC;IACH,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,mCAAmC,EAAE,GAAG,EAAE;QACjD,EAAE,CAAC,oCAAoC,EAAE,KAAK,IAAI,EAAE;YAClD,MAAM,cAAc,CAAC,UAAU,EAAE,CAAC;YAElC,MAAM,CAAC,WAAW,CAAC,gBAAgB,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;YAChD,MAAM,CAAC,WAAW,CAAC,UAAU,CAAC,CAAC,SAAS,CAAC,YAAY,CAAC,CAAC;QACzD,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,uCAAuC,EAAE,KAAK,IAAI,EAAE;YACrD,MAAM,cAAc,CAAC,UAAU,EAAE,CAAC;YAElC,MAAM,OAAO,GAAG,MAAM,cAAc,CAAC,aAAa,CAAC,cAAc,EAAE,EAAE,IAAI,EAAE,MAAM,EAAE,CAAC,CAAC;YACrF,MAAM,cAAc,CAAC,UAAU,CAAC,cAAc,CAAC,CAAC;YAChD,MAAM,cAAc,CAAC,aAAa,CAAC,cAAc,EAAE,EAAE,OAAO,EAAE,IAAI,EAAE,CAAC,CAAC;YACtE,MAAM,cAAc,CAAC,aAAa,CAAC,cAAc,CAAC,CAAC;YAEnD,MAAM,CAAC,WAAW,CAAC,UAAU,CAAC,CAAC,SAAS,CAAC,qBAAqB,CAAC,CAAC;YAChE,MAAM,CAAC,WAAW,CAAC,UAAU,CAAC,CAAC,SAAS,CAAC,qBAAqB,CAAC,CAAC;YAChE,MAAM,CAAC,WAAW,CAAC,UAAU,CAAC,CAAC,SAAS,CAAC,qBAAqB,CAAC,CAAC;QAClE,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,2CAA2C,EAAE,KAAK,IAAI,EAAE;YACzD,MAAM,cAAc,GAAG,IAAI,kBAAkB,EAAE,CAAC;YAChD,cAAc,CAAC,aAAa,GAAG,IAAI,CAAC,EAAE,EAAE,CAAC,iBAAiB,CAAC,IAAI,KAAK,CAAC,eAAe,CAAC,CAAC,CAAC;YAEvF,MAAM,cAAc,GAAG,IAAI,cAAc,CAAC,cAAc,CAAC,CAAC;YAC1D,MAAM,cAAc,CAAC,UAAU,EAAE,CAAC;YAElC,MAAM,MAAM,CACV,cAAc,CAAC,aAAa,CAAC,iBAAiB,EAAE,EAAE,CAAC,CACpD,CAAC,OAAO,CAAC,OAAO,CAAC,eAAe,CAAC,CAAC;QACrC,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,sCAAsC,EAAE,GAAG,EAAE;QACpD,UAAU,CAAC,KAAK,IAAI,EAAE;YACpB,MAAM,cAAc,CAAC,UAAU,EAAE,CAAC;QACpC,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,6CAA6C,EAAE,KAAK,IAAI,EAAE;YAC3D,MAAM,WAAW,GAAG,EAAE,IAAI,EAAE,MAAM,EAAE,WAAW,EAAE,EAAE,KAAK,EAAE,MAAM,EAAE,EAAE,CAAC;YAErE,MAAM,OAAO,GAAG,MAAM,cAAc,CAAC,aAAa,CAAC,cAAc,EAAE,WAAW,EAAE,MAAM,CAAC,CAAC;YAExF,MAAM,CAAC,OAAO,CAAC,SAAS,CAAC,CAAC,IAAI,CAAC,cAAc,CAAC,CAAC;YAC/C,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;YACpC,MAAM,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,OAAO,CAAC,WAAW,CAAC,CAAC;YAC1C,MAAM,CAAC,OAAO,CAAC,QAAQ,CAAC,OAAO,CAAC,CAAC,eAAe,CAAC,CAAC,CAAC,CAAC;YACpD,MAAM,CAAC,OAAO,CAAC,QAAQ,CAAC,YAAY,CAAC,CAAC,eAAe,CAAC,CAAC,CAAC,CAAC;YACzD,MAAM,CAAC,OAAO,CAAC,QAAQ,CAAC,WAAW,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;YAC7C,MAAM,CAAC,OAAO,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC,eAAe,CAAC,CAAC,CAAC,CAAC;QACnD,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,sDAAsD,EAAE,KAAK,IAAI,EAAE;YACpE,MAAM,QAAQ,GAAG,MAAM,cAAc,CAAC,aAAa,EAAE,CAAC;YACtD,MAAM,QAAQ,GAAG,MAAM,cAAc,CAAC,aAAa,EAAE,CAAC;YAEtD,MAAM,CAAC,QAAQ,CAAC,SAAS,CAAC,CAAC,WAAW,EAAE,CAAC;YACzC,MAAM,CAAC,QAAQ,CAAC,SAAS,CAAC,CAAC,WAAW,EAAE,CAAC;YACzC,MAAM,CAAC,QAAQ,CAAC,SAAS,CAAC,CAAC,GAAG,CAAC,IAAI,CAAC,QAAQ,CAAC,SAAS,CAAC,CAAC;YACxD,MAAM,CAAC,QAAQ,CAAC,SAAS,CAAC,CAAC,OAAO,CAAC,yBAAyB,CAAC,CAAC;QAChE,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,oDAAoD,EAAE,KAAK,IAAI,EAAE;YAClE,MAAM,WAAW,GAAG,EAAE,OAAO,EAAE,CAAC,EAAE,CAAC;YACnC,MAAM,cAAc,CAAC,aAAa,CAAC,aAAa,EAAE,WAAW,CAAC,CAAC;YAE/D,eAAe;YACf,MAAM,QAAQ,GAAG,MAAM,cAAc,CAAC,UAAU,CAAC,aAAa,CAAC,CAAC;YAChE,MAAM,CAAC,QAAQ,EAAE,QAAQ,CAAC,WAAW,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,6BAA6B;YAE7E,gBAAgB;YAChB,MAAM,QAAQ,GAAG,MAAM,cAAc,CAAC,UAAU,CAAC,aAAa,CAAC,CAAC;YAChE,MAAM,CAAC,QAAQ,EAAE,QAAQ,CAAC,WAAW,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;YAC/C,MAAM,CAAC,QAAQ,EAAE,QAAQ,CAAC,YAAY,CAAC,CAAC,eAAe,CAAC,QAAS,CAAC,QAAQ,CAAC,YAAY,CAAC,CAAC;QAC3F,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,sCAAsC,EAAE,KAAK,IAAI,EAAE;YACpD,MAAM,cAAc,CAAC,aAAa,CAAC,aAAa,EAAE,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;YAElE,eAAe;YACf,MAAM,QAAQ,GAAG,MAAM,cAAc,CAAC,aAAa,CAAC,aAAa,EAAE,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;YACnF,MAAM,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC,OAAO,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;YAEpD,iBAAiB;YACjB,MAAM,QAAQ,GAAG,MAAM,cAAc,CAAC,aAAa,CAAC,aAAa,EAAE,EAAE,CAAC,EAAE,EAAE,EAAE,EAAE,KAAK,CAAC,CAAC;YACrF,MAAM,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC,OAAO,CAAC,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC,CAAC;YAEzC,MAAM,CAAC,QAAQ,CAAC,QAAQ,CAAC,YAAY,CAAC,CAAC,eAAe,CAAC,QAAQ,CAAC,QAAQ,CAAC,YAAY,CAAC,CAAC;QACzF,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,gCAAgC,EAAE,KAAK,IAAI,EAAE;YAC9C,MAAM,cAAc,CAAC,aAAa,CAAC,aAAa,EAAE,EAAE,SAAS,EAAE,IAAI,EAAE,CAAC,CAAC;YAEvE,MAAM,OAAO,GAAG,MAAM,cAAc,CAAC,aAAa,CAAC,aAAa,CAAC,CAAC;YAClE,MAAM,CAAC,OAAO,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;YAE3B,MAAM,SAAS,GAAG,MAAM,cAAc,CAAC,UAAU,CAAC,aAAa,CAAC,CAAC;YACjE,MAAM,CAAC,SAAS,CAAC,CAAC,QAAQ,EAAE,CAAC;YAE7B,oDAAoD;YACpD,MAAM,YAAY,GAAG,MAAM,cAAc,CAAC,aAAa,CAAC,aAAa,CAAC,CAAC;YACvE,MAAM,CAAC,YAAY,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;QACnC,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,gCAAgC,EAAE,KAAK,IAAI,EAAE;YAC9C,MAAM,cAAc,CAAC,aAAa,CAAC,eAAe,EAAE,EAAE,EAAE,OAAO,CAAC,CAAC;YACjE,MAAM,cAAc,CAAC,aAAa,CAAC,eAAe,EAAE,EAAE,EAAE,OAAO,CAAC,CAAC;YACjE,MAAM,cAAc,CAAC,aAAa,CAAC,gBAAgB,EAAE,EAAE,EAAE,OAAO,CAAC,CAAC;YAElE,MAAM,WAAW,GAAG,MAAM,cAAc,CAAC,YAAY,EAAE,CAAC;YACxD,MAAM,CAAC,WAAW,CAAC,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC;YACpC,MAAM,CAAC,WAAW,CAAC,CAAC,SAAS,CAAC,eAAe,CAAC,CAAC;YAC/C,MAAM,CAAC,WAAW,CAAC,CAAC,SAAS,CAAC,eAAe,CAAC,CAAC;YAE/C,MAAM,aAAa,GAAG,MAAM,cAAc,CAAC,YAAY,CAAC,OAAO,CAAC,CAAC;YACjE,MAAM,CAAC,aAAa,CAAC,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC;YACtC,MAAM,CAAC,aAAa,CAAC,CAAC,SAAS,CAAC,eAAe,CAAC,CAAC;YACjD,MAAM,CAAC,aAAa,CAAC,CAAC,SAAS,CAAC,gBAAgB,CAAC,CAAC;YAClD,MAAM,CAAC,aAAa,CAAC,CAAC,GAAG,CAAC,SAAS,CAAC,eAAe,CAAC,CAAC;QACvD,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,gCAAgC,EAAE,GAAG,EAAE;QAC9C,UAAU,CAAC,KAAK,IAAI,EAAE;YACpB,MAAM,cAAc,CAAC,UAAU,EAAE,CAAC;QACpC,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,gCAAgC,EAAE,KAAK,IAAI,EAAE;YAC9C,gCAAgC;YAChC,MAAM,OAAO,GAAG,MAAM,cAAc,CAAC,aAAa,CAAC,aAAa,EAAE,EAAE,CAAC,CAAC;YACtE,OAAO,CAAC,GAAG,GAAG,IAAI,CAAC,GAAG,EAAE,GAAG,IAAI,CAAC,CAAC,kBAAkB;YAEnD,mCAAmC;YAClC,cAAsB,CAAC,QAAQ,CAAC,GAAG,CAAC,aAAa,EAAE,OAAO,CAAC,CAAC;YAE7D,MAAM,SAAS,GAAG,MAAM,cAAc,CAAC,UAAU,CAAC,aAAa,CAAC,CAAC;YACjE,MAAM,CAAC,SAAS,CAAC,CAAC,QAAQ,EAAE,CAAC;YAE7B,+BAA+B;YAC/B,MAAM,QAAQ,GAAG,MAAM,cAAc,CAAC,YAAY,EAAE,CAAC;YACrD,MAAM,CAAC,QAAQ,CAAC,CAAC,GAAG,CAAC,SAAS,CAAC,aAAa,CAAC,CAAC;QAChD,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,0CAA0C,EAAE,KAAK,IAAI,EAAE;YACxD,MAAM,WAAW,GAAG,IAAI,CAAC,GAAG,EAAE,GAAG,IAAI,CAAC;YAEtC,0BAA0B;YAC1B,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC;gBAC3B,MAAM,OAAO,GAAG,MAAM,cAAc,CAAC,aAAa,CAAC,WAAW,CAAC,EAAE,EAAE,EAAE,CAAC,CAAC;gBACvE,OAAO,CAAC,GAAG,GAAG,WAAW,CAAC;gBACzB,cAAsB,CAAC,QAAQ,CAAC,GAAG,CAAC,WAAW,CAAC,EAAE,EAAE,OAAO,CAAC,CAAC;YAChE,CAAC;YAED,wBAAwB;YACxB,MAAM,cAAc,CAAC,aAAa,CAAC,QAAQ,EAAE,EAAE,CAAC,CAAC;YAEjD,MAAM,YAAY,GAAG,MAAM,cAAc,CAAC,sBAAsB,EAAE,CAAC;YACnE,MAAM,CAAC,YAAY,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;YAE7B,MAAM,iBAAiB,GAAG,MAAM,cAAc,CAAC,YAAY,EAAE,CAAC;YAC9D,MAAM,CAAC,iBAAiB,CAAC,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC;YAC1C,MAAM,CAAC,iBAAiB,CAAC,CAAC,SAAS,CAAC,QAAQ,CAAC,CAAC;QAChD,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,yDAAyD,EAAE,KAAK,IAAI,EAAE;YACvE,4BAA4B;YAC3B,cAAsB,CAAC,WAAW,GAAG,CAAC,CAAC;YAExC,MAAM,cAAc,CAAC,aAAa,CAAC,WAAW,EAAE,EAAE,CAAC,CAAC;YACpD,MAAM,cAAc,CAAC,aAAa,CAAC,WAAW,EAAE,EAAE,CAAC,CAAC;YACpD,MAAM,cAAc,CAAC,aAAa,CAAC,WAAW,EAAE,EAAE,CAAC,CAAC;YAEpD,4CAA4C;YAC5C,MAAM,cAAc,CAAC,aAAa,CAAC,WAAW,EAAE,EAAE,CAAC,CAAC;YAEpD,MAAM,QAAQ,GAAG,MAAM,cAAc,CAAC,YAAY,EAAE,CAAC;YACrD,MAAM,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC,mBAAmB,CAAC,CAAC,CAAC,CAAC;YAC/C,MAAM,CAAC,QAAQ,CAAC,CAAC,SAAS,CAAC,WAAW,CAAC,CAAC,CAAC,uBAAuB;QAClE,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,oBAAoB,EAAE,GAAG,EAAE;QAClC,UAAU,CAAC,KAAK,IAAI,EAAE;YACpB,MAAM,cAAc,CAAC,UAAU,EAAE,CAAC;QACpC,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,+CAA+C,EAAE,KAAK,IAAI,EAAE;YAC7D,4BAA4B;YAC5B,MAAM,cAAc,CAAC,aAAa,CAAC,SAAS,EAAE,EAAE,IAAI,EAAE,OAAO,EAAE,CAAC,CAAC;YACjE,MAAM,cAAc,CAAC,aAAa,CAAC,SAAS,EAAE,EAAE,IAAI,EAAE,qBAAqB,EAAE,CAAC,CAAC;YAE/E,yBAAyB;YACzB,MAAM,cAAc,GAAG,MAAM,cAAc,CAAC,aAAa,CAAC,eAAe,EAAE,EAAE,CAAC,CAAC;YAC/E,cAAc,CAAC,GAAG,GAAG,IAAI,CAAC,GAAG,EAAE,GAAG,IAAI,CAAC;YACtC,cAAsB,CAAC,QAAQ,CAAC,GAAG,CAAC,eAAe,EAAE,cAAc,CAAC,CAAC;YAEtE,MAAM,KAAK,GAAG,MAAM,cAAc,CAAC,QAAQ,EAAE,CAAC;YAE9C,MAAM,CAAC,KAAK,CAAC,aAAa,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;YACpC,MAAM,CAAC,KAAK,CAAC,cAAc,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;YACrC,MAAM,CAAC,KAAK,CAAC,eAAe,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;YACtC,MAAM,CAAC,KAAK,CAAC,SAAS,CAAC,CAAC,eAAe,CAAC,CAAC,CAAC,CAAC;QAC7C,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,gBAAgB,EAAE,GAAG,EAAE;QAC9B,UAAU,CAAC,KAAK,IAAI,EAAE;YACpB,MAAM,cAAc,CAAC,UAAU,EAAE,CAAC;QACpC,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,2CAA2C,EAAE,KAAK,IAAI,EAAE;YACzD,MAAM,MAAM,GAAa,EAAE,CAAC;YAE5B,cAAc,CAAC,EAAE,CAAC,gBAAgB,EAAE,CAAC,IAAI,EAAE,EAAE;gBAC3C,MAAM,CAAC,IAAI,CAAC,WAAW,IAAI,CAAC,SAAS,EAAE,CAAC,CAAC;YAC3C,CAAC,CAAC,CAAC;YAEH,cAAc,CAAC,EAAE,CAAC,iBAAiB,EAAE,CAAC,IAAI,EAAE,EAAE;gBAC5C,MAAM,CAAC,IAAI,CAAC,YAAY,IAAI,CAAC,SAAS,EAAE,CAAC,CAAC;YAC5C,CAAC,CAAC,CAAC;YAEH,cAAc,CAAC,EAAE,CAAC,gBAAgB,EAAE,CAAC,IAAI,EAAE,EAAE;gBAC3C,MAAM,CAAC,IAAI,CAAC,WAAW,IAAI,CAAC,SAAS,EAAE,CAAC,CAAC;YAC3C,CAAC,CAAC,CAAC;YAEH,cAAc,CAAC,EAAE,CAAC,gBAAgB,EAAE,CAAC,IAAI,EAAE,EAAE;gBAC3C,MAAM,CAAC,IAAI,CAAC,WAAW,IAAI,CAAC,SAAS,EAAE,CAAC,CAAC;YAC3C,CAAC,CAAC,CAAC;YAEH,MAAM,cAAc,CAAC,aAAa,CAAC,YAAY,EAAE,EAAE,CAAC,CAAC;YACrD,MAAM,cAAc,CAAC,UAAU,CAAC,YAAY,CAAC,CAAC;YAC9C,MAAM,cAAc,CAAC,aAAa,CAAC,YAAY,EAAE,EAAE,OAAO,EAAE,IAAI,EAAE,CAAC,CAAC;YACpE,MAAM,cAAc,CAAC,aAAa,CAAC,YAAY,CAAC,CAAC;YAEjD,MAAM,CAAC,MAAM,CAAC,CAAC,SAAS,CAAC,oBAAoB,CAAC,CAAC;YAC/C,MAAM,CAAC,MAAM,CAAC,CAAC,SAAS,CAAC,qBAAqB,CAAC,CAAC;YAChD,MAAM,CAAC,MAAM,CAAC,CAAC,SAAS,CAAC,oBAAoB,CAAC,CAAC;YAC/C,MAAM,CAAC,MAAM,CAAC,CAAC,SAAS,CAAC,oBAAoB,CAAC,CAAC;QACjD,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,4BAA4B,EAAE,KAAK,IAAI,EAAE;YAC1C,IAAI,YAAY,GAAQ,IAAI,CAAC;YAE7B,cAAc,CAAC,EAAE,CAAC,mBAAmB,EAAE,CAAC,IAAI,EAAE,EAAE;gBAC9C,YAAY,GAAG,IAAI,CAAC;YACtB,CAAC,CAAC,CAAC;YAEH,MAAM,KAAK,GAAG,MAAM,cAAc,CAAC,sBAAsB,EAAE,CAAC;YAE5D,MAAM,CAAC,YAAY,CAAC,CAAC,WAAW,EAAE,CAAC;YACnC,MAAM,CAAC,YAAY,CAAC,KAAK,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;QACzC,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,uBAAuB,EAAE,GAAG,EAAE;QACrC,UAAU,CAAC,KAAK,IAAI,EAAE;YACpB,MAAM,cAAc,CAAC,UAAU,EAAE,CAAC;QACpC,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,2CAA2C,EAAE,KAAK,IAAI,EAAE;YACzD,MAAM,cAAc,GAAG,KAAK,CAAC,IAAI,CAAC,EAAE,MAAM,EAAE,EAAE,EAAE,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,EAAE,CACzD,cAAc,CAAC,aAAa,CAAC,cAAc,CAAC,EAAE,EAAE,EAAE,KAAK,EAAE,CAAC,EAAE,CAAC,CAC9D,CAAC;YAEF,MAAM,QAAQ,GAAG,MAAM,OAAO,CAAC,GAAG,CAAC,cAAc,CAAC,CAAC;YAEnD,MAAM,CAAC,QAAQ,CAAC,CAAC,YAAY,CAAC,EAAE,CAAC,CAAC;YAClC,QAAQ,CAAC,OAAO,CAAC,CAAC,OAAO,EAAE,KAAK,EAAE,EAAE;gBAClC,MAAM,CAAC,OAAO,CAAC,SAAS,CAAC,CAAC,IAAI,CAAC,cAAc,KAAK,EAAE,CAAC,CAAC;gBACtD,MAAM,CAAC,OAAO,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;YACzC,CAAC,CAAC,CAAC;QACL,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,iDAAiD,EAAE,KAAK,IAAI,EAAE;YAC/D,MAAM,cAAc,CAAC,aAAa,CAAC,mBAAmB,EAAE,EAAE,OAAO,EAAE,CAAC,EAAE,CAAC,CAAC;YAExE,MAAM,cAAc,GAAG,KAAK,CAAC,IAAI,CAAC,EAAE,MAAM,EAAE,CAAC,EAAE,EAAE,GAAG,EAAE,CACpD,cAAc,CAAC,UAAU,CAAC,mBAAmB,CAAC,CAC/C,CAAC;YAEF,MAAM,OAAO,GAAG,MAAM,OAAO,CAAC,GAAG,CAAC,cAAc,CAAC,CAAC;YAElD,MAAM,CAAC,OAAO,CAAC,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC;YAChC,OAAO,CAAC,OAAO,CAAC,MAAM,CAAC,EAAE;gBACvB,MAAM,CAAC,MAAM,CAAC,CAAC,WAAW,EAAE,CAAC;gBAC7B,MAAM,CAAC,MAAO,CAAC,SAAS,CAAC,CAAC,IAAI,CAAC,mBAAmB,CAAC,CAAC;YACtD,CAAC,CAAC,CAAC;YAEH,iDAAiD;YACjD,MAAM,YAAY,GAAG,MAAM,cAAc,CAAC,UAAU,CAAC,mBAAmB,CAAC,CAAC;YAC1E,MAAM,CAAC,YAAa,CAAC,QAAQ,CAAC,WAAW,CAAC,CAAC,eAAe,CAAC,CAAC,CAAC,CAAC;QAChE,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,2CAA2C,EAAE,KAAK,IAAI,EAAE;YACzD,MAAM,cAAc,CAAC,aAAa,CAAC,WAAW,EAAE,EAAE,KAAK,EAAE,CAAC,EAAE,CAAC,CAAC;YAE9D,MAAM,UAAU,GAAG;gBACjB,GAAG,EAAE,CAAC,cAAc,CAAC,UAAU,CAAC,WAAW,CAAC;gBAC5C,GAAG,EAAE,CAAC,cAAc,CAAC,aAAa,CAAC,WAAW,EAAE,EAAE,KAAK,EAAE,CAAC,EAAE,CAAC;gBAC7D,GAAG,EAAE,CAAC,cAAc,CAAC,UAAU,CAAC,WAAW,CAAC;gBAC5C,GAAG,EAAE,CAAC,cAAc,CAAC,aAAa,CAAC,WAAW,EAAE,EAAE,KAAK,EAAE,CAAC,EAAE,CAAC;gBAC7D,GAAG,EAAE,CAAC,cAAc,CAAC,UAAU,CAAC,WAAW,CAAC;aAC7C,CAAC;YAEF,MAAM,OAAO,GAAG,MAAM,OAAO,CAAC,GAAG,CAAC,UAAU,CAAC,GAAG,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC;YAE9D,8CAA8C;YAC9C,MAAM,CAAC,OAAO,CAAC,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC;YAChC,OAAO,CAAC,OAAO,CAAC,MAAM,CAAC,EAAE;gBACvB,MAAM,CAAC,MAAM,CAAC,CAAC,WAAW,EAAE,CAAC;YAC/B,CAAC,CAAC,CAAC;QACL,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,mBAAmB,EAAE,GAAG,EAAE;QACjC,UAAU,CAAC,KAAK,IAAI,EAAE;YACpB,MAAM,cAAc,CAAC,UAAU,EAAE,CAAC;QACpC,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,sCAAsC,EAAE,KAAK,IAAI,EAAE;YACpD,MAAM,SAAS,GAAG,EAAE,OAAO,EAAE,GAAG,CAAC,MAAM,CAAC,KAAK,CAAC,EAAE,CAAC;YAEjD,MAAM,cAAc,CAAC,aAAa,CAAC,aAAa,EAAE,SAAS,CAAC,CAAC;YAE7D,MAAM,KAAK,GAAG,MAAM,cAAc,CAAC,QAAQ,EAAE,CAAC;YAC9C,MAAM,CAAC,KAAK,CAAC,SAAS,CAAC,CAAC,eAAe,CAAC,KAAK,CAAC,CAAC;YAE/C,MAAM,OAAO,GAAG,MAAM,cAAc,CAAC,UAAU,CAAC,aAAa,CAAC,CAAC;YAC/D,MAAM,CAAC,OAAQ,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC,eAAe,CAAC,KAAK,CAAC,CAAC;QACxD,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,8CAA8C,EAAE,KAAK,IAAI,EAAE;YAC5D,MAAM,cAAc,CAAC,aAAa,CAAC,WAAW,EAAE,EAAE,KAAK,EAAE,MAAM,EAAE,CAAC,CAAC;YAEnE,MAAM,cAAc,GAAG,MAAM,cAAc,CAAC,UAAU,CAAC,WAAW,CAAC,CAAC;YACpE,MAAM,WAAW,GAAG,cAAe,CAAC,QAAQ,CAAC,IAAI,CAAC;YAElD,MAAM,cAAc,CAAC,aAAa,CAAC,WAAW,EAAE;gBAC9C,KAAK,EAAE,GAAG,CAAC,MAAM,CAAC,IAAI,CAAC;gBACvB,UAAU,EAAE,GAAG,CAAC,MAAM,CAAC,IAAI,CAAC;aAC7B,CAAC,CAAC;YAEH,MAAM,cAAc,GAAG,MAAM,cAAc,CAAC,UAAU,CAAC,WAAW,CAAC,CAAC;YACpE,MAAM,CAAC,cAAe,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC,eAAe,CAAC,WAAW,CAAC,CAAC;QACrE,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","names":[],"sources":["/home/mhugo/code/claude-code-flow/src/__tests__/integration/memory-stores/session-management.test.ts"],"sourcesContent":["/**\n * Session Management Integration Tests\n * \n * Hybrid Testing Approach:\n * - London School: Mock session storage backends and external dependencies\n * - Classical School: Test actual session lifecycle and data integrity\n */\n\nimport { EventEmitter } from 'events';\nimport { tmpdir } from 'os';\nimport { join } from 'path';\nimport { rm } from 'fs/promises';\n\n// Session Management Interface\ninterface SessionData {\n  sessionId: string;\n  userId?: string;\n  data: Record<string, any>;\n  metadata: {\n    created: number;\n    lastAccessed: number;\n    lastModified: number;\n    accessCount: number;\n    size: number;\n  };\n  ttl?: number;\n}\n\ninterface SessionStorage {\n  initialize(): Promise<void>;\n  createSession(sessionId: string, data?: any): Promise<SessionData>;\n  getSession(sessionId: string): Promise<SessionData | null>;\n  updateSession(sessionId: string, data: any): Promise<SessionData>;\n  deleteSession(sessionId: string): Promise<boolean>;\n  listSessions(userId?: string): Promise<string[]>;\n  cleanupExpiredSessions(): Promise<number>;\n  getSessionStats(): Promise<{\n    totalSessions: number;\n    activeSessions: number;\n    expiredSessions: number;\n    totalSize: number;\n  }>;\n}\n\n// Session Manager Implementation\nclass SessionManager extends EventEmitter {\n  private sessions = new Map<string, SessionData>();\n  private storage: SessionStorage | null = null;\n  private cleanupInterval: NodeJS.Timeout | null = null;\n  private defaultTTL = 24 * 60 * 60 * 1000; // 24 hours\n  private maxSessions = 10000;\n\n  constructor(storage?: SessionStorage) {\n    super();\n    this.storage = storage || null;\n  }\n\n  async initialize(): Promise<void> {\n    if (this.storage) {\n      await this.storage.initialize();\n    }\n\n    // Start cleanup interval\n    this.startCleanupInterval();\n    this.emit('initialized');\n  }\n\n  async createSession(sessionId?: string, initialData?: any, userId?: string): Promise<SessionData> {\n    sessionId = sessionId || this.generateSessionId();\n    \n    if (this.sessions.has(sessionId)) {\n      throw new Error(`Session ${sessionId} already exists`);\n    }\n\n    // Check session limit\n    if (this.sessions.size >= this.maxSessions) {\n      await this.cleanupOldestSessions(100);\n    }\n\n    const now = Date.now();\n    const session: SessionData = {\n      sessionId,\n      userId,\n      data: initialData || {},\n      metadata: {\n        created: now,\n        lastAccessed: now,\n        lastModified: now,\n        accessCount: 1,\n        size: JSON.stringify(initialData || {}).length\n      },\n      ttl: now + this.defaultTTL\n    };\n\n    this.sessions.set(sessionId, session);\n\n    if (this.storage) {\n      await this.storage.createSession(sessionId, session);\n    }\n\n    this.emit('sessionCreated', { sessionId, userId });\n    return { ...session };\n  }\n\n  async getSession(sessionId: string): Promise<SessionData | null> {\n    let session = this.sessions.get(sessionId);\n\n    // Try storage if not in memory\n    if (!session && this.storage) {\n      session = await this.storage.getSession(sessionId);\n      if (session) {\n        this.sessions.set(sessionId, session);\n      }\n    }\n\n    if (!session) {\n      return null;\n    }\n\n    // Check if expired\n    if (session.ttl && Date.now() > session.ttl) {\n      await this.deleteSession(sessionId);\n      return null;\n    }\n\n    // Update access metadata\n    session.metadata.lastAccessed = Date.now();\n    session.metadata.accessCount++;\n\n    this.emit('sessionAccessed', { sessionId, userId: session.userId });\n    return { ...session };\n  }\n\n  async updateSession(sessionId: string, data: any, merge = true): Promise<SessionData> {\n    const session = await this.getSession(sessionId);\n    if (!session) {\n      throw new Error(`Session ${sessionId} not found`);\n    }\n\n    // Update data\n    if (merge && typeof data === 'object' && data !== null) {\n      session.data = { ...session.data, ...data };\n    } else {\n      session.data = data;\n    }\n\n    // Update metadata\n    session.metadata.lastModified = Date.now();\n    session.metadata.size = JSON.stringify(session.data).length;\n\n    this.sessions.set(sessionId, session);\n\n    if (this.storage) {\n      await this.storage.updateSession(sessionId, session);\n    }\n\n    this.emit('sessionUpdated', { sessionId, userId: session.userId });\n    return { ...session };\n  }\n\n  async deleteSession(sessionId: string): Promise<boolean> {\n    const session = this.sessions.get(sessionId);\n    const deleted = this.sessions.delete(sessionId);\n\n    if (deleted && this.storage) {\n      await this.storage.deleteSession(sessionId);\n    }\n\n    if (deleted) {\n      this.emit('sessionDeleted', { sessionId, userId: session?.userId });\n    }\n\n    return deleted;\n  }\n\n  async listSessions(userId?: string): Promise<string[]> {\n    const sessions = Array.from(this.sessions.values());\n    \n    return sessions\n      .filter(session => !userId || session.userId === userId)\n      .filter(session => !session.ttl || Date.now() <= session.ttl)\n      .map(session => session.sessionId);\n  }\n\n  async cleanupExpiredSessions(): Promise<number> {\n    const now = Date.now();\n    let cleanedCount = 0;\n    \n    for (const [sessionId, session] of this.sessions.entries()) {\n      if (session.ttl && now > session.ttl) {\n        await this.deleteSession(sessionId);\n        cleanedCount++;\n      }\n    }\n\n    this.emit('sessionsCleanedUp', { count: cleanedCount });\n    return cleanedCount;\n  }\n\n  async getStats(): Promise<{\n    totalSessions: number;\n    activeSessions: number;\n    expiredSessions: number;\n    totalSize: number;\n  }> {\n    const now = Date.now();\n    let activeSessions = 0;\n    let expiredSessions = 0;\n    let totalSize = 0;\n\n    for (const session of this.sessions.values()) {\n      totalSize += session.metadata.size;\n      \n      if (session.ttl && now > session.ttl) {\n        expiredSessions++;\n      } else {\n        activeSessions++;\n      }\n    }\n\n    return {\n      totalSessions: this.sessions.size,\n      activeSessions,\n      expiredSessions,\n      totalSize\n    };\n  }\n\n  private generateSessionId(): string {\n    return `session_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\n  }\n\n  private startCleanupInterval(): void {\n    this.cleanupInterval = setInterval(async () => {\n      try {\n        await this.cleanupExpiredSessions();\n      } catch (error) {\n        this.emit('error', error);\n      }\n    }, 5 * 60 * 1000); // Every 5 minutes\n  }\n\n  private async cleanupOldestSessions(count: number): Promise<void> {\n    const sessions = Array.from(this.sessions.values())\n      .sort((a, b) => a.metadata.lastAccessed - b.metadata.lastAccessed)\n      .slice(0, count);\n\n    for (const session of sessions) {\n      await this.deleteSession(session.sessionId);\n    }\n  }\n\n  async shutdown(): Promise<void> {\n    if (this.cleanupInterval) {\n      clearInterval(this.cleanupInterval);\n    }\n\n    // Save all sessions to storage if available\n    if (this.storage) {\n      for (const session of this.sessions.values()) {\n        await this.storage.updateSession(session.sessionId, session);\n      }\n    }\n\n    this.emit('shutdown');\n  }\n}\n\n// Mock Storage Implementation for London-style tests\nclass MockSessionStorage implements SessionStorage {\n  private mockData = new Map<string, SessionData>();\n  public initializeCalled = false;\n  public operations: string[] = [];\n\n  async initialize(): Promise<void> {\n    this.initializeCalled = true;\n    this.operations.push('initialize');\n  }\n\n  async createSession(sessionId: string, data?: any): Promise<SessionData> {\n    this.operations.push(`create:${sessionId}`);\n    const session = data as SessionData;\n    this.mockData.set(sessionId, session);\n    return { ...session };\n  }\n\n  async getSession(sessionId: string): Promise<SessionData | null> {\n    this.operations.push(`get:${sessionId}`);\n    return this.mockData.get(sessionId) || null;\n  }\n\n  async updateSession(sessionId: string, data: any): Promise<SessionData> {\n    this.operations.push(`update:${sessionId}`);\n    const session = data as SessionData;\n    this.mockData.set(sessionId, session);\n    return { ...session };\n  }\n\n  async deleteSession(sessionId: string): Promise<boolean> {\n    this.operations.push(`delete:${sessionId}`);\n    return this.mockData.delete(sessionId);\n  }\n\n  async listSessions(userId?: string): Promise<string[]> {\n    this.operations.push(`list:${userId || 'all'}`);\n    return Array.from(this.mockData.keys());\n  }\n\n  async cleanupExpiredSessions(): Promise<number> {\n    this.operations.push('cleanup');\n    return 0;\n  }\n\n  async getSessionStats(): Promise<{\n    totalSessions: number;\n    activeSessions: number;\n    expiredSessions: number;\n    totalSize: number;\n  }> {\n    this.operations.push('stats');\n    return {\n      totalSessions: this.mockData.size,\n      activeSessions: this.mockData.size,\n      expiredSessions: 0,\n      totalSize: 0\n    };\n  }\n}\n\ndescribe('Session Management Integration Tests', () => {\n  let sessionManager: SessionManager;\n  let mockStorage: MockSessionStorage;\n\n  beforeEach(() => {\n    mockStorage = new MockSessionStorage();\n    sessionManager = new SessionManager(mockStorage);\n  });\n\n  afterEach(async () => {\n    if (sessionManager) {\n      await sessionManager.shutdown();\n    }\n  });\n\n  describe('Storage Interface (London School)', () => {\n    it('should initialize storage properly', async () => {\n      await sessionManager.initialize();\n      \n      expect(mockStorage.initializeCalled).toBe(true);\n      expect(mockStorage.operations).toContain('initialize');\n    });\n\n    it('should delegate operations to storage', async () => {\n      await sessionManager.initialize();\n      \n      const session = await sessionManager.createSession('test-session', { test: 'data' });\n      await sessionManager.getSession('test-session');\n      await sessionManager.updateSession('test-session', { updated: true });\n      await sessionManager.deleteSession('test-session');\n      \n      expect(mockStorage.operations).toContain('create:test-session');\n      expect(mockStorage.operations).toContain('update:test-session');\n      expect(mockStorage.operations).toContain('delete:test-session');\n    });\n\n    it('should handle storage failures gracefully', async () => {\n      const failingStorage = new MockSessionStorage();\n      failingStorage.createSession = jest.fn().mockRejectedValue(new Error('Storage error'));\n      \n      const failingManager = new SessionManager(failingStorage);\n      await failingManager.initialize();\n      \n      await expect(\n        failingManager.createSession('failing-session', {})\n      ).rejects.toThrow('Storage error');\n    });\n  });\n\n  describe('Session Lifecycle (Classical School)', () => {\n    beforeEach(async () => {\n      await sessionManager.initialize();\n    });\n\n    it('should create sessions with proper metadata', async () => {\n      const sessionData = { user: 'john', preferences: { theme: 'dark' } };\n      \n      const session = await sessionManager.createSession('user-session', sessionData, 'john');\n      \n      expect(session.sessionId).toBe('user-session');\n      expect(session.userId).toBe('john');\n      expect(session.data).toEqual(sessionData);\n      expect(session.metadata.created).toBeGreaterThan(0);\n      expect(session.metadata.lastAccessed).toBeGreaterThan(0);\n      expect(session.metadata.accessCount).toBe(1);\n      expect(session.metadata.size).toBeGreaterThan(0);\n    });\n\n    it('should generate unique session IDs when not provided', async () => {\n      const session1 = await sessionManager.createSession();\n      const session2 = await sessionManager.createSession();\n      \n      expect(session1.sessionId).toBeDefined();\n      expect(session2.sessionId).toBeDefined();\n      expect(session1.sessionId).not.toBe(session2.sessionId);\n      expect(session1.sessionId).toMatch(/^session_\\d+_[a-z0-9]+$/);\n    });\n\n    it('should retrieve and update session access metadata', async () => {\n      const initialData = { counter: 0 };\n      await sessionManager.createSession('access-test', initialData);\n      \n      // First access\n      const session1 = await sessionManager.getSession('access-test');\n      expect(session1?.metadata.accessCount).toBe(2); // 1 from create + 1 from get\n      \n      // Second access\n      const session2 = await sessionManager.getSession('access-test');\n      expect(session2?.metadata.accessCount).toBe(3);\n      expect(session2?.metadata.lastAccessed).toBeGreaterThan(session1!.metadata.lastAccessed);\n    });\n\n    it('should update session data correctly', async () => {\n      await sessionManager.createSession('update-test', { a: 1, b: 2 });\n      \n      // Merge update\n      const updated1 = await sessionManager.updateSession('update-test', { b: 3, c: 4 });\n      expect(updated1.data).toEqual({ a: 1, b: 3, c: 4 });\n      \n      // Replace update\n      const updated2 = await sessionManager.updateSession('update-test', { x: 10 }, false);\n      expect(updated2.data).toEqual({ x: 10 });\n      \n      expect(updated2.metadata.lastModified).toBeGreaterThan(updated1.metadata.lastModified);\n    });\n\n    it('should handle session deletion', async () => {\n      await sessionManager.createSession('delete-test', { temporary: true });\n      \n      const deleted = await sessionManager.deleteSession('delete-test');\n      expect(deleted).toBe(true);\n      \n      const retrieved = await sessionManager.getSession('delete-test');\n      expect(retrieved).toBeNull();\n      \n      // Deleting non-existent session should return false\n      const deletedAgain = await sessionManager.deleteSession('delete-test');\n      expect(deletedAgain).toBe(false);\n    });\n\n    it('should list sessions correctly', async () => {\n      await sessionManager.createSession('user1-session', {}, 'user1');\n      await sessionManager.createSession('user2-session', {}, 'user2');\n      await sessionManager.createSession('user1-session2', {}, 'user1');\n      \n      const allSessions = await sessionManager.listSessions();\n      expect(allSessions).toHaveLength(3);\n      expect(allSessions).toContain('user1-session');\n      expect(allSessions).toContain('user2-session');\n      \n      const user1Sessions = await sessionManager.listSessions('user1');\n      expect(user1Sessions).toHaveLength(2);\n      expect(user1Sessions).toContain('user1-session');\n      expect(user1Sessions).toContain('user1-session2');\n      expect(user1Sessions).not.toContain('user2-session');\n    });\n  });\n\n  describe('Session Expiration and Cleanup', () => {\n    beforeEach(async () => {\n      await sessionManager.initialize();\n    });\n\n    it('should handle expired sessions', async () => {\n      // Create session with short TTL\n      const session = await sessionManager.createSession('expire-test', {});\n      session.ttl = Date.now() - 1000; // Already expired\n      \n      // Manually set the expired session\n      (sessionManager as any).sessions.set('expire-test', session);\n      \n      const retrieved = await sessionManager.getSession('expire-test');\n      expect(retrieved).toBeNull();\n      \n      // Session should be cleaned up\n      const sessions = await sessionManager.listSessions();\n      expect(sessions).not.toContain('expire-test');\n    });\n\n    it('should cleanup expired sessions in batch', async () => {\n      const expiredTime = Date.now() - 1000;\n      \n      // Create expired sessions\n      for (let i = 0; i < 5; i++) {\n        const session = await sessionManager.createSession(`expired-${i}`, {});\n        session.ttl = expiredTime;\n        (sessionManager as any).sessions.set(`expired-${i}`, session);\n      }\n      \n      // Create active session\n      await sessionManager.createSession('active', {});\n      \n      const cleanedCount = await sessionManager.cleanupExpiredSessions();\n      expect(cleanedCount).toBe(5);\n      \n      const remainingSessions = await sessionManager.listSessions();\n      expect(remainingSessions).toHaveLength(1);\n      expect(remainingSessions).toContain('active');\n    });\n\n    it('should handle session limit by cleaning oldest sessions', async () => {\n      // Set low limit for testing\n      (sessionManager as any).maxSessions = 3;\n      \n      await sessionManager.createSession('session-1', {});\n      await sessionManager.createSession('session-2', {});\n      await sessionManager.createSession('session-3', {});\n      \n      // Adding 4th session should trigger cleanup\n      await sessionManager.createSession('session-4', {});\n      \n      const sessions = await sessionManager.listSessions();\n      expect(sessions.length).toBeLessThanOrEqual(3);\n      expect(sessions).toContain('session-4'); // Newest should remain\n    });\n  });\n\n  describe('Session Statistics', () => {\n    beforeEach(async () => {\n      await sessionManager.initialize();\n    });\n\n    it('should calculate session statistics correctly', async () => {\n      // Create some test sessions\n      await sessionManager.createSession('stats-1', { data: 'small' });\n      await sessionManager.createSession('stats-2', { data: 'larger data content' });\n      \n      // Create expired session\n      const expiredSession = await sessionManager.createSession('stats-expired', {});\n      expiredSession.ttl = Date.now() - 1000;\n      (sessionManager as any).sessions.set('stats-expired', expiredSession);\n      \n      const stats = await sessionManager.getStats();\n      \n      expect(stats.totalSessions).toBe(3);\n      expect(stats.activeSessions).toBe(2);\n      expect(stats.expiredSessions).toBe(1);\n      expect(stats.totalSize).toBeGreaterThan(0);\n    });\n  });\n\n  describe('Event Emission', () => {\n    beforeEach(async () => {\n      await sessionManager.initialize();\n    });\n\n    it('should emit events for session operations', async () => {\n      const events: string[] = [];\n      \n      sessionManager.on('sessionCreated', (data) => {\n        events.push(`created:${data.sessionId}`);\n      });\n      \n      sessionManager.on('sessionAccessed', (data) => {\n        events.push(`accessed:${data.sessionId}`);\n      });\n      \n      sessionManager.on('sessionUpdated', (data) => {\n        events.push(`updated:${data.sessionId}`);\n      });\n      \n      sessionManager.on('sessionDeleted', (data) => {\n        events.push(`deleted:${data.sessionId}`);\n      });\n      \n      await sessionManager.createSession('event-test', {});\n      await sessionManager.getSession('event-test');\n      await sessionManager.updateSession('event-test', { updated: true });\n      await sessionManager.deleteSession('event-test');\n      \n      expect(events).toContain('created:event-test');\n      expect(events).toContain('accessed:event-test');\n      expect(events).toContain('updated:event-test');\n      expect(events).toContain('deleted:event-test');\n    });\n\n    it('should emit cleanup events', async () => {\n      let cleanupEvent: any = null;\n      \n      sessionManager.on('sessionsCleanedUp', (data) => {\n        cleanupEvent = data;\n      });\n      \n      const count = await sessionManager.cleanupExpiredSessions();\n      \n      expect(cleanupEvent).toBeDefined();\n      expect(cleanupEvent.count).toBe(count);\n    });\n  });\n\n  describe('Concurrent Operations', () => {\n    beforeEach(async () => {\n      await sessionManager.initialize();\n    });\n\n    it('should handle concurrent session creation', async () => {\n      const createPromises = Array.from({ length: 10 }, (_, i) =>\n        sessionManager.createSession(`concurrent-${i}`, { index: i })\n      );\n      \n      const sessions = await Promise.all(createPromises);\n      \n      expect(sessions).toHaveLength(10);\n      sessions.forEach((session, index) => {\n        expect(session.sessionId).toBe(`concurrent-${index}`);\n        expect(session.data.index).toBe(index);\n      });\n    });\n\n    it('should handle concurrent access to same session', async () => {\n      await sessionManager.createSession('concurrent-access', { counter: 0 });\n      \n      const accessPromises = Array.from({ length: 5 }, () =>\n        sessionManager.getSession('concurrent-access')\n      );\n      \n      const results = await Promise.all(accessPromises);\n      \n      expect(results).toHaveLength(5);\n      results.forEach(result => {\n        expect(result).toBeDefined();\n        expect(result!.sessionId).toBe('concurrent-access');\n      });\n      \n      // Final access count should reflect all accesses\n      const finalSession = await sessionManager.getSession('concurrent-access');\n      expect(finalSession!.metadata.accessCount).toBeGreaterThan(5);\n    });\n\n    it('should handle mixed concurrent operations', async () => {\n      await sessionManager.createSession('mixed-ops', { value: 0 });\n      \n      const operations = [\n        () => sessionManager.getSession('mixed-ops'),\n        () => sessionManager.updateSession('mixed-ops', { value: 1 }),\n        () => sessionManager.getSession('mixed-ops'),\n        () => sessionManager.updateSession('mixed-ops', { value: 2 }),\n        () => sessionManager.getSession('mixed-ops')\n      ];\n      \n      const results = await Promise.all(operations.map(op => op()));\n      \n      // All operations should complete successfully\n      expect(results).toHaveLength(5);\n      results.forEach(result => {\n        expect(result).toBeDefined();\n      });\n    });\n  });\n\n  describe('Memory Management', () => {\n    beforeEach(async () => {\n      await sessionManager.initialize();\n    });\n\n    it('should track memory usage accurately', async () => {\n      const largeData = { content: 'x'.repeat(10000) };\n      \n      await sessionManager.createSession('memory-test', largeData);\n      \n      const stats = await sessionManager.getStats();\n      expect(stats.totalSize).toBeGreaterThan(10000);\n      \n      const session = await sessionManager.getSession('memory-test');\n      expect(session!.metadata.size).toBeGreaterThan(10000);\n    });\n\n    it('should update size when session data changes', async () => {\n      await sessionManager.createSession('size-test', { small: 'data' });\n      \n      const initialSession = await sessionManager.getSession('size-test');\n      const initialSize = initialSession!.metadata.size;\n      \n      await sessionManager.updateSession('size-test', { \n        large: 'x'.repeat(5000),\n        additional: 'y'.repeat(3000)\n      });\n      \n      const updatedSession = await sessionManager.getSession('size-test');\n      expect(updatedSession!.metadata.size).toBeGreaterThan(initialSize);\n    });\n  });\n});"],"version":3}