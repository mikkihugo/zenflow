{"version":3,"names":["cov_dntaudbg3","actualCoverage","EventEmitter","spawn","generateId","AgentManager","logger","eventBus","memory","config","agents","s","Map","processes","templates","clusters","pools","healthChecks","healthInterval","heartbeatInterval","scalingPolicies","scalingOperations","resourceUsage","performanceHistory","constructor","f","maxAgents","defaultTimeout","healthCheckInterval","autoRestart","resourceLimits","cpu","disk","agentDefaults","autonomyLevel","learningEnabled","adaptationEnabled","environmentDefaults","runtime","workingDirectory","tempDirectory","logDirectory","setupEventHandlers","initializeDefaultTemplates","on","data","heartbeatData","handleHeartbeat","errorData","handleAgentError","taskData","updateAgentWorkload","agentId","completedData","metrics","b","updateAgentMetrics","resourceData","updateResourceUsage","usage","set","name","type","capabilities","codeGeneration","codeReview","testing","documentation","research","analysis","webSearch","apiIntegration","fileSystem","terminalAccess","languages","frameworks","domains","tools","maxConcurrentTasks","maxMemoryUsage","maxExecutionTime","reliability","speed","quality","maxTasksPerHour","timeoutThreshold","reportingInterval","permissions","trustedAgents","expertise","preferences","verbose","detailed","environment","version","apiEndpoints","credentials","availableTools","toolConfigs","startupScript","coding","debugging","codeStyle","testFramework","initializeSpecializedTemplates","visualization","statistics","outputFormat","includeCharts","requirements","format","style","architecture","design","modeling","diagramFormat","detailLevel","planning","optimization","granularity","scalability","performance","scope","focusArea","automation","coverage","security","focus","governance","tone","initialize","info","size","startHealthMonitoring","startHeartbeatMonitoring","initializeScalingPolicies","emit","shutdown","clearInterval","shutdownPromises","Array","from","keys","map","stopAgent","Promise","all","createAgent","templateName","overrides","Error","template","get","swarmId","agent","id","instance","slice","status","createDefaultMetrics","workload","health","endpoints","lastHeartbeat","Date","taskHistory","errorHistory","childAgents","collaborators","createDefaultHealth","store","tags","partition","startAgent","updateAgentStatus","process","spawnAgentProcess","waitForAgentReady","error","errorMessage","message","String","addAgentError","timestamp","context","severity","resolved","reason","killed","kill","setTimeout","waitForProcessExit","delete","restartAgent","removeAgent","removeAgentFromPoolsAndClusters","deleteEntry","createAgentPool","poolId","pool","minSize","maxSize","currentSize","availableAgents","busyAgents","autoScale","scaleUpThreshold","scaleDownThreshold","i","push","scalePool","targetSize","delta","agentsToRemove","Math","abs","filter","a","fromSize","toSize","setInterval","performHealthChecks","interval","checkHeartbeats","healthPromises","checkAgentHealth","allSettled","now","responsiveness","checkResponsiveness","components","calculatePerformanceScore","calculateReliabilityScore","resourceScore","calculateResourceScore","overall","lastCheck","detectHealthIssues","warn","timeSinceHeartbeat","getTime","history","length","recent","avgTime","reduce","sum","entry","averageExecutionTime","expectedTime","max","min","totalTasks","tasksCompleted","tasksFailed","limits","memoryScore","cpuScore","diskScore","issues","recommendedAction","timeout","entries","catch","env","AGENT_ID","AGENT_TYPE","AGENT_NAME","WORKING_DIR","LOG_DIR","args","JSON","stringify","childProcess","stdio","cwd","code","handleProcessExit","handleProcessError","resolve","reject","timer","handler","readyData","clearTimeout","off","exitCode","toString","oldStatus","to","shift","successRate","cpuUsage","memoryUsage","diskUsage","networkUsage","codeQuality","testCoverage","bugRate","userSatisfaction","totalUptime","lastActivity","responseTime","trend","values","cluster","defaultPolicy","enabled","cooldownPeriod","maxScaleOperations","rules","metric","threshold","comparison","action","amount","getAgent","getAllAgents","getAgentsByType","getAgentsByStatus","getAgentHealth","getPool","getAllPools","getAgentTemplates","getSystemStats","healthyAgents","h","averageHealth","resourceUsages","avgCpu","r","avgMemory","avgDisk","totalAgents","activeAgents","resourceUtilization"],"sources":["/home/mhugo/code/claude-code-flow/src/agents/agent-manager.ts"],"sourcesContent":["/**\n * Comprehensive agent management system\n */\n\nimport { EventEmitter } from 'node:events';\nimport { spawn, ChildProcess } from 'node:child_process';\nimport type { ILogger } from '../core/logger.js';\nimport type { IEventBus } from '../core/event-bus.js';\nimport type {\n  AgentId,\n  AgentType,\n  AgentStatus,\n  AgentState,\n  AgentCapabilities,\n  AgentConfig,\n  AgentEnvironment,\n  AgentMetrics,\n  AgentError,\n} from '../swarm/types.js';\nimport type { DistributedMemorySystem } from '../memory/distributed-memory.js';\nimport { generateId } from '../utils/helpers.js';\n\nexport interface AgentManagerConfig {\n  maxAgents: number;\n  defaultTimeout: number;\n  heartbeatInterval: number;\n  healthCheckInterval: number;\n  autoRestart: boolean;\n  resourceLimits: {\n    memory: number;\n    cpu: number;\n    disk: number;\n  };\n  agentDefaults: {\n    autonomyLevel: number;\n    learningEnabled: boolean;\n    adaptationEnabled: boolean;\n  };\n  environmentDefaults: {\n    runtime: 'deno' | 'node' | 'claude' | 'browser';\n    workingDirectory: string;\n    tempDirectory: string;\n    logDirectory: string;\n  };\n}\n\nexport interface AgentTemplate {\n  name: string;\n  type: AgentType;\n  capabilities: AgentCapabilities;\n  config: Partial<AgentConfig>;\n  environment: Partial<AgentEnvironment>;\n  startupScript?: string;\n  dependencies?: string[];\n}\n\nexport interface AgentCluster {\n  id: string;\n  name: string;\n  agents: AgentId[];\n  coordinator: AgentId;\n  strategy: 'round-robin' | 'load-based' | 'capability-based';\n  maxSize: number;\n  autoScale: boolean;\n}\n\nexport interface AgentPool {\n  id: string;\n  name: string;\n  type: AgentType;\n  minSize: number;\n  maxSize: number;\n  currentSize: number;\n  availableAgents: AgentId[];\n  busyAgents: AgentId[];\n  template: AgentTemplate;\n  autoScale: boolean;\n  scaleUpThreshold: number;\n  scaleDownThreshold: number;\n}\n\nexport interface ScalingPolicy {\n  name: string;\n  enabled: boolean;\n  rules: ScalingRule[];\n  cooldownPeriod: number;\n  maxScaleOperations: number;\n}\n\nexport interface ScalingRule {\n  metric: string;\n  threshold: number;\n  comparison: 'gt' | 'lt' | 'eq' | 'gte' | 'lte';\n  action: 'scale-up' | 'scale-down';\n  amount: number;\n  conditions?: string[];\n}\n\nexport interface AgentHealth {\n  agentId: string;\n  overall: number; // 0-1 health score\n  components: {\n    responsiveness: number;\n    performance: number;\n    reliability: number;\n    resourceUsage: number;\n  };\n  issues: HealthIssue[];\n  lastCheck: Date;\n  trend: 'improving' | 'stable' | 'degrading';\n}\n\nexport interface HealthIssue {\n  type: 'performance' | 'reliability' | 'resource' | 'communication';\n  severity: 'low' | 'medium' | 'high' | 'critical';\n  message: string;\n  timestamp: Date;\n  resolved: boolean;\n  recommendedAction?: string;\n}\n\n/**\n * Comprehensive agent lifecycle and resource management\n */\nexport class AgentManager extends EventEmitter {\n  private logger: ILogger;\n  private eventBus: IEventBus;\n  private memory: DistributedMemorySystem;\n  private config: AgentManagerConfig;\n\n  // Agent tracking\n  private agents = new Map<string, AgentState>();\n  private processes = new Map<string, ChildProcess>();\n  private templates = new Map<string, AgentTemplate>();\n  private clusters = new Map<string, AgentCluster>();\n  private pools = new Map<string, AgentPool>();\n\n  // Health monitoring\n  private healthChecks = new Map<string, AgentHealth>();\n  private healthInterval?: NodeJS.Timeout;\n  private heartbeatInterval?: NodeJS.Timeout;\n\n  // Scaling and policies\n  private scalingPolicies = new Map<string, ScalingPolicy>();\n  private scalingOperations = new Map<string, { timestamp: Date; type: string }>();\n\n  // Resource tracking\n  private resourceUsage = new Map<string, { cpu: number; memory: number; disk: number }>();\n  private performanceHistory = new Map<string, Array<{ timestamp: Date; metrics: AgentMetrics }>>();\n\n  constructor(\n    config: Partial<AgentManagerConfig>,\n    logger: ILogger,\n    eventBus: IEventBus,\n    memory: DistributedMemorySystem,\n  ) {\n    super();\n    this.logger = logger;\n    this.eventBus = eventBus;\n    this.memory = memory;\n\n    this.config = {\n      maxAgents: 50,\n      defaultTimeout: 30000,\n      heartbeatInterval: 10000,\n      healthCheckInterval: 30000,\n      autoRestart: true,\n      resourceLimits: {\n        memory: 512 * 1024 * 1024, // 512MB\n        cpu: 1.0,\n        disk: 1024 * 1024 * 1024, // 1GB\n      },\n      agentDefaults: {\n        autonomyLevel: 0.7,\n        learningEnabled: true,\n        adaptationEnabled: true,\n      },\n      environmentDefaults: {\n        runtime: 'deno',\n        workingDirectory: './agents',\n        tempDirectory: './tmp',\n        logDirectory: './logs',\n      },\n      ...config,\n    };\n\n    this.setupEventHandlers();\n    this.initializeDefaultTemplates();\n  }\n\n  private setupEventHandlers(): void {\n    this.eventBus.on('agent:heartbeat', (data: unknown) => {\n      const heartbeatData = data as { agentId: string; timestamp: Date; metrics?: AgentMetrics };\n      this.handleHeartbeat(heartbeatData);\n    });\n\n    this.eventBus.on('agent:error', (data: unknown) => {\n      const errorData = data as { agentId: string; error: AgentError };\n      this.handleAgentError(errorData);\n    });\n\n    this.eventBus.on('task:assigned', (data: unknown) => {\n      const taskData = data as { agentId: string };\n      this.updateAgentWorkload(taskData.agentId, 1);\n    });\n\n    this.eventBus.on('task:completed', (data: unknown) => {\n      const completedData = data as { agentId: string; metrics?: AgentMetrics };\n      this.updateAgentWorkload(completedData.agentId, -1);\n      if (completedData.metrics) {\n        this.updateAgentMetrics(completedData.agentId, completedData.metrics);\n      }\n    });\n\n    this.eventBus.on('resource:usage', (data: unknown) => {\n      const resourceData = data as {\n        agentId: string;\n        usage: { cpu: number; memory: number; disk: number };\n      };\n      this.updateResourceUsage(resourceData.agentId, resourceData.usage);\n    });\n  }\n\n  private initializeDefaultTemplates(): void {\n    // Research agent template\n    this.templates.set('researcher', {\n      name: 'Research Agent',\n      type: 'researcher',\n      capabilities: {\n        codeGeneration: false,\n        codeReview: false,\n        testing: false,\n        documentation: true,\n        research: true,\n        analysis: true,\n        webSearch: true,\n        apiIntegration: true,\n        fileSystem: true,\n        terminalAccess: false,\n        languages: [],\n        frameworks: [],\n        domains: ['research', 'analysis', 'information-gathering'],\n        tools: ['web-search', 'document-analysis', 'data-extraction'],\n        maxConcurrentTasks: 5,\n        maxMemoryUsage: 256 * 1024 * 1024,\n        maxExecutionTime: 600000,\n        reliability: 0.9,\n        speed: 0.8,\n        quality: 0.9,\n      },\n      config: {\n        autonomyLevel: 0.8,\n        learningEnabled: true,\n        adaptationEnabled: true,\n        maxTasksPerHour: 20,\n        maxConcurrentTasks: 5,\n        timeoutThreshold: 600000,\n        reportingInterval: 30000,\n        heartbeatInterval: 10000,\n        permissions: ['web-access', 'file-read'],\n        trustedAgents: [],\n        expertise: { research: 0.9, analysis: 0.8, documentation: 0.7 },\n        preferences: { verbose: true, detailed: true },\n      },\n      environment: {\n        runtime: 'deno',\n        version: '1.40.0',\n        workingDirectory: './agents/researcher',\n        tempDirectory: './tmp/researcher',\n        logDirectory: './logs/researcher',\n        apiEndpoints: {},\n        credentials: {},\n        availableTools: ['web-search', 'document-reader', 'data-extractor'],\n        toolConfigs: {},\n      },\n      startupScript: './scripts/start-researcher.ts',\n    });\n\n    // Developer agent template\n    this.templates.set('coder', {\n      name: 'Developer Agent',\n      type: 'coder',\n      capabilities: {\n        codeGeneration: true,\n        codeReview: true,\n        testing: true,\n        documentation: true,\n        research: false,\n        analysis: true,\n        webSearch: false,\n        apiIntegration: true,\n        fileSystem: true,\n        terminalAccess: true,\n        languages: ['typescript', 'javascript', 'python', 'rust'],\n        frameworks: ['deno', 'node', 'react', 'svelte'],\n        domains: ['web-development', 'backend', 'api-design'],\n        tools: ['git', 'editor', 'debugger', 'linter', 'formatter'],\n        maxConcurrentTasks: 3,\n        maxMemoryUsage: 512 * 1024 * 1024,\n        maxExecutionTime: 1200000,\n        reliability: 0.95,\n        speed: 0.7,\n        quality: 0.95,\n      },\n      config: {\n        autonomyLevel: 0.6,\n        learningEnabled: true,\n        adaptationEnabled: true,\n        maxTasksPerHour: 10,\n        maxConcurrentTasks: 3,\n        timeoutThreshold: 1200000,\n        reportingInterval: 60000,\n        heartbeatInterval: 15000,\n        permissions: ['file-read', 'file-write', 'terminal-access', 'git-access'],\n        trustedAgents: [],\n        expertise: { coding: 0.95, testing: 0.8, debugging: 0.9 },\n        preferences: { codeStyle: 'functional', testFramework: 'deno-test' },\n      },\n      environment: {\n        runtime: 'deno',\n        version: '1.40.0',\n        workingDirectory: './agents/developer',\n        tempDirectory: './tmp/developer',\n        logDirectory: './logs/developer',\n        apiEndpoints: {},\n        credentials: {},\n        availableTools: ['git', 'deno', 'editor', 'debugger'],\n        toolConfigs: {},\n      },\n      startupScript: './scripts/start-developer.ts',\n    });\n\n    // Add more templates...\n    this.initializeSpecializedTemplates();\n  }\n\n  private initializeSpecializedTemplates(): void {\n    // Analyzer template\n    this.templates.set('analyst', {\n      name: 'Analyzer Agent',\n      type: 'analyst',\n      capabilities: {\n        codeGeneration: false,\n        codeReview: true,\n        testing: false,\n        documentation: true,\n        research: false,\n        analysis: true,\n        webSearch: false,\n        apiIntegration: true,\n        fileSystem: true,\n        terminalAccess: false,\n        languages: ['python', 'r', 'sql'],\n        frameworks: ['pandas', 'numpy', 'matplotlib'],\n        domains: ['data-analysis', 'statistics', 'visualization'],\n        tools: ['data-processor', 'chart-generator', 'statistical-analyzer'],\n        maxConcurrentTasks: 4,\n        maxMemoryUsage: 1024 * 1024 * 1024,\n        maxExecutionTime: 900000,\n        reliability: 0.9,\n        speed: 0.75,\n        quality: 0.9,\n      },\n      config: {\n        autonomyLevel: 0.7,\n        learningEnabled: true,\n        adaptationEnabled: true,\n        maxTasksPerHour: 15,\n        maxConcurrentTasks: 4,\n        timeoutThreshold: 900000,\n        reportingInterval: 45000,\n        heartbeatInterval: 12000,\n        permissions: ['file-read', 'data-access'],\n        trustedAgents: [],\n        expertise: { analysis: 0.95, visualization: 0.8, statistics: 0.85 },\n        preferences: { outputFormat: 'detailed', includeCharts: true },\n      },\n      environment: {\n        runtime: 'deno',\n        version: '1.40.0',\n        workingDirectory: './agents/analyzer',\n        tempDirectory: './tmp/analyzer',\n        logDirectory: './logs/analyzer',\n        apiEndpoints: {},\n        credentials: {},\n        availableTools: ['data-processor', 'chart-gen', 'stats-calc'],\n        toolConfigs: {},\n      },\n      startupScript: './scripts/start-analyzer.ts',\n    });\n\n    // Requirements Engineer Agent Template\n    this.templates.set('requirements-engineer', {\n      name: 'Requirements Engineer Agent',\n      type: 'requirements-engineer',\n      capabilities: {\n        codeGeneration: false,\n        codeReview: false,\n        testing: false,\n        documentation: true,\n        research: true,\n        analysis: true,\n        webSearch: true,\n        apiIntegration: false,\n        fileSystem: true,\n        terminalAccess: false,\n        languages: [],\n        frameworks: [],\n        domains: ['requirements-engineering', 'user-stories', 'ears-notation'],\n        tools: ['document-writer', 'nlp-processor', 'web-search'],\n        maxConcurrentTasks: 2,\n        maxMemoryUsage: 256 * 1024 * 1024,\n        maxExecutionTime: 300000,\n        reliability: 0.95,\n        speed: 0.8,\n        quality: 0.95,\n      },\n      config: {\n        autonomyLevel: 0.8,\n        learningEnabled: true,\n        adaptationEnabled: true,\n        maxTasksPerHour: 10,\n        maxConcurrentTasks: 2,\n        timeoutThreshold: 300000,\n        reportingInterval: 30000,\n        heartbeatInterval: 10000,\n        permissions: ['file-read', 'file-write'],\n        trustedAgents: [],\n        expertise: { requirements: 0.95, documentation: 0.9, analysis: 0.8 },\n        preferences: { format: 'markdown', style: 'formal' },\n      },\n      environment: {\n        runtime: 'deno',\n        version: '1.40.0',\n        workingDirectory: './agents/requirements-engineer',\n        tempDirectory: './tmp/requirements-engineer',\n        logDirectory: './logs/requirements-engineer',\n        apiEndpoints: {},\n        credentials: {},\n        availableTools: ['document-writer', 'nlp-processor'],\n        toolConfigs: {},\n      },\n      startupScript: './scripts/start-requirements-engineer.ts',\n    });\n\n    // Design Architect Agent Template\n    this.templates.set('design-architect', {\n      name: 'Design Architect Agent',\n      type: 'design-architect',\n      capabilities: {\n        codeGeneration: false,\n        codeReview: true,\n        testing: false,\n        documentation: true,\n        research: true,\n        analysis: true,\n        webSearch: false,\n        apiIntegration: true,\n        fileSystem: true,\n        terminalAccess: false,\n        languages: ['typescript', 'javascript', 'python'],\n        frameworks: [],\n        domains: ['software-architecture', 'system-design', 'data-modeling'],\n        tools: ['diagram-generator', 'code-analyzer', 'api-designer'],\n        maxConcurrentTasks: 1,\n        maxMemoryUsage: 512 * 1024 * 1024,\n        maxExecutionTime: 600000,\n        reliability: 0.9,\n        speed: 0.7,\n        quality: 0.95,\n      },\n      config: {\n        autonomyLevel: 0.7,\n        learningEnabled: true,\n        adaptationEnabled: true,\n        maxTasksPerHour: 5,\n        maxConcurrentTasks: 1,\n        timeoutThreshold: 600000,\n        reportingInterval: 60000,\n        heartbeatInterval: 15000,\n        permissions: ['file-read', 'file-write'],\n        trustedAgents: [],\n        expertise: { architecture: 0.95, design: 0.9, modeling: 0.85 },\n        preferences: { diagramFormat: 'mermaid', detailLevel: 'high' },\n      },\n      environment: {\n        runtime: 'deno',\n        version: '1.40.0',\n        workingDirectory: './agents/design-architect',\n        tempDirectory: './tmp/design-architect',\n        logDirectory: './logs/design-architect',\n        apiEndpoints: {},\n        credentials: {},\n        availableTools: ['diagram-gen', 'code-analyzer'],\n        toolConfigs: {},\n      },\n      startupScript: './scripts/start-design-architect.ts',\n    });\n\n    // Task Planner Agent Template\n    this.templates.set('task-planner', {\n      name: 'Task Planner Agent',\n      type: 'task-planner',\n      capabilities: {\n        codeGeneration: false,\n        codeReview: false,\n        testing: false,\n        documentation: true,\n        research: false,\n        analysis: true,\n        webSearch: false,\n        apiIntegration: false,\n        fileSystem: true,\n        terminalAccess: false,\n        languages: [],\n        frameworks: [],\n        domains: ['project-management', 'task-breakdown', 'agile-planning'],\n        tools: ['task-scheduler', 'dependency-analyzer'],\n        maxConcurrentTasks: 3,\n        maxMemoryUsage: 256 * 1024 * 1024,\n        maxExecutionTime: 300000,\n        reliability: 0.95,\n        speed: 0.85,\n        quality: 0.9,\n      },\n      config: {\n        autonomyLevel: 0.8,\n        learningEnabled: true,\n        adaptationEnabled: true,\n        maxTasksPerHour: 20,\n        maxConcurrentTasks: 3,\n        timeoutThreshold: 300000,\n        reportingInterval: 30000,\n        heartbeatInterval: 10000,\n        permissions: ['file-read', 'file-write'],\n        trustedAgents: [],\n        expertise: { planning: 0.95, 'task-management': 0.9, optimization: 0.8 },\n        preferences: { outputFormat: 'markdown-checkbox', granularity: 'fine' },\n      },\n      environment: {\n        runtime: 'deno',\n        version: '1.40.0',\n        workingDirectory: './agents/task-planner',\n        tempDirectory: './tmp/task-planner',\n        logDirectory: './logs/task-planner',\n        apiEndpoints: {},\n        credentials: {},\n        availableTools: ['task-scheduler', 'dependency-analyzer'],\n        toolConfigs: {},\n      },\n      startupScript: './scripts/start-task-planner.ts',\n    });\n\n    // Developer Agent Template (already exists, but ensure it's aligned)\n    this.templates.set('developer', {\n      name: 'Developer Agent',\n      type: 'developer',\n      capabilities: {\n        codeGeneration: true,\n        codeReview: true,\n        testing: true,\n        documentation: true,\n        research: false,\n        analysis: true,\n        webSearch: false,\n        apiIntegration: true,\n        fileSystem: true,\n        terminalAccess: true,\n        languages: ['typescript', 'javascript', 'python', 'rust'],\n        frameworks: ['deno', 'node', 'react', 'svelte'],\n        domains: ['web-development', 'backend', 'api-design'],\n        tools: ['git', 'editor', 'debugger', 'linter', 'formatter'],\n        maxConcurrentTasks: 3,\n        maxMemoryUsage: 512 * 1024 * 1024,\n        maxExecutionTime: 1200000,\n        reliability: 0.95,\n        speed: 0.7,\n        quality: 0.95,\n      },\n      config: {\n        autonomyLevel: 0.6,\n        learningEnabled: true,\n        adaptationEnabled: true,\n        maxTasksPerHour: 10,\n        maxConcurrentTasks: 3,\n        timeoutThreshold: 1200000,\n        reportingInterval: 60000,\n        heartbeatInterval: 15000,\n        permissions: ['file-read', 'file-write', 'terminal-access', 'git-access'],\n        trustedAgents: [],\n        expertise: { coding: 0.95, testing: 0.8, debugging: 0.9 },\n        preferences: { codeStyle: 'functional', testFramework: 'deno-test' },\n      },\n      environment: {\n        runtime: 'deno',\n        version: '1.40.0',\n        workingDirectory: './agents/developer',\n        tempDirectory: './tmp/developer',\n        logDirectory: './logs/developer',\n        apiEndpoints: {},\n        credentials: {},\n        availableTools: ['git', 'deno', 'editor', 'debugger'],\n        toolConfigs: {},\n      },\n      startupScript: './scripts/start-developer.ts',\n    });\n\n    // System Architect Agent Template  \n    this.templates.set('system-architect', {\n      name: 'System Architect Agent',\n      type: 'system-architect',\n      capabilities: {\n        codeGeneration: false,\n        codeReview: true,\n        testing: false,\n        documentation: true,\n        research: true,\n        analysis: true,\n        webSearch: false,\n        apiIntegration: true,\n        fileSystem: true,\n        terminalAccess: false,\n        languages: ['typescript', 'javascript', 'python'],\n        frameworks: ['microservices', 'distributed-systems'],\n        domains: ['system-architecture', 'scalability', 'performance', 'distributed-systems'],\n        tools: ['architecture-analyzer', 'system-modeler', 'performance-analyzer'],\n        maxConcurrentTasks: 1,\n        maxMemoryUsage: 512 * 1024 * 1024,\n        maxExecutionTime: 900000,\n        reliability: 0.95,\n        speed: 0.7,\n        quality: 0.95,\n      },\n      config: {\n        autonomyLevel: 0.8,\n        learningEnabled: true,\n        adaptationEnabled: true,\n        maxTasksPerHour: 5,\n        maxConcurrentTasks: 1,\n        timeoutThreshold: 900000,\n        reportingInterval: 60000,\n        heartbeatInterval: 15000,\n        permissions: ['file-read', 'file-write'],\n        trustedAgents: [],\n        expertise: { 'system-architecture': 0.95, scalability: 0.9, performance: 0.85 },\n        preferences: { scope: 'system-wide', focusArea: 'architecture' },\n      },\n      environment: {\n        runtime: 'deno',\n        version: '1.40.0',\n        workingDirectory: './agents/system-architect',\n        tempDirectory: './tmp/system-architect',\n        logDirectory: './logs/system-architect',\n        apiEndpoints: {},\n        credentials: {},\n        availableTools: ['architecture-analyzer', 'system-modeler'],\n        toolConfigs: {},\n      },\n      startupScript: './scripts/start-system-architect.ts',\n    });\n\n    // Tester Agent Template\n    this.templates.set('tester', {\n      name: 'Testing Agent',\n      type: 'tester',\n      capabilities: {\n        codeGeneration: false,\n        codeReview: true,\n        testing: true,\n        documentation: true,\n        research: false,\n        analysis: true,\n        webSearch: false,\n        apiIntegration: true,\n        fileSystem: true,\n        terminalAccess: true,\n        languages: ['typescript', 'javascript', 'python'],\n        frameworks: ['deno-test', 'jest', 'vitest', 'cypress'],\n        domains: ['testing', 'quality-assurance', 'test-automation'],\n        tools: ['test-runner', 'coverage-analyzer', 'test-generator'],\n        maxConcurrentTasks: 3,\n        maxMemoryUsage: 256 * 1024 * 1024,\n        maxExecutionTime: 600000,\n        reliability: 0.9,\n        speed: 0.8,\n        quality: 0.9,\n      },\n      config: {\n        autonomyLevel: 0.7,\n        learningEnabled: true,\n        adaptationEnabled: true,\n        maxTasksPerHour: 15,\n        maxConcurrentTasks: 3,\n        timeoutThreshold: 600000,\n        reportingInterval: 45000,\n        heartbeatInterval: 12000,\n        permissions: ['file-read', 'file-write', 'terminal-access'],\n        trustedAgents: [],\n        expertise: { testing: 0.9, 'quality-assurance': 0.85, automation: 0.8 },\n        preferences: { testFramework: 'deno-test', coverage: 'comprehensive' },\n      },\n      environment: {\n        runtime: 'deno',\n        version: '1.40.0',\n        workingDirectory: './agents/tester',\n        tempDirectory: './tmp/tester',\n        logDirectory: './logs/tester',\n        apiEndpoints: {},\n        credentials: {},\n        availableTools: ['test-runner', 'coverage-tool', 'test-gen'],\n        toolConfigs: {},\n      },\n      startupScript: './scripts/start-tester.ts',\n    });\n\n    // Code Reviewer Agent Template\n    this.templates.set('reviewer', {\n      name: 'Code Review Agent',\n      type: 'reviewer',\n      capabilities: {\n        codeGeneration: false,\n        codeReview: true,\n        testing: false,\n        documentation: true,\n        research: false,\n        analysis: true,\n        webSearch: false,\n        apiIntegration: false,\n        fileSystem: true,\n        terminalAccess: false,\n        languages: ['typescript', 'javascript', 'python', 'rust'],\n        frameworks: ['static-analysis', 'code-quality'],\n        domains: ['code-review', 'quality-assurance', 'best-practices'],\n        tools: ['static-analyzer', 'code-quality-checker', 'security-scanner'],\n        maxConcurrentTasks: 2,\n        maxMemoryUsage: 256 * 1024 * 1024,\n        maxExecutionTime: 450000,\n        reliability: 0.95,\n        speed: 0.8,\n        quality: 0.95,\n      },\n      config: {\n        autonomyLevel: 0.8,\n        learningEnabled: true,\n        adaptationEnabled: true,\n        maxTasksPerHour: 12,\n        maxConcurrentTasks: 2,\n        timeoutThreshold: 450000,\n        reportingInterval: 30000,\n        heartbeatInterval: 10000,\n        permissions: ['file-read'],\n        trustedAgents: [],\n        expertise: { 'code-review': 0.95, 'quality-assurance': 0.9, security: 0.8 },\n        preferences: { style: 'thorough', focus: 'quality-and-security' },\n      },\n      environment: {\n        runtime: 'deno',\n        version: '1.40.0',\n        workingDirectory: './agents/reviewer',\n        tempDirectory: './tmp/reviewer',\n        logDirectory: './logs/reviewer',\n        apiEndpoints: {},\n        credentials: {},\n        availableTools: ['static-analyzer', 'quality-checker'],\n        toolConfigs: {},\n      },\n      startupScript: './scripts/start-reviewer.ts',\n    });\n\n    // Steering Author Agent Template\n    this.templates.set('steering-author', {\n      name: 'Steering Author Agent',\n      type: 'steering-author',\n      capabilities: {\n        codeGeneration: false,\n        codeReview: true,\n        testing: false,\n        documentation: true,\n        research: true,\n        analysis: true,\n        webSearch: false,\n        apiIntegration: false,\n        fileSystem: true,\n        terminalAccess: false,\n        languages: [],\n        frameworks: [],\n        domains: ['documentation', 'knowledge-management', 'governance'],\n        tools: ['document-writer', 'content-analyzer'],\n        maxConcurrentTasks: 1,\n        maxMemoryUsage: 256 * 1024 * 1024,\n        maxExecutionTime: 300000,\n        reliability: 0.95,\n        speed: 0.7,\n        quality: 0.98,\n      },\n      config: {\n        autonomyLevel: 0.7,\n        learningEnabled: true,\n        adaptationEnabled: true,\n        maxTasksPerHour: 5,\n        maxConcurrentTasks: 1,\n        timeoutThreshold: 300000,\n        reportingInterval: 30000,\n        heartbeatInterval: 10000,\n        permissions: ['file-read', 'file-write'],\n        trustedAgents: [],\n        expertise: { documentation: 0.98, governance: 0.9, 'content-creation': 0.85 },\n        preferences: { style: 'concise', tone: 'formal' },\n      },\n      environment: {\n        runtime: 'deno',\n        version: '1.40.0',\n        workingDirectory: './agents/steering-author',\n        tempDirectory: './tmp/steering-author',\n        logDirectory: './logs/steering-author',\n        apiEndpoints: {},\n        credentials: {},\n        availableTools: ['document-writer', 'content-analyzer'],\n        toolConfigs: {},\n      },\n      startupScript: './scripts/start-steering-author.ts',\n    });\n  }\n\n  async initialize(): Promise<void> {\n    this.logger.info('Initializing agent manager', {\n      maxAgents: this.config.maxAgents,\n      templates: this.templates.size,\n    });\n\n    // Start health monitoring\n    this.startHealthMonitoring();\n\n    // Start heartbeat monitoring\n    this.startHeartbeatMonitoring();\n\n    // Initialize default scaling policies\n    this.initializeScalingPolicies();\n\n    this.emit('agent-manager:initialized');\n  }\n\n  async shutdown(): Promise<void> {\n    this.logger.info('Shutting down agent manager');\n\n    // Stop monitoring\n    if (this.healthInterval) clearInterval(this.healthInterval);\n    if (this.heartbeatInterval) clearInterval(this.heartbeatInterval);\n\n    // Gracefully shutdown all agents\n    const shutdownPromises = Array.from(this.agents.keys()).map((agentId) =>\n      this.stopAgent(agentId, 'shutdown'),\n    );\n\n    await Promise.all(shutdownPromises);\n\n    this.emit('agent-manager:shutdown');\n  }\n\n  // === AGENT LIFECYCLE ===\n\n  async createAgent(\n    templateName: string,\n    overrides: {\n      name?: string;\n      config?: Partial<AgentConfig>;\n      environment?: Partial<AgentEnvironment>;\n    } = {},\n  ): Promise<string> {\n    if (this.agents.size >= this.config.maxAgents) {\n      throw new Error('Maximum agent limit reached');\n    }\n\n    const template = this.templates.get(templateName);\n    if (!template) {\n      throw new Error(`Template ${templateName} not found`);\n    }\n\n    const agentId = generateId('agent');\n    const swarmId = 'default'; // Could be parameterized\n\n    const agent: AgentState = {\n      id: { id: agentId, swarmId, type: template.type, instance: 1 },\n      name: overrides.name || `${template.name}-${agentId.slice(-8)}`,\n      type: template.type,\n      status: 'initializing',\n      capabilities: { ...template.capabilities },\n      metrics: this.createDefaultMetrics(),\n      workload: 0,\n      health: 1.0,\n      config: {\n        autonomyLevel: template.config.autonomyLevel ?? this.config.agentDefaults.autonomyLevel,\n        learningEnabled:\n          template.config.learningEnabled ?? this.config.agentDefaults.learningEnabled,\n        adaptationEnabled:\n          template.config.adaptationEnabled ?? this.config.agentDefaults.adaptationEnabled,\n        maxTasksPerHour: template.config.maxTasksPerHour ?? 10,\n        maxConcurrentTasks: template.config.maxConcurrentTasks ?? 3,\n        timeoutThreshold: template.config.timeoutThreshold ?? 300000,\n        reportingInterval: template.config.reportingInterval ?? 30000,\n        heartbeatInterval: template.config.heartbeatInterval ?? 10000,\n        permissions: template.config.permissions ?? [],\n        trustedAgents: template.config.trustedAgents ?? [],\n        expertise: template.config.expertise ?? {},\n        preferences: template.config.preferences ?? {},\n        ...overrides.config,\n      },\n      environment: {\n        runtime: template.environment.runtime ?? this.config.environmentDefaults.runtime,\n        version: template.environment.version ?? '1.40.0',\n        workingDirectory:\n          template.environment.workingDirectory ?? this.config.environmentDefaults.workingDirectory,\n        tempDirectory:\n          template.environment.tempDirectory ?? this.config.environmentDefaults.tempDirectory,\n        logDirectory:\n          template.environment.logDirectory ?? this.config.environmentDefaults.logDirectory,\n        apiEndpoints: template.environment.apiEndpoints ?? {},\n        credentials: template.environment.credentials ?? {},\n        availableTools: template.environment.availableTools ?? [],\n        toolConfigs: template.environment.toolConfigs ?? {},\n        ...overrides.environment,\n      },\n      endpoints: [],\n      lastHeartbeat: new Date(),\n      taskHistory: [],\n      errorHistory: [],\n      childAgents: [],\n      collaborators: [],\n    };\n\n    this.agents.set(agentId, agent);\n    this.healthChecks.set(agentId, this.createDefaultHealth(agentId));\n\n    this.logger.info('Created agent', {\n      agentId,\n      name: agent.name,\n      type: agent.type,\n      template: templateName,\n    });\n\n    this.emit('agent:created', { agent });\n\n    // Store in memory for persistence\n    await this.memory.store(`agent:${agentId}`, agent, {\n      type: 'agent-state',\n      tags: [agent.type, 'active'],\n      partition: 'state',\n    });\n\n    return agentId;\n  }\n\n  async startAgent(agentId: string): Promise<void> {\n    const agent = this.agents.get(agentId);\n    if (!agent) {\n      throw new Error(`Agent ${agentId} not found`);\n    }\n\n    if (agent.status !== 'initializing' && agent.status !== 'offline') {\n      throw new Error(`Agent ${agentId} cannot be started from status ${agent.status}`);\n    }\n\n    try {\n      agent.status = 'initializing';\n      this.updateAgentStatus(agentId, 'initializing');\n\n      // Spawn agent process\n      const process = await this.spawnAgentProcess(agent);\n      this.processes.set(agentId, process);\n\n      // Wait for agent to signal ready\n      await this.waitForAgentReady(agentId, this.config.defaultTimeout);\n\n      agent.status = 'idle';\n      this.updateAgentStatus(agentId, 'idle');\n\n      this.logger.info('Started agent', { agentId, name: agent.name });\n      this.emit('agent:started', { agent });\n    } catch (error) {\n      const errorMessage = error instanceof Error ? error.message : String(error);\n      agent.status = 'error';\n      this.addAgentError(agentId, {\n        timestamp: new Date(),\n        type: 'startup_failed',\n        message: errorMessage,\n        context: { agentId },\n        severity: 'critical',\n        resolved: false,\n      });\n\n      this.logger.error('Failed to start agent', { agentId, error });\n      throw error;\n    }\n  }\n\n  async stopAgent(agentId: string, reason: string = 'user_request'): Promise<void> {\n    const agent = this.agents.get(agentId);\n    if (!agent) {\n      throw new Error(`Agent ${agentId} not found`);\n    }\n\n    if (agent.status === 'offline' || agent.status === 'terminated') {\n      return; // Already stopped\n    }\n\n    try {\n      agent.status = 'terminating';\n      this.updateAgentStatus(agentId, 'terminating');\n\n      // Send graceful shutdown signal\n      const process = this.processes.get(agentId);\n      if (process && !process.killed) {\n        process.kill('SIGTERM');\n\n        // Force kill after timeout\n        setTimeout(() => {\n          if (process && !process.killed) {\n            process.kill('SIGKILL');\n          }\n        }, this.config.defaultTimeout);\n      }\n\n      // Wait for process to exit\n      await this.waitForProcessExit(agentId, this.config.defaultTimeout);\n\n      agent.status = 'terminated';\n      this.updateAgentStatus(agentId, 'terminated');\n\n      // Cleanup\n      this.processes.delete(agentId);\n\n      this.logger.info('Stopped agent', { agentId, reason });\n      this.emit('agent:stopped', { agent, reason });\n    } catch (error) {\n      this.logger.error('Failed to stop agent gracefully', { agentId, error });\n      // Force cleanup\n      this.processes.delete(agentId);\n      agent.status = 'terminated';\n    }\n  }\n\n  async restartAgent(agentId: string, reason: string = 'restart_requested'): Promise<void> {\n    this.logger.info('Restarting agent', { agentId, reason });\n\n    await this.stopAgent(agentId, `restart:${reason}`);\n    await this.startAgent(agentId);\n\n    this.emit('agent:restarted', { agentId, reason });\n  }\n\n  async removeAgent(agentId: string): Promise<void> {\n    const agent = this.agents.get(agentId);\n    if (!agent) {\n      throw new Error(`Agent ${agentId} not found`);\n    }\n\n    // Stop agent if running\n    if (agent.status !== 'terminated' && agent.status !== 'offline') {\n      await this.stopAgent(agentId, 'removal');\n    }\n\n    // Remove from all data structures\n    this.agents.delete(agentId);\n    this.healthChecks.delete(agentId);\n    this.resourceUsage.delete(agentId);\n    this.performanceHistory.delete(agentId);\n\n    // Remove from pools and clusters\n    this.removeAgentFromPoolsAndClusters(agentId);\n\n    // Remove from memory\n    await this.memory.deleteEntry(`agent:${agentId}`);\n\n    this.logger.info('Removed agent', { agentId });\n    this.emit('agent:removed', { agentId });\n  }\n\n  // === AGENT POOLS ===\n\n  async createAgentPool(\n    name: string,\n    templateName: string,\n    config: {\n      minSize: number;\n      maxSize: number;\n      autoScale?: boolean;\n      scaleUpThreshold?: number;\n      scaleDownThreshold?: number;\n    },\n  ): Promise<string> {\n    const template = this.templates.get(templateName);\n    if (!template) {\n      throw new Error(`Template ${templateName} not found`);\n    }\n\n    const poolId = generateId('pool');\n    const pool: AgentPool = {\n      id: poolId,\n      name,\n      type: template.type,\n      minSize: config.minSize,\n      maxSize: config.maxSize,\n      currentSize: 0,\n      availableAgents: [],\n      busyAgents: [],\n      template,\n      autoScale: config.autoScale || false,\n      scaleUpThreshold: config.scaleUpThreshold || 0.8,\n      scaleDownThreshold: config.scaleDownThreshold || 0.3,\n    };\n\n    this.pools.set(poolId, pool);\n\n    // Create minimum agents\n    for (let i = 0; i < config.minSize; i++) {\n      const agentId = await this.createAgent(templateName, {\n        name: `${name}-${i + 1}`,\n      });\n      await this.startAgent(agentId);\n      pool.availableAgents.push({\n        id: agentId,\n        swarmId: 'default',\n        type: template.type,\n        instance: i + 1,\n      });\n      pool.currentSize++;\n    }\n\n    this.logger.info('Created agent pool', { poolId, name, minSize: config.minSize });\n    this.emit('pool:created', { pool });\n\n    return poolId;\n  }\n\n  async scalePool(poolId: string, targetSize: number): Promise<void> {\n    const pool = this.pools.get(poolId);\n    if (!pool) {\n      throw new Error(`Pool ${poolId} not found`);\n    }\n\n    if (targetSize < pool.minSize || targetSize > pool.maxSize) {\n      throw new Error(\n        `Target size ${targetSize} outside pool limits [${pool.minSize}, ${pool.maxSize}]`,\n      );\n    }\n\n    const currentSize = pool.currentSize;\n    const delta = targetSize - currentSize;\n\n    if (delta > 0) {\n      // Scale up\n      for (let i = 0; i < delta; i++) {\n        const agentId = await this.createAgent(pool.template.name, {\n          name: `${pool.name}-${currentSize + i + 1}`,\n        });\n        await this.startAgent(agentId);\n        pool.availableAgents.push({\n          id: agentId,\n          swarmId: 'default',\n          type: pool.type,\n          instance: currentSize + i + 1,\n        });\n      }\n    } else if (delta < 0) {\n      // Scale down\n      const agentsToRemove = pool.availableAgents.slice(0, Math.abs(delta));\n      for (const agentId of agentsToRemove) {\n        await this.removeAgent(agentId.id);\n        pool.availableAgents = pool.availableAgents.filter((a) => a.id !== agentId.id);\n      }\n    }\n\n    pool.currentSize = targetSize;\n\n    this.logger.info('Scaled pool', { poolId, fromSize: currentSize, toSize: targetSize });\n    this.emit('pool:scaled', { pool, fromSize: currentSize, toSize: targetSize });\n  }\n\n  // === HEALTH MONITORING ===\n\n  private startHealthMonitoring(): void {\n    this.healthInterval = setInterval(() => {\n      this.performHealthChecks();\n    }, this.config.healthCheckInterval);\n\n    this.logger.info('Started health monitoring', {\n      interval: this.config.healthCheckInterval,\n    });\n  }\n\n  private startHeartbeatMonitoring(): void {\n    this.heartbeatInterval = setInterval(() => {\n      this.checkHeartbeats();\n    }, this.config.heartbeatInterval);\n\n    this.logger.info('Started heartbeat monitoring', {\n      interval: this.config.heartbeatInterval,\n    });\n  }\n\n  private async performHealthChecks(): Promise<void> {\n    const healthPromises = Array.from(this.agents.keys()).map((agentId) =>\n      this.checkAgentHealth(agentId),\n    );\n\n    await Promise.allSettled(healthPromises);\n  }\n\n  private async checkAgentHealth(agentId: string): Promise<void> {\n    const agent = this.agents.get(agentId);\n    if (!agent) return;\n\n    const health = this.healthChecks.get(agentId);\n    if (!health) return;\n    const now = new Date();\n\n    try {\n      // Check responsiveness\n      const responsiveness = await this.checkResponsiveness(agentId);\n      health.components.responsiveness = responsiveness;\n\n      // Check performance\n      const performance = this.calculatePerformanceScore(agentId);\n      health.components.performance = performance;\n\n      // Check reliability\n      const reliability = this.calculateReliabilityScore(agentId);\n      health.components.reliability = reliability;\n\n      // Check resource usage\n      const resourceScore = this.calculateResourceScore(agentId);\n      health.components.resourceUsage = resourceScore;\n\n      // Calculate overall health\n      const overall = (responsiveness + performance + reliability + resourceScore) / 4;\n      health.overall = overall;\n      health.lastCheck = now;\n\n      // Update agent health\n      agent.health = overall;\n\n      // Check for issues\n      this.detectHealthIssues(agentId, health);\n\n      // Auto-restart if critically unhealthy\n      if (overall < 0.3 && this.config.autoRestart) {\n        this.logger.warn('Agent critically unhealthy, restarting', { agentId, health: overall });\n        await this.restartAgent(agentId, 'health_critical');\n      }\n    } catch (error) {\n      this.logger.error('Health check failed', { agentId, error });\n      health.overall = 0;\n      health.lastCheck = now;\n    }\n  }\n\n  private async checkResponsiveness(agentId: string): Promise<number> {\n    // Send ping and measure response time\n\n    try {\n      // This would send an actual ping to the agent\n      // For now, simulate based on last heartbeat\n      const agent = this.agents.get(agentId);\n      if (!agent) return 0;\n      const timeSinceHeartbeat = Date.now() - agent.lastHeartbeat.getTime();\n\n      if (timeSinceHeartbeat > this.config.heartbeatInterval * 3) {\n        return 0; // Unresponsive\n      } else if (timeSinceHeartbeat > this.config.heartbeatInterval * 2) {\n        return 0.5; // Slow\n      } else {\n        return 1.0; // Responsive\n      }\n    } catch (error) {\n      return 0; // Failed to respond\n    }\n  }\n\n  private calculatePerformanceScore(agentId: string): number {\n    const history = this.performanceHistory.get(agentId) || [];\n    if (history.length === 0) return 1.0;\n\n    // Calculate average task completion time vs expected\n    const recent = history.slice(-10); // Last 10 entries\n    const avgTime =\n      recent.reduce((sum, entry) => sum + entry.metrics.averageExecutionTime, 0) / recent.length;\n\n    // Normalize based on expected performance (simplified)\n    const expectedTime = 60000; // 1 minute baseline\n    return Math.max(0, Math.min(1, expectedTime / avgTime));\n  }\n\n  private calculateReliabilityScore(agentId: string): number {\n    const agent = this.agents.get(agentId);\n    if (!agent) return 0;\n    const totalTasks = agent.metrics.tasksCompleted + agent.metrics.tasksFailed;\n\n    if (totalTasks === 0) return 1.0;\n\n    return agent.metrics.tasksCompleted / totalTasks;\n  }\n\n  private calculateResourceScore(agentId: string): number {\n    const usage = this.resourceUsage.get(agentId);\n    if (!usage) return 1.0;\n\n    const limits = this.config.resourceLimits;\n    const memoryScore = 1 - usage.memory / limits.memory;\n    const cpuScore = 1 - usage.cpu / limits.cpu;\n    const diskScore = 1 - usage.disk / limits.disk;\n\n    return Math.max(0, (memoryScore + cpuScore + diskScore) / 3);\n  }\n\n  private detectHealthIssues(agentId: string, health: AgentHealth): void {\n    const issues: HealthIssue[] = [];\n\n    if (health.components.responsiveness < 0.5) {\n      issues.push({\n        type: 'communication',\n        severity: health.components.responsiveness < 0.2 ? 'critical' : 'high',\n        message: 'Agent is not responding to heartbeats',\n        timestamp: new Date(),\n        resolved: false,\n        recommendedAction: 'Restart agent or check network connectivity',\n      });\n    }\n\n    if (health.components.performance < 0.6) {\n      issues.push({\n        type: 'performance',\n        severity: health.components.performance < 0.3 ? 'high' : 'medium',\n        message: 'Agent performance is below expected levels',\n        timestamp: new Date(),\n        resolved: false,\n        recommendedAction: 'Check resource allocation or agent configuration',\n      });\n    }\n\n    if (health.components.resourceUsage < 0.4) {\n      issues.push({\n        type: 'resource',\n        severity: health.components.resourceUsage < 0.2 ? 'critical' : 'high',\n        message: 'Agent resource usage is critically high',\n        timestamp: new Date(),\n        resolved: false,\n        recommendedAction: 'Increase resource limits or reduce workload',\n      });\n    }\n\n    health.issues = issues;\n  }\n\n  private checkHeartbeats(): void {\n    const now = Date.now();\n    const timeout = this.config.heartbeatInterval * 3;\n\n    for (const [agentId, agent] of Array.from(this.agents.entries())) {\n      const timeSinceHeartbeat = now - agent.lastHeartbeat.getTime();\n\n      if (\n        timeSinceHeartbeat > timeout &&\n        agent.status !== 'offline' &&\n        agent.status !== 'terminated'\n      ) {\n        this.logger.warn('Agent heartbeat timeout', { agentId, timeSinceHeartbeat });\n\n        agent.status = 'error';\n        this.addAgentError(agentId, {\n          timestamp: new Date(),\n          type: 'heartbeat_timeout',\n          message: 'Agent failed to send heartbeat within timeout period',\n          context: { timeout, timeSinceHeartbeat },\n          severity: 'high',\n          resolved: false,\n        });\n\n        this.emit('agent:heartbeat-timeout', { agentId, timeSinceHeartbeat });\n\n        // Auto-restart if enabled\n        if (this.config.autoRestart) {\n          this.restartAgent(agentId, 'heartbeat_timeout').catch((error) => {\n            this.logger.error('Failed to auto-restart agent', { agentId, error });\n          });\n        }\n      }\n    }\n  }\n\n  // === UTILITY METHODS ===\n\n  private async spawnAgentProcess(agent: AgentState): Promise<ChildProcess> {\n    const env: NodeJS.ProcessEnv = {\n      ...process.env,\n      AGENT_ID: agent.id.id,\n      AGENT_TYPE: agent.type,\n      AGENT_NAME: agent.name,\n      WORKING_DIR: agent.environment.workingDirectory,\n      LOG_DIR: agent.environment.logDirectory,\n    };\n\n    const args = [\n      'run',\n      '--allow-all',\n      agent.environment.availableTools[0] || './agents/generic-agent.ts',\n      '--config',\n      JSON.stringify(agent.config),\n    ];\n\n    const childProcess = spawn(agent.environment.runtime, args, {\n      env,\n      stdio: ['pipe', 'pipe', 'pipe'],\n      cwd: agent.environment.workingDirectory,\n    });\n\n    // Handle process events\n    childProcess.on('exit', (code: number | null) => {\n      this.handleProcessExit(agent.id.id, code);\n    });\n\n    childProcess.on('error', (error: Error) => {\n      this.handleProcessError(agent.id.id, error);\n    });\n\n    return childProcess;\n  }\n\n  private async waitForAgentReady(agentId: string, timeout: number): Promise<void> {\n    return new Promise((resolve, reject) => {\n      const timer = setTimeout(() => {\n        reject(new Error(`Agent ${agentId} startup timeout`));\n      }, timeout);\n\n      const handler = (data: unknown) => {\n        const readyData = data as { agentId: string };\n        if (readyData.agentId === agentId) {\n          clearTimeout(timer);\n          this.eventBus.off('agent:ready', handler);\n          resolve();\n        }\n      };\n\n      this.eventBus.on('agent:ready', handler);\n    });\n  }\n\n  private async waitForProcessExit(agentId: string, timeout: number): Promise<void> {\n    return new Promise((resolve) => {\n      const process = this.processes.get(agentId);\n      if (!process || process.killed) {\n        resolve();\n        return;\n      }\n\n      const timer = setTimeout(() => {\n        resolve(); // Timeout, continue anyway\n      }, timeout);\n\n      process.on('exit', () => {\n        clearTimeout(timer);\n        resolve();\n      });\n    });\n  }\n\n  private handleProcessExit(agentId: string, code: number | null): void {\n    const agent = this.agents.get(agentId);\n    if (!agent) return;\n\n    this.logger.info('Agent process exited', { agentId, exitCode: code });\n\n    if (code !== 0 && code !== null) {\n      this.addAgentError(agentId, {\n        timestamp: new Date(),\n        type: 'process_exit',\n        message: `Agent process exited with code ${code}`,\n        context: { exitCode: code },\n        severity: 'high',\n        resolved: false,\n      });\n    }\n\n    agent.status = 'offline';\n    this.emit('agent:process-exit', { agentId, exitCode: code });\n  }\n\n  private handleProcessError(agentId: string, error: Error): void {\n    this.logger.error('Agent process error', { agentId, error });\n\n    this.addAgentError(agentId, {\n      timestamp: new Date(),\n      type: 'process_error',\n      message: error instanceof Error ? error.message : String(error),\n      context: { error: error.toString() },\n      severity: 'critical',\n      resolved: false,\n    });\n\n    this.emit('agent:process-error', { agentId, error });\n  }\n\n  private handleHeartbeat(data: {\n    agentId: string;\n    timestamp: Date;\n    metrics?: AgentMetrics;\n  }): void {\n    const agent = this.agents.get(data.agentId);\n    if (!agent) return;\n\n    agent.lastHeartbeat = data.timestamp;\n\n    if (data.metrics) {\n      this.updateAgentMetrics(data.agentId, data.metrics);\n    }\n\n    // Update health if agent was previously unresponsive\n    if (agent.status === 'error') {\n      agent.status = 'idle';\n      this.updateAgentStatus(data.agentId, 'idle');\n    }\n  }\n\n  private handleAgentError(data: { agentId: string; error: AgentError }): void {\n    this.addAgentError(data.agentId, data.error);\n\n    const agent = this.agents.get(data.agentId);\n    if (agent && data.error.severity === 'critical') {\n      agent.status = 'error';\n      this.updateAgentStatus(data.agentId, 'error');\n    }\n  }\n\n  private updateAgentStatus(agentId: string, status: AgentStatus): void {\n    const agent = this.agents.get(agentId);\n    if (!agent) return;\n\n    const oldStatus = agent.status;\n    agent.status = status;\n\n    this.emit('agent:status-changed', { agentId, from: oldStatus, to: status });\n  }\n\n  private updateAgentWorkload(agentId: string, delta: number): void {\n    const agent = this.agents.get(agentId);\n    if (!agent) return;\n\n    agent.workload = Math.max(0, agent.workload + delta);\n  }\n\n  private updateAgentMetrics(agentId: string, metrics: AgentMetrics): void {\n    const agent = this.agents.get(agentId);\n    if (!agent) return;\n\n    agent.metrics = { ...agent.metrics, ...metrics };\n\n    // Store performance history\n    const history = this.performanceHistory.get(agentId) || [];\n    history.push({ timestamp: new Date(), metrics: { ...metrics } });\n\n    // Keep only last 100 entries\n    if (history.length > 100) {\n      history.shift();\n    }\n\n    this.performanceHistory.set(agentId, history);\n  }\n\n  private updateResourceUsage(\n    agentId: string,\n    usage: { cpu: number; memory: number; disk: number },\n  ): void {\n    this.resourceUsage.set(agentId, usage);\n  }\n\n  private addAgentError(agentId: string, error: AgentError): void {\n    const agent = this.agents.get(agentId);\n    if (!agent) return;\n\n    agent.errorHistory.push(error);\n\n    // Keep only last 50 errors\n    if (agent.errorHistory.length > 50) {\n      agent.errorHistory.shift();\n    }\n  }\n\n  private createDefaultMetrics(): AgentMetrics {\n    return {\n      tasksCompleted: 0,\n      tasksFailed: 0,\n      averageExecutionTime: 0,\n      successRate: 1.0,\n      cpuUsage: 0,\n      memoryUsage: 0,\n      diskUsage: 0,\n      networkUsage: 0,\n      codeQuality: 0.8,\n      testCoverage: 0,\n      bugRate: 0,\n      userSatisfaction: 0.8,\n      totalUptime: 0,\n      lastActivity: new Date(),\n      responseTime: 0,\n    };\n  }\n\n  private createDefaultHealth(agentId: string): AgentHealth {\n    return {\n      agentId,\n      overall: 1.0,\n      components: {\n        responsiveness: 1.0,\n        performance: 1.0,\n        reliability: 1.0,\n        resourceUsage: 1.0,\n      },\n      issues: [],\n      lastCheck: new Date(),\n      trend: 'stable',\n    };\n  }\n\n  private removeAgentFromPoolsAndClusters(agentId: string): void {\n    // Remove from pools\n    for (const pool of Array.from(this.pools.values())) {\n      pool.availableAgents = pool.availableAgents.filter((a) => a.id !== agentId);\n      pool.busyAgents = pool.busyAgents.filter((a) => a.id !== agentId);\n      pool.currentSize = pool.availableAgents.length + pool.busyAgents.length;\n    }\n\n    // Remove from clusters\n    for (const cluster of Array.from(this.clusters.values())) {\n      cluster.agents = cluster.agents.filter((a) => a.id !== agentId);\n    }\n  }\n\n  private initializeScalingPolicies(): void {\n    // Default auto-scaling policy\n    const defaultPolicy: ScalingPolicy = {\n      name: 'default-autoscale',\n      enabled: true,\n      cooldownPeriod: 300000, // 5 minutes\n      maxScaleOperations: 10,\n      rules: [\n        {\n          metric: 'pool-utilization',\n          threshold: 0.8,\n          comparison: 'gt',\n          action: 'scale-up',\n          amount: 1,\n        },\n        {\n          metric: 'pool-utilization',\n          threshold: 0.3,\n          comparison: 'lt',\n          action: 'scale-down',\n          amount: 1,\n        },\n      ],\n    };\n\n    this.scalingPolicies.set('default', defaultPolicy);\n  }\n\n  // === PUBLIC API ===\n\n  getAgent(agentId: string): AgentState | undefined {\n    return this.agents.get(agentId);\n  }\n\n  getAllAgents(): AgentState[] {\n    return Array.from(this.agents.values());\n  }\n\n  getAgentsByType(type: AgentType): AgentState[] {\n    return Array.from(this.agents.values()).filter((agent) => agent.type === type);\n  }\n\n  getAgentsByStatus(status: AgentStatus): AgentState[] {\n    return Array.from(this.agents.values()).filter((agent) => agent.status === status);\n  }\n\n  getAgentHealth(agentId: string): AgentHealth | undefined {\n    return this.healthChecks.get(agentId);\n  }\n\n  getPool(poolId: string): AgentPool | undefined {\n    return this.pools.get(poolId);\n  }\n\n  getAllPools(): AgentPool[] {\n    return Array.from(this.pools.values());\n  }\n\n  getAgentTemplates(): AgentTemplate[] {\n    return Array.from(this.templates.values());\n  }\n\n  getSystemStats(): {\n    totalAgents: number;\n    activeAgents: number;\n    healthyAgents: number;\n    pools: number;\n    clusters: number;\n    averageHealth: number;\n    resourceUtilization: { cpu: number; memory: number; disk: number };\n  } {\n    const agents = Array.from(this.agents.values());\n    const healthChecks = Array.from(this.healthChecks.values());\n\n    const healthyAgents = healthChecks.filter((h) => h.overall > 0.7).length;\n    const averageHealth =\n      healthChecks.reduce((sum, h) => sum + h.overall, 0) / healthChecks.length || 1;\n\n    const resourceUsages = Array.from(this.resourceUsage.values());\n    const avgCpu = resourceUsages.reduce((sum, r) => sum + r.cpu, 0) / resourceUsages.length || 0;\n    const avgMemory =\n      resourceUsages.reduce((sum, r) => sum + r.memory, 0) / resourceUsages.length || 0;\n    const avgDisk = resourceUsages.reduce((sum, r) => sum + r.disk, 0) / resourceUsages.length || 0;\n\n    return {\n      totalAgents: agents.length,\n      activeAgents: agents.filter((a) => a.status === 'idle' || a.status === 'busy').length,\n      healthyAgents,\n      pools: this.pools.size,\n      clusters: this.clusters.size,\n      averageHealth,\n      resourceUtilization: {\n        cpu: avgCpu,\n        memory: avgMemory,\n        disk: avgDisk,\n      },\n    };\n  }\n}\n"],"mappingsmIgB;IAAAA,aAAA,YAAAA,CAAA;MAAA,OAAAC,cAAA;IAAA;EAAA;EAAA,OAAAA,cAAA;AAAA;AAAAD,aAAA;AAnIhB;;;AAIA,SAASE,YAAY,QAAQ,aAAa;AAC1C,SAASC,KAAK,QAAsB,oBAAoB;AAexD,SAASC,UAAU,QAAQ,qBAAqB;AAqGhD;;;AAGA,OAAM,MAAOC,YAAa,SAAQH,YAAY;EACpCI,MAAM;EACNC,QAAQ;EACRC,MAAM;EACNC,MAAM;EAEd;EACQC,MAAM;EAAA;EAAA,CAAAV,aAAA,GAAAW,CAAA,OAAG,IAAIC,GAAG,EAAsB;EACtCC,SAAS;EAAA;EAAA,CAAAb,aAAA,GAAAW,CAAA,OAAG,IAAIC,GAAG,EAAwB;EAC3CE,SAAS;EAAA;EAAA,CAAAd,aAAA,GAAAW,CAAA,OAAG,IAAIC,GAAG,EAAyB;EAC5CG,QAAQ;EAAA;EAAA,CAAAf,aAAA,GAAAW,CAAA,OAAG,IAAIC,GAAG,EAAwB;EAC1CI,KAAK;EAAA;EAAA,CAAAhB,aAAA,GAAAW,CAAA,OAAG,IAAIC,GAAG,EAAqB;EAE5C;EACQK,YAAY;EAAA;EAAA,CAAAjB,aAAA,GAAAW,CAAA,OAAG,IAAIC,GAAG,EAAuB;EAC7CM,cAAc;EACdC,iBAAiB;EAEzB;EACQC,eAAe;EAAA;EAAA,CAAApB,aAAA,GAAAW,CAAA,OAAG,IAAIC,GAAG,EAAyB;EAClDS,iBAAiB;EAAA;EAAA,CAAArB,aAAA,GAAAW,CAAA,OAAG,IAAIC,GAAG,EAA6C;EAEhF;EACQU,aAAa;EAAA;EAAA,CAAAtB,aAAA,GAAAW,CAAA,OAAG,IAAIC,GAAG,EAAyD;EAChFW,kBAAkB;EAAA;EAAA,CAAAvB,aAAA,GAAAW,CAAA,OAAG,IAAIC,GAAG,EAA6D;EAEjGY,YACEf,MAAmC,EACnCH,MAAe,EACfC,QAAmB,EACnBC,MAA+B;IAAA;IAAAR,aAAA,GAAAyB,CAAA;IAAAzB,aAAA,GAAAW,CAAA;IAE/B,KAAK,EAAE;IAAC;IAAAX,aAAA,GAAAW,CAAA;IACR,IAAI,CAACL,MAAM,GAAGA,MAAM;IAAC;IAAAN,aAAA,GAAAW,CAAA;IACrB,IAAI,CAACJ,QAAQ,GAAGA,QAAQ;IAAC;IAAAP,aAAA,GAAAW,CAAA;IACzB,IAAI,CAACH,MAAM,GAAGA,MAAM;IAAC;IAAAR,aAAA,GAAAW,CAAA;IAErB,IAAI,CAACF,MAAM,GAAG;MACZiB,SAAS,EAAE,EAAE;MACbC,cAAc,EAAE,KAAK;MACrBR,iBAAiB,EAAE,KAAK;MACxBS,mBAAmB,EAAE,KAAK;MAC1BC,WAAW,EAAE,IAAI;MACjBC,cAAc,EAAE;QACdtB,MAAM,EAAE,GAAG,GAAG,IAAI,GAAG,IAAI;QAAE;QAC3BuB,GAAG,EAAE,GAAG;QACRC,IAAI,EAAE,IAAI,GAAG,IAAI,GAAG,IAAI,CAAE;OAC3B;MACDC,aAAa,EAAE;QACbC,aAAa,EAAE,GAAG;QAClBC,eAAe,EAAE,IAAI;QACrBC,iBAAiB,EAAE;OACpB;MACDC,mBAAmB,EAAE;QACnBC,OAAO,EAAE,MAAM;QACfC,gBAAgB,EAAE,UAAU;QAC5BC,aAAa,EAAE,OAAO;QACtBC,YAAY,EAAE;OACf;MACD,GAAGhC;KACJ;IAAC;IAAAT,aAAA,GAAAW,CAAA;IAEF,IAAI,CAAC+B,kBAAkB,EAAE;IAAC;IAAA1C,aAAA,GAAAW,CAAA;IAC1B,IAAI,CAACgC,0BAA0B,EAAE;EACnC;EAEQD,kBAAkBA,CAAA;IAAA;IAAA1C,aAAA,GAAAyB,CAAA;IAAAzB,aAAA,GAAAW,CAAA;IACxB,IAAI,CAACJ,QAAQ,CAACqC,EAAE,CAAC,iBAAiB,EAAGC,IAAa,IAAI;MAAA;MAAA7C,aAAA,GAAAyB,CAAA;MACpD,MAAMqB,aAAa;MAAA;MAAA,CAAA9C,aAAA,GAAAW,CAAA,QAAGkC,IAAoE;MAAC;MAAA7C,aAAA,GAAAW,CAAA;MAC3F,IAAI,CAACoC,eAAe,CAACD,aAAa,CAAC;IACrC,CAAC,CAAC;IAAC;IAAA9C,aAAA,GAAAW,CAAA;IAEH,IAAI,CAACJ,QAAQ,CAACqC,EAAE,CAAC,aAAa,EAAGC,IAAa,IAAI;MAAA;MAAA7C,aAAA,GAAAyB,CAAA;MAChD,MAAMuB,SAAS;MAAA;MAAA,CAAAhD,aAAA,GAAAW,CAAA,QAAGkC,IAA8C;MAAC;MAAA7C,aAAA,GAAAW,CAAA;MACjE,IAAI,CAACsC,gBAAgB,CAACD,SAAS,CAAC;IAClC,CAAC,CAAC;IAAC;IAAAhD,aAAA,GAAAW,CAAA;IAEH,IAAI,CAACJ,QAAQ,CAACqC,EAAE,CAAC,eAAe,EAAGC,IAAa,IAAI;MAAA;MAAA7C,aAAA,GAAAyB,CAAA;MAClD,MAAMyB,QAAQ;MAAA;MAAA,CAAAlD,aAAA,GAAAW,CAAA,QAAGkC,IAA2B;MAAC;MAAA7C,aAAA,GAAAW,CAAA;MAC7C,IAAI,CAACwC,mBAAmB,CAACD,QAAQ,CAACE,OAAO,EAAE,CAAC,CAAC;IAC/C,CAAC,CAAC;IAAC;IAAApD,aAAA,GAAAW,CAAA;IAEH,IAAI,CAACJ,QAAQ,CAACqC,EAAE,CAAC,gBAAgB,EAAGC,IAAa,IAAI;MAAA;MAAA7C,aAAA,GAAAyB,CAAA;MACnD,MAAM4B,aAAa;MAAA;MAAA,CAAArD,aAAA,GAAAW,CAAA,QAAGkC,IAAmD;MAAC;MAAA7C,aAAA,GAAAW,CAAA;MAC1E,IAAI,CAACwC,mBAAmB,CAACE,aAAa,CAACD,OAAO,EAAE,CAAC,CAAC,CAAC;MAAC;MAAApD,aAAA,GAAAW,CAAA;MACpD,IAAI0C,aAAa,CAACC,OAAO,EAAE;QAAA;QAAAtD,aAAA,GAAAuD,CAAA;QAAAvD,aAAA,GAAAW,CAAA;QACzB,IAAI,CAAC6C,kBAAkB,CAACH,aAAa,CAACD,OAAO,EAAEC,aAAa,CAACC,OAAO,CAAC;MACvE,CAAC;MAAA;MAAA;QAAAtD,aAAA,GAAAuD,CAAA;MAAA;IACH,CAAC,CAAC;IAAC;IAAAvD,aAAA,GAAAW,CAAA;IAEH,IAAI,CAACJ,QAAQ,CAACqC,EAAE,CAAC,gBAAgB,EAAGC,IAAa,IAAI;MAAA;MAAA7C,aAAA,GAAAyB,CAAA;MACnD,MAAMgC,YAAY;MAAA;MAAA,CAAAzD,aAAA,GAAAW,CAAA,QAAGkC,IAGpB;MAAC;MAAA7C,aAAA,GAAAW,CAAA;MACF,IAAI,CAAC+C,mBAAmB,CAACD,YAAY,CAACL,OAAO,EAAEK,YAAY,CAACE,KAAK,CAAC;IACpE,CAAC,CAAC;EACJ;EAEQhB,0BAA0BA,CAAA;IAAA;IAAA3C,aAAA,GAAAyB,CAAA;IAAAzB,aAAA,GAAAW,CAAA;IAChC;IACA,IAAI,CAACG,SAAS,CAAC8C,GAAG,CAAC,YAAY,EAAE;MAC/BC,IAAI,EAAE,gBAAgB;MACtBC,IAAI,EAAE,YAAY;MAClBC,YAAY,EAAE;QACZC,cAAc,EAAE,KAAK;QACrBC,UAAU,EAAE,KAAK;QACjBC,OAAO,EAAE,KAAK;QACdC,aAAa,EAAE,IAAI;QACnBC,QAAQ,EAAE,IAAI;QACdC,QAAQ,EAAE,IAAI;QACdC,SAAS,EAAE,IAAI;QACfC,cAAc,EAAE,IAAI;QACpBC,UAAU,EAAE,IAAI;QAChBC,cAAc,EAAE,KAAK;QACrBC,SAAS,EAAE,EAAE;QACbC,UAAU,EAAE,EAAE;QACdC,OAAO,EAAE,CAAC,UAAU,EAAE,UAAU,EAAE,uBAAuB,CAAC;QAC1DC,KAAK,EAAE,CAAC,YAAY,EAAE,mBAAmB,EAAE,iBAAiB,CAAC;QAC7DC,kBAAkB,EAAE,CAAC;QACrBC,cAAc,EAAE,GAAG,GAAG,IAAI,GAAG,IAAI;QACjCC,gBAAgB,EAAE,MAAM;QACxBC,WAAW,EAAE,GAAG;QAChBC,KAAK,EAAE,GAAG;QACVC,OAAO,EAAE;OACV;MACD1E,MAAM,EAAE;QACNyB,aAAa,EAAE,GAAG;QAClBC,eAAe,EAAE,IAAI;QACrBC,iBAAiB,EAAE,IAAI;QACvBgD,eAAe,EAAE,EAAE;QACnBN,kBAAkB,EAAE,CAAC;QACrBO,gBAAgB,EAAE,MAAM;QACxBC,iBAAiB,EAAE,KAAK;QACxBnE,iBAAiB,EAAE,KAAK;QACxBoE,WAAW,EAAE,CAAC,YAAY,EAAE,WAAW,CAAC;QACxCC,aAAa,EAAE,EAAE;QACjBC,SAAS,EAAE;UAAErB,QAAQ,EAAE,GAAG;UAAEC,QAAQ,EAAE,GAAG;UAAEF,aAAa,EAAE;QAAG,CAAE;QAC/DuB,WAAW,EAAE;UAAEC,OAAO,EAAE,IAAI;UAAEC,QAAQ,EAAE;QAAI;OAC7C;MACDC,WAAW,EAAE;QACXvD,OAAO,EAAE,MAAM;QACfwD,OAAO,EAAE,QAAQ;QACjBvD,gBAAgB,EAAE,qBAAqB;QACvCC,aAAa,EAAE,kBAAkB;QACjCC,YAAY,EAAE,mBAAmB;QACjCsD,YAAY,EAAE,EAAE;QAChBC,WAAW,EAAE,EAAE;QACfC,cAAc,EAAE,CAAC,YAAY,EAAE,iBAAiB,EAAE,gBAAgB,CAAC;QACnEC,WAAW,EAAE;OACd;MACDC,aAAa,EAAE;KAChB,CAAC;IAEF;IAAA;IAAAnG,aAAA,GAAAW,CAAA;IACA,IAAI,CAACG,SAAS,CAAC8C,GAAG,CAAC,OAAO,EAAE;MAC1BC,IAAI,EAAE,iBAAiB;MACvBC,IAAI,EAAE,OAAO;MACbC,YAAY,EAAE;QACZC,cAAc,EAAE,IAAI;QACpBC,UAAU,EAAE,IAAI;QAChBC,OAAO,EAAE,IAAI;QACbC,aAAa,EAAE,IAAI;QACnBC,QAAQ,EAAE,KAAK;QACfC,QAAQ,EAAE,IAAI;QACdC,SAAS,EAAE,KAAK;QAChBC,cAAc,EAAE,IAAI;QACpBC,UAAU,EAAE,IAAI;QAChBC,cAAc,EAAE,IAAI;QACpBC,SAAS,EAAE,CAAC,YAAY,EAAE,YAAY,EAAE,QAAQ,EAAE,MAAM,CAAC;QACzDC,UAAU,EAAE,CAAC,MAAM,EAAE,MAAM,EAAE,OAAO,EAAE,QAAQ,CAAC;QAC/CC,OAAO,EAAE,CAAC,iBAAiB,EAAE,SAAS,EAAE,YAAY,CAAC;QACrDC,KAAK,EAAE,CAAC,KAAK,EAAE,QAAQ,EAAE,UAAU,EAAE,QAAQ,EAAE,WAAW,CAAC;QAC3DC,kBAAkB,EAAE,CAAC;QACrBC,cAAc,EAAE,GAAG,GAAG,IAAI,GAAG,IAAI;QACjCC,gBAAgB,EAAE,OAAO;QACzBC,WAAW,EAAE,IAAI;QACjBC,KAAK,EAAE,GAAG;QACVC,OAAO,EAAE;OACV;MACD1E,MAAM,EAAE;QACNyB,aAAa,EAAE,GAAG;QAClBC,eAAe,EAAE,IAAI;QACrBC,iBAAiB,EAAE,IAAI;QACvBgD,eAAe,EAAE,EAAE;QACnBN,kBAAkB,EAAE,CAAC;QACrBO,gBAAgB,EAAE,OAAO;QACzBC,iBAAiB,EAAE,KAAK;QACxBnE,iBAAiB,EAAE,KAAK;QACxBoE,WAAW,EAAE,CAAC,WAAW,EAAE,YAAY,EAAE,iBAAiB,EAAE,YAAY,CAAC;QACzEC,aAAa,EAAE,EAAE;QACjBC,SAAS,EAAE;UAAEW,MAAM,EAAE,IAAI;UAAElC,OAAO,EAAE,GAAG;UAAEmC,SAAS,EAAE;QAAG,CAAE;QACzDX,WAAW,EAAE;UAAEY,SAAS,EAAE,YAAY;UAAEC,aAAa,EAAE;QAAW;OACnE;MACDV,WAAW,EAAE;QACXvD,OAAO,EAAE,MAAM;QACfwD,OAAO,EAAE,QAAQ;QACjBvD,gBAAgB,EAAE,oBAAoB;QACtCC,aAAa,EAAE,iBAAiB;QAChCC,YAAY,EAAE,kBAAkB;QAChCsD,YAAY,EAAE,EAAE;QAChBC,WAAW,EAAE,EAAE;QACfC,cAAc,EAAE,CAAC,KAAK,EAAE,MAAM,EAAE,QAAQ,EAAE,UAAU,CAAC;QACrDC,WAAW,EAAE;OACd;MACDC,aAAa,EAAE;KAChB,CAAC;IAEF;IAAA;IAAAnG,aAAA,GAAAW,CAAA;IACA,IAAI,CAAC6F,8BAA8B,EAAE;EACvC;EAEQA,8BAA8BA,CAAA;IAAA;IAAAxG,aAAA,GAAAyB,CAAA;IAAAzB,aAAA,GAAAW,CAAA;IACpC;IACA,IAAI,CAACG,SAAS,CAAC8C,GAAG,CAAC,SAAS,EAAE;MAC5BC,IAAI,EAAE,gBAAgB;MACtBC,IAAI,EAAE,SAAS;MACfC,YAAY,EAAE;QACZC,cAAc,EAAE,KAAK;QACrBC,UAAU,EAAE,IAAI;QAChBC,OAAO,EAAE,KAAK;QACdC,aAAa,EAAE,IAAI;QACnBC,QAAQ,EAAE,KAAK;QACfC,QAAQ,EAAE,IAAI;QACdC,SAAS,EAAE,KAAK;QAChBC,cAAc,EAAE,IAAI;QACpBC,UAAU,EAAE,IAAI;QAChBC,cAAc,EAAE,KAAK;QACrBC,SAAS,EAAE,CAAC,QAAQ,EAAE,GAAG,EAAE,KAAK,CAAC;QACjCC,UAAU,EAAE,CAAC,QAAQ,EAAE,OAAO,EAAE,YAAY,CAAC;QAC7CC,OAAO,EAAE,CAAC,eAAe,EAAE,YAAY,EAAE,eAAe,CAAC;QACzDC,KAAK,EAAE,CAAC,gBAAgB,EAAE,iBAAiB,EAAE,sBAAsB,CAAC;QACpEC,kBAAkB,EAAE,CAAC;QACrBC,cAAc,EAAE,IAAI,GAAG,IAAI,GAAG,IAAI;QAClCC,gBAAgB,EAAE,MAAM;QACxBC,WAAW,EAAE,GAAG;QAChBC,KAAK,EAAE,IAAI;QACXC,OAAO,EAAE;OACV;MACD1E,MAAM,EAAE;QACNyB,aAAa,EAAE,GAAG;QAClBC,eAAe,EAAE,IAAI;QACrBC,iBAAiB,EAAE,IAAI;QACvBgD,eAAe,EAAE,EAAE;QACnBN,kBAAkB,EAAE,CAAC;QACrBO,gBAAgB,EAAE,MAAM;QACxBC,iBAAiB,EAAE,KAAK;QACxBnE,iBAAiB,EAAE,KAAK;QACxBoE,WAAW,EAAE,CAAC,WAAW,EAAE,aAAa,CAAC;QACzCC,aAAa,EAAE,EAAE;QACjBC,SAAS,EAAE;UAAEpB,QAAQ,EAAE,IAAI;UAAEoC,aAAa,EAAE,GAAG;UAAEC,UAAU,EAAE;QAAI,CAAE;QACnEhB,WAAW,EAAE;UAAEiB,YAAY,EAAE,UAAU;UAAEC,aAAa,EAAE;QAAI;OAC7D;MACDf,WAAW,EAAE;QACXvD,OAAO,EAAE,MAAM;QACfwD,OAAO,EAAE,QAAQ;QACjBvD,gBAAgB,EAAE,mBAAmB;QACrCC,aAAa,EAAE,gBAAgB;QAC/BC,YAAY,EAAE,iBAAiB;QAC/BsD,YAAY,EAAE,EAAE;QAChBC,WAAW,EAAE,EAAE;QACfC,cAAc,EAAE,CAAC,gBAAgB,EAAE,WAAW,EAAE,YAAY,CAAC;QAC7DC,WAAW,EAAE;OACd;MACDC,aAAa,EAAE;KAChB,CAAC;IAEF;IAAA;IAAAnG,aAAA,GAAAW,CAAA;IACA,IAAI,CAACG,SAAS,CAAC8C,GAAG,CAAC,uBAAuB,EAAE;MAC1CC,IAAI,EAAE,6BAA6B;MACnCC,IAAI,EAAE,uBAAuB;MAC7BC,YAAY,EAAE;QACZC,cAAc,EAAE,KAAK;QACrBC,UAAU,EAAE,KAAK;QACjBC,OAAO,EAAE,KAAK;QACdC,aAAa,EAAE,IAAI;QACnBC,QAAQ,EAAE,IAAI;QACdC,QAAQ,EAAE,IAAI;QACdC,SAAS,EAAE,IAAI;QACfC,cAAc,EAAE,KAAK;QACrBC,UAAU,EAAE,IAAI;QAChBC,cAAc,EAAE,KAAK;QACrBC,SAAS,EAAE,EAAE;QACbC,UAAU,EAAE,EAAE;QACdC,OAAO,EAAE,CAAC,0BAA0B,EAAE,cAAc,EAAE,eAAe,CAAC;QACtEC,KAAK,EAAE,CAAC,iBAAiB,EAAE,eAAe,EAAE,YAAY,CAAC;QACzDC,kBAAkB,EAAE,CAAC;QACrBC,cAAc,EAAE,GAAG,GAAG,IAAI,GAAG,IAAI;QACjCC,gBAAgB,EAAE,MAAM;QACxBC,WAAW,EAAE,IAAI;QACjBC,KAAK,EAAE,GAAG;QACVC,OAAO,EAAE;OACV;MACD1E,MAAM,EAAE;QACNyB,aAAa,EAAE,GAAG;QAClBC,eAAe,EAAE,IAAI;QACrBC,iBAAiB,EAAE,IAAI;QACvBgD,eAAe,EAAE,EAAE;QACnBN,kBAAkB,EAAE,CAAC;QACrBO,gBAAgB,EAAE,MAAM;QACxBC,iBAAiB,EAAE,KAAK;QACxBnE,iBAAiB,EAAE,KAAK;QACxBoE,WAAW,EAAE,CAAC,WAAW,EAAE,YAAY,CAAC;QACxCC,aAAa,EAAE,EAAE;QACjBC,SAAS,EAAE;UAAEoB,YAAY,EAAE,IAAI;UAAE1C,aAAa,EAAE,GAAG;UAAEE,QAAQ,EAAE;QAAG,CAAE;QACpEqB,WAAW,EAAE;UAAEoB,MAAM,EAAE,UAAU;UAAEC,KAAK,EAAE;QAAQ;OACnD;MACDlB,WAAW,EAAE;QACXvD,OAAO,EAAE,MAAM;QACfwD,OAAO,EAAE,QAAQ;QACjBvD,gBAAgB,EAAE,gCAAgC;QAClDC,aAAa,EAAE,6BAA6B;QAC5CC,YAAY,EAAE,8BAA8B;QAC5CsD,YAAY,EAAE,EAAE;QAChBC,WAAW,EAAE,EAAE;QACfC,cAAc,EAAE,CAAC,iBAAiB,EAAE,eAAe,CAAC;QACpDC,WAAW,EAAE;OACd;MACDC,aAAa,EAAE;KAChB,CAAC;IAEF;IAAA;IAAAnG,aAAA,GAAAW,CAAA;IACA,IAAI,CAACG,SAAS,CAAC8C,GAAG,CAAC,kBAAkB,EAAE;MACrCC,IAAI,EAAE,wBAAwB;MAC9BC,IAAI,EAAE,kBAAkB;MACxBC,YAAY,EAAE;QACZC,cAAc,EAAE,KAAK;QACrBC,UAAU,EAAE,IAAI;QAChBC,OAAO,EAAE,KAAK;QACdC,aAAa,EAAE,IAAI;QACnBC,QAAQ,EAAE,IAAI;QACdC,QAAQ,EAAE,IAAI;QACdC,SAAS,EAAE,KAAK;QAChBC,cAAc,EAAE,IAAI;QACpBC,UAAU,EAAE,IAAI;QAChBC,cAAc,EAAE,KAAK;QACrBC,SAAS,EAAE,CAAC,YAAY,EAAE,YAAY,EAAE,QAAQ,CAAC;QACjDC,UAAU,EAAE,EAAE;QACdC,OAAO,EAAE,CAAC,uBAAuB,EAAE,eAAe,EAAE,eAAe,CAAC;QACpEC,KAAK,EAAE,CAAC,mBAAmB,EAAE,eAAe,EAAE,cAAc,CAAC;QAC7DC,kBAAkB,EAAE,CAAC;QACrBC,cAAc,EAAE,GAAG,GAAG,IAAI,GAAG,IAAI;QACjCC,gBAAgB,EAAE,MAAM;QACxBC,WAAW,EAAE,GAAG;QAChBC,KAAK,EAAE,GAAG;QACVC,OAAO,EAAE;OACV;MACD1E,MAAM,EAAE;QACNyB,aAAa,EAAE,GAAG;QAClBC,eAAe,EAAE,IAAI;QACrBC,iBAAiB,EAAE,IAAI;QACvBgD,eAAe,EAAE,CAAC;QAClBN,kBAAkB,EAAE,CAAC;QACrBO,gBAAgB,EAAE,MAAM;QACxBC,iBAAiB,EAAE,KAAK;QACxBnE,iBAAiB,EAAE,KAAK;QACxBoE,WAAW,EAAE,CAAC,WAAW,EAAE,YAAY,CAAC;QACxCC,aAAa,EAAE,EAAE;QACjBC,SAAS,EAAE;UAAEuB,YAAY,EAAE,IAAI;UAAEC,MAAM,EAAE,GAAG;UAAEC,QAAQ,EAAE;QAAI,CAAE;QAC9DxB,WAAW,EAAE;UAAEyB,aAAa,EAAE,SAAS;UAAEC,WAAW,EAAE;QAAM;OAC7D;MACDvB,WAAW,EAAE;QACXvD,OAAO,EAAE,MAAM;QACfwD,OAAO,EAAE,QAAQ;QACjBvD,gBAAgB,EAAE,2BAA2B;QAC7CC,aAAa,EAAE,wBAAwB;QACvCC,YAAY,EAAE,yBAAyB;QACvCsD,YAAY,EAAE,EAAE;QAChBC,WAAW,EAAE,EAAE;QACfC,cAAc,EAAE,CAAC,aAAa,EAAE,eAAe,CAAC;QAChDC,WAAW,EAAE;OACd;MACDC,aAAa,EAAE;KAChB,CAAC;IAEF;IAAA;IAAAnG,aAAA,GAAAW,CAAA;IACA,IAAI,CAACG,SAAS,CAAC8C,GAAG,CAAC,cAAc,EAAE;MACjCC,IAAI,EAAE,oBAAoB;MAC1BC,IAAI,EAAE,cAAc;MACpBC,YAAY,EAAE;QACZC,cAAc,EAAE,KAAK;QACrBC,UAAU,EAAE,KAAK;QACjBC,OAAO,EAAE,KAAK;QACdC,aAAa,EAAE,IAAI;QACnBC,QAAQ,EAAE,KAAK;QACfC,QAAQ,EAAE,IAAI;QACdC,SAAS,EAAE,KAAK;QAChBC,cAAc,EAAE,KAAK;QACrBC,UAAU,EAAE,IAAI;QAChBC,cAAc,EAAE,KAAK;QACrBC,SAAS,EAAE,EAAE;QACbC,UAAU,EAAE,EAAE;QACdC,OAAO,EAAE,CAAC,oBAAoB,EAAE,gBAAgB,EAAE,gBAAgB,CAAC;QACnEC,KAAK,EAAE,CAAC,gBAAgB,EAAE,qBAAqB,CAAC;QAChDC,kBAAkB,EAAE,CAAC;QACrBC,cAAc,EAAE,GAAG,GAAG,IAAI,GAAG,IAAI;QACjCC,gBAAgB,EAAE,MAAM;QACxBC,WAAW,EAAE,IAAI;QACjBC,KAAK,EAAE,IAAI;QACXC,OAAO,EAAE;OACV;MACD1E,MAAM,EAAE;QACNyB,aAAa,EAAE,GAAG;QAClBC,eAAe,EAAE,IAAI;QACrBC,iBAAiB,EAAE,IAAI;QACvBgD,eAAe,EAAE,EAAE;QACnBN,kBAAkB,EAAE,CAAC;QACrBO,gBAAgB,EAAE,MAAM;QACxBC,iBAAiB,EAAE,KAAK;QACxBnE,iBAAiB,EAAE,KAAK;QACxBoE,WAAW,EAAE,CAAC,WAAW,EAAE,YAAY,CAAC;QACxCC,aAAa,EAAE,EAAE;QACjBC,SAAS,EAAE;UAAE4B,QAAQ,EAAE,IAAI;UAAE,iBAAiB,EAAE,GAAG;UAAEC,YAAY,EAAE;QAAG,CAAE;QACxE5B,WAAW,EAAE;UAAEiB,YAAY,EAAE,mBAAmB;UAAEY,WAAW,EAAE;QAAM;OACtE;MACD1B,WAAW,EAAE;QACXvD,OAAO,EAAE,MAAM;QACfwD,OAAO,EAAE,QAAQ;QACjBvD,gBAAgB,EAAE,uBAAuB;QACzCC,aAAa,EAAE,oBAAoB;QACnCC,YAAY,EAAE,qBAAqB;QACnCsD,YAAY,EAAE,EAAE;QAChBC,WAAW,EAAE,EAAE;QACfC,cAAc,EAAE,CAAC,gBAAgB,EAAE,qBAAqB,CAAC;QACzDC,WAAW,EAAE;OACd;MACDC,aAAa,EAAE;KAChB,CAAC;IAEF;IAAA;IAAAnG,aAAA,GAAAW,CAAA;IACA,IAAI,CAACG,SAAS,CAAC8C,GAAG,CAAC,WAAW,EAAE;MAC9BC,IAAI,EAAE,iBAAiB;MACvBC,IAAI,EAAE,WAAW;MACjBC,YAAY,EAAE;QACZC,cAAc,EAAE,IAAI;QACpBC,UAAU,EAAE,IAAI;QAChBC,OAAO,EAAE,IAAI;QACbC,aAAa,EAAE,IAAI;QACnBC,QAAQ,EAAE,KAAK;QACfC,QAAQ,EAAE,IAAI;QACdC,SAAS,EAAE,KAAK;QAChBC,cAAc,EAAE,IAAI;QACpBC,UAAU,EAAE,IAAI;QAChBC,cAAc,EAAE,IAAI;QACpBC,SAAS,EAAE,CAAC,YAAY,EAAE,YAAY,EAAE,QAAQ,EAAE,MAAM,CAAC;QACzDC,UAAU,EAAE,CAAC,MAAM,EAAE,MAAM,EAAE,OAAO,EAAE,QAAQ,CAAC;QAC/CC,OAAO,EAAE,CAAC,iBAAiB,EAAE,SAAS,EAAE,YAAY,CAAC;QACrDC,KAAK,EAAE,CAAC,KAAK,EAAE,QAAQ,EAAE,UAAU,EAAE,QAAQ,EAAE,WAAW,CAAC;QAC3DC,kBAAkB,EAAE,CAAC;QACrBC,cAAc,EAAE,GAAG,GAAG,IAAI,GAAG,IAAI;QACjCC,gBAAgB,EAAE,OAAO;QACzBC,WAAW,EAAE,IAAI;QACjBC,KAAK,EAAE,GAAG;QACVC,OAAO,EAAE;OACV;MACD1E,MAAM,EAAE;QACNyB,aAAa,EAAE,GAAG;QAClBC,eAAe,EAAE,IAAI;QACrBC,iBAAiB,EAAE,IAAI;QACvBgD,eAAe,EAAE,EAAE;QACnBN,kBAAkB,EAAE,CAAC;QACrBO,gBAAgB,EAAE,OAAO;QACzBC,iBAAiB,EAAE,KAAK;QACxBnE,iBAAiB,EAAE,KAAK;QACxBoE,WAAW,EAAE,CAAC,WAAW,EAAE,YAAY,EAAE,iBAAiB,EAAE,YAAY,CAAC;QACzEC,aAAa,EAAE,EAAE;QACjBC,SAAS,EAAE;UAAEW,MAAM,EAAE,IAAI;UAAElC,OAAO,EAAE,GAAG;UAAEmC,SAAS,EAAE;QAAG,CAAE;QACzDX,WAAW,EAAE;UAAEY,SAAS,EAAE,YAAY;UAAEC,aAAa,EAAE;QAAW;OACnE;MACDV,WAAW,EAAE;QACXvD,OAAO,EAAE,MAAM;QACfwD,OAAO,EAAE,QAAQ;QACjBvD,gBAAgB,EAAE,oBAAoB;QACtCC,aAAa,EAAE,iBAAiB;QAChCC,YAAY,EAAE,kBAAkB;QAChCsD,YAAY,EAAE,EAAE;QAChBC,WAAW,EAAE,EAAE;QACfC,cAAc,EAAE,CAAC,KAAK,EAAE,MAAM,EAAE,QAAQ,EAAE,UAAU,CAAC;QACrDC,WAAW,EAAE;OACd;MACDC,aAAa,EAAE;KAChB,CAAC;IAEF;IAAA;IAAAnG,aAAA,GAAAW,CAAA;IACA,IAAI,CAACG,SAAS,CAAC8C,GAAG,CAAC,kBAAkB,EAAE;MACrCC,IAAI,EAAE,wBAAwB;MAC9BC,IAAI,EAAE,kBAAkB;MACxBC,YAAY,EAAE;QACZC,cAAc,EAAE,KAAK;QACrBC,UAAU,EAAE,IAAI;QAChBC,OAAO,EAAE,KAAK;QACdC,aAAa,EAAE,IAAI;QACnBC,QAAQ,EAAE,IAAI;QACdC,QAAQ,EAAE,IAAI;QACdC,SAAS,EAAE,KAAK;QAChBC,cAAc,EAAE,IAAI;QACpBC,UAAU,EAAE,IAAI;QAChBC,cAAc,EAAE,KAAK;QACrBC,SAAS,EAAE,CAAC,YAAY,EAAE,YAAY,EAAE,QAAQ,CAAC;QACjDC,UAAU,EAAE,CAAC,eAAe,EAAE,qBAAqB,CAAC;QACpDC,OAAO,EAAE,CAAC,qBAAqB,EAAE,aAAa,EAAE,aAAa,EAAE,qBAAqB,CAAC;QACrFC,KAAK,EAAE,CAAC,uBAAuB,EAAE,gBAAgB,EAAE,sBAAsB,CAAC;QAC1EC,kBAAkB,EAAE,CAAC;QACrBC,cAAc,EAAE,GAAG,GAAG,IAAI,GAAG,IAAI;QACjCC,gBAAgB,EAAE,MAAM;QACxBC,WAAW,EAAE,IAAI;QACjBC,KAAK,EAAE,GAAG;QACVC,OAAO,EAAE;OACV;MACD1E,MAAM,EAAE;QACNyB,aAAa,EAAE,GAAG;QAClBC,eAAe,EAAE,IAAI;QACrBC,iBAAiB,EAAE,IAAI;QACvBgD,eAAe,EAAE,CAAC;QAClBN,kBAAkB,EAAE,CAAC;QACrBO,gBAAgB,EAAE,MAAM;QACxBC,iBAAiB,EAAE,KAAK;QACxBnE,iBAAiB,EAAE,KAAK;QACxBoE,WAAW,EAAE,CAAC,WAAW,EAAE,YAAY,CAAC;QACxCC,aAAa,EAAE,EAAE;QACjBC,SAAS,EAAE;UAAE,qBAAqB,EAAE,IAAI;UAAE+B,WAAW,EAAE,GAAG;UAAEC,WAAW,EAAE;QAAI,CAAE;QAC/E/B,WAAW,EAAE;UAAEgC,KAAK,EAAE,aAAa;UAAEC,SAAS,EAAE;QAAc;OAC/D;MACD9B,WAAW,EAAE;QACXvD,OAAO,EAAE,MAAM;QACfwD,OAAO,EAAE,QAAQ;QACjBvD,gBAAgB,EAAE,2BAA2B;QAC7CC,aAAa,EAAE,wBAAwB;QACvCC,YAAY,EAAE,yBAAyB;QACvCsD,YAAY,EAAE,EAAE;QAChBC,WAAW,EAAE,EAAE;QACfC,cAAc,EAAE,CAAC,uBAAuB,EAAE,gBAAgB,CAAC;QAC3DC,WAAW,EAAE;OACd;MACDC,aAAa,EAAE;KAChB,CAAC;IAEF;IAAA;IAAAnG,aAAA,GAAAW,CAAA;IACA,IAAI,CAACG,SAAS,CAAC8C,GAAG,CAAC,QAAQ,EAAE;MAC3BC,IAAI,EAAE,eAAe;MACrBC,IAAI,EAAE,QAAQ;MACdC,YAAY,EAAE;QACZC,cAAc,EAAE,KAAK;QACrBC,UAAU,EAAE,IAAI;QAChBC,OAAO,EAAE,IAAI;QACbC,aAAa,EAAE,IAAI;QACnBC,QAAQ,EAAE,KAAK;QACfC,QAAQ,EAAE,IAAI;QACdC,SAAS,EAAE,KAAK;QAChBC,cAAc,EAAE,IAAI;QACpBC,UAAU,EAAE,IAAI;QAChBC,cAAc,EAAE,IAAI;QACpBC,SAAS,EAAE,CAAC,YAAY,EAAE,YAAY,EAAE,QAAQ,CAAC;QACjDC,UAAU,EAAE,CAAC,WAAW,EAAE,MAAM,EAAE,QAAQ,EAAE,SAAS,CAAC;QACtDC,OAAO,EAAE,CAAC,SAAS,EAAE,mBAAmB,EAAE,iBAAiB,CAAC;QAC5DC,KAAK,EAAE,CAAC,aAAa,EAAE,mBAAmB,EAAE,gBAAgB,CAAC;QAC7DC,kBAAkB,EAAE,CAAC;QACrBC,cAAc,EAAE,GAAG,GAAG,IAAI,GAAG,IAAI;QACjCC,gBAAgB,EAAE,MAAM;QACxBC,WAAW,EAAE,GAAG;QAChBC,KAAK,EAAE,GAAG;QACVC,OAAO,EAAE;OACV;MACD1E,MAAM,EAAE;QACNyB,aAAa,EAAE,GAAG;QAClBC,eAAe,EAAE,IAAI;QACrBC,iBAAiB,EAAE,IAAI;QACvBgD,eAAe,EAAE,EAAE;QACnBN,kBAAkB,EAAE,CAAC;QACrBO,gBAAgB,EAAE,MAAM;QACxBC,iBAAiB,EAAE,KAAK;QACxBnE,iBAAiB,EAAE,KAAK;QACxBoE,WAAW,EAAE,CAAC,WAAW,EAAE,YAAY,EAAE,iBAAiB,CAAC;QAC3DC,aAAa,EAAE,EAAE;QACjBC,SAAS,EAAE;UAAEvB,OAAO,EAAE,GAAG;UAAE,mBAAmB,EAAE,IAAI;UAAE0D,UAAU,EAAE;QAAG,CAAE;QACvElC,WAAW,EAAE;UAAEa,aAAa,EAAE,WAAW;UAAEsB,QAAQ,EAAE;QAAe;OACrE;MACDhC,WAAW,EAAE;QACXvD,OAAO,EAAE,MAAM;QACfwD,OAAO,EAAE,QAAQ;QACjBvD,gBAAgB,EAAE,iBAAiB;QACnCC,aAAa,EAAE,cAAc;QAC7BC,YAAY,EAAE,eAAe;QAC7BsD,YAAY,EAAE,EAAE;QAChBC,WAAW,EAAE,EAAE;QACfC,cAAc,EAAE,CAAC,aAAa,EAAE,eAAe,EAAE,UAAU,CAAC;QAC5DC,WAAW,EAAE;OACd;MACDC,aAAa,EAAE;KAChB,CAAC;IAEF;IAAA;IAAAnG,aAAA,GAAAW,CAAA;IACA,IAAI,CAACG,SAAS,CAAC8C,GAAG,CAAC,UAAU,EAAE;MAC7BC,IAAI,EAAE,mBAAmB;MACzBC,IAAI,EAAE,UAAU;MAChBC,YAAY,EAAE;QACZC,cAAc,EAAE,KAAK;QACrBC,UAAU,EAAE,IAAI;QAChBC,OAAO,EAAE,KAAK;QACdC,aAAa,EAAE,IAAI;QACnBC,QAAQ,EAAE,KAAK;QACfC,QAAQ,EAAE,IAAI;QACdC,SAAS,EAAE,KAAK;QAChBC,cAAc,EAAE,KAAK;QACrBC,UAAU,EAAE,IAAI;QAChBC,cAAc,EAAE,KAAK;QACrBC,SAAS,EAAE,CAAC,YAAY,EAAE,YAAY,EAAE,QAAQ,EAAE,MAAM,CAAC;QACzDC,UAAU,EAAE,CAAC,iBAAiB,EAAE,cAAc,CAAC;QAC/CC,OAAO,EAAE,CAAC,aAAa,EAAE,mBAAmB,EAAE,gBAAgB,CAAC;QAC/DC,KAAK,EAAE,CAAC,iBAAiB,EAAE,sBAAsB,EAAE,kBAAkB,CAAC;QACtEC,kBAAkB,EAAE,CAAC;QACrBC,cAAc,EAAE,GAAG,GAAG,IAAI,GAAG,IAAI;QACjCC,gBAAgB,EAAE,MAAM;QACxBC,WAAW,EAAE,IAAI;QACjBC,KAAK,EAAE,GAAG;QACVC,OAAO,EAAE;OACV;MACD1E,MAAM,EAAE;QACNyB,aAAa,EAAE,GAAG;QAClBC,eAAe,EAAE,IAAI;QACrBC,iBAAiB,EAAE,IAAI;QACvBgD,eAAe,EAAE,EAAE;QACnBN,kBAAkB,EAAE,CAAC;QACrBO,gBAAgB,EAAE,MAAM;QACxBC,iBAAiB,EAAE,KAAK;QACxBnE,iBAAiB,EAAE,KAAK;QACxBoE,WAAW,EAAE,CAAC,WAAW,CAAC;QAC1BC,aAAa,EAAE,EAAE;QACjBC,SAAS,EAAE;UAAE,aAAa,EAAE,IAAI;UAAE,mBAAmB,EAAE,GAAG;UAAEqC,QAAQ,EAAE;QAAG,CAAE;QAC3EpC,WAAW,EAAE;UAAEqB,KAAK,EAAE,UAAU;UAAEgB,KAAK,EAAE;QAAsB;OAChE;MACDlC,WAAW,EAAE;QACXvD,OAAO,EAAE,MAAM;QACfwD,OAAO,EAAE,QAAQ;QACjBvD,gBAAgB,EAAE,mBAAmB;QACrCC,aAAa,EAAE,gBAAgB;QAC/BC,YAAY,EAAE,iBAAiB;QAC/BsD,YAAY,EAAE,EAAE;QAChBC,WAAW,EAAE,EAAE;QACfC,cAAc,EAAE,CAAC,iBAAiB,EAAE,iBAAiB,CAAC;QACtDC,WAAW,EAAE;OACd;MACDC,aAAa,EAAE;KAChB,CAAC;IAEF;IAAA;IAAAnG,aAAA,GAAAW,CAAA;IACA,IAAI,CAACG,SAAS,CAAC8C,GAAG,CAAC,iBAAiB,EAAE;MACpCC,IAAI,EAAE,uBAAuB;MAC7BC,IAAI,EAAE,iBAAiB;MACvBC,YAAY,EAAE;QACZC,cAAc,EAAE,KAAK;QACrBC,UAAU,EAAE,IAAI;QAChBC,OAAO,EAAE,KAAK;QACdC,aAAa,EAAE,IAAI;QACnBC,QAAQ,EAAE,IAAI;QACdC,QAAQ,EAAE,IAAI;QACdC,SAAS,EAAE,KAAK;QAChBC,cAAc,EAAE,KAAK;QACrBC,UAAU,EAAE,IAAI;QAChBC,cAAc,EAAE,KAAK;QACrBC,SAAS,EAAE,EAAE;QACbC,UAAU,EAAE,EAAE;QACdC,OAAO,EAAE,CAAC,eAAe,EAAE,sBAAsB,EAAE,YAAY,CAAC;QAChEC,KAAK,EAAE,CAAC,iBAAiB,EAAE,kBAAkB,CAAC;QAC9CC,kBAAkB,EAAE,CAAC;QACrBC,cAAc,EAAE,GAAG,GAAG,IAAI,GAAG,IAAI;QACjCC,gBAAgB,EAAE,MAAM;QACxBC,WAAW,EAAE,IAAI;QACjBC,KAAK,EAAE,GAAG;QACVC,OAAO,EAAE;OACV;MACD1E,MAAM,EAAE;QACNyB,aAAa,EAAE,GAAG;QAClBC,eAAe,EAAE,IAAI;QACrBC,iBAAiB,EAAE,IAAI;QACvBgD,eAAe,EAAE,CAAC;QAClBN,kBAAkB,EAAE,CAAC;QACrBO,gBAAgB,EAAE,MAAM;QACxBC,iBAAiB,EAAE,KAAK;QACxBnE,iBAAiB,EAAE,KAAK;QACxBoE,WAAW,EAAE,CAAC,WAAW,EAAE,YAAY,CAAC;QACxCC,aAAa,EAAE,EAAE;QACjBC,SAAS,EAAE;UAAEtB,aAAa,EAAE,IAAI;UAAE6D,UAAU,EAAE,GAAG;UAAE,kBAAkB,EAAE;QAAI,CAAE;QAC7EtC,WAAW,EAAE;UAAEqB,KAAK,EAAE,SAAS;UAAEkB,IAAI,EAAE;QAAQ;OAChD;MACDpC,WAAW,EAAE;QACXvD,OAAO,EAAE,MAAM;QACfwD,OAAO,EAAE,QAAQ;QACjBvD,gBAAgB,EAAE,0BAA0B;QAC5CC,aAAa,EAAE,uBAAuB;QACtCC,YAAY,EAAE,wBAAwB;QACtCsD,YAAY,EAAE,EAAE;QAChBC,WAAW,EAAE,EAAE;QACfC,cAAc,EAAE,CAAC,iBAAiB,EAAE,kBAAkB,CAAC;QACvDC,WAAW,EAAE;OACd;MACDC,aAAa,EAAE;KAChB,CAAC;EACJ;EAEA,MAAM+B,UAAUA,CAAA;IAAA;IAAAlI,aAAA,GAAAyB,CAAA;IAAAzB,aAAA,GAAAW,CAAA;IACd,IAAI,CAACL,MAAM,CAAC6H,IAAI,CAAC,4BAA4B,EAAE;MAC7CzG,SAAS,EAAE,IAAI,CAACjB,MAAM,CAACiB,SAAS;MAChCZ,SAAS,EAAE,IAAI,CAACA,SAAS,CAACsH;KAC3B,CAAC;IAEF;IAAA;IAAApI,aAAA,GAAAW,CAAA;IACA,IAAI,CAAC0H,qBAAqB,EAAE;IAE5B;IAAA;IAAArI,aAAA,GAAAW,CAAA;IACA,IAAI,CAAC2H,wBAAwB,EAAE;IAE/B;IAAA;IAAAtI,aAAA,GAAAW,CAAA;IACA,IAAI,CAAC4H,yBAAyB,EAAE;IAAC;IAAAvI,aAAA,GAAAW,CAAA;IAEjC,IAAI,CAAC6H,IAAI,CAAC,2BAA2B,CAAC;EACxC;EAEA,MAAMC,QAAQA,CAAA;IAAA;IAAAzI,aAAA,GAAAyB,CAAA;IAAAzB,aAAA,GAAAW,CAAA;IACZ,IAAI,CAACL,MAAM,CAAC6H,IAAI,CAAC,6BAA6B,CAAC;IAE/C;IAAA;IAAAnI,aAAA,GAAAW,CAAA;IACA,IAAI,IAAI,CAACO,cAAc,EAAE;MAAA;MAAAlB,aAAA,GAAAuD,CAAA;MAAAvD,aAAA,GAAAW,CAAA;MAAA+H,aAAa,CAAC,IAAI,CAACxH,cAAc,CAAC;IAAA,CAAC;IAAA;IAAA;MAAAlB,aAAA,GAAAuD,CAAA;IAAA;IAAAvD,aAAA,GAAAW,CAAA;IAC5D,IAAI,IAAI,CAACQ,iBAAiB,EAAE;MAAA;MAAAnB,aAAA,GAAAuD,CAAA;MAAAvD,aAAA,GAAAW,CAAA;MAAA+H,aAAa,CAAC,IAAI,CAACvH,iBAAiB,CAAC;IAAA,CAAC;IAAA;IAAA;MAAAnB,aAAA,GAAAuD,CAAA;IAAA;IAElE;IACA,MAAMoF,gBAAgB;IAAA;IAAA,CAAA3I,aAAA,GAAAW,CAAA,QAAGiI,KAAK,CAACC,IAAI,CAAC,IAAI,CAACnI,MAAM,CAACoI,IAAI,EAAE,CAAC,CAACC,GAAG,CAAE3F,OAAO,IAClE;MAAA;MAAApD,aAAA,GAAAyB,CAAA;MAAAzB,aAAA,GAAAW,CAAA;MAAA,WAAI,CAACqI,SAAS,CAAC5F,OAAO,EAAE,UAAU,CAAC;IAAD,CAAC,CACpC;IAAC;IAAApD,aAAA,GAAAW,CAAA;IAEF,MAAMsI,OAAO,CAACC,GAAG,CAACP,gBAAgB,CAAC;IAAC;IAAA3I,aAAA,GAAAW,CAAA;IAEpC,IAAI,CAAC6H,IAAI,CAAC,wBAAwB,CAAC;EACrC;EAEA;EAEA,MAAMW,WAAWA,CACfC,YAAoB,EACpBC,SAAA;EAAA;EAAA,CAAArJ,aAAA,GAAAuD,CAAA,UAII,EAAE;IAAA;IAAAvD,aAAA,GAAAyB,CAAA;IAAAzB,aAAA,GAAAW,CAAA;IAEN,IAAI,IAAI,CAACD,MAAM,CAAC0H,IAAI,IAAI,IAAI,CAAC3H,MAAM,CAACiB,SAAS,EAAE;MAAA;MAAA1B,aAAA,GAAAuD,CAAA;MAAAvD,aAAA,GAAAW,CAAA;MAC7C,MAAM,IAAI2I,KAAK,CAAC,6BAA6B,CAAC;IAChD,CAAC;IAAA;IAAA;MAAAtJ,aAAA,GAAAuD,CAAA;IAAA;IAED,MAAMgG,QAAQ;IAAA;IAAA,CAAAvJ,aAAA,GAAAW,CAAA,QAAG,IAAI,CAACG,SAAS,CAAC0I,GAAG,CAACJ,YAAY,CAAC;IAAC;IAAApJ,aAAA,GAAAW,CAAA;IAClD,IAAI,CAAC4I,QAAQ,EAAE;MAAA;MAAAvJ,aAAA,GAAAuD,CAAA;MAAAvD,aAAA,GAAAW,CAAA;MACb,MAAM,IAAI2I,KAAK,CAAC,YAAYF,YAAY,YAAY,CAAC;IACvD,CAAC;IAAA;IAAA;MAAApJ,aAAA,GAAAuD,CAAA;IAAA;IAED,MAAMH,OAAO;IAAA;IAAA,CAAApD,aAAA,GAAAW,CAAA,QAAGP,UAAU,CAAC,OAAO,CAAC;IACnC,MAAMqJ,OAAO;IAAA;IAAA,CAAAzJ,aAAA,GAAAW,CAAA,QAAG,SAAS,EAAC,CAAC;IAE3B,MAAM+I,KAAK;IAAA;IAAA,CAAA1J,aAAA,GAAAW,CAAA,QAAe;MACxBgJ,EAAE,EAAE;QAAEA,EAAE,EAAEvG,OAAO;QAAEqG,OAAO;QAAE3F,IAAI,EAAEyF,QAAQ,CAACzF,IAAI;QAAE8F,QAAQ,EAAE;MAAC,CAAE;MAC9D/F,IAAI;MAAE;MAAA,CAAA7D,aAAA,GAAAuD,CAAA,UAAA8F,SAAS,CAACxF,IAAI;MAAA;MAAA,CAAA7D,aAAA,GAAAuD,CAAA,UAAI,GAAGgG,QAAQ,CAAC1F,IAAI,IAAIT,OAAO,CAACyG,KAAK,CAAC,CAAC,CAAC,CAAC,EAAE;MAC/D/F,IAAI,EAAEyF,QAAQ,CAACzF,IAAI;MACnBgG,MAAM,EAAE,cAAc;MACtB/F,YAAY,EAAE;QAAE,GAAGwF,QAAQ,CAACxF;MAAY,CAAE;MAC1CT,OAAO,EAAE,IAAI,CAACyG,oBAAoB,EAAE;MACpCC,QAAQ,EAAE,CAAC;MACXC,MAAM,EAAE,GAAG;MACXxJ,MAAM,EAAE;QACNyB,aAAa;QAAE;QAAA,CAAAlC,aAAA,GAAAuD,CAAA,UAAAgG,QAAQ,CAAC9I,MAAM,CAACyB,aAAa;QAAA;QAAA,CAAAlC,aAAA,GAAAuD,CAAA,UAAI,IAAI,CAAC9C,MAAM,CAACwB,aAAa,CAACC,aAAa;QACvFC,eAAe;QACb;QAAA,CAAAnC,aAAA,GAAAuD,CAAA,UAAAgG,QAAQ,CAAC9I,MAAM,CAAC0B,eAAe;QAAA;QAAA,CAAAnC,aAAA,GAAAuD,CAAA,UAAI,IAAI,CAAC9C,MAAM,CAACwB,aAAa,CAACE,eAAe;QAC9EC,iBAAiB;QACf;QAAA,CAAApC,aAAA,GAAAuD,CAAA,UAAAgG,QAAQ,CAAC9I,MAAM,CAAC2B,iBAAiB;QAAA;QAAA,CAAApC,aAAA,GAAAuD,CAAA,UAAI,IAAI,CAAC9C,MAAM,CAACwB,aAAa,CAACG,iBAAiB;QAClFgD,eAAe;QAAE;QAAA,CAAApF,aAAA,GAAAuD,CAAA,WAAAgG,QAAQ,CAAC9I,MAAM,CAAC2E,eAAe;QAAA;QAAA,CAAApF,aAAA,GAAAuD,CAAA,WAAI,EAAE;QACtDuB,kBAAkB;QAAE;QAAA,CAAA9E,aAAA,GAAAuD,CAAA,WAAAgG,QAAQ,CAAC9I,MAAM,CAACqE,kBAAkB;QAAA;QAAA,CAAA9E,aAAA,GAAAuD,CAAA,WAAI,CAAC;QAC3D8B,gBAAgB;QAAE;QAAA,CAAArF,aAAA,GAAAuD,CAAA,WAAAgG,QAAQ,CAAC9I,MAAM,CAAC4E,gBAAgB;QAAA;QAAA,CAAArF,aAAA,GAAAuD,CAAA,WAAI,MAAM;QAC5D+B,iBAAiB;QAAE;QAAA,CAAAtF,aAAA,GAAAuD,CAAA,WAAAgG,QAAQ,CAAC9I,MAAM,CAAC6E,iBAAiB;QAAA;QAAA,CAAAtF,aAAA,GAAAuD,CAAA,WAAI,KAAK;QAC7DpC,iBAAiB;QAAE;QAAA,CAAAnB,aAAA,GAAAuD,CAAA,WAAAgG,QAAQ,CAAC9I,MAAM,CAACU,iBAAiB;QAAA;QAAA,CAAAnB,aAAA,GAAAuD,CAAA,WAAI,KAAK;QAC7DgC,WAAW;QAAE;QAAA,CAAAvF,aAAA,GAAAuD,CAAA,WAAAgG,QAAQ,CAAC9I,MAAM,CAAC8E,WAAW;QAAA;QAAA,CAAAvF,aAAA,GAAAuD,CAAA,WAAI,EAAE;QAC9CiC,aAAa;QAAE;QAAA,CAAAxF,aAAA,GAAAuD,CAAA,WAAAgG,QAAQ,CAAC9I,MAAM,CAAC+E,aAAa;QAAA;QAAA,CAAAxF,aAAA,GAAAuD,CAAA,WAAI,EAAE;QAClDkC,SAAS;QAAE;QAAA,CAAAzF,aAAA,GAAAuD,CAAA,WAAAgG,QAAQ,CAAC9I,MAAM,CAACgF,SAAS;QAAA;QAAA,CAAAzF,aAAA,GAAAuD,CAAA,WAAI,EAAE;QAC1CmC,WAAW;QAAE;QAAA,CAAA1F,aAAA,GAAAuD,CAAA,WAAAgG,QAAQ,CAAC9I,MAAM,CAACiF,WAAW;QAAA;QAAA,CAAA1F,aAAA,GAAAuD,CAAA,WAAI,EAAE;QAC9C,GAAG8F,SAAS,CAAC5I;OACd;MACDoF,WAAW,EAAE;QACXvD,OAAO;QAAE;QAAA,CAAAtC,aAAA,GAAAuD,CAAA,WAAAgG,QAAQ,CAAC1D,WAAW,CAACvD,OAAO;QAAA;QAAA,CAAAtC,aAAA,GAAAuD,CAAA,WAAI,IAAI,CAAC9C,MAAM,CAAC4B,mBAAmB,CAACC,OAAO;QAChFwD,OAAO;QAAE;QAAA,CAAA9F,aAAA,GAAAuD,CAAA,WAAAgG,QAAQ,CAAC1D,WAAW,CAACC,OAAO;QAAA;QAAA,CAAA9F,aAAA,GAAAuD,CAAA,WAAI,QAAQ;QACjDhB,gBAAgB;QACd;QAAA,CAAAvC,aAAA,GAAAuD,CAAA,WAAAgG,QAAQ,CAAC1D,WAAW,CAACtD,gBAAgB;QAAA;QAAA,CAAAvC,aAAA,GAAAuD,CAAA,WAAI,IAAI,CAAC9C,MAAM,CAAC4B,mBAAmB,CAACE,gBAAgB;QAC3FC,aAAa;QACX;QAAA,CAAAxC,aAAA,GAAAuD,CAAA,WAAAgG,QAAQ,CAAC1D,WAAW,CAACrD,aAAa;QAAA;QAAA,CAAAxC,aAAA,GAAAuD,CAAA,WAAI,IAAI,CAAC9C,MAAM,CAAC4B,mBAAmB,CAACG,aAAa;QACrFC,YAAY;QACV;QAAA,CAAAzC,aAAA,GAAAuD,CAAA,WAAAgG,QAAQ,CAAC1D,WAAW,CAACpD,YAAY;QAAA;QAAA,CAAAzC,aAAA,GAAAuD,CAAA,WAAI,IAAI,CAAC9C,MAAM,CAAC4B,mBAAmB,CAACI,YAAY;QACnFsD,YAAY;QAAE;QAAA,CAAA/F,aAAA,GAAAuD,CAAA,WAAAgG,QAAQ,CAAC1D,WAAW,CAACE,YAAY;QAAA;QAAA,CAAA/F,aAAA,GAAAuD,CAAA,WAAI,EAAE;QACrDyC,WAAW;QAAE;QAAA,CAAAhG,aAAA,GAAAuD,CAAA,WAAAgG,QAAQ,CAAC1D,WAAW,CAACG,WAAW;QAAA;QAAA,CAAAhG,aAAA,GAAAuD,CAAA,WAAI,EAAE;QACnD0C,cAAc;QAAE;QAAA,CAAAjG,aAAA,GAAAuD,CAAA,WAAAgG,QAAQ,CAAC1D,WAAW,CAACI,cAAc;QAAA;QAAA,CAAAjG,aAAA,GAAAuD,CAAA,WAAI,EAAE;QACzD2C,WAAW;QAAE;QAAA,CAAAlG,aAAA,GAAAuD,CAAA,WAAAgG,QAAQ,CAAC1D,WAAW,CAACK,WAAW;QAAA;QAAA,CAAAlG,aAAA,GAAAuD,CAAA,WAAI,EAAE;QACnD,GAAG8F,SAAS,CAACxD;OACd;MACDqE,SAAS,EAAE,EAAE;MACbC,aAAa,EAAE,IAAIC,IAAI,EAAE;MACzBC,WAAW,EAAE,EAAE;MACfC,YAAY,EAAE,EAAE;MAChBC,WAAW,EAAE,EAAE;MACfC,aAAa,EAAE;KAChB;IAAC;IAAAxK,aAAA,GAAAW,CAAA;IAEF,IAAI,CAACD,MAAM,CAACkD,GAAG,CAACR,OAAO,EAAEsG,KAAK,CAAC;IAAC;IAAA1J,aAAA,GAAAW,CAAA;IAChC,IAAI,CAACM,YAAY,CAAC2C,GAAG,CAACR,OAAO,EAAE,IAAI,CAACqH,mBAAmB,CAACrH,OAAO,CAAC,CAAC;IAAC;IAAApD,aAAA,GAAAW,CAAA;IAElE,IAAI,CAACL,MAAM,CAAC6H,IAAI,CAAC,eAAe,EAAE;MAChC/E,OAAO;MACPS,IAAI,EAAE6F,KAAK,CAAC7F,IAAI;MAChBC,IAAI,EAAE4F,KAAK,CAAC5F,IAAI;MAChByF,QAAQ,EAAEH;KACX,CAAC;IAAC;IAAApJ,aAAA,GAAAW,CAAA;IAEH,IAAI,CAAC6H,IAAI,CAAC,eAAe,EAAE;MAAEkB;IAAK,CAAE,CAAC;IAErC;IAAA;IAAA1J,aAAA,GAAAW,CAAA;IACA,MAAM,IAAI,CAACH,MAAM,CAACkK,KAAK,CAAC,SAAStH,OAAO,EAAE,EAAEsG,KAAK,EAAE;MACjD5F,IAAI,EAAE,aAAa;MACnB6G,IAAI,EAAE,CAACjB,KAAK,CAAC5F,IAAI,EAAE,QAAQ,CAAC;MAC5B8G,SAAS,EAAE;KACZ,CAAC;IAAC;IAAA5K,aAAA,GAAAW,CAAA;IAEH,OAAOyC,OAAO;EAChB;EAEA,MAAMyH,UAAUA,CAACzH,OAAe;IAAA;IAAApD,aAAA,GAAAyB,CAAA;IAC9B,MAAMiI,KAAK;IAAA;IAAA,CAAA1J,aAAA,GAAAW,CAAA,QAAG,IAAI,CAACD,MAAM,CAAC8I,GAAG,CAACpG,OAAO,CAAC;IAAC;IAAApD,aAAA,GAAAW,CAAA;IACvC,IAAI,CAAC+I,KAAK,EAAE;MAAA;MAAA1J,aAAA,GAAAuD,CAAA;MAAAvD,aAAA,GAAAW,CAAA;MACV,MAAM,IAAI2I,KAAK,CAAC,SAASlG,OAAO,YAAY,CAAC;IAC/C,CAAC;IAAA;IAAA;MAAApD,aAAA,GAAAuD,CAAA;IAAA;IAAAvD,aAAA,GAAAW,CAAA;IAED;IAAI;IAAA,CAAAX,aAAA,GAAAuD,CAAA,WAAAmG,KAAK,CAACI,MAAM,KAAK,cAAc;IAAA;IAAA,CAAA9J,aAAA,GAAAuD,CAAA,WAAImG,KAAK,CAACI,MAAM,KAAK,SAAS,GAAE;MAAA;MAAA9J,aAAA,GAAAuD,CAAA;MAAAvD,aAAA,GAAAW,CAAA;MACjE,MAAM,IAAI2I,KAAK,CAAC,SAASlG,OAAO,kCAAkCsG,KAAK,CAACI,MAAM,EAAE,CAAC;IACnF,CAAC;IAAA;IAAA;MAAA9J,aAAA,GAAAuD,CAAA;IAAA;IAAAvD,aAAA,GAAAW,CAAA;IAED,IAAI;MAAA;MAAAX,aAAA,GAAAW,CAAA;MACF+I,KAAK,CAACI,MAAM,GAAG,cAAc;MAAC;MAAA9J,aAAA,GAAAW,CAAA;MAC9B,IAAI,CAACmK,iBAAiB,CAAC1H,OAAO,EAAE,cAAc,CAAC;MAE/C;MACA,MAAM2H,OAAO;MAAA;MAAA,CAAA/K,aAAA,GAAAW,CAAA,QAAG,MAAM,IAAI,CAACqK,iBAAiB,CAACtB,KAAK,CAAC;MAAC;MAAA1J,aAAA,GAAAW,CAAA;MACpD,IAAI,CAACE,SAAS,CAAC+C,GAAG,CAACR,OAAO,EAAE2H,OAAO,CAAC;MAEpC;MAAA;MAAA/K,aAAA,GAAAW,CAAA;MACA,MAAM,IAAI,CAACsK,iBAAiB,CAAC7H,OAAO,EAAE,IAAI,CAAC3C,MAAM,CAACkB,cAAc,CAAC;MAAC;MAAA3B,aAAA,GAAAW,CAAA;MAElE+I,KAAK,CAACI,MAAM,GAAG,MAAM;MAAC;MAAA9J,aAAA,GAAAW,CAAA;MACtB,IAAI,CAACmK,iBAAiB,CAAC1H,OAAO,EAAE,MAAM,CAAC;MAAC;MAAApD,aAAA,GAAAW,CAAA;MAExC,IAAI,CAACL,MAAM,CAAC6H,IAAI,CAAC,eAAe,EAAE;QAAE/E,OAAO;QAAES,IAAI,EAAE6F,KAAK,CAAC7F;MAAI,CAAE,CAAC;MAAC;MAAA7D,aAAA,GAAAW,CAAA;MACjE,IAAI,CAAC6H,IAAI,CAAC,eAAe,EAAE;QAAEkB;MAAK,CAAE,CAAC;IACvC,CAAC,CAAC,OAAOwB,KAAK,EAAE;MACd,MAAMC,YAAY;MAAA;MAAA,CAAAnL,aAAA,GAAAW,CAAA,QAAGuK,KAAK,YAAY5B,KAAK;MAAA;MAAA,CAAAtJ,aAAA,GAAAuD,CAAA,WAAG2H,KAAK,CAACE,OAAO;MAAA;MAAA,CAAApL,aAAA,GAAAuD,CAAA,WAAG8H,MAAM,CAACH,KAAK,CAAC;MAAC;MAAAlL,aAAA,GAAAW,CAAA;MAC5E+I,KAAK,CAACI,MAAM,GAAG,OAAO;MAAC;MAAA9J,aAAA,GAAAW,CAAA;MACvB,IAAI,CAAC2K,aAAa,CAAClI,OAAO,EAAE;QAC1BmI,SAAS,EAAE,IAAInB,IAAI,EAAE;QACrBtG,IAAI,EAAE,gBAAgB;QACtBsH,OAAO,EAAED,YAAY;QACrBK,OAAO,EAAE;UAAEpI;QAAO,CAAE;QACpBqI,QAAQ,EAAE,UAAU;QACpBC,QAAQ,EAAE;OACX,CAAC;MAAC;MAAA1L,aAAA,GAAAW,CAAA;MAEH,IAAI,CAACL,MAAM,CAAC4K,KAAK,CAAC,uBAAuB,EAAE;QAAE9H,OAAO;QAAE8H;MAAK,CAAE,CAAC;MAAC;MAAAlL,aAAA,GAAAW,CAAA;MAC/D,MAAMuK,KAAK;IACb;EACF;EAEA,MAAMlC,SAASA,CAAC5F,OAAe,EAAEuI,MAAA;EAAA;EAAA,CAAA3L,aAAA,GAAAuD,CAAA,WAAiB,cAAc;IAAA;IAAAvD,aAAA,GAAAyB,CAAA;IAC9D,MAAMiI,KAAK;IAAA;IAAA,CAAA1J,aAAA,GAAAW,CAAA,QAAG,IAAI,CAACD,MAAM,CAAC8I,GAAG,CAACpG,OAAO,CAAC;IAAC;IAAApD,aAAA,GAAAW,CAAA;IACvC,IAAI,CAAC+I,KAAK,EAAE;MAAA;MAAA1J,aAAA,GAAAuD,CAAA;MAAAvD,aAAA,GAAAW,CAAA;MACV,MAAM,IAAI2I,KAAK,CAAC,SAASlG,OAAO,YAAY,CAAC;IAC/C,CAAC;IAAA;IAAA;MAAApD,aAAA,GAAAuD,CAAA;IAAA;IAAAvD,aAAA,GAAAW,CAAA;IAED;IAAI;IAAA,CAAAX,aAAA,GAAAuD,CAAA,WAAAmG,KAAK,CAACI,MAAM,KAAK,SAAS;IAAA;IAAA,CAAA9J,aAAA,GAAAuD,CAAA,WAAImG,KAAK,CAACI,MAAM,KAAK,YAAY,GAAE;MAAA;MAAA9J,aAAA,GAAAuD,CAAA;MAAAvD,aAAA,GAAAW,CAAA;MAC/D,OAAO,CAAC;IACV,CAAC;IAAA;IAAA;MAAAX,aAAA,GAAAuD,CAAA;IAAA;IAAAvD,aAAA,GAAAW,CAAA;IAED,IAAI;MAAA;MAAAX,aAAA,GAAAW,CAAA;MACF+I,KAAK,CAACI,MAAM,GAAG,aAAa;MAAC;MAAA9J,aAAA,GAAAW,CAAA;MAC7B,IAAI,CAACmK,iBAAiB,CAAC1H,OAAO,EAAE,aAAa,CAAC;MAE9C;MACA,MAAM2H,OAAO;MAAA;MAAA,CAAA/K,aAAA,GAAAW,CAAA,SAAG,IAAI,CAACE,SAAS,CAAC2I,GAAG,CAACpG,OAAO,CAAC;MAAC;MAAApD,aAAA,GAAAW,CAAA;MAC5C;MAAI;MAAA,CAAAX,aAAA,GAAAuD,CAAA,WAAAwH,OAAO;MAAA;MAAA,CAAA/K,aAAA,GAAAuD,CAAA,WAAI,CAACwH,OAAO,CAACa,MAAM,GAAE;QAAA;QAAA5L,aAAA,GAAAuD,CAAA;QAAAvD,aAAA,GAAAW,CAAA;QAC9BoK,OAAO,CAACc,IAAI,CAAC,SAAS,CAAC;QAEvB;QAAA;QAAA7L,aAAA,GAAAW,CAAA;QACAmL,UAAU,CAAC,MAAK;UAAA;UAAA9L,aAAA,GAAAyB,CAAA;UAAAzB,aAAA,GAAAW,CAAA;UACd;UAAI;UAAA,CAAAX,aAAA,GAAAuD,CAAA,WAAAwH,OAAO;UAAA;UAAA,CAAA/K,aAAA,GAAAuD,CAAA,WAAI,CAACwH,OAAO,CAACa,MAAM,GAAE;YAAA;YAAA5L,aAAA,GAAAuD,CAAA;YAAAvD,aAAA,GAAAW,CAAA;YAC9BoK,OAAO,CAACc,IAAI,CAAC,SAAS,CAAC;UACzB,CAAC;UAAA;UAAA;YAAA7L,aAAA,GAAAuD,CAAA;UAAA;QACH,CAAC,EAAE,IAAI,CAAC9C,MAAM,CAACkB,cAAc,CAAC;MAChC,CAAC;MAAA;MAAA;QAAA3B,aAAA,GAAAuD,CAAA;MAAA;MAED;MAAAvD,aAAA,GAAAW,CAAA;MACA,MAAM,IAAI,CAACoL,kBAAkB,CAAC3I,OAAO,EAAE,IAAI,CAAC3C,MAAM,CAACkB,cAAc,CAAC;MAAC;MAAA3B,aAAA,GAAAW,CAAA;MAEnE+I,KAAK,CAACI,MAAM,GAAG,YAAY;MAAC;MAAA9J,aAAA,GAAAW,CAAA;MAC5B,IAAI,CAACmK,iBAAiB,CAAC1H,OAAO,EAAE,YAAY,CAAC;MAE7C;MAAA;MAAApD,aAAA,GAAAW,CAAA;MACA,IAAI,CAACE,SAAS,CAACmL,MAAM,CAAC5I,OAAO,CAAC;MAAC;MAAApD,aAAA,GAAAW,CAAA;MAE/B,IAAI,CAACL,MAAM,CAAC6H,IAAI,CAAC,eAAe,EAAE;QAAE/E,OAAO;QAAEuI;MAAM,CAAE,CAAC;MAAC;MAAA3L,aAAA,GAAAW,CAAA;MACvD,IAAI,CAAC6H,IAAI,CAAC,eAAe,EAAE;QAAEkB,KAAK;QAAEiC;MAAM,CAAE,CAAC;IAC/C,CAAC,CAAC,OAAOT,KAAK,EAAE;MAAA;MAAAlL,aAAA,GAAAW,CAAA;MACd,IAAI,CAACL,MAAM,CAAC4K,KAAK,CAAC,iCAAiC,EAAE;QAAE9H,OAAO;QAAE8H;MAAK,CAAE,CAAC;MACxE;MAAA;MAAAlL,aAAA,GAAAW,CAAA;MACA,IAAI,CAACE,SAAS,CAACmL,MAAM,CAAC5I,OAAO,CAAC;MAAC;MAAApD,aAAA,GAAAW,CAAA;MAC/B+I,KAAK,CAACI,MAAM,GAAG,YAAY;IAC7B;EACF;EAEA,MAAMmC,YAAYA,CAAC7I,OAAe,EAAEuI,MAAA;EAAA;EAAA,CAAA3L,aAAA,GAAAuD,CAAA,WAAiB,mBAAmB;IAAA;IAAAvD,aAAA,GAAAyB,CAAA;IAAAzB,aAAA,GAAAW,CAAA;IACtE,IAAI,CAACL,MAAM,CAAC6H,IAAI,CAAC,kBAAkB,EAAE;MAAE/E,OAAO;MAAEuI;IAAM,CAAE,CAAC;IAAC;IAAA3L,aAAA,GAAAW,CAAA;IAE1D,MAAM,IAAI,CAACqI,SAAS,CAAC5F,OAAO,EAAE,WAAWuI,MAAM,EAAE,CAAC;IAAC;IAAA3L,aAAA,GAAAW,CAAA;IACnD,MAAM,IAAI,CAACkK,UAAU,CAACzH,OAAO,CAAC;IAAC;IAAApD,aAAA,GAAAW,CAAA;IAE/B,IAAI,CAAC6H,IAAI,CAAC,iBAAiB,EAAE;MAAEpF,OAAO;MAAEuI;IAAM,CAAE,CAAC;EACnD;EAEA,MAAMO,WAAWA,CAAC9I,OAAe;IAAA;IAAApD,aAAA,GAAAyB,CAAA;IAC/B,MAAMiI,KAAK;IAAA;IAAA,CAAA1J,aAAA,GAAAW,CAAA,SAAG,IAAI,CAACD,MAAM,CAAC8I,GAAG,CAACpG,OAAO,CAAC;IAAC;IAAApD,aAAA,GAAAW,CAAA;IACvC,IAAI,CAAC+I,KAAK,EAAE;MAAA;MAAA1J,aAAA,GAAAuD,CAAA;MAAAvD,aAAA,GAAAW,CAAA;MACV,MAAM,IAAI2I,KAAK,CAAC,SAASlG,OAAO,YAAY,CAAC;IAC/C,CAAC;IAAA;IAAA;MAAApD,aAAA,GAAAuD,CAAA;IAAA;IAED;IAAAvD,aAAA,GAAAW,CAAA;IACA;IAAI;IAAA,CAAAX,aAAA,GAAAuD,CAAA,WAAAmG,KAAK,CAACI,MAAM,KAAK,YAAY;IAAA;IAAA,CAAA9J,aAAA,GAAAuD,CAAA,WAAImG,KAAK,CAACI,MAAM,KAAK,SAAS,GAAE;MAAA;MAAA9J,aAAA,GAAAuD,CAAA;MAAAvD,aAAA,GAAAW,CAAA;MAC/D,MAAM,IAAI,CAACqI,SAAS,CAAC5F,OAAO,EAAE,SAAS,CAAC;IAC1C,CAAC;IAAA;IAAA;MAAApD,aAAA,GAAAuD,CAAA;IAAA;IAED;IAAAvD,aAAA,GAAAW,CAAA;IACA,IAAI,CAACD,MAAM,CAACsL,MAAM,CAAC5I,OAAO,CAAC;IAAC;IAAApD,aAAA,GAAAW,CAAA;IAC5B,IAAI,CAACM,YAAY,CAAC+K,MAAM,CAAC5I,OAAO,CAAC;IAAC;IAAApD,aAAA,GAAAW,CAAA;IAClC,IAAI,CAACW,aAAa,CAAC0K,MAAM,CAAC5I,OAAO,CAAC;IAAC;IAAApD,aAAA,GAAAW,CAAA;IACnC,IAAI,CAACY,kBAAkB,CAACyK,MAAM,CAAC5I,OAAO,CAAC;IAEvC;IAAA;IAAApD,aAAA,GAAAW,CAAA;IACA,IAAI,CAACwL,+BAA+B,CAAC/I,OAAO,CAAC;IAE7C;IAAA;IAAApD,aAAA,GAAAW,CAAA;IACA,MAAM,IAAI,CAACH,MAAM,CAAC4L,WAAW,CAAC,SAAShJ,OAAO,EAAE,CAAC;IAAC;IAAApD,aAAA,GAAAW,CAAA;IAElD,IAAI,CAACL,MAAM,CAAC6H,IAAI,CAAC,eAAe,EAAE;MAAE/E;IAAO,CAAE,CAAC;IAAC;IAAApD,aAAA,GAAAW,CAAA;IAC/C,IAAI,CAAC6H,IAAI,CAAC,eAAe,EAAE;MAAEpF;IAAO,CAAE,CAAC;EACzC;EAEA;EAEA,MAAMiJ,eAAeA,CACnBxI,IAAY,EACZuF,YAAoB,EACpB3I,MAMC;IAAA;IAAAT,aAAA,GAAAyB,CAAA;IAED,MAAM8H,QAAQ;IAAA;IAAA,CAAAvJ,aAAA,GAAAW,CAAA,SAAG,IAAI,CAACG,SAAS,CAAC0I,GAAG,CAACJ,YAAY,CAAC;IAAC;IAAApJ,aAAA,GAAAW,CAAA;IAClD,IAAI,CAAC4I,QAAQ,EAAE;MAAA;MAAAvJ,aAAA,GAAAuD,CAAA;MAAAvD,aAAA,GAAAW,CAAA;MACb,MAAM,IAAI2I,KAAK,CAAC,YAAYF,YAAY,YAAY,CAAC;IACvD,CAAC;IAAA;IAAA;MAAApJ,aAAA,GAAAuD,CAAA;IAAA;IAED,MAAM+I,MAAM;IAAA;IAAA,CAAAtM,aAAA,GAAAW,CAAA,SAAGP,UAAU,CAAC,MAAM,CAAC;IACjC,MAAMmM,IAAI;IAAA;IAAA,CAAAvM,aAAA,GAAAW,CAAA,SAAc;MACtBgJ,EAAE,EAAE2C,MAAM;MACVzI,IAAI;MACJC,IAAI,EAAEyF,QAAQ,CAACzF,IAAI;MACnB0I,OAAO,EAAE/L,MAAM,CAAC+L,OAAO;MACvBC,OAAO,EAAEhM,MAAM,CAACgM,OAAO;MACvBC,WAAW,EAAE,CAAC;MACdC,eAAe,EAAE,EAAE;MACnBC,UAAU,EAAE,EAAE;MACdrD,QAAQ;MACRsD,SAAS;MAAE;MAAA,CAAA7M,aAAA,GAAAuD,CAAA,WAAA9C,MAAM,CAACoM,SAAS;MAAA;MAAA,CAAA7M,aAAA,GAAAuD,CAAA,WAAI,KAAK;MACpCuJ,gBAAgB;MAAE;MAAA,CAAA9M,aAAA,GAAAuD,CAAA,WAAA9C,MAAM,CAACqM,gBAAgB;MAAA;MAAA,CAAA9M,aAAA,GAAAuD,CAAA,WAAI,GAAG;MAChDwJ,kBAAkB;MAAE;MAAA,CAAA/M,aAAA,GAAAuD,CAAA,WAAA9C,MAAM,CAACsM,kBAAkB;MAAA;MAAA,CAAA/M,aAAA,GAAAuD,CAAA,WAAI,GAAG;KACrD;IAAC;IAAAvD,aAAA,GAAAW,CAAA;IAEF,IAAI,CAACK,KAAK,CAAC4C,GAAG,CAAC0I,MAAM,EAAEC,IAAI,CAAC;IAE5B;IAAA;IAAAvM,aAAA,GAAAW,CAAA;IACA,KAAK,IAAIqM,CAAC;IAAA;IAAA,CAAAhN,aAAA,GAAAW,CAAA,SAAG,CAAC,GAAEqM,CAAC,GAAGvM,MAAM,CAAC+L,OAAO,EAAEQ,CAAC,EAAE,EAAE;MACvC,MAAM5J,OAAO;MAAA;MAAA,CAAApD,aAAA,GAAAW,CAAA,SAAG,MAAM,IAAI,CAACwI,WAAW,CAACC,YAAY,EAAE;QACnDvF,IAAI,EAAE,GAAGA,IAAI,IAAImJ,CAAC,GAAG,CAAC;OACvB,CAAC;MAAC;MAAAhN,aAAA,GAAAW,CAAA;MACH,MAAM,IAAI,CAACkK,UAAU,CAACzH,OAAO,CAAC;MAAC;MAAApD,aAAA,GAAAW,CAAA;MAC/B4L,IAAI,CAACI,eAAe,CAACM,IAAI,CAAC;QACxBtD,EAAE,EAAEvG,OAAO;QACXqG,OAAO,EAAE,SAAS;QAClB3F,IAAI,EAAEyF,QAAQ,CAACzF,IAAI;QACnB8F,QAAQ,EAAEoD,CAAC,GAAG;OACf,CAAC;MAAC;MAAAhN,aAAA,GAAAW,CAAA;MACH4L,IAAI,CAACG,WAAW,EAAE;IACpB;IAAC;IAAA1M,aAAA,GAAAW,CAAA;IAED,IAAI,CAACL,MAAM,CAAC6H,IAAI,CAAC,oBAAoB,EAAE;MAAEmE,MAAM;MAAEzI,IAAI;MAAE2I,OAAO,EAAE/L,MAAM,CAAC+L;IAAO,CAAE,CAAC;IAAC;IAAAxM,aAAA,GAAAW,CAAA;IAClF,IAAI,CAAC6H,IAAI,CAAC,cAAc,EAAE;MAAE+D;IAAI,CAAE,CAAC;IAAC;IAAAvM,aAAA,GAAAW,CAAA;IAEpC,OAAO2L,MAAM;EACf;EAEA,MAAMY,SAASA,CAACZ,MAAc,EAAEa,UAAkB;IAAA;IAAAnN,aAAA,GAAAyB,CAAA;IAChD,MAAM8K,IAAI;IAAA;IAAA,CAAAvM,aAAA,GAAAW,CAAA,SAAG,IAAI,CAACK,KAAK,CAACwI,GAAG,CAAC8C,MAAM,CAAC;IAAC;IAAAtM,aAAA,GAAAW,CAAA;IACpC,IAAI,CAAC4L,IAAI,EAAE;MAAA;MAAAvM,aAAA,GAAAuD,CAAA;MAAAvD,aAAA,GAAAW,CAAA;MACT,MAAM,IAAI2I,KAAK,CAAC,QAAQgD,MAAM,YAAY,CAAC;IAC7C,CAAC;IAAA;IAAA;MAAAtM,aAAA,GAAAuD,CAAA;IAAA;IAAAvD,aAAA,GAAAW,CAAA;IAED;IAAI;IAAA,CAAAX,aAAA,GAAAuD,CAAA,WAAA4J,UAAU,GAAGZ,IAAI,CAACC,OAAO;IAAA;IAAA,CAAAxM,aAAA,GAAAuD,CAAA,WAAI4J,UAAU,GAAGZ,IAAI,CAACE,OAAO,GAAE;MAAA;MAAAzM,aAAA,GAAAuD,CAAA;MAAAvD,aAAA,GAAAW,CAAA;MAC1D,MAAM,IAAI2I,KAAK,CACb,eAAe6D,UAAU,yBAAyBZ,IAAI,CAACC,OAAO,KAAKD,IAAI,CAACE,OAAO,GAAG,CACnF;IACH,CAAC;IAAA;IAAA;MAAAzM,aAAA,GAAAuD,CAAA;IAAA;IAED,MAAMmJ,WAAW;IAAA;IAAA,CAAA1M,aAAA,GAAAW,CAAA,SAAG4L,IAAI,CAACG,WAAW;IACpC,MAAMU,KAAK;IAAA;IAAA,CAAApN,aAAA,GAAAW,CAAA,SAAGwM,UAAU,GAAGT,WAAW;IAAC;IAAA1M,aAAA,GAAAW,CAAA;IAEvC,IAAIyM,KAAK,GAAG,CAAC,EAAE;MAAA;MAAApN,aAAA,GAAAuD,CAAA;MAAAvD,aAAA,GAAAW,CAAA;MACb;MACA,KAAK,IAAIqM,CAAC;MAAA;MAAA,CAAAhN,aAAA,GAAAW,CAAA,SAAG,CAAC,GAAEqM,CAAC,GAAGI,KAAK,EAAEJ,CAAC,EAAE,EAAE;QAC9B,MAAM5J,OAAO;QAAA;QAAA,CAAApD,aAAA,GAAAW,CAAA,SAAG,MAAM,IAAI,CAACwI,WAAW,CAACoD,IAAI,CAAChD,QAAQ,CAAC1F,IAAI,EAAE;UACzDA,IAAI,EAAE,GAAG0I,IAAI,CAAC1I,IAAI,IAAI6I,WAAW,GAAGM,CAAC,GAAG,CAAC;SAC1C,CAAC;QAAC;QAAAhN,aAAA,GAAAW,CAAA;QACH,MAAM,IAAI,CAACkK,UAAU,CAACzH,OAAO,CAAC;QAAC;QAAApD,aAAA,GAAAW,CAAA;QAC/B4L,IAAI,CAACI,eAAe,CAACM,IAAI,CAAC;UACxBtD,EAAE,EAAEvG,OAAO;UACXqG,OAAO,EAAE,SAAS;UAClB3F,IAAI,EAAEyI,IAAI,CAACzI,IAAI;UACf8F,QAAQ,EAAE8C,WAAW,GAAGM,CAAC,GAAG;SAC7B,CAAC;MACJ;IACF,CAAC,MAAM;MAAA;MAAAhN,aAAA,GAAAuD,CAAA;MAAAvD,aAAA,GAAAW,CAAA;MAAA,IAAIyM,KAAK,GAAG,CAAC,EAAE;QAAA;QAAApN,aAAA,GAAAuD,CAAA;QACpB;QACA,MAAM8J,cAAc;QAAA;QAAA,CAAArN,aAAA,GAAAW,CAAA,SAAG4L,IAAI,CAACI,eAAe,CAAC9C,KAAK,CAAC,CAAC,EAAEyD,IAAI,CAACC,GAAG,CAACH,KAAK,CAAC,CAAC;QAAC;QAAApN,aAAA,GAAAW,CAAA;QACtE,KAAK,MAAMyC,OAAO,IAAIiK,cAAc,EAAE;UAAA;UAAArN,aAAA,GAAAW,CAAA;UACpC,MAAM,IAAI,CAACuL,WAAW,CAAC9I,OAAO,CAACuG,EAAE,CAAC;UAAC;UAAA3J,aAAA,GAAAW,CAAA;UACnC4L,IAAI,CAACI,eAAe,GAAGJ,IAAI,CAACI,eAAe,CAACa,MAAM,CAAEC,CAAC,IAAK;YAAA;YAAAzN,aAAA,GAAAyB,CAAA;YAAAzB,aAAA,GAAAW,CAAA;YAAA,OAAA8M,CAAC,CAAC9D,EAAE,KAAKvG,OAAO,CAACuG,EAAE;UAAF,CAAE,CAAC;QAChF;MACF,CAAC;MAAA;MAAA;QAAA3J,aAAA,GAAAuD,CAAA;MAAA;IAAD;IAAC;IAAAvD,aAAA,GAAAW,CAAA;IAED4L,IAAI,CAACG,WAAW,GAAGS,UAAU;IAAC;IAAAnN,aAAA,GAAAW,CAAA;IAE9B,IAAI,CAACL,MAAM,CAAC6H,IAAI,CAAC,aAAa,EAAE;MAAEmE,MAAM;MAAEoB,QAAQ,EAAEhB,WAAW;MAAEiB,MAAM,EAAER;IAAU,CAAE,CAAC;IAAC;IAAAnN,aAAA,GAAAW,CAAA;IACvF,IAAI,CAAC6H,IAAI,CAAC,aAAa,EAAE;MAAE+D,IAAI;MAAEmB,QAAQ,EAAEhB,WAAW;MAAEiB,MAAM,EAAER;IAAU,CAAE,CAAC;EAC/E;EAEA;EAEQ9E,qBAAqBA,CAAA;IAAA;IAAArI,aAAA,GAAAyB,CAAA;IAAAzB,aAAA,GAAAW,CAAA;IAC3B,IAAI,CAACO,cAAc,GAAG0M,WAAW,CAAC,MAAK;MAAA;MAAA5N,aAAA,GAAAyB,CAAA;MAAAzB,aAAA,GAAAW,CAAA;MACrC,IAAI,CAACkN,mBAAmB,EAAE;IAC5B,CAAC,EAAE,IAAI,CAACpN,MAAM,CAACmB,mBAAmB,CAAC;IAAC;IAAA5B,aAAA,GAAAW,CAAA;IAEpC,IAAI,CAACL,MAAM,CAAC6H,IAAI,CAAC,2BAA2B,EAAE;MAC5C2F,QAAQ,EAAE,IAAI,CAACrN,MAAM,CAACmB;KACvB,CAAC;EACJ;EAEQ0G,wBAAwBA,CAAA;IAAA;IAAAtI,aAAA,GAAAyB,CAAA;IAAAzB,aAAA,GAAAW,CAAA;IAC9B,IAAI,CAACQ,iBAAiB,GAAGyM,WAAW,CAAC,MAAK;MAAA;MAAA5N,aAAA,GAAAyB,CAAA;MAAAzB,aAAA,GAAAW,CAAA;MACxC,IAAI,CAACoN,eAAe,EAAE;IACxB,CAAC,EAAE,IAAI,CAACtN,MAAM,CAACU,iBAAiB,CAAC;IAAC;IAAAnB,aAAA,GAAAW,CAAA;IAElC,IAAI,CAACL,MAAM,CAAC6H,IAAI,CAAC,8BAA8B,EAAE;MAC/C2F,QAAQ,EAAE,IAAI,CAACrN,MAAM,CAACU;KACvB,CAAC;EACJ;EAEQ,MAAM0M,mBAAmBA,CAAA;IAAA;IAAA7N,aAAA,GAAAyB,CAAA;IAC/B,MAAMuM,cAAc;IAAA;IAAA,CAAAhO,aAAA,GAAAW,CAAA,SAAGiI,KAAK,CAACC,IAAI,CAAC,IAAI,CAACnI,MAAM,CAACoI,IAAI,EAAE,CAAC,CAACC,GAAG,CAAE3F,OAAO,IAChE;MAAA;MAAApD,aAAA,GAAAyB,CAAA;MAAAzB,aAAA,GAAAW,CAAA;MAAA,WAAI,CAACsN,gBAAgB,CAAC7K,OAAO,CAAC;IAAD,CAAC,CAC/B;IAAC;IAAApD,aAAA,GAAAW,CAAA;IAEF,MAAMsI,OAAO,CAACiF,UAAU,CAACF,cAAc,CAAC;EAC1C;EAEQ,MAAMC,gBAAgBA,CAAC7K,OAAe;IAAA;IAAApD,aAAA,GAAAyB,CAAA;IAC5C,MAAMiI,KAAK;IAAA;IAAA,CAAA1J,aAAA,GAAAW,CAAA,SAAG,IAAI,CAACD,MAAM,CAAC8I,GAAG,CAACpG,OAAO,CAAC;IAAC;IAAApD,aAAA,GAAAW,CAAA;IACvC,IAAI,CAAC+I,KAAK,EAAE;MAAA;MAAA1J,aAAA,GAAAuD,CAAA;MAAAvD,aAAA,GAAAW,CAAA;MAAA;IAAA,CAAO;IAAA;IAAA;MAAAX,aAAA,GAAAuD,CAAA;IAAA;IAEnB,MAAM0G,MAAM;IAAA;IAAA,CAAAjK,aAAA,GAAAW,CAAA,SAAG,IAAI,CAACM,YAAY,CAACuI,GAAG,CAACpG,OAAO,CAAC;IAAC;IAAApD,aAAA,GAAAW,CAAA;IAC9C,IAAI,CAACsJ,MAAM,EAAE;MAAA;MAAAjK,aAAA,GAAAuD,CAAA;MAAAvD,aAAA,GAAAW,CAAA;MAAA;IAAA,CAAO;IAAA;IAAA;MAAAX,aAAA,GAAAuD,CAAA;IAAA;IACpB,MAAM4K,GAAG;IAAA;IAAA,CAAAnO,aAAA,GAAAW,CAAA,SAAG,IAAIyJ,IAAI,EAAE;IAAC;IAAApK,aAAA,GAAAW,CAAA;IAEvB,IAAI;MACF;MACA,MAAMyN,cAAc;MAAA;MAAA,CAAApO,aAAA,GAAAW,CAAA,SAAG,MAAM,IAAI,CAAC0N,mBAAmB,CAACjL,OAAO,CAAC;MAAC;MAAApD,aAAA,GAAAW,CAAA;MAC/DsJ,MAAM,CAACqE,UAAU,CAACF,cAAc,GAAGA,cAAc;MAEjD;MACA,MAAM3G,WAAW;MAAA;MAAA,CAAAzH,aAAA,GAAAW,CAAA,SAAG,IAAI,CAAC4N,yBAAyB,CAACnL,OAAO,CAAC;MAAC;MAAApD,aAAA,GAAAW,CAAA;MAC5DsJ,MAAM,CAACqE,UAAU,CAAC7G,WAAW,GAAGA,WAAW;MAE3C;MACA,MAAMxC,WAAW;MAAA;MAAA,CAAAjF,aAAA,GAAAW,CAAA,SAAG,IAAI,CAAC6N,yBAAyB,CAACpL,OAAO,CAAC;MAAC;MAAApD,aAAA,GAAAW,CAAA;MAC5DsJ,MAAM,CAACqE,UAAU,CAACrJ,WAAW,GAAGA,WAAW;MAE3C;MACA,MAAMwJ,aAAa;MAAA;MAAA,CAAAzO,aAAA,GAAAW,CAAA,SAAG,IAAI,CAAC+N,sBAAsB,CAACtL,OAAO,CAAC;MAAC;MAAApD,aAAA,GAAAW,CAAA;MAC3DsJ,MAAM,CAACqE,UAAU,CAAChN,aAAa,GAAGmN,aAAa;MAE/C;MACA,MAAME,OAAO;MAAA;MAAA,CAAA3O,aAAA,GAAAW,CAAA,SAAG,CAACyN,cAAc,GAAG3G,WAAW,GAAGxC,WAAW,GAAGwJ,aAAa,IAAI,CAAC;MAAC;MAAAzO,aAAA,GAAAW,CAAA;MACjFsJ,MAAM,CAAC0E,OAAO,GAAGA,OAAO;MAAC;MAAA3O,aAAA,GAAAW,CAAA;MACzBsJ,MAAM,CAAC2E,SAAS,GAAGT,GAAG;MAEtB;MAAA;MAAAnO,aAAA,GAAAW,CAAA;MACA+I,KAAK,CAACO,MAAM,GAAG0E,OAAO;MAEtB;MAAA;MAAA3O,aAAA,GAAAW,CAAA;MACA,IAAI,CAACkO,kBAAkB,CAACzL,OAAO,EAAE6G,MAAM,CAAC;MAExC;MAAA;MAAAjK,aAAA,GAAAW,CAAA;MACA;MAAI;MAAA,CAAAX,aAAA,GAAAuD,CAAA,WAAAoL,OAAO,GAAG,GAAG;MAAA;MAAA,CAAA3O,aAAA,GAAAuD,CAAA,WAAI,IAAI,CAAC9C,MAAM,CAACoB,WAAW,GAAE;QAAA;QAAA7B,aAAA,GAAAuD,CAAA;QAAAvD,aAAA,GAAAW,CAAA;QAC5C,IAAI,CAACL,MAAM,CAACwO,IAAI,CAAC,wCAAwC,EAAE;UAAE1L,OAAO;UAAE6G,MAAM,EAAE0E;QAAO,CAAE,CAAC;QAAC;QAAA3O,aAAA,GAAAW,CAAA;QACzF,MAAM,IAAI,CAACsL,YAAY,CAAC7I,OAAO,EAAE,iBAAiB,CAAC;MACrD,CAAC;MAAA;MAAA;QAAApD,aAAA,GAAAuD,CAAA;MAAA;IACH,CAAC,CAAC,OAAO2H,KAAK,EAAE;MAAA;MAAAlL,aAAA,GAAAW,CAAA;MACd,IAAI,CAACL,MAAM,CAAC4K,KAAK,CAAC,qBAAqB,EAAE;QAAE9H,OAAO;QAAE8H;MAAK,CAAE,CAAC;MAAC;MAAAlL,aAAA,GAAAW,CAAA;MAC7DsJ,MAAM,CAAC0E,OAAO,GAAG,CAAC;MAAC;MAAA3O,aAAA,GAAAW,CAAA;MACnBsJ,MAAM,CAAC2E,SAAS,GAAGT,GAAG;IACxB;EACF;EAEQ,MAAME,mBAAmBA,CAACjL,OAAe;IAAA;IAAApD,aAAA,GAAAyB,CAAA;IAAAzB,aAAA,GAAAW,CAAA;IAC/C;IAEA,IAAI;MACF;MACA;MACA,MAAM+I,KAAK;MAAA;MAAA,CAAA1J,aAAA,GAAAW,CAAA,SAAG,IAAI,CAACD,MAAM,CAAC8I,GAAG,CAACpG,OAAO,CAAC;MAAC;MAAApD,aAAA,GAAAW,CAAA;MACvC,IAAI,CAAC+I,KAAK,EAAE;QAAA;QAAA1J,aAAA,GAAAuD,CAAA;QAAAvD,aAAA,GAAAW,CAAA;QAAA,OAAO,CAAC;MAAA,CAAC;MAAA;MAAA;QAAAX,aAAA,GAAAuD,CAAA;MAAA;MACrB,MAAMwL,kBAAkB;MAAA;MAAA,CAAA/O,aAAA,GAAAW,CAAA,SAAGyJ,IAAI,CAAC+D,GAAG,EAAE,GAAGzE,KAAK,CAACS,aAAa,CAAC6E,OAAO,EAAE;MAAC;MAAAhP,aAAA,GAAAW,CAAA;MAEtE,IAAIoO,kBAAkB,GAAG,IAAI,CAACtO,MAAM,CAACU,iBAAiB,GAAG,CAAC,EAAE;QAAA;QAAAnB,aAAA,GAAAuD,CAAA;QAAAvD,aAAA,GAAAW,CAAA;QAC1D,OAAO,CAAC,CAAC,CAAC;MACZ,CAAC,MAAM;QAAA;QAAAX,aAAA,GAAAuD,CAAA;QAAAvD,aAAA,GAAAW,CAAA;QAAA,IAAIoO,kBAAkB,GAAG,IAAI,CAACtO,MAAM,CAACU,iBAAiB,GAAG,CAAC,EAAE;UAAA;UAAAnB,aAAA,GAAAuD,CAAA;UAAAvD,aAAA,GAAAW,CAAA;UACjE,OAAO,GAAG,CAAC,CAAC;QACd,CAAC,MAAM;UAAA;UAAAX,aAAA,GAAAuD,CAAA;UAAAvD,aAAA,GAAAW,CAAA;UACL,OAAO,GAAG,CAAC,CAAC;QACd;MAAA;IACF,CAAC,CAAC,OAAOuK,KAAK,EAAE;MAAA;MAAAlL,aAAA,GAAAW,CAAA;MACd,OAAO,CAAC,CAAC,CAAC;IACZ;EACF;EAEQ4N,yBAAyBA,CAACnL,OAAe;IAAA;IAAApD,aAAA,GAAAyB,CAAA;IAC/C,MAAMwN,OAAO;IAAA;IAAA,CAAAjP,aAAA,GAAAW,CAAA;IAAG;IAAA,CAAAX,aAAA,GAAAuD,CAAA,eAAI,CAAChC,kBAAkB,CAACiI,GAAG,CAACpG,OAAO,CAAC;IAAA;IAAA,CAAApD,aAAA,GAAAuD,CAAA,WAAI,EAAE;IAAC;IAAAvD,aAAA,GAAAW,CAAA;IAC3D,IAAIsO,OAAO,CAACC,MAAM,KAAK,CAAC,EAAE;MAAA;MAAAlP,aAAA,GAAAuD,CAAA;MAAAvD,aAAA,GAAAW,CAAA;MAAA,OAAO,GAAG;IAAA,CAAC;IAAA;IAAA;MAAAX,aAAA,GAAAuD,CAAA;IAAA;IAErC;IACA,MAAM4L,MAAM;IAAA;IAAA,CAAAnP,aAAA,GAAAW,CAAA,SAAGsO,OAAO,CAACpF,KAAK,CAAC,CAAC,EAAE,CAAC,EAAC,CAAC;IACnC,MAAMuF,OAAO;IAAA;IAAA,CAAApP,aAAA,GAAAW,CAAA,SACXwO,MAAM,CAACE,MAAM,CAAC,CAACC,GAAG,EAAEC,KAAK,KAAK;MAAA;MAAAvP,aAAA,GAAAyB,CAAA;MAAAzB,aAAA,GAAAW,CAAA;MAAA,OAAA2O,GAAG,GAAGC,KAAK,CAACjM,OAAO,CAACkM,oBAAoB;IAApB,CAAoB,EAAE,CAAC,CAAC,GAAGL,MAAM,CAACD,MAAM;IAE5F;IACA,MAAMO,YAAY;IAAA;IAAA,CAAAzP,aAAA,GAAAW,CAAA,SAAG,KAAK,EAAC,CAAC;IAAA;IAAAX,aAAA,GAAAW,CAAA;IAC5B,OAAO2M,IAAI,CAACoC,GAAG,CAAC,CAAC,EAAEpC,IAAI,CAACqC,GAAG,CAAC,CAAC,EAAEF,YAAY,GAAGL,OAAO,CAAC,CAAC;EACzD;EAEQZ,yBAAyBA,CAACpL,OAAe;IAAA;IAAApD,aAAA,GAAAyB,CAAA;IAC/C,MAAMiI,KAAK;IAAA;IAAA,CAAA1J,aAAA,GAAAW,CAAA,SAAG,IAAI,CAACD,MAAM,CAAC8I,GAAG,CAACpG,OAAO,CAAC;IAAC;IAAApD,aAAA,GAAAW,CAAA;IACvC,IAAI,CAAC+I,KAAK,EAAE;MAAA;MAAA1J,aAAA,GAAAuD,CAAA;MAAAvD,aAAA,GAAAW,CAAA;MAAA,OAAO,CAAC;IAAA,CAAC;IAAA;IAAA;MAAAX,aAAA,GAAAuD,CAAA;IAAA;IACrB,MAAMqM,UAAU;IAAA;IAAA,CAAA5P,aAAA,GAAAW,CAAA,SAAG+I,KAAK,CAACpG,OAAO,CAACuM,cAAc,GAAGnG,KAAK,CAACpG,OAAO,CAACwM,WAAW;IAAC;IAAA9P,aAAA,GAAAW,CAAA;IAE5E,IAAIiP,UAAU,KAAK,CAAC,EAAE;MAAA;MAAA5P,aAAA,GAAAuD,CAAA;MAAAvD,aAAA,GAAAW,CAAA;MAAA,OAAO,GAAG;IAAA,CAAC;IAAA;IAAA;MAAAX,aAAA,GAAAuD,CAAA;IAAA;IAAAvD,aAAA,GAAAW,CAAA;IAEjC,OAAO+I,KAAK,CAACpG,OAAO,CAACuM,cAAc,GAAGD,UAAU;EAClD;EAEQlB,sBAAsBA,CAACtL,OAAe;IAAA;IAAApD,aAAA,GAAAyB,CAAA;IAC5C,MAAMkC,KAAK;IAAA;IAAA,CAAA3D,aAAA,GAAAW,CAAA,SAAG,IAAI,CAACW,aAAa,CAACkI,GAAG,CAACpG,OAAO,CAAC;IAAC;IAAApD,aAAA,GAAAW,CAAA;IAC9C,IAAI,CAACgD,KAAK,EAAE;MAAA;MAAA3D,aAAA,GAAAuD,CAAA;MAAAvD,aAAA,GAAAW,CAAA;MAAA,OAAO,GAAG;IAAA,CAAC;IAAA;IAAA;MAAAX,aAAA,GAAAuD,CAAA;IAAA;IAEvB,MAAMwM,MAAM;IAAA;IAAA,CAAA/P,aAAA,GAAAW,CAAA,SAAG,IAAI,CAACF,MAAM,CAACqB,cAAc;IACzC,MAAMkO,WAAW;IAAA;IAAA,CAAAhQ,aAAA,GAAAW,CAAA,SAAG,CAAC,GAAGgD,KAAK,CAACnD,MAAM,GAAGuP,MAAM,CAACvP,MAAM;IACpD,MAAMyP,QAAQ;IAAA;IAAA,CAAAjQ,aAAA,GAAAW,CAAA,SAAG,CAAC,GAAGgD,KAAK,CAAC5B,GAAG,GAAGgO,MAAM,CAAChO,GAAG;IAC3C,MAAMmO,SAAS;IAAA;IAAA,CAAAlQ,aAAA,GAAAW,CAAA,SAAG,CAAC,GAAGgD,KAAK,CAAC3B,IAAI,GAAG+N,MAAM,CAAC/N,IAAI;IAAC;IAAAhC,aAAA,GAAAW,CAAA;IAE/C,OAAO2M,IAAI,CAACoC,GAAG,CAAC,CAAC,EAAE,CAACM,WAAW,GAAGC,QAAQ,GAAGC,SAAS,IAAI,CAAC,CAAC;EAC9D;EAEQrB,kBAAkBA,CAACzL,OAAe,EAAE6G,MAAmB;IAAA;IAAAjK,aAAA,GAAAyB,CAAA;IAC7D,MAAM0O,MAAM;IAAA;IAAA,CAAAnQ,aAAA,GAAAW,CAAA,SAAkB,EAAE;IAAC;IAAAX,aAAA,GAAAW,CAAA;IAEjC,IAAIsJ,MAAM,CAACqE,UAAU,CAACF,cAAc,GAAG,GAAG,EAAE;MAAA;MAAApO,aAAA,GAAAuD,CAAA;MAAAvD,aAAA,GAAAW,CAAA;MAC1CwP,MAAM,CAAClD,IAAI,CAAC;QACVnJ,IAAI,EAAE,eAAe;QACrB2H,QAAQ,EAAExB,MAAM,CAACqE,UAAU,CAACF,cAAc,GAAG,GAAG;QAAA;QAAA,CAAApO,aAAA,GAAAuD,CAAA,WAAG,UAAU;QAAA;QAAA,CAAAvD,aAAA,GAAAuD,CAAA,WAAG,MAAM;QACtE6H,OAAO,EAAE,uCAAuC;QAChDG,SAAS,EAAE,IAAInB,IAAI,EAAE;QACrBsB,QAAQ,EAAE,KAAK;QACf0E,iBAAiB,EAAE;OACpB,CAAC;IACJ,CAAC;IAAA;IAAA;MAAApQ,aAAA,GAAAuD,CAAA;IAAA;IAAAvD,aAAA,GAAAW,CAAA;IAED,IAAIsJ,MAAM,CAACqE,UAAU,CAAC7G,WAAW,GAAG,GAAG,EAAE;MAAA;MAAAzH,aAAA,GAAAuD,CAAA;MAAAvD,aAAA,GAAAW,CAAA;MACvCwP,MAAM,CAAClD,IAAI,CAAC;QACVnJ,IAAI,EAAE,aAAa;QACnB2H,QAAQ,EAAExB,MAAM,CAACqE,UAAU,CAAC7G,WAAW,GAAG,GAAG;QAAA;QAAA,CAAAzH,aAAA,GAAAuD,CAAA,WAAG,MAAM;QAAA;QAAA,CAAAvD,aAAA,GAAAuD,CAAA,WAAG,QAAQ;QACjE6H,OAAO,EAAE,4CAA4C;QACrDG,SAAS,EAAE,IAAInB,IAAI,EAAE;QACrBsB,QAAQ,EAAE,KAAK;QACf0E,iBAAiB,EAAE;OACpB,CAAC;IACJ,CAAC;IAAA;IAAA;MAAApQ,aAAA,GAAAuD,CAAA;IAAA;IAAAvD,aAAA,GAAAW,CAAA;IAED,IAAIsJ,MAAM,CAACqE,UAAU,CAAChN,aAAa,GAAG,GAAG,EAAE;MAAA;MAAAtB,aAAA,GAAAuD,CAAA;MAAAvD,aAAA,GAAAW,CAAA;MACzCwP,MAAM,CAAClD,IAAI,CAAC;QACVnJ,IAAI,EAAE,UAAU;QAChB2H,QAAQ,EAAExB,MAAM,CAACqE,UAAU,CAAChN,aAAa,GAAG,GAAG;QAAA;QAAA,CAAAtB,aAAA,GAAAuD,CAAA,WAAG,UAAU;QAAA;QAAA,CAAAvD,aAAA,GAAAuD,CAAA,WAAG,MAAM;QACrE6H,OAAO,EAAE,yCAAyC;QAClDG,SAAS,EAAE,IAAInB,IAAI,EAAE;QACrBsB,QAAQ,EAAE,KAAK;QACf0E,iBAAiB,EAAE;OACpB,CAAC;IACJ,CAAC;IAAA;IAAA;MAAApQ,aAAA,GAAAuD,CAAA;IAAA;IAAAvD,aAAA,GAAAW,CAAA;IAEDsJ,MAAM,CAACkG,MAAM,GAAGA,MAAM;EACxB;EAEQpC,eAAeA,CAAA;IAAA;IAAA/N,aAAA,GAAAyB,CAAA;IACrB,MAAM0M,GAAG;IAAA;IAAA,CAAAnO,aAAA,GAAAW,CAAA,SAAGyJ,IAAI,CAAC+D,GAAG,EAAE;IACtB,MAAMkC,OAAO;IAAA;IAAA,CAAArQ,aAAA,GAAAW,CAAA,SAAG,IAAI,CAACF,MAAM,CAACU,iBAAiB,GAAG,CAAC;IAAC;IAAAnB,aAAA,GAAAW,CAAA;IAElD,KAAK,MAAM,CAACyC,OAAO,EAAEsG,KAAK,CAAC,IAAId,KAAK,CAACC,IAAI,CAAC,IAAI,CAACnI,MAAM,CAAC4P,OAAO,EAAE,CAAC,EAAE;MAChE,MAAMvB,kBAAkB;MAAA;MAAA,CAAA/O,aAAA,GAAAW,CAAA,SAAGwN,GAAG,GAAGzE,KAAK,CAACS,aAAa,CAAC6E,OAAO,EAAE;MAAC;MAAAhP,aAAA,GAAAW,CAAA;MAE/D;MACE;MAAA,CAAAX,aAAA,GAAAuD,CAAA,WAAAwL,kBAAkB,GAAGsB,OAAO;MAAA;MAAA,CAAArQ,aAAA,GAAAuD,CAAA,WAC5BmG,KAAK,CAACI,MAAM,KAAK,SAAS;MAAA;MAAA,CAAA9J,aAAA,GAAAuD,CAAA,WAC1BmG,KAAK,CAACI,MAAM,KAAK,YAAY,GAC7B;QAAA;QAAA9J,aAAA,GAAAuD,CAAA;QAAAvD,aAAA,GAAAW,CAAA;QACA,IAAI,CAACL,MAAM,CAACwO,IAAI,CAAC,yBAAyB,EAAE;UAAE1L,OAAO;UAAE2L;QAAkB,CAAE,CAAC;QAAC;QAAA/O,aAAA,GAAAW,CAAA;QAE7E+I,KAAK,CAACI,MAAM,GAAG,OAAO;QAAC;QAAA9J,aAAA,GAAAW,CAAA;QACvB,IAAI,CAAC2K,aAAa,CAAClI,OAAO,EAAE;UAC1BmI,SAAS,EAAE,IAAInB,IAAI,EAAE;UACrBtG,IAAI,EAAE,mBAAmB;UACzBsH,OAAO,EAAE,sDAAsD;UAC/DI,OAAO,EAAE;YAAE6E,OAAO;YAAEtB;UAAkB,CAAE;UACxCtD,QAAQ,EAAE,MAAM;UAChBC,QAAQ,EAAE;SACX,CAAC;QAAC;QAAA1L,aAAA,GAAAW,CAAA;QAEH,IAAI,CAAC6H,IAAI,CAAC,yBAAyB,EAAE;UAAEpF,OAAO;UAAE2L;QAAkB,CAAE,CAAC;QAErE;QAAA;QAAA/O,aAAA,GAAAW,CAAA;QACA,IAAI,IAAI,CAACF,MAAM,CAACoB,WAAW,EAAE;UAAA;UAAA7B,aAAA,GAAAuD,CAAA;UAAAvD,aAAA,GAAAW,CAAA;UAC3B,IAAI,CAACsL,YAAY,CAAC7I,OAAO,EAAE,mBAAmB,CAAC,CAACmN,KAAK,CAAErF,KAAK,IAAI;YAAA;YAAAlL,aAAA,GAAAyB,CAAA;YAAAzB,aAAA,GAAAW,CAAA;YAC9D,IAAI,CAACL,MAAM,CAAC4K,KAAK,CAAC,8BAA8B,EAAE;cAAE9H,OAAO;cAAE8H;YAAK,CAAE,CAAC;UACvE,CAAC,CAAC;QACJ,CAAC;QAAA;QAAA;UAAAlL,aAAA,GAAAuD,CAAA;QAAA;MACH,CAAC;MAAA;MAAA;QAAAvD,aAAA,GAAAuD,CAAA;MAAA;IACH;EACF;EAEA;EAEQ,MAAMyH,iBAAiBA,CAACtB,KAAiB;IAAA;IAAA1J,aAAA,GAAAyB,CAAA;IAC/C,MAAM+O,GAAG;IAAA;IAAA,CAAAxQ,aAAA,GAAAW,CAAA,SAAsB;MAC7B,GAAGoK,OAAO,CAACyF,GAAG;MACdC,QAAQ,EAAE/G,KAAK,CAACC,EAAE,CAACA,EAAE;MACrB+G,UAAU,EAAEhH,KAAK,CAAC5F,IAAI;MACtB6M,UAAU,EAAEjH,KAAK,CAAC7F,IAAI;MACtB+M,WAAW,EAAElH,KAAK,CAAC7D,WAAW,CAACtD,gBAAgB;MAC/CsO,OAAO,EAAEnH,KAAK,CAAC7D,WAAW,CAACpD;KAC5B;IAED,MAAMqO,IAAI;IAAA;IAAA,CAAA9Q,aAAA,GAAAW,CAAA,SAAG,CACX,KAAK,EACL,aAAa;IACb;IAAA,CAAAX,aAAA,GAAAuD,CAAA,WAAAmG,KAAK,CAAC7D,WAAW,CAACI,cAAc,CAAC,CAAC,CAAC;IAAA;IAAA,CAAAjG,aAAA,GAAAuD,CAAA,WAAI,2BAA2B,GAClE,UAAU,EACVwN,IAAI,CAACC,SAAS,CAACtH,KAAK,CAACjJ,MAAM,CAAC,CAC7B;IAED,MAAMwQ,YAAY;IAAA;IAAA,CAAAjR,aAAA,GAAAW,CAAA,SAAGR,KAAK,CAACuJ,KAAK,CAAC7D,WAAW,CAACvD,OAAO,EAAEwO,IAAI,EAAE;MAC1DN,GAAG;MACHU,KAAK,EAAE,CAAC,MAAM,EAAE,MAAM,EAAE,MAAM,CAAC;MAC/BC,GAAG,EAAEzH,KAAK,CAAC7D,WAAW,CAACtD;KACxB,CAAC;IAEF;IAAA;IAAAvC,aAAA,GAAAW,CAAA;IACAsQ,YAAY,CAACrO,EAAE,CAAC,MAAM,EAAGwO,IAAmB,IAAI;MAAA;MAAApR,aAAA,GAAAyB,CAAA;MAAAzB,aAAA,GAAAW,CAAA;MAC9C,IAAI,CAAC0Q,iBAAiB,CAAC3H,KAAK,CAACC,EAAE,CAACA,EAAE,EAAEyH,IAAI,CAAC;IAC3C,CAAC,CAAC;IAAC;IAAApR,aAAA,GAAAW,CAAA;IAEHsQ,YAAY,CAACrO,EAAE,CAAC,OAAO,EAAGsI,KAAY,IAAI;MAAA;MAAAlL,aAAA,GAAAyB,CAAA;MAAAzB,aAAA,GAAAW,CAAA;MACxC,IAAI,CAAC2Q,kBAAkB,CAAC5H,KAAK,CAACC,EAAE,CAACA,EAAE,EAAEuB,KAAK,CAAC;IAC7C,CAAC,CAAC;IAAC;IAAAlL,aAAA,GAAAW,CAAA;IAEH,OAAOsQ,YAAY;EACrB;EAEQ,MAAMhG,iBAAiBA,CAAC7H,OAAe,EAAEiN,OAAe;IAAA;IAAArQ,aAAA,GAAAyB,CAAA;IAAAzB,aAAA,GAAAW,CAAA;IAC9D,OAAO,IAAIsI,OAAO,CAAC,CAACsI,OAAO,EAAEC,MAAM,KAAI;MAAA;MAAAxR,aAAA,GAAAyB,CAAA;MACrC,MAAMgQ,KAAK;MAAA;MAAA,CAAAzR,aAAA,GAAAW,CAAA,SAAGmL,UAAU,CAAC,MAAK;QAAA;QAAA9L,aAAA,GAAAyB,CAAA;QAAAzB,aAAA,GAAAW,CAAA;QAC5B6Q,MAAM,CAAC,IAAIlI,KAAK,CAAC,SAASlG,OAAO,kBAAkB,CAAC,CAAC;MACvD,CAAC,EAAEiN,OAAO,CAAC;MAAC;MAAArQ,aAAA,GAAAW,CAAA;MAEZ,MAAM+Q,OAAO,GAAI7O,IAAa,IAAI;QAAA;QAAA7C,aAAA,GAAAyB,CAAA;QAChC,MAAMkQ,SAAS;QAAA;QAAA,CAAA3R,aAAA,GAAAW,CAAA,SAAGkC,IAA2B;QAAC;QAAA7C,aAAA,GAAAW,CAAA;QAC9C,IAAIgR,SAAS,CAACvO,OAAO,KAAKA,OAAO,EAAE;UAAA;UAAApD,aAAA,GAAAuD,CAAA;UAAAvD,aAAA,GAAAW,CAAA;UACjCiR,YAAY,CAACH,KAAK,CAAC;UAAC;UAAAzR,aAAA,GAAAW,CAAA;UACpB,IAAI,CAACJ,QAAQ,CAACsR,GAAG,CAAC,aAAa,EAAEH,OAAO,CAAC;UAAC;UAAA1R,aAAA,GAAAW,CAAA;UAC1C4Q,OAAO,EAAE;QACX,CAAC;QAAA;QAAA;UAAAvR,aAAA,GAAAuD,CAAA;QAAA;MACH,CAAC;MAAC;MAAAvD,aAAA,GAAAW,CAAA;MAEF,IAAI,CAACJ,QAAQ,CAACqC,EAAE,CAAC,aAAa,EAAE8O,OAAO,CAAC;IAC1C,CAAC,CAAC;EACJ;EAEQ,MAAM3F,kBAAkBA,CAAC3I,OAAe,EAAEiN,OAAe;IAAA;IAAArQ,aAAA,GAAAyB,CAAA;IAAAzB,aAAA,GAAAW,CAAA;IAC/D,OAAO,IAAIsI,OAAO,CAAEsI,OAAO,IAAI;MAAA;MAAAvR,aAAA,GAAAyB,CAAA;MAC7B,MAAMsJ,OAAO;MAAA;MAAA,CAAA/K,aAAA,GAAAW,CAAA,SAAG,IAAI,CAACE,SAAS,CAAC2I,GAAG,CAACpG,OAAO,CAAC;MAAC;MAAApD,aAAA,GAAAW,CAAA;MAC5C;MAAI;MAAA,CAAAX,aAAA,GAAAuD,CAAA,YAACwH,OAAO;MAAA;MAAA,CAAA/K,aAAA,GAAAuD,CAAA,WAAIwH,OAAO,CAACa,MAAM,GAAE;QAAA;QAAA5L,aAAA,GAAAuD,CAAA;QAAAvD,aAAA,GAAAW,CAAA;QAC9B4Q,OAAO,EAAE;QAAC;QAAAvR,aAAA,GAAAW,CAAA;QACV;MACF,CAAC;MAAA;MAAA;QAAAX,aAAA,GAAAuD,CAAA;MAAA;MAED,MAAMkO,KAAK;MAAA;MAAA,CAAAzR,aAAA,GAAAW,CAAA,SAAGmL,UAAU,CAAC,MAAK;QAAA;QAAA9L,aAAA,GAAAyB,CAAA;QAAAzB,aAAA,GAAAW,CAAA;QAC5B4Q,OAAO,EAAE,CAAC,CAAC;MACb,CAAC,EAAElB,OAAO,CAAC;MAAC;MAAArQ,aAAA,GAAAW,CAAA;MAEZoK,OAAO,CAACnI,EAAE,CAAC,MAAM,EAAE,MAAK;QAAA;QAAA5C,aAAA,GAAAyB,CAAA;QAAAzB,aAAA,GAAAW,CAAA;QACtBiR,YAAY,CAACH,KAAK,CAAC;QAAC;QAAAzR,aAAA,GAAAW,CAAA;QACpB4Q,OAAO,EAAE;MACX,CAAC,CAAC;IACJ,CAAC,CAAC;EACJ;EAEQF,iBAAiBA,CAACjO,OAAe,EAAEgO,IAAmB;IAAA;IAAApR,aAAA,GAAAyB,CAAA;IAC5D,MAAMiI,KAAK;IAAA;IAAA,CAAA1J,aAAA,GAAAW,CAAA,SAAG,IAAI,CAACD,MAAM,CAAC8I,GAAG,CAACpG,OAAO,CAAC;IAAC;IAAApD,aAAA,GAAAW,CAAA;IACvC,IAAI,CAAC+I,KAAK,EAAE;MAAA;MAAA1J,aAAA,GAAAuD,CAAA;MAAAvD,aAAA,GAAAW,CAAA;MAAA;IAAA,CAAO;IAAA;IAAA;MAAAX,aAAA,GAAAuD,CAAA;IAAA;IAAAvD,aAAA,GAAAW,CAAA;IAEnB,IAAI,CAACL,MAAM,CAAC6H,IAAI,CAAC,sBAAsB,EAAE;MAAE/E,OAAO;MAAE0O,QAAQ,EAAEV;IAAI,CAAE,CAAC;IAAC;IAAApR,aAAA,GAAAW,CAAA;IAEtE;IAAI;IAAA,CAAAX,aAAA,GAAAuD,CAAA,WAAA6N,IAAI,KAAK,CAAC;IAAA;IAAA,CAAApR,aAAA,GAAAuD,CAAA,WAAI6N,IAAI,KAAK,IAAI,GAAE;MAAA;MAAApR,aAAA,GAAAuD,CAAA;MAAAvD,aAAA,GAAAW,CAAA;MAC/B,IAAI,CAAC2K,aAAa,CAAClI,OAAO,EAAE;QAC1BmI,SAAS,EAAE,IAAInB,IAAI,EAAE;QACrBtG,IAAI,EAAE,cAAc;QACpBsH,OAAO,EAAE,kCAAkCgG,IAAI,EAAE;QACjD5F,OAAO,EAAE;UAAEsG,QAAQ,EAAEV;QAAI,CAAE;QAC3B3F,QAAQ,EAAE,MAAM;QAChBC,QAAQ,EAAE;OACX,CAAC;IACJ,CAAC;IAAA;IAAA;MAAA1L,aAAA,GAAAuD,CAAA;IAAA;IAAAvD,aAAA,GAAAW,CAAA;IAED+I,KAAK,CAACI,MAAM,GAAG,SAAS;IAAC;IAAA9J,aAAA,GAAAW,CAAA;IACzB,IAAI,CAAC6H,IAAI,CAAC,oBAAoB,EAAE;MAAEpF,OAAO;MAAE0O,QAAQ,EAAEV;IAAI,CAAE,CAAC;EAC9D;EAEQE,kBAAkBA,CAAClO,OAAe,EAAE8H,KAAY;IAAA;IAAAlL,aAAA,GAAAyB,CAAA;IAAAzB,aAAA,GAAAW,CAAA;IACtD,IAAI,CAACL,MAAM,CAAC4K,KAAK,CAAC,qBAAqB,EAAE;MAAE9H,OAAO;MAAE8H;IAAK,CAAE,CAAC;IAAC;IAAAlL,aAAA,GAAAW,CAAA;IAE7D,IAAI,CAAC2K,aAAa,CAAClI,OAAO,EAAE;MAC1BmI,SAAS,EAAE,IAAInB,IAAI,EAAE;MACrBtG,IAAI,EAAE,eAAe;MACrBsH,OAAO,EAAEF,KAAK,YAAY5B,KAAK;MAAA;MAAA,CAAAtJ,aAAA,GAAAuD,CAAA,WAAG2H,KAAK,CAACE,OAAO;MAAA;MAAA,CAAApL,aAAA,GAAAuD,CAAA,WAAG8H,MAAM,CAACH,KAAK,CAAC;MAC/DM,OAAO,EAAE;QAAEN,KAAK,EAAEA,KAAK,CAAC6G,QAAQ;MAAE,CAAE;MACpCtG,QAAQ,EAAE,UAAU;MACpBC,QAAQ,EAAE;KACX,CAAC;IAAC;IAAA1L,aAAA,GAAAW,CAAA;IAEH,IAAI,CAAC6H,IAAI,CAAC,qBAAqB,EAAE;MAAEpF,OAAO;MAAE8H;IAAK,CAAE,CAAC;EACtD;EAEQnI,eAAeA,CAACF,IAIvB;IAAA;IAAA7C,aAAA,GAAAyB,CAAA;IACC,MAAMiI,KAAK;IAAA;IAAA,CAAA1J,aAAA,GAAAW,CAAA,SAAG,IAAI,CAACD,MAAM,CAAC8I,GAAG,CAAC3G,IAAI,CAACO,OAAO,CAAC;IAAC;IAAApD,aAAA,GAAAW,CAAA;IAC5C,IAAI,CAAC+I,KAAK,EAAE;MAAA;MAAA1J,aAAA,GAAAuD,CAAA;MAAAvD,aAAA,GAAAW,CAAA;MAAA;IAAA,CAAO;IAAA;IAAA;MAAAX,aAAA,GAAAuD,CAAA;IAAA;IAAAvD,aAAA,GAAAW,CAAA;IAEnB+I,KAAK,CAACS,aAAa,GAAGtH,IAAI,CAAC0I,SAAS;IAAC;IAAAvL,aAAA,GAAAW,CAAA;IAErC,IAAIkC,IAAI,CAACS,OAAO,EAAE;MAAA;MAAAtD,aAAA,GAAAuD,CAAA;MAAAvD,aAAA,GAAAW,CAAA;MAChB,IAAI,CAAC6C,kBAAkB,CAACX,IAAI,CAACO,OAAO,EAAEP,IAAI,CAACS,OAAO,CAAC;IACrD,CAAC;IAAA;IAAA;MAAAtD,aAAA,GAAAuD,CAAA;IAAA;IAED;IAAAvD,aAAA,GAAAW,CAAA;IACA,IAAI+I,KAAK,CAACI,MAAM,KAAK,OAAO,EAAE;MAAA;MAAA9J,aAAA,GAAAuD,CAAA;MAAAvD,aAAA,GAAAW,CAAA;MAC5B+I,KAAK,CAACI,MAAM,GAAG,MAAM;MAAC;MAAA9J,aAAA,GAAAW,CAAA;MACtB,IAAI,CAACmK,iBAAiB,CAACjI,IAAI,CAACO,OAAO,EAAE,MAAM,CAAC;IAC9C,CAAC;IAAA;IAAA;MAAApD,aAAA,GAAAuD,CAAA;IAAA;EACH;EAEQN,gBAAgBA,CAACJ,IAA4C;IAAA;IAAA7C,aAAA,GAAAyB,CAAA;IAAAzB,aAAA,GAAAW,CAAA;IACnE,IAAI,CAAC2K,aAAa,CAACzI,IAAI,CAACO,OAAO,EAAEP,IAAI,CAACqI,KAAK,CAAC;IAE5C,MAAMxB,KAAK;IAAA;IAAA,CAAA1J,aAAA,GAAAW,CAAA,SAAG,IAAI,CAACD,MAAM,CAAC8I,GAAG,CAAC3G,IAAI,CAACO,OAAO,CAAC;IAAC;IAAApD,aAAA,GAAAW,CAAA;IAC5C;IAAI;IAAA,CAAAX,aAAA,GAAAuD,CAAA,WAAAmG,KAAK;IAAA;IAAA,CAAA1J,aAAA,GAAAuD,CAAA,WAAIV,IAAI,CAACqI,KAAK,CAACO,QAAQ,KAAK,UAAU,GAAE;MAAA;MAAAzL,aAAA,GAAAuD,CAAA;MAAAvD,aAAA,GAAAW,CAAA;MAC/C+I,KAAK,CAACI,MAAM,GAAG,OAAO;MAAC;MAAA9J,aAAA,GAAAW,CAAA;MACvB,IAAI,CAACmK,iBAAiB,CAACjI,IAAI,CAACO,OAAO,EAAE,OAAO,CAAC;IAC/C,CAAC;IAAA;IAAA;MAAApD,aAAA,GAAAuD,CAAA;IAAA;EACH;EAEQuH,iBAAiBA,CAAC1H,OAAe,EAAE0G,MAAmB;IAAA;IAAA9J,aAAA,GAAAyB,CAAA;IAC5D,MAAMiI,KAAK;IAAA;IAAA,CAAA1J,aAAA,GAAAW,CAAA,SAAG,IAAI,CAACD,MAAM,CAAC8I,GAAG,CAACpG,OAAO,CAAC;IAAC;IAAApD,aAAA,GAAAW,CAAA;IACvC,IAAI,CAAC+I,KAAK,EAAE;MAAA;MAAA1J,aAAA,GAAAuD,CAAA;MAAAvD,aAAA,GAAAW,CAAA;MAAA;IAAA,CAAO;IAAA;IAAA;MAAAX,aAAA,GAAAuD,CAAA;IAAA;IAEnB,MAAMyO,SAAS;IAAA;IAAA,CAAAhS,aAAA,GAAAW,CAAA,SAAG+I,KAAK,CAACI,MAAM;IAAC;IAAA9J,aAAA,GAAAW,CAAA;IAC/B+I,KAAK,CAACI,MAAM,GAAGA,MAAM;IAAC;IAAA9J,aAAA,GAAAW,CAAA;IAEtB,IAAI,CAAC6H,IAAI,CAAC,sBAAsB,EAAE;MAAEpF,OAAO;MAAEyF,IAAI,EAAEmJ,SAAS;MAAEC,EAAE,EAAEnI;IAAM,CAAE,CAAC;EAC7E;EAEQ3G,mBAAmBA,CAACC,OAAe,EAAEgK,KAAa;IAAA;IAAApN,aAAA,GAAAyB,CAAA;IACxD,MAAMiI,KAAK;IAAA;IAAA,CAAA1J,aAAA,GAAAW,CAAA,SAAG,IAAI,CAACD,MAAM,CAAC8I,GAAG,CAACpG,OAAO,CAAC;IAAC;IAAApD,aAAA,GAAAW,CAAA;IACvC,IAAI,CAAC+I,KAAK,EAAE;MAAA;MAAA1J,aAAA,GAAAuD,CAAA;MAAAvD,aAAA,GAAAW,CAAA;MAAA;IAAA,CAAO;IAAA;IAAA;MAAAX,aAAA,GAAAuD,CAAA;IAAA;IAAAvD,aAAA,GAAAW,CAAA;IAEnB+I,KAAK,CAACM,QAAQ,GAAGsD,IAAI,CAACoC,GAAG,CAAC,CAAC,EAAEhG,KAAK,CAACM,QAAQ,GAAGoD,KAAK,CAAC;EACtD;EAEQ5J,kBAAkBA,CAACJ,OAAe,EAAEE,OAAqB;IAAA;IAAAtD,aAAA,GAAAyB,CAAA;IAC/D,MAAMiI,KAAK;IAAA;IAAA,CAAA1J,aAAA,GAAAW,CAAA,SAAG,IAAI,CAACD,MAAM,CAAC8I,GAAG,CAACpG,OAAO,CAAC;IAAC;IAAApD,aAAA,GAAAW,CAAA;IACvC,IAAI,CAAC+I,KAAK,EAAE;MAAA;MAAA1J,aAAA,GAAAuD,CAAA;MAAAvD,aAAA,GAAAW,CAAA;MAAA;IAAA,CAAO;IAAA;IAAA;MAAAX,aAAA,GAAAuD,CAAA;IAAA;IAAAvD,aAAA,GAAAW,CAAA;IAEnB+I,KAAK,CAACpG,OAAO,GAAG;MAAE,GAAGoG,KAAK,CAACpG,OAAO;MAAE,GAAGA;IAAO,CAAE;IAEhD;IACA,MAAM2L,OAAO;IAAA;IAAA,CAAAjP,aAAA,GAAAW,CAAA;IAAG;IAAA,CAAAX,aAAA,GAAAuD,CAAA,eAAI,CAAChC,kBAAkB,CAACiI,GAAG,CAACpG,OAAO,CAAC;IAAA;IAAA,CAAApD,aAAA,GAAAuD,CAAA,WAAI,EAAE;IAAC;IAAAvD,aAAA,GAAAW,CAAA;IAC3DsO,OAAO,CAAChC,IAAI,CAAC;MAAE1B,SAAS,EAAE,IAAInB,IAAI,EAAE;MAAE9G,OAAO,EAAE;QAAE,GAAGA;MAAO;IAAE,CAAE,CAAC;IAEhE;IAAA;IAAAtD,aAAA,GAAAW,CAAA;IACA,IAAIsO,OAAO,CAACC,MAAM,GAAG,GAAG,EAAE;MAAA;MAAAlP,aAAA,GAAAuD,CAAA;MAAAvD,aAAA,GAAAW,CAAA;MACxBsO,OAAO,CAACiD,KAAK,EAAE;IACjB,CAAC;IAAA;IAAA;MAAAlS,aAAA,GAAAuD,CAAA;IAAA;IAAAvD,aAAA,GAAAW,CAAA;IAED,IAAI,CAACY,kBAAkB,CAACqC,GAAG,CAACR,OAAO,EAAE6L,OAAO,CAAC;EAC/C;EAEQvL,mBAAmBA,CACzBN,OAAe,EACfO,KAAoD;IAAA;IAAA3D,aAAA,GAAAyB,CAAA;IAAAzB,aAAA,GAAAW,CAAA;IAEpD,IAAI,CAACW,aAAa,CAACsC,GAAG,CAACR,OAAO,EAAEO,KAAK,CAAC;EACxC;EAEQ2H,aAAaA,CAAClI,OAAe,EAAE8H,KAAiB;IAAA;IAAAlL,aAAA,GAAAyB,CAAA;IACtD,MAAMiI,KAAK;IAAA;IAAA,CAAA1J,aAAA,GAAAW,CAAA,SAAG,IAAI,CAACD,MAAM,CAAC8I,GAAG,CAACpG,OAAO,CAAC;IAAC;IAAApD,aAAA,GAAAW,CAAA;IACvC,IAAI,CAAC+I,KAAK,EAAE;MAAA;MAAA1J,aAAA,GAAAuD,CAAA;MAAAvD,aAAA,GAAAW,CAAA;MAAA;IAAA,CAAO;IAAA;IAAA;MAAAX,aAAA,GAAAuD,CAAA;IAAA;IAAAvD,aAAA,GAAAW,CAAA;IAEnB+I,KAAK,CAACY,YAAY,CAAC2C,IAAI,CAAC/B,KAAK,CAAC;IAE9B;IAAA;IAAAlL,aAAA,GAAAW,CAAA;IACA,IAAI+I,KAAK,CAACY,YAAY,CAAC4E,MAAM,GAAG,EAAE,EAAE;MAAA;MAAAlP,aAAA,GAAAuD,CAAA;MAAAvD,aAAA,GAAAW,CAAA;MAClC+I,KAAK,CAACY,YAAY,CAAC4H,KAAK,EAAE;IAC5B,CAAC;IAAA;IAAA;MAAAlS,aAAA,GAAAuD,CAAA;IAAA;EACH;EAEQwG,oBAAoBA,CAAA;IAAA;IAAA/J,aAAA,GAAAyB,CAAA;IAAAzB,aAAA,GAAAW,CAAA;IAC1B,OAAO;MACLkP,cAAc,EAAE,CAAC;MACjBC,WAAW,EAAE,CAAC;MACdN,oBAAoB,EAAE,CAAC;MACvB2C,WAAW,EAAE,GAAG;MAChBC,QAAQ,EAAE,CAAC;MACXC,WAAW,EAAE,CAAC;MACdC,SAAS,EAAE,CAAC;MACZC,YAAY,EAAE,CAAC;MACfC,WAAW,EAAE,GAAG;MAChBC,YAAY,EAAE,CAAC;MACfC,OAAO,EAAE,CAAC;MACVC,gBAAgB,EAAE,GAAG;MACrBC,WAAW,EAAE,CAAC;MACdC,YAAY,EAAE,IAAIzI,IAAI,EAAE;MACxB0I,YAAY,EAAE;KACf;EACH;EAEQrI,mBAAmBA,CAACrH,OAAe;IAAA;IAAApD,aAAA,GAAAyB,CAAA;IAAAzB,aAAA,GAAAW,CAAA;IACzC,OAAO;MACLyC,OAAO;MACPuL,OAAO,EAAE,GAAG;MACZL,UAAU,EAAE;QACVF,cAAc,EAAE,GAAG;QACnB3G,WAAW,EAAE,GAAG;QAChBxC,WAAW,EAAE,GAAG;QAChB3D,aAAa,EAAE;OAChB;MACD6O,MAAM,EAAE,EAAE;MACVvB,SAAS,EAAE,IAAIxE,IAAI,EAAE;MACrB2I,KAAK,EAAE;KACR;EACH;EAEQ5G,+BAA+BA,CAAC/I,OAAe;IAAA;IAAApD,aAAA,GAAAyB,CAAA;IAAAzB,aAAA,GAAAW,CAAA;IACrD;IACA,KAAK,MAAM4L,IAAI,IAAI3D,KAAK,CAACC,IAAI,CAAC,IAAI,CAAC7H,KAAK,CAACgS,MAAM,EAAE,CAAC,EAAE;MAAA;MAAAhT,aAAA,GAAAW,CAAA;MAClD4L,IAAI,CAACI,eAAe,GAAGJ,IAAI,CAACI,eAAe,CAACa,MAAM,CAAEC,CAAC,IAAK;QAAA;QAAAzN,aAAA,GAAAyB,CAAA;QAAAzB,aAAA,GAAAW,CAAA;QAAA,OAAA8M,CAAC,CAAC9D,EAAE,KAAKvG,OAAO;MAAP,CAAO,CAAC;MAAC;MAAApD,aAAA,GAAAW,CAAA;MAC5E4L,IAAI,CAACK,UAAU,GAAGL,IAAI,CAACK,UAAU,CAACY,MAAM,CAAEC,CAAC,IAAK;QAAA;QAAAzN,aAAA,GAAAyB,CAAA;QAAAzB,aAAA,GAAAW,CAAA;QAAA,OAAA8M,CAAC,CAAC9D,EAAE,KAAKvG,OAAO;MAAP,CAAO,CAAC;MAAC;MAAApD,aAAA,GAAAW,CAAA;MAClE4L,IAAI,CAACG,WAAW,GAAGH,IAAI,CAACI,eAAe,CAACuC,MAAM,GAAG3C,IAAI,CAACK,UAAU,CAACsC,MAAM;IACzE;IAEA;IAAA;IAAAlP,aAAA,GAAAW,CAAA;IACA,KAAK,MAAMsS,OAAO,IAAIrK,KAAK,CAACC,IAAI,CAAC,IAAI,CAAC9H,QAAQ,CAACiS,MAAM,EAAE,CAAC,EAAE;MAAA;MAAAhT,aAAA,GAAAW,CAAA;MACxDsS,OAAO,CAACvS,MAAM,GAAGuS,OAAO,CAACvS,MAAM,CAAC8M,MAAM,CAAEC,CAAC,IAAK;QAAA;QAAAzN,aAAA,GAAAyB,CAAA;QAAAzB,aAAA,GAAAW,CAAA;QAAA,OAAA8M,CAAC,CAAC9D,EAAE,KAAKvG,OAAO;MAAP,CAAO,CAAC;IACjE;EACF;EAEQmF,yBAAyBA,CAAA;IAAA;IAAAvI,aAAA,GAAAyB,CAAA;IAC/B;IACA,MAAMyR,aAAa;IAAA;IAAA,CAAAlT,aAAA,GAAAW,CAAA,SAAkB;MACnCkD,IAAI,EAAE,mBAAmB;MACzBsP,OAAO,EAAE,IAAI;MACbC,cAAc,EAAE,MAAM;MAAE;MACxBC,kBAAkB,EAAE,EAAE;MACtBC,KAAK,EAAE,CACL;QACEC,MAAM,EAAE,kBAAkB;QAC1BC,SAAS,EAAE,GAAG;QACdC,UAAU,EAAE,IAAI;QAChBC,MAAM,EAAE,UAAU;QAClBC,MAAM,EAAE;OACT,EACD;QACEJ,MAAM,EAAE,kBAAkB;QAC1BC,SAAS,EAAE,GAAG;QACdC,UAAU,EAAE,IAAI;QAChBC,MAAM,EAAE,YAAY;QACpBC,MAAM,EAAE;OACT;KAEJ;IAAC;IAAA3T,aAAA,GAAAW,CAAA;IAEF,IAAI,CAACS,eAAe,CAACwC,GAAG,CAAC,SAAS,EAAEsP,aAAa,CAAC;EACpD;EAEA;EAEAU,QAAQA,CAACxQ,OAAe;IAAA;IAAApD,aAAA,GAAAyB,CAAA;IAAAzB,aAAA,GAAAW,CAAA;IACtB,OAAO,IAAI,CAACD,MAAM,CAAC8I,GAAG,CAACpG,OAAO,CAAC;EACjC;EAEAyQ,YAAYA,CAAA;IAAA;IAAA7T,aAAA,GAAAyB,CAAA;IAAAzB,aAAA,GAAAW,CAAA;IACV,OAAOiI,KAAK,CAACC,IAAI,CAAC,IAAI,CAACnI,MAAM,CAACsS,MAAM,EAAE,CAAC;EACzC;EAEAc,eAAeA,CAAChQ,IAAe;IAAA;IAAA9D,aAAA,GAAAyB,CAAA;IAAAzB,aAAA,GAAAW,CAAA;IAC7B,OAAOiI,KAAK,CAACC,IAAI,CAAC,IAAI,CAACnI,MAAM,CAACsS,MAAM,EAAE,CAAC,CAACxF,MAAM,CAAE9D,KAAK,IAAK;MAAA;MAAA1J,aAAA,GAAAyB,CAAA;MAAAzB,aAAA,GAAAW,CAAA;MAAA,OAAA+I,KAAK,CAAC5F,IAAI,KAAKA,IAAI;IAAJ,CAAI,CAAC;EAChF;EAEAiQ,iBAAiBA,CAACjK,MAAmB;IAAA;IAAA9J,aAAA,GAAAyB,CAAA;IAAAzB,aAAA,GAAAW,CAAA;IACnC,OAAOiI,KAAK,CAACC,IAAI,CAAC,IAAI,CAACnI,MAAM,CAACsS,MAAM,EAAE,CAAC,CAACxF,MAAM,CAAE9D,KAAK,IAAK;MAAA;MAAA1J,aAAA,GAAAyB,CAAA;MAAAzB,aAAA,GAAAW,CAAA;MAAA,OAAA+I,KAAK,CAACI,MAAM,KAAKA,MAAM;IAAN,CAAM,CAAC;EACpF;EAEAkK,cAAcA,CAAC5Q,OAAe;IAAA;IAAApD,aAAA,GAAAyB,CAAA;IAAAzB,aAAA,GAAAW,CAAA;IAC5B,OAAO,IAAI,CAACM,YAAY,CAACuI,GAAG,CAACpG,OAAO,CAAC;EACvC;EAEA6Q,OAAOA,CAAC3H,MAAc;IAAA;IAAAtM,aAAA,GAAAyB,CAAA;IAAAzB,aAAA,GAAAW,CAAA;IACpB,OAAO,IAAI,CAACK,KAAK,CAACwI,GAAG,CAAC8C,MAAM,CAAC;EAC/B;EAEA4H,WAAWA,CAAA;IAAA;IAAAlU,aAAA,GAAAyB,CAAA;IAAAzB,aAAA,GAAAW,CAAA;IACT,OAAOiI,KAAK,CAACC,IAAI,CAAC,IAAI,CAAC7H,KAAK,CAACgS,MAAM,EAAE,CAAC;EACxC;EAEAmB,iBAAiBA,CAAA;IAAA;IAAAnU,aAAA,GAAAyB,CAAA;IAAAzB,aAAA,GAAAW,CAAA;IACf,OAAOiI,KAAK,CAACC,IAAI,CAAC,IAAI,CAAC/H,SAAS,CAACkS,MAAM,EAAE,CAAC;EAC5C;EAEAoB,cAAcA,CAAA;IAAA;IAAApU,aAAA,GAAAyB,CAAA;IASZ,MAAMf,MAAM;IAAA;IAAA,CAAAV,aAAA,GAAAW,CAAA,SAAGiI,KAAK,CAACC,IAAI,CAAC,IAAI,CAACnI,MAAM,CAACsS,MAAM,EAAE,CAAC;IAC/C,MAAM/R,YAAY;IAAA;IAAA,CAAAjB,aAAA,GAAAW,CAAA,SAAGiI,KAAK,CAACC,IAAI,CAAC,IAAI,CAAC5H,YAAY,CAAC+R,MAAM,EAAE,CAAC;IAE3D,MAAMqB,aAAa;IAAA;IAAA,CAAArU,aAAA,GAAAW,CAAA,SAAGM,YAAY,CAACuM,MAAM,CAAE8G,CAAC,IAAK;MAAA;MAAAtU,aAAA,GAAAyB,CAAA;MAAAzB,aAAA,GAAAW,CAAA;MAAA,OAAA2T,CAAC,CAAC3F,OAAO,GAAG,GAAG;IAAH,CAAG,CAAC,CAACO,MAAM;IACxE,MAAMqF,aAAa;IAAA;IAAA,CAAAvU,aAAA,GAAAW,CAAA;IACjB;IAAA,CAAAX,aAAA,GAAAuD,CAAA,WAAAtC,YAAY,CAACoO,MAAM,CAAC,CAACC,GAAG,EAAEgF,CAAC,KAAK;MAAA;MAAAtU,aAAA,GAAAyB,CAAA;MAAAzB,aAAA,GAAAW,CAAA;MAAA,OAAA2O,GAAG,GAAGgF,CAAC,CAAC3F,OAAO;IAAP,CAAO,EAAE,CAAC,CAAC,GAAG1N,YAAY,CAACiO,MAAM;IAAA;IAAA,CAAAlP,aAAA,GAAAuD,CAAA,WAAI,CAAC;IAEhF,MAAMiR,cAAc;IAAA;IAAA,CAAAxU,aAAA,GAAAW,CAAA,SAAGiI,KAAK,CAACC,IAAI,CAAC,IAAI,CAACvH,aAAa,CAAC0R,MAAM,EAAE,CAAC;IAC9D,MAAMyB,MAAM;IAAA;IAAA,CAAAzU,aAAA,GAAAW,CAAA;IAAG;IAAA,CAAAX,aAAA,GAAAuD,CAAA,WAAAiR,cAAc,CAACnF,MAAM,CAAC,CAACC,GAAG,EAAEoF,CAAC,KAAK;MAAA;MAAA1U,aAAA,GAAAyB,CAAA;MAAAzB,aAAA,GAAAW,CAAA;MAAA,OAAA2O,GAAG,GAAGoF,CAAC,CAAC3S,GAAG;IAAH,CAAG,EAAE,CAAC,CAAC,GAAGyS,cAAc,CAACtF,MAAM;IAAA;IAAA,CAAAlP,aAAA,GAAAuD,CAAA,WAAI,CAAC;IAC7F,MAAMoR,SAAS;IAAA;IAAA,CAAA3U,aAAA,GAAAW,CAAA;IACb;IAAA,CAAAX,aAAA,GAAAuD,CAAA,WAAAiR,cAAc,CAACnF,MAAM,CAAC,CAACC,GAAG,EAAEoF,CAAC,KAAK;MAAA;MAAA1U,aAAA,GAAAyB,CAAA;MAAAzB,aAAA,GAAAW,CAAA;MAAA,OAAA2O,GAAG,GAAGoF,CAAC,CAAClU,MAAM;IAAN,CAAM,EAAE,CAAC,CAAC,GAAGgU,cAAc,CAACtF,MAAM;IAAA;IAAA,CAAAlP,aAAA,GAAAuD,CAAA,WAAI,CAAC;IACnF,MAAMqR,OAAO;IAAA;IAAA,CAAA5U,aAAA,GAAAW,CAAA;IAAG;IAAA,CAAAX,aAAA,GAAAuD,CAAA,WAAAiR,cAAc,CAACnF,MAAM,CAAC,CAACC,GAAG,EAAEoF,CAAC,KAAK;MAAA;MAAA1U,aAAA,GAAAyB,CAAA;MAAAzB,aAAA,GAAAW,CAAA;MAAA,OAAA2O,GAAG,GAAGoF,CAAC,CAAC1S,IAAI;IAAJ,CAAI,EAAE,CAAC,CAAC,GAAGwS,cAAc,CAACtF,MAAM;IAAA;IAAA,CAAAlP,aAAA,GAAAuD,CAAA,WAAI,CAAC;IAAC;IAAAvD,aAAA,GAAAW,CAAA;IAEhG,OAAO;MACLkU,WAAW,EAAEnU,MAAM,CAACwO,MAAM;MAC1B4F,YAAY,EAAEpU,MAAM,CAAC8M,MAAM,CAAEC,CAAC,IAAK;QAAA;QAAAzN,aAAA,GAAAyB,CAAA;QAAAzB,aAAA,GAAAW,CAAA;QAAA,kCAAAX,aAAA,GAAAuD,CAAA,WAAAkK,CAAC,CAAC3D,MAAM,KAAK,MAAM;QAAA;QAAA,CAAA9J,aAAA,GAAAuD,CAAA,WAAIkK,CAAC,CAAC3D,MAAM,KAAK,MAAM;MAAN,CAAM,CAAC,CAACoF,MAAM;MACrFmF,aAAa;MACbrT,KAAK,EAAE,IAAI,CAACA,KAAK,CAACoH,IAAI;MACtBrH,QAAQ,EAAE,IAAI,CAACA,QAAQ,CAACqH,IAAI;MAC5BmM,aAAa;MACbQ,mBAAmB,EAAE;QACnBhT,GAAG,EAAE0S,MAAM;QACXjU,MAAM,EAAEmU,SAAS;QACjB3S,IAAI,EAAE4S;;KAET;EACH","ignoreList":[]}