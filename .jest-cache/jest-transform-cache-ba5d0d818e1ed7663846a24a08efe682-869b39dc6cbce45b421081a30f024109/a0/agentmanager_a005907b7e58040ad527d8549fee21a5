0c94c567cdddf943f0c6d827bb0ab98e
/* istanbul ignore next */
function cov_dntaudbg3() {
  var path = "/home/mhugo/code/claude-code-flow/src/agents/agent-manager.ts";
  var hash = "90654db86b9b03d31648d3bc19ecd934479b7399";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/home/mhugo/code/claude-code-flow/src/agents/agent-manager.ts",
    statementMap: {
      "0": {
        start: {
          line: 16,
          column: 13
        },
        end: {
          line: 16,
          column: 22
        }
      },
      "1": {
        start: {
          line: 17,
          column: 16
        },
        end: {
          line: 17,
          column: 25
        }
      },
      "2": {
        start: {
          line: 18,
          column: 16
        },
        end: {
          line: 18,
          column: 25
        }
      },
      "3": {
        start: {
          line: 19,
          column: 15
        },
        end: {
          line: 19,
          column: 24
        }
      },
      "4": {
        start: {
          line: 20,
          column: 12
        },
        end: {
          line: 20,
          column: 21
        }
      },
      "5": {
        start: {
          line: 22,
          column: 19
        },
        end: {
          line: 22,
          column: 28
        }
      },
      "6": {
        start: {
          line: 26,
          column: 22
        },
        end: {
          line: 26,
          column: 31
        }
      },
      "7": {
        start: {
          line: 27,
          column: 24
        },
        end: {
          line: 27,
          column: 33
        }
      },
      "8": {
        start: {
          line: 29,
          column: 20
        },
        end: {
          line: 29,
          column: 29
        }
      },
      "9": {
        start: {
          line: 30,
          column: 25
        },
        end: {
          line: 30,
          column: 34
        }
      },
      "10": {
        start: {
          line: 32,
          column: 8
        },
        end: {
          line: 32,
          column: 16
        }
      },
      "11": {
        start: {
          line: 33,
          column: 8
        },
        end: {
          line: 33,
          column: 29
        }
      },
      "12": {
        start: {
          line: 34,
          column: 8
        },
        end: {
          line: 34,
          column: 33
        }
      },
      "13": {
        start: {
          line: 35,
          column: 8
        },
        end: {
          line: 35,
          column: 29
        }
      },
      "14": {
        start: {
          line: 36,
          column: 8
        },
        end: {
          line: 59,
          column: 10
        }
      },
      "15": {
        start: {
          line: 60,
          column: 8
        },
        end: {
          line: 60,
          column: 34
        }
      },
      "16": {
        start: {
          line: 61,
          column: 8
        },
        end: {
          line: 61,
          column: 42
        }
      },
      "17": {
        start: {
          line: 64,
          column: 8
        },
        end: {
          line: 67,
          column: 11
        }
      },
      "18": {
        start: {
          line: 65,
          column: 34
        },
        end: {
          line: 65,
          column: 38
        }
      },
      "19": {
        start: {
          line: 66,
          column: 12
        },
        end: {
          line: 66,
          column: 48
        }
      },
      "20": {
        start: {
          line: 68,
          column: 8
        },
        end: {
          line: 71,
          column: 11
        }
      },
      "21": {
        start: {
          line: 69,
          column: 30
        },
        end: {
          line: 69,
          column: 34
        }
      },
      "22": {
        start: {
          line: 70,
          column: 12
        },
        end: {
          line: 70,
          column: 45
        }
      },
      "23": {
        start: {
          line: 72,
          column: 8
        },
        end: {
          line: 75,
          column: 11
        }
      },
      "24": {
        start: {
          line: 73,
          column: 29
        },
        end: {
          line: 73,
          column: 33
        }
      },
      "25": {
        start: {
          line: 74,
          column: 12
        },
        end: {
          line: 74,
          column: 58
        }
      },
      "26": {
        start: {
          line: 76,
          column: 8
        },
        end: {
          line: 82,
          column: 11
        }
      },
      "27": {
        start: {
          line: 77,
          column: 34
        },
        end: {
          line: 77,
          column: 38
        }
      },
      "28": {
        start: {
          line: 78,
          column: 12
        },
        end: {
          line: 78,
          column: 64
        }
      },
      "29": {
        start: {
          line: 79,
          column: 12
        },
        end: {
          line: 81,
          column: 13
        }
      },
      "30": {
        start: {
          line: 80,
          column: 16
        },
        end: {
          line: 80,
          column: 86
        }
      },
      "31": {
        start: {
          line: 83,
          column: 8
        },
        end: {
          line: 86,
          column: 11
        }
      },
      "32": {
        start: {
          line: 84,
          column: 33
        },
        end: {
          line: 84,
          column: 37
        }
      },
      "33": {
        start: {
          line: 85,
          column: 12
        },
        end: {
          line: 85,
          column: 79
        }
      },
      "34": {
        start: {
          line: 90,
          column: 8
        },
        end: {
          line: 141,
          column: 11
        }
      },
      "35": {
        start: {
          line: 143,
          column: 8
        },
        end: {
          line: 194,
          column: 11
        }
      },
      "36": {
        start: {
          line: 196,
          column: 8
        },
        end: {
          line: 196,
          column: 46
        }
      },
      "37": {
        start: {
          line: 200,
          column: 8
        },
        end: {
          line: 251,
          column: 11
        }
      },
      "38": {
        start: {
          line: 253,
          column: 8
        },
        end: {
          line: 304,
          column: 11
        }
      },
      "39": {
        start: {
          line: 306,
          column: 8
        },
        end: {
          line: 357,
          column: 11
        }
      },
      "40": {
        start: {
          line: 359,
          column: 8
        },
        end: {
          line: 410,
          column: 11
        }
      },
      "41": {
        start: {
          line: 412,
          column: 8
        },
        end: {
          line: 463,
          column: 11
        }
      },
      "42": {
        start: {
          line: 465,
          column: 8
        },
        end: {
          line: 516,
          column: 11
        }
      },
      "43": {
        start: {
          line: 518,
          column: 8
        },
        end: {
          line: 569,
          column: 11
        }
      },
      "44": {
        start: {
          line: 571,
          column: 8
        },
        end: {
          line: 622,
          column: 11
        }
      },
      "45": {
        start: {
          line: 624,
          column: 8
        },
        end: {
          line: 675,
          column: 11
        }
      },
      "46": {
        start: {
          line: 678,
          column: 8
        },
        end: {
          line: 681,
          column: 11
        }
      },
      "47": {
        start: {
          line: 683,
          column: 8
        },
        end: {
          line: 683,
          column: 37
        }
      },
      "48": {
        start: {
          line: 685,
          column: 8
        },
        end: {
          line: 685,
          column: 40
        }
      },
      "49": {
        start: {
          line: 687,
          column: 8
        },
        end: {
          line: 687,
          column: 41
        }
      },
      "50": {
        start: {
          line: 688,
          column: 8
        },
        end: {
          line: 688,
          column: 47
        }
      },
      "51": {
        start: {
          line: 691,
          column: 8
        },
        end: {
          line: 691,
          column: 56
        }
      },
      "52": {
        start: {
          line: 693,
          column: 8
        },
        end: {
          line: 694,
          column: 47
        }
      },
      "53": {
        start: {
          line: 694,
          column: 12
        },
        end: {
          line: 694,
          column: 47
        }
      },
      "54": {
        start: {
          line: 695,
          column: 8
        },
        end: {
          line: 696,
          column: 50
        }
      },
      "55": {
        start: {
          line: 696,
          column: 12
        },
        end: {
          line: 696,
          column: 50
        }
      },
      "56": {
        start: {
          line: 698,
          column: 33
        },
        end: {
          line: 698,
          column: 117
        }
      },
      "57": {
        start: {
          line: 698,
          column: 81
        },
        end: {
          line: 698,
          column: 116
        }
      },
      "58": {
        start: {
          line: 699,
          column: 8
        },
        end: {
          line: 699,
          column: 44
        }
      },
      "59": {
        start: {
          line: 700,
          column: 8
        },
        end: {
          line: 700,
          column: 44
        }
      },
      "60": {
        start: {
          line: 704,
          column: 8
        },
        end: {
          line: 706,
          column: 9
        }
      },
      "61": {
        start: {
          line: 705,
          column: 12
        },
        end: {
          line: 705,
          column: 59
        }
      },
      "62": {
        start: {
          line: 707,
          column: 25
        },
        end: {
          line: 707,
          column: 57
        }
      },
      "63": {
        start: {
          line: 708,
          column: 8
        },
        end: {
          line: 710,
          column: 9
        }
      },
      "64": {
        start: {
          line: 709,
          column: 12
        },
        end: {
          line: 709,
          column: 66
        }
      },
      "65": {
        start: {
          line: 711,
          column: 24
        },
        end: {
          line: 711,
          column: 43
        }
      },
      "66": {
        start: {
          line: 712,
          column: 24
        },
        end: {
          line: 712,
          column: 33
        }
      },
      "67": {
        start: {
          line: 713,
          column: 22
        },
        end: {
          line: 755,
          column: 9
        }
      },
      "68": {
        start: {
          line: 756,
          column: 8
        },
        end: {
          line: 756,
          column: 40
        }
      },
      "69": {
        start: {
          line: 757,
          column: 8
        },
        end: {
          line: 757,
          column: 74
        }
      },
      "70": {
        start: {
          line: 758,
          column: 8
        },
        end: {
          line: 763,
          column: 11
        }
      },
      "71": {
        start: {
          line: 764,
          column: 8
        },
        end: {
          line: 764,
          column: 46
        }
      },
      "72": {
        start: {
          line: 766,
          column: 8
        },
        end: {
          line: 770,
          column: 11
        }
      },
      "73": {
        start: {
          line: 771,
          column: 8
        },
        end: {
          line: 771,
          column: 23
        }
      },
      "74": {
        start: {
          line: 774,
          column: 22
        },
        end: {
          line: 774,
          column: 46
        }
      },
      "75": {
        start: {
          line: 775,
          column: 8
        },
        end: {
          line: 777,
          column: 9
        }
      },
      "76": {
        start: {
          line: 776,
          column: 12
        },
        end: {
          line: 776,
          column: 58
        }
      },
      "77": {
        start: {
          line: 778,
          column: 8
        },
        end: {
          line: 780,
          column: 9
        }
      },
      "78": {
        start: {
          line: 779,
          column: 12
        },
        end: {
          line: 779,
          column: 94
        }
      },
      "79": {
        start: {
          line: 781,
          column: 8
        },
        end: {
          line: 807,
          column: 9
        }
      },
      "80": {
        start: {
          line: 782,
          column: 12
        },
        end: {
          line: 782,
          column: 42
        }
      },
      "81": {
        start: {
          line: 783,
          column: 12
        },
        end: {
          line: 783,
          column: 60
        }
      },
      "82": {
        start: {
          line: 785,
          column: 28
        },
        end: {
          line: 785,
          column: 63
        }
      },
      "83": {
        start: {
          line: 786,
          column: 12
        },
        end: {
          line: 786,
          column: 49
        }
      },
      "84": {
        start: {
          line: 788,
          column: 12
        },
        end: {
          line: 788,
          column: 78
        }
      },
      "85": {
        start: {
          line: 789,
          column: 12
        },
        end: {
          line: 789,
          column: 34
        }
      },
      "86": {
        start: {
          line: 790,
          column: 12
        },
        end: {
          line: 790,
          column: 52
        }
      },
      "87": {
        start: {
          line: 791,
          column: 12
        },
        end: {
          line: 791,
          column: 77
        }
      },
      "88": {
        start: {
          line: 792,
          column: 12
        },
        end: {
          line: 792,
          column: 50
        }
      },
      "89": {
        start: {
          line: 795,
          column: 33
        },
        end: {
          line: 795,
          column: 87
        }
      },
      "90": {
        start: {
          line: 796,
          column: 12
        },
        end: {
          line: 796,
          column: 35
        }
      },
      "91": {
        start: {
          line: 797,
          column: 12
        },
        end: {
          line: 804,
          column: 15
        }
      },
      "92": {
        start: {
          line: 805,
          column: 12
        },
        end: {
          line: 805,
          column: 75
        }
      },
      "93": {
        start: {
          line: 806,
          column: 12
        },
        end: {
          line: 806,
          column: 24
        }
      },
      "94": {
        start: {
          line: 810,
          column: 22
        },
        end: {
          line: 810,
          column: 46
        }
      },
      "95": {
        start: {
          line: 811,
          column: 8
        },
        end: {
          line: 813,
          column: 9
        }
      },
      "96": {
        start: {
          line: 812,
          column: 12
        },
        end: {
          line: 812,
          column: 58
        }
      },
      "97": {
        start: {
          line: 814,
          column: 8
        },
        end: {
          line: 816,
          column: 9
        }
      },
      "98": {
        start: {
          line: 815,
          column: 12
        },
        end: {
          line: 815,
          column: 19
        }
      },
      "99": {
        start: {
          line: 817,
          column: 8
        },
        end: {
          line: 845,
          column: 9
        }
      },
      "100": {
        start: {
          line: 818,
          column: 12
        },
        end: {
          line: 818,
          column: 41
        }
      },
      "101": {
        start: {
          line: 819,
          column: 12
        },
        end: {
          line: 819,
          column: 59
        }
      },
      "102": {
        start: {
          line: 821,
          column: 28
        },
        end: {
          line: 821,
          column: 55
        }
      },
      "103": {
        start: {
          line: 822,
          column: 12
        },
        end: {
          line: 830,
          column: 13
        }
      },
      "104": {
        start: {
          line: 823,
          column: 16
        },
        end: {
          line: 823,
          column: 40
        }
      },
      "105": {
        start: {
          line: 825,
          column: 16
        },
        end: {
          line: 829,
          column: 47
        }
      },
      "106": {
        start: {
          line: 826,
          column: 20
        },
        end: {
          line: 828,
          column: 21
        }
      },
      "107": {
        start: {
          line: 827,
          column: 24
        },
        end: {
          line: 827,
          column: 48
        }
      },
      "108": {
        start: {
          line: 832,
          column: 12
        },
        end: {
          line: 832,
          column: 79
        }
      },
      "109": {
        start: {
          line: 833,
          column: 12
        },
        end: {
          line: 833,
          column: 40
        }
      },
      "110": {
        start: {
          line: 834,
          column: 12
        },
        end: {
          line: 834,
          column: 58
        }
      },
      "111": {
        start: {
          line: 836,
          column: 12
        },
        end: {
          line: 836,
          column: 43
        }
      },
      "112": {
        start: {
          line: 837,
          column: 12
        },
        end: {
          line: 837,
          column: 67
        }
      },
      "113": {
        start: {
          line: 838,
          column: 12
        },
        end: {
          line: 838,
          column: 58
        }
      },
      "114": {
        start: {
          line: 841,
          column: 12
        },
        end: {
          line: 841,
          column: 85
        }
      },
      "115": {
        start: {
          line: 843,
          column: 12
        },
        end: {
          line: 843,
          column: 43
        }
      },
      "116": {
        start: {
          line: 844,
          column: 12
        },
        end: {
          line: 844,
          column: 40
        }
      },
      "117": {
        start: {
          line: 848,
          column: 8
        },
        end: {
          line: 848,
          column: 66
        }
      },
      "118": {
        start: {
          line: 849,
          column: 8
        },
        end: {
          line: 849,
          column: 59
        }
      },
      "119": {
        start: {
          line: 850,
          column: 8
        },
        end: {
          line: 850,
          column: 39
        }
      },
      "120": {
        start: {
          line: 851,
          column: 8
        },
        end: {
          line: 851,
          column: 58
        }
      },
      "121": {
        start: {
          line: 854,
          column: 22
        },
        end: {
          line: 854,
          column: 46
        }
      },
      "122": {
        start: {
          line: 855,
          column: 8
        },
        end: {
          line: 857,
          column: 9
        }
      },
      "123": {
        start: {
          line: 856,
          column: 12
        },
        end: {
          line: 856,
          column: 58
        }
      },
      "124": {
        start: {
          line: 859,
          column: 8
        },
        end: {
          line: 861,
          column: 9
        }
      },
      "125": {
        start: {
          line: 860,
          column: 12
        },
        end: {
          line: 860,
          column: 53
        }
      },
      "126": {
        start: {
          line: 863,
          column: 8
        },
        end: {
          line: 863,
          column: 36
        }
      },
      "127": {
        start: {
          line: 864,
          column: 8
        },
        end: {
          line: 864,
          column: 42
        }
      },
      "128": {
        start: {
          line: 865,
          column: 8
        },
        end: {
          line: 865,
          column: 43
        }
      },
      "129": {
        start: {
          line: 866,
          column: 8
        },
        end: {
          line: 866,
          column: 48
        }
      },
      "130": {
        start: {
          line: 868,
          column: 8
        },
        end: {
          line: 868,
          column: 54
        }
      },
      "131": {
        start: {
          line: 870,
          column: 8
        },
        end: {
          line: 870,
          column: 58
        }
      },
      "132": {
        start: {
          line: 871,
          column: 8
        },
        end: {
          line: 871,
          column: 55
        }
      },
      "133": {
        start: {
          line: 872,
          column: 8
        },
        end: {
          line: 872,
          column: 48
        }
      },
      "134": {
        start: {
          line: 876,
          column: 25
        },
        end: {
          line: 876,
          column: 57
        }
      },
      "135": {
        start: {
          line: 877,
          column: 8
        },
        end: {
          line: 879,
          column: 9
        }
      },
      "136": {
        start: {
          line: 878,
          column: 12
        },
        end: {
          line: 878,
          column: 66
        }
      },
      "137": {
        start: {
          line: 880,
          column: 23
        },
        end: {
          line: 880,
          column: 41
        }
      },
      "138": {
        start: {
          line: 881,
          column: 21
        },
        end: {
          line: 894,
          column: 9
        }
      },
      "139": {
        start: {
          line: 895,
          column: 8
        },
        end: {
          line: 895,
          column: 37
        }
      },
      "140": {
        start: {
          line: 897,
          column: 8
        },
        end: {
          line: 909,
          column: 9
        }
      },
      "141": {
        start: {
          line: 897,
          column: 21
        },
        end: {
          line: 897,
          column: 22
        }
      },
      "142": {
        start: {
          line: 898,
          column: 28
        },
        end: {
          line: 900,
          column: 14
        }
      },
      "143": {
        start: {
          line: 901,
          column: 12
        },
        end: {
          line: 901,
          column: 43
        }
      },
      "144": {
        start: {
          line: 902,
          column: 12
        },
        end: {
          line: 907,
          column: 15
        }
      },
      "145": {
        start: {
          line: 908,
          column: 12
        },
        end: {
          line: 908,
          column: 31
        }
      },
      "146": {
        start: {
          line: 910,
          column: 8
        },
        end: {
          line: 910,
          column: 90
        }
      },
      "147": {
        start: {
          line: 911,
          column: 8
        },
        end: {
          line: 911,
          column: 44
        }
      },
      "148": {
        start: {
          line: 912,
          column: 8
        },
        end: {
          line: 912,
          column: 22
        }
      },
      "149": {
        start: {
          line: 915,
          column: 21
        },
        end: {
          line: 915,
          column: 43
        }
      },
      "150": {
        start: {
          line: 916,
          column: 8
        },
        end: {
          line: 918,
          column: 9
        }
      },
      "151": {
        start: {
          line: 917,
          column: 12
        },
        end: {
          line: 917,
          column: 56
        }
      },
      "152": {
        start: {
          line: 919,
          column: 8
        },
        end: {
          line: 921,
          column: 9
        }
      },
      "153": {
        start: {
          line: 920,
          column: 12
        },
        end: {
          line: 920,
          column: 112
        }
      },
      "154": {
        start: {
          line: 922,
          column: 28
        },
        end: {
          line: 922,
          column: 44
        }
      },
      "155": {
        start: {
          line: 923,
          column: 22
        },
        end: {
          line: 923,
          column: 46
        }
      },
      "156": {
        start: {
          line: 924,
          column: 8
        },
        end: {
          line: 946,
          column: 9
        }
      },
      "157": {
        start: {
          line: 926,
          column: 12
        },
        end: {
          line: 937,
          column: 13
        }
      },
      "158": {
        start: {
          line: 926,
          column: 25
        },
        end: {
          line: 926,
          column: 26
        }
      },
      "159": {
        start: {
          line: 927,
          column: 32
        },
        end: {
          line: 929,
          column: 18
        }
      },
      "160": {
        start: {
          line: 930,
          column: 16
        },
        end: {
          line: 930,
          column: 47
        }
      },
      "161": {
        start: {
          line: 931,
          column: 16
        },
        end: {
          line: 936,
          column: 19
        }
      },
      "162": {
        start: {
          line: 939,
          column: 13
        },
        end: {
          line: 946,
          column: 9
        }
      },
      "163": {
        start: {
          line: 941,
          column: 35
        },
        end: {
          line: 941,
          column: 81
        }
      },
      "164": {
        start: {
          line: 942,
          column: 12
        },
        end: {
          line: 945,
          column: 13
        }
      },
      "165": {
        start: {
          line: 943,
          column: 16
        },
        end: {
          line: 943,
          column: 51
        }
      },
      "166": {
        start: {
          line: 944,
          column: 16
        },
        end: {
          line: 944,
          column: 95
        }
      },
      "167": {
        start: {
          line: 944,
          column: 74
        },
        end: {
          line: 944,
          column: 93
        }
      },
      "168": {
        start: {
          line: 947,
          column: 8
        },
        end: {
          line: 947,
          column: 38
        }
      },
      "169": {
        start: {
          line: 948,
          column: 8
        },
        end: {
          line: 948,
          column: 95
        }
      },
      "170": {
        start: {
          line: 949,
          column: 8
        },
        end: {
          line: 949,
          column: 86
        }
      },
      "171": {
        start: {
          line: 953,
          column: 8
        },
        end: {
          line: 955,
          column: 44
        }
      },
      "172": {
        start: {
          line: 954,
          column: 12
        },
        end: {
          line: 954,
          column: 39
        }
      },
      "173": {
        start: {
          line: 956,
          column: 8
        },
        end: {
          line: 958,
          column: 11
        }
      },
      "174": {
        start: {
          line: 961,
          column: 8
        },
        end: {
          line: 963,
          column: 42
        }
      },
      "175": {
        start: {
          line: 962,
          column: 12
        },
        end: {
          line: 962,
          column: 35
        }
      },
      "176": {
        start: {
          line: 964,
          column: 8
        },
        end: {
          line: 966,
          column: 11
        }
      },
      "177": {
        start: {
          line: 969,
          column: 31
        },
        end: {
          line: 969,
          column: 110
        }
      },
      "178": {
        start: {
          line: 969,
          column: 79
        },
        end: {
          line: 969,
          column: 109
        }
      },
      "179": {
        start: {
          line: 970,
          column: 8
        },
        end: {
          line: 970,
          column: 49
        }
      },
      "180": {
        start: {
          line: 973,
          column: 22
        },
        end: {
          line: 973,
          column: 46
        }
      },
      "181": {
        start: {
          line: 974,
          column: 8
        },
        end: {
          line: 975,
          column: 19
        }
      },
      "182": {
        start: {
          line: 975,
          column: 12
        },
        end: {
          line: 975,
          column: 19
        }
      },
      "183": {
        start: {
          line: 976,
          column: 23
        },
        end: {
          line: 976,
          column: 53
        }
      },
      "184": {
        start: {
          line: 977,
          column: 8
        },
        end: {
          line: 978,
          column: 19
        }
      },
      "185": {
        start: {
          line: 978,
          column: 12
        },
        end: {
          line: 978,
          column: 19
        }
      },
      "186": {
        start: {
          line: 979,
          column: 20
        },
        end: {
          line: 979,
          column: 30
        }
      },
      "187": {
        start: {
          line: 980,
          column: 8
        },
        end: {
          line: 1011,
          column: 9
        }
      },
      "188": {
        start: {
          line: 982,
          column: 35
        },
        end: {
          line: 982,
          column: 74
        }
      },
      "189": {
        start: {
          line: 983,
          column: 12
        },
        end: {
          line: 983,
          column: 62
        }
      },
      "190": {
        start: {
          line: 985,
          column: 32
        },
        end: {
          line: 985,
          column: 71
        }
      },
      "191": {
        start: {
          line: 986,
          column: 12
        },
        end: {
          line: 986,
          column: 56
        }
      },
      "192": {
        start: {
          line: 988,
          column: 32
        },
        end: {
          line: 988,
          column: 71
        }
      },
      "193": {
        start: {
          line: 989,
          column: 12
        },
        end: {
          line: 989,
          column: 56
        }
      },
      "194": {
        start: {
          line: 991,
          column: 34
        },
        end: {
          line: 991,
          column: 70
        }
      },
      "195": {
        start: {
          line: 992,
          column: 12
        },
        end: {
          line: 992,
          column: 60
        }
      },
      "196": {
        start: {
          line: 994,
          column: 28
        },
        end: {
          line: 994,
          column: 92
        }
      },
      "197": {
        start: {
          line: 995,
          column: 12
        },
        end: {
          line: 995,
          column: 37
        }
      },
      "198": {
        start: {
          line: 996,
          column: 12
        },
        end: {
          line: 996,
          column: 35
        }
      },
      "199": {
        start: {
          line: 998,
          column: 12
        },
        end: {
          line: 998,
          column: 35
        }
      },
      "200": {
        start: {
          line: 1000,
          column: 12
        },
        end: {
          line: 1000,
          column: 53
        }
      },
      "201": {
        start: {
          line: 1002,
          column: 12
        },
        end: {
          line: 1005,
          column: 13
        }
      },
      "202": {
        start: {
          line: 1003,
          column: 16
        },
        end: {
          line: 1003,
          column: 105
        }
      },
      "203": {
        start: {
          line: 1004,
          column: 16
        },
        end: {
          line: 1004,
          column: 68
        }
      },
      "204": {
        start: {
          line: 1008,
          column: 12
        },
        end: {
          line: 1008,
          column: 73
        }
      },
      "205": {
        start: {
          line: 1009,
          column: 12
        },
        end: {
          line: 1009,
          column: 31
        }
      },
      "206": {
        start: {
          line: 1010,
          column: 12
        },
        end: {
          line: 1010,
          column: 35
        }
      },
      "207": {
        start: {
          line: 1015,
          column: 8
        },
        end: {
          line: 1034,
          column: 9
        }
      },
      "208": {
        start: {
          line: 1018,
          column: 26
        },
        end: {
          line: 1018,
          column: 50
        }
      },
      "209": {
        start: {
          line: 1019,
          column: 12
        },
        end: {
          line: 1020,
          column: 25
        }
      },
      "210": {
        start: {
          line: 1020,
          column: 16
        },
        end: {
          line: 1020,
          column: 25
        }
      },
      "211": {
        start: {
          line: 1021,
          column: 39
        },
        end: {
          line: 1021,
          column: 81
        }
      },
      "212": {
        start: {
          line: 1022,
          column: 12
        },
        end: {
          line: 1030,
          column: 13
        }
      },
      "213": {
        start: {
          line: 1023,
          column: 16
        },
        end: {
          line: 1023,
          column: 25
        }
      },
      "214": {
        start: {
          line: 1025,
          column: 17
        },
        end: {
          line: 1030,
          column: 13
        }
      },
      "215": {
        start: {
          line: 1026,
          column: 16
        },
        end: {
          line: 1026,
          column: 27
        }
      },
      "216": {
        start: {
          line: 1029,
          column: 16
        },
        end: {
          line: 1029,
          column: 27
        }
      },
      "217": {
        start: {
          line: 1033,
          column: 12
        },
        end: {
          line: 1033,
          column: 21
        }
      },
      "218": {
        start: {
          line: 1037,
          column: 24
        },
        end: {
          line: 1037,
          column: 66
        }
      },
      "219": {
        start: {
          line: 1038,
          column: 8
        },
        end: {
          line: 1039,
          column: 23
        }
      },
      "220": {
        start: {
          line: 1039,
          column: 12
        },
        end: {
          line: 1039,
          column: 23
        }
      },
      "221": {
        start: {
          line: 1041,
          column: 23
        },
        end: {
          line: 1041,
          column: 41
        }
      },
      "222": {
        start: {
          line: 1042,
          column: 24
        },
        end: {
          line: 1042,
          column: 114
        }
      },
      "223": {
        start: {
          line: 1042,
          column: 54
        },
        end: {
          line: 1042,
          column: 94
        }
      },
      "224": {
        start: {
          line: 1044,
          column: 29
        },
        end: {
          line: 1044,
          column: 34
        }
      },
      "225": {
        start: {
          line: 1045,
          column: 8
        },
        end: {
          line: 1045,
          column: 64
        }
      },
      "226": {
        start: {
          line: 1048,
          column: 22
        },
        end: {
          line: 1048,
          column: 46
        }
      },
      "227": {
        start: {
          line: 1049,
          column: 8
        },
        end: {
          line: 1050,
          column: 21
        }
      },
      "228": {
        start: {
          line: 1050,
          column: 12
        },
        end: {
          line: 1050,
          column: 21
        }
      },
      "229": {
        start: {
          line: 1051,
          column: 27
        },
        end: {
          line: 1051,
          column: 83
        }
      },
      "230": {
        start: {
          line: 1052,
          column: 8
        },
        end: {
          line: 1053,
          column: 23
        }
      },
      "231": {
        start: {
          line: 1053,
          column: 12
        },
        end: {
          line: 1053,
          column: 23
        }
      },
      "232": {
        start: {
          line: 1054,
          column: 8
        },
        end: {
          line: 1054,
          column: 57
        }
      },
      "233": {
        start: {
          line: 1057,
          column: 22
        },
        end: {
          line: 1057,
          column: 53
        }
      },
      "234": {
        start: {
          line: 1058,
          column: 8
        },
        end: {
          line: 1059,
          column: 23
        }
      },
      "235": {
        start: {
          line: 1059,
          column: 12
        },
        end: {
          line: 1059,
          column: 23
        }
      },
      "236": {
        start: {
          line: 1060,
          column: 23
        },
        end: {
          line: 1060,
          column: 49
        }
      },
      "237": {
        start: {
          line: 1061,
          column: 28
        },
        end: {
          line: 1061,
          column: 60
        }
      },
      "238": {
        start: {
          line: 1062,
          column: 25
        },
        end: {
          line: 1062,
          column: 51
        }
      },
      "239": {
        start: {
          line: 1063,
          column: 26
        },
        end: {
          line: 1063,
          column: 54
        }
      },
      "240": {
        start: {
          line: 1064,
          column: 8
        },
        end: {
          line: 1064,
          column: 69
        }
      },
      "241": {
        start: {
          line: 1067,
          column: 23
        },
        end: {
          line: 1067,
          column: 25
        }
      },
      "242": {
        start: {
          line: 1068,
          column: 8
        },
        end: {
          line: 1077,
          column: 9
        }
      },
      "243": {
        start: {
          line: 1069,
          column: 12
        },
        end: {
          line: 1076,
          column: 15
        }
      },
      "244": {
        start: {
          line: 1078,
          column: 8
        },
        end: {
          line: 1087,
          column: 9
        }
      },
      "245": {
        start: {
          line: 1079,
          column: 12
        },
        end: {
          line: 1086,
          column: 15
        }
      },
      "246": {
        start: {
          line: 1088,
          column: 8
        },
        end: {
          line: 1097,
          column: 9
        }
      },
      "247": {
        start: {
          line: 1089,
          column: 12
        },
        end: {
          line: 1096,
          column: 15
        }
      },
      "248": {
        start: {
          line: 1098,
          column: 8
        },
        end: {
          line: 1098,
          column: 31
        }
      },
      "249": {
        start: {
          line: 1101,
          column: 20
        },
        end: {
          line: 1101,
          column: 30
        }
      },
      "250": {
        start: {
          line: 1102,
          column: 24
        },
        end: {
          line: 1102,
          column: 57
        }
      },
      "251": {
        start: {
          line: 1103,
          column: 8
        },
        end: {
          line: 1126,
          column: 9
        }
      },
      "252": {
        start: {
          line: 1104,
          column: 39
        },
        end: {
          line: 1104,
          column: 74
        }
      },
      "253": {
        start: {
          line: 1105,
          column: 12
        },
        end: {
          line: 1125,
          column: 13
        }
      },
      "254": {
        start: {
          line: 1108,
          column: 16
        },
        end: {
          line: 1108,
          column: 93
        }
      },
      "255": {
        start: {
          line: 1109,
          column: 16
        },
        end: {
          line: 1109,
          column: 39
        }
      },
      "256": {
        start: {
          line: 1110,
          column: 16
        },
        end: {
          line: 1117,
          column: 19
        }
      },
      "257": {
        start: {
          line: 1118,
          column: 16
        },
        end: {
          line: 1118,
          column: 86
        }
      },
      "258": {
        start: {
          line: 1120,
          column: 16
        },
        end: {
          line: 1124,
          column: 17
        }
      },
      "259": {
        start: {
          line: 1121,
          column: 20
        },
        end: {
          line: 1123,
          column: 23
        }
      },
      "260": {
        start: {
          line: 1122,
          column: 24
        },
        end: {
          line: 1122,
          column: 94
        }
      },
      "261": {
        start: {
          line: 1130,
          column: 20
        },
        end: {
          line: 1137,
          column: 9
        }
      },
      "262": {
        start: {
          line: 1138,
          column: 21
        },
        end: {
          line: 1144,
          column: 9
        }
      },
      "263": {
        start: {
          line: 1145,
          column: 29
        },
        end: {
          line: 1149,
          column: 10
        }
      },
      "264": {
        start: {
          line: 1151,
          column: 8
        },
        end: {
          line: 1153,
          column: 11
        }
      },
      "265": {
        start: {
          line: 1152,
          column: 12
        },
        end: {
          line: 1152,
          column: 54
        }
      },
      "266": {
        start: {
          line: 1154,
          column: 8
        },
        end: {
          line: 1156,
          column: 11
        }
      },
      "267": {
        start: {
          line: 1155,
          column: 12
        },
        end: {
          line: 1155,
          column: 56
        }
      },
      "268": {
        start: {
          line: 1157,
          column: 8
        },
        end: {
          line: 1157,
          column: 28
        }
      },
      "269": {
        start: {
          line: 1160,
          column: 8
        },
        end: {
          line: 1173,
          column: 11
        }
      },
      "270": {
        start: {
          line: 1161,
          column: 26
        },
        end: {
          line: 1163,
          column: 23
        }
      },
      "271": {
        start: {
          line: 1162,
          column: 16
        },
        end: {
          line: 1162,
          column: 70
        }
      },
      "272": {
        start: {
          line: 1164,
          column: 28
        },
        end: {
          line: 1171,
          column: 13
        }
      },
      "273": {
        start: {
          line: 1165,
          column: 34
        },
        end: {
          line: 1165,
          column: 38
        }
      },
      "274": {
        start: {
          line: 1166,
          column: 16
        },
        end: {
          line: 1170,
          column: 17
        }
      },
      "275": {
        start: {
          line: 1167,
          column: 20
        },
        end: {
          line: 1167,
          column: 40
        }
      },
      "276": {
        start: {
          line: 1168,
          column: 20
        },
        end: {
          line: 1168,
          column: 62
        }
      },
      "277": {
        start: {
          line: 1169,
          column: 20
        },
        end: {
          line: 1169,
          column: 30
        }
      },
      "278": {
        start: {
          line: 1172,
          column: 12
        },
        end: {
          line: 1172,
          column: 53
        }
      },
      "279": {
        start: {
          line: 1176,
          column: 8
        },
        end: {
          line: 1189,
          column: 11
        }
      },
      "280": {
        start: {
          line: 1177,
          column: 28
        },
        end: {
          line: 1177,
          column: 55
        }
      },
      "281": {
        start: {
          line: 1178,
          column: 12
        },
        end: {
          line: 1181,
          column: 13
        }
      },
      "282": {
        start: {
          line: 1179,
          column: 16
        },
        end: {
          line: 1179,
          column: 26
        }
      },
      "283": {
        start: {
          line: 1180,
          column: 16
        },
        end: {
          line: 1180,
          column: 23
        }
      },
      "284": {
        start: {
          line: 1182,
          column: 26
        },
        end: {
          line: 1184,
          column: 23
        }
      },
      "285": {
        start: {
          line: 1183,
          column: 16
        },
        end: {
          line: 1183,
          column: 26
        }
      },
      "286": {
        start: {
          line: 1185,
          column: 12
        },
        end: {
          line: 1188,
          column: 15
        }
      },
      "287": {
        start: {
          line: 1186,
          column: 16
        },
        end: {
          line: 1186,
          column: 36
        }
      },
      "288": {
        start: {
          line: 1187,
          column: 16
        },
        end: {
          line: 1187,
          column: 26
        }
      },
      "289": {
        start: {
          line: 1192,
          column: 22
        },
        end: {
          line: 1192,
          column: 46
        }
      },
      "290": {
        start: {
          line: 1193,
          column: 8
        },
        end: {
          line: 1194,
          column: 19
        }
      },
      "291": {
        start: {
          line: 1194,
          column: 12
        },
        end: {
          line: 1194,
          column: 19
        }
      },
      "292": {
        start: {
          line: 1195,
          column: 8
        },
        end: {
          line: 1195,
          column: 78
        }
      },
      "293": {
        start: {
          line: 1196,
          column: 8
        },
        end: {
          line: 1205,
          column: 9
        }
      },
      "294": {
        start: {
          line: 1197,
          column: 12
        },
        end: {
          line: 1204,
          column: 15
        }
      },
      "295": {
        start: {
          line: 1206,
          column: 8
        },
        end: {
          line: 1206,
          column: 33
        }
      },
      "296": {
        start: {
          line: 1207,
          column: 8
        },
        end: {
          line: 1207,
          column: 69
        }
      },
      "297": {
        start: {
          line: 1210,
          column: 8
        },
        end: {
          line: 1210,
          column: 69
        }
      },
      "298": {
        start: {
          line: 1211,
          column: 8
        },
        end: {
          line: 1218,
          column: 11
        }
      },
      "299": {
        start: {
          line: 1219,
          column: 8
        },
        end: {
          line: 1219,
          column: 61
        }
      },
      "300": {
        start: {
          line: 1222,
          column: 22
        },
        end: {
          line: 1222,
          column: 51
        }
      },
      "301": {
        start: {
          line: 1223,
          column: 8
        },
        end: {
          line: 1224,
          column: 19
        }
      },
      "302": {
        start: {
          line: 1224,
          column: 12
        },
        end: {
          line: 1224,
          column: 19
        }
      },
      "303": {
        start: {
          line: 1225,
          column: 8
        },
        end: {
          line: 1225,
          column: 45
        }
      },
      "304": {
        start: {
          line: 1226,
          column: 8
        },
        end: {
          line: 1228,
          column: 9
        }
      },
      "305": {
        start: {
          line: 1227,
          column: 12
        },
        end: {
          line: 1227,
          column: 64
        }
      },
      "306": {
        start: {
          line: 1230,
          column: 8
        },
        end: {
          line: 1233,
          column: 9
        }
      },
      "307": {
        start: {
          line: 1231,
          column: 12
        },
        end: {
          line: 1231,
          column: 34
        }
      },
      "308": {
        start: {
          line: 1232,
          column: 12
        },
        end: {
          line: 1232,
          column: 57
        }
      },
      "309": {
        start: {
          line: 1236,
          column: 8
        },
        end: {
          line: 1236,
          column: 53
        }
      },
      "310": {
        start: {
          line: 1237,
          column: 22
        },
        end: {
          line: 1237,
          column: 51
        }
      },
      "311": {
        start: {
          line: 1238,
          column: 8
        },
        end: {
          line: 1241,
          column: 9
        }
      },
      "312": {
        start: {
          line: 1239,
          column: 12
        },
        end: {
          line: 1239,
          column: 35
        }
      },
      "313": {
        start: {
          line: 1240,
          column: 12
        },
        end: {
          line: 1240,
          column: 58
        }
      },
      "314": {
        start: {
          line: 1244,
          column: 22
        },
        end: {
          line: 1244,
          column: 46
        }
      },
      "315": {
        start: {
          line: 1245,
          column: 8
        },
        end: {
          line: 1246,
          column: 19
        }
      },
      "316": {
        start: {
          line: 1246,
          column: 12
        },
        end: {
          line: 1246,
          column: 19
        }
      },
      "317": {
        start: {
          line: 1247,
          column: 26
        },
        end: {
          line: 1247,
          column: 38
        }
      },
      "318": {
        start: {
          line: 1248,
          column: 8
        },
        end: {
          line: 1248,
          column: 30
        }
      },
      "319": {
        start: {
          line: 1249,
          column: 8
        },
        end: {
          line: 1249,
          column: 84
        }
      },
      "320": {
        start: {
          line: 1252,
          column: 22
        },
        end: {
          line: 1252,
          column: 46
        }
      },
      "321": {
        start: {
          line: 1253,
          column: 8
        },
        end: {
          line: 1254,
          column: 19
        }
      },
      "322": {
        start: {
          line: 1254,
          column: 12
        },
        end: {
          line: 1254,
          column: 19
        }
      },
      "323": {
        start: {
          line: 1255,
          column: 8
        },
        end: {
          line: 1255,
          column: 61
        }
      },
      "324": {
        start: {
          line: 1258,
          column: 22
        },
        end: {
          line: 1258,
          column: 46
        }
      },
      "325": {
        start: {
          line: 1259,
          column: 8
        },
        end: {
          line: 1260,
          column: 19
        }
      },
      "326": {
        start: {
          line: 1260,
          column: 12
        },
        end: {
          line: 1260,
          column: 19
        }
      },
      "327": {
        start: {
          line: 1261,
          column: 8
        },
        end: {
          line: 1261,
          column: 57
        }
      },
      "328": {
        start: {
          line: 1263,
          column: 24
        },
        end: {
          line: 1263,
          column: 66
        }
      },
      "329": {
        start: {
          line: 1264,
          column: 8
        },
        end: {
          line: 1264,
          column: 73
        }
      },
      "330": {
        start: {
          line: 1266,
          column: 8
        },
        end: {
          line: 1268,
          column: 9
        }
      },
      "331": {
        start: {
          line: 1267,
          column: 12
        },
        end: {
          line: 1267,
          column: 28
        }
      },
      "332": {
        start: {
          line: 1269,
          column: 8
        },
        end: {
          line: 1269,
          column: 54
        }
      },
      "333": {
        start: {
          line: 1272,
          column: 8
        },
        end: {
          line: 1272,
          column: 47
        }
      },
      "334": {
        start: {
          line: 1275,
          column: 22
        },
        end: {
          line: 1275,
          column: 46
        }
      },
      "335": {
        start: {
          line: 1276,
          column: 8
        },
        end: {
          line: 1277,
          column: 19
        }
      },
      "336": {
        start: {
          line: 1277,
          column: 12
        },
        end: {
          line: 1277,
          column: 19
        }
      },
      "337": {
        start: {
          line: 1278,
          column: 8
        },
        end: {
          line: 1278,
          column: 39
        }
      },
      "338": {
        start: {
          line: 1280,
          column: 8
        },
        end: {
          line: 1282,
          column: 9
        }
      },
      "339": {
        start: {
          line: 1281,
          column: 12
        },
        end: {
          line: 1281,
          column: 39
        }
      },
      "340": {
        start: {
          line: 1285,
          column: 8
        },
        end: {
          line: 1301,
          column: 10
        }
      },
      "341": {
        start: {
          line: 1304,
          column: 8
        },
        end: {
          line: 1316,
          column: 10
        }
      },
      "342": {
        start: {
          line: 1320,
          column: 8
        },
        end: {
          line: 1324,
          column: 9
        }
      },
      "343": {
        start: {
          line: 1321,
          column: 12
        },
        end: {
          line: 1321,
          column: 88
        }
      },
      "344": {
        start: {
          line: 1321,
          column: 70
        },
        end: {
          line: 1321,
          column: 86
        }
      },
      "345": {
        start: {
          line: 1322,
          column: 12
        },
        end: {
          line: 1322,
          column: 78
        }
      },
      "346": {
        start: {
          line: 1322,
          column: 60
        },
        end: {
          line: 1322,
          column: 76
        }
      },
      "347": {
        start: {
          line: 1323,
          column: 12
        },
        end: {
          line: 1323,
          column: 84
        }
      },
      "348": {
        start: {
          line: 1326,
          column: 8
        },
        end: {
          line: 1328,
          column: 9
        }
      },
      "349": {
        start: {
          line: 1327,
          column: 12
        },
        end: {
          line: 1327,
          column: 76
        }
      },
      "350": {
        start: {
          line: 1327,
          column: 58
        },
        end: {
          line: 1327,
          column: 74
        }
      },
      "351": {
        start: {
          line: 1332,
          column: 30
        },
        end: {
          line: 1353,
          column: 9
        }
      },
      "352": {
        start: {
          line: 1354,
          column: 8
        },
        end: {
          line: 1354,
          column: 59
        }
      },
      "353": {
        start: {
          line: 1358,
          column: 8
        },
        end: {
          line: 1358,
          column: 40
        }
      },
      "354": {
        start: {
          line: 1361,
          column: 8
        },
        end: {
          line: 1361,
          column: 48
        }
      },
      "355": {
        start: {
          line: 1364,
          column: 8
        },
        end: {
          line: 1364,
          column: 87
        }
      },
      "356": {
        start: {
          line: 1364,
          column: 66
        },
        end: {
          line: 1364,
          column: 85
        }
      },
      "357": {
        start: {
          line: 1367,
          column: 8
        },
        end: {
          line: 1367,
          column: 91
        }
      },
      "358": {
        start: {
          line: 1367,
          column: 66
        },
        end: {
          line: 1367,
          column: 89
        }
      },
      "359": {
        start: {
          line: 1370,
          column: 8
        },
        end: {
          line: 1370,
          column: 46
        }
      },
      "360": {
        start: {
          line: 1373,
          column: 8
        },
        end: {
          line: 1373,
          column: 38
        }
      },
      "361": {
        start: {
          line: 1376,
          column: 8
        },
        end: {
          line: 1376,
          column: 47
        }
      },
      "362": {
        start: {
          line: 1379,
          column: 8
        },
        end: {
          line: 1379,
          column: 51
        }
      },
      "363": {
        start: {
          line: 1382,
          column: 23
        },
        end: {
          line: 1382,
          column: 55
        }
      },
      "364": {
        start: {
          line: 1383,
          column: 29
        },
        end: {
          line: 1383,
          column: 67
        }
      },
      "365": {
        start: {
          line: 1384,
          column: 30
        },
        end: {
          line: 1384,
          column: 80
        }
      },
      "366": {
        start: {
          line: 1384,
          column: 57
        },
        end: {
          line: 1384,
          column: 72
        }
      },
      "367": {
        start: {
          line: 1385,
          column: 30
        },
        end: {
          line: 1385,
          column: 108
        }
      },
      "368": {
        start: {
          line: 1385,
          column: 62
        },
        end: {
          line: 1385,
          column: 77
        }
      },
      "369": {
        start: {
          line: 1386,
          column: 31
        },
        end: {
          line: 1386,
          column: 70
        }
      },
      "370": {
        start: {
          line: 1387,
          column: 23
        },
        end: {
          line: 1387,
          column: 101
        }
      },
      "371": {
        start: {
          line: 1387,
          column: 57
        },
        end: {
          line: 1387,
          column: 68
        }
      },
      "372": {
        start: {
          line: 1388,
          column: 26
        },
        end: {
          line: 1388,
          column: 107
        }
      },
      "373": {
        start: {
          line: 1388,
          column: 60
        },
        end: {
          line: 1388,
          column: 74
        }
      },
      "374": {
        start: {
          line: 1389,
          column: 24
        },
        end: {
          line: 1389,
          column: 103
        }
      },
      "375": {
        start: {
          line: 1389,
          column: 58
        },
        end: {
          line: 1389,
          column: 70
        }
      },
      "376": {
        start: {
          line: 1390,
          column: 8
        },
        end: {
          line: 1402,
          column: 10
        }
      },
      "377": {
        start: {
          line: 1392,
          column: 47
        },
        end: {
          line: 1392,
          column: 89
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 31,
            column: 4
          },
          end: {
            line: 31,
            column: 5
          }
        },
        loc: {
          start: {
            line: 31,
            column: 50
          },
          end: {
            line: 62,
            column: 5
          }
        },
        line: 31
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 63,
            column: 4
          },
          end: {
            line: 63,
            column: 5
          }
        },
        loc: {
          start: {
            line: 63,
            column: 25
          },
          end: {
            line: 87,
            column: 5
          }
        },
        line: 63
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 64,
            column: 44
          },
          end: {
            line: 64,
            column: 45
          }
        },
        loc: {
          start: {
            line: 64,
            column: 54
          },
          end: {
            line: 67,
            column: 9
          }
        },
        line: 64
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 68,
            column: 40
          },
          end: {
            line: 68,
            column: 41
          }
        },
        loc: {
          start: {
            line: 68,
            column: 50
          },
          end: {
            line: 71,
            column: 9
          }
        },
        line: 68
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 72,
            column: 42
          },
          end: {
            line: 72,
            column: 43
          }
        },
        loc: {
          start: {
            line: 72,
            column: 52
          },
          end: {
            line: 75,
            column: 9
          }
        },
        line: 72
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 76,
            column: 43
          },
          end: {
            line: 76,
            column: 44
          }
        },
        loc: {
          start: {
            line: 76,
            column: 53
          },
          end: {
            line: 82,
            column: 9
          }
        },
        line: 76
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 83,
            column: 43
          },
          end: {
            line: 83,
            column: 44
          }
        },
        loc: {
          start: {
            line: 83,
            column: 53
          },
          end: {
            line: 86,
            column: 9
          }
        },
        line: 83
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 88,
            column: 4
          },
          end: {
            line: 88,
            column: 5
          }
        },
        loc: {
          start: {
            line: 88,
            column: 33
          },
          end: {
            line: 197,
            column: 5
          }
        },
        line: 88
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 198,
            column: 4
          },
          end: {
            line: 198,
            column: 5
          }
        },
        loc: {
          start: {
            line: 198,
            column: 37
          },
          end: {
            line: 676,
            column: 5
          }
        },
        line: 198
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 677,
            column: 4
          },
          end: {
            line: 677,
            column: 5
          }
        },
        loc: {
          start: {
            line: 677,
            column: 23
          },
          end: {
            line: 689,
            column: 5
          }
        },
        line: 677
      },
      "10": {
        name: "(anonymous_10)",
        decl: {
          start: {
            line: 690,
            column: 4
          },
          end: {
            line: 690,
            column: 5
          }
        },
        loc: {
          start: {
            line: 690,
            column: 21
          },
          end: {
            line: 701,
            column: 5
          }
        },
        line: 690
      },
      "11": {
        name: "(anonymous_11)",
        decl: {
          start: {
            line: 698,
            column: 68
          },
          end: {
            line: 698,
            column: 69
          }
        },
        loc: {
          start: {
            line: 698,
            column: 81
          },
          end: {
            line: 698,
            column: 116
          }
        },
        line: 698
      },
      "12": {
        name: "(anonymous_12)",
        decl: {
          start: {
            line: 703,
            column: 4
          },
          end: {
            line: 703,
            column: 5
          }
        },
        loc: {
          start: {
            line: 703,
            column: 52
          },
          end: {
            line: 772,
            column: 5
          }
        },
        line: 703
      },
      "13": {
        name: "(anonymous_13)",
        decl: {
          start: {
            line: 773,
            column: 4
          },
          end: {
            line: 773,
            column: 5
          }
        },
        loc: {
          start: {
            line: 773,
            column: 30
          },
          end: {
            line: 808,
            column: 5
          }
        },
        line: 773
      },
      "14": {
        name: "(anonymous_14)",
        decl: {
          start: {
            line: 809,
            column: 4
          },
          end: {
            line: 809,
            column: 5
          }
        },
        loc: {
          start: {
            line: 809,
            column: 54
          },
          end: {
            line: 846,
            column: 5
          }
        },
        line: 809
      },
      "15": {
        name: "(anonymous_15)",
        decl: {
          start: {
            line: 825,
            column: 27
          },
          end: {
            line: 825,
            column: 28
          }
        },
        loc: {
          start: {
            line: 825,
            column: 33
          },
          end: {
            line: 829,
            column: 17
          }
        },
        line: 825
      },
      "16": {
        name: "(anonymous_16)",
        decl: {
          start: {
            line: 847,
            column: 4
          },
          end: {
            line: 847,
            column: 5
          }
        },
        loc: {
          start: {
            line: 847,
            column: 62
          },
          end: {
            line: 852,
            column: 5
          }
        },
        line: 847
      },
      "17": {
        name: "(anonymous_17)",
        decl: {
          start: {
            line: 853,
            column: 4
          },
          end: {
            line: 853,
            column: 5
          }
        },
        loc: {
          start: {
            line: 853,
            column: 31
          },
          end: {
            line: 873,
            column: 5
          }
        },
        line: 853
      },
      "18": {
        name: "(anonymous_18)",
        decl: {
          start: {
            line: 875,
            column: 4
          },
          end: {
            line: 875,
            column: 5
          }
        },
        loc: {
          start: {
            line: 875,
            column: 54
          },
          end: {
            line: 913,
            column: 5
          }
        },
        line: 875
      },
      "19": {
        name: "(anonymous_19)",
        decl: {
          start: {
            line: 914,
            column: 4
          },
          end: {
            line: 914,
            column: 5
          }
        },
        loc: {
          start: {
            line: 914,
            column: 40
          },
          end: {
            line: 950,
            column: 5
          }
        },
        line: 914
      },
      "20": {
        name: "(anonymous_20)",
        decl: {
          start: {
            line: 944,
            column: 67
          },
          end: {
            line: 944,
            column: 68
          }
        },
        loc: {
          start: {
            line: 944,
            column: 74
          },
          end: {
            line: 944,
            column: 93
          }
        },
        line: 944
      },
      "21": {
        name: "(anonymous_21)",
        decl: {
          start: {
            line: 952,
            column: 4
          },
          end: {
            line: 952,
            column: 5
          }
        },
        loc: {
          start: {
            line: 952,
            column: 28
          },
          end: {
            line: 959,
            column: 5
          }
        },
        line: 952
      },
      "22": {
        name: "(anonymous_22)",
        decl: {
          start: {
            line: 953,
            column: 42
          },
          end: {
            line: 953,
            column: 43
          }
        },
        loc: {
          start: {
            line: 953,
            column: 48
          },
          end: {
            line: 955,
            column: 9
          }
        },
        line: 953
      },
      "23": {
        name: "(anonymous_23)",
        decl: {
          start: {
            line: 960,
            column: 4
          },
          end: {
            line: 960,
            column: 5
          }
        },
        loc: {
          start: {
            line: 960,
            column: 31
          },
          end: {
            line: 967,
            column: 5
          }
        },
        line: 960
      },
      "24": {
        name: "(anonymous_24)",
        decl: {
          start: {
            line: 961,
            column: 45
          },
          end: {
            line: 961,
            column: 46
          }
        },
        loc: {
          start: {
            line: 961,
            column: 51
          },
          end: {
            line: 963,
            column: 9
          }
        },
        line: 961
      },
      "25": {
        name: "(anonymous_25)",
        decl: {
          start: {
            line: 968,
            column: 4
          },
          end: {
            line: 968,
            column: 5
          }
        },
        loc: {
          start: {
            line: 968,
            column: 32
          },
          end: {
            line: 971,
            column: 5
          }
        },
        line: 968
      },
      "26": {
        name: "(anonymous_26)",
        decl: {
          start: {
            line: 969,
            column: 66
          },
          end: {
            line: 969,
            column: 67
          }
        },
        loc: {
          start: {
            line: 969,
            column: 79
          },
          end: {
            line: 969,
            column: 109
          }
        },
        line: 969
      },
      "27": {
        name: "(anonymous_27)",
        decl: {
          start: {
            line: 972,
            column: 4
          },
          end: {
            line: 972,
            column: 5
          }
        },
        loc: {
          start: {
            line: 972,
            column: 36
          },
          end: {
            line: 1012,
            column: 5
          }
        },
        line: 972
      },
      "28": {
        name: "(anonymous_28)",
        decl: {
          start: {
            line: 1013,
            column: 4
          },
          end: {
            line: 1013,
            column: 5
          }
        },
        loc: {
          start: {
            line: 1013,
            column: 39
          },
          end: {
            line: 1035,
            column: 5
          }
        },
        line: 1013
      },
      "29": {
        name: "(anonymous_29)",
        decl: {
          start: {
            line: 1036,
            column: 4
          },
          end: {
            line: 1036,
            column: 5
          }
        },
        loc: {
          start: {
            line: 1036,
            column: 39
          },
          end: {
            line: 1046,
            column: 5
          }
        },
        line: 1036
      },
      "30": {
        name: "(anonymous_30)",
        decl: {
          start: {
            line: 1042,
            column: 38
          },
          end: {
            line: 1042,
            column: 39
          }
        },
        loc: {
          start: {
            line: 1042,
            column: 54
          },
          end: {
            line: 1042,
            column: 94
          }
        },
        line: 1042
      },
      "31": {
        name: "(anonymous_31)",
        decl: {
          start: {
            line: 1047,
            column: 4
          },
          end: {
            line: 1047,
            column: 5
          }
        },
        loc: {
          start: {
            line: 1047,
            column: 39
          },
          end: {
            line: 1055,
            column: 5
          }
        },
        line: 1047
      },
      "32": {
        name: "(anonymous_32)",
        decl: {
          start: {
            line: 1056,
            column: 4
          },
          end: {
            line: 1056,
            column: 5
          }
        },
        loc: {
          start: {
            line: 1056,
            column: 36
          },
          end: {
            line: 1065,
            column: 5
          }
        },
        line: 1056
      },
      "33": {
        name: "(anonymous_33)",
        decl: {
          start: {
            line: 1066,
            column: 4
          },
          end: {
            line: 1066,
            column: 5
          }
        },
        loc: {
          start: {
            line: 1066,
            column: 40
          },
          end: {
            line: 1099,
            column: 5
          }
        },
        line: 1066
      },
      "34": {
        name: "(anonymous_34)",
        decl: {
          start: {
            line: 1100,
            column: 4
          },
          end: {
            line: 1100,
            column: 5
          }
        },
        loc: {
          start: {
            line: 1100,
            column: 22
          },
          end: {
            line: 1127,
            column: 5
          }
        },
        line: 1100
      },
      "35": {
        name: "(anonymous_35)",
        decl: {
          start: {
            line: 1121,
            column: 74
          },
          end: {
            line: 1121,
            column: 75
          }
        },
        loc: {
          start: {
            line: 1121,
            column: 85
          },
          end: {
            line: 1123,
            column: 21
          }
        },
        line: 1121
      },
      "36": {
        name: "(anonymous_36)",
        decl: {
          start: {
            line: 1129,
            column: 4
          },
          end: {
            line: 1129,
            column: 5
          }
        },
        loc: {
          start: {
            line: 1129,
            column: 35
          },
          end: {
            line: 1158,
            column: 5
          }
        },
        line: 1129
      },
      "37": {
        name: "(anonymous_37)",
        decl: {
          start: {
            line: 1151,
            column: 32
          },
          end: {
            line: 1151,
            column: 33
          }
        },
        loc: {
          start: {
            line: 1151,
            column: 42
          },
          end: {
            line: 1153,
            column: 9
          }
        },
        line: 1151
      },
      "38": {
        name: "(anonymous_38)",
        decl: {
          start: {
            line: 1154,
            column: 33
          },
          end: {
            line: 1154,
            column: 34
          }
        },
        loc: {
          start: {
            line: 1154,
            column: 44
          },
          end: {
            line: 1156,
            column: 9
          }
        },
        line: 1154
      },
      "39": {
        name: "(anonymous_39)",
        decl: {
          start: {
            line: 1159,
            column: 4
          },
          end: {
            line: 1159,
            column: 5
          }
        },
        loc: {
          start: {
            line: 1159,
            column: 46
          },
          end: {
            line: 1174,
            column: 5
          }
        },
        line: 1159
      },
      "40": {
        name: "(anonymous_40)",
        decl: {
          start: {
            line: 1160,
            column: 27
          },
          end: {
            line: 1160,
            column: 28
          }
        },
        loc: {
          start: {
            line: 1160,
            column: 48
          },
          end: {
            line: 1173,
            column: 9
          }
        },
        line: 1160
      },
      "41": {
        name: "(anonymous_41)",
        decl: {
          start: {
            line: 1161,
            column: 37
          },
          end: {
            line: 1161,
            column: 38
          }
        },
        loc: {
          start: {
            line: 1161,
            column: 43
          },
          end: {
            line: 1163,
            column: 13
          }
        },
        line: 1161
      },
      "42": {
        name: "(anonymous_42)",
        decl: {
          start: {
            line: 1164,
            column: 28
          },
          end: {
            line: 1164,
            column: 29
          }
        },
        loc: {
          start: {
            line: 1164,
            column: 38
          },
          end: {
            line: 1171,
            column: 13
          }
        },
        line: 1164
      },
      "43": {
        name: "(anonymous_43)",
        decl: {
          start: {
            line: 1175,
            column: 4
          },
          end: {
            line: 1175,
            column: 5
          }
        },
        loc: {
          start: {
            line: 1175,
            column: 47
          },
          end: {
            line: 1190,
            column: 5
          }
        },
        line: 1175
      },
      "44": {
        name: "(anonymous_44)",
        decl: {
          start: {
            line: 1176,
            column: 27
          },
          end: {
            line: 1176,
            column: 28
          }
        },
        loc: {
          start: {
            line: 1176,
            column: 40
          },
          end: {
            line: 1189,
            column: 9
          }
        },
        line: 1176
      },
      "45": {
        name: "(anonymous_45)",
        decl: {
          start: {
            line: 1182,
            column: 37
          },
          end: {
            line: 1182,
            column: 38
          }
        },
        loc: {
          start: {
            line: 1182,
            column: 43
          },
          end: {
            line: 1184,
            column: 13
          }
        },
        line: 1182
      },
      "46": {
        name: "(anonymous_46)",
        decl: {
          start: {
            line: 1185,
            column: 31
          },
          end: {
            line: 1185,
            column: 32
          }
        },
        loc: {
          start: {
            line: 1185,
            column: 37
          },
          end: {
            line: 1188,
            column: 13
          }
        },
        line: 1185
      },
      "47": {
        name: "(anonymous_47)",
        decl: {
          start: {
            line: 1191,
            column: 4
          },
          end: {
            line: 1191,
            column: 5
          }
        },
        loc: {
          start: {
            line: 1191,
            column: 37
          },
          end: {
            line: 1208,
            column: 5
          }
        },
        line: 1191
      },
      "48": {
        name: "(anonymous_48)",
        decl: {
          start: {
            line: 1209,
            column: 4
          },
          end: {
            line: 1209,
            column: 5
          }
        },
        loc: {
          start: {
            line: 1209,
            column: 39
          },
          end: {
            line: 1220,
            column: 5
          }
        },
        line: 1209
      },
      "49": {
        name: "(anonymous_49)",
        decl: {
          start: {
            line: 1221,
            column: 4
          },
          end: {
            line: 1221,
            column: 5
          }
        },
        loc: {
          start: {
            line: 1221,
            column: 26
          },
          end: {
            line: 1234,
            column: 5
          }
        },
        line: 1221
      },
      "50": {
        name: "(anonymous_50)",
        decl: {
          start: {
            line: 1235,
            column: 4
          },
          end: {
            line: 1235,
            column: 5
          }
        },
        loc: {
          start: {
            line: 1235,
            column: 27
          },
          end: {
            line: 1242,
            column: 5
          }
        },
        line: 1235
      },
      "51": {
        name: "(anonymous_51)",
        decl: {
          start: {
            line: 1243,
            column: 4
          },
          end: {
            line: 1243,
            column: 5
          }
        },
        loc: {
          start: {
            line: 1243,
            column: 39
          },
          end: {
            line: 1250,
            column: 5
          }
        },
        line: 1243
      },
      "52": {
        name: "(anonymous_52)",
        decl: {
          start: {
            line: 1251,
            column: 4
          },
          end: {
            line: 1251,
            column: 5
          }
        },
        loc: {
          start: {
            line: 1251,
            column: 40
          },
          end: {
            line: 1256,
            column: 5
          }
        },
        line: 1251
      },
      "53": {
        name: "(anonymous_53)",
        decl: {
          start: {
            line: 1257,
            column: 4
          },
          end: {
            line: 1257,
            column: 5
          }
        },
        loc: {
          start: {
            line: 1257,
            column: 41
          },
          end: {
            line: 1270,
            column: 5
          }
        },
        line: 1257
      },
      "54": {
        name: "(anonymous_54)",
        decl: {
          start: {
            line: 1271,
            column: 4
          },
          end: {
            line: 1271,
            column: 5
          }
        },
        loc: {
          start: {
            line: 1271,
            column: 40
          },
          end: {
            line: 1273,
            column: 5
          }
        },
        line: 1271
      },
      "55": {
        name: "(anonymous_55)",
        decl: {
          start: {
            line: 1274,
            column: 4
          },
          end: {
            line: 1274,
            column: 5
          }
        },
        loc: {
          start: {
            line: 1274,
            column: 34
          },
          end: {
            line: 1283,
            column: 5
          }
        },
        line: 1274
      },
      "56": {
        name: "(anonymous_56)",
        decl: {
          start: {
            line: 1284,
            column: 4
          },
          end: {
            line: 1284,
            column: 5
          }
        },
        loc: {
          start: {
            line: 1284,
            column: 27
          },
          end: {
            line: 1302,
            column: 5
          }
        },
        line: 1284
      },
      "57": {
        name: "(anonymous_57)",
        decl: {
          start: {
            line: 1303,
            column: 4
          },
          end: {
            line: 1303,
            column: 5
          }
        },
        loc: {
          start: {
            line: 1303,
            column: 33
          },
          end: {
            line: 1317,
            column: 5
          }
        },
        line: 1303
      },
      "58": {
        name: "(anonymous_58)",
        decl: {
          start: {
            line: 1318,
            column: 4
          },
          end: {
            line: 1318,
            column: 5
          }
        },
        loc: {
          start: {
            line: 1318,
            column: 45
          },
          end: {
            line: 1329,
            column: 5
          }
        },
        line: 1318
      },
      "59": {
        name: "(anonymous_59)",
        decl: {
          start: {
            line: 1321,
            column: 63
          },
          end: {
            line: 1321,
            column: 64
          }
        },
        loc: {
          start: {
            line: 1321,
            column: 70
          },
          end: {
            line: 1321,
            column: 86
          }
        },
        line: 1321
      },
      "60": {
        name: "(anonymous_60)",
        decl: {
          start: {
            line: 1322,
            column: 53
          },
          end: {
            line: 1322,
            column: 54
          }
        },
        loc: {
          start: {
            line: 1322,
            column: 60
          },
          end: {
            line: 1322,
            column: 76
          }
        },
        line: 1322
      },
      "61": {
        name: "(anonymous_61)",
        decl: {
          start: {
            line: 1327,
            column: 51
          },
          end: {
            line: 1327,
            column: 52
          }
        },
        loc: {
          start: {
            line: 1327,
            column: 58
          },
          end: {
            line: 1327,
            column: 74
          }
        },
        line: 1327
      },
      "62": {
        name: "(anonymous_62)",
        decl: {
          start: {
            line: 1330,
            column: 4
          },
          end: {
            line: 1330,
            column: 5
          }
        },
        loc: {
          start: {
            line: 1330,
            column: 32
          },
          end: {
            line: 1355,
            column: 5
          }
        },
        line: 1330
      },
      "63": {
        name: "(anonymous_63)",
        decl: {
          start: {
            line: 1357,
            column: 4
          },
          end: {
            line: 1357,
            column: 5
          }
        },
        loc: {
          start: {
            line: 1357,
            column: 22
          },
          end: {
            line: 1359,
            column: 5
          }
        },
        line: 1357
      },
      "64": {
        name: "(anonymous_64)",
        decl: {
          start: {
            line: 1360,
            column: 4
          },
          end: {
            line: 1360,
            column: 5
          }
        },
        loc: {
          start: {
            line: 1360,
            column: 19
          },
          end: {
            line: 1362,
            column: 5
          }
        },
        line: 1360
      },
      "65": {
        name: "(anonymous_65)",
        decl: {
          start: {
            line: 1363,
            column: 4
          },
          end: {
            line: 1363,
            column: 5
          }
        },
        loc: {
          start: {
            line: 1363,
            column: 26
          },
          end: {
            line: 1365,
            column: 5
          }
        },
        line: 1363
      },
      "66": {
        name: "(anonymous_66)",
        decl: {
          start: {
            line: 1364,
            column: 55
          },
          end: {
            line: 1364,
            column: 56
          }
        },
        loc: {
          start: {
            line: 1364,
            column: 66
          },
          end: {
            line: 1364,
            column: 85
          }
        },
        line: 1364
      },
      "67": {
        name: "(anonymous_67)",
        decl: {
          start: {
            line: 1366,
            column: 4
          },
          end: {
            line: 1366,
            column: 5
          }
        },
        loc: {
          start: {
            line: 1366,
            column: 30
          },
          end: {
            line: 1368,
            column: 5
          }
        },
        line: 1366
      },
      "68": {
        name: "(anonymous_68)",
        decl: {
          start: {
            line: 1367,
            column: 55
          },
          end: {
            line: 1367,
            column: 56
          }
        },
        loc: {
          start: {
            line: 1367,
            column: 66
          },
          end: {
            line: 1367,
            column: 89
          }
        },
        line: 1367
      },
      "69": {
        name: "(anonymous_69)",
        decl: {
          start: {
            line: 1369,
            column: 4
          },
          end: {
            line: 1369,
            column: 5
          }
        },
        loc: {
          start: {
            line: 1369,
            column: 28
          },
          end: {
            line: 1371,
            column: 5
          }
        },
        line: 1369
      },
      "70": {
        name: "(anonymous_70)",
        decl: {
          start: {
            line: 1372,
            column: 4
          },
          end: {
            line: 1372,
            column: 5
          }
        },
        loc: {
          start: {
            line: 1372,
            column: 20
          },
          end: {
            line: 1374,
            column: 5
          }
        },
        line: 1372
      },
      "71": {
        name: "(anonymous_71)",
        decl: {
          start: {
            line: 1375,
            column: 4
          },
          end: {
            line: 1375,
            column: 5
          }
        },
        loc: {
          start: {
            line: 1375,
            column: 18
          },
          end: {
            line: 1377,
            column: 5
          }
        },
        line: 1375
      },
      "72": {
        name: "(anonymous_72)",
        decl: {
          start: {
            line: 1378,
            column: 4
          },
          end: {
            line: 1378,
            column: 5
          }
        },
        loc: {
          start: {
            line: 1378,
            column: 24
          },
          end: {
            line: 1380,
            column: 5
          }
        },
        line: 1378
      },
      "73": {
        name: "(anonymous_73)",
        decl: {
          start: {
            line: 1381,
            column: 4
          },
          end: {
            line: 1381,
            column: 5
          }
        },
        loc: {
          start: {
            line: 1381,
            column: 21
          },
          end: {
            line: 1403,
            column: 5
          }
        },
        line: 1381
      },
      "74": {
        name: "(anonymous_74)",
        decl: {
          start: {
            line: 1384,
            column: 50
          },
          end: {
            line: 1384,
            column: 51
          }
        },
        loc: {
          start: {
            line: 1384,
            column: 57
          },
          end: {
            line: 1384,
            column: 72
          }
        },
        line: 1384
      },
      "75": {
        name: "(anonymous_75)",
        decl: {
          start: {
            line: 1385,
            column: 50
          },
          end: {
            line: 1385,
            column: 51
          }
        },
        loc: {
          start: {
            line: 1385,
            column: 62
          },
          end: {
            line: 1385,
            column: 77
          }
        },
        line: 1385
      },
      "76": {
        name: "(anonymous_76)",
        decl: {
          start: {
            line: 1387,
            column: 45
          },
          end: {
            line: 1387,
            column: 46
          }
        },
        loc: {
          start: {
            line: 1387,
            column: 57
          },
          end: {
            line: 1387,
            column: 68
          }
        },
        line: 1387
      },
      "77": {
        name: "(anonymous_77)",
        decl: {
          start: {
            line: 1388,
            column: 48
          },
          end: {
            line: 1388,
            column: 49
          }
        },
        loc: {
          start: {
            line: 1388,
            column: 60
          },
          end: {
            line: 1388,
            column: 74
          }
        },
        line: 1388
      },
      "78": {
        name: "(anonymous_78)",
        decl: {
          start: {
            line: 1389,
            column: 46
          },
          end: {
            line: 1389,
            column: 47
          }
        },
        loc: {
          start: {
            line: 1389,
            column: 58
          },
          end: {
            line: 1389,
            column: 70
          }
        },
        line: 1389
      },
      "79": {
        name: "(anonymous_79)",
        decl: {
          start: {
            line: 1392,
            column: 40
          },
          end: {
            line: 1392,
            column: 41
          }
        },
        loc: {
          start: {
            line: 1392,
            column: 47
          },
          end: {
            line: 1392,
            column: 89
          }
        },
        line: 1392
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 79,
            column: 12
          },
          end: {
            line: 81,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 79,
            column: 12
          },
          end: {
            line: 81,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 79
      },
      "1": {
        loc: {
          start: {
            line: 693,
            column: 8
          },
          end: {
            line: 694,
            column: 47
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 693,
            column: 8
          },
          end: {
            line: 694,
            column: 47
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 693
      },
      "2": {
        loc: {
          start: {
            line: 695,
            column: 8
          },
          end: {
            line: 696,
            column: 50
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 695,
            column: 8
          },
          end: {
            line: 696,
            column: 50
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 695
      },
      "3": {
        loc: {
          start: {
            line: 703,
            column: 36
          },
          end: {
            line: 703,
            column: 50
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 703,
            column: 48
          },
          end: {
            line: 703,
            column: 50
          }
        }],
        line: 703
      },
      "4": {
        loc: {
          start: {
            line: 704,
            column: 8
          },
          end: {
            line: 706,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 704,
            column: 8
          },
          end: {
            line: 706,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 704
      },
      "5": {
        loc: {
          start: {
            line: 708,
            column: 8
          },
          end: {
            line: 710,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 708,
            column: 8
          },
          end: {
            line: 710,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 708
      },
      "6": {
        loc: {
          start: {
            line: 715,
            column: 18
          },
          end: {
            line: 715,
            column: 75
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 715,
            column: 18
          },
          end: {
            line: 715,
            column: 32
          }
        }, {
          start: {
            line: 715,
            column: 36
          },
          end: {
            line: 715,
            column: 75
          }
        }],
        line: 715
      },
      "7": {
        loc: {
          start: {
            line: 723,
            column: 31
          },
          end: {
            line: 723,
            column: 103
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 723,
            column: 31
          },
          end: {
            line: 723,
            column: 60
          }
        }, {
          start: {
            line: 723,
            column: 64
          },
          end: {
            line: 723,
            column: 103
          }
        }],
        line: 723
      },
      "8": {
        loc: {
          start: {
            line: 724,
            column: 33
          },
          end: {
            line: 724,
            column: 109
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 724,
            column: 33
          },
          end: {
            line: 724,
            column: 64
          }
        }, {
          start: {
            line: 724,
            column: 68
          },
          end: {
            line: 724,
            column: 109
          }
        }],
        line: 724
      },
      "9": {
        loc: {
          start: {
            line: 725,
            column: 35
          },
          end: {
            line: 725,
            column: 115
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 725,
            column: 35
          },
          end: {
            line: 725,
            column: 68
          }
        }, {
          start: {
            line: 725,
            column: 72
          },
          end: {
            line: 725,
            column: 115
          }
        }],
        line: 725
      },
      "10": {
        loc: {
          start: {
            line: 726,
            column: 33
          },
          end: {
            line: 726,
            column: 70
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 726,
            column: 33
          },
          end: {
            line: 726,
            column: 64
          }
        }, {
          start: {
            line: 726,
            column: 68
          },
          end: {
            line: 726,
            column: 70
          }
        }],
        line: 726
      },
      "11": {
        loc: {
          start: {
            line: 727,
            column: 36
          },
          end: {
            line: 727,
            column: 75
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 727,
            column: 36
          },
          end: {
            line: 727,
            column: 70
          }
        }, {
          start: {
            line: 727,
            column: 74
          },
          end: {
            line: 727,
            column: 75
          }
        }],
        line: 727
      },
      "12": {
        loc: {
          start: {
            line: 728,
            column: 34
          },
          end: {
            line: 728,
            column: 76
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 728,
            column: 34
          },
          end: {
            line: 728,
            column: 66
          }
        }, {
          start: {
            line: 728,
            column: 70
          },
          end: {
            line: 728,
            column: 76
          }
        }],
        line: 728
      },
      "13": {
        loc: {
          start: {
            line: 729,
            column: 35
          },
          end: {
            line: 729,
            column: 77
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 729,
            column: 35
          },
          end: {
            line: 729,
            column: 68
          }
        }, {
          start: {
            line: 729,
            column: 72
          },
          end: {
            line: 729,
            column: 77
          }
        }],
        line: 729
      },
      "14": {
        loc: {
          start: {
            line: 730,
            column: 35
          },
          end: {
            line: 730,
            column: 77
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 730,
            column: 35
          },
          end: {
            line: 730,
            column: 68
          }
        }, {
          start: {
            line: 730,
            column: 72
          },
          end: {
            line: 730,
            column: 77
          }
        }],
        line: 730
      },
      "15": {
        loc: {
          start: {
            line: 731,
            column: 29
          },
          end: {
            line: 731,
            column: 62
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 731,
            column: 29
          },
          end: {
            line: 731,
            column: 56
          }
        }, {
          start: {
            line: 731,
            column: 60
          },
          end: {
            line: 731,
            column: 62
          }
        }],
        line: 731
      },
      "16": {
        loc: {
          start: {
            line: 732,
            column: 31
          },
          end: {
            line: 732,
            column: 66
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 732,
            column: 31
          },
          end: {
            line: 732,
            column: 60
          }
        }, {
          start: {
            line: 732,
            column: 64
          },
          end: {
            line: 732,
            column: 66
          }
        }],
        line: 732
      },
      "17": {
        loc: {
          start: {
            line: 733,
            column: 27
          },
          end: {
            line: 733,
            column: 58
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 733,
            column: 27
          },
          end: {
            line: 733,
            column: 52
          }
        }, {
          start: {
            line: 733,
            column: 56
          },
          end: {
            line: 733,
            column: 58
          }
        }],
        line: 733
      },
      "18": {
        loc: {
          start: {
            line: 734,
            column: 29
          },
          end: {
            line: 734,
            column: 62
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 734,
            column: 29
          },
          end: {
            line: 734,
            column: 56
          }
        }, {
          start: {
            line: 734,
            column: 60
          },
          end: {
            line: 734,
            column: 62
          }
        }],
        line: 734
      },
      "19": {
        loc: {
          start: {
            line: 738,
            column: 25
          },
          end: {
            line: 738,
            column: 96
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 738,
            column: 25
          },
          end: {
            line: 738,
            column: 53
          }
        }, {
          start: {
            line: 738,
            column: 57
          },
          end: {
            line: 738,
            column: 96
          }
        }],
        line: 738
      },
      "20": {
        loc: {
          start: {
            line: 739,
            column: 25
          },
          end: {
            line: 739,
            column: 65
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 739,
            column: 25
          },
          end: {
            line: 739,
            column: 53
          }
        }, {
          start: {
            line: 739,
            column: 57
          },
          end: {
            line: 739,
            column: 65
          }
        }],
        line: 739
      },
      "21": {
        loc: {
          start: {
            line: 740,
            column: 34
          },
          end: {
            line: 740,
            column: 123
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 740,
            column: 34
          },
          end: {
            line: 740,
            column: 71
          }
        }, {
          start: {
            line: 740,
            column: 75
          },
          end: {
            line: 740,
            column: 123
          }
        }],
        line: 740
      },
      "22": {
        loc: {
          start: {
            line: 741,
            column: 31
          },
          end: {
            line: 741,
            column: 114
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 741,
            column: 31
          },
          end: {
            line: 741,
            column: 65
          }
        }, {
          start: {
            line: 741,
            column: 69
          },
          end: {
            line: 741,
            column: 114
          }
        }],
        line: 741
      },
      "23": {
        loc: {
          start: {
            line: 742,
            column: 30
          },
          end: {
            line: 742,
            column: 111
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 742,
            column: 30
          },
          end: {
            line: 742,
            column: 63
          }
        }, {
          start: {
            line: 742,
            column: 67
          },
          end: {
            line: 742,
            column: 111
          }
        }],
        line: 742
      },
      "24": {
        loc: {
          start: {
            line: 743,
            column: 30
          },
          end: {
            line: 743,
            column: 69
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 743,
            column: 30
          },
          end: {
            line: 743,
            column: 63
          }
        }, {
          start: {
            line: 743,
            column: 67
          },
          end: {
            line: 743,
            column: 69
          }
        }],
        line: 743
      },
      "25": {
        loc: {
          start: {
            line: 744,
            column: 29
          },
          end: {
            line: 744,
            column: 67
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 744,
            column: 29
          },
          end: {
            line: 744,
            column: 61
          }
        }, {
          start: {
            line: 744,
            column: 65
          },
          end: {
            line: 744,
            column: 67
          }
        }],
        line: 744
      },
      "26": {
        loc: {
          start: {
            line: 745,
            column: 32
          },
          end: {
            line: 745,
            column: 73
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 745,
            column: 32
          },
          end: {
            line: 745,
            column: 67
          }
        }, {
          start: {
            line: 745,
            column: 71
          },
          end: {
            line: 745,
            column: 73
          }
        }],
        line: 745
      },
      "27": {
        loc: {
          start: {
            line: 746,
            column: 29
          },
          end: {
            line: 746,
            column: 67
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 746,
            column: 29
          },
          end: {
            line: 746,
            column: 61
          }
        }, {
          start: {
            line: 746,
            column: 65
          },
          end: {
            line: 746,
            column: 67
          }
        }],
        line: 746
      },
      "28": {
        loc: {
          start: {
            line: 775,
            column: 8
          },
          end: {
            line: 777,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 775,
            column: 8
          },
          end: {
            line: 777,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 775
      },
      "29": {
        loc: {
          start: {
            line: 778,
            column: 8
          },
          end: {
            line: 780,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 778,
            column: 8
          },
          end: {
            line: 780,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 778
      },
      "30": {
        loc: {
          start: {
            line: 778,
            column: 12
          },
          end: {
            line: 778,
            column: 73
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 778,
            column: 12
          },
          end: {
            line: 778,
            column: 43
          }
        }, {
          start: {
            line: 778,
            column: 47
          },
          end: {
            line: 778,
            column: 73
          }
        }],
        line: 778
      },
      "31": {
        loc: {
          start: {
            line: 795,
            column: 33
          },
          end: {
            line: 795,
            column: 87
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 795,
            column: 58
          },
          end: {
            line: 795,
            column: 71
          }
        }, {
          start: {
            line: 795,
            column: 74
          },
          end: {
            line: 795,
            column: 87
          }
        }],
        line: 795
      },
      "32": {
        loc: {
          start: {
            line: 809,
            column: 29
          },
          end: {
            line: 809,
            column: 52
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 809,
            column: 38
          },
          end: {
            line: 809,
            column: 52
          }
        }],
        line: 809
      },
      "33": {
        loc: {
          start: {
            line: 811,
            column: 8
          },
          end: {
            line: 813,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 811,
            column: 8
          },
          end: {
            line: 813,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 811
      },
      "34": {
        loc: {
          start: {
            line: 814,
            column: 8
          },
          end: {
            line: 816,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 814,
            column: 8
          },
          end: {
            line: 816,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 814
      },
      "35": {
        loc: {
          start: {
            line: 814,
            column: 12
          },
          end: {
            line: 814,
            column: 71
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 814,
            column: 12
          },
          end: {
            line: 814,
            column: 38
          }
        }, {
          start: {
            line: 814,
            column: 42
          },
          end: {
            line: 814,
            column: 71
          }
        }],
        line: 814
      },
      "36": {
        loc: {
          start: {
            line: 822,
            column: 12
          },
          end: {
            line: 830,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 822,
            column: 12
          },
          end: {
            line: 830,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 822
      },
      "37": {
        loc: {
          start: {
            line: 822,
            column: 16
          },
          end: {
            line: 822,
            column: 42
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 822,
            column: 16
          },
          end: {
            line: 822,
            column: 23
          }
        }, {
          start: {
            line: 822,
            column: 27
          },
          end: {
            line: 822,
            column: 42
          }
        }],
        line: 822
      },
      "38": {
        loc: {
          start: {
            line: 826,
            column: 20
          },
          end: {
            line: 828,
            column: 21
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 826,
            column: 20
          },
          end: {
            line: 828,
            column: 21
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 826
      },
      "39": {
        loc: {
          start: {
            line: 826,
            column: 24
          },
          end: {
            line: 826,
            column: 50
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 826,
            column: 24
          },
          end: {
            line: 826,
            column: 31
          }
        }, {
          start: {
            line: 826,
            column: 35
          },
          end: {
            line: 826,
            column: 50
          }
        }],
        line: 826
      },
      "40": {
        loc: {
          start: {
            line: 847,
            column: 32
          },
          end: {
            line: 847,
            column: 60
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 847,
            column: 41
          },
          end: {
            line: 847,
            column: 60
          }
        }],
        line: 847
      },
      "41": {
        loc: {
          start: {
            line: 855,
            column: 8
          },
          end: {
            line: 857,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 855,
            column: 8
          },
          end: {
            line: 857,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 855
      },
      "42": {
        loc: {
          start: {
            line: 859,
            column: 8
          },
          end: {
            line: 861,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 859,
            column: 8
          },
          end: {
            line: 861,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 859
      },
      "43": {
        loc: {
          start: {
            line: 859,
            column: 12
          },
          end: {
            line: 859,
            column: 71
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 859,
            column: 12
          },
          end: {
            line: 859,
            column: 41
          }
        }, {
          start: {
            line: 859,
            column: 45
          },
          end: {
            line: 859,
            column: 71
          }
        }],
        line: 859
      },
      "44": {
        loc: {
          start: {
            line: 877,
            column: 8
          },
          end: {
            line: 879,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 877,
            column: 8
          },
          end: {
            line: 879,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 877
      },
      "45": {
        loc: {
          start: {
            line: 891,
            column: 23
          },
          end: {
            line: 891,
            column: 48
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 891,
            column: 23
          },
          end: {
            line: 891,
            column: 39
          }
        }, {
          start: {
            line: 891,
            column: 43
          },
          end: {
            line: 891,
            column: 48
          }
        }],
        line: 891
      },
      "46": {
        loc: {
          start: {
            line: 892,
            column: 30
          },
          end: {
            line: 892,
            column: 60
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 892,
            column: 30
          },
          end: {
            line: 892,
            column: 53
          }
        }, {
          start: {
            line: 892,
            column: 57
          },
          end: {
            line: 892,
            column: 60
          }
        }],
        line: 892
      },
      "47": {
        loc: {
          start: {
            line: 893,
            column: 32
          },
          end: {
            line: 893,
            column: 64
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 893,
            column: 32
          },
          end: {
            line: 893,
            column: 57
          }
        }, {
          start: {
            line: 893,
            column: 61
          },
          end: {
            line: 893,
            column: 64
          }
        }],
        line: 893
      },
      "48": {
        loc: {
          start: {
            line: 916,
            column: 8
          },
          end: {
            line: 918,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 916,
            column: 8
          },
          end: {
            line: 918,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 916
      },
      "49": {
        loc: {
          start: {
            line: 919,
            column: 8
          },
          end: {
            line: 921,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 919,
            column: 8
          },
          end: {
            line: 921,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 919
      },
      "50": {
        loc: {
          start: {
            line: 919,
            column: 12
          },
          end: {
            line: 919,
            column: 66
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 919,
            column: 12
          },
          end: {
            line: 919,
            column: 37
          }
        }, {
          start: {
            line: 919,
            column: 41
          },
          end: {
            line: 919,
            column: 66
          }
        }],
        line: 919
      },
      "51": {
        loc: {
          start: {
            line: 924,
            column: 8
          },
          end: {
            line: 946,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 924,
            column: 8
          },
          end: {
            line: 946,
            column: 9
          }
        }, {
          start: {
            line: 939,
            column: 13
          },
          end: {
            line: 946,
            column: 9
          }
        }],
        line: 924
      },
      "52": {
        loc: {
          start: {
            line: 939,
            column: 13
          },
          end: {
            line: 946,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 939,
            column: 13
          },
          end: {
            line: 946,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 939
      },
      "53": {
        loc: {
          start: {
            line: 974,
            column: 8
          },
          end: {
            line: 975,
            column: 19
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 974,
            column: 8
          },
          end: {
            line: 975,
            column: 19
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 974
      },
      "54": {
        loc: {
          start: {
            line: 977,
            column: 8
          },
          end: {
            line: 978,
            column: 19
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 977,
            column: 8
          },
          end: {
            line: 978,
            column: 19
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 977
      },
      "55": {
        loc: {
          start: {
            line: 1002,
            column: 12
          },
          end: {
            line: 1005,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 1002,
            column: 12
          },
          end: {
            line: 1005,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 1002
      },
      "56": {
        loc: {
          start: {
            line: 1002,
            column: 16
          },
          end: {
            line: 1002,
            column: 56
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 1002,
            column: 16
          },
          end: {
            line: 1002,
            column: 29
          }
        }, {
          start: {
            line: 1002,
            column: 33
          },
          end: {
            line: 1002,
            column: 56
          }
        }],
        line: 1002
      },
      "57": {
        loc: {
          start: {
            line: 1019,
            column: 12
          },
          end: {
            line: 1020,
            column: 25
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 1019,
            column: 12
          },
          end: {
            line: 1020,
            column: 25
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 1019
      },
      "58": {
        loc: {
          start: {
            line: 1022,
            column: 12
          },
          end: {
            line: 1030,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 1022,
            column: 12
          },
          end: {
            line: 1030,
            column: 13
          }
        }, {
          start: {
            line: 1025,
            column: 17
          },
          end: {
            line: 1030,
            column: 13
          }
        }],
        line: 1022
      },
      "59": {
        loc: {
          start: {
            line: 1025,
            column: 17
          },
          end: {
            line: 1030,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 1025,
            column: 17
          },
          end: {
            line: 1030,
            column: 13
          }
        }, {
          start: {
            line: 1028,
            column: 17
          },
          end: {
            line: 1030,
            column: 13
          }
        }],
        line: 1025
      },
      "60": {
        loc: {
          start: {
            line: 1037,
            column: 24
          },
          end: {
            line: 1037,
            column: 66
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 1037,
            column: 24
          },
          end: {
            line: 1037,
            column: 60
          }
        }, {
          start: {
            line: 1037,
            column: 64
          },
          end: {
            line: 1037,
            column: 66
          }
        }],
        line: 1037
      },
      "61": {
        loc: {
          start: {
            line: 1038,
            column: 8
          },
          end: {
            line: 1039,
            column: 23
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 1038,
            column: 8
          },
          end: {
            line: 1039,
            column: 23
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 1038
      },
      "62": {
        loc: {
          start: {
            line: 1049,
            column: 8
          },
          end: {
            line: 1050,
            column: 21
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 1049,
            column: 8
          },
          end: {
            line: 1050,
            column: 21
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 1049
      },
      "63": {
        loc: {
          start: {
            line: 1052,
            column: 8
          },
          end: {
            line: 1053,
            column: 23
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 1052,
            column: 8
          },
          end: {
            line: 1053,
            column: 23
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 1052
      },
      "64": {
        loc: {
          start: {
            line: 1058,
            column: 8
          },
          end: {
            line: 1059,
            column: 23
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 1058,
            column: 8
          },
          end: {
            line: 1059,
            column: 23
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 1058
      },
      "65": {
        loc: {
          start: {
            line: 1068,
            column: 8
          },
          end: {
            line: 1077,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 1068,
            column: 8
          },
          end: {
            line: 1077,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 1068
      },
      "66": {
        loc: {
          start: {
            line: 1071,
            column: 26
          },
          end: {
            line: 1071,
            column: 86
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 1071,
            column: 67
          },
          end: {
            line: 1071,
            column: 77
          }
        }, {
          start: {
            line: 1071,
            column: 80
          },
          end: {
            line: 1071,
            column: 86
          }
        }],
        line: 1071
      },
      "67": {
        loc: {
          start: {
            line: 1078,
            column: 8
          },
          end: {
            line: 1087,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 1078,
            column: 8
          },
          end: {
            line: 1087,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 1078
      },
      "68": {
        loc: {
          start: {
            line: 1081,
            column: 26
          },
          end: {
            line: 1081,
            column: 81
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 1081,
            column: 64
          },
          end: {
            line: 1081,
            column: 70
          }
        }, {
          start: {
            line: 1081,
            column: 73
          },
          end: {
            line: 1081,
            column: 81
          }
        }],
        line: 1081
      },
      "69": {
        loc: {
          start: {
            line: 1088,
            column: 8
          },
          end: {
            line: 1097,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 1088,
            column: 8
          },
          end: {
            line: 1097,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 1088
      },
      "70": {
        loc: {
          start: {
            line: 1091,
            column: 26
          },
          end: {
            line: 1091,
            column: 85
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 1091,
            column: 66
          },
          end: {
            line: 1091,
            column: 76
          }
        }, {
          start: {
            line: 1091,
            column: 79
          },
          end: {
            line: 1091,
            column: 85
          }
        }],
        line: 1091
      },
      "71": {
        loc: {
          start: {
            line: 1105,
            column: 12
          },
          end: {
            line: 1125,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 1105,
            column: 12
          },
          end: {
            line: 1125,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 1105
      },
      "72": {
        loc: {
          start: {
            line: 1105,
            column: 16
          },
          end: {
            line: 1107,
            column: 45
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 1105,
            column: 16
          },
          end: {
            line: 1105,
            column: 44
          }
        }, {
          start: {
            line: 1106,
            column: 16
          },
          end: {
            line: 1106,
            column: 42
          }
        }, {
          start: {
            line: 1107,
            column: 16
          },
          end: {
            line: 1107,
            column: 45
          }
        }],
        line: 1105
      },
      "73": {
        loc: {
          start: {
            line: 1120,
            column: 16
          },
          end: {
            line: 1124,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 1120,
            column: 16
          },
          end: {
            line: 1124,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 1120
      },
      "74": {
        loc: {
          start: {
            line: 1141,
            column: 12
          },
          end: {
            line: 1141,
            column: 78
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 1141,
            column: 12
          },
          end: {
            line: 1141,
            column: 47
          }
        }, {
          start: {
            line: 1141,
            column: 51
          },
          end: {
            line: 1141,
            column: 78
          }
        }],
        line: 1141
      },
      "75": {
        loc: {
          start: {
            line: 1166,
            column: 16
          },
          end: {
            line: 1170,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 1166,
            column: 16
          },
          end: {
            line: 1170,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 1166
      },
      "76": {
        loc: {
          start: {
            line: 1178,
            column: 12
          },
          end: {
            line: 1181,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 1178,
            column: 12
          },
          end: {
            line: 1181,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 1178
      },
      "77": {
        loc: {
          start: {
            line: 1178,
            column: 16
          },
          end: {
            line: 1178,
            column: 42
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 1178,
            column: 16
          },
          end: {
            line: 1178,
            column: 24
          }
        }, {
          start: {
            line: 1178,
            column: 28
          },
          end: {
            line: 1178,
            column: 42
          }
        }],
        line: 1178
      },
      "78": {
        loc: {
          start: {
            line: 1193,
            column: 8
          },
          end: {
            line: 1194,
            column: 19
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 1193,
            column: 8
          },
          end: {
            line: 1194,
            column: 19
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 1193
      },
      "79": {
        loc: {
          start: {
            line: 1196,
            column: 8
          },
          end: {
            line: 1205,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 1196,
            column: 8
          },
          end: {
            line: 1205,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 1196
      },
      "80": {
        loc: {
          start: {
            line: 1196,
            column: 12
          },
          end: {
            line: 1196,
            column: 39
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 1196,
            column: 12
          },
          end: {
            line: 1196,
            column: 22
          }
        }, {
          start: {
            line: 1196,
            column: 26
          },
          end: {
            line: 1196,
            column: 39
          }
        }],
        line: 1196
      },
      "81": {
        loc: {
          start: {
            line: 1214,
            column: 21
          },
          end: {
            line: 1214,
            column: 75
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 1214,
            column: 46
          },
          end: {
            line: 1214,
            column: 59
          }
        }, {
          start: {
            line: 1214,
            column: 62
          },
          end: {
            line: 1214,
            column: 75
          }
        }],
        line: 1214
      },
      "82": {
        loc: {
          start: {
            line: 1223,
            column: 8
          },
          end: {
            line: 1224,
            column: 19
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 1223,
            column: 8
          },
          end: {
            line: 1224,
            column: 19
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 1223
      },
      "83": {
        loc: {
          start: {
            line: 1226,
            column: 8
          },
          end: {
            line: 1228,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 1226,
            column: 8
          },
          end: {
            line: 1228,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 1226
      },
      "84": {
        loc: {
          start: {
            line: 1230,
            column: 8
          },
          end: {
            line: 1233,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 1230,
            column: 8
          },
          end: {
            line: 1233,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 1230
      },
      "85": {
        loc: {
          start: {
            line: 1238,
            column: 8
          },
          end: {
            line: 1241,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 1238,
            column: 8
          },
          end: {
            line: 1241,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 1238
      },
      "86": {
        loc: {
          start: {
            line: 1238,
            column: 12
          },
          end: {
            line: 1238,
            column: 55
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 1238,
            column: 12
          },
          end: {
            line: 1238,
            column: 17
          }
        }, {
          start: {
            line: 1238,
            column: 21
          },
          end: {
            line: 1238,
            column: 55
          }
        }],
        line: 1238
      },
      "87": {
        loc: {
          start: {
            line: 1245,
            column: 8
          },
          end: {
            line: 1246,
            column: 19
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 1245,
            column: 8
          },
          end: {
            line: 1246,
            column: 19
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 1245
      },
      "88": {
        loc: {
          start: {
            line: 1253,
            column: 8
          },
          end: {
            line: 1254,
            column: 19
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 1253,
            column: 8
          },
          end: {
            line: 1254,
            column: 19
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 1253
      },
      "89": {
        loc: {
          start: {
            line: 1259,
            column: 8
          },
          end: {
            line: 1260,
            column: 19
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 1259,
            column: 8
          },
          end: {
            line: 1260,
            column: 19
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 1259
      },
      "90": {
        loc: {
          start: {
            line: 1263,
            column: 24
          },
          end: {
            line: 1263,
            column: 66
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 1263,
            column: 24
          },
          end: {
            line: 1263,
            column: 60
          }
        }, {
          start: {
            line: 1263,
            column: 64
          },
          end: {
            line: 1263,
            column: 66
          }
        }],
        line: 1263
      },
      "91": {
        loc: {
          start: {
            line: 1266,
            column: 8
          },
          end: {
            line: 1268,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 1266,
            column: 8
          },
          end: {
            line: 1268,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 1266
      },
      "92": {
        loc: {
          start: {
            line: 1276,
            column: 8
          },
          end: {
            line: 1277,
            column: 19
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 1276,
            column: 8
          },
          end: {
            line: 1277,
            column: 19
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 1276
      },
      "93": {
        loc: {
          start: {
            line: 1280,
            column: 8
          },
          end: {
            line: 1282,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 1280,
            column: 8
          },
          end: {
            line: 1282,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 1280
      },
      "94": {
        loc: {
          start: {
            line: 1385,
            column: 30
          },
          end: {
            line: 1385,
            column: 108
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 1385,
            column: 30
          },
          end: {
            line: 1385,
            column: 103
          }
        }, {
          start: {
            line: 1385,
            column: 107
          },
          end: {
            line: 1385,
            column: 108
          }
        }],
        line: 1385
      },
      "95": {
        loc: {
          start: {
            line: 1387,
            column: 23
          },
          end: {
            line: 1387,
            column: 101
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 1387,
            column: 23
          },
          end: {
            line: 1387,
            column: 96
          }
        }, {
          start: {
            line: 1387,
            column: 100
          },
          end: {
            line: 1387,
            column: 101
          }
        }],
        line: 1387
      },
      "96": {
        loc: {
          start: {
            line: 1388,
            column: 26
          },
          end: {
            line: 1388,
            column: 107
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 1388,
            column: 26
          },
          end: {
            line: 1388,
            column: 102
          }
        }, {
          start: {
            line: 1388,
            column: 106
          },
          end: {
            line: 1388,
            column: 107
          }
        }],
        line: 1388
      },
      "97": {
        loc: {
          start: {
            line: 1389,
            column: 24
          },
          end: {
            line: 1389,
            column: 103
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 1389,
            column: 24
          },
          end: {
            line: 1389,
            column: 98
          }
        }, {
          start: {
            line: 1389,
            column: 102
          },
          end: {
            line: 1389,
            column: 103
          }
        }],
        line: 1389
      },
      "98": {
        loc: {
          start: {
            line: 1392,
            column: 47
          },
          end: {
            line: 1392,
            column: 89
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 1392,
            column: 47
          },
          end: {
            line: 1392,
            column: 66
          }
        }, {
          start: {
            line: 1392,
            column: 70
          },
          end: {
            line: 1392,
            column: 89
          }
        }],
        line: 1392
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0,
      "74": 0,
      "75": 0,
      "76": 0,
      "77": 0,
      "78": 0,
      "79": 0,
      "80": 0,
      "81": 0,
      "82": 0,
      "83": 0,
      "84": 0,
      "85": 0,
      "86": 0,
      "87": 0,
      "88": 0,
      "89": 0,
      "90": 0,
      "91": 0,
      "92": 0,
      "93": 0,
      "94": 0,
      "95": 0,
      "96": 0,
      "97": 0,
      "98": 0,
      "99": 0,
      "100": 0,
      "101": 0,
      "102": 0,
      "103": 0,
      "104": 0,
      "105": 0,
      "106": 0,
      "107": 0,
      "108": 0,
      "109": 0,
      "110": 0,
      "111": 0,
      "112": 0,
      "113": 0,
      "114": 0,
      "115": 0,
      "116": 0,
      "117": 0,
      "118": 0,
      "119": 0,
      "120": 0,
      "121": 0,
      "122": 0,
      "123": 0,
      "124": 0,
      "125": 0,
      "126": 0,
      "127": 0,
      "128": 0,
      "129": 0,
      "130": 0,
      "131": 0,
      "132": 0,
      "133": 0,
      "134": 0,
      "135": 0,
      "136": 0,
      "137": 0,
      "138": 0,
      "139": 0,
      "140": 0,
      "141": 0,
      "142": 0,
      "143": 0,
      "144": 0,
      "145": 0,
      "146": 0,
      "147": 0,
      "148": 0,
      "149": 0,
      "150": 0,
      "151": 0,
      "152": 0,
      "153": 0,
      "154": 0,
      "155": 0,
      "156": 0,
      "157": 0,
      "158": 0,
      "159": 0,
      "160": 0,
      "161": 0,
      "162": 0,
      "163": 0,
      "164": 0,
      "165": 0,
      "166": 0,
      "167": 0,
      "168": 0,
      "169": 0,
      "170": 0,
      "171": 0,
      "172": 0,
      "173": 0,
      "174": 0,
      "175": 0,
      "176": 0,
      "177": 0,
      "178": 0,
      "179": 0,
      "180": 0,
      "181": 0,
      "182": 0,
      "183": 0,
      "184": 0,
      "185": 0,
      "186": 0,
      "187": 0,
      "188": 0,
      "189": 0,
      "190": 0,
      "191": 0,
      "192": 0,
      "193": 0,
      "194": 0,
      "195": 0,
      "196": 0,
      "197": 0,
      "198": 0,
      "199": 0,
      "200": 0,
      "201": 0,
      "202": 0,
      "203": 0,
      "204": 0,
      "205": 0,
      "206": 0,
      "207": 0,
      "208": 0,
      "209": 0,
      "210": 0,
      "211": 0,
      "212": 0,
      "213": 0,
      "214": 0,
      "215": 0,
      "216": 0,
      "217": 0,
      "218": 0,
      "219": 0,
      "220": 0,
      "221": 0,
      "222": 0,
      "223": 0,
      "224": 0,
      "225": 0,
      "226": 0,
      "227": 0,
      "228": 0,
      "229": 0,
      "230": 0,
      "231": 0,
      "232": 0,
      "233": 0,
      "234": 0,
      "235": 0,
      "236": 0,
      "237": 0,
      "238": 0,
      "239": 0,
      "240": 0,
      "241": 0,
      "242": 0,
      "243": 0,
      "244": 0,
      "245": 0,
      "246": 0,
      "247": 0,
      "248": 0,
      "249": 0,
      "250": 0,
      "251": 0,
      "252": 0,
      "253": 0,
      "254": 0,
      "255": 0,
      "256": 0,
      "257": 0,
      "258": 0,
      "259": 0,
      "260": 0,
      "261": 0,
      "262": 0,
      "263": 0,
      "264": 0,
      "265": 0,
      "266": 0,
      "267": 0,
      "268": 0,
      "269": 0,
      "270": 0,
      "271": 0,
      "272": 0,
      "273": 0,
      "274": 0,
      "275": 0,
      "276": 0,
      "277": 0,
      "278": 0,
      "279": 0,
      "280": 0,
      "281": 0,
      "282": 0,
      "283": 0,
      "284": 0,
      "285": 0,
      "286": 0,
      "287": 0,
      "288": 0,
      "289": 0,
      "290": 0,
      "291": 0,
      "292": 0,
      "293": 0,
      "294": 0,
      "295": 0,
      "296": 0,
      "297": 0,
      "298": 0,
      "299": 0,
      "300": 0,
      "301": 0,
      "302": 0,
      "303": 0,
      "304": 0,
      "305": 0,
      "306": 0,
      "307": 0,
      "308": 0,
      "309": 0,
      "310": 0,
      "311": 0,
      "312": 0,
      "313": 0,
      "314": 0,
      "315": 0,
      "316": 0,
      "317": 0,
      "318": 0,
      "319": 0,
      "320": 0,
      "321": 0,
      "322": 0,
      "323": 0,
      "324": 0,
      "325": 0,
      "326": 0,
      "327": 0,
      "328": 0,
      "329": 0,
      "330": 0,
      "331": 0,
      "332": 0,
      "333": 0,
      "334": 0,
      "335": 0,
      "336": 0,
      "337": 0,
      "338": 0,
      "339": 0,
      "340": 0,
      "341": 0,
      "342": 0,
      "343": 0,
      "344": 0,
      "345": 0,
      "346": 0,
      "347": 0,
      "348": 0,
      "349": 0,
      "350": 0,
      "351": 0,
      "352": 0,
      "353": 0,
      "354": 0,
      "355": 0,
      "356": 0,
      "357": 0,
      "358": 0,
      "359": 0,
      "360": 0,
      "361": 0,
      "362": 0,
      "363": 0,
      "364": 0,
      "365": 0,
      "366": 0,
      "367": 0,
      "368": 0,
      "369": 0,
      "370": 0,
      "371": 0,
      "372": 0,
      "373": 0,
      "374": 0,
      "375": 0,
      "376": 0,
      "377": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0,
      "74": 0,
      "75": 0,
      "76": 0,
      "77": 0,
      "78": 0,
      "79": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0, 0],
      "10": [0, 0],
      "11": [0, 0],
      "12": [0, 0],
      "13": [0, 0],
      "14": [0, 0],
      "15": [0, 0],
      "16": [0, 0],
      "17": [0, 0],
      "18": [0, 0],
      "19": [0, 0],
      "20": [0, 0],
      "21": [0, 0],
      "22": [0, 0],
      "23": [0, 0],
      "24": [0, 0],
      "25": [0, 0],
      "26": [0, 0],
      "27": [0, 0],
      "28": [0, 0],
      "29": [0, 0],
      "30": [0, 0],
      "31": [0, 0],
      "32": [0],
      "33": [0, 0],
      "34": [0, 0],
      "35": [0, 0],
      "36": [0, 0],
      "37": [0, 0],
      "38": [0, 0],
      "39": [0, 0],
      "40": [0],
      "41": [0, 0],
      "42": [0, 0],
      "43": [0, 0],
      "44": [0, 0],
      "45": [0, 0],
      "46": [0, 0],
      "47": [0, 0],
      "48": [0, 0],
      "49": [0, 0],
      "50": [0, 0],
      "51": [0, 0],
      "52": [0, 0],
      "53": [0, 0],
      "54": [0, 0],
      "55": [0, 0],
      "56": [0, 0],
      "57": [0, 0],
      "58": [0, 0],
      "59": [0, 0],
      "60": [0, 0],
      "61": [0, 0],
      "62": [0, 0],
      "63": [0, 0],
      "64": [0, 0],
      "65": [0, 0],
      "66": [0, 0],
      "67": [0, 0],
      "68": [0, 0],
      "69": [0, 0],
      "70": [0, 0],
      "71": [0, 0],
      "72": [0, 0, 0],
      "73": [0, 0],
      "74": [0, 0],
      "75": [0, 0],
      "76": [0, 0],
      "77": [0, 0],
      "78": [0, 0],
      "79": [0, 0],
      "80": [0, 0],
      "81": [0, 0],
      "82": [0, 0],
      "83": [0, 0],
      "84": [0, 0],
      "85": [0, 0],
      "86": [0, 0],
      "87": [0, 0],
      "88": [0, 0],
      "89": [0, 0],
      "90": [0, 0],
      "91": [0, 0],
      "92": [0, 0],
      "93": [0, 0],
      "94": [0, 0],
      "95": [0, 0],
      "96": [0, 0],
      "97": [0, 0],
      "98": [0, 0]
    },
    inputSourceMap: {
      file: "/home/mhugo/code/claude-code-flow/src/agents/agent-manager.ts",
      mappings: "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",
      names: [],
      sources: ["/home/mhugo/code/claude-code-flow/src/agents/agent-manager.ts"],
      sourcesContent: ["/**\n * Comprehensive agent management system\n */\n\nimport { EventEmitter } from 'node:events';\nimport { spawn, ChildProcess } from 'node:child_process';\nimport type { ILogger } from '../core/logger.js';\nimport type { IEventBus } from '../core/event-bus.js';\nimport type {\n  AgentId,\n  AgentType,\n  AgentStatus,\n  AgentState,\n  AgentCapabilities,\n  AgentConfig,\n  AgentEnvironment,\n  AgentMetrics,\n  AgentError,\n} from '../swarm/types.js';\nimport type { DistributedMemorySystem } from '../memory/distributed-memory.js';\nimport { generateId } from '../utils/helpers.js';\n\nexport interface AgentManagerConfig {\n  maxAgents: number;\n  defaultTimeout: number;\n  heartbeatInterval: number;\n  healthCheckInterval: number;\n  autoRestart: boolean;\n  resourceLimits: {\n    memory: number;\n    cpu: number;\n    disk: number;\n  };\n  agentDefaults: {\n    autonomyLevel: number;\n    learningEnabled: boolean;\n    adaptationEnabled: boolean;\n  };\n  environmentDefaults: {\n    runtime: 'deno' | 'node' | 'claude' | 'browser';\n    workingDirectory: string;\n    tempDirectory: string;\n    logDirectory: string;\n  };\n}\n\nexport interface AgentTemplate {\n  name: string;\n  type: AgentType;\n  capabilities: AgentCapabilities;\n  config: Partial<AgentConfig>;\n  environment: Partial<AgentEnvironment>;\n  startupScript?: string;\n  dependencies?: string[];\n}\n\nexport interface AgentCluster {\n  id: string;\n  name: string;\n  agents: AgentId[];\n  coordinator: AgentId;\n  strategy: 'round-robin' | 'load-based' | 'capability-based';\n  maxSize: number;\n  autoScale: boolean;\n}\n\nexport interface AgentPool {\n  id: string;\n  name: string;\n  type: AgentType;\n  minSize: number;\n  maxSize: number;\n  currentSize: number;\n  availableAgents: AgentId[];\n  busyAgents: AgentId[];\n  template: AgentTemplate;\n  autoScale: boolean;\n  scaleUpThreshold: number;\n  scaleDownThreshold: number;\n}\n\nexport interface ScalingPolicy {\n  name: string;\n  enabled: boolean;\n  rules: ScalingRule[];\n  cooldownPeriod: number;\n  maxScaleOperations: number;\n}\n\nexport interface ScalingRule {\n  metric: string;\n  threshold: number;\n  comparison: 'gt' | 'lt' | 'eq' | 'gte' | 'lte';\n  action: 'scale-up' | 'scale-down';\n  amount: number;\n  conditions?: string[];\n}\n\nexport interface AgentHealth {\n  agentId: string;\n  overall: number; // 0-1 health score\n  components: {\n    responsiveness: number;\n    performance: number;\n    reliability: number;\n    resourceUsage: number;\n  };\n  issues: HealthIssue[];\n  lastCheck: Date;\n  trend: 'improving' | 'stable' | 'degrading';\n}\n\nexport interface HealthIssue {\n  type: 'performance' | 'reliability' | 'resource' | 'communication';\n  severity: 'low' | 'medium' | 'high' | 'critical';\n  message: string;\n  timestamp: Date;\n  resolved: boolean;\n  recommendedAction?: string;\n}\n\n/**\n * Comprehensive agent lifecycle and resource management\n */\nexport class AgentManager extends EventEmitter {\n  private logger: ILogger;\n  private eventBus: IEventBus;\n  private memory: DistributedMemorySystem;\n  private config: AgentManagerConfig;\n\n  // Agent tracking\n  private agents = new Map<string, AgentState>();\n  private processes = new Map<string, ChildProcess>();\n  private templates = new Map<string, AgentTemplate>();\n  private clusters = new Map<string, AgentCluster>();\n  private pools = new Map<string, AgentPool>();\n\n  // Health monitoring\n  private healthChecks = new Map<string, AgentHealth>();\n  private healthInterval?: NodeJS.Timeout;\n  private heartbeatInterval?: NodeJS.Timeout;\n\n  // Scaling and policies\n  private scalingPolicies = new Map<string, ScalingPolicy>();\n  private scalingOperations = new Map<string, { timestamp: Date; type: string }>();\n\n  // Resource tracking\n  private resourceUsage = new Map<string, { cpu: number; memory: number; disk: number }>();\n  private performanceHistory = new Map<string, Array<{ timestamp: Date; metrics: AgentMetrics }>>();\n\n  constructor(\n    config: Partial<AgentManagerConfig>,\n    logger: ILogger,\n    eventBus: IEventBus,\n    memory: DistributedMemorySystem,\n  ) {\n    super();\n    this.logger = logger;\n    this.eventBus = eventBus;\n    this.memory = memory;\n\n    this.config = {\n      maxAgents: 50,\n      defaultTimeout: 30000,\n      heartbeatInterval: 10000,\n      healthCheckInterval: 30000,\n      autoRestart: true,\n      resourceLimits: {\n        memory: 512 * 1024 * 1024, // 512MB\n        cpu: 1.0,\n        disk: 1024 * 1024 * 1024, // 1GB\n      },\n      agentDefaults: {\n        autonomyLevel: 0.7,\n        learningEnabled: true,\n        adaptationEnabled: true,\n      },\n      environmentDefaults: {\n        runtime: 'deno',\n        workingDirectory: './agents',\n        tempDirectory: './tmp',\n        logDirectory: './logs',\n      },\n      ...config,\n    };\n\n    this.setupEventHandlers();\n    this.initializeDefaultTemplates();\n  }\n\n  private setupEventHandlers(): void {\n    this.eventBus.on('agent:heartbeat', (data: unknown) => {\n      const heartbeatData = data as { agentId: string; timestamp: Date; metrics?: AgentMetrics };\n      this.handleHeartbeat(heartbeatData);\n    });\n\n    this.eventBus.on('agent:error', (data: unknown) => {\n      const errorData = data as { agentId: string; error: AgentError };\n      this.handleAgentError(errorData);\n    });\n\n    this.eventBus.on('task:assigned', (data: unknown) => {\n      const taskData = data as { agentId: string };\n      this.updateAgentWorkload(taskData.agentId, 1);\n    });\n\n    this.eventBus.on('task:completed', (data: unknown) => {\n      const completedData = data as { agentId: string; metrics?: AgentMetrics };\n      this.updateAgentWorkload(completedData.agentId, -1);\n      if (completedData.metrics) {\n        this.updateAgentMetrics(completedData.agentId, completedData.metrics);\n      }\n    });\n\n    this.eventBus.on('resource:usage', (data: unknown) => {\n      const resourceData = data as {\n        agentId: string;\n        usage: { cpu: number; memory: number; disk: number };\n      };\n      this.updateResourceUsage(resourceData.agentId, resourceData.usage);\n    });\n  }\n\n  private initializeDefaultTemplates(): void {\n    // Research agent template\n    this.templates.set('researcher', {\n      name: 'Research Agent',\n      type: 'researcher',\n      capabilities: {\n        codeGeneration: false,\n        codeReview: false,\n        testing: false,\n        documentation: true,\n        research: true,\n        analysis: true,\n        webSearch: true,\n        apiIntegration: true,\n        fileSystem: true,\n        terminalAccess: false,\n        languages: [],\n        frameworks: [],\n        domains: ['research', 'analysis', 'information-gathering'],\n        tools: ['web-search', 'document-analysis', 'data-extraction'],\n        maxConcurrentTasks: 5,\n        maxMemoryUsage: 256 * 1024 * 1024,\n        maxExecutionTime: 600000,\n        reliability: 0.9,\n        speed: 0.8,\n        quality: 0.9,\n      },\n      config: {\n        autonomyLevel: 0.8,\n        learningEnabled: true,\n        adaptationEnabled: true,\n        maxTasksPerHour: 20,\n        maxConcurrentTasks: 5,\n        timeoutThreshold: 600000,\n        reportingInterval: 30000,\n        heartbeatInterval: 10000,\n        permissions: ['web-access', 'file-read'],\n        trustedAgents: [],\n        expertise: { research: 0.9, analysis: 0.8, documentation: 0.7 },\n        preferences: { verbose: true, detailed: true },\n      },\n      environment: {\n        runtime: 'deno',\n        version: '1.40.0',\n        workingDirectory: './agents/researcher',\n        tempDirectory: './tmp/researcher',\n        logDirectory: './logs/researcher',\n        apiEndpoints: {},\n        credentials: {},\n        availableTools: ['web-search', 'document-reader', 'data-extractor'],\n        toolConfigs: {},\n      },\n      startupScript: './scripts/start-researcher.ts',\n    });\n\n    // Developer agent template\n    this.templates.set('coder', {\n      name: 'Developer Agent',\n      type: 'coder',\n      capabilities: {\n        codeGeneration: true,\n        codeReview: true,\n        testing: true,\n        documentation: true,\n        research: false,\n        analysis: true,\n        webSearch: false,\n        apiIntegration: true,\n        fileSystem: true,\n        terminalAccess: true,\n        languages: ['typescript', 'javascript', 'python', 'rust'],\n        frameworks: ['deno', 'node', 'react', 'svelte'],\n        domains: ['web-development', 'backend', 'api-design'],\n        tools: ['git', 'editor', 'debugger', 'linter', 'formatter'],\n        maxConcurrentTasks: 3,\n        maxMemoryUsage: 512 * 1024 * 1024,\n        maxExecutionTime: 1200000,\n        reliability: 0.95,\n        speed: 0.7,\n        quality: 0.95,\n      },\n      config: {\n        autonomyLevel: 0.6,\n        learningEnabled: true,\n        adaptationEnabled: true,\n        maxTasksPerHour: 10,\n        maxConcurrentTasks: 3,\n        timeoutThreshold: 1200000,\n        reportingInterval: 60000,\n        heartbeatInterval: 15000,\n        permissions: ['file-read', 'file-write', 'terminal-access', 'git-access'],\n        trustedAgents: [],\n        expertise: { coding: 0.95, testing: 0.8, debugging: 0.9 },\n        preferences: { codeStyle: 'functional', testFramework: 'deno-test' },\n      },\n      environment: {\n        runtime: 'deno',\n        version: '1.40.0',\n        workingDirectory: './agents/developer',\n        tempDirectory: './tmp/developer',\n        logDirectory: './logs/developer',\n        apiEndpoints: {},\n        credentials: {},\n        availableTools: ['git', 'deno', 'editor', 'debugger'],\n        toolConfigs: {},\n      },\n      startupScript: './scripts/start-developer.ts',\n    });\n\n    // Add more templates...\n    this.initializeSpecializedTemplates();\n  }\n\n  private initializeSpecializedTemplates(): void {\n    // Analyzer template\n    this.templates.set('analyst', {\n      name: 'Analyzer Agent',\n      type: 'analyst',\n      capabilities: {\n        codeGeneration: false,\n        codeReview: true,\n        testing: false,\n        documentation: true,\n        research: false,\n        analysis: true,\n        webSearch: false,\n        apiIntegration: true,\n        fileSystem: true,\n        terminalAccess: false,\n        languages: ['python', 'r', 'sql'],\n        frameworks: ['pandas', 'numpy', 'matplotlib'],\n        domains: ['data-analysis', 'statistics', 'visualization'],\n        tools: ['data-processor', 'chart-generator', 'statistical-analyzer'],\n        maxConcurrentTasks: 4,\n        maxMemoryUsage: 1024 * 1024 * 1024,\n        maxExecutionTime: 900000,\n        reliability: 0.9,\n        speed: 0.75,\n        quality: 0.9,\n      },\n      config: {\n        autonomyLevel: 0.7,\n        learningEnabled: true,\n        adaptationEnabled: true,\n        maxTasksPerHour: 15,\n        maxConcurrentTasks: 4,\n        timeoutThreshold: 900000,\n        reportingInterval: 45000,\n        heartbeatInterval: 12000,\n        permissions: ['file-read', 'data-access'],\n        trustedAgents: [],\n        expertise: { analysis: 0.95, visualization: 0.8, statistics: 0.85 },\n        preferences: { outputFormat: 'detailed', includeCharts: true },\n      },\n      environment: {\n        runtime: 'deno',\n        version: '1.40.0',\n        workingDirectory: './agents/analyzer',\n        tempDirectory: './tmp/analyzer',\n        logDirectory: './logs/analyzer',\n        apiEndpoints: {},\n        credentials: {},\n        availableTools: ['data-processor', 'chart-gen', 'stats-calc'],\n        toolConfigs: {},\n      },\n      startupScript: './scripts/start-analyzer.ts',\n    });\n\n    // Requirements Engineer Agent Template\n    this.templates.set('requirements-engineer', {\n      name: 'Requirements Engineer Agent',\n      type: 'requirements-engineer',\n      capabilities: {\n        codeGeneration: false,\n        codeReview: false,\n        testing: false,\n        documentation: true,\n        research: true,\n        analysis: true,\n        webSearch: true,\n        apiIntegration: false,\n        fileSystem: true,\n        terminalAccess: false,\n        languages: [],\n        frameworks: [],\n        domains: ['requirements-engineering', 'user-stories', 'ears-notation'],\n        tools: ['document-writer', 'nlp-processor', 'web-search'],\n        maxConcurrentTasks: 2,\n        maxMemoryUsage: 256 * 1024 * 1024,\n        maxExecutionTime: 300000,\n        reliability: 0.95,\n        speed: 0.8,\n        quality: 0.95,\n      },\n      config: {\n        autonomyLevel: 0.8,\n        learningEnabled: true,\n        adaptationEnabled: true,\n        maxTasksPerHour: 10,\n        maxConcurrentTasks: 2,\n        timeoutThreshold: 300000,\n        reportingInterval: 30000,\n        heartbeatInterval: 10000,\n        permissions: ['file-read', 'file-write'],\n        trustedAgents: [],\n        expertise: { requirements: 0.95, documentation: 0.9, analysis: 0.8 },\n        preferences: { format: 'markdown', style: 'formal' },\n      },\n      environment: {\n        runtime: 'deno',\n        version: '1.40.0',\n        workingDirectory: './agents/requirements-engineer',\n        tempDirectory: './tmp/requirements-engineer',\n        logDirectory: './logs/requirements-engineer',\n        apiEndpoints: {},\n        credentials: {},\n        availableTools: ['document-writer', 'nlp-processor'],\n        toolConfigs: {},\n      },\n      startupScript: './scripts/start-requirements-engineer.ts',\n    });\n\n    // Design Architect Agent Template\n    this.templates.set('design-architect', {\n      name: 'Design Architect Agent',\n      type: 'design-architect',\n      capabilities: {\n        codeGeneration: false,\n        codeReview: true,\n        testing: false,\n        documentation: true,\n        research: true,\n        analysis: true,\n        webSearch: false,\n        apiIntegration: true,\n        fileSystem: true,\n        terminalAccess: false,\n        languages: ['typescript', 'javascript', 'python'],\n        frameworks: [],\n        domains: ['software-architecture', 'system-design', 'data-modeling'],\n        tools: ['diagram-generator', 'code-analyzer', 'api-designer'],\n        maxConcurrentTasks: 1,\n        maxMemoryUsage: 512 * 1024 * 1024,\n        maxExecutionTime: 600000,\n        reliability: 0.9,\n        speed: 0.7,\n        quality: 0.95,\n      },\n      config: {\n        autonomyLevel: 0.7,\n        learningEnabled: true,\n        adaptationEnabled: true,\n        maxTasksPerHour: 5,\n        maxConcurrentTasks: 1,\n        timeoutThreshold: 600000,\n        reportingInterval: 60000,\n        heartbeatInterval: 15000,\n        permissions: ['file-read', 'file-write'],\n        trustedAgents: [],\n        expertise: { architecture: 0.95, design: 0.9, modeling: 0.85 },\n        preferences: { diagramFormat: 'mermaid', detailLevel: 'high' },\n      },\n      environment: {\n        runtime: 'deno',\n        version: '1.40.0',\n        workingDirectory: './agents/design-architect',\n        tempDirectory: './tmp/design-architect',\n        logDirectory: './logs/design-architect',\n        apiEndpoints: {},\n        credentials: {},\n        availableTools: ['diagram-gen', 'code-analyzer'],\n        toolConfigs: {},\n      },\n      startupScript: './scripts/start-design-architect.ts',\n    });\n\n    // Task Planner Agent Template\n    this.templates.set('task-planner', {\n      name: 'Task Planner Agent',\n      type: 'task-planner',\n      capabilities: {\n        codeGeneration: false,\n        codeReview: false,\n        testing: false,\n        documentation: true,\n        research: false,\n        analysis: true,\n        webSearch: false,\n        apiIntegration: false,\n        fileSystem: true,\n        terminalAccess: false,\n        languages: [],\n        frameworks: [],\n        domains: ['project-management', 'task-breakdown', 'agile-planning'],\n        tools: ['task-scheduler', 'dependency-analyzer'],\n        maxConcurrentTasks: 3,\n        maxMemoryUsage: 256 * 1024 * 1024,\n        maxExecutionTime: 300000,\n        reliability: 0.95,\n        speed: 0.85,\n        quality: 0.9,\n      },\n      config: {\n        autonomyLevel: 0.8,\n        learningEnabled: true,\n        adaptationEnabled: true,\n        maxTasksPerHour: 20,\n        maxConcurrentTasks: 3,\n        timeoutThreshold: 300000,\n        reportingInterval: 30000,\n        heartbeatInterval: 10000,\n        permissions: ['file-read', 'file-write'],\n        trustedAgents: [],\n        expertise: { planning: 0.95, 'task-management': 0.9, optimization: 0.8 },\n        preferences: { outputFormat: 'markdown-checkbox', granularity: 'fine' },\n      },\n      environment: {\n        runtime: 'deno',\n        version: '1.40.0',\n        workingDirectory: './agents/task-planner',\n        tempDirectory: './tmp/task-planner',\n        logDirectory: './logs/task-planner',\n        apiEndpoints: {},\n        credentials: {},\n        availableTools: ['task-scheduler', 'dependency-analyzer'],\n        toolConfigs: {},\n      },\n      startupScript: './scripts/start-task-planner.ts',\n    });\n\n    // Developer Agent Template (already exists, but ensure it's aligned)\n    this.templates.set('developer', {\n      name: 'Developer Agent',\n      type: 'developer',\n      capabilities: {\n        codeGeneration: true,\n        codeReview: true,\n        testing: true,\n        documentation: true,\n        research: false,\n        analysis: true,\n        webSearch: false,\n        apiIntegration: true,\n        fileSystem: true,\n        terminalAccess: true,\n        languages: ['typescript', 'javascript', 'python', 'rust'],\n        frameworks: ['deno', 'node', 'react', 'svelte'],\n        domains: ['web-development', 'backend', 'api-design'],\n        tools: ['git', 'editor', 'debugger', 'linter', 'formatter'],\n        maxConcurrentTasks: 3,\n        maxMemoryUsage: 512 * 1024 * 1024,\n        maxExecutionTime: 1200000,\n        reliability: 0.95,\n        speed: 0.7,\n        quality: 0.95,\n      },\n      config: {\n        autonomyLevel: 0.6,\n        learningEnabled: true,\n        adaptationEnabled: true,\n        maxTasksPerHour: 10,\n        maxConcurrentTasks: 3,\n        timeoutThreshold: 1200000,\n        reportingInterval: 60000,\n        heartbeatInterval: 15000,\n        permissions: ['file-read', 'file-write', 'terminal-access', 'git-access'],\n        trustedAgents: [],\n        expertise: { coding: 0.95, testing: 0.8, debugging: 0.9 },\n        preferences: { codeStyle: 'functional', testFramework: 'deno-test' },\n      },\n      environment: {\n        runtime: 'deno',\n        version: '1.40.0',\n        workingDirectory: './agents/developer',\n        tempDirectory: './tmp/developer',\n        logDirectory: './logs/developer',\n        apiEndpoints: {},\n        credentials: {},\n        availableTools: ['git', 'deno', 'editor', 'debugger'],\n        toolConfigs: {},\n      },\n      startupScript: './scripts/start-developer.ts',\n    });\n\n    // System Architect Agent Template  \n    this.templates.set('system-architect', {\n      name: 'System Architect Agent',\n      type: 'system-architect',\n      capabilities: {\n        codeGeneration: false,\n        codeReview: true,\n        testing: false,\n        documentation: true,\n        research: true,\n        analysis: true,\n        webSearch: false,\n        apiIntegration: true,\n        fileSystem: true,\n        terminalAccess: false,\n        languages: ['typescript', 'javascript', 'python'],\n        frameworks: ['microservices', 'distributed-systems'],\n        domains: ['system-architecture', 'scalability', 'performance', 'distributed-systems'],\n        tools: ['architecture-analyzer', 'system-modeler', 'performance-analyzer'],\n        maxConcurrentTasks: 1,\n        maxMemoryUsage: 512 * 1024 * 1024,\n        maxExecutionTime: 900000,\n        reliability: 0.95,\n        speed: 0.7,\n        quality: 0.95,\n      },\n      config: {\n        autonomyLevel: 0.8,\n        learningEnabled: true,\n        adaptationEnabled: true,\n        maxTasksPerHour: 5,\n        maxConcurrentTasks: 1,\n        timeoutThreshold: 900000,\n        reportingInterval: 60000,\n        heartbeatInterval: 15000,\n        permissions: ['file-read', 'file-write'],\n        trustedAgents: [],\n        expertise: { 'system-architecture': 0.95, scalability: 0.9, performance: 0.85 },\n        preferences: { scope: 'system-wide', focusArea: 'architecture' },\n      },\n      environment: {\n        runtime: 'deno',\n        version: '1.40.0',\n        workingDirectory: './agents/system-architect',\n        tempDirectory: './tmp/system-architect',\n        logDirectory: './logs/system-architect',\n        apiEndpoints: {},\n        credentials: {},\n        availableTools: ['architecture-analyzer', 'system-modeler'],\n        toolConfigs: {},\n      },\n      startupScript: './scripts/start-system-architect.ts',\n    });\n\n    // Tester Agent Template\n    this.templates.set('tester', {\n      name: 'Testing Agent',\n      type: 'tester',\n      capabilities: {\n        codeGeneration: false,\n        codeReview: true,\n        testing: true,\n        documentation: true,\n        research: false,\n        analysis: true,\n        webSearch: false,\n        apiIntegration: true,\n        fileSystem: true,\n        terminalAccess: true,\n        languages: ['typescript', 'javascript', 'python'],\n        frameworks: ['deno-test', 'jest', 'vitest', 'cypress'],\n        domains: ['testing', 'quality-assurance', 'test-automation'],\n        tools: ['test-runner', 'coverage-analyzer', 'test-generator'],\n        maxConcurrentTasks: 3,\n        maxMemoryUsage: 256 * 1024 * 1024,\n        maxExecutionTime: 600000,\n        reliability: 0.9,\n        speed: 0.8,\n        quality: 0.9,\n      },\n      config: {\n        autonomyLevel: 0.7,\n        learningEnabled: true,\n        adaptationEnabled: true,\n        maxTasksPerHour: 15,\n        maxConcurrentTasks: 3,\n        timeoutThreshold: 600000,\n        reportingInterval: 45000,\n        heartbeatInterval: 12000,\n        permissions: ['file-read', 'file-write', 'terminal-access'],\n        trustedAgents: [],\n        expertise: { testing: 0.9, 'quality-assurance': 0.85, automation: 0.8 },\n        preferences: { testFramework: 'deno-test', coverage: 'comprehensive' },\n      },\n      environment: {\n        runtime: 'deno',\n        version: '1.40.0',\n        workingDirectory: './agents/tester',\n        tempDirectory: './tmp/tester',\n        logDirectory: './logs/tester',\n        apiEndpoints: {},\n        credentials: {},\n        availableTools: ['test-runner', 'coverage-tool', 'test-gen'],\n        toolConfigs: {},\n      },\n      startupScript: './scripts/start-tester.ts',\n    });\n\n    // Code Reviewer Agent Template\n    this.templates.set('reviewer', {\n      name: 'Code Review Agent',\n      type: 'reviewer',\n      capabilities: {\n        codeGeneration: false,\n        codeReview: true,\n        testing: false,\n        documentation: true,\n        research: false,\n        analysis: true,\n        webSearch: false,\n        apiIntegration: false,\n        fileSystem: true,\n        terminalAccess: false,\n        languages: ['typescript', 'javascript', 'python', 'rust'],\n        frameworks: ['static-analysis', 'code-quality'],\n        domains: ['code-review', 'quality-assurance', 'best-practices'],\n        tools: ['static-analyzer', 'code-quality-checker', 'security-scanner'],\n        maxConcurrentTasks: 2,\n        maxMemoryUsage: 256 * 1024 * 1024,\n        maxExecutionTime: 450000,\n        reliability: 0.95,\n        speed: 0.8,\n        quality: 0.95,\n      },\n      config: {\n        autonomyLevel: 0.8,\n        learningEnabled: true,\n        adaptationEnabled: true,\n        maxTasksPerHour: 12,\n        maxConcurrentTasks: 2,\n        timeoutThreshold: 450000,\n        reportingInterval: 30000,\n        heartbeatInterval: 10000,\n        permissions: ['file-read'],\n        trustedAgents: [],\n        expertise: { 'code-review': 0.95, 'quality-assurance': 0.9, security: 0.8 },\n        preferences: { style: 'thorough', focus: 'quality-and-security' },\n      },\n      environment: {\n        runtime: 'deno',\n        version: '1.40.0',\n        workingDirectory: './agents/reviewer',\n        tempDirectory: './tmp/reviewer',\n        logDirectory: './logs/reviewer',\n        apiEndpoints: {},\n        credentials: {},\n        availableTools: ['static-analyzer', 'quality-checker'],\n        toolConfigs: {},\n      },\n      startupScript: './scripts/start-reviewer.ts',\n    });\n\n    // Steering Author Agent Template\n    this.templates.set('steering-author', {\n      name: 'Steering Author Agent',\n      type: 'steering-author',\n      capabilities: {\n        codeGeneration: false,\n        codeReview: true,\n        testing: false,\n        documentation: true,\n        research: true,\n        analysis: true,\n        webSearch: false,\n        apiIntegration: false,\n        fileSystem: true,\n        terminalAccess: false,\n        languages: [],\n        frameworks: [],\n        domains: ['documentation', 'knowledge-management', 'governance'],\n        tools: ['document-writer', 'content-analyzer'],\n        maxConcurrentTasks: 1,\n        maxMemoryUsage: 256 * 1024 * 1024,\n        maxExecutionTime: 300000,\n        reliability: 0.95,\n        speed: 0.7,\n        quality: 0.98,\n      },\n      config: {\n        autonomyLevel: 0.7,\n        learningEnabled: true,\n        adaptationEnabled: true,\n        maxTasksPerHour: 5,\n        maxConcurrentTasks: 1,\n        timeoutThreshold: 300000,\n        reportingInterval: 30000,\n        heartbeatInterval: 10000,\n        permissions: ['file-read', 'file-write'],\n        trustedAgents: [],\n        expertise: { documentation: 0.98, governance: 0.9, 'content-creation': 0.85 },\n        preferences: { style: 'concise', tone: 'formal' },\n      },\n      environment: {\n        runtime: 'deno',\n        version: '1.40.0',\n        workingDirectory: './agents/steering-author',\n        tempDirectory: './tmp/steering-author',\n        logDirectory: './logs/steering-author',\n        apiEndpoints: {},\n        credentials: {},\n        availableTools: ['document-writer', 'content-analyzer'],\n        toolConfigs: {},\n      },\n      startupScript: './scripts/start-steering-author.ts',\n    });\n  }\n\n  async initialize(): Promise<void> {\n    this.logger.info('Initializing agent manager', {\n      maxAgents: this.config.maxAgents,\n      templates: this.templates.size,\n    });\n\n    // Start health monitoring\n    this.startHealthMonitoring();\n\n    // Start heartbeat monitoring\n    this.startHeartbeatMonitoring();\n\n    // Initialize default scaling policies\n    this.initializeScalingPolicies();\n\n    this.emit('agent-manager:initialized');\n  }\n\n  async shutdown(): Promise<void> {\n    this.logger.info('Shutting down agent manager');\n\n    // Stop monitoring\n    if (this.healthInterval) clearInterval(this.healthInterval);\n    if (this.heartbeatInterval) clearInterval(this.heartbeatInterval);\n\n    // Gracefully shutdown all agents\n    const shutdownPromises = Array.from(this.agents.keys()).map((agentId) =>\n      this.stopAgent(agentId, 'shutdown'),\n    );\n\n    await Promise.all(shutdownPromises);\n\n    this.emit('agent-manager:shutdown');\n  }\n\n  // === AGENT LIFECYCLE ===\n\n  async createAgent(\n    templateName: string,\n    overrides: {\n      name?: string;\n      config?: Partial<AgentConfig>;\n      environment?: Partial<AgentEnvironment>;\n    } = {},\n  ): Promise<string> {\n    if (this.agents.size >= this.config.maxAgents) {\n      throw new Error('Maximum agent limit reached');\n    }\n\n    const template = this.templates.get(templateName);\n    if (!template) {\n      throw new Error(`Template ${templateName} not found`);\n    }\n\n    const agentId = generateId('agent');\n    const swarmId = 'default'; // Could be parameterized\n\n    const agent: AgentState = {\n      id: { id: agentId, swarmId, type: template.type, instance: 1 },\n      name: overrides.name || `${template.name}-${agentId.slice(-8)}`,\n      type: template.type,\n      status: 'initializing',\n      capabilities: { ...template.capabilities },\n      metrics: this.createDefaultMetrics(),\n      workload: 0,\n      health: 1.0,\n      config: {\n        autonomyLevel: template.config.autonomyLevel ?? this.config.agentDefaults.autonomyLevel,\n        learningEnabled:\n          template.config.learningEnabled ?? this.config.agentDefaults.learningEnabled,\n        adaptationEnabled:\n          template.config.adaptationEnabled ?? this.config.agentDefaults.adaptationEnabled,\n        maxTasksPerHour: template.config.maxTasksPerHour ?? 10,\n        maxConcurrentTasks: template.config.maxConcurrentTasks ?? 3,\n        timeoutThreshold: template.config.timeoutThreshold ?? 300000,\n        reportingInterval: template.config.reportingInterval ?? 30000,\n        heartbeatInterval: template.config.heartbeatInterval ?? 10000,\n        permissions: template.config.permissions ?? [],\n        trustedAgents: template.config.trustedAgents ?? [],\n        expertise: template.config.expertise ?? {},\n        preferences: template.config.preferences ?? {},\n        ...overrides.config,\n      },\n      environment: {\n        runtime: template.environment.runtime ?? this.config.environmentDefaults.runtime,\n        version: template.environment.version ?? '1.40.0',\n        workingDirectory:\n          template.environment.workingDirectory ?? this.config.environmentDefaults.workingDirectory,\n        tempDirectory:\n          template.environment.tempDirectory ?? this.config.environmentDefaults.tempDirectory,\n        logDirectory:\n          template.environment.logDirectory ?? this.config.environmentDefaults.logDirectory,\n        apiEndpoints: template.environment.apiEndpoints ?? {},\n        credentials: template.environment.credentials ?? {},\n        availableTools: template.environment.availableTools ?? [],\n        toolConfigs: template.environment.toolConfigs ?? {},\n        ...overrides.environment,\n      },\n      endpoints: [],\n      lastHeartbeat: new Date(),\n      taskHistory: [],\n      errorHistory: [],\n      childAgents: [],\n      collaborators: [],\n    };\n\n    this.agents.set(agentId, agent);\n    this.healthChecks.set(agentId, this.createDefaultHealth(agentId));\n\n    this.logger.info('Created agent', {\n      agentId,\n      name: agent.name,\n      type: agent.type,\n      template: templateName,\n    });\n\n    this.emit('agent:created', { agent });\n\n    // Store in memory for persistence\n    await this.memory.store(`agent:${agentId}`, agent, {\n      type: 'agent-state',\n      tags: [agent.type, 'active'],\n      partition: 'state',\n    });\n\n    return agentId;\n  }\n\n  async startAgent(agentId: string): Promise<void> {\n    const agent = this.agents.get(agentId);\n    if (!agent) {\n      throw new Error(`Agent ${agentId} not found`);\n    }\n\n    if (agent.status !== 'initializing' && agent.status !== 'offline') {\n      throw new Error(`Agent ${agentId} cannot be started from status ${agent.status}`);\n    }\n\n    try {\n      agent.status = 'initializing';\n      this.updateAgentStatus(agentId, 'initializing');\n\n      // Spawn agent process\n      const process = await this.spawnAgentProcess(agent);\n      this.processes.set(agentId, process);\n\n      // Wait for agent to signal ready\n      await this.waitForAgentReady(agentId, this.config.defaultTimeout);\n\n      agent.status = 'idle';\n      this.updateAgentStatus(agentId, 'idle');\n\n      this.logger.info('Started agent', { agentId, name: agent.name });\n      this.emit('agent:started', { agent });\n    } catch (error) {\n      const errorMessage = error instanceof Error ? error.message : String(error);\n      agent.status = 'error';\n      this.addAgentError(agentId, {\n        timestamp: new Date(),\n        type: 'startup_failed',\n        message: errorMessage,\n        context: { agentId },\n        severity: 'critical',\n        resolved: false,\n      });\n\n      this.logger.error('Failed to start agent', { agentId, error });\n      throw error;\n    }\n  }\n\n  async stopAgent(agentId: string, reason: string = 'user_request'): Promise<void> {\n    const agent = this.agents.get(agentId);\n    if (!agent) {\n      throw new Error(`Agent ${agentId} not found`);\n    }\n\n    if (agent.status === 'offline' || agent.status === 'terminated') {\n      return; // Already stopped\n    }\n\n    try {\n      agent.status = 'terminating';\n      this.updateAgentStatus(agentId, 'terminating');\n\n      // Send graceful shutdown signal\n      const process = this.processes.get(agentId);\n      if (process && !process.killed) {\n        process.kill('SIGTERM');\n\n        // Force kill after timeout\n        setTimeout(() => {\n          if (process && !process.killed) {\n            process.kill('SIGKILL');\n          }\n        }, this.config.defaultTimeout);\n      }\n\n      // Wait for process to exit\n      await this.waitForProcessExit(agentId, this.config.defaultTimeout);\n\n      agent.status = 'terminated';\n      this.updateAgentStatus(agentId, 'terminated');\n\n      // Cleanup\n      this.processes.delete(agentId);\n\n      this.logger.info('Stopped agent', { agentId, reason });\n      this.emit('agent:stopped', { agent, reason });\n    } catch (error) {\n      this.logger.error('Failed to stop agent gracefully', { agentId, error });\n      // Force cleanup\n      this.processes.delete(agentId);\n      agent.status = 'terminated';\n    }\n  }\n\n  async restartAgent(agentId: string, reason: string = 'restart_requested'): Promise<void> {\n    this.logger.info('Restarting agent', { agentId, reason });\n\n    await this.stopAgent(agentId, `restart:${reason}`);\n    await this.startAgent(agentId);\n\n    this.emit('agent:restarted', { agentId, reason });\n  }\n\n  async removeAgent(agentId: string): Promise<void> {\n    const agent = this.agents.get(agentId);\n    if (!agent) {\n      throw new Error(`Agent ${agentId} not found`);\n    }\n\n    // Stop agent if running\n    if (agent.status !== 'terminated' && agent.status !== 'offline') {\n      await this.stopAgent(agentId, 'removal');\n    }\n\n    // Remove from all data structures\n    this.agents.delete(agentId);\n    this.healthChecks.delete(agentId);\n    this.resourceUsage.delete(agentId);\n    this.performanceHistory.delete(agentId);\n\n    // Remove from pools and clusters\n    this.removeAgentFromPoolsAndClusters(agentId);\n\n    // Remove from memory\n    await this.memory.deleteEntry(`agent:${agentId}`);\n\n    this.logger.info('Removed agent', { agentId });\n    this.emit('agent:removed', { agentId });\n  }\n\n  // === AGENT POOLS ===\n\n  async createAgentPool(\n    name: string,\n    templateName: string,\n    config: {\n      minSize: number;\n      maxSize: number;\n      autoScale?: boolean;\n      scaleUpThreshold?: number;\n      scaleDownThreshold?: number;\n    },\n  ): Promise<string> {\n    const template = this.templates.get(templateName);\n    if (!template) {\n      throw new Error(`Template ${templateName} not found`);\n    }\n\n    const poolId = generateId('pool');\n    const pool: AgentPool = {\n      id: poolId,\n      name,\n      type: template.type,\n      minSize: config.minSize,\n      maxSize: config.maxSize,\n      currentSize: 0,\n      availableAgents: [],\n      busyAgents: [],\n      template,\n      autoScale: config.autoScale || false,\n      scaleUpThreshold: config.scaleUpThreshold || 0.8,\n      scaleDownThreshold: config.scaleDownThreshold || 0.3,\n    };\n\n    this.pools.set(poolId, pool);\n\n    // Create minimum agents\n    for (let i = 0; i < config.minSize; i++) {\n      const agentId = await this.createAgent(templateName, {\n        name: `${name}-${i + 1}`,\n      });\n      await this.startAgent(agentId);\n      pool.availableAgents.push({\n        id: agentId,\n        swarmId: 'default',\n        type: template.type,\n        instance: i + 1,\n      });\n      pool.currentSize++;\n    }\n\n    this.logger.info('Created agent pool', { poolId, name, minSize: config.minSize });\n    this.emit('pool:created', { pool });\n\n    return poolId;\n  }\n\n  async scalePool(poolId: string, targetSize: number): Promise<void> {\n    const pool = this.pools.get(poolId);\n    if (!pool) {\n      throw new Error(`Pool ${poolId} not found`);\n    }\n\n    if (targetSize < pool.minSize || targetSize > pool.maxSize) {\n      throw new Error(\n        `Target size ${targetSize} outside pool limits [${pool.minSize}, ${pool.maxSize}]`,\n      );\n    }\n\n    const currentSize = pool.currentSize;\n    const delta = targetSize - currentSize;\n\n    if (delta > 0) {\n      // Scale up\n      for (let i = 0; i < delta; i++) {\n        const agentId = await this.createAgent(pool.template.name, {\n          name: `${pool.name}-${currentSize + i + 1}`,\n        });\n        await this.startAgent(agentId);\n        pool.availableAgents.push({\n          id: agentId,\n          swarmId: 'default',\n          type: pool.type,\n          instance: currentSize + i + 1,\n        });\n      }\n    } else if (delta < 0) {\n      // Scale down\n      const agentsToRemove = pool.availableAgents.slice(0, Math.abs(delta));\n      for (const agentId of agentsToRemove) {\n        await this.removeAgent(agentId.id);\n        pool.availableAgents = pool.availableAgents.filter((a) => a.id !== agentId.id);\n      }\n    }\n\n    pool.currentSize = targetSize;\n\n    this.logger.info('Scaled pool', { poolId, fromSize: currentSize, toSize: targetSize });\n    this.emit('pool:scaled', { pool, fromSize: currentSize, toSize: targetSize });\n  }\n\n  // === HEALTH MONITORING ===\n\n  private startHealthMonitoring(): void {\n    this.healthInterval = setInterval(() => {\n      this.performHealthChecks();\n    }, this.config.healthCheckInterval);\n\n    this.logger.info('Started health monitoring', {\n      interval: this.config.healthCheckInterval,\n    });\n  }\n\n  private startHeartbeatMonitoring(): void {\n    this.heartbeatInterval = setInterval(() => {\n      this.checkHeartbeats();\n    }, this.config.heartbeatInterval);\n\n    this.logger.info('Started heartbeat monitoring', {\n      interval: this.config.heartbeatInterval,\n    });\n  }\n\n  private async performHealthChecks(): Promise<void> {\n    const healthPromises = Array.from(this.agents.keys()).map((agentId) =>\n      this.checkAgentHealth(agentId),\n    );\n\n    await Promise.allSettled(healthPromises);\n  }\n\n  private async checkAgentHealth(agentId: string): Promise<void> {\n    const agent = this.agents.get(agentId);\n    if (!agent) return;\n\n    const health = this.healthChecks.get(agentId);\n    if (!health) return;\n    const now = new Date();\n\n    try {\n      // Check responsiveness\n      const responsiveness = await this.checkResponsiveness(agentId);\n      health.components.responsiveness = responsiveness;\n\n      // Check performance\n      const performance = this.calculatePerformanceScore(agentId);\n      health.components.performance = performance;\n\n      // Check reliability\n      const reliability = this.calculateReliabilityScore(agentId);\n      health.components.reliability = reliability;\n\n      // Check resource usage\n      const resourceScore = this.calculateResourceScore(agentId);\n      health.components.resourceUsage = resourceScore;\n\n      // Calculate overall health\n      const overall = (responsiveness + performance + reliability + resourceScore) / 4;\n      health.overall = overall;\n      health.lastCheck = now;\n\n      // Update agent health\n      agent.health = overall;\n\n      // Check for issues\n      this.detectHealthIssues(agentId, health);\n\n      // Auto-restart if critically unhealthy\n      if (overall < 0.3 && this.config.autoRestart) {\n        this.logger.warn('Agent critically unhealthy, restarting', { agentId, health: overall });\n        await this.restartAgent(agentId, 'health_critical');\n      }\n    } catch (error) {\n      this.logger.error('Health check failed', { agentId, error });\n      health.overall = 0;\n      health.lastCheck = now;\n    }\n  }\n\n  private async checkResponsiveness(agentId: string): Promise<number> {\n    // Send ping and measure response time\n\n    try {\n      // This would send an actual ping to the agent\n      // For now, simulate based on last heartbeat\n      const agent = this.agents.get(agentId);\n      if (!agent) return 0;\n      const timeSinceHeartbeat = Date.now() - agent.lastHeartbeat.getTime();\n\n      if (timeSinceHeartbeat > this.config.heartbeatInterval * 3) {\n        return 0; // Unresponsive\n      } else if (timeSinceHeartbeat > this.config.heartbeatInterval * 2) {\n        return 0.5; // Slow\n      } else {\n        return 1.0; // Responsive\n      }\n    } catch (error) {\n      return 0; // Failed to respond\n    }\n  }\n\n  private calculatePerformanceScore(agentId: string): number {\n    const history = this.performanceHistory.get(agentId) || [];\n    if (history.length === 0) return 1.0;\n\n    // Calculate average task completion time vs expected\n    const recent = history.slice(-10); // Last 10 entries\n    const avgTime =\n      recent.reduce((sum, entry) => sum + entry.metrics.averageExecutionTime, 0) / recent.length;\n\n    // Normalize based on expected performance (simplified)\n    const expectedTime = 60000; // 1 minute baseline\n    return Math.max(0, Math.min(1, expectedTime / avgTime));\n  }\n\n  private calculateReliabilityScore(agentId: string): number {\n    const agent = this.agents.get(agentId);\n    if (!agent) return 0;\n    const totalTasks = agent.metrics.tasksCompleted + agent.metrics.tasksFailed;\n\n    if (totalTasks === 0) return 1.0;\n\n    return agent.metrics.tasksCompleted / totalTasks;\n  }\n\n  private calculateResourceScore(agentId: string): number {\n    const usage = this.resourceUsage.get(agentId);\n    if (!usage) return 1.0;\n\n    const limits = this.config.resourceLimits;\n    const memoryScore = 1 - usage.memory / limits.memory;\n    const cpuScore = 1 - usage.cpu / limits.cpu;\n    const diskScore = 1 - usage.disk / limits.disk;\n\n    return Math.max(0, (memoryScore + cpuScore + diskScore) / 3);\n  }\n\n  private detectHealthIssues(agentId: string, health: AgentHealth): void {\n    const issues: HealthIssue[] = [];\n\n    if (health.components.responsiveness < 0.5) {\n      issues.push({\n        type: 'communication',\n        severity: health.components.responsiveness < 0.2 ? 'critical' : 'high',\n        message: 'Agent is not responding to heartbeats',\n        timestamp: new Date(),\n        resolved: false,\n        recommendedAction: 'Restart agent or check network connectivity',\n      });\n    }\n\n    if (health.components.performance < 0.6) {\n      issues.push({\n        type: 'performance',\n        severity: health.components.performance < 0.3 ? 'high' : 'medium',\n        message: 'Agent performance is below expected levels',\n        timestamp: new Date(),\n        resolved: false,\n        recommendedAction: 'Check resource allocation or agent configuration',\n      });\n    }\n\n    if (health.components.resourceUsage < 0.4) {\n      issues.push({\n        type: 'resource',\n        severity: health.components.resourceUsage < 0.2 ? 'critical' : 'high',\n        message: 'Agent resource usage is critically high',\n        timestamp: new Date(),\n        resolved: false,\n        recommendedAction: 'Increase resource limits or reduce workload',\n      });\n    }\n\n    health.issues = issues;\n  }\n\n  private checkHeartbeats(): void {\n    const now = Date.now();\n    const timeout = this.config.heartbeatInterval * 3;\n\n    for (const [agentId, agent] of Array.from(this.agents.entries())) {\n      const timeSinceHeartbeat = now - agent.lastHeartbeat.getTime();\n\n      if (\n        timeSinceHeartbeat > timeout &&\n        agent.status !== 'offline' &&\n        agent.status !== 'terminated'\n      ) {\n        this.logger.warn('Agent heartbeat timeout', { agentId, timeSinceHeartbeat });\n\n        agent.status = 'error';\n        this.addAgentError(agentId, {\n          timestamp: new Date(),\n          type: 'heartbeat_timeout',\n          message: 'Agent failed to send heartbeat within timeout period',\n          context: { timeout, timeSinceHeartbeat },\n          severity: 'high',\n          resolved: false,\n        });\n\n        this.emit('agent:heartbeat-timeout', { agentId, timeSinceHeartbeat });\n\n        // Auto-restart if enabled\n        if (this.config.autoRestart) {\n          this.restartAgent(agentId, 'heartbeat_timeout').catch((error) => {\n            this.logger.error('Failed to auto-restart agent', { agentId, error });\n          });\n        }\n      }\n    }\n  }\n\n  // === UTILITY METHODS ===\n\n  private async spawnAgentProcess(agent: AgentState): Promise<ChildProcess> {\n    const env: NodeJS.ProcessEnv = {\n      ...process.env,\n      AGENT_ID: agent.id.id,\n      AGENT_TYPE: agent.type,\n      AGENT_NAME: agent.name,\n      WORKING_DIR: agent.environment.workingDirectory,\n      LOG_DIR: agent.environment.logDirectory,\n    };\n\n    const args = [\n      'run',\n      '--allow-all',\n      agent.environment.availableTools[0] || './agents/generic-agent.ts',\n      '--config',\n      JSON.stringify(agent.config),\n    ];\n\n    const childProcess = spawn(agent.environment.runtime, args, {\n      env,\n      stdio: ['pipe', 'pipe', 'pipe'],\n      cwd: agent.environment.workingDirectory,\n    });\n\n    // Handle process events\n    childProcess.on('exit', (code: number | null) => {\n      this.handleProcessExit(agent.id.id, code);\n    });\n\n    childProcess.on('error', (error: Error) => {\n      this.handleProcessError(agent.id.id, error);\n    });\n\n    return childProcess;\n  }\n\n  private async waitForAgentReady(agentId: string, timeout: number): Promise<void> {\n    return new Promise((resolve, reject) => {\n      const timer = setTimeout(() => {\n        reject(new Error(`Agent ${agentId} startup timeout`));\n      }, timeout);\n\n      const handler = (data: unknown) => {\n        const readyData = data as { agentId: string };\n        if (readyData.agentId === agentId) {\n          clearTimeout(timer);\n          this.eventBus.off('agent:ready', handler);\n          resolve();\n        }\n      };\n\n      this.eventBus.on('agent:ready', handler);\n    });\n  }\n\n  private async waitForProcessExit(agentId: string, timeout: number): Promise<void> {\n    return new Promise((resolve) => {\n      const process = this.processes.get(agentId);\n      if (!process || process.killed) {\n        resolve();\n        return;\n      }\n\n      const timer = setTimeout(() => {\n        resolve(); // Timeout, continue anyway\n      }, timeout);\n\n      process.on('exit', () => {\n        clearTimeout(timer);\n        resolve();\n      });\n    });\n  }\n\n  private handleProcessExit(agentId: string, code: number | null): void {\n    const agent = this.agents.get(agentId);\n    if (!agent) return;\n\n    this.logger.info('Agent process exited', { agentId, exitCode: code });\n\n    if (code !== 0 && code !== null) {\n      this.addAgentError(agentId, {\n        timestamp: new Date(),\n        type: 'process_exit',\n        message: `Agent process exited with code ${code}`,\n        context: { exitCode: code },\n        severity: 'high',\n        resolved: false,\n      });\n    }\n\n    agent.status = 'offline';\n    this.emit('agent:process-exit', { agentId, exitCode: code });\n  }\n\n  private handleProcessError(agentId: string, error: Error): void {\n    this.logger.error('Agent process error', { agentId, error });\n\n    this.addAgentError(agentId, {\n      timestamp: new Date(),\n      type: 'process_error',\n      message: error instanceof Error ? error.message : String(error),\n      context: { error: error.toString() },\n      severity: 'critical',\n      resolved: false,\n    });\n\n    this.emit('agent:process-error', { agentId, error });\n  }\n\n  private handleHeartbeat(data: {\n    agentId: string;\n    timestamp: Date;\n    metrics?: AgentMetrics;\n  }): void {\n    const agent = this.agents.get(data.agentId);\n    if (!agent) return;\n\n    agent.lastHeartbeat = data.timestamp;\n\n    if (data.metrics) {\n      this.updateAgentMetrics(data.agentId, data.metrics);\n    }\n\n    // Update health if agent was previously unresponsive\n    if (agent.status === 'error') {\n      agent.status = 'idle';\n      this.updateAgentStatus(data.agentId, 'idle');\n    }\n  }\n\n  private handleAgentError(data: { agentId: string; error: AgentError }): void {\n    this.addAgentError(data.agentId, data.error);\n\n    const agent = this.agents.get(data.agentId);\n    if (agent && data.error.severity === 'critical') {\n      agent.status = 'error';\n      this.updateAgentStatus(data.agentId, 'error');\n    }\n  }\n\n  private updateAgentStatus(agentId: string, status: AgentStatus): void {\n    const agent = this.agents.get(agentId);\n    if (!agent) return;\n\n    const oldStatus = agent.status;\n    agent.status = status;\n\n    this.emit('agent:status-changed', { agentId, from: oldStatus, to: status });\n  }\n\n  private updateAgentWorkload(agentId: string, delta: number): void {\n    const agent = this.agents.get(agentId);\n    if (!agent) return;\n\n    agent.workload = Math.max(0, agent.workload + delta);\n  }\n\n  private updateAgentMetrics(agentId: string, metrics: AgentMetrics): void {\n    const agent = this.agents.get(agentId);\n    if (!agent) return;\n\n    agent.metrics = { ...agent.metrics, ...metrics };\n\n    // Store performance history\n    const history = this.performanceHistory.get(agentId) || [];\n    history.push({ timestamp: new Date(), metrics: { ...metrics } });\n\n    // Keep only last 100 entries\n    if (history.length > 100) {\n      history.shift();\n    }\n\n    this.performanceHistory.set(agentId, history);\n  }\n\n  private updateResourceUsage(\n    agentId: string,\n    usage: { cpu: number; memory: number; disk: number },\n  ): void {\n    this.resourceUsage.set(agentId, usage);\n  }\n\n  private addAgentError(agentId: string, error: AgentError): void {\n    const agent = this.agents.get(agentId);\n    if (!agent) return;\n\n    agent.errorHistory.push(error);\n\n    // Keep only last 50 errors\n    if (agent.errorHistory.length > 50) {\n      agent.errorHistory.shift();\n    }\n  }\n\n  private createDefaultMetrics(): AgentMetrics {\n    return {\n      tasksCompleted: 0,\n      tasksFailed: 0,\n      averageExecutionTime: 0,\n      successRate: 1.0,\n      cpuUsage: 0,\n      memoryUsage: 0,\n      diskUsage: 0,\n      networkUsage: 0,\n      codeQuality: 0.8,\n      testCoverage: 0,\n      bugRate: 0,\n      userSatisfaction: 0.8,\n      totalUptime: 0,\n      lastActivity: new Date(),\n      responseTime: 0,\n    };\n  }\n\n  private createDefaultHealth(agentId: string): AgentHealth {\n    return {\n      agentId,\n      overall: 1.0,\n      components: {\n        responsiveness: 1.0,\n        performance: 1.0,\n        reliability: 1.0,\n        resourceUsage: 1.0,\n      },\n      issues: [],\n      lastCheck: new Date(),\n      trend: 'stable',\n    };\n  }\n\n  private removeAgentFromPoolsAndClusters(agentId: string): void {\n    // Remove from pools\n    for (const pool of Array.from(this.pools.values())) {\n      pool.availableAgents = pool.availableAgents.filter((a) => a.id !== agentId);\n      pool.busyAgents = pool.busyAgents.filter((a) => a.id !== agentId);\n      pool.currentSize = pool.availableAgents.length + pool.busyAgents.length;\n    }\n\n    // Remove from clusters\n    for (const cluster of Array.from(this.clusters.values())) {\n      cluster.agents = cluster.agents.filter((a) => a.id !== agentId);\n    }\n  }\n\n  private initializeScalingPolicies(): void {\n    // Default auto-scaling policy\n    const defaultPolicy: ScalingPolicy = {\n      name: 'default-autoscale',\n      enabled: true,\n      cooldownPeriod: 300000, // 5 minutes\n      maxScaleOperations: 10,\n      rules: [\n        {\n          metric: 'pool-utilization',\n          threshold: 0.8,\n          comparison: 'gt',\n          action: 'scale-up',\n          amount: 1,\n        },\n        {\n          metric: 'pool-utilization',\n          threshold: 0.3,\n          comparison: 'lt',\n          action: 'scale-down',\n          amount: 1,\n        },\n      ],\n    };\n\n    this.scalingPolicies.set('default', defaultPolicy);\n  }\n\n  // === PUBLIC API ===\n\n  getAgent(agentId: string): AgentState | undefined {\n    return this.agents.get(agentId);\n  }\n\n  getAllAgents(): AgentState[] {\n    return Array.from(this.agents.values());\n  }\n\n  getAgentsByType(type: AgentType): AgentState[] {\n    return Array.from(this.agents.values()).filter((agent) => agent.type === type);\n  }\n\n  getAgentsByStatus(status: AgentStatus): AgentState[] {\n    return Array.from(this.agents.values()).filter((agent) => agent.status === status);\n  }\n\n  getAgentHealth(agentId: string): AgentHealth | undefined {\n    return this.healthChecks.get(agentId);\n  }\n\n  getPool(poolId: string): AgentPool | undefined {\n    return this.pools.get(poolId);\n  }\n\n  getAllPools(): AgentPool[] {\n    return Array.from(this.pools.values());\n  }\n\n  getAgentTemplates(): AgentTemplate[] {\n    return Array.from(this.templates.values());\n  }\n\n  getSystemStats(): {\n    totalAgents: number;\n    activeAgents: number;\n    healthyAgents: number;\n    pools: number;\n    clusters: number;\n    averageHealth: number;\n    resourceUtilization: { cpu: number; memory: number; disk: number };\n  } {\n    const agents = Array.from(this.agents.values());\n    const healthChecks = Array.from(this.healthChecks.values());\n\n    const healthyAgents = healthChecks.filter((h) => h.overall > 0.7).length;\n    const averageHealth =\n      healthChecks.reduce((sum, h) => sum + h.overall, 0) / healthChecks.length || 1;\n\n    const resourceUsages = Array.from(this.resourceUsage.values());\n    const avgCpu = resourceUsages.reduce((sum, r) => sum + r.cpu, 0) / resourceUsages.length || 0;\n    const avgMemory =\n      resourceUsages.reduce((sum, r) => sum + r.memory, 0) / resourceUsages.length || 0;\n    const avgDisk = resourceUsages.reduce((sum, r) => sum + r.disk, 0) / resourceUsages.length || 0;\n\n    return {\n      totalAgents: agents.length,\n      activeAgents: agents.filter((a) => a.status === 'idle' || a.status === 'busy').length,\n      healthyAgents,\n      pools: this.pools.size,\n      clusters: this.clusters.size,\n      averageHealth,\n      resourceUtilization: {\n        cpu: avgCpu,\n        memory: avgMemory,\n        disk: avgDisk,\n      },\n    };\n  }\n}\n"],
      version: 3
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "90654db86b9b03d31648d3bc19ecd934479b7399"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_dntaudbg3 = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_dntaudbg3();
/**
 * Comprehensive agent management system
 */
import { EventEmitter } from 'node:events';
import { spawn } from 'node:child_process';
import { generateId } from '../utils/helpers.js';
/**
 * Comprehensive agent lifecycle and resource management
 */
export class AgentManager extends EventEmitter {
  logger;
  eventBus;
  memory;
  config;
  // Agent tracking
  agents =
  /* istanbul ignore next */
  (cov_dntaudbg3().s[0]++, new Map());
  processes =
  /* istanbul ignore next */
  (cov_dntaudbg3().s[1]++, new Map());
  templates =
  /* istanbul ignore next */
  (cov_dntaudbg3().s[2]++, new Map());
  clusters =
  /* istanbul ignore next */
  (cov_dntaudbg3().s[3]++, new Map());
  pools =
  /* istanbul ignore next */
  (cov_dntaudbg3().s[4]++, new Map());
  // Health monitoring
  healthChecks =
  /* istanbul ignore next */
  (cov_dntaudbg3().s[5]++, new Map());
  healthInterval;
  heartbeatInterval;
  // Scaling and policies
  scalingPolicies =
  /* istanbul ignore next */
  (cov_dntaudbg3().s[6]++, new Map());
  scalingOperations =
  /* istanbul ignore next */
  (cov_dntaudbg3().s[7]++, new Map());
  // Resource tracking
  resourceUsage =
  /* istanbul ignore next */
  (cov_dntaudbg3().s[8]++, new Map());
  performanceHistory =
  /* istanbul ignore next */
  (cov_dntaudbg3().s[9]++, new Map());
  constructor(config, logger, eventBus, memory) {
    /* istanbul ignore next */
    cov_dntaudbg3().f[0]++;
    cov_dntaudbg3().s[10]++;
    super();
    /* istanbul ignore next */
    cov_dntaudbg3().s[11]++;
    this.logger = logger;
    /* istanbul ignore next */
    cov_dntaudbg3().s[12]++;
    this.eventBus = eventBus;
    /* istanbul ignore next */
    cov_dntaudbg3().s[13]++;
    this.memory = memory;
    /* istanbul ignore next */
    cov_dntaudbg3().s[14]++;
    this.config = {
      maxAgents: 50,
      defaultTimeout: 30000,
      heartbeatInterval: 10000,
      healthCheckInterval: 30000,
      autoRestart: true,
      resourceLimits: {
        memory: 512 * 1024 * 1024,
        // 512MB
        cpu: 1.0,
        disk: 1024 * 1024 * 1024 // 1GB
      },
      agentDefaults: {
        autonomyLevel: 0.7,
        learningEnabled: true,
        adaptationEnabled: true
      },
      environmentDefaults: {
        runtime: 'deno',
        workingDirectory: './agents',
        tempDirectory: './tmp',
        logDirectory: './logs'
      },
      ...config
    };
    /* istanbul ignore next */
    cov_dntaudbg3().s[15]++;
    this.setupEventHandlers();
    /* istanbul ignore next */
    cov_dntaudbg3().s[16]++;
    this.initializeDefaultTemplates();
  }
  setupEventHandlers() {
    /* istanbul ignore next */
    cov_dntaudbg3().f[1]++;
    cov_dntaudbg3().s[17]++;
    this.eventBus.on('agent:heartbeat', data => {
      /* istanbul ignore next */
      cov_dntaudbg3().f[2]++;
      const heartbeatData =
      /* istanbul ignore next */
      (cov_dntaudbg3().s[18]++, data);
      /* istanbul ignore next */
      cov_dntaudbg3().s[19]++;
      this.handleHeartbeat(heartbeatData);
    });
    /* istanbul ignore next */
    cov_dntaudbg3().s[20]++;
    this.eventBus.on('agent:error', data => {
      /* istanbul ignore next */
      cov_dntaudbg3().f[3]++;
      const errorData =
      /* istanbul ignore next */
      (cov_dntaudbg3().s[21]++, data);
      /* istanbul ignore next */
      cov_dntaudbg3().s[22]++;
      this.handleAgentError(errorData);
    });
    /* istanbul ignore next */
    cov_dntaudbg3().s[23]++;
    this.eventBus.on('task:assigned', data => {
      /* istanbul ignore next */
      cov_dntaudbg3().f[4]++;
      const taskData =
      /* istanbul ignore next */
      (cov_dntaudbg3().s[24]++, data);
      /* istanbul ignore next */
      cov_dntaudbg3().s[25]++;
      this.updateAgentWorkload(taskData.agentId, 1);
    });
    /* istanbul ignore next */
    cov_dntaudbg3().s[26]++;
    this.eventBus.on('task:completed', data => {
      /* istanbul ignore next */
      cov_dntaudbg3().f[5]++;
      const completedData =
      /* istanbul ignore next */
      (cov_dntaudbg3().s[27]++, data);
      /* istanbul ignore next */
      cov_dntaudbg3().s[28]++;
      this.updateAgentWorkload(completedData.agentId, -1);
      /* istanbul ignore next */
      cov_dntaudbg3().s[29]++;
      if (completedData.metrics) {
        /* istanbul ignore next */
        cov_dntaudbg3().b[0][0]++;
        cov_dntaudbg3().s[30]++;
        this.updateAgentMetrics(completedData.agentId, completedData.metrics);
      } else
      /* istanbul ignore next */
      {
        cov_dntaudbg3().b[0][1]++;
      }
    });
    /* istanbul ignore next */
    cov_dntaudbg3().s[31]++;
    this.eventBus.on('resource:usage', data => {
      /* istanbul ignore next */
      cov_dntaudbg3().f[6]++;
      const resourceData =
      /* istanbul ignore next */
      (cov_dntaudbg3().s[32]++, data);
      /* istanbul ignore next */
      cov_dntaudbg3().s[33]++;
      this.updateResourceUsage(resourceData.agentId, resourceData.usage);
    });
  }
  initializeDefaultTemplates() {
    /* istanbul ignore next */
    cov_dntaudbg3().f[7]++;
    cov_dntaudbg3().s[34]++;
    // Research agent template
    this.templates.set('researcher', {
      name: 'Research Agent',
      type: 'researcher',
      capabilities: {
        codeGeneration: false,
        codeReview: false,
        testing: false,
        documentation: true,
        research: true,
        analysis: true,
        webSearch: true,
        apiIntegration: true,
        fileSystem: true,
        terminalAccess: false,
        languages: [],
        frameworks: [],
        domains: ['research', 'analysis', 'information-gathering'],
        tools: ['web-search', 'document-analysis', 'data-extraction'],
        maxConcurrentTasks: 5,
        maxMemoryUsage: 256 * 1024 * 1024,
        maxExecutionTime: 600000,
        reliability: 0.9,
        speed: 0.8,
        quality: 0.9
      },
      config: {
        autonomyLevel: 0.8,
        learningEnabled: true,
        adaptationEnabled: true,
        maxTasksPerHour: 20,
        maxConcurrentTasks: 5,
        timeoutThreshold: 600000,
        reportingInterval: 30000,
        heartbeatInterval: 10000,
        permissions: ['web-access', 'file-read'],
        trustedAgents: [],
        expertise: {
          research: 0.9,
          analysis: 0.8,
          documentation: 0.7
        },
        preferences: {
          verbose: true,
          detailed: true
        }
      },
      environment: {
        runtime: 'deno',
        version: '1.40.0',
        workingDirectory: './agents/researcher',
        tempDirectory: './tmp/researcher',
        logDirectory: './logs/researcher',
        apiEndpoints: {},
        credentials: {},
        availableTools: ['web-search', 'document-reader', 'data-extractor'],
        toolConfigs: {}
      },
      startupScript: './scripts/start-researcher.ts'
    });
    // Developer agent template
    /* istanbul ignore next */
    cov_dntaudbg3().s[35]++;
    this.templates.set('coder', {
      name: 'Developer Agent',
      type: 'coder',
      capabilities: {
        codeGeneration: true,
        codeReview: true,
        testing: true,
        documentation: true,
        research: false,
        analysis: true,
        webSearch: false,
        apiIntegration: true,
        fileSystem: true,
        terminalAccess: true,
        languages: ['typescript', 'javascript', 'python', 'rust'],
        frameworks: ['deno', 'node', 'react', 'svelte'],
        domains: ['web-development', 'backend', 'api-design'],
        tools: ['git', 'editor', 'debugger', 'linter', 'formatter'],
        maxConcurrentTasks: 3,
        maxMemoryUsage: 512 * 1024 * 1024,
        maxExecutionTime: 1200000,
        reliability: 0.95,
        speed: 0.7,
        quality: 0.95
      },
      config: {
        autonomyLevel: 0.6,
        learningEnabled: true,
        adaptationEnabled: true,
        maxTasksPerHour: 10,
        maxConcurrentTasks: 3,
        timeoutThreshold: 1200000,
        reportingInterval: 60000,
        heartbeatInterval: 15000,
        permissions: ['file-read', 'file-write', 'terminal-access', 'git-access'],
        trustedAgents: [],
        expertise: {
          coding: 0.95,
          testing: 0.8,
          debugging: 0.9
        },
        preferences: {
          codeStyle: 'functional',
          testFramework: 'deno-test'
        }
      },
      environment: {
        runtime: 'deno',
        version: '1.40.0',
        workingDirectory: './agents/developer',
        tempDirectory: './tmp/developer',
        logDirectory: './logs/developer',
        apiEndpoints: {},
        credentials: {},
        availableTools: ['git', 'deno', 'editor', 'debugger'],
        toolConfigs: {}
      },
      startupScript: './scripts/start-developer.ts'
    });
    // Add more templates...
    /* istanbul ignore next */
    cov_dntaudbg3().s[36]++;
    this.initializeSpecializedTemplates();
  }
  initializeSpecializedTemplates() {
    /* istanbul ignore next */
    cov_dntaudbg3().f[8]++;
    cov_dntaudbg3().s[37]++;
    // Analyzer template
    this.templates.set('analyst', {
      name: 'Analyzer Agent',
      type: 'analyst',
      capabilities: {
        codeGeneration: false,
        codeReview: true,
        testing: false,
        documentation: true,
        research: false,
        analysis: true,
        webSearch: false,
        apiIntegration: true,
        fileSystem: true,
        terminalAccess: false,
        languages: ['python', 'r', 'sql'],
        frameworks: ['pandas', 'numpy', 'matplotlib'],
        domains: ['data-analysis', 'statistics', 'visualization'],
        tools: ['data-processor', 'chart-generator', 'statistical-analyzer'],
        maxConcurrentTasks: 4,
        maxMemoryUsage: 1024 * 1024 * 1024,
        maxExecutionTime: 900000,
        reliability: 0.9,
        speed: 0.75,
        quality: 0.9
      },
      config: {
        autonomyLevel: 0.7,
        learningEnabled: true,
        adaptationEnabled: true,
        maxTasksPerHour: 15,
        maxConcurrentTasks: 4,
        timeoutThreshold: 900000,
        reportingInterval: 45000,
        heartbeatInterval: 12000,
        permissions: ['file-read', 'data-access'],
        trustedAgents: [],
        expertise: {
          analysis: 0.95,
          visualization: 0.8,
          statistics: 0.85
        },
        preferences: {
          outputFormat: 'detailed',
          includeCharts: true
        }
      },
      environment: {
        runtime: 'deno',
        version: '1.40.0',
        workingDirectory: './agents/analyzer',
        tempDirectory: './tmp/analyzer',
        logDirectory: './logs/analyzer',
        apiEndpoints: {},
        credentials: {},
        availableTools: ['data-processor', 'chart-gen', 'stats-calc'],
        toolConfigs: {}
      },
      startupScript: './scripts/start-analyzer.ts'
    });
    // Requirements Engineer Agent Template
    /* istanbul ignore next */
    cov_dntaudbg3().s[38]++;
    this.templates.set('requirements-engineer', {
      name: 'Requirements Engineer Agent',
      type: 'requirements-engineer',
      capabilities: {
        codeGeneration: false,
        codeReview: false,
        testing: false,
        documentation: true,
        research: true,
        analysis: true,
        webSearch: true,
        apiIntegration: false,
        fileSystem: true,
        terminalAccess: false,
        languages: [],
        frameworks: [],
        domains: ['requirements-engineering', 'user-stories', 'ears-notation'],
        tools: ['document-writer', 'nlp-processor', 'web-search'],
        maxConcurrentTasks: 2,
        maxMemoryUsage: 256 * 1024 * 1024,
        maxExecutionTime: 300000,
        reliability: 0.95,
        speed: 0.8,
        quality: 0.95
      },
      config: {
        autonomyLevel: 0.8,
        learningEnabled: true,
        adaptationEnabled: true,
        maxTasksPerHour: 10,
        maxConcurrentTasks: 2,
        timeoutThreshold: 300000,
        reportingInterval: 30000,
        heartbeatInterval: 10000,
        permissions: ['file-read', 'file-write'],
        trustedAgents: [],
        expertise: {
          requirements: 0.95,
          documentation: 0.9,
          analysis: 0.8
        },
        preferences: {
          format: 'markdown',
          style: 'formal'
        }
      },
      environment: {
        runtime: 'deno',
        version: '1.40.0',
        workingDirectory: './agents/requirements-engineer',
        tempDirectory: './tmp/requirements-engineer',
        logDirectory: './logs/requirements-engineer',
        apiEndpoints: {},
        credentials: {},
        availableTools: ['document-writer', 'nlp-processor'],
        toolConfigs: {}
      },
      startupScript: './scripts/start-requirements-engineer.ts'
    });
    // Design Architect Agent Template
    /* istanbul ignore next */
    cov_dntaudbg3().s[39]++;
    this.templates.set('design-architect', {
      name: 'Design Architect Agent',
      type: 'design-architect',
      capabilities: {
        codeGeneration: false,
        codeReview: true,
        testing: false,
        documentation: true,
        research: true,
        analysis: true,
        webSearch: false,
        apiIntegration: true,
        fileSystem: true,
        terminalAccess: false,
        languages: ['typescript', 'javascript', 'python'],
        frameworks: [],
        domains: ['software-architecture', 'system-design', 'data-modeling'],
        tools: ['diagram-generator', 'code-analyzer', 'api-designer'],
        maxConcurrentTasks: 1,
        maxMemoryUsage: 512 * 1024 * 1024,
        maxExecutionTime: 600000,
        reliability: 0.9,
        speed: 0.7,
        quality: 0.95
      },
      config: {
        autonomyLevel: 0.7,
        learningEnabled: true,
        adaptationEnabled: true,
        maxTasksPerHour: 5,
        maxConcurrentTasks: 1,
        timeoutThreshold: 600000,
        reportingInterval: 60000,
        heartbeatInterval: 15000,
        permissions: ['file-read', 'file-write'],
        trustedAgents: [],
        expertise: {
          architecture: 0.95,
          design: 0.9,
          modeling: 0.85
        },
        preferences: {
          diagramFormat: 'mermaid',
          detailLevel: 'high'
        }
      },
      environment: {
        runtime: 'deno',
        version: '1.40.0',
        workingDirectory: './agents/design-architect',
        tempDirectory: './tmp/design-architect',
        logDirectory: './logs/design-architect',
        apiEndpoints: {},
        credentials: {},
        availableTools: ['diagram-gen', 'code-analyzer'],
        toolConfigs: {}
      },
      startupScript: './scripts/start-design-architect.ts'
    });
    // Task Planner Agent Template
    /* istanbul ignore next */
    cov_dntaudbg3().s[40]++;
    this.templates.set('task-planner', {
      name: 'Task Planner Agent',
      type: 'task-planner',
      capabilities: {
        codeGeneration: false,
        codeReview: false,
        testing: false,
        documentation: true,
        research: false,
        analysis: true,
        webSearch: false,
        apiIntegration: false,
        fileSystem: true,
        terminalAccess: false,
        languages: [],
        frameworks: [],
        domains: ['project-management', 'task-breakdown', 'agile-planning'],
        tools: ['task-scheduler', 'dependency-analyzer'],
        maxConcurrentTasks: 3,
        maxMemoryUsage: 256 * 1024 * 1024,
        maxExecutionTime: 300000,
        reliability: 0.95,
        speed: 0.85,
        quality: 0.9
      },
      config: {
        autonomyLevel: 0.8,
        learningEnabled: true,
        adaptationEnabled: true,
        maxTasksPerHour: 20,
        maxConcurrentTasks: 3,
        timeoutThreshold: 300000,
        reportingInterval: 30000,
        heartbeatInterval: 10000,
        permissions: ['file-read', 'file-write'],
        trustedAgents: [],
        expertise: {
          planning: 0.95,
          'task-management': 0.9,
          optimization: 0.8
        },
        preferences: {
          outputFormat: 'markdown-checkbox',
          granularity: 'fine'
        }
      },
      environment: {
        runtime: 'deno',
        version: '1.40.0',
        workingDirectory: './agents/task-planner',
        tempDirectory: './tmp/task-planner',
        logDirectory: './logs/task-planner',
        apiEndpoints: {},
        credentials: {},
        availableTools: ['task-scheduler', 'dependency-analyzer'],
        toolConfigs: {}
      },
      startupScript: './scripts/start-task-planner.ts'
    });
    // Developer Agent Template (already exists, but ensure it's aligned)
    /* istanbul ignore next */
    cov_dntaudbg3().s[41]++;
    this.templates.set('developer', {
      name: 'Developer Agent',
      type: 'developer',
      capabilities: {
        codeGeneration: true,
        codeReview: true,
        testing: true,
        documentation: true,
        research: false,
        analysis: true,
        webSearch: false,
        apiIntegration: true,
        fileSystem: true,
        terminalAccess: true,
        languages: ['typescript', 'javascript', 'python', 'rust'],
        frameworks: ['deno', 'node', 'react', 'svelte'],
        domains: ['web-development', 'backend', 'api-design'],
        tools: ['git', 'editor', 'debugger', 'linter', 'formatter'],
        maxConcurrentTasks: 3,
        maxMemoryUsage: 512 * 1024 * 1024,
        maxExecutionTime: 1200000,
        reliability: 0.95,
        speed: 0.7,
        quality: 0.95
      },
      config: {
        autonomyLevel: 0.6,
        learningEnabled: true,
        adaptationEnabled: true,
        maxTasksPerHour: 10,
        maxConcurrentTasks: 3,
        timeoutThreshold: 1200000,
        reportingInterval: 60000,
        heartbeatInterval: 15000,
        permissions: ['file-read', 'file-write', 'terminal-access', 'git-access'],
        trustedAgents: [],
        expertise: {
          coding: 0.95,
          testing: 0.8,
          debugging: 0.9
        },
        preferences: {
          codeStyle: 'functional',
          testFramework: 'deno-test'
        }
      },
      environment: {
        runtime: 'deno',
        version: '1.40.0',
        workingDirectory: './agents/developer',
        tempDirectory: './tmp/developer',
        logDirectory: './logs/developer',
        apiEndpoints: {},
        credentials: {},
        availableTools: ['git', 'deno', 'editor', 'debugger'],
        toolConfigs: {}
      },
      startupScript: './scripts/start-developer.ts'
    });
    // System Architect Agent Template  
    /* istanbul ignore next */
    cov_dntaudbg3().s[42]++;
    this.templates.set('system-architect', {
      name: 'System Architect Agent',
      type: 'system-architect',
      capabilities: {
        codeGeneration: false,
        codeReview: true,
        testing: false,
        documentation: true,
        research: true,
        analysis: true,
        webSearch: false,
        apiIntegration: true,
        fileSystem: true,
        terminalAccess: false,
        languages: ['typescript', 'javascript', 'python'],
        frameworks: ['microservices', 'distributed-systems'],
        domains: ['system-architecture', 'scalability', 'performance', 'distributed-systems'],
        tools: ['architecture-analyzer', 'system-modeler', 'performance-analyzer'],
        maxConcurrentTasks: 1,
        maxMemoryUsage: 512 * 1024 * 1024,
        maxExecutionTime: 900000,
        reliability: 0.95,
        speed: 0.7,
        quality: 0.95
      },
      config: {
        autonomyLevel: 0.8,
        learningEnabled: true,
        adaptationEnabled: true,
        maxTasksPerHour: 5,
        maxConcurrentTasks: 1,
        timeoutThreshold: 900000,
        reportingInterval: 60000,
        heartbeatInterval: 15000,
        permissions: ['file-read', 'file-write'],
        trustedAgents: [],
        expertise: {
          'system-architecture': 0.95,
          scalability: 0.9,
          performance: 0.85
        },
        preferences: {
          scope: 'system-wide',
          focusArea: 'architecture'
        }
      },
      environment: {
        runtime: 'deno',
        version: '1.40.0',
        workingDirectory: './agents/system-architect',
        tempDirectory: './tmp/system-architect',
        logDirectory: './logs/system-architect',
        apiEndpoints: {},
        credentials: {},
        availableTools: ['architecture-analyzer', 'system-modeler'],
        toolConfigs: {}
      },
      startupScript: './scripts/start-system-architect.ts'
    });
    // Tester Agent Template
    /* istanbul ignore next */
    cov_dntaudbg3().s[43]++;
    this.templates.set('tester', {
      name: 'Testing Agent',
      type: 'tester',
      capabilities: {
        codeGeneration: false,
        codeReview: true,
        testing: true,
        documentation: true,
        research: false,
        analysis: true,
        webSearch: false,
        apiIntegration: true,
        fileSystem: true,
        terminalAccess: true,
        languages: ['typescript', 'javascript', 'python'],
        frameworks: ['deno-test', 'jest', 'vitest', 'cypress'],
        domains: ['testing', 'quality-assurance', 'test-automation'],
        tools: ['test-runner', 'coverage-analyzer', 'test-generator'],
        maxConcurrentTasks: 3,
        maxMemoryUsage: 256 * 1024 * 1024,
        maxExecutionTime: 600000,
        reliability: 0.9,
        speed: 0.8,
        quality: 0.9
      },
      config: {
        autonomyLevel: 0.7,
        learningEnabled: true,
        adaptationEnabled: true,
        maxTasksPerHour: 15,
        maxConcurrentTasks: 3,
        timeoutThreshold: 600000,
        reportingInterval: 45000,
        heartbeatInterval: 12000,
        permissions: ['file-read', 'file-write', 'terminal-access'],
        trustedAgents: [],
        expertise: {
          testing: 0.9,
          'quality-assurance': 0.85,
          automation: 0.8
        },
        preferences: {
          testFramework: 'deno-test',
          coverage: 'comprehensive'
        }
      },
      environment: {
        runtime: 'deno',
        version: '1.40.0',
        workingDirectory: './agents/tester',
        tempDirectory: './tmp/tester',
        logDirectory: './logs/tester',
        apiEndpoints: {},
        credentials: {},
        availableTools: ['test-runner', 'coverage-tool', 'test-gen'],
        toolConfigs: {}
      },
      startupScript: './scripts/start-tester.ts'
    });
    // Code Reviewer Agent Template
    /* istanbul ignore next */
    cov_dntaudbg3().s[44]++;
    this.templates.set('reviewer', {
      name: 'Code Review Agent',
      type: 'reviewer',
      capabilities: {
        codeGeneration: false,
        codeReview: true,
        testing: false,
        documentation: true,
        research: false,
        analysis: true,
        webSearch: false,
        apiIntegration: false,
        fileSystem: true,
        terminalAccess: false,
        languages: ['typescript', 'javascript', 'python', 'rust'],
        frameworks: ['static-analysis', 'code-quality'],
        domains: ['code-review', 'quality-assurance', 'best-practices'],
        tools: ['static-analyzer', 'code-quality-checker', 'security-scanner'],
        maxConcurrentTasks: 2,
        maxMemoryUsage: 256 * 1024 * 1024,
        maxExecutionTime: 450000,
        reliability: 0.95,
        speed: 0.8,
        quality: 0.95
      },
      config: {
        autonomyLevel: 0.8,
        learningEnabled: true,
        adaptationEnabled: true,
        maxTasksPerHour: 12,
        maxConcurrentTasks: 2,
        timeoutThreshold: 450000,
        reportingInterval: 30000,
        heartbeatInterval: 10000,
        permissions: ['file-read'],
        trustedAgents: [],
        expertise: {
          'code-review': 0.95,
          'quality-assurance': 0.9,
          security: 0.8
        },
        preferences: {
          style: 'thorough',
          focus: 'quality-and-security'
        }
      },
      environment: {
        runtime: 'deno',
        version: '1.40.0',
        workingDirectory: './agents/reviewer',
        tempDirectory: './tmp/reviewer',
        logDirectory: './logs/reviewer',
        apiEndpoints: {},
        credentials: {},
        availableTools: ['static-analyzer', 'quality-checker'],
        toolConfigs: {}
      },
      startupScript: './scripts/start-reviewer.ts'
    });
    // Steering Author Agent Template
    /* istanbul ignore next */
    cov_dntaudbg3().s[45]++;
    this.templates.set('steering-author', {
      name: 'Steering Author Agent',
      type: 'steering-author',
      capabilities: {
        codeGeneration: false,
        codeReview: true,
        testing: false,
        documentation: true,
        research: true,
        analysis: true,
        webSearch: false,
        apiIntegration: false,
        fileSystem: true,
        terminalAccess: false,
        languages: [],
        frameworks: [],
        domains: ['documentation', 'knowledge-management', 'governance'],
        tools: ['document-writer', 'content-analyzer'],
        maxConcurrentTasks: 1,
        maxMemoryUsage: 256 * 1024 * 1024,
        maxExecutionTime: 300000,
        reliability: 0.95,
        speed: 0.7,
        quality: 0.98
      },
      config: {
        autonomyLevel: 0.7,
        learningEnabled: true,
        adaptationEnabled: true,
        maxTasksPerHour: 5,
        maxConcurrentTasks: 1,
        timeoutThreshold: 300000,
        reportingInterval: 30000,
        heartbeatInterval: 10000,
        permissions: ['file-read', 'file-write'],
        trustedAgents: [],
        expertise: {
          documentation: 0.98,
          governance: 0.9,
          'content-creation': 0.85
        },
        preferences: {
          style: 'concise',
          tone: 'formal'
        }
      },
      environment: {
        runtime: 'deno',
        version: '1.40.0',
        workingDirectory: './agents/steering-author',
        tempDirectory: './tmp/steering-author',
        logDirectory: './logs/steering-author',
        apiEndpoints: {},
        credentials: {},
        availableTools: ['document-writer', 'content-analyzer'],
        toolConfigs: {}
      },
      startupScript: './scripts/start-steering-author.ts'
    });
  }
  async initialize() {
    /* istanbul ignore next */
    cov_dntaudbg3().f[9]++;
    cov_dntaudbg3().s[46]++;
    this.logger.info('Initializing agent manager', {
      maxAgents: this.config.maxAgents,
      templates: this.templates.size
    });
    // Start health monitoring
    /* istanbul ignore next */
    cov_dntaudbg3().s[47]++;
    this.startHealthMonitoring();
    // Start heartbeat monitoring
    /* istanbul ignore next */
    cov_dntaudbg3().s[48]++;
    this.startHeartbeatMonitoring();
    // Initialize default scaling policies
    /* istanbul ignore next */
    cov_dntaudbg3().s[49]++;
    this.initializeScalingPolicies();
    /* istanbul ignore next */
    cov_dntaudbg3().s[50]++;
    this.emit('agent-manager:initialized');
  }
  async shutdown() {
    /* istanbul ignore next */
    cov_dntaudbg3().f[10]++;
    cov_dntaudbg3().s[51]++;
    this.logger.info('Shutting down agent manager');
    // Stop monitoring
    /* istanbul ignore next */
    cov_dntaudbg3().s[52]++;
    if (this.healthInterval) {
      /* istanbul ignore next */
      cov_dntaudbg3().b[1][0]++;
      cov_dntaudbg3().s[53]++;
      clearInterval(this.healthInterval);
    } else
    /* istanbul ignore next */
    {
      cov_dntaudbg3().b[1][1]++;
    }
    cov_dntaudbg3().s[54]++;
    if (this.heartbeatInterval) {
      /* istanbul ignore next */
      cov_dntaudbg3().b[2][0]++;
      cov_dntaudbg3().s[55]++;
      clearInterval(this.heartbeatInterval);
    } else
    /* istanbul ignore next */
    {
      cov_dntaudbg3().b[2][1]++;
    }
    // Gracefully shutdown all agents
    const shutdownPromises =
    /* istanbul ignore next */
    (cov_dntaudbg3().s[56]++, Array.from(this.agents.keys()).map(agentId => {
      /* istanbul ignore next */
      cov_dntaudbg3().f[11]++;
      cov_dntaudbg3().s[57]++;
      return this.stopAgent(agentId, 'shutdown');
    }));
    /* istanbul ignore next */
    cov_dntaudbg3().s[58]++;
    await Promise.all(shutdownPromises);
    /* istanbul ignore next */
    cov_dntaudbg3().s[59]++;
    this.emit('agent-manager:shutdown');
  }
  // === AGENT LIFECYCLE ===
  async createAgent(templateName, overrides =
  /* istanbul ignore next */
  (cov_dntaudbg3().b[3][0]++, {})) {
    /* istanbul ignore next */
    cov_dntaudbg3().f[12]++;
    cov_dntaudbg3().s[60]++;
    if (this.agents.size >= this.config.maxAgents) {
      /* istanbul ignore next */
      cov_dntaudbg3().b[4][0]++;
      cov_dntaudbg3().s[61]++;
      throw new Error('Maximum agent limit reached');
    } else
    /* istanbul ignore next */
    {
      cov_dntaudbg3().b[4][1]++;
    }
    const template =
    /* istanbul ignore next */
    (cov_dntaudbg3().s[62]++, this.templates.get(templateName));
    /* istanbul ignore next */
    cov_dntaudbg3().s[63]++;
    if (!template) {
      /* istanbul ignore next */
      cov_dntaudbg3().b[5][0]++;
      cov_dntaudbg3().s[64]++;
      throw new Error(`Template ${templateName} not found`);
    } else
    /* istanbul ignore next */
    {
      cov_dntaudbg3().b[5][1]++;
    }
    const agentId =
    /* istanbul ignore next */
    (cov_dntaudbg3().s[65]++, generateId('agent'));
    const swarmId =
    /* istanbul ignore next */
    (cov_dntaudbg3().s[66]++, 'default'); // Could be parameterized
    const agent =
    /* istanbul ignore next */
    (cov_dntaudbg3().s[67]++, {
      id: {
        id: agentId,
        swarmId,
        type: template.type,
        instance: 1
      },
      name:
      /* istanbul ignore next */
      (cov_dntaudbg3().b[6][0]++, overrides.name) ||
      /* istanbul ignore next */
      (cov_dntaudbg3().b[6][1]++, `${template.name}-${agentId.slice(-8)}`),
      type: template.type,
      status: 'initializing',
      capabilities: {
        ...template.capabilities
      },
      metrics: this.createDefaultMetrics(),
      workload: 0,
      health: 1.0,
      config: {
        autonomyLevel:
        /* istanbul ignore next */
        (cov_dntaudbg3().b[7][0]++, template.config.autonomyLevel) ??
        /* istanbul ignore next */
        (cov_dntaudbg3().b[7][1]++, this.config.agentDefaults.autonomyLevel),
        learningEnabled:
        /* istanbul ignore next */
        (cov_dntaudbg3().b[8][0]++, template.config.learningEnabled) ??
        /* istanbul ignore next */
        (cov_dntaudbg3().b[8][1]++, this.config.agentDefaults.learningEnabled),
        adaptationEnabled:
        /* istanbul ignore next */
        (cov_dntaudbg3().b[9][0]++, template.config.adaptationEnabled) ??
        /* istanbul ignore next */
        (cov_dntaudbg3().b[9][1]++, this.config.agentDefaults.adaptationEnabled),
        maxTasksPerHour:
        /* istanbul ignore next */
        (cov_dntaudbg3().b[10][0]++, template.config.maxTasksPerHour) ??
        /* istanbul ignore next */
        (cov_dntaudbg3().b[10][1]++, 10),
        maxConcurrentTasks:
        /* istanbul ignore next */
        (cov_dntaudbg3().b[11][0]++, template.config.maxConcurrentTasks) ??
        /* istanbul ignore next */
        (cov_dntaudbg3().b[11][1]++, 3),
        timeoutThreshold:
        /* istanbul ignore next */
        (cov_dntaudbg3().b[12][0]++, template.config.timeoutThreshold) ??
        /* istanbul ignore next */
        (cov_dntaudbg3().b[12][1]++, 300000),
        reportingInterval:
        /* istanbul ignore next */
        (cov_dntaudbg3().b[13][0]++, template.config.reportingInterval) ??
        /* istanbul ignore next */
        (cov_dntaudbg3().b[13][1]++, 30000),
        heartbeatInterval:
        /* istanbul ignore next */
        (cov_dntaudbg3().b[14][0]++, template.config.heartbeatInterval) ??
        /* istanbul ignore next */
        (cov_dntaudbg3().b[14][1]++, 10000),
        permissions:
        /* istanbul ignore next */
        (cov_dntaudbg3().b[15][0]++, template.config.permissions) ??
        /* istanbul ignore next */
        (cov_dntaudbg3().b[15][1]++, []),
        trustedAgents:
        /* istanbul ignore next */
        (cov_dntaudbg3().b[16][0]++, template.config.trustedAgents) ??
        /* istanbul ignore next */
        (cov_dntaudbg3().b[16][1]++, []),
        expertise:
        /* istanbul ignore next */
        (cov_dntaudbg3().b[17][0]++, template.config.expertise) ??
        /* istanbul ignore next */
        (cov_dntaudbg3().b[17][1]++, {}),
        preferences:
        /* istanbul ignore next */
        (cov_dntaudbg3().b[18][0]++, template.config.preferences) ??
        /* istanbul ignore next */
        (cov_dntaudbg3().b[18][1]++, {}),
        ...overrides.config
      },
      environment: {
        runtime:
        /* istanbul ignore next */
        (cov_dntaudbg3().b[19][0]++, template.environment.runtime) ??
        /* istanbul ignore next */
        (cov_dntaudbg3().b[19][1]++, this.config.environmentDefaults.runtime),
        version:
        /* istanbul ignore next */
        (cov_dntaudbg3().b[20][0]++, template.environment.version) ??
        /* istanbul ignore next */
        (cov_dntaudbg3().b[20][1]++, '1.40.0'),
        workingDirectory:
        /* istanbul ignore next */
        (cov_dntaudbg3().b[21][0]++, template.environment.workingDirectory) ??
        /* istanbul ignore next */
        (cov_dntaudbg3().b[21][1]++, this.config.environmentDefaults.workingDirectory),
        tempDirectory:
        /* istanbul ignore next */
        (cov_dntaudbg3().b[22][0]++, template.environment.tempDirectory) ??
        /* istanbul ignore next */
        (cov_dntaudbg3().b[22][1]++, this.config.environmentDefaults.tempDirectory),
        logDirectory:
        /* istanbul ignore next */
        (cov_dntaudbg3().b[23][0]++, template.environment.logDirectory) ??
        /* istanbul ignore next */
        (cov_dntaudbg3().b[23][1]++, this.config.environmentDefaults.logDirectory),
        apiEndpoints:
        /* istanbul ignore next */
        (cov_dntaudbg3().b[24][0]++, template.environment.apiEndpoints) ??
        /* istanbul ignore next */
        (cov_dntaudbg3().b[24][1]++, {}),
        credentials:
        /* istanbul ignore next */
        (cov_dntaudbg3().b[25][0]++, template.environment.credentials) ??
        /* istanbul ignore next */
        (cov_dntaudbg3().b[25][1]++, {}),
        availableTools:
        /* istanbul ignore next */
        (cov_dntaudbg3().b[26][0]++, template.environment.availableTools) ??
        /* istanbul ignore next */
        (cov_dntaudbg3().b[26][1]++, []),
        toolConfigs:
        /* istanbul ignore next */
        (cov_dntaudbg3().b[27][0]++, template.environment.toolConfigs) ??
        /* istanbul ignore next */
        (cov_dntaudbg3().b[27][1]++, {}),
        ...overrides.environment
      },
      endpoints: [],
      lastHeartbeat: new Date(),
      taskHistory: [],
      errorHistory: [],
      childAgents: [],
      collaborators: []
    });
    /* istanbul ignore next */
    cov_dntaudbg3().s[68]++;
    this.agents.set(agentId, agent);
    /* istanbul ignore next */
    cov_dntaudbg3().s[69]++;
    this.healthChecks.set(agentId, this.createDefaultHealth(agentId));
    /* istanbul ignore next */
    cov_dntaudbg3().s[70]++;
    this.logger.info('Created agent', {
      agentId,
      name: agent.name,
      type: agent.type,
      template: templateName
    });
    /* istanbul ignore next */
    cov_dntaudbg3().s[71]++;
    this.emit('agent:created', {
      agent
    });
    // Store in memory for persistence
    /* istanbul ignore next */
    cov_dntaudbg3().s[72]++;
    await this.memory.store(`agent:${agentId}`, agent, {
      type: 'agent-state',
      tags: [agent.type, 'active'],
      partition: 'state'
    });
    /* istanbul ignore next */
    cov_dntaudbg3().s[73]++;
    return agentId;
  }
  async startAgent(agentId) {
    /* istanbul ignore next */
    cov_dntaudbg3().f[13]++;
    const agent =
    /* istanbul ignore next */
    (cov_dntaudbg3().s[74]++, this.agents.get(agentId));
    /* istanbul ignore next */
    cov_dntaudbg3().s[75]++;
    if (!agent) {
      /* istanbul ignore next */
      cov_dntaudbg3().b[28][0]++;
      cov_dntaudbg3().s[76]++;
      throw new Error(`Agent ${agentId} not found`);
    } else
    /* istanbul ignore next */
    {
      cov_dntaudbg3().b[28][1]++;
    }
    cov_dntaudbg3().s[77]++;
    if (
    /* istanbul ignore next */
    (cov_dntaudbg3().b[30][0]++, agent.status !== 'initializing') &&
    /* istanbul ignore next */
    (cov_dntaudbg3().b[30][1]++, agent.status !== 'offline')) {
      /* istanbul ignore next */
      cov_dntaudbg3().b[29][0]++;
      cov_dntaudbg3().s[78]++;
      throw new Error(`Agent ${agentId} cannot be started from status ${agent.status}`);
    } else
    /* istanbul ignore next */
    {
      cov_dntaudbg3().b[29][1]++;
    }
    cov_dntaudbg3().s[79]++;
    try {
      /* istanbul ignore next */
      cov_dntaudbg3().s[80]++;
      agent.status = 'initializing';
      /* istanbul ignore next */
      cov_dntaudbg3().s[81]++;
      this.updateAgentStatus(agentId, 'initializing');
      // Spawn agent process
      const process =
      /* istanbul ignore next */
      (cov_dntaudbg3().s[82]++, await this.spawnAgentProcess(agent));
      /* istanbul ignore next */
      cov_dntaudbg3().s[83]++;
      this.processes.set(agentId, process);
      // Wait for agent to signal ready
      /* istanbul ignore next */
      cov_dntaudbg3().s[84]++;
      await this.waitForAgentReady(agentId, this.config.defaultTimeout);
      /* istanbul ignore next */
      cov_dntaudbg3().s[85]++;
      agent.status = 'idle';
      /* istanbul ignore next */
      cov_dntaudbg3().s[86]++;
      this.updateAgentStatus(agentId, 'idle');
      /* istanbul ignore next */
      cov_dntaudbg3().s[87]++;
      this.logger.info('Started agent', {
        agentId,
        name: agent.name
      });
      /* istanbul ignore next */
      cov_dntaudbg3().s[88]++;
      this.emit('agent:started', {
        agent
      });
    } catch (error) {
      const errorMessage =
      /* istanbul ignore next */
      (cov_dntaudbg3().s[89]++, error instanceof Error ?
      /* istanbul ignore next */
      (cov_dntaudbg3().b[31][0]++, error.message) :
      /* istanbul ignore next */
      (cov_dntaudbg3().b[31][1]++, String(error)));
      /* istanbul ignore next */
      cov_dntaudbg3().s[90]++;
      agent.status = 'error';
      /* istanbul ignore next */
      cov_dntaudbg3().s[91]++;
      this.addAgentError(agentId, {
        timestamp: new Date(),
        type: 'startup_failed',
        message: errorMessage,
        context: {
          agentId
        },
        severity: 'critical',
        resolved: false
      });
      /* istanbul ignore next */
      cov_dntaudbg3().s[92]++;
      this.logger.error('Failed to start agent', {
        agentId,
        error
      });
      /* istanbul ignore next */
      cov_dntaudbg3().s[93]++;
      throw error;
    }
  }
  async stopAgent(agentId, reason =
  /* istanbul ignore next */
  (cov_dntaudbg3().b[32][0]++, 'user_request')) {
    /* istanbul ignore next */
    cov_dntaudbg3().f[14]++;
    const agent =
    /* istanbul ignore next */
    (cov_dntaudbg3().s[94]++, this.agents.get(agentId));
    /* istanbul ignore next */
    cov_dntaudbg3().s[95]++;
    if (!agent) {
      /* istanbul ignore next */
      cov_dntaudbg3().b[33][0]++;
      cov_dntaudbg3().s[96]++;
      throw new Error(`Agent ${agentId} not found`);
    } else
    /* istanbul ignore next */
    {
      cov_dntaudbg3().b[33][1]++;
    }
    cov_dntaudbg3().s[97]++;
    if (
    /* istanbul ignore next */
    (cov_dntaudbg3().b[35][0]++, agent.status === 'offline') ||
    /* istanbul ignore next */
    (cov_dntaudbg3().b[35][1]++, agent.status === 'terminated')) {
      /* istanbul ignore next */
      cov_dntaudbg3().b[34][0]++;
      cov_dntaudbg3().s[98]++;
      return; // Already stopped
    } else
    /* istanbul ignore next */
    {
      cov_dntaudbg3().b[34][1]++;
    }
    cov_dntaudbg3().s[99]++;
    try {
      /* istanbul ignore next */
      cov_dntaudbg3().s[100]++;
      agent.status = 'terminating';
      /* istanbul ignore next */
      cov_dntaudbg3().s[101]++;
      this.updateAgentStatus(agentId, 'terminating');
      // Send graceful shutdown signal
      const process =
      /* istanbul ignore next */
      (cov_dntaudbg3().s[102]++, this.processes.get(agentId));
      /* istanbul ignore next */
      cov_dntaudbg3().s[103]++;
      if (
      /* istanbul ignore next */
      (cov_dntaudbg3().b[37][0]++, process) &&
      /* istanbul ignore next */
      (cov_dntaudbg3().b[37][1]++, !process.killed)) {
        /* istanbul ignore next */
        cov_dntaudbg3().b[36][0]++;
        cov_dntaudbg3().s[104]++;
        process.kill('SIGTERM');
        // Force kill after timeout
        /* istanbul ignore next */
        cov_dntaudbg3().s[105]++;
        setTimeout(() => {
          /* istanbul ignore next */
          cov_dntaudbg3().f[15]++;
          cov_dntaudbg3().s[106]++;
          if (
          /* istanbul ignore next */
          (cov_dntaudbg3().b[39][0]++, process) &&
          /* istanbul ignore next */
          (cov_dntaudbg3().b[39][1]++, !process.killed)) {
            /* istanbul ignore next */
            cov_dntaudbg3().b[38][0]++;
            cov_dntaudbg3().s[107]++;
            process.kill('SIGKILL');
          } else
          /* istanbul ignore next */
          {
            cov_dntaudbg3().b[38][1]++;
          }
        }, this.config.defaultTimeout);
      } else
      /* istanbul ignore next */
      {
        cov_dntaudbg3().b[36][1]++;
      }
      // Wait for process to exit
      cov_dntaudbg3().s[108]++;
      await this.waitForProcessExit(agentId, this.config.defaultTimeout);
      /* istanbul ignore next */
      cov_dntaudbg3().s[109]++;
      agent.status = 'terminated';
      /* istanbul ignore next */
      cov_dntaudbg3().s[110]++;
      this.updateAgentStatus(agentId, 'terminated');
      // Cleanup
      /* istanbul ignore next */
      cov_dntaudbg3().s[111]++;
      this.processes.delete(agentId);
      /* istanbul ignore next */
      cov_dntaudbg3().s[112]++;
      this.logger.info('Stopped agent', {
        agentId,
        reason
      });
      /* istanbul ignore next */
      cov_dntaudbg3().s[113]++;
      this.emit('agent:stopped', {
        agent,
        reason
      });
    } catch (error) {
      /* istanbul ignore next */
      cov_dntaudbg3().s[114]++;
      this.logger.error('Failed to stop agent gracefully', {
        agentId,
        error
      });
      // Force cleanup
      /* istanbul ignore next */
      cov_dntaudbg3().s[115]++;
      this.processes.delete(agentId);
      /* istanbul ignore next */
      cov_dntaudbg3().s[116]++;
      agent.status = 'terminated';
    }
  }
  async restartAgent(agentId, reason =
  /* istanbul ignore next */
  (cov_dntaudbg3().b[40][0]++, 'restart_requested')) {
    /* istanbul ignore next */
    cov_dntaudbg3().f[16]++;
    cov_dntaudbg3().s[117]++;
    this.logger.info('Restarting agent', {
      agentId,
      reason
    });
    /* istanbul ignore next */
    cov_dntaudbg3().s[118]++;
    await this.stopAgent(agentId, `restart:${reason}`);
    /* istanbul ignore next */
    cov_dntaudbg3().s[119]++;
    await this.startAgent(agentId);
    /* istanbul ignore next */
    cov_dntaudbg3().s[120]++;
    this.emit('agent:restarted', {
      agentId,
      reason
    });
  }
  async removeAgent(agentId) {
    /* istanbul ignore next */
    cov_dntaudbg3().f[17]++;
    const agent =
    /* istanbul ignore next */
    (cov_dntaudbg3().s[121]++, this.agents.get(agentId));
    /* istanbul ignore next */
    cov_dntaudbg3().s[122]++;
    if (!agent) {
      /* istanbul ignore next */
      cov_dntaudbg3().b[41][0]++;
      cov_dntaudbg3().s[123]++;
      throw new Error(`Agent ${agentId} not found`);
    } else
    /* istanbul ignore next */
    {
      cov_dntaudbg3().b[41][1]++;
    }
    // Stop agent if running
    cov_dntaudbg3().s[124]++;
    if (
    /* istanbul ignore next */
    (cov_dntaudbg3().b[43][0]++, agent.status !== 'terminated') &&
    /* istanbul ignore next */
    (cov_dntaudbg3().b[43][1]++, agent.status !== 'offline')) {
      /* istanbul ignore next */
      cov_dntaudbg3().b[42][0]++;
      cov_dntaudbg3().s[125]++;
      await this.stopAgent(agentId, 'removal');
    } else
    /* istanbul ignore next */
    {
      cov_dntaudbg3().b[42][1]++;
    }
    // Remove from all data structures
    cov_dntaudbg3().s[126]++;
    this.agents.delete(agentId);
    /* istanbul ignore next */
    cov_dntaudbg3().s[127]++;
    this.healthChecks.delete(agentId);
    /* istanbul ignore next */
    cov_dntaudbg3().s[128]++;
    this.resourceUsage.delete(agentId);
    /* istanbul ignore next */
    cov_dntaudbg3().s[129]++;
    this.performanceHistory.delete(agentId);
    // Remove from pools and clusters
    /* istanbul ignore next */
    cov_dntaudbg3().s[130]++;
    this.removeAgentFromPoolsAndClusters(agentId);
    // Remove from memory
    /* istanbul ignore next */
    cov_dntaudbg3().s[131]++;
    await this.memory.deleteEntry(`agent:${agentId}`);
    /* istanbul ignore next */
    cov_dntaudbg3().s[132]++;
    this.logger.info('Removed agent', {
      agentId
    });
    /* istanbul ignore next */
    cov_dntaudbg3().s[133]++;
    this.emit('agent:removed', {
      agentId
    });
  }
  // === AGENT POOLS ===
  async createAgentPool(name, templateName, config) {
    /* istanbul ignore next */
    cov_dntaudbg3().f[18]++;
    const template =
    /* istanbul ignore next */
    (cov_dntaudbg3().s[134]++, this.templates.get(templateName));
    /* istanbul ignore next */
    cov_dntaudbg3().s[135]++;
    if (!template) {
      /* istanbul ignore next */
      cov_dntaudbg3().b[44][0]++;
      cov_dntaudbg3().s[136]++;
      throw new Error(`Template ${templateName} not found`);
    } else
    /* istanbul ignore next */
    {
      cov_dntaudbg3().b[44][1]++;
    }
    const poolId =
    /* istanbul ignore next */
    (cov_dntaudbg3().s[137]++, generateId('pool'));
    const pool =
    /* istanbul ignore next */
    (cov_dntaudbg3().s[138]++, {
      id: poolId,
      name,
      type: template.type,
      minSize: config.minSize,
      maxSize: config.maxSize,
      currentSize: 0,
      availableAgents: [],
      busyAgents: [],
      template,
      autoScale:
      /* istanbul ignore next */
      (cov_dntaudbg3().b[45][0]++, config.autoScale) ||
      /* istanbul ignore next */
      (cov_dntaudbg3().b[45][1]++, false),
      scaleUpThreshold:
      /* istanbul ignore next */
      (cov_dntaudbg3().b[46][0]++, config.scaleUpThreshold) ||
      /* istanbul ignore next */
      (cov_dntaudbg3().b[46][1]++, 0.8),
      scaleDownThreshold:
      /* istanbul ignore next */
      (cov_dntaudbg3().b[47][0]++, config.scaleDownThreshold) ||
      /* istanbul ignore next */
      (cov_dntaudbg3().b[47][1]++, 0.3)
    });
    /* istanbul ignore next */
    cov_dntaudbg3().s[139]++;
    this.pools.set(poolId, pool);
    // Create minimum agents
    /* istanbul ignore next */
    cov_dntaudbg3().s[140]++;
    for (let i =
    /* istanbul ignore next */
    (cov_dntaudbg3().s[141]++, 0); i < config.minSize; i++) {
      const agentId =
      /* istanbul ignore next */
      (cov_dntaudbg3().s[142]++, await this.createAgent(templateName, {
        name: `${name}-${i + 1}`
      }));
      /* istanbul ignore next */
      cov_dntaudbg3().s[143]++;
      await this.startAgent(agentId);
      /* istanbul ignore next */
      cov_dntaudbg3().s[144]++;
      pool.availableAgents.push({
        id: agentId,
        swarmId: 'default',
        type: template.type,
        instance: i + 1
      });
      /* istanbul ignore next */
      cov_dntaudbg3().s[145]++;
      pool.currentSize++;
    }
    /* istanbul ignore next */
    cov_dntaudbg3().s[146]++;
    this.logger.info('Created agent pool', {
      poolId,
      name,
      minSize: config.minSize
    });
    /* istanbul ignore next */
    cov_dntaudbg3().s[147]++;
    this.emit('pool:created', {
      pool
    });
    /* istanbul ignore next */
    cov_dntaudbg3().s[148]++;
    return poolId;
  }
  async scalePool(poolId, targetSize) {
    /* istanbul ignore next */
    cov_dntaudbg3().f[19]++;
    const pool =
    /* istanbul ignore next */
    (cov_dntaudbg3().s[149]++, this.pools.get(poolId));
    /* istanbul ignore next */
    cov_dntaudbg3().s[150]++;
    if (!pool) {
      /* istanbul ignore next */
      cov_dntaudbg3().b[48][0]++;
      cov_dntaudbg3().s[151]++;
      throw new Error(`Pool ${poolId} not found`);
    } else
    /* istanbul ignore next */
    {
      cov_dntaudbg3().b[48][1]++;
    }
    cov_dntaudbg3().s[152]++;
    if (
    /* istanbul ignore next */
    (cov_dntaudbg3().b[50][0]++, targetSize < pool.minSize) ||
    /* istanbul ignore next */
    (cov_dntaudbg3().b[50][1]++, targetSize > pool.maxSize)) {
      /* istanbul ignore next */
      cov_dntaudbg3().b[49][0]++;
      cov_dntaudbg3().s[153]++;
      throw new Error(`Target size ${targetSize} outside pool limits [${pool.minSize}, ${pool.maxSize}]`);
    } else
    /* istanbul ignore next */
    {
      cov_dntaudbg3().b[49][1]++;
    }
    const currentSize =
    /* istanbul ignore next */
    (cov_dntaudbg3().s[154]++, pool.currentSize);
    const delta =
    /* istanbul ignore next */
    (cov_dntaudbg3().s[155]++, targetSize - currentSize);
    /* istanbul ignore next */
    cov_dntaudbg3().s[156]++;
    if (delta > 0) {
      /* istanbul ignore next */
      cov_dntaudbg3().b[51][0]++;
      cov_dntaudbg3().s[157]++;
      // Scale up
      for (let i =
      /* istanbul ignore next */
      (cov_dntaudbg3().s[158]++, 0); i < delta; i++) {
        const agentId =
        /* istanbul ignore next */
        (cov_dntaudbg3().s[159]++, await this.createAgent(pool.template.name, {
          name: `${pool.name}-${currentSize + i + 1}`
        }));
        /* istanbul ignore next */
        cov_dntaudbg3().s[160]++;
        await this.startAgent(agentId);
        /* istanbul ignore next */
        cov_dntaudbg3().s[161]++;
        pool.availableAgents.push({
          id: agentId,
          swarmId: 'default',
          type: pool.type,
          instance: currentSize + i + 1
        });
      }
    } else {
      /* istanbul ignore next */
      cov_dntaudbg3().b[51][1]++;
      cov_dntaudbg3().s[162]++;
      if (delta < 0) {
        /* istanbul ignore next */
        cov_dntaudbg3().b[52][0]++;
        // Scale down
        const agentsToRemove =
        /* istanbul ignore next */
        (cov_dntaudbg3().s[163]++, pool.availableAgents.slice(0, Math.abs(delta)));
        /* istanbul ignore next */
        cov_dntaudbg3().s[164]++;
        for (const agentId of agentsToRemove) {
          /* istanbul ignore next */
          cov_dntaudbg3().s[165]++;
          await this.removeAgent(agentId.id);
          /* istanbul ignore next */
          cov_dntaudbg3().s[166]++;
          pool.availableAgents = pool.availableAgents.filter(a => {
            /* istanbul ignore next */
            cov_dntaudbg3().f[20]++;
            cov_dntaudbg3().s[167]++;
            return a.id !== agentId.id;
          });
        }
      } else
      /* istanbul ignore next */
      {
        cov_dntaudbg3().b[52][1]++;
      }
    }
    /* istanbul ignore next */
    cov_dntaudbg3().s[168]++;
    pool.currentSize = targetSize;
    /* istanbul ignore next */
    cov_dntaudbg3().s[169]++;
    this.logger.info('Scaled pool', {
      poolId,
      fromSize: currentSize,
      toSize: targetSize
    });
    /* istanbul ignore next */
    cov_dntaudbg3().s[170]++;
    this.emit('pool:scaled', {
      pool,
      fromSize: currentSize,
      toSize: targetSize
    });
  }
  // === HEALTH MONITORING ===
  startHealthMonitoring() {
    /* istanbul ignore next */
    cov_dntaudbg3().f[21]++;
    cov_dntaudbg3().s[171]++;
    this.healthInterval = setInterval(() => {
      /* istanbul ignore next */
      cov_dntaudbg3().f[22]++;
      cov_dntaudbg3().s[172]++;
      this.performHealthChecks();
    }, this.config.healthCheckInterval);
    /* istanbul ignore next */
    cov_dntaudbg3().s[173]++;
    this.logger.info('Started health monitoring', {
      interval: this.config.healthCheckInterval
    });
  }
  startHeartbeatMonitoring() {
    /* istanbul ignore next */
    cov_dntaudbg3().f[23]++;
    cov_dntaudbg3().s[174]++;
    this.heartbeatInterval = setInterval(() => {
      /* istanbul ignore next */
      cov_dntaudbg3().f[24]++;
      cov_dntaudbg3().s[175]++;
      this.checkHeartbeats();
    }, this.config.heartbeatInterval);
    /* istanbul ignore next */
    cov_dntaudbg3().s[176]++;
    this.logger.info('Started heartbeat monitoring', {
      interval: this.config.heartbeatInterval
    });
  }
  async performHealthChecks() {
    /* istanbul ignore next */
    cov_dntaudbg3().f[25]++;
    const healthPromises =
    /* istanbul ignore next */
    (cov_dntaudbg3().s[177]++, Array.from(this.agents.keys()).map(agentId => {
      /* istanbul ignore next */
      cov_dntaudbg3().f[26]++;
      cov_dntaudbg3().s[178]++;
      return this.checkAgentHealth(agentId);
    }));
    /* istanbul ignore next */
    cov_dntaudbg3().s[179]++;
    await Promise.allSettled(healthPromises);
  }
  async checkAgentHealth(agentId) {
    /* istanbul ignore next */
    cov_dntaudbg3().f[27]++;
    const agent =
    /* istanbul ignore next */
    (cov_dntaudbg3().s[180]++, this.agents.get(agentId));
    /* istanbul ignore next */
    cov_dntaudbg3().s[181]++;
    if (!agent) {
      /* istanbul ignore next */
      cov_dntaudbg3().b[53][0]++;
      cov_dntaudbg3().s[182]++;
      return;
    } else
    /* istanbul ignore next */
    {
      cov_dntaudbg3().b[53][1]++;
    }
    const health =
    /* istanbul ignore next */
    (cov_dntaudbg3().s[183]++, this.healthChecks.get(agentId));
    /* istanbul ignore next */
    cov_dntaudbg3().s[184]++;
    if (!health) {
      /* istanbul ignore next */
      cov_dntaudbg3().b[54][0]++;
      cov_dntaudbg3().s[185]++;
      return;
    } else
    /* istanbul ignore next */
    {
      cov_dntaudbg3().b[54][1]++;
    }
    const now =
    /* istanbul ignore next */
    (cov_dntaudbg3().s[186]++, new Date());
    /* istanbul ignore next */
    cov_dntaudbg3().s[187]++;
    try {
      // Check responsiveness
      const responsiveness =
      /* istanbul ignore next */
      (cov_dntaudbg3().s[188]++, await this.checkResponsiveness(agentId));
      /* istanbul ignore next */
      cov_dntaudbg3().s[189]++;
      health.components.responsiveness = responsiveness;
      // Check performance
      const performance =
      /* istanbul ignore next */
      (cov_dntaudbg3().s[190]++, this.calculatePerformanceScore(agentId));
      /* istanbul ignore next */
      cov_dntaudbg3().s[191]++;
      health.components.performance = performance;
      // Check reliability
      const reliability =
      /* istanbul ignore next */
      (cov_dntaudbg3().s[192]++, this.calculateReliabilityScore(agentId));
      /* istanbul ignore next */
      cov_dntaudbg3().s[193]++;
      health.components.reliability = reliability;
      // Check resource usage
      const resourceScore =
      /* istanbul ignore next */
      (cov_dntaudbg3().s[194]++, this.calculateResourceScore(agentId));
      /* istanbul ignore next */
      cov_dntaudbg3().s[195]++;
      health.components.resourceUsage = resourceScore;
      // Calculate overall health
      const overall =
      /* istanbul ignore next */
      (cov_dntaudbg3().s[196]++, (responsiveness + performance + reliability + resourceScore) / 4);
      /* istanbul ignore next */
      cov_dntaudbg3().s[197]++;
      health.overall = overall;
      /* istanbul ignore next */
      cov_dntaudbg3().s[198]++;
      health.lastCheck = now;
      // Update agent health
      /* istanbul ignore next */
      cov_dntaudbg3().s[199]++;
      agent.health = overall;
      // Check for issues
      /* istanbul ignore next */
      cov_dntaudbg3().s[200]++;
      this.detectHealthIssues(agentId, health);
      // Auto-restart if critically unhealthy
      /* istanbul ignore next */
      cov_dntaudbg3().s[201]++;
      if (
      /* istanbul ignore next */
      (cov_dntaudbg3().b[56][0]++, overall < 0.3) &&
      /* istanbul ignore next */
      (cov_dntaudbg3().b[56][1]++, this.config.autoRestart)) {
        /* istanbul ignore next */
        cov_dntaudbg3().b[55][0]++;
        cov_dntaudbg3().s[202]++;
        this.logger.warn('Agent critically unhealthy, restarting', {
          agentId,
          health: overall
        });
        /* istanbul ignore next */
        cov_dntaudbg3().s[203]++;
        await this.restartAgent(agentId, 'health_critical');
      } else
      /* istanbul ignore next */
      {
        cov_dntaudbg3().b[55][1]++;
      }
    } catch (error) {
      /* istanbul ignore next */
      cov_dntaudbg3().s[204]++;
      this.logger.error('Health check failed', {
        agentId,
        error
      });
      /* istanbul ignore next */
      cov_dntaudbg3().s[205]++;
      health.overall = 0;
      /* istanbul ignore next */
      cov_dntaudbg3().s[206]++;
      health.lastCheck = now;
    }
  }
  async checkResponsiveness(agentId) {
    /* istanbul ignore next */
    cov_dntaudbg3().f[28]++;
    cov_dntaudbg3().s[207]++;
    // Send ping and measure response time
    try {
      // This would send an actual ping to the agent
      // For now, simulate based on last heartbeat
      const agent =
      /* istanbul ignore next */
      (cov_dntaudbg3().s[208]++, this.agents.get(agentId));
      /* istanbul ignore next */
      cov_dntaudbg3().s[209]++;
      if (!agent) {
        /* istanbul ignore next */
        cov_dntaudbg3().b[57][0]++;
        cov_dntaudbg3().s[210]++;
        return 0;
      } else
      /* istanbul ignore next */
      {
        cov_dntaudbg3().b[57][1]++;
      }
      const timeSinceHeartbeat =
      /* istanbul ignore next */
      (cov_dntaudbg3().s[211]++, Date.now() - agent.lastHeartbeat.getTime());
      /* istanbul ignore next */
      cov_dntaudbg3().s[212]++;
      if (timeSinceHeartbeat > this.config.heartbeatInterval * 3) {
        /* istanbul ignore next */
        cov_dntaudbg3().b[58][0]++;
        cov_dntaudbg3().s[213]++;
        return 0; // Unresponsive
      } else {
        /* istanbul ignore next */
        cov_dntaudbg3().b[58][1]++;
        cov_dntaudbg3().s[214]++;
        if (timeSinceHeartbeat > this.config.heartbeatInterval * 2) {
          /* istanbul ignore next */
          cov_dntaudbg3().b[59][0]++;
          cov_dntaudbg3().s[215]++;
          return 0.5; // Slow
        } else {
          /* istanbul ignore next */
          cov_dntaudbg3().b[59][1]++;
          cov_dntaudbg3().s[216]++;
          return 1.0; // Responsive
        }
      }
    } catch (error) {
      /* istanbul ignore next */
      cov_dntaudbg3().s[217]++;
      return 0; // Failed to respond
    }
  }
  calculatePerformanceScore(agentId) {
    /* istanbul ignore next */
    cov_dntaudbg3().f[29]++;
    const history =
    /* istanbul ignore next */
    (cov_dntaudbg3().s[218]++,
    /* istanbul ignore next */
    (cov_dntaudbg3().b[60][0]++, this.performanceHistory.get(agentId)) ||
    /* istanbul ignore next */
    (cov_dntaudbg3().b[60][1]++, []));
    /* istanbul ignore next */
    cov_dntaudbg3().s[219]++;
    if (history.length === 0) {
      /* istanbul ignore next */
      cov_dntaudbg3().b[61][0]++;
      cov_dntaudbg3().s[220]++;
      return 1.0;
    } else
    /* istanbul ignore next */
    {
      cov_dntaudbg3().b[61][1]++;
    }
    // Calculate average task completion time vs expected
    const recent =
    /* istanbul ignore next */
    (cov_dntaudbg3().s[221]++, history.slice(-10)); // Last 10 entries
    const avgTime =
    /* istanbul ignore next */
    (cov_dntaudbg3().s[222]++, recent.reduce((sum, entry) => {
      /* istanbul ignore next */
      cov_dntaudbg3().f[30]++;
      cov_dntaudbg3().s[223]++;
      return sum + entry.metrics.averageExecutionTime;
    }, 0) / recent.length);
    // Normalize based on expected performance (simplified)
    const expectedTime =
    /* istanbul ignore next */
    (cov_dntaudbg3().s[224]++, 60000); // 1 minute baseline
    /* istanbul ignore next */
    cov_dntaudbg3().s[225]++;
    return Math.max(0, Math.min(1, expectedTime / avgTime));
  }
  calculateReliabilityScore(agentId) {
    /* istanbul ignore next */
    cov_dntaudbg3().f[31]++;
    const agent =
    /* istanbul ignore next */
    (cov_dntaudbg3().s[226]++, this.agents.get(agentId));
    /* istanbul ignore next */
    cov_dntaudbg3().s[227]++;
    if (!agent) {
      /* istanbul ignore next */
      cov_dntaudbg3().b[62][0]++;
      cov_dntaudbg3().s[228]++;
      return 0;
    } else
    /* istanbul ignore next */
    {
      cov_dntaudbg3().b[62][1]++;
    }
    const totalTasks =
    /* istanbul ignore next */
    (cov_dntaudbg3().s[229]++, agent.metrics.tasksCompleted + agent.metrics.tasksFailed);
    /* istanbul ignore next */
    cov_dntaudbg3().s[230]++;
    if (totalTasks === 0) {
      /* istanbul ignore next */
      cov_dntaudbg3().b[63][0]++;
      cov_dntaudbg3().s[231]++;
      return 1.0;
    } else
    /* istanbul ignore next */
    {
      cov_dntaudbg3().b[63][1]++;
    }
    cov_dntaudbg3().s[232]++;
    return agent.metrics.tasksCompleted / totalTasks;
  }
  calculateResourceScore(agentId) {
    /* istanbul ignore next */
    cov_dntaudbg3().f[32]++;
    const usage =
    /* istanbul ignore next */
    (cov_dntaudbg3().s[233]++, this.resourceUsage.get(agentId));
    /* istanbul ignore next */
    cov_dntaudbg3().s[234]++;
    if (!usage) {
      /* istanbul ignore next */
      cov_dntaudbg3().b[64][0]++;
      cov_dntaudbg3().s[235]++;
      return 1.0;
    } else
    /* istanbul ignore next */
    {
      cov_dntaudbg3().b[64][1]++;
    }
    const limits =
    /* istanbul ignore next */
    (cov_dntaudbg3().s[236]++, this.config.resourceLimits);
    const memoryScore =
    /* istanbul ignore next */
    (cov_dntaudbg3().s[237]++, 1 - usage.memory / limits.memory);
    const cpuScore =
    /* istanbul ignore next */
    (cov_dntaudbg3().s[238]++, 1 - usage.cpu / limits.cpu);
    const diskScore =
    /* istanbul ignore next */
    (cov_dntaudbg3().s[239]++, 1 - usage.disk / limits.disk);
    /* istanbul ignore next */
    cov_dntaudbg3().s[240]++;
    return Math.max(0, (memoryScore + cpuScore + diskScore) / 3);
  }
  detectHealthIssues(agentId, health) {
    /* istanbul ignore next */
    cov_dntaudbg3().f[33]++;
    const issues =
    /* istanbul ignore next */
    (cov_dntaudbg3().s[241]++, []);
    /* istanbul ignore next */
    cov_dntaudbg3().s[242]++;
    if (health.components.responsiveness < 0.5) {
      /* istanbul ignore next */
      cov_dntaudbg3().b[65][0]++;
      cov_dntaudbg3().s[243]++;
      issues.push({
        type: 'communication',
        severity: health.components.responsiveness < 0.2 ?
        /* istanbul ignore next */
        (cov_dntaudbg3().b[66][0]++, 'critical') :
        /* istanbul ignore next */
        (cov_dntaudbg3().b[66][1]++, 'high'),
        message: 'Agent is not responding to heartbeats',
        timestamp: new Date(),
        resolved: false,
        recommendedAction: 'Restart agent or check network connectivity'
      });
    } else
    /* istanbul ignore next */
    {
      cov_dntaudbg3().b[65][1]++;
    }
    cov_dntaudbg3().s[244]++;
    if (health.components.performance < 0.6) {
      /* istanbul ignore next */
      cov_dntaudbg3().b[67][0]++;
      cov_dntaudbg3().s[245]++;
      issues.push({
        type: 'performance',
        severity: health.components.performance < 0.3 ?
        /* istanbul ignore next */
        (cov_dntaudbg3().b[68][0]++, 'high') :
        /* istanbul ignore next */
        (cov_dntaudbg3().b[68][1]++, 'medium'),
        message: 'Agent performance is below expected levels',
        timestamp: new Date(),
        resolved: false,
        recommendedAction: 'Check resource allocation or agent configuration'
      });
    } else
    /* istanbul ignore next */
    {
      cov_dntaudbg3().b[67][1]++;
    }
    cov_dntaudbg3().s[246]++;
    if (health.components.resourceUsage < 0.4) {
      /* istanbul ignore next */
      cov_dntaudbg3().b[69][0]++;
      cov_dntaudbg3().s[247]++;
      issues.push({
        type: 'resource',
        severity: health.components.resourceUsage < 0.2 ?
        /* istanbul ignore next */
        (cov_dntaudbg3().b[70][0]++, 'critical') :
        /* istanbul ignore next */
        (cov_dntaudbg3().b[70][1]++, 'high'),
        message: 'Agent resource usage is critically high',
        timestamp: new Date(),
        resolved: false,
        recommendedAction: 'Increase resource limits or reduce workload'
      });
    } else
    /* istanbul ignore next */
    {
      cov_dntaudbg3().b[69][1]++;
    }
    cov_dntaudbg3().s[248]++;
    health.issues = issues;
  }
  checkHeartbeats() {
    /* istanbul ignore next */
    cov_dntaudbg3().f[34]++;
    const now =
    /* istanbul ignore next */
    (cov_dntaudbg3().s[249]++, Date.now());
    const timeout =
    /* istanbul ignore next */
    (cov_dntaudbg3().s[250]++, this.config.heartbeatInterval * 3);
    /* istanbul ignore next */
    cov_dntaudbg3().s[251]++;
    for (const [agentId, agent] of Array.from(this.agents.entries())) {
      const timeSinceHeartbeat =
      /* istanbul ignore next */
      (cov_dntaudbg3().s[252]++, now - agent.lastHeartbeat.getTime());
      /* istanbul ignore next */
      cov_dntaudbg3().s[253]++;
      if (
      /* istanbul ignore next */
      (cov_dntaudbg3().b[72][0]++, timeSinceHeartbeat > timeout) &&
      /* istanbul ignore next */
      (cov_dntaudbg3().b[72][1]++, agent.status !== 'offline') &&
      /* istanbul ignore next */
      (cov_dntaudbg3().b[72][2]++, agent.status !== 'terminated')) {
        /* istanbul ignore next */
        cov_dntaudbg3().b[71][0]++;
        cov_dntaudbg3().s[254]++;
        this.logger.warn('Agent heartbeat timeout', {
          agentId,
          timeSinceHeartbeat
        });
        /* istanbul ignore next */
        cov_dntaudbg3().s[255]++;
        agent.status = 'error';
        /* istanbul ignore next */
        cov_dntaudbg3().s[256]++;
        this.addAgentError(agentId, {
          timestamp: new Date(),
          type: 'heartbeat_timeout',
          message: 'Agent failed to send heartbeat within timeout period',
          context: {
            timeout,
            timeSinceHeartbeat
          },
          severity: 'high',
          resolved: false
        });
        /* istanbul ignore next */
        cov_dntaudbg3().s[257]++;
        this.emit('agent:heartbeat-timeout', {
          agentId,
          timeSinceHeartbeat
        });
        // Auto-restart if enabled
        /* istanbul ignore next */
        cov_dntaudbg3().s[258]++;
        if (this.config.autoRestart) {
          /* istanbul ignore next */
          cov_dntaudbg3().b[73][0]++;
          cov_dntaudbg3().s[259]++;
          this.restartAgent(agentId, 'heartbeat_timeout').catch(error => {
            /* istanbul ignore next */
            cov_dntaudbg3().f[35]++;
            cov_dntaudbg3().s[260]++;
            this.logger.error('Failed to auto-restart agent', {
              agentId,
              error
            });
          });
        } else
        /* istanbul ignore next */
        {
          cov_dntaudbg3().b[73][1]++;
        }
      } else
      /* istanbul ignore next */
      {
        cov_dntaudbg3().b[71][1]++;
      }
    }
  }
  // === UTILITY METHODS ===
  async spawnAgentProcess(agent) {
    /* istanbul ignore next */
    cov_dntaudbg3().f[36]++;
    const env =
    /* istanbul ignore next */
    (cov_dntaudbg3().s[261]++, {
      ...process.env,
      AGENT_ID: agent.id.id,
      AGENT_TYPE: agent.type,
      AGENT_NAME: agent.name,
      WORKING_DIR: agent.environment.workingDirectory,
      LOG_DIR: agent.environment.logDirectory
    });
    const args =
    /* istanbul ignore next */
    (cov_dntaudbg3().s[262]++, ['run', '--allow-all',
    /* istanbul ignore next */
    (cov_dntaudbg3().b[74][0]++, agent.environment.availableTools[0]) ||
    /* istanbul ignore next */
    (cov_dntaudbg3().b[74][1]++, './agents/generic-agent.ts'), '--config', JSON.stringify(agent.config)]);
    const childProcess =
    /* istanbul ignore next */
    (cov_dntaudbg3().s[263]++, spawn(agent.environment.runtime, args, {
      env,
      stdio: ['pipe', 'pipe', 'pipe'],
      cwd: agent.environment.workingDirectory
    }));
    // Handle process events
    /* istanbul ignore next */
    cov_dntaudbg3().s[264]++;
    childProcess.on('exit', code => {
      /* istanbul ignore next */
      cov_dntaudbg3().f[37]++;
      cov_dntaudbg3().s[265]++;
      this.handleProcessExit(agent.id.id, code);
    });
    /* istanbul ignore next */
    cov_dntaudbg3().s[266]++;
    childProcess.on('error', error => {
      /* istanbul ignore next */
      cov_dntaudbg3().f[38]++;
      cov_dntaudbg3().s[267]++;
      this.handleProcessError(agent.id.id, error);
    });
    /* istanbul ignore next */
    cov_dntaudbg3().s[268]++;
    return childProcess;
  }
  async waitForAgentReady(agentId, timeout) {
    /* istanbul ignore next */
    cov_dntaudbg3().f[39]++;
    cov_dntaudbg3().s[269]++;
    return new Promise((resolve, reject) => {
      /* istanbul ignore next */
      cov_dntaudbg3().f[40]++;
      const timer =
      /* istanbul ignore next */
      (cov_dntaudbg3().s[270]++, setTimeout(() => {
        /* istanbul ignore next */
        cov_dntaudbg3().f[41]++;
        cov_dntaudbg3().s[271]++;
        reject(new Error(`Agent ${agentId} startup timeout`));
      }, timeout));
      /* istanbul ignore next */
      cov_dntaudbg3().s[272]++;
      const handler = data => {
        /* istanbul ignore next */
        cov_dntaudbg3().f[42]++;
        const readyData =
        /* istanbul ignore next */
        (cov_dntaudbg3().s[273]++, data);
        /* istanbul ignore next */
        cov_dntaudbg3().s[274]++;
        if (readyData.agentId === agentId) {
          /* istanbul ignore next */
          cov_dntaudbg3().b[75][0]++;
          cov_dntaudbg3().s[275]++;
          clearTimeout(timer);
          /* istanbul ignore next */
          cov_dntaudbg3().s[276]++;
          this.eventBus.off('agent:ready', handler);
          /* istanbul ignore next */
          cov_dntaudbg3().s[277]++;
          resolve();
        } else
        /* istanbul ignore next */
        {
          cov_dntaudbg3().b[75][1]++;
        }
      };
      /* istanbul ignore next */
      cov_dntaudbg3().s[278]++;
      this.eventBus.on('agent:ready', handler);
    });
  }
  async waitForProcessExit(agentId, timeout) {
    /* istanbul ignore next */
    cov_dntaudbg3().f[43]++;
    cov_dntaudbg3().s[279]++;
    return new Promise(resolve => {
      /* istanbul ignore next */
      cov_dntaudbg3().f[44]++;
      const process =
      /* istanbul ignore next */
      (cov_dntaudbg3().s[280]++, this.processes.get(agentId));
      /* istanbul ignore next */
      cov_dntaudbg3().s[281]++;
      if (
      /* istanbul ignore next */
      (cov_dntaudbg3().b[77][0]++, !process) ||
      /* istanbul ignore next */
      (cov_dntaudbg3().b[77][1]++, process.killed)) {
        /* istanbul ignore next */
        cov_dntaudbg3().b[76][0]++;
        cov_dntaudbg3().s[282]++;
        resolve();
        /* istanbul ignore next */
        cov_dntaudbg3().s[283]++;
        return;
      } else
      /* istanbul ignore next */
      {
        cov_dntaudbg3().b[76][1]++;
      }
      const timer =
      /* istanbul ignore next */
      (cov_dntaudbg3().s[284]++, setTimeout(() => {
        /* istanbul ignore next */
        cov_dntaudbg3().f[45]++;
        cov_dntaudbg3().s[285]++;
        resolve(); // Timeout, continue anyway
      }, timeout));
      /* istanbul ignore next */
      cov_dntaudbg3().s[286]++;
      process.on('exit', () => {
        /* istanbul ignore next */
        cov_dntaudbg3().f[46]++;
        cov_dntaudbg3().s[287]++;
        clearTimeout(timer);
        /* istanbul ignore next */
        cov_dntaudbg3().s[288]++;
        resolve();
      });
    });
  }
  handleProcessExit(agentId, code) {
    /* istanbul ignore next */
    cov_dntaudbg3().f[47]++;
    const agent =
    /* istanbul ignore next */
    (cov_dntaudbg3().s[289]++, this.agents.get(agentId));
    /* istanbul ignore next */
    cov_dntaudbg3().s[290]++;
    if (!agent) {
      /* istanbul ignore next */
      cov_dntaudbg3().b[78][0]++;
      cov_dntaudbg3().s[291]++;
      return;
    } else
    /* istanbul ignore next */
    {
      cov_dntaudbg3().b[78][1]++;
    }
    cov_dntaudbg3().s[292]++;
    this.logger.info('Agent process exited', {
      agentId,
      exitCode: code
    });
    /* istanbul ignore next */
    cov_dntaudbg3().s[293]++;
    if (
    /* istanbul ignore next */
    (cov_dntaudbg3().b[80][0]++, code !== 0) &&
    /* istanbul ignore next */
    (cov_dntaudbg3().b[80][1]++, code !== null)) {
      /* istanbul ignore next */
      cov_dntaudbg3().b[79][0]++;
      cov_dntaudbg3().s[294]++;
      this.addAgentError(agentId, {
        timestamp: new Date(),
        type: 'process_exit',
        message: `Agent process exited with code ${code}`,
        context: {
          exitCode: code
        },
        severity: 'high',
        resolved: false
      });
    } else
    /* istanbul ignore next */
    {
      cov_dntaudbg3().b[79][1]++;
    }
    cov_dntaudbg3().s[295]++;
    agent.status = 'offline';
    /* istanbul ignore next */
    cov_dntaudbg3().s[296]++;
    this.emit('agent:process-exit', {
      agentId,
      exitCode: code
    });
  }
  handleProcessError(agentId, error) {
    /* istanbul ignore next */
    cov_dntaudbg3().f[48]++;
    cov_dntaudbg3().s[297]++;
    this.logger.error('Agent process error', {
      agentId,
      error
    });
    /* istanbul ignore next */
    cov_dntaudbg3().s[298]++;
    this.addAgentError(agentId, {
      timestamp: new Date(),
      type: 'process_error',
      message: error instanceof Error ?
      /* istanbul ignore next */
      (cov_dntaudbg3().b[81][0]++, error.message) :
      /* istanbul ignore next */
      (cov_dntaudbg3().b[81][1]++, String(error)),
      context: {
        error: error.toString()
      },
      severity: 'critical',
      resolved: false
    });
    /* istanbul ignore next */
    cov_dntaudbg3().s[299]++;
    this.emit('agent:process-error', {
      agentId,
      error
    });
  }
  handleHeartbeat(data) {
    /* istanbul ignore next */
    cov_dntaudbg3().f[49]++;
    const agent =
    /* istanbul ignore next */
    (cov_dntaudbg3().s[300]++, this.agents.get(data.agentId));
    /* istanbul ignore next */
    cov_dntaudbg3().s[301]++;
    if (!agent) {
      /* istanbul ignore next */
      cov_dntaudbg3().b[82][0]++;
      cov_dntaudbg3().s[302]++;
      return;
    } else
    /* istanbul ignore next */
    {
      cov_dntaudbg3().b[82][1]++;
    }
    cov_dntaudbg3().s[303]++;
    agent.lastHeartbeat = data.timestamp;
    /* istanbul ignore next */
    cov_dntaudbg3().s[304]++;
    if (data.metrics) {
      /* istanbul ignore next */
      cov_dntaudbg3().b[83][0]++;
      cov_dntaudbg3().s[305]++;
      this.updateAgentMetrics(data.agentId, data.metrics);
    } else
    /* istanbul ignore next */
    {
      cov_dntaudbg3().b[83][1]++;
    }
    // Update health if agent was previously unresponsive
    cov_dntaudbg3().s[306]++;
    if (agent.status === 'error') {
      /* istanbul ignore next */
      cov_dntaudbg3().b[84][0]++;
      cov_dntaudbg3().s[307]++;
      agent.status = 'idle';
      /* istanbul ignore next */
      cov_dntaudbg3().s[308]++;
      this.updateAgentStatus(data.agentId, 'idle');
    } else
    /* istanbul ignore next */
    {
      cov_dntaudbg3().b[84][1]++;
    }
  }
  handleAgentError(data) {
    /* istanbul ignore next */
    cov_dntaudbg3().f[50]++;
    cov_dntaudbg3().s[309]++;
    this.addAgentError(data.agentId, data.error);
    const agent =
    /* istanbul ignore next */
    (cov_dntaudbg3().s[310]++, this.agents.get(data.agentId));
    /* istanbul ignore next */
    cov_dntaudbg3().s[311]++;
    if (
    /* istanbul ignore next */
    (cov_dntaudbg3().b[86][0]++, agent) &&
    /* istanbul ignore next */
    (cov_dntaudbg3().b[86][1]++, data.error.severity === 'critical')) {
      /* istanbul ignore next */
      cov_dntaudbg3().b[85][0]++;
      cov_dntaudbg3().s[312]++;
      agent.status = 'error';
      /* istanbul ignore next */
      cov_dntaudbg3().s[313]++;
      this.updateAgentStatus(data.agentId, 'error');
    } else
    /* istanbul ignore next */
    {
      cov_dntaudbg3().b[85][1]++;
    }
  }
  updateAgentStatus(agentId, status) {
    /* istanbul ignore next */
    cov_dntaudbg3().f[51]++;
    const agent =
    /* istanbul ignore next */
    (cov_dntaudbg3().s[314]++, this.agents.get(agentId));
    /* istanbul ignore next */
    cov_dntaudbg3().s[315]++;
    if (!agent) {
      /* istanbul ignore next */
      cov_dntaudbg3().b[87][0]++;
      cov_dntaudbg3().s[316]++;
      return;
    } else
    /* istanbul ignore next */
    {
      cov_dntaudbg3().b[87][1]++;
    }
    const oldStatus =
    /* istanbul ignore next */
    (cov_dntaudbg3().s[317]++, agent.status);
    /* istanbul ignore next */
    cov_dntaudbg3().s[318]++;
    agent.status = status;
    /* istanbul ignore next */
    cov_dntaudbg3().s[319]++;
    this.emit('agent:status-changed', {
      agentId,
      from: oldStatus,
      to: status
    });
  }
  updateAgentWorkload(agentId, delta) {
    /* istanbul ignore next */
    cov_dntaudbg3().f[52]++;
    const agent =
    /* istanbul ignore next */
    (cov_dntaudbg3().s[320]++, this.agents.get(agentId));
    /* istanbul ignore next */
    cov_dntaudbg3().s[321]++;
    if (!agent) {
      /* istanbul ignore next */
      cov_dntaudbg3().b[88][0]++;
      cov_dntaudbg3().s[322]++;
      return;
    } else
    /* istanbul ignore next */
    {
      cov_dntaudbg3().b[88][1]++;
    }
    cov_dntaudbg3().s[323]++;
    agent.workload = Math.max(0, agent.workload + delta);
  }
  updateAgentMetrics(agentId, metrics) {
    /* istanbul ignore next */
    cov_dntaudbg3().f[53]++;
    const agent =
    /* istanbul ignore next */
    (cov_dntaudbg3().s[324]++, this.agents.get(agentId));
    /* istanbul ignore next */
    cov_dntaudbg3().s[325]++;
    if (!agent) {
      /* istanbul ignore next */
      cov_dntaudbg3().b[89][0]++;
      cov_dntaudbg3().s[326]++;
      return;
    } else
    /* istanbul ignore next */
    {
      cov_dntaudbg3().b[89][1]++;
    }
    cov_dntaudbg3().s[327]++;
    agent.metrics = {
      ...agent.metrics,
      ...metrics
    };
    // Store performance history
    const history =
    /* istanbul ignore next */
    (cov_dntaudbg3().s[328]++,
    /* istanbul ignore next */
    (cov_dntaudbg3().b[90][0]++, this.performanceHistory.get(agentId)) ||
    /* istanbul ignore next */
    (cov_dntaudbg3().b[90][1]++, []));
    /* istanbul ignore next */
    cov_dntaudbg3().s[329]++;
    history.push({
      timestamp: new Date(),
      metrics: {
        ...metrics
      }
    });
    // Keep only last 100 entries
    /* istanbul ignore next */
    cov_dntaudbg3().s[330]++;
    if (history.length > 100) {
      /* istanbul ignore next */
      cov_dntaudbg3().b[91][0]++;
      cov_dntaudbg3().s[331]++;
      history.shift();
    } else
    /* istanbul ignore next */
    {
      cov_dntaudbg3().b[91][1]++;
    }
    cov_dntaudbg3().s[332]++;
    this.performanceHistory.set(agentId, history);
  }
  updateResourceUsage(agentId, usage) {
    /* istanbul ignore next */
    cov_dntaudbg3().f[54]++;
    cov_dntaudbg3().s[333]++;
    this.resourceUsage.set(agentId, usage);
  }
  addAgentError(agentId, error) {
    /* istanbul ignore next */
    cov_dntaudbg3().f[55]++;
    const agent =
    /* istanbul ignore next */
    (cov_dntaudbg3().s[334]++, this.agents.get(agentId));
    /* istanbul ignore next */
    cov_dntaudbg3().s[335]++;
    if (!agent) {
      /* istanbul ignore next */
      cov_dntaudbg3().b[92][0]++;
      cov_dntaudbg3().s[336]++;
      return;
    } else
    /* istanbul ignore next */
    {
      cov_dntaudbg3().b[92][1]++;
    }
    cov_dntaudbg3().s[337]++;
    agent.errorHistory.push(error);
    // Keep only last 50 errors
    /* istanbul ignore next */
    cov_dntaudbg3().s[338]++;
    if (agent.errorHistory.length > 50) {
      /* istanbul ignore next */
      cov_dntaudbg3().b[93][0]++;
      cov_dntaudbg3().s[339]++;
      agent.errorHistory.shift();
    } else
    /* istanbul ignore next */
    {
      cov_dntaudbg3().b[93][1]++;
    }
  }
  createDefaultMetrics() {
    /* istanbul ignore next */
    cov_dntaudbg3().f[56]++;
    cov_dntaudbg3().s[340]++;
    return {
      tasksCompleted: 0,
      tasksFailed: 0,
      averageExecutionTime: 0,
      successRate: 1.0,
      cpuUsage: 0,
      memoryUsage: 0,
      diskUsage: 0,
      networkUsage: 0,
      codeQuality: 0.8,
      testCoverage: 0,
      bugRate: 0,
      userSatisfaction: 0.8,
      totalUptime: 0,
      lastActivity: new Date(),
      responseTime: 0
    };
  }
  createDefaultHealth(agentId) {
    /* istanbul ignore next */
    cov_dntaudbg3().f[57]++;
    cov_dntaudbg3().s[341]++;
    return {
      agentId,
      overall: 1.0,
      components: {
        responsiveness: 1.0,
        performance: 1.0,
        reliability: 1.0,
        resourceUsage: 1.0
      },
      issues: [],
      lastCheck: new Date(),
      trend: 'stable'
    };
  }
  removeAgentFromPoolsAndClusters(agentId) {
    /* istanbul ignore next */
    cov_dntaudbg3().f[58]++;
    cov_dntaudbg3().s[342]++;
    // Remove from pools
    for (const pool of Array.from(this.pools.values())) {
      /* istanbul ignore next */
      cov_dntaudbg3().s[343]++;
      pool.availableAgents = pool.availableAgents.filter(a => {
        /* istanbul ignore next */
        cov_dntaudbg3().f[59]++;
        cov_dntaudbg3().s[344]++;
        return a.id !== agentId;
      });
      /* istanbul ignore next */
      cov_dntaudbg3().s[345]++;
      pool.busyAgents = pool.busyAgents.filter(a => {
        /* istanbul ignore next */
        cov_dntaudbg3().f[60]++;
        cov_dntaudbg3().s[346]++;
        return a.id !== agentId;
      });
      /* istanbul ignore next */
      cov_dntaudbg3().s[347]++;
      pool.currentSize = pool.availableAgents.length + pool.busyAgents.length;
    }
    // Remove from clusters
    /* istanbul ignore next */
    cov_dntaudbg3().s[348]++;
    for (const cluster of Array.from(this.clusters.values())) {
      /* istanbul ignore next */
      cov_dntaudbg3().s[349]++;
      cluster.agents = cluster.agents.filter(a => {
        /* istanbul ignore next */
        cov_dntaudbg3().f[61]++;
        cov_dntaudbg3().s[350]++;
        return a.id !== agentId;
      });
    }
  }
  initializeScalingPolicies() {
    /* istanbul ignore next */
    cov_dntaudbg3().f[62]++;
    // Default auto-scaling policy
    const defaultPolicy =
    /* istanbul ignore next */
    (cov_dntaudbg3().s[351]++, {
      name: 'default-autoscale',
      enabled: true,
      cooldownPeriod: 300000,
      // 5 minutes
      maxScaleOperations: 10,
      rules: [{
        metric: 'pool-utilization',
        threshold: 0.8,
        comparison: 'gt',
        action: 'scale-up',
        amount: 1
      }, {
        metric: 'pool-utilization',
        threshold: 0.3,
        comparison: 'lt',
        action: 'scale-down',
        amount: 1
      }]
    });
    /* istanbul ignore next */
    cov_dntaudbg3().s[352]++;
    this.scalingPolicies.set('default', defaultPolicy);
  }
  // === PUBLIC API ===
  getAgent(agentId) {
    /* istanbul ignore next */
    cov_dntaudbg3().f[63]++;
    cov_dntaudbg3().s[353]++;
    return this.agents.get(agentId);
  }
  getAllAgents() {
    /* istanbul ignore next */
    cov_dntaudbg3().f[64]++;
    cov_dntaudbg3().s[354]++;
    return Array.from(this.agents.values());
  }
  getAgentsByType(type) {
    /* istanbul ignore next */
    cov_dntaudbg3().f[65]++;
    cov_dntaudbg3().s[355]++;
    return Array.from(this.agents.values()).filter(agent => {
      /* istanbul ignore next */
      cov_dntaudbg3().f[66]++;
      cov_dntaudbg3().s[356]++;
      return agent.type === type;
    });
  }
  getAgentsByStatus(status) {
    /* istanbul ignore next */
    cov_dntaudbg3().f[67]++;
    cov_dntaudbg3().s[357]++;
    return Array.from(this.agents.values()).filter(agent => {
      /* istanbul ignore next */
      cov_dntaudbg3().f[68]++;
      cov_dntaudbg3().s[358]++;
      return agent.status === status;
    });
  }
  getAgentHealth(agentId) {
    /* istanbul ignore next */
    cov_dntaudbg3().f[69]++;
    cov_dntaudbg3().s[359]++;
    return this.healthChecks.get(agentId);
  }
  getPool(poolId) {
    /* istanbul ignore next */
    cov_dntaudbg3().f[70]++;
    cov_dntaudbg3().s[360]++;
    return this.pools.get(poolId);
  }
  getAllPools() {
    /* istanbul ignore next */
    cov_dntaudbg3().f[71]++;
    cov_dntaudbg3().s[361]++;
    return Array.from(this.pools.values());
  }
  getAgentTemplates() {
    /* istanbul ignore next */
    cov_dntaudbg3().f[72]++;
    cov_dntaudbg3().s[362]++;
    return Array.from(this.templates.values());
  }
  getSystemStats() {
    /* istanbul ignore next */
    cov_dntaudbg3().f[73]++;
    const agents =
    /* istanbul ignore next */
    (cov_dntaudbg3().s[363]++, Array.from(this.agents.values()));
    const healthChecks =
    /* istanbul ignore next */
    (cov_dntaudbg3().s[364]++, Array.from(this.healthChecks.values()));
    const healthyAgents =
    /* istanbul ignore next */
    (cov_dntaudbg3().s[365]++, healthChecks.filter(h => {
      /* istanbul ignore next */
      cov_dntaudbg3().f[74]++;
      cov_dntaudbg3().s[366]++;
      return h.overall > 0.7;
    }).length);
    const averageHealth =
    /* istanbul ignore next */
    (cov_dntaudbg3().s[367]++,
    /* istanbul ignore next */
    (cov_dntaudbg3().b[94][0]++, healthChecks.reduce((sum, h) => {
      /* istanbul ignore next */
      cov_dntaudbg3().f[75]++;
      cov_dntaudbg3().s[368]++;
      return sum + h.overall;
    }, 0) / healthChecks.length) ||
    /* istanbul ignore next */
    (cov_dntaudbg3().b[94][1]++, 1));
    const resourceUsages =
    /* istanbul ignore next */
    (cov_dntaudbg3().s[369]++, Array.from(this.resourceUsage.values()));
    const avgCpu =
    /* istanbul ignore next */
    (cov_dntaudbg3().s[370]++,
    /* istanbul ignore next */
    (cov_dntaudbg3().b[95][0]++, resourceUsages.reduce((sum, r) => {
      /* istanbul ignore next */
      cov_dntaudbg3().f[76]++;
      cov_dntaudbg3().s[371]++;
      return sum + r.cpu;
    }, 0) / resourceUsages.length) ||
    /* istanbul ignore next */
    (cov_dntaudbg3().b[95][1]++, 0));
    const avgMemory =
    /* istanbul ignore next */
    (cov_dntaudbg3().s[372]++,
    /* istanbul ignore next */
    (cov_dntaudbg3().b[96][0]++, resourceUsages.reduce((sum, r) => {
      /* istanbul ignore next */
      cov_dntaudbg3().f[77]++;
      cov_dntaudbg3().s[373]++;
      return sum + r.memory;
    }, 0) / resourceUsages.length) ||
    /* istanbul ignore next */
    (cov_dntaudbg3().b[96][1]++, 0));
    const avgDisk =
    /* istanbul ignore next */
    (cov_dntaudbg3().s[374]++,
    /* istanbul ignore next */
    (cov_dntaudbg3().b[97][0]++, resourceUsages.reduce((sum, r) => {
      /* istanbul ignore next */
      cov_dntaudbg3().f[78]++;
      cov_dntaudbg3().s[375]++;
      return sum + r.disk;
    }, 0) / resourceUsages.length) ||
    /* istanbul ignore next */
    (cov_dntaudbg3().b[97][1]++, 0));
    /* istanbul ignore next */
    cov_dntaudbg3().s[376]++;
    return {
      totalAgents: agents.length,
      activeAgents: agents.filter(a => {
        /* istanbul ignore next */
        cov_dntaudbg3().f[79]++;
        cov_dntaudbg3().s[377]++;
        return /* istanbul ignore next */(cov_dntaudbg3().b[98][0]++, a.status === 'idle') ||
        /* istanbul ignore next */
        (cov_dntaudbg3().b[98][1]++, a.status === 'busy');
      }).length,
      healthyAgents,
      pools: this.pools.size,
      clusters: this.clusters.size,
      averageHealth,
      resourceUtilization: {
        cpu: avgCpu,
        memory: avgMemory,
        disk: avgDisk
      }
    };
  }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,