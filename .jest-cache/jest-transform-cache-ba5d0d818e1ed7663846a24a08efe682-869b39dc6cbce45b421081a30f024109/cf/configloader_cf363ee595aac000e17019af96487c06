7f1014364db61896f40d5d6edd735b8c
/* istanbul ignore next */
function cov_1thfd9zgyy() {
  var path = "/home/mhugo/code/claude-code-flow/src/cli/core/config-loader.ts";
  var hash = "9385c3b47e696fdaa4d39df31b0642e2930803f2";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/home/mhugo/code/claude-code-flow/src/cli/core/config-loader.ts",
    statementMap: {
      "0": {
        start: {
          line: 18,
          column: 0
        },
        end: {
          line: 23,
          column: 40
        }
      },
      "1": {
        start: {
          line: 19,
          column: 4
        },
        end: {
          line: 19,
          column: 40
        }
      },
      "2": {
        start: {
          line: 20,
          column: 4
        },
        end: {
          line: 20,
          column: 34
        }
      },
      "3": {
        start: {
          line: 21,
          column: 4
        },
        end: {
          line: 21,
          column: 48
        }
      },
      "4": {
        start: {
          line: 22,
          column: 4
        },
        end: {
          line: 22,
          column: 42
        }
      },
      "5": {
        start: {
          line: 28,
          column: 34
        },
        end: {
          line: 34,
          column: 5
        }
      },
      "6": {
        start: {
          line: 35,
          column: 31
        },
        end: {
          line: 39,
          column: 5
        }
      },
      "7": {
        start: {
          line: 40,
          column: 19
        },
        end: {
          line: 40,
          column: 23
        }
      },
      "8": {
        start: {
          line: 41,
          column: 20
        },
        end: {
          line: 41,
          column: 29
        }
      },
      "9": {
        start: {
          line: 46,
          column: 196
        },
        end: {
          line: 46,
          column: 203
        }
      },
      "10": {
        start: {
          line: 48,
          column: 21
        },
        end: {
          line: 48,
          column: 44
        }
      },
      "11": {
        start: {
          line: 49,
          column: 8
        },
        end: {
          line: 49,
          column: 73
        }
      },
      "12": {
        start: {
          line: 51,
          column: 8
        },
        end: {
          line: 56,
          column: 9
        }
      },
      "13": {
        start: {
          line: 52,
          column: 31
        },
        end: {
          line: 52,
          column: 58
        }
      },
      "14": {
        start: {
          line: 53,
          column: 12
        },
        end: {
          line: 55,
          column: 13
        }
      },
      "15": {
        start: {
          line: 54,
          column: 16
        },
        end: {
          line: 54,
          column: 62
        }
      },
      "16": {
        start: {
          line: 58,
          column: 8
        },
        end: {
          line: 63,
          column: 9
        }
      },
      "17": {
        start: {
          line: 59,
          column: 34
        },
        end: {
          line: 59,
          column: 75
        }
      },
      "18": {
        start: {
          line: 60,
          column: 12
        },
        end: {
          line: 62,
          column: 13
        }
      },
      "19": {
        start: {
          line: 61,
          column: 16
        },
        end: {
          line: 61,
          column: 65
        }
      },
      "20": {
        start: {
          line: 65,
          column: 26
        },
        end: {
          line: 65,
          column: 63
        }
      },
      "21": {
        start: {
          line: 66,
          column: 8
        },
        end: {
          line: 69,
          column: 9
        }
      },
      "22": {
        start: {
          line: 67,
          column: 12
        },
        end: {
          line: 67,
          column: 57
        }
      },
      "23": {
        start: {
          line: 68,
          column: 12
        },
        end: {
          line: 68,
          column: 89
        }
      },
      "24": {
        start: {
          line: 71,
          column: 8
        },
        end: {
          line: 74,
          column: 9
        }
      },
      "25": {
        start: {
          line: 72,
          column: 12
        },
        end: {
          line: 72,
          column: 55
        }
      },
      "26": {
        start: {
          line: 73,
          column: 12
        },
        end: {
          line: 73,
          column: 82
        }
      },
      "27": {
        start: {
          line: 76,
          column: 8
        },
        end: {
          line: 85,
          column: 9
        }
      },
      "28": {
        start: {
          line: 77,
          column: 31
        },
        end: {
          line: 77,
          column: 52
        }
      },
      "29": {
        start: {
          line: 78,
          column: 12
        },
        end: {
          line: 80,
          column: 13
        }
      },
      "30": {
        start: {
          line: 79,
          column: 16
        },
        end: {
          line: 79,
          column: 100
        }
      },
      "31": {
        start: {
          line: 81,
          column: 12
        },
        end: {
          line: 84,
          column: 13
        }
      },
      "32": {
        start: {
          line: 82,
          column: 16
        },
        end: {
          line: 82,
          column: 56
        }
      },
      "33": {
        start: {
          line: 83,
          column: 16
        },
        end: {
          line: 83,
          column: 75
        }
      },
      "34": {
        start: {
          line: 83,
          column: 49
        },
        end: {
          line: 83,
          column: 73
        }
      },
      "35": {
        start: {
          line: 86,
          column: 8
        },
        end: {
          line: 86,
          column: 35
        }
      },
      "36": {
        start: {
          line: 87,
          column: 8
        },
        end: {
          line: 87,
          column: 22
        }
      },
      "37": {
        start: {
          line: 93,
          column: 8
        },
        end: {
          line: 195,
          column: 10
        }
      },
      "38": {
        start: {
          line: 201,
          column: 24
        },
        end: {
          line: 201,
          column: 33
        }
      },
      "39": {
        start: {
          line: 202,
          column: 8
        },
        end: {
          line: 215,
          column: 9
        }
      },
      "40": {
        start: {
          line: 203,
          column: 31
        },
        end: {
          line: 203,
          column: 54
        }
      },
      "41": {
        start: {
          line: 204,
          column: 12
        },
        end: {
          line: 214,
          column: 13
        }
      },
      "42": {
        start: {
          line: 205,
          column: 31
        },
        end: {
          line: 205,
          column: 68
        }
      },
      "43": {
        start: {
          line: 206,
          column: 16
        },
        end: {
          line: 209,
          column: 17
        }
      },
      "44": {
        start: {
          line: 207,
          column: 20
        },
        end: {
          line: 207,
          column: 92
        }
      },
      "45": {
        start: {
          line: 208,
          column: 20
        },
        end: {
          line: 208,
          column: 34
        }
      },
      "46": {
        start: {
          line: 213,
          column: 16
        },
        end: {
          line: 213,
          column: 25
        }
      },
      "47": {
        start: {
          line: 216,
          column: 8
        },
        end: {
          line: 216,
          column: 20
        }
      },
      "48": {
        start: {
          line: 222,
          column: 27
        },
        end: {
          line: 222,
          column: 40
        }
      },
      "49": {
        start: {
          line: 223,
          column: 8
        },
        end: {
          line: 236,
          column: 9
        }
      },
      "50": {
        start: {
          line: 224,
          column: 31
        },
        end: {
          line: 224,
          column: 57
        }
      },
      "51": {
        start: {
          line: 225,
          column: 12
        },
        end: {
          line: 235,
          column: 13
        }
      },
      "52": {
        start: {
          line: 226,
          column: 31
        },
        end: {
          line: 226,
          column: 68
        }
      },
      "53": {
        start: {
          line: 227,
          column: 16
        },
        end: {
          line: 230,
          column: 17
        }
      },
      "54": {
        start: {
          line: 228,
          column: 20
        },
        end: {
          line: 228,
          column: 95
        }
      },
      "55": {
        start: {
          line: 229,
          column: 20
        },
        end: {
          line: 229,
          column: 34
        }
      },
      "56": {
        start: {
          line: 234,
          column: 16
        },
        end: {
          line: 234,
          column: 25
        }
      },
      "57": {
        start: {
          line: 237,
          column: 8
        },
        end: {
          line: 237,
          column: 20
        }
      },
      "58": {
        start: {
          line: 243,
          column: 8
        },
        end: {
          line: 261,
          column: 9
        }
      },
      "59": {
        start: {
          line: 244,
          column: 12
        },
        end: {
          line: 244,
          column: 35
        }
      },
      "60": {
        start: {
          line: 245,
          column: 28
        },
        end: {
          line: 245,
          column: 61
        }
      },
      "61": {
        start: {
          line: 246,
          column: 12
        },
        end: {
          line: 256,
          column: 13
        }
      },
      "62": {
        start: {
          line: 247,
          column: 16
        },
        end: {
          line: 247,
          column: 43
        }
      },
      "63": {
        start: {
          line: 249,
          column: 17
        },
        end: {
          line: 256,
          column: 13
        }
      },
      "64": {
        start: {
          line: 250,
          column: 16
        },
        end: {
          line: 250,
          column: 41
        }
      },
      "65": {
        start: {
          line: 252,
          column: 17
        },
        end: {
          line: 256,
          column: 13
        }
      },
      "66": {
        start: {
          line: 254,
          column: 31
        },
        end: {
          line: 254,
          column: 62
        }
      },
      "67": {
        start: {
          line: 255,
          column: 16
        },
        end: {
          line: 255,
          column: 48
        }
      },
      "68": {
        start: {
          line: 257,
          column: 12
        },
        end: {
          line: 257,
          column: 24
        }
      },
      "69": {
        start: {
          line: 260,
          column: 12
        },
        end: {
          line: 260,
          column: 24
        }
      },
      "70": {
        start: {
          line: 267,
          column: 23
        },
        end: {
          line: 267,
          column: 25
        }
      },
      "71": {
        start: {
          line: 268,
          column: 26
        },
        end: {
          line: 268,
          column: 38
        }
      },
      "72": {
        start: {
          line: 270,
          column: 8
        },
        end: {
          line: 272,
          column: 9
        }
      },
      "73": {
        start: {
          line: 271,
          column: 12
        },
        end: {
          line: 271,
          column: 106
        }
      },
      "74": {
        start: {
          line: 273,
          column: 8
        },
        end: {
          line: 275,
          column: 9
        }
      },
      "75": {
        start: {
          line: 274,
          column: 12
        },
        end: {
          line: 274,
          column: 110
        }
      },
      "76": {
        start: {
          line: 276,
          column: 8
        },
        end: {
          line: 276,
          column: 22
        }
      },
      "77": {
        start: {
          line: 282,
          column: 21
        },
        end: {
          line: 282,
          column: 36
        }
      },
      "78": {
        start: {
          line: 283,
          column: 22
        },
        end: {
          line: 283,
          column: 25
        }
      },
      "79": {
        start: {
          line: 284,
          column: 8
        },
        end: {
          line: 290,
          column: 9
        }
      },
      "80": {
        start: {
          line: 284,
          column: 21
        },
        end: {
          line: 284,
          column: 22
        }
      },
      "81": {
        start: {
          line: 285,
          column: 24
        },
        end: {
          line: 285,
          column: 31
        }
      },
      "82": {
        start: {
          line: 286,
          column: 12
        },
        end: {
          line: 288,
          column: 13
        }
      },
      "83": {
        start: {
          line: 287,
          column: 16
        },
        end: {
          line: 287,
          column: 34
        }
      },
      "84": {
        start: {
          line: 289,
          column: 12
        },
        end: {
          line: 289,
          column: 35
        }
      },
      "85": {
        start: {
          line: 291,
          column: 8
        },
        end: {
          line: 291,
          column: 47
        }
      },
      "86": {
        start: {
          line: 297,
          column: 8
        },
        end: {
          line: 297,
          column: 46
        }
      },
      "87": {
        start: {
          line: 303,
          column: 23
        },
        end: {
          line: 303,
          column: 36
        }
      },
      "88": {
        start: {
          line: 304,
          column: 8
        },
        end: {
          line: 311,
          column: 9
        }
      },
      "89": {
        start: {
          line: 305,
          column: 12
        },
        end: {
          line: 310,
          column: 13
        }
      },
      "90": {
        start: {
          line: 306,
          column: 16
        },
        end: {
          line: 306,
          column: 77
        }
      },
      "91": {
        start: {
          line: 309,
          column: 16
        },
        end: {
          line: 309,
          column: 42
        }
      },
      "92": {
        start: {
          line: 312,
          column: 8
        },
        end: {
          line: 312,
          column: 22
        }
      },
      "93": {
        start: {
          line: 318,
          column: 8
        },
        end: {
          line: 318,
          column: 71
        }
      },
      "94": {
        start: {
          line: 324,
          column: 23
        },
        end: {
          line: 324,
          column: 25
        }
      },
      "95": {
        start: {
          line: 325,
          column: 25
        },
        end: {
          line: 325,
          column: 27
        }
      },
      "96": {
        start: {
          line: 327,
          column: 8
        },
        end: {
          line: 329,
          column: 9
        }
      },
      "97": {
        start: {
          line: 328,
          column: 12
        },
        end: {
          line: 328,
          column: 56
        }
      },
      "98": {
        start: {
          line: 330,
          column: 8
        },
        end: {
          line: 332,
          column: 9
        }
      },
      "99": {
        start: {
          line: 331,
          column: 12
        },
        end: {
          line: 331,
          column: 59
        }
      },
      "100": {
        start: {
          line: 333,
          column: 8
        },
        end: {
          line: 335,
          column: 9
        }
      },
      "101": {
        start: {
          line: 334,
          column: 12
        },
        end: {
          line: 334,
          column: 61
        }
      },
      "102": {
        start: {
          line: 336,
          column: 8
        },
        end: {
          line: 340,
          column: 10
        }
      },
      "103": {
        start: {
          line: 346,
          column: 8
        },
        end: {
          line: 346,
          column: 33
        }
      },
      "104": {
        start: {
          line: 352,
          column: 8
        },
        end: {
          line: 352,
          column: 43
        }
      },
      "105": {
        start: {
          line: 358,
          column: 8
        },
        end: {
          line: 358,
          column: 33
        }
      },
      "106": {
        start: {
          line: 359,
          column: 8
        },
        end: {
          line: 359,
          column: 35
        }
      },
      "107": {
        start: {
          line: 360,
          column: 8
        },
        end: {
          line: 360,
          column: 34
        }
      },
      "108": {
        start: {
          line: 366,
          column: 8
        },
        end: {
          line: 366,
          column: 42
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 18,
            column: 1
          },
          end: {
            line: 18,
            column: 2
          }
        },
        loc: {
          start: {
            line: 18,
            column: 25
          },
          end: {
            line: 23,
            column: 1
          }
        },
        line: 18
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 45,
            column: 4
          },
          end: {
            line: 45,
            column: 5
          }
        },
        loc: {
          start: {
            line: 45,
            column: 29
          },
          end: {
            line: 88,
            column: 5
          }
        },
        line: 45
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 83,
            column: 44
          },
          end: {
            line: 83,
            column: 45
          }
        },
        loc: {
          start: {
            line: 83,
            column: 49
          },
          end: {
            line: 83,
            column: 73
          }
        },
        line: 83
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 92,
            column: 4
          },
          end: {
            line: 92,
            column: 5
          }
        },
        loc: {
          start: {
            line: 92,
            column: 23
          },
          end: {
            line: 196,
            column: 5
          }
        },
        line: 92
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 200,
            column: 4
          },
          end: {
            line: 200,
            column: 5
          }
        },
        loc: {
          start: {
            line: 200,
            column: 27
          },
          end: {
            line: 217,
            column: 5
          }
        },
        line: 200
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 221,
            column: 4
          },
          end: {
            line: 221,
            column: 5
          }
        },
        loc: {
          start: {
            line: 221,
            column: 41
          },
          end: {
            line: 238,
            column: 5
          }
        },
        line: 221
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 242,
            column: 4
          },
          end: {
            line: 242,
            column: 5
          }
        },
        loc: {
          start: {
            line: 242,
            column: 35
          },
          end: {
            line: 262,
            column: 5
          }
        },
        line: 242
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 266,
            column: 4
          },
          end: {
            line: 266,
            column: 5
          }
        },
        loc: {
          start: {
            line: 266,
            column: 34
          },
          end: {
            line: 277,
            column: 5
          }
        },
        line: 266
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 281,
            column: 4
          },
          end: {
            line: 281,
            column: 5
          }
        },
        loc: {
          start: {
            line: 281,
            column: 40
          },
          end: {
            line: 292,
            column: 5
          }
        },
        line: 281
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 296,
            column: 4
          },
          end: {
            line: 296,
            column: 5
          }
        },
        loc: {
          start: {
            line: 296,
            column: 32
          },
          end: {
            line: 298,
            column: 5
          }
        },
        line: 296
      },
      "10": {
        name: "(anonymous_10)",
        decl: {
          start: {
            line: 302,
            column: 4
          },
          end: {
            line: 302,
            column: 5
          }
        },
        loc: {
          start: {
            line: 302,
            column: 30
          },
          end: {
            line: 313,
            column: 5
          }
        },
        line: 302
      },
      "11": {
        name: "(anonymous_11)",
        decl: {
          start: {
            line: 317,
            column: 4
          },
          end: {
            line: 317,
            column: 5
          }
        },
        loc: {
          start: {
            line: 317,
            column: 56
          },
          end: {
            line: 319,
            column: 5
          }
        },
        line: 317
      },
      "12": {
        name: "(anonymous_12)",
        decl: {
          start: {
            line: 323,
            column: 4
          },
          end: {
            line: 323,
            column: 5
          }
        },
        loc: {
          start: {
            line: 323,
            column: 21
          },
          end: {
            line: 341,
            column: 5
          }
        },
        line: 323
      },
      "13": {
        name: "(anonymous_13)",
        decl: {
          start: {
            line: 345,
            column: 4
          },
          end: {
            line: 345,
            column: 5
          }
        },
        loc: {
          start: {
            line: 345,
            column: 16
          },
          end: {
            line: 347,
            column: 5
          }
        },
        line: 345
      },
      "14": {
        name: "(anonymous_14)",
        decl: {
          start: {
            line: 351,
            column: 4
          },
          end: {
            line: 351,
            column: 5
          }
        },
        loc: {
          start: {
            line: 351,
            column: 23
          },
          end: {
            line: 353,
            column: 5
          }
        },
        line: 351
      },
      "15": {
        name: "(anonymous_15)",
        decl: {
          start: {
            line: 357,
            column: 4
          },
          end: {
            line: 357,
            column: 5
          }
        },
        loc: {
          start: {
            line: 357,
            column: 26
          },
          end: {
            line: 361,
            column: 5
          }
        },
        line: 357
      },
      "16": {
        name: "(anonymous_16)",
        decl: {
          start: {
            line: 365,
            column: 4
          },
          end: {
            line: 365,
            column: 5
          }
        },
        loc: {
          start: {
            line: 365,
            column: 15
          },
          end: {
            line: 367,
            column: 5
          }
        },
        line: 365
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 23,
            column: 3
          },
          end: {
            line: 23,
            column: 38
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 23,
            column: 3
          },
          end: {
            line: 23,
            column: 15
          }
        }, {
          start: {
            line: 23,
            column: 20
          },
          end: {
            line: 23,
            column: 37
          }
        }],
        line: 23
      },
      "1": {
        loc: {
          start: {
            line: 45,
            column: 15
          },
          end: {
            line: 45,
            column: 27
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 45,
            column: 25
          },
          end: {
            line: 45,
            column: 27
          }
        }],
        line: 45
      },
      "2": {
        loc: {
          start: {
            line: 46,
            column: 16
          },
          end: {
            line: 46,
            column: 63
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 46,
            column: 30
          },
          end: {
            line: 46,
            column: 63
          }
        }],
        line: 46
      },
      "3": {
        loc: {
          start: {
            line: 46,
            column: 65
          },
          end: {
            line: 46,
            column: 89
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 46,
            column: 77
          },
          end: {
            line: 46,
            column: 89
          }
        }],
        line: 46
      },
      "4": {
        loc: {
          start: {
            line: 46,
            column: 91
          },
          end: {
            line: 46,
            column: 112
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 46,
            column: 108
          },
          end: {
            line: 46,
            column: 112
          }
        }],
        line: 46
      },
      "5": {
        loc: {
          start: {
            line: 46,
            column: 114
          },
          end: {
            line: 46,
            column: 138
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 46,
            column: 134
          },
          end: {
            line: 46,
            column: 138
          }
        }],
        line: 46
      },
      "6": {
        loc: {
          start: {
            line: 46,
            column: 140
          },
          end: {
            line: 46,
            column: 152
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 46,
            column: 150
          },
          end: {
            line: 46,
            column: 152
          }
        }],
        line: 46
      },
      "7": {
        loc: {
          start: {
            line: 46,
            column: 154
          },
          end: {
            line: 46,
            column: 169
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 46,
            column: 165
          },
          end: {
            line: 46,
            column: 169
          }
        }],
        line: 46
      },
      "8": {
        loc: {
          start: {
            line: 46,
            column: 171
          },
          end: {
            line: 46,
            column: 191
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 46,
            column: 187
          },
          end: {
            line: 46,
            column: 191
          }
        }],
        line: 46
      },
      "9": {
        loc: {
          start: {
            line: 51,
            column: 8
          },
          end: {
            line: 56,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 51,
            column: 8
          },
          end: {
            line: 56,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 51
      },
      "10": {
        loc: {
          start: {
            line: 53,
            column: 12
          },
          end: {
            line: 55,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 53,
            column: 12
          },
          end: {
            line: 55,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 53
      },
      "11": {
        loc: {
          start: {
            line: 58,
            column: 8
          },
          end: {
            line: 63,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 58,
            column: 8
          },
          end: {
            line: 63,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 58
      },
      "12": {
        loc: {
          start: {
            line: 60,
            column: 12
          },
          end: {
            line: 62,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 60,
            column: 12
          },
          end: {
            line: 62,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 60
      },
      "13": {
        loc: {
          start: {
            line: 66,
            column: 8
          },
          end: {
            line: 69,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 66,
            column: 8
          },
          end: {
            line: 69,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 66
      },
      "14": {
        loc: {
          start: {
            line: 71,
            column: 8
          },
          end: {
            line: 74,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 71,
            column: 8
          },
          end: {
            line: 74,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 71
      },
      "15": {
        loc: {
          start: {
            line: 76,
            column: 8
          },
          end: {
            line: 85,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 76,
            column: 8
          },
          end: {
            line: 85,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 76
      },
      "16": {
        loc: {
          start: {
            line: 78,
            column: 12
          },
          end: {
            line: 80,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 78,
            column: 12
          },
          end: {
            line: 80,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 78
      },
      "17": {
        loc: {
          start: {
            line: 81,
            column: 12
          },
          end: {
            line: 84,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 81,
            column: 12
          },
          end: {
            line: 84,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 81
      },
      "18": {
        loc: {
          start: {
            line: 206,
            column: 16
          },
          end: {
            line: 209,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 206,
            column: 16
          },
          end: {
            line: 209,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 206
      },
      "19": {
        loc: {
          start: {
            line: 227,
            column: 16
          },
          end: {
            line: 230,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 227,
            column: 16
          },
          end: {
            line: 230,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 227
      },
      "20": {
        loc: {
          start: {
            line: 246,
            column: 12
          },
          end: {
            line: 256,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 246,
            column: 12
          },
          end: {
            line: 256,
            column: 13
          }
        }, {
          start: {
            line: 249,
            column: 17
          },
          end: {
            line: 256,
            column: 13
          }
        }],
        line: 246
      },
      "21": {
        loc: {
          start: {
            line: 249,
            column: 17
          },
          end: {
            line: 256,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 249,
            column: 17
          },
          end: {
            line: 256,
            column: 13
          }
        }, {
          start: {
            line: 252,
            column: 17
          },
          end: {
            line: 256,
            column: 13
          }
        }],
        line: 249
      },
      "22": {
        loc: {
          start: {
            line: 249,
            column: 21
          },
          end: {
            line: 249,
            column: 76
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 249,
            column: 21
          },
          end: {
            line: 249,
            column: 47
          }
        }, {
          start: {
            line: 249,
            column: 51
          },
          end: {
            line: 249,
            column: 76
          }
        }],
        line: 249
      },
      "23": {
        loc: {
          start: {
            line: 252,
            column: 17
          },
          end: {
            line: 256,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 252,
            column: 17
          },
          end: {
            line: 256,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 252
      },
      "24": {
        loc: {
          start: {
            line: 255,
            column: 23
          },
          end: {
            line: 255,
            column: 47
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 255,
            column: 23
          },
          end: {
            line: 255,
            column: 37
          }
        }, {
          start: {
            line: 255,
            column: 41
          },
          end: {
            line: 255,
            column: 47
          }
        }],
        line: 255
      },
      "25": {
        loc: {
          start: {
            line: 270,
            column: 8
          },
          end: {
            line: 272,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 270,
            column: 8
          },
          end: {
            line: 272,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 270
      },
      "26": {
        loc: {
          start: {
            line: 273,
            column: 8
          },
          end: {
            line: 275,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 273,
            column: 8
          },
          end: {
            line: 275,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 273
      },
      "27": {
        loc: {
          start: {
            line: 286,
            column: 12
          },
          end: {
            line: 288,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 286,
            column: 12
          },
          end: {
            line: 288,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 286
      },
      "28": {
        loc: {
          start: {
            line: 286,
            column: 16
          },
          end: {
            line: 286,
            column: 69
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 286,
            column: 16
          },
          end: {
            line: 286,
            column: 33
          }
        }, {
          start: {
            line: 286,
            column: 37
          },
          end: {
            line: 286,
            column: 69
          }
        }],
        line: 286
      },
      "29": {
        loc: {
          start: {
            line: 305,
            column: 12
          },
          end: {
            line: 310,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 305,
            column: 12
          },
          end: {
            line: 310,
            column: 13
          }
        }, {
          start: {
            line: 308,
            column: 17
          },
          end: {
            line: 310,
            column: 13
          }
        }],
        line: 305
      },
      "30": {
        loc: {
          start: {
            line: 305,
            column: 16
          },
          end: {
            line: 305,
            column: 102
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 305,
            column: 16
          },
          end: {
            line: 305,
            column: 36
          }
        }, {
          start: {
            line: 305,
            column: 40
          },
          end: {
            line: 305,
            column: 71
          }
        }, {
          start: {
            line: 305,
            column: 75
          },
          end: {
            line: 305,
            column: 102
          }
        }],
        line: 305
      },
      "31": {
        loc: {
          start: {
            line: 306,
            column: 45
          },
          end: {
            line: 306,
            column: 62
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 306,
            column: 45
          },
          end: {
            line: 306,
            column: 56
          }
        }, {
          start: {
            line: 306,
            column: 60
          },
          end: {
            line: 306,
            column: 62
          }
        }],
        line: 306
      },
      "32": {
        loc: {
          start: {
            line: 327,
            column: 8
          },
          end: {
            line: 329,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 327,
            column: 8
          },
          end: {
            line: 329,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 327
      },
      "33": {
        loc: {
          start: {
            line: 330,
            column: 8
          },
          end: {
            line: 332,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 330,
            column: 8
          },
          end: {
            line: 332,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 330
      },
      "34": {
        loc: {
          start: {
            line: 333,
            column: 8
          },
          end: {
            line: 335,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 333,
            column: 8
          },
          end: {
            line: 335,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 333
      },
      "35": {
        loc: {
          start: {
            line: 333,
            column: 12
          },
          end: {
            line: 333,
            column: 65
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 333,
            column: 12
          },
          end: {
            line: 333,
            column: 35
          }
        }, {
          start: {
            line: 333,
            column: 39
          },
          end: {
            line: 333,
            column: 65
          }
        }],
        line: 333
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0,
      "74": 0,
      "75": 0,
      "76": 0,
      "77": 0,
      "78": 0,
      "79": 0,
      "80": 0,
      "81": 0,
      "82": 0,
      "83": 0,
      "84": 0,
      "85": 0,
      "86": 0,
      "87": 0,
      "88": 0,
      "89": 0,
      "90": 0,
      "91": 0,
      "92": 0,
      "93": 0,
      "94": 0,
      "95": 0,
      "96": 0,
      "97": 0,
      "98": 0,
      "99": 0,
      "100": 0,
      "101": 0,
      "102": 0,
      "103": 0,
      "104": 0,
      "105": 0,
      "106": 0,
      "107": 0,
      "108": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0
    },
    b: {
      "0": [0, 0],
      "1": [0],
      "2": [0],
      "3": [0],
      "4": [0],
      "5": [0],
      "6": [0],
      "7": [0],
      "8": [0],
      "9": [0, 0],
      "10": [0, 0],
      "11": [0, 0],
      "12": [0, 0],
      "13": [0, 0],
      "14": [0, 0],
      "15": [0, 0],
      "16": [0, 0],
      "17": [0, 0],
      "18": [0, 0],
      "19": [0, 0],
      "20": [0, 0],
      "21": [0, 0],
      "22": [0, 0],
      "23": [0, 0],
      "24": [0, 0],
      "25": [0, 0],
      "26": [0, 0],
      "27": [0, 0],
      "28": [0, 0],
      "29": [0, 0],
      "30": [0, 0, 0],
      "31": [0, 0],
      "32": [0, 0],
      "33": [0, 0],
      "34": [0, 0],
      "35": [0, 0]
    },
    inputSourceMap: {
      file: "/home/mhugo/code/claude-code-flow/src/cli/core/config-loader.ts",
      mappings: "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",
      names: [],
      sources: ["/home/mhugo/code/claude-code-flow/src/cli/core/config-loader.ts"],
      sourcesContent: ["/**\n * Configuration Loader\n * \n * Loads and validates CLI configuration from multiple sources:\n * - Configuration files (JSON, YAML)\n * - Environment variables\n * - Command line arguments\n * - Default values\n */\n\nimport { readFile, access } from 'fs/promises';\nimport { join, resolve } from 'path';\nimport { homedir } from 'os';\nimport { load as yamlLoad } from 'js-yaml';\nimport type {\n  CliConfig,\n  ConfigValidationResult\n} from '../types/index.js';\n\n/**\n * Configuration source types\n */\nexport enum ConfigSource {\n  DEFAULT = 'default',\n  FILE = 'file',\n  ENVIRONMENT = 'environment',\n  ARGUMENT = 'argument'\n}\n\n/**\n * Configuration with source tracking\n */\nexport interface ConfigEntry<T = unknown> {\n  value: T;\n  source: ConfigSource;\n  path?: string;\n  priority: number;\n}\n\n/**\n * Configuration loading options\n */\nexport interface ConfigLoadOptions {\n  /** Configuration file paths to try (in order) */\n  configFiles?: string[];\n  \n  /** Environment variable prefix */\n  envPrefix?: string;\n  \n  /** Whether to load user config from home directory */\n  loadUserConfig?: boolean;\n  \n  /** Whether to load project config from current directory */\n  loadProjectConfig?: boolean;\n  \n  /** Command line arguments to merge */\n  cliArgs?: Record<string, unknown>;\n  \n  /** Validation mode */\n  validate?: boolean;\n  \n  /** Whether to create default config if none found */\n  createDefault?: boolean;\n}\n\n/**\n * Configuration loader implementation\n */\nexport class ConfigLoader {\n  private static readonly DEFAULT_CONFIG_FILES = [\n    '.claude-zen.json',\n    '.claude-zen.yaml',\n    '.claude-zen.yml',\n    'claude-zen.config.js',\n    'claude-zen.config.json'\n  ];\n\n  private static readonly USER_CONFIG_FILES = [\n    '.claude-zen/config.json',\n    '.claude-zen/config.yaml',\n    '.config/claude-zen/config.json'\n  ];\n\n  private loadedConfig: CliConfig | null = null;\n  private configSources = new Map<string, ConfigEntry>();\n\n  /**\n   * Load configuration from all sources\n   */\n  async load(options: ConfigLoadOptions = {}): Promise<CliConfig> {\n    const {\n      configFiles = ConfigLoader.DEFAULT_CONFIG_FILES,\n      envPrefix = 'CLAUDE_ZEN',\n      loadUserConfig = true,\n      loadProjectConfig = true,\n      cliArgs = {},\n      validate = true,\n      createDefault = true\n    } = options;\n\n    // Start with default configuration\n    let config = this.getDefaultConfig();\n    this.setConfigSource('default', config, ConfigSource.DEFAULT, 0);\n\n    // Load user configuration\n    if (loadUserConfig) {\n      const userConfig = await this.loadUserConfig();\n      if (userConfig) {\n        config = this.mergeConfig(config, userConfig);\n      }\n    }\n\n    // Load project configuration\n    if (loadProjectConfig) {\n      const projectConfig = await this.loadProjectConfig(configFiles);\n      if (projectConfig) {\n        config = this.mergeConfig(config, projectConfig);\n      }\n    }\n\n    // Load environment variables\n    const envConfig = this.loadEnvironmentConfig(envPrefix);\n    if (Object.keys(envConfig).length > 0) {\n      config = this.mergeConfig(config, envConfig);\n      this.setConfigSource('environment', envConfig, ConfigSource.ENVIRONMENT, 30);\n    }\n\n    // Merge CLI arguments (highest priority)\n    if (Object.keys(cliArgs).length > 0) {\n      config = this.mergeConfig(config, cliArgs as Partial<CliConfig>);\n      this.setConfigSource('arguments', cliArgs, ConfigSource.ARGUMENT, 40);\n    }\n\n    // Basic validation\n    if (validate) {\n      const validation = this.validate(config);\n      if (!validation.valid) {\n        throw new Error(`Configuration validation failed: ${validation.errors.join(', ')}`);\n      }\n\n      if (validation.warnings.length > 0) {\n        console.warn('Configuration warnings:');\n        validation.warnings.forEach(w => console.warn(`  - ${w}`));\n      }\n    }\n\n    this.loadedConfig = config;\n    return config;\n  }\n\n  /**\n   * Get default configuration\n   */\n  private getDefaultConfig(): CliConfig {\n    return {\n      app: {\n        name: 'claude-zen',\n        version: '2.0.0',\n        description: 'Claude-Zen CLI',\n        author: 'rUv',\n        license: 'MIT'\n      },\n      defaults: {\n        debug: false,\n        verbose: false,\n        format: 'text',\n        timeout: 30000,\n        retries: 3\n      },\n      plugins: {\n        enabled: true,\n        paths: ['./plugins', '~/.claude-zen/plugins'],\n        autoLoad: true,\n        initTimeout: 10000,\n        errorHandling: 'graceful',\n        allowedTypes: ['command', 'service', 'integration'],\n        security: {\n          requireSignatures: false,\n          allowedSources: ['local', 'official'],\n          sandboxed: false\n        }\n      },\n      swarm: {\n        enabled: true,\n        maxAgents: 10,\n        defaultTopology: 'mesh',\n        coordination: {\n          strategy: 'balanced',\n          timeout: 30000\n        }\n      },\n      database: {\n        type: 'sqlite',\n        connection: {\n          database: 'claude-zen.db'\n        },\n        pool: {\n          min: 1,\n          max: 10,\n          acquireTimeoutMillis: 30000,\n          idleTimeoutMillis: 600000\n        },\n        migrations: {\n          directory: 'migrations',\n          autoRun: true,\n          tableName: 'migrations'\n        }\n      },\n      ui: {\n        theme: 'dark',\n        animations: {\n          enabled: true,\n          duration: 200\n        }\n      },\n      logging: {\n        level: 'info',\n        outputs: [{\n          type: 'console',\n          enabled: true,\n          config: {}\n        }],\n        format: 'text',\n        includeTimestamp: true,\n        includeLevel: true,\n        rotateFiles: false\n      },\n      security: {\n        encryption: {\n          algorithm: 'aes-256-gcm',\n          keySize: 256,\n          keyRotationDays: 30\n        },\n        authentication: {\n          enabled: false,\n          provider: 'local'\n        },\n        rateLimit: {\n          enabled: true,\n          windowMs: 60000,\n          maxRequests: 100,\n          skipSuccessfulRequests: false\n        }\n      },\n      performance: {\n        caching: {\n          enabled: true,\n          ttl: 300000,\n          maxSize: 1000\n        },\n        optimization: {\n          enabled: true,\n          lazy: true,\n          compression: true\n        }\n      }\n    };\n  }\n\n  /**\n   * Load user configuration from home directory\n   */\n  private async loadUserConfig(): Promise<Partial<CliConfig> | null> {\n    const homeDir = homedir();\n    \n    for (const fileName of ConfigLoader.USER_CONFIG_FILES) {\n      const configPath = join(homeDir, fileName);\n      \n      try {\n        const config = await this.loadConfigFile(configPath);\n        if (config) {\n          this.setConfigSource('user', config, ConfigSource.FILE, 10, configPath);\n          return config;\n        }\n      } catch (error) {\n        // Continue to next file if current one fails\n        continue;\n      }\n    }\n    \n    return null;\n  }\n\n  /**\n   * Load project configuration from current directory\n   */\n  private async loadProjectConfig(configFiles: string[]): Promise<Partial<CliConfig> | null> {\n    const currentDir = process.cwd();\n    \n    for (const fileName of configFiles) {\n      const configPath = join(currentDir, fileName);\n      \n      try {\n        const config = await this.loadConfigFile(configPath);\n        if (config) {\n          this.setConfigSource('project', config, ConfigSource.FILE, 20, configPath);\n          return config;\n        }\n      } catch (error) {\n        // Continue to next file if current one fails\n        continue;\n      }\n    }\n    \n    return null;\n  }\n\n  /**\n   * Load configuration from a specific file\n   */\n  private async loadConfigFile(filePath: string): Promise<Partial<CliConfig> | null> {\n    try {\n      await access(filePath);\n      const content = await readFile(filePath, 'utf-8');\n      \n      if (filePath.endsWith('.json')) {\n        return JSON.parse(content) as Partial<CliConfig>;\n      } else if (filePath.endsWith('.yaml') || filePath.endsWith('.yml')) {\n        return yamlLoad(content) as Partial<CliConfig>;\n      } else if (filePath.endsWith('.js')) {\n        // Dynamic import for JS config files\n        const module = await import(resolve(filePath));\n        return module.default || module;\n      }\n      \n      return null;\n    } catch (error) {\n      return null;\n    }\n  }\n\n  /**\n   * Load configuration from environment variables\n   */\n  private loadEnvironmentConfig(prefix: string): Partial<CliConfig> {\n    const config: Partial<CliConfig> = {};\n    const envPrefix = `${prefix}_`;\n    \n    // Simple environment variable mapping\n    if (process.env[`${envPrefix}DEBUG`]) {\n      this.setNestedProperty(config, 'defaults.debug', process.env[`${envPrefix}DEBUG`] === 'true');\n    }\n    \n    if (process.env[`${envPrefix}VERBOSE`]) {\n      this.setNestedProperty(config, 'defaults.verbose', process.env[`${envPrefix}VERBOSE`] === 'true');\n    }\n    \n    return config;\n  }\n\n  /**\n   * Set nested property in object\n   */\n  private setNestedProperty(obj: any, path: string, value: unknown): void {\n    const keys = path.split('.');\n    let current = obj;\n    \n    for (let i = 0; i < keys.length - 1; i++) {\n      const key = keys[i];\n      if (!(key in current) || typeof current[key] !== 'object') {\n        current[key] = {};\n      }\n      current = current[key];\n    }\n    \n    current[keys[keys.length - 1]] = value;\n  }\n\n  /**\n   * Merge two configuration objects\n   */\n  private mergeConfig(base: CliConfig, override: Partial<CliConfig>): CliConfig {\n    return this.deepMerge(base, override) as CliConfig;\n  }\n\n  /**\n   * Deep merge two objects\n   */\n  private deepMerge(target: any, source: any): any {\n    const result = { ...target };\n    \n    for (const key in source) {\n      if (source[key] !== null && typeof source[key] === 'object' && !Array.isArray(source[key])) {\n        result[key] = this.deepMerge(target[key] || {}, source[key]);\n      } else {\n        result[key] = source[key];\n      }\n    }\n    \n    return result;\n  }\n\n  /**\n   * Set configuration source information\n   */\n  private setConfigSource(\n    key: string, \n    value: unknown, \n    source: ConfigSource, \n    priority: number, \n    path?: string\n  ): void {\n    this.configSources.set(key, { value, source, priority, path });\n  }\n\n  /**\n   * Basic configuration validation\n   */\n  validate(config: CliConfig): ConfigValidationResult {\n    const errors: string[] = [];\n    const warnings: string[] = [];\n    \n    // Basic validation checks\n    if (!config.app?.name) {\n      errors.push('Application name is required');\n    }\n    \n    if (!config.app?.version) {\n      errors.push('Application version is required');\n    }\n    \n    if (config.swarm?.maxAgents && config.swarm.maxAgents < 1) {\n      errors.push('Maximum agents must be at least 1');\n    }\n    \n    return {\n      valid: errors.length === 0,\n      errors,\n      warnings\n    };\n  }\n\n  /**\n   * Get current loaded configuration\n   */\n  getConfig(): CliConfig | null {\n    return this.loadedConfig;\n  }\n\n  /**\n   * Get configuration sources\n   */\n  getConfigSources(): Map<string, ConfigEntry> {\n    return new Map(this.configSources);\n  }\n\n  /**\n   * Reload configuration\n   */\n  async reload(options?: ConfigLoadOptions): Promise<CliConfig> {\n    this.loadedConfig = null;\n    this.configSources.clear();\n    return this.load(options);\n  }\n\n  /**\n   * Check if configuration has been loaded\n   */\n  isLoaded(): boolean {\n    return this.loadedConfig !== null;\n  }\n}"],
      version: 3
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "9385c3b47e696fdaa4d39df31b0642e2930803f2"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_1thfd9zgyy = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_1thfd9zgyy();
/**
 * Configuration Loader
 *
 * Loads and validates CLI configuration from multiple sources:
 * - Configuration files (JSON, YAML)
 * - Environment variables
 * - Command line arguments
 * - Default values
 */
import { readFile, access } from 'fs/promises';
import { join, resolve } from 'path';
import { homedir } from 'os';
import { load as yamlLoad } from 'js-yaml';
/**
 * Configuration source types
 */
export var ConfigSource;
/* istanbul ignore next */
cov_1thfd9zgyy().s[0]++;
(function (ConfigSource) {
  /* istanbul ignore next */
  cov_1thfd9zgyy().f[0]++;
  cov_1thfd9zgyy().s[1]++;
  ConfigSource["DEFAULT"] = "default";
  /* istanbul ignore next */
  cov_1thfd9zgyy().s[2]++;
  ConfigSource["FILE"] = "file";
  /* istanbul ignore next */
  cov_1thfd9zgyy().s[3]++;
  ConfigSource["ENVIRONMENT"] = "environment";
  /* istanbul ignore next */
  cov_1thfd9zgyy().s[4]++;
  ConfigSource["ARGUMENT"] = "argument";
})(
/* istanbul ignore next */
(cov_1thfd9zgyy().b[0][0]++, ConfigSource) ||
/* istanbul ignore next */
(cov_1thfd9zgyy().b[0][1]++, ConfigSource = {}));
/**
 * Configuration loader implementation
 */
export class ConfigLoader {
  static DEFAULT_CONFIG_FILES =
  /* istanbul ignore next */
  (cov_1thfd9zgyy().s[5]++, ['.claude-zen.json', '.claude-zen.yaml', '.claude-zen.yml', 'claude-zen.config.js', 'claude-zen.config.json']);
  static USER_CONFIG_FILES =
  /* istanbul ignore next */
  (cov_1thfd9zgyy().s[6]++, ['.claude-zen/config.json', '.claude-zen/config.yaml', '.config/claude-zen/config.json']);
  loadedConfig =
  /* istanbul ignore next */
  (cov_1thfd9zgyy().s[7]++, null);
  configSources =
  /* istanbul ignore next */
  (cov_1thfd9zgyy().s[8]++, new Map());
  /**
   * Load configuration from all sources
   */
  async load(options =
  /* istanbul ignore next */
  (cov_1thfd9zgyy().b[1][0]++, {})) {
    /* istanbul ignore next */
    cov_1thfd9zgyy().f[1]++;
    const {
      configFiles =
      /* istanbul ignore next */
      (cov_1thfd9zgyy().b[2][0]++, ConfigLoader.DEFAULT_CONFIG_FILES),
      envPrefix =
      /* istanbul ignore next */
      (cov_1thfd9zgyy().b[3][0]++, 'CLAUDE_ZEN'),
      loadUserConfig =
      /* istanbul ignore next */
      (cov_1thfd9zgyy().b[4][0]++, true),
      loadProjectConfig =
      /* istanbul ignore next */
      (cov_1thfd9zgyy().b[5][0]++, true),
      cliArgs =
      /* istanbul ignore next */
      (cov_1thfd9zgyy().b[6][0]++, {}),
      validate =
      /* istanbul ignore next */
      (cov_1thfd9zgyy().b[7][0]++, true),
      createDefault =
      /* istanbul ignore next */
      (cov_1thfd9zgyy().b[8][0]++, true)
    } =
    /* istanbul ignore next */
    (cov_1thfd9zgyy().s[9]++, options);
    // Start with default configuration
    let config =
    /* istanbul ignore next */
    (cov_1thfd9zgyy().s[10]++, this.getDefaultConfig());
    /* istanbul ignore next */
    cov_1thfd9zgyy().s[11]++;
    this.setConfigSource('default', config, ConfigSource.DEFAULT, 0);
    // Load user configuration
    /* istanbul ignore next */
    cov_1thfd9zgyy().s[12]++;
    if (loadUserConfig) {
      /* istanbul ignore next */
      cov_1thfd9zgyy().b[9][0]++;
      const userConfig =
      /* istanbul ignore next */
      (cov_1thfd9zgyy().s[13]++, await this.loadUserConfig());
      /* istanbul ignore next */
      cov_1thfd9zgyy().s[14]++;
      if (userConfig) {
        /* istanbul ignore next */
        cov_1thfd9zgyy().b[10][0]++;
        cov_1thfd9zgyy().s[15]++;
        config = this.mergeConfig(config, userConfig);
      } else
      /* istanbul ignore next */
      {
        cov_1thfd9zgyy().b[10][1]++;
      }
    } else
    /* istanbul ignore next */
    {
      cov_1thfd9zgyy().b[9][1]++;
    }
    // Load project configuration
    cov_1thfd9zgyy().s[16]++;
    if (loadProjectConfig) {
      /* istanbul ignore next */
      cov_1thfd9zgyy().b[11][0]++;
      const projectConfig =
      /* istanbul ignore next */
      (cov_1thfd9zgyy().s[17]++, await this.loadProjectConfig(configFiles));
      /* istanbul ignore next */
      cov_1thfd9zgyy().s[18]++;
      if (projectConfig) {
        /* istanbul ignore next */
        cov_1thfd9zgyy().b[12][0]++;
        cov_1thfd9zgyy().s[19]++;
        config = this.mergeConfig(config, projectConfig);
      } else
      /* istanbul ignore next */
      {
        cov_1thfd9zgyy().b[12][1]++;
      }
    } else
    /* istanbul ignore next */
    {
      cov_1thfd9zgyy().b[11][1]++;
    }
    // Load environment variables
    const envConfig =
    /* istanbul ignore next */
    (cov_1thfd9zgyy().s[20]++, this.loadEnvironmentConfig(envPrefix));
    /* istanbul ignore next */
    cov_1thfd9zgyy().s[21]++;
    if (Object.keys(envConfig).length > 0) {
      /* istanbul ignore next */
      cov_1thfd9zgyy().b[13][0]++;
      cov_1thfd9zgyy().s[22]++;
      config = this.mergeConfig(config, envConfig);
      /* istanbul ignore next */
      cov_1thfd9zgyy().s[23]++;
      this.setConfigSource('environment', envConfig, ConfigSource.ENVIRONMENT, 30);
    } else
    /* istanbul ignore next */
    {
      cov_1thfd9zgyy().b[13][1]++;
    }
    // Merge CLI arguments (highest priority)
    cov_1thfd9zgyy().s[24]++;
    if (Object.keys(cliArgs).length > 0) {
      /* istanbul ignore next */
      cov_1thfd9zgyy().b[14][0]++;
      cov_1thfd9zgyy().s[25]++;
      config = this.mergeConfig(config, cliArgs);
      /* istanbul ignore next */
      cov_1thfd9zgyy().s[26]++;
      this.setConfigSource('arguments', cliArgs, ConfigSource.ARGUMENT, 40);
    } else
    /* istanbul ignore next */
    {
      cov_1thfd9zgyy().b[14][1]++;
    }
    // Basic validation
    cov_1thfd9zgyy().s[27]++;
    if (validate) {
      /* istanbul ignore next */
      cov_1thfd9zgyy().b[15][0]++;
      const validation =
      /* istanbul ignore next */
      (cov_1thfd9zgyy().s[28]++, this.validate(config));
      /* istanbul ignore next */
      cov_1thfd9zgyy().s[29]++;
      if (!validation.valid) {
        /* istanbul ignore next */
        cov_1thfd9zgyy().b[16][0]++;
        cov_1thfd9zgyy().s[30]++;
        throw new Error(`Configuration validation failed: ${validation.errors.join(', ')}`);
      } else
      /* istanbul ignore next */
      {
        cov_1thfd9zgyy().b[16][1]++;
      }
      cov_1thfd9zgyy().s[31]++;
      if (validation.warnings.length > 0) {
        /* istanbul ignore next */
        cov_1thfd9zgyy().b[17][0]++;
        cov_1thfd9zgyy().s[32]++;
        console.warn('Configuration warnings:');
        /* istanbul ignore next */
        cov_1thfd9zgyy().s[33]++;
        validation.warnings.forEach(w => {
          /* istanbul ignore next */
          cov_1thfd9zgyy().f[2]++;
          cov_1thfd9zgyy().s[34]++;
          return console.warn(`  - ${w}`);
        });
      } else
      /* istanbul ignore next */
      {
        cov_1thfd9zgyy().b[17][1]++;
      }
    } else
    /* istanbul ignore next */
    {
      cov_1thfd9zgyy().b[15][1]++;
    }
    cov_1thfd9zgyy().s[35]++;
    this.loadedConfig = config;
    /* istanbul ignore next */
    cov_1thfd9zgyy().s[36]++;
    return config;
  }
  /**
   * Get default configuration
   */
  getDefaultConfig() {
    /* istanbul ignore next */
    cov_1thfd9zgyy().f[3]++;
    cov_1thfd9zgyy().s[37]++;
    return {
      app: {
        name: 'claude-zen',
        version: '2.0.0',
        description: 'Claude-Zen CLI',
        author: 'rUv',
        license: 'MIT'
      },
      defaults: {
        debug: false,
        verbose: false,
        format: 'text',
        timeout: 30000,
        retries: 3
      },
      plugins: {
        enabled: true,
        paths: ['./plugins', '~/.claude-zen/plugins'],
        autoLoad: true,
        initTimeout: 10000,
        errorHandling: 'graceful',
        allowedTypes: ['command', 'service', 'integration'],
        security: {
          requireSignatures: false,
          allowedSources: ['local', 'official'],
          sandboxed: false
        }
      },
      swarm: {
        enabled: true,
        maxAgents: 10,
        defaultTopology: 'mesh',
        coordination: {
          strategy: 'balanced',
          timeout: 30000
        }
      },
      database: {
        type: 'sqlite',
        connection: {
          database: 'claude-zen.db'
        },
        pool: {
          min: 1,
          max: 10,
          acquireTimeoutMillis: 30000,
          idleTimeoutMillis: 600000
        },
        migrations: {
          directory: 'migrations',
          autoRun: true,
          tableName: 'migrations'
        }
      },
      ui: {
        theme: 'dark',
        animations: {
          enabled: true,
          duration: 200
        }
      },
      logging: {
        level: 'info',
        outputs: [{
          type: 'console',
          enabled: true,
          config: {}
        }],
        format: 'text',
        includeTimestamp: true,
        includeLevel: true,
        rotateFiles: false
      },
      security: {
        encryption: {
          algorithm: 'aes-256-gcm',
          keySize: 256,
          keyRotationDays: 30
        },
        authentication: {
          enabled: false,
          provider: 'local'
        },
        rateLimit: {
          enabled: true,
          windowMs: 60000,
          maxRequests: 100,
          skipSuccessfulRequests: false
        }
      },
      performance: {
        caching: {
          enabled: true,
          ttl: 300000,
          maxSize: 1000
        },
        optimization: {
          enabled: true,
          lazy: true,
          compression: true
        }
      }
    };
  }
  /**
   * Load user configuration from home directory
   */
  async loadUserConfig() {
    /* istanbul ignore next */
    cov_1thfd9zgyy().f[4]++;
    const homeDir =
    /* istanbul ignore next */
    (cov_1thfd9zgyy().s[38]++, homedir());
    /* istanbul ignore next */
    cov_1thfd9zgyy().s[39]++;
    for (const fileName of ConfigLoader.USER_CONFIG_FILES) {
      const configPath =
      /* istanbul ignore next */
      (cov_1thfd9zgyy().s[40]++, join(homeDir, fileName));
      /* istanbul ignore next */
      cov_1thfd9zgyy().s[41]++;
      try {
        const config =
        /* istanbul ignore next */
        (cov_1thfd9zgyy().s[42]++, await this.loadConfigFile(configPath));
        /* istanbul ignore next */
        cov_1thfd9zgyy().s[43]++;
        if (config) {
          /* istanbul ignore next */
          cov_1thfd9zgyy().b[18][0]++;
          cov_1thfd9zgyy().s[44]++;
          this.setConfigSource('user', config, ConfigSource.FILE, 10, configPath);
          /* istanbul ignore next */
          cov_1thfd9zgyy().s[45]++;
          return config;
        } else
        /* istanbul ignore next */
        {
          cov_1thfd9zgyy().b[18][1]++;
        }
      } catch (error) {
        /* istanbul ignore next */
        cov_1thfd9zgyy().s[46]++;
        // Continue to next file if current one fails
        continue;
      }
    }
    /* istanbul ignore next */
    cov_1thfd9zgyy().s[47]++;
    return null;
  }
  /**
   * Load project configuration from current directory
   */
  async loadProjectConfig(configFiles) {
    /* istanbul ignore next */
    cov_1thfd9zgyy().f[5]++;
    const currentDir =
    /* istanbul ignore next */
    (cov_1thfd9zgyy().s[48]++, process.cwd());
    /* istanbul ignore next */
    cov_1thfd9zgyy().s[49]++;
    for (const fileName of configFiles) {
      const configPath =
      /* istanbul ignore next */
      (cov_1thfd9zgyy().s[50]++, join(currentDir, fileName));
      /* istanbul ignore next */
      cov_1thfd9zgyy().s[51]++;
      try {
        const config =
        /* istanbul ignore next */
        (cov_1thfd9zgyy().s[52]++, await this.loadConfigFile(configPath));
        /* istanbul ignore next */
        cov_1thfd9zgyy().s[53]++;
        if (config) {
          /* istanbul ignore next */
          cov_1thfd9zgyy().b[19][0]++;
          cov_1thfd9zgyy().s[54]++;
          this.setConfigSource('project', config, ConfigSource.FILE, 20, configPath);
          /* istanbul ignore next */
          cov_1thfd9zgyy().s[55]++;
          return config;
        } else
        /* istanbul ignore next */
        {
          cov_1thfd9zgyy().b[19][1]++;
        }
      } catch (error) {
        /* istanbul ignore next */
        cov_1thfd9zgyy().s[56]++;
        // Continue to next file if current one fails
        continue;
      }
    }
    /* istanbul ignore next */
    cov_1thfd9zgyy().s[57]++;
    return null;
  }
  /**
   * Load configuration from a specific file
   */
  async loadConfigFile(filePath) {
    /* istanbul ignore next */
    cov_1thfd9zgyy().f[6]++;
    cov_1thfd9zgyy().s[58]++;
    try {
      /* istanbul ignore next */
      cov_1thfd9zgyy().s[59]++;
      await access(filePath);
      const content =
      /* istanbul ignore next */
      (cov_1thfd9zgyy().s[60]++, await readFile(filePath, 'utf-8'));
      /* istanbul ignore next */
      cov_1thfd9zgyy().s[61]++;
      if (filePath.endsWith('.json')) {
        /* istanbul ignore next */
        cov_1thfd9zgyy().b[20][0]++;
        cov_1thfd9zgyy().s[62]++;
        return JSON.parse(content);
      } else {
        /* istanbul ignore next */
        cov_1thfd9zgyy().b[20][1]++;
        cov_1thfd9zgyy().s[63]++;
        if (
        /* istanbul ignore next */
        (cov_1thfd9zgyy().b[22][0]++, filePath.endsWith('.yaml')) ||
        /* istanbul ignore next */
        (cov_1thfd9zgyy().b[22][1]++, filePath.endsWith('.yml'))) {
          /* istanbul ignore next */
          cov_1thfd9zgyy().b[21][0]++;
          cov_1thfd9zgyy().s[64]++;
          return yamlLoad(content);
        } else {
          /* istanbul ignore next */
          cov_1thfd9zgyy().b[21][1]++;
          cov_1thfd9zgyy().s[65]++;
          if (filePath.endsWith('.js')) {
            /* istanbul ignore next */
            cov_1thfd9zgyy().b[23][0]++;
            // Dynamic import for JS config files
            const module =
            /* istanbul ignore next */
            (cov_1thfd9zgyy().s[66]++, await import(resolve(filePath)));
            /* istanbul ignore next */
            cov_1thfd9zgyy().s[67]++;
            return /* istanbul ignore next */(cov_1thfd9zgyy().b[24][0]++, module.default) ||
            /* istanbul ignore next */
            (cov_1thfd9zgyy().b[24][1]++, module);
          } else
          /* istanbul ignore next */
          {
            cov_1thfd9zgyy().b[23][1]++;
          }
        }
      }
      /* istanbul ignore next */
      cov_1thfd9zgyy().s[68]++;
      return null;
    } catch (error) {
      /* istanbul ignore next */
      cov_1thfd9zgyy().s[69]++;
      return null;
    }
  }
  /**
   * Load configuration from environment variables
   */
  loadEnvironmentConfig(prefix) {
    /* istanbul ignore next */
    cov_1thfd9zgyy().f[7]++;
    const config =
    /* istanbul ignore next */
    (cov_1thfd9zgyy().s[70]++, {});
    const envPrefix =
    /* istanbul ignore next */
    (cov_1thfd9zgyy().s[71]++, `${prefix}_`);
    // Simple environment variable mapping
    /* istanbul ignore next */
    cov_1thfd9zgyy().s[72]++;
    if (process.env[`${envPrefix}DEBUG`]) {
      /* istanbul ignore next */
      cov_1thfd9zgyy().b[25][0]++;
      cov_1thfd9zgyy().s[73]++;
      this.setNestedProperty(config, 'defaults.debug', process.env[`${envPrefix}DEBUG`] === 'true');
    } else
    /* istanbul ignore next */
    {
      cov_1thfd9zgyy().b[25][1]++;
    }
    cov_1thfd9zgyy().s[74]++;
    if (process.env[`${envPrefix}VERBOSE`]) {
      /* istanbul ignore next */
      cov_1thfd9zgyy().b[26][0]++;
      cov_1thfd9zgyy().s[75]++;
      this.setNestedProperty(config, 'defaults.verbose', process.env[`${envPrefix}VERBOSE`] === 'true');
    } else
    /* istanbul ignore next */
    {
      cov_1thfd9zgyy().b[26][1]++;
    }
    cov_1thfd9zgyy().s[76]++;
    return config;
  }
  /**
   * Set nested property in object
   */
  setNestedProperty(obj, path, value) {
    /* istanbul ignore next */
    cov_1thfd9zgyy().f[8]++;
    const keys =
    /* istanbul ignore next */
    (cov_1thfd9zgyy().s[77]++, path.split('.'));
    let current =
    /* istanbul ignore next */
    (cov_1thfd9zgyy().s[78]++, obj);
    /* istanbul ignore next */
    cov_1thfd9zgyy().s[79]++;
    for (let i =
    /* istanbul ignore next */
    (cov_1thfd9zgyy().s[80]++, 0); i < keys.length - 1; i++) {
      const key =
      /* istanbul ignore next */
      (cov_1thfd9zgyy().s[81]++, keys[i]);
      /* istanbul ignore next */
      cov_1thfd9zgyy().s[82]++;
      if (
      /* istanbul ignore next */
      (cov_1thfd9zgyy().b[28][0]++, !(key in current)) ||
      /* istanbul ignore next */
      (cov_1thfd9zgyy().b[28][1]++, typeof current[key] !== 'object')) {
        /* istanbul ignore next */
        cov_1thfd9zgyy().b[27][0]++;
        cov_1thfd9zgyy().s[83]++;
        current[key] = {};
      } else
      /* istanbul ignore next */
      {
        cov_1thfd9zgyy().b[27][1]++;
      }
      cov_1thfd9zgyy().s[84]++;
      current = current[key];
    }
    /* istanbul ignore next */
    cov_1thfd9zgyy().s[85]++;
    current[keys[keys.length - 1]] = value;
  }
  /**
   * Merge two configuration objects
   */
  mergeConfig(base, override) {
    /* istanbul ignore next */
    cov_1thfd9zgyy().f[9]++;
    cov_1thfd9zgyy().s[86]++;
    return this.deepMerge(base, override);
  }
  /**
   * Deep merge two objects
   */
  deepMerge(target, source) {
    /* istanbul ignore next */
    cov_1thfd9zgyy().f[10]++;
    const result =
    /* istanbul ignore next */
    (cov_1thfd9zgyy().s[87]++, {
      ...target
    });
    /* istanbul ignore next */
    cov_1thfd9zgyy().s[88]++;
    for (const key in source) {
      /* istanbul ignore next */
      cov_1thfd9zgyy().s[89]++;
      if (
      /* istanbul ignore next */
      (cov_1thfd9zgyy().b[30][0]++, source[key] !== null) &&
      /* istanbul ignore next */
      (cov_1thfd9zgyy().b[30][1]++, typeof source[key] === 'object') &&
      /* istanbul ignore next */
      (cov_1thfd9zgyy().b[30][2]++, !Array.isArray(source[key]))) {
        /* istanbul ignore next */
        cov_1thfd9zgyy().b[29][0]++;
        cov_1thfd9zgyy().s[90]++;
        result[key] = this.deepMerge(
        /* istanbul ignore next */
        (cov_1thfd9zgyy().b[31][0]++, target[key]) ||
        /* istanbul ignore next */
        (cov_1thfd9zgyy().b[31][1]++, {}), source[key]);
      } else {
        /* istanbul ignore next */
        cov_1thfd9zgyy().b[29][1]++;
        cov_1thfd9zgyy().s[91]++;
        result[key] = source[key];
      }
    }
    /* istanbul ignore next */
    cov_1thfd9zgyy().s[92]++;
    return result;
  }
  /**
   * Set configuration source information
   */
  setConfigSource(key, value, source, priority, path) {
    /* istanbul ignore next */
    cov_1thfd9zgyy().f[11]++;
    cov_1thfd9zgyy().s[93]++;
    this.configSources.set(key, {
      value,
      source,
      priority,
      path
    });
  }
  /**
   * Basic configuration validation
   */
  validate(config) {
    /* istanbul ignore next */
    cov_1thfd9zgyy().f[12]++;
    const errors =
    /* istanbul ignore next */
    (cov_1thfd9zgyy().s[94]++, []);
    const warnings =
    /* istanbul ignore next */
    (cov_1thfd9zgyy().s[95]++, []);
    // Basic validation checks
    /* istanbul ignore next */
    cov_1thfd9zgyy().s[96]++;
    if (!config.app?.name) {
      /* istanbul ignore next */
      cov_1thfd9zgyy().b[32][0]++;
      cov_1thfd9zgyy().s[97]++;
      errors.push('Application name is required');
    } else
    /* istanbul ignore next */
    {
      cov_1thfd9zgyy().b[32][1]++;
    }
    cov_1thfd9zgyy().s[98]++;
    if (!config.app?.version) {
      /* istanbul ignore next */
      cov_1thfd9zgyy().b[33][0]++;
      cov_1thfd9zgyy().s[99]++;
      errors.push('Application version is required');
    } else
    /* istanbul ignore next */
    {
      cov_1thfd9zgyy().b[33][1]++;
    }
    cov_1thfd9zgyy().s[100]++;
    if (
    /* istanbul ignore next */
    (cov_1thfd9zgyy().b[35][0]++, config.swarm?.maxAgents) &&
    /* istanbul ignore next */
    (cov_1thfd9zgyy().b[35][1]++, config.swarm.maxAgents < 1)) {
      /* istanbul ignore next */
      cov_1thfd9zgyy().b[34][0]++;
      cov_1thfd9zgyy().s[101]++;
      errors.push('Maximum agents must be at least 1');
    } else
    /* istanbul ignore next */
    {
      cov_1thfd9zgyy().b[34][1]++;
    }
    cov_1thfd9zgyy().s[102]++;
    return {
      valid: errors.length === 0,
      errors,
      warnings
    };
  }
  /**
   * Get current loaded configuration
   */
  getConfig() {
    /* istanbul ignore next */
    cov_1thfd9zgyy().f[13]++;
    cov_1thfd9zgyy().s[103]++;
    return this.loadedConfig;
  }
  /**
   * Get configuration sources
   */
  getConfigSources() {
    /* istanbul ignore next */
    cov_1thfd9zgyy().f[14]++;
    cov_1thfd9zgyy().s[104]++;
    return new Map(this.configSources);
  }
  /**
   * Reload configuration
   */
  async reload(options) {
    /* istanbul ignore next */
    cov_1thfd9zgyy().f[15]++;
    cov_1thfd9zgyy().s[105]++;
    this.loadedConfig = null;
    /* istanbul ignore next */
    cov_1thfd9zgyy().s[106]++;
    this.configSources.clear();
    /* istanbul ignore next */
    cov_1thfd9zgyy().s[107]++;
    return this.load(options);
  }
  /**
   * Check if configuration has been loaded
   */
  isLoaded() {
    /* istanbul ignore next */
    cov_1thfd9zgyy().f[16]++;
    cov_1thfd9zgyy().s[108]++;
    return this.loadedConfig !== null;
  }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,