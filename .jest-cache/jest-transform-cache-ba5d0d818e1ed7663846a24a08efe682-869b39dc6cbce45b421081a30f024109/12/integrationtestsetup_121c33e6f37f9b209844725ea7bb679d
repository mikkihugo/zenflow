1fb5c697c2291d17f64b2776e1a5b2a5
/* istanbul ignore next */
function cov_x0xtz7za9() {
  var path = "/home/mhugo/code/claude-code-flow/src/__tests__/helpers/integration-test-setup.ts";
  var hash = "3d7c560ddcc441052bef89e6945a7950ac748026";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/home/mhugo/code/claude-code-flow/src/__tests__/helpers/integration-test-setup.ts",
    statementMap: {
      "0": {
        start: {
          line: 11,
          column: 15
        },
        end: {
          line: 11,
          column: 17
        }
      },
      "1": {
        start: {
          line: 12,
          column: 16
        },
        end: {
          line: 12,
          column: 18
        }
      },
      "2": {
        start: {
          line: 13,
          column: 23
        },
        end: {
          line: 13,
          column: 25
        }
      },
      "3": {
        start: {
          line: 15,
          column: 8
        },
        end: {
          line: 25,
          column: 10
        }
      },
      "4": {
        start: {
          line: 31,
          column: 8
        },
        end: {
          line: 44,
          column: 9
        }
      },
      "5": {
        start: {
          line: 32,
          column: 29
        },
        end: {
          line: 32,
          column: 55
        }
      },
      "6": {
        start: {
          line: 33,
          column: 31
        },
        end: {
          line: 33,
          column: 59
        }
      },
      "7": {
        start: {
          line: 34,
          column: 28
        },
        end: {
          line: 34,
          column: 53
        }
      },
      "8": {
        start: {
          line: 36,
          column: 12
        },
        end: {
          line: 38,
          column: 13
        }
      },
      "9": {
        start: {
          line: 37,
          column: 16
        },
        end: {
          line: 37,
          column: 43
        }
      },
      "10": {
        start: {
          line: 39,
          column: 12
        },
        end: {
          line: 39,
          column: 53
        }
      },
      "11": {
        start: {
          line: 42,
          column: 12
        },
        end: {
          line: 42,
          column: 33
        }
      },
      "12": {
        start: {
          line: 43,
          column: 12
        },
        end: {
          line: 43,
          column: 24
        }
      },
      "13": {
        start: {
          line: 50,
          column: 32
        },
        end: {
          line: 54,
          column: 9
        }
      },
      "14": {
        start: {
          line: 51,
          column: 53
        },
        end: {
          line: 51,
          column: 63
        }
      },
      "15": {
        start: {
          line: 55,
          column: 8
        },
        end: {
          line: 55,
          column: 50
        }
      },
      "16": {
        start: {
          line: 56,
          column: 8
        },
        end: {
          line: 56,
          column: 35
        }
      },
      "17": {
        start: {
          line: 57,
          column: 8
        },
        end: {
          line: 57,
          column: 27
        }
      },
      "18": {
        start: {
          line: 58,
          column: 8
        },
        end: {
          line: 58,
          column: 28
        }
      },
      "19": {
        start: {
          line: 64,
          column: 24
        },
        end: {
          line: 64,
          column: 68
        }
      },
      "20": {
        start: {
          line: 65,
          column: 27
        },
        end: {
          line: 65,
          column: 60
        }
      },
      "21": {
        start: {
          line: 66,
          column: 24
        },
        end: {
          line: 71,
          column: 9
        }
      },
      "22": {
        start: {
          line: 73,
          column: 27
        },
        end: {
          line: 88,
          column: 9
        }
      },
      "23": {
        start: {
          line: 89,
          column: 8
        },
        end: {
          line: 89,
          column: 76
        }
      },
      "24": {
        start: {
          line: 90,
          column: 8
        },
        end: {
          line: 92,
          column: 11
        }
      },
      "25": {
        start: {
          line: 91,
          column: 12
        },
        end: {
          line: 91,
          column: 42
        }
      },
      "26": {
        start: {
          line: 93,
          column: 8
        },
        end: {
          line: 93,
          column: 48
        }
      },
      "27": {
        start: {
          line: 96,
          column: 23
        },
        end: {
          line: 96,
          column: 68
        }
      },
      "28": {
        start: {
          line: 97,
          column: 8
        },
        end: {
          line: 106,
          column: 9
        }
      },
      "29": {
        start: {
          line: 99,
          column: 16
        },
        end: {
          line: 99,
          column: 57
        }
      },
      "30": {
        start: {
          line: 101,
          column: 16
        },
        end: {
          line: 101,
          column: 63
        }
      },
      "31": {
        start: {
          line: 103,
          column: 16
        },
        end: {
          line: 103,
          column: 65
        }
      },
      "32": {
        start: {
          line: 105,
          column: 16
        },
        end: {
          line: 105,
          column: 72
        }
      },
      "33": {
        start: {
          line: 109,
          column: 23
        },
        end: {
          line: 109,
          column: 68
        }
      },
      "34": {
        start: {
          line: 110,
          column: 8
        },
        end: {
          line: 119,
          column: 9
        }
      },
      "35": {
        start: {
          line: 112,
          column: 16
        },
        end: {
          line: 112,
          column: 57
        }
      },
      "36": {
        start: {
          line: 114,
          column: 16
        },
        end: {
          line: 114,
          column: 63
        }
      },
      "37": {
        start: {
          line: 116,
          column: 16
        },
        end: {
          line: 116,
          column: 57
        }
      },
      "38": {
        start: {
          line: 118,
          column: 16
        },
        end: {
          line: 118,
          column: 74
        }
      },
      "39": {
        start: {
          line: 122,
          column: 28
        },
        end: {
          line: 122,
          column: 70
        }
      },
      "40": {
        start: {
          line: 123,
          column: 8
        },
        end: {
          line: 132,
          column: 9
        }
      },
      "41": {
        start: {
          line: 125,
          column: 16
        },
        end: {
          line: 125,
          column: 54
        }
      },
      "42": {
        start: {
          line: 127,
          column: 16
        },
        end: {
          line: 127,
          column: 65
        }
      },
      "43": {
        start: {
          line: 129,
          column: 16
        },
        end: {
          line: 129,
          column: 67
        }
      },
      "44": {
        start: {
          line: 131,
          column: 16
        },
        end: {
          line: 131,
          column: 76
        }
      },
      "45": {
        start: {
          line: 135,
          column: 25
        },
        end: {
          line: 135,
          column: 34
        }
      },
      "46": {
        start: {
          line: 136,
          column: 8
        },
        end: {
          line: 161,
          column: 10
        }
      },
      "47": {
        start: {
          line: 138,
          column: 16
        },
        end: {
          line: 138,
          column: 33
        }
      },
      "48": {
        start: {
          line: 141,
          column: 16
        },
        end: {
          line: 141,
          column: 33
        }
      },
      "49": {
        start: {
          line: 144,
          column: 16
        },
        end: {
          line: 146,
          column: 19
        }
      },
      "50": {
        start: {
          line: 145,
          column: 20
        },
        end: {
          line: 145,
          column: 56
        }
      },
      "51": {
        start: {
          line: 149,
          column: 16
        },
        end: {
          line: 149,
          column: 33
        }
      },
      "52": {
        start: {
          line: 152,
          column: 16
        },
        end: {
          line: 159,
          column: 18
        }
      },
      "53": {
        start: {
          line: 153,
          column: 34
        },
        end: {
          line: 153,
          column: 51
        }
      },
      "54": {
        start: {
          line: 154,
          column: 41
        },
        end: {
          line: 154,
          column: 65
        }
      },
      "55": {
        start: {
          line: 155,
          column: 37
        },
        end: {
          line: 155,
          column: 57
        }
      },
      "56": {
        start: {
          line: 156,
          column: 34
        },
        end: {
          line: 156,
          column: 51
        }
      },
      "57": {
        start: {
          line: 157,
          column: 33
        },
        end: {
          line: 157,
          column: 49
        }
      },
      "58": {
        start: {
          line: 158,
          column: 32
        },
        end: {
          line: 158,
          column: 45
        }
      },
      "59": {
        start: {
          line: 164,
          column: 23
        },
        end: {
          line: 164,
          column: 70
        }
      },
      "60": {
        start: {
          line: 165,
          column: 17
        },
        end: {
          line: 165,
          column: 21
        }
      },
      "61": {
        start: {
          line: 166,
          column: 8
        },
        end: {
          line: 238,
          column: 10
        }
      },
      "62": {
        start: {
          line: 169,
          column: 16
        },
        end: {
          line: 192,
          column: 17
        }
      },
      "63": {
        start: {
          line: 170,
          column: 36
        },
        end: {
          line: 170,
          column: 59
        }
      },
      "64": {
        start: {
          line: 171,
          column: 20
        },
        end: {
          line: 171,
          column: 54
        }
      },
      "65": {
        start: {
          line: 173,
          column: 20
        },
        end: {
          line: 187,
          column: 23
        }
      },
      "66": {
        start: {
          line: 174,
          column: 24
        },
        end: {
          line: 186,
          column: 27
        }
      },
      "67": {
        start: {
          line: 182,
          column: 28
        },
        end: {
          line: 185,
          column: 42
        }
      },
      "68": {
        start: {
          line: 183,
          column: 32
        },
        end: {
          line: 183,
          column: 44
        }
      },
      "69": {
        start: {
          line: 185,
          column: 32
        },
        end: {
          line: 185,
          column: 42
        }
      },
      "70": {
        start: {
          line: 190,
          column: 20
        },
        end: {
          line: 190,
          column: 90
        }
      },
      "71": {
        start: {
          line: 191,
          column: 20
        },
        end: {
          line: 191,
          column: 69
        }
      },
      "72": {
        start: {
          line: 195,
          column: 16
        },
        end: {
          line: 199,
          column: 17
        }
      },
      "73": {
        start: {
          line: 196,
          column: 20
        },
        end: {
          line: 198,
          column: 23
        }
      },
      "74": {
        start: {
          line: 197,
          column: 24
        },
        end: {
          line: 197,
          column: 50
        }
      },
      "75": {
        start: {
          line: 197,
          column: 39
        },
        end: {
          line: 197,
          column: 48
        }
      },
      "76": {
        start: {
          line: 200,
          column: 16
        },
        end: {
          line: 205,
          column: 17
        }
      },
      "77": {
        start: {
          line: 201,
          column: 20
        },
        end: {
          line: 201,
          column: 44
        }
      },
      "78": {
        start: {
          line: 208,
          column: 16
        },
        end: {
          line: 209,
          column: 27
        }
      },
      "79": {
        start: {
          line: 209,
          column: 20
        },
        end: {
          line: 209,
          column: 27
        }
      },
      "80": {
        start: {
          line: 210,
          column: 29
        },
        end: {
          line: 210,
          column: 102
        }
      },
      "81": {
        start: {
          line: 211,
          column: 16
        },
        end: {
          line: 220,
          column: 17
        }
      },
      "82": {
        start: {
          line: 212,
          column: 20
        },
        end: {
          line: 219,
          column: 23
        }
      },
      "83": {
        start: {
          line: 213,
          column: 24
        },
        end: {
          line: 218,
          column: 27
        }
      },
      "84": {
        start: {
          line: 214,
          column: 28
        },
        end: {
          line: 217,
          column: 42
        }
      },
      "85": {
        start: {
          line: 215,
          column: 32
        },
        end: {
          line: 215,
          column: 44
        }
      },
      "86": {
        start: {
          line: 217,
          column: 32
        },
        end: {
          line: 217,
          column: 42
        }
      },
      "87": {
        start: {
          line: 221,
          column: 16
        },
        end: {
          line: 221,
          column: 32
        }
      },
      "88": {
        start: {
          line: 224,
          column: 16
        },
        end: {
          line: 225,
          column: 27
        }
      },
      "89": {
        start: {
          line: 225,
          column: 20
        },
        end: {
          line: 225,
          column: 27
        }
      },
      "90": {
        start: {
          line: 226,
          column: 16
        },
        end: {
          line: 233,
          column: 19
        }
      },
      "91": {
        start: {
          line: 227,
          column: 20
        },
        end: {
          line: 232,
          column: 23
        }
      },
      "92": {
        start: {
          line: 228,
          column: 24
        },
        end: {
          line: 231,
          column: 38
        }
      },
      "93": {
        start: {
          line: 229,
          column: 28
        },
        end: {
          line: 229,
          column: 40
        }
      },
      "94": {
        start: {
          line: 231,
          column: 28
        },
        end: {
          line: 231,
          column: 38
        }
      },
      "95": {
        start: {
          line: 236,
          column: 16
        },
        end: {
          line: 236,
          column: 26
        }
      },
      "96": {
        start: {
          line: 243,
          column: 8
        },
        end: {
          line: 243,
          column: 86
        }
      },
      "97": {
        start: {
          line: 244,
          column: 8
        },
        end: {
          line: 244,
          column: 49
        }
      },
      "98": {
        start: {
          line: 247,
          column: 23
        },
        end: {
          line: 247,
          column: 32
        }
      },
      "99": {
        start: {
          line: 248,
          column: 8
        },
        end: {
          line: 266,
          column: 10
        }
      },
      "100": {
        start: {
          line: 250,
          column: 33
        },
        end: {
          line: 250,
          column: 59
        }
      },
      "101": {
        start: {
          line: 251,
          column: 16
        },
        end: {
          line: 251,
          column: 47
        }
      },
      "102": {
        start: {
          line: 252,
          column: 16
        },
        end: {
          line: 252,
          column: 32
        }
      },
      "103": {
        start: {
          line: 255,
          column: 16
        },
        end: {
          line: 255,
          column: 42
        }
      },
      "104": {
        start: {
          line: 258,
          column: 16
        },
        end: {
          line: 258,
          column: 31
        }
      },
      "105": {
        start: {
          line: 269,
          column: 26
        },
        end: {
          line: 269,
          column: 28
        }
      },
      "106": {
        start: {
          line: 270,
          column: 8
        },
        end: {
          line: 289,
          column: 10
        }
      },
      "107": {
        start: {
          line: 272,
          column: 33
        },
        end: {
          line: 272,
          column: 70
        }
      },
      "108": {
        start: {
          line: 273,
          column: 16
        },
        end: {
          line: 273,
          column: 41
        }
      },
      "109": {
        start: {
          line: 274,
          column: 16
        },
        end: {
          line: 274,
          column: 32
        }
      },
      "110": {
        start: {
          line: 277,
          column: 16
        },
        end: {
          line: 277,
          column: 58
        }
      },
      "111": {
        start: {
          line: 280,
          column: 16
        },
        end: {
          line: 280,
          column: 86
        }
      },
      "112": {
        start: {
          line: 280,
          column: 63
        },
        end: {
          line: 280,
          column: 83
        }
      },
      "113": {
        start: {
          line: 281,
          column: 16
        },
        end: {
          line: 281,
          column: 37
        }
      },
      "114": {
        start: {
          line: 292,
          column: 8
        },
        end: {
          line: 308,
          column: 10
        }
      },
      "115": {
        start: {
          line: 294,
          column: 16
        },
        end: {
          line: 294,
          column: 59
        }
      },
      "116": {
        start: {
          line: 297,
          column: 16
        },
        end: {
          line: 297,
          column: 58
        }
      },
      "117": {
        start: {
          line: 303,
          column: 16
        },
        end: {
          line: 303,
          column: 60
        }
      },
      "118": {
        start: {
          line: 306,
          column: 16
        },
        end: {
          line: 306,
          column: 68
        }
      },
      "119": {
        start: {
          line: 311,
          column: 29
        },
        end: {
          line: 311,
          column: 31
        }
      },
      "120": {
        start: {
          line: 312,
          column: 30
        },
        end: {
          line: 312,
          column: 39
        }
      },
      "121": {
        start: {
          line: 313,
          column: 8
        },
        end: {
          line: 330,
          column: 10
        }
      },
      "122": {
        start: {
          line: 318,
          column: 16
        },
        end: {
          line: 318,
          column: 40
        }
      },
      "123": {
        start: {
          line: 319,
          column: 16
        },
        end: {
          line: 319,
          column: 38
        }
      },
      "124": {
        start: {
          line: 322,
          column: 16
        },
        end: {
          line: 322,
          column: 50
        }
      },
      "125": {
        start: {
          line: 325,
          column: 16
        },
        end: {
          line: 325,
          column: 41
        }
      },
      "126": {
        start: {
          line: 328,
          column: 16
        },
        end: {
          line: 328,
          column: 40
        }
      },
      "127": {
        start: {
          line: 333,
          column: 21
        },
        end: {
          line: 333,
          column: 25
        }
      },
      "128": {
        start: {
          line: 334,
          column: 25
        },
        end: {
          line: 334,
          column: 27
        }
      },
      "129": {
        start: {
          line: 335,
          column: 23
        },
        end: {
          line: 335,
          column: 32
        }
      },
      "130": {
        start: {
          line: 336,
          column: 8
        },
        end: {
          line: 388,
          column: 10
        }
      },
      "131": {
        start: {
          line: 338,
          column: 16
        },
        end: {
          line: 369,
          column: 17
        }
      },
      "132": {
        start: {
          line: 339,
          column: 33
        },
        end: {
          line: 339,
          column: 53
        }
      },
      "133": {
        start: {
          line: 340,
          column: 20
        },
        end: {
          line: 357,
          column: 23
        }
      },
      "134": {
        start: {
          line: 341,
          column: 44
        },
        end: {
          line: 346,
          column: 25
        }
      },
      "135": {
        start: {
          line: 347,
          column: 24
        },
        end: {
          line: 347,
          column: 51
        }
      },
      "136": {
        start: {
          line: 348,
          column: 41
        },
        end: {
          line: 348,
          column: 67
        }
      },
      "137": {
        start: {
          line: 349,
          column: 24
        },
        end: {
          line: 356,
          column: 25
        }
      },
      "138": {
        start: {
          line: 350,
          column: 28
        },
        end: {
          line: 350,
          column: 87
        }
      },
      "139": {
        start: {
          line: 351,
          column: 28
        },
        end: {
          line: 351,
          column: 62
        }
      },
      "140": {
        start: {
          line: 354,
          column: 28
        },
        end: {
          line: 354,
          column: 47
        }
      },
      "141": {
        start: {
          line: 355,
          column: 28
        },
        end: {
          line: 355,
          column: 49
        }
      },
      "142": {
        start: {
          line: 358,
          column: 20
        },
        end: {
          line: 365,
          column: 23
        }
      },
      "143": {
        start: {
          line: 359,
          column: 24
        },
        end: {
          line: 364,
          column: 27
        }
      },
      "144": {
        start: {
          line: 360,
          column: 28
        },
        end: {
          line: 363,
          column: 42
        }
      },
      "145": {
        start: {
          line: 361,
          column: 32
        },
        end: {
          line: 361,
          column: 44
        }
      },
      "146": {
        start: {
          line: 363,
          column: 32
        },
        end: {
          line: 363,
          column: 42
        }
      },
      "147": {
        start: {
          line: 368,
          column: 20
        },
        end: {
          line: 368,
          column: 82
        }
      },
      "148": {
        start: {
          line: 372,
          column: 16
        },
        end: {
          line: 377,
          column: 17
        }
      },
      "149": {
        start: {
          line: 373,
          column: 20
        },
        end: {
          line: 375,
          column: 23
        }
      },
      "150": {
        start: {
          line: 374,
          column: 24
        },
        end: {
          line: 374,
          column: 54
        }
      },
      "151": {
        start: {
          line: 374,
          column: 43
        },
        end: {
          line: 374,
          column: 52
        }
      },
      "152": {
        start: {
          line: 376,
          column: 20
        },
        end: {
          line: 376,
          column: 34
        }
      },
      "153": {
        start: {
          line: 380,
          column: 16
        },
        end: {
          line: 380,
          column: 43
        }
      },
      "154": {
        start: {
          line: 383,
          column: 16
        },
        end: {
          line: 383,
          column: 37
        }
      },
      "155": {
        start: {
          line: 386,
          column: 16
        },
        end: {
          line: 386,
          column: 36
        }
      },
      "156": {
        start: {
          line: 392,
          column: 8
        },
        end: {
          line: 392,
          column: 73
        }
      },
      "157": {
        start: {
          line: 393,
          column: 8
        },
        end: {
          line: 393,
          column: 46
        }
      },
      "158": {
        start: {
          line: 400,
          column: 8
        },
        end: {
          line: 400,
          column: 91
        }
      },
      "159": {
        start: {
          line: 400,
          column: 63
        },
        end: {
          line: 400,
          column: 88
        }
      },
      "160": {
        start: {
          line: 401,
          column: 8
        },
        end: {
          line: 401,
          column: 28
        }
      },
      "161": {
        start: {
          line: 404,
          column: 8
        },
        end: {
          line: 419,
          column: 9
        }
      },
      "162": {
        start: {
          line: 405,
          column: 12
        },
        end: {
          line: 405,
          column: 36
        }
      },
      "163": {
        start: {
          line: 407,
          column: 12
        },
        end: {
          line: 418,
          column: 15
        }
      },
      "164": {
        start: {
          line: 408,
          column: 32
        },
        end: {
          line: 413,
          column: 24
        }
      },
      "165": {
        start: {
          line: 409,
          column: 20
        },
        end: {
          line: 411,
          column: 21
        }
      },
      "166": {
        start: {
          line: 410,
          column: 24
        },
        end: {
          line: 410,
          column: 48
        }
      },
      "167": {
        start: {
          line: 412,
          column: 20
        },
        end: {
          line: 412,
          column: 30
        }
      },
      "168": {
        start: {
          line: 414,
          column: 16
        },
        end: {
          line: 417,
          column: 19
        }
      },
      "169": {
        start: {
          line: 415,
          column: 20
        },
        end: {
          line: 415,
          column: 42
        }
      },
      "170": {
        start: {
          line: 416,
          column: 20
        },
        end: {
          line: 416,
          column: 30
        }
      },
      "171": {
        start: {
          line: 422,
          column: 25
        },
        end: {
          line: 422,
          column: 113
        }
      },
      "172": {
        start: {
          line: 423,
          column: 8
        },
        end: {
          line: 423,
          column: 54
        }
      },
      "173": {
        start: {
          line: 424,
          column: 8
        },
        end: {
          line: 424,
          column: 37
        }
      },
      "174": {
        start: {
          line: 425,
          column: 8
        },
        end: {
          line: 425,
          column: 24
        }
      },
      "175": {
        start: {
          line: 428,
          column: 8
        },
        end: {
          line: 433,
          column: 9
        }
      },
      "176": {
        start: {
          line: 429,
          column: 12
        },
        end: {
          line: 429,
          column: 64
        }
      },
      "177": {
        start: {
          line: 432,
          column: 12
        },
        end: {
          line: 432,
          column: 71
        }
      },
      "178": {
        start: {
          line: 436,
          column: 8
        },
        end: {
          line: 438,
          column: 9
        }
      },
      "179": {
        start: {
          line: 437,
          column: 12
        },
        end: {
          line: 437,
          column: 19
        }
      },
      "180": {
        start: {
          line: 439,
          column: 8
        },
        end: {
          line: 439,
          column: 80
        }
      },
      "181": {
        start: {
          line: 439,
          column: 58
        },
        end: {
          line: 439,
          column: 77
        }
      },
      "182": {
        start: {
          line: 440,
          column: 8
        },
        end: {
          line: 440,
          column: 33
        }
      },
      "183": {
        start: {
          line: 443,
          column: 8
        },
        end: {
          line: 443,
          column: 45
        }
      },
      "184": {
        start: {
          line: 446,
          column: 8
        },
        end: {
          line: 446,
          column: 65
        }
      },
      "185": {
        start: {
          line: 450,
          column: 36
        },
        end: {
          line: 450,
          column: 62
        }
      },
      "186": {
        start: {
          line: 453,
          column: 18
        },
        end: {
          line: 453,
          column: 50
        }
      },
      "187": {
        start: {
          line: 454,
          column: 4
        },
        end: {
          line: 454,
          column: 25
        }
      },
      "188": {
        start: {
          line: 457,
          column: 18
        },
        end: {
          line: 457,
          column: 50
        }
      },
      "189": {
        start: {
          line: 458,
          column: 4
        },
        end: {
          line: 458,
          column: 53
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 14,
            column: 4
          },
          end: {
            line: 14,
            column: 5
          }
        },
        loc: {
          start: {
            line: 14,
            column: 29
          },
          end: {
            line: 26,
            column: 5
          }
        },
        line: 14
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 30,
            column: 4
          },
          end: {
            line: 30,
            column: 5
          }
        },
        loc: {
          start: {
            line: 30,
            column: 18
          },
          end: {
            line: 45,
            column: 5
          }
        },
        line: 30
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 49,
            column: 4
          },
          end: {
            line: 49,
            column: 5
          }
        },
        loc: {
          start: {
            line: 49,
            column: 20
          },
          end: {
            line: 59,
            column: 5
          }
        },
        line: 49
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 51,
            column: 41
          },
          end: {
            line: 51,
            column: 42
          }
        },
        loc: {
          start: {
            line: 51,
            column: 53
          },
          end: {
            line: 51,
            column: 63
          }
        },
        line: 51
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 63,
            column: 4
          },
          end: {
            line: 63,
            column: 5
          }
        },
        loc: {
          start: {
            line: 63,
            column: 46
          },
          end: {
            line: 94,
            column: 5
          }
        },
        line: 63
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 90,
            column: 32
          },
          end: {
            line: 90,
            column: 33
          }
        },
        loc: {
          start: {
            line: 90,
            column: 44
          },
          end: {
            line: 92,
            column: 9
          }
        },
        line: 90
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 95,
            column: 4
          },
          end: {
            line: 95,
            column: 5
          }
        },
        loc: {
          start: {
            line: 95,
            column: 26
          },
          end: {
            line: 107,
            column: 5
          }
        },
        line: 95
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 108,
            column: 4
          },
          end: {
            line: 108,
            column: 5
          }
        },
        loc: {
          start: {
            line: 108,
            column: 28
          },
          end: {
            line: 120,
            column: 5
          }
        },
        line: 108
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 121,
            column: 4
          },
          end: {
            line: 121,
            column: 5
          }
        },
        loc: {
          start: {
            line: 121,
            column: 25
          },
          end: {
            line: 133,
            column: 5
          }
        },
        line: 121
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 134,
            column: 4
          },
          end: {
            line: 134,
            column: 5
          }
        },
        loc: {
          start: {
            line: 134,
            column: 33
          },
          end: {
            line: 162,
            column: 5
          }
        },
        line: 134
      },
      "10": {
        name: "(anonymous_10)",
        decl: {
          start: {
            line: 137,
            column: 12
          },
          end: {
            line: 137,
            column: 13
          }
        },
        loc: {
          start: {
            line: 137,
            column: 26
          },
          end: {
            line: 139,
            column: 13
          }
        },
        line: 137
      },
      "11": {
        name: "(anonymous_11)",
        decl: {
          start: {
            line: 140,
            column: 12
          },
          end: {
            line: 140,
            column: 13
          }
        },
        loc: {
          start: {
            line: 140,
            column: 28
          },
          end: {
            line: 142,
            column: 13
          }
        },
        line: 140
      },
      "12": {
        name: "(anonymous_12)",
        decl: {
          start: {
            line: 143,
            column: 12
          },
          end: {
            line: 143,
            column: 13
          }
        },
        loc: {
          start: {
            line: 143,
            column: 29
          },
          end: {
            line: 147,
            column: 13
          }
        },
        line: 143
      },
      "13": {
        name: "(anonymous_13)",
        decl: {
          start: {
            line: 144,
            column: 29
          },
          end: {
            line: 144,
            column: 30
          }
        },
        loc: {
          start: {
            line: 144,
            column: 46
          },
          end: {
            line: 146,
            column: 17
          }
        },
        line: 144
      },
      "14": {
        name: "(anonymous_14)",
        decl: {
          start: {
            line: 148,
            column: 12
          },
          end: {
            line: 148,
            column: 13
          }
        },
        loc: {
          start: {
            line: 148,
            column: 26
          },
          end: {
            line: 150,
            column: 13
          }
        },
        line: 148
      },
      "15": {
        name: "(anonymous_15)",
        decl: {
          start: {
            line: 151,
            column: 12
          },
          end: {
            line: 151,
            column: 13
          }
        },
        loc: {
          start: {
            line: 151,
            column: 28
          },
          end: {
            line: 160,
            column: 13
          }
        },
        line: 151
      },
      "16": {
        name: "(anonymous_16)",
        decl: {
          start: {
            line: 153,
            column: 25
          },
          end: {
            line: 153,
            column: 26
          }
        },
        loc: {
          start: {
            line: 153,
            column: 34
          },
          end: {
            line: 153,
            column: 51
          }
        },
        line: 153
      },
      "17": {
        name: "(anonymous_17)",
        decl: {
          start: {
            line: 154,
            column: 25
          },
          end: {
            line: 154,
            column: 26
          }
        },
        loc: {
          start: {
            line: 154,
            column: 41
          },
          end: {
            line: 154,
            column: 65
          }
        },
        line: 154
      },
      "18": {
        name: "(anonymous_18)",
        decl: {
          start: {
            line: 155,
            column: 28
          },
          end: {
            line: 155,
            column: 29
          }
        },
        loc: {
          start: {
            line: 155,
            column: 37
          },
          end: {
            line: 155,
            column: 57
          }
        },
        line: 155
      },
      "19": {
        name: "(anonymous_19)",
        decl: {
          start: {
            line: 156,
            column: 25
          },
          end: {
            line: 156,
            column: 26
          }
        },
        loc: {
          start: {
            line: 156,
            column: 34
          },
          end: {
            line: 156,
            column: 51
          }
        },
        line: 156
      },
      "20": {
        name: "(anonymous_20)",
        decl: {
          start: {
            line: 157,
            column: 27
          },
          end: {
            line: 157,
            column: 28
          }
        },
        loc: {
          start: {
            line: 157,
            column: 33
          },
          end: {
            line: 157,
            column: 49
          }
        },
        line: 157
      },
      "21": {
        name: "(anonymous_21)",
        decl: {
          start: {
            line: 158,
            column: 26
          },
          end: {
            line: 158,
            column: 27
          }
        },
        loc: {
          start: {
            line: 158,
            column: 32
          },
          end: {
            line: 158,
            column: 45
          }
        },
        line: 158
      },
      "22": {
        name: "(anonymous_22)",
        decl: {
          start: {
            line: 163,
            column: 4
          },
          end: {
            line: 163,
            column: 5
          }
        },
        loc: {
          start: {
            line: 163,
            column: 39
          },
          end: {
            line: 239,
            column: 5
          }
        },
        line: 163
      },
      "23": {
        name: "(anonymous_23)",
        decl: {
          start: {
            line: 167,
            column: 12
          },
          end: {
            line: 167,
            column: 13
          }
        },
        loc: {
          start: {
            line: 167,
            column: 26
          },
          end: {
            line: 193,
            column: 13
          }
        },
        line: 167
      },
      "24": {
        name: "(anonymous_24)",
        decl: {
          start: {
            line: 173,
            column: 38
          },
          end: {
            line: 173,
            column: 39
          }
        },
        loc: {
          start: {
            line: 173,
            column: 59
          },
          end: {
            line: 187,
            column: 21
          }
        },
        line: 173
      },
      "25": {
        name: "(anonymous_25)",
        decl: {
          start: {
            line: 181,
            column: 15
          },
          end: {
            line: 181,
            column: 16
          }
        },
        loc: {
          start: {
            line: 181,
            column: 24
          },
          end: {
            line: 186,
            column: 25
          }
        },
        line: 181
      },
      "26": {
        name: "(anonymous_26)",
        decl: {
          start: {
            line: 194,
            column: 12
          },
          end: {
            line: 194,
            column: 13
          }
        },
        loc: {
          start: {
            line: 194,
            column: 28
          },
          end: {
            line: 206,
            column: 13
          }
        },
        line: 194
      },
      "27": {
        name: "(anonymous_27)",
        decl: {
          start: {
            line: 196,
            column: 38
          },
          end: {
            line: 196,
            column: 39
          }
        },
        loc: {
          start: {
            line: 196,
            column: 51
          },
          end: {
            line: 198,
            column: 21
          }
        },
        line: 196
      },
      "28": {
        name: "(anonymous_28)",
        decl: {
          start: {
            line: 197,
            column: 33
          },
          end: {
            line: 197,
            column: 34
          }
        },
        loc: {
          start: {
            line: 197,
            column: 39
          },
          end: {
            line: 197,
            column: 48
          }
        },
        line: 197
      },
      "29": {
        name: "(anonymous_29)",
        decl: {
          start: {
            line: 207,
            column: 12
          },
          end: {
            line: 207,
            column: 13
          }
        },
        loc: {
          start: {
            line: 207,
            column: 29
          },
          end: {
            line: 222,
            column: 13
          }
        },
        line: 207
      },
      "30": {
        name: "(anonymous_30)",
        decl: {
          start: {
            line: 212,
            column: 38
          },
          end: {
            line: 212,
            column: 39
          }
        },
        loc: {
          start: {
            line: 212,
            column: 59
          },
          end: {
            line: 219,
            column: 21
          }
        },
        line: 212
      },
      "31": {
        name: "(anonymous_31)",
        decl: {
          start: {
            line: 213,
            column: 72
          },
          end: {
            line: 213,
            column: 73
          }
        },
        loc: {
          start: {
            line: 213,
            column: 81
          },
          end: {
            line: 218,
            column: 25
          }
        },
        line: 213
      },
      "32": {
        name: "(anonymous_32)",
        decl: {
          start: {
            line: 223,
            column: 12
          },
          end: {
            line: 223,
            column: 13
          }
        },
        loc: {
          start: {
            line: 223,
            column: 26
          },
          end: {
            line: 234,
            column: 13
          }
        },
        line: 223
      },
      "33": {
        name: "(anonymous_33)",
        decl: {
          start: {
            line: 226,
            column: 34
          },
          end: {
            line: 226,
            column: 35
          }
        },
        loc: {
          start: {
            line: 226,
            column: 55
          },
          end: {
            line: 233,
            column: 17
          }
        },
        line: 226
      },
      "34": {
        name: "(anonymous_34)",
        decl: {
          start: {
            line: 227,
            column: 52
          },
          end: {
            line: 227,
            column: 53
          }
        },
        loc: {
          start: {
            line: 227,
            column: 61
          },
          end: {
            line: 232,
            column: 21
          }
        },
        line: 227
      },
      "35": {
        name: "(anonymous_35)",
        decl: {
          start: {
            line: 235,
            column: 12
          },
          end: {
            line: 235,
            column: 13
          }
        },
        loc: {
          start: {
            line: 235,
            column: 28
          },
          end: {
            line: 237,
            column: 13
          }
        },
        line: 235
      },
      "36": {
        name: "(anonymous_36)",
        decl: {
          start: {
            line: 240,
            column: 4
          },
          end: {
            line: 240,
            column: 5
          }
        },
        loc: {
          start: {
            line: 240,
            column: 41
          },
          end: {
            line: 245,
            column: 5
          }
        },
        line: 240
      },
      "37": {
        name: "(anonymous_37)",
        decl: {
          start: {
            line: 246,
            column: 4
          },
          end: {
            line: 246,
            column: 5
          }
        },
        loc: {
          start: {
            line: 246,
            column: 33
          },
          end: {
            line: 267,
            column: 5
          }
        },
        line: 246
      },
      "38": {
        name: "(anonymous_38)",
        decl: {
          start: {
            line: 249,
            column: 12
          },
          end: {
            line: 249,
            column: 13
          }
        },
        loc: {
          start: {
            line: 249,
            column: 34
          },
          end: {
            line: 253,
            column: 13
          }
        },
        line: 249
      },
      "39": {
        name: "(anonymous_39)",
        decl: {
          start: {
            line: 254,
            column: 12
          },
          end: {
            line: 254,
            column: 13
          }
        },
        loc: {
          start: {
            line: 254,
            column: 44
          },
          end: {
            line: 256,
            column: 13
          }
        },
        line: 254
      },
      "40": {
        name: "(anonymous_40)",
        decl: {
          start: {
            line: 257,
            column: 12
          },
          end: {
            line: 257,
            column: 13
          }
        },
        loc: {
          start: {
            line: 257,
            column: 28
          },
          end: {
            line: 259,
            column: 13
          }
        },
        line: 257
      },
      "41": {
        name: "(anonymous_41)",
        decl: {
          start: {
            line: 260,
            column: 12
          },
          end: {
            line: 260,
            column: 13
          }
        },
        loc: {
          start: {
            line: 260,
            column: 29
          },
          end: {
            line: 262,
            column: 13
          }
        },
        line: 260
      },
      "42": {
        name: "(anonymous_42)",
        decl: {
          start: {
            line: 263,
            column: 12
          },
          end: {
            line: 263,
            column: 13
          }
        },
        loc: {
          start: {
            line: 263,
            column: 32
          },
          end: {
            line: 265,
            column: 13
          }
        },
        line: 263
      },
      "43": {
        name: "(anonymous_43)",
        decl: {
          start: {
            line: 268,
            column: 4
          },
          end: {
            line: 268,
            column: 5
          }
        },
        loc: {
          start: {
            line: 268,
            column: 39
          },
          end: {
            line: 290,
            column: 5
          }
        },
        line: 268
      },
      "44": {
        name: "(anonymous_44)",
        decl: {
          start: {
            line: 271,
            column: 12
          },
          end: {
            line: 271,
            column: 13
          }
        },
        loc: {
          start: {
            line: 271,
            column: 34
          },
          end: {
            line: 275,
            column: 13
          }
        },
        line: 271
      },
      "45": {
        name: "(anonymous_45)",
        decl: {
          start: {
            line: 276,
            column: 12
          },
          end: {
            line: 276,
            column: 13
          }
        },
        loc: {
          start: {
            line: 276,
            column: 44
          },
          end: {
            line: 278,
            column: 13
          }
        },
        line: 276
      },
      "46": {
        name: "(anonymous_46)",
        decl: {
          start: {
            line: 279,
            column: 12
          },
          end: {
            line: 279,
            column: 13
          }
        },
        loc: {
          start: {
            line: 279,
            column: 28
          },
          end: {
            line: 282,
            column: 13
          }
        },
        line: 279
      },
      "47": {
        name: "(anonymous_47)",
        decl: {
          start: {
            line: 280,
            column: 55
          },
          end: {
            line: 280,
            column: 56
          }
        },
        loc: {
          start: {
            line: 280,
            column: 63
          },
          end: {
            line: 280,
            column: 83
          }
        },
        line: 280
      },
      "48": {
        name: "(anonymous_48)",
        decl: {
          start: {
            line: 283,
            column: 12
          },
          end: {
            line: 283,
            column: 13
          }
        },
        loc: {
          start: {
            line: 283,
            column: 29
          },
          end: {
            line: 285,
            column: 13
          }
        },
        line: 283
      },
      "49": {
        name: "(anonymous_49)",
        decl: {
          start: {
            line: 286,
            column: 12
          },
          end: {
            line: 286,
            column: 13
          }
        },
        loc: {
          start: {
            line: 286,
            column: 32
          },
          end: {
            line: 288,
            column: 13
          }
        },
        line: 286
      },
      "50": {
        name: "(anonymous_50)",
        decl: {
          start: {
            line: 291,
            column: 4
          },
          end: {
            line: 291,
            column: 5
          }
        },
        loc: {
          start: {
            line: 291,
            column: 33
          },
          end: {
            line: 309,
            column: 5
          }
        },
        line: 291
      },
      "51": {
        name: "(anonymous_51)",
        decl: {
          start: {
            line: 293,
            column: 12
          },
          end: {
            line: 293,
            column: 13
          }
        },
        loc: {
          start: {
            line: 293,
            column: 34
          },
          end: {
            line: 295,
            column: 13
          }
        },
        line: 293
      },
      "52": {
        name: "(anonymous_52)",
        decl: {
          start: {
            line: 296,
            column: 12
          },
          end: {
            line: 296,
            column: 13
          }
        },
        loc: {
          start: {
            line: 296,
            column: 44
          },
          end: {
            line: 298,
            column: 13
          }
        },
        line: 296
      },
      "53": {
        name: "(anonymous_53)",
        decl: {
          start: {
            line: 299,
            column: 12
          },
          end: {
            line: 299,
            column: 13
          }
        },
        loc: {
          start: {
            line: 299,
            column: 28
          },
          end: {
            line: 301,
            column: 13
          }
        },
        line: 299
      },
      "54": {
        name: "(anonymous_54)",
        decl: {
          start: {
            line: 302,
            column: 12
          },
          end: {
            line: 302,
            column: 13
          }
        },
        loc: {
          start: {
            line: 302,
            column: 29
          },
          end: {
            line: 304,
            column: 13
          }
        },
        line: 302
      },
      "55": {
        name: "(anonymous_55)",
        decl: {
          start: {
            line: 305,
            column: 12
          },
          end: {
            line: 305,
            column: 13
          }
        },
        loc: {
          start: {
            line: 305,
            column: 32
          },
          end: {
            line: 307,
            column: 13
          }
        },
        line: 305
      },
      "56": {
        name: "(anonymous_56)",
        decl: {
          start: {
            line: 310,
            column: 4
          },
          end: {
            line: 310,
            column: 5
          }
        },
        loc: {
          start: {
            line: 310,
            column: 30
          },
          end: {
            line: 331,
            column: 5
          }
        },
        line: 310
      },
      "57": {
        name: "(anonymous_57)",
        decl: {
          start: {
            line: 314,
            column: 12
          },
          end: {
            line: 314,
            column: 13
          }
        },
        loc: {
          start: {
            line: 314,
            column: 40
          },
          end: {
            line: 316,
            column: 13
          }
        },
        line: 314
      },
      "58": {
        name: "(anonymous_58)",
        decl: {
          start: {
            line: 317,
            column: 12
          },
          end: {
            line: 317,
            column: 13
          }
        },
        loc: {
          start: {
            line: 317,
            column: 35
          },
          end: {
            line: 320,
            column: 13
          }
        },
        line: 317
      },
      "59": {
        name: "(anonymous_59)",
        decl: {
          start: {
            line: 321,
            column: 12
          },
          end: {
            line: 321,
            column: 13
          }
        },
        loc: {
          start: {
            line: 321,
            column: 40
          },
          end: {
            line: 323,
            column: 13
          }
        },
        line: 321
      },
      "60": {
        name: "(anonymous_60)",
        decl: {
          start: {
            line: 324,
            column: 12
          },
          end: {
            line: 324,
            column: 13
          }
        },
        loc: {
          start: {
            line: 324,
            column: 30
          },
          end: {
            line: 326,
            column: 13
          }
        },
        line: 324
      },
      "61": {
        name: "(anonymous_61)",
        decl: {
          start: {
            line: 327,
            column: 12
          },
          end: {
            line: 327,
            column: 13
          }
        },
        loc: {
          start: {
            line: 327,
            column: 28
          },
          end: {
            line: 329,
            column: 13
          }
        },
        line: 327
      },
      "62": {
        name: "(anonymous_62)",
        decl: {
          start: {
            line: 332,
            column: 4
          },
          end: {
            line: 332,
            column: 5
          }
        },
        loc: {
          start: {
            line: 332,
            column: 41
          },
          end: {
            line: 389,
            column: 5
          }
        },
        line: 332
      },
      "63": {
        name: "(anonymous_63)",
        decl: {
          start: {
            line: 337,
            column: 12
          },
          end: {
            line: 337,
            column: 13
          }
        },
        loc: {
          start: {
            line: 337,
            column: 63
          },
          end: {
            line: 370,
            column: 13
          }
        },
        line: 337
      },
      "64": {
        name: "(anonymous_64)",
        decl: {
          start: {
            line: 340,
            column: 47
          },
          end: {
            line: 340,
            column: 48
          }
        },
        loc: {
          start: {
            line: 340,
            column: 61
          },
          end: {
            line: 357,
            column: 21
          }
        },
        line: 340
      },
      "65": {
        name: "(anonymous_65)",
        decl: {
          start: {
            line: 358,
            column: 38
          },
          end: {
            line: 358,
            column: 39
          }
        },
        loc: {
          start: {
            line: 358,
            column: 59
          },
          end: {
            line: 365,
            column: 21
          }
        },
        line: 358
      },
      "66": {
        name: "(anonymous_66)",
        decl: {
          start: {
            line: 359,
            column: 44
          },
          end: {
            line: 359,
            column: 45
          }
        },
        loc: {
          start: {
            line: 359,
            column: 53
          },
          end: {
            line: 364,
            column: 25
          }
        },
        line: 359
      },
      "67": {
        name: "(anonymous_67)",
        decl: {
          start: {
            line: 371,
            column: 12
          },
          end: {
            line: 371,
            column: 13
          }
        },
        loc: {
          start: {
            line: 371,
            column: 35
          },
          end: {
            line: 378,
            column: 13
          }
        },
        line: 371
      },
      "68": {
        name: "(anonymous_68)",
        decl: {
          start: {
            line: 373,
            column: 38
          },
          end: {
            line: 373,
            column: 39
          }
        },
        loc: {
          start: {
            line: 373,
            column: 51
          },
          end: {
            line: 375,
            column: 21
          }
        },
        line: 373
      },
      "69": {
        name: "(anonymous_69)",
        decl: {
          start: {
            line: 374,
            column: 37
          },
          end: {
            line: 374,
            column: 38
          }
        },
        loc: {
          start: {
            line: 374,
            column: 43
          },
          end: {
            line: 374,
            column: 52
          }
        },
        line: 374
      },
      "70": {
        name: "(anonymous_70)",
        decl: {
          start: {
            line: 379,
            column: 12
          },
          end: {
            line: 379,
            column: 13
          }
        },
        loc: {
          start: {
            line: 379,
            column: 40
          },
          end: {
            line: 381,
            column: 13
          }
        },
        line: 379
      },
      "71": {
        name: "(anonymous_71)",
        decl: {
          start: {
            line: 382,
            column: 12
          },
          end: {
            line: 382,
            column: 13
          }
        },
        loc: {
          start: {
            line: 382,
            column: 30
          },
          end: {
            line: 384,
            column: 13
          }
        },
        line: 382
      },
      "72": {
        name: "(anonymous_72)",
        decl: {
          start: {
            line: 385,
            column: 12
          },
          end: {
            line: 385,
            column: 13
          }
        },
        loc: {
          start: {
            line: 385,
            column: 28
          },
          end: {
            line: 387,
            column: 13
          }
        },
        line: 385
      },
      "73": {
        name: "(anonymous_73)",
        decl: {
          start: {
            line: 390,
            column: 4
          },
          end: {
            line: 390,
            column: 5
          }
        },
        loc: {
          start: {
            line: 390,
            column: 43
          },
          end: {
            line: 394,
            column: 5
          }
        },
        line: 390
      },
      "74": {
        name: "(anonymous_74)",
        decl: {
          start: {
            line: 395,
            column: 4
          },
          end: {
            line: 395,
            column: 5
          }
        },
        loc: {
          start: {
            line: 395,
            column: 26
          },
          end: {
            line: 398,
            column: 5
          }
        },
        line: 395
      },
      "75": {
        name: "(anonymous_75)",
        decl: {
          start: {
            line: 399,
            column: 4
          },
          end: {
            line: 399,
            column: 5
          }
        },
        loc: {
          start: {
            line: 399,
            column: 25
          },
          end: {
            line: 402,
            column: 5
          }
        },
        line: 399
      },
      "76": {
        name: "(anonymous_76)",
        decl: {
          start: {
            line: 400,
            column: 52
          },
          end: {
            line: 400,
            column: 53
          }
        },
        loc: {
          start: {
            line: 400,
            column: 63
          },
          end: {
            line: 400,
            column: 88
          }
        },
        line: 400
      },
      "77": {
        name: "(anonymous_77)",
        decl: {
          start: {
            line: 403,
            column: 4
          },
          end: {
            line: 403,
            column: 5
          }
        },
        loc: {
          start: {
            line: 403,
            column: 31
          },
          end: {
            line: 420,
            column: 5
          }
        },
        line: 403
      },
      "78": {
        name: "(anonymous_78)",
        decl: {
          start: {
            line: 407,
            column: 30
          },
          end: {
            line: 407,
            column: 31
          }
        },
        loc: {
          start: {
            line: 407,
            column: 43
          },
          end: {
            line: 418,
            column: 13
          }
        },
        line: 407
      },
      "79": {
        name: "(anonymous_79)",
        decl: {
          start: {
            line: 408,
            column: 43
          },
          end: {
            line: 408,
            column: 44
          }
        },
        loc: {
          start: {
            line: 408,
            column: 49
          },
          end: {
            line: 413,
            column: 17
          }
        },
        line: 408
      },
      "80": {
        name: "(anonymous_80)",
        decl: {
          start: {
            line: 414,
            column: 35
          },
          end: {
            line: 414,
            column: 36
          }
        },
        loc: {
          start: {
            line: 414,
            column: 41
          },
          end: {
            line: 417,
            column: 17
          }
        },
        line: 414
      },
      "81": {
        name: "(anonymous_81)",
        decl: {
          start: {
            line: 421,
            column: 4
          },
          end: {
            line: 421,
            column: 5
          }
        },
        loc: {
          start: {
            line: 421,
            column: 41
          },
          end: {
            line: 426,
            column: 5
          }
        },
        line: 421
      },
      "82": {
        name: "(anonymous_82)",
        decl: {
          start: {
            line: 427,
            column: 4
          },
          end: {
            line: 427,
            column: 5
          }
        },
        loc: {
          start: {
            line: 427,
            column: 26
          },
          end: {
            line: 434,
            column: 5
          }
        },
        line: 427
      },
      "83": {
        name: "(anonymous_83)",
        decl: {
          start: {
            line: 435,
            column: 4
          },
          end: {
            line: 435,
            column: 5
          }
        },
        loc: {
          start: {
            line: 435,
            column: 28
          },
          end: {
            line: 441,
            column: 5
          }
        },
        line: 435
      },
      "84": {
        name: "(anonymous_84)",
        decl: {
          start: {
            line: 439,
            column: 51
          },
          end: {
            line: 439,
            column: 52
          }
        },
        loc: {
          start: {
            line: 439,
            column: 58
          },
          end: {
            line: 439,
            column: 77
          }
        },
        line: 439
      },
      "85": {
        name: "(anonymous_85)",
        decl: {
          start: {
            line: 442,
            column: 4
          },
          end: {
            line: 442,
            column: 5
          }
        },
        loc: {
          start: {
            line: 442,
            column: 33
          },
          end: {
            line: 444,
            column: 5
          }
        },
        line: 442
      },
      "86": {
        name: "(anonymous_86)",
        decl: {
          start: {
            line: 445,
            column: 4
          },
          end: {
            line: 445,
            column: 5
          }
        },
        loc: {
          start: {
            line: 445,
            column: 20
          },
          end: {
            line: 447,
            column: 5
          }
        },
        line: 445
      },
      "87": {
        name: "setupTestEnvironment",
        decl: {
          start: {
            line: 452,
            column: 22
          },
          end: {
            line: 452,
            column: 42
          }
        },
        loc: {
          start: {
            line: 452,
            column: 51
          },
          end: {
            line: 455,
            column: 1
          }
        },
        line: 452
      },
      "88": {
        name: "createTestWorkspace",
        decl: {
          start: {
            line: 456,
            column: 22
          },
          end: {
            line: 456,
            column: 41
          }
        },
        loc: {
          start: {
            line: 456,
            column: 60
          },
          end: {
            line: 459,
            column: 1
          }
        },
        line: 456
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 14,
            column: 16
          },
          end: {
            line: 14,
            column: 27
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 14,
            column: 25
          },
          end: {
            line: 14,
            column: 27
          }
        }],
        line: 14
      },
      "1": {
        loc: {
          start: {
            line: 36,
            column: 12
          },
          end: {
            line: 38,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 36,
            column: 12
          },
          end: {
            line: 38,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 36
      },
      "2": {
        loc: {
          start: {
            line: 36,
            column: 16
          },
          end: {
            line: 36,
            column: 71
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 36,
            column: 16
          },
          end: {
            line: 36,
            column: 36
          }
        }, {
          start: {
            line: 36,
            column: 40
          },
          end: {
            line: 36,
            column: 71
          }
        }],
        line: 36
      },
      "3": {
        loc: {
          start: {
            line: 77,
            column: 22
          },
          end: {
            line: 77,
            column: 67
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 77,
            column: 22
          },
          end: {
            line: 77,
            column: 55
          }
        }, {
          start: {
            line: 77,
            column: 59
          },
          end: {
            line: 77,
            column: 67
          }
        }],
        line: 77
      },
      "4": {
        loc: {
          start: {
            line: 78,
            column: 22
          },
          end: {
            line: 78,
            column: 108
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 78,
            column: 71
          },
          end: {
            line: 78,
            column: 95
          }
        }, {
          start: {
            line: 78,
            column: 98
          },
          end: {
            line: 78,
            column: 108
          }
        }],
        line: 78
      },
      "5": {
        loc: {
          start: {
            line: 82,
            column: 22
          },
          end: {
            line: 82,
            column: 67
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 82,
            column: 22
          },
          end: {
            line: 82,
            column: 57
          }
        }, {
          start: {
            line: 82,
            column: 61
          },
          end: {
            line: 82,
            column: 67
          }
        }],
        line: 82
      },
      "6": {
        loc: {
          start: {
            line: 85,
            column: 22
          },
          end: {
            line: 85,
            column: 64
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 85,
            column: 22
          },
          end: {
            line: 85,
            column: 54
          }
        }, {
          start: {
            line: 85,
            column: 58
          },
          end: {
            line: 85,
            column: 64
          }
        }],
        line: 85
      },
      "7": {
        loc: {
          start: {
            line: 96,
            column: 23
          },
          end: {
            line: 96,
            column: 68
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 96,
            column: 23
          },
          end: {
            line: 96,
            column: 56
          }
        }, {
          start: {
            line: 96,
            column: 60
          },
          end: {
            line: 96,
            column: 68
          }
        }],
        line: 96
      },
      "8": {
        loc: {
          start: {
            line: 97,
            column: 8
          },
          end: {
            line: 106,
            column: 9
          }
        },
        type: "switch",
        locations: [{
          start: {
            line: 98,
            column: 12
          },
          end: {
            line: 99,
            column: 57
          }
        }, {
          start: {
            line: 100,
            column: 12
          },
          end: {
            line: 101,
            column: 63
          }
        }, {
          start: {
            line: 102,
            column: 12
          },
          end: {
            line: 103,
            column: 65
          }
        }, {
          start: {
            line: 104,
            column: 12
          },
          end: {
            line: 105,
            column: 72
          }
        }],
        line: 97
      },
      "9": {
        loc: {
          start: {
            line: 109,
            column: 23
          },
          end: {
            line: 109,
            column: 68
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 109,
            column: 23
          },
          end: {
            line: 109,
            column: 58
          }
        }, {
          start: {
            line: 109,
            column: 62
          },
          end: {
            line: 109,
            column: 68
          }
        }],
        line: 109
      },
      "10": {
        loc: {
          start: {
            line: 110,
            column: 8
          },
          end: {
            line: 119,
            column: 9
          }
        },
        type: "switch",
        locations: [{
          start: {
            line: 111,
            column: 12
          },
          end: {
            line: 112,
            column: 57
          }
        }, {
          start: {
            line: 113,
            column: 12
          },
          end: {
            line: 114,
            column: 63
          }
        }, {
          start: {
            line: 115,
            column: 12
          },
          end: {
            line: 116,
            column: 57
          }
        }, {
          start: {
            line: 117,
            column: 12
          },
          end: {
            line: 118,
            column: 74
          }
        }],
        line: 110
      },
      "11": {
        loc: {
          start: {
            line: 122,
            column: 28
          },
          end: {
            line: 122,
            column: 70
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 122,
            column: 28
          },
          end: {
            line: 122,
            column: 60
          }
        }, {
          start: {
            line: 122,
            column: 64
          },
          end: {
            line: 122,
            column: 70
          }
        }],
        line: 122
      },
      "12": {
        loc: {
          start: {
            line: 123,
            column: 8
          },
          end: {
            line: 132,
            column: 9
          }
        },
        type: "switch",
        locations: [{
          start: {
            line: 124,
            column: 12
          },
          end: {
            line: 125,
            column: 54
          }
        }, {
          start: {
            line: 126,
            column: 12
          },
          end: {
            line: 127,
            column: 65
          }
        }, {
          start: {
            line: 128,
            column: 12
          },
          end: {
            line: 129,
            column: 67
          }
        }, {
          start: {
            line: 130,
            column: 12
          },
          end: {
            line: 131,
            column: 76
          }
        }],
        line: 123
      },
      "13": {
        loc: {
          start: {
            line: 182,
            column: 28
          },
          end: {
            line: 185,
            column: 42
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 182,
            column: 28
          },
          end: {
            line: 185,
            column: 42
          }
        }, {
          start: {
            line: 185,
            column: 32
          },
          end: {
            line: 185,
            column: 42
          }
        }],
        line: 182
      },
      "14": {
        loc: {
          start: {
            line: 195,
            column: 16
          },
          end: {
            line: 199,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 195,
            column: 16
          },
          end: {
            line: 199,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 195
      },
      "15": {
        loc: {
          start: {
            line: 208,
            column: 16
          },
          end: {
            line: 209,
            column: 27
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 208,
            column: 16
          },
          end: {
            line: 209,
            column: 27
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 208
      },
      "16": {
        loc: {
          start: {
            line: 214,
            column: 28
          },
          end: {
            line: 217,
            column: 42
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 214,
            column: 28
          },
          end: {
            line: 217,
            column: 42
          }
        }, {
          start: {
            line: 217,
            column: 32
          },
          end: {
            line: 217,
            column: 42
          }
        }],
        line: 214
      },
      "17": {
        loc: {
          start: {
            line: 224,
            column: 16
          },
          end: {
            line: 225,
            column: 27
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 224,
            column: 16
          },
          end: {
            line: 225,
            column: 27
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 224
      },
      "18": {
        loc: {
          start: {
            line: 228,
            column: 24
          },
          end: {
            line: 231,
            column: 38
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 228,
            column: 24
          },
          end: {
            line: 231,
            column: 38
          }
        }, {
          start: {
            line: 231,
            column: 28
          },
          end: {
            line: 231,
            column: 38
          }
        }],
        line: 228
      },
      "19": {
        loc: {
          start: {
            line: 337,
            column: 34
          },
          end: {
            line: 337,
            column: 61
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 337,
            column: 41
          },
          end: {
            line: 337,
            column: 61
          }
        }],
        line: 337
      },
      "20": {
        loc: {
          start: {
            line: 348,
            column: 52
          },
          end: {
            line: 348,
            column: 66
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 348,
            column: 52
          },
          end: {
            line: 348,
            column: 59
          }
        }, {
          start: {
            line: 348,
            column: 63
          },
          end: {
            line: 348,
            column: 66
          }
        }],
        line: 348
      },
      "21": {
        loc: {
          start: {
            line: 349,
            column: 24
          },
          end: {
            line: 356,
            column: 25
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 349,
            column: 24
          },
          end: {
            line: 356,
            column: 25
          }
        }, {
          start: {
            line: 353,
            column: 29
          },
          end: {
            line: 356,
            column: 25
          }
        }],
        line: 349
      },
      "22": {
        loc: {
          start: {
            line: 360,
            column: 28
          },
          end: {
            line: 363,
            column: 42
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 360,
            column: 28
          },
          end: {
            line: 363,
            column: 42
          }
        }, {
          start: {
            line: 363,
            column: 32
          },
          end: {
            line: 363,
            column: 42
          }
        }],
        line: 360
      },
      "23": {
        loc: {
          start: {
            line: 372,
            column: 16
          },
          end: {
            line: 377,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 372,
            column: 16
          },
          end: {
            line: 377,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 372
      },
      "24": {
        loc: {
          start: {
            line: 404,
            column: 8
          },
          end: {
            line: 419,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 404,
            column: 8
          },
          end: {
            line: 419,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 404
      },
      "25": {
        loc: {
          start: {
            line: 404,
            column: 12
          },
          end: {
            line: 404,
            column: 35
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 404,
            column: 12
          },
          end: {
            line: 404,
            column: 19
          }
        }, {
          start: {
            line: 404,
            column: 23
          },
          end: {
            line: 404,
            column: 35
          }
        }],
        line: 404
      },
      "26": {
        loc: {
          start: {
            line: 409,
            column: 20
          },
          end: {
            line: 411,
            column: 21
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 409,
            column: 20
          },
          end: {
            line: 411,
            column: 21
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 409
      },
      "27": {
        loc: {
          start: {
            line: 421,
            column: 24
          },
          end: {
            line: 421,
            column: 39
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 421,
            column: 33
          },
          end: {
            line: 421,
            column: 39
          }
        }],
        line: 421
      },
      "28": {
        loc: {
          start: {
            line: 436,
            column: 8
          },
          end: {
            line: 438,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 436,
            column: 8
          },
          end: {
            line: 438,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 436
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0,
      "74": 0,
      "75": 0,
      "76": 0,
      "77": 0,
      "78": 0,
      "79": 0,
      "80": 0,
      "81": 0,
      "82": 0,
      "83": 0,
      "84": 0,
      "85": 0,
      "86": 0,
      "87": 0,
      "88": 0,
      "89": 0,
      "90": 0,
      "91": 0,
      "92": 0,
      "93": 0,
      "94": 0,
      "95": 0,
      "96": 0,
      "97": 0,
      "98": 0,
      "99": 0,
      "100": 0,
      "101": 0,
      "102": 0,
      "103": 0,
      "104": 0,
      "105": 0,
      "106": 0,
      "107": 0,
      "108": 0,
      "109": 0,
      "110": 0,
      "111": 0,
      "112": 0,
      "113": 0,
      "114": 0,
      "115": 0,
      "116": 0,
      "117": 0,
      "118": 0,
      "119": 0,
      "120": 0,
      "121": 0,
      "122": 0,
      "123": 0,
      "124": 0,
      "125": 0,
      "126": 0,
      "127": 0,
      "128": 0,
      "129": 0,
      "130": 0,
      "131": 0,
      "132": 0,
      "133": 0,
      "134": 0,
      "135": 0,
      "136": 0,
      "137": 0,
      "138": 0,
      "139": 0,
      "140": 0,
      "141": 0,
      "142": 0,
      "143": 0,
      "144": 0,
      "145": 0,
      "146": 0,
      "147": 0,
      "148": 0,
      "149": 0,
      "150": 0,
      "151": 0,
      "152": 0,
      "153": 0,
      "154": 0,
      "155": 0,
      "156": 0,
      "157": 0,
      "158": 0,
      "159": 0,
      "160": 0,
      "161": 0,
      "162": 0,
      "163": 0,
      "164": 0,
      "165": 0,
      "166": 0,
      "167": 0,
      "168": 0,
      "169": 0,
      "170": 0,
      "171": 0,
      "172": 0,
      "173": 0,
      "174": 0,
      "175": 0,
      "176": 0,
      "177": 0,
      "178": 0,
      "179": 0,
      "180": 0,
      "181": 0,
      "182": 0,
      "183": 0,
      "184": 0,
      "185": 0,
      "186": 0,
      "187": 0,
      "188": 0,
      "189": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0,
      "74": 0,
      "75": 0,
      "76": 0,
      "77": 0,
      "78": 0,
      "79": 0,
      "80": 0,
      "81": 0,
      "82": 0,
      "83": 0,
      "84": 0,
      "85": 0,
      "86": 0,
      "87": 0,
      "88": 0
    },
    b: {
      "0": [0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0, 0, 0],
      "9": [0, 0],
      "10": [0, 0, 0, 0],
      "11": [0, 0],
      "12": [0, 0, 0, 0],
      "13": [0, 0],
      "14": [0, 0],
      "15": [0, 0],
      "16": [0, 0],
      "17": [0, 0],
      "18": [0, 0],
      "19": [0],
      "20": [0, 0],
      "21": [0, 0],
      "22": [0, 0],
      "23": [0, 0],
      "24": [0, 0],
      "25": [0, 0],
      "26": [0, 0],
      "27": [0],
      "28": [0, 0]
    },
    inputSourceMap: {
      file: "/home/mhugo/code/claude-code-flow/src/__tests__/helpers/integration-test-setup.ts",
      mappings: "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",
      names: [],
      sources: ["/home/mhugo/code/claude-code-flow/src/__tests__/helpers/integration-test-setup.ts"],
      sourcesContent: ["/**\n * Integration Test Setup - Environment Management\n * \n * Comprehensive setup and teardown for integration tests\n */\n\nimport { promises as fs } from 'fs';\nimport { join } from 'path';\nimport { tmpdir } from 'os';\nimport type { IntegrationTestConfig, DatabaseTestHelper, FileSystemTestHelper, NetworkTestHelper } from './types.js';\n\nexport class IntegrationTestSetup {\n  private config: IntegrationTestConfig;\n  private tempDirs: string[] = [];\n  private processes: any[] = [];\n  private cleanupCallbacks: Array<() => Promise<void>> = [];\n\n  constructor(config: IntegrationTestConfig = {}) {\n    this.config = {\n      environment: {\n        database: 'memory',\n        filesystem: 'temp',\n        network: 'mock'\n      },\n      services: [],\n      cleanup: 'aggressive',\n      timeout: 30000,\n      ...config\n    };\n  }\n\n  /**\n   * Setup the complete test environment\n   */\n  async setup(): Promise<{\n    database: DatabaseTestHelper;\n    filesystem: FileSystemTestHelper;\n    network: NetworkTestHelper;\n  }> {\n    try {\n      const database = await this.setupDatabase();\n      const filesystem = await this.setupFileSystem();\n      const network = await this.setupNetwork();\n\n      // Start required services\n      if (this.config.services && this.config.services.length > 0) {\n        await this.startServices();\n      }\n\n      return { database, filesystem, network };\n    } catch (error) {\n      await this.cleanup();\n      throw error;\n    }\n  }\n\n  /**\n   * Clean up the test environment\n   */\n  async cleanup(): Promise<void> {\n    const cleanupPromises = [\n      ...this.cleanupCallbacks.map(callback => callback()),\n      this.stopServices(),\n      this.cleanupTempDirs()\n    ];\n\n    await Promise.allSettled(cleanupPromises);\n    \n    this.cleanupCallbacks = [];\n    this.tempDirs = [];\n    this.processes = [];\n  }\n\n  /**\n   * Create isolated test environment\n   */\n  async createIsolatedEnvironment(testName: string): Promise<{\n    workDir: string;\n    configPath: string;\n    envVars: Record<string, string>;\n  }> {\n    const workDir = await this.createTempDir(`test-${testName}`);\n    const configPath = join(workDir, 'test-config.json');\n    \n    const envVars = {\n      NODE_ENV: 'test',\n      TEST_WORK_DIR: workDir,\n      TEST_CONFIG_PATH: configPath,\n      TEST_NAME: testName\n    };\n\n    // Create basic test configuration\n    const testConfig = {\n      name: testName,\n      workDir,\n      database: {\n        type: this.config.environment?.database || 'memory',\n        path: this.config.environment?.database === 'sqlite' ? join(workDir, 'test.db') : ':memory:'\n      },\n      filesystem: {\n        root: workDir,\n        type: this.config.environment?.filesystem || 'temp'\n      },\n      network: {\n        type: this.config.environment?.network || 'mock',\n        port: this.getRandomPort()\n      }\n    };\n\n    await fs.writeFile(configPath, JSON.stringify(testConfig, null, 2));\n\n    this.addCleanupCallback(async () => {\n      await this.removeDir(workDir);\n    });\n\n    return { workDir, configPath, envVars };\n  }\n\n  private async setupDatabase(): Promise<DatabaseTestHelper> {\n    const dbType = this.config.environment?.database || 'memory';\n\n    switch (dbType) {\n      case 'memory':\n        return this.createMemoryDatabaseHelper();\n      \n      case 'sqlite':\n        return await this.createSqliteDatabaseHelper();\n      \n      case 'postgres':\n        return await this.createPostgresDatabaseHelper();\n      \n      default:\n        throw new Error(`Unsupported database type: ${dbType}`);\n    }\n  }\n\n  private async setupFileSystem(): Promise<FileSystemTestHelper> {\n    const fsType = this.config.environment?.filesystem || 'temp';\n\n    switch (fsType) {\n      case 'mock':\n        return this.createMockFileSystemHelper();\n      \n      case 'temp':\n        return await this.createTempFileSystemHelper();\n      \n      case 'real':\n        return this.createRealFileSystemHelper();\n      \n      default:\n        throw new Error(`Unsupported filesystem type: ${fsType}`);\n    }\n  }\n\n  private async setupNetwork(): Promise<NetworkTestHelper> {\n    const networkType = this.config.environment?.network || 'mock';\n\n    switch (networkType) {\n      case 'mock':\n        return this.createMockNetworkHelper();\n      \n      case 'localhost':\n        return await this.createLocalhostNetworkHelper();\n      \n      case 'integration':\n        return await this.createIntegrationNetworkHelper();\n      \n      default:\n        throw new Error(`Unsupported network type: ${networkType}`);\n    }\n  }\n\n  private createMemoryDatabaseHelper(): DatabaseTestHelper {\n    const memoryDb = new Map<string, any>();\n\n    return {\n      async setup() {\n        memoryDb.clear();\n      },\n\n      async cleanup() {\n        memoryDb.clear();\n      },\n\n      async seed(data: any[]) {\n        data.forEach((item, index) => {\n          memoryDb.set(`item-${index}`, item);\n        });\n      },\n\n      async reset() {\n        memoryDb.clear();\n      },\n\n      getConnection() {\n        return {\n          get: (key: string) => memoryDb.get(key),\n          set: (key: string, value: any) => memoryDb.set(key, value),\n          delete: (key: string) => memoryDb.delete(key),\n          has: (key: string) => memoryDb.has(key),\n          clear: () => memoryDb.clear(),\n          size: () => memoryDb.size\n        };\n      }\n    };\n  }\n\n  private async createSqliteDatabaseHelper(): Promise<DatabaseTestHelper> {\n    const dbPath = join(await this.createTempDir('db'), 'test.db');\n    let db: any = null;\n\n    return {\n      async setup() {\n        // Import sqlite3 dynamically\n        try {\n          const sqlite3 = await import('sqlite3');\n          db = new sqlite3.Database(dbPath);\n          \n          // Create basic tables\n          await new Promise<void>((resolve, reject) => {\n            db.exec(`\n              CREATE TABLE IF NOT EXISTS test_data (\n                id INTEGER PRIMARY KEY AUTOINCREMENT,\n                key TEXT UNIQUE,\n                value TEXT,\n                created_at DATETIME DEFAULT CURRENT_TIMESTAMP\n              );\n            `, (err: any) => {\n              if (err) reject(err);\n              else resolve();\n            });\n          });\n        } catch (error) {\n          console.warn('SQLite not available, falling back to memory database');\n          return this.createMemoryDatabaseHelper().setup();\n        }\n      },\n\n      async cleanup() {\n        if (db) {\n          await new Promise<void>((resolve) => {\n            db.close(() => resolve());\n          });\n        }\n        try {\n          await fs.unlink(dbPath);\n        } catch (error) {\n          // File might not exist\n        }\n      },\n\n      async seed(data: any[]) {\n        if (!db) return;\n        \n        const stmt = db.prepare('INSERT OR REPLACE INTO test_data (key, value) VALUES (?, ?)');\n        \n        for (const [index, item] of data.entries()) {\n          await new Promise<void>((resolve, reject) => {\n            stmt.run(`item-${index}`, JSON.stringify(item), (err: any) => {\n              if (err) reject(err);\n              else resolve();\n            });\n          });\n        }\n        \n        stmt.finalize();\n      },\n\n      async reset() {\n        if (!db) return;\n        \n        await new Promise<void>((resolve, reject) => {\n          db.run('DELETE FROM test_data', (err: any) => {\n            if (err) reject(err);\n            else resolve();\n          });\n        });\n      },\n\n      getConnection() {\n        return db;\n      }\n    };\n  }\n\n  private async createPostgresDatabaseHelper(): Promise<DatabaseTestHelper> {\n    // This would require a PostgreSQL connection\n    // For now, return a mock implementation\n    console.warn('PostgreSQL integration not implemented, using memory database');\n    return this.createMemoryDatabaseHelper();\n  }\n\n  private createMockFileSystemHelper(): FileSystemTestHelper {\n    const mockFs = new Map<string, string>();\n\n    return {\n      async createTempDir(): Promise<string> {\n        const tempPath = `/mock/temp/${Date.now()}`;\n        mockFs.set(tempPath + '/', '');\n        return tempPath;\n      },\n\n      async createFile(path: string, content: string): Promise<void> {\n        mockFs.set(path, content);\n      },\n\n      async cleanup(): Promise<void> {\n        mockFs.clear();\n      },\n\n      mockFileSystem(): void {\n        // Already mocked\n      },\n\n      restoreFileSystem(): void {\n        // Nothing to restore\n      }\n    };\n  }\n\n  private async createTempFileSystemHelper(): Promise<FileSystemTestHelper> {\n    const tempPaths: string[] = [];\n\n    return {\n      async createTempDir(): Promise<string> {\n        const tempPath = await this.createTempDir('fs-helper');\n        tempPaths.push(tempPath);\n        return tempPath;\n      },\n\n      async createFile(path: string, content: string): Promise<void> {\n        await fs.writeFile(path, content, 'utf8');\n      },\n\n      async cleanup(): Promise<void> {\n        await Promise.allSettled(\n          tempPaths.map(path => this.removeDir(path))\n        );\n        tempPaths.length = 0;\n      },\n\n      mockFileSystem(): void {\n        // Real filesystem, no mocking needed\n      },\n\n      restoreFileSystem(): void {\n        // Real filesystem, no restoration needed\n      }\n    };\n  }\n\n  private createRealFileSystemHelper(): FileSystemTestHelper {\n    return {\n      async createTempDir(): Promise<string> {\n        return await this.createTempDir('real-fs');\n      },\n\n      async createFile(path: string, content: string): Promise<void> {\n        await fs.writeFile(path, content, 'utf8');\n      },\n\n      async cleanup(): Promise<void> {\n        // Cleanup handled by main cleanup\n      },\n\n      mockFileSystem(): void {\n        console.warn('Cannot mock real filesystem');\n      },\n\n      restoreFileSystem(): void {\n        console.warn('Real filesystem, nothing to restore');\n      }\n    };\n  }\n\n  private createMockNetworkHelper(): NetworkTestHelper {\n    const mockRequests: any[] = [];\n    const mockResponses = new Map<string, any>();\n\n    return {\n      async startMockServer(port?: number): Promise<void> {\n        // Mock server is always \"running\"\n      },\n\n      async stopMockServer(): Promise<void> {\n        mockRequests.length = 0;\n        mockResponses.clear();\n      },\n\n      mockRequest(path: string, response: any): void {\n        mockResponses.set(path, response);\n      },\n\n      captureRequests(): any[] {\n        return [...mockRequests];\n      },\n\n      clearRequests(): void {\n        mockRequests.length = 0;\n      }\n    };\n  }\n\n  private async createLocalhostNetworkHelper(): Promise<NetworkTestHelper> {\n    let server: any = null;\n    const requests: any[] = [];\n    const routes = new Map<string, any>();\n\n    return {\n      async startMockServer(port: number = this.getRandomPort()): Promise<void> {\n        try {\n          const http = await import('http');\n          \n          server = http.createServer((req, res) => {\n            const requestData = {\n              method: req.method,\n              url: req.url,\n              headers: req.headers,\n              timestamp: Date.now()\n            };\n            \n            requests.push(requestData);\n            \n            const response = routes.get(req.url || '/');\n            if (response) {\n              res.writeHead(200, { 'Content-Type': 'application/json' });\n              res.end(JSON.stringify(response));\n            } else {\n              res.writeHead(404);\n              res.end('Not Found');\n            }\n          });\n          \n          await new Promise<void>((resolve, reject) => {\n            server.listen(port, (err: any) => {\n              if (err) reject(err);\n              else resolve();\n            });\n          });\n        } catch (error) {\n          console.warn('HTTP server not available, using mock network');\n        }\n      },\n\n      async stopMockServer(): Promise<void> {\n        if (server) {\n          await new Promise<void>((resolve) => {\n            server.close(() => resolve());\n          });\n          server = null;\n        }\n      },\n\n      mockRequest(path: string, response: any): void {\n        routes.set(path, response);\n      },\n\n      captureRequests(): any[] {\n        return [...requests];\n      },\n\n      clearRequests(): void {\n        requests.length = 0;\n      }\n    };\n  }\n\n  private async createIntegrationNetworkHelper(): Promise<NetworkTestHelper> {\n    // For integration tests, we might want to test against real services\n    console.warn('Integration network helper not fully implemented');\n    return this.createMockNetworkHelper();\n  }\n\n  private async startServices(): Promise<void> {\n    // Service startup logic would go here\n    // This is a placeholder for starting required services like databases, message queues, etc.\n  }\n\n  private async stopServices(): Promise<void> {\n    await Promise.allSettled(\n      this.processes.map(process => this.stopProcess(process))\n    );\n    this.processes = [];\n  }\n\n  private async stopProcess(process: any): Promise<void> {\n    if (process && process.kill) {\n      process.kill('SIGTERM');\n      \n      // Wait for graceful shutdown\n      await new Promise<void>((resolve) => {\n        const timeout = setTimeout(() => {\n          if (process.kill) {\n            process.kill('SIGKILL');\n          }\n          resolve();\n        }, 5000);\n        \n        process.on('exit', () => {\n          clearTimeout(timeout);\n          resolve();\n        });\n      });\n    }\n  }\n\n  private async createTempDir(prefix: string = 'test'): Promise<string> {\n    const tempPath = join(tmpdir(), `claude-code-flow-${prefix}-${Date.now()}-${Math.random().toString(36)}`);\n    await fs.mkdir(tempPath, { recursive: true });\n    this.tempDirs.push(tempPath);\n    return tempPath;\n  }\n\n  private async removeDir(path: string): Promise<void> {\n    try {\n      await fs.rm(path, { recursive: true, force: true });\n    } catch (error) {\n      console.warn(`Failed to remove directory ${path}:`, error);\n    }\n  }\n\n  private async cleanupTempDirs(): Promise<void> {\n    if (this.config.cleanup === 'manual') {\n      return;\n    }\n\n    await Promise.allSettled(\n      this.tempDirs.map(dir => this.removeDir(dir))\n    );\n    \n    this.tempDirs.length = 0;\n  }\n\n  private addCleanupCallback(callback: () => Promise<void>): void {\n    this.cleanupCallbacks.push(callback);\n  }\n\n  private getRandomPort(): number {\n    return Math.floor(Math.random() * (65535 - 3000) + 3000);\n  }\n}\n\n// Global integration test setup instance\nexport const integrationTestSetup = new IntegrationTestSetup();\n\n// Convenience functions\nexport async function setupTestEnvironment(config?: IntegrationTestConfig) {\n  const setup = new IntegrationTestSetup(config);\n  return setup.setup();\n}\n\nexport async function createTestWorkspace(testName: string, config?: IntegrationTestConfig) {\n  const setup = new IntegrationTestSetup(config);\n  return setup.createIsolatedEnvironment(testName);\n}"],
      version: 3
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "3d7c560ddcc441052bef89e6945a7950ac748026"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_x0xtz7za9 = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_x0xtz7za9();
/**
 * Integration Test Setup - Environment Management
 *
 * Comprehensive setup and teardown for integration tests
 */
import { promises as fs } from 'fs';
import { join } from 'path';
import { tmpdir } from 'os';
export class IntegrationTestSetup {
  config;
  tempDirs =
  /* istanbul ignore next */
  (cov_x0xtz7za9().s[0]++, []);
  processes =
  /* istanbul ignore next */
  (cov_x0xtz7za9().s[1]++, []);
  cleanupCallbacks =
  /* istanbul ignore next */
  (cov_x0xtz7za9().s[2]++, []);
  constructor(config =
  /* istanbul ignore next */
  (cov_x0xtz7za9().b[0][0]++, {})) {
    /* istanbul ignore next */
    cov_x0xtz7za9().f[0]++;
    cov_x0xtz7za9().s[3]++;
    this.config = {
      environment: {
        database: 'memory',
        filesystem: 'temp',
        network: 'mock'
      },
      services: [],
      cleanup: 'aggressive',
      timeout: 30000,
      ...config
    };
  }
  /**
   * Setup the complete test environment
   */
  async setup() {
    /* istanbul ignore next */
    cov_x0xtz7za9().f[1]++;
    cov_x0xtz7za9().s[4]++;
    try {
      const database =
      /* istanbul ignore next */
      (cov_x0xtz7za9().s[5]++, await this.setupDatabase());
      const filesystem =
      /* istanbul ignore next */
      (cov_x0xtz7za9().s[6]++, await this.setupFileSystem());
      const network =
      /* istanbul ignore next */
      (cov_x0xtz7za9().s[7]++, await this.setupNetwork());
      // Start required services
      /* istanbul ignore next */
      cov_x0xtz7za9().s[8]++;
      if (
      /* istanbul ignore next */
      (cov_x0xtz7za9().b[2][0]++, this.config.services) &&
      /* istanbul ignore next */
      (cov_x0xtz7za9().b[2][1]++, this.config.services.length > 0)) {
        /* istanbul ignore next */
        cov_x0xtz7za9().b[1][0]++;
        cov_x0xtz7za9().s[9]++;
        await this.startServices();
      } else
      /* istanbul ignore next */
      {
        cov_x0xtz7za9().b[1][1]++;
      }
      cov_x0xtz7za9().s[10]++;
      return {
        database,
        filesystem,
        network
      };
    } catch (error) {
      /* istanbul ignore next */
      cov_x0xtz7za9().s[11]++;
      await this.cleanup();
      /* istanbul ignore next */
      cov_x0xtz7za9().s[12]++;
      throw error;
    }
  }
  /**
   * Clean up the test environment
   */
  async cleanup() {
    /* istanbul ignore next */
    cov_x0xtz7za9().f[2]++;
    const cleanupPromises =
    /* istanbul ignore next */
    (cov_x0xtz7za9().s[13]++, [...this.cleanupCallbacks.map(callback => {
      /* istanbul ignore next */
      cov_x0xtz7za9().f[3]++;
      cov_x0xtz7za9().s[14]++;
      return callback();
    }), this.stopServices(), this.cleanupTempDirs()]);
    /* istanbul ignore next */
    cov_x0xtz7za9().s[15]++;
    await Promise.allSettled(cleanupPromises);
    /* istanbul ignore next */
    cov_x0xtz7za9().s[16]++;
    this.cleanupCallbacks = [];
    /* istanbul ignore next */
    cov_x0xtz7za9().s[17]++;
    this.tempDirs = [];
    /* istanbul ignore next */
    cov_x0xtz7za9().s[18]++;
    this.processes = [];
  }
  /**
   * Create isolated test environment
   */
  async createIsolatedEnvironment(testName) {
    /* istanbul ignore next */
    cov_x0xtz7za9().f[4]++;
    const workDir =
    /* istanbul ignore next */
    (cov_x0xtz7za9().s[19]++, await this.createTempDir(`test-${testName}`));
    const configPath =
    /* istanbul ignore next */
    (cov_x0xtz7za9().s[20]++, join(workDir, 'test-config.json'));
    const envVars =
    /* istanbul ignore next */
    (cov_x0xtz7za9().s[21]++, {
      NODE_ENV: 'test',
      TEST_WORK_DIR: workDir,
      TEST_CONFIG_PATH: configPath,
      TEST_NAME: testName
    });
    // Create basic test configuration
    const testConfig =
    /* istanbul ignore next */
    (cov_x0xtz7za9().s[22]++, {
      name: testName,
      workDir,
      database: {
        type:
        /* istanbul ignore next */
        (cov_x0xtz7za9().b[3][0]++, this.config.environment?.database) ||
        /* istanbul ignore next */
        (cov_x0xtz7za9().b[3][1]++, 'memory'),
        path: this.config.environment?.database === 'sqlite' ?
        /* istanbul ignore next */
        (cov_x0xtz7za9().b[4][0]++, join(workDir, 'test.db')) :
        /* istanbul ignore next */
        (cov_x0xtz7za9().b[4][1]++, ':memory:')
      },
      filesystem: {
        root: workDir,
        type:
        /* istanbul ignore next */
        (cov_x0xtz7za9().b[5][0]++, this.config.environment?.filesystem) ||
        /* istanbul ignore next */
        (cov_x0xtz7za9().b[5][1]++, 'temp')
      },
      network: {
        type:
        /* istanbul ignore next */
        (cov_x0xtz7za9().b[6][0]++, this.config.environment?.network) ||
        /* istanbul ignore next */
        (cov_x0xtz7za9().b[6][1]++, 'mock'),
        port: this.getRandomPort()
      }
    });
    /* istanbul ignore next */
    cov_x0xtz7za9().s[23]++;
    await fs.writeFile(configPath, JSON.stringify(testConfig, null, 2));
    /* istanbul ignore next */
    cov_x0xtz7za9().s[24]++;
    this.addCleanupCallback(async () => {
      /* istanbul ignore next */
      cov_x0xtz7za9().f[5]++;
      cov_x0xtz7za9().s[25]++;
      await this.removeDir(workDir);
    });
    /* istanbul ignore next */
    cov_x0xtz7za9().s[26]++;
    return {
      workDir,
      configPath,
      envVars
    };
  }
  async setupDatabase() {
    /* istanbul ignore next */
    cov_x0xtz7za9().f[6]++;
    const dbType =
    /* istanbul ignore next */
    (cov_x0xtz7za9().s[27]++,
    /* istanbul ignore next */
    (cov_x0xtz7za9().b[7][0]++, this.config.environment?.database) ||
    /* istanbul ignore next */
    (cov_x0xtz7za9().b[7][1]++, 'memory'));
    /* istanbul ignore next */
    cov_x0xtz7za9().s[28]++;
    switch (dbType) {
      case 'memory':
        /* istanbul ignore next */
        cov_x0xtz7za9().b[8][0]++;
        cov_x0xtz7za9().s[29]++;
        return this.createMemoryDatabaseHelper();
      case 'sqlite':
        /* istanbul ignore next */
        cov_x0xtz7za9().b[8][1]++;
        cov_x0xtz7za9().s[30]++;
        return await this.createSqliteDatabaseHelper();
      case 'postgres':
        /* istanbul ignore next */
        cov_x0xtz7za9().b[8][2]++;
        cov_x0xtz7za9().s[31]++;
        return await this.createPostgresDatabaseHelper();
      default:
        /* istanbul ignore next */
        cov_x0xtz7za9().b[8][3]++;
        cov_x0xtz7za9().s[32]++;
        throw new Error(`Unsupported database type: ${dbType}`);
    }
  }
  async setupFileSystem() {
    /* istanbul ignore next */
    cov_x0xtz7za9().f[7]++;
    const fsType =
    /* istanbul ignore next */
    (cov_x0xtz7za9().s[33]++,
    /* istanbul ignore next */
    (cov_x0xtz7za9().b[9][0]++, this.config.environment?.filesystem) ||
    /* istanbul ignore next */
    (cov_x0xtz7za9().b[9][1]++, 'temp'));
    /* istanbul ignore next */
    cov_x0xtz7za9().s[34]++;
    switch (fsType) {
      case 'mock':
        /* istanbul ignore next */
        cov_x0xtz7za9().b[10][0]++;
        cov_x0xtz7za9().s[35]++;
        return this.createMockFileSystemHelper();
      case 'temp':
        /* istanbul ignore next */
        cov_x0xtz7za9().b[10][1]++;
        cov_x0xtz7za9().s[36]++;
        return await this.createTempFileSystemHelper();
      case 'real':
        /* istanbul ignore next */
        cov_x0xtz7za9().b[10][2]++;
        cov_x0xtz7za9().s[37]++;
        return this.createRealFileSystemHelper();
      default:
        /* istanbul ignore next */
        cov_x0xtz7za9().b[10][3]++;
        cov_x0xtz7za9().s[38]++;
        throw new Error(`Unsupported filesystem type: ${fsType}`);
    }
  }
  async setupNetwork() {
    /* istanbul ignore next */
    cov_x0xtz7za9().f[8]++;
    const networkType =
    /* istanbul ignore next */
    (cov_x0xtz7za9().s[39]++,
    /* istanbul ignore next */
    (cov_x0xtz7za9().b[11][0]++, this.config.environment?.network) ||
    /* istanbul ignore next */
    (cov_x0xtz7za9().b[11][1]++, 'mock'));
    /* istanbul ignore next */
    cov_x0xtz7za9().s[40]++;
    switch (networkType) {
      case 'mock':
        /* istanbul ignore next */
        cov_x0xtz7za9().b[12][0]++;
        cov_x0xtz7za9().s[41]++;
        return this.createMockNetworkHelper();
      case 'localhost':
        /* istanbul ignore next */
        cov_x0xtz7za9().b[12][1]++;
        cov_x0xtz7za9().s[42]++;
        return await this.createLocalhostNetworkHelper();
      case 'integration':
        /* istanbul ignore next */
        cov_x0xtz7za9().b[12][2]++;
        cov_x0xtz7za9().s[43]++;
        return await this.createIntegrationNetworkHelper();
      default:
        /* istanbul ignore next */
        cov_x0xtz7za9().b[12][3]++;
        cov_x0xtz7za9().s[44]++;
        throw new Error(`Unsupported network type: ${networkType}`);
    }
  }
  createMemoryDatabaseHelper() {
    /* istanbul ignore next */
    cov_x0xtz7za9().f[9]++;
    const memoryDb =
    /* istanbul ignore next */
    (cov_x0xtz7za9().s[45]++, new Map());
    /* istanbul ignore next */
    cov_x0xtz7za9().s[46]++;
    return {
      async setup() {
        /* istanbul ignore next */
        cov_x0xtz7za9().f[10]++;
        cov_x0xtz7za9().s[47]++;
        memoryDb.clear();
      },
      async cleanup() {
        /* istanbul ignore next */
        cov_x0xtz7za9().f[11]++;
        cov_x0xtz7za9().s[48]++;
        memoryDb.clear();
      },
      async seed(data) {
        /* istanbul ignore next */
        cov_x0xtz7za9().f[12]++;
        cov_x0xtz7za9().s[49]++;
        data.forEach((item, index) => {
          /* istanbul ignore next */
          cov_x0xtz7za9().f[13]++;
          cov_x0xtz7za9().s[50]++;
          memoryDb.set(`item-${index}`, item);
        });
      },
      async reset() {
        /* istanbul ignore next */
        cov_x0xtz7za9().f[14]++;
        cov_x0xtz7za9().s[51]++;
        memoryDb.clear();
      },
      getConnection() {
        /* istanbul ignore next */
        cov_x0xtz7za9().f[15]++;
        cov_x0xtz7za9().s[52]++;
        return {
          get: key => {
            /* istanbul ignore next */
            cov_x0xtz7za9().f[16]++;
            cov_x0xtz7za9().s[53]++;
            return memoryDb.get(key);
          },
          set: (key, value) => {
            /* istanbul ignore next */
            cov_x0xtz7za9().f[17]++;
            cov_x0xtz7za9().s[54]++;
            return memoryDb.set(key, value);
          },
          delete: key => {
            /* istanbul ignore next */
            cov_x0xtz7za9().f[18]++;
            cov_x0xtz7za9().s[55]++;
            return memoryDb.delete(key);
          },
          has: key => {
            /* istanbul ignore next */
            cov_x0xtz7za9().f[19]++;
            cov_x0xtz7za9().s[56]++;
            return memoryDb.has(key);
          },
          clear: () => {
            /* istanbul ignore next */
            cov_x0xtz7za9().f[20]++;
            cov_x0xtz7za9().s[57]++;
            return memoryDb.clear();
          },
          size: () => {
            /* istanbul ignore next */
            cov_x0xtz7za9().f[21]++;
            cov_x0xtz7za9().s[58]++;
            return memoryDb.size;
          }
        };
      }
    };
  }
  async createSqliteDatabaseHelper() {
    /* istanbul ignore next */
    cov_x0xtz7za9().f[22]++;
    const dbPath =
    /* istanbul ignore next */
    (cov_x0xtz7za9().s[59]++, join(await this.createTempDir('db'), 'test.db'));
    let db =
    /* istanbul ignore next */
    (cov_x0xtz7za9().s[60]++, null);
    /* istanbul ignore next */
    cov_x0xtz7za9().s[61]++;
    return {
      async setup() {
        /* istanbul ignore next */
        cov_x0xtz7za9().f[23]++;
        cov_x0xtz7za9().s[62]++;
        // Import sqlite3 dynamically
        try {
          const sqlite3 =
          /* istanbul ignore next */
          (cov_x0xtz7za9().s[63]++, await import('sqlite3'));
          /* istanbul ignore next */
          cov_x0xtz7za9().s[64]++;
          db = new sqlite3.Database(dbPath);
          // Create basic tables
          /* istanbul ignore next */
          cov_x0xtz7za9().s[65]++;
          await new Promise((resolve, reject) => {
            /* istanbul ignore next */
            cov_x0xtz7za9().f[24]++;
            cov_x0xtz7za9().s[66]++;
            db.exec(`
              CREATE TABLE IF NOT EXISTS test_data (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                key TEXT UNIQUE,
                value TEXT,
                created_at DATETIME DEFAULT CURRENT_TIMESTAMP
              );
            `, err => {
              /* istanbul ignore next */
              cov_x0xtz7za9().f[25]++;
              cov_x0xtz7za9().s[67]++;
              if (err) {
                /* istanbul ignore next */
                cov_x0xtz7za9().b[13][0]++;
                cov_x0xtz7za9().s[68]++;
                reject(err);
              } else {
                /* istanbul ignore next */
                cov_x0xtz7za9().b[13][1]++;
                cov_x0xtz7za9().s[69]++;
                resolve();
              }
            });
          });
        } catch (error) {
          /* istanbul ignore next */
          cov_x0xtz7za9().s[70]++;
          console.warn('SQLite not available, falling back to memory database');
          /* istanbul ignore next */
          cov_x0xtz7za9().s[71]++;
          return this.createMemoryDatabaseHelper().setup();
        }
      },
      async cleanup() {
        /* istanbul ignore next */
        cov_x0xtz7za9().f[26]++;
        cov_x0xtz7za9().s[72]++;
        if (db) {
          /* istanbul ignore next */
          cov_x0xtz7za9().b[14][0]++;
          cov_x0xtz7za9().s[73]++;
          await new Promise(resolve => {
            /* istanbul ignore next */
            cov_x0xtz7za9().f[27]++;
            cov_x0xtz7za9().s[74]++;
            db.close(() => {
              /* istanbul ignore next */
              cov_x0xtz7za9().f[28]++;
              cov_x0xtz7za9().s[75]++;
              return resolve();
            });
          });
        } else
        /* istanbul ignore next */
        {
          cov_x0xtz7za9().b[14][1]++;
        }
        cov_x0xtz7za9().s[76]++;
        try {
          /* istanbul ignore next */
          cov_x0xtz7za9().s[77]++;
          await fs.unlink(dbPath);
        } catch (error) {
          // File might not exist
        }
      },
      async seed(data) {
        /* istanbul ignore next */
        cov_x0xtz7za9().f[29]++;
        cov_x0xtz7za9().s[78]++;
        if (!db) {
          /* istanbul ignore next */
          cov_x0xtz7za9().b[15][0]++;
          cov_x0xtz7za9().s[79]++;
          return;
        } else
        /* istanbul ignore next */
        {
          cov_x0xtz7za9().b[15][1]++;
        }
        const stmt =
        /* istanbul ignore next */
        (cov_x0xtz7za9().s[80]++, db.prepare('INSERT OR REPLACE INTO test_data (key, value) VALUES (?, ?)'));
        /* istanbul ignore next */
        cov_x0xtz7za9().s[81]++;
        for (const [index, item] of data.entries()) {
          /* istanbul ignore next */
          cov_x0xtz7za9().s[82]++;
          await new Promise((resolve, reject) => {
            /* istanbul ignore next */
            cov_x0xtz7za9().f[30]++;
            cov_x0xtz7za9().s[83]++;
            stmt.run(`item-${index}`, JSON.stringify(item), err => {
              /* istanbul ignore next */
              cov_x0xtz7za9().f[31]++;
              cov_x0xtz7za9().s[84]++;
              if (err) {
                /* istanbul ignore next */
                cov_x0xtz7za9().b[16][0]++;
                cov_x0xtz7za9().s[85]++;
                reject(err);
              } else {
                /* istanbul ignore next */
                cov_x0xtz7za9().b[16][1]++;
                cov_x0xtz7za9().s[86]++;
                resolve();
              }
            });
          });
        }
        /* istanbul ignore next */
        cov_x0xtz7za9().s[87]++;
        stmt.finalize();
      },
      async reset() {
        /* istanbul ignore next */
        cov_x0xtz7za9().f[32]++;
        cov_x0xtz7za9().s[88]++;
        if (!db) {
          /* istanbul ignore next */
          cov_x0xtz7za9().b[17][0]++;
          cov_x0xtz7za9().s[89]++;
          return;
        } else
        /* istanbul ignore next */
        {
          cov_x0xtz7za9().b[17][1]++;
        }
        cov_x0xtz7za9().s[90]++;
        await new Promise((resolve, reject) => {
          /* istanbul ignore next */
          cov_x0xtz7za9().f[33]++;
          cov_x0xtz7za9().s[91]++;
          db.run('DELETE FROM test_data', err => {
            /* istanbul ignore next */
            cov_x0xtz7za9().f[34]++;
            cov_x0xtz7za9().s[92]++;
            if (err) {
              /* istanbul ignore next */
              cov_x0xtz7za9().b[18][0]++;
              cov_x0xtz7za9().s[93]++;
              reject(err);
            } else {
              /* istanbul ignore next */
              cov_x0xtz7za9().b[18][1]++;
              cov_x0xtz7za9().s[94]++;
              resolve();
            }
          });
        });
      },
      getConnection() {
        /* istanbul ignore next */
        cov_x0xtz7za9().f[35]++;
        cov_x0xtz7za9().s[95]++;
        return db;
      }
    };
  }
  async createPostgresDatabaseHelper() {
    /* istanbul ignore next */
    cov_x0xtz7za9().f[36]++;
    cov_x0xtz7za9().s[96]++;
    // This would require a PostgreSQL connection
    // For now, return a mock implementation
    console.warn('PostgreSQL integration not implemented, using memory database');
    /* istanbul ignore next */
    cov_x0xtz7za9().s[97]++;
    return this.createMemoryDatabaseHelper();
  }
  createMockFileSystemHelper() {
    /* istanbul ignore next */
    cov_x0xtz7za9().f[37]++;
    const mockFs =
    /* istanbul ignore next */
    (cov_x0xtz7za9().s[98]++, new Map());
    /* istanbul ignore next */
    cov_x0xtz7za9().s[99]++;
    return {
      async createTempDir() {
        /* istanbul ignore next */
        cov_x0xtz7za9().f[38]++;
        const tempPath =
        /* istanbul ignore next */
        (cov_x0xtz7za9().s[100]++, `/mock/temp/${Date.now()}`);
        /* istanbul ignore next */
        cov_x0xtz7za9().s[101]++;
        mockFs.set(tempPath + '/', '');
        /* istanbul ignore next */
        cov_x0xtz7za9().s[102]++;
        return tempPath;
      },
      async createFile(path, content) {
        /* istanbul ignore next */
        cov_x0xtz7za9().f[39]++;
        cov_x0xtz7za9().s[103]++;
        mockFs.set(path, content);
      },
      async cleanup() {
        /* istanbul ignore next */
        cov_x0xtz7za9().f[40]++;
        cov_x0xtz7za9().s[104]++;
        mockFs.clear();
      },
      mockFileSystem() {
        /* istanbul ignore next */
        cov_x0xtz7za9().f[41]++;
      } // Already mocked
      ,
      restoreFileSystem() {
        /* istanbul ignore next */
        cov_x0xtz7za9().f[42]++;
      } // Nothing to restore
    };
  }
  async createTempFileSystemHelper() {
    /* istanbul ignore next */
    cov_x0xtz7za9().f[43]++;
    const tempPaths =
    /* istanbul ignore next */
    (cov_x0xtz7za9().s[105]++, []);
    /* istanbul ignore next */
    cov_x0xtz7za9().s[106]++;
    return {
      async createTempDir() {
        /* istanbul ignore next */
        cov_x0xtz7za9().f[44]++;
        const tempPath =
        /* istanbul ignore next */
        (cov_x0xtz7za9().s[107]++, await this.createTempDir('fs-helper'));
        /* istanbul ignore next */
        cov_x0xtz7za9().s[108]++;
        tempPaths.push(tempPath);
        /* istanbul ignore next */
        cov_x0xtz7za9().s[109]++;
        return tempPath;
      },
      async createFile(path, content) {
        /* istanbul ignore next */
        cov_x0xtz7za9().f[45]++;
        cov_x0xtz7za9().s[110]++;
        await fs.writeFile(path, content, 'utf8');
      },
      async cleanup() {
        /* istanbul ignore next */
        cov_x0xtz7za9().f[46]++;
        cov_x0xtz7za9().s[111]++;
        await Promise.allSettled(tempPaths.map(path => {
          /* istanbul ignore next */
          cov_x0xtz7za9().f[47]++;
          cov_x0xtz7za9().s[112]++;
          return this.removeDir(path);
        }));
        /* istanbul ignore next */
        cov_x0xtz7za9().s[113]++;
        tempPaths.length = 0;
      },
      mockFileSystem() {
        /* istanbul ignore next */
        cov_x0xtz7za9().f[48]++;
      } // Real filesystem, no mocking needed
      ,
      restoreFileSystem() {
        /* istanbul ignore next */
        cov_x0xtz7za9().f[49]++;
      } // Real filesystem, no restoration needed
    };
  }
  createRealFileSystemHelper() {
    /* istanbul ignore next */
    cov_x0xtz7za9().f[50]++;
    cov_x0xtz7za9().s[114]++;
    return {
      async createTempDir() {
        /* istanbul ignore next */
        cov_x0xtz7za9().f[51]++;
        cov_x0xtz7za9().s[115]++;
        return await this.createTempDir('real-fs');
      },
      async createFile(path, content) {
        /* istanbul ignore next */
        cov_x0xtz7za9().f[52]++;
        cov_x0xtz7za9().s[116]++;
        await fs.writeFile(path, content, 'utf8');
      },
      async cleanup() {
        /* istanbul ignore next */
        cov_x0xtz7za9().f[53]++;
      } // Cleanup handled by main cleanup
      ,
      mockFileSystem() {
        /* istanbul ignore next */
        cov_x0xtz7za9().f[54]++;
        cov_x0xtz7za9().s[117]++;
        console.warn('Cannot mock real filesystem');
      },
      restoreFileSystem() {
        /* istanbul ignore next */
        cov_x0xtz7za9().f[55]++;
        cov_x0xtz7za9().s[118]++;
        console.warn('Real filesystem, nothing to restore');
      }
    };
  }
  createMockNetworkHelper() {
    /* istanbul ignore next */
    cov_x0xtz7za9().f[56]++;
    const mockRequests =
    /* istanbul ignore next */
    (cov_x0xtz7za9().s[119]++, []);
    const mockResponses =
    /* istanbul ignore next */
    (cov_x0xtz7za9().s[120]++, new Map());
    /* istanbul ignore next */
    cov_x0xtz7za9().s[121]++;
    return {
      async startMockServer(port) {
        /* istanbul ignore next */
        cov_x0xtz7za9().f[57]++;
      } // Mock server is always "running"
      ,
      async stopMockServer() {
        /* istanbul ignore next */
        cov_x0xtz7za9().f[58]++;
        cov_x0xtz7za9().s[122]++;
        mockRequests.length = 0;
        /* istanbul ignore next */
        cov_x0xtz7za9().s[123]++;
        mockResponses.clear();
      },
      mockRequest(path, response) {
        /* istanbul ignore next */
        cov_x0xtz7za9().f[59]++;
        cov_x0xtz7za9().s[124]++;
        mockResponses.set(path, response);
      },
      captureRequests() {
        /* istanbul ignore next */
        cov_x0xtz7za9().f[60]++;
        cov_x0xtz7za9().s[125]++;
        return [...mockRequests];
      },
      clearRequests() {
        /* istanbul ignore next */
        cov_x0xtz7za9().f[61]++;
        cov_x0xtz7za9().s[126]++;
        mockRequests.length = 0;
      }
    };
  }
  async createLocalhostNetworkHelper() {
    /* istanbul ignore next */
    cov_x0xtz7za9().f[62]++;
    let server =
    /* istanbul ignore next */
    (cov_x0xtz7za9().s[127]++, null);
    const requests =
    /* istanbul ignore next */
    (cov_x0xtz7za9().s[128]++, []);
    const routes =
    /* istanbul ignore next */
    (cov_x0xtz7za9().s[129]++, new Map());
    /* istanbul ignore next */
    cov_x0xtz7za9().s[130]++;
    return {
      async startMockServer(port =
      /* istanbul ignore next */
      (cov_x0xtz7za9().b[19][0]++, this.getRandomPort())) {
        /* istanbul ignore next */
        cov_x0xtz7za9().f[63]++;
        cov_x0xtz7za9().s[131]++;
        try {
          const http =
          /* istanbul ignore next */
          (cov_x0xtz7za9().s[132]++, await import('http'));
          /* istanbul ignore next */
          cov_x0xtz7za9().s[133]++;
          server = http.createServer((req, res) => {
            /* istanbul ignore next */
            cov_x0xtz7za9().f[64]++;
            const requestData =
            /* istanbul ignore next */
            (cov_x0xtz7za9().s[134]++, {
              method: req.method,
              url: req.url,
              headers: req.headers,
              timestamp: Date.now()
            });
            /* istanbul ignore next */
            cov_x0xtz7za9().s[135]++;
            requests.push(requestData);
            const response =
            /* istanbul ignore next */
            (cov_x0xtz7za9().s[136]++, routes.get(
            /* istanbul ignore next */
            (cov_x0xtz7za9().b[20][0]++, req.url) ||
            /* istanbul ignore next */
            (cov_x0xtz7za9().b[20][1]++, '/')));
            /* istanbul ignore next */
            cov_x0xtz7za9().s[137]++;
            if (response) {
              /* istanbul ignore next */
              cov_x0xtz7za9().b[21][0]++;
              cov_x0xtz7za9().s[138]++;
              res.writeHead(200, {
                'Content-Type': 'application/json'
              });
              /* istanbul ignore next */
              cov_x0xtz7za9().s[139]++;
              res.end(JSON.stringify(response));
            } else {
              /* istanbul ignore next */
              cov_x0xtz7za9().b[21][1]++;
              cov_x0xtz7za9().s[140]++;
              res.writeHead(404);
              /* istanbul ignore next */
              cov_x0xtz7za9().s[141]++;
              res.end('Not Found');
            }
          });
          /* istanbul ignore next */
          cov_x0xtz7za9().s[142]++;
          await new Promise((resolve, reject) => {
            /* istanbul ignore next */
            cov_x0xtz7za9().f[65]++;
            cov_x0xtz7za9().s[143]++;
            server.listen(port, err => {
              /* istanbul ignore next */
              cov_x0xtz7za9().f[66]++;
              cov_x0xtz7za9().s[144]++;
              if (err) {
                /* istanbul ignore next */
                cov_x0xtz7za9().b[22][0]++;
                cov_x0xtz7za9().s[145]++;
                reject(err);
              } else {
                /* istanbul ignore next */
                cov_x0xtz7za9().b[22][1]++;
                cov_x0xtz7za9().s[146]++;
                resolve();
              }
            });
          });
        } catch (error) {
          /* istanbul ignore next */
          cov_x0xtz7za9().s[147]++;
          console.warn('HTTP server not available, using mock network');
        }
      },
      async stopMockServer() {
        /* istanbul ignore next */
        cov_x0xtz7za9().f[67]++;
        cov_x0xtz7za9().s[148]++;
        if (server) {
          /* istanbul ignore next */
          cov_x0xtz7za9().b[23][0]++;
          cov_x0xtz7za9().s[149]++;
          await new Promise(resolve => {
            /* istanbul ignore next */
            cov_x0xtz7za9().f[68]++;
            cov_x0xtz7za9().s[150]++;
            server.close(() => {
              /* istanbul ignore next */
              cov_x0xtz7za9().f[69]++;
              cov_x0xtz7za9().s[151]++;
              return resolve();
            });
          });
          /* istanbul ignore next */
          cov_x0xtz7za9().s[152]++;
          server = null;
        } else
        /* istanbul ignore next */
        {
          cov_x0xtz7za9().b[23][1]++;
        }
      },
      mockRequest(path, response) {
        /* istanbul ignore next */
        cov_x0xtz7za9().f[70]++;
        cov_x0xtz7za9().s[153]++;
        routes.set(path, response);
      },
      captureRequests() {
        /* istanbul ignore next */
        cov_x0xtz7za9().f[71]++;
        cov_x0xtz7za9().s[154]++;
        return [...requests];
      },
      clearRequests() {
        /* istanbul ignore next */
        cov_x0xtz7za9().f[72]++;
        cov_x0xtz7za9().s[155]++;
        requests.length = 0;
      }
    };
  }
  async createIntegrationNetworkHelper() {
    /* istanbul ignore next */
    cov_x0xtz7za9().f[73]++;
    cov_x0xtz7za9().s[156]++;
    // For integration tests, we might want to test against real services
    console.warn('Integration network helper not fully implemented');
    /* istanbul ignore next */
    cov_x0xtz7za9().s[157]++;
    return this.createMockNetworkHelper();
  }
  async startServices() {
    /* istanbul ignore next */
    cov_x0xtz7za9().f[74]++;
  } // Service startup logic would go here
  // This is a placeholder for starting required services like databases, message queues, etc.
  async stopServices() {
    /* istanbul ignore next */
    cov_x0xtz7za9().f[75]++;
    cov_x0xtz7za9().s[158]++;
    await Promise.allSettled(this.processes.map(process => {
      /* istanbul ignore next */
      cov_x0xtz7za9().f[76]++;
      cov_x0xtz7za9().s[159]++;
      return this.stopProcess(process);
    }));
    /* istanbul ignore next */
    cov_x0xtz7za9().s[160]++;
    this.processes = [];
  }
  async stopProcess(process) {
    /* istanbul ignore next */
    cov_x0xtz7za9().f[77]++;
    cov_x0xtz7za9().s[161]++;
    if (
    /* istanbul ignore next */
    (cov_x0xtz7za9().b[25][0]++, process) &&
    /* istanbul ignore next */
    (cov_x0xtz7za9().b[25][1]++, process.kill)) {
      /* istanbul ignore next */
      cov_x0xtz7za9().b[24][0]++;
      cov_x0xtz7za9().s[162]++;
      process.kill('SIGTERM');
      // Wait for graceful shutdown
      /* istanbul ignore next */
      cov_x0xtz7za9().s[163]++;
      await new Promise(resolve => {
        /* istanbul ignore next */
        cov_x0xtz7za9().f[78]++;
        const timeout =
        /* istanbul ignore next */
        (cov_x0xtz7za9().s[164]++, setTimeout(() => {
          /* istanbul ignore next */
          cov_x0xtz7za9().f[79]++;
          cov_x0xtz7za9().s[165]++;
          if (process.kill) {
            /* istanbul ignore next */
            cov_x0xtz7za9().b[26][0]++;
            cov_x0xtz7za9().s[166]++;
            process.kill('SIGKILL');
          } else
          /* istanbul ignore next */
          {
            cov_x0xtz7za9().b[26][1]++;
          }
          cov_x0xtz7za9().s[167]++;
          resolve();
        }, 5000));
        /* istanbul ignore next */
        cov_x0xtz7za9().s[168]++;
        process.on('exit', () => {
          /* istanbul ignore next */
          cov_x0xtz7za9().f[80]++;
          cov_x0xtz7za9().s[169]++;
          clearTimeout(timeout);
          /* istanbul ignore next */
          cov_x0xtz7za9().s[170]++;
          resolve();
        });
      });
    } else
    /* istanbul ignore next */
    {
      cov_x0xtz7za9().b[24][1]++;
    }
  }
  async createTempDir(prefix =
  /* istanbul ignore next */
  (cov_x0xtz7za9().b[27][0]++, 'test')) {
    /* istanbul ignore next */
    cov_x0xtz7za9().f[81]++;
    const tempPath =
    /* istanbul ignore next */
    (cov_x0xtz7za9().s[171]++, join(tmpdir(), `claude-code-flow-${prefix}-${Date.now()}-${Math.random().toString(36)}`));
    /* istanbul ignore next */
    cov_x0xtz7za9().s[172]++;
    await fs.mkdir(tempPath, {
      recursive: true
    });
    /* istanbul ignore next */
    cov_x0xtz7za9().s[173]++;
    this.tempDirs.push(tempPath);
    /* istanbul ignore next */
    cov_x0xtz7za9().s[174]++;
    return tempPath;
  }
  async removeDir(path) {
    /* istanbul ignore next */
    cov_x0xtz7za9().f[82]++;
    cov_x0xtz7za9().s[175]++;
    try {
      /* istanbul ignore next */
      cov_x0xtz7za9().s[176]++;
      await fs.rm(path, {
        recursive: true,
        force: true
      });
    } catch (error) {
      /* istanbul ignore next */
      cov_x0xtz7za9().s[177]++;
      console.warn(`Failed to remove directory ${path}:`, error);
    }
  }
  async cleanupTempDirs() {
    /* istanbul ignore next */
    cov_x0xtz7za9().f[83]++;
    cov_x0xtz7za9().s[178]++;
    if (this.config.cleanup === 'manual') {
      /* istanbul ignore next */
      cov_x0xtz7za9().b[28][0]++;
      cov_x0xtz7za9().s[179]++;
      return;
    } else
    /* istanbul ignore next */
    {
      cov_x0xtz7za9().b[28][1]++;
    }
    cov_x0xtz7za9().s[180]++;
    await Promise.allSettled(this.tempDirs.map(dir => {
      /* istanbul ignore next */
      cov_x0xtz7za9().f[84]++;
      cov_x0xtz7za9().s[181]++;
      return this.removeDir(dir);
    }));
    /* istanbul ignore next */
    cov_x0xtz7za9().s[182]++;
    this.tempDirs.length = 0;
  }
  addCleanupCallback(callback) {
    /* istanbul ignore next */
    cov_x0xtz7za9().f[85]++;
    cov_x0xtz7za9().s[183]++;
    this.cleanupCallbacks.push(callback);
  }
  getRandomPort() {
    /* istanbul ignore next */
    cov_x0xtz7za9().f[86]++;
    cov_x0xtz7za9().s[184]++;
    return Math.floor(Math.random() * (65535 - 3000) + 3000);
  }
}
// Global integration test setup instance
export const integrationTestSetup =
/* istanbul ignore next */
(cov_x0xtz7za9().s[185]++, new IntegrationTestSetup());
// Convenience functions
export async function setupTestEnvironment(config) {
  /* istanbul ignore next */
  cov_x0xtz7za9().f[87]++;
  const setup =
  /* istanbul ignore next */
  (cov_x0xtz7za9().s[186]++, new IntegrationTestSetup(config));
  /* istanbul ignore next */
  cov_x0xtz7za9().s[187]++;
  return setup.setup();
}
export async function createTestWorkspace(testName, config) {
  /* istanbul ignore next */
  cov_x0xtz7za9().f[88]++;
  const setup =
  /* istanbul ignore next */
  (cov_x0xtz7za9().s[188]++, new IntegrationTestSetup(config));
  /* istanbul ignore next */
  cov_x0xtz7za9().s[189]++;
  return setup.createIsolatedEnvironment(testName);
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,