e52ba066cec49890b1ab51e7d0d9f8a0
/* istanbul ignore next */
function cov_z0l32u19() {
  var path = "/home/mhugo/code/claude-code-flow/src/__tests__/helpers/performance-measurement.ts";
  var hash = "80e1c0fbd4372981447e02f26dadd7b74a265785";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/home/mhugo/code/claude-code-flow/src/__tests__/helpers/performance-measurement.ts",
    statementMap: {
      "0": {
        start: {
          line: 8,
          column: 19
        },
        end: {
          line: 8,
          column: 21
        }
      },
      "1": {
        start: {
          line: 10,
          column: 8
        },
        end: {
          line: 24,
          column: 10
        }
      },
      "2": {
        start: {
          line: 30,
          column: 23
        },
        end: {
          line: 30,
          column: 54
        }
      },
      "3": {
        start: {
          line: 31,
          column: 29
        },
        end: {
          line: 31,
          column: 31
        }
      },
      "4": {
        start: {
          line: 32,
          column: 35
        },
        end: {
          line: 32,
          column: 37
        }
      },
      "5": {
        start: {
          line: 34,
          column: 8
        },
        end: {
          line: 36,
          column: 9
        }
      },
      "6": {
        start: {
          line: 34,
          column: 21
        },
        end: {
          line: 34,
          column: 22
        }
      },
      "7": {
        start: {
          line: 35,
          column: 12
        },
        end: {
          line: 35,
          column: 17
        }
      },
      "8": {
        start: {
          line: 38,
          column: 8
        },
        end: {
          line: 40,
          column: 9
        }
      },
      "9": {
        start: {
          line: 39,
          column: 12
        },
        end: {
          line: 39,
          column: 24
        }
      },
      "10": {
        start: {
          line: 41,
          column: 30
        },
        end: {
          line: 41,
          column: 51
        }
      },
      "11": {
        start: {
          line: 43,
          column: 8
        },
        end: {
          line: 55,
          column: 9
        }
      },
      "12": {
        start: {
          line: 43,
          column: 21
        },
        end: {
          line: 43,
          column: 22
        }
      },
      "13": {
        start: {
          line: 44,
          column: 30
        },
        end: {
          line: 44,
          column: 47
        }
      },
      "14": {
        start: {
          line: 45,
          column: 32
        },
        end: {
          line: 45,
          column: 53
        }
      },
      "15": {
        start: {
          line: 46,
          column: 12
        },
        end: {
          line: 46,
          column: 17
        }
      },
      "16": {
        start: {
          line: 47,
          column: 28
        },
        end: {
          line: 47,
          column: 45
        }
      },
      "17": {
        start: {
          line: 48,
          column: 30
        },
        end: {
          line: 48,
          column: 51
        }
      },
      "18": {
        start: {
          line: 49,
          column: 12
        },
        end: {
          line: 49,
          column: 51
        }
      },
      "19": {
        start: {
          line: 50,
          column: 12
        },
        end: {
          line: 54,
          column: 15
        }
      },
      "20": {
        start: {
          line: 56,
          column: 24
        },
        end: {
          line: 56,
          column: 79
        }
      },
      "21": {
        start: {
          line: 57,
          column: 8
        },
        end: {
          line: 57,
          column: 73
        }
      },
      "22": {
        start: {
          line: 58,
          column: 8
        },
        end: {
          line: 58,
          column: 23
        }
      },
      "23": {
        start: {
          line: 64,
          column: 23
        },
        end: {
          line: 64,
          column: 54
        }
      },
      "24": {
        start: {
          line: 65,
          column: 29
        },
        end: {
          line: 65,
          column: 31
        }
      },
      "25": {
        start: {
          line: 66,
          column: 35
        },
        end: {
          line: 66,
          column: 37
        }
      },
      "26": {
        start: {
          line: 68,
          column: 8
        },
        end: {
          line: 70,
          column: 9
        }
      },
      "27": {
        start: {
          line: 68,
          column: 21
        },
        end: {
          line: 68,
          column: 22
        }
      },
      "28": {
        start: {
          line: 69,
          column: 12
        },
        end: {
          line: 69,
          column: 23
        }
      },
      "29": {
        start: {
          line: 72,
          column: 8
        },
        end: {
          line: 74,
          column: 9
        }
      },
      "30": {
        start: {
          line: 73,
          column: 12
        },
        end: {
          line: 73,
          column: 24
        }
      },
      "31": {
        start: {
          line: 76,
          column: 8
        },
        end: {
          line: 88,
          column: 9
        }
      },
      "32": {
        start: {
          line: 76,
          column: 21
        },
        end: {
          line: 76,
          column: 22
        }
      },
      "33": {
        start: {
          line: 77,
          column: 30
        },
        end: {
          line: 77,
          column: 47
        }
      },
      "34": {
        start: {
          line: 78,
          column: 32
        },
        end: {
          line: 78,
          column: 53
        }
      },
      "35": {
        start: {
          line: 79,
          column: 12
        },
        end: {
          line: 79,
          column: 23
        }
      },
      "36": {
        start: {
          line: 80,
          column: 28
        },
        end: {
          line: 80,
          column: 45
        }
      },
      "37": {
        start: {
          line: 81,
          column: 30
        },
        end: {
          line: 81,
          column: 51
        }
      },
      "38": {
        start: {
          line: 82,
          column: 12
        },
        end: {
          line: 82,
          column: 51
        }
      },
      "39": {
        start: {
          line: 83,
          column: 12
        },
        end: {
          line: 87,
          column: 15
        }
      },
      "40": {
        start: {
          line: 89,
          column: 24
        },
        end: {
          line: 89,
          column: 79
        }
      },
      "41": {
        start: {
          line: 90,
          column: 8
        },
        end: {
          line: 90,
          column: 73
        }
      },
      "42": {
        start: {
          line: 91,
          column: 8
        },
        end: {
          line: 91,
          column: 23
        }
      },
      "43": {
        start: {
          line: 97,
          column: 27
        },
        end: {
          line: 97,
          column: 29
        }
      },
      "44": {
        start: {
          line: 98,
          column: 26
        },
        end: {
          line: 98,
          column: 36
        }
      },
      "45": {
        start: {
          line: 99,
          column: 29
        },
        end: {
          line: 99,
          column: 30
        }
      },
      "46": {
        start: {
          line: 100,
          column: 8
        },
        end: {
          line: 106,
          column: 9
        }
      },
      "47": {
        start: {
          line: 101,
          column: 28
        },
        end: {
          line: 101,
          column: 45
        }
      },
      "48": {
        start: {
          line: 102,
          column: 12
        },
        end: {
          line: 102,
          column: 23
        }
      },
      "49": {
        start: {
          line: 103,
          column: 26
        },
        end: {
          line: 103,
          column: 43
        }
      },
      "50": {
        start: {
          line: 104,
          column: 12
        },
        end: {
          line: 104,
          column: 45
        }
      },
      "51": {
        start: {
          line: 105,
          column: 12
        },
        end: {
          line: 105,
          column: 29
        }
      },
      "52": {
        start: {
          line: 107,
          column: 26
        },
        end: {
          line: 107,
          column: 48
        }
      },
      "53": {
        start: {
          line: 108,
          column: 27
        },
        end: {
          line: 108,
          column: 62
        }
      },
      "54": {
        start: {
          line: 109,
          column: 24
        },
        end: {
          line: 118,
          column: 9
        }
      },
      "55": {
        start: {
          line: 119,
          column: 8
        },
        end: {
          line: 119,
          column: 73
        }
      },
      "56": {
        start: {
          line: 120,
          column: 8
        },
        end: {
          line: 120,
          column: 23
        }
      },
      "57": {
        start: {
          line: 126,
          column: 24
        },
        end: {
          line: 126,
          column: 26
        }
      },
      "58": {
        start: {
          line: 127,
          column: 8
        },
        end: {
          line: 133,
          column: 9
        }
      },
      "59": {
        start: {
          line: 128,
          column: 28
        },
        end: {
          line: 128,
          column: 77
        }
      },
      "60": {
        start: {
          line: 129,
          column: 28
        },
        end: {
          line: 131,
          column: 73
        }
      },
      "61": {
        start: {
          line: 132,
          column: 12
        },
        end: {
          line: 132,
          column: 60
        }
      },
      "62": {
        start: {
          line: 135,
          column: 23
        },
        end: {
          line: 138,
          column: 72
        }
      },
      "63": {
        start: {
          line: 136,
          column: 28
        },
        end: {
          line: 137,
          column: 67
        }
      },
      "64": {
        start: {
          line: 138,
          column: 37
        },
        end: {
          line: 138,
          column: 70
        }
      },
      "65": {
        start: {
          line: 139,
          column: 8
        },
        end: {
          line: 139,
          column: 22
        }
      },
      "66": {
        start: {
          line: 145,
          column: 26
        },
        end: {
          line: 145,
          column: 36
        }
      },
      "67": {
        start: {
          line: 146,
          column: 27
        },
        end: {
          line: 146,
          column: 29
        }
      },
      "68": {
        start: {
          line: 147,
          column: 25
        },
        end: {
          line: 147,
          column: 27
        }
      },
      "69": {
        start: {
          line: 148,
          column: 8
        },
        end: {
          line: 150,
          column: 9
        }
      },
      "70": {
        start: {
          line: 148,
          column: 21
        },
        end: {
          line: 148,
          column: 22
        }
      },
      "71": {
        start: {
          line: 149,
          column: 12
        },
        end: {
          line: 149,
          column: 88
        }
      },
      "72": {
        start: {
          line: 151,
          column: 8
        },
        end: {
          line: 151,
          column: 36
        }
      },
      "73": {
        start: {
          line: 152,
          column: 30
        },
        end: {
          line: 152,
          column: 65
        }
      },
      "74": {
        start: {
          line: 152,
          column: 54
        },
        end: {
          line: 152,
          column: 64
        }
      },
      "75": {
        start: {
          line: 153,
          column: 26
        },
        end: {
          line: 153,
          column: 62
        }
      },
      "76": {
        start: {
          line: 153,
          column: 50
        },
        end: {
          line: 153,
          column: 61
        }
      },
      "77": {
        start: {
          line: 154,
          column: 26
        },
        end: {
          line: 154,
          column: 62
        }
      },
      "78": {
        start: {
          line: 154,
          column: 50
        },
        end: {
          line: 154,
          column: 61
        }
      },
      "79": {
        start: {
          line: 155,
          column: 24
        },
        end: {
          line: 169,
          column: 9
        }
      },
      "80": {
        start: {
          line: 170,
          column: 8
        },
        end: {
          line: 170,
          column: 73
        }
      },
      "81": {
        start: {
          line: 171,
          column: 8
        },
        end: {
          line: 171,
          column: 23
        }
      },
      "82": {
        start: {
          line: 177,
          column: 35
        },
        end: {
          line: 177,
          column: 37
        }
      },
      "83": {
        start: {
          line: 179,
          column: 8
        },
        end: {
          line: 181,
          column: 9
        }
      },
      "84": {
        start: {
          line: 180,
          column: 12
        },
        end: {
          line: 180,
          column: 24
        }
      },
      "85": {
        start: {
          line: 182,
          column: 8
        },
        end: {
          line: 190,
          column: 9
        }
      },
      "86": {
        start: {
          line: 182,
          column: 21
        },
        end: {
          line: 182,
          column: 22
        }
      },
      "87": {
        start: {
          line: 183,
          column: 12
        },
        end: {
          line: 183,
          column: 23
        }
      },
      "88": {
        start: {
          line: 185,
          column: 12
        },
        end: {
          line: 187,
          column: 13
        }
      },
      "89": {
        start: {
          line: 186,
          column: 16
        },
        end: {
          line: 186,
          column: 28
        }
      },
      "90": {
        start: {
          line: 188,
          column: 27
        },
        end: {
          line: 188,
          column: 48
        }
      },
      "91": {
        start: {
          line: 189,
          column: 12
        },
        end: {
          line: 189,
          column: 71
        }
      },
      "92": {
        start: {
          line: 192,
          column: 29
        },
        end: {
          line: 192,
          column: 84
        }
      },
      "93": {
        start: {
          line: 193,
          column: 28
        },
        end: {
          line: 193,
          column: 81
        }
      },
      "94": {
        start: {
          line: 194,
          column: 29
        },
        end: {
          line: 194,
          column: 90
        }
      },
      "95": {
        start: {
          line: 194,
          column: 59
        },
        end: {
          line: 194,
          column: 64
        }
      },
      "96": {
        start: {
          line: 195,
          column: 28
        },
        end: {
          line: 195,
          column: 87
        }
      },
      "97": {
        start: {
          line: 195,
          column: 57
        },
        end: {
          line: 195,
          column: 62
        }
      },
      "98": {
        start: {
          line: 196,
          column: 29
        },
        end: {
          line: 196,
          column: 55
        }
      },
      "99": {
        start: {
          line: 197,
          column: 24
        },
        end: {
          line: 197,
          column: 59
        }
      },
      "100": {
        start: {
          line: 198,
          column: 8
        },
        end: {
          line: 202,
          column: 10
        }
      },
      "101": {
        start: {
          line: 208,
          column: 8
        },
        end: {
          line: 208,
          column: 38
        }
      },
      "102": {
        start: {
          line: 214,
          column: 8
        },
        end: {
          line: 214,
          column: 31
        }
      },
      "103": {
        start: {
          line: 220,
          column: 8
        },
        end: {
          line: 222,
          column: 9
        }
      },
      "104": {
        start: {
          line: 221,
          column: 12
        },
        end: {
          line: 221,
          column: 58
        }
      },
      "105": {
        start: {
          line: 223,
          column: 21
        },
        end: {
          line: 223,
          column: 53
        }
      },
      "106": {
        start: {
          line: 224,
          column: 8
        },
        end: {
          line: 249,
          column: 9
        }
      },
      "107": {
        start: {
          line: 225,
          column: 12
        },
        end: {
          line: 225,
          column: 52
        }
      },
      "108": {
        start: {
          line: 226,
          column: 12
        },
        end: {
          line: 226,
          column: 92
        }
      },
      "109": {
        start: {
          line: 227,
          column: 12
        },
        end: {
          line: 229,
          column: 13
        }
      },
      "110": {
        start: {
          line: 228,
          column: 16
        },
        end: {
          line: 228,
          column: 95
        }
      },
      "111": {
        start: {
          line: 230,
          column: 12
        },
        end: {
          line: 243,
          column: 13
        }
      },
      "112": {
        start: {
          line: 231,
          column: 30
        },
        end: {
          line: 231,
          column: 60
        }
      },
      "113": {
        start: {
          line: 232,
          column: 16
        },
        end: {
          line: 232,
          column: 42
        }
      },
      "114": {
        start: {
          line: 233,
          column: 16
        },
        end: {
          line: 233,
          column: 65
        }
      },
      "115": {
        start: {
          line: 234,
          column: 16
        },
        end: {
          line: 234,
          column: 69
        }
      },
      "116": {
        start: {
          line: 235,
          column: 16
        },
        end: {
          line: 235,
          column: 63
        }
      },
      "117": {
        start: {
          line: 236,
          column: 16
        },
        end: {
          line: 236,
          column: 63
        }
      },
      "118": {
        start: {
          line: 237,
          column: 16
        },
        end: {
          line: 239,
          column: 17
        }
      },
      "119": {
        start: {
          line: 238,
          column: 20
        },
        end: {
          line: 238,
          column: 75
        }
      },
      "120": {
        start: {
          line: 240,
          column: 16
        },
        end: {
          line: 242,
          column: 17
        }
      },
      "121": {
        start: {
          line: 241,
          column: 20
        },
        end: {
          line: 241,
          column: 83
        }
      },
      "122": {
        start: {
          line: 244,
          column: 12
        },
        end: {
          line: 244,
          column: 40
        }
      },
      "123": {
        start: {
          line: 245,
          column: 12
        },
        end: {
          line: 245,
          column: 103
        }
      },
      "124": {
        start: {
          line: 246,
          column: 12
        },
        end: {
          line: 246,
          column: 111
        }
      },
      "125": {
        start: {
          line: 247,
          column: 12
        },
        end: {
          line: 247,
          column: 105
        }
      },
      "126": {
        start: {
          line: 248,
          column: 12
        },
        end: {
          line: 248,
          column: 27
        }
      },
      "127": {
        start: {
          line: 250,
          column: 8
        },
        end: {
          line: 250,
          column: 22
        }
      },
      "128": {
        start: {
          line: 253,
          column: 30
        },
        end: {
          line: 253,
          column: 99
        }
      },
      "129": {
        start: {
          line: 253,
          column: 64
        },
        end: {
          line: 253,
          column: 69
        }
      },
      "130": {
        start: {
          line: 254,
          column: 26
        },
        end: {
          line: 258,
          column: 9
        }
      },
      "131": {
        start: {
          line: 255,
          column: 56
        },
        end: {
          line: 255,
          column: 68
        }
      },
      "132": {
        start: {
          line: 256,
          column: 60
        },
        end: {
          line: 256,
          column: 76
        }
      },
      "133": {
        start: {
          line: 257,
          column: 57
        },
        end: {
          line: 257,
          column: 70
        }
      },
      "134": {
        start: {
          line: 259,
          column: 8
        },
        end: {
          line: 263,
          column: 10
        }
      },
      "135": {
        start: {
          line: 266,
          column: 23
        },
        end: {
          line: 266,
          column: 62
        }
      },
      "136": {
        start: {
          line: 266,
          column: 56
        },
        end: {
          line: 266,
          column: 61
        }
      },
      "137": {
        start: {
          line: 267,
          column: 20
        },
        end: {
          line: 267,
          column: 59
        }
      },
      "138": {
        start: {
          line: 267,
          column: 50
        },
        end: {
          line: 267,
          column: 55
        }
      },
      "139": {
        start: {
          line: 268,
          column: 21
        },
        end: {
          line: 268,
          column: 46
        }
      },
      "140": {
        start: {
          line: 269,
          column: 23
        },
        end: {
          line: 271,
          column: 51
        }
      },
      "141": {
        start: {
          line: 272,
          column: 25
        },
        end: {
          line: 272,
          column: 57
        }
      },
      "142": {
        start: {
          line: 273,
          column: 25
        },
        end: {
          line: 273,
          column: 57
        }
      },
      "143": {
        start: {
          line: 274,
          column: 20
        },
        end: {
          line: 274,
          column: 36
        }
      },
      "144": {
        start: {
          line: 275,
          column: 20
        },
        end: {
          line: 275,
          column: 36
        }
      },
      "145": {
        start: {
          line: 276,
          column: 25
        },
        end: {
          line: 276,
          column: 114
        }
      },
      "146": {
        start: {
          line: 276,
          column: 59
        },
        end: {
          line: 276,
          column: 88
        }
      },
      "147": {
        start: {
          line: 277,
          column: 34
        },
        end: {
          line: 277,
          column: 53
        }
      },
      "148": {
        start: {
          line: 278,
          column: 8
        },
        end: {
          line: 285,
          column: 10
        }
      },
      "149": {
        start: {
          line: 288,
          column: 8
        },
        end: {
          line: 304,
          column: 9
        }
      },
      "150": {
        start: {
          line: 289,
          column: 26
        },
        end: {
          line: 289,
          column: 43
        }
      },
      "151": {
        start: {
          line: 290,
          column: 12
        },
        end: {
          line: 303,
          column: 13
        }
      },
      "152": {
        start: {
          line: 291,
          column: 16
        },
        end: {
          line: 291,
          column: 27
        }
      },
      "153": {
        start: {
          line: 292,
          column: 16
        },
        end: {
          line: 295,
          column: 19
        }
      },
      "154": {
        start: {
          line: 298,
          column: 16
        },
        end: {
          line: 302,
          column: 19
        }
      },
      "155": {
        start: {
          line: 308,
          column: 38
        },
        end: {
          line: 308,
          column: 66
        }
      },
      "156": {
        start: {
          line: 311,
          column: 4
        },
        end: {
          line: 311,
          column: 65
        }
      },
      "157": {
        start: {
          line: 314,
          column: 4
        },
        end: {
          line: 314,
          column: 66
        }
      },
      "158": {
        start: {
          line: 317,
          column: 4
        },
        end: {
          line: 317,
          column: 75
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 9,
            column: 4
          },
          end: {
            line: 9,
            column: 5
          }
        },
        loc: {
          start: {
            line: 9,
            column: 30
          },
          end: {
            line: 25,
            column: 5
          }
        },
        line: 9
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 29,
            column: 4
          },
          end: {
            line: 29,
            column: 5
          }
        },
        loc: {
          start: {
            line: 29,
            column: 40
          },
          end: {
            line: 59,
            column: 5
          }
        },
        line: 29
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 63,
            column: 4
          },
          end: {
            line: 63,
            column: 5
          }
        },
        loc: {
          start: {
            line: 63,
            column: 47
          },
          end: {
            line: 92,
            column: 5
          }
        },
        line: 63
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 96,
            column: 4
          },
          end: {
            line: 96,
            column: 5
          }
        },
        loc: {
          start: {
            line: 96,
            column: 55
          },
          end: {
            line: 121,
            column: 5
          }
        },
        line: 96
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 125,
            column: 4
          },
          end: {
            line: 125,
            column: 5
          }
        },
        loc: {
          start: {
            line: 125,
            column: 56
          },
          end: {
            line: 140,
            column: 5
          }
        },
        line: 125
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 136,
            column: 18
          },
          end: {
            line: 136,
            column: 19
          }
        },
        loc: {
          start: {
            line: 136,
            column: 28
          },
          end: {
            line: 137,
            column: 67
          }
        },
        line: 136
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 138,
            column: 17
          },
          end: {
            line: 138,
            column: 18
          }
        },
        loc: {
          start: {
            line: 138,
            column: 37
          },
          end: {
            line: 138,
            column: 70
          }
        },
        line: 138
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 144,
            column: 4
          },
          end: {
            line: 144,
            column: 5
          }
        },
        loc: {
          start: {
            line: 144,
            column: 65
          },
          end: {
            line: 172,
            column: 5
          }
        },
        line: 144
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 152,
            column: 48
          },
          end: {
            line: 152,
            column: 49
          }
        },
        loc: {
          start: {
            line: 152,
            column: 54
          },
          end: {
            line: 152,
            column: 64
          }
        },
        line: 152
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 153,
            column: 44
          },
          end: {
            line: 153,
            column: 45
          }
        },
        loc: {
          start: {
            line: 153,
            column: 50
          },
          end: {
            line: 153,
            column: 61
          }
        },
        line: 153
      },
      "10": {
        name: "(anonymous_10)",
        decl: {
          start: {
            line: 154,
            column: 44
          },
          end: {
            line: 154,
            column: 45
          }
        },
        loc: {
          start: {
            line: 154,
            column: 50
          },
          end: {
            line: 154,
            column: 61
          }
        },
        line: 154
      },
      "11": {
        name: "(anonymous_11)",
        decl: {
          start: {
            line: 176,
            column: 4
          },
          end: {
            line: 176,
            column: 5
          }
        },
        loc: {
          start: {
            line: 176,
            column: 56
          },
          end: {
            line: 203,
            column: 5
          }
        },
        line: 176
      },
      "12": {
        name: "(anonymous_12)",
        decl: {
          start: {
            line: 194,
            column: 49
          },
          end: {
            line: 194,
            column: 50
          }
        },
        loc: {
          start: {
            line: 194,
            column: 59
          },
          end: {
            line: 194,
            column: 64
          }
        },
        line: 194
      },
      "13": {
        name: "(anonymous_13)",
        decl: {
          start: {
            line: 195,
            column: 47
          },
          end: {
            line: 195,
            column: 48
          }
        },
        loc: {
          start: {
            line: 195,
            column: 57
          },
          end: {
            line: 195,
            column: 62
          }
        },
        line: 195
      },
      "14": {
        name: "(anonymous_14)",
        decl: {
          start: {
            line: 207,
            column: 4
          },
          end: {
            line: 207,
            column: 5
          }
        },
        loc: {
          start: {
            line: 207,
            column: 25
          },
          end: {
            line: 209,
            column: 5
          }
        },
        line: 207
      },
      "15": {
        name: "(anonymous_15)",
        decl: {
          start: {
            line: 213,
            column: 4
          },
          end: {
            line: 213,
            column: 5
          }
        },
        loc: {
          start: {
            line: 213,
            column: 24
          },
          end: {
            line: 215,
            column: 5
          }
        },
        line: 213
      },
      "16": {
        name: "(anonymous_16)",
        decl: {
          start: {
            line: 219,
            column: 4
          },
          end: {
            line: 219,
            column: 5
          }
        },
        loc: {
          start: {
            line: 219,
            column: 21
          },
          end: {
            line: 251,
            column: 5
          }
        },
        line: 219
      },
      "17": {
        name: "(anonymous_17)",
        decl: {
          start: {
            line: 252,
            column: 4
          },
          end: {
            line: 252,
            column: 5
          }
        },
        loc: {
          start: {
            line: 252,
            column: 59
          },
          end: {
            line: 264,
            column: 5
          }
        },
        line: 252
      },
      "18": {
        name: "(anonymous_18)",
        decl: {
          start: {
            line: 253,
            column: 54
          },
          end: {
            line: 253,
            column: 55
          }
        },
        loc: {
          start: {
            line: 253,
            column: 64
          },
          end: {
            line: 253,
            column: 69
          }
        },
        line: 253
      },
      "19": {
        name: "(anonymous_19)",
        decl: {
          start: {
            line: 255,
            column: 44
          },
          end: {
            line: 255,
            column: 45
          }
        },
        loc: {
          start: {
            line: 255,
            column: 56
          },
          end: {
            line: 255,
            column: 68
          }
        },
        line: 255
      },
      "20": {
        name: "(anonymous_20)",
        decl: {
          start: {
            line: 256,
            column: 48
          },
          end: {
            line: 256,
            column: 49
          }
        },
        loc: {
          start: {
            line: 256,
            column: 60
          },
          end: {
            line: 256,
            column: 76
          }
        },
        line: 256
      },
      "21": {
        name: "(anonymous_21)",
        decl: {
          start: {
            line: 257,
            column: 45
          },
          end: {
            line: 257,
            column: 46
          }
        },
        loc: {
          start: {
            line: 257,
            column: 57
          },
          end: {
            line: 257,
            column: 70
          }
        },
        line: 257
      },
      "22": {
        name: "(anonymous_22)",
        decl: {
          start: {
            line: 265,
            column: 4
          },
          end: {
            line: 265,
            column: 5
          }
        },
        loc: {
          start: {
            line: 265,
            column: 38
          },
          end: {
            line: 286,
            column: 5
          }
        },
        line: 265
      },
      "23": {
        name: "(anonymous_23)",
        decl: {
          start: {
            line: 266,
            column: 46
          },
          end: {
            line: 266,
            column: 47
          }
        },
        loc: {
          start: {
            line: 266,
            column: 56
          },
          end: {
            line: 266,
            column: 61
          }
        },
        line: 266
      },
      "24": {
        name: "(anonymous_24)",
        decl: {
          start: {
            line: 267,
            column: 40
          },
          end: {
            line: 267,
            column: 41
          }
        },
        loc: {
          start: {
            line: 267,
            column: 50
          },
          end: {
            line: 267,
            column: 55
          }
        },
        line: 267
      },
      "25": {
        name: "(anonymous_25)",
        decl: {
          start: {
            line: 276,
            column: 45
          },
          end: {
            line: 276,
            column: 46
          }
        },
        loc: {
          start: {
            line: 276,
            column: 59
          },
          end: {
            line: 276,
            column: 88
          }
        },
        line: 276
      },
      "26": {
        name: "(anonymous_26)",
        decl: {
          start: {
            line: 287,
            column: 4
          },
          end: {
            line: 287,
            column: 5
          }
        },
        loc: {
          start: {
            line: 287,
            column: 53
          },
          end: {
            line: 305,
            column: 5
          }
        },
        line: 287
      },
      "27": {
        name: "measurePerformance",
        decl: {
          start: {
            line: 310,
            column: 16
          },
          end: {
            line: 310,
            column: 34
          }
        },
        loc: {
          start: {
            line: 310,
            column: 54
          },
          end: {
            line: 312,
            column: 1
          }
        },
        line: 310
      },
      "28": {
        name: "measureAsyncPerformance",
        decl: {
          start: {
            line: 313,
            column: 22
          },
          end: {
            line: 313,
            column: 45
          }
        },
        loc: {
          start: {
            line: 313,
            column: 65
          },
          end: {
            line: 315,
            column: 1
          }
        },
        line: 313
      },
      "29": {
        name: "benchmarkFunctions",
        decl: {
          start: {
            line: 316,
            column: 22
          },
          end: {
            line: 316,
            column: 40
          }
        },
        loc: {
          start: {
            line: 316,
            column: 62
          },
          end: {
            line: 318,
            column: 1
          }
        },
        line: 316
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 9,
            column: 16
          },
          end: {
            line: 9,
            column: 28
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 9,
            column: 26
          },
          end: {
            line: 9,
            column: 28
          }
        }],
        line: 9
      },
      "1": {
        loc: {
          start: {
            line: 29,
            column: 26
          },
          end: {
            line: 29,
            column: 38
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 29,
            column: 36
          },
          end: {
            line: 29,
            column: 38
          }
        }],
        line: 29
      },
      "2": {
        loc: {
          start: {
            line: 38,
            column: 8
          },
          end: {
            line: 40,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 38,
            column: 8
          },
          end: {
            line: 40,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 38
      },
      "3": {
        loc: {
          start: {
            line: 63,
            column: 33
          },
          end: {
            line: 63,
            column: 45
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 63,
            column: 43
          },
          end: {
            line: 63,
            column: 45
          }
        }],
        line: 63
      },
      "4": {
        loc: {
          start: {
            line: 72,
            column: 8
          },
          end: {
            line: 74,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 72,
            column: 8
          },
          end: {
            line: 74,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 72
      },
      "5": {
        loc: {
          start: {
            line: 96,
            column: 38
          },
          end: {
            line: 96,
            column: 53
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 96,
            column: 49
          },
          end: {
            line: 96,
            column: 53
          }
        }],
        line: 96
      },
      "6": {
        loc: {
          start: {
            line: 125,
            column: 42
          },
          end: {
            line: 125,
            column: 54
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 125,
            column: 52
          },
          end: {
            line: 125,
            column: 54
          }
        }],
        line: 125
      },
      "7": {
        loc: {
          start: {
            line: 129,
            column: 28
          },
          end: {
            line: 131,
            column: 73
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 130,
            column: 18
          },
          end: {
            line: 130,
            column: 80
          }
        }, {
          start: {
            line: 131,
            column: 18
          },
          end: {
            line: 131,
            column: 73
          }
        }],
        line: 129
      },
      "8": {
        loc: {
          start: {
            line: 136,
            column: 29
          },
          end: {
            line: 136,
            column: 82
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 136,
            column: 29
          },
          end: {
            line: 136,
            column: 55
          }
        }, {
          start: {
            line: 136,
            column: 59
          },
          end: {
            line: 136,
            column: 82
          }
        }],
        line: 136
      },
      "9": {
        loc: {
          start: {
            line: 137,
            column: 13
          },
          end: {
            line: 137,
            column: 66
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 137,
            column: 13
          },
          end: {
            line: 137,
            column: 39
          }
        }, {
          start: {
            line: 137,
            column: 43
          },
          end: {
            line: 137,
            column: 66
          }
        }],
        line: 137
      },
      "10": {
        loc: {
          start: {
            line: 144,
            column: 29
          },
          end: {
            line: 144,
            column: 45
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 144,
            column: 43
          },
          end: {
            line: 144,
            column: 45
          }
        }],
        line: 144
      },
      "11": {
        loc: {
          start: {
            line: 144,
            column: 47
          },
          end: {
            line: 144,
            column: 63
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 144,
            column: 58
          },
          end: {
            line: 144,
            column: 63
          }
        }],
        line: 144
      },
      "12": {
        loc: {
          start: {
            line: 176,
            column: 38
          },
          end: {
            line: 176,
            column: 54
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 176,
            column: 51
          },
          end: {
            line: 176,
            column: 54
          }
        }],
        line: 176
      },
      "13": {
        loc: {
          start: {
            line: 179,
            column: 8
          },
          end: {
            line: 181,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 179,
            column: 8
          },
          end: {
            line: 181,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 179
      },
      "14": {
        loc: {
          start: {
            line: 185,
            column: 12
          },
          end: {
            line: 187,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 185,
            column: 12
          },
          end: {
            line: 187,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 185
      },
      "15": {
        loc: {
          start: {
            line: 185,
            column: 16
          },
          end: {
            line: 185,
            column: 41
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 185,
            column: 16
          },
          end: {
            line: 185,
            column: 28
          }
        }, {
          start: {
            line: 185,
            column: 32
          },
          end: {
            line: 185,
            column: 41
          }
        }],
        line: 185
      },
      "16": {
        loc: {
          start: {
            line: 220,
            column: 8
          },
          end: {
            line: 222,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 220,
            column: 8
          },
          end: {
            line: 222,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 220
      },
      "17": {
        loc: {
          start: {
            line: 227,
            column: 12
          },
          end: {
            line: 229,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 227,
            column: 12
          },
          end: {
            line: 229,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 227
      },
      "18": {
        loc: {
          start: {
            line: 230,
            column: 12
          },
          end: {
            line: 243,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 230,
            column: 12
          },
          end: {
            line: 243,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 230
      },
      "19": {
        loc: {
          start: {
            line: 237,
            column: 16
          },
          end: {
            line: 239,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 237,
            column: 16
          },
          end: {
            line: 239,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 237
      },
      "20": {
        loc: {
          start: {
            line: 240,
            column: 16
          },
          end: {
            line: 242,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 240,
            column: 16
          },
          end: {
            line: 242,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 240
      },
      "21": {
        loc: {
          start: {
            line: 269,
            column: 23
          },
          end: {
            line: 271,
            column: 51
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 270,
            column: 14
          },
          end: {
            line: 270,
            column: 77
          }
        }, {
          start: {
            line: 271,
            column: 14
          },
          end: {
            line: 271,
            column: 51
          }
        }],
        line: 269
      },
      "22": {
        loc: {
          start: {
            line: 301,
            column: 27
          },
          end: {
            line: 301,
            column: 81
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 301,
            column: 52
          },
          end: {
            line: 301,
            column: 65
          }
        }, {
          start: {
            line: 301,
            column: 68
          },
          end: {
            line: 301,
            column: 81
          }
        }],
        line: 301
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0,
      "74": 0,
      "75": 0,
      "76": 0,
      "77": 0,
      "78": 0,
      "79": 0,
      "80": 0,
      "81": 0,
      "82": 0,
      "83": 0,
      "84": 0,
      "85": 0,
      "86": 0,
      "87": 0,
      "88": 0,
      "89": 0,
      "90": 0,
      "91": 0,
      "92": 0,
      "93": 0,
      "94": 0,
      "95": 0,
      "96": 0,
      "97": 0,
      "98": 0,
      "99": 0,
      "100": 0,
      "101": 0,
      "102": 0,
      "103": 0,
      "104": 0,
      "105": 0,
      "106": 0,
      "107": 0,
      "108": 0,
      "109": 0,
      "110": 0,
      "111": 0,
      "112": 0,
      "113": 0,
      "114": 0,
      "115": 0,
      "116": 0,
      "117": 0,
      "118": 0,
      "119": 0,
      "120": 0,
      "121": 0,
      "122": 0,
      "123": 0,
      "124": 0,
      "125": 0,
      "126": 0,
      "127": 0,
      "128": 0,
      "129": 0,
      "130": 0,
      "131": 0,
      "132": 0,
      "133": 0,
      "134": 0,
      "135": 0,
      "136": 0,
      "137": 0,
      "138": 0,
      "139": 0,
      "140": 0,
      "141": 0,
      "142": 0,
      "143": 0,
      "144": 0,
      "145": 0,
      "146": 0,
      "147": 0,
      "148": 0,
      "149": 0,
      "150": 0,
      "151": 0,
      "152": 0,
      "153": 0,
      "154": 0,
      "155": 0,
      "156": 0,
      "157": 0,
      "158": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0
    },
    b: {
      "0": [0],
      "1": [0],
      "2": [0, 0],
      "3": [0],
      "4": [0, 0],
      "5": [0],
      "6": [0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0, 0],
      "10": [0],
      "11": [0],
      "12": [0],
      "13": [0, 0],
      "14": [0, 0],
      "15": [0, 0],
      "16": [0, 0],
      "17": [0, 0],
      "18": [0, 0],
      "19": [0, 0],
      "20": [0, 0],
      "21": [0, 0],
      "22": [0, 0]
    },
    inputSourceMap: {
      file: "/home/mhugo/code/claude-code-flow/src/__tests__/helpers/performance-measurement.ts",
      mappings: "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",
      names: [],
      sources: ["/home/mhugo/code/claude-code-flow/src/__tests__/helpers/performance-measurement.ts"],
      sourcesContent: ["/**\n * Performance Measurement Utilities\n * \n * Comprehensive performance testing for both London and Classical TDD\n */\n\nimport type { PerformanceTestOptions, PerformanceMetrics } from './types.js';\n\nexport class PerformanceMeasurement {\n  private options: PerformanceTestOptions;\n  private measurements: Array<{\n    name: string;\n    metrics: PerformanceMetrics;\n    timestamp: number;\n  }> = [];\n\n  constructor(options: PerformanceTestOptions = {}) {\n    this.options = {\n      iterations: 100,\n      warmup: 10,\n      maxExecutionTime: 1000,\n      memoryThresholds: {\n        heap: 50 * 1024 * 1024, // 50MB\n        external: 10 * 1024 * 1024 // 10MB\n      },\n      statistics: {\n        percentiles: [50, 95, 99],\n        includeVariance: true,\n        includeDeviation: true\n      },\n      ...options\n    };\n  }\n\n  /**\n   * Measure performance of a synchronous function\n   */\n  measureSync<T>(\n    name: string,\n    fn: () => T,\n    options: Partial<PerformanceTestOptions> = {}\n  ): PerformanceMetrics {\n    const config = { ...this.options, ...options };\n    const measurements: number[] = [];\n    const memoryMeasurements: Array<{ heap: number; external: number; total: number }> = [];\n\n    // Warmup\n    for (let i = 0; i < config.warmup!; i++) {\n      fn();\n    }\n\n    // Force garbage collection if available\n    if (global.gc) {\n      global.gc();\n    }\n\n    const initialMemory = process.memoryUsage();\n\n    // Actual measurements\n    for (let i = 0; i < config.iterations!; i++) {\n      const startTime = performance.now();\n      const startMemory = process.memoryUsage();\n\n      fn();\n\n      const endTime = performance.now();\n      const endMemory = process.memoryUsage();\n\n      measurements.push(endTime - startTime);\n      memoryMeasurements.push({\n        heap: endMemory.heapUsed - startMemory.heapUsed,\n        external: endMemory.external - startMemory.external,\n        total: (endMemory.heapUsed + endMemory.external) - (startMemory.heapUsed + startMemory.external)\n      });\n    }\n\n    const metrics = this.calculateMetrics(measurements, memoryMeasurements);\n    this.measurements.push({ name, metrics, timestamp: Date.now() });\n\n    return metrics;\n  }\n\n  /**\n   * Measure performance of an asynchronous function\n   */\n  async measureAsync<T>(\n    name: string,\n    fn: () => Promise<T>,\n    options: Partial<PerformanceTestOptions> = {}\n  ): Promise<PerformanceMetrics> {\n    const config = { ...this.options, ...options };\n    const measurements: number[] = [];\n    const memoryMeasurements: Array<{ heap: number; external: number; total: number }> = [];\n\n    // Warmup\n    for (let i = 0; i < config.warmup!; i++) {\n      await fn();\n    }\n\n    // Force garbage collection if available\n    if (global.gc) {\n      global.gc();\n    }\n\n    // Actual measurements\n    for (let i = 0; i < config.iterations!; i++) {\n      const startTime = performance.now();\n      const startMemory = process.memoryUsage();\n\n      await fn();\n\n      const endTime = performance.now();\n      const endMemory = process.memoryUsage();\n\n      measurements.push(endTime - startTime);\n      memoryMeasurements.push({\n        heap: endMemory.heapUsed - startMemory.heapUsed,\n        external: endMemory.external - startMemory.external,\n        total: (endMemory.heapUsed + endMemory.external) - (startMemory.heapUsed + startMemory.external)\n      });\n    }\n\n    const metrics = this.calculateMetrics(measurements, memoryMeasurements);\n    this.measurements.push({ name, metrics, timestamp: Date.now() });\n\n    return metrics;\n  }\n\n  /**\n   * Measure throughput (operations per second)\n   */\n  async measureThroughput<T>(\n    name: string,\n    fn: () => T | Promise<T>,\n    duration: number = 5000\n  ): Promise<PerformanceMetrics> {\n    const operations: number[] = [];\n    const startTime = Date.now();\n    let operationCount = 0;\n\n    while (Date.now() - startTime < duration) {\n      const opStart = performance.now();\n      await fn();\n      const opEnd = performance.now();\n      \n      operations.push(opEnd - opStart);\n      operationCount++;\n    }\n\n    const totalTime = Date.now() - startTime;\n    const throughput = (operationCount / totalTime) * 1000; // ops per second\n\n    const metrics: PerformanceMetrics = {\n      executionTime: totalTime,\n      memoryUsage: {\n        heap: 0,\n        external: 0,\n        total: 0\n      },\n      throughput,\n      statistics: this.calculateStatistics(operations)\n    };\n\n    this.measurements.push({ name, metrics, timestamp: Date.now() });\n    return metrics;\n  }\n\n  /**\n   * Benchmark comparison between multiple functions\n   */\n  async benchmarkComparison<T>(\n    benchmarks: Array<{ name: string; fn: () => T | Promise<T> }>,\n    options: Partial<PerformanceTestOptions> = {}\n  ): Promise<Array<{ name: string; metrics: PerformanceMetrics; ranking: number }>> {\n    const results: Array<{ name: string; metrics: PerformanceMetrics }> = [];\n\n    for (const benchmark of benchmarks) {\n      const isAsync = benchmark.fn.constructor.name === 'AsyncFunction';\n      const metrics = isAsync \n        ? await this.measureAsync(benchmark.name, benchmark.fn as () => Promise<T>, options)\n        : this.measureSync(benchmark.name, benchmark.fn as () => T, options);\n      \n      results.push({ name: benchmark.name, metrics });\n    }\n\n    // Rank by execution time (lower is better)\n    const ranked = results\n      .sort((a, b) => (a.metrics.statistics?.mean || a.metrics.executionTime) - \n                      (b.metrics.statistics?.mean || b.metrics.executionTime))\n      .map((result, index) => ({ ...result, ranking: index + 1 }));\n\n    return ranked;\n  }\n\n  /**\n   * Load testing with concurrent operations\n   */\n  async loadTest<T>(\n    name: string,\n    fn: () => Promise<T>,\n    concurrency: number = 10,\n    duration: number = 10000\n  ): Promise<PerformanceMetrics> {\n    const startTime = Date.now();\n    const operations: Array<{ duration: number; success: boolean; error?: string }> = [];\n    const promises: Promise<void>[] = [];\n\n    for (let i = 0; i < concurrency; i++) {\n      promises.push(this.runConcurrentTest(fn, operations, startTime + duration));\n    }\n\n    await Promise.all(promises);\n\n    const successfulOps = operations.filter(op => op.success);\n    const failedOps = operations.filter(op => !op.success);\n    const durations = successfulOps.map(op => op.duration);\n\n    const metrics: PerformanceMetrics = {\n      executionTime: Date.now() - startTime,\n      memoryUsage: {\n        heap: 0,\n        external: 0,\n        total: 0\n      },\n      throughput: (successfulOps.length / ((Date.now() - startTime) / 1000)),\n      statistics: {\n        ...this.calculateStatistics(durations),\n        successRate: successfulOps.length / operations.length,\n        errorRate: failedOps.length / operations.length,\n        totalOperations: operations.length\n      } as any\n    };\n\n    this.measurements.push({ name, metrics, timestamp: Date.now() });\n    return metrics;\n  }\n\n  /**\n   * Memory leak detection\n   */\n  async detectMemoryLeaks<T>(\n    name: string,\n    fn: () => T | Promise<T>,\n    iterations: number = 100\n  ): Promise<{ hasLeak: boolean; memoryGrowth: number; measurements: number[] }> {\n    const memoryMeasurements: number[] = [];\n    \n    // Force initial garbage collection\n    if (global.gc) {\n      global.gc();\n    }\n\n    for (let i = 0; i < iterations; i++) {\n      await fn();\n      \n      // Force garbage collection every 10 iterations\n      if (i % 10 === 0 && global.gc) {\n        global.gc();\n      }\n      \n      const memory = process.memoryUsage();\n      memoryMeasurements.push(memory.heapUsed + memory.external);\n    }\n\n    // Calculate memory growth trend\n    const firstQuarter = memoryMeasurements.slice(0, Math.floor(iterations / 4));\n    const lastQuarter = memoryMeasurements.slice(-Math.floor(iterations / 4));\n    \n    const firstAverage = firstQuarter.reduce((a, b) => a + b, 0) / firstQuarter.length;\n    const lastAverage = lastQuarter.reduce((a, b) => a + b, 0) / lastQuarter.length;\n    \n    const memoryGrowth = lastAverage - firstAverage;\n    const hasLeak = memoryGrowth > (firstAverage * 0.1); // 10% growth threshold\n\n    return {\n      hasLeak,\n      memoryGrowth,\n      measurements: memoryMeasurements\n    };\n  }\n\n  /**\n   * Get all recorded measurements\n   */\n  getAllMeasurements(): Array<{ name: string; metrics: PerformanceMetrics; timestamp: number }> {\n    return [...this.measurements];\n  }\n\n  /**\n   * Clear all measurements\n   */\n  clearMeasurements(): void {\n    this.measurements = [];\n  }\n\n  /**\n   * Generate performance report\n   */\n  generateReport(): string {\n    if (this.measurements.length === 0) {\n      return 'No performance measurements recorded';\n    }\n\n    let report = '=== Performance Report ===\\n\\n';\n\n    for (const measurement of this.measurements) {\n      report += `Test: ${measurement.name}\\n`;\n      report += `Execution Time: ${measurement.metrics.executionTime.toFixed(2)}ms\\n`;\n      \n      if (measurement.metrics.throughput) {\n        report += `Throughput: ${measurement.metrics.throughput.toFixed(2)} ops/sec\\n`;\n      }\n      \n      if (measurement.metrics.statistics) {\n        const stats = measurement.metrics.statistics;\n        report += `Statistics:\\n`;\n        report += `  Mean: ${stats.mean.toFixed(2)}ms\\n`;\n        report += `  Median: ${stats.median.toFixed(2)}ms\\n`;\n        report += `  P95: ${stats.p95.toFixed(2)}ms\\n`;\n        report += `  P99: ${stats.p99.toFixed(2)}ms\\n`;\n        \n        if (stats.variance) {\n          report += `  Variance: ${stats.variance.toFixed(2)}\\n`;\n        }\n        \n        if (stats.standardDeviation) {\n          report += `  Std Dev: ${stats.standardDeviation.toFixed(2)}\\n`;\n        }\n      }\n      \n      report += `Memory Usage:\\n`;\n      report += `  Heap: ${(measurement.metrics.memoryUsage.heap / 1024 / 1024).toFixed(2)}MB\\n`;\n      report += `  External: ${(measurement.metrics.memoryUsage.external / 1024 / 1024).toFixed(2)}MB\\n`;\n      report += `  Total: ${(measurement.metrics.memoryUsage.total / 1024 / 1024).toFixed(2)}MB\\n`;\n      report += '\\n';\n    }\n\n    return report;\n  }\n\n  private calculateMetrics(\n    timeMeasurements: number[],\n    memoryMeasurements: Array<{ heap: number; external: number; total: number }>\n  ): PerformanceMetrics {\n    const executionTime = timeMeasurements.reduce((a, b) => a + b, 0) / timeMeasurements.length;\n    \n    const avgMemory = {\n      heap: memoryMeasurements.reduce((sum, m) => sum + m.heap, 0) / memoryMeasurements.length,\n      external: memoryMeasurements.reduce((sum, m) => sum + m.external, 0) / memoryMeasurements.length,\n      total: memoryMeasurements.reduce((sum, m) => sum + m.total, 0) / memoryMeasurements.length\n    };\n\n    return {\n      executionTime,\n      memoryUsage: avgMemory,\n      statistics: this.calculateStatistics(timeMeasurements)\n    };\n  }\n\n  private calculateStatistics(measurements: number[]) {\n    const sorted = [...measurements].sort((a, b) => a - b);\n    const sum = measurements.reduce((a, b) => a + b, 0);\n    const mean = sum / measurements.length;\n    \n    const median = sorted.length % 2 === 0\n      ? (sorted[sorted.length / 2 - 1] + sorted[sorted.length / 2]) / 2\n      : sorted[Math.floor(sorted.length / 2)];\n\n    const p95Index = Math.floor(sorted.length * 0.95);\n    const p99Index = Math.floor(sorted.length * 0.99);\n    \n    const p95 = sorted[p95Index];\n    const p99 = sorted[p99Index];\n    \n    const variance = measurements.reduce((sum, val) => sum + Math.pow(val - mean, 2), 0) / measurements.length;\n    const standardDeviation = Math.sqrt(variance);\n\n    return {\n      mean,\n      median,\n      p95,\n      p99,\n      variance,\n      standardDeviation\n    };\n  }\n\n  private async runConcurrentTest<T>(\n    fn: () => Promise<T>,\n    operations: Array<{ duration: number; success: boolean; error?: string }>,\n    endTime: number\n  ): Promise<void> {\n    while (Date.now() < endTime) {\n      const start = performance.now();\n      try {\n        await fn();\n        operations.push({\n          duration: performance.now() - start,\n          success: true\n        });\n      } catch (error) {\n        operations.push({\n          duration: performance.now() - start,\n          success: false,\n          error: error instanceof Error ? error.message : String(error)\n        });\n      }\n    }\n  }\n}\n\n// Global performance measurement instance\nexport const performanceMeasurement = new PerformanceMeasurement();\n\n// Convenience functions\nexport function measurePerformance<T>(\n  name: string,\n  fn: () => T,\n  options?: Partial<PerformanceTestOptions>\n): PerformanceMetrics {\n  return performanceMeasurement.measureSync(name, fn, options);\n}\n\nexport async function measureAsyncPerformance<T>(\n  name: string,\n  fn: () => Promise<T>,\n  options?: Partial<PerformanceTestOptions>\n): Promise<PerformanceMetrics> {\n  return performanceMeasurement.measureAsync(name, fn, options);\n}\n\nexport async function benchmarkFunctions<T>(\n  benchmarks: Array<{ name: string; fn: () => T | Promise<T> }>,\n  options?: Partial<PerformanceTestOptions>\n): Promise<Array<{ name: string; metrics: PerformanceMetrics; ranking: number }>> {\n  return performanceMeasurement.benchmarkComparison(benchmarks, options);\n}"],
      version: 3
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "80e1c0fbd4372981447e02f26dadd7b74a265785"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_z0l32u19 = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_z0l32u19();
/**
 * Performance Measurement Utilities
 *
 * Comprehensive performance testing for both London and Classical TDD
 */
export class PerformanceMeasurement {
  options;
  measurements =
  /* istanbul ignore next */
  (cov_z0l32u19().s[0]++, []);
  constructor(options =
  /* istanbul ignore next */
  (cov_z0l32u19().b[0][0]++, {})) {
    /* istanbul ignore next */
    cov_z0l32u19().f[0]++;
    cov_z0l32u19().s[1]++;
    this.options = {
      iterations: 100,
      warmup: 10,
      maxExecutionTime: 1000,
      memoryThresholds: {
        heap: 50 * 1024 * 1024,
        // 50MB
        external: 10 * 1024 * 1024 // 10MB
      },
      statistics: {
        percentiles: [50, 95, 99],
        includeVariance: true,
        includeDeviation: true
      },
      ...options
    };
  }
  /**
   * Measure performance of a synchronous function
   */
  measureSync(name, fn, options =
  /* istanbul ignore next */
  (cov_z0l32u19().b[1][0]++, {})) {
    /* istanbul ignore next */
    cov_z0l32u19().f[1]++;
    const config =
    /* istanbul ignore next */
    (cov_z0l32u19().s[2]++, {
      ...this.options,
      ...options
    });
    const measurements =
    /* istanbul ignore next */
    (cov_z0l32u19().s[3]++, []);
    const memoryMeasurements =
    /* istanbul ignore next */
    (cov_z0l32u19().s[4]++, []);
    // Warmup
    /* istanbul ignore next */
    cov_z0l32u19().s[5]++;
    for (let i =
    /* istanbul ignore next */
    (cov_z0l32u19().s[6]++, 0); i < config.warmup; i++) {
      /* istanbul ignore next */
      cov_z0l32u19().s[7]++;
      fn();
    }
    // Force garbage collection if available
    /* istanbul ignore next */
    cov_z0l32u19().s[8]++;
    if (global.gc) {
      /* istanbul ignore next */
      cov_z0l32u19().b[2][0]++;
      cov_z0l32u19().s[9]++;
      global.gc();
    } else
    /* istanbul ignore next */
    {
      cov_z0l32u19().b[2][1]++;
    }
    const initialMemory =
    /* istanbul ignore next */
    (cov_z0l32u19().s[10]++, process.memoryUsage());
    // Actual measurements
    /* istanbul ignore next */
    cov_z0l32u19().s[11]++;
    for (let i =
    /* istanbul ignore next */
    (cov_z0l32u19().s[12]++, 0); i < config.iterations; i++) {
      const startTime =
      /* istanbul ignore next */
      (cov_z0l32u19().s[13]++, performance.now());
      const startMemory =
      /* istanbul ignore next */
      (cov_z0l32u19().s[14]++, process.memoryUsage());
      /* istanbul ignore next */
      cov_z0l32u19().s[15]++;
      fn();
      const endTime =
      /* istanbul ignore next */
      (cov_z0l32u19().s[16]++, performance.now());
      const endMemory =
      /* istanbul ignore next */
      (cov_z0l32u19().s[17]++, process.memoryUsage());
      /* istanbul ignore next */
      cov_z0l32u19().s[18]++;
      measurements.push(endTime - startTime);
      /* istanbul ignore next */
      cov_z0l32u19().s[19]++;
      memoryMeasurements.push({
        heap: endMemory.heapUsed - startMemory.heapUsed,
        external: endMemory.external - startMemory.external,
        total: endMemory.heapUsed + endMemory.external - (startMemory.heapUsed + startMemory.external)
      });
    }
    const metrics =
    /* istanbul ignore next */
    (cov_z0l32u19().s[20]++, this.calculateMetrics(measurements, memoryMeasurements));
    /* istanbul ignore next */
    cov_z0l32u19().s[21]++;
    this.measurements.push({
      name,
      metrics,
      timestamp: Date.now()
    });
    /* istanbul ignore next */
    cov_z0l32u19().s[22]++;
    return metrics;
  }
  /**
   * Measure performance of an asynchronous function
   */
  async measureAsync(name, fn, options =
  /* istanbul ignore next */
  (cov_z0l32u19().b[3][0]++, {})) {
    /* istanbul ignore next */
    cov_z0l32u19().f[2]++;
    const config =
    /* istanbul ignore next */
    (cov_z0l32u19().s[23]++, {
      ...this.options,
      ...options
    });
    const measurements =
    /* istanbul ignore next */
    (cov_z0l32u19().s[24]++, []);
    const memoryMeasurements =
    /* istanbul ignore next */
    (cov_z0l32u19().s[25]++, []);
    // Warmup
    /* istanbul ignore next */
    cov_z0l32u19().s[26]++;
    for (let i =
    /* istanbul ignore next */
    (cov_z0l32u19().s[27]++, 0); i < config.warmup; i++) {
      /* istanbul ignore next */
      cov_z0l32u19().s[28]++;
      await fn();
    }
    // Force garbage collection if available
    /* istanbul ignore next */
    cov_z0l32u19().s[29]++;
    if (global.gc) {
      /* istanbul ignore next */
      cov_z0l32u19().b[4][0]++;
      cov_z0l32u19().s[30]++;
      global.gc();
    } else
    /* istanbul ignore next */
    {
      cov_z0l32u19().b[4][1]++;
    }
    // Actual measurements
    cov_z0l32u19().s[31]++;
    for (let i =
    /* istanbul ignore next */
    (cov_z0l32u19().s[32]++, 0); i < config.iterations; i++) {
      const startTime =
      /* istanbul ignore next */
      (cov_z0l32u19().s[33]++, performance.now());
      const startMemory =
      /* istanbul ignore next */
      (cov_z0l32u19().s[34]++, process.memoryUsage());
      /* istanbul ignore next */
      cov_z0l32u19().s[35]++;
      await fn();
      const endTime =
      /* istanbul ignore next */
      (cov_z0l32u19().s[36]++, performance.now());
      const endMemory =
      /* istanbul ignore next */
      (cov_z0l32u19().s[37]++, process.memoryUsage());
      /* istanbul ignore next */
      cov_z0l32u19().s[38]++;
      measurements.push(endTime - startTime);
      /* istanbul ignore next */
      cov_z0l32u19().s[39]++;
      memoryMeasurements.push({
        heap: endMemory.heapUsed - startMemory.heapUsed,
        external: endMemory.external - startMemory.external,
        total: endMemory.heapUsed + endMemory.external - (startMemory.heapUsed + startMemory.external)
      });
    }
    const metrics =
    /* istanbul ignore next */
    (cov_z0l32u19().s[40]++, this.calculateMetrics(measurements, memoryMeasurements));
    /* istanbul ignore next */
    cov_z0l32u19().s[41]++;
    this.measurements.push({
      name,
      metrics,
      timestamp: Date.now()
    });
    /* istanbul ignore next */
    cov_z0l32u19().s[42]++;
    return metrics;
  }
  /**
   * Measure throughput (operations per second)
   */
  async measureThroughput(name, fn, duration =
  /* istanbul ignore next */
  (cov_z0l32u19().b[5][0]++, 5000)) {
    /* istanbul ignore next */
    cov_z0l32u19().f[3]++;
    const operations =
    /* istanbul ignore next */
    (cov_z0l32u19().s[43]++, []);
    const startTime =
    /* istanbul ignore next */
    (cov_z0l32u19().s[44]++, Date.now());
    let operationCount =
    /* istanbul ignore next */
    (cov_z0l32u19().s[45]++, 0);
    /* istanbul ignore next */
    cov_z0l32u19().s[46]++;
    while (Date.now() - startTime < duration) {
      const opStart =
      /* istanbul ignore next */
      (cov_z0l32u19().s[47]++, performance.now());
      /* istanbul ignore next */
      cov_z0l32u19().s[48]++;
      await fn();
      const opEnd =
      /* istanbul ignore next */
      (cov_z0l32u19().s[49]++, performance.now());
      /* istanbul ignore next */
      cov_z0l32u19().s[50]++;
      operations.push(opEnd - opStart);
      /* istanbul ignore next */
      cov_z0l32u19().s[51]++;
      operationCount++;
    }
    const totalTime =
    /* istanbul ignore next */
    (cov_z0l32u19().s[52]++, Date.now() - startTime);
    const throughput =
    /* istanbul ignore next */
    (cov_z0l32u19().s[53]++, operationCount / totalTime * 1000); // ops per second
    const metrics =
    /* istanbul ignore next */
    (cov_z0l32u19().s[54]++, {
      executionTime: totalTime,
      memoryUsage: {
        heap: 0,
        external: 0,
        total: 0
      },
      throughput,
      statistics: this.calculateStatistics(operations)
    });
    /* istanbul ignore next */
    cov_z0l32u19().s[55]++;
    this.measurements.push({
      name,
      metrics,
      timestamp: Date.now()
    });
    /* istanbul ignore next */
    cov_z0l32u19().s[56]++;
    return metrics;
  }
  /**
   * Benchmark comparison between multiple functions
   */
  async benchmarkComparison(benchmarks, options =
  /* istanbul ignore next */
  (cov_z0l32u19().b[6][0]++, {})) {
    /* istanbul ignore next */
    cov_z0l32u19().f[4]++;
    const results =
    /* istanbul ignore next */
    (cov_z0l32u19().s[57]++, []);
    /* istanbul ignore next */
    cov_z0l32u19().s[58]++;
    for (const benchmark of benchmarks) {
      const isAsync =
      /* istanbul ignore next */
      (cov_z0l32u19().s[59]++, benchmark.fn.constructor.name === 'AsyncFunction');
      const metrics =
      /* istanbul ignore next */
      (cov_z0l32u19().s[60]++, isAsync ?
      /* istanbul ignore next */
      (cov_z0l32u19().b[7][0]++, await this.measureAsync(benchmark.name, benchmark.fn, options)) :
      /* istanbul ignore next */
      (cov_z0l32u19().b[7][1]++, this.measureSync(benchmark.name, benchmark.fn, options)));
      /* istanbul ignore next */
      cov_z0l32u19().s[61]++;
      results.push({
        name: benchmark.name,
        metrics
      });
    }
    // Rank by execution time (lower is better)
    const ranked =
    /* istanbul ignore next */
    (cov_z0l32u19().s[62]++, results.sort((a, b) => {
      /* istanbul ignore next */
      cov_z0l32u19().f[5]++;
      cov_z0l32u19().s[63]++;
      return (
      /* istanbul ignore next */
      (cov_z0l32u19().b[8][0]++, a.metrics.statistics?.mean) ||
      /* istanbul ignore next */
      (cov_z0l32u19().b[8][1]++, a.metrics.executionTime)) - (
      /* istanbul ignore next */
      (cov_z0l32u19().b[9][0]++, b.metrics.statistics?.mean) ||
      /* istanbul ignore next */
      (cov_z0l32u19().b[9][1]++, b.metrics.executionTime));
    }).map((result, index) => {
      /* istanbul ignore next */
      cov_z0l32u19().f[6]++;
      cov_z0l32u19().s[64]++;
      return {
        ...result,
        ranking: index + 1
      };
    }));
    /* istanbul ignore next */
    cov_z0l32u19().s[65]++;
    return ranked;
  }
  /**
   * Load testing with concurrent operations
   */
  async loadTest(name, fn, concurrency =
  /* istanbul ignore next */
  (cov_z0l32u19().b[10][0]++, 10), duration =
  /* istanbul ignore next */
  (cov_z0l32u19().b[11][0]++, 10000)) {
    /* istanbul ignore next */
    cov_z0l32u19().f[7]++;
    const startTime =
    /* istanbul ignore next */
    (cov_z0l32u19().s[66]++, Date.now());
    const operations =
    /* istanbul ignore next */
    (cov_z0l32u19().s[67]++, []);
    const promises =
    /* istanbul ignore next */
    (cov_z0l32u19().s[68]++, []);
    /* istanbul ignore next */
    cov_z0l32u19().s[69]++;
    for (let i =
    /* istanbul ignore next */
    (cov_z0l32u19().s[70]++, 0); i < concurrency; i++) {
      /* istanbul ignore next */
      cov_z0l32u19().s[71]++;
      promises.push(this.runConcurrentTest(fn, operations, startTime + duration));
    }
    /* istanbul ignore next */
    cov_z0l32u19().s[72]++;
    await Promise.all(promises);
    const successfulOps =
    /* istanbul ignore next */
    (cov_z0l32u19().s[73]++, operations.filter(op => {
      /* istanbul ignore next */
      cov_z0l32u19().f[8]++;
      cov_z0l32u19().s[74]++;
      return op.success;
    }));
    const failedOps =
    /* istanbul ignore next */
    (cov_z0l32u19().s[75]++, operations.filter(op => {
      /* istanbul ignore next */
      cov_z0l32u19().f[9]++;
      cov_z0l32u19().s[76]++;
      return !op.success;
    }));
    const durations =
    /* istanbul ignore next */
    (cov_z0l32u19().s[77]++, successfulOps.map(op => {
      /* istanbul ignore next */
      cov_z0l32u19().f[10]++;
      cov_z0l32u19().s[78]++;
      return op.duration;
    }));
    const metrics =
    /* istanbul ignore next */
    (cov_z0l32u19().s[79]++, {
      executionTime: Date.now() - startTime,
      memoryUsage: {
        heap: 0,
        external: 0,
        total: 0
      },
      throughput: successfulOps.length / ((Date.now() - startTime) / 1000),
      statistics: {
        ...this.calculateStatistics(durations),
        successRate: successfulOps.length / operations.length,
        errorRate: failedOps.length / operations.length,
        totalOperations: operations.length
      }
    });
    /* istanbul ignore next */
    cov_z0l32u19().s[80]++;
    this.measurements.push({
      name,
      metrics,
      timestamp: Date.now()
    });
    /* istanbul ignore next */
    cov_z0l32u19().s[81]++;
    return metrics;
  }
  /**
   * Memory leak detection
   */
  async detectMemoryLeaks(name, fn, iterations =
  /* istanbul ignore next */
  (cov_z0l32u19().b[12][0]++, 100)) {
    /* istanbul ignore next */
    cov_z0l32u19().f[11]++;
    const memoryMeasurements =
    /* istanbul ignore next */
    (cov_z0l32u19().s[82]++, []);
    // Force initial garbage collection
    /* istanbul ignore next */
    cov_z0l32u19().s[83]++;
    if (global.gc) {
      /* istanbul ignore next */
      cov_z0l32u19().b[13][0]++;
      cov_z0l32u19().s[84]++;
      global.gc();
    } else
    /* istanbul ignore next */
    {
      cov_z0l32u19().b[13][1]++;
    }
    cov_z0l32u19().s[85]++;
    for (let i =
    /* istanbul ignore next */
    (cov_z0l32u19().s[86]++, 0); i < iterations; i++) {
      /* istanbul ignore next */
      cov_z0l32u19().s[87]++;
      await fn();
      // Force garbage collection every 10 iterations
      /* istanbul ignore next */
      cov_z0l32u19().s[88]++;
      if (
      /* istanbul ignore next */
      (cov_z0l32u19().b[15][0]++, i % 10 === 0) &&
      /* istanbul ignore next */
      (cov_z0l32u19().b[15][1]++, global.gc)) {
        /* istanbul ignore next */
        cov_z0l32u19().b[14][0]++;
        cov_z0l32u19().s[89]++;
        global.gc();
      } else
      /* istanbul ignore next */
      {
        cov_z0l32u19().b[14][1]++;
      }
      const memory =
      /* istanbul ignore next */
      (cov_z0l32u19().s[90]++, process.memoryUsage());
      /* istanbul ignore next */
      cov_z0l32u19().s[91]++;
      memoryMeasurements.push(memory.heapUsed + memory.external);
    }
    // Calculate memory growth trend
    const firstQuarter =
    /* istanbul ignore next */
    (cov_z0l32u19().s[92]++, memoryMeasurements.slice(0, Math.floor(iterations / 4)));
    const lastQuarter =
    /* istanbul ignore next */
    (cov_z0l32u19().s[93]++, memoryMeasurements.slice(-Math.floor(iterations / 4)));
    const firstAverage =
    /* istanbul ignore next */
    (cov_z0l32u19().s[94]++, firstQuarter.reduce((a, b) => {
      /* istanbul ignore next */
      cov_z0l32u19().f[12]++;
      cov_z0l32u19().s[95]++;
      return a + b;
    }, 0) / firstQuarter.length);
    const lastAverage =
    /* istanbul ignore next */
    (cov_z0l32u19().s[96]++, lastQuarter.reduce((a, b) => {
      /* istanbul ignore next */
      cov_z0l32u19().f[13]++;
      cov_z0l32u19().s[97]++;
      return a + b;
    }, 0) / lastQuarter.length);
    const memoryGrowth =
    /* istanbul ignore next */
    (cov_z0l32u19().s[98]++, lastAverage - firstAverage);
    const hasLeak =
    /* istanbul ignore next */
    (cov_z0l32u19().s[99]++, memoryGrowth > firstAverage * 0.1); // 10% growth threshold
    /* istanbul ignore next */
    cov_z0l32u19().s[100]++;
    return {
      hasLeak,
      memoryGrowth,
      measurements: memoryMeasurements
    };
  }
  /**
   * Get all recorded measurements
   */
  getAllMeasurements() {
    /* istanbul ignore next */
    cov_z0l32u19().f[14]++;
    cov_z0l32u19().s[101]++;
    return [...this.measurements];
  }
  /**
   * Clear all measurements
   */
  clearMeasurements() {
    /* istanbul ignore next */
    cov_z0l32u19().f[15]++;
    cov_z0l32u19().s[102]++;
    this.measurements = [];
  }
  /**
   * Generate performance report
   */
  generateReport() {
    /* istanbul ignore next */
    cov_z0l32u19().f[16]++;
    cov_z0l32u19().s[103]++;
    if (this.measurements.length === 0) {
      /* istanbul ignore next */
      cov_z0l32u19().b[16][0]++;
      cov_z0l32u19().s[104]++;
      return 'No performance measurements recorded';
    } else
    /* istanbul ignore next */
    {
      cov_z0l32u19().b[16][1]++;
    }
    let report =
    /* istanbul ignore next */
    (cov_z0l32u19().s[105]++, '=== Performance Report ===\n\n');
    /* istanbul ignore next */
    cov_z0l32u19().s[106]++;
    for (const measurement of this.measurements) {
      /* istanbul ignore next */
      cov_z0l32u19().s[107]++;
      report += `Test: ${measurement.name}\n`;
      /* istanbul ignore next */
      cov_z0l32u19().s[108]++;
      report += `Execution Time: ${measurement.metrics.executionTime.toFixed(2)}ms\n`;
      /* istanbul ignore next */
      cov_z0l32u19().s[109]++;
      if (measurement.metrics.throughput) {
        /* istanbul ignore next */
        cov_z0l32u19().b[17][0]++;
        cov_z0l32u19().s[110]++;
        report += `Throughput: ${measurement.metrics.throughput.toFixed(2)} ops/sec\n`;
      } else
      /* istanbul ignore next */
      {
        cov_z0l32u19().b[17][1]++;
      }
      cov_z0l32u19().s[111]++;
      if (measurement.metrics.statistics) {
        /* istanbul ignore next */
        cov_z0l32u19().b[18][0]++;
        const stats =
        /* istanbul ignore next */
        (cov_z0l32u19().s[112]++, measurement.metrics.statistics);
        /* istanbul ignore next */
        cov_z0l32u19().s[113]++;
        report += `Statistics:\n`;
        /* istanbul ignore next */
        cov_z0l32u19().s[114]++;
        report += `  Mean: ${stats.mean.toFixed(2)}ms\n`;
        /* istanbul ignore next */
        cov_z0l32u19().s[115]++;
        report += `  Median: ${stats.median.toFixed(2)}ms\n`;
        /* istanbul ignore next */
        cov_z0l32u19().s[116]++;
        report += `  P95: ${stats.p95.toFixed(2)}ms\n`;
        /* istanbul ignore next */
        cov_z0l32u19().s[117]++;
        report += `  P99: ${stats.p99.toFixed(2)}ms\n`;
        /* istanbul ignore next */
        cov_z0l32u19().s[118]++;
        if (stats.variance) {
          /* istanbul ignore next */
          cov_z0l32u19().b[19][0]++;
          cov_z0l32u19().s[119]++;
          report += `  Variance: ${stats.variance.toFixed(2)}\n`;
        } else
        /* istanbul ignore next */
        {
          cov_z0l32u19().b[19][1]++;
        }
        cov_z0l32u19().s[120]++;
        if (stats.standardDeviation) {
          /* istanbul ignore next */
          cov_z0l32u19().b[20][0]++;
          cov_z0l32u19().s[121]++;
          report += `  Std Dev: ${stats.standardDeviation.toFixed(2)}\n`;
        } else
        /* istanbul ignore next */
        {
          cov_z0l32u19().b[20][1]++;
        }
      } else
      /* istanbul ignore next */
      {
        cov_z0l32u19().b[18][1]++;
      }
      cov_z0l32u19().s[122]++;
      report += `Memory Usage:\n`;
      /* istanbul ignore next */
      cov_z0l32u19().s[123]++;
      report += `  Heap: ${(measurement.metrics.memoryUsage.heap / 1024 / 1024).toFixed(2)}MB\n`;
      /* istanbul ignore next */
      cov_z0l32u19().s[124]++;
      report += `  External: ${(measurement.metrics.memoryUsage.external / 1024 / 1024).toFixed(2)}MB\n`;
      /* istanbul ignore next */
      cov_z0l32u19().s[125]++;
      report += `  Total: ${(measurement.metrics.memoryUsage.total / 1024 / 1024).toFixed(2)}MB\n`;
      /* istanbul ignore next */
      cov_z0l32u19().s[126]++;
      report += '\n';
    }
    /* istanbul ignore next */
    cov_z0l32u19().s[127]++;
    return report;
  }
  calculateMetrics(timeMeasurements, memoryMeasurements) {
    /* istanbul ignore next */
    cov_z0l32u19().f[17]++;
    const executionTime =
    /* istanbul ignore next */
    (cov_z0l32u19().s[128]++, timeMeasurements.reduce((a, b) => {
      /* istanbul ignore next */
      cov_z0l32u19().f[18]++;
      cov_z0l32u19().s[129]++;
      return a + b;
    }, 0) / timeMeasurements.length);
    const avgMemory =
    /* istanbul ignore next */
    (cov_z0l32u19().s[130]++, {
      heap: memoryMeasurements.reduce((sum, m) => {
        /* istanbul ignore next */
        cov_z0l32u19().f[19]++;
        cov_z0l32u19().s[131]++;
        return sum + m.heap;
      }, 0) / memoryMeasurements.length,
      external: memoryMeasurements.reduce((sum, m) => {
        /* istanbul ignore next */
        cov_z0l32u19().f[20]++;
        cov_z0l32u19().s[132]++;
        return sum + m.external;
      }, 0) / memoryMeasurements.length,
      total: memoryMeasurements.reduce((sum, m) => {
        /* istanbul ignore next */
        cov_z0l32u19().f[21]++;
        cov_z0l32u19().s[133]++;
        return sum + m.total;
      }, 0) / memoryMeasurements.length
    });
    /* istanbul ignore next */
    cov_z0l32u19().s[134]++;
    return {
      executionTime,
      memoryUsage: avgMemory,
      statistics: this.calculateStatistics(timeMeasurements)
    };
  }
  calculateStatistics(measurements) {
    /* istanbul ignore next */
    cov_z0l32u19().f[22]++;
    const sorted =
    /* istanbul ignore next */
    (cov_z0l32u19().s[135]++, [...measurements].sort((a, b) => {
      /* istanbul ignore next */
      cov_z0l32u19().f[23]++;
      cov_z0l32u19().s[136]++;
      return a - b;
    }));
    const sum =
    /* istanbul ignore next */
    (cov_z0l32u19().s[137]++, measurements.reduce((a, b) => {
      /* istanbul ignore next */
      cov_z0l32u19().f[24]++;
      cov_z0l32u19().s[138]++;
      return a + b;
    }, 0));
    const mean =
    /* istanbul ignore next */
    (cov_z0l32u19().s[139]++, sum / measurements.length);
    const median =
    /* istanbul ignore next */
    (cov_z0l32u19().s[140]++, sorted.length % 2 === 0 ?
    /* istanbul ignore next */
    (cov_z0l32u19().b[21][0]++, (sorted[sorted.length / 2 - 1] + sorted[sorted.length / 2]) / 2) :
    /* istanbul ignore next */
    (cov_z0l32u19().b[21][1]++, sorted[Math.floor(sorted.length / 2)]));
    const p95Index =
    /* istanbul ignore next */
    (cov_z0l32u19().s[141]++, Math.floor(sorted.length * 0.95));
    const p99Index =
    /* istanbul ignore next */
    (cov_z0l32u19().s[142]++, Math.floor(sorted.length * 0.99));
    const p95 =
    /* istanbul ignore next */
    (cov_z0l32u19().s[143]++, sorted[p95Index]);
    const p99 =
    /* istanbul ignore next */
    (cov_z0l32u19().s[144]++, sorted[p99Index]);
    const variance =
    /* istanbul ignore next */
    (cov_z0l32u19().s[145]++, measurements.reduce((sum, val) => {
      /* istanbul ignore next */
      cov_z0l32u19().f[25]++;
      cov_z0l32u19().s[146]++;
      return sum + Math.pow(val - mean, 2);
    }, 0) / measurements.length);
    const standardDeviation =
    /* istanbul ignore next */
    (cov_z0l32u19().s[147]++, Math.sqrt(variance));
    /* istanbul ignore next */
    cov_z0l32u19().s[148]++;
    return {
      mean,
      median,
      p95,
      p99,
      variance,
      standardDeviation
    };
  }
  async runConcurrentTest(fn, operations, endTime) {
    /* istanbul ignore next */
    cov_z0l32u19().f[26]++;
    cov_z0l32u19().s[149]++;
    while (Date.now() < endTime) {
      const start =
      /* istanbul ignore next */
      (cov_z0l32u19().s[150]++, performance.now());
      /* istanbul ignore next */
      cov_z0l32u19().s[151]++;
      try {
        /* istanbul ignore next */
        cov_z0l32u19().s[152]++;
        await fn();
        /* istanbul ignore next */
        cov_z0l32u19().s[153]++;
        operations.push({
          duration: performance.now() - start,
          success: true
        });
      } catch (error) {
        /* istanbul ignore next */
        cov_z0l32u19().s[154]++;
        operations.push({
          duration: performance.now() - start,
          success: false,
          error: error instanceof Error ?
          /* istanbul ignore next */
          (cov_z0l32u19().b[22][0]++, error.message) :
          /* istanbul ignore next */
          (cov_z0l32u19().b[22][1]++, String(error))
        });
      }
    }
  }
}
// Global performance measurement instance
export const performanceMeasurement =
/* istanbul ignore next */
(cov_z0l32u19().s[155]++, new PerformanceMeasurement());
// Convenience functions
export function measurePerformance(name, fn, options) {
  /* istanbul ignore next */
  cov_z0l32u19().f[27]++;
  cov_z0l32u19().s[156]++;
  return performanceMeasurement.measureSync(name, fn, options);
}
export async function measureAsyncPerformance(name, fn, options) {
  /* istanbul ignore next */
  cov_z0l32u19().f[28]++;
  cov_z0l32u19().s[157]++;
  return performanceMeasurement.measureAsync(name, fn, options);
}
export async function benchmarkFunctions(benchmarks, options) {
  /* istanbul ignore next */
  cov_z0l32u19().f[29]++;
  cov_z0l32u19().s[158]++;
  return performanceMeasurement.benchmarkComparison(benchmarks, options);
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,