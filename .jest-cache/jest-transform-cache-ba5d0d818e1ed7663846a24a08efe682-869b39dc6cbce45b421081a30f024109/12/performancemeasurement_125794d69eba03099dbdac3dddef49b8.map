{"version":3,"names":["PerformanceMeasurement","options","measurements","cov_z0l32u19","s","constructor","b","f","iterations","warmup","maxExecutionTime","memoryThresholds","heap","external","statistics","percentiles","includeVariance","includeDeviation","measureSync","name","fn","config","memoryMeasurements","i","global","gc","initialMemory","process","memoryUsage","startTime","performance","now","startMemory","endTime","endMemory","push","heapUsed","total","metrics","calculateMetrics","timestamp","Date","measureAsync","measureThroughput","duration","operations","operationCount","opStart","opEnd","totalTime","throughput","executionTime","calculateStatistics","benchmarkComparison","benchmarks","results","benchmark","isAsync","ranked","sort","a","mean","map","result","index","ranking","loadTest","concurrency","promises","runConcurrentTest","Promise","all","successfulOps","filter","op","success","failedOps","durations","length","successRate","errorRate","totalOperations","detectMemoryLeaks","memory","firstQuarter","slice","Math","floor","lastQuarter","firstAverage","reduce","lastAverage","memoryGrowth","hasLeak","getAllMeasurements","clearMeasurements","generateReport","report","measurement","toFixed","stats","median","p95","p99","variance","standardDeviation","timeMeasurements","avgMemory","sum","m","sorted","p95Index","p99Index","val","pow","sqrt","start","error","Error","message","String","performanceMeasurement","measurePerformance","measureAsyncPerformance","benchmarkFunctions"],"sources":["/home/mhugo/code/claude-code-flow/src/__tests__/helpers/performance-measurement.ts"],"sourcesContent":["/**\n * Performance Measurement Utilities\n * \n * Comprehensive performance testing for both London and Classical TDD\n */\n\nimport type { PerformanceTestOptions, PerformanceMetrics } from './types.js';\n\nexport class PerformanceMeasurement {\n  private options: PerformanceTestOptions;\n  private measurements: Array<{\n    name: string;\n    metrics: PerformanceMetrics;\n    timestamp: number;\n  }> = [];\n\n  constructor(options: PerformanceTestOptions = {}) {\n    this.options = {\n      iterations: 100,\n      warmup: 10,\n      maxExecutionTime: 1000,\n      memoryThresholds: {\n        heap: 50 * 1024 * 1024, // 50MB\n        external: 10 * 1024 * 1024 // 10MB\n      },\n      statistics: {\n        percentiles: [50, 95, 99],\n        includeVariance: true,\n        includeDeviation: true\n      },\n      ...options\n    };\n  }\n\n  /**\n   * Measure performance of a synchronous function\n   */\n  measureSync<T>(\n    name: string,\n    fn: () => T,\n    options: Partial<PerformanceTestOptions> = {}\n  ): PerformanceMetrics {\n    const config = { ...this.options, ...options };\n    const measurements: number[] = [];\n    const memoryMeasurements: Array<{ heap: number; external: number; total: number }> = [];\n\n    // Warmup\n    for (let i = 0; i < config.warmup!; i++) {\n      fn();\n    }\n\n    // Force garbage collection if available\n    if (global.gc) {\n      global.gc();\n    }\n\n    const initialMemory = process.memoryUsage();\n\n    // Actual measurements\n    for (let i = 0; i < config.iterations!; i++) {\n      const startTime = performance.now();\n      const startMemory = process.memoryUsage();\n\n      fn();\n\n      const endTime = performance.now();\n      const endMemory = process.memoryUsage();\n\n      measurements.push(endTime - startTime);\n      memoryMeasurements.push({\n        heap: endMemory.heapUsed - startMemory.heapUsed,\n        external: endMemory.external - startMemory.external,\n        total: (endMemory.heapUsed + endMemory.external) - (startMemory.heapUsed + startMemory.external)\n      });\n    }\n\n    const metrics = this.calculateMetrics(measurements, memoryMeasurements);\n    this.measurements.push({ name, metrics, timestamp: Date.now() });\n\n    return metrics;\n  }\n\n  /**\n   * Measure performance of an asynchronous function\n   */\n  async measureAsync<T>(\n    name: string,\n    fn: () => Promise<T>,\n    options: Partial<PerformanceTestOptions> = {}\n  ): Promise<PerformanceMetrics> {\n    const config = { ...this.options, ...options };\n    const measurements: number[] = [];\n    const memoryMeasurements: Array<{ heap: number; external: number; total: number }> = [];\n\n    // Warmup\n    for (let i = 0; i < config.warmup!; i++) {\n      await fn();\n    }\n\n    // Force garbage collection if available\n    if (global.gc) {\n      global.gc();\n    }\n\n    // Actual measurements\n    for (let i = 0; i < config.iterations!; i++) {\n      const startTime = performance.now();\n      const startMemory = process.memoryUsage();\n\n      await fn();\n\n      const endTime = performance.now();\n      const endMemory = process.memoryUsage();\n\n      measurements.push(endTime - startTime);\n      memoryMeasurements.push({\n        heap: endMemory.heapUsed - startMemory.heapUsed,\n        external: endMemory.external - startMemory.external,\n        total: (endMemory.heapUsed + endMemory.external) - (startMemory.heapUsed + startMemory.external)\n      });\n    }\n\n    const metrics = this.calculateMetrics(measurements, memoryMeasurements);\n    this.measurements.push({ name, metrics, timestamp: Date.now() });\n\n    return metrics;\n  }\n\n  /**\n   * Measure throughput (operations per second)\n   */\n  async measureThroughput<T>(\n    name: string,\n    fn: () => T | Promise<T>,\n    duration: number = 5000\n  ): Promise<PerformanceMetrics> {\n    const operations: number[] = [];\n    const startTime = Date.now();\n    let operationCount = 0;\n\n    while (Date.now() - startTime < duration) {\n      const opStart = performance.now();\n      await fn();\n      const opEnd = performance.now();\n      \n      operations.push(opEnd - opStart);\n      operationCount++;\n    }\n\n    const totalTime = Date.now() - startTime;\n    const throughput = (operationCount / totalTime) * 1000; // ops per second\n\n    const metrics: PerformanceMetrics = {\n      executionTime: totalTime,\n      memoryUsage: {\n        heap: 0,\n        external: 0,\n        total: 0\n      },\n      throughput,\n      statistics: this.calculateStatistics(operations)\n    };\n\n    this.measurements.push({ name, metrics, timestamp: Date.now() });\n    return metrics;\n  }\n\n  /**\n   * Benchmark comparison between multiple functions\n   */\n  async benchmarkComparison<T>(\n    benchmarks: Array<{ name: string; fn: () => T | Promise<T> }>,\n    options: Partial<PerformanceTestOptions> = {}\n  ): Promise<Array<{ name: string; metrics: PerformanceMetrics; ranking: number }>> {\n    const results: Array<{ name: string; metrics: PerformanceMetrics }> = [];\n\n    for (const benchmark of benchmarks) {\n      const isAsync = benchmark.fn.constructor.name === 'AsyncFunction';\n      const metrics = isAsync \n        ? await this.measureAsync(benchmark.name, benchmark.fn as () => Promise<T>, options)\n        : this.measureSync(benchmark.name, benchmark.fn as () => T, options);\n      \n      results.push({ name: benchmark.name, metrics });\n    }\n\n    // Rank by execution time (lower is better)\n    const ranked = results\n      .sort((a, b) => (a.metrics.statistics?.mean || a.metrics.executionTime) - \n                      (b.metrics.statistics?.mean || b.metrics.executionTime))\n      .map((result, index) => ({ ...result, ranking: index + 1 }));\n\n    return ranked;\n  }\n\n  /**\n   * Load testing with concurrent operations\n   */\n  async loadTest<T>(\n    name: string,\n    fn: () => Promise<T>,\n    concurrency: number = 10,\n    duration: number = 10000\n  ): Promise<PerformanceMetrics> {\n    const startTime = Date.now();\n    const operations: Array<{ duration: number; success: boolean; error?: string }> = [];\n    const promises: Promise<void>[] = [];\n\n    for (let i = 0; i < concurrency; i++) {\n      promises.push(this.runConcurrentTest(fn, operations, startTime + duration));\n    }\n\n    await Promise.all(promises);\n\n    const successfulOps = operations.filter(op => op.success);\n    const failedOps = operations.filter(op => !op.success);\n    const durations = successfulOps.map(op => op.duration);\n\n    const metrics: PerformanceMetrics = {\n      executionTime: Date.now() - startTime,\n      memoryUsage: {\n        heap: 0,\n        external: 0,\n        total: 0\n      },\n      throughput: (successfulOps.length / ((Date.now() - startTime) / 1000)),\n      statistics: {\n        ...this.calculateStatistics(durations),\n        successRate: successfulOps.length / operations.length,\n        errorRate: failedOps.length / operations.length,\n        totalOperations: operations.length\n      } as any\n    };\n\n    this.measurements.push({ name, metrics, timestamp: Date.now() });\n    return metrics;\n  }\n\n  /**\n   * Memory leak detection\n   */\n  async detectMemoryLeaks<T>(\n    name: string,\n    fn: () => T | Promise<T>,\n    iterations: number = 100\n  ): Promise<{ hasLeak: boolean; memoryGrowth: number; measurements: number[] }> {\n    const memoryMeasurements: number[] = [];\n    \n    // Force initial garbage collection\n    if (global.gc) {\n      global.gc();\n    }\n\n    for (let i = 0; i < iterations; i++) {\n      await fn();\n      \n      // Force garbage collection every 10 iterations\n      if (i % 10 === 0 && global.gc) {\n        global.gc();\n      }\n      \n      const memory = process.memoryUsage();\n      memoryMeasurements.push(memory.heapUsed + memory.external);\n    }\n\n    // Calculate memory growth trend\n    const firstQuarter = memoryMeasurements.slice(0, Math.floor(iterations / 4));\n    const lastQuarter = memoryMeasurements.slice(-Math.floor(iterations / 4));\n    \n    const firstAverage = firstQuarter.reduce((a, b) => a + b, 0) / firstQuarter.length;\n    const lastAverage = lastQuarter.reduce((a, b) => a + b, 0) / lastQuarter.length;\n    \n    const memoryGrowth = lastAverage - firstAverage;\n    const hasLeak = memoryGrowth > (firstAverage * 0.1); // 10% growth threshold\n\n    return {\n      hasLeak,\n      memoryGrowth,\n      measurements: memoryMeasurements\n    };\n  }\n\n  /**\n   * Get all recorded measurements\n   */\n  getAllMeasurements(): Array<{ name: string; metrics: PerformanceMetrics; timestamp: number }> {\n    return [...this.measurements];\n  }\n\n  /**\n   * Clear all measurements\n   */\n  clearMeasurements(): void {\n    this.measurements = [];\n  }\n\n  /**\n   * Generate performance report\n   */\n  generateReport(): string {\n    if (this.measurements.length === 0) {\n      return 'No performance measurements recorded';\n    }\n\n    let report = '=== Performance Report ===\\n\\n';\n\n    for (const measurement of this.measurements) {\n      report += `Test: ${measurement.name}\\n`;\n      report += `Execution Time: ${measurement.metrics.executionTime.toFixed(2)}ms\\n`;\n      \n      if (measurement.metrics.throughput) {\n        report += `Throughput: ${measurement.metrics.throughput.toFixed(2)} ops/sec\\n`;\n      }\n      \n      if (measurement.metrics.statistics) {\n        const stats = measurement.metrics.statistics;\n        report += `Statistics:\\n`;\n        report += `  Mean: ${stats.mean.toFixed(2)}ms\\n`;\n        report += `  Median: ${stats.median.toFixed(2)}ms\\n`;\n        report += `  P95: ${stats.p95.toFixed(2)}ms\\n`;\n        report += `  P99: ${stats.p99.toFixed(2)}ms\\n`;\n        \n        if (stats.variance) {\n          report += `  Variance: ${stats.variance.toFixed(2)}\\n`;\n        }\n        \n        if (stats.standardDeviation) {\n          report += `  Std Dev: ${stats.standardDeviation.toFixed(2)}\\n`;\n        }\n      }\n      \n      report += `Memory Usage:\\n`;\n      report += `  Heap: ${(measurement.metrics.memoryUsage.heap / 1024 / 1024).toFixed(2)}MB\\n`;\n      report += `  External: ${(measurement.metrics.memoryUsage.external / 1024 / 1024).toFixed(2)}MB\\n`;\n      report += `  Total: ${(measurement.metrics.memoryUsage.total / 1024 / 1024).toFixed(2)}MB\\n`;\n      report += '\\n';\n    }\n\n    return report;\n  }\n\n  private calculateMetrics(\n    timeMeasurements: number[],\n    memoryMeasurements: Array<{ heap: number; external: number; total: number }>\n  ): PerformanceMetrics {\n    const executionTime = timeMeasurements.reduce((a, b) => a + b, 0) / timeMeasurements.length;\n    \n    const avgMemory = {\n      heap: memoryMeasurements.reduce((sum, m) => sum + m.heap, 0) / memoryMeasurements.length,\n      external: memoryMeasurements.reduce((sum, m) => sum + m.external, 0) / memoryMeasurements.length,\n      total: memoryMeasurements.reduce((sum, m) => sum + m.total, 0) / memoryMeasurements.length\n    };\n\n    return {\n      executionTime,\n      memoryUsage: avgMemory,\n      statistics: this.calculateStatistics(timeMeasurements)\n    };\n  }\n\n  private calculateStatistics(measurements: number[]) {\n    const sorted = [...measurements].sort((a, b) => a - b);\n    const sum = measurements.reduce((a, b) => a + b, 0);\n    const mean = sum / measurements.length;\n    \n    const median = sorted.length % 2 === 0\n      ? (sorted[sorted.length / 2 - 1] + sorted[sorted.length / 2]) / 2\n      : sorted[Math.floor(sorted.length / 2)];\n\n    const p95Index = Math.floor(sorted.length * 0.95);\n    const p99Index = Math.floor(sorted.length * 0.99);\n    \n    const p95 = sorted[p95Index];\n    const p99 = sorted[p99Index];\n    \n    const variance = measurements.reduce((sum, val) => sum + Math.pow(val - mean, 2), 0) / measurements.length;\n    const standardDeviation = Math.sqrt(variance);\n\n    return {\n      mean,\n      median,\n      p95,\n      p99,\n      variance,\n      standardDeviation\n    };\n  }\n\n  private async runConcurrentTest<T>(\n    fn: () => Promise<T>,\n    operations: Array<{ duration: number; success: boolean; error?: string }>,\n    endTime: number\n  ): Promise<void> {\n    while (Date.now() < endTime) {\n      const start = performance.now();\n      try {\n        await fn();\n        operations.push({\n          duration: performance.now() - start,\n          success: true\n        });\n      } catch (error) {\n        operations.push({\n          duration: performance.now() - start,\n          success: false,\n          error: error instanceof Error ? error.message : String(error)\n        });\n      }\n    }\n  }\n}\n\n// Global performance measurement instance\nexport const performanceMeasurement = new PerformanceMeasurement();\n\n// Convenience functions\nexport function measurePerformance<T>(\n  name: string,\n  fn: () => T,\n  options?: Partial<PerformanceTestOptions>\n): PerformanceMetrics {\n  return performanceMeasurement.measureSync(name, fn, options);\n}\n\nexport async function measureAsyncPerformance<T>(\n  name: string,\n  fn: () => Promise<T>,\n  options?: Partial<PerformanceTestOptions>\n): Promise<PerformanceMetrics> {\n  return performanceMeasurement.measureAsync(name, fn, options);\n}\n\nexport async function benchmarkFunctions<T>(\n  benchmarks: Array<{ name: string; fn: () => T | Promise<T> }>,\n  options?: Partial<PerformanceTestOptions>\n): Promise<Array<{ name: string; metrics: PerformanceMetrics; ranking: number }>> {\n  return performanceMeasurement.benchmarkComparison(benchmarks, options);\n}"],"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","ignoreList":[]}