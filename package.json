{
  "name": "@zen-ai/claude-code-zen",
  "version": "1.0.1",
  "type": "module",
  "description": "Claude Code Zen: AI swarm orchestration platform with neural networks, web dashboard, and complete bundled system",
  "main": "dist/claude-zen.js",
  "bin": {
    "claude-zen": "dist/claude-zen.js"
  },
  "preferGlobal": true,
  "private": true,
  "workspaces": [
    "apps/claude-code-zen-server",
    "apps/web-dashboard",
    "packages/agent-manager",
    "packages/agent-monitoring",
    "packages/agui",
    "packages/ai-safety",
    "packages/brain",
    "packages/chaos-engineering",
    "packages/coordination-core",
    "packages/database",
    "packages/dspy",
    "packages/event-system",
    "packages/fact-system",
    "packages/foundation",
    "packages/knowledge",
    "packages/llm-routing",
    "packages/load-balancing",
    "packages/memory",
    "packages/monitoring",
    "packages/multi-level-orchestration",
    "packages/neural-ml",
    "packages/safe-framework",
    "packages/sparc",
    "packages/teamwork",
    "packages/workflows"
  ],
  "scripts": {
    "start": "pnpm --filter @claude-zen/server start",
    "dev": "echo '🚀 Starting Node.js zero-downtime auto-reload...' && pnpm --filter @claude-zen/server dev:watch",
    "dev:server": "pnpm --filter @claude-zen/server dev:watch",
    "dev:zero-downtime": "echo '🔄 Starting ZERO-DOWNTIME development mode...' && pnpm --filter @claude-zen/server dev:zero-downtime",
    "dev:web": "pnpm --filter @claude-zen/web-dashboard dev",
    "dev:web:host": "pnpm --filter @claude-zen/web-dashboard dev:host",
    "dev:auto": "echo '🔥 Starting ULTIMATE development mode: Node.js + Svelte auto-reload...' && concurrently -n \"SERVER,SVELTE\" -c \"blue,green\" \"pnpm --filter @claude-zen/server dev:watch\" \"pnpm --filter @claude-zen/web-dashboard dev:auto-rebuild\"",
    "dev:full": "concurrently \"pnpm:dev:server\" \"pnpm:dev:web\" \"pnpm:type-check:watch\"",
    "dev:all": "echo '🚀 Starting ALL services: Registry + Server + Web + Type Check...' && concurrently -n \"REGISTRY,SERVER,WEB,TYPES\" -c \"magenta,blue,green,yellow\" \"pnpm:registry:start\" \"pnpm:dev:server\" \"pnpm:dev:web\" \"pnpm:type-check:watch\"",
    "build:server": "pnpm --filter @claude-zen/server build",
    "build:web": "pnpm --filter @claude-zen/web-dashboard build",
    "build": "pnpm build:server && pnpm build:web",
    "preview:web": "pnpm --filter @claude-zen/web-dashboard preview",
    "check:web": "pnpm --filter @claude-zen/web-dashboard check",
    "dev:esbuild": "pnpm build && node dist/claude-zen.js integrated",
    "debug": "pnpm --filter @claude-zen/server debug",
    "build:strict": "tsc --project tsconfig.json --noEmit && node esbuild.config.js",
    "build:watch": "node esbuild.config.js --watch",
    "build:wasm": "cd src/neural/wasm && ./scripts/build-wasm.sh",
    "build:wasm:dev": "cd src/neural/wasm && BUILD_MODE=dev ./scripts/build-wasm.sh",
    "build:wasm:prod": "cd src/neural/wasm && OPTIMIZE_SIZE=true BUILD_MODE=release ./scripts/build-wasm.sh",
    "build:neural-wasm": "cd src/neural/rust/wasm-api && ./build.sh",
    "build:neural-wasm:dev": "cd src/neural/rust/wasm-api && wasm-pack build --dev --target web --out-dir pkg",
    "build:bindings": "cd src/bindings && pnpm run build",
    "build:bindings:dev": "cd src/bindings && pnpm run build:dev",
    "build:bindings:release": "cd src/bindings && pnpm run build:release",
    "clean": "gts clean",
    "test": "pnpm --filter @claude-zen/server test && pnpm --filter @claude-zen/web-dashboard test",
    "test:server": "pnpm --filter @claude-zen/server test",
    "test:web": "pnpm --filter @claude-zen/web-dashboard test",
    "test:watch": "pnpm --filter @claude-zen/server test:watch",
    "test:ui": "pnpm --filter @claude-zen/server test --ui",
    "test:coverage": "pnpm --filter @claude-zen/server test --coverage",
    "test:legacy": "NODE_OPTIONS='--experimental-vm-modules' vitest run --maxWorkers=1 --testTimeout=30000",
    "test:legacy:watch": "NODE_OPTIONS='--experimental-vm-modules' vitest --watch",
    "test:unit": "vitest run src/__tests__/unit",
    "test:integration": "vitest run src/__tests__/integration",
    "test:e2e": "vitest run src/__tests__/e2e",
    "test:comprehensive": "node scripts/run-infrastructure-tests.js && pnpm run test:coverage",
    "test:ci": "NODE_OPTIONS='--experimental-vm-modules' vitest run --coverage --maxWorkers=2",
    "test:debug": "NODE_OPTIONS='--experimental-vm-modules --inspect-brk' vitest run --no-coverage",
    "test:neural": "node src/bindings/test/test.js",
    "test:tdd-london": "node scripts/run-tdd-london-tests.js",
    "lint": "echo '🤖 AI IMPROVEMENT SYSTEM: Standard lint with AI enhancement directives...' && echo '\\n🔍 Checking for circular dependencies...' && pnpm run lint:circular && echo '\\n📊 Running TypeScript compilation check...' && tsc --noEmit --skipLibCheck && echo '\\n⚠️  AI DIRECTIVE: Fix ALL warnings by EXPANDING code, not disabling rules\\n\\n🚀 IMPROVEMENT STRATEGIES:\\n1. Replace any types with specific interfaces\\n2. Add import type for type-only imports\\n3. Fix floating promises with proper error handling\\n4. Add exhaustive switch cases\\n5. Preserve unused code with comments explaining why\\n6. Optimize performance with better data structures\\n\\n⭐ TARGET: Zero warnings through intelligent code enhancement' && pnpm run lint:rust && (tsc --noEmit --skipLibCheck > /dev/null 2>&1 && echo '\\n✅ Code is clean, running TSDoc analysis...' && pnpm run docs:check || echo '\\n⚠️  TSDoc skipped - fix TypeScript errors first')",
    "lint:fix": "eslint . --ext .ts,.tsx --fix && prettier --write \"**/*.{ts,tsx,js,jsx,json,md}\" && pnpm run format:rust && (tsc --noEmit --skipLibCheck > /dev/null 2>&1 && pnpm run docs:fix || echo '⚠️  Skipping TSDoc - fix code issues first')",
    "lint:ts": "echo '📊 TypeScript + ESLint Check...' && timeout 2m npx eslint . --ext .ts,.tsx --max-warnings 20 --report-unused-disable-directives || echo '⚠️  ESLint stopped at 20 warnings or timed out after 2 minutes' && npx tsc --noEmit --skipLibCheck --pretty && echo '✅ ESLint + TypeScript compilation passed'",
    "lint:quick": "npx eslint apps/claude-code-zen-server/src --ext .ts,.tsx --max-warnings 20",
    "lint:file": "npx eslint",
    "lint:rust": "find . -name '*.rs' -not -path '*/target/*' -not -path '*/node_modules/*' -exec test -f {} \\; | head -20 | xargs -r rustfmt --edition=2024 --check || true",
    "lint:complexity": "node scripts/check-complexity.js",
    "lint:circular": "dependency-cruiser --output-type err --validate --no-config --ts-pre-compilation-deps --exclude 'node_modules|dist|build|target|pkg' --max-depth 10 packages apps || echo '⚠️  Circular dependencies detected - fix before continuing'",
    "lint:jsdoc": "node scripts/check-jsdoc-advanced.js",
    "lint:jsdoc-simple": "node scripts/check-jsdoc-simple.js",
    "lint:size": "node scripts/check-file-sizes.js",
    "format": "pnpm run format:ts && pnpm run format:rust",
    "format:ts": "prettier --write \"**/*.{ts,tsx,js,jsx,json,md}\"",
    "format:rust": "find . -name '*.rs' -not -path '*/target/*' -not -path '*/node_modules/*' | head -20 | xargs -r rustfmt --edition=2024 || true",
    "format:check": "pnpm run format:check:ts && pnpm run format:check:rust",
    "format:check:ts": "prettier --check \"**/*.{ts,tsx,js,jsx,json,md}\"",
    "format:check:rust": "find . -name '*.rs' -not -path '*/target/*' -not -path '*/node_modules/*' | head -20 | xargs -r rustfmt --edition=2024 --check || true",
    "fix:zen": "node scripts/hybrid-fixer.js",
    "fix:zen:compile": "tsc --noEmit --skipLibCheck && echo '✅ TypeScript compilation successful'",
    "fix:zen:production": "node scripts/compile-fixer-no-tests.js",
    "fix:zen:production:dry": "node scripts/compile-fixer-no-tests.js --dry-run",
    "fix:zen:errors": "node scripts/compile-fixer-errors-only.js",
    "fix:zen:errors:dry": "node scripts/compile-fixer-errors-only.js --dry-run",
    "fix:zen:errors:all": "node scripts/compile-fixer-errors-only.js --include-tests",
    "fix:zen:dry": "node scripts/hybrid-fixer.js --dry-run",
    "fix:zen:biome-only": "pnpm biome check --apply",
    "fix:zen:format": "pnpm biome format --write .",
    "fix:zen:zero": "node scripts/monitor-zen-to-zero.js",
    "fix:zen:quality": "pnpm run analyze:quality && pnpm run fix:naming && pnpm run fix:optional-chaining && pnpm run fix:unused-vars && node scripts/biome-ai-fixer.js",
    "fix:claude-sdk": "node scripts/fix-typescript-claude-sdk.mjs",
    "fix:claude-sdk:dry": "node scripts/fix-typescript-claude-sdk.mjs --dry-run",
    "fix:claude-sdk:verbose": "node scripts/fix-typescript-claude-sdk.mjs --verbose",
    "analyze:quality": "node scripts/code-quality/complexity-analyzer.cjs",
    "analyze:quality:detailed": "node scripts/code-quality/complexity-analyzer.cjs src/**/*.ts > quality-report.md",
    "fix:naming": "pnpm jscodeshift --transform=scripts/transformers/naming-convention-fixer-silent.cjs --parser=tsx --extensions=ts,tsx src",
    "fix:naming:dry": "pnpm jscodeshift --transform=scripts/transformers/naming-convention-fixer-silent.cjs --parser=tsx --extensions=ts,tsx --dry src",
    "fix:optional-chaining": "pnpm jscodeshift --transform=scripts/transformers/optional-chaining-fixer.cjs --parser=tsx --extensions=ts,tsx src",
    "fix:optional-chaining:dry": "pnpm jscodeshift --transform=scripts/transformers/optional-chaining-fixer.cjs --parser=tsx --extensions=ts,tsx --dry src",
    "fix:optional-chaining:verbose": "pnpm jscodeshift --transform=scripts/transformers/optional-chaining-fixer.cjs --parser=tsx --extensions=ts,tsx --verbose src",
    "fix:bracket-notation": "pnpm jscodeshift --transform=scripts/transformers/bracket-notation-fixer.cjs --parser=tsx --extensions=ts,tsx src",
    "fix:bracket-notation:dry": "pnpm jscodeshift --transform=scripts/transformers/bracket-notation-fixer.cjs --parser=tsx --extensions=ts,tsx --dry src",
    "fix:bracket-notation:verbose": "pnpm jscodeshift --transform=scripts/transformers/bracket-notation-fixer.cjs --parser=tsx --extensions=ts,tsx --verbose=2 src",
    "fix:unused-vars": "pnpm jscodeshift --transform=scripts/transformers/unused-variable-fixer.cjs --parser=tsx --extensions=ts,tsx src",
    "fix:unused-vars:dry": "pnpm jscodeshift --transform=scripts/transformers/unused-variable-fixer.cjs --parser=tsx --extensions=ts,tsx --dry src",
    "fix:process-env": "pnpm jscodeshift --transform=scripts/transformers/process-env-bracket-fixer.cjs --parser=tsx --extensions=ts,tsx,js,jsx --verbose=2 src",
    "fix:process-env:dry": "pnpm jscodeshift --transform=scripts/transformers/process-env-bracket-fixer.cjs --parser=tsx --extensions=ts,tsx,js,jsx --dry --verbose=2 src",
    "fix:unused-imports": "pnpm jscodeshift --transform=scripts/transformers/import-cleanup-fixer.cjs --parser=tsx --extensions=ts,tsx src",
    "fix:unused-imports:dry": "pnpm jscodeshift --transform=scripts/transformers/import-cleanup-fixer.cjs --parser=tsx --extensions=ts,tsx --dry src",
    "format:biome": "biome format --write .",
    "naming:check": "find src -name '*.ts' -o -name '*.tsx' | grep -E '[A-Z]' && echo 'Non-kebab-case files found!' && exit 1 || echo 'All files follow kebab-case naming ✅'",
    "server": "node dist/claude-zen.js integrated",
    "benchmark": "node src/coordination/diagnostics/benchmark.js",
    "example:doc-analysis": "pnpm tsx src/examples/document-analysis-example.ts",
    "scan:docs": "pnpm tsx src/examples/document-analysis-example.ts --quick",
    "scan:interactive": "pnpm tsx src/examples/document-analysis-example.ts --full",
    "docs:build": "node scripts/docs-build.js",
    "docs:enhanced": "node scripts/enhanced-docs-generator.js",
    "docs:full": "pnpm run docs:build && pnpm run docs:enhanced",
    "docs:validate": "node scripts/jsdoc-validator.cjs",
    "docs:validate:fix": "node scripts/jsdoc-validator.js --auto-fix",
    "docs:coverage": "node scripts/docs-coverage.js",
    "docs:templates": "node scripts/template-validator.js",
    "docs:templates:fix": "node scripts/template-validator.js --auto-fix",
    "docs:deploy": "node scripts/docs-deploy.js",
    "docs:deploy:staging": "node scripts/docs-deploy.js --environment staging",
    "docs:check": "node scripts/global-tsdoc-check.mjs",
    "docs:check-strict": "node scripts/global-tsdoc-check.mjs --strict",
    "docs:check-when-clean": "biome check . --max-diagnostics=1 > /dev/null 2>&1 && echo '✅ Code is clean, running TSDoc analysis...' && pnpm run docs:check || echo '⚠️  Fix code issues first before TSDoc analysis'",
    "docs:fix": "node scripts/global-tsdoc-fix-sdk.mjs",
    "docs:fix-all": "node scripts/global-tsdoc-fix-sdk.mjs --verbose",
    "docs:ai-coverage": "npx typescript-coverage-report --threshold 95 --outputDir docs/coverage && npx @microsoft/api-extractor init --local",
    "docs:ai-analysis": "pnpm run docs:coverage && pnpm run docs:ai-coverage && echo '📊 AI-optimized documentation analysis complete'",
    "docs:typedoc": "npx typedoc --options typedoc.json --out docs/api packages/*/src/index.ts",
    "docs:generate": "pnpm run docs:build && pnpm run docs:typedoc && pnpm run docs:ai-coverage",
    "import-scanner": "pnpm tsx scripts/import-scanner.ts",
    "demo-scanner": "pnpm tsx scripts/demo-scanner.ts",
    "type-check": "pnpm --filter @claude-zen/server type-check && pnpm --filter @claude-zen/web-dashboard type-check",
    "type-check:server": "pnpm --filter @claude-zen/server type-check",
    "type-check:web": "pnpm --filter @claude-zen/web-dashboard type-check",
    "type-check:watch": "pnpm --filter @claude-zen/server type-check --watch",
    "binary:build": "pnpm run build:prod && pnpm run binary:bundle",
    "binary:bundle": "pnpm run binary:ncc && pnpm run binary:copy-wasm && pnpm run binary:create-launchers",
    "binary:ncc": "ncc build dist/claude-zen.js -o bin/bundle --minify --no-source-map-register",
    "binary:copy-wasm": "cp src/neural/wasm/pkg-manual/*.wasm bin/bundle/ && cp src/neural/wasm/pkg-manual/*.js bin/bundle/ 2>/dev/null || true",
    "binary:create-launchers": "node scripts/create-launchers.js",
    "binary:all": "pnpm run binary:build",
    "prepublishOnly": "pnpm run build",
    "publish:beta": "npm publish --tag beta",
    "publish:alpha": "npm publish --tag alpha",
    "publish:latest": "npm publish",
    "publish:dry": "npm publish --dry-run",
    "registry:start": "cd .verdaccio && ./start.sh",
    "registry:setup": "./scripts/registry-setup.sh setup",
    "registry:info": "./scripts/registry-setup.sh info",
    "registry:list": "./scripts/registry-setup.sh list",
    "packages:list": "./scripts/publish-packages.sh list",
    "packages:publish-all": "./scripts/publish-packages.sh all",
    "packages:publish-agui": "./scripts/publish-packages.sh agui",
    "packages:publish-foundation": "./scripts/publish-packages.sh foundation"
  },
  "files": [
    "dist/",
    "bin/",
    "package.json",
    "src/",
    "docs/",
    "scripts/",
    "README.md",
    "LICENSE",
    "CHANGELOG.md"
  ],
  "publishConfig": {
    "access": "public",
    "registry": "https://registry.npmjs.org/"
  },
  "keywords": [
    "ai",
    "swarm",
    "orchestration",
    "neural-networks",
    "coordination",
    "wasm",
    "web-dashboard",
    "typescript",
    "web-interface"
  ],
  "dependencies": {
    "@ag-ui/core": "^0.0.36",
    "@anthropic-ai/claude-code": "^1.0.83",
    "@anthropic-ai/sdk": "^0.60.0",
    "@babel/plugin-syntax-optional-chaining": "^7.8.3",
    "@claude-zen/agui": "link:packages/agui",
    "@floating-ui/dom": "^1.7.3",
    "@godaddy/terminus": "^4.12.1",
    "@lancedb/lancedb": "^0.21.3",
    "@logtape/file": "^1.0.4",
    "@logtape/logtape": "^1.0.4",
    "@octokit/rest": "^22.0.0",
    "@sveltejs/adapter-node": "^5.3.1",
    "@sveltejs/kit": "^2.31.1",
    "@sveltejs/vite-plugin-svelte": "^6.1.2",
    "@tailwindcss/typography": "^0.5.16",
    "@types/better-sqlite3": "^7.6.13",
    "acorn": "^8.15.0",
    "autoprefixer": "^10.4.21",
    "better-sqlite3": "^12.2.0",
    "chalk": "^5.6.0",
    "commander": "^14.0.0",
    "compression": "^1.8.1",
    "connect-redis": "^9.0.0",
    "consistent-hashing": "^0.3.0",
    "cors": "^2.8.5",
    "escomplex": "2.0.0-alpha",
    "esprima": "^4.0.1",
    "eventemitter3": "^5.0.1",
    "express": "^5.1.0",
    "express-rate-limit": "^8.0.1",
    "express-session": "^1.18.2",
    "express-slow-down": "^3.0.0",
    "express-status-monitor": "^1.3.4",
    "express-validator": "^7.2.1",
    "express-ws": "^5.0.2",
    "fs-extra": "^11.3.1",
    "hashring": "^3.2.0",
    "helmet": "^8.1.0",
    "http-proxy-middleware": "^3.0.5",
    "ioredis": "^5.7.0",
    "js-yaml": "^4.1.0",
    "keyv": "^5.5.0",
    "kuzu": "^0.11.1",
    "level": "^8.0.1",
    "listr2": "^9.0.1",
    "lucide-svelte": "^0.539.0",
    "markdown-it": "^14.1.0",
    "mermaid": "^11.9.0",
    "morgan": "^1.10.1",
    "nanoid": "^5.1.5",
    "node-cron": "^4.2.1",
    "node-os-utils": "^1.3.7",
    "on-finished": "^2.4.1",
    "path-to-regexp": "^8.2.0",
    "playwright": "^1.54.2",
    "postcss": "^8.5.6",
    "prism-themes": "^1.9.0",
    "prismjs": "^1.30.0",
    "prom-client": "^15.1.3",
    "redis": "^5.8.1",
    "response-time": "^2.3.4",
    "seedrandom": "^3.0.5",
    "semver": "^7.7.2",
    "simple-statistics": "^7.8.8",
    "socket.io": "^4.8.1",
    "socket.io-client": "^4.8.1",
    "svelte": "^5.38.1",
    "svelte-check": "^4.3.1",
    "swagger-jsdoc": "^6.2.8",
    "swagger-ui-express": "^5.0.1",
    "tailwindcss": "^4.1.12",
    "typescript": "^5.9.2",
    "uuid": "^11.1.0",
    "vite": "^7.1.2",
    "vitest": "^3.2.4",
    "ws": "^8.18.3",
    "yaml": "^2.8.1",
    "zod": "^4.0.17"
  },
  "devDependencies": {
    "@biomejs/biome": "^2.1.4",
    "@eslint/js": "^9.33.0",
    "@types/blessed": "^0.1.25",
    "@types/compression": "^1.8.1",
    "@types/cors": "^2.8.19",
    "@types/express": "^5.0.3",
    "@types/fs-extra": "^11.0.4",
    "@types/jest": "^30.0.0",
    "@types/js-yaml": "^4.0.9",
    "@types/markdown-it": "^14.1.2",
    "@types/node": "^24.3.0",
    "@types/node-cron": "^3.0.11",
    "@types/on-finished": "^2.3.5",
    "@types/react": "^19.1.10",
    "@types/react-dom": "^19.1.7",
    "@types/response-time": "^2.3.9",
    "@types/seedrandom": "^3.0.8",
    "@types/semver": "^7.7.0",
    "@types/uuid": "^10.0.0",
    "@types/ws": "^8.18.1",
    "@typescript-eslint/eslint-plugin": "^8.40.0",
    "@typescript-eslint/parser": "^8.40.0",
    "@vercel/ncc": "^0.38.3",
    "@vitest/coverage-v8": "^3.2.4",
    "@vitest/ui": "^3.2.4",
    "@yao-pkg/pkg": "^6.6.0",
    "boxednode": "^2.4.4",
    "concurrently": "^9.2.0",
    "dependency-cruiser": "^17.0.1",
    "esbuild": "^0.25.9",
    "esbuild-jest": "^0.5.0",
    "eslint": "^9.33.0",
    "eslint-plugin-import": "^2.32.0",
    "eslint-plugin-jest": "^28.5.0",
    "eslint-plugin-n": "^17.7.0",
    "eslint-plugin-promise": "^7.2.1",
    "eslint-plugin-sonarjs": "^3.0.4",
    "eslint-plugin-unicorn": "^60.0.0",
    "eslint-plugin-unused-imports": "^4.2.0",
    "execa": "^9.6.0",
    "fast-check": "^4.2.0",
    "happy-dom": "^18.0.1",
    "jest": "^30.0.5",
    "jest-environment-jsdom": "^30.0.5",
    "jscodeshift": "^17.3.0",
    "nodemon": "^3.1.10",
    "prettier": "^3.6.2",
    "react-devtools-core": "^6.1.5",
    "ts-jest": "^29.4.1",
    "tsx": "^4.20.4"
  },
  "engines": {
    "node": ">=22.0.0"
  },
  "repository": {
    "type": "git",
    "url": "git+https://github.com/your-org/claude-code-zen.git"
  },
  "author": "Claude Code Zen Team",
  "license": "MIT",
  "bugs": {
    "url": "https://github.com/your-org/claude-code-zen/issues"
  },
  "homepage": "https://github.com/your-org/claude-code-zen#readme"
}
