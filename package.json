{
  "name": "claude-code-zen",
  "version": "1.0.0-alpha.43",
  "type": "module",
  "description": "Claude Code Zen: Unified AI swarm orchestration platform with neural networks and direct integration",
  "main": "dist/claude-zen-core.js",
  "bin": {
    "claude-zen": "dist/claude-zen.js"
  },
  "scripts": {
    "start": "node dist/claude-zen.js core",
    "dev": "npx tsx src/main.ts integrated --port 3000",
    "dev:tui": "npx tsx src/interfaces/terminal/main.ts --interactive",
    "dev:web": "npx tsx src/main.ts web --port 3000",
    "dev:full": "concurrently \"npm:dev\" \"npm:type-check:watch\" \"npm:test:watch\"",
    "dev:fast": "npm run build:watch",
    "dev:esbuild": "npm run build && node dist/claude-zen.js integrated",
    "debug": "node --inspect-brk -r tsx/cjs src/claude-zen-core.ts",
    "build": "npm run build:tsc",
    "build:tsc": "tsc --project tsconfig.build.json",
    "build:esbuild": "node esbuild.config.js",
    "build:fast": "node esbuild.config.js",
    "build:watch": "node esbuild.config.js --watch",
    "build:prod": "NODE_ENV=production node esbuild.config.js",
    "build:wasm": "cd src/neural/wasm && ./scripts/build-wasm.sh",
    "build:wasm:dev": "cd src/neural/wasm && BUILD_MODE=dev ./scripts/build-wasm.sh",
    "build:wasm:prod": "cd src/neural/wasm && OPTIMIZE_SIZE=true BUILD_MODE=release ./scripts/build-wasm.sh",
    "build:bindings": "cd src/bindings && npm run build",
    "build:bindings:dev": "cd src/bindings && npm run build:dev",
    "build:bindings:release": "cd src/bindings && npm run build:release",
    "clean": "gts clean",
    "test": "vitest run",
    "test:watch": "vitest",
    "test:ui": "vitest --ui",
    "test:coverage": "vitest run --coverage",
    "test:legacy": "NODE_OPTIONS='--experimental-vm-modules' vitest run --maxWorkers=1 --testTimeout=30000",
    "test:legacy:watch": "NODE_OPTIONS='--experimental-vm-modules' vitest --watch",
    "test:unit": "vitest run src/__tests__/unit",
    "test:integration": "vitest run src/__tests__/integration",
    "test:e2e": "vitest run src/__tests__/e2e",
    "test:comprehensive": "node scripts/run-infrastructure-tests.js && npm run test:coverage",
    "test:ci": "NODE_OPTIONS='--experimental-vm-modules' vitest run --coverage --maxWorkers=2",
    "test:debug": "NODE_OPTIONS='--experimental-vm-modules --inspect-brk' vitest run --no-coverage",
    "test:neural": "node src/bindings/test/test.js",
    "test:tdd-london": "node scripts/run-tdd-london-tests.js",
    "lint": "npm run format:check && npm run lint:rust",
    "lint:fix": "npm run format && npm run format:rust",
    "lint:ts": "biome check .",
    "lint:rust": "find . -name '*.rs' -not -path '*/target/*' -not -path '*/node_modules/*' | head -20 | xargs -r rustfmt --edition=2024 --check || true",
    "lint:complexity": "node scripts/check-complexity.js",
    "lint:jsdoc": "node scripts/check-jsdoc-advanced.js",
    "lint:jsdoc-simple": "node scripts/check-jsdoc-simple.js",
    "lint:size": "node scripts/check-file-sizes.js",
    "format": "npm run format:ts && npm run format:rust",
    "format:ts": "biome format --write .",
    "format:rust": "find . -name '*.rs' -not -path '*/target/*' -not -path '*/node_modules/*' | head -20 | xargs -r rustfmt --edition=2024 || true",
    "format:check": "npm run format:check:ts && npm run format:check:rust",
    "format:check:ts": "biome check .",
    "format:check:rust": "find . -name '*.rs' -not -path '*/target/*' -not -path '*/node_modules/*' | head -20 | xargs -r rustfmt --edition=2024 --check || true",
    "fix:zen": "node scripts/hybrid-fixer.js",
    "fix:zen:compile": "tsc --noEmit --skipLibCheck && echo '✅ TypeScript compilation successful'",
    "fix:zen:production": "node scripts/compile-fixer-no-tests.js",
    "fix:zen:production:dry": "node scripts/compile-fixer-no-tests.js --dry-run",
    "fix:zen:errors": "node scripts/compile-fixer-errors-only.js",
    "fix:zen:errors:dry": "node scripts/compile-fixer-errors-only.js --dry-run",
    "fix:zen:errors:all": "node scripts/compile-fixer-errors-only.js --include-tests",
    "fix:zen:dry": "node scripts/hybrid-fixer.js --dry-run",
    "fix:zen:biome-only": "npx biome check --apply",
    "fix:zen:format": "npx biome format --write .",
    "fix:zen:zero": "node scripts/monitor-zen-to-zero.js",
    "fix:zen:quality": "npm run analyze:quality && npm run fix:naming && npm run fix:optional-chaining && npm run fix:unused-vars && node scripts/biome-ai-fixer.js",
    "analyze:quality": "node scripts/code-quality/complexity-analyzer.cjs",
    "analyze:quality:detailed": "node scripts/code-quality/complexity-analyzer.cjs src/**/*.ts > quality-report.md",
    "fix:naming": "npx jscodeshift --transform=scripts/transformers/naming-convention-fixer-silent.cjs --parser=tsx --extensions=ts,tsx src",
    "fix:naming:dry": "npx jscodeshift --transform=scripts/transformers/naming-convention-fixer-silent.cjs --parser=tsx --extensions=ts,tsx --dry src",
    "fix:optional-chaining": "npx jscodeshift --transform=scripts/transformers/optional-chaining-fixer.cjs --parser=tsx --extensions=ts,tsx src",
    "fix:optional-chaining:dry": "npx jscodeshift --transform=scripts/transformers/optional-chaining-fixer.cjs --parser=tsx --extensions=ts,tsx --dry src",
    "fix:optional-chaining:verbose": "npx jscodeshift --transform=scripts/transformers/optional-chaining-fixer.cjs --parser=tsx --extensions=ts,tsx --verbose src",
    "fix:bracket-notation": "npx jscodeshift --transform=scripts/transformers/bracket-notation-fixer.cjs --parser=tsx --extensions=ts,tsx src",
    "fix:bracket-notation:dry": "npx jscodeshift --transform=scripts/transformers/bracket-notation-fixer.cjs --parser=tsx --extensions=ts,tsx --dry src",
    "fix:bracket-notation:verbose": "npx jscodeshift --transform=scripts/transformers/bracket-notation-fixer.cjs --parser=tsx --extensions=ts,tsx --verbose=2 src",
    "fix:unused-vars": "npx jscodeshift --transform=scripts/transformers/unused-variable-fixer.cjs --parser=tsx --extensions=ts,tsx src",
    "fix:unused-vars:dry": "npx jscodeshift --transform=scripts/transformers/unused-variable-fixer.cjs --parser=tsx --extensions=ts,tsx --dry src",
    "fix:process-env": "npx jscodeshift --transform=scripts/transformers/process-env-bracket-fixer.cjs --parser=tsx --extensions=ts,tsx,js,jsx --verbose=2 src",
    "fix:process-env:dry": "npx jscodeshift --transform=scripts/transformers/process-env-bracket-fixer.cjs --parser=tsx --extensions=ts,tsx,js,jsx --dry --verbose=2 src",
    "fix:unused-imports": "npx jscodeshift --transform=scripts/transformers/import-cleanup-fixer.cjs --parser=tsx --extensions=ts,tsx src",
    "fix:unused-imports:dry": "npx jscodeshift --transform=scripts/transformers/import-cleanup-fixer.cjs --parser=tsx --extensions=ts,tsx --dry src",
    "format:biome": "biome format --write .",
    "mcp": "node dist/mcp-server.js",
    "mcp:swarm": "node dist/mcp-server.js",
    "mcp:test": "npx tsx src/interfaces/mcp/test-external-servers.ts",
    "mcp:external": "npx tsx src/interfaces/mcp/test-external-servers.ts",
    "mcp:validate": "npx tsx src/interfaces/mcp/validate-external-config.ts",
    "naming:check": "find src -name '*.ts' -o -name '*.tsx' | grep -E '[A-Z]' && echo 'Non-kebab-case files found!' && exit 1 || echo 'All files follow kebab-case naming ✅'",
    "server": "node dist/claude-zen.js integrated",
    "benchmark": "node src/coordination/diagnostics/benchmark.js",
    "docs:build": "node scripts/docs-build.js",
    "docs:enhanced": "node scripts/enhanced-docs-generator.js",
    "docs:full": "npm run docs:build && npm run docs:enhanced",
    "docs:validate": "node scripts/jsdoc-validator.cjs",
    "docs:validate:fix": "node scripts/jsdoc-validator.js --auto-fix",
    "docs:coverage": "node scripts/docs-coverage.js",
    "docs:templates": "node scripts/template-validator.js",
    "docs:templates:fix": "node scripts/template-validator.js --auto-fix",
    "docs:deploy": "node scripts/docs-deploy.js",
    "docs:deploy:staging": "node scripts/docs-deploy.js --environment staging",
    "postinstall": "node scripts/setup-environment.js",
    "type-check": "tsc --noEmit",
    "type-check:watch": "tsc --noEmit --watch"
  },
  "files": [
    "dist/",
    "package.json",
    "src/",
    "docs/",
    "scripts/",
    "README.md",
    "LICENSE",
    "CHANGELOG.md"
  ],
  "dependencies": {
    "@ag-ui/core": "^0.0.35",
    "@anthropic-ai/claude-code": "^1.0.72",
    "@ax-llm/ax": "^14.0.11",
    "@azure-rest/ai-inference": "^1.0.0-beta.6",
    "@azure/core-auth": "^1.10.0",
    "@azure/core-sse": "^2.3.0",
    "@babel/plugin-syntax-optional-chaining": "^7.8.3",
    "@genkit-ai/mcp": "^1.16.0",
    "@google/generative-ai": "^0.24.1",
    "@lancedb/lancedb": "^0.21.2",
    "@logtape/file": "^1.0.4",
    "@logtape/logtape": "^1.0.4",
    "@modelcontextprotocol/sdk": "^1.17.2",
    "@octokit/rest": "^22.0.0",
    "@types/better-sqlite3": "^7.6.13",
    "@types/socket.io": "^3.0.2",
    "acorn": "^8.15.0",
    "better-sqlite3": "^12.2.0",
    "blessed": "^0.1.81",
    "chalk": "^5.5.0",
    "compression": "^1.8.1",
    "cors": "^2.8.5",
    "dspy.ts": "^0.1.3",
    "escomplex": "^1.3.0",
    "esprima": "^4.0.1",
    "express": "^5.1.0",
    "fs-extra": "^11.3.1",
    "helmet": "^8.1.0",
    "ink": "^6.1.0",
    "ink-select-input": "^6.2.0",
    "ink-text-input": "^6.0.0",
    "js-yaml": "^4.1.0",
    "kuzu": "^0.7.0",
    "listr2": "^8.2.8",
    "markdown-it": "^15.0.0",
    "nanoid": "^5.0.10",
    "node-cron": "^3.0.5",
    "playwright": "^1.51.0",
    "react": "^18.3.1",
    "react-dom": "^18.3.1",
    "semver": "^7.6.3",
    "socket.io": "^4.8.3",
    "socket.io-client": "^4.8.3",
    "sqlite3": "^5.1.7",
    "typescript": "^5.8.0",
    "uuid": "^11.0.4",
    "vite": "^6.0.7",
    "vitest": "^2.1.14",
    "ws": "^8.19.0",
    "yaml": "^2.6.1",
    "zod": "^3.24.1"
  },
  "devDependencies": {
    "@biomejs/biome": "^1.9.8",
    "@types/blessed": "^0.1.25",
    "@types/compression": "^1.7.5",
    "@types/cors": "^2.8.17",
    "@types/express": "^5.0.2",
    "@types/fs-extra": "^11.0.4",
    "@types/js-yaml": "^4.0.9",
    "@types/markdown-it": "^14.1.2",
    "@types/node": "^22.10.5",
    "@types/node-cron": "^3.0.11",
    "@types/react": "^18.3.18",
    "@types/react-dom": "^18.3.5",
    "@types/semver": "^7.5.8",
    "@types/uuid": "^10.0.0",
    "@types/ws": "^8.5.14",
    "@vitest/coverage-v8": "^2.1.14",
    "@vitest/ui": "^2.1.14",
    "concurrently": "^9.1.1",
    "esbuild": "^0.24.2",
    "glob": "^11.0.0",
    "gts": "^5.4.0",
    "jscodeshift": "^17.1.1",
    "tsx": "^4.19.2"
  },
  "engines": {
    "node": ">=18.0.0"
  },
  "repository": {
    "type": "git",
    "url": "git+https://github.com/your-org/claude-code-zen.git"
  },
  "keywords": [
    "ai",
    "swarm",
    "orchestration",
    "neural-networks",
    "coordination",
    "typescript",
    "cli",
    "tui"
  ],
  "author": "Claude Code Zen Team",
  "license": "MIT",
  "bugs": {
    "url": "https://github.com/your-org/claude-code-zen/issues"
  },
  "homepage": "https://github.com/your-org/claude-code-zen#readme"
}
