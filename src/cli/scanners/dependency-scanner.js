import { glob } from 'glob';import { readPackageUp } from 'read-pkg-up';import path from 'path';import { generateText } from '../ai-service.js';export async function scanForDependencyConflicts(flags) {  const suggestions = [];  const packageJsonFiles = await glob('**/package.json', { ignore: ['node_modules/**', '.git/**'] });  const packages = {};  for (const file of packageJsonFiles) {    const pkg = await readPackageUp({ cwd: path.dirname(file) });    if (!pkg) continue;    const deps = { ...pkg.packageJson.dependencies, ...pkg.packageJson.devDependencies };    for (const depName in deps) {      const depVersion = deps[depName];      if (!packages[depName]) {        packages[depName] = {};      }      if (!packages[depName][depVersion]) {        packages[depName][depVersion] = [];      }      packages[depName][depVersion].push(pkg.packageJson.name || path.basename(path.dirname(file)));    }  }  for (const depName in packages) {    const versions = Object.keys(packages[depName]);    if (versions.length > 1) {      let description = `Multiple versions of '${depName}' found:\n`;      for (const version of versions) {        description += `- ${version} used by: ${packages[depName][version].join(', ')}\n`;      }      const adrSuggestion = await generateText(`        Generate an Architecture Decision Record (ADR) suggestion for standardizing the dependency '${depName}'.        The following versions were found:        ${description}        Suggest a common version and explain the benefits of standardization.        Format the output as a markdown ADR, including sections for Context, Decision, and Consequences.      `, { modelType: 'pro' });      suggestions.push({        id: `dependency-conflict-${depName}`,        description: `Potential dependency conflict for '${depName}'.\n${description}`,        action: 'suggest_adr',        adrContent: adrSuggestion,        adrTitle: `Standardize ${depName} version`,      });    }  }  return suggestions;} 