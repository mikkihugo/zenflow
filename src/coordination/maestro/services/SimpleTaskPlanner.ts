/**
 * Simple Task Planner - Streamlined Integration
 *
 * Lightweight task planning service that directly leverages existing
 * AgentManager task-planner template with minimal overhead.
 *
 * Key Features:
 * - Direct AgentManager integration without dual-system complexity
 * - Simple interface following Single Responsibility
 * - Minimal dependencies and initialization overhead
 * - Fast fallback with basic task generation
 */

import type { AgentManager } from '../../agents/agent-manager';
import type { ILogger } from '../../core/logger';

export interface TaskPlannerRequest {
  featureName: string;
  designContent: string;
  requirements?: string;
}

export interface TaskPlannerResponse {
  success: boolean;
  taskMarkdown: string;
  method: 'agent' | 'fallback';
}

/**
 * Streamlined task planner with minimal overhead
 */
export class SimpleTaskPlanner {
  constructor(
    private agentManager: AgentManager,
    private logger: ILogger
  ) {}

  /**
   * Generate task plan using direct agent coordination
   */
  async generateTaskPlan(request: TaskPlannerRequest): Promise<TaskPlannerResponse> {
    this.logger.info(`Generating tasks for ${request.featureName}`);

    try {
      // Try direct AgentManager approach
      const agentResult = await this.tryAgentPlanning(request);
      if (agentResult) {
        return {
          success: true,
          taskMarkdown: agentResult,
          method: 'agent',
        };
      }
    } catch (error) {
      this.logger.warn(
        `Agent planning failed: ${error instanceof Error ? error.message : String(error)}`
      );
    }

    // Fast fallback to basic task generation
    return {
      success: true,
      taskMarkdown: this.generateBasicTasks(request),
      method: 'fallback',
    };
  }

  /**
   * Try using AgentManager task-planner template directly
   */
  private async tryAgentPlanning(request: TaskPlannerRequest): Promise<string | null> {
    let agentId: string | null = null;

    try {
      // Create task-planner agent
      agentId = await this.agentManager.createAgent('task-planner', {
        name: `Task Planner - ${request.featureName}`,
        type: 'task-planner',
        capabilities: ['project-management', 'task-breakdown'],
        maxConcurrentTasks: 1,
        priority: 90,
      });

      if (!agentId) return null;

      // Start agent
      await this.agentManager.startAgent(agentId);

      // Execute planning task
      const task = {
        id: `plan-${request.featureName}-${Date.now()}`,
        type: 'task-planning',
        description: `Generate tasks for ${request.featureName}`,
        input: {
          prompt: this.createSimplePrompt(request),
        },
        priority: 90,
        metadata: { featureName: request.featureName },
      };

      const result = await this.agentManager.executeTask(agentId, task);

      if (result?.output) {
        return this.formatTaskOutput(result.output, request.featureName);
      }

      return null;
    } finally {
      // Always cleanup agent
      if (agentId) {
        try {
          await this.agentManager.stopAgent(agentId);
        } catch (error) {
          this.logger.warn(
            `Failed to cleanup agent ${agentId}: ${error instanceof Error ? error.message : String(error)}`
          );
        }
      }
    }
  }

  /**
   * Create simple, focused planning prompt
   */
  private createSimplePrompt(request: TaskPlannerRequest): string {
    return `Generate implementation tasks for: ${request.featureName}

Design:
${request.designContent}

${request.requirements ? `Requirements: ${request.requirements}\n` : ''}
Create 5-8 specific, actionable tasks with acceptance criteria.
Format as markdown with checkboxes.`;
  }

  /**
   * Format agent output to consistent markdown
   */
  private formatTaskOutput(output: any, featureName: string): string {
    if (typeof output === 'string' && output.includes('# Implementation Tasks')) {
      return output;
    }

    // Simple formatting if structured output
    if (output && typeof output === 'object') {
      return `# Implementation Tasks for ${featureName}

${JSON.stringify(output, null, 2)}

*Generated by AgentManager task-planner*`;
    }

    return String(output || this.generateBasicTasks({ featureName } as TaskPlannerRequest));
  }

  /**
   * Generate basic task breakdown as fallback
   */
  private generateBasicTasks(request: TaskPlannerRequest): string {
    return `# Implementation Tasks for ${request.featureName}

## Task Breakdown

1. **Setup & Architecture**
   - [ ] Set up project structure and dependencies
   - [ ] Define core interfaces and types

2. **Core Implementation**
   - [ ] Implement main functionality
   - [ ] Add input validation and error handling

3. **Integration**
   - [ ] Integrate with existing systems  
   - [ ] Add configuration and environment support

4. **Quality Assurance**
   - [ ] Write comprehensive tests
   - [ ] Add logging and monitoring

5. **Documentation & Deployment**
   - [ ] Create user documentation
   - [ ] Prepare for deployment

*Generated by fallback task generation*`;
  }

  /**
   * Get simple status information
   */
  async getStatus(): Promise<{ available: boolean; method: string }> {
    try {
      // Simple availability check
      const hasAgentManager = !!this.agentManager;
      return {
        available: hasAgentManager,
        method: hasAgentManager ? 'agent' : 'fallback',
      };
    } catch {
      return { available: false, method: 'fallback' };
    }
  }
}
