/* tslint:disable */
/* eslint-disable */

/* auto-generated by NAPI-RS */

/** Configuration for zen-swarm-orchestrator with A2A protocol settings */
export interface OrchestratorConfig {
  host: string;
  port: number;
  storagePath: string;
  enabled: boolean;
  a2AServerPort: number;
  a2AClientEndpoint?: string;
  heartbeatTimeoutSec: number;
  messageTimeoutMs: number;
  useWebsocketTransport: boolean;
  websocketPort: number;
  websocketEndpoint?: string;
  enableZenNeural: boolean;
  enableZenForecasting: boolean;
  enableZenCompute: boolean;
  gpuEnabled: boolean;
  enableQuantum: boolean;
  quantumBackend?: string;
}
/** NAPI wrapper for a2a_rs::Task to expose to TypeScript */
export interface ZenA2ATask {
  /** Maps to a2a_rs::Task */
  taskId: string;
  status: string;
  inputData: string;
  outputData?: string;
  progress?: number;
  createdAt: string;
  updatedAt: string;
}
/** Legacy message structure for backwards compatibility */
export interface A2AProtocolMessage {
  id: string;
  taskId?: string;
  messageType: string;
  content: string;
  role: string;
  timestamp: number;
  metadata?: string;
}
/** Neural task request for direct library execution */
export interface NeuralTaskRequest {
  taskType: string;
  inputData: string;
  config?: string;
  timeoutMs?: number;
}
/** Resource usage information for performance optimization */
export interface ResourceUsageInfo {
  cpuTimeMs: number;
  memoryMb: number;
  gpuTimeMs?: number;
  vectorOperations?: number;
  neuralForwardPasses?: number;
}
/** Service result with execution path tracking */
export interface ServiceResult {
  success: boolean;
  result?: string;
  error?: string;
  executionTimeMs: number;
  executionPath: string;
  resourceUsage?: ResourceUsageInfo;
  neuralMetadata?: string;
}
/** A2A server status information */
export interface A2AServerStatus {
  running: boolean;
  port: number;
  registeredSwarms: number;
  messagesProcessed: number;
  errorRate: number;
}
/** Initialize the hybrid COLLECTIVE Intelligence + zen-swarm system */
export declare function initCollectiveZenSwarmOrchestrator(): string;
/** Initialize the COLLECTIVE Intelligence layer (Queen + Collective coordination) */
export declare function initCollectiveIntelligence(): string;
/** Initialize the zen-swarm high-performance backend */
export declare function initZenSwarmBackend(): string;
/** Legacy zen-swarm initialization (for compatibility) */
export declare function initZenSwarmOrchestrator(): string;
/** Get zen-swarm-orchestrator version with COLLECTIVE + neural stack info */
export declare function getZenSwarmOrchestratorVersion(): string;
/** Zen Swarm Orchestrator using full a2a-rs HTTP ecosystem */
export declare class ZenSwarmOrchestrator {
  /** Create new zen-swarm-orchestrator using a2a-rs HTTP client */
  constructor(config: OrchestratorConfig);
  /**
   * Initialize zen-swarm-orchestrator using premade a2a-rs components
   *
   * # Safety
   * This function is marked unsafe because it mutates shared state during initialization
   * and may be called from multiple threads concurrently. Caller must ensure proper
   * synchronization and that this is only called during system startup.
   */
  initialize(): Promise<boolean>;
  /** Get comprehensive status using a2a-rs components */
  getStatus(): Promise<string>;
  /** Send official A2A protocol message to zen-swarm daemon */
  sendA2AMessage(message: A2AProtocolMessage): Promise<ServiceResult>;
  /** Execute service using a2a-rs Task Manager and quantum integration */
  executeNeuralService(task: NeuralTaskRequest): Promise<ServiceResult>;
  /** Get comprehensive service capabilities using a2a-rs coordination */
  listServices(): Promise<Array<string>>;
  /** Get A2A server status information */
  getA2AServerStatus(): Promise<string>;
  /** Get THE COLLECTIVE services status */
  getCollectiveStatus(): Promise<string>;
  /** GET /.well-known/agent.json - Official A2A Agent Discovery */
  getAgentCapabilities(): Promise<string>;
  /** Create A2A task using zen-swarm protocol */
  createA2ATask(taskData: string): Promise<string>;
  /** GET /tasks/get - Official A2A Task Retrieval */
  getA2ATask(taskId: string): Promise<string>;
  /** POST /tasks/cancel - Official A2A Task Cancellation */
  cancelA2ATask(taskId: string): Promise<string>;
  /** List all A2A tasks (zen-swarm extension) */
  listA2ATasks(): Promise<string>;
  /** Get comprehensive metrics including neural performance */
  getMetrics(): Promise<string>;
  /** Get agent information using SimpleAgentInfo (uses agent_info field) */
  getAgentInfo(): Promise<string>;
  /** Get agent skills and capabilities (uses agent_info field) */
  getAgentSkills(): Promise<string>;
  /**
   * Add a skill to the agent info (uses agent_info field)
   *
   * # Safety
   * This function is marked unsafe because it directly modifies agent information
   * which may be accessed by other threads. Caller must ensure proper coordination
   * to avoid race conditions during skill updates.
   */
  addAgentSkill(
    skillId: string,
    skillName: string,
    description?: string | undefined | null
  ): Promise<boolean>;
  /**
   * Create a real HttpServer instance (uses HttpServer import)
   *
   * # Safety
   * This function is marked unsafe because it creates and configures HTTP server
   * resources that may be shared across threads. Caller must ensure proper
   * resource management and prevent concurrent server creation.
   */
  createHttpServer(bindAddress: string): Promise<string>;
  /** Create A2A Task using Task import (uses Task, TaskState imports) */
  createA2ATaskV2(taskId: string, contextId: string): Promise<string>;
  /** Create A2A Message using Message and Role imports */
  createA2AMessage(content: string, roleType: string): string;
  /** Process async A2A requests (production AsyncA2ARequestProcessor implementation) */
  processA2ARequest(requestJson: string): Promise<string>;
  /** Get production TaskState information (uses TaskState import) */
  getTaskStateInfo(stateName: string): string;
  /** Get production Role information (uses Role import) */
  getRoleInfo(roleName: string): string;
  /** Get HTTP server status for both swarm and orchestrator */
  getHttpServerStatus(): Promise<string>;
  /** Start HTTP server for swarm and orchestrator coordination */
  startHttpServer(): Promise<string>;
  /** Send swarm coordination message via HTTP server */
  coordinateSwarm(coordinationData: string): Promise<string>;
  /** Orchestrate task via HTTP server */
  orchestrateTask(taskData: string): Promise<string>;
  /** Get HTTP server metrics for both swarm and orchestrator operations */
  getHttpServerMetrics(): Promise<string>;
  /**
   * Shutdown orchestrator gracefully
   *
   * # Safety
   * This function is marked unsafe because it performs critical shutdown operations
   * that affect shared system state. Caller must ensure no other operations are
   * in progress and handle potential resource cleanup race conditions.
   */
  shutdown(): Promise<boolean>;
}
