/**
 * @file Integration Test for Batch MCP Tools
 * Tests the complete claude-zen implementation from MCP tools to batch execution
 */

import {
  batchExecuteTool,
  batchPerformanceTool,
  projectInitBatchTool,
} from '../../../../coordination/swarm/mcp/batch-tools.ts';

describe('Batch MCP Tools Integration - Claude-zen End-to-End', () => {
  describe('ðŸš€ Batch Execute Tool - Core Claude-zen Pattern', () => {
    it('should execute the classic claude-zen pattern via MCP', async () => {
      const params = {
        operations: [
          {
            type: 'swarm' as const,
            operation: 'init',
            params: { topology: 'mesh', maxAgents: 6 },
          },
          {
            type: 'swarm' as const,
            operation: 'spawn',
            params: { type: 'researcher' },
          },
          {
            type: 'swarm' as const,
            operation: 'spawn',
            params: { type: 'coder' },
          },
          {
            type: 'swarm' as const,
            operation: 'spawn',
            params: { type: 'analyst' },
          },
          {
            type: 'file' as const,
            operation: 'mkdir',
            params: { path: 'app' },
          },
          {
            type: 'file' as const,
            operation: 'write',
            params: {
              path: 'app/package.json',
              content: JSON.stringify(
                { name: 'test-app', version: '1.0.0' },
                null,
                2
              ),
            },
          },
          {
            type: 'file' as const,
            operation: 'write',
            params: {
              path: 'app/README.md',
              content:
                '# Test App\n\nGenerated by claude-zen batch operations.',
            },
          },
        ],
        config: {
          maxConcurrency: 6,
          trackPerformance: true,
        },
      };

      const result = (await batchExecuteTool.handler(params)) as MCPToolResult;

      // Verify MCP response structure
      expect(result?.success).toBe(true);
      expect(result?.content).toBeDefined();
      expect(Array.isArray(result?.content)).toBe(true);
      expect(result?.content.length).toBeGreaterThan(0);

      // Check that response contains performance metrics
      const responseText = result?.content?.[0]?.text;
      expect(responseText).toContain('Batch Execution Complete');
      expect(responseText).toContain('Speed Improvement:');
      expect(responseText).toContain('Token Reduction:');
      expect(responseText).toContain('Operations: 7');

      // Verify claude-zen claims are reported
      expect(responseText).toMatch(/Speed Improvement:\s*\*\*[\d.]+x\*\*/);
      expect(responseText).toMatch(/Token Reduction:\s*\*\*[\d.]+%\*\*/);
    }, 10000);

    it('should handle dependencies correctly in batch execution', async () => {
      const params = {
        operations: [
          {
            id: 'mkdir-base',
            type: 'file' as const,
            operation: 'mkdir',
            params: { path: 'test-project' },
          },
          {
            id: 'mkdir-src',
            type: 'file' as const,
            operation: 'mkdir',
            params: { path: 'test-project/src' },
            dependencies: ['mkdir-base'],
          },
          {
            id: 'create-file',
            type: 'file' as const,
            operation: 'write',
            params: {
              path: 'test-project/src/index.ts',
              content: 'export const greeting = "Hello, claude-zen!";',
            },
            dependencies: ['mkdir-src'],
          },
        ],
      };

      const result = (await batchExecuteTool.handler(params)) as MCPToolResult;

      expect(result?.success).toBe(true);

      const responseText = result?.content?.[0]?.text;
      expect(responseText).toContain('3 successful');
      expect(responseText).toContain('0 failed');
    }, 8000);

    it('should provide proper error handling for failed operations', async () => {
      const params = {
        operations: [
          {
            type: 'file' as const,
            operation: 'write',
            params: {
              path: '/invalid/path/that/should/fail/file.txt',
              content: 'This should fail',
            },
          },
        ],
      };

      const result = (await batchExecuteTool.handler(params)) as MCPToolResult;

      // Even if operations fail, the MCP tool should return success with error details
      expect(result).toBeDefined();
      expect(result?.content).toBeDefined();
    }, 5000);
  });

  describe('ðŸŽ¯ Project Init Batch Tool - Full Project Setup', () => {
    it('should initialize a complete project with claude-zen optimization', async () => {
      const params = {
        projectName: 'claude-zen-test',
        basePath: '/tmp/claude-zen-test',
        swarmConfig: {
          topology: 'hierarchical' as const,
          maxAgents: 8,
        },
        agentTypes: ['researcher', 'coder', 'analyst', 'tester'],
        fileStructure: {
          '/tmp/claude-zen-test/src/utils': null,
          '/tmp/claude-zen-test/src/components': null,
        },
        packageJson: {
          description: 'A test project for claude-zen batch operations',
          scripts: {
            build: 'tsc',
            test: 'jest',
          },
        },
      };

      const result = (await projectInitBatchTool.handler(
        params
      )) as MCPToolResult;

      expect(result?.success).toBe(true);

      const responseText = result?.content?.[0]?.text;
      expect(responseText).toContain(
        'Project "claude-zen-test" Initialized Successfully!'
      );
      expect(responseText).toContain('speed improvement');
      expect(responseText).toContain('token reduction');
      expect(responseText).toContain('Swarm initialized');
      expect(responseText).toContain(
        'Agents spawned: researcher, coder, analyst, tester'
      );

      // Verify it mentions the claude-zen performance
      expect(responseText).toMatch(/\d+x speed improvement/);
      expect(responseText).toMatch(/\d+% token reduction/);
    }, 10000);

    it('should use sensible defaults when minimal config provided', async () => {
      const params = {
        projectName: 'minimal-test',
        basePath: '/tmp/minimal-test',
      };

      const result = (await projectInitBatchTool.handler(
        params
      )) as MCPToolResult;

      expect(result?.success).toBe(true);

      const responseText = result?.content?.[0]?.text;
      expect(responseText).toContain(
        'Project "minimal-test" Initialized Successfully!'
      );
      expect(responseText).toContain(
        'Agents spawned: researcher, coder, analyst'
      ); // Default agents
      expect(responseText).toContain('hierarchical'); // Default topology
    }, 8000);
  });

  describe('ðŸ“Š Batch Performance Tool - Monitoring and Analytics', () => {
    it('should provide performance summary', async () => {
      // First, execute some batch operations to generate metrics
      await batchExecuteTool.handler({
        operations: [
          {
            type: 'file' as const,
            operation: 'write',
            params: { path: '/tmp/test1.txt', content: 'test' },
          },
          {
            type: 'file' as const,
            operation: 'write',
            params: { path: '/tmp/test2.txt', content: 'test' },
          },
        ],
      });

      // Now get performance summary
      const result = (await batchPerformanceTool.handler({
        action: 'summary',
        hours: 1,
      })) as MCPToolResult;

      expect(result?.success).toBe(true);

      const responseText = result?.content?.[0]?.text;
      expect(responseText).toContain('Batch Performance Summary');
      expect(responseText).toContain('Total Executions:');
      expect(responseText).toContain('Average Speed Improvement:');
      expect(responseText).toContain('Average Token Reduction:');
      expect(responseText).toContain('Claude-zen Target Assessment:');
    });

    it('should provide performance trends analysis', async () => {
      const result = (await batchPerformanceTool.handler({
        action: 'trends',
        metric: 'throughput',
        hours: 24,
      })) as MCPToolResult;

      expect(result?.success).toBe(true);

      const responseText = result?.content?.[0]?.text;
      expect(responseText).toContain('Performance Trends - throughput');
      expect(responseText).toContain('Trend Direction:');
      expect(responseText).toContain('Change Rate:');
    });

    it('should clear performance history', async () => {
      const result = (await batchPerformanceTool.handler({
        action: 'clear',
      })) as MCPToolResult;

      expect(result?.success).toBe(true);

      const responseText = result?.content?.[0]?.text;
      expect(responseText).toContain('Performance History Cleared');
    });

    it('should handle unknown actions gracefully', async () => {
      const result = (await batchPerformanceTool.handler({
        action: 'unknown_action' as any,
      })) as MCPToolResult;

      expect(result?.success).toBe(false);

      const responseText = result?.content?.[0]?.text;
      expect(responseText).toContain('Unknown action');
    });
  });

  describe('ðŸŽ¯ Claude-zen Compliance Validation', () => {
    it('should demonstrate superiority over sequential operations', async () => {
      // Execute a substantial batch operation
      const batchParams = {
        operations: Array.from({ length: 8 }, (_, i) => ({
          type: 'file' as const,
          operation: 'write',
          params: {
            path: `/tmp/batch-test-${i}.txt`,
            content: `File ${i} content generated by batch operation`,
          },
        })),
        config: {
          maxConcurrency: 6,
          trackPerformance: true,
        },
      };

      const result = (await batchExecuteTool.handler(
        batchParams
      )) as MCPToolResult;

      expect(result?.success).toBe(true);

      const responseText = result?.content?.[0]?.text;

      // Extract speed improvement from response
      const speedMatch = responseText?.match(
        /Speed Improvement:\s*\*\*([\d.]+)x\*\*/
      );
      expect(speedMatch).toBeTruthy();

      if (speedMatch) {
        const speedImprovement = Number.parseFloat(speedMatch?.[1]);
        // Should show significant improvement for batch operations
        expect(speedImprovement).toBeGreaterThan(1.5); // At least 1.5x improvement
      }

      // Should mention the claude-zen principle
      expect(responseText).toContain('Operations: 8');
      expect(responseText).toContain('successful');
    }, 10000);

    it('should report token reduction benefits', async () => {
      const params = {
        operations: [
          {
            type: 'swarm' as const,
            operation: 'init',
            params: { topology: 'mesh' },
          },
          {
            type: 'swarm' as const,
            operation: 'spawn',
            params: { type: 'researcher' },
          },
          {
            type: 'swarm' as const,
            operation: 'spawn',
            params: { type: 'coder' },
          },
          {
            type: 'file' as const,
            operation: 'mkdir',
            params: { path: '/tmp/token-test' },
          },
          {
            type: 'file' as const,
            operation: 'write',
            params: {
              path: '/tmp/token-test/app.ts',
              content: 'console.log("Token reduction test");',
            },
          },
        ],
        config: {
          trackPerformance: true,
        },
      };

      const result = (await batchExecuteTool.handler(params)) as MCPToolResult;

      expect(result?.success).toBe(true);

      const responseText = result?.content?.[0]?.text;

      // Should report token reduction
      expect(responseText).toMatch(/Token Reduction:\s*\*\*[\d.]+%\*\*/);

      // Extract token reduction value
      const tokenMatch = responseText?.match(
        /Token Reduction:\s*\*\*([\d.]+)%\*\*/
      );
      if (tokenMatch) {
        const tokenReduction = Number.parseFloat(tokenMatch?.[1]);
        // Should show some token reduction benefit
        expect(tokenReduction).toBeGreaterThanOrEqual(0);
      }
    });
  });
});
