/**
 * Claude-Zen TDD London Mock Classes
 *
 * Specialized mock classes for Claude-Zen architecture following TDD London pattern.
 * Generated by SWARM ORCHESTRATOR for systematic mock conversion.
 */

import { jest } from '@jest/globals';

// ============================================================================
// Claude-Zen Architecture Mock Classes
// ============================================================================

/**
 * MockHiveMindService - Central coordination system
 * Replaces: mockHiveMind = { initialize: vi.fn(), spawnQueen: vi.fn()... }
 */
export class MockHiveMindService {
  initialize: jest.MockedFunction<() => Promise<void>> = jest.fn();
  spawnQueen: jest.MockedFunction<(config: any) => Promise<string>> = jest.fn();
  coordinateQueens: jest.MockedFunction<(task: any) => Promise<CoordinationResult>> = jest.fn();
  processTask: jest.MockedFunction<(taskId: string) => Promise<TaskResult>> = jest.fn();
  getQueenStatus: jest.MockedFunction<(queenId: string) => Promise<QueenStatus>> = jest.fn();

  constructor() {
    this.initialize.mockResolvedValue(undefined);
    this.spawnQueen.mockResolvedValue('queen-123');
    this.coordinateQueens.mockResolvedValue({
      success: true,
      coordinationId: 'coord-123',
      activeQueens: 3,
      taskId: 'task-456',
    });
    this.processTask.mockResolvedValue({
      taskId: 'task-456',
      status: 'completed',
      result: 'Task processed successfully',
    });
    this.getQueenStatus.mockResolvedValue({
      queenId: 'queen-123',
      status: 'active',
      capabilities: ['analyze', 'design'],
    });
  }

  // TDD London interaction testing helpers
  expectInitializeCalled() {
    expect(this.initialize).toHaveBeenCalled();
    return this;
  }

  expectQueenSpawned(config?: any) {
    if (config) {
      expect(this.spawnQueen).toHaveBeenCalledWith(expect.objectContaining(config));
    } else {
      expect(this.spawnQueen).toHaveBeenCalled();
    }
    return this;
  }

  expectQueensCoordinated(task: any) {
    expect(this.coordinateQueens).toHaveBeenCalledWith(expect.objectContaining(task));
    return this;
  }

  expectTaskProcessed(taskId: string) {
    expect(this.processTask).toHaveBeenCalledWith(taskId);
    return this;
  }

  expectStatusChecked(queenId: string) {
    expect(this.getQueenStatus).toHaveBeenCalledWith(queenId);
    return this;
  }

  setupCoordinationFailure(error: string = 'Coordination failed') {
    this.coordinateQueens.mockRejectedValueOnce(new Error(error));
    return this;
  }

  clearAllMocks() {
    jest.clearAllMocks();
    return this;
  }
}

/**
 * MockQueensService - Specialized AI agents coordination
 * Replaces: mockQueens = { architectQueen: { analyze: vi.fn()... }... }
 */
export class MockQueensService {
  // Architect Queen methods
  architectAnalyze: jest.MockedFunction<(requirements: any) => Promise<ArchitectureResult>> =
    jest.fn();
  architectDesign: jest.MockedFunction<(spec: any) => Promise<DesignResult>> = jest.fn();
  architectCoordinate: jest.MockedFunction<(teams: string[]) => Promise<void>> = jest.fn();

  // Code Queen methods
  codeGenerate: jest.MockedFunction<(spec: any) => Promise<CodeResult>> = jest.fn();
  codeRefactor: jest.MockedFunction<(code: string) => Promise<string>> = jest.fn();
  codeOptimize: jest.MockedFunction<(code: string) => Promise<OptimizationResult>> = jest.fn();

  // Debug Queen methods
  debugDiagnose: jest.MockedFunction<(issue: any) => Promise<DiagnosisResult>> = jest.fn();
  debugFix: jest.MockedFunction<(issue: any) => Promise<FixResult>> = jest.fn();
  debugValidate: jest.MockedFunction<(fix: any) => Promise<ValidationResult>> = jest.fn();

  constructor() {
    // Default successful responses
    this.architectAnalyze.mockResolvedValue({
      success: true,
      architecture: 'microservices',
      components: ['api', 'db', 'ui'],
    });
    this.architectDesign.mockResolvedValue({
      success: true,
      design: 'component-based',
      files: ['component.ts', 'service.ts'],
    });
    this.architectCoordinate.mockResolvedValue(undefined);

    this.codeGenerate.mockResolvedValue({
      success: true,
      code: 'export class GeneratedCode {}',
      files: 1,
    });
    this.codeRefactor.mockResolvedValue('export class RefactoredCode {}');
    this.codeOptimize.mockResolvedValue({
      success: true,
      optimizations: 2,
      performanceGain: 15,
    });

    this.debugDiagnose.mockResolvedValue({
      success: true,
      issues: ['memory leak', 'performance'],
      severity: 'medium',
    });
    this.debugFix.mockResolvedValue({
      success: true,
      fixed: true,
      changes: 3,
    });
    this.debugValidate.mockResolvedValue({
      success: true,
      validated: true,
      confidence: 0.95,
    });
  }

  // TDD London helpers for Architect Queen
  expectArchitectAnalyzeCalled(requirements: any) {
    expect(this.architectAnalyze).toHaveBeenCalledWith(expect.objectContaining(requirements));
    return this;
  }

  expectArchitectDesignCalled(spec: any) {
    expect(this.architectDesign).toHaveBeenCalledWith(expect.objectContaining(spec));
    return this;
  }

  expectArchitectCoordinationCalled(teams: string[]) {
    expect(this.architectCoordinate).toHaveBeenCalledWith(expect.arrayContaining(teams));
    return this;
  }

  // TDD London helpers for Code Queen
  expectCodeGenerationCalled(spec: any) {
    expect(this.codeGenerate).toHaveBeenCalledWith(expect.objectContaining(spec));
    return this;
  }

  expectCodeRefactoringCalled(code: string) {
    expect(this.codeRefactor).toHaveBeenCalledWith(code);
    return this;
  }

  expectCodeOptimizationCalled(code: string) {
    expect(this.codeOptimize).toHaveBeenCalledWith(code);
    return this;
  }

  // TDD London helpers for Debug Queen
  expectDiagnosisCalled(issue: any) {
    expect(this.debugDiagnose).toHaveBeenCalledWith(expect.objectContaining(issue));
    return this;
  }

  expectFixCalled(issue: any) {
    expect(this.debugFix).toHaveBeenCalledWith(expect.objectContaining(issue));
    return this;
  }

  expectValidationCalled(fix: any) {
    expect(this.debugValidate).toHaveBeenCalledWith(expect.objectContaining(fix));
    return this;
  }

  // Workflow testing helpers
  expectFullArchitectWorkflow(requirements: any, spec: any, teams: string[]) {
    this.expectArchitectAnalyzeCalled(requirements);
    this.expectArchitectDesignCalled(spec);
    this.expectArchitectCoordinationCalled(teams);
    return this;
  }

  expectFullCodeWorkflow(spec: any, code: string) {
    this.expectCodeGenerationCalled(spec);
    this.expectCodeRefactoringCalled(code);
    this.expectCodeOptimizationCalled(code);
    return this;
  }

  expectFullDebugWorkflow(issue: any, fix: any) {
    this.expectDiagnosisCalled(issue);
    this.expectFixCalled(issue);
    this.expectValidationCalled(fix);
    return this;
  }

  clearAllMocks() {
    jest.clearAllMocks();
    return this;
  }
}

/**
 * MockNeuralFrameworkService - ruv-FANN Neural Integration
 * Replaces: mockNeuralFramework = { initializeNetwork: vi.fn()... }
 */
export class MockNeuralFrameworkService {
  initializeNetwork: jest.MockedFunction<(config: NetworkConfig) => Promise<string>> = jest.fn();
  trainModel: jest.MockedFunction<
    (networkId: string, data: TrainingData) => Promise<TrainingResult>
  > = jest.fn();
  predict: jest.MockedFunction<(networkId: string, input: number[]) => Promise<number[]>> =
    jest.fn();
  evaluateModel: jest.MockedFunction<
    (networkId: string, testData: TestData) => Promise<EvaluationResult>
  > = jest.fn();
  saveModel: jest.MockedFunction<(networkId: string, path: string) => Promise<void>> = jest.fn();
  loadModel: jest.MockedFunction<(path: string) => Promise<string>> = jest.fn();

  constructor() {
    this.initializeNetwork.mockResolvedValue('network-123');
    this.trainModel.mockResolvedValue({
      success: true,
      epochs: 100,
      finalError: 0.01,
      trainingTime: 5000,
    });
    this.predict.mockResolvedValue([0.95, 0.05]);
    this.evaluateModel.mockResolvedValue({
      success: true,
      accuracy: 0.95,
      precision: 0.93,
      recall: 0.94,
    });
    this.saveModel.mockResolvedValue(undefined);
    this.loadModel.mockResolvedValue('network-loaded-456');
  }

  expectNetworkInitialized(config: NetworkConfig) {
    expect(this.initializeNetwork).toHaveBeenCalledWith(expect.objectContaining(config));
    return this;
  }

  expectModelTrained(networkId: string, data?: TrainingData) {
    if (data) {
      expect(this.trainModel).toHaveBeenCalledWith(networkId, expect.objectContaining(data));
    } else {
      expect(this.trainModel).toHaveBeenCalledWith(networkId, expect.any(Object));
    }
    return this;
  }

  expectPredictionMade(networkId: string, input: number[]) {
    expect(this.predict).toHaveBeenCalledWith(networkId, expect.arrayContaining(input));
    return this;
  }

  expectModelEvaluated(networkId: string) {
    expect(this.evaluateModel).toHaveBeenCalledWith(networkId, expect.any(Object));
    return this;
  }

  expectModelSaved(networkId: string, path: string) {
    expect(this.saveModel).toHaveBeenCalledWith(networkId, path);
    return this;
  }

  expectModelLoaded(path: string) {
    expect(this.loadModel).toHaveBeenCalledWith(path);
    return this;
  }

  setupTrainingFailure(error: string = 'Training failed') {
    this.trainModel.mockRejectedValueOnce(new Error(error));
    return this;
  }

  clearAllMocks() {
    jest.clearAllMocks();
    return this;
  }
}

/**
 * MockClaudeZenApiService - REST API Layer
 * Replaces: mockClaudeZenApi = { startServer: vi.fn()... }
 */
export class MockClaudeZenApiService {
  startServer: jest.MockedFunction<(port: number) => Promise<void>> = jest.fn();
  registerQueenEndpoints: jest.MockedFunction<(queens: string[]) => Promise<void>> = jest.fn();
  handleRequest: jest.MockedFunction<(request: ApiRequest) => Promise<ApiResponse>> = jest.fn();
  stopServer: jest.MockedFunction<() => Promise<void>> = jest.fn();

  constructor() {
    this.startServer.mockResolvedValue(undefined);
    this.registerQueenEndpoints.mockResolvedValue(undefined);
    this.handleRequest.mockResolvedValue({
      success: true,
      data: { result: 'API call successful' },
      status: 200,
    });
    this.stopServer.mockResolvedValue(undefined);
  }

  expectServerStarted(port: number) {
    expect(this.startServer).toHaveBeenCalledWith(port);
    return this;
  }

  expectQueenEndpointsRegistered(queens: string[]) {
    expect(this.registerQueenEndpoints).toHaveBeenCalledWith(expect.arrayContaining(queens));
    return this;
  }

  expectRequestHandled(request: ApiRequest) {
    expect(this.handleRequest).toHaveBeenCalledWith(expect.objectContaining(request));
    return this;
  }

  expectServerStopped() {
    expect(this.stopServer).toHaveBeenCalled();
    return this;
  }

  clearAllMocks() {
    jest.clearAllMocks();
    return this;
  }
}

// ============================================================================
// Type Definitions for Claude-Zen Architecture
// ============================================================================

export interface CoordinationResult {
  success: boolean;
  coordinationId: string;
  activeQueens: number;
  taskId: string;
}

export interface TaskResult {
  taskId: string;
  status: 'completed' | 'failed' | 'in-progress';
  result: string;
}

export interface QueenStatus {
  queenId: string;
  status: 'active' | 'inactive' | 'busy';
  capabilities: string[];
}

export interface ArchitectureResult {
  success: boolean;
  architecture: string;
  components: string[];
}

export interface DesignResult {
  success: boolean;
  design: string;
  files: string[];
}

export interface CodeResult {
  success: boolean;
  code: string;
  files: number;
}

export interface OptimizationResult {
  success: boolean;
  optimizations: number;
  performanceGain: number;
}

export interface DiagnosisResult {
  success: boolean;
  issues: string[];
  severity: 'low' | 'medium' | 'high' | 'critical';
}

export interface FixResult {
  success: boolean;
  fixed: boolean;
  changes: number;
}

export interface ValidationResult {
  success: boolean;
  validated: boolean;
  confidence: number;
}

export interface NetworkConfig {
  inputSize: number;
  hiddenLayers: number[];
  outputSize: number;
}

export interface TrainingData {
  inputs: number[][];
  outputs: number[][];
}

export interface TestData {
  inputs: number[][];
  expectedOutputs: number[][];
}

export interface TrainingResult {
  success: boolean;
  epochs: number;
  finalError: number;
  trainingTime: number;
}

export interface EvaluationResult {
  success: boolean;
  accuracy: number;
  precision: number;
  recall: number;
}

export interface ApiRequest {
  method: string;
  path: string;
  body?: any;
  params?: any;
}

export interface ApiResponse {
  success: boolean;
  data: any;
  status: number;
}

// ============================================================================
// Factory Function for Claude-Zen Mock Creation
// ============================================================================

/**
 * Factory function to create complete Claude-Zen mock suite
 */
export function createClaudeZenMocks() {
  return {
    hiveMind: new MockHiveMindService(),
    queens: new MockQueensService(),
    neuralFramework: new MockNeuralFrameworkService(),
    api: new MockClaudeZenApiService(),
  };
}

/**
 * Helper to clear all Claude-Zen mocks
 */
export function clearAllClaudeZenMocks(mocks: ReturnType<typeof createClaudeZenMocks>) {
  Object.values(mocks).forEach((mock) => mock.clearAllMocks());
}
