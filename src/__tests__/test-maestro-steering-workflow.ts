#!/usr/bin/env node

/**
 * Test for Maestro Steering Workflow
 * Tests steering document creation and management
 */

import { mkdir, writeFile } from 'fs/promises';
import { join } from 'path';

// Test steering workflow
async function testMaestroSteeringWorkflow(): Promise<void> {
  console.log('🧪 Testing Maestro Steering Workflow');
  console.log('='.repeat(50));

  class TestSteeringWorkflow {
    async createSteeringDocuments(domain: string): Promise<void> {
      console.log(`
      🎯 Creating steering documents for domain: ${domain}`);

      // Create steering directory
      const steeringDir = join(process.cwd(), 'docs', 'maestro', 'steering', domain);
      await mkdir(steeringDir, { recursive: true });

      // Generate steering content
      const steeringContent = `# ${domain} Steering Document

## Overview
Steering document for ${domain} domain activities.

## Guidelines
- Follow established patterns
- Maintain code quality
- Document decisions

*Generated by Steering Test*
`;

      const steeringFile = join(steeringDir, `${domain}-steering.md`);
      await writeFile(steeringFile, steeringContent);

      console.log(`✅ Steering document created: ${steeringFile}`);
    }

    async testSteeringWorkflow(): Promise<void> {
      const testDomains = ['frontend', 'backend', 'testing'];

      for (const domain of testDomains) {
        await this.createSteeringDocuments(domain);

        // Brief pause between domains
        await new Promise((resolve) => setTimeout(resolve, 100));
      }

      console.log(`
      📊 Created steering documents for ${testDomains.length} domains`);
    }
  }

  try {
    const steering = new TestSteeringWorkflow();
    await steering.testSteeringWorkflow();

    console.log(`
      🎉 Steering workflow test completed successfully!`);
  } catch (error) {
    console.error(
      `
      ❌ Steering test failed:`,
      error
    );
    process.exit(1);
  }
}

// Run the test
if (import.meta.url === `file://${process.argv[1]}`) {
  testMaestroSteeringWorkflow().catch((error) => {
    console.error('Test execution failed:', error);
    process.exit(1);
  });
}
