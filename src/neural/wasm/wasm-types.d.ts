// Auto-generated TypeScript definitions for WASM module
// Generated by build script

export interface WASMExports {
  memory: WebAssembly.Memory;
  init(): void;
  get_version(): string;
  has_simd_support(): boolean;

  // Runtime features
  RuntimeFeatures: {
    new (): RuntimeFeatures;
  };

  // Swarm class
  ZenSwarm: {
    new (config: SwarmConfig): ZenSwarm;
  };

  // Agent class
  JsAgent: {
    readonly prototype: JsAgent;
  };

  // Utility functions
  console_log(message: string): void;
  console_error(message: string): void;
  console_warn(message: string): void;
  format_js_error(error: Error | unknown): string;
  get_wasm_memory_usage(): bigint;

  // Array conversion utilities
  js_array_to_vec_f32(array: number[] | Float32Array): Float32Array;
  vec_f32_to_js_array(vec: Float32Array): number[];
}

export interface RuntimeFeatures {
  readonly simd_available: boolean;
  readonly threads_available: boolean;
  readonly memory_limit: bigint;
  get_features_json(): string;
}

export interface ZenSwarm {
  readonly name: string;
  readonly agent_count: number;
  readonly max_agents: number;
  spawn(config: AgentConfig): Promise<JsAgent>;
  orchestrate(task: TaskDescriptor): Promise<TaskResult>;
  get_agents(): string[];
  get_status(): SwarmStatus;
}

export interface JsAgent {
  readonly id: string;
  readonly agent_type: string;
  readonly status: string;
  readonly tasks_completed: number;
  execute(task: TaskDescriptor): Promise<TaskResult>;
  get_metrics(): AgentMetrics;
  get_capabilities(): string[];
  reset(): void;
}

export interface SwarmConfig {
  name?: string;
  topology?: 'mesh' | 'star' | 'hierarchical' | 'ring';
  strategy?: 'balanced' | 'specialized' | 'adaptive';
  maxAgents?: number;
  enableCognitiveDiversity?: boolean;
}

export interface AgentConfig {
  type?: 'researcher' | 'coder' | 'analyst' | 'optimizer' | 'coordinator';
  name?: string;
  capabilities?: string[];
  cognitivePattern?: string;
}

export interface TaskDescriptor {
  description: string;
  priority?: 'low' | 'medium' | 'high' | 'critical';
  dependencies?: string[];
  maxAgents?: number;
  estimatedDuration?: number;
}

export interface TaskResult {
  id: string;
  status: 'pending' | 'in_progress' | 'completed' | 'failed';
  result?: unknown;
  error?: string;
  duration?: number;
}

export interface SwarmStatus {
  id: string;
  agents: {
    total: number;
    active: number;
    idle: number;
  };
  tasks: {
    total: number;
    pending: number;
    in_progress: number;
    completed: number;
  };
  performance?: {
    throughput: number;
    latency: number;
  };
}

export interface AgentMetrics {
  tasksCompleted: number;
  averageExecutionTime: number;
  successRate: number;
  memoryUsage: number;
  capabilities: string[];
}
