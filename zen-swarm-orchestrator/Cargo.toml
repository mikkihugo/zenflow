# Part of zen-neural-stack workspace

[package]
name = "zen-orchestrator"
version.workspace = true
edition.workspace = true
rust-version.workspace = true
authors.workspace = true
license.workspace = true
repository.workspace = true
description = "Decentralized Autonomous Agent orchestration with THE COLLECTIVE coordination for zen-neural-stack"
readme = "README.md"
keywords = ["neural-network", "wasm", "swarm", "ai", "mcp", "zen-orchestrator", "collective", "daa"]
categories = ["algorithms", "science", "wasm", "web-programming"]

[lib]
name = "zen_orchestrator"
path = "src/lib.rs"

[dependencies]
# Async runtime (WASM-compatible subset)
tokio = { version = "1.47.1", features = ["sync", "macros", "time", "rt", "rt-multi-thread"], default-features = false }
async-trait = "0.1.88"

# Error handling
thiserror = "2.0.12"
anyhow = "1.0.98"

# Serialization
serde = { version = "1.0.219", features = ["derive"], default-features = false }
serde_json = { version = "1.0.142", default-features = false, features = ["alloc"] }

# Random number generation  
getrandom = { version = "0.2.15", default-features = false }
rand = { workspace = true, features = ["small_rng"] }

# Logging
tracing = "0.1.41"
tracing-subscriber = { version = "0.3.19", features = ["env-filter", "fmt"] }

# Collections and utilities
dashmap = "5.5"
futures = { version = "0.3.31", default-features = false, features = ["executor"] }
pin-project = "1.1.7"
parking_lot = "0.12.4"

# Date and time
chrono = { version = "0.4", features = ["serde"] }

# No-std support
no-std-compat = { version = "0.4.1", features = ["alloc"] }
heapless = "0.8.0"

# CLI dependencies
clap = { version = "4.5.35", features = ["derive"] }
atty = "0.2.14"

# WASM dependencies
wasm-bindgen = "0.2.100"
js-sys = "0.3.77"
web-sys = { version = "0.3.77", features = ["console", "Window"] }
# wee_alloc removed due to security vulnerability GHSA-rc23-xxgq-x27g

# Neural stack dependencies - DIRECT INTEGRATION for performance
zen-neural = { path = "../zen-neural" }
zen-forecasting = { path = "../zen-forecasting" }
zen-compute = { path = "../zen-compute" }

# Vector database integration (Lance already integrated via zen-swarm-vector)
zen-swarm-vector = { path = "crates/zen-swarm-vector" }

# MCP dependencies
axum = "0.7.9"
tower = "0.4.13"
tokio-tungstenite = "0.27.0"
schemars = "0.8.21"
uuid = { version = "1.11.0", features = ["v4", "serde"] }

# Transport dependencies
tungstenite = "0.27.0"
shared_memory = "0.12.4"

# Persistence dependencies - migrated to libSQL for better maintenance
libsql = { version = "0.9.20", features = ["core", "serde"] }
r2d2 = "0.8.10"

[dev-dependencies]
# Development dependencies
criterion = "0.5.1"
proptest = "1.7.0"

# Profile configurations moved to workspace root

# Note: Migrated from rusqlite to libSQL for:
# - Better maintenance and active development
# - 100% SQLite compatibility with enhanced features
# - Same API surface with improved performance
# - Eliminates SQLite linking conflicts

# ARCHITECTURAL DECISION: Two Binary Architecture
# 
# FINAL ARCHITECTURE - TWO BINARIES:
# 1. zen-code: THE COLLECTIVE + orchestrator + web + neural processing
# 2. zen-swarm: Repository daemon only
#
# zen-orchestrator becomes PART OF zen-code binary (not separate plugin):
# zen-code binary contains:
# - THE COLLECTIVE (TypeScript core)
# - zen-orchestrator (this crate - integrated into zen-code binary)
# - zen-neural, zen-forecasting, zen-compute (DIRECT Rust integration)
# - Web interface for project management
# - Central analytics and cross-project coordination
# - Unified Cozy + Lance database system
# - Multi-provider LLM infrastructure
#
# zen-swarm binary contains:
# - Repository daemon only
# - Local task execution, file operations, git integration
# - Uses .zen/swarm/ storage
#
# Communication: zen-code â†” zen-swarm via A2A protocol
#
# STORAGE:
# - zen-code uses: .zen/collective/
# - zen-swarm uses: .zen/swarm/ 
#
# BENEFITS:
# - Clean binary separation: zen-code (intelligence) vs zen-swarm (execution)
# - Maximum performance: Direct neural library access in Rust
# - Unified database: Cozy + Lance system in both binaries
# - Independent deployment: Can run separately or together
# - Clear responsibilities: Intelligence vs execution
# - Best of both worlds: Rust neural performance + TypeScript ecosystem


