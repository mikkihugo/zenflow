#!/usr/bin/env node

/**
 * Build script for ruv-swarm WASM module
 */

import { execSync } from 'node:child_process';
import fs from 'node:fs/promises';
import path from 'node:path';
import { fileURLToPath } from 'node:url';

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

async function build() {
  const npmDir = path.join(__dirname, '..');
  const crateDir = path.join(npmDir, '..', 'crates', 'ruv-swarm-wasm');
  const wasmDir = path.join(npmDir, 'wasm');
  const wasmSIMDDir = path.join(npmDir, 'wasm-simd');

  try {
    // Check if wasm-pack is installed
    try {
      execSync('wasm-pack --version', { stdio: 'ignore' });
    } catch (_error) {
      console.error('Error: wasm-pack is not installed.');
      console.error(
        'Install it with: curl https://rustwasm.github.io/wasm-pack/installer/init.sh -sSf | sh',
      );
      process.exit(1);
    }

    // Check if Rust is installed
    try {
      execSync('rustc --version', { stdio: 'ignore' });
    } catch (_error) {
      console.error('Error: Rust is not installed.');
      console.error('Install it from: https://rustup.rs/');
      process.exit(1);
    }

    // Create output directories
    await fs.mkdir(wasmDir, { recursive: true });
    await fs.mkdir(wasmSIMDDir, { recursive: true });
    execSync(
      `wasm-pack build --target web --out-dir ${wasmDir} --no-typescript`,
      {
        cwd: crateDir,
        stdio: 'inherit',
      },
    );
    execSync(
      `RUSTFLAGS="-C target-feature=+simd128" wasm-pack build --target web --out-dir ${wasmSIMDDir} --no-typescript`,
      { cwd: crateDir, stdio: 'inherit' },
    );

    // Copy SIMD module to main wasm directory
    const simdWasmPath = path.join(wasmSIMDDir, 'ruv_swarm_wasm_bg.wasm');
    const simdTargetPath = path.join(wasmDir, 'ruv_swarm_simd.wasm');
    await fs.copyFile(simdWasmPath, simdTargetPath);

    // Optimize WASM modules with wasm-opt if available
    try {
      execSync('wasm-opt --version', { stdio: 'ignore' });

      const wasmFiles = await fs.readdir(wasmDir);
      for (const file of wasmFiles) {
        if (file.endsWith('.wasm')) {
          const filePath = path.join(wasmDir, file);
          execSync(`wasm-opt -Oz ${filePath} -o ${filePath}`, {
            stdio: 'inherit',
          });
        }
      }
    } catch (_error) {}
    const dtsContent = await generateTypeScriptDefinitions();
    await fs.writeFile(path.join(npmDir, 'src', 'wasm-types.d.ts'), dtsContent);

    // Clean up temporary SIMD directory
    await fs.rm(wasmSIMDDir, { recursive: true, force: true });
  } catch (error) {
    console.error('\nBuild failed:', error.message);
    process.exit(1);
  }
}

async function generateTypeScriptDefinitions() {
  return `// Auto-generated TypeScript definitions for WASM module
// Generated by build script

export interface WASMExports {
  memory: WebAssembly.Memory;
  init(): void;
  get_version(): string;
  has_simd_support(): boolean;
  
  // Runtime features
  RuntimeFeatures: {
    new(): RuntimeFeatures;
  };
  
  // Swarm class
  RuvSwarm: {
    new(config: any): RuvSwarm;
  };
  
  // Agent class
  JsAgent: {
    readonly prototype: JsAgent;
  };
  
  // Utility functions
  console_log(message: string): void;
  console_error(message: string): void;
  console_warn(message: string): void;
  format_js_error(error: any): string;
  get_wasm_memory_usage(): bigint;
  
  // Array conversion utilities
  js_array_to_vec_f32(array: any): Float32Array;
  vec_f32_to_js_array(vec: Float32Array): any;
}

export interface RuntimeFeatures {
  readonly simd_available: boolean;
  readonly threads_available: boolean;
  readonly memory_limit: bigint;
  get_features_json(): string;
}

export interface RuvSwarm {
  readonly name: string;
  readonly agent_count: number;
  readonly max_agents: number;
  spawn(config: any): Promise<JsAgent>;
  orchestrate(task: any): Promise<any>;
  get_agents(): string[];
  get_status(): any;
}

export interface JsAgent {
  readonly id: string;
  readonly agent_type: string;
  readonly status: string;
  readonly tasks_completed: number;
  execute(task: any): Promise<any>;
  get_metrics(): any;
  get_capabilities(): string[];
  reset(): void;
}
`;
}

// Run build
build();
