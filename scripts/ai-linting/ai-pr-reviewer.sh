#!/usr/bin/env bash

# AI Pull Request Reviewer
# Comprehensive AI code review using Claude Code

set -euo pipefail

GREEN='\033[0;32m'
BLUE='\033[0;34m'
YELLOW='\033[1;33m'
RED='\033[0;31m'
NC='\033[0m'

log() { echo -e "${GREEN}[AI-REVIEW]${NC} $1"; }
info() { echo -e "${BLUE}[INFO]${NC} $1"; }
warn() { echo -e "${YELLOW}[WARNING]${NC} $1"; }
error() { echo -e "${RED}[ERROR]${NC} $1"; }

# Configuration
DEFAULT_BASE_BRANCH="main"
REVIEW_DIR="ai-reviews"
TIMESTAMP=$(date '+%Y%m%d_%H%M%S')

generate_pr_review() {
    local base_branch="${1:-$DEFAULT_BASE_BRANCH}"
    local review_file="${REVIEW_DIR}/pr-review-${TIMESTAMP}.md"
    
    mkdir -p "$REVIEW_DIR"
    
    log "üîç Generating AI code review against branch: $base_branch"
    
    # Get changed files
    mapfile -t changed_files < <(git diff --name-only "$base_branch"...HEAD | grep -E '\.(ts|tsx|js|jsx)$' || true)
    
    if [ ${#changed_files[@]} -eq 0 ]; then
        warn "No code files changed in this PR"
        return
    fi
    
    log "üìù Reviewing ${#changed_files[@]} changed files..."
    
    # Initialize review report
    cat > "$review_file" <<EOF
# ü§ñ AI Code Review Report

**Generated**: $(date)  
**Branch**: $(git branch --show-current)
**Base**: $base_branch
**Changed Files**: ${#changed_files[@]}

---

## üìä Review Summary

EOF

    # Analyze each changed file
    local total_score=0
    local file_count=0
    
    for file in "${changed_files[@]}"; do
        if [ ! -f "$file" ]; then
            continue
        fi
        
        ((file_count++))
        log "üß† AI reviewing: $(basename "$file")"
        
        # Get the diff for this file
        local diff_content=$(git diff "$base_branch"...HEAD -- "$file" || echo "No diff available")
        
        # AI analysis of the change
        local analysis=$(claude code <<EOF 2>/dev/null || echo "Analysis failed"
Review this code change for a pull request:

## File: $file

### Git Diff:
\`\`\`diff
$diff_content
\`\`\`

### Full File Context:
\`\`\`typescript
$(cat "$file")
\`\`\`

Provide a comprehensive code review:

## üìä Overall Score: X/10

## üéØ Change Assessment
- **Purpose**: What does this change accomplish?
- **Impact**: How significant is this change?
- **Risk Level**: Low/Medium/High

## üîç Detailed Review
### ‚úÖ Strengths
- [List positive aspects]

### ‚ö†Ô∏è Issues & Improvements
- [List issues with severity: üî¥ Critical, üü° Medium, üü¢ Minor]

### üß™ Testing Considerations
- [What should be tested]

### üí° Suggestions
- [Specific improvement recommendations]

## üèÜ Approval Status
- [ ] ‚úÖ Approve (high quality, minimal issues)
- [ ] üîÑ Request Changes (significant issues to address)
- [ ] üí¨ Comment (minor suggestions, but acceptable)

Keep review constructive and specific. Focus on code quality, security, performance, and maintainability.
EOF
)
        
        # Extract score for overall calculation
        local file_score=$(echo "$analysis" | grep -o "Score: [0-9]*/10" | grep -o "[0-9]*" | head -1 || echo "5")
        total_score=$((total_score + file_score))
        
        # Add to review report
        cat >> "$review_file" <<EOF

---

## üìÅ File: \`$(basename "$file")\`
**Path**: $file

$analysis

EOF
    done
    
    # Calculate overall score
    local overall_score=$((total_score / file_count))
    
    # Generate summary
    cat >> "$review_file" <<EOF

---

## üéØ Overall PR Assessment

**Overall Score**: $overall_score/10
**Files Reviewed**: $file_count
**Recommendation**: $([ $overall_score -ge 8 ] && echo "‚úÖ **APPROVE** - High quality changes" || [ $overall_score -ge 6 ] && echo "üí¨ **APPROVE WITH COMMENTS** - Good with minor suggestions" || echo "üîÑ **REQUEST CHANGES** - Significant issues to address")

## üöÄ Next Steps
$([ $overall_score -ge 8 ] && echo "- Ready to merge after standard checks" || [ $overall_score -ge 6 ] && echo "- Address minor comments, then merge" || echo "- Address critical issues before re-review")

---
*Generated by Claude Code AI Review System*
EOF

    log "üìÑ Review report saved: $review_file"
    log "üéØ Overall score: $overall_score/10"
    
    # Display summary
    if [ $overall_score -ge 8 ]; then
        log "‚úÖ APPROVED - High quality changes!"
    elif [ $overall_score -ge 6 ]; then
        warn "üí¨ APPROVED WITH COMMENTS - Minor suggestions"
    else
        error "üîÑ REQUEST CHANGES - Significant issues found"
    fi
    
    # Open review in less if available
    if command -v less >/dev/null; then
        info "üìñ Opening review report..."
        less "$review_file"
    fi
}

review_specific_files() {
    local files=("$@")
    local review_file="${REVIEW_DIR}/targeted-review-${TIMESTAMP}.md"
    
    mkdir -p "$REVIEW_DIR"
    
    log "üéØ Reviewing ${#files[@]} specific files..."
    
    cat > "$review_file" <<EOF
# üîç Targeted AI Code Review

**Generated**: $(date)  
**Files**: ${#files[@]}

---

EOF

    for file in "${files[@]}"; do
        if [ ! -f "$file" ]; then
            warn "File not found: $file"
            continue
        fi
        
        log "üß† Analyzing: $(basename "$file")"
        
        local analysis=$(claude code <<EOF 2>/dev/null || echo "Analysis failed"
Perform a thorough code review of this file:

## File: $file

\`\`\`typescript
$(cat "$file")
\`\`\`

Provide:
## üìä Quality Score: X/10

## üîç Code Analysis
### Architecture & Design
- Design pattern usage
- SOLID principles adherence
- Separation of concerns

### Code Quality
- Readability and clarity
- Error handling
- Documentation

### Performance & Security  
- Potential bottlenecks
- Security considerations
- Resource usage

### Maintainability
- Code complexity
- Future extensibility
- Refactoring opportunities

## üìã Specific Recommendations
1. **High Priority**: [Critical fixes]
2. **Medium Priority**: [Improvements]  
3. **Low Priority**: [Nice to have]

## üß™ Testing Recommendations
- Missing test scenarios
- Test improvement opportunities

Be specific and actionable in recommendations.
EOF
)
        
        cat >> "$review_file" <<EOF

---

## üìÅ \`$(basename "$file")\`

$analysis

EOF
    done
    
    log "üìÑ Targeted review saved: $review_file"
    
    if command -v less >/dev/null; then
        less "$review_file"
    fi
}

# Security-focused review
security_review() {
    log "üõ°Ô∏è Running security-focused AI review..."
    
    mapfile -t all_files < <(find src -name "*.ts" -o -name "*.js" | head -20)
    
    local security_report="${REVIEW_DIR}/security-review-${TIMESTAMP}.md"
    
    cat > "$security_report" <<EOF
# üõ°Ô∏è AI Security Review

**Generated**: $(date)
**Scope**: TypeScript/JavaScript files

---

EOF

    for file in "${all_files[@]}"; do
        log "üîí Security analysis: $(basename "$file")"
        
        local security_analysis=$(claude code <<EOF 2>/dev/null || echo "Security analysis failed"
Perform a security-focused review of this code:

\`\`\`typescript
$(cat "$file")
\`\`\`

Focus on:
## üõ°Ô∏è Security Assessment

### Input Validation
- User input handling
- Data sanitization
- Type validation

### Authentication & Authorization  
- Access control issues
- Token handling
- Permission checks

### Data Protection
- Sensitive data exposure
- Encryption usage
- Data leakage risks

### Injection Vulnerabilities
- SQL injection risks
- XSS potential
- Command injection

### Error Handling
- Information leakage in errors
- Proper error responses

### Dependencies
- Third-party library security
- Outdated dependencies

## üéØ Security Score: X/10
## üö® Critical Issues: [List any critical security problems]
## üí° Recommendations: [Security improvements]

Be thorough but concise.
EOF
)
        
        cat >> "$security_report" <<EOF

## üìÅ \`$(basename "$file")\`

$security_analysis

---

EOF
    done
    
    log "üõ°Ô∏è Security review saved: $security_report"
    
    if command -v less >/dev/null; then
        less "$security_report"
    fi
}

# Main execution
main() {
    case "${1:-pr}" in
        "pr")
            base_branch="${2:-$DEFAULT_BASE_BRANCH}"
            generate_pr_review "$base_branch"
            ;;
        "files")
            shift
            if [ $# -eq 0 ]; then
                error "Please specify files to review"
                exit 1
            fi
            review_specific_files "$@"
            ;;
        "security")
            security_review
            ;;
        *)
            echo "Usage: $0 [pr|files|security] [options...]"
            echo ""
            echo "Commands:"
            echo "  pr [base_branch]     - Review PR changes (default: main)"
            echo "  files file1 file2... - Review specific files"
            echo "  security            - Security-focused review"
            echo ""
            echo "Examples:"
            echo "  $0 pr                    # Review PR against main"
            echo "  $0 pr develop            # Review PR against develop"
            echo "  $0 files src/index.ts    # Review specific file"
            echo "  $0 security              # Security review"
            exit 1
            ;;
    esac
}

main "$@"