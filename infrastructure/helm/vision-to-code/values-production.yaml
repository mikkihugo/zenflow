# Production Environment Overrides for Vision-to-Code

global:
  environment: production
  imageRegistry: "registry.vision-to-code.com"
  
  # Production security settings
  securityContext:
    runAsNonRoot: true
    runAsUser: 1000
    fsGroup: 1000
    seccompProfile:
      type: RuntimeDefault
  
  # Pod security standards
  podSecurityContext:
    allowPrivilegeEscalation: false
    readOnlyRootFilesystem: true
    capabilities:
      drop:
        - ALL

# Production service configurations with high availability
businessService:
  replicaCount: 5
  
  resources:
    limits:
      cpu: 1000m
      memory: 2Gi
    requests:
      cpu: 500m
      memory: 1Gi
  
  autoscaling:
    enabled: true
    minReplicas: 3
    maxReplicas: 10
    targetCPUUtilizationPercentage: 60
    targetMemoryUtilizationPercentage: 70
    behavior:
      scaleDown:
        stabilizationWindowSeconds: 300
        policies:
        - type: Percent
          value: 10
          periodSeconds: 60
      scaleUp:
        stabilizationWindowSeconds: 60
        policies:
        - type: Percent
          value: 50
          periodSeconds: 60
  
  env:
    - name: LOG_LEVEL
      value: "info"
    - name: ENABLE_DEBUG_ENDPOINTS
      value: "false"
    - name: RATE_LIMIT_REQUESTS
      value: "10000"
    - name: REQUEST_TIMEOUT
      value: "30s"
  
  # Production pod disruption budget
  podDisruptionBudget:
    minAvailable: 2

coreService:
  replicaCount: 8
  
  resources:
    limits:
      cpu: 2000m
      memory: 4Gi
    requests:
      cpu: 1000m
      memory: 2Gi
  
  autoscaling:
    enabled: true
    minReplicas: 5
    maxReplicas: 15
    targetCPUUtilizationPercentage: 60
    targetMemoryUtilizationPercentage: 70
  
  # Production-grade connection pooling
  connectionPool:
    maxConnections: 1000
    minConnections: 100
    connectionTimeout: 5s
    idleTimeout: 300s
  
  podDisruptionBudget:
    minAvailable: 3

swarmService:
  replicaCount: 5
  
  resources:
    limits:
      cpu: 4000m
      memory: 8Gi
    requests:
      cpu: 2000m
      memory: 4Gi
  
  autoscaling:
    enabled: true
    minReplicas: 3
    maxReplicas: 20
    targetCPUUtilizationPercentage: 50
    targetMemoryUtilizationPercentage: 60
    # Custom metrics for agent count
    metrics:
    - type: External
      external:
        metric:
          name: active_agents
          selector:
            matchLabels:
              service: swarm-service
        target:
          type: AverageValue
          averageValue: "200"
  
  env:
    - name: MAX_AGENTS
      value: "5000"  # Production capacity
    - name: NEURAL_NETWORK_ENABLED
      value: "true"
    - name: ENABLE_PROFILING
      value: "false"
    - name: AGENT_TIMEOUT
      value: "300s"
    - name: MEMORY_LIMIT_PER_AGENT
      value: "512Mi"
  
  podDisruptionBudget:
    minAvailable: 2

developmentService:
  replicaCount: 4
  
  resources:
    limits:
      cpu: 2000m
      memory: 4Gi
    requests:
      cpu: 1000m
      memory: 2Gi
  
  autoscaling:
    enabled: true
    minReplicas: 3
    maxReplicas: 10
    targetCPUUtilizationPercentage: 65
  
  podDisruptionBudget:
    minAvailable: 2

# Production ingress with enhanced security
ingress:
  annotations:
    cert-manager.io/cluster-issuer: "letsencrypt-prod"
    nginx.ingress.kubernetes.io/rate-limit: "1000"  # Per IP rate limit
    nginx.ingress.kubernetes.io/limit-rps: "100"     # Global rate limit
    nginx.ingress.kubernetes.io/ssl-protocols: "TLSv1.2 TLSv1.3"
    nginx.ingress.kubernetes.io/ssl-ciphers: "ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256"
    nginx.ingress.kubernetes.io/enable-modsecurity: "true"
    nginx.ingress.kubernetes.io/enable-owasp-core-rules: "true"
    nginx.ingress.kubernetes.io/proxy-body-size: "10m"  # Strict size limit
    nginx.ingress.kubernetes.io/proxy-read-timeout: "300"
    nginx.ingress.kubernetes.io/proxy-send-timeout: "300"
    # Security headers
    nginx.ingress.kubernetes.io/configuration-snippet: |
      more_set_headers "X-Frame-Options: DENY";
      more_set_headers "X-Content-Type-Options: nosniff";
      more_set_headers "X-XSS-Protection: 1; mode=block";
      more_set_headers "Referrer-Policy: strict-origin-when-cross-origin";
      more_set_headers "Content-Security-Policy: default-src 'self'";
      more_set_headers "Permissions-Policy: geolocation=(), microphone=(), camera=()";
  hosts:
    - host: api.vision-to-code.com
      paths:
        - path: /api/v1/business
          pathType: Prefix
          service: business-service
        - path: /api/v1/core
          pathType: Prefix
          service: core-service
        - path: /api/v1/swarm
          pathType: Prefix
          service: swarm-service
        - path: /api/v1/development
          pathType: Prefix
          service: development-service
  tls:
    - secretName: vision-to-code-prod-tls
      hosts:
        - api.vision-to-code.com

# Production-grade monitoring
monitoring:
  prometheus:
    retention: 90d  # 3 months retention
    storageSize: 500Gi
    replicas: 3  # HA setup
    resources:
      limits:
        cpu: 2000m
        memory: 8Gi
      requests:
        cpu: 1000m
        memory: 4Gi
    # Remote write for long-term storage
    remoteWrite:
      - url: "https://metrics.vision-to-code.com/api/v1/write"
        tlsConfig:
          insecureSkipVerify: false
    alerting:
      alertmanagers:
        - namespace: monitoring
          name: alertmanager-main
          port: web
  
  grafana:
    adminPassword: "${GRAFANA_ADMIN_PASSWORD}"  # From sealed secret
    replicas: 2  # HA setup
    persistence:
      enabled: true
      size: 20Gi
      storageClass: gp3
    resources:
      limits:
        cpu: 500m
        memory: 1Gi
      requests:
        cpu: 250m
        memory: 512Mi
    # OAuth2 authentication
    auth:
      generic_oauth:
        enabled: true
        client_id: "${OAUTH_CLIENT_ID}"
        client_secret: "${OAUTH_CLIENT_SECRET}"
        scopes: "openid profile email"
        auth_url: "https://auth.vision-to-code.com/oauth/authorize"
        token_url: "https://auth.vision-to-code.com/oauth/token"
        api_url: "https://auth.vision-to-code.com/oauth/userinfo"

# Strict service mesh configuration
serviceMesh:
  istio:
    mtls:
      mode: STRICT  # Enforce mTLS
    tracing:
      sampling: 0.01  # 1% sampling for production
    circuitBreaker:
      consecutiveErrors: 5
      interval: 30s
      baseEjectionTime: 30s
      maxEjectionPercent: 50
    retryPolicy:
      attempts: 3
      perTryTimeout: 10s
      retryOn: "5xx,reset,connect-failure,refused-stream"
    timeout:
      global: 60s

# Production database backup
backup:
  enabled: true
  schedule: "0 1,13 * * *"  # Twice daily
  retention:
    days: 90  # 3 months
    weekly: 12  # Keep weekly backups for 3 months
    monthly: 12  # Keep monthly backups for 1 year
  s3:
    bucket: vision-to-code-production-backups
    region: us-east-1
    storageClass: GLACIER  # Cost-effective long-term storage
  verification:
    enabled: true
    schedule: "0 6 * * 0"  # Weekly verification

# Production security policies
securityPolicies:
  podSecurityPolicy:
    enabled: true
    allowedCapabilities: []
    requiredDropCapabilities:
      - ALL
    volumes:
      - configMap
      - secret
      - persistentVolumeClaim
      - emptyDir
    runAsUser:
      rule: MustRunAsNonRoot
    seLinux:
      rule: RunAsAny
    fsGroup:
      rule: RunAsAny
  
  networkPolicy:
    enabled: true
    allowedNamespaces:
      - kube-system
      - istio-system
      - monitoring
      - cert-manager
    egressRules:
      - to:
        - namespaceSelector:
            matchLabels:
              name: kube-system
        ports:
        - protocol: TCP
          port: 53  # DNS
      - to:
        - podSelector:
            matchLabels:
              app: postgresql
        ports:
        - protocol: TCP
          port: 5432

# Production resource quotas
resourceQuota:
  enabled: true
  limits:
    requests.cpu: "200"
    requests.memory: "400Gi"
    persistentvolumeclaims: "50"
    services.loadbalancers: "5"

# High availability settings
highAvailability:
  enabled: true
  podAntiAffinity:
    requiredDuringSchedulingIgnoredDuringExecution:
      - labelSelector:
          matchExpressions:
            - key: app
              operator: In
              values:
                - business-service
                - core-service
                - swarm-service
                - development-service
        topologyKey: kubernetes.io/hostname
  
  # Prefer spreading across zones
  topologySpreadConstraints:
    - maxSkew: 1
      topologyKey: topology.kubernetes.io/zone
      whenUnsatisfiable: DoNotSchedule
      labelSelector:
        matchLabels:
          app.kubernetes.io/instance: vision-to-code

# Production feature flags
featureFlags:
  enableBetaFeatures: false
  enableExperimentalAPIs: false
  enableDebugLogging: false
  enableMetricsCollection: true
  enableDistributedTracing: true
  enableAuditLogging: true
  enableComplianceMode: true

# External service endpoints (production)
externalServices:
  geminiApi:
    endpoint: "https://api.gemini.com/v1"
    timeout: 20s
    retries: 3
    circuitBreaker:
      enabled: true
      threshold: 5
      timeout: 30s
  claudeCode:
    endpoint: "https://claude-code-prod.internal:8443"
    timeout: 45s
    tlsVerify: true

# Production compliance and audit
compliance:
  enabled: true
  standards:
    - SOC2
    - ISO27001
    - GDPR
  auditLog:
    enabled: true
    retention: 2555  # 7 years
    encryption:
      enabled: true
      keyRotation: 90  # days